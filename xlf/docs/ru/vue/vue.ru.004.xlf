<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="vue">
    <body>
      <group id="vue">
        <trans-unit id="23ca9a44a1ade4d87027ae10b8309bece2e74a54" translate="yes" xml:space="preserve">
          <source>Prop Types</source>
          <target state="translated">Типы реквизита</target>
        </trans-unit>
        <trans-unit id="0d718a828e84189a6c1ea77a0099a78e06d7d7c9" translate="yes" xml:space="preserve">
          <source>Prop Validation</source>
          <target state="translated">Проверка достоверности реквизитов</target>
        </trans-unit>
        <trans-unit id="3ad34219a208945c8ea06d8eb918df83f7e61456" translate="yes" xml:space="preserve">
          <source>Prop definitions</source>
          <target state="translated">Определения реквизитов</target>
        </trans-unit>
        <trans-unit id="e2f4b4fdf875186ea4cf16dbb812dbea30216d87" translate="yes" xml:space="preserve">
          <source>Prop definitions &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Основные&lt;/sup&gt; определения &lt;sup&gt;реквизита&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="895e352dc19c97709d5567c55fe72b1a6d482c35" translate="yes" xml:space="preserve">
          <source>Prop name casing</source>
          <target state="translated">Корпус реквизита</target>
        </trans-unit>
        <trans-unit id="b90f11ae0da8cbfe0b2f736a16886c055d6bffd1" translate="yes" xml:space="preserve">
          <source>Prop name casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется&lt;/sup&gt; корпус с названием пропуска&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="82be74efa4de665a8e8ec81e11e5ea121f0b4d70" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js (opens new window)&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e61e4c98d3b3a635091c842dada04fef1b9143" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">Правильная настройка всех обсуждаемых аспектов готового к работе серверного приложения может быть сложной задачей. К счастью, есть отличный общественный проект , который стремится сделать все это проще: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt; . Nuxt.js - это фреймворк более высокого уровня, построенный на основе экосистемы Vue, который обеспечивает чрезвычайно упрощенный опыт разработки для написания универсальных приложений Vue. А еще лучше, вы даже можете использовать его как генератор статических сайтов (со страницами, созданными как однофайловые компоненты Vue)! Мы настоятельно рекомендуем попробовать.</target>
        </trans-unit>
        <trans-unit id="c52664eafd27797858aafa4ef697afc052f2630a" translate="yes" xml:space="preserve">
          <source>Properly declare the &lt;code&gt;click&lt;/code&gt; event. This is useful if you actually do add some logic to that event handler in &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7c765b5dbb95f7134159f12c7f78946b944760" translate="yes" xml:space="preserve">
          <source>Properly trigger lifecycle hooks of a component</source>
          <target state="translated">Правильно запускать крюки жизненного цикла компонента</target>
        </trans-unit>
        <trans-unit id="4a44822711c8e6d75a4d3fab2496758800219aa1" translate="yes" xml:space="preserve">
          <source>Properties such as &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;backface-visibility&lt;/code&gt;, and &lt;code&gt;transform: translateZ(x)&lt;/code&gt; will allow the browser to know you need hardware acceleration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f3056a7ba256cf707e7dce02bf806a8e3e1baf" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the Vue instance because they may conflict with Vue&amp;rsquo;s internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">Свойства, начинающиеся с &lt;code&gt;_&lt;/code&gt; или &lt;code&gt;$&lt;/code&gt; , &lt;strong&gt;не&lt;/strong&gt; будут проксироваться в экземпляре Vue, потому что они могут конфликтовать с внутренними свойствами и методами API Vue. Вам нужно будет получить к ним доступ как &lt;code&gt;vm.$data._property&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c6e8b3b6254e2521a11f38b602547d6e9a9380ef" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="6508a6990e288051c3e6b9a1eeb6a04702cf1534" translate="yes" xml:space="preserve">
          <source>Props &lt;code&gt;default&lt;/code&gt; factory function no longer has access to &lt;code&gt;this&lt;/code&gt; context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478c6d22a97baabea14191c1e30af01de0590a32" translate="yes" xml:space="preserve">
          <source>Props Default Function &lt;code&gt;this&lt;/code&gt; Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b180f9b6b88669128fadb97a91987ec2cc6021f7" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. To pass a title to our blog post component, we can include it in the list of props this component accepts, using the &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824b655ece5f935a9f95c151296cb1d2ff2e73ec" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. When a value is passed to a prop attribute, it becomes a property on that component instance. To pass a title to our blog post component, we can include it in the list of props this component accepts, using a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">Свойства - это настраиваемые атрибуты, которые можно зарегистрировать в компоненте. Когда значение передается в атрибут prop, оно становится свойством этого экземпляра компонента. Чтобы передать заголовок нашему компоненту сообщения в блоге, мы можем включить его в список свойств, которые принимает этот компонент, используя опцию &lt;code&gt;props&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="02635ba77eef9661786c01a78d90b7501db1be4e" translate="yes" xml:space="preserve">
          <source>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</source>
          <target state="translated">Теперь реквизит всегда односторонний.Для создания побочных эффектов в родительской области видимости компонент должен явно излучать событие,а не полагаться на неявное связывание.Для получения дополнительной информации,смотрите:</target>
        </trans-unit>
        <trans-unit id="5ef3fef3591faff86d0a182fab0eda375ddb585e" translate="yes" xml:space="preserve">
          <source>Props default value factory functions no longer have access to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6122d047108de3e0837cf3e23276a8775fc2406" translate="yes" xml:space="preserve">
          <source>Props on a Root Instance &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">Реквизиты на корневом экземпляре &lt;sup&gt;заменены&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b63145bed8f14aebee6afa6cafb70780de96e649" translate="yes" xml:space="preserve">
          <source>Provide / Inject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f908dc5bfdb182a1120e04c6bbe22936396bbf2a" translate="yes" xml:space="preserve">
          <source>Provide / inject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0327f1b9226a10a024191a4fd7230f8acec9765" translate="yes" xml:space="preserve">
          <source>Provide a less than 10 minute overview of the problems the project solves and why it exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de6fa5a1d366e72d0573c37d52e10f902d9460a" translate="yes" xml:space="preserve">
          <source>Provide a less than 30 minute overview of the problems the project solves and how, including when and why to use the project and some simple code examples. At the end, link to both to Installation page and the beginning of the Essentials Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877adb56a197e1259015de3210d87c2e790b7975" translate="yes" xml:space="preserve">
          <source>Provide an alternative render output when the default &lt;code&gt;render&lt;/code&gt; function encounters an error. The error will be passed to &lt;code&gt;renderError&lt;/code&gt; as the second argument. This is particularly useful when used together with hot-reload.</source>
          <target state="translated">Предоставьте альтернативный вывод рендеринга, когда функция &lt;code&gt;render&lt;/code&gt; по умолчанию обнаруживает ошибку. Ошибка будет передана в &lt;code&gt;renderError&lt;/code&gt; в качестве второго аргумента. Это особенно полезно при использовании вместе с горячей перезагрузкой.</target>
        </trans-unit>
        <trans-unit id="6992f8211f2fa9a21f565eeef4fe558491289052" translate="yes" xml:space="preserve">
          <source>Provide labels to describe the purpose of all form control; linking &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02efa133aeef7a133aefd2f252af936a5cccad26" translate="yes" xml:space="preserve">
          <source>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</source>
          <target state="translated">Предоставьте экземпляру Vue существующий элемент DOM для установки.Это может быть CSS-селекторная строка или реальный HTMLElement.</target>
        </trans-unit>
        <trans-unit id="b02743d84e632fc634540d6899ffff73f4729b17" translate="yes" xml:space="preserve">
          <source>Providing values via the application is especially useful when writing plugins, as plugins typically wouldn't be able to provide values using components. It is an alternative to using &lt;a href=&quot;application-config#globalproperties&quot;&gt;globalProperties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b372c2e3a6fe7f086dba4752c5409ca5a655c0b4" translate="yes" xml:space="preserve">
          <source>Proxied Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7242c5f3def5245656aa4c9d4b105b7544b7290b" translate="yes" xml:space="preserve">
          <source>Proxy vs. original identity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b962c5248e49ad5e80a98e9a17775f4f17e4645" translate="yes" xml:space="preserve">
          <source>Puppeteer</source>
          <target state="translated">Puppeteer</target>
        </trans-unit>
        <trans-unit id="deee5c477be9f881f24f0b87c812ed0c9a7ac549" translate="yes" xml:space="preserve">
          <source>Puppeteer is a Node library that provides a high-level API to control the browser and can pair with other test runners (e.g., Jest) to test your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12b0157326703f82d1c29065e90e1b3f21a4c0a" translate="yes" xml:space="preserve">
          <source>Puppeteer's Official Website (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf49ab626c30fff5ed5ee4dbe07721b4605c56b" translate="yes" xml:space="preserve">
          <source>Quasar Framework SSR + PWA</source>
          <target state="translated">Квазар Framework SSR+PWA</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="282e30765bd347047d1a351ac3b6f1cf18becd81" translate="yes" xml:space="preserve">
          <source>Quoted attribute values</source>
          <target state="translated">Значения кавычек атрибутов</target>
        </trans-unit>
        <trans-unit id="683b9e103293a057ef4362aa5bc974a4f8bd8131" translate="yes" xml:space="preserve">
          <source>Quoted attribute values &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">Значения атрибутов в кавычках &lt;sup&gt;настоятельно рекомендуются&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ed1e44a4093ca562205b72061c34f1507e70c015" translate="yes" xml:space="preserve">
          <source>RFC-0001</source>
          <target state="translated">RFC-0001</target>
        </trans-unit>
        <trans-unit id="02acfd4a596872e1f648c0fcb6b46c75913e05f6" translate="yes" xml:space="preserve">
          <source>RFCs (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11bf19e3f65b4a1ada383e41f26dab5c503940e" translate="yes" xml:space="preserve">
          <source>Radio</source>
          <target state="translated">Radio</target>
        </trans-unit>
        <trans-unit id="ebae26a0329293fc3cc08c6ef62218e1d25d11b4" translate="yes" xml:space="preserve">
          <source>Rather than managing this at the template level, one method for accomplishing this is to create a computed property that filters out a list for the visible elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ec2932146b9500b976f8c31af61191fd3c2eec" translate="yes" xml:space="preserve">
          <source>Rather than registering a component by name and then looking it up we can use it directly instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76550ff95e4521edf8dc9e8329b78993dc047414" translate="yes" xml:space="preserve">
          <source>Raw HTML</source>
          <target state="translated">HTML в исходном формате</target>
        </trans-unit>
        <trans-unit id="47bd2393437d5a401cde293271a377d5f6e51f54" translate="yes" xml:space="preserve">
          <source>Raw props received by the component are passed to the default function as argument;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73a647db12e3ccc42638c4c3cb137d447b6a643" translate="yes" xml:space="preserve">
          <source>Reaching this far in the documentation, you should already be familiar with both &lt;a href=&quot;../index&quot;&gt;the basics of Vue&lt;/a&gt; and &lt;a href=&quot;component-basics&quot;&gt;creating components&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="b183e9aafa930f129da2c452cc641903b8199bea" translate="yes" xml:space="preserve">
          <source>React Native enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with &lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;, a cross-platform UI framework created by Alibaba Group and being incubated by the Apache Software Foundation (ASF). Weex allows you to use the same Vue component syntax to author components that can not only be rendered in the browser, but also natively on iOS and Android!</source>
          <target state="translated">React Native позволяет писать приложения с рендерингом для iOS и Android, используя одну и ту же компонентную модель React. Это здорово, поскольку вы как разработчик можете применять свои знания о фреймворке на нескольких платформах. В этом отношении Vue официально сотрудничает с &lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt; , кроссплатформенным фреймворком пользовательского интерфейса, созданным Alibaba Group и инкубируемым Apache Software Foundation (ASF). Weex позволяет использовать один и тот же синтаксис компонента Vue для создания компонентов, которые могут отображаться не только в браузере, но и изначально на iOS и Android!</target>
        </trans-unit>
        <trans-unit id="ee4366331847de86650378c9e4041dac06218df0" translate="yes" xml:space="preserve">
          <source>React and Vue share many similarities. They both:</source>
          <target state="translated">React и Vue имеют много общего.Они оба:</target>
        </trans-unit>
        <trans-unit id="bb65ef679dc307f628a20a0b729cd808d18c5ac0" translate="yes" xml:space="preserve">
          <source>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React&amp;rsquo;s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it&amp;rsquo;s absolutely not suitable for production.</source>
          <target state="translated">React известен своей крутой кривой обучения. Прежде чем вы действительно сможете начать, вам нужно узнать о JSX и, возможно, о ES2015 +, поскольку во многих примерах используется синтаксис класса React. Вы также должны узнать о системах сборки, потому что, хотя вы можете технически использовать Babel Standalone для живой компиляции вашего кода в браузере, он абсолютно не подходит для производства.</target>
        </trans-unit>
        <trans-unit id="bb1b40c27f9e4939cf3ff484fca2a9371f8d3b42" translate="yes" xml:space="preserve">
          <source>React-like libraries usually try to share as much of their API and ecosystem with React as is feasible. For that reason, the vast majority of comparisons above will also apply to them. The main difference will typically be a reduced ecosystem, often significantly, compared to React. Since these libraries cannot be 100% compatible with everything in the React ecosystem, some tooling and companion libraries may not be usable. Or, even if they appear to work, they could break at any time unless your specific React-like library is officially supported on par with React.</source>
          <target state="translated">Реакционные библиотеки обычно стараются поделиться с React как можно большей частью своего API и экосистемы,насколько это возможно.По этой причине подавляющее большинство приведенных выше сравнений относится и к ним.Основным отличием,как правило,будет уменьшенная экосистема,часто значительно,по сравнению с React.Поскольку эти библиотеки не могут быть на 100% совместимы со всем,что находится в экосистеме React,некоторые инструментальные средства и библиотеки-компаньоны могут быть непригодны для использования.Или,даже если кажется,что они работают,они могут сломаться в любое время,если только ваша конкретная библиотека,подобная React-like,официально не поддерживается наравне с React.</target>
        </trans-unit>
        <trans-unit id="7f6efca662af5024b37ec029036bd44b873fd284" translate="yes" xml:space="preserve">
          <source>Reacting to Changes with &lt;code&gt;watch&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c3934c7588fa0cf20290b76db9e62f02488728" translate="yes" xml:space="preserve">
          <source>Reactive Variables with &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96578d9c2e6eaee240051ff91e83f741cc87e93b" translate="yes" xml:space="preserve">
          <source>Reactivity</source>
          <target state="translated">Reactivity</target>
        </trans-unit>
        <trans-unit id="0255dc2eebe1f45060f7ea3bd844c29de6ec11e9" translate="yes" xml:space="preserve">
          <source>Reactivity API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8868b3cb448a49c86420f63d7d34c218cbe3a7a5" translate="yes" xml:space="preserve">
          <source>Reactivity Fundamentals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38be1878e88addc141471e2ac5be059c49256537" translate="yes" xml:space="preserve">
          <source>Reactivity in Depth</source>
          <target state="translated">Реактивность в глубине</target>
        </trans-unit>
        <trans-unit id="6d1fd182318e548e15b14eaf006cea3dc7bd9bc2" translate="yes" xml:space="preserve">
          <source>Read documentation on skip link to main content (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f2a0af273d85671e8e6fb5fdb49a94d89d853c" translate="yes" xml:space="preserve">
          <source>Read more about custom &lt;code&gt;v-model&lt;/code&gt; modifiers in the &lt;a href=&quot;../component-custom-events#handling-v-model-modifiers&quot;&gt;Custom Events&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9e72dbd1af8f88c6e3d5c21ca2354cbfb25b0a" translate="yes" xml:space="preserve">
          <source>Read more about headings (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdac038511ef524dc9d94117822d967758f5dc12" translate="yes" xml:space="preserve">
          <source>Read more about landmarks (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446d7c237336d575135ddcd7063341761426b025" translate="yes" xml:space="preserve">
          <source>Ready for More?</source>
          <target state="translated">Готов к Большому?</target>
        </trans-unit>
        <trans-unit id="d1d8e9482299003b859657b4d0f506d8911f1155" translate="yes" xml:space="preserve">
          <source>Ready start but aren&amp;rsquo;t sure where?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fe62216df511ee5c87bc8e026789c819f7b21e" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it&amp;rsquo;s not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">На самом деле, любой атрибут перехода можно привязать динамически. И это не только атрибуты. Поскольку перехватчики событий являются методами, они имеют доступ к любым данным в контексте. Это означает, что в зависимости от состояния вашего компонента переходы JavaScript могут вести себя по-разному.</target>
        </trans-unit>
        <trans-unit id="97bf4cd212ab527666d890c97c24bef2808a0a86" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it's not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb5994a5662a9b7831e2e56b44ea27b6edb5bab" translate="yes" xml:space="preserve">
          <source>Recent versions of Angular, with &lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOT compilation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;tree-shaking&lt;/a&gt;, have been able to get its size down considerably. However, a full-featured Vue 2 project with Vuex + Vue Router included (~30KB gzipped) is still significantly lighter than an out-of-the-box, AOT-compiled application generated by &lt;code&gt;angular-cli&lt;/code&gt; (~65KB gzipped).</source>
          <target state="translated">Последние версии Angular с &lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;компиляцией AOT&lt;/a&gt; и &amp;laquo; &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;встряхиванием дерева&amp;raquo;&lt;/a&gt; смогли значительно уменьшить его размер. Однако полнофункциональный проект Vue 2 с включенным Vuex + Vue Router (~ 30 КБ в сжатом виде) по-прежнему значительно легче, чем готовое приложение, скомпилированное AOT, созданное с помощью &lt;code&gt;angular-cli&lt;/code&gt; (~ 65 КБ в сжатом виде).</target>
        </trans-unit>
        <trans-unit id="4faa65b556f68207d69cb14bcae4acb71980a036" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
          <target state="translated">Recommendations</target>
        </trans-unit>
        <trans-unit id="3f99a56b4630f2ac18091fad78531d1626d4dac4" translate="yes" xml:space="preserve">
          <source>Recommended Configuration</source>
          <target state="translated">Рекомендуемая конфигурация</target>
        </trans-unit>
        <trans-unit id="f9d18b779732cc0ea4b60f929feea8a7c40df5fc" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we&amp;rsquo;d really like those tab component instances to be cached once they&amp;rsquo;re created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">Воссоздание динамических компонентов обычно является полезным поведением, но в этом случае нам бы очень хотелось, чтобы эти экземпляры компонентов вкладки кэшировались после их создания в первый раз. Чтобы решить эту проблему, мы можем обернуть наш динамический компонент элементом &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2ee8180617af736edef09b52eaf0d7ce5b820112" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we'd really like those tab component instances to be cached once they're created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c0556aa6352203342eea1a65c58a623378dbcc" translate="yes" xml:space="preserve">
          <source>Recursive Components</source>
          <target state="translated">Рекурсивные компоненты</target>
        </trans-unit>
        <trans-unit id="b6f1fbd6cd87b63faf44c1d4ce1e7549855c4182" translate="yes" xml:space="preserve">
          <source>Ref Unwrapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44aa874c75e630b4da6c22739e2f1970b1754b9f" translate="yes" xml:space="preserve">
          <source>Ref unwrapping only happens when nested inside a reactive &lt;code&gt;Object&lt;/code&gt;. There is no unwrapping performed when the ref is accessed from an &lt;code&gt;Array&lt;/code&gt; or a native collection type like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt; (opens new window)&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46819d95829c2f8ee915e7d271f512463387fc11" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn&amp;rsquo;t sufficient to update relative references to a moved component.</source>
          <target state="translated">Рефакторинг становится более трудным, потому что поиска и замены часто недостаточно для обновления относительных ссылок на перемещенный компонент.</target>
        </trans-unit>
        <trans-unit id="a3a624d225f5eebe49dec1882d5a5928be291481" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4234eefb475a2340f218d9e7a7e6c874a82a6fa" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it&amp;rsquo;s done:</source>
          <target state="translated">Обратитесь к соответствующей документации инструмента сборки, чтобы узнать, как это делается:</target>
        </trans-unit>
        <trans-unit id="72586e891a8415c75d87e02355c4ee4e38787be4" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it's done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701486a68f3896a8a5368aead277807a6847151f" translate="yes" xml:space="preserve">
          <source>Refs</source>
          <target state="translated">Refs</target>
        </trans-unit>
        <trans-unit id="590fa42d6db832cdb16cf663ef8aeae0d6fc0d96" translate="yes" xml:space="preserve">
          <source>Refs infer the type from the initial value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c058170d5b06f199a4bd107ce1c6f47426001c1" translate="yes" xml:space="preserve">
          <source>Refs used as templates refs behave just like any other refs: they are reactive and can be passed into (or returned from) composition functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8b1f50199fd6cb6ab6141f41a87fd8dae1f00d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">Зарегистрируйте или получите глобальный компонент. Регистрация также автоматически устанавливает компоненту &lt;code&gt;name&lt;/code&gt; с указанным &lt;code&gt;id&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ae08a16a9767a6ee26d4fd258299ff9ca85b8c5b" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component's &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0168019975e7b996b73bc3be3562ac476872545c" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global directive.</source>
          <target state="translated">Зарегистрируйте или получите глобальную директиву.</target>
        </trans-unit>
        <trans-unit id="13bd6c258247a18188a7e24270fbc9f007d7c82d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global filter.</source>
          <target state="translated">Зарегистрируйте или получите глобальный фильтр.</target>
        </trans-unit>
        <trans-unit id="b522391a912c29a9f3956281e9c33d96ad9d9ff6" translate="yes" xml:space="preserve">
          <source>Registered Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76de89743a325c94ab024ae33f08812f80d685bb" translate="yes" xml:space="preserve">
          <source>Relation to Custom Elements</source>
          <target state="translated">Отношение к пользовательским элементам</target>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="translated">Информация о выпуске</target>
        </trans-unit>
        <trans-unit id="a565881a24b5131daa7950a76217674953041385" translate="yes" xml:space="preserve">
          <source>Relevant RFC (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92abdf653f23351eb7a0ab4d23290ee1313902d" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;global registration must take place before the root Vue instance is created (with &lt;code&gt;new Vue&lt;/code&gt;)&lt;/strong&gt;. &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;Here&amp;rsquo;s an example&lt;/a&gt; of this pattern in a real project context.</source>
          <target state="translated">Помните, что &lt;strong&gt;глобальная регистрация должна произойти до создания корневого экземпляра Vue (с &lt;code&gt;new Vue&lt;/code&gt; )&lt;/strong&gt; . &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;Вот пример&lt;/a&gt; этого шаблона в контексте реального проекта.</target>
        </trans-unit>
        <trans-unit id="cd81ea4c2f9620cb5e6384a73668d947f28ede04" translate="yes" xml:space="preserve">
          <source>Remember this list from a few paragraphs ago? Now we have some answers to how Vue handles these changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f430af4b132dcb0c8fc1a34ff17410de989f95d6" translate="yes" xml:space="preserve">
          <source>Remove all usages of &lt;code&gt;$listeners&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73942b04c7d6e9cc0cafd922223a9eab5438c235" translate="yes" xml:space="preserve">
          <source>Remove custom event listener(s).</source>
          <target state="translated">Удалить пользовательские слушатели событий.</target>
        </trans-unit>
        <trans-unit id="2e13ea874c4557e9a8719b905fba053f64ebe429" translate="yes" xml:space="preserve">
          <source>Remove the re-emitting of the event, since the parent can now listen for the native event easily, without adding &lt;code&gt;.native&lt;/code&gt;. Suitable when you really only re-emit the event anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab54fe624f00c44dfb29ea434660cb21fa96c33" translate="yes" xml:space="preserve">
          <source>Removed APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c548f4a7b9b6ef1cfbffbca926739476b1c4e2" translate="yes" xml:space="preserve">
          <source>Removed due to hooks simplification. If you really must suppress transition errors, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;&lt;code&gt;try&lt;/code&gt;&amp;hellip;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Убрано в связи с упрощением зацепов. Если вам действительно необходимо подавить ошибки перехода, вы можете вместо этого использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt; &lt;code&gt;try&lt;/code&gt; &amp;hellip; &lt;code&gt;catch&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e7f3ed71f5d7421b91e0c25cc42984adb65b4fdd" translate="yes" xml:space="preserve">
          <source>Renamed to &lt;code&gt;base&lt;/code&gt; for consistency with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;the HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/a&gt;.</source>
          <target state="translated">Переименовано в &lt;code&gt;base&lt;/code&gt; для согласованности с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;элементом &lt;/a&gt;HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8df655d1a0ac39c181aa88283e5d1c026113194" translate="yes" xml:space="preserve">
          <source>Render Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c236956538812497d07532ffea369ba11a6567" translate="yes" xml:space="preserve">
          <source>Render Function API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49e816b12aac18b3afdb19d7bd4fb9da7452c10" translate="yes" xml:space="preserve">
          <source>Render Function Argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace19ca906649466d2c7dd3fe462bc3acd5f3a5a" translate="yes" xml:space="preserve">
          <source>Render Function Signature Change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5215655670fe9017f515c66cb3c3e4b0b10ec4d9" translate="yes" xml:space="preserve">
          <source>Render Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa893c2a6ebe75166762d5109366b728fa5dc54" translate="yes" xml:space="preserve">
          <source>Render Functions &amp;amp; JSX</source>
          <target state="translated">Функции рендеринга и JSX</target>
        </trans-unit>
        <trans-unit id="f54e5429aec68f05a2b3b43a85ee9662c29159d7" translate="yes" xml:space="preserve">
          <source>Render Functions - Slots</source>
          <target state="translated">Функции кредитора-Слоты</target>
        </trans-unit>
        <trans-unit id="addbe4e257768d49a2a92ed6eda801285bbfd8e2" translate="yes" xml:space="preserve">
          <source>Render Scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9329d00b9b7be0b20e4bded9ef83426d44382a7b" translate="yes" xml:space="preserve">
          <source>Render function API changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeac0239d7806a13c73e4eacbb8e89032112b08f" translate="yes" xml:space="preserve">
          <source>Render functions with JSX have a few advantages:</source>
          <target state="translated">Рендерные функции с JSX имеют несколько преимуществ:</target>
        </trans-unit>
        <trans-unit id="c0f479c7d13498bbd2aa42eae8f88242964120b5" translate="yes" xml:space="preserve">
          <source>Render the element and component &lt;strong&gt;once&lt;/strong&gt; only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</source>
          <target state="translated">Визуализируйте элемент и компонент только &lt;strong&gt;один раз&lt;/strong&gt; . При последующих повторных отрисовках элемент / компонент и все его дочерние элементы будут обрабатываться как статический контент и пропускаться. Это можно использовать для оптимизации производительности обновления.</target>
        </trans-unit>
        <trans-unit id="1c510f643528b3292df74bbcf70195487418102f" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive&amp;rsquo;s value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">Выполните рендеринг элемента или блока шаблона несколько раз на основе исходных данных. Значение директивы должно использовать специальный &lt;code&gt;alias in expression&lt;/code&gt; синтаксиса в выражении, чтобы предоставить псевдоним для текущего элемента, по которому выполняется итерация:</target>
        </trans-unit>
        <trans-unit id="bd1a649d465f8e1a62e796c52535aae0d48a8876" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive's value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e740de4597c7445ebb94518bd33a4bcfca642e2a" translate="yes" xml:space="preserve">
          <source>Rendering Mechanisms and Optimizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9647e21c53c63f65c167aa12298837e080c17cb0" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it&amp;rsquo;s only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">Визуализация простых HTML-элементов во Vue выполняется очень быстро, но иногда у вас может быть компонент, содержащий &lt;strong&gt;много&lt;/strong&gt; статического содержимого. В этих случаях вы можете убедиться, что он оценивается только один раз, а затем кэшируется, добавив директиву &lt;code&gt;v-once&lt;/code&gt; к корневому элементу, например:</target>
        </trans-unit>
        <trans-unit id="0a857c99cf4b0ae7acc195147b4b766abe24c957" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it's only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d13414c61e1307782300fa26f96b2fe0a987373" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;config.ignoredElements&lt;/code&gt; with either &lt;code&gt;vue-loader&lt;/code&gt;'s &lt;code&gt;compilerOptions&lt;/code&gt; (with the build step) or &lt;code&gt;app.config.isCustomElement&lt;/code&gt; (with on-the-fly template compilation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80141b0813cd433b013d865aac12e9525f55fc79" translate="yes" xml:space="preserve">
          <source>Replace all &lt;code&gt;this.$scopedSlots&lt;/code&gt; occurrences with &lt;code&gt;this.$slots&lt;/code&gt; in 3.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ea8a0ec694cc57a9a233de984b2992f0beefc8" translate="yes" xml:space="preserve">
          <source>Replace all occurrences of &lt;code&gt;this.$slots.mySlot&lt;/code&gt; with &lt;code&gt;this.$slots.mySlot()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7b28f839424e787b9612d095bc2c496584af3b" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-enter&lt;/code&gt; to &lt;code&gt;.v-enter-from&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6931130e2c697e1198659bd51fa4df0b1dc5bf" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-leave&lt;/code&gt; to &lt;code&gt;.v-leave-from&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009126448723157c7cb1cf897352b418cf9b13c3" translate="yes" xml:space="preserve">
          <source>Replace instances of related prop names, as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a09ee1cf84326d5d5b1fbbb8dcaca046fb652f2" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;vm.$data&lt;/code&gt;&lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">Замена &lt;code&gt;vm.$data&lt;/code&gt; &lt;sup&gt;удалена&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6336d2b4c545bfdb0a2c2e6130a2fe522bc117ed" translate="yes" xml:space="preserve">
          <source>Replacing Template Features with Plain JavaScript</source>
          <target state="translated">Замена функций шаблона на обычный JavaScript</target>
        </trans-unit>
        <trans-unit id="3694e119ff9868c46a5da68ac50107adb0cd0254" translate="yes" xml:space="preserve">
          <source>Replacing an Array</source>
          <target state="translated">Замена массива</target>
        </trans-unit>
        <trans-unit id="448ceec811e5cd1612b41b145f75a74425a6d60a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;capitalize&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра с &lt;code&gt;capitalize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ebc9242fd66a164fb0466c94c267b085022f523" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;currency&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;currency&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e8e54f171683ed43699d784bb3a20daa786f68a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;debounce&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;debounce&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc05ccbf460e1bee1b220a363cd9b366122fc62c" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;filterBy&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра По &lt;code&gt;filterBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5aadbac5cc6d5572fbf9f02300727b922b52477f" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;json&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5af22200afbbae6350485e71f8a0930a62620a3b" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;limitBy&lt;/code&gt; Filter</source>
          <target state="translated">Замена &lt;code&gt;limitBy&lt;/code&gt; фильтра</target>
        </trans-unit>
        <trans-unit id="63239b2dfa73a07907b85e48d0e4e3d07aa51efd" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;lowercase&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;lowercase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="307535ec9952915e10873762b9b0a59ea99d17d1" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;orderBy&lt;/code&gt; Filter</source>
          <target state="translated">Замена &lt;code&gt;orderBy&lt;/code&gt; фильтра</target>
        </trans-unit>
        <trans-unit id="5a0b57fe75978a4fde52508fa6b11e6a9fcbade8" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;pluralize&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;pluralize&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5895ba028c303252e37b6295f10778b7ca351267" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;uppercase&lt;/code&gt; Filter</source>
          <target state="translated">Замена фильтра &lt;code&gt;uppercase&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c183ebe6cda4d505c2e49d3160c8367d36be5b90" translate="yes" xml:space="preserve">
          <source>Replacing/Merging with Existing Attributes</source>
          <target state="translated">Замена/сопряжение с существующими атрибутами</target>
        </trans-unit>
        <trans-unit id="e6ca57202c6e8dc869b883168359dd09117a9904" translate="yes" xml:space="preserve">
          <source>Repo</source>
          <target state="translated">Repo</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="ae84d73d0597806bc7d0adbdc690a6542782495e" translate="yes" xml:space="preserve">
          <source>Returning both the list and the function so they are accessible by other component options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a8e54ae12ccca05bb893a32d4a3f7046d7b142" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a7db15788311291fa8f5bf09eb2c27ce7d30eb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Directive&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad51a002d72fc20ecfb02f7a23ee64136443339" translate="yes" xml:space="preserve">
          <source>Returns a reactive copy of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f961cb226fc5286bf0338f8127c9739d4d786e8f" translate="yes" xml:space="preserve">
          <source>Returns a returns &quot;virtual node&quot;, usually abbreviated to &lt;strong&gt;VNode&lt;/strong&gt;: a plain object which contains information describing to Vue what kind of node it should render on the page, including descriptions of any child nodes. It is intended for manually written &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89257adefb18c26832ef5553199ebda0a4701ee4" translate="yes" xml:space="preserve">
          <source>Returns an application instance which provides an application context. The entire component tree mounted by the application instance share the same context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958894eaff54dca93f7c230586bf4e7aa2a2c600" translate="yes" xml:space="preserve">
          <source>Returns the inner value if the argument is a &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;, otherwise return the argument itself. This is a sugar function for &lt;code&gt;val = isRef(val) ? val.value : val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f990a1d837cdf3d578932fb103b30bb1d0c1e735" translate="yes" xml:space="preserve">
          <source>Returns the raw, original object of a &lt;a href=&quot;#reactive&quot;&gt;&lt;code&gt;reactive&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt; proxy. This is an escape hatch that can be used to temporarily read without incurring proxy access/tracking overhead or write without triggering changes. It is &lt;strong&gt;not&lt;/strong&gt; recommended to hold a persistent reference to the original object. Use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f300f539033a0a174d6567af6ef83f67f363d6" translate="yes" xml:space="preserve">
          <source>Returns the resolved &lt;code&gt;Component&lt;/code&gt; or a newly created &lt;code&gt;VNode&lt;/code&gt; with the component name as the node tag. Will raise a warning if the &lt;code&gt;Component&lt;/code&gt; was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8a054873446a82f9d9b672554fd977c4dc9233" translate="yes" xml:space="preserve">
          <source>Reusability is limited: we cannot pass any parameters to the mixin to change its logic which reduces their flexibility in terms of abstracting logic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5b54bbca313ab53947ed8a4f97b16e01f729d9" translate="yes" xml:space="preserve">
          <source>Reusable Transitions</source>
          <target state="translated">Многоразовые переходы</target>
        </trans-unit>
        <trans-unit id="a48bbafb258bfc790b66aec7d45e0a6a8fa1cd83" translate="yes" xml:space="preserve">
          <source>Reusing Components</source>
          <target state="translated">Повторное использование компонентов</target>
        </trans-unit>
        <trans-unit id="5596832d1f65947dd48007d834ec88a15c31ed4a" translate="yes" xml:space="preserve">
          <source>Rewrite references to the shared data to point to a new shared object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b836c4c63ed0b1bed339e82e9c78c2b817e6736c" translate="yes" xml:space="preserve">
          <source>Riot</source>
          <target state="translated">Riot</target>
        </trans-unit>
        <trans-unit id="6e85617241bed85b4dcd2ae064b3025078b134e9" translate="yes" xml:space="preserve">
          <source>Riot 3.0 provides a similar component-based development model (which is called a &amp;ldquo;tag&amp;rdquo; in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</source>
          <target state="translated">Riot 3.0 предоставляет аналогичную модель разработки на основе компонентов (которая в Riot называется &amp;laquo;тегом&amp;raquo;) с минимальным и красиво оформленным API. У Riot и Vue, вероятно, много общего в философии дизайна. Однако, несмотря на то, что он немного тяжелее, чем Riot, Vue предлагает некоторые существенные преимущества:</target>
        </trans-unit>
        <trans-unit id="49a199623e9b76b5c5dc35c517989d2f685d6fd1" translate="yes" xml:space="preserve">
          <source>Robust (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee656e4e4fb4012f85e12695536c23a5e0e62c3" translate="yes" xml:space="preserve">
          <source>Rollup</source>
          <target state="translated">Rollup</target>
        </trans-unit>
        <trans-unit id="8e4ecad6a05d926091d335638bbc9859c1de1f8b" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue</source>
          <target state="translated">Рулон+рулон-плугин-вью</target>
        </trans-unit>
        <trans-unit id="f6bad8b29e9b70cef765c2b65b7d3b5376681a63" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ec7ccbef29d0422b242b5178f06191bc8484d0" translate="yes" xml:space="preserve">
          <source>Route Definitions</source>
          <target state="translated">Определения маршрута</target>
        </trans-unit>
        <trans-unit id="6e3b967c60ba49b0f518c43998cb2dc91dd2134c" translate="yes" xml:space="preserve">
          <source>Route Hooks</source>
          <target state="translated">Крюки маршрута</target>
        </trans-unit>
        <trans-unit id="2b73a7098cbf7da1b1613b48acc5eb7c6f35331c" translate="yes" xml:space="preserve">
          <source>Route Matching</source>
          <target state="translated">Сопоставление маршрутов</target>
        </trans-unit>
        <trans-unit id="18febd25894978ca61139fd68c461cb521819d89" translate="yes" xml:space="preserve">
          <source>Route Options: Misc</source>
          <target state="translated">Опции маршрута:Ошибка</target>
        </trans-unit>
        <trans-unit id="f0865cca790a39153b3f106f9c19244b4f157bd4" translate="yes" xml:space="preserve">
          <source>Route matching now uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; under the hood, making it much more flexible than previously.</source>
          <target state="translated">Сопоставление маршрутов теперь использует под капотом &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;путь к регулярному выражению&lt;/a&gt; , что делает его гораздо более гибким, чем раньше.</target>
        </trans-unit>
        <trans-unit id="32027b0a6491682801317490f82d9b553e764f1b" translate="yes" xml:space="preserve">
          <source>Router Initialization</source>
          <target state="translated">Инициализация маршрутизатора</target>
        </trans-unit>
        <trans-unit id="1b4778ead27c045154fa8a8032dcbf9b6b10e64f" translate="yes" xml:space="preserve">
          <source>Router Options: Modes</source>
          <target state="translated">Опции маршрутизатора:Режимы</target>
        </trans-unit>
        <trans-unit id="9add2b84e8289fb0ea9dcb2637e5d5907ca4d748" translate="yes" xml:space="preserve">
          <source>Routes are now defined as an array on a &lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; at router instantiation. So these routes for example:</source>
          <target state="translated">Маршруты теперь определены как массив в &lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt;опции &lt;/a&gt; &lt;code&gt;routes&lt;/code&gt; при создании экземпляра маршрутизатора. Вот эти маршруты, например:</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="d670f1115ef0c3c29b2d47e241e7dd62eafb1e11" translate="yes" xml:space="preserve">
          <source>Rule Categories</source>
          <target state="translated">Категории правил</target>
        </trans-unit>
        <trans-unit id="91ba54d8bd5025bb2cb3e7a4cd0c0785af90a756" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find &lt;code&gt;keep-alive&lt;/code&gt; attributes.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти атрибуты &lt;code&gt;keep-alive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d2ac67778b450ed0b9659002961f8409d707930" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find CSS selectors targeting named slots (e.g. &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt;).</source>
          <target state="translated">Запуск &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощника миграции&lt;/a&gt; на вашем код , чтобы найти CSS селекторов таргетинга по имени слота (например , &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fb8ef12ba88bdd9ea8d64f474b58bd5f002af15c" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find HTML interpolations.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти интерполяции HTML.</target>
        </trans-unit>
        <trans-unit id="e29967481758c6af408495a286989e2f4b3a4403" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find all examples of this hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти все примеры этой ловушки.</target>
        </trans-unit>
        <trans-unit id="131ad91eddecfe4bcd3aa1d2c3dae1e7c9a6d28b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;$dispatch&lt;/code&gt; и &lt;code&gt;$broadcast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b5547bdef16b43ebf6aa5572275c3effebf29215" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$remove&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">Запуск &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощника миграции&lt;/a&gt; на ваш код , чтобы найти примеры &lt;code&gt;.$remove&lt;/code&gt; на массиве. Если вы что-то пропустите, вы должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; из-за отсутствующего метода.</target>
        </trans-unit>
        <trans-unit id="4d1a3ee9aa64afee960f48bf970646ff2ca1516a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$set&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;.$set&lt;/code&gt; в массиве. Если вы что-то пропустите, вы должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; из-за отсутствующего метода.</target>
        </trans-unit>
        <trans-unit id="f7cf2f519c21c26383d689b999383e7f48c8daeb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.async&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.config.async&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="adba4cc2d78c532c252af8489b44bb0c82a60071" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.debug&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.config.debug&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="842114654af7636636f5d0ca2790f492b054f6ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.delimiters&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.config.delimiters&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="56d3c94b1fca7d1fecbd0be685fc6a65bfb4e3ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt;. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt; . После этого помощник также найдет экземпляры интерполяции HTML, чтобы вы могли заменить их на `v-html`.</target>
        </trans-unit>
        <trans-unit id="7abfe983d07d10f68fd1a923086c66cfb28e6a0a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.elementDirective&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.elementDirective&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cbd833dba88270b867f404265f89cd61957dd9e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.partial&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.partial&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2be876bb1c3f71e3306a218289a786bebe66e6ac" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.set&lt;/code&gt; or &lt;code&gt;Vue.delete&lt;/code&gt; on a Vue instance. If you miss any, they'll trigger &lt;strong&gt;console warnings&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.set&lt;/code&gt; или &lt;code&gt;Vue.delete&lt;/code&gt; в экземпляре Vue. Если вы что-то пропустите, они вызовут &lt;strong&gt;предупреждения консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b9c98c79eef3d7a23f61df5ef62ac7e471ae74fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.transition&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;Vue.transition&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3cd48bf0c847ee511a1c8d066fdfbdc6f4f6ffc4" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;replace: false&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;replace: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc77c164d9ea83ca27d60242ad248d1e7b987f0e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.alias&lt;/code&gt; being called.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;router.alias&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7cf69302085bdd68f35cf86d99ec675583acea23" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.go&lt;/code&gt; being used where &lt;code&gt;router.push&lt;/code&gt; should be used instead.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры использования &lt;code&gt;router.go&lt;/code&gt; там , где &lt;code&gt;router.push&lt;/code&gt; следует использовать.</target>
        </trans-unit>
        <trans-unit id="e39b23f840933b639f0659fde34e12f635127e7f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.map&lt;/code&gt; being called.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;router.map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b828dfd9e2d7bcae2364000145b56e764e6ebe03" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.on&lt;/code&gt; being called.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;router.on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9a6975194aa0ce1b5cad1c6626af7c35453fcd0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.redirect&lt;/code&gt; being called.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;router.redirect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc5f2a33706f0e2d3f4cdbd090a5e649c5b6ae0f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.start&lt;/code&gt; being called.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;router.start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5f2fbe802e2c06eba8dee0a46275f8ee4460bc0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.on&lt;/code&gt;, &lt;code&gt;store.off&lt;/code&gt;, and &lt;code&gt;store.emit&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;store.on&lt;/code&gt; , &lt;code&gt;store.off&lt;/code&gt; и &lt;code&gt;store.emit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00ad6c9fe856a5b4567b7a4dab60a0fe45a37f40" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.watch&lt;/code&gt; with a string as the first argument.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;store.watch&lt;/code&gt; со строкой в ​​качестве первого аргумента.</target>
        </trans-unit>
        <trans-unit id="4f47a47355d74434a753364a679e2f4c9a402ae5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;track-by&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;track-by&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da0f85cb5aa67bdac2ea466f36918db2fcd36b05" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;v-el&lt;/code&gt; and &lt;code&gt;v-ref&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;v-el&lt;/code&gt; и &lt;code&gt;v-ref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7aa5783c6df3a82bb69131d32c3850e7f84cfda7" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$after&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$after&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="09e7d78d817c1fd2a45c3cf9b9c21a2069c4fd37" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$appendTo&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$appendTo&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="d7350cc4e203e91682eee37d60894b3e1314af48" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$before&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры использования &lt;code&gt;vm.$before&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c0c4f878eaed231fe0dbb2225df03cd65dc84e13" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$eval&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$eval&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3f8e856f05355ed8982ce86f4336ff6eacabf3e2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$get&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$get&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bd0dd654ce3404b139a97c6070c1ea80255ce0fd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$interpolate&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$interpolate&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="81bbbda8f1ba1322792aa46e4294439738bc392f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$log&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$log&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="381f44de62059e317b1f31d7ce9b3541555d602b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$remove&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;vm.$remove&lt;/code&gt; . Если вы их пропустите, вы увидите &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b874a37ca4886af9d3b7780e6010cf89d9c7f988" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of arbitrary route properties not scoped under meta.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры произвольных свойств маршрута, не относящихся к мета.</target>
        </trans-unit>
        <trans-unit id="1fa158cea69bdd4c40bd2a48988a099538d4dc5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры определенных директив. Помощник отметит их все, так как в большинстве случаев вам может потребоваться выполнить рефакторинг компонента.</target>
        </trans-unit>
        <trans-unit id="979e6458f784d896c90752c57e560652f6c8525d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters being used inside directives. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры фильтров, используемых внутри директив. Если вы что-то пропустите, вы также должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="801a0e4488b5e174aaaa485bb9fbdd0fb7f5b389" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters used in directives like &lt;code&gt;v-model&lt;/code&gt;. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры фильтров, используемых в директивах, таких как &lt;code&gt;v-model&lt;/code&gt; . Если вы что-то пропустите, вы также должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="83b833ef69efe1e17f7ef29c061f04dea5876bad" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of interpolation used within attributes.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры интерполяции, используемой в атрибутах.</target>
        </trans-unit>
        <trans-unit id="9bb76b174b8438ba3c0f4ba54b4026ce44dd98ca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of overwriting &lt;code&gt;vm.$data&lt;/code&gt;. If you miss any, &lt;strong&gt;console warnings&lt;/strong&gt; will be emitted.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры перезаписи &lt;code&gt;vm.$data&lt;/code&gt; . Если вы что-то пропустите, на &lt;strong&gt;консоли&lt;/strong&gt; появятся &lt;strong&gt;предупреждения&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8dbff7c8c83dec265171807e5ec5ea40ea988ad1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of style bindings with &lt;code&gt;!important&lt;/code&gt; in objects.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры привязки стилей с &lt;code&gt;!important&lt;/code&gt; в объектах.</target>
        </trans-unit>
        <trans-unit id="93ebbb2019ca1300c683d3ae1afb72a96650f915" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;$loadingRouteData&lt;/code&gt; meta property.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;$loadingRouteData&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52407d926e2b5716bf90f4cb35758896e87892ed" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;.once&lt;/code&gt; and &lt;code&gt;.sync&lt;/code&gt; modifiers.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры модификаторов &lt;code&gt;.once&lt;/code&gt; и &lt;code&gt;.sync&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c8ce2853d843c2c72201a428aaae4467ceec09d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;abstract: true&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры опции &lt;code&gt;abstract: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2258f58c39858d2874ac267df312bf5774d76c18" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;activate&lt;/code&gt; hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры ловушки &lt;code&gt;activate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d2dd196d33a6838401706a980c174ba91eb1c6e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;cache: false&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры параметра &lt;code&gt;cache: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="635b9a1176068b8a0020a01c4f47cb421d064226" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canActivate&lt;/code&gt; hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;canActivate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ef7f740384cd3cfdf159ef6085f2faaac1ec88f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canDeactivate&lt;/code&gt; hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;canDeactivate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="416c87ed212eefdaa2ddbf02f6a0ba2e74d86959" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canReuse: false&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры параметра &lt;code&gt;canReuse: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce44d3b81054ffa59cb49fd62f006c1d791e2ab0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;coerce&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры опции &lt;code&gt;coerce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61fdd38d446cfe928998b1181aa744e45596c1c5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;data&lt;/code&gt; hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры ловушки &lt;code&gt;data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eeb9b18e06a447d16bfa196a854b2eb06f05360a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;deactivate&lt;/code&gt; hook.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры ловушки &lt;code&gt;deactivate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f483517518991a282467c00ae1cad300e136b269" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;debounce&lt;/code&gt; attribute.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры атрибута &lt;code&gt;debounce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b65067f3a77b357e086f22629678c364185b2ab2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;hashbang: false&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры опции &lt;code&gt;hashbang: false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a2e5b8abfbc6295fa11dd1caccde1ae7c3d69af" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;history: true&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры опции &lt;code&gt;history: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="452c89b5559555a477ca0eb92f956476ce00d5cd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;middlewares&lt;/code&gt; option on a store.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;middlewares&lt;/code&gt; в магазине.</target>
        </trans-unit>
        <trans-unit id="6faa58ba44b5eb605740b8397f8693bbaaa6f840" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;root&lt;/code&gt; параметра.</target>
        </trans-unit>
        <trans-unit id="ab45ded99a30a006bddeceb3fd6aa38bb6c3d9c6" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;saveScrollPosition: true&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры параметра &lt;code&gt;saveScrollPosition: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ec2df901f80374c6ff66f398825204e5f18d423" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;subRoutes&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры опции &lt;code&gt;subRoutes&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7178b2cc5e9e2a36383d9e60b9eea90fb3bcb121" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;suppressTransitionError: true&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры параметра &lt;code&gt;suppressTransitionError: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4e988285e061dd6f2c40c32cddfbc676c1aab12a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры атрибута &lt;code&gt;transition&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5f2b82da8cac7dc4262de8c7c93d4a46587dbca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры атрибута &lt;code&gt;transition&lt;/code&gt; . Во время обновления вы также можете перейти (что очень важно) на новую потрясающую стратегию.</target>
        </trans-unit>
        <trans-unit id="34922f45eeac604f53b4193f84913c2beb89b350" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transitionOnLoad: true&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры параметра &lt;code&gt;transitionOnLoad: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c9c97a1b14162dd07775888af56118c3a3370301" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;twoWay&lt;/code&gt; option.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры варианта &lt;code&gt;twoWay&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb3445799897bdc7ce3106b11c9b2c1f1d554568" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-else&lt;/code&gt; with &lt;code&gt;v-show&lt;/code&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры &lt;code&gt;v-else&lt;/code&gt; с &lt;code&gt;v-show&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bccc02e6c6793423ef659db42169cb5afa5716d0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link-active&lt;/code&gt; directive.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры директивы &lt;code&gt;v-link-active&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea921119a7e1635ac4e5a00b3d8a84491101f3fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link&lt;/code&gt; directive.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры директивы &lt;code&gt;v-link&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a825bdc145076ec6a6e4b0c215f030aa3ba79b85" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the `.literal` modifier on a directive.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры модификатора `.literal` в директиве.</target>
        </trans-unit>
        <trans-unit id="733bb79e129d2dca49869269db0a3698c6f65fa8" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like &lt;code&gt;position&lt;/code&gt; or &lt;code&gt;num&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры устаревшего порядка аргументов. Обратите внимание: если вы назовете свои аргументы индекса чем-то необычным, например &lt;code&gt;position&lt;/code&gt; или &lt;code&gt;num&lt;/code&gt; , помощник не будет их отмечать.</target>
        </trans-unit>
        <trans-unit id="da725380e126a62727af458ad28bac7c6524d798" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры устаревшего порядка аргументов. Обратите внимание, что если вы назовете свои ключевые аргументы чем-то вроде &lt;code&gt;name&lt;/code&gt; или &lt;code&gt;property&lt;/code&gt; , помощник не будет их отмечать.</target>
        </trans-unit>
        <trans-unit id="f1e1035d99ed76f7515df578e692ff719107895a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete route syntax.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры устаревшего синтаксиса маршрута.</target>
        </trans-unit>
        <trans-unit id="142bb71333ac86e488c9aacc373010de66e961e1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete text filters. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры устаревших текстовых фильтров. Если вы что-то пропустите, вы также должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="397d5ab0302428112127147010f4482ef9051b5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete usage.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры устаревшего использования.</target>
        </trans-unit>
        <trans-unit id="c1aa36c4bb555ce2607bb2d08c4631182d133d50" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the old filter syntax. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры старого синтаксиса фильтра. Если вы что-то пропустите, вы также должны увидеть &lt;strong&gt;ошибки консоли&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="20564b7f4450c4fa59c4a3ba6fa87121c27fe89f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the the old &lt;code&gt;keyCode&lt;/code&gt; configuration syntax.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры старого синтаксиса конфигурации &lt;code&gt;keyCode&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc0976e79e68e3874825b8d9309f7bc3cf13503f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the these param attributes.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры этих атрибутов параметров.</target>
        </trans-unit>
        <trans-unit id="4a53e2c9b9e1ccea5753bf6c5b26aa93f8d31041" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of these removed variables. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt; such as: &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти примеры этих удаленных переменных. Если вы пропустите что-либо, вы также должны увидеть &lt;strong&gt;ошибки консоли,&lt;/strong&gt; такие как: &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ae781de5086e5c0e4123dc4514d344522a5237" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find one-time bindings.</source>
          <target state="translated">Запустите &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощник&lt;/a&gt; по миграции в своей кодовой базе, чтобы найти одноразовые привязки.</target>
        </trans-unit>
        <trans-unit id="2c800955474c5ae66271d1f51e3a706afff6e929" translate="yes" xml:space="preserve">
          <source>Run your bundling command with the actual &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;. This tells &lt;code&gt;vueify&lt;/code&gt; to avoid including hot-reload and development related code.</source>
          <target state="translated">Запустите команду связывания с фактической переменной среды &lt;code&gt;NODE_ENV&lt;/code&gt; , установленной на &lt;code&gt;&quot;production&quot;&lt;/code&gt; . Это говорит &lt;code&gt;vueify&lt;/code&gt; избегать включения кода горячей перезагрузки и разработки.</target>
        </trans-unit>
        <trans-unit id="65124f23df07644ee66ed5e04606bd6c7b54318b" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about duplicate slots &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">Запустите комплексный тестовый набор или приложение после обновления и поищите &lt;strong&gt;предупреждения консоли&lt;/strong&gt; о повторяющихся слотах &lt;code&gt;v-model&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0276baa533bc89d334fafab4aee362813fb56fba" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about inline value attributes with &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">После обновления запустите комплексный тестовый набор или приложение и найдите &lt;strong&gt;предупреждения консоли&lt;/strong&gt; о встроенных атрибутах значений с &lt;code&gt;v-model&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9168febc3cd9fb510564d5d619d53cfceebc829" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about multiple root elements in a template.</source>
          <target state="translated">После обновления запустите комплексный тестовый пакет или приложение и найдите &lt;strong&gt;предупреждения консоли&lt;/strong&gt; о нескольких корневых элементах в шаблоне.</target>
        </trans-unit>
        <trans-unit id="6cd905d20455b18138224bc59c413711a6de22a2" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about prop mutations.</source>
          <target state="translated">Запустите комплексный тестовый пакет или приложение после обновления и поищите &lt;strong&gt;предупреждения консоли&lt;/strong&gt; о мутациях свойств.</target>
        </trans-unit>
        <trans-unit id="7da416f4436591687e3ea5cf9d579fb6711b7dbd" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about the &lt;code&gt;el&lt;/code&gt; option with &lt;code&gt;Vue.extend&lt;/code&gt;.</source>
          <target state="translated">После обновления запустите комплексный тестовый пакет или приложение и найдите &lt;strong&gt;предупреждения консоли&lt;/strong&gt; о параметре &lt;code&gt;el&lt;/code&gt; с помощью &lt;code&gt;Vue.extend&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de5aa3b1e8bcd9a2e9b6648cc6da29ebd7c682fa" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">Запустите комплекс сквозных тестов, если он у вас есть. В &lt;strong&gt;неудачных испытаниях&lt;/strong&gt; должны предупредить вас , чтобы любую часть вашего приложения , которые могут быть затронуты этим изменением.</target>
        </trans-unit>
        <trans-unit id="25b0475e8303e55dc27cdda9bbd8ef8c1c492011" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that a watcher was relying on the old behavior.</source>
          <target state="translated">Запустите комплекс сквозных тестов, если он у вас есть. В &lt;strong&gt;неудачных испытаниях&lt;/strong&gt; должны предупреждать вас о том , что наблюдатель был опирающимся на старом поведении.</target>
        </trans-unit>
        <trans-unit id="3925b4e9140324a46bda954fa3ba6a11551d44d8" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that props passed to root instances are no longer working.</source>
          <target state="translated">Запустите комплекс сквозных тестов, если он у вас есть. В &lt;strong&gt;неудачных испытаниях&lt;/strong&gt; должны предупреждать вас о том , что реквизит , передаваемый корневые экземпляры, больше не работает.</target>
        </trans-unit>
        <trans-unit id="c7a107bdb49919e8c77ec76a87618731104be368" translate="yes" xml:space="preserve">
          <source>Run your test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">Запустите свой набор тестов, если он у вас есть. В &lt;strong&gt;неудачных испытаниях&lt;/strong&gt; должны предупредить вас , чтобы любую часть вашего приложения , которые могут быть затронуты этим изменением.</target>
        </trans-unit>
        <trans-unit id="71dbd4c5b94dea2014b421003d9fecaee74046df" translate="yes" xml:space="preserve">
          <source>Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13285023695c206297d4666f3184c48b775d9ec3" translate="yes" xml:space="preserve">
          <source>Runtime + Compiler vs. Runtime-only</source>
          <target state="translated">Runtime+Compiler против Runtime-only</target>
        </trans-unit>
        <trans-unit id="ce3caf82d6dc4282305777c04d22cb7e32e8739f" translate="yes" xml:space="preserve">
          <source>Runtime Performance</source>
          <target state="translated">Производительность в режиме реального времени</target>
        </trans-unit>
        <trans-unit id="a8885226fbbc6c259bb25a13cec39523402f5449" translate="yes" xml:space="preserve">
          <source>SFC &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; can now include global rules or rules that target only slotted content (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab3eee80056a96ec147159fe704ef0b8dcd1e74" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#slot-scope&quot;&gt;&lt;code&gt;slot-scope&lt;/code&gt;&lt;/a&gt; except that &lt;code&gt;scope&lt;/code&gt; can only be used on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">То же, что и &lt;a href=&quot;#slot-scope&quot;&gt; &lt;code&gt;slot-scope&lt;/code&gt; ,&lt;/a&gt; за исключением того, что &lt;code&gt;scope&lt;/code&gt; может использоваться только для элементов &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9486d0a483dfe9905cce23330af6d67155a098e5" translate="yes" xml:space="preserve">
          <source>Same rule applies to the event listeners:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41f297530a1a4027d4fe5146dc89421c3603b93" translate="yes" xml:space="preserve">
          <source>Sarah Drasner demonstrates this in the demo below, using a combination of timed and interactivity-driven state changes:</source>
          <target state="translated">Сара Драснер демонстрирует это в демонстрационном примере ниже,используя комбинацию изменения состояния,обусловленного временем и интерактивностью:</target>
        </trans-unit>
        <trans-unit id="6744b582ee6941cb3d4f3589a70ab055f52ce106" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;vue-cli (opens new window)&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb30ff0706f7afb22f9016af8875144481f1797" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite (opens new window)&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29f0256272e79ca91a1c4e608f09a6264397d12" translate="yes" xml:space="preserve">
          <source>Scale</source>
          <target state="translated">Scale</target>
        </trans-unit>
        <trans-unit id="88011a37856972ada6fede54fa2220927bfb5ac0" translate="yes" xml:space="preserve">
          <source>Scaling Down</source>
          <target state="translated">Масштабирование вниз</target>
        </trans-unit>
        <trans-unit id="2d20a53538fb773c0616dc1ef8c4f21c2ceb637d" translate="yes" xml:space="preserve">
          <source>Scaling Up</source>
          <target state="translated">Увеличение масштаба</target>
        </trans-unit>
        <trans-unit id="bf9e81be315e7832d34416457ae7f289aca054dc" translate="yes" xml:space="preserve">
          <source>Scenario Background</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1e630e7268556a0635e37341aa31c69f284094" translate="yes" xml:space="preserve">
          <source>Scoped Slots</source>
          <target state="translated">Скопированные слоты</target>
        </trans-unit>
        <trans-unit id="c891d436871bb971da8c2ff8081958bff3ddb19a" translate="yes" xml:space="preserve">
          <source>Scoped Slots with the &lt;code&gt;slot-scope&lt;/code&gt; Attribute</source>
          <target state="translated">Слоты с заданной &lt;code&gt;slot-scope&lt;/code&gt; атрибутом слот-области</target>
        </trans-unit>
        <trans-unit id="6aa971b69d2fe9a8fec7d58fa039f9aafe0f8da1" translate="yes" xml:space="preserve">
          <source>Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Функции слотов с заданной областью теперь гарантированно возвращают массив VNodes, если возвращаемое значение не является недопустимым, и в этом случае функция вернет &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3dae2d606c4ba8fd82d37fdbaee4697f3fd4d181" translate="yes" xml:space="preserve">
          <source>Screen Readers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa277d957af13fbcf610edac48d6ff9d1d53991" translate="yes" xml:space="preserve">
          <source>Search your codebase for the regex &lt;code&gt;/\w+ in \d+/&lt;/code&gt;. Wherever it appears in a &lt;code&gt;v-for&lt;/code&gt;, check to see if you may be affected.</source>
          <target state="translated">Найдите в своей кодовой базе регулярное выражение &lt;code&gt;/\w+ in \d+/&lt;/code&gt; . Где бы он ни появлялся в &lt;code&gt;v-for&lt;/code&gt; , проверьте, может ли это повлиять на вас.</target>
        </trans-unit>
        <trans-unit id="68acc245855d52df2e1bcc59c8f1a0b8e40964eb" translate="yes" xml:space="preserve">
          <source>Searching for repositories using a &lt;code&gt;searchQuery&lt;/code&gt; string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c538bd7ea9559c59e12f452d723cec0e8d49975" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../render-function&quot;&gt;Render Function Guide&lt;/a&gt; for more detailed documentation!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2d0248c5dcfa5a79dd94afb4e294298450c401" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXaoKy&quot;&gt;this sandbox (opens new window)&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXapXM&quot;&gt;this version (opens new window)&lt;/a&gt; for an example binding to a component's options object, instead of its registered name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4f1b3e1926d0de28455af2f7b050061aa08a61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;this fiddle&lt;/a&gt; for the full code. Note, however, that if you find yourself having to do a lot of setup and cleanup within a single component, the best solution will usually be to create more modular components. In this case, we&amp;rsquo;d recommend creating a reusable &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; component.</source>
          <target state="translated">См. &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;Этот скрипт&lt;/a&gt; для получения полного кода. Однако обратите внимание, что если вам приходится выполнять большую настройку и очистку в пределах одного компонента, лучшим решением обычно будет создание большего количества модульных компонентов. В этом случае мы рекомендуем создать повторно используемый компонент &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04b10db48b879dd4894715118934c8f16e790244" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;this fiddle&lt;/a&gt; for the complete code behind the above demo.</source>
          <target state="translated">См. &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;Этот скрипт&lt;/a&gt; для получения полного кода приведенной выше демонстрации.</target>
        </trans-unit>
        <trans-unit id="030b52b1aecbbfd160c5986ee59275d22c9f7672" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;this fiddle&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;this version&lt;/a&gt; for an example binding to a component&amp;rsquo;s options object, instead of its registered name.</source>
          <target state="translated">См. &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;Эту скрипту,&lt;/a&gt; чтобы поэкспериментировать с полным кодом, или &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;эту версию,&lt;/a&gt; чтобы увидеть пример привязки к объекту параметров компонента, а не к его зарегистрированному имени.</target>
        </trans-unit>
        <trans-unit id="04b37b3a250db02d4b461de0e57827c11b943abe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs (opens new window)&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6fd808ffb90ac93f1cb9d312e01c08b9a59bf3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs&lt;/a&gt; for more details.</source>
          <target state="translated">Дополнительные сведения см. В &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;документации&lt;/a&gt; по параметрам компилятора TypeScript .</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737f5413856be6cc52d6ede4259c257a64189c06" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;reactivity-computed-watchers#effect-flush-timing&quot;&gt;Computed and Watchers&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4b188488a5cff189e4cfc9d54ff0931435281a" translate="yes" xml:space="preserve">
          <source>See example &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;the plugins docs&lt;/a&gt; for more info.</source>
          <target state="translated">См. Пример &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;документации плагинов&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="71510889015524eac5f3536f717b3d650abc22d8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/GRoMqYy&quot;&gt;Form Instructions&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c6c4077b07116940196b65ee10eb6481b48b2e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/JjGrKyY&quot;&gt;Form ARIA describedby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab121f1ab888bd6dd1556e0412cd022d04a246d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/NWxXeqY&quot;&gt;Functional Images&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74082aad4e1b79b4314945b2900e6c0514460336" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZEXoj&quot;&gt;Form Buttons&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65beb5a06b509fe12ccff844d1ccee6f7f256d20" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZJzeQ&quot;&gt;Form Placeholder&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb45580197c86bfff0a068e3d94024bb542415a" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/VwepxJa&quot;&gt;Skip to Main&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177e21235dcab2987f1621e5cfb8461e674d9354" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/YzwpPYZ&quot;&gt;Simple Form&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea069e0764773ff5c0f3cdac5b433d489e3ef38" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/ZEQXOLP&quot;&gt;Form ARIA labelledby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262ac48ac240514164287ba6e66598dea15b5210" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/jOWGqgz&quot;&gt;Form ARIA label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6a08b06c8f131152330badb8fe89544a25f229" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/qBbpQwB&quot;&gt;Form Search&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f05b59cae921893c750d23e8e4776d80aa4dc26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/wvMrGqz&quot;&gt;Form Label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7410cc167cc599bed638dcca19b6bdc07115f6ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/GRJZddR&quot;&gt;Second Reactivity with Proxies in Vue 3 Explainer&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc6e85aa5a5401fe93fb9ccc2c8c8d97926de1b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/RwwQapa&quot;&gt;How does the Virtual DOM work?&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f3c60bc9945fca27e5e226930b2bddd0120ec6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cdc723bd45704f63d3132765b8411da257e1bf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">См. &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Управляемую&lt;/a&gt; Pen Vue Wall-E от Сары Драснер ( &lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt; ) на &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c6a8b36e9b7c0da5114771bb486f9a7a7042b0bb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zYYzjBg&quot;&gt;Proxies and Vue's Reactivity Explained Visually&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc166302e24ec3725dd68083514281943f1b4ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zxJWBJ&quot;&gt;Bouncing Ball Demo&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d186cd1022be8718e9ceda1f954d3973247f611" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/049211673d3c185fde6b6eceb8baebec&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1523df0fe8ebf93022b7f2a5f6d18cfa497851b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/0dfa7869450ef43d6f7bd99022bc53e2&quot;&gt;Different Enter and Leave Transitions&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e752c1d184dfe92054f0f06db9e81939624e6c28" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/22903bc3b53eb5b7817378ecb985ce96&quot;&gt;Transitioning State 1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7528d954fd4369e15b8fb0b0872949a4941c65" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/3466d06fb252a53c5bc0a0edb0f1588a&quot;&gt;Simple Transition Component&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae07441f77f0670c9fc58c81f531b5d57861ff18" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/373b4429eb5769ae2e6d097fd954fd08&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e040d30af8393ee1633f73d93d30350748fde86d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/68ce1b8c41d0a6e71ff58df80fd85ae5&quot;&gt;JavaScript Hooks Transition&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bd9cd1463119b9c43dcd1ba74aa3cb1f130acf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/76e344bf057bd58b5936bba260b787a8&quot;&gt;Transition Modes Flip Cards&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f107983a293ed9006d9ef2812af86756ca7c64b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/8627c50c5514752acd73d19f5e33a781&quot;&gt;CSS Animation Transition Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a260753e85fa8466282693387b87f7cc76104425" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/996a9665131e7902327d350ca8a655ac&quot;&gt;Transition Ease Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f11331478125598a661c13bac28e7c854b496e8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRJGqXp&quot;&gt;Watch basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812653b1e4bc4946c1782ddf82f2d05c7e033000" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRoPPrM&quot;&gt;Multiple v-models&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f145a95ae613c69dd55a754b38bcfa605c12d2b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjGezQY&quot;&gt;Interpolation with style bindings&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c541290f7e397b76469cdb365d83edf60293da" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjdxaJW&quot;&gt;Custom directives: basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e9a90a9be54455c3883de0cd921fd94beaccda" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGydL&quot;&gt;Handling forms: select&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2254bb58d69f1e552b54292f05a53c4721df34" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGyrp&quot;&gt;Component basics: emitting events&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a282329decf75725d04fbec7c3ad2cbe3612d84c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpRVvJ&quot;&gt;Attribute dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b6f24ac50f9136ee96a3d776af94f047b327e7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/MWwPEMM&quot;&gt;Handling forms: radiobutton&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6955c24692a25cd5fc2b19407d34dbb402befbb1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjNY&quot;&gt;v-for with a range&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e023be1303468883f162c0e48e66e7703e8f36a7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjqy&quot;&gt;v-for with Object&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9b92c12228b760abf63536d9cd189e30dd1b50" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqzrjr&quot;&gt;Computed basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e43b77007c2dacebd79974e3b87520b56fa278" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyJVE&quot;&gt;Handling forms: checkbox&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291df14db0a3ff8f4300732d15f9ac8892bdd706" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyOaX&quot;&gt;Component basics: passing props&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fdf0a890d4ff84c05ca2af572a0d0bd7d47a1e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/Rwrqzpr&quot;&gt;Transition Modes Button Problem&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e56da97c87950c5a1a181af74825c8135cfd29" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLGbwa&quot;&gt;v-for with Array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1661150e6ac3142be9536c236a90d8cad370998b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLJQvP&quot;&gt;Dynamic components: with keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d340825b1b570c6935caf72e6173f6e13bcf8cfb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLxeEz&quot;&gt;Intro-Components-1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563d1d295f2c11776f1cdbc3104622b0a286b9b6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNvgjda&quot;&gt;Event handling: with an inline handler&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d681176d3b70b359069ee53c58bbc0e7655b4ea" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNwVxZw&quot;&gt;Transitioning between components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307c1ff749163fd8436a681b3e889e633b2b391c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/YzXgGmv&quot;&gt;Custom directives: dynamic arguments&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513a5a90b54b51c5692e0aee3c48fe5b9c6de0b2" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ZEQmdvq&quot;&gt;Transition Modes Button Problem- solved&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b196620d00f5896efb2ca3ce1c8dfdbb3c4f1900" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/a8e00648d4df6baa1b19fb6c31c8d17e&quot;&gt;Updating SVG&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c208a68e3d1f255db4e35f404e189a60f904a13b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVEJ&quot;&gt;Component basics&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5595d6d7e69787fd5630e93b1afe06c4419d07c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVZm&quot;&gt;Handling forms: select with dynamic options&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4470c15b33fcfc7767aa97dd2d89af0a169238" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWdo&quot;&gt;v-for with Object key and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a731992b15fef7493037d3445b45d7226d4bff98" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWpz&quot;&gt;v-for with components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8813b72fad30d04fc1b31cc73693fcc17f8beee" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abdQgLr&quot;&gt;Transition Modes Button Problem- positioning&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61105b75163799bdc20d7f7945cea1346ffd23e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/bGdmoyj&quot;&gt;Handling forms: multiple checkboxes&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c389b70c42f1062891ea6eb7228ca43e484564" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/c2fc5107bd3025ceadea049b3ee44ec0&quot;&gt;Staggered Lists&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13828cb9610cdab460c9a0a3a7e453b178d6f673" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/dyoeGjW&quot;&gt;Event handling&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c3ad7c5e42df49af96a7e47bd99e414683bd39" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e1cea580e91d6952eb0ae17bfb7c379d&quot;&gt;Transition List&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147d0375cd405af2f5388e0c93f7659ef234e30b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e9ef8ac7e32e0d0337e03d20949b4d17&quot;&gt;State Transition Components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cdae996d79388b6aff11270d995e9a90415a5d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/eYNPEqj&quot;&gt;Handling forms: basic v-model&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c732a959e13b52b9ac4a75b867fe321701dd75" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ff45b91caf7a98c8c9077ad8ab539260&quot;&gt;Create animation with a class&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc98e3fedf70758f085bc91a52cedce214d4727" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOPNvjR&quot;&gt;Vue 3 Teleport&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab510a161a94bbad39a6766795b3241daa9d5035" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOpBXPz&quot;&gt;Handling forms: select bound to array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ebc8def97215bc4e309d7f07ed2d158d12275" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPeaob&quot;&gt;Component basics: slots&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28edf61e14e998b4396f5bd5f49dbfe4cce5f07" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPjZOe&quot;&gt;Dynamic components: without keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1d37723d6b844dc3dac6c81884f0170d687c3f" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPvmaX&quot;&gt;Event handling: with a method&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce0a24d580f1e1b3c0d8ed82e5f3653e8edb9f8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/mdJLVXq&quot;&gt;List rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7aec8f97907244f1737ccc1d6adbcdb70f7bdd1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXaoKy&quot;&gt;Component basics: dynamic components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1973c424486fb8621604fd12c8238f057bf3c33e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXdbpB&quot;&gt;Conditional rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea234d1f2b7b35b6bb51409cc2f37f3321ac07d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJOPjx&quot;&gt;v-for with Object and key&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685e32ad68c213b265949ed3859900e53acf3e03" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJVgZm&quot;&gt;Two-way binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29b3965f3277fc30dbe11e5f3c78d00fedd15f1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNOaZpj&quot;&gt;Custom directives: dynamic arguments + dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81008da2a748e2b724bf234ed2da740fdaf4215b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNVqYvM&quot;&gt;Component basics: reusing components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b3c084df61e58700858fca20a352840ea4c4ab" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/wvaEdBP&quot;&gt;v-for with Array and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbc217a5395010a5c11fe2109b0a9d9f207c699" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGadPZ&quot;&gt;Event handling: basic&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d520109caefc0a15b146d81457800d2ba4892068" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGyXaG&quot;&gt;Handling forms: textarea&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e8d26c9dcbd0652f405c01c06cd0d07dab2e26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/yLNEJJM&quot;&gt;Rendering v-html&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="d84be9de2f9e35e379e0e4f6e0bb2340cf1b2d0b" translate="yes" xml:space="preserve">
          <source>Select Options</source>
          <target state="translated">Выберите Опции</target>
        </trans-unit>
        <trans-unit id="33e3b8ff7914aff97145e0add0103e5154bdde21" translate="yes" xml:space="preserve">
          <source>Self-closing components</source>
          <target state="translated">Самозакрывающиеся компоненты</target>
        </trans-unit>
        <trans-unit id="8aa1710830cfa45dfe404022342d5aade64a9767" translate="yes" xml:space="preserve">
          <source>Self-closing components &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется&lt;/sup&gt; самозакрывающиеся компоненты&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="01fe9a20a8fdeb0f312fdcea1363c6a939cf772b" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering</source>
          <target state="translated">Рендеринг на стороне сервера</target>
        </trans-unit>
        <trans-unit id="d986e7075907e08286bd92c14ff694e5215b1ede" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;false&lt;/code&gt; to prevent the production tip on Vue startup.</source>
          <target state="translated">Установите значение &lt;code&gt;false&lt;/code&gt; , чтобы предотвратить появление подсказки при запуске Vue.</target>
        </trans-unit>
        <trans-unit id="e81a9046abdbc87c3ced75127dd3291c76c28691" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark (opens new window)&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0322b76a288cd27bf5d650f3c073fe32426bc786" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; API.</source>
          <target state="translated">Установите для этого параметра значение &lt;code&gt;true&lt;/code&gt; , чтобы включить отслеживание производительности инициализации, компиляции, рендеринга и исправления компонентов на панели производительности / шкалы времени инструмента разработчика браузера. Работает только в режиме разработки и в браузерах, поддерживающих API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d9dc93485e941bf6df4cf07ea75a67473b1fe1d9" translate="yes" xml:space="preserve">
          <source>Sets a value that can be injected into all components within the application. Components should use &lt;code&gt;inject&lt;/code&gt; to receive the provided values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98421ef2cef7c53ec071c0cc18e5534c6e06824" translate="yes" xml:space="preserve">
          <source>Sets the delimiters used for text interpolation within the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="97f2f59947f62c014c5d7c2a4de9191db27303ae" translate="yes" xml:space="preserve">
          <source>Share (and Build) Your Experience</source>
          <target state="translated">Поделитесь (и создайте)своим опытом</target>
        </trans-unit>
        <trans-unit id="e3073223103db18e5df2f841e3d175c874b744cb" translate="yes" xml:space="preserve">
          <source>Share Configurations Among Apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbd8f27db2ca369a38d5de5d2cc30c4b2563623" translate="yes" xml:space="preserve">
          <source>Shared Behavior with &lt;code&gt;watchEffect&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ac938787ec8cb8d68c0f35d5c1f36144b88b3a" translate="yes" xml:space="preserve">
          <source>Shares the same runtime compilation, dependency inlining and hard-coded prod/dev behavior with the global build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dd25c3e7bb9f776951ef9ad74e60a7d6dd05bb" translate="yes" xml:space="preserve">
          <source>Shorthands</source>
          <target state="translated">Shorthands</target>
        </trans-unit>
        <trans-unit id="1ae7276e79db945fd551dc9db134399c32bb6984" translate="yes" xml:space="preserve">
          <source>Should either be updated to use an inline expression:</source>
          <target state="translated">Должны быть либо обновлены,чтобы использовать выражение в строке:</target>
        </trans-unit>
        <trans-unit id="2d9ab84ebf3f88c612650ea68112310ebd01fe56" translate="yes" xml:space="preserve">
          <source>Side Effect Invalidation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a3536bb7788ee14bd41892adba577744a1012d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;$root&lt;/code&gt;, the &lt;code&gt;$parent&lt;/code&gt; property can be used to access the parent instance from a child. This can be tempting to reach for as a lazy alternative to passing data with a prop.</source>
          <target state="translated">Подобно &lt;code&gt;$root&lt;/code&gt; , свойство &lt;code&gt;$parent&lt;/code&gt; можно использовать для доступа к родительскому экземпляру из дочернего элемента. Это может быть соблазнительно использовать как ленивую альтернативу передаче данных с помощью опоры.</target>
        </trans-unit>
        <trans-unit id="95ca1c1b0debe3ad51491e220a96675c9c705faf" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;watch&lt;/code&gt;, computed properties can also be created outside of a Vue component with the &lt;code&gt;computed&lt;/code&gt; function imported from Vue. Let&amp;rsquo;s get back to our counter example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadac4906f4bc6e4a81d9058bdcbf1bbcb397f71" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-else&lt;/code&gt;, a &lt;code&gt;v-else-if&lt;/code&gt; element must immediately follow a &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-else-if&lt;/code&gt; element.</source>
          <target state="translated">Подобно &lt;code&gt;v-else&lt;/code&gt; , элемент &lt;code&gt;v-else-if&lt;/code&gt; должен сразу следовать за элементом &lt;code&gt;v-if&lt;/code&gt; или &lt;code&gt;v-else-if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af9b7b6d2657eb7de92b424e723e1ce34e27dd45" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-on&lt;/code&gt; and &lt;code&gt;v-bind&lt;/code&gt;, &lt;code&gt;v-slot&lt;/code&gt; also has a shorthand, replacing everything before the argument (&lt;code&gt;v-slot:&lt;/code&gt;) with the special symbol &lt;code&gt;#&lt;/code&gt;. For example, &lt;code&gt;v-slot:header&lt;/code&gt; can be rewritten as &lt;code&gt;#header&lt;/code&gt;:</source>
          <target state="translated">Подобно &lt;code&gt;v-on&lt;/code&gt; и &lt;code&gt;v-bind&lt;/code&gt; , &lt;code&gt;v-slot&lt;/code&gt; также имеет сокращение, заменяющее все перед аргументом ( &lt;code&gt;v-slot:&lt;/code&gt; ) специальным символом &lt;code&gt;#&lt;/code&gt; . Например, &lt;code&gt;v-slot:header&lt;/code&gt; можно переписать как &lt;code&gt;#header&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="110921f9f16f79ec9020d42a774f85de76c9358e" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non primitive values:</source>
          <target state="translated">Как и в случае со значениями по умолчанию prop,для не примитивных значений необходимо использовать заводскую функцию:</target>
        </trans-unit>
        <trans-unit id="51a30c42e13e62448e2b08eba72508a02146467b" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non-primitive values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d88f3a27a981b0bc360cba21e587b9da4f4b86" translate="yes" xml:space="preserve">
          <source>Similar to prop type validation, an emitted event can be validated if it is defined with the Object syntax instead of the array syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd10ed1a03d7983440069e31d0996e6814b92875" translate="yes" xml:space="preserve">
          <source>Similar to props, the events that the component emits can now be defined with the &lt;code&gt;emits&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3115d0b13d887f54dba012634384e7c25cfdf659" translate="yes" xml:space="preserve">
          <source>Similar to template &lt;code&gt;v-if&lt;/code&gt;, you can also use a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag with &lt;code&gt;v-for&lt;/code&gt; to render a block of multiple elements. For example:</source>
          <target state="translated">Подобно шаблону &lt;code&gt;v-if&lt;/code&gt; , вы также можете использовать &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; с &lt;code&gt;v-for&lt;/code&gt; для визуализации блока из нескольких элементов. Например:</target>
        </trans-unit>
        <trans-unit id="6d2a01a3e994e3545ec387f3a221d8a8ec074723" translate="yes" xml:space="preserve">
          <source>Similar to using the &lt;code&gt;provide&lt;/code&gt; option in a 2.x root instance, a Vue 3 app instance can also provide dependencies that can be injected by any component inside the app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb5cbad8a164078c5eb5948eac4711466be0daa" translate="yes" xml:space="preserve">
          <source>Similarly, if the value passed to &lt;code&gt;is&lt;/code&gt; is a component options object then there's no need to resolve anything, it can be passed directly as the first argument of &lt;code&gt;h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6a6b84031ab7ac575faa5ec72d230121975c66" translate="yes" xml:space="preserve">
          <source>Similarly, this is how a global directive is declared:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1df6ad12b7801df462ec59203348775829bbf4" translate="yes" xml:space="preserve">
          <source>Similarly, when using &lt;code&gt;&amp;lt;template v-for&amp;gt;&lt;/code&gt; with a child that uses &lt;code&gt;v-if&lt;/code&gt;, the &lt;code&gt;key&lt;/code&gt; should be moved up to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9032b6dd131e5bdf77e7f1e8c9ad6ef9e98b4db4" translate="yes" xml:space="preserve">
          <source>Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:</source>
          <target state="translated">Аналогичным образом,вы можете использовать динамические аргументы для привязки обработчика к имени динамического события:</target>
        </trans-unit>
        <trans-unit id="e756f11c70f78a0ba1866d4795579c59fa6d1833" translate="yes" xml:space="preserve">
          <source>Simple Assertions</source>
          <target state="translated">Простые утверждения</target>
        </trans-unit>
        <trans-unit id="bbba1d068bf49ca0e64f1e344f51043367c2266d" translate="yes" xml:space="preserve">
          <source>Simple Routing From Scratch</source>
          <target state="translated">Простая маршрутизация от царапин</target>
        </trans-unit>
        <trans-unit id="5356eef37f9b286d685d6fb57d645ff611f0a298" translate="yes" xml:space="preserve">
          <source>Simple Routing from Scratch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e794aae53f27e868a697d7573dd5ec04e937e2a" translate="yes" xml:space="preserve">
          <source>Simple State Management from Scratch</source>
          <target state="translated">Простое управление состоянием от Scratch</target>
        </trans-unit>
        <trans-unit id="7a423acd4331de7d207764fc94ba09543c17ef88" translate="yes" xml:space="preserve">
          <source>Simple computed properties</source>
          <target state="translated">Простые вычисления свойств</target>
        </trans-unit>
        <trans-unit id="28fbbfbd1e3c5e7641094f470de044776bb5ad02" translate="yes" xml:space="preserve">
          <source>Simple computed properties &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется использовать&lt;/sup&gt; простые вычисляемые свойства&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="37761f78a8d655b3953b071e198e22dcd5a02587" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates</source>
          <target state="translated">Простые выражения в шаблонах</target>
        </trans-unit>
        <trans-unit id="fcf7b67ac329ddfb22fdf3fbec785727bf9bf466" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется использовать&lt;/sup&gt; простые выражения в шаблонах&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="211d49f995dbe282f57faa15874e031ac53eeff7" translate="yes" xml:space="preserve">
          <source>Simpler, well-named computed properties are:</source>
          <target state="translated">Более простые,хорошо названные вычислительные свойства:</target>
        </trans-unit>
        <trans-unit id="63a2bccabf19824dace120aef2460e5986003d8a" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it&amp;rsquo;s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what&amp;rsquo;s going on.</source>
          <target state="translated">Упрощение вычисляемых свойств заставляет вас давать каждому значению описательное имя, даже если оно не используется повторно. Это позволяет другим разработчикам (и вам в будущем) сосредоточиться на коде, который им небезразличен, и понять, что происходит.</target>
        </trans-unit>
        <trans-unit id="f04aaef124e7b2b9e4d40f6a6b719132efaeba8f" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd1e98b263d4df6091312537a5b1fb83da16e24" translate="yes" xml:space="preserve">
          <source>Simply download and include with a script tag. &lt;code&gt;Vue&lt;/code&gt; will be registered as a global variable.</source>
          <target state="translated">Просто скачайте и включите с тегом сценария. &lt;code&gt;Vue&lt;/code&gt; будет зарегистрирован как глобальная переменная.</target>
        </trans-unit>
        <trans-unit id="d5938f34f8624b63802c3118f180d5e293766247" translate="yes" xml:space="preserve">
          <source>Simultaneous entering and leaving transitions aren&amp;rsquo;t always desirable though, so Vue offers some alternative &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">Однако одновременный вход и выход из переходов не всегда желателен, поэтому Vue предлагает несколько альтернативных &lt;strong&gt;режимов перехода&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="680f9238b2a8b78e32cdbc0c2d7b967eeba0e51d" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;&lt;code&gt;KeyboardEvent.keyCode&lt;/code&gt; has been deprecated (opens new window)&lt;/a&gt;, it no longer makes sense for Vue 3 to continue supporting this as well. As a result, it is now recommended to use the kebab-case name for any key you want to use as a modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a69d78f54bcf8ac6e1f4a3963e04cee33a026d0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async/await&lt;/a&gt; syntax:</source>
          <target state="translated">Поскольку &lt;code&gt;$nextTick()&lt;/code&gt; возвращает обещание, вы можете добиться того же, что и выше, используя новый &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;синтаксис ES2016 async / await&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="a1ac81c9a7f5d4faff057385cc40d040ef51718a" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2017 async/await (opens new window)&lt;/a&gt; syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a777de149e5a77b75501c009eb466a9bc93514" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;v-ref&lt;/code&gt; is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with &lt;code&gt;v-for&lt;/code&gt;. For example:</source>
          <target state="translated">Поскольку &lt;code&gt;v-ref&lt;/code&gt; больше не директива, а специальный атрибут, его также можно определять динамически. Это особенно полезно в сочетании с &lt;code&gt;v-for&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="9de3c1e0a71e1edcdc7ffbc2b45060ebfe43b095" translate="yes" xml:space="preserve">
          <source>Since Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;performs DOM updates asynchronously&lt;/a&gt;, assertions on DOM updates resulting from state change will have to be made in a &lt;code&gt;Vue.nextTick&lt;/code&gt; callback:</source>
          <target state="translated">Поскольку Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;выполняет обновления DOM асинхронно&lt;/a&gt; , утверждения об обновлениях DOM в результате изменения состояния должны быть сделаны в &lt;code&gt;Vue.nextTick&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a6f5eaf2601394efec9f1b3f5eff696573b84807" translate="yes" xml:space="preserve">
          <source>Since Vue doesn&amp;rsquo;t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">Поскольку Vue не позволяет динамически добавлять реактивные свойства корневого уровня, вы должны инициализировать экземпляры Vue, заранее объявив все реактивные свойства данных корневого уровня, даже с пустым значением:</target>
        </trans-unit>
        <trans-unit id="cfc45f2d4df51ef3c4e6ec8a40b0cd708737fd53" translate="yes" xml:space="preserve">
          <source>Since Vue doesn't allow dynamically adding root-level reactive properties, you have to initialize component instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a485dec90726f134aafab30671454807556666" translate="yes" xml:space="preserve">
          <source>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. &lt;code&gt;MyButton&lt;/code&gt;, &lt;code&gt;VueButton&lt;/code&gt;).</source>
          <target state="translated">Поскольку имена компонентов всегда должны состоять из нескольких слов, это соглашение избавляет вас от необходимости выбирать произвольный префикс для простых оболочек компонентов (например, &lt;code&gt;MyButton&lt;/code&gt; , &lt;code&gt;VueButton&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ba2168060abb1674449c97121137c7602377ef42" translate="yes" xml:space="preserve">
          <source>Since components are reusable Vue instances, they accept the same options as &lt;code&gt;new Vue&lt;/code&gt;, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks. The only exceptions are a few root-specific options like &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">Поскольку компоненты являются многократно используемыми экземплярами Vue, они принимают те же параметры, что и &lt;code&gt;new Vue&lt;/code&gt; , такие как &lt;code&gt;data&lt;/code&gt; , &lt;code&gt;computed&lt;/code&gt; , &lt;code&gt;watch&lt;/code&gt; , &lt;code&gt;methods&lt;/code&gt; и перехватчики жизненного цикла. Единственное исключение - несколько параметров, зависящих от root, например &lt;code&gt;el&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78c28ad0018e9ae927ccd6393b355ae5a0e871fc" translate="yes" xml:space="preserve">
          <source>Since components are reusable instances, they accept the same options as a root instance, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b68173db2c99b86c3a75462f226a7b75ff0f1d5" translate="yes" xml:space="preserve">
          <source>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</source>
          <target state="translated">Поскольку редакторы обычно организуют файлы в алфавитном порядке,все важные взаимосвязи между компонентами теперь очевидны с первого взгляда.</target>
        </trans-unit>
        <trans-unit id="ef79f75d79e817472bd0ed5aad52845e59dbf2e4" translate="yes" xml:space="preserve">
          <source>Since functional components are just functions, they&amp;rsquo;re much cheaper to render.</source>
          <target state="translated">Поскольку функциональные компоненты - это просто функции, их визуализация намного дешевле.</target>
        </trans-unit>
        <trans-unit id="5ca066badcd55a6324af0033eddd42706cb8d9c3" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">Поскольку это общий механизм для Vue для идентификации узлов, &lt;code&gt;key&lt;/code&gt; также может использоваться и в других целях, которые специально не привязаны к &lt;code&gt;v-for&lt;/code&gt; , как мы увидим позже в руководстве.</target>
        </trans-unit>
        <trans-unit id="edd9c569ae9e194ecf746323957f3ab3ba7b3456" translate="yes" xml:space="preserve">
          <source>Since it's a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57443f82252c819ca077975175ff21178e6dad24" translate="yes" xml:space="preserve">
          <source>Since the majority of unit testing frameworks are open-source, having a community that is active can be critical to some teams that will be maintaining their tests for a long period of time and needs to ensure that a project will be actively maintained. In addition, having an active community has the benefit of providing more support whenever you run into issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c460325ca52e3630249720f5552ae7b020e4765a" translate="yes" xml:space="preserve">
          <source>Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts, you should use it whenever you can. If you still wish to use the full build instead, you need to configure an alias in your bundler:</source>
          <target state="translated">Так как сборки только для исполнения примерно на 30% легче,чем их полносборные аналоги,Вы должны использовать их везде,где это возможно.Если Вы всё ещё хотите использовать полную сборку вместо неё,Вам необходимо настроить псевдоним в своём пакете:</target>
        </trans-unit>
        <trans-unit id="e62e1d6e39e14f551529b609a48c6fb619bb1df6" translate="yes" xml:space="preserve">
          <source>Since these are &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;published on NPM&lt;/a&gt;, and the latest TypeScript knows how to resolve type declarations in NPM packages, this means when installed via NPM, you don&amp;rsquo;t need any additional tooling to use TypeScript with Vue.</source>
          <target state="translated">Поскольку они &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;публикуются в NPM&lt;/a&gt; , а последняя версия TypeScript знает, как разрешать объявления типов в пакетах NPM, это означает, что при установке через NPM вам не нужны дополнительные инструменты для использования TypeScript с Vue.</target>
        </trans-unit>
        <trans-unit id="4ea3d2ff946bc5b79835d964012d367a993b9ca6" translate="yes" xml:space="preserve">
          <source>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</source>
          <target state="translated">Поскольку эти компоненты так часто используются,вы можете просто сделать их глобальными,вместо того,чтобы импортировать их повсюду.Префикс делает это возможным при использовании Webpack:</target>
        </trans-unit>
        <trans-unit id="81ea6c41142d2d55928c63e7eb3e2a9e0e6d4d96" translate="yes" xml:space="preserve">
          <source>Since unit testing advice is often framework-agnostic, here are some basic guidelines to keep in mind when evaluating which unit testing tool is best for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796906cd98540356e295c43d625d24ed68862aac" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</source>
          <target state="translated">Поскольку мы больше не используем параметры фильтра, требующие возврата значения, наша работа с валютой фактически может выполняться асинхронно. Это означает, что если бы у нас было много приложений, которые должны работать с валютами, мы могли бы легко реорганизовать эту логику в общий микросервис.</target>
        </trans-unit>
        <trans-unit id="a31aa77b805847e93b5d67d3ae054b43de8ddfb3" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">Поскольку вам не нужно вручную прикреплять прослушиватели событий в JS, ваш код ViewModel может быть чистой логикой и без DOM. Это упрощает тестирование.</target>
        </trans-unit>
        <trans-unit id="59debd2931aa770a2b0975329d41213dcd9c5d88" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; to learn enough to build non-trivial applications.</source>
          <target state="translated">Поскольку вам не нужно знать о JSX, ES2015 или системах сборки, чтобы начать работу с Vue, разработчикам обычно требуется меньше дня, чтобы прочитать &lt;a href=&quot;../index&quot;&gt;руководство,&lt;/a&gt; чтобы узнать достаточно, чтобы создавать нетривиальные приложения.</target>
        </trans-unit>
        <trans-unit id="357d852f90e2d7ce113320f498f17ebe31dd5a8d" translate="yes" xml:space="preserve">
          <source>Since you don't have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6e205b866dd29d282ce270191d3645216b482d" translate="yes" xml:space="preserve">
          <source>Single File Components</source>
          <target state="translated">Компоненты из одного файла</target>
        </trans-unit>
        <trans-unit id="601044cdeb8a98e639651071cf1f9dc53d97b702" translate="yes" xml:space="preserve">
          <source>Single File Components (SFCs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0962a83153ac828504101602afbecfaf538e344c" translate="yes" xml:space="preserve">
          <source>Single Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7f1d7d63552994a465b38c32202f3620abe335" translate="yes" xml:space="preserve">
          <source>Single checkbox, boolean value:</source>
          <target state="translated">Одинарный флажок,булевое значение:</target>
        </trans-unit>
        <trans-unit id="040f06c8b02b9ecd8ce3bcc463d52f44ab71de30" translate="yes" xml:space="preserve">
          <source>Single select:</source>
          <target state="translated">Одиночный выбор:</target>
        </trans-unit>
        <trans-unit id="95ef58f9b3d77202b180ce829f19b7953db91e4d" translate="yes" xml:space="preserve">
          <source>Single-file (&lt;code&gt;.vue&lt;/code&gt;) components</source>
          <target state="translated">&lt;code&gt;.vue&lt;/code&gt; ( .vue ) компоненты</target>
        </trans-unit>
        <trans-unit id="a0fcc7019dc5bbeb59c13b0247440b91dff10e8e" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing</source>
          <target state="translated">Однофайловый корпус с именем компонента</target>
        </trans-unit>
        <trans-unit id="093c716d53dd968ee64e9ba688e8285861d21500" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется использовать&lt;/sup&gt; регистр имени файла однофайлового компонента&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="aad2c1946beed7073bd3f80b10b836af1bd801c0" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order</source>
          <target state="translated">Заказ однофайловых элементов верхнего уровня</target>
        </trans-unit>
        <trans-unit id="369e619c0ac6b0e41c0c5e5672725a1dad22811c" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Рекомендуется&lt;/sup&gt; порядок элементов верхнего уровня однофайлового компонента&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e5ab16f7ba44150cac61508afe92cbd1d1dd294b" translate="yes" xml:space="preserve">
          <source>Single-instance component names</source>
          <target state="translated">Названия отдельных компонентов</target>
        </trans-unit>
        <trans-unit id="801a9b431b0affdfa69d3dd93084d1b29dae9cb0" translate="yes" xml:space="preserve">
          <source>Single-instance component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;Настоятельно рекомендуется использовать&lt;/sup&gt; одноразовые имена компонентов.&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="896ccfe8515d070b5a15610d907daecc5196a888" translate="yes" xml:space="preserve">
          <source>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</source>
          <target state="translated">Пропустите компиляцию для этого элемента и всех его детей.Вы можете использовать это для отображения необработанных тегов усов.Пропуск большого количества узлов без директив на них также может ускорить компиляцию.</target>
        </trans-unit>
        <trans-unit id="385d78391f1fa467a858f22990ead95a27284b36" translate="yes" xml:space="preserve">
          <source>Skip link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef83d38df405d6719db39be3cccd4d9524f7c92" translate="yes" xml:space="preserve">
          <source>Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083d20797ac518ecfd2d5802f11e56f053d9b2a3" translate="yes" xml:space="preserve">
          <source>Slot Content</source>
          <target state="translated">Содержание слота</target>
        </trans-unit>
        <trans-unit id="0c1a16e17517d5db584e59f03e5701a1df0aec29" translate="yes" xml:space="preserve">
          <source>Slots</source>
          <target state="translated">Slots</target>
        </trans-unit>
        <trans-unit id="f25804abff59f82911237e106d151dfd3114ae2c" translate="yes" xml:space="preserve">
          <source>Slots Unification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c05d5215c9958f423cfa89492ade3561c496be1" translate="yes" xml:space="preserve">
          <source>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</source>
          <target state="translated">Небольшие,сфокусированные вычислительные свойства делают меньше предположений о том,как будет использоваться информация,поэтому требуют меньшего рефакторинга по мере изменения требований.</target>
        </trans-unit>
        <trans-unit id="270782c16d7dfcd9bacc30c93f3205da13a192a6" translate="yes" xml:space="preserve">
          <source>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</source>
          <target state="translated">Поэтому,даже если мы отображаем элементы только для небольшой части пользователей,нам приходится каждый раз при повторном отрисовывании повторять итерацию по всему списку,независимо от того,изменился ли набор активных пользователей или нет.</target>
        </trans-unit>
        <trans-unit id="9efa5f0263f4584699ee25a6ef7cd96b38af2cbd" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">Пока мы привязывались только к простым ключам свойств в наших шаблонах. Но Vue.js на самом деле поддерживает всю мощь выражений JavaScript внутри всех привязок данных:</target>
        </trans-unit>
        <trans-unit id="8b007e1b2fa7231d0825d38c1ab4e7b6a352ae60" translate="yes" xml:space="preserve">
          <source>So far we've only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc43cc8fe805d607917adfb57b267a4c1e366e21" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve managed transitions for:</source>
          <target state="translated">На данный момент мы осуществили переходы для:</target>
        </trans-unit>
        <trans-unit id="9990ce27d68bc258ecfe618b1e117aba2e010d2d" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only created components using &lt;code&gt;Vue.component&lt;/code&gt;:</source>
          <target state="translated">Пока что мы создали только компоненты с использованием &lt;code&gt;Vue.component&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="67796fb098e807812b451996ffa7c37901a92525" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only seen props listed as an array of strings:</source>
          <target state="translated">До сих пор мы видели только реквизиты, перечисленные в виде массива строк:</target>
        </trans-unit>
        <trans-unit id="ad0ac718587a84d865b7fb0857b8b94c7a79d9ce" translate="yes" xml:space="preserve">
          <source>So far, we've managed transitions for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67057cf9dda632e7c53641b3af1b64f4b054c2e" translate="yes" xml:space="preserve">
          <source>So far, we've only created components using &lt;code&gt;app.component&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c23af3b4bfe61992006f4f5db2569cf719ea2e" translate="yes" xml:space="preserve">
          <source>So far, we've only seen props listed as an array of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb7e6dc22797e50c31c81c6ca57f0d64cd4b40a" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen props passed a static value, like in:</source>
          <target state="translated">До сих пор вы видели, что реквизитам передается статическое значение, например:</target>
        </trans-unit>
        <trans-unit id="bf5ea7f867584dc6f766ba242591c6f576f49d80" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen uses of &lt;code&gt;$emit&lt;/code&gt;, listened to with &lt;code&gt;v-on&lt;/code&gt;, but Vue instances also offer other methods in its events interface. We can:</source>
          <target state="translated">До сих пор вы видели использование &lt;code&gt;$emit&lt;/code&gt; , прослушиваемое с помощью &lt;code&gt;v-on&lt;/code&gt; , но экземпляры Vue также предлагают другие методы в своем интерфейсе событий. Мы можем:</target>
        </trans-unit>
        <trans-unit id="41c7973382a4579cbfc80048a0bc33b60b91461b" translate="yes" xml:space="preserve">
          <source>So far, you've seen props passed a static value, like in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ebedb9491240daeacbc489ddaed31b23f7f005" translate="yes" xml:space="preserve">
          <source>So how would we do this in JavaScript?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d84a44b86d81a516326f9813e2b3977e997a457" translate="yes" xml:space="preserve">
          <source>So this might be a good time to refactor the &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component to accept a single &lt;code&gt;post&lt;/code&gt; prop instead:</source>
          <target state="translated">Так что сейчас самое время реорганизовать компонент &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; , чтобы вместо этого принять одну опору &lt;code&gt;post&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d6aa2762b60d0919d3cc5d125c99532a28d73b78" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we&amp;rsquo;ll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">Так что насчет того, когда у нас есть целый список элементов, которые мы хотим отображать одновременно, например, с помощью &lt;code&gt;v-for&lt;/code&gt; ? В этом случае мы будем использовать компонент &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; . Однако, прежде чем мы погрузимся в пример, важно знать несколько вещей об этом компоненте:</target>
        </trans-unit>
        <trans-unit id="f2e88928ec91eca02eb578a8b5e6e04b106c6623" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we'll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb218e5682ecb96e10798fb908e4473d6901128c" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;v-model&lt;/code&gt; in this case would be a shorthand to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad052271e0186ed108ab51a2c5684a90c5a025a" translate="yes" xml:space="preserve">
          <source>Software</source>
          <target state="translated">Software</target>
        </trans-unit>
        <trans-unit id="147f6354f521a67959c12f2f8261d77ce2bb9c39" translate="yes" xml:space="preserve">
          <source>Some HTML elements, such as &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; have restrictions on what elements can appear inside them, and some elements such as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; can only appear inside certain other elements.</source>
          <target state="translated">Некоторые элементы HTML, такие как &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; , имеют ограничения на то, какие элементы могут появляться внутри них, а некоторые элементы, такие как &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; , могут только появляются внутри некоторых других элементов.</target>
        </trans-unit>
        <trans-unit id="9c0790e8dcd7f3a0c69aa32f511de55c1f1ea0e6" translate="yes" xml:space="preserve">
          <source>Some advantages of this convention:</source>
          <target state="translated">Некоторые преимущества этой конвенции:</target>
        </trans-unit>
        <trans-unit id="2108424fbba417074fadf0d75a3e1edc693ebce6" translate="yes" xml:space="preserve">
          <source>Some argue that you&amp;rsquo;d need to learn an extra DSL (Domain-Specific Language) to be able to write templates - we believe this difference is superficial at best. First, JSX doesn&amp;rsquo;t mean the user doesn&amp;rsquo;t need to learn anything - it&amp;rsquo;s additional syntax on top of plain JavaScript, so it can be easy for someone familiar with JavaScript to learn, but saying it&amp;rsquo;s essentially free is misleading. Similarly, a template is just additional syntax on top of plain HTML and thus has very low learning cost for those who are already familiar with HTML. With the DSL we are also able to help the user get more done with less code (e.g. &lt;code&gt;v-on&lt;/code&gt; modifiers). The same task can involve a lot more code when using plain JSX or render functions.</source>
          <target state="translated">Некоторые утверждают, что вам нужно изучить дополнительный DSL (предметно-ориентированный язык), чтобы иметь возможность писать шаблоны - мы считаем, что это различие в лучшем случае является поверхностным. Во-первых, JSX не означает, что пользователю не нужно ничего изучать - это дополнительный синтаксис поверх простого JavaScript, поэтому его может легко изучить кто-то, знакомый с JavaScript, но утверждение, что он по сути бесплатный, вводит в заблуждение. Точно так же шаблон - это просто дополнительный синтаксис поверх обычного HTML и, следовательно, имеет очень низкую стоимость обучения для тех, кто уже знаком с HTML. С помощью DSL мы также можем помочь пользователю сделать больше с меньшим количеством кода (например, модификаторы &lt;code&gt;v-on&lt;/code&gt; ). Та же задача может включать намного больше кода при использовании простого JSX или функций рендеринга.</target>
        </trans-unit>
        <trans-unit id="562b1dcca42b0018a2fd2b5ce42a0d7a33ddd0a9" translate="yes" xml:space="preserve">
          <source>Some directives can take an &quot;argument&quot;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ef7770ac385e4eae53d066a2f3c10a8b6c4ab6" translate="yes" xml:space="preserve">
          <source>Some directives can take an &amp;ldquo;argument&amp;rdquo;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">Некоторые директивы могут принимать &amp;laquo;аргумент&amp;raquo;, обозначаемый двоеточием после имени директивы. Например, директива &lt;code&gt;v-bind&lt;/code&gt; используется для реактивного обновления атрибута HTML:</target>
        </trans-unit>
        <trans-unit id="09428a807ec781f76bc254d725a9a4e0a2df7f8b" translate="yes" xml:space="preserve">
          <source>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of &lt;code&gt;new Function()&lt;/code&gt; for evaluating expressions. The full build depends on this feature to compile templates, so is unusable in these environments.</source>
          <target state="translated">В некоторых средах, таких как Google Chrome Apps, применяется политика безопасности контента (CSP), запрещающая использование &lt;code&gt;new Function()&lt;/code&gt; для оценки выражений. Полная сборка зависит от этой функции для компиляции шаблонов, поэтому ее нельзя использовать в этих средах.</target>
        </trans-unit>
        <trans-unit id="5a2e23d7e711dac515b3913d004594ddb71e0888" translate="yes" xml:space="preserve">
          <source>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</source>
          <target state="translated">Некоторые функции Vue существуют для того,чтобы приспособиться к редким крайним случаям или более плавным миграциям из унаследованной кодовой базы.Однако при чрезмерном использовании они могут усложнить сопровождение вашего кода или даже стать источником ошибок.Эти правила проливают свет на потенциально опасные возможности,описывая,когда и почему их следует избегать.</target>
        </trans-unit>
        <trans-unit id="d10fd1239637017ec222f508352aa84bee00680a" translate="yes" xml:space="preserve">
          <source>Some of Vue&amp;rsquo;s syntax will look very similar to AngularJS (e.g. &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt;). This is because there were a lot of things that AngularJS got right and these were an inspiration for Vue very early in its development. There are also many pains that come with AngularJS however, where Vue has attempted to offer a significant improvement.</source>
          <target state="translated">Некоторый синтаксис Vue будет очень похож на AngularJS (например, &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt; ). Это потому, что в AngularJS было много правильных вещей, и они послужили источником вдохновения для Vue в самом начале его разработки. Однако есть много проблем, связанных с AngularJS, где Vue попытался предложить значительные улучшения.</target>
        </trans-unit>
        <trans-unit id="ba632b521cfadde631ed92ffd03194fe0b0a9806" translate="yes" xml:space="preserve">
          <source>Some of the current hooks have different behavior and there are also a couple new hooks.</source>
          <target state="translated">Некоторые из нынешних крючков имеют различное поведение,а также есть пара новых крючков.</target>
        </trans-unit>
        <trans-unit id="823d42c9ef6472009b44bd254d2588f2ed0ae4c8" translate="yes" xml:space="preserve">
          <source>Some of the most notable differences include:</source>
          <target state="translated">Некоторые из наиболее заметных отличий включают в себя:</target>
        </trans-unit>
        <trans-unit id="8ffb8d69071dcc932023e9c643874de3b228fccc" translate="yes" xml:space="preserve">
          <source>Some of the new features to keep an eye on in Vue 3 include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85976567c84aab5c4b5906f9117b4275cd11d741" translate="yes" xml:space="preserve">
          <source>Some of the sections below may also be slightly outdated due to recent updates in React 16+, and we are planning to work with the React community to revamp this section in the near future.</source>
          <target state="translated">Некоторые из разделов ниже также могут быть слегка устаревшими в связи с недавними обновлениями в React 16+,и мы планируем работать с сообществом React,чтобы обновить этот раздел в ближайшем будущем.</target>
        </trans-unit>
        <trans-unit id="e66b9d4602dcda92a8811e8379102ad854fa4037" translate="yes" xml:space="preserve">
          <source>Some plugins provided by Vue.js official plugins such as &lt;code&gt;vue-router&lt;/code&gt; automatically calls &lt;code&gt;Vue.use()&lt;/code&gt; if &lt;code&gt;Vue&lt;/code&gt; is available as a global variable. However in a module environment such as CommonJS, you always need to call &lt;code&gt;Vue.use()&lt;/code&gt; explicitly:</source>
          <target state="translated">Некоторые плагины, предоставляемые официальными плагинами Vue.js, такие как &lt;code&gt;vue-router&lt;/code&gt; , автоматически вызывают &lt;code&gt;Vue.use()&lt;/code&gt; если &lt;code&gt;Vue&lt;/code&gt; доступен как глобальная переменная. Однако в модульной среде, такой как CommonJS, вам всегда нужно явно вызывать &lt;code&gt;Vue.use()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d1da63849693561e71f9ebd75ce39efc2177e7c4" translate="yes" xml:space="preserve">
          <source>Some transition classes got a rename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d83d58916c1a60066e9604dcc1bcaf5d2ac577d" translate="yes" xml:space="preserve">
          <source>Some transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f0483aedfa8041d28d52d5cfd531234f7cb2b4" translate="yes" xml:space="preserve">
          <source>Some unit testing frameworks, like Jest, include assertion libraries. Others, like Mocha, require you to install assertion libraries separately (usually Chai).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe62eac7aa92f9e248fd4f6cf8a8c9817319b5d" translate="yes" xml:space="preserve">
          <source>Some users have enjoyed using two-way filters with &lt;code&gt;v-model&lt;/code&gt; to create interesting inputs with very little code. While &lt;em&gt;seemingly&lt;/em&gt; simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</source>
          <target state="translated">Некоторым пользователям нравилось использовать двусторонние фильтры с &lt;code&gt;v-model&lt;/code&gt; для создания интересных входных данных с очень небольшим количеством кода. Несмотря на &lt;em&gt;кажущуюся&lt;/em&gt; простоту, двусторонние фильтры также могут скрывать большую сложность и даже способствовать плохому UX, задерживая обновления состояния. Вместо этого рекомендуется использовать компоненты, обертывающие входные данные, как более явный и многофункциональный способ создания пользовательских входных данных.</target>
        </trans-unit>
        <trans-unit id="4cae9a004355ccf1a6df3d6da4904f4188c23336" translate="yes" xml:space="preserve">
          <source>Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfcec6e69b88ce4dae936b41aa1209796b17c8b" translate="yes" xml:space="preserve">
          <source>Sometimes the watched effect function will perform asynchronous side effects that need to be cleaned up when it is invalidated (i.e. state changed before the effects can be completed). The effect function receives an &lt;code&gt;onInvalidate&lt;/code&gt; function that can be used to register an invalidation callback. This invalidation callback is called when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fcae08f3cb4892f8fa57884382317df412d82c" translate="yes" xml:space="preserve">
          <source>Sometimes this isn't an option, though, or we're dealing with more complex movement where in and out states need to be coordinated, so Vue offers an extremely useful utility called &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20659b05e332a0ae32621debfebacc5d1ababa5" translate="yes" xml:space="preserve">
          <source>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</source>
          <target state="translated">Иногда это работает отлично,как,например,когда переходные элементы абсолютно расположены друг над другом:</target>
        </trans-unit>
        <trans-unit id="f26fd8bf6b50010b5da928fa27ec1a70c263cd9c" translate="yes" xml:space="preserve">
          <source>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special &lt;code&gt;$event&lt;/code&gt; variable:</source>
          <target state="translated">Иногда нам также необходимо получить доступ к исходному событию DOM во встроенном обработчике операторов. Вы можете передать его в метод с помощью специальной переменной &lt;code&gt;$event&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d6217375b6f90ff03f789d0daba4c248ea0fdddd" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that by simply passing a generic argument when calling ref to override the default inference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69621c7e82cd228755bd8d2542d2eb0f0d7182e" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that succinctly by passing a generics argument when calling &lt;code&gt;ref&lt;/code&gt; to override the default inference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243d33178667f24a9efd45c6f5a214dcd9d65b22" translate="yes" xml:space="preserve">
          <source>Sometimes we need state that depends on other state - in Vue this is handled with component &lt;a href=&quot;computed#computed-properties&quot;&gt;computed properties&lt;/a&gt;. To directly create a computed value, we can use the &lt;code&gt;computed&lt;/code&gt; method: it takes a getter function and returns an immutable reactive &lt;a href=&quot;reactivity-fundamentals#creating-standalone-reactive-values-as-refs&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58007ff3d542a5e64e8ab0473747490736edba5" translate="yes" xml:space="preserve">
          <source>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</source>
          <target state="translated">Иногда мы хотим отобразить отфильтрованную или отсортированную версию массива без фактического мутирования или сброса исходных данных.В этом случае можно создать вычисленное свойство,возвращающее отфильтрованный или отсортированный массив.</target>
        </trans-unit>
        <trans-unit id="f25a04e7657c04aa0e31d2f5b48fdb386a99c532" translate="yes" xml:space="preserve">
          <source>Sometimes we want to track changes of the reactive object (&lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;reactive&lt;/code&gt;) but we also want prevent changing it from a certain place of the application. For example, when we have a &lt;a href=&quot;component-provide-inject&quot;&gt;provided&lt;/a&gt; reactive object, we want to prevent mutating it where it's injected. To do so, we can create a readonly proxy to the original object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4776e0f84b8cab0978edcc2a16ccf37eb32d43" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of new properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. In such cases, you should create a fresh object with properties from both objects. So instead of:</source>
          <target state="translated">Иногда вам может потребоваться присвоить несколько новых свойств существующему объекту, например, используя &lt;code&gt;Object.assign()&lt;/code&gt; или &lt;code&gt;_.extend()&lt;/code&gt; . В таких случаях вам следует создать новый объект со свойствами обоих объектов. Так что вместо:</target>
        </trans-unit>
        <trans-unit id="4216179a7f142347ead5e8b4c8a44ddd1938267a" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</source>
          <target state="translated">Иногда вам может потребоваться присвоить несколько свойств существующему объекту, например, используя &lt;code&gt;Object.assign()&lt;/code&gt; или &lt;code&gt;_.extend()&lt;/code&gt; . Однако новые свойства, добавленные к объекту, не вызывают изменений. В таких случаях создайте новый объект со свойствами как исходного объекта, так и объекта примеси:</target>
        </trans-unit>
        <trans-unit id="4a3e5c479936fa0c0c3ae63c92af5bdeccbe0976" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful for slot content to have access to data only available in the child component. For example, imagine a &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">Иногда для содержимого слота полезно иметь доступ к данным, доступным только в дочернем компоненте. Например, представьте компонент &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; со следующим шаблоном:</target>
        </trans-unit>
        <trans-unit id="d2dd5e9a7fd5d98bf25e0a4d4fb18f9f4c3db2f1" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">Иногда полезно динамически переключаться между компонентами, например, в интерфейсе с вкладками:</target>
        </trans-unit>
        <trans-unit id="f98399635dcaa9fb92ae8c33f20e2898527837a6" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful for slot content to have access to data only available in the child component. It's a common case when a component is used to render an array of items, and we want to be able to customize the way each item is rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c22129f03ba057d1a81b6eb4f7dbc5cd8f53769" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878866be830f3d4c0492c7b15ce7d3313f921fc8" translate="yes" xml:space="preserve">
          <source>Soup &lt;em&gt;of the&lt;/em&gt; day</source>
          <target state="translated">Суп &lt;em&gt;из&lt;/em&gt; дня</target>
        </trans-unit>
        <trans-unit id="d180f8bdb033e9ee4c654b9ecb9c6a807595b405" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://www.inkonhand.com/2015/10/the-serial-oxford-comma-when-and-why-to-use-it/&quot;&gt;The Serial (Oxford) Comma: When and Why To Use It (opens new window)&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b9938ede233236eb1cd82e999d8e494cee5f74" translate="yes" xml:space="preserve">
          <source>Special &lt;code&gt;is&lt;/code&gt; prop usage is restricted to the reserved &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; tag only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9898b37c34a88e00f23e82b5e3dc9a1701903a0c" translate="yes" xml:space="preserve">
          <source>Special Attributes</source>
          <target state="translated">Специальные атрибуты</target>
        </trans-unit>
        <trans-unit id="c1844df643c3c6b29d9ebd395e5456144c913b68" translate="yes" xml:space="preserve">
          <source>Special Attributes - ref</source>
          <target state="translated">Специальные атрибуты-ссылка</target>
        </trans-unit>
        <trans-unit id="7f375124a7e84608fdea56b183bf085ef84dd0dd" translate="yes" xml:space="preserve">
          <source>Specifies a default value for the prop. If the prop is not passed, this value will be used instead. Object or array defaults must be returned from a factory function.</source>
          <target state="translated">Указывает значение по умолчанию для реквизита.Если реквизит не передан,вместо него будет использоваться это значение.Значения по умолчанию объекта или массива должны быть возвращены из заводской функции.</target>
        </trans-unit>
        <trans-unit id="5cf7af7c10f0573850ae6d92c49417cd3597e370" translate="yes" xml:space="preserve">
          <source>Specifies a method to recognize custom elements defined outside of Vue (e.g., using the Web Components APIs). If component matches this condition, it won't need local or global registration and Vue won't throw a warning about an &lt;code&gt;Unknown custom element&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d419b352796d39146919ef5966306201da0baac" translate="yes" xml:space="preserve">
          <source>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as &lt;code&gt;this.$parent&lt;/code&gt; for the child, and the child will be pushed into the parent&amp;rsquo;s &lt;code&gt;$children&lt;/code&gt; array.</source>
          <target state="translated">Укажите родительский экземпляр для создаваемого экземпляра. Устанавливает между ними родительско-дочерние отношения. Родитель будет доступен как &lt;code&gt;this.$parent&lt;/code&gt; для дочернего элемента, а дочерний элемент будет помещен в родительский массив &lt;code&gt;$children&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4de7be6dcaca74a1df3b6f74eed72c7caf49130" translate="yes" xml:space="preserve">
          <source>Staggering List Transitions</source>
          <target state="translated">Ошеломляющий список переходов</target>
        </trans-unit>
        <trans-unit id="b27a0b62f6b0f0e5d6bdbda21b8a0fe747c08c58" translate="yes" xml:space="preserve">
          <source>Standalone &lt;code&gt;computed&lt;/code&gt; properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="5ba91e4b27bd154b6feecd545db4023c8e7c12d0" translate="yes" xml:space="preserve">
          <source>Start by running the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on a current project. We&amp;rsquo;ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they&amp;rsquo;ll let you know, offer suggestions, and provide links to more info.</source>
          <target state="translated">Начните с запуска &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;помощника&lt;/a&gt; по миграции в текущем проекте. Мы тщательно уменьшили и сжали старшего разработчика Vue в простой интерфейс командной строки. Когда они обнаруживают устаревшую функцию, они сообщают вам об этом, предлагают предложения и ссылки на дополнительную информацию.</target>
        </trans-unit>
        <trans-unit id="28a4d07d95fe98bb4c6125accbb70808be25a998" translate="yes" xml:space="preserve">
          <source>Start learning Vue 3 at &lt;a href=&quot;https://www.vuemastery.com/courses-path/vue3&quot;&gt;Vue Mastery (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcf8af955dfbcfec984375c6e8f6a528e65233d" translate="yes" xml:space="preserve">
          <source>Starting in 2.3.0+ you can provide an array of multiple (prefixed) values to a style property, for example:</source>
          <target state="translated">Начиная с версии 2.3.0+вы можете предоставить массив из нескольких (префиксных)значений,например,в свойство стиля:</target>
        </trans-unit>
        <trans-unit id="9ba53e05f135de31a97be4f79621e7c2bfae116b" translate="yes" xml:space="preserve">
          <source>Starting in 2.4.0+, &lt;code&gt;v-on&lt;/code&gt; also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</source>
          <target state="translated">Начиная с версии 2.4.0+, &lt;code&gt;v-on&lt;/code&gt; также поддерживает привязку к объекту пар событие / прослушиватель без аргументов. Обратите внимание, что при использовании синтаксиса объекта он не поддерживает никаких модификаторов.</target>
        </trans-unit>
        <trans-unit id="9b9230ebf8a27183774b5eb88b79650092ee23d2" translate="yes" xml:space="preserve">
          <source>Starting in version 2.6.0, it is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:</source>
          <target state="translated">Начиная с версии 2.6.0,можно также использовать выражение JavaScript в аргументе директивы,обернув его квадратными скобками:</target>
        </trans-unit>
        <trans-unit id="bfa146787ba4b5ec0af7e28c9b9db98dcdf2cd1c" translate="yes" xml:space="preserve">
          <source>State Management</source>
          <target state="translated">Государственное управление</target>
        </trans-unit>
        <trans-unit id="d5d64221ddf91f88df67cce91813f4262eb7edaf" translate="yes" xml:space="preserve">
          <source>State Transitions</source>
          <target state="translated">Государственные преобразования</target>
        </trans-unit>
        <trans-unit id="a872ca8fe22c7e62b5337472cd220dc9385362c8" translate="yes" xml:space="preserve">
          <source>Stop listening for an event with &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">Прекратить прослушивание события с помощью &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f208c0bbf3772e76982a8bda3a5274d77fdd02bf" translate="yes" xml:space="preserve">
          <source>Stopping the Watcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59e5fba28ea5c4503821b338479233b19afe716" translate="yes" xml:space="preserve">
          <source>Store&amp;rsquo;s Event Emitter &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">Излучатель событий магазина &lt;sup&gt;удален.&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d773159a1a0982856fe46c12315a0727637b7f5c" translate="yes" xml:space="preserve">
          <source>Stories of Web Users (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="91315c1968e95b4caef2bb0299209f84b45e1fa3" translate="yes" xml:space="preserve">
          <source>String templates (e.g. &lt;code&gt;template: '...'&lt;/code&gt;)</source>
          <target state="translated">Шаблоны строк (например, &lt;code&gt;template: '...'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="84e89cde6c5037b89a187a9f976fce4b0a1427b8" translate="yes" xml:space="preserve">
          <source>Strings are just the beginning though! Slots can also contain any template code, including HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e470c308e845a09614e0edbb14273cef3760f9e6" translate="yes" xml:space="preserve">
          <source>Structure Your Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">Руководство по стилю</target>
        </trans-unit>
        <trans-unit id="93b9066aa73ddae63c26874719afa6da8fe21b7f" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority A: Essential</source>
          <target state="translated">Руководство по стилю:Приоритет А:Существенный</target>
        </trans-unit>
        <trans-unit id="43212530e7b38b61ce475ee08dd6944866d5239c" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority B: Strongly Recommended</source>
          <target state="translated">Руководство по стилю:Приоритет В:настоятельно рекомендуется</target>
        </trans-unit>
        <trans-unit id="dc97fc3044903277305bdcda1967fb4d1dab822e" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority C: Recommended</source>
          <target state="translated">Руководство по стилю:Приоритет С:Рекомендуется</target>
        </trans-unit>
        <trans-unit id="b9a479a71d55ce0478bf03634c2c6dce93bce7d7" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority D: Use with Caution</source>
          <target state="translated">Руководство по стилю:Приоритет D:Использовать с осторожностью</target>
        </trans-unit>
        <trans-unit id="d999535d9e96f490d6db66310b5ab700b8118ee7" translate="yes" xml:space="preserve">
          <source>Style Guide: Rule Categories</source>
          <target state="translated">Руководство по стилю:Категории правил</target>
        </trans-unit>
        <trans-unit id="6d65d71b782f14936232d84229a5f61207efaa2f" translate="yes" xml:space="preserve">
          <source>Such fragmentation is what makes it difficult to understand and maintain a complex component. The separation of options obscures the underlying logical concerns. In addition, when working on a single logical concern, we have to constantly &quot;jump&quot; around option blocks for the relevant code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4d1ebbf70788826d3c9dfbc9cbeb9c0d4050de" translate="yes" xml:space="preserve">
          <source>Support for the &lt;a href=&quot;https://vuejs.org/v2/guide/components-edge-cases.html#Inline-Templates&quot;&gt;inline-template feature (opens new window)&lt;/a&gt; has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25215fbc4c4e4e977ec770b409dd327c9660e279" translate="yes" xml:space="preserve">
          <source>Supporting Libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192495a00e88072aa34a9c8967ae9a28351881dd" translate="yes" xml:space="preserve">
          <source>Supports the main content, yet is separated and meaningful on its own content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbf610d0cedad761fd69b3fc9625e259e3102c5" translate="yes" xml:space="preserve">
          <source>Suppress all Vue logs and warnings.</source>
          <target state="translated">Подавить все журналы Vue и предупреждения.</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ed4b8354b13fc6485ba3014a73af2e474df2ab5c" translate="yes" xml:space="preserve">
          <source>System Modifier Keys</source>
          <target state="translated">Клавиши системных модификаторов</target>
        </trans-unit>
        <trans-unit id="50c8c29654572574cb09f443f4f7130974b6f7f0" translate="yes" xml:space="preserve">
          <source>TODO: example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319233f83072aefd32186de40076b6ff48598e8f" translate="yes" xml:space="preserve">
          <source>TODO: refactor to Vue 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d12d493f249dcb697f9fc3bec6d6ad8c163bbd" translate="yes" xml:space="preserve">
          <source>Take a bounce, for instance. In CSS we have to declare each keyframe, up and down. In JavaScript, we can express all of that movement within the ease, by declaring &lt;code&gt;bounce&lt;/code&gt; in the &lt;a href=&quot;https://greensock.com/&quot;&gt;GreenSock API (GSAP) (opens new window)&lt;/a&gt; (other JS libraries have other types of easing defaults).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166b63f2d5ff9fdb1de967a0347fe8dc5241cd62" translate="yes" xml:space="preserve">
          <source>Takes a getter function and returns an immutable reactive &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f989572cedd84a74a07b5bf7b1664e4c8a72ec" translate="yes" xml:space="preserve">
          <source>Takes an inner value and returns a reactive and mutable ref object. The ref object has a single property &lt;code&gt;.value&lt;/code&gt; that points to the inner value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bb3dabb27aab83b18622439b2c5a20620a0ccf" translate="yes" xml:space="preserve">
          <source>Takes an object (reactive or plain) or a &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; and returns a readonly proxy to the original. A readonly proxy is deep: any nested property accessed will be readonly as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6c5bccdb604b94eb8ab89652fd34fcc3eb3695" translate="yes" xml:space="preserve">
          <source>Takes multiple objects containing VNode props and merges them into a single object. A newly created object is returned, the objects passed as arguments are not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f57d40683ecffc4ca86380b17ed3c5176ebc50" translate="yes" xml:space="preserve">
          <source>Teleport</source>
          <target state="translated">Teleport</target>
        </trans-unit>
        <trans-unit id="ad764b00530e26ef237ac1f92eb62e0edb148231" translate="yes" xml:space="preserve">
          <source>Teleport provides a clean way to allow us to control under which parent in our DOM we want a piece of HTML to be rendered, without having to resort to global state or splitting this into two components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c9825399d84e5c262586eb382db07595391d25" translate="yes" xml:space="preserve">
          <source>Template Compilation</source>
          <target state="translated">Составление шаблона</target>
        </trans-unit>
        <trans-unit id="2ae67e97b00487f3f90864f310b8d29b934c3c52" translate="yes" xml:space="preserve">
          <source>Template Directives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba475c6198c22827306439a2203a42585619f02" translate="yes" xml:space="preserve">
          <source>Template Refs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">Синтаксис шаблона</target>
        </trans-unit>
        <trans-unit id="87f791533debd15ff2182bca9d38f5b619056fb8" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3&quot;&gt;whitelist of globals (opens new window)&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60e21f3a907038b2e4d24850447a7990f71ed0d" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;whitelist of globals&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">Выражения шаблонов изолированы и имеют доступ только к &lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;белому списку глобальных переменных,&lt;/a&gt; таких как &lt;code&gt;Math&lt;/code&gt; и &lt;code&gt;Date&lt;/code&gt; . Вы не должны пытаться получить доступ к определяемым пользователем глобальным объектам в выражениях шаблона.</target>
        </trans-unit>
        <trans-unit id="f92fd54659b0bd943b37f93caaa1c5a2a10a3c44" translate="yes" xml:space="preserve">
          <source>Template refs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="a55a275aa676930d9258569485d5b38eb1196630" translate="yes" xml:space="preserve">
          <source>Terms</source>
          <target state="translated">Terms</target>
        </trans-unit>
        <trans-unit id="10f908ceba5f009dd71054f4ef6b3aaa66ff44bc" translate="yes" xml:space="preserve">
          <source>TestCafe</source>
          <target state="translated">TestCafe</target>
        </trans-unit>
        <trans-unit id="6c55cd42db1a383a6c4c9ac73304eb05e0b98335" translate="yes" xml:space="preserve">
          <source>TestCafe is a Node.js based end-to-end framework that aims to provide easy setup so that developers can focus on creating tests that are easy to write and reliable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6278322851712ada779876114d43299a445fc78" translate="yes" xml:space="preserve">
          <source>TestCafe's Official Website (opens new window)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="03aaa3887a5a2deee792941da96ae7dda7d74089" translate="yes" xml:space="preserve">
          <source>Thanks to Vue&amp;rsquo;s Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">Благодаря системе Vue Reactivity, он всегда знает, когда обновлять (если вы правильно ее используете). Однако есть крайние случаи, когда вам может потребоваться принудительное обновление, несмотря на то, что никакие реактивные данные не изменились. Есть и другие случаи, когда вы можете предотвратить ненужные обновления.</target>
        </trans-unit>
        <trans-unit id="9d322d111908580c61e86985299bb692d828ff9a" translate="yes" xml:space="preserve">
          <source>Thanks to Vue's Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb8402824e1dedc0c9ad70f0e1846cefbab8933" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;@enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update the value of &lt;code&gt;postFontSize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5627556ef42d923efe566603e16cd6d339c54b6" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update &lt;code&gt;postFontSize&lt;/code&gt; value.</source>
          <target state="translated">Благодаря прослушивателю &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; родительский &lt;code&gt;postFontSize&lt;/code&gt; получит событие и обновит значение postFontSize .</target>
        </trans-unit>
        <trans-unit id="36e5dbb5155a7f2f18ff2f7f92eeacd1bc83b650" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;), you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">Это означает, что значение &lt;code&gt;v-slot&lt;/code&gt; может фактически принимать любое допустимое выражение JavaScript, которое может появиться в позиции аргумента определения функции. Таким образом, в поддерживаемых средах ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;однофайловые &lt;/a&gt;&lt;a href=&quot;single-file-components&quot;&gt;компоненты&lt;/a&gt; или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;современные браузеры&lt;/a&gt; ) вы также можете использовать деструктуризацию ES2015 для извлечения определенных реквизитов слота, например:</target>
        </trans-unit>
        <trans-unit id="27c8aa4b0bdc5143989d71993befdc85152219b3" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring (opens new window)&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb7688f15ef595e1970dc731883ce107eed33d5" translate="yes" xml:space="preserve">
          <source>That means this element:</source>
          <target state="translated">Это означает этот элемент:</target>
        </trans-unit>
        <trans-unit id="e26ac9d99d2de3a31a44d33d135f52e40dec965b" translate="yes" xml:space="preserve">
          <source>That said, it would probably make a better comparison between Vue core and Ember&amp;rsquo;s &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;templating&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;object model&lt;/a&gt; layers:</source>
          <target state="translated">Тем не менее, это, вероятно, поможет лучше сравнить между ядром Vue и уровнями &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;шаблонов&lt;/a&gt; и &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;объектной модели&lt;/a&gt; Ember :</target>
        </trans-unit>
        <trans-unit id="ebe9db2fac785a6fb1584b0f003bd0d058f9da0a" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &quot;scope&quot;) as the rest of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd91ee6e59ac928406a857815fec4a8fd6adac41" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &amp;ldquo;scope&amp;rdquo;) as the rest of the template. The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;&amp;lsquo;s scope. For example, trying to access &lt;code&gt;url&lt;/code&gt; would not work:</source>
          <target state="translated">Этот слот имеет доступ к тем же свойствам экземпляра (т. Е. К той же &amp;laquo;области&amp;raquo;), что и остальная часть шаблона. Слот &lt;strong&gt;не&lt;/strong&gt; имеет доступа к области действия &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; . Например, попытка доступа к &lt;code&gt;url&lt;/code&gt; не сработает:</target>
        </trans-unit>
        <trans-unit id="459dd83f2362d8a07c853704c9fdaa721e9d7d51" translate="yes" xml:space="preserve">
          <source>That template doesn&amp;rsquo;t feel great. It&amp;rsquo;s not only verbose, but we&amp;rsquo;re duplicating &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; for every heading level and will have to do the same when we add the anchor element.</source>
          <target state="translated">Этот шаблон не очень хорош. Это не только многословно, но и мы дублируем &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; для каждого уровня заголовка, и нам придется делать то же самое при добавлении элемента привязки.</target>
        </trans-unit>
        <trans-unit id="40ca5f9431c8b1d278ec924f34122ffafff7e4e3" translate="yes" xml:space="preserve">
          <source>That was rather quick and requires some knowledge of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxies (opens new window)&lt;/a&gt; to understand! So let&amp;rsquo;s dive in a bit. There&amp;rsquo;s a lot of literature on Proxies, but what you really need to know is that a &lt;strong&gt;Proxy is an object that encases another object or function and allows you to intercept it.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e76918c986bcb84adf08fee89b468d3a1fda00" translate="yes" xml:space="preserve">
          <source>That won&amp;rsquo;t work, however, because only the &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;user&lt;/code&gt; and the content we&amp;rsquo;re providing is rendered in the parent.</source>
          <target state="translated">Однако это не сработает, потому что только компонент &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; имеет доступ к &lt;code&gt;user&lt;/code&gt; а предоставляемый нами контент отображается в родительском элементе.</target>
        </trans-unit>
        <trans-unit id="42b1a4945329f894f6cd581118c84d29929b3eb9" translate="yes" xml:space="preserve">
          <source>That won't work, however, because only the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;item&lt;/code&gt; and we are providing the slot content from its parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e6eaf815a0b389b506fd9203ee98688ac385cc" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about DOM template parsing caveats for now &amp;ndash; and actually, the end of Vue&amp;rsquo;s &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There&amp;rsquo;s still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">Это все, что вам нужно знать о предостережениях при анализе DOM-шаблонов на данный момент - и на самом деле, о конце Vue &lt;em&gt;Essentials&lt;/em&gt; . Поздравляю! Еще есть чему поучиться, но сначала мы рекомендуем сделать перерыв, чтобы поиграть с Vue самостоятельно и создать что-нибудь интересное.</target>
        </trans-unit>
        <trans-unit id="e65f913a2b8930db25e11b615901938e35677612" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about custom component events for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">Это все, что вам нужно знать о событиях пользовательских компонентов на данный момент, но как только вы закончите читать эту страницу и почувствуете себя комфортно с ее содержанием, мы рекомендуем вернуться позже, чтобы прочитать полное руководство по &lt;a href=&quot;components-custom-events&quot;&gt;пользовательским событиям&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="814dc84544fcf8f9ba3af47bc369c70717b8fdfa" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about dynamic components for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">Это все, что вам нужно знать о динамических компонентах на данный момент, но как только вы закончите читать эту страницу и почувствуете себя комфортно с ее содержанием, мы рекомендуем вернуться позже, чтобы прочитать полное руководство по &lt;a href=&quot;components-dynamic-async&quot;&gt;динамическим и асинхронным компонентам&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1370785d9557daacd2793450c22d6061fa0adbc6" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about props for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">Это все, что вам нужно знать о реквизите на данный момент, но как только вы закончите читать эту страницу и почувствуете себя комфортно с ее содержанием, мы рекомендуем вернуться позже, чтобы прочитать полное руководство по &lt;a href=&quot;components-props&quot;&gt;Props&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1e701db7e6d05f9288626f8d97a85fc554f9593e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about registration for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">Это все, что вам нужно знать о регистрации на данный момент, но как только вы закончите читать эту страницу и почувствуете себя комфортно с ее содержанием, мы рекомендуем вернуться позже, чтобы прочитать полное руководство по &lt;a href=&quot;components-registration&quot;&gt;регистрации компонентов&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8e7ac0de9bc7b2393fad83ed8e57aa35094e7cc2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about slots for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">Это все, что вам нужно знать о слотах на данный момент, но как только вы закончите читать эту страницу и почувствуете себя комфортно с ее содержанием, мы рекомендуем вернуться позже, чтобы прочитать полное руководство по &lt;a href=&quot;components-slots&quot;&gt;слотам&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6f39b1bdd26be7312e776a774c103e8b83e7cb1a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why for any complex logic, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">Вот почему для любой сложной логики следует использовать &lt;strong&gt;вычисляемое свойство&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3b16487797e90834fa5c92964e14dabbe10606c8" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why instead, we recommend emitting events in the pattern of &lt;code&gt;update:myPropName&lt;/code&gt;. For example, in a hypothetical component with a &lt;code&gt;title&lt;/code&gt; prop, we could communicate the intent of assigning a new value with:</source>
          <target state="translated">Вот почему вместо этого мы рекомендуем генерировать события в шаблоне &lt;code&gt;update:myPropName&lt;/code&gt; . Например, в гипотетическом компоненте с опорой &lt;code&gt;title&lt;/code&gt; мы могли бы сообщить о намерении присвоить новое значение с помощью:</target>
        </trans-unit>
        <trans-unit id="996c0c7a918cb9833eb237973fce54baee6b3199" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why there&amp;rsquo;s a &lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babel plugin&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that&amp;rsquo;s closer to templates:</source>
          <target state="translated">Вот почему есть &lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;плагин Babel&lt;/a&gt; для использования JSX с Vue, возвращающий нас к синтаксису, который ближе к шаблонам:</target>
        </trans-unit>
        <trans-unit id="ad7c55b719b44c49b49edeaa4e2789ec22bd2ca2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why we offer a full system for rapid Vue.js development. &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; aims to be the standard tooling baseline for the Vue ecosystem. It ensures the various build tools work smoothly together with sensible defaults so you can focus on writing your app instead of spending hours wrangling with configurations. At the same time, it still offers the flexibility to tweak the configuration of each tool to specific needs.</source>
          <target state="translated">Вот почему мы предлагаем полную систему для быстрой разработки на Vue.js. &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; стремится стать стандартным базовым набором инструментов для экосистемы Vue. Он обеспечивает бесперебойную работу различных инструментов сборки с разумными настройками по умолчанию, поэтому вы можете сосредоточиться на написании своего приложения, а не тратить часы на споры с конфигурациями. В то же время он по-прежнему предлагает гибкость для настройки конфигурации каждого инструмента в соответствии с конкретными потребностями.</target>
        </trans-unit>
        <trans-unit id="bba91aec83e99447744160b88bf3ba0ab32b499e" translate="yes" xml:space="preserve">
          <source>That's all you need to know about DOM template parsing caveats for now - and actually, the end of Vue's &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There's still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b93f49048dd9b725a716b45c67fedfd58d6b11" translate="yes" xml:space="preserve">
          <source>That's all you need to know about custom component events for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0accce133742657fa043ef7d74e9679b32ef231" translate="yes" xml:space="preserve">
          <source>That's all you need to know about dynamic components for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a1c23c246a38952fa29f092346ab4e24f7ead2" translate="yes" xml:space="preserve">
          <source>That's all you need to know about props for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a64868a5bbef5500d81de810e0706920f9d3be1" translate="yes" xml:space="preserve">
          <source>That's all you need to know about registration for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d253078876f24169567da70107c04eb1ce5f8f" translate="yes" xml:space="preserve">
          <source>That's all you need to know about slots for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf2ae773074cc55199394b6b9682fe8b4e4cd25" translate="yes" xml:space="preserve">
          <source>That's why for complex logic that includes reactive data, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dd67615a2c35df2f233f7e1f18e52094ea1893" translate="yes" xml:space="preserve">
          <source>That's why there's a &lt;a href=&quot;https://github.com/vuejs/jsx-next&quot;&gt;Babel plugin (opens new window)&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that's closer to templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380f6acd2ffeb81256b1988e0d724bdacc81b791" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../composition-api-provide-inject&quot;&gt;inject&lt;/a&gt; API can be used inside default functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8054cccceec827f8cba34b7a1b6bd02a65cd67d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;guide/installation&quot;&gt;Installation&lt;/a&gt; page provides more options of installing Vue. Note: We &lt;strong&gt;do not&lt;/strong&gt; recommend that beginners start with &lt;code&gt;vue-cli&lt;/code&gt;, especially if you are not yet familiar with Node.js-based build tools.</source>
          <target state="translated">На странице &amp;laquo; &lt;a href=&quot;guide/installation&quot;&gt;Установка&amp;raquo;&lt;/a&gt; представлены дополнительные варианты установки Vue. Примечание. Мы &lt;strong&gt;не&lt;/strong&gt; рекомендуем новичкам начинать с &lt;code&gt;vue-cli&lt;/code&gt; , особенно если вы еще не знакомы с инструментами сборки на основе Node.js.</target>
        </trans-unit>
        <trans-unit id="a5ab4cb7708169e37819b6bac8b1dd32c12097a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;pluralize&lt;/a&gt; package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like &lt;code&gt;0&lt;/code&gt;, then you can also easily define your own pluralize functions. For example:</source>
          <target state="translated">Пакет &lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;множественного числа&lt;/a&gt; в NPM прекрасно служит этой цели, но если вы хотите использовать только множественное число для определенного слова или хотите иметь специальный вывод для таких случаев, как &lt;code&gt;0&lt;/code&gt; , вы также можете легко определить свои собственные функции множественного числа. Например:</target>
        </trans-unit>
        <trans-unit id="d9164352c56312292582372111c07ba7f53f47ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$children&lt;/code&gt; instance property has been removed from Vue 3.0 and is no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96eefbbce0803602164da064c9e1efcc96fb085c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$listeners&lt;/code&gt; object has been removed in Vue 3. Event listeners are now part of &lt;code&gt;$attrs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05878157178d05a4e01a1c89173d306a9458b9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; property is now reactive, so you can use a watcher to react to route changes, like this:</source>
          <target state="translated">Свойство &lt;code&gt;$route&lt;/code&gt; теперь является реактивным, поэтому вы можете использовать наблюдателя, чтобы реагировать на изменения маршрута, например:</target>
        </trans-unit>
        <trans-unit id="26e5d2730ae73e0e0de2df953cf2ee3a5fad3d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; will be the actual link (and will get the correct href), but the active class will be applied to the outer &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; будет фактической ссылка (и получите правильный HREF), но активный класс будет применяться к наружному &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1c768384d9ec752c708894881ada4881202a8fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will not be visible until the compilation is done.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; не будет виден , пока компиляция не будет сделано.</target>
        </trans-unit>
        <trans-unit id="6726c886cd7d1313872ea34b72b56e9373d396cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; component might define a &lt;code&gt;map&lt;/code&gt; property that all subcomponents need access to. In this case &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; might want to access that map with something like &lt;code&gt;this.$parent.getMap&lt;/code&gt;, in order to add a set of markers to it. You can see this pattern &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;in action here&lt;/a&gt;.</source>
          <target state="translated">Компонент &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; может определять свойство &lt;code&gt;map&lt;/code&gt; которому требуется доступ для всех подкомпонентов. В этом случае &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; может захотеть получить доступ к этой карте с помощью чего-то вроде &lt;code&gt;this.$parent.getMap&lt;/code&gt; , чтобы добавить к ней набор маркеров. Здесь вы можете увидеть этот шаблон &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;в действии&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a2c8e1e0505ab8b6ddf5d40dd395dc7902e3cf56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component's related prop names are also changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780604d1e5198fdcc94939f3a317c58b142346c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of &lt;strong&gt;the &lt;code&gt;v-move&lt;/code&gt; class&lt;/strong&gt;, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided &lt;code&gt;name&lt;/code&gt; attribute and you can also manually specify a class with the &lt;code&gt;move-class&lt;/code&gt; attribute.</source>
          <target state="translated">У компонента &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; есть еще одна хитрость в рукаве. Он может не только анимировать вход и выход, но и изменение положения. Единственная новая концепция вы должны знать , чтобы использовать эту функцию , является добавлением &lt;strong&gt;к &lt;code&gt;v-move&lt;/code&gt; класса&lt;/strong&gt; , который добавляется , когда элементы меняются позиция. Как и другие классы, его префикс будет соответствовать значению предоставленного атрибута &lt;code&gt;name&lt;/code&gt; , и вы также можете вручную указать класс с атрибутом &lt;code&gt;move-class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="606648505385790cf915adeb72e619634753fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.camel&lt;/code&gt; modifier allows camelizing a &lt;code&gt;v-bind&lt;/code&gt; attribute name when using in-DOM templates, e.g. the SVG &lt;code&gt;viewBox&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;.camel&lt;/code&gt; модификатор позволяет camelizing с &lt;code&gt;v-bind&lt;/code&gt; имени атрибута при использовании в DOM-шаблонов, например, SVG &lt;code&gt;viewBox&lt;/code&gt; атрибут:</target>
        </trans-unit>
        <trans-unit id="b9f947cb89a1b3d04c28ecc1fa1b5146bc308109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.exact&lt;/code&gt; modifier allows control of the exact combination of system modifiers needed to trigger an event.</source>
          <target state="translated">&lt;code&gt;.exact&lt;/code&gt; модификатор позволяет контролировать точное сочетание системы модификаторов , необходимых , чтобы вызвать событие.</target>
        </trans-unit>
        <trans-unit id="71dc161e02d764cb61bccce7f7216e558eea41ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.literal&lt;/code&gt; modifier has been removed, as the same can be easily achieved by providing a string literal as the value.</source>
          <target state="translated">&lt;code&gt;.literal&lt;/code&gt; модификатор был удален, так как то же самое может быть легко достигнут путем предоставления строкового литерала в качестве значения.</target>
        </trans-unit>
        <trans-unit id="308a478daa47f802fcf7064044194b241f15c334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3becf1ee2ca90a6fc101f76e8887a18559adb41a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed. At the same time, the &lt;a href=&quot;emits-option&quot;&gt;new &lt;code&gt;emits&lt;/code&gt; option&lt;/a&gt; allows the child to define which events it does indeed emit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447f18c9c1ff6544a5bf8da7ab660de9c45d00c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.passive&lt;/code&gt; modifier is especially useful for improving performance on mobile devices.</source>
          <target state="translated">&lt;code&gt;.passive&lt;/code&gt; модификатор особенно полезен для повышения производительности на мобильных устройствах.</target>
        </trans-unit>
        <trans-unit id="21fd043aec56c5be7446f861bc772ebd8e753810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.sync&lt;/code&gt; modifier can also be used with &lt;code&gt;v-bind&lt;/code&gt; when using an object to set multiple props at once:</source>
          <target state="translated">&lt;code&gt;.sync&lt;/code&gt; модификатор может быть также использован с &lt;code&gt;v-bind&lt;/code&gt; при использовании объекта , чтобы установить несколько реквизита сразу:</target>
        </trans-unit>
        <trans-unit id="e59003918037a8c1f8920574ddef9a77cb026920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeDestroy&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;beforeUnmount&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3817e7666ae6c3a405c0d45307315403fffca57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object is a normal JavaScript object, i.e., it is not reactive, this means you can safely use ES6 destructuring on &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7e4a79aa1bc3f195e7a97ea550fd689981561f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option for a component is a function. Vue calls this function as part of creating a new component instance. It should return an object, which Vue will then wrap in its reactivity system and store on the component instance as &lt;code&gt;$data&lt;/code&gt;. For convenience, any top-level properties of that object are also exposed directly via the component instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8c8dfe01e42917e2ff4e19582c833d9aa41cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option from mixins is now merged shallowly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e095d28c13325b0a2ff9afba855f773d35b3336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option should always be declared as a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4723e87f8fb0a7081e311e56df5dd95f823b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineAsyncComponent&lt;/code&gt; method can also return an object of the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d697a25010441d0b264cc1f141099db64aff1db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destroyed&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;unmounted&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4df5e8123b51efba1d697cb7ba9ffc8b699b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute will be included if &lt;code&gt;isButtonDisabled&lt;/code&gt; has a truthy value. It will also be included if the value is an empty string, maintaining consistency with &lt;code&gt;&amp;lt;button disabled=&quot;&quot;&amp;gt;&lt;/code&gt;. For other falsy values the attribute will be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3321d11e9ef44eba8d358a3614e37323b934b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; option has been removed. Event handlers should now be registered in the &lt;code&gt;created&lt;/code&gt; hook instead. Check out the &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt;&lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; migration guide&lt;/a&gt; for a detailed example.</source>
          <target state="translated">Опция &lt;code&gt;events&lt;/code&gt; была удалена. Обработчики событий теперь должны быть зарегистрированы в ловушке &lt;code&gt;created&lt;/code&gt; . См. Подробный пример в &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt;руководстве&lt;/a&gt; по миграции &lt;code&gt;$dispatch&lt;/code&gt; и &lt;code&gt;$broadcast&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="969a6bb824b842ffc1d346a7247789e1a861039f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option allows for greater control over the timing of the callback. It can be set to &lt;code&gt;'pre'&lt;/code&gt;, &lt;code&gt;'post'&lt;/code&gt; or &lt;code&gt;'sync'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86635a9e983287d162b8578aa3c62a8c5b94caa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option also accepts &lt;code&gt;'sync'&lt;/code&gt;, which forces the effect to always trigger synchronously. This is however inefficient and should be rarely needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0062f9c0b75b81c6ff6fcf7a3ca6dc7650b1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;h()&lt;/code&gt; function is a utility to create VNodes. It could perhaps more accurately be named &lt;code&gt;createVNode()&lt;/code&gt;, but it's called &lt;code&gt;h()&lt;/code&gt; due to frequent use and for brevity. It accepts three arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7c4b5febaa054c2d70f2972911d81840dc234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-out&lt;/code&gt; mode isn&amp;rsquo;t used as often, but can sometimes be useful for a slightly different transition effect. Let&amp;rsquo;s try combining it with the slide-fade transition we worked on earlier:</source>
          <target state="translated">Режим &lt;code&gt;in-out&lt;/code&gt; используется не так часто, но иногда может быть полезен для немного другого эффекта перехода. Давайте попробуем объединить его с переходом слайд-затухание, над которым мы работали ранее:</target>
        </trans-unit>
        <trans-unit id="7bb2562df8be00932287fedd76a233d44e708651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</source>
          <target state="translated">Свойства &lt;code&gt;include&lt;/code&gt; и &lt;code&gt;exclude&lt;/code&gt; позволяют условно кэшировать компоненты. Оба свойства могут быть строкой, разделенной запятыми, регулярным выражением или массивом:</target>
        </trans-unit>
        <trans-unit id="ad43de9f1a6b8ce8e7970eab3f6c424fa974ff41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3005dd7e3a2ab19b9c3f238f5cffc41fda2a00f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; function takes two parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd088c8b9dd70d20f540d863e4827655ef4afc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; option should be either:</source>
          <target state="translated">Вариант &lt;code&gt;inject&lt;/code&gt; должен быть либо:</target>
        </trans-unit>
        <trans-unit id="582a8cbd2aa999f85f97f4835ddb07fec729cd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue&amp;rsquo;s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; специальный атрибут в основном используются в качестве подсказки для алгоритма виртуального DOM Vue, чтобы определить VNodes когда сравнивает новый список узлов против старого списка. Без ключей Vue использует алгоритм, который минимизирует перемещение элементов и пытается исправлять / повторно использовать элементы одного и того же типа на месте, насколько это возможно. С ключами он будет переупорядочивать элементы в зависимости от изменения порядка ключей, а элементы с ключами, которых больше нет, всегда будут удалены / уничтожены.</target>
        </trans-unit>
        <trans-unit id="d96a4b8a73cec33e818285f7909aa04171e0d11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bb23e5f1c97d21a94fbab93c3793896e2b9fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is used as a hint for Vue's virtual DOM algorithm to keep track of a node's identity. That way, Vue knows when it can reuse and patch existing nodes and when it needs to reorder or recreate them. For more information, see the following sections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc118214d9d96bdcdab86a3dcf6dbc36ea6680a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lazy&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; param attributes are now modifiers, to make it more clear what That means instead of:</source>
          <target state="translated">В &lt;code&gt;lazy&lt;/code&gt; и &lt;code&gt;number&lt;/code&gt; атрибутов Param являются теперь модификаторы, чтобы сделать его более ясным , что это значит вместо:</target>
        </trans-unit>
        <trans-unit id="8fd9123a4c3c6ce18d253d0bcbec98386329eae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a &lt;code&gt;created&lt;/code&gt; hook and the component itself also has one, both functions will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb26d534e1e0fd7dab034b343fe732f25ec4cdc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in &lt;code&gt;Vue.extend()&lt;/code&gt;. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">Опция &lt;code&gt;mixins&lt;/code&gt; принимает массив объектов mixin. Эти объекты примеси могут содержать параметры экземпляра, такие как обычные объекты экземпляра, и они будут объединены с возможными параметрами, используя ту же логику объединения параметров в &lt;code&gt;Vue.extend()&lt;/code&gt; . например, если ваш миксин содержит созданный хук и сам компонент также имеет его, будут вызваны обе функции.</target>
        </trans-unit>
        <trans-unit id="c5119adb901a78417da1a1946bb932ea415212f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onTrack&lt;/code&gt; and &lt;code&gt;onTrigger&lt;/code&gt; options can be used to debug a watcher's behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92db55e5b0a5d20b12b2f4b8d1e519e5a5e38d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;props&lt;/code&gt; object is immutable for userland code during development (will emit warning if user code attempts to mutate it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d8144660c52543f7c021fe26462396f341e59d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493ed3d2d814af09fd7e0d55df0493248fda560b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; function allows you to define the property through two parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26f8d5002e995f88abd483d65f2b8981c550aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Reflect.ownKeys&lt;/code&gt;.</source>
          <target state="translated">Параметр &lt;code&gt;provide&lt;/code&gt; должен быть объектом или функцией, возвращающей объект. Этот объект содержит свойства, доступные для внедрения в его потомков. Вы можете использовать символы ES2015 в качестве ключей в этом объекте, но только в средах, которые изначально поддерживают &lt;code&gt;Symbol&lt;/code&gt; и &lt;code&gt;Reflect.ownKeys&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1df98a28e225ea8d4b071027515cc8bf9c095a9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; options allows us to specify the data/methods we want to &lt;strong&gt;provide&lt;/strong&gt; to descendent components. In this case, that&amp;rsquo;s the &lt;code&gt;getMap&lt;/code&gt; method inside &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">Параметры &lt;code&gt;provide&lt;/code&gt; позволяют нам указать данные / методы, которые мы хотим &lt;strong&gt;предоставить&lt;/strong&gt; дочерним компонентам. В данном случае это метод &lt;code&gt;getMap&lt;/code&gt; внутри &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b831cea1a5d28870b1a98f2a9ac139f7f024f1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; function implementation is much simpler, but also requires greater familiarity with component instance properties. In this case, you have to know that when you pass children without a &lt;code&gt;v-slot&lt;/code&gt; directive into a component, like the &lt;code&gt;Hello world!&lt;/code&gt; inside of &lt;code&gt;anchored-heading&lt;/code&gt;, those children are stored on the component instance at &lt;code&gt;$slots.default()&lt;/code&gt;. If you haven't already, &lt;strong&gt;it's recommended to read through the &lt;a href=&quot;../api/instance-properties&quot;&gt;instance properties API&lt;/a&gt; before diving into render functions.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56704ba2887ba7cae9ee0e7cfb9c5aa5b409598e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89e752e4e0ad59fc71d8c42dbb8b140ac0a0a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element which is specified by the &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="translated">Функция &lt;code&gt;render&lt;/code&gt; имеет приоритет над функцией рендеринга, скомпилированной из параметра &lt;code&gt;template&lt;/code&gt; или встроенного в DOM HTML-шаблона монтируемого элемента, указанного в параметре &lt;code&gt;el&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="713161e2405098a6ac60b0b6e678285fa2d7ca9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; function is a new component option. It serves as the entry point for using the Composition API inside components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cbe7828d9cb072afe7eb2ed82f5a1462e9a440" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; option should be a function that accepts &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; which we will talk about &lt;a href=&quot;composition-api-setup#arguments&quot;&gt;later&lt;/a&gt;. Additionally, everything that we return from &lt;code&gt;setup&lt;/code&gt; will be exposed to the rest of our component (computed properties, methods, lifecycle hooks and so on) as well as to the component's template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f312c98cab71695e7dd222c575b78b0d13a0c64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slot-scope&lt;/code&gt; attribute can also be used directly on a non-&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element (including components):</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; атрибута также может быть использован непосредственно на нерабочий &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; элемента (включая компоненты):</target>
        </trans-unit>
        <trans-unit id="955152ea21b24fdf404e6e6a60a1465f0de55be9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don&amp;rsquo;t affect the input&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; attribute, because browsers don&amp;rsquo;t include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;), use radio inputs instead.</source>
          <target state="translated">Атрибуты &amp;laquo; &lt;code&gt;true-value&lt;/code&gt; и &amp;laquo; &lt;code&gt;false-value&lt;/code&gt; не влияют на входной атрибут &lt;code&gt;value&lt;/code&gt; , поскольку браузеры не включают в себя неотмеченные поля при отправке форм. Чтобы гарантировать, что одно из двух значений представлено в форме (например, &amp;laquo;да&amp;raquo; или &amp;laquo;нет&amp;raquo;), используйте вместо этого радио-входы.</target>
        </trans-unit>
        <trans-unit id="bee3c0fd44ab8c7bc1c7328abb665ef946611b7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don't affect the input's &lt;code&gt;value&lt;/code&gt; attribute, because browsers don't include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &quot;yes&quot; or &quot;no&quot;), use radio inputs instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e182f837614c4a38080aad510dbbf2060bfc370d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; can be one of the following native constructors:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; может быть один из следующих нативных конструкторов:</target>
        </trans-unit>
        <trans-unit id="2c964cd0d22c4c2fe49024d77d0397abcff4aee5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use()&lt;/code&gt; method takes two parameters. The first one is the plugin to be installed, in this case &lt;code&gt;i18nPlugin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d359aad27c2b39097fdc37e76390adbf2cb90073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA (opens new window)&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e190ce9f5befbb3426f06af3ed96f5a8aa0969e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-&lt;/code&gt; Приставка служит визуальным сигналом для идентификации Вьет-специфические атрибуты в шаблонах. Это полезно, когда вы используете Vue.js для применения динамического поведения к существующей разметке, но может показаться многословным для некоторых часто используемых директив. В то же время необходимость в префиксе &lt;code&gt;v-&lt;/code&gt; становится менее важной, когда вы создаете &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt; , где Vue управляет каждым шаблоном. Поэтому Vue предоставляет специальные сокращения для двух наиболее часто используемых директив, &lt;code&gt;v-bind&lt;/code&gt; и &lt;code&gt;v-on&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5280826865eec6dcf1bda516f7687a90f24c0bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &quot;else if block&quot; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8461a9f091788550d2bcfcb0e99f3643c233d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &amp;ldquo;else if block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">&lt;code&gt;v-else-if&lt;/code&gt; , как следует из названия, служит в качестве &amp;laquo;другого , если блок&amp;raquo; для &lt;code&gt;v-if&lt;/code&gt; . Его также можно связать несколько раз:</target>
        </trans-unit>
        <trans-unit id="c3247515a046afbb16ba57185188c9f06ec7d510" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-enter&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-enter-from&lt;/code&gt; and the &lt;code&gt;v-leave&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-leave-from&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158f0361bd6bc0f9d34d2682ff9be45ba6461b16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-is&lt;/code&gt; value is treated as a JavaScript expression, so we need to wrap the component name in quotes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6244029a3dc18b6cba09b3e6e0a940180e13b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link-active&lt;/code&gt; directive has also been replaced by the &lt;code&gt;tag&lt;/code&gt; attribute on &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;the &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;. So for example, you&amp;rsquo;ll update this:</source>
          <target state="translated">&lt;code&gt;v-link-active&lt;/code&gt; директива также была заменена &lt;code&gt;tag&lt;/code&gt; атрибутом &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;в &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; компоненте&lt;/a&gt; . Так, например, вы обновите это:</target>
        </trans-unit>
        <trans-unit id="83d24c44d5fff24f0114d4c306087248f718b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link&lt;/code&gt; directive has been replaced with a new &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</source>
          <target state="translated">&lt;code&gt;v-link&lt;/code&gt; Директива была заменена новым &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; компонентом&lt;/a&gt; , так как этот вид работы в настоящее время несет ответственность только компоненты в Vue 2. Это означает , когда там , где у вас есть ссылка , как это:</target>
        </trans-unit>
        <trans-unit id="5b9f65f7c297c1bc0549d5a815580fb6bb62244e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-model&lt;/code&gt; directive is expanded to &lt;code&gt;modelValue&lt;/code&gt; and &lt;code&gt;onUpdate:modelValue&lt;/code&gt; props during template compilation&amp;mdash;we will have to provide these props ourselves:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913c16238f6be321d10c7aa5ede9be4e8848de68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-slot&lt;/code&gt; directive was introduced in Vue 2.6.0, offering an improved, alternative API to the still-supported &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes. The full rationale for introducing &lt;code&gt;v-slot&lt;/code&gt; is described in this &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt;. The &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes will continue to be supported in all future 2.x releases, but are officially deprecated and will eventually be removed in Vue 3.</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; директива была введена в Vue 2.6.0, предлагая улучшенный, альтернативный API к еще поддерживаемых &lt;code&gt;slot&lt;/code&gt; и &lt;code&gt;slot-scope&lt;/code&gt; атрибутов. Полное обоснование введения &lt;code&gt;v-slot&lt;/code&gt; описано в этом &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt; . В &lt;code&gt;slot&lt;/code&gt; и &lt;code&gt;slot-scope&lt;/code&gt; атрибуты по- прежнему будет поддерживаться во всех последующих версиях 2.x, но официально осуждается и в конечном итоге будут удалены в Vue 3.</target>
        </trans-unit>
        <trans-unit id="a7b4baa34859ac880f5fe98648e4fa5507310c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the Options API &lt;a href=&quot;instance-methods#watch&quot;&gt;this.$watch&lt;/a&gt; (and the corresponding &lt;a href=&quot;options-data#watch&quot;&gt;watch&lt;/a&gt; option). &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aabcbf5326e8e02f2028280d2c6d91ef3352aaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the component &lt;a href=&quot;computed#watchers&quot;&gt;watch&lt;/a&gt; property. &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f371f3394ccbbd9c9c7339bc5a079bc98cf103c4" translate="yes" xml:space="preserve">
          <source>The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; without any build tools before using the CLI.</source>
          <target state="translated">Интерфейс командной строки предполагает предварительное знание Node.js и связанных с ним инструментов сборки. Если вы новичок в Vue или интерфейсных инструментах сборки, мы настоятельно рекомендуем просмотреть &lt;a href=&quot;../index&quot;&gt;руководство&lt;/a&gt; без каких-либо инструментов сборки перед использованием CLI.</target>
        </trans-unit>
        <trans-unit id="4b84a76a83ec8a5f1e120e500c3f7751834f2762" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431e39681a2982cceb38425ec480f7e168f10ba0" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options&lt;/a&gt;.</source>
          <target state="translated">Интерфейс командной строки позаботится о большинстве конфигураций инструментов, но также позволяет выполнять тонкую настройку с помощью собственных &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;параметров конфигурации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="37e9961ffd2140433ee6300b4c25596bb92249ae" translate="yes" xml:space="preserve">
          <source>The Complete SSR Guide</source>
          <target state="translated">Полное руководство по SSR</target>
        </trans-unit>
        <trans-unit id="5754a67d9095f9e3938db68d894af927d9bbda9b" translate="yes" xml:space="preserve">
          <source>The Custom Elements specification provides a way to use custom elements as &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example&quot;&gt;Customized Built-in Element (opens new window)&lt;/a&gt; by adding the &lt;code&gt;is&lt;/code&gt; attribute to a built-in element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c61149305fdf5c301ac25f2f0ca7dd3dbec3dc0" translate="yes" xml:space="preserve">
          <source>The DOM tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb35b5bf284498fbba8e557432a08e707e7edef3" translate="yes" xml:space="preserve">
          <source>The Data Object In-Depth</source>
          <target state="translated">Объект данных в глубину</target>
        </trans-unit>
        <trans-unit id="0a11a522901404813faf9ef70a5ad308a904d8c3" translate="yes" xml:space="preserve">
          <source>The Options API contains the following sections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299c795ecd2c7dbddd73afeca578463288759420" translate="yes" xml:space="preserve">
          <source>The Reactivity API contains the following sections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f148bcf44658dc4c8a0ed4916ae565d5489751" translate="yes" xml:space="preserve">
          <source>The Root Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c531607ce360cbb5aec13ac8c3438a41dc5f330" translate="yes" xml:space="preserve">
          <source>The Virtual DOM</source>
          <target state="translated">Виртуальный DOM</target>
        </trans-unit>
        <trans-unit id="25dc21ddfb968d5d9195ddaa8265924cdb93b08c" translate="yes" xml:space="preserve">
          <source>The Virtual DOM is a lightweight JavaScript object, created by a render function. It takes three arguments: the element, an object with data, props, attrs and more, and an array. The array is where we pass in the children, which have all these arguments too, and then they can have children and so on, until we build a full tree of elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fcd2cc00d685d99cf98eb6826ed2737e548826" translate="yes" xml:space="preserve">
          <source>The Virtual DOM tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babecbcffc795b2e20d9189e575e0bb731f8cd62" translate="yes" xml:space="preserve">
          <source>The Vue Instance</source>
          <target state="translated">Vue Instance</target>
        </trans-unit>
        <trans-unit id="efbb68ebebd965649cff93f54f21ecfcb0cd480c" translate="yes" xml:space="preserve">
          <source>The Vue.js API contains the following categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807a64f8392fba5b085711631ef386b7b4a4cc48" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components work consistently in all supported browsers (IE11 with compatibility build and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be83ced5c720e31f43242c0f5e365ad3f2da0751" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized, but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components don&amp;rsquo;t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">Спецификация веб-компонентов была завершена, но не во всех браузерах изначально реализована. Safari 10.1+, Chrome 54+ и Firefox 63+ изначально поддерживают веб-компоненты. Для сравнения, компоненты Vue не требуют полифиллов и работают согласованно во всех поддерживаемых браузерах (IE9 и выше). При необходимости компоненты Vue также можно обернуть внутри собственного настраиваемого элемента.</target>
        </trans-unit>
        <trans-unit id="ea207ce61201306d104d66e553ee1c06de8b2548" translate="yes" xml:space="preserve">
          <source>The World Health Organization estimates that 15% of the world's population has some form of disability, 2-4% of them severely so. That is an estimated 1 billion people worldwide; making people with disabilities the largest minority group in the world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152adfffa7428439272d77c4a76ca033af83c983" translate="yes" xml:space="preserve">
          <source>The World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) develops web accessibility standards for the different components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a28d4802ae8f29af4f28a606d7b55fd498ccb1b" translate="yes" xml:space="preserve">
          <source>The above code is imperative and repetitive. Compare it with a computed property version:</source>
          <target state="translated">Вышеуказанный код является обязательным и повторяющимся.Сравните его с вычисленной версией свойства:</target>
        </trans-unit>
        <trans-unit id="bb879e483c23bffcd30b4eb818c6b264dd8b31d3" translate="yes" xml:space="preserve">
          <source>The above declarations allow the following code to be compiled:</source>
          <target state="translated">Приведенные выше декларации позволяют скомпилировать следующий код:</target>
        </trans-unit>
        <trans-unit id="f57aa3ad596a32aa0ee96ea34ada406c21b66366" translate="yes" xml:space="preserve">
          <source>The above example and some future ones use JavaScript&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literal&lt;/a&gt; to make multi-line templates more readable. These are not supported by Internet Explorer (IE), so if you must support IE and are not transpiling (e.g. with Babel or TypeScript), use &lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;newline escapes&lt;/a&gt; instead.</source>
          <target state="translated">В приведенном выше примере и в некоторых будущих используется &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;литерал шаблона&lt;/a&gt; JavaScript, чтобы сделать многострочные шаблоны более удобочитаемыми. Они не поддерживаются Internet Explorer (IE), поэтому, если вы должны поддерживать IE и не выполняете транспилирование (например, с помощью Babel или TypeScript), используйте вместо них escape-символы &lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;новой строки&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="99a5b0f10fab94bdbe6947c371a61fc4c4300760" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue&amp;rsquo;s &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the &lt;code&gt;is&lt;/code&gt; special attribute:</source>
          <target state="translated">Это стало возможным благодаря элементу Vue &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; со специальным атрибутом &lt;code&gt;is&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a2dc1588c8d651c45f52061e78e4205b7250b679" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue's &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the special &lt;code&gt;is&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02263c9d7e8e9048b079d134eb04a15832e9ae6a" translate="yes" xml:space="preserve">
          <source>The above only applies to the &lt;a href=&quot;../installation#explanation-of-different-builds&quot;&gt;ES Modules builds&lt;/a&gt; for use with tree-shaking capable bundlers - the UMD build still includes all features and exposes everything on the Vue global variable (and the compiler will produce appropriate output to use APIs off the global instead of importing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7374ad3f755708e5dc13a8b4b98839ff8d234e1" translate="yes" xml:space="preserve">
          <source>The above only renders the todos that are not complete.</source>
          <target state="translated">Вышеуказанное делает только те тодос,которые не являются полными.</target>
        </trans-unit>
        <trans-unit id="1dac4ea7863f897132825dc2826b7a36c594604c" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness (opens new window)&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af7e3e4b79fac718e6fd64e5702254c69dcf11f" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">Вышеупомянутый синтаксис означает, что наличие &lt;code&gt;active&lt;/code&gt; класса будет определяться &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;истинностью&lt;/a&gt; свойства данных &lt;code&gt;isActive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aeec69d6935039bffd444e21fbd1ed7763a7edf9" translate="yes" xml:space="preserve">
          <source>The above will be equivalent to:</source>
          <target state="translated">Вышеупомянутое будет эквивалентно:</target>
        </trans-unit>
        <trans-unit id="987de1902175f7ea29deadc7d807f82364182cb0" translate="yes" xml:space="preserve">
          <source>The absence of an enumerated attribute and &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; may produce different IDL attribute values (which will reflect the actual state), described as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc22dad858f565e9beeefc992c5465134124606c" translate="yes" xml:space="preserve">
          <source>The anchored heading component we created earlier is relatively simple. It doesn&amp;rsquo;t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it&amp;rsquo;s only a function with some props.</source>
          <target state="translated">Компонент привязанного заголовка, который мы создали ранее, относительно прост. Он не управляет никаким состоянием, не следит за любым состоянием, переданным ему, и у него нет методов жизненного цикла. На самом деле, это всего лишь функция с некоторыми реквизитами.</target>
        </trans-unit>
        <trans-unit id="472fab3bd1351c6b291c7954f4cf59720749fbf5" translate="yes" xml:space="preserve">
          <source>The application instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf7df2e6b2d3b7f0b9b74d317befb0ed3be82e6" translate="yes" xml:space="preserve">
          <source>The application instance if a &lt;code&gt;definition&lt;/code&gt; argument was passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96fc90d040288884b45ba8147b46429f8a9c329" translate="yes" xml:space="preserve">
          <source>The application instance is used to register 'globals' that can then be used by components within that application. We'll discuss that in detail later in the guide but as a quick example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b9709d9cefabc9cccc6ad0b23e243c50a3cb35" translate="yes" xml:space="preserve">
          <source>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same property order across browsers.</source>
          <target state="translated">Синтаксис массива обеспечивает более предсказуемое соответствие маршрута,так как итерации по объекту не гарантируют использование одного и того же порядка свойств в браузерах.</target>
        </trans-unit>
        <trans-unit id="cfb0bf25982abd52ff947724ea87766f7139df24" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3ddd2386065d734a4382298ee4c3e11da253a3" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;v-bind:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">Синтаксис массива для &lt;code&gt;v-bind:style&lt;/code&gt; позволяет применять несколько объектов стиля к одному и тому же элементу:</target>
        </trans-unit>
        <trans-unit id="aafcbc34aabe7826d09e6d24c380675938d5320a" translate="yes" xml:space="preserve">
          <source>The async component can opt-out of &lt;code&gt;Suspense&lt;/code&gt; control and let the component always control its own loading state by specifying &lt;code&gt;suspensible: false&lt;/code&gt; in its options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e823b9beb8c48498f2cf709b4d0756d4d1fc6465" translate="yes" xml:space="preserve">
          <source>The async component factory can also return an object of the following format:</source>
          <target state="translated">Завод асинхронных компонентов может также возвращать объект следующего формата:</target>
        </trans-unit>
        <trans-unit id="ba11fc067d05679fdd5921eda5ec20ebd31b1c5d" translate="yes" xml:space="preserve">
          <source>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</source>
          <target state="translated">Автозавершение в редакторах делает стоимость написания более длинных имен очень низкой,в то время как ясность,которую они обеспечивают,бесценна.Необычных сокращений,в частности,всегда следует избегать.</target>
        </trans-unit>
        <trans-unit id="3bfbfdbf163c3a58f491c28ada597f5a0c3ab31f" translate="yes" xml:space="preserve">
          <source>The best way to get started is to check out &lt;a href=&quot;https://github.com/vuejs/docs-next/issues/478&quot;&gt;this pinned issue (opens new window)&lt;/a&gt; that contains active discussions on the various initiatives happening in the community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c22ef1ce4c22f9fdb3192ace8ea666bf31d6a91" translate="yes" xml:space="preserve">
          <source>The bound object doesn&amp;rsquo;t have to be inline:</source>
          <target state="translated">Связанный объект не обязательно должен быть встроенным:</target>
        </trans-unit>
        <trans-unit id="05175c1d75a733807acbefe7969758c568ba82e5" translate="yes" xml:space="preserve">
          <source>The bound object doesn't have to be inline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2554e0f7ba3e75f305804cf7d1375f5d936e7484" translate="yes" xml:space="preserve">
          <source>The breaking change is that if you manually provide &lt;code&gt;key&lt;/code&gt;s, each branch must use a unique &lt;code&gt;key&lt;/code&gt;. In most cases, you can remove these &lt;code&gt;key&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ea81fb69fe73fe63375e04ce841fa425ec9b8c" translate="yes" xml:space="preserve">
          <source>The child, instead of providing no template, should now render the default slot*:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eda5449279a274efb072e447ae5fcdbc28da7df" translate="yes" xml:space="preserve">
          <source>The common scenario for disabling an attribute inheritance is when attributes need to be applied to other elements besides the root node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947fd6ed1c1923f9d1c906662bc458c7fd2b298d" translate="yes" xml:space="preserve">
          <source>The component definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86969f46fef0ec13b85498c1fa6ab2d4f2c18c31" translate="yes" xml:space="preserve">
          <source>The component instance context is also set during the synchronous execution of lifecycle hooks. As a result, watchers and computed properties created synchronously inside of lifecycle hooks are also automatically tore down when the component unmounts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10321bc695ddfd296d4bec711587b802bbb5b6a" translate="yes" xml:space="preserve">
          <source>The component must generate a heading based on the &lt;code&gt;level&lt;/code&gt; prop, and we quickly arrive at this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c473e09bb4188e420d79ebd60ee46d8c65246cf3" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it&amp;rsquo;s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">Система компонентов - еще одна важная концепция Vue, потому что это абстракция, которая позволяет нам создавать крупномасштабные приложения, состоящие из небольших, автономных и часто повторно используемых компонентов. Если задуматься, почти любой тип интерфейса приложения можно абстрагировать в дерево компонентов:</target>
        </trans-unit>
        <trans-unit id="5ad941a099cd5fcebfd577e3e9fe5f50fad70402" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3883d179f6d3f9bbe1b90b29bb01dd780ef82b29" translate="yes" xml:space="preserve">
          <source>The component will have a &lt;code&gt;button&lt;/code&gt; element to trigger the opening of the modal, and a &lt;code&gt;div&lt;/code&gt; element with a class of &lt;code&gt;.modal&lt;/code&gt;, which will contain the modal's content and a button to self-close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a227479dfaa2ebe9e09278b1482fab712cafda" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it&amp;rsquo;s usually better to use a &lt;a href=&quot;#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">DOM компонента будет обновлена ​​при вызове этой ловушки, поэтому здесь вы можете выполнять операции, зависящие от DOM. Однако в большинстве случаев вам следует избегать изменения состояния внутри ловушки. Чтобы реагировать на изменения состояния, обычно лучше использовать &lt;a href=&quot;#computed&quot;&gt;вычисляемое свойство&lt;/a&gt; или &lt;a href=&quot;#watch&quot;&gt;наблюдателя&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="33a9c37f2f9908b2ff6754fe4ced3a3b882e927a" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s name is the first argument of &lt;code&gt;Vue.component&lt;/code&gt;.</source>
          <target state="translated">Имя компонента - это первый аргумент &lt;code&gt;Vue.component&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49a8030218616a010e0c989828a6fcfe732412f0" translate="yes" xml:space="preserve">
          <source>The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a &lt;a href=&quot;options-data#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;options-data#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce09da928dc006cfa43406bce9e4016687fe784" translate="yes" xml:space="preserve">
          <source>The component's name is the first argument of &lt;code&gt;app.component&lt;/code&gt;. In the example above, the component's name is &quot;my-component-name&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c50d6a412a378e537c001610ef774aa9ae31afc" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;span&lt;/code&gt; will be replaced with the value of the &lt;code&gt;rawHtml&lt;/code&gt; property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use &lt;code&gt;v-html&lt;/code&gt; to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</source>
          <target state="translated">Содержимое &lt;code&gt;span&lt;/code&gt; будет заменено значением свойства &lt;code&gt;rawHtml&lt;/code&gt; , интерпретируемым как обычный HTML - привязки данных игнорируются. Обратите внимание, что вы не можете использовать &lt;code&gt;v-html&lt;/code&gt; для создания частей шаблона, потому что Vue не является механизмом создания шаблонов на основе строк. Вместо этого компоненты предпочтительнее в качестве основной единицы для повторного использования и композиции пользовательского интерфейса.</target>
        </trans-unit>
        <trans-unit id="5c6fcc6772a0d1f034e465e8f1a0a82358c09227" translate="yes" xml:space="preserve">
          <source>The count will be logged synchronously on initial run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0a2416648a4140799cf8abb2cfaf5827329179" translate="yes" xml:space="preserve">
          <source>The createRenderer function accepts two generic arguments: &lt;code&gt;HostNode&lt;/code&gt; and &lt;code&gt;HostElement&lt;/code&gt;, corresponding to Node and Element types in the host environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aabf5563ee74ceaaa562a702ba84f4906e6efaf" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. Fortunately, the &lt;code&gt;is&lt;/code&gt; special attribute offers a workaround:</source>
          <target state="translated">Пользовательский компонент &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; будет извлечен как недопустимое содержимое, что приведет к ошибкам в конечном отображаемом выводе. К счастью, специальный атрибут &lt;code&gt;is&lt;/code&gt; предлагает обходной путь:</target>
        </trans-unit>
        <trans-unit id="11daf3c25f0cf63cc93ea2c53a8186b5d87e44d6" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the special &lt;code&gt;v-is&lt;/code&gt; directive as a workaround:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773dcdb0e4554ae71591d98763ca297e3e508d9e" translate="yes" xml:space="preserve">
          <source>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it &amp;ldquo;reactive&amp;rdquo;. &lt;strong&gt;The object must be plain&lt;/strong&gt;: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</source>
          <target state="translated">Объект данных для экземпляра Vue. Vue рекурсивно преобразует свои свойства в геттеры / сеттеры, чтобы сделать его &amp;laquo;реактивным&amp;raquo;. &lt;strong&gt;Объект должен быть простым&lt;/strong&gt; : собственные объекты, такие как объекты API браузера и свойства прототипа, игнорируются. Эмпирическое правило состоит в том, что данные должны быть просто данными - не рекомендуется наблюдать за объектами с их собственным поведением с отслеживанием состояния.</target>
        </trans-unit>
        <trans-unit id="f249c1e096e4760333b8a1a164e494b46a537f23" translate="yes" xml:space="preserve">
          <source>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</source>
          <target state="translated">Объект данных,который наблюдает экземпляр Vue.Экземпляр Vue проксирует доступ к свойствам своего объекта данных.</target>
        </trans-unit>
        <trans-unit id="c0311ef9e36a4cba0d120900ee89b483f3f6f275" translate="yes" xml:space="preserve">
          <source>The data object that the component instance is observing. The component instance proxies access to the properties on its data object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536204b9289a091fc1bfb216ea4a0b6805215f8d" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">По умолчанию &lt;code&gt;v-for&lt;/code&gt; пытается исправить элементы на месте, не перемещая их. Чтобы заставить его переупорядочить элементы, вам необходимо предоставить подсказку для порядка с помощью специального атрибута &lt;code&gt;key&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4b1148c386014a26cbf146b0929f7af1e1e7af0e" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d6d6ed400b5a953b0d97b27d49df6ee5eeb0d1" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;'pre'&lt;/code&gt;, which specifies that the callback should be invoked before rendering. This allows the callback to update other values before the template runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d129c09e272230c72d4816c9cf37d602f78c6b98" translate="yes" xml:space="preserve">
          <source>The detailed usage for &lt;code&gt;v-for&lt;/code&gt; is explained in the guide section linked below.</source>
          <target state="translated">Подробное использование &lt;code&gt;v-for&lt;/code&gt; объясняется в разделе руководства по ссылке ниже.</target>
        </trans-unit>
        <trans-unit id="343f0a574d7c11cb2eeec3975287b6ad82f491f8" translate="yes" xml:space="preserve">
          <source>The dev/prod files are pre-built, but the appropriate file is automatically required based on &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb2400b62e62455e5be23679bc16dcd684f0e97" translate="yes" xml:space="preserve">
          <source>The difference is that an element with &lt;code&gt;v-show&lt;/code&gt; will always be rendered and remain in the DOM; &lt;code&gt;v-show&lt;/code&gt; only toggles the &lt;code&gt;display&lt;/code&gt; CSS property of the element.</source>
          <target state="translated">Разница в том, что элемент с &lt;code&gt;v-show&lt;/code&gt; всегда будет отображаться и оставаться в DOM; &lt;code&gt;v-show&lt;/code&gt; только переключает свойство &lt;code&gt;display&lt;/code&gt; CSS элемента.</target>
        </trans-unit>
        <trans-unit id="9beac5c57d068b893c427afee540acec4a448457" translate="yes" xml:space="preserve">
          <source>The direct child components of the current instance. &lt;strong&gt;Note there&amp;rsquo;s no order guarantee for &lt;code&gt;$children&lt;/code&gt;, and it is not reactive.&lt;/strong&gt; If you find yourself trying to use &lt;code&gt;$children&lt;/code&gt; for data binding, consider using an Array and &lt;code&gt;v-for&lt;/code&gt; to generate child components, and use the Array as the source of truth.</source>
          <target state="translated">Прямые дочерние компоненты текущего экземпляра. &lt;strong&gt;Обратите внимание, что для &lt;code&gt;$children&lt;/code&gt; нет гарантии порядка , и он не является реактивным. &lt;/strong&gt;Если вы обнаружите, что пытаетесь использовать &lt;code&gt;$children&lt;/code&gt; для привязки данных, подумайте об использовании Array и &lt;code&gt;v-for&lt;/code&gt; для генерации дочерних компонентов и используйте Array как источник истины.</target>
        </trans-unit>
        <trans-unit id="8966ad2384af724eb5afaebd84955178e2bef331" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive&amp;rsquo;s expression returns a truthy value.</source>
          <target state="translated">Директива &lt;code&gt;v-if&lt;/code&gt; используется для условного рендеринга блока. Блок будет отображен только в том случае, если выражение директивы вернет истинное значение.</target>
        </trans-unit>
        <trans-unit id="b8232d0e5e0905d45b1ad05a56cfc3f9bba50116" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defd17d65c75e19b004eb45d504b28dc381f0693" translate="yes" xml:space="preserve">
          <source>The directive definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4141be39fd2adee28a4d62aa1a5f31477b8a9bc9" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;a href=&quot;../api/directives#v-html&quot;&gt;&lt;code&gt;v-html&lt;/code&gt; directive&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e1b62f46f6347c3255105bf2f7f7bb4beb980e" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;code&gt;v-html&lt;/code&gt; directive:</source>
          <target state="translated">Двойные усы интерпретируют данные как обычный текст, а не как HTML. Чтобы вывести настоящий HTML, вам нужно будет использовать директиву &lt;code&gt;v-html&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="305ed691c1804ae460a172a9d094e4f8d80ad4b2" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;../single-file-component&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf9489100840a3b7f6fc331943b5d3351ce62f0" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;single-file-components&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">Самый простой способ предварительной компиляции шаблонов - использование &lt;a href=&quot;single-file-components&quot;&gt;однофайловых компонентов&lt;/a&gt; - связанные настройки сборки автоматически выполняют предварительную компиляцию за вас, поэтому встроенный код содержит уже скомпилированные функции рендеринга вместо необработанных строк шаблона.</target>
        </trans-unit>
        <trans-unit id="db435bc25ee0c4942f29c67b5bbf4fa0aa7247d0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://codepen.io/team/Vue/pen/KKpRVpx&quot;&gt;Hello World example (opens new window)&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f9865708d8a06fa846e682702658bdabd9c8e0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello World example&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;create an &lt;code&gt;index.html&lt;/code&gt; file&lt;/a&gt; and include Vue with:</source>
          <target state="translated">Самый простой способ попробовать Vue.js - использовать &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;пример JSFiddle Hello World&lt;/a&gt; . Не стесняйтесь открывать его в другой вкладке и следить, пока мы рассмотрим некоторые основные примеры. Или вы можете &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;создать файл &lt;code&gt;index.html&lt;/code&gt; &lt;/a&gt; и включить Vue с помощью:</target>
        </trans-unit>
        <trans-unit id="847757f66edc351ea14e3e7f70aa130ed1b67ad7" translate="yes" xml:space="preserve">
          <source>The el option can no longer be used in &lt;code&gt;Vue.extend&lt;/code&gt;. It&amp;rsquo;s only valid as an instance creation option.</source>
          <target state="translated">Параметр el больше нельзя использовать в &lt;code&gt;Vue.extend&lt;/code&gt; . Он действителен только как вариант создания экземпляра.</target>
        </trans-unit>
        <trans-unit id="f780a51fca89ef85f1e54b75143303e24c122ac1" translate="yes" xml:space="preserve">
          <source>The element in the host environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0add764dbfcd6dbf253011663e8660a07e0d583a" translate="yes" xml:space="preserve">
          <source>The element the directive is bound to. This can be used to directly manipulate the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e484d752f6e7f6943881c7bf91dd2adc3796ddcf" translate="yes" xml:space="preserve">
          <source>The equivalent in Vue 3 is &lt;a href=&quot;../../api/application-config#globalproperties&quot;&gt;&lt;code&gt;config.globalProperties&lt;/code&gt;&lt;/a&gt;. These properties will be copied across as part of instantiating a component within the application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf7aed57333af6e96ef49b1f2b3ce42c4ae2a22" translate="yes" xml:space="preserve">
          <source>The essential use case for reactive state in Vue is that we can use it during render. Thanks to dependency tracking, the view automatically updates when reactive state changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92fce4867ed9fd2a331cd38fbea7af99a51fcec" translate="yes" xml:space="preserve">
          <source>The example above still works in Vue 3.x. However, we no longer recommend using the &lt;code&gt;key&lt;/code&gt; attribute on &lt;code&gt;v-if&lt;/code&gt;/&lt;code&gt;v-else&lt;/code&gt;/&lt;code&gt;v-else-if&lt;/code&gt; branches, since unique &lt;code&gt;key&lt;/code&gt;s are now automatically generated on conditional branches if you don't provide them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ff2ebab179926c1bba713b3418f8fa507384ca" translate="yes" xml:space="preserve">
          <source>The filter&amp;rsquo;s function always receives the expression&amp;rsquo;s value (the result of the former chain) as its first argument. In the above example, the &lt;code&gt;capitalize&lt;/code&gt; filter function will receive the value of &lt;code&gt;message&lt;/code&gt; as its argument.</source>
          <target state="translated">Функция фильтра всегда получает значение выражения (результат предыдущей цепочки) в качестве своего первого аргумента. В приведенном выше примере функция фильтра с &lt;code&gt;capitalize&lt;/code&gt; получит значение &lt;code&gt;message&lt;/code&gt; качестве аргумента.</target>
        </trans-unit>
        <trans-unit id="25978631002a6e912099e352f219ba34c4dc10cb" translate="yes" xml:space="preserve">
          <source>The filtered list will &lt;em&gt;only&lt;/em&gt; be re-evaluated if there are relevant changes to the &lt;code&gt;users&lt;/code&gt; array, making filtering much more efficient.</source>
          <target state="translated">Отфильтрованный список будет &lt;em&gt;только&lt;/em&gt; переоцениваться , если есть соответствующие изменения в &lt;code&gt;users&lt;/code&gt; массив, что делает фильтрацию гораздо более эффективными.</target>
        </trans-unit>
        <trans-unit id="41e792bc8bb14d8a14bb5303a29567bf0302a932" translate="yes" xml:space="preserve">
          <source>The final API is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c6a470325454b1c8c66e1bcbcc2766951cda88" translate="yes" xml:space="preserve">
          <source>The first argument in the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;props&lt;/code&gt; argument. Just as you would expect in a standard component, &lt;code&gt;props&lt;/code&gt; inside of a &lt;code&gt;setup&lt;/code&gt; function are reactive and will be updated when new props are passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d746cf67e1faa3691049af5d98cb35049b8b5138" translate="yes" xml:space="preserve">
          <source>The following consists a list of breaking changes from 2.x:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59301ec50d1aa02b21c717dc2146c442c1b3271c" translate="yes" xml:space="preserve">
          <source>The following section provides guidelines on things to keep in mind when evaluating which component testing framework is best for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabf2a91efba3bd9bf968cab18833080e3840507" translate="yes" xml:space="preserve">
          <source>The following table contains how the lifecycle hooks are invoked inside of &lt;a href=&quot;composition-api-setup&quot;&gt;setup()&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad52d3ab04df58ce927fd2d0e3e4349119015d3" translate="yes" xml:space="preserve">
          <source>The following table describes how Vue coerce &quot;enumerated attributes&quot; differently with normal non-boolean attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1bd86b12f9a72f44081cf9de88b1b52575b50e" translate="yes" xml:space="preserve">
          <source>The following table describes the new behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5951356bec324133fa39def8def2ef7e47b05c1" translate="yes" xml:space="preserve">
          <source>The following template:</source>
          <target state="translated">Следующий шаблон:</target>
        </trans-unit>
        <trans-unit id="79a7f9945e1b3073c06c30c93a587923e0ca489c" translate="yes" xml:space="preserve">
          <source>The function receives a root component options object as a first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ce796c0d386173f99fda9a62ce35edc2ca478b" translate="yes" xml:space="preserve">
          <source>The function receives the resolved props as its first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a607f6bd4411962ffcf434e012c621cb12c3dc" translate="yes" xml:space="preserve">
          <source>The function that returns a data object for the component instance. In &lt;code&gt;data&lt;/code&gt;, we don't recommend to observe objects with their own stateful behavior like browser API objects and prototype properties. A good idea would be to have here just a plain object that represents component data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d2bc9fc8e8cc807113eae603850488210c6f3b" translate="yes" xml:space="preserve">
          <source>The function to update the list of repositories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4a514c82bb3b7baff7919684302ede3370a422" translate="yes" xml:space="preserve">
          <source>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">Геттеры / сеттеры невидимы для пользователя, но внутри они позволяют Vue выполнять отслеживание зависимостей и уведомление об изменении при доступе к свойствам или их изменении. Одно предостережение заключается в том, что консоли браузера по-разному форматируют геттеры / сеттеры при регистрации преобразованных объектов данных, поэтому вы можете установить &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; для более удобного интерфейса.</target>
        </trans-unit>
        <trans-unit id="79b128aa63f16ec5285b2d9f0426b750ca304c24" translate="yes" xml:space="preserve">
          <source>The hook functions for directives have been renamed to better align with the component lifecycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd9d811837e0eecf0a4df368877b6262fe04425" translate="yes" xml:space="preserve">
          <source>The implicitly assigned &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$key&lt;/code&gt; variables have been removed in favor of explicitly defining them in &lt;code&gt;v-for&lt;/code&gt;. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</source>
          <target state="translated">Неявно назначенные переменные &lt;code&gt;$index&lt;/code&gt; и &lt;code&gt;$key&lt;/code&gt; были удалены в пользу их явного определения в &lt;code&gt;v-for&lt;/code&gt; . Это упрощает чтение кода для разработчиков, менее опытных с Vue, а также приводит к более четкому поведению при работе с вложенными циклами.</target>
        </trans-unit>
        <trans-unit id="fdcdfedc033d4da59a3a9ccb8b1076c825abc317" translate="yes" xml:space="preserve">
          <source>The install method will be called with the application as its first argument. Any &lt;code&gt;options&lt;/code&gt; passed to &lt;code&gt;use&lt;/code&gt; will be passed on in subsequent arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd591127230d8deaf3a79ff7072473dcdfb326ef" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">Опции инстанцирования,используемые для текущего экземпляра Vue.Это полезно,когда вы хотите включить пользовательские свойства в опции:</target>
        </trans-unit>
        <trans-unit id="42e266e4c0aeeb2f463f05d9ac2084a7679486b8" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current component instance. This is useful when you want to include custom properties in the options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec67800539f4f653afaebcd18a910db339460bf1" translate="yes" xml:space="preserve">
          <source>The list of repositories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6507e95ac3123f38dc39170ae522dfbce1786b53" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn&amp;rsquo;t feasible. That&amp;rsquo;s why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you&amp;rsquo;d like to call.</source>
          <target state="translated">Однако логика для многих обработчиков событий будет более сложной, поэтому сохранение вашего JavaScript в значении атрибута &lt;code&gt;v-on&lt;/code&gt; невозможно. Вот почему &lt;code&gt;v-on&lt;/code&gt; также может принимать имя метода, который вы хотите вызвать.</target>
        </trans-unit>
        <trans-unit id="8643e2e36516469110b28c58127db5ac02acc2d7" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn't feasible. That's why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you'd like to call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba79afcd572cfc128e601a2971f43c1e6a797dc" translate="yes" xml:space="preserve">
          <source>The main differences are that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ec5b554ea02ea1ab8ee1dcd4e2e612d6cff494" translate="yes" xml:space="preserve">
          <source>The main or central content of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dfd0134284048bc632e36141f4ea3e7333c213" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component&amp;rsquo;s own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent&amp;rsquo;s &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">Соответствие сначала проверяется в параметре собственного &lt;code&gt;name&lt;/code&gt; компонента , затем его локальном регистрационном имени (ключ в параметре родительского &lt;code&gt;components&lt;/code&gt; ), если параметр &lt;code&gt;name&lt;/code&gt; недоступен. Анонимные компоненты не могут быть сопоставлены.</target>
        </trans-unit>
        <trans-unit id="ef8038b96392b1b874278c0005b7bde8cb05251c" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component's own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent's &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6157926048113f46fe23ee578e48fe424291d8e" translate="yes" xml:space="preserve">
          <source>The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed will be destroyed before creating a new instance.</source>
          <target state="translated">Максимальное количество экземпляров компонентов для кэширования.Как только это число будет достигнуто,кэшированный экземпляр компонента,который был доступен меньше всего недавно,будет уничтожен перед созданием нового экземпляра.</target>
        </trans-unit>
        <trans-unit id="faa3cf52e773ababaa5a5e4102b0ed3a8de12ab7" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. Let's try to check what do we have in these parameters when we use a mixin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf10a52fb597971ee2811a4b6daca68eb87e10e" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</source>
          <target state="translated">Стратегия слияния получает значение опции,определенной на родительском и дочернем экземплярах в качестве первого и второго аргументов соответственно.В качестве третьего аргумента передаётся контекстный экземпляр Vue.</target>
        </trans-unit>
        <trans-unit id="e3b38721a9b8218aec56607e019ddcce672f2049" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context application instance is passed as the third argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5a003cef802af9e91a6f9747fac2e515359d41" translate="yes" xml:space="preserve">
          <source>The method returns the instance itself so you can chain other instance methods after it.</source>
          <target state="translated">Метод возвращает сам экземпляр,так что вы можете связать другие методы экземпляра с ним.</target>
        </trans-unit>
        <trans-unit id="951de592d924e3c9c03829021deb9a40c05ac8d4" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &quot;Mustache&quot; syntax (double curly braces):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46eb4e33843509639b8c44662beadd21ed8310ed" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &amp;ldquo;Mustache&amp;rdquo; syntax (double curly braces):</source>
          <target state="translated">Самая простая форма привязки данных - это интерполяция текста с использованием синтаксиса &amp;laquo;Усы&amp;raquo; (двойные фигурные скобки):</target>
        </trans-unit>
        <trans-unit id="bd564c73b6d49eec1b2c8919fa49f3bc33098a11" translate="yes" xml:space="preserve">
          <source>The most common use case is combined with &lt;code&gt;v-for&lt;/code&gt;:</source>
          <target state="translated">Наиболее распространенный вариант использования совмещен с &lt;code&gt;v-for&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8bb67bc91573d8c042cf8f313e62326372c08cd1" translate="yes" xml:space="preserve">
          <source>The most straightforward workaround in such cases is using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; with an alternative type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e584a8b872f017ba0e0f780450cffc4632e3bfc4" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property from the corresponding component instance. It will also be updated whenever the &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c379b64d918d58c59f406c013a50f15fd94aaa4c" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property on the corresponding data object. It will also be updated whenever the data object&amp;rsquo;s &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">Тег усов будет заменен значением свойства &lt;code&gt;msg&lt;/code&gt; соответствующего объекта данных. Он также будет обновляться при изменении свойства &lt;code&gt;msg&lt;/code&gt; объекта данных.</target>
        </trans-unit>
        <trans-unit id="1472ee4db13ff37789b1c91f3cd08acd5d176b23" translate="yes" xml:space="preserve">
          <source>The name of a loaded component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821d318da5fdda7594f134b76cce4228f91650d3" translate="yes" xml:space="preserve">
          <source>The name of a loaded directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2545c8b359c02ab69b644b81b09e6fb841966ff" translate="yes" xml:space="preserve">
          <source>The name of the property to inject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9786bb0111ad00d45d0fad40e21ed46d935988" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-component&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules (opens new window)&lt;/a&gt; for custom tag names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37afbe4bcd06f0f0be230e6d8e06d5f57d026a3e" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-components&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules&lt;/a&gt; for custom tag names (all-lowercase, must contain a hyphen). This helps you avoid conflicts with current and future HTML elements.</source>
          <target state="translated">Имя, которое вы даете компоненту, может зависеть от того, где вы собираетесь его использовать. При использовании компонента непосредственно в DOM (в отличие от строкового шаблона или &lt;a href=&quot;single-file-components&quot;&gt;однофайлового компонента&lt;/a&gt; ) мы настоятельно рекомендуем следовать &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;правилам W3C&lt;/a&gt; для имен настраиваемых тегов (все строчные буквы, должны содержать дефис). Это поможет вам избежать конфликтов с текущими и будущими элементами HTML.</target>
        </trans-unit>
        <trans-unit id="26e11e8c8a45e6a0874ed1477c0e4c8be3700515" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;setup&lt;/code&gt; component option is executed &lt;strong&gt;before&lt;/strong&gt; the component is created, once the &lt;code&gt;props&lt;/code&gt; are resolved, and serves as the entry point for composition API's.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49544b57b4faf031cbd490df14c62342f8913c7c" translate="yes" xml:space="preserve">
          <source>The new, more concise way to configure &lt;code&gt;keyCodes&lt;/code&gt; is through &lt;code&gt;Vue.config.keyCodes&lt;/code&gt;. For example:</source>
          <target state="translated">Новый, более лаконичный способ настройки &lt;code&gt;keyCodes&lt;/code&gt; - через &lt;code&gt;Vue.config.keyCodes&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="1ba4a8191026a27a782703cf2cb8992c45a25eab" translate="yes" xml:space="preserve">
          <source>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the &lt;code&gt;props&lt;/code&gt; and the &lt;code&gt;data&lt;/code&gt; initialization.</source>
          <target state="translated">Следующие 2 примера работают с Vue 2.2.1+. Ниже этой версии введенные значения были разрешены после &lt;code&gt;props&lt;/code&gt; и инициализации &lt;code&gt;data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4e0ddfdd8217a03837dee9d518c520c1cff551b" translate="yes" xml:space="preserve">
          <source>The next thing you&amp;rsquo;ll have to become familiar with is how to use template features in the &lt;code&gt;createElement&lt;/code&gt; function. Here are the arguments that &lt;code&gt;createElement&lt;/code&gt; accepts:</source>
          <target state="translated">Следующее, с чем вам нужно будет ознакомиться, это как использовать возможности шаблона в функции &lt;code&gt;createElement&lt;/code&gt; . Вот аргументы, которые принимает &lt;code&gt;createElement&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6425b351a4f55c8cad54b89f6371bbb64f26f4e7" translate="yes" xml:space="preserve">
          <source>The node in the host environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f500afab8931eec7a0290164eb6151c650ae181c" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it's a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93809e131de1acb92c27480b98ade7c8b177368" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;v-bind:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it&amp;rsquo;s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">Синтаксис объекта для &lt;code&gt;v-bind:style&lt;/code&gt; довольно прост - он выглядит почти как CSS, за исключением того, что это объект JavaScript. Вы можете использовать camelCase или kebab-case (используйте кавычки с kebab-case) для имен свойств CSS:</target>
        </trans-unit>
        <trans-unit id="f804d7c199bb60087ee99a4d2ed2841ff111fad8" translate="yes" xml:space="preserve">
          <source>The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</source>
          <target state="translated">Официальное руководство предполагает знание HTML,CSS и JavaScript на среднем уровне.Если вы новичок во фронтенд-разработке,то,возможно,не лучшая идея прыгать прямо во фреймворк в качестве первого шага-ухватитесь за основы,а затем возвращайтесь! Предыдущий опыт работы с другими фреймворками помогает,но не требуется.</target>
        </trans-unit>
        <trans-unit id="cdcd3cc5d3cb2f01160d1290fc4a6159e0dddd79" translate="yes" xml:space="preserve">
          <source>The only exception to this being the use of &lt;code&gt;Object.freeze()&lt;/code&gt;, which prevents existing properties from being changed, which also means the reactivity system can&amp;rsquo;t &lt;em&gt;track&lt;/em&gt; changes.</source>
          <target state="translated">Единственным исключением из этого &lt;code&gt;Object.freeze()&lt;/code&gt; является использование Object.freeze () , который предотвращает изменение существующих свойств, что также означает, что система реактивности не может &lt;em&gt;отслеживать&lt;/em&gt; изменения.</target>
        </trans-unit>
        <trans-unit id="ae045002c5628426d914998c80d5822201c309f7" translate="yes" xml:space="preserve">
          <source>The option also accepts an object, which allows the developer to define validators for the arguments that are passed with the emitted event, similar to validators in &lt;code&gt;props&lt;/code&gt; definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb7f5feed0a750d304ea8614d2edca774bd3f41" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;scoped&lt;/code&gt; attribute automatically scopes this CSS to your component by adding a unique attribute (such as &lt;code&gt;data-v-21e5b78&lt;/code&gt;) to elements and compiling &lt;code&gt;.list-container:hover&lt;/code&gt; to something like &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt;.</source>
          <target state="translated">Необязательный атрибут &lt;code&gt;scoped&lt;/code&gt; автоматически применяет этот CSS к вашему компоненту, добавляя уникальный атрибут (например, &lt;code&gt;data-v-21e5b78&lt;/code&gt; ) к элементам и компилируя &lt;code&gt;.list-container:hover&lt;/code&gt; к чему-то вроде &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3f64ee7f789f42cb14ffd6fe23ed6a802c14a2" translate="yes" xml:space="preserve">
          <source>The options passed to &lt;code&gt;createApp&lt;/code&gt; are used to configure the &lt;strong&gt;root component&lt;/strong&gt;. That component is used as the starting point for rendering when we &lt;strong&gt;mount&lt;/strong&gt; the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b0aecb5016308ed5c734f2a458dceae41e382c" translate="yes" xml:space="preserve">
          <source>The original and the wrapped version will behave the same in most cases, but be aware that they will fail operations that rely on strong identity comparisons, such as &lt;code&gt;.filter()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt;. This caveat is unlikely to come up when using the options API, because all reactive state is accessed from &lt;code&gt;this&lt;/code&gt; and guaranteed to already be proxies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f86e91201591c3c1631acf2b2475e6e451afce5" translate="yes" xml:space="preserve">
          <source>The parent instance, if the current instance has one.</source>
          <target state="translated">Родительский экземпляр,если он есть в текущем экземпляре.</target>
        </trans-unit>
        <trans-unit id="dae7b87a95058072fd781e647a0652b7e75f9fe6" translate="yes" xml:space="preserve">
          <source>The previous virtual node, only available in the &lt;code&gt;beforeUpdate&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a213359cc7f926ecae5256c14d1f382a33b06e44" translate="yes" xml:space="preserve">
          <source>The problem is event flows that depend on a component&amp;rsquo;s tree structure can be hard to reason about and are very brittle when the tree becomes large. They don&amp;rsquo;t scale well and only set you up for pain later. &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; also do not solve communication between sibling components.</source>
          <target state="translated">Проблема в том, что потоки событий, зависящие от древовидной структуры компонента, могут быть трудными для понимания и очень хрупкими, когда дерево становится большим. Они плохо масштабируются и только позже настраивают вас на боль. &lt;code&gt;$dispatch&lt;/code&gt; и &lt;code&gt;$broadcast&lt;/code&gt; также не решают проблему связи между одноуровневыми компонентами.</target>
        </trans-unit>
        <trans-unit id="c8ce914b16d3eb833d4a96dea962dc602115583b" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98399a72800d5002678971cac53da1533e26a6d2" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">Проблема в том, что большое количество &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;селекторов атрибутов элементов&lt;/a&gt; (например, &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ) будет значительно медленнее, чем &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;селекторы атрибутов класса&lt;/a&gt; (например, &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ), поэтому селекторы классов должны быть предпочтительнее, когда это возможно.</target>
        </trans-unit>
        <trans-unit id="3bc4b51815e1ca75817d438f9a75b79de4143526" translate="yes" xml:space="preserve">
          <source>The problem is, there are also many &lt;em&gt;simple&lt;/em&gt; cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</source>
          <target state="translated">Проблема в том, что во многих &lt;em&gt;простых&lt;/em&gt; случаях эти шаблоны могут быть удобными. Осторожно: не поддавайтесь соблазну простоты торговли (способности понимать ход своего состояния) ради краткосрочного удобства (написание меньшего количества кода).</target>
        </trans-unit>
        <trans-unit id="690eaa8b769a27585770a32b044820cae46112dd" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it&amp;rsquo;s important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">Проблема в том, что бывают случаи, когда важно не удалять элементы, которые останутся в DOM. Например, вы можете использовать &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; для анимации сортировки списка или поддерживать фокус, если визуализированный элемент является &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; . В этих случаях добавление уникального ключа для каждого элемента (например &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ) укажет Vue, как вести себя более предсказуемо.</target>
        </trans-unit>
        <trans-unit id="db624a1c9ff9b7e70ad4f4eab6eb1b72253a56ab" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35549fb2854bdbc4b65652d62df1f1ddfa7a99ea" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn&amp;rsquo;t do anything:</source>
          <target state="translated">Проблема в том, что эта кнопка ничего не делает:</target>
        </trans-unit>
        <trans-unit id="8ce7abf75941a4e635ad58dd72808e1a171b6754" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn't do anything:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850c18dc4babcffd6886619e5ea2e9c6e0772c92" translate="yes" xml:space="preserve">
          <source>The property's name (&lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177272c16a443d5fa6984ac9795159e69769b60e" translate="yes" xml:space="preserve">
          <source>The property's value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361cd98689630fb5a124f5e83b5f388af1b8a1f3" translate="yes" xml:space="preserve">
          <source>The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Предусмотренный элемент служит лишь точкой крепления. В отличие от Vue 1.x, подключенный элемент будет заменен DOM, созданным Vue, во всех случаях. Поэтому не рекомендуется монтировать корневой экземпляр в &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; или &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f253579781bfc25b1fe1113a88b452b8274fbf7" translate="yes" xml:space="preserve">
          <source>The proxied object is invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. As of Vue 3, our reactivity is now available in a &lt;a href=&quot;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&quot;&gt;separate package (opens new window)&lt;/a&gt;. One caveat is that browser consoles format differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools (opens new window)&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ecee76489f72e420143f4e57a248f07f475e8c" translate="yes" xml:space="preserve">
          <source>The reactive conversion is &quot;deep&quot;&amp;mdash;it affects all nested properties. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;ES2015 Proxy (opens new window)&lt;/a&gt; based implementation, the returned proxy is &lt;strong&gt;not&lt;/strong&gt; equal to the original object. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34592f5fd4a2054ce0011f9d4e26a9c654b6f7b5" translate="yes" xml:space="preserve">
          <source>The reason for not automatically injecting &lt;code&gt;item&lt;/code&gt; into the component is because that makes the component tightly coupled to how &lt;code&gt;v-for&lt;/code&gt; works. Being explicit about where its data comes from makes the component reusable in other situations.</source>
          <target state="translated">Причина, по которой &lt;code&gt;item&lt;/code&gt; не вводится автоматически в компонент, заключается в том, что это делает компонент тесно связанным с тем, как работает &lt;code&gt;v-for&lt;/code&gt; . Явное указание источника данных делает компонент пригодным для повторного использования в других ситуациях.</target>
        </trans-unit>
        <trans-unit id="c532c908704eacdd705ddb6c7847a0bd40253f67" translate="yes" xml:space="preserve">
          <source>The reason is this is the equivalent JavaScript that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; would compile to:</source>
          <target state="translated">Причина в том, что это эквивалентный JavaScript, в который &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; компилируется:</target>
        </trans-unit>
        <trans-unit id="78702fdec5c6b73fa78a98283262c3e3a610ea89" translate="yes" xml:space="preserve">
          <source>The reference will be HTMLElement when used with functional components because they&amp;rsquo;re stateless and instanceless.</source>
          <target state="translated">Ссылка будет HTMLElement при использовании с функциональными компонентами, поскольку они не имеют состояния и экземпляра.</target>
        </trans-unit>
        <trans-unit id="c0c42bbffd6116ac9f9aa2c29f718360da13a0c7" translate="yes" xml:space="preserve">
          <source>The rendered HTML will be:</source>
          <target state="translated">Отображаемый HTML будет:</target>
        </trans-unit>
        <trans-unit id="a426ede2112c009fbf616db449e0c6e3bc884e8e" translate="yes" xml:space="preserve">
          <source>The result is that many components may include long lists of base components:</source>
          <target state="translated">В результате многие компоненты могут включать длинные списки базовых компонентов:</target>
        </trans-unit>
        <trans-unit id="08f27fe84425493ea316d81bfb5cc71fa39abce0" translate="yes" xml:space="preserve">
          <source>The resulting API could be used like this, mirroring the example from earlier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0894c1243efd2b6757cc56c901b4af230a9aac04" translate="yes" xml:space="preserve">
          <source>The returned object can be used directly inside &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt; and &lt;a href=&quot;../guide/computed&quot;&gt;computed properties&lt;/a&gt;, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios:</source>
          <target state="translated">Возвращенный объект можно использовать непосредственно внутри &lt;a href=&quot;../guide/render-function&quot;&gt;функций рендеринга&lt;/a&gt; и &lt;a href=&quot;../guide/computed&quot;&gt;вычисляемых свойств&lt;/a&gt; , и он будет запускать соответствующие обновления при изменении. Его также можно использовать как минимальное межкомпонентное хранилище состояний для простых сценариев:</target>
        </trans-unit>
        <trans-unit id="f5f2182d5b9e1141097f081f69203ed474e7f51a" translate="yes" xml:space="preserve">
          <source>The root DOM element that the Vue instance is managing.</source>
          <target state="translated">Корневой элемент DOM,которым управляет экземпляр Vue.</target>
        </trans-unit>
        <trans-unit id="9972076054dc4dddfd1bd61b952d90cd738d9b36" translate="yes" xml:space="preserve">
          <source>The root DOM element that the component instance is managing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb1fe84422a22a87a20ac9a9db7f5aca1ce36fc" translate="yes" xml:space="preserve">
          <source>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">Корневой экземпляр Vue текущего дерева компонентов.Если текущий экземпляр не имеет родителей,то это значение будет само по себе.</target>
        </trans-unit>
        <trans-unit id="760ef4817c957d79f640143c58e8bd458b226fd2" translate="yes" xml:space="preserve">
          <source>The root component instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1dc161060e2475f3fef40b15a419d3fb6e6453" translate="yes" xml:space="preserve">
          <source>The root component instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b232ff8c5c18691a5df8efcbaf774a1cbaab836" translate="yes" xml:space="preserve">
          <source>The same is true for class bindings:</source>
          <target state="translated">То же самое относится и к классовым переплетам:</target>
        </trans-unit>
        <trans-unit id="27b44782a2426ad3efd960795173b0b3bc81c6b4" translate="yes" xml:space="preserve">
          <source>The second argument passed to the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; is a normal JavaScript object that exposes three component properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3076a28f2234e073b3c5d5fd25022826c2744c96" translate="yes" xml:space="preserve">
          <source>The second argument provides a context object which exposes a selective list of properties that were previously exposed on &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca08b1dc1ff6d4a5c712818ba1c4ace33a4babcc" translate="yes" xml:space="preserve">
          <source>The second parameter is optional, and depends on each particular plugin. In the case of the demo &lt;code&gt;i18nPlugin&lt;/code&gt;, it is an object with the translated strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2c503caba50c997d7446df74ac0da742e9b8eb" translate="yes" xml:space="preserve">
          <source>The size of your app (small to medium-sized apps will probably be less than a day)</source>
          <target state="translated">Размер вашего приложения (малые и средние приложения,вероятно,будет меньше,чем за день).</target>
        </trans-unit>
        <trans-unit id="d4e4dd52e59dc61ca3774e3d82684a08d4d2de67" translate="yes" xml:space="preserve">
          <source>The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;'s scope. For example, trying to access &lt;code&gt;action&lt;/code&gt; would not work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f5b2f5a1e6dfc8f2c7678697e3ab5bcf629f27" translate="yes" xml:space="preserve">
          <source>The slots are passed as functions, allowing the child component to control the creation of each slot's contents. Any reactive data should be accessed within the slot function to ensure that it's registered as a dependency of the child component and not the parent. Conversely, calls to &lt;code&gt;resolveComponent&lt;/code&gt; should be made outside the slot function, otherwise they'll resolve relative to the wrong component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c2733bfb43f78b87500262cd44c42870815508" translate="yes" xml:space="preserve">
          <source>The special case to note here is the &lt;code&gt;data&lt;/code&gt; option - it must be a function when used with &lt;code&gt;Vue.extend()&lt;/code&gt;.</source>
          <target state="translated">Особый случай, на который следует обратить внимание, - это опция &lt;code&gt;data&lt;/code&gt; - она ​​должна быть функцией при использовании с &lt;code&gt;Vue.extend()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="572f57cb3c88ad0c0b5d74b281c1e800b18bf5b8" translate="yes" xml:space="preserve">
          <source>The store instance no longer exposes the event emitter interface (&lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt;). If you were previously using the store as a global event bus, &lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;see this section&lt;/a&gt; for migration instructions.</source>
          <target state="translated">Экземпляр магазина больше не предоставляет интерфейс генератора событий ( &lt;code&gt;on&lt;/code&gt; , &lt;code&gt;off&lt;/code&gt; , &lt;code&gt;emit&lt;/code&gt; ). Если вы ранее использовали хранилище в качестве глобальной шины событий, &lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;см.&lt;/a&gt; Инструкции по миграции в этом разделе .</target>
        </trans-unit>
        <trans-unit id="77d67a6f8225d0df00a5fc5a901f8f424ef25e4a" translate="yes" xml:space="preserve">
          <source>The syntax has changed slightly, so &lt;code&gt;/category/*tags&lt;/code&gt; for example, should be updated to &lt;code&gt;/category/:tags+&lt;/code&gt;.</source>
          <target state="translated">Синтаксис немного изменился, поэтому, например, &lt;code&gt;/category/*tags&lt;/code&gt; следует обновить до &lt;code&gt;/category/:tags+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="908884184f3cb4e8612386879bc128af52d0df9c" translate="yes" xml:space="preserve">
          <source>The target object cannot be a Vue instance, or the root data object of a Vue instance.</source>
          <target state="translated">Целевым объектом не может быть ни экземпляр Vue,ни корневой объект данных экземпляра Vue.</target>
        </trans-unit>
        <trans-unit id="3b52d24461e93aad361aa8a10329f3c23cc49031" translate="yes" xml:space="preserve">
          <source>The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what&amp;rsquo;s currently available for Vue templates.</source>
          <target state="translated">Поддержка инструментов (например, линтинг, проверка типов, автозаполнение редактора) для JSX в некотором смысле более продвинута, чем то, что сейчас доступно для шаблонов Vue.</target>
        </trans-unit>
        <trans-unit id="da2a622928cb7fb2119351d71d4d29385b2f0b02" translate="yes" xml:space="preserve">
          <source>The tree of DOM nodes for the HTML above looks like this:</source>
          <target state="translated">Дерево DOM-узлов для приведенного выше HTML выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="1e0938b17616f7c664547dd22e0644ffdf02a08b" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;keyCode&lt;/code&gt; events &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;is deprecated&lt;/a&gt; and may not be supported in new browsers.</source>
          <target state="translated">Использование событий &lt;code&gt;keyCode&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;устарело&lt;/a&gt; и может не поддерживаться в новых браузерах.</target>
        </trans-unit>
        <trans-unit id="9c4b465678423d8a352546c8b85648d07f98dcd7" translate="yes" xml:space="preserve">
          <source>The use of Proxy does introduce a new caveat to be aware with: the proxied object is not equal to the original object in terms of identity comparison (&lt;code&gt;===&lt;/code&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75354818587ed3801dcd8ec1fa3ae5ccf5adc7b" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'post'&lt;/code&gt; can be used to defer the callback until after rendering. This should be used if the callback needs access to the updated DOM or child components via &lt;code&gt;$refs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c973f4080ca50bd81b6cff2d0a6ded9905288da4" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;slot-scope&lt;/code&gt; can accept any valid JavaScript expression that can appear in the argument position of a function definition. This means in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;) you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; in the expression, like so:</source>
          <target state="translated">Значение области &lt;code&gt;slot-scope&lt;/code&gt; может принимать любое допустимое выражение JavaScript, которое может появляться в позиции аргумента определения функции. Это означает, что в поддерживаемых средах ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;однофайловые &lt;/a&gt;&lt;a href=&quot;single-file-components&quot;&gt;компоненты&lt;/a&gt; или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;современные браузеры&lt;/a&gt; ) вы также можете использовать деструктуризацию ES2015 в выражении, например:</target>
        </trans-unit>
        <trans-unit id="44c95331b851049a94d5aa5d023b6e2ddaca60d8" translate="yes" xml:space="preserve">
          <source>The workaround is to either use expressions without spaces or quotes, or replace the complex expression with a computed property.</source>
          <target state="translated">Обходным путем является либо использование выражений без пробелов или кавычек,либо замена сложного выражения вычисляемым свойством.</target>
        </trans-unit>
        <trans-unit id="d02680275f323eda2de9d2d7078001372e594964" translate="yes" xml:space="preserve">
          <source>Their names often include the name of an element they wrap (e.g. &lt;code&gt;BaseButton&lt;/code&gt;, &lt;code&gt;BaseTable&lt;/code&gt;), unless no element exists for their specific purpose (e.g. &lt;code&gt;BaseIcon&lt;/code&gt;). If you build similar components for a more specific context, they will almost always consume these components (e.g. &lt;code&gt;BaseButton&lt;/code&gt; may be used in &lt;code&gt;ButtonSubmit&lt;/code&gt;).</source>
          <target state="translated">Их имена часто включают имя элемента, который они &lt;code&gt;BaseButton&lt;/code&gt; &lt;code&gt;BaseTable&lt;/code&gt; (например, BaseButton , BaseTable ), если только элемент не существует для их конкретной цели (например, &lt;code&gt;BaseIcon&lt;/code&gt; ). Если вы создаете аналогичные компоненты для более конкретного контекста, они почти всегда будут использовать эти компоненты (например, &lt;code&gt;BaseButton&lt;/code&gt; может использоваться в &lt;code&gt;ButtonSubmit&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cac8885ec5589429c1668b6076e0b655b65a0072" translate="yes" xml:space="preserve">
          <source>Then a &lt;code&gt;tree-folder-contents&lt;/code&gt; component with this template:</source>
          <target state="translated">Затем компонент &lt;code&gt;tree-folder-contents&lt;/code&gt; с этим шаблоном:</target>
        </trans-unit>
        <trans-unit id="12ff53d6c9683fe8bc4c3c3ebe06eaf2daa8b2b3" translate="yes" xml:space="preserve">
          <source>Then add some classes when using it:</source>
          <target state="translated">Затем добавьте несколько классов при его использовании:</target>
        </trans-unit>
        <trans-unit id="bdb3d0b6c8743a01fad092b8628997433e226d02" translate="yes" xml:space="preserve">
          <source>Then changes to &lt;code&gt;b&lt;/code&gt; will not trigger any view updates. If you know you&amp;rsquo;ll need a property later, but it starts out empty or non-existent, you&amp;rsquo;ll need to set some initial value. For example:</source>
          <target state="translated">Тогда изменения в &lt;code&gt;b&lt;/code&gt; не вызовут никаких обновлений представления. Если вы знаете, что вам понадобится свойство позже, но оно изначально пустое или не существует, вам нужно будет установить какое-то начальное значение. Например:</target>
        </trans-unit>
        <trans-unit id="d716ba19ef13983399aba7a4f9b4f99bdb1a5cc3" translate="yes" xml:space="preserve">
          <source>Then define the components you&amp;rsquo;d like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="translated">Затем определите компоненты, которые вы хотите использовать в опции &lt;code&gt;components&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f007f5e8e39cc6bea44deac887f75b66321c705c" translate="yes" xml:space="preserve">
          <source>Then define the components you'd like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b993f413d7a3516733e84da6538330a9b561e6" translate="yes" xml:space="preserve">
          <source>Then import the component options along with Vue, and you can make many common assertions (here we are using Jasmine/Jest style &lt;code&gt;expect&lt;/code&gt; assertions just as an example):</source>
          <target state="translated">Затем импортировать компонент варианты вместе с Vue, и вы можете сделать много общих утверждений (здесь мы используем жасмин / шутя стиль &lt;code&gt;expect&lt;/code&gt; утверждения только в качестве примера):</target>
        </trans-unit>
        <trans-unit id="742a07eca2247a701f3fe69d736358f9945a7047" translate="yes" xml:space="preserve">
          <source>Then in a template, you can use the new &lt;code&gt;v-focus&lt;/code&gt; attribute on any element, like this:</source>
          <target state="translated">Затем в шаблоне вы можете использовать новый атрибут &lt;code&gt;v-focus&lt;/code&gt; для любого элемента, например:</target>
        </trans-unit>
        <trans-unit id="d651621f023beec6364c642e7684b35f30f1b1df" translate="yes" xml:space="preserve">
          <source>Then in any descendants, we can use the &lt;code&gt;inject&lt;/code&gt; option to receive specific properties we&amp;rsquo;d like to add to that instance:</source>
          <target state="translated">Затем в любых потомках мы можем использовать опцию &lt;code&gt;inject&lt;/code&gt; для получения определенных свойств, которые мы хотели бы добавить к этому экземпляру:</target>
        </trans-unit>
        <trans-unit id="07a1a769eabe4ce95fd548704bfe1a9036dff3fe" translate="yes" xml:space="preserve">
          <source>Then in our components, we can use &lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;, &lt;code&gt;$off&lt;/code&gt; to emit events, listen for events, and clean up event listeners, respectively:</source>
          <target state="translated">Затем в наших компонентах мы можем использовать &lt;code&gt;$emit&lt;/code&gt; , &lt;code&gt;$on&lt;/code&gt; , &lt;code&gt;$off&lt;/code&gt; для генерации событий, прослушивания событий и очистки прослушивателей событий соответственно:</target>
        </trans-unit>
        <trans-unit id="21a483bbcca1197cc5639fdfa56fc5a657078e60" translate="yes" xml:space="preserve">
          <source>Then in the Vue projects, run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a24c495cff3ba785929f2d1f1232971575aecc" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="translated">Тогда в шаблоне для &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; у вас может быть:</target>
        </trans-unit>
        <trans-unit id="28d893d2fe7cf8b2aa4343023bf7d3d899faf556" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c17e2b180b30e57b025d1baba4010bf150e5ff" translate="yes" xml:space="preserve">
          <source>Then inside &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; you might find yourself reaching for a hack like this:</source>
          <target state="translated">Затем внутри &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; вы можете найти такой взлом:</target>
        </trans-unit>
        <trans-unit id="6cb73bd95447c7f774f020d38dc4e977b5d7f966" translate="yes" xml:space="preserve">
          <source>Then switching the &lt;code&gt;loginType&lt;/code&gt; in the code above will not erase what the user has already entered. Since both templates use the same elements, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is not replaced - just its &lt;code&gt;placeholder&lt;/code&gt;.</source>
          <target state="translated">Тогда переключение &lt;code&gt;loginType&lt;/code&gt; в приведенном выше коде не приведет к удалению того, что пользователь уже ввел. Поскольку оба шаблона используют одни и те же элементы, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; не заменяется - только его &lt;code&gt;placeholder&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6afded1525a7e22ff2f90a6400204ea03039f331" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/index#vm-emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="translated">Затем дочерний компонент может генерировать событие для себя, вызывая встроенный &lt;a href=&quot;../api/index#vm-emit&quot;&gt;метод &lt;/a&gt;&lt;strong&gt; &lt;code&gt;$emit&lt;/code&gt; &lt;/strong&gt; , передавая имя события:</target>
        </trans-unit>
        <trans-unit id="6f7cebb09ffb1468ffa3d18cca25389851f424a1" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/instance-methods#emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6a05a02bb2743e63986fe5978b02e07581ae91" translate="yes" xml:space="preserve">
          <source>Then the parent can listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="translated">Тогда родитель может прослушать это событие и при желании обновить локальное свойство данных.Например:</target>
        </trans-unit>
        <trans-unit id="9efd5288754c42150231112638e5e4f3ca6e8940" translate="yes" xml:space="preserve">
          <source>Then the parent could listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4b4fbfbeb2382afaa428f3aa7171b1ee657214" translate="yes" xml:space="preserve">
          <source>Then the provided content will be rendered instead:</source>
          <target state="translated">Затем вместо этого будет предоставлено предоставленное содержание:</target>
        </trans-unit>
        <trans-unit id="894b33adf4423b8e17178e298c582eff7b692b2f" translate="yes" xml:space="preserve">
          <source>Then the value will be passed as the first parameter of that method:</source>
          <target state="translated">Затем в качестве первого параметра этого метода будет передано значение:</target>
        </trans-unit>
        <trans-unit id="e40f0a46552f37df14dd5aec3ff5064babdeaea5" translate="yes" xml:space="preserve">
          <source>Then want to render a component for each one:</source>
          <target state="translated">Тогда нужно отрисовать компонент для каждого из них:</target>
        </trans-unit>
        <trans-unit id="e77b5195b094315391d1471e49e775352de3ff46" translate="yes" xml:space="preserve">
          <source>Then when later accessing this property on a route, you will still go through meta. For example:</source>
          <target state="translated">Затем,при последующем доступе к этому объекту по маршруту,вы все равно пройдете через метамфетамины.Например:</target>
        </trans-unit>
        <trans-unit id="db6fb96dd889a51b383d80ca6045c8aa43c69291" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event&amp;rsquo;s value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="translated">Затем, когда мы прослушиваем событие в родительском элементе, мы можем получить доступ к значению отправленного события с помощью &lt;code&gt;$event&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1b964bdbe48ac1c49dabc676491d5f4552927e7d" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event's value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944f38d9e324604cc12e36973eba61971ac566d4" translate="yes" xml:space="preserve">
          <source>Then you can fix all templates using this &lt;code&gt;$filters&lt;/code&gt; object like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb930daa712d8e2eb8fe97e59c6f27531e9b1c3e" translate="yes" xml:space="preserve">
          <source>Then you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.</source>
          <target state="translated">Затем вы можете начать писать код Vue и даже отправить уменьшенную версию в производство,не чувствуя себя виноватым и не беспокоясь о проблемах с производительностью.</target>
        </trans-unit>
        <trans-unit id="ebf3c9e7f553f2151cca31494ec2e2f25d6a17ab" translate="yes" xml:space="preserve">
          <source>Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.</source>
          <target state="translated">Потом ты сортируешь их по алфавиту.При обновлении DOM,Vue оптимизирует рендеринг для выполнения самых дешевых мутаций DOM.Это может означать удаление первого элемента todo,а затем добавление его снова в конце списка.</target>
        </trans-unit>
        <trans-unit id="60891cf748e8a5cfa058d96629753adac1a276a6" translate="yes" xml:space="preserve">
          <source>Then you would now update it to:</source>
          <target state="translated">Тогда вы бы обновили его:</target>
        </trans-unit>
        <trans-unit id="29dfab044dfc1294ff91b939dd91ab9260db5d9f" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll need to import each component you&amp;rsquo;d like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="translated">Затем вам нужно будет импортировать каждый компонент, который вы хотите использовать, прежде чем регистрировать его локально. Например, в гипотетическом файле &lt;code&gt;ComponentB.js&lt;/code&gt; или &lt;code&gt;ComponentB.vue&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bbbca49c29405f3089d76789fe1e0ea9835caf98" translate="yes" xml:space="preserve">
          <source>Then you'll need to import each component you'd like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a02df39977359aa3a054dc03aa4a5ab9829f85e" translate="yes" xml:space="preserve">
          <source>There also seem to be philosophical differences in the API design which if you&amp;rsquo;re curious, can be demonstrated by how each handles the creation of a &lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;simple todo list&lt;/a&gt;. It&amp;rsquo;s definitely somewhat subjective, but many consider Vue&amp;rsquo;s API to be less complex and better structured.</source>
          <target state="translated">Также, похоже, существуют философские различия в дизайне API, которые, если вам интересно, могут быть продемонстрированы тем, как каждый обрабатывает создание &lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;простого списка задач&lt;/a&gt; . Это определенно несколько субъективно, но многие считают API Vue менее сложным и лучше структурированным.</target>
        </trans-unit>
        <trans-unit id="00ee1410ff14873dae0595e837c501a60becd79c" translate="yes" xml:space="preserve">
          <source>There are a few advantages:</source>
          <target state="translated">Есть несколько преимуществ:</target>
        </trans-unit>
        <trans-unit id="87ca995da3464bf63362398bc880975ded2ee3cc" translate="yes" xml:space="preserve">
          <source>There are a huge range of disabilities, which can be divided roughly into four categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18eecd77b539219d855322c591de00710dfa9efa" translate="yes" xml:space="preserve">
          <source>There are a number of reasons for placing &lt;code&gt;props&lt;/code&gt; as a separate first argument instead of including it in the context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a278039d12ee8bace65331079237ab972774e0f6" translate="yes" xml:space="preserve">
          <source>There are also a few array-related caveats, which were discussed earlier in the &lt;a href=&quot;list#Caveats&quot;&gt;list rendering section&lt;/a&gt;.</source>
          <target state="translated">Есть также несколько предостережений, связанных с массивами, которые обсуждались ранее в разделе &lt;a href=&quot;list#Caveats&quot;&gt;отрисовки списков&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8355a914d86b23056657ff75f59f4f4811dbbe1e" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance&amp;rsquo;s lifecycle, such as &lt;a href=&quot;../api/index#mounted&quot;&gt;&lt;code&gt;mounted&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/index#updated&quot;&gt;&lt;code&gt;updated&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../api/index#destroyed&quot;&gt;&lt;code&gt;destroyed&lt;/code&gt;&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the Vue instance invoking it.</source>
          <target state="translated">Есть также другие хуки, которые будут вызываться на разных этапах жизненного цикла экземпляра, например, при &lt;a href=&quot;../api/index#mounted&quot;&gt; &lt;code&gt;mounted&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../api/index#updated&quot;&gt; &lt;code&gt;updated&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;../api/index#destroyed&quot;&gt; &lt;code&gt;destroyed&lt;/code&gt; &lt;/a&gt; . Все хуки жизненного цикла вызываются с их контекстом &lt;code&gt;this&lt;/code&gt; , указывающим на вызывающий его экземпляр Vue.</target>
        </trans-unit>
        <trans-unit id="2e596486dc08d17a554e02af4b2f5f3241a6640d" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance's lifecycle, such as &lt;a href=&quot;../api/options-lifecycle-hooks#mounted&quot;&gt;mounted&lt;/a&gt;, &lt;a href=&quot;../api/options-lifecycle-hooks#updated&quot;&gt;updated&lt;/a&gt;, and &lt;a href=&quot;../api/options-lifecycle-hooks#unmounted&quot;&gt;unmounted&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the current active instance invoking it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595e87e7a707cb9f54dea4bd06abe43f491c5b96" translate="yes" xml:space="preserve">
          <source>There are cases however, particularly shared component libraries, when this &lt;em&gt;might&lt;/em&gt; be appropriate. For example, in abstract components that interact with JavaScript APIs instead of rendering HTML, like these hypothetical Google Maps components:</source>
          <target state="translated">Однако в некоторых случаях, особенно в библиотеках общих компонентов, это &lt;em&gt;может&lt;/em&gt; быть целесообразно. Например, в абстрактных компонентах, которые взаимодействуют с API JavaScript вместо рендеринга HTML, таких как эти гипотетические компоненты Карт Google:</target>
        </trans-unit>
        <trans-unit id="3876196be292a6f75aaef350c2cf3fa6064ad6ee" translate="yes" xml:space="preserve">
          <source>There are cases when it&amp;rsquo;s useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">Бывают случаи, когда полезно указать резервный (то есть по умолчанию) контент для слота, который будет отображаться только тогда, когда контент не предоставлен. Например, в компоненте &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="023ed11339a46f2308db7110e18a32765ded128c" translate="yes" xml:space="preserve">
          <source>There are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b097d3f1a1272b7a886d701f8e65981ad1d92968" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used for displaying a list of items using the data from an Array:</source>
          <target state="translated">Есть довольно много других директив, каждая из которых имеет свои особые функции. Например, директива &lt;code&gt;v-for&lt;/code&gt; может использоваться для отображения списка элементов с использованием данных из массива:</target>
        </trans-unit>
        <trans-unit id="9ffde334a578c795b91b7f31309b04b95aaef274" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used to display a list of items using the data from an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301d312bbcc93ad24cc77d82516195cad4b40d9a" translate="yes" xml:space="preserve">
          <source>There are six classes applied for enter/leave transitions.</source>
          <target state="translated">Существует шесть классов,применяемых для входных/выходных переходов.</target>
        </trans-unit>
        <trans-unit id="68ec2c8ded7b22cd2bc4c88259f22e650546ce9b" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component&amp;rsquo;s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="translated">У этого ограничения есть технические причины - оно устраняет класс крайних случаев в системе отслеживания зависимостей, а также позволяет экземплярам Vue лучше взаимодействовать с системами проверки типов. Но есть также важное соображение с точки зрения ремонтопригодности кода: объект &lt;code&gt;data&lt;/code&gt; похож на схему для состояния вашего компонента. Предварительное объявление всех реактивных свойств упрощает понимание кода компонента при повторном посещении позже или чтении другим разработчиком.</target>
        </trans-unit>
        <trans-unit id="cd23ee5c3baea83a9cbbf815348ec184dd9b7581" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes component instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component's state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe3e32d655e16db1bfb24d4c220af3cbcc38d7c" translate="yes" xml:space="preserve">
          <source>There are three primary ways of adding Vue.js to a project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db30e092cad90bed9c249d97be67dad62ff063c2" translate="yes" xml:space="preserve">
          <source>There are times when it&amp;rsquo;s useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">Бывают случаи, когда полезно иметь несколько слотов. Например, в компоненте &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; со следующим шаблоном:</target>
        </trans-unit>
        <trans-unit id="e1813b2bf6f7cecd057263ad277b6fac59e1ce1e" translate="yes" xml:space="preserve">
          <source>There are times when it's useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66a662b2b692933bc8923306e3e5688421626cb" translate="yes" xml:space="preserve">
          <source>There are two common cases where this can be tempting:</source>
          <target state="translated">Есть два распространенных случая,когда это может быть заманчиво:</target>
        </trans-unit>
        <trans-unit id="4be534cacf73464a26b8c69ecc68abf4cebc095f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it&amp;rsquo;s tempting to mutate a prop:</source>
          <target state="translated">Обычно есть два случая, когда возникает соблазн изменить опору:</target>
        </trans-unit>
        <trans-unit id="a8132b188e4877e8a452f3faa4d8374aab1ffa3f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it's tempting to mutate a prop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d31dfadc2282cbff8486ff7a98cbf1a40dcb49c" translate="yes" xml:space="preserve">
          <source>There are various other component options that add user-defined properties to the component instance, such as &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;props&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt; and &lt;code&gt;setup&lt;/code&gt;. We'll discuss each of these in depth later in the guide. All of the properties of the component instance, no matter how they are defined, will be accessible in the component's template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a46df346eecefc8c5696a405d0623a7868c6f68" translate="yes" xml:space="preserve">
          <source>There can still be one unnamed slot, which is the &lt;strong&gt;default slot&lt;/strong&gt; that serves as a catch-all for any unmatched content. In both examples above, the rendered HTML would be:</source>
          <target state="translated">По-прежнему может быть один безымянный слот, который является &lt;strong&gt;слотом&lt;/strong&gt; по &lt;strong&gt;умолчанию,&lt;/strong&gt; который служит для сбора любого несопоставленного контента. В обоих приведенных выше примерах отображаемый HTML-код будет:</target>
        </trans-unit>
        <trans-unit id="3134ce0335f7ad34a1ca3736890a4ab8dd322f95" translate="yes" xml:space="preserve">
          <source>There is a certain temptation to abuse these styles, as one can simply add a change inside a callout. However, this breaks up the flow of reading for the user, and thus, should only be used in special circumstances. Wherever possible, we should attempt to create a narrative and flow within the page to respect the readers cognitive load.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892e9605b3eb99a1e8758152c0f0d14bd50018ba" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn&amp;rsquo;t need global &lt;code&gt;Vue&lt;/code&gt; and its callback&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current Vue instance:</source>
          <target state="translated">Существует также метод экземпляра &lt;code&gt;vm.$nextTick()&lt;/code&gt; , который особенно удобен внутри компонентов, потому что ему не нужен глобальный &lt;code&gt;Vue&lt;/code&gt; , а контекст &lt;code&gt;this&lt;/code&gt; его обратного вызова будет автоматически привязан к текущему экземпляру Vue:</target>
        </trans-unit>
        <trans-unit id="931f9d7dad513e241c3b7564504c589081e367fc" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn't need global &lt;code&gt;Vue&lt;/code&gt; and its callback's &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current component instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e795677faa92646e68896f4fa2d153d1c6b3dad9" translate="yes" xml:space="preserve">
          <source>There is no direct &lt;code&gt;v-model&lt;/code&gt; counterpart in render functions - you will have to implement the logic yourself:</source>
          <target state="translated">В функциях рендеринга нет прямого аналога &lt;code&gt;v-model&lt;/code&gt; - вам придется реализовать логику самостоятельно:</target>
        </trans-unit>
        <trans-unit id="a3dc3c28e5738e838da6dece3bd69b468532f5bd" translate="yes" xml:space="preserve">
          <source>There is no longer a special API to initialize an app with Vue Router. That means instead of:</source>
          <target state="translated">Больше нет специального API для инициализации приложения с помощью Vue Router.Это значит,что вместо:</target>
        </trans-unit>
        <trans-unit id="748ac69009ecb3989841a051f46a547dafda1aa5" translate="yes" xml:space="preserve">
          <source>There is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e786ab8525d61c08d5edd49d36eaafa66121f1c6" translate="yes" xml:space="preserve">
          <source>There may be times when you want to listen directly to a native event on the root element of a component. In these cases, you can use the &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">Бывают случаи, когда вы хотите прослушивать собственное событие непосредственно в корневом элементе компонента. В этих случаях вы можете использовать модификатор &lt;code&gt;.native&lt;/code&gt; для &lt;code&gt;v-on&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e13a2b6d1fa69f970582ef7c30a8696baaa1caf0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot you can do to help Vue grow in your community:</source>
          <target state="translated">Вы можете многое сделать, чтобы помочь Vue расти в вашем сообществе:</target>
        </trans-unit>
        <trans-unit id="c70dcc11c00ce0163cd6cf08b8dae423423a248d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no longer a use case for this in the new Vue Router.</source>
          <target state="translated">В новом маршрутизаторе Vue больше нет варианта использования.</target>
        </trans-unit>
        <trans-unit id="163f368f2bf083cc1079a14cd05b50989be0cc02" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We&amp;rsquo;ll fix that later.</source>
          <target state="translated">В этом примере есть одна проблема. Когда вы добавляете или удаляете элемент, все вокруг мгновенно фиксируются на новом месте вместо плавного перехода. Мы исправим это позже.</target>
        </trans-unit>
        <trans-unit id="5d85fbe7675b4e4ec3b50bf7054fe53d2209ebb4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s still one problem though. Try clicking the button below:</source>
          <target state="translated">Однако есть еще одна проблема. Попробуйте нажать кнопку ниже:</target>
        </trans-unit>
        <trans-unit id="41dad96a14fa109e6a88e60050e0bfc7bfc382d1" translate="yes" xml:space="preserve">
          <source>There's one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We'll fix that later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893d7a218b3089037a8f9da21759565483e409b9" translate="yes" xml:space="preserve">
          <source>There's still one problem though. Try clicking the button below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd02d746956ee7fbd6d2715d983298e056e2e25" translate="yes" xml:space="preserve">
          <source>Therefore, watchers that use template refs should be defined with the &lt;code&gt;flush: 'post'&lt;/code&gt; option. This will run the effect &lt;em&gt;after&lt;/em&gt; the DOM has been updated and ensure that the template ref stays in sync with the DOM and references the correct element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f5f05336b856e05032658da8805f15d162f681" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions&quot;&gt;transitioned too (opens new window)&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6396f41a177bd681652c0e5df217826f32aabe7" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;transitioned too&lt;/a&gt;:</source>
          <target state="translated">Эти анимации FLIP также не ограничиваются одной осью. Элементы в многомерной сетке тоже можно &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;перемещать&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="101fa3129d0c59027806566e19bcb27a91fd6013" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="translated">Эти приложения всегда включают множество шаблонов в DOM, где &lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;&lt;strong&gt;необходимо&lt;/strong&gt;&lt;/a&gt; использовать kebab-case&lt;strong&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b14a434a616541b430915a0d7db4bb6111861e1b" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ad97f9c711d5ae8d024466fe1928f5f113e88a" translate="yes" xml:space="preserve">
          <source>These are the minimal amount of rollup plugins that we need to use to compile the code in an &lt;code&gt;esm&lt;/code&gt; module. We may want to also add &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/babel&quot;&gt;rollup-plugin-babel (opens new window)&lt;/a&gt; to transpile their code and &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/node-resolve&quot;&gt;node-resolve (opens new window)&lt;/a&gt; if we use dependencies that we want to bundle with our library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c4f8a294a999f0a432548c8b4a47252ba3a153" translate="yes" xml:space="preserve">
          <source>These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</source>
          <target state="translated">Они могут быть полезны для демо-версий с большими шаблонами или в очень маленьких приложениях,но в остальном их следует избегать,так как они отделяют шаблоны от остального определения компонента.</target>
        </trans-unit>
        <trans-unit id="21e7d481abd4d9f9e4579d54e3c726471440c50e" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt; for the application. That means they can be used in the template of any component instance within this application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eda46855e3962039e549f3d03f1e9beb23fa48b" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt;. That means they can be used in the template of any root Vue instance (&lt;code&gt;new Vue&lt;/code&gt;) created after registration. For example:</source>
          <target state="translated">Эти компоненты &lt;strong&gt;зарегистрированы глобально&lt;/strong&gt; . Это означает, что их можно использовать в шаблоне любого корневого экземпляра Vue ( &lt;code&gt;new Vue&lt;/code&gt; ), созданного после регистрации. Например:</target>
        </trans-unit>
        <trans-unit id="c11fba5bbbf86f45897e779c4584d6721b0b2522" translate="yes" xml:space="preserve">
          <source>These components lay the foundation for consistent styling and behavior in your application. They may &lt;strong&gt;only&lt;/strong&gt; contain:</source>
          <target state="translated">Эти компоненты закладывают основу для согласованного стиля и поведения вашего приложения. Они могут содержать &lt;strong&gt;только&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="bda8424d75fa59c6af3e0cab0e9c50fd71c0b1db" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the current active instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c208483eb8caab5ce32ce55aa9ca8d4751b6d7ab" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="translated">Эти выражения будут оцениваться как JavaScript в области данных экземпляра Vue владельца. Одно ограничение заключается в том, что каждая привязка может содержать только &lt;strong&gt;одно выражение&lt;/strong&gt; , поэтому следующее &lt;strong&gt;НЕ&lt;/strong&gt; будет работать:</target>
        </trans-unit>
        <trans-unit id="80b817b97cd01c5d4dff8f7d4784ab918c1bcadf" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5e0b8172eba0a64b60b21bf3416955cad7a254" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f84f68662fd1421835a7e799cd84c8a791f699d" translate="yes" xml:space="preserve">
          <source>These global APIs in Vue 2.x are affected by this change:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894c317239a0c7a65a9e88455fd9ec3ef7ebc237" translate="yes" xml:space="preserve">
          <source>These hooks can be used in combination with CSS transitions/animations or on their own.</source>
          <target state="translated">Эти крючки могут использоваться в сочетании с CSS-переходами/анимациями или самостоятельно.</target>
        </trans-unit>
        <trans-unit id="0eae938a54ab8538f13def15003e468ed14f51af" translate="yes" xml:space="preserve">
          <source>These images will act as a submit type button on forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f27cab3e6badeb36908a8616873204e7c70a66" translate="yes" xml:space="preserve">
          <source>These instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the &lt;code&gt;data&lt;/code&gt; function. Where necessary, use &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or some other placeholder value for properties where the desired value isn't yet available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1b4bc59922cec9c3af1f6e29088ab2ed2b3185" translate="yes" xml:space="preserve">
          <source>These lifecycle hook registration functions can only be used synchronously during &lt;a href=&quot;#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;, since they rely on internal global state to locate the current active instance (the component instance whose &lt;code&gt;setup()&lt;/code&gt; is being called right now). Calling them without a current active instance will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18eb93efc44d56c2080356f2acd2adc1588f6912" translate="yes" xml:space="preserve">
          <source>These limitations become apparent when designing a search indicator, like this one for example:</source>
          <target state="translated">Эти ограничения становятся очевидными при проектировании поискового индикатора,как,например,этот:</target>
        </trans-unit>
        <trans-unit id="2672ba8246e63f719c7d2d1d3c131a8d8ffe1408" translate="yes" xml:space="preserve">
          <source>These methods can also be supported in compatibility builds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f058292bf91d7fdc0c19b30d4f231d10c8ffce" translate="yes" xml:space="preserve">
          <source>These modifiers restrict the handler to events triggered by a specific mouse button.</source>
          <target state="translated">Эти модификаторы ограничивают обработчик событиями,вызванными определенной кнопкой мыши.</target>
        </trans-unit>
        <trans-unit id="d2b0e629392045530844771affeff7b43f8ec099" translate="yes" xml:space="preserve">
          <source>These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.</source>
          <target state="translated">Эти правила были найдены,чтобы улучшить читабельность и/или опыт разработчиков в большинстве проектов.Ваш код все равно будет работать,если вы его нарушите,но нарушения должны быть редкими и хорошо обоснованными.</target>
        </trans-unit>
        <trans-unit id="91af92ef53fdf34200de7e0b28db35745ed2a1ae" translate="yes" xml:space="preserve">
          <source>These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.</source>
          <target state="translated">Эти правила помогают предотвратить ошибки,поэтому учитесь и соблюдайте их любой ценой.Исключения могут существовать,но они должны быть очень редкими и делаться только теми,кто хорошо знает JavaScript и Vue.</target>
        </trans-unit>
        <trans-unit id="e30564da6ab88875780c5728faa3632ae18dc83a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use Bubl&amp;eacute;, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="translated">Эти конкретные языки являются лишь примерами. С таким же успехом вы можете использовать Bubl&amp;eacute;, TypeScript, SCSS, PostCSS - или любые другие препроцессоры, которые помогут вам работать продуктивно. Если вы используете Webpack с &lt;code&gt;vue-loader&lt;/code&gt; , он также имеет первоклассную поддержку CSS-модулей.</target>
        </trans-unit>
        <trans-unit id="6f7e3a3689db0252bb84c19cba8c531d2629463a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use TypeScript, SCSS, PostCSS, or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd9827028ef750f7255fe5fc506af18a8fb1368" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue&amp;rsquo;s transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css&lt;/a&gt;.</source>
          <target state="translated">Они переопределят обычные имена классов. Это особенно полезно, когда вы хотите объединить систему переходов Vue с существующей библиотекой анимации CSS, такой как &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e33ec9ba4c8a26fd6b28ce4fd52b224db3c80e35" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cd96ee6ad9b9e610a589e4749092778d3625dd" translate="yes" xml:space="preserve">
          <source>They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead to &lt;strong&gt;identity hazards&lt;/strong&gt; - i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a51bba5139b36f3f5fa86eb58e22582ee00315" translate="yes" xml:space="preserve">
          <source>They can also be passed individually or wrapped as appropriate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d1026e768f545462812038bf11ac5597aa461a" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it&amp;rsquo;s easy to see how the component is meant to be used.</source>
          <target state="translated">Они документируют API компонента, так что легко увидеть, как компонент предназначен для использования.</target>
        </trans-unit>
        <trans-unit id="b6cf20af74870ca902c785f1b709b46f1fb4bbe6" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it's easy to see how the component is meant to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9fb3a66c9bf09491269055d05e63e8daff7baf" translate="yes" xml:space="preserve">
          <source>They have slightly different target users however.</source>
          <target state="translated">Однако у них несколько разные целевые пользователи.</target>
        </trans-unit>
        <trans-unit id="dddb496772a8230c124e4f06a214f032833805d2" translate="yes" xml:space="preserve">
          <source>They may look a bit different from normal HTML, but &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; are valid characters for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</source>
          <target state="translated">Они могут немного отличаться от обычного HTML, но &lt;code&gt;:&lt;/code&gt; и &lt;code&gt;@&lt;/code&gt; являются допустимыми символами для имен атрибутов, и все браузеры, поддерживающие Vue, могут правильно их проанализировать. Кроме того, они не отображаются в окончательной разметке. Сокращенный синтаксис не является обязательным, но вы, вероятно, оцените его, когда узнаете больше о его использовании позже.</target>
        </trans-unit>
        <trans-unit id="281fe192d49481d23a37a591764ebdfbfa624db4" translate="yes" xml:space="preserve">
          <source>They will receive two arguments: &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; argument is an object that contains a component's &lt;code&gt;attrs&lt;/code&gt;, &lt;code&gt;slots&lt;/code&gt;, and &lt;code&gt;emit&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9f42e561d875ba212a21ce976d18f88707fb7e" translate="yes" xml:space="preserve">
          <source>They&amp;rsquo;re also very useful as wrapper components. For example, when you need to:</source>
          <target state="translated">Они также очень полезны в качестве компонентов оболочки. Например, когда вам нужно:</target>
        </trans-unit>
        <trans-unit id="58f728f5f509eee0bedefd10f55cb2582da092af" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts (opens new window)&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36292b3c039d104e965d98c8c9a093ed70eee710" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">Это &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;предотвращает конфликты&lt;/a&gt; с существующими и будущими элементами HTML, поскольку все элементы HTML состоят из одного слова.</target>
        </trans-unit>
        <trans-unit id="1ece11c20b0e27793001fdeec7df491259c0b914" translate="yes" xml:space="preserve">
          <source>This allows us add behavior that a filter alone couldn&amp;rsquo;t encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external &lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt;&lt;code&gt;currencyValidator&lt;/code&gt; object&lt;/a&gt;:</source>
          <target state="translated">Это позволяет нам добавить поведение, которое один фильтр не может инкапсулировать, например, выбор содержимого ввода в фокусе. Теперь следующим шагом будет извлечение бизнес-логики из фильтра. Ниже мы вытаскиваем все во внешний &lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt;объект &lt;/a&gt; &lt;code&gt;currencyValidator&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="90803ce7ef09d688b5c581945fa8c418cf8b3ba3" translate="yes" xml:space="preserve">
          <source>This allows us to more safely keep developing that component, without fear that we might change/remove something that a child component is relying on. The interface between these components remains clearly defined, just as with props.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e149b933b7f933e9d6e2560dceac8830da4733" translate="yes" xml:space="preserve">
          <source>This allows you to compose components like this:</source>
          <target state="translated">Это позволяет составлять такие компоненты:</target>
        </trans-unit>
        <trans-unit id="6c6fdcbf1874b359140e4f3504f0ef8feaedac9f" translate="yes" xml:space="preserve">
          <source>This also allows &lt;code&gt;itemRefs&lt;/code&gt; to be made reactive and watched, if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ab67c65f204cb035ac63172b27bd9763045849" translate="yes" xml:space="preserve">
          <source>This also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b017e21cf180432f227f352528adf7beedafa7a" translate="yes" xml:space="preserve">
          <source>This also means the following computed property will never update, because &lt;code&gt;Date.now()&lt;/code&gt; is not a reactive dependency:</source>
          <target state="translated">Это также означает, что следующее вычисленное свойство никогда не будет обновляться, потому что &lt;code&gt;Date.now()&lt;/code&gt; не является реактивной зависимостью:</target>
        </trans-unit>
        <trans-unit id="a4a6283a307a4532f0a11fbeb7e2bc85aba3cc5e" translate="yes" xml:space="preserve">
          <source>This also serves as a replacement to &lt;code&gt;.sync&lt;/code&gt; modifier and allows us to have multiple &lt;code&gt;v-model&lt;/code&gt;s on the custom component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d966b066638dcbfbeb5f7c1fa054b2b9f4ac88e1" translate="yes" xml:space="preserve">
          <source>This attribute does not support dynamic binding.</source>
          <target state="translated">Данный атрибут не поддерживает динамическую привязку.</target>
        </trans-unit>
        <trans-unit id="164bc1e51c6702dce494f030a1bafd94645ed70c" translate="yes" xml:space="preserve">
          <source>This became confusing, as &lt;em&gt;enter&lt;/em&gt; and &lt;em&gt;leave&lt;/em&gt; were broad and not using the same naming convention as their class hook counterparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85db9f37abb47bdae5f9736eb1fa18d771e503d8" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt;, so if you&amp;rsquo;ve read this far it&amp;rsquo;s probably time to try it out!</source>
          <target state="translated">Это возвращает нас к &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt; , поэтому, если вы дочитали до этого места, возможно, самое время попробовать!</target>
        </trans-unit>
        <trans-unit id="179dbb08dcd1151aabd85db6b52d3899eda0943a" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://next.vuex.vuejs.org/&quot;&gt;Vuex (opens new window)&lt;/a&gt;, so if you've read this far it's probably time to try it out!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dd0e485cf645c0e638522c49dece838e9d034a" translate="yes" xml:space="preserve">
          <source>This can be achieved using Vue's custom &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e208871e834d455a504dbc7b4789f62b8d51dbdf" translate="yes" xml:space="preserve">
          <source>This can be convenient for demos or very small apps with a handful of components. However, the pattern does not scale well to medium or large-scale applications, so we strongly recommend using &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; to manage state in most cases.</source>
          <target state="translated">Это может быть удобно для демонстраций или очень небольших приложений с небольшим количеством компонентов. Однако шаблон плохо масштабируется для средних или крупных приложений, поэтому в большинстве случаев мы настоятельно рекомендуем использовать &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; для управления состоянием.</target>
        </trans-unit>
        <trans-unit id="f3ae7f80927899cd62140ba3ac91c1a272907e8a" translate="yes" xml:space="preserve">
          <source>This can be especially useful in combination with the &lt;code&gt;$attrs&lt;/code&gt; instance property, which contains the attribute names and values passed to a component, such as:</source>
          <target state="translated">Это может быть особенно полезно в сочетании со свойством экземпляра &lt;code&gt;$attrs&lt;/code&gt; , которое содержит имена атрибутов и значения, передаваемые компоненту, например:</target>
        </trans-unit>
        <trans-unit id="b07d706ca1c93b0222f37979c7558e8ac0bf7393" translate="yes" xml:space="preserve">
          <source>This can be fixed by moving &lt;code&gt;v-for&lt;/code&gt; to a wrapping &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc35e91b7f0ddcd858a9ed54df8c331d12068bc2" translate="yes" xml:space="preserve">
          <source>This can be shortened even further. Just as non-specified content is assumed to be for the default slot, &lt;code&gt;v-slot&lt;/code&gt; without an argument is assumed to refer to the default slot:</source>
          <target state="translated">Его можно сократить еще больше. Так же, как неуказанный контент предполагается для слота по умолчанию, предполагается, что &lt;code&gt;v-slot&lt;/code&gt; без аргумента относится к слоту по умолчанию:</target>
        </trans-unit>
        <trans-unit id="e890dd0b9a03e7b18eb3ea7a9ab2b112967c585d" translate="yes" xml:space="preserve">
          <source>This can be useful sometimes, but it&amp;rsquo;s not a good idea when you&amp;rsquo;re trying to listen on a very specific element, like an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. For example, the &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; component above might refactor so that the root element is actually a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">Иногда это может быть полезно, но это не очень хорошая идея, когда вы пытаетесь прослушивать очень конкретный элемент, например &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; . Например, приведенный выше компонент &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; может рефакторинговаться так, чтобы корневой элемент на самом деле был элементом &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ef2288cfa9c5bb1049786a028d410bf6a81d1c49" translate="yes" xml:space="preserve">
          <source>This can be useful when you&amp;rsquo;ve defined CSS transitions/animations using Vue&amp;rsquo;s transition class conventions and want to switch between them.</source>
          <target state="translated">Это может быть полезно, когда вы определили переходы / анимацию CSS с использованием соглашений о классах переходов Vue и хотите переключаться между ними.</target>
        </trans-unit>
        <trans-unit id="70c019ddc029d5a8d4f133c3f5144d392c3ee9d2" translate="yes" xml:space="preserve">
          <source>This can be useful when you've defined CSS transitions/animations using Vue's transition class conventions and want to switch between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc031caf419daa5de2c3ce28e6fb5557646cf13b" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;item&lt;/code&gt; to &lt;code&gt;todo&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ed18f22c3147e4d4b605b99a8c886bf36867ed" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;person&lt;/code&gt;:</source>
          <target state="translated">Это может сделать шаблон намного чище, особенно когда в слоте есть много реквизита. Это также открывает другие возможности, такие как переименование реквизита, например, от &lt;code&gt;user&lt;/code&gt; к &lt;code&gt;person&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6e3bbca32d3b2efbcc3d42d5169b319a15930cbb" translate="yes" xml:space="preserve">
          <source>This can replace Vue 2.x &lt;code&gt;Vue.prototype&lt;/code&gt; extending:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d37bc2f925538550750ba2e9fce0b6e7858848" translate="yes" xml:space="preserve">
          <source>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</source>
          <target state="translated">Это может очень хорошо работать для малых и средних проектов,где JavaScript используется только для улучшения определенных представлений.Однако,в более сложных проектах,или когда ваш фронтенд полностью управляется с помощью JavaScript,эти недостатки становятся очевидными:</target>
        </trans-unit>
        <trans-unit id="64ce0755339c54b2f7c3cf1e473ecb364b9471ff" translate="yes" xml:space="preserve">
          <source>This change unifies normal and scoped slots in 3.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649bd7763f809cf2a22e97c4ffc5bb92d06dc2c8" translate="yes" xml:space="preserve">
          <source>This change will not affect &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552c6085e6177cea581b90083d77773efb3e8be2" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you&amp;rsquo;ll see below:</source>
          <target state="translated">Этот класс в основном полезен для указания времени перехода и кривой замедления, как вы увидите ниже:</target>
        </trans-unit>
        <trans-unit id="4dca719226599c28b606b8514447a1add2ee8926" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you'll see below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0393bc65d6af864ec2bb745213f48992c8218a" translate="yes" xml:space="preserve">
          <source>This component has several responsibilities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aece2a4bb40123dcf8dc29a3f56c00b36cd67448" translate="yes" xml:space="preserve">
          <source>This config option is only respected when using the runtime compiler. If you are using the runtime-only build, &lt;code&gt;isCustomElement&lt;/code&gt; must be passed to &lt;code&gt;@vue/compiler-dom&lt;/code&gt; in the build setup instead - for example, via the &lt;a href=&quot;https://vue-loader.vuejs.org/options.html#compileroptions&quot;&gt;&lt;code&gt;compilerOptions&lt;/code&gt; option in vue-loader (opens new window)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73218ffb3cfb7afab06eea57271f24ec7aa48d7a" translate="yes" xml:space="preserve">
          <source>This config option was introduced with the intention to support native custom elements, so the renaming better conveys what it does. The new option also expects a function which provides more flexibility than the old string / RegExp approach:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9178232fdf5ceab5e71cd384ec980a517e8bd826" translate="yes" xml:space="preserve">
          <source>This could be fixed by iterating over a computed property instead, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64fb541d6cf03a309471b66f62b3cc4e9df105f" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript&amp;rsquo;s &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; in a render function:</source>
          <target state="translated">Это можно переписать с помощью JavaScript &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; и &lt;code&gt;map&lt;/code&gt; в функции рендеринга:</target>
        </trans-unit>
        <trans-unit id="8724d06123a948287362546d838692c2aa5506c2" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript's &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; in a render function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc281e6afa265cb93fadcfb1141b35d1dc6b8178" translate="yes" xml:space="preserve">
          <source>This default mode is efficient, but &lt;strong&gt;only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)&lt;/strong&gt;.</source>
          <target state="translated">Этот режим по умолчанию эффективен, но &lt;strong&gt;подходит только в том случае, если вывод рендеринга вашего списка не зависит от состояния дочернего компонента или временного состояния DOM (например, входных значений формы)&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="83c6bcc5ab3c17077a142a2b9547158e591eb788" translate="yes" xml:space="preserve">
          <source>This directive triggers transitions when its condition changes.</source>
          <target state="translated">Эта директива запускает переходы при изменении своего состояния.</target>
        </trans-unit>
        <trans-unit id="bcf9f3835622e83dc060967041ab679cca48d307" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</source>
          <target state="translated">Эта директива останется в элементе, пока связанный экземпляр Vue не завершит компиляцию. В сочетании с правилами CSS, такими как &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt; , эту директиву можно использовать для скрытия нескомпилированных привязок усов, пока экземпляр Vue не будет готов.</target>
        </trans-unit>
        <trans-unit id="b59796a2504047463e100abad78dff5eab523d76" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated component instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the component instance is ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e343af564058d721599d1f9e8b019d300435ac7" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it&amp;rsquo;s a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="translated">Это не означает, что компонент используется только на одной странице, но он будет использоваться только один раз &lt;em&gt;на странице&lt;/em&gt; . Эти компоненты никогда не принимают никаких реквизитов, поскольку они относятся к вашему приложению, а не к их контексту в вашем приложении. Если вы обнаружите необходимость добавить реквизит, это хороший признак того, что это на самом деле многократно используемый компонент , который используется только один раз на странице &lt;em&gt;сейчас&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="afef3dbc4c5bebfc4611fe4a8f42fd4e1a888122" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it's a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e804cfdea5616facc606f041bd1ea03ee103fc" translate="yes" xml:space="preserve">
          <source>This doesn't require any build setup, works in all browsers, is not subject to any in-DOM HTML parsing caveats (e.g. you can use camelCase prop names), and provides proper syntax highlighting in most IDEs. In traditional server-side frameworks, these templates can be split out into server template partials (included into the main HTML template) for better maintainability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fce486eed9d8f23629bf0a56e96e4d92ed9c422" translate="yes" xml:space="preserve">
          <source>This essentially means the &lt;code&gt;Transition&lt;/code&gt; component only gets imported when the application actually makes use of it. In other words, if the application doesn&amp;rsquo;t have any &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component, the code supporting this feature will not be present in the final bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045411f2b2e7825926721bc11467177b95eff687" translate="yes" xml:space="preserve">
          <source>This even applies to all subcomponents, meaning all three of these components will also be available &lt;em&gt;inside each other&lt;/em&gt;.</source>
          <target state="translated">Это применимо даже ко всем подкомпонентам, то есть все три этих компонента также будут доступны &lt;em&gt;друг в друге&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="82b2832a220d04d77924bc1b878abfa24eacde86" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="translated">Этот пример демонстрирует, что мы можем привязать данные не только к тексту и атрибутам, но и к &lt;strong&gt;структуре&lt;/strong&gt; DOM. Более того, Vue также предоставляет мощную систему эффектов перехода, которая может автоматически применять &lt;a href=&quot;guide/transitions&quot;&gt;эффекты перехода,&lt;/a&gt; когда элементы вставляются / обновляются / удаляются с помощью Vue.</target>
        </trans-unit>
        <trans-unit id="3d8a463b1eeae83ef20ecb7a8b09fb17e84fd6a5" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions-enterleave&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd36e959ee70eedf0f7070f7e82b61d04b69506" translate="yes" xml:space="preserve">
          <source>This feature will no longer be supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f756a442b07c0ee7ffd2de4e5fb79100b7f5952" translate="yes" xml:space="preserve">
          <source>This function will receive a &lt;code&gt;key&lt;/code&gt; string, which we will use to look up the translated string in the user-provided options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f4e1203d764412549f6b1974ffcd1631f009dd" translate="yes" xml:space="preserve">
          <source>This gives you more complete control over the reactive properties you&amp;rsquo;d like to watch.</source>
          <target state="translated">Это дает вам более полный контроль над реактивными свойствами, которые вы хотите отслеживать.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
