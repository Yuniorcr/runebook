<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="1b54438722ed3844a0702f9ed09c56d6aef28ee2" translate="yes" xml:space="preserve">
          <source>The fast-import backend itself can import into an empty repository (one that has already been initialized by &lt;code&gt;git init&lt;/code&gt;) or incrementally update an existing populated repository. Whether or not incremental imports are supported from a particular foreign source depends on the frontend program in use.</source>
          <target state="translated">Сам бэкэнд быстрого импорта может импортировать в пустой репозиторий (тот, который уже был инициализирован &lt;code&gt;git init&lt;/code&gt; ) или постепенно обновлять существующий заполненный репозиторий. Поддерживается ли добавочный импорт из конкретного внешнего источника или нет, зависит от используемой клиентской программы.</target>
        </trans-unit>
        <trans-unit id="3dfacf796b68e98a60c628fed43445479dc82ce1" translate="yes" xml:space="preserve">
          <source>The fast-import mechanism used by &lt;code&gt;git p4&lt;/code&gt; creates one pack file for each invocation of &lt;code&gt;git p4 sync&lt;/code&gt;. Normally, Git garbage compression (&lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;) automatically compresses these to fewer pack files, but explicit invocation of &lt;code&gt;git repack -adf&lt;/code&gt; may improve performance.</source>
          <target state="translated">Механизм быстрого импорта, используемый &lt;code&gt;git p4&lt;/code&gt; , создает один файл пакета для каждого вызова &lt;code&gt;git p4 sync&lt;/code&gt; . Обычно сжатие мусора Git ( &lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt; ) автоматически сжимает их до меньшего количества файлов пакетов, но явный вызов &lt;code&gt;git repack -adf&lt;/code&gt; может улучшить производительность.</target>
        </trans-unit>
        <trans-unit id="53e903dc94674f5b365dd31d16a6c2e334c714e3" translate="yes" xml:space="preserve">
          <source>The fetch and push protocols are not designed to prevent one side from stealing data from the other repository that was not intended to be shared. If you have private data that you need to protect from a malicious peer, your best option is to store it in another repository. This applies to both clients and servers. In particular, namespaces on a server are not effective for read access control; you should only grant read access to a namespace to clients that you would trust with read access to the entire repository.</source>
          <target state="translated">Протоколы fetch и push не предназначены для того,чтобы предотвратить кражу одной стороной данных из другого репозитория,которые не предназначались для общего доступа.Если у вас есть личные данные,которые необходимо защитить от злоумышленников,лучше всего хранить их в другом репозитории.Это относится как к клиентам,так и к серверам.В частности,пространства имен на сервере не эффективны для контроля доступа на чтение;вы должны предоставлять доступ на чтение только тем клиентам,которым вы доверите доступ на чтение всему репозиторию.</target>
        </trans-unit>
        <trans-unit id="648bf821f46e9909499e1fbac0dd96a1ab871eb7" translate="yes" xml:space="preserve">
          <source>The fields (including the &lt;code&gt;-&amp;gt;&lt;/code&gt;) are separated from each other by a single space. If a filename contains whitespace or other nonprintable characters, that field will be quoted in the manner of a C string literal: surrounded by ASCII double quote (34) characters, and with interior special characters backslash-escaped.</source>
          <target state="translated">Поля (включая &lt;code&gt;-&amp;gt;&lt;/code&gt; ) отделены друг от друга одним пробелом. Если имя файла содержит пробелы или другие непечатаемые символы, это поле будет заключено в кавычки в виде строкового литерала C: оно будет заключено в двойные кавычки ASCII (34), а внутренние специальные символы будут экранированы обратной косой чертой.</target>
        </trans-unit>
        <trans-unit id="3994e582754827987cb1dab035b29a73b90c4b3e" translate="yes" xml:space="preserve">
          <source>The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are case-insensitive. Only alphanumeric characters, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.</source>
          <target state="translated">Файл состоит из разделов и переменных. Раздел начинается с названия раздела в квадратных скобках и продолжается до начала следующего раздела. Имена разделов нечувствительны к регистру. Только буквенно-цифровые символы &lt;code&gt;-&lt;/code&gt; и &lt;code&gt;.&lt;/code&gt; разрешены в названиях разделов. Каждая переменная должна принадлежать какому-либо разделу, что означает, что перед первым параметром переменной должен быть заголовок раздела.</target>
        </trans-unit>
        <trans-unit id="b77694751b662ffffe51a33dc2cd7f9b8be897f4" translate="yes" xml:space="preserve">
          <source>The file contains one subsection per submodule, and the subsection value is the name of the submodule. The name is set to the path where the submodule has been added unless it was customized with the &lt;code&gt;--name&lt;/code&gt; option of &lt;code&gt;git submodule add&lt;/code&gt;. Each submodule section also contains the following required keys:</source>
          <target state="translated">Файл содержит по одному подразделу на каждый подмодуль, а значение подраздела - это имя подмодуля. В качестве имени задается путь, по которому был добавлен подмодуль, если он не был настроен с &lt;code&gt;--name&lt;/code&gt; опции --name команды &lt;code&gt;git submodule add&lt;/code&gt; . Каждый раздел подмодуля также содержит следующие обязательные ключи:</target>
        </trans-unit>
        <trans-unit id="d7d8ebbce919f993c68a8bac80b9fbb16d92024e" translate="yes" xml:space="preserve">
          <source>The file format includes parameters for the object ID hash function, so a future change of hash algorithm does not require a change in format.</source>
          <target state="translated">Формат файла включает в себя параметры хэш-функции идентификатора объекта,поэтому дальнейшее изменение хэш-алгоритма не требует изменения формата.</target>
        </trans-unit>
        <trans-unit id="1bb6e340dc566db02505e0c4003761a9d85c40c1" translate="yes" xml:space="preserve">
          <source>The file is concluded with a trailer:</source>
          <target state="translated">Файл завершается трейлером:</target>
        </trans-unit>
        <trans-unit id="996f5fbcdb16f7d7ee85c3a6ae77d46a1781884a" translate="yes" xml:space="preserve">
          <source>The file parameters can point at the user&amp;rsquo;s working file (e.g. &lt;code&gt;new-file&lt;/code&gt; in &quot;git-diff-files&quot;), &lt;code&gt;/dev/null&lt;/code&gt; (e.g. &lt;code&gt;old-file&lt;/code&gt; when a new file is added), or a temporary file (e.g. &lt;code&gt;old-file&lt;/code&gt; in the index). &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; should not worry about unlinking the temporary file --- it is removed when &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; exits.</source>
          <target state="translated">Параметры файла могут указывать на рабочий файл пользователя (например, &lt;code&gt;new-file&lt;/code&gt; в &quot;git-diff-files&quot;), &lt;code&gt;/dev/null&lt;/code&gt; (например, &lt;code&gt;old-file&lt;/code&gt; при добавлении нового файла) или временный файл (например, &lt;code&gt;old-file&lt;/code&gt; в индексе). &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; не должен беспокоиться об отключении временного файла - он удаляется при выходе из &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b979e5d416845ad4db7c29ab613bf67d05d7d448" translate="yes" xml:space="preserve">
          <source>The files are read in the order given above, with last value found taking precedence over values read earlier. When multiple values are taken then all values of a key from all files will be used.</source>
          <target state="translated">Файлы считываются в порядке,указанном выше,при этом найденное последнее значение имеет приоритет над значениями,прочитанными ранее.При считывании нескольких значений будут использованы все значения ключа из всех файлов.</target>
        </trans-unit>
        <trans-unit id="22cd650e22be9431ebec70f16e27f0954b25a243" translate="yes" xml:space="preserve">
          <source>The files to read the patch from. &lt;code&gt;-&lt;/code&gt; can be used to read from the standard input.</source>
          <target state="translated">Файлы, из которых следует читать патч. &lt;code&gt;-&lt;/code&gt; можно использовать для чтения со стандартного ввода.</target>
        </trans-unit>
        <trans-unit id="fc839d554b73db3187cb52551b31c221d5647965" translate="yes" xml:space="preserve">
          <source>The filter is expected to respond with a list of &quot;key=value&quot; pairs terminated with a flush packet. If the filter does not experience problems then the list must contain a &quot;success&quot; status. Right after these packets the filter is expected to send the content in zero or more pkt-line packets and a flush packet at the end. Finally, a second list of &quot;key=value&quot; pairs terminated with a flush packet is expected. The filter can change the status in the second list or keep the status as is with an empty list. Please note that the empty list must be terminated with a flush packet regardless.</source>
          <target state="translated">Ожидается,что фильтр ответит списком пар &quot;ключ=значение&quot;,завершенных пакетом флеш.Если фильтр не испытывает проблем,то список должен содержать статус &quot;успешно&quot;.Сразу после этих пакетов фильтр должен отправить содержимое в нулевом или большем количестве пакетов pkt-line и флеш-пакет в конце.Наконец,ожидается второй список пар &quot;ключ=значение&quot;,завершенных флеш-пакетом.Фильтр может изменить статус во втором списке или сохранить статус как есть с пустым списком.Пожалуйста,обратите внимание,что пустой список должен быть прерван флеш-пакетом независимо от этого.</target>
        </trans-unit>
        <trans-unit id="48c7b9e769ad1a8ac7a03d8a91befba4e1dc75d4" translate="yes" xml:space="preserve">
          <source>The filter that will be applied when fetching from this promisor remote.</source>
          <target state="translated">Фильтр,который будет применяться при извлечении с этого удаленного промульстера.</target>
        </trans-unit>
        <trans-unit id="67e1cbcd0bc26ca591869ec55e18981d4a05f31d" translate="yes" xml:space="preserve">
          <source>The filters are applied in the order as listed below. The &amp;lt;command&amp;gt; argument is always evaluated in the shell context using the &lt;code&gt;eval&lt;/code&gt; command (with the notable exception of the commit filter, for technical reasons). Prior to that, the &lt;code&gt;$GIT_COMMIT&lt;/code&gt; environment variable will be set to contain the id of the commit being rewritten. Also, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are taken from the current commit and exported to the environment, in order to affect the author and committer identities of the replacement commit created by &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; after the filters have run.</source>
          <target state="translated">Фильтры применяются в порядке, указанном ниже. Аргумент &amp;lt;command&amp;gt; всегда оценивается в контексте оболочки с помощью команды &lt;code&gt;eval&lt;/code&gt; (за заметным исключением фильтра фиксации по техническим причинам). Перед этим в &lt;code&gt;$GIT_COMMIT&lt;/code&gt; окружения $ GIT_COMMIT будет установлен идентификатор перезаписываемого коммита. Кроме того, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL и GIT_COMMITTER_DATE берутся из текущего коммита и экспортируются в среду, чтобы повлиять на автора и &lt;a href=&quot;git-commit-tree&quot;&gt;коммит-дерево&lt;/a&gt; после фиксации, созданное [1- замещающим деревом]. фильтры сработали.</target>
        </trans-unit>
        <trans-unit id="96e6a8e11c595c66ed126e7ed94498b41b8ef74c" translate="yes" xml:space="preserve">
          <source>The final &quot;/&quot; is important. The exported name is literally just prefixed with the specified string. Contrast this with the following example.</source>
          <target state="translated">Окончательное &quot;/&quot; важно.Экспортируемое имя буквально просто префиксовано с указанной строкой.Противопоставьте это следующему примеру.</target>
        </trans-unit>
        <trans-unit id="5e71083855686454b686d549c1aa754044d9c24f" translate="yes" xml:space="preserve">
          <source>The final result will be a series of commits, one for each patch in the original mailbox, with authorship and commit log message each taken from the message containing each patch.</source>
          <target state="translated">Окончательным результатом будет серия коммитов,по одному для каждого патча в исходном почтовом ящике,с сообщением об авторстве и сообщением журнала коммитов,каждое из которых взято из сообщения,содержащего каждый патч.</target>
        </trans-unit>
        <trans-unit id="d06dc79919ba8d7d4e32bae22586b9e61ea6ab90" translate="yes" xml:space="preserve">
          <source>The first &quot;git bisect&quot; subcommand to use is &quot;git bisect start&quot; to start the search. Then bounds must be set to limit the commit space. This is done usually by giving one &quot;bad&quot; and at least one &quot;good&quot; commit. They can be passed in the initial call to &quot;git bisect start&quot; like this:</source>
          <target state="translated">Первая подкоманда &quot;git-бисект&quot; используется для начала поиска.Затем должны быть установлены границы,ограничивающие пространство фиксации.Обычно это делается путём задания одного &quot;плохого&quot; и,как минимум,одного &quot;хорошего&quot; коммита.При первом вызове они могут быть переданы в &quot;git-bisect start&quot; вот так:</target>
        </trans-unit>
        <trans-unit id="7d24667b8a3af4ae680279e90e5939ecc7d57754" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;N&lt;/code&gt; lines of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd96cc8c67fe6f3794e1faadfc16d4e75778490" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;origin&lt;/code&gt;, just tells Git to fetch from the repository you originally cloned from. The second argument tells Git to fetch the branch named &lt;code&gt;todo&lt;/code&gt; from the remote repository, and to store it locally under the name &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt;.</source>
          <target state="translated">Первый аргумент, &lt;code&gt;origin&lt;/code&gt; , просто сообщает Git, что нужно выполнить выборку из репозитория, из которого вы изначально клонировали. Второй аргумент указывает Git получить ветку с именем &lt;code&gt;todo&lt;/code&gt; из удаленного репозитория и сохранить ее локально под именем &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81bbac8df429c9294b949507806676c0327c9227" translate="yes" xml:space="preserve">
          <source>The first character given by this option will be the default character used when another separator is not specified in the config for this trailer.</source>
          <target state="translated">Первый символ,заданный этой опцией,будет символом по умолчанию,используемым,когда другой разделитель не указан в конфигурационном файле для этого трейлера.</target>
        </trans-unit>
        <trans-unit id="39b9ae2f52daae0742c9cd959c54a342268035c6" translate="yes" xml:space="preserve">
          <source>The first command fetches the &lt;code&gt;maint&lt;/code&gt; branch from the repository at &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; and the second command uses &lt;code&gt;FETCH_HEAD&lt;/code&gt; to examine the branch with &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;. The fetched objects will eventually be removed by git&amp;rsquo;s built-in housekeeping (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;).</source>
          <target state="translated">Первая команда извлекает ветку &lt;code&gt;maint&lt;/code&gt; из репозитория по адресу &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; , а вторая команда использует &lt;code&gt;FETCH_HEAD&lt;/code&gt; для проверки ветки с помощью &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; . Полученные объекты в конечном итоге будут удалены встроенной функцией &lt;a href=&quot;git-gc&quot;&gt;git&lt;/a&gt; (см. Git-gc [1] ).</target>
        </trans-unit>
        <trans-unit id="fc54aa6f7f46c36afb224191ab9ce02506aa2fd9" translate="yes" xml:space="preserve">
          <source>The first defense against such problems is backups. You can back up a Git directory using clone, or just using cp, tar, or any other backup mechanism.</source>
          <target state="translated">Первая защита от таких проблем-резервное копирование.Вы можете создать резервную копию директории Git'а с помощью клона или просто с помощью cp,tar или любого другого механизма резервного копирования.</target>
        </trans-unit>
        <trans-unit id="eb17679ed2c14d3eecb0f1bd83c98beea1f4bea4" translate="yes" xml:space="preserve">
          <source>The first format is what gets used when &lt;code&gt;--stage&lt;/code&gt; is omitted or is not &lt;code&gt;--stage=all&lt;/code&gt;. The field tempname is the temporary file name holding the file content and path is the tracked path name in the index. Only the requested entries are output.</source>
          <target state="translated">Первый формат используется, когда &lt;code&gt;--stage&lt;/code&gt; опущено или не &lt;code&gt;--stage=all&lt;/code&gt; . Поле tempname - это имя временного файла, содержащего содержимое файла, а path - это отслеживаемое имя пути в индексе. Выводятся только запрошенные записи.</target>
        </trans-unit>
        <trans-unit id="e7e26fcb00a95d796be86027e9776fd349443123" translate="yes" xml:space="preserve">
          <source>The first is simple and appropriate if you do not have secure storage available for a password. It is generally configured by adding this to your config:</source>
          <target state="translated">Первое просто и уместно,если у вас нет защищенного хранилища для пароля.Обычно он настраивается путем добавления его в конфигурацию:</target>
        </trans-unit>
        <trans-unit id="51f664b1e28dce07dd2c1ef3f2cc4ddb005556f4" translate="yes" xml:space="preserve">
          <source>The first issue is performance. Unlike any previous option, the &lt;code&gt;--simplify-merges&lt;/code&gt; option requires walking the entire commit history before returning a single result. This can make the option difficult to use for very large repositories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561e4f0c34cc864db97b2078e570c6b7cf2ee83d" translate="yes" xml:space="preserve">
          <source>The first line of the input feeds 0 as the mode to remove the path; the SHA-1 does not matter as long as it is well formatted. Then the second and third line feeds stage 1 and stage 2 entries for that path. After the above, we would end up with this:</source>
          <target state="translated">Первая строка входного сигнала 0 в качестве режима удаления пути;SHA-1 не имеет значения,пока он хорошо отформатирован.Затем вторая и третья строка передает для этого пути записи стадии 1 и стадии 2.После всего вышесказанного мы бы закончили на этом:</target>
        </trans-unit>
        <trans-unit id="d7a467221d570ce5d2e2454d168c252049fa7e64" translate="yes" xml:space="preserve">
          <source>The first number is the number of objects which are kept in individual files. The second is the amount of space taken up by those &quot;loose&quot; objects.</source>
          <target state="translated">Первое число-это количество объектов,которые хранятся в отдельных файлах.Второе число-количество места,занимаемого этими &quot;свободными&quot; объектами.</target>
        </trans-unit>
        <trans-unit id="a3a16231598a15324fe96a0d30a2003f1c762045" translate="yes" xml:space="preserve">
          <source>The first paragraph of the message, which typically is a single line, is taken as the &quot;subject&quot; of the commit or the tag message. Instead of &lt;code&gt;contents:subject&lt;/code&gt;, field &lt;code&gt;subject&lt;/code&gt; can also be used to obtain same results. &lt;code&gt;:sanitize&lt;/code&gt; can be appended to &lt;code&gt;subject&lt;/code&gt; for subject line suitable for filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1517f019c895db91a3158888218e464c0e667ed4" translate="yes" xml:space="preserve">
          <source>The first parameter passed to the hook is the indicator for the working directory being updated. &quot;1&quot; meaning working directory was updated or &quot;0&quot; when the working directory was not updated.</source>
          <target state="translated">Первым параметром,передаваемым на крючок,является индикатор обновляемой рабочей директории.&quot;1&quot; означает,что рабочий каталог был обновлен или &quot;0&quot;-когда рабочий каталог не обновлялся.</target>
        </trans-unit>
        <trans-unit id="69f4b05a4b19ebccc10062a19a78b72d37ff6b60" translate="yes" xml:space="preserve">
          <source>The first rule takes precedence in the case of a single &amp;lt;commit&amp;gt;. To apply the second rule, i.e., format everything since the beginning of history up until &amp;lt;commit&amp;gt;, use the &lt;code&gt;--root&lt;/code&gt; option: &lt;code&gt;git format-patch
--root &amp;lt;commit&amp;gt;&lt;/code&gt;. If you want to format only &amp;lt;commit&amp;gt; itself, you can do this with &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Первое правило имеет приоритет в случае единственного &amp;lt;commit&amp;gt;. Чтобы применить второе правило, то есть отформатировать все с начала истории до &amp;lt;commit&amp;gt;, используйте параметр &lt;code&gt;--root&lt;/code&gt; : &lt;code&gt;git format-patch --root &amp;lt;commit&amp;gt;&lt;/code&gt; . Если вы хотите отформатировать только сам &amp;lt;commit&amp;gt;, вы можете сделать это с помощью &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="088dfc95ab36375e45956a12e0a84d20b54cd1e3" translate="yes" xml:space="preserve">
          <source>The first step is trivial: when you want to tell Git about any changes to your working tree, you use the &lt;code&gt;git update-index&lt;/code&gt; program. That program normally just takes a list of filenames you want to update, but to avoid trivial mistakes, it refuses to add new entries to the index (or remove existing ones) unless you explicitly tell it that you&amp;rsquo;re adding a new entry with the &lt;code&gt;--add&lt;/code&gt; flag (or removing an entry with the &lt;code&gt;--remove&lt;/code&gt;) flag.</source>
          <target state="translated">Первый шаг тривиален: когда вы хотите сообщить Git о любых изменениях в вашем рабочем дереве, вы используете программу &lt;code&gt;git update-index&lt;/code&gt; . Эта программа обычно просто берет список имен файлов, которые вы хотите обновить, но, чтобы избежать тривиальных ошибок, она отказывается добавлять новые записи в индекс (или удалять существующие), если вы явно не укажете, что добавляете новую запись с Флаг &lt;code&gt;--add&lt;/code&gt; (или удаление записи с флагом &lt;code&gt;--remove&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a1763915dd6826ebefd6dfcb3fd9fb79e61ff2f7" translate="yes" xml:space="preserve">
          <source>The first time that a commit shows up in the stream, it has various other information about it printed out with a one-word tag at the beginning of each line describing the extra commit information (author, email, committer, dates, summary, etc.).</source>
          <target state="translated">В первый раз,когда коммит появляется в потоке,он имеет различную другую информацию о нём,распечатанную с меткой из одного слова в начале каждой строки,описывающей дополнительную информацию о коммите (автор,электронная почта,коммиттер,даты,резюме и т.д.).</target>
        </trans-unit>
        <trans-unit id="33e2d00ff1c333999b37d340bc5ae3e8a3bfd826" translate="yes" xml:space="preserve">
          <source>The first time you run it, you will be prompted for your credentials. Enter the app-specific or your regular password as appropriate. If you have credential helper configured (see &lt;a href=&quot;git-credential&quot;&gt;git-credential[1]&lt;/a&gt;), the password will be saved in the credential store so you won&amp;rsquo;t have to type it the next time.</source>
          <target state="translated">При первом запуске вам будет предложено ввести учетные данные. Введите пароль для конкретного приложения или свой обычный пароль. Если у вас настроен помощник по &lt;a href=&quot;git-credential&quot;&gt;учетным&lt;/a&gt; данным (см. Git-credential [1] ), пароль будет сохранен в хранилище учетных данных, поэтому вам не придется вводить его в следующий раз.</target>
        </trans-unit>
        <trans-unit id="1c77b9db9c00c5ba7e83e0fb24758e48237c23ee" translate="yes" xml:space="preserve">
          <source>The first two lines indicate that it is showing the two branches with the titles of their top-of-the-tree commits, you are currently on &lt;code&gt;master&lt;/code&gt; branch (notice the asterisk &lt;code&gt;*&lt;/code&gt; character), and the first column for the later output lines is used to show commits contained in the &lt;code&gt;master&lt;/code&gt; branch, and the second column for the &lt;code&gt;mybranch&lt;/code&gt; branch. Three commits are shown along with their titles. All of them have non blank characters in the first column (&lt;code&gt;*&lt;/code&gt; shows an ordinary commit on the current branch, &lt;code&gt;-&lt;/code&gt; is a merge commit), which means they are now part of the &lt;code&gt;master&lt;/code&gt; branch. Only the &quot;Some work&quot; commit has the plus &lt;code&gt;+&lt;/code&gt; character in the second column, because &lt;code&gt;mybranch&lt;/code&gt; has not been merged to incorporate these commits from the master branch. The string inside brackets before the commit log message is a short name you can use to name the commit. In the above example, &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;mybranch&lt;/code&gt; are branch heads. &lt;code&gt;master^&lt;/code&gt; is the first parent of &lt;code&gt;master&lt;/code&gt; branch head. Please see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; if you want to see more complex cases.</source>
          <target state="translated">Первые две строки указывают на то, что он показывает две ветви с заголовками их коммитов на вершине дерева, вы в настоящее время находитесь на &lt;code&gt;master&lt;/code&gt; ветке (обратите внимание на символ звездочки &lt;code&gt;*&lt;/code&gt; ), а первый столбец для последующих выходных строк - используется для отображения коммитов, содержащихся в &lt;code&gt;master&lt;/code&gt; ветке, и второй столбец для ветки &lt;code&gt;mybranch&lt;/code&gt; . Показаны три коммита с их названиями. Все они имеют непустые символы в первом столбце ( &lt;code&gt;*&lt;/code&gt; показывает обычную фиксацию в текущей ветке, &lt;code&gt;-&lt;/code&gt; это фиксация слияния), что означает, что теперь они являются частью &lt;code&gt;master&lt;/code&gt; ветки. Только коммит &quot;Some work&quot; имеет плюс &lt;code&gt;+&lt;/code&gt; во втором столбце, потому что &lt;code&gt;mybranch&lt;/code&gt; не был объединен для включения этих коммитов из основной ветки. Строка в скобках перед сообщением журнала фиксации - это короткое имя, которое можно использовать для названия фиксации. В приведенном выше примере &lt;code&gt;master&lt;/code&gt; и &lt;code&gt;mybranch&lt;/code&gt; являются головками веток. &lt;code&gt;master^&lt;/code&gt; - это первый родительский элемент &lt;code&gt;master&lt;/code&gt; ветки. Пожалуйста, &lt;a href=&quot;gitrevisions&quot;&gt;прочтите gitrevisions [7],&lt;/a&gt; если вы хотите увидеть более сложные случаи.</target>
        </trans-unit>
        <trans-unit id="6b2c923c8cb34a6329089d3ed63e2b76d6f7ceed" translate="yes" xml:space="preserve">
          <source>The folder to drop the mails into, which is typically the Drafts folder. For example: &quot;INBOX.Drafts&quot;, &quot;INBOX/Drafts&quot; or &quot;[Gmail]/Drafts&quot;. Required.</source>
          <target state="translated">Папка для пересылки писем,в которую обычно помещается папка Drafts (Черновики).Например:&quot;INBOX.Drafts&quot;,&quot;INBOX/Drafts&quot; или &quot;[Gmail]/Drafts&quot;.Требуется.</target>
        </trans-unit>
        <trans-unit id="396ef1fe12b6dc07f4e5a4f66f87333df9fb56e3" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;update&lt;/code&gt; procedures are only available via the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable:</source>
          <target state="translated">Следующие процедуры &lt;code&gt;update&lt;/code&gt; доступны только через переменную конфигурации &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="109e44e80a38f6553ddae4455bbabc5ec0d98180" translate="yes" xml:space="preserve">
          <source>The following Thunderbird extensions are needed: AboutConfig from &lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http://aboutconfig.mozdev.org/&lt;/a&gt; and External Editor from &lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8&lt;/a&gt;</source>
          <target state="translated">Необходимы следующие расширения Thunderbird: AboutConfig из &lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http://aboutconfig.mozdev.org/&lt;/a&gt; и External Editor из &lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f6722fafbaf6d78a6b809eec36e0605e28b20857" translate="yes" xml:space="preserve">
          <source>The following are helper commands used by the above; end users typically do not use them directly.</source>
          <target state="translated">Ниже приведены вспомогательные команды,используемые выше;конечные пользователи обычно не используют их напрямую.</target>
        </trans-unit>
        <trans-unit id="e785808b3cacaeabb63607758cc61e3471a646e6" translate="yes" xml:space="preserve">
          <source>The following browsers (or commands) are currently supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e10909a1942dd56a826033bd880f2f38314517d" translate="yes" xml:space="preserve">
          <source>The following command switches to the &quot;master&quot; branch:</source>
          <target state="translated">Следующая команда переключается на ветвь &quot;Ведущий&quot;:</target>
        </trans-unit>
        <trans-unit id="7a4f4c25f3029fcde1d4a38239fa9b13c5887156" translate="yes" xml:space="preserve">
          <source>The following command-line options change import semantics and may therefore not be passed as option:</source>
          <target state="translated">Следующие опции командной строки изменяют семантику импорта и поэтому могут не передаваться как опция:</target>
        </trans-unit>
        <trans-unit id="932cde1c301ce345d40b274a1f81ff3e5be711e6" translate="yes" xml:space="preserve">
          <source>The following command-specific comments apply:</source>
          <target state="translated">Действуют следующие комментарии к конкретным командам:</target>
        </trans-unit>
        <trans-unit id="d6f2de10386ef19748ad0fa0931b3359b3969227" translate="yes" xml:space="preserve">
          <source>The following config settings can be used to modify &lt;code&gt;git p4&lt;/code&gt; behavior. They all are in the &lt;code&gt;git-p4&lt;/code&gt; section.</source>
          <target state="translated">Следующие настройки конфигурации можно использовать для изменения поведения &lt;code&gt;git p4&lt;/code&gt; . Все они находятся в разделе &lt;code&gt;git-p4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f68ee79cc1f0c0e26a0c766d89a6823644298bab" translate="yes" xml:space="preserve">
          <source>The following configuration variables tell gitweb where to find files. The values of these variables are paths on the filesystem.</source>
          <target state="translated">Следующие конфигурационные переменные сообщают gitweb,где искать файлы.Значения этих переменных-пути в файловой системе.</target>
        </trans-unit>
        <trans-unit id="446ebc694e2441273405a78869483ed3506272c8" translate="yes" xml:space="preserve">
          <source>The following date formats are supported. A frontend should select the format it will use for this import by passing the format name in the --date-format=&amp;lt;fmt&amp;gt; command-line option.</source>
          <target state="translated">Поддерживаются следующие форматы даты. Интерфейс должен выбрать формат, который он будет использовать для этого импорта, передав имя формата в параметре командной строки --date-format = &amp;lt;fmt&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="e77a52167245e31f57d9305063355588365e98e5" translate="yes" xml:space="preserve">
          <source>The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories.</source>
          <target state="translated">Следующее описание делит низкоуровневые команды на команды,которые управляют объектами (в репозитории,индексе и рабочем дереве),команды,которые опрашивают и сравнивают объекты,а также команды,которые перемещают объекты и ссылки между репозиториями.</target>
        </trans-unit>
        <trans-unit id="0ccfcc7705084a20c6fb8eba32c2c2f3d02467cc" translate="yes" xml:space="preserve">
          <source>The following documentation pages are guides about Git concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce90b7b29314319d9c33a8b52e106d84ec9670f" translate="yes" xml:space="preserve">
          <source>The following escape sequences (beside &lt;code&gt;\&quot;&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt;) are recognized: &lt;code&gt;\n&lt;/code&gt; for newline character (NL), &lt;code&gt;\t&lt;/code&gt; for horizontal tabulation (HT, TAB) and &lt;code&gt;\b&lt;/code&gt; for backspace (BS). Other char escape sequences (including octal escape sequences) are invalid.</source>
          <target state="translated">Распознаются следующие escape-последовательности (кроме &lt;code&gt;\&quot;&lt;/code&gt; и &lt;code&gt;\\&lt;/code&gt; ): &lt;code&gt;\n&lt;/code&gt; для символа новой строки (NL), &lt;code&gt;\t&lt;/code&gt; для горизонтальной табуляции (HT, TAB) и &lt;code&gt;\b&lt;/code&gt; для возврата на место (BS). Другие escape-последовательности char (включая восьмеричные escape-последовательности) недопустимы.</target>
        </trans-unit>
        <trans-unit id="11e92a0ce8b123a34278f747bf61153deb05c5a4" translate="yes" xml:space="preserve">
          <source>The following example shows three branches, &quot;master&quot;, &quot;fixes&quot; and &quot;mhf&quot;:</source>
          <target state="translated">В следующем примере показаны три ветви:&quot;ведущая&quot;,&quot;исправляет&quot; и &quot;мхф&quot;:</target>
        </trans-unit>
        <trans-unit id="4297ab330b843af6f1af2259ff9a055a87b6bf37" translate="yes" xml:space="preserve">
          <source>The following features from &amp;lsquo;svn log&amp;rsquo; are supported:</source>
          <target state="translated">Поддерживаются следующие функции из svn log:</target>
        </trans-unit>
        <trans-unit id="9b96392c24cd31061920293e2fd2511a8543969f" translate="yes" xml:space="preserve">
          <source>The following flags further affect the behavior when comparing commits (but not trees).</source>
          <target state="translated">Следующие флаги еще больше влияют на поведение при сравнении коммитов (но не деревьев).</target>
        </trans-unit>
        <trans-unit id="c98119f1eba9806e1383e47ef0aa9d751dbdff13" translate="yes" xml:space="preserve">
          <source>The following format are available:</source>
          <target state="translated">Доступен следующий формат:</target>
        </trans-unit>
        <trans-unit id="7e633b53438db1ba002f1e1e7fca5cd2fc86227f" translate="yes" xml:space="preserve">
          <source>The following information is captured automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25c21591a2ca83e23e48f87144d8a587685473b" translate="yes" xml:space="preserve">
          <source>The following information is requested from the user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f08fc55d496958a337ddcb6a67febfb89f85554" translate="yes" xml:space="preserve">
          <source>The following key/value pairs are common to all events:</source>
          <target state="translated">Следующие пары ключ/значение являются общими для всех событий:</target>
        </trans-unit>
        <trans-unit id="0a5e5ff367236dbd6bf5580d5af5e71ae090b770" translate="yes" xml:space="preserve">
          <source>The following options affect the way the simplification is performed:</source>
          <target state="translated">Следующие опции влияют на способ упрощения:</target>
        </trans-unit>
        <trans-unit id="d99d5d2882d3fb95fadc56a0416699f5b886386d" translate="yes" xml:space="preserve">
          <source>The following options are available in either location:</source>
          <target state="translated">Следующие варианты доступны в любом месте:</target>
        </trans-unit>
        <trans-unit id="6e9dd1ef0925dcf9e09b1e6e501e8d0360e77eba" translate="yes" xml:space="preserve">
          <source>The following options are defined and (under suitable circumstances) set by Git if the remote helper has the &lt;code&gt;option&lt;/code&gt; capability.</source>
          <target state="translated">Следующие параметры определены и (при подходящих обстоятельствах) установлены Git, если удаленный помощник имеет возможность &lt;code&gt;option&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad97d4ffb6c58a93bf3193a5402926d11d214aa1" translate="yes" xml:space="preserve">
          <source>The following options select the commits to be shown:</source>
          <target state="translated">Следующие опции выбирают показываемые фиксации:</target>
        </trans-unit>
        <trans-unit id="04bd1c24e8e494894e5123ce96e6c123a135b194" translate="yes" xml:space="preserve">
          <source>The following options:</source>
          <target state="translated">Следующие варианты:</target>
        </trans-unit>
        <trans-unit id="7b3b3b2ba3a3d71942fecd2cbccdbee3fd847246" translate="yes" xml:space="preserve">
          <source>The following sequence attempts to backport a patch, bails out because the code the patch applies to has changed too much, and then tries again, this time exercising more care about matching up context lines.</source>
          <target state="translated">Следующая последовательность пытается перенести заплатку обратно,отступает,потому что код,к которому применяется заплатка,слишком сильно изменился,а затем пытается снова,на этот раз проявляя большую осторожность в сопоставлении строк контекста.</target>
        </trans-unit>
        <trans-unit id="0fb6c7c3c1a2e6361aa6d0f3ddafd309ebc6378c" translate="yes" xml:space="preserve">
          <source>The following sequence checks out the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes &lt;code&gt;hello.c&lt;/code&gt; by mistake, and gets it back from the index.</source>
          <target state="translated">Следующая последовательность проверяет &lt;code&gt;master&lt;/code&gt; ветвь, возвращает &lt;code&gt;Makefile&lt;/code&gt; к двум ревизиям, по ошибке удаляет &lt;code&gt;hello.c&lt;/code&gt; и возвращает его из индекса.</target>
        </trans-unit>
        <trans-unit id="b8a40037f7e020ad1f156eb7f08942ca8112c080" translate="yes" xml:space="preserve">
          <source>The following sequence switches to the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes hello.c by mistake, and gets it back from the index.</source>
          <target state="translated">Следующая последовательность переключает на &lt;code&gt;master&lt;/code&gt; ветвь, возвращает &lt;code&gt;Makefile&lt;/code&gt; к двум ревизиям, по ошибке удаляет hello.c и возвращает его из индекса.</target>
        </trans-unit>
        <trans-unit id="75477915a08ed3777518303fe3302c5a880167a8" translate="yes" xml:space="preserve">
          <source>The following sequences have a special meaning:</source>
          <target state="translated">Следующие последовательности имеют особое значение:</target>
        </trans-unit>
        <trans-unit id="b07d72a39fdd44876a293ab8f917fa6a1014bd8c" translate="yes" xml:space="preserve">
          <source>The following subcommands are available:</source>
          <target state="translated">Доступны следующие подкоманды:</target>
        </trans-unit>
        <trans-unit id="55332124e1bbf00265c49abce68b19cb8696bb39" translate="yes" xml:space="preserve">
          <source>The following syntaxes may be used with them:</source>
          <target state="translated">С ними можно использовать следующие синтаксисы:</target>
        </trans-unit>
        <trans-unit id="f9c489d8b69bf82a63ff4a237dd2bd772b8fb351" translate="yes" xml:space="preserve">
          <source>The following tables show what happens when there are unmerged entries:</source>
          <target state="translated">В следующих таблицах показано,что происходит при наличии неупорядоченных записей:</target>
        </trans-unit>
        <trans-unit id="3cc98c85c7406728df501340aea8c7fdc3f04d78" translate="yes" xml:space="preserve">
          <source>The following tips and tricks have been collected from various users of fast-import, and are offered here as suggestions.</source>
          <target state="translated">Следующие советы и хитрости были собраны от различных пользователей быстрого импорта,и предлагаются здесь в качестве предложений.</target>
        </trans-unit>
        <trans-unit id="177a564b8e3982405afb3b516ab4bbb5063d1ee7" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; omits blobs larger than n bytes or units. n may be zero. The suffixes k, m, and g can be used to name units in KiB, MiB, or GiB. For example, &lt;code&gt;blob:limit=1k&lt;/code&gt; is the same as &lt;code&gt;blob:limit=1024&lt;/code&gt;.</source>
          <target state="translated">Форма &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; пропускает большие двоичные объекты размером более n байтов или единиц. n может быть нулевым. Суффиксы k, m и g могут использоваться для обозначения единиц в KiB, MiB или GiB. Например, &lt;code&gt;blob:limit=1k&lt;/code&gt; совпадает с &lt;code&gt;blob:limit=1024&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94349f8d4383b34d05a696da3b05af67f12eec03" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:none&lt;/code&gt; omits all blobs.</source>
          <target state="translated">Форма &lt;code&gt;--filter=blob:none&lt;/code&gt; пропускает все капли.</target>
        </trans-unit>
        <trans-unit id="39c705af761382dd23f074438f9b0e646bf492af" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; can also be used to combined several filters, but this is harder than just repeating the &lt;code&gt;--filter&lt;/code&gt; flag and is usually not necessary. Filters are joined by &lt;code&gt;+&lt;/code&gt; and individual filters are %-encoded (i.e. URL-encoded). Besides the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; characters, the following characters are reserved and also must be encoded: &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt;&lt;code&gt;'`&lt;/code&gt; as well as all characters with ASCII code &amp;lt;= &lt;code&gt;0x20&lt;/code&gt;, which includes space and newline.</source>
          <target state="translated">Форма &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; также может использоваться для объединения нескольких фильтров, но это сложнее, чем просто повторение флага &lt;code&gt;--filter&lt;/code&gt; , и обычно в этом нет необходимости. Фильтры объединяются знаком &lt;code&gt;+&lt;/code&gt; , а отдельные фильтры кодируются% (т. Е. Кодируются URL). Помимо символов &lt;code&gt;+&lt;/code&gt; и &lt;code&gt;%&lt;/code&gt; , следующие символы зарезервированы и также должны быть закодированы: &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt; &lt;code&gt;'`&lt;/code&gt; ,А также все символы с кодом ASCII &amp;lt; = &lt;code&gt;0x20&lt;/code&gt; , который включает пробел и новую строку.</target>
        </trans-unit>
        <trans-unit id="d52505ec75878146eb9054dceb4728d58b485513" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; uses a sparse-checkout specification contained in the blob (or blob-expression) &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; to omit blobs that would not be not required for a sparse checkout on the requested refs.</source>
          <target state="translated">Форма &lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; использует спецификацию sparse-checkout, содержащуюся в blob (или blob-expression) &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; , чтобы опустить капли, которые не требуются для разреженной проверки на запрашиваемые исх.</target>
        </trans-unit>
        <trans-unit id="ef46a11218e9457b2745a05e86c211527bd23b7c" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; omits all blobs and trees whose depth from the root tree is &amp;gt;= &amp;lt;depth&amp;gt; (minimum depth if an object is located at multiple depths in the commits traversed). &amp;lt;depth&amp;gt;=0 will not include any trees or blobs unless included explicitly in the command-line (or standard input when --stdin is used). &amp;lt;depth&amp;gt;=1 will include only the tree and blobs which are referenced directly by a commit reachable from &amp;lt;commit&amp;gt; or an explicitly-given object. &amp;lt;depth&amp;gt;=2 is like &amp;lt;depth&amp;gt;=1 while also including trees and blobs one more level removed from an explicitly-given commit or tree.</source>
          <target state="translated">Форма &lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; исключает все капли и деревья, глубина которых от корневого дерева&amp;gt; = &amp;lt;depth&amp;gt; (минимальная глубина, если объект расположен на нескольких глубинах в пройденных коммитах). &amp;lt;depth&amp;gt; = 0 не будет включать никакие деревья или капли, если они явно не включены в командную строку (или стандартный ввод, если используется --stdin). &amp;lt;depth&amp;gt; = 1 будет включать только дерево и большие двоичные объекты, на которые напрямую ссылается фиксация, доступная из &amp;lt;commit&amp;gt; или явно заданного объекта. &amp;lt;depth&amp;gt; = 2 похож на &amp;lt;depth&amp;gt; = 1, но вместе с тем включает деревья и капли, еще на один уровень, удаленный из явно заданного коммита или дерева.</target>
        </trans-unit>
        <trans-unit id="143c72f9a0abe1adb065cd1c00c0271a08c274c4" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-any&lt;/code&gt; will allow object traversal to continue if a missing object is encountered. Missing objects will silently be omitted from the results.</source>
          <target state="translated">Форма &lt;code&gt;--missing=allow-any&lt;/code&gt; позволит продолжить обход объекта, если обнаружен отсутствующий объект. Недостающие объекты будут автоматически исключены из результатов.</target>
        </trans-unit>
        <trans-unit id="bdde6c336c8ea83ffd865ad36b93358c59c8c01f" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-any&lt;/code&gt; will allow object traversal to continue if a missing object is encountered. No fetch of a missing object will occur. Missing objects will silently be omitted from the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac33b80327bef1bf98d899063defe39f6edf744" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. No fetch of a missing object will occur. An unexpected missing object will raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280716e3ccf86616960848b089fdadef81ba797d" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing object will raise an error.</source>
          <target state="translated">Форма &lt;code&gt;--missing=allow-promisor&lt;/code&gt; похожа на &lt;code&gt;allow-any&lt;/code&gt; , но позволяет продолжить обход объекта только для EXPECTED promisor отсутствующих объектов. Неожиданно отсутствующий объект вызовет ошибку.</target>
        </trans-unit>
        <trans-unit id="563d9e750d01dbe920d57035d16bed3d91b9aea6" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing objects will raise an error.</source>
          <target state="translated">Форма &lt;code&gt;--missing=allow-promisor&lt;/code&gt; похожа на &lt;code&gt;allow-any&lt;/code&gt; , но позволяет продолжить обход объекта только для EXPECTED promisor отсутствующих объектов. Неожиданно отсутствующие объекты вызовут ошибку.</target>
        </trans-unit>
        <trans-unit id="85974afd39adff2510445a34b40c988ae3340623" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that pack-objects stop with an error if a missing object is encountered. If the repository is a partial clone, an attempt to fetch missing objects will be made before declaring them missing. This is the default action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c618ed732782b866de4c7dcf716daa2ac64119" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that pack-objects stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">Форма &lt;code&gt;--missing=error&lt;/code&gt; запрашивает остановку пакетных объектов с ошибкой, если обнаружен отсутствующий объект. Это действие по умолчанию.</target>
        </trans-unit>
        <trans-unit id="2ed32158adb2f2f236ac5307d5ba7c30f0630796" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that rev-list stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">Форма &lt;code&gt;--missing=error&lt;/code&gt; запрашивает остановку списка rev-list с ошибкой, если обнаружен отсутствующий объект. Это действие по умолчанию.</target>
        </trans-unit>
        <trans-unit id="67e4b67693941fe412533d5210bde2a413de8fb1" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=print&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will also print a list of the missing objects. Object IDs are prefixed with a &amp;ldquo;?&amp;rdquo; character.</source>
          <target state="translated">Форма &lt;code&gt;--missing=print&lt;/code&gt; похожа на &lt;code&gt;allow-any&lt;/code&gt; , но также выводит список отсутствующих объектов. Перед идентификаторами объектов стоит знак &amp;laquo;?&amp;raquo;. персонаж.</target>
        </trans-unit>
        <trans-unit id="09994cb2384da5eddbe0ae0a9a1ceca76d8c8bcc" translate="yes" xml:space="preserve">
          <source>The format of a &amp;lt;refspec&amp;gt; parameter is an optional plus &lt;code&gt;+&lt;/code&gt;, followed by the source &amp;lt;src&amp;gt;, followed by a colon &lt;code&gt;:&lt;/code&gt;, followed by the destination ref &amp;lt;dst&amp;gt;. The colon can be omitted when &amp;lt;dst&amp;gt; is empty. &amp;lt;src&amp;gt; is typically a ref, but it can also be a fully spelled hex object name.</source>
          <target state="translated">Формат параметра &amp;lt;refspec&amp;gt; - необязательный плюс &lt;code&gt;+&lt;/code&gt; , за которым следует исходный &amp;lt;src&amp;gt;, за которым следует двоеточие &lt;code&gt;:&lt;/code&gt; , за которым следует ссылка назначения &amp;lt;dst&amp;gt;. Если &amp;lt;dst&amp;gt; пуст, двоеточие можно опустить. &amp;lt;src&amp;gt; обычно является ссылкой, но также может быть полностью записанным шестнадцатеричным именем объекта.</target>
        </trans-unit>
        <trans-unit id="05c09db4c870e826391cf6ebde5a8cc33d2791f6" translate="yes" xml:space="preserve">
          <source>The format of these files is username followed by the encrypted password, for example:</source>
          <target state="translated">Формат этих файлов-имя пользователя и зашифрованный пароль:</target>
        </trans-unit>
        <trans-unit id="65670970ee487305077ce344ca1fb6c36a889cee" translate="yes" xml:space="preserve">
          <source>The former lets your shell expand the fileglob, and you are asking the dot-C files in your working tree to be overwritten with the version in the index. The latter passes the &lt;code&gt;*.c&lt;/code&gt; to Git, and you are asking the paths in the index that match the pattern to be checked out to your working tree. After running &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt;, you will &lt;code&gt;not&lt;/code&gt; see &lt;code&gt;hello.c&lt;/code&gt; in your working tree with the former, but with the latter you will.</source>
          <target state="translated">Первый позволяет вашей оболочке расширять файловый глобус, и вы запрашиваете, чтобы файлы dot-C в вашем рабочем дереве были перезаписаны версией в индексе. Последний передает &lt;code&gt;*.c&lt;/code&gt; в Git, и вы запрашиваете пути в индексе, соответствующие шаблону, для извлечения в ваше рабочее дерево. После запуска &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt; , вы &lt;code&gt;not&lt;/code&gt; увидите &lt;code&gt;hello.c&lt;/code&gt; в своем рабочем дереве с первым, но со вторым вы увидите.</target>
        </trans-unit>
        <trans-unit id="b363974f459c2a2b237a919650aa9dc9f75161d2" translate="yes" xml:space="preserve">
          <source>The frontend must specify the number of bytes of data.</source>
          <target state="translated">Во фронтенде должно быть указано количество байт данных.</target>
        </trans-unit>
        <trans-unit id="23957db0f038e6b4263285c2923ad6ce72a805ca" translate="yes" xml:space="preserve">
          <source>The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</source>
          <target state="translated">Полное имя объекта SHA-1 (40-байтовая шестнадцатеричная строка),или ведущая подстрока,уникальная в репозитории.Например,dae86e1950b1277e545cee180551750029cfe735 и dae86e имена одного и того же объекта коммита,если в вашем репозитории нет другого объекта,чье имя начинается с dae86e.</target>
        </trans-unit>
        <trans-unit id="ce332106cb9361add9aaf31aea030a425aeed7be" translate="yes" xml:space="preserve">
          <source>The full name is occasionally useful if, for example, there ever exists a tag and a branch with the same name.</source>
          <target state="translated">Полное имя иногда полезно,если,например,когда-нибудь существует тег и ветка с таким же именем.</target>
        </trans-unit>
        <trans-unit id="d24187cae372eb76b2a26570ccfd9def8c8abdf6" translate="yes" xml:space="preserve">
          <source>The full pattern set allows for arbitrary pattern matches and complicated inclusion/exclusion rules. These can result in O(N*M) pattern matches when updating the index, where N is the number of patterns and M is the number of paths in the index. To combat this performance issue, a more restricted pattern set is allowed when &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; is enabled.</source>
          <target state="translated">Полный набор шаблонов допускает произвольные совпадения шаблонов и сложные правила включения / исключения. Это может привести к совпадению шаблонов O (N * M) при обновлении индекса, где N - количество шаблонов, а M - количество путей в индексе. Чтобы &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; эту проблему с производительностью, можно использовать более ограниченный набор шаблонов, когда включен core.spareCheckoutCone .</target>
        </trans-unit>
        <trans-unit id="271f7ad4b6b86f815e34a99cf6372d6f7edf455d" translate="yes" xml:space="preserve">
          <source>The full pattern set allows for arbitrary pattern matches and complicated inclusion/exclusion rules. These can result in O(N*M) pattern matches when updating the index, where N is the number of patterns and M is the number of paths in the index. To combat this performance issue, a more restricted pattern set is allowed when &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3e98918a57498bee35c9ef416c5932bb448c1f" translate="yes" xml:space="preserve">
          <source>The full syntax for a p4 view is documented in &lt;code&gt;p4 help views&lt;/code&gt;. &lt;code&gt;git p4&lt;/code&gt; knows only a subset of the view syntax. It understands multi-line mappings, overlays with &lt;code&gt;+&lt;/code&gt;, exclusions with &lt;code&gt;-&lt;/code&gt; and double-quotes around whitespace. Of the possible wildcards, &lt;code&gt;git p4&lt;/code&gt; only handles &lt;code&gt;&amp;hellip;​&lt;/code&gt;, and only when it is at the end of the path. &lt;code&gt;git p4&lt;/code&gt; will complain if it encounters an unhandled wildcard.</source>
          <target state="translated">Полный синтаксис представления p4 задокументирован в представлениях справки &lt;code&gt;p4 help views&lt;/code&gt; . &lt;code&gt;git p4&lt;/code&gt; знает только подмножество синтаксиса представления. Он понимает многострочные сопоставления, наложения с &lt;code&gt;+&lt;/code&gt; , исключения с &lt;code&gt;-&lt;/code&gt; и двойные кавычки вокруг пробелов. Из возможных масок, &lt;code&gt;git p4&lt;/code&gt; только ручка &lt;code&gt;&amp;hellip;​&lt;/code&gt; и только тогда , когда он находится в конце пути. &lt;code&gt;git p4&lt;/code&gt; будет жаловаться, если встретит необработанный подстановочный знак.</target>
        </trans-unit>
        <trans-unit id="18d1519c9cf5420b92be3f082cd6f0aa89c3d260" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;skip_commit&lt;/code&gt; is defined as follows:</source>
          <target state="translated">Функция &lt;code&gt;skip_commit&lt;/code&gt; определяется следующим образом:</target>
        </trans-unit>
        <trans-unit id="af7dd50b5e9b3d3ec2ae519f399794527002dc23" translate="yes" xml:space="preserve">
          <source>The functions defined by the Trace2 API are declared and documented in &lt;code&gt;trace2.h&lt;/code&gt;. It defines the API functions and wrapper macros for Trace2.</source>
          <target state="translated">Функции, определенные API Trace2, объявлены и задокументированы в &lt;code&gt;trace2.h&lt;/code&gt; . Он определяет функции API и макросы оболочки для Trace2.</target>
        </trans-unit>
        <trans-unit id="e5521fd46bed9d589b56b651d5f3ef04e9a3b2a8" translate="yes" xml:space="preserve">
          <source>The future of bisecting</source>
          <target state="translated">Будущее биссекции</target>
        </trans-unit>
        <trans-unit id="2aa4427c10c7d5c13ef7bbb9898f5fea28090dd1" translate="yes" xml:space="preserve">
          <source>The general idea is this: we generate a cost matrix between the commits in both commit ranges, then solve the least-cost assignment.</source>
          <target state="translated">Общая идея заключается в следующем:мы генерируем матрицу стоимости между коммитами в обоих диапазонах коммитов,затем решаем наименее затратное задание.</target>
        </trans-unit>
        <trans-unit id="0339eef2339eb8367ea8564b9ff6721cd9dea407" translate="yes" xml:space="preserve">
          <source>The git commit is created relative to the current origin revision (HEAD by default). A parent commit is created based on the origin, and then the unshelve commit is created based on that.</source>
          <target state="translated">Фиксация git'а создаётся относительно текущей ревизии источника (HEAD по умолчанию).Родительская коммиссия создаётся на основе исходной ревизии,а затем на основе неразборчивой коммисии.</target>
        </trans-unit>
        <trans-unit id="a5bbcd1beb35762403be84a14e62e0a4eb5d5226" translate="yes" xml:space="preserve">
          <source>The git object database</source>
          <target state="translated">База данных git-объектов</target>
        </trans-unit>
        <trans-unit id="80d403b9b878573aec88e9c705123dc6feedf769" translate="yes" xml:space="preserve">
          <source>The gitweb CGI script for viewing Git repositories over the web uses a perl script fragment as its configuration file. You can set variables using &quot;&lt;code&gt;our $variable = value&lt;/code&gt;&quot;; text from a &quot;#&quot; character until the end of a line is ignored. See &lt;strong&gt;perlsyn&lt;/strong&gt;(1) for details.</source>
          <target state="translated">Сценарий Gitweb CGI для просмотра репозиториев Git через Интернет использует фрагмент сценария Perl в качестве файла конфигурации. Вы можете установить переменные, используя &quot; &lt;code&gt;our $variable = value&lt;/code&gt; &quot;; текст от символа &quot;#&quot; до конца строки игнорируется. Подробности смотрите в &lt;strong&gt;perlsyn&lt;/strong&gt; (1).</target>
        </trans-unit>
        <trans-unit id="a1a6c42c76028a67bf39dd75b77a2307812be731" translate="yes" xml:space="preserve">
          <source>The gitweb cgi script provides users an easy way to browse your project&amp;rsquo;s revisions, file contents and logs without having to install Git. Features like RSS/Atom feeds and blame/annotation details may optionally be enabled.</source>
          <target state="translated">Сценарий gitweb cgi предоставляет пользователям простой способ просматривать редакции вашего проекта, содержимое файлов и журналы без установки Git. При желании могут быть включены такие функции, как каналы RSS / Atom и сведения об авторстве / аннотации.</target>
        </trans-unit>
        <trans-unit id="eefcb42be74db518327d9c82beb9a165d884846e" translate="yes" xml:space="preserve">
          <source>The gitweb features that are configurable via &lt;code&gt;%feature&lt;/code&gt; hash are listed below. This should be a complete list, but ultimately the authoritative and complete list is in gitweb.cgi source code, with features described in the comments.</source>
          <target state="translated">Ниже перечислены функции gitweb, которые можно настроить с помощью хэша &lt;code&gt;%feature&lt;/code&gt; . Это должен быть полный список, но в конечном итоге авторитетный и полный список находится в исходном коде gitweb.cgi с функциями, описанными в комментариях.</target>
        </trans-unit>
        <trans-unit id="bee84a897df9efb668b9aee969a1e660ed8af0a4" translate="yes" xml:space="preserve">
          <source>The gitweb.extraBranchRefs is actually a multi-valued configuration variable, so following example is also correct and the result is the same as of the snippet above:</source>
          <target state="translated">gitweb.extraBranchRefs на самом деле является многозначной конфигурационной переменной,поэтому следующий пример также корректен,и результат такой же,как и в приведённом выше фрагменте:</target>
        </trans-unit>
        <trans-unit id="ab9a5e4603e46ba18e0a4c5efe881c7ac8def35b" translate="yes" xml:space="preserve">
          <source>The given URL is recorded into &lt;code&gt;.gitmodules&lt;/code&gt; for use by subsequent users cloning the superproject. If the URL is given relative to the superproject&amp;rsquo;s repository, the presumption is the superproject and submodule repositories will be kept together in the same relative location, and only the superproject&amp;rsquo;s URL needs to be provided. git-submodule will correctly locate the submodule using the relative URL in &lt;code&gt;.gitmodules&lt;/code&gt;.</source>
          <target state="translated">Данный URL-адрес записывается в &lt;code&gt;.gitmodules&lt;/code&gt; для использования последующими пользователями, клонирующими суперпроект. Если URL-адрес указан относительно репозитория суперпроекта, предполагается, что репозитории суперпроекта и подмодулей будут храниться вместе в одном и том же относительном местоположении, и необходимо указать только URL-адрес суперпроекта. git-submodule правильно найдет подмодуль, используя относительный URL-адрес в &lt;code&gt;.gitmodules&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1190edfebfe2406cf333713a0e461379865b033f" translate="yes" xml:space="preserve">
          <source>The goal of this tutorial is to introduce two fundamental pieces of Git&amp;rsquo;s architecture&amp;mdash;​the object database and the index file&amp;mdash;​and to provide the reader with everything necessary to understand the rest of the Git documentation.</source>
          <target state="translated">Цель этого руководства - познакомить с двумя фундаментальными частями архитектуры Git - объектной базой данных и индексным файлом - и предоставить читателю все необходимое для понимания остальной части документации Git.</target>
        </trans-unit>
        <trans-unit id="880a291c14c1099392ebdd9b73ec08c93b7220d1" translate="yes" xml:space="preserve">
          <source>The hard case</source>
          <target state="translated">Твердый чехол</target>
        </trans-unit>
        <trans-unit id="71b4cfb50bd8944708a6926991c13ef0bfbac07d" translate="yes" xml:space="preserve">
          <source>The hashes are 40 hex characters long. When Git upgrades to a new hash algorithm, this might need to be updated. (It should match whatever index-pack outputs after &quot;pack\t&quot; or &quot;keep\t&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2a187748caf680c0e66173f60176ec60ea02ab" translate="yes" xml:space="preserve">
          <source>The header consists of 256 4-byte network byte order integers. N-th entry of this table records the number of objects in the corresponding pack, the first byte of whose object name is less than or equal to N. This is called the &lt;code&gt;first-level fan-out&lt;/code&gt; table.</source>
          <target state="translated">Заголовок состоит из 256 4-байтовых целых чисел сетевого порядка байтов. N-я запись этой таблицы записывает количество объектов в соответствующем пакете, первый байт имени объекта которого меньше или равен N. Это называется таблицей &lt;code&gt;first-level fan-out&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0e2dd021a6a8dc94bfb40a62a04904f17b8f1dab" translate="yes" xml:space="preserve">
          <source>The header is followed by number of object entries, each of which looks like this:</source>
          <target state="translated">За заголовком следует количество записей объекта,каждая из которых выглядит так:</target>
        </trans-unit>
        <trans-unit id="10743ced5c1563e940127b440ba806235a399ac8" translate="yes" xml:space="preserve">
          <source>The header is followed by sorted 24-byte entries, one entry per object in the pack. Each entry is:</source>
          <target state="translated">За заголовком следуют отсортированные 24-байтовые записи,по одной записи на объект в пакете.Каждая запись:</target>
        </trans-unit>
        <trans-unit id="03910dca7f1c0af7f3d0e6986f455aceaec86f05" translate="yes" xml:space="preserve">
          <source>The header of the email is configurable via command-line options. If not specified on the command line, the user will be prompted with a ReadLine enabled interface to provide the necessary information.</source>
          <target state="translated">Заголовок электронного письма настраивается с помощью опций командной строки.Если он не указан в командной строке,пользователю будет предложено предоставить необходимую информацию с помощью интерфейса ReadLine.</target>
        </trans-unit>
        <trans-unit id="53d28fdf80ee055eff1005765033449c285d4f79" translate="yes" xml:space="preserve">
          <source>The hook always runs after the automatic note copying (see &quot;notes.rewrite.&amp;lt;command&amp;gt;&quot; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) has happened, and thus has access to these notes.</source>
          <target state="translated">Хук всегда запускается после того, как произошло автоматическое копирование заметок (см. &amp;laquo;Notes.rewrite. &amp;lt;command&amp;gt;&amp;raquo; в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; ), и, таким образом, имеет доступ к этим заметкам.</target>
        </trans-unit>
        <trans-unit id="55997df4465d2b793292e1300e70ff2f9e1a3588" translate="yes" xml:space="preserve">
          <source>The hook executes once for each ref to be updated, and takes three parameters:</source>
          <target state="translated">Крюк выполняет один раз для каждой ссылки,которая будет обновлена,и принимает три параметра:</target>
        </trans-unit>
        <trans-unit id="7918f32150a1e75fa34aeef2474d601c36b3a718" translate="yes" xml:space="preserve">
          <source>The hook is allowed to edit the changelist file and can be used to normalize the text into some project standard format. It can also be used to refuse the Submit after inspect the message file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6422fdbff7a8b80abf6e11b9c756369981239875" translate="yes" xml:space="preserve">
          <source>The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.</source>
          <target state="translated">Крючок позволяет редактировать файл сообщения на месте,и может быть использован для нормализации сообщения в каком-либо стандартном формате проекта.Он также может быть использован для отказа от фиксации после просмотра файла сообщения.</target>
        </trans-unit>
        <trans-unit id="7dd8785c8f6fdd3a8a45999afa9f773631b556f1" translate="yes" xml:space="preserve">
          <source>The hook receives a list of the rewritten commits on stdin, in the format</source>
          <target state="translated">Крюк получает список переписанных коммитов на stdin,в формате</target>
        </trans-unit>
        <trans-unit id="ffb0d43685532aa46e893849969758ab23367451" translate="yes" xml:space="preserve">
          <source>The hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.</source>
          <target state="translated">Крюк получает коммит,с помощью которого будет обновляться кончик текущей ветки.Он может выйти с ненулевым статусом,чтобы отказать в нажатии (при этом он не должен изменять ни индекс,ни рабочее дерево).Или же он может внести любые необходимые изменения в рабочее дерево и в индекс,чтобы привести их в желаемое состояние при обновлении вершины текущей ветки до нового коммита,и выйти с нулевым статусом.</target>
        </trans-unit>
        <trans-unit id="6e0236cadc345b5114c4c6984e7438ed153e1f2f" translate="yes" xml:space="preserve">
          <source>The hook should exit with non-zero status if it wants to disallow updating the named ref. Otherwise it should exit with zero.</source>
          <target state="translated">Крюк должен выйти с ненулевым статусом,если он хочет запретить обновление именованного справочника.В противном случае он должен выйти с нулем.</target>
        </trans-unit>
        <trans-unit id="9739d79c49b82b53238e48aeefee9c342d93a499" translate="yes" xml:space="preserve">
          <source>The hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.</source>
          <target state="translated">Крюк должен выводить в stdout список всех файлов в рабочей директории,которые могли измениться со времени запроса.Логика должна быть всеохватывающей,чтобы не пропустить никаких потенциальных изменений.Пути должны быть относительно корня рабочей директории и разделены одним NUL.</target>
        </trans-unit>
        <trans-unit id="726cd696e8b088103d80193483306d60860caef4" translate="yes" xml:space="preserve">
          <source>The hook takes exactly one argument, which is the current state the given reference transaction is in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022998a9843b7be307eb2d587f13704cf2ce86bd" translate="yes" xml:space="preserve">
          <source>The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:</source>
          <target state="translated">Горизонтальная линия истории A---Q принимается за первую родительскую линию каждого слияния.Коммиты:</target>
        </trans-unit>
        <trans-unit id="41f47ff55448de90533c1d6461f6a54aa470a338" translate="yes" xml:space="preserve">
          <source>The human-readable name used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;author.name&lt;/code&gt; configuration settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a50b3e42cc3505776fea766e525fbf7e68884e" translate="yes" xml:space="preserve">
          <source>The human-readable name used in the committer identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;committer.name&lt;/code&gt; configuration settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf0ebdfb4273a6fce7952dfa28834b6e411cd7f" translate="yes" xml:space="preserve">
          <source>The hypothetical proxy command entries actually have a postfix to discern what URL they apply to. Here is how to change the entry for kernel.org to &quot;ssh&quot;.</source>
          <target state="translated">Гипотетические записи команды прокси на самом деле имеют постфикс,чтобы определить,к какому URL они относятся.Вот как изменить запись для kernel.org на &quot;ssh&quot;.</target>
        </trans-unit>
        <trans-unit id="4399284bfb632a08cce3f3533db563320f49af23" translate="yes" xml:space="preserve">
          <source>The id of a tree object to diff against.</source>
          <target state="translated">Идентификатор древовидного объекта для сравнения.</target>
        </trans-unit>
        <trans-unit id="0505b9e9f78e78efa1c8b76bc422638cba05b1b7" translate="yes" xml:space="preserve">
          <source>The id of a tree object.</source>
          <target state="translated">Идентификатор объекта дерева.</target>
        </trans-unit>
        <trans-unit id="2e60e84271eec03fd28b067b32c84bb5fbe76999" translate="yes" xml:space="preserve">
          <source>The id of the tree object(s) to be read/merged.</source>
          <target state="translated">Идентификатор объекта(ов)дерева,который должен быть прочитан(ы)или погружен(ы).</target>
        </trans-unit>
        <trans-unit id="fb9074ec22bab96e3e97d4855db9bfaed224187c" translate="yes" xml:space="preserve">
          <source>The idea is that every 3 test for example, &quot;git bisect&quot; could ask the user to test a commit that has already been found to be &quot;good&quot; or &quot;bad&quot; (because one of its descendants or one of its ancestors has been found to be &quot;good&quot; or &quot;bad&quot; respectively). If it happens that a commit has been previously incorrectly classified then the bisection can be aborted early, hopefully before too many mistakes have been made. Then the user will have to look at what happened and then restart the bisection using a fixed bisect log.</source>
          <target state="translated">Идея заключается в том,что каждые 3 теста,например,&quot;git-бисект&quot; может попросить пользователя протестировать коммит,который уже был признан &quot;хорошим&quot; или &quot;плохим&quot; (потому что один из его потомков или один из его предков был признан &quot;хорошим&quot; или &quot;плохим&quot; соответственно).Если случится так,что коммит ранее был ошибочно классифицирован,то биссекция может быть прервана досрочно,надеюсь,до того,как будет сделано слишком много ошибок.Тогда пользователю придётся посмотреть,что произошло,а затем перезапустить биссекцию,используя фиксированный лог биссектрис.</target>
        </trans-unit>
        <trans-unit id="b3a07b8c786a1b03697e9ded467b22cd2ece1ab4" translate="yes" xml:space="preserve">
          <source>The idea is to manually tell &lt;code&gt;git rebase&lt;/code&gt; &quot;where the old &lt;code&gt;subsystem&lt;/code&gt; ended and your &lt;code&gt;topic&lt;/code&gt; began&quot;, that is, what the old merge base between them was. You will have to find a way to name the last commit of the old &lt;code&gt;subsystem&lt;/code&gt;, for example:</source>
          <target state="translated">Идея состоит в том, чтобы вручную указать &lt;code&gt;git rebase&lt;/code&gt; , &amp;laquo;где закончилась старая &lt;code&gt;subsystem&lt;/code&gt; и началась ваша &lt;code&gt;topic&lt;/code&gt; &amp;raquo;, то есть какова была старая база слияния между ними. Вам нужно будет найти способ назвать последний коммит старой &lt;code&gt;subsystem&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="1ff2a3a30d68d12ef6b058f357f43e3bd9cd4f0f" translate="yes" xml:space="preserve">
          <source>The idx files to verify.</source>
          <target state="translated">IDX-файлы для проверки.</target>
        </trans-unit>
        <trans-unit id="fd29bd486dc43b124e6d98a808e18b86c2905ae4" translate="yes" xml:space="preserve">
          <source>The import checks out from CVS every revision of every file. Reportedly cvsimport can average some twenty revisions per second, so for a medium-sized project this should not take more than a couple of minutes. Larger projects or remote repositories may take longer.</source>
          <target state="translated">Импорт проверяется из CVS каждой ревизии каждого файла.Сообщается,что cvsimport может в среднем составлять около двадцати ревизий в секунду,так что для среднего проекта это не должно занять более пары минут.Более крупные проекты или удалённые репозитории могут занимать больше времени.</target>
        </trans-unit>
        <trans-unit id="69f04e00f7076b8b130e67c7134e53f7f1076bf2" translate="yes" xml:space="preserve">
          <source>The import is incremental, so if you call it again next month it will fetch any CVS updates that have been made in the meantime. For this to work, you must not modify the imported branches; instead, create new branches for your own changes, and merge in the imported branches as necessary.</source>
          <target state="translated">Импорт является инкрементальным,так что если вы позвоните ему снова в следующем месяце,он будет получать любые CVS обновления,которые были сделаны за это время.Чтобы это сработало,вы не должны изменять импортированные ветки;вместо этого,создайте новые ветки для собственных изменений и слияйте импортированные ветки по мере необходимости.</target>
        </trans-unit>
        <trans-unit id="807035ab1f5be4f0cb3563dc9b49740571ca0fa4" translate="yes" xml:space="preserve">
          <source>The index</source>
          <target state="translated">Индекс</target>
        </trans-unit>
        <trans-unit id="4284ed429265f3c1afc30e4fc09197d88352698c" translate="yes" xml:space="preserve">
          <source>The index and the working tree are adjusted as if you had previously run &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt;. This allows you to start a new history that records a set of paths similar to &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; by easily running &lt;code&gt;git commit -a&lt;/code&gt; to make the root commit.</source>
          <target state="translated">Индекс и рабочее дерево настраиваются так, как если бы вы ранее запускали &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt; . Это позволяет вам начать новую историю, которая записывает набор путей, подобных &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; , путем простого выполнения &lt;code&gt;git commit -a&lt;/code&gt; для выполнения корневого коммита.</target>
        </trans-unit>
        <trans-unit id="0818281aa21612fb5fa362015c64c5645d861084" translate="yes" xml:space="preserve">
          <source>The index contains all the information necessary to generate a single (uniquely determined) tree object.</source>
          <target state="translated">Индекс содержит всю информацию,необходимую для генерации одного (однозначно определенного)объекта дерева.</target>
        </trans-unit>
        <trans-unit id="3d9fb9e020c0d003a42d72f87f16ba2ba38226e6" translate="yes" xml:space="preserve">
          <source>The index enables fast comparisons between the tree object it defines and the working tree.</source>
          <target state="translated">Индекс позволяет быстро сравнивать определяемый им объект дерева с рабочим деревом.</target>
        </trans-unit>
        <trans-unit id="eb65460c6179ccddcd4479166e9da44d8f5c40d8" translate="yes" xml:space="preserve">
          <source>The index file</source>
          <target state="translated">Файл индекса</target>
        </trans-unit>
        <trans-unit id="181ab401ce7a15640077d5cb413c24fc6eb6a97e" translate="yes" xml:space="preserve">
          <source>The index file is a cache of the state of a directory tree, used to create commits, check out working directories, and hold the various trees involved in a merge.</source>
          <target state="translated">Индексный файл представляет собой кэш состояния дерева каталогов,используемый для создания коммитов,извлечения рабочих каталогов и хранения различных деревьев,участвующих в слиянии.</target>
        </trans-unit>
        <trans-unit id="a98935eae61bfe66b9928e790965f624bf2f8b5b" translate="yes" xml:space="preserve">
          <source>The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be updated with new content, and new commits may be created from the content stored in the index.</source>
          <target state="translated">Файл индекса инициализируется списком всех путей и,для каждого пути,блочным объектом и набором атрибутов.Объект-объект представляет содержимое файла в качестве заголовка текущей ветки.Атрибуты (время последнего изменения,размер и т.д.)берутся из соответствующего файла в рабочем дереве.Последующие изменения в рабочем дереве можно найти,сравнив эти атрибуты.Индекс может обновляться новым содержимым,а из содержимого,хранящегося в индексе,могут создаваться новые коммиты.</target>
        </trans-unit>
        <trans-unit id="803387e9a63472a3287bdc2446032cf6e023e1d9" translate="yes" xml:space="preserve">
          <source>The index is a binary file (generally kept in &lt;code&gt;.git/index&lt;/code&gt;) containing a sorted list of path names, each with permissions and the SHA-1 of a blob object; &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files[1]&lt;/a&gt; can show you the contents of the index:</source>
          <target state="translated">Индекс - это двоичный файл (обычно хранящийся в &lt;code&gt;.git/index&lt;/code&gt; ), содержащий отсортированный список имен путей, каждое с разрешениями и SHA-1 объекта blob; &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files [1]&lt;/a&gt; может показать вам содержимое индекса:</target>
        </trans-unit>
        <trans-unit id="a9316182499a37d7c3626ac01aa8aab4c013b473" translate="yes" xml:space="preserve">
          <source>The index is also capable of storing multiple entries (called &quot;stages&quot;) for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.</source>
          <target state="translated">Индекс также способен хранить несколько записей (называемых &quot;этапами&quot;)для данного патнамента.Эти этапы используются для хранения различных неупорядоченных версий файла в процессе слияния.</target>
        </trans-unit>
        <trans-unit id="188f5a2d7cb942916f4771a1884b995e88b4142c" translate="yes" xml:space="preserve">
          <source>The index is thus a sort of temporary staging area, which is filled with a tree which you are in the process of working on.</source>
          <target state="translated">Таким образом,индекс представляет собой своего рода временную инсценировочную область,которая заполняется деревом,над которым вы работаете.</target>
        </trans-unit>
        <trans-unit id="272f4c7f98ef3d0d8ac3fea3ee0b1455507c7b6c" translate="yes" xml:space="preserve">
          <source>The index is updated after successful completion, but the change must still be committed.</source>
          <target state="translated">Индекс обновляется после успешного завершения,но изменение все равно должно быть зафиксировано.</target>
        </trans-unit>
        <trans-unit id="aaf3f3d73cad6f7ed8d83d0912688100fa696756" translate="yes" xml:space="preserve">
          <source>The index line includes the blob object names before and after the change. The &amp;lt;mode&amp;gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</source>
          <target state="translated">Строка индекса включает имена больших двоичных объектов до и после изменения. &amp;lt;Режим&amp;gt; включается, если режим файла не изменяется; в противном случае отдельные строки указывают старый и новый режим.</target>
        </trans-unit>
        <trans-unit id="0c2192b5aebec33a414387c35e4e32f7ffc2561e" translate="yes" xml:space="preserve">
          <source>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using &lt;code&gt;-f&lt;/code&gt; will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using &lt;code&gt;--ours&lt;/code&gt; or &lt;code&gt;--theirs&lt;/code&gt;. With &lt;code&gt;-m&lt;/code&gt;, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</source>
          <target state="translated">Индекс может содержать не объединенные записи из-за предыдущего неудачного объединения. По умолчанию, если вы попытаетесь извлечь такую ​​запись из индекса, операция извлечения завершится ошибкой и ничего не будет извлечено. Использование &lt;code&gt;-f&lt;/code&gt; игнорирует эти несвязанные записи. Содержимое с определенной стороны слияния можно извлечь из индекса с помощью &lt;code&gt;--ours&lt;/code&gt; или &lt;code&gt;--theirs&lt;/code&gt; . С помощью &lt;code&gt;-m&lt;/code&gt; изменения, внесенные в файл рабочего дерева, можно отменить, чтобы воссоздать исходный конфликтующий результат слияния.</target>
        </trans-unit>
        <trans-unit id="4d0d51f29d49355316c3cef38c96a8eb5dfc2a8a" translate="yes" xml:space="preserve">
          <source>The index must be in a fully merged state.</source>
          <target state="translated">Индекс должен быть в полностью объединенном состоянии.</target>
        </trans-unit>
        <trans-unit id="76af7fc7918327fcfae98949c1f8a57aa6273691" translate="yes" xml:space="preserve">
          <source>The information &lt;code&gt;git rerere&lt;/code&gt; records is also used when running &lt;code&gt;git rebase&lt;/code&gt;. After blowing away the test merge and continuing development on the topic branch:</source>
          <target state="translated">Информация о записях &lt;code&gt;git rerere&lt;/code&gt; также используется при запуске &lt;code&gt;git rebase&lt;/code&gt; . После удаления тестового слияния и продолжения разработки в тематической ветке:</target>
        </trans-unit>
        <trans-unit id="15901a24c7f8cf8a87522005a6e5af387df87a55" translate="yes" xml:space="preserve">
          <source>The information regarding a particular file, stored in the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;. An index entry can be unmerged, if a &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; was started, but not yet finished (i.e. if the index contains multiple versions of that file).</source>
          <target state="translated">Информация о конкретном файле, хранящаяся в &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; . Запись индекса может быть отключена, если &lt;a href=&quot;#def_merge&quot;&gt;объединение&lt;/a&gt; было начато, но еще не завершено (т.е. если индекс содержит несколько версий этого файла).</target>
        </trans-unit>
        <trans-unit id="e1b41d54924f3d005ef481db0b83a44bcb5b9a26" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;git svn clone&lt;/code&gt; can be quite time-consuming (especially for large Subversion repositories). If multiple people (or one person with multiple machines) want to use &lt;code&gt;git svn&lt;/code&gt; to interact with the same Subversion repository, you can do the initial &lt;code&gt;git svn clone&lt;/code&gt; to a repository on a server and have each person clone that repository with &lt;code&gt;git clone&lt;/code&gt;:</source>
          <target state="translated">Первоначальный &lt;code&gt;git svn clone&lt;/code&gt; может занять довольно много времени (особенно для больших репозиториев Subversion). Если несколько человек (или один человек с несколькими машинами) хотят использовать &lt;code&gt;git svn&lt;/code&gt; для взаимодействия с одним и тем же репозиторием Subversion, вы можете выполнить начальное &lt;code&gt;git svn clone&lt;/code&gt; в репозиторий на сервере и попросить каждого человека клонировать этот репозиторий с помощью &lt;code&gt;git clone&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="086eba2d4da1f4350d7506d860bddbb6a3656718" translate="yes" xml:space="preserve">
          <source>The initial clone may be time-consuming for a large project, but you will only need to clone once.</source>
          <target state="translated">Первоначальный клон может занять много времени для большого проекта,но клонировать нужно будет только один раз.</target>
        </trans-unit>
        <trans-unit id="de40e4660568a286f9924fcf84aa107b9295fcd9" translate="yes" xml:space="preserve">
          <source>The initial revision lays the foundation for almost everything Git has today, but is small enough to read in one sitting.</source>
          <target state="translated">Первоначальная ревизия закладывает основу почти для всего,что есть у Git'а сегодня,но достаточно мала,чтобы читать за один присест.</target>
        </trans-unit>
        <trans-unit id="c62040180edff3420ed3a70f2f1e520bccaa26ac" translate="yes" xml:space="preserve">
          <source>The insane thing. You really want to call the new version &quot;X&quot; too, &lt;code&gt;even though&lt;/code&gt; others have already seen the old one. So just use &lt;code&gt;git tag -f&lt;/code&gt; again, as if you hadn&amp;rsquo;t already published the old one.</source>
          <target state="translated">Безумие. Вы действительно хотите назвать новую версию &quot;X&quot;, &lt;code&gt;even though&lt;/code&gt; другие уже видели старую. Так что просто снова используйте &lt;code&gt;git tag -f&lt;/code&gt; , как будто вы еще не опубликовали старую версию.</target>
        </trans-unit>
        <trans-unit id="861707a12241605e66eb9230fb32f3c54a08448e" translate="yes" xml:space="preserve">
          <source>The intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below.</source>
          <target state="translated">Целью этой опции является выбор и выбор строк патча для применения,или даже изменение содержимого строк для постановки.Это может быть быстрее и гибче,чем использование интерактивного селектора.Однако,легко запутаться и создать патч,который не применим к индексу.См.раздел Редактирование патчей ниже.</target>
        </trans-unit>
        <trans-unit id="44c76b656c6ccb35aba2b96c920b5e782121a3bc" translate="yes" xml:space="preserve">
          <source>The interactive backend drops commits by default that started empty and halts if it hits a commit that ended up empty. The &lt;code&gt;--keep-empty&lt;/code&gt; option exists for the interactive backend to allow it to keep commits that started empty.</source>
          <target state="translated">Интерактивный бэкэнд отбрасывает коммиты по умолчанию, которые начинались с нуля, и останавливается, если попадает в коммит, который в итоге оказался пустым. Для интерактивного бэкэнда существует опция &lt;code&gt;--keep-empty&lt;/code&gt; , позволяющая сохранять пустые коммиты.</target>
        </trans-unit>
        <trans-unit id="c4d1b3aab1a5f39909af0bdb9766437575ff6138" translate="yes" xml:space="preserve">
          <source>The interactive mode is meant for this type of workflow:</source>
          <target state="translated">Интерактивный режим предназначен для данного типа рабочего процесса:</target>
        </trans-unit>
        <trans-unit id="bed5d62a356c4ef72d5d10899b110555c8810a69" translate="yes" xml:space="preserve">
          <source>The interactive rebase command was originally designed to handle individual patch series. As such, it makes sense to exclude merge commits from the todo list, as the developer may have merged the then-current &lt;code&gt;master&lt;/code&gt; while working on the branch, only to rebase all the commits onto &lt;code&gt;master&lt;/code&gt; eventually (skipping the merge commits).</source>
          <target state="translated">Интерактивная команда rebase изначально была разработана для обработки отдельных серий исправлений. Таким образом, имеет смысл исключить коммиты слияния из списка задач, так как разработчик мог объединить текущий &lt;code&gt;master&lt;/code&gt; во время работы над веткой только для того, чтобы в конечном итоге перенастроить все коммиты на &lt;code&gt;master&lt;/code&gt; (пропуская коммиты слияния).</target>
        </trans-unit>
        <trans-unit id="54aff08446e09f30da133e329eb3f3646033c66c" translate="yes" xml:space="preserve">
          <source>The interactive rebase will stop when a command fails (i.e. exits with non-0 status) to give you an opportunity to fix the problem. You can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;.</source>
          <target state="translated">Интерактивное перебазирование остановится, когда команда завершится неудачно (т.е. завершится со статусом, отличным от 0), чтобы дать вам возможность решить проблему. Вы можете продолжить с помощью &lt;code&gt;git rebase --continue&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a7f537099e4a0d8d8faba9c5e743d565b88b9dd" translate="yes" xml:space="preserve">
          <source>The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.</source>
          <target state="translated">Интерфейс (ввод,вывод,набор опций и семантика)для этих низкоуровневых команд должен быть намного более стабильным,чем команды уровня фарфора,потому что эти команды в первую очередь предназначены для использования в сценариях.С другой стороны,интерфейс команд уровня фарфора может быть изменен,чтобы улучшить работу конечного пользователя.</target>
        </trans-unit>
        <trans-unit id="bf907bc1bbd0905aa866d8781057341315704641" translate="yes" xml:space="preserve">
          <source>The internal block size to use when converting a revision specifier such as &lt;code&gt;@all&lt;/code&gt; into a list of specific change numbers. Instead of using a single call to &lt;code&gt;p4 changes&lt;/code&gt; to find the full list of changes for the conversion, there are a sequence of calls to &lt;code&gt;p4 changes -m&lt;/code&gt;, each of which requests one block of changes of the given size. The default block size is 500, which should usually be suitable.</source>
          <target state="translated">Внутренний размер блока, используемый при преобразовании спецификатора ревизии, такого как &lt;code&gt;@all&lt;/code&gt; , в список конкретных номеров изменений. Вместо использования одного вызова &lt;code&gt;p4 changes&lt;/code&gt; для поиска полного списка изменений для преобразования, существует последовательность вызовов &lt;code&gt;p4 changes -m&lt;/code&gt; , каждый из которых запрашивает один блок изменений заданного размера. Размер блока по умолчанию - 500, что обычно подходит.</target>
        </trans-unit>
        <trans-unit id="b58ee91a98701b75ecd0edc6713c67b3efbc3330" translate="yes" xml:space="preserve">
          <source>The internals are documented in the &lt;a href=&quot;api-index&quot;&gt;Git API documentation&lt;/a&gt;.</source>
          <target state="translated">Внутреннее устройство задокументировано в документации &lt;a href=&quot;api-index&quot;&gt;Git API&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="52e0ef5f6de2b43e809ff876c18bbee69e575471" translate="yes" xml:space="preserve">
          <source>The key may contain any bytes except &lt;code&gt;=&lt;/code&gt;, newline, or NUL. The value may contain any bytes except newline or NUL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051387312310d89e1f2cd1a7644ba37793a94a7c" translate="yes" xml:space="preserve">
          <source>The known attack vectors are as follows:</source>
          <target state="translated">Известные векторы атаки следующие:</target>
        </trans-unit>
        <trans-unit id="d0880a7ce92ec68d75b7997f1b8b330766294029" translate="yes" xml:space="preserve">
          <source>The lack of a central group of &quot;committers&quot; means there is less need for formal decisions about who is &quot;in&quot; and who is &quot;out&quot;.</source>
          <target state="translated">Отсутствие центральной группы &quot;коммиттеров&quot; означает меньшую необходимость в формальных решениях о том,кто находится &quot;в&quot;,а кто &quot;вне&quot;.</target>
        </trans-unit>
        <trans-unit id="d217f82f775261a888c8090d4fd57de90a2943db" translate="yes" xml:space="preserve">
          <source>The last diff is empty, but no new commits have been made, and the head still doesn&amp;rsquo;t contain the new line:</source>
          <target state="translated">Последний diff пуст, но новых коммитов не было, а в заголовке все еще нет новой строки:</target>
        </trans-unit>
        <trans-unit id="fc6ae42476a6037281df209d5a37adfb042c084d" translate="yes" xml:space="preserve">
          <source>The last three commits (&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;HEAD^&lt;/code&gt;, and &lt;code&gt;HEAD~2&lt;/code&gt;) were bad and you do not want to ever see them again. Do &lt;strong&gt;not&lt;/strong&gt; do this if you have already given these commits to somebody else. (See the &quot;RECOVERING FROM UPSTREAM REBASE&quot; section in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for the implications of doing so.)</source>
          <target state="translated">Последние три коммита ( &lt;code&gt;HEAD&lt;/code&gt; , &lt;code&gt;HEAD^&lt;/code&gt; и &lt;code&gt;HEAD~2&lt;/code&gt; ) были плохими, и вы больше не хотите их видеть. Вы &lt;strong&gt;не&lt;/strong&gt; делайте этого , если вы уже дали эти коммиты кому - то другому. (См. Раздел &amp;laquo;ВОССТАНОВЛЕНИЕ ИЗ UPSTREAM REBASE&amp;raquo; в &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1],&lt;/a&gt; чтобы узнать о последствиях этого.)</target>
        </trans-unit>
        <trans-unit id="9b2685798225cd4befed46a027cdbd30eb245ee2" translate="yes" xml:space="preserve">
          <source>The latest stash you created is stored in &lt;code&gt;refs/stash&lt;/code&gt;; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. &lt;code&gt;stash@{0}&lt;/code&gt; is the most recently created stash, &lt;code&gt;stash@{1}&lt;/code&gt; is the one before it, &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; is also possible). Stashes may also be referenced by specifying just the stash index (e.g. the integer &lt;code&gt;n&lt;/code&gt; is equivalent to &lt;code&gt;stash@{n}&lt;/code&gt;).</source>
          <target state="translated">Последний созданный вами тайник хранится в &lt;code&gt;refs/stash&lt;/code&gt; ; более старые тайники находятся в журнале ссылок в этой ссылке и могут быть названы с использованием обычного синтаксиса журнала ссылок (например, &lt;code&gt;stash@{0}&lt;/code&gt; - это последний созданный тайник, &lt;code&gt;stash@{1}&lt;/code&gt; - предшествующий ему, &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; также возможно). На тайники также можно ссылаться, указав только индекс тайника (например, целое число &lt;code&gt;n&lt;/code&gt; эквивалентно &lt;code&gt;stash@{n}&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8bb7601b8118e6905d96f76a29452df6bc2ae98e" translate="yes" xml:space="preserve">
          <source>The latter is not available by default, unless configured.</source>
          <target state="translated">Последнее не доступно по умолчанию,если оно не настроено.</target>
        </trans-unit>
        <trans-unit id="9096be046e467fbce79d2a6fe63b310a7a8be174" translate="yes" xml:space="preserve">
          <source>The latter use of the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values can be overridden by giving the &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; parameter(s) on the command line.</source>
          <target state="translated">Последнее использование значений &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; можно переопределить, &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; параметр (ы) --refmap = &amp;lt;refspec&amp;gt; в командной строке.</target>
        </trans-unit>
        <trans-unit id="63c1787cad9f454d5a2a74665dcae083a7a8328f" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, for git-credential-store to retry when trying to lock the credentials file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ffd562f6b8b4abf7958d261df418cb81ead100" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms).</source>
          <target state="translated">Продолжительность времени в миллисекундах,чтобы повторить попытку заблокировать индивидуальную ссылку.Значение 0 означает не повторять попытку вообще;-1 означает повторять попытку бесконечно.По умолчанию 100 (т.е.повторная попытка в течение 100 мс).</target>
        </trans-unit>
        <trans-unit id="68a6d4f84896f5fe182696f59cffd1c668106a0a" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock the &lt;code&gt;packed-refs&lt;/code&gt; file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).</source>
          <target state="translated">Время в миллисекундах до повторной попытки блокировки файла с &lt;code&gt;packed-refs&lt;/code&gt; . Значение 0 означает, что попытки не повторяться вообще; -1 означает пытаться бесконечно. По умолчанию 1000 (т. Е. Повторите попытку в течение 1 секунды).</target>
        </trans-unit>
        <trans-unit id="fff6cc41c6311b04938a1f36a103054a2f1d2e11" translate="yes" xml:space="preserve">
          <source>The list above is ordered by decreasing precedence; a URL that matches a config key&amp;rsquo;s path is preferred to one that matches its user name. For example, if the URL is &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; a config key match of &lt;code&gt;https://example.com/foo&lt;/code&gt; will be preferred over a config key match of &lt;code&gt;https://user@example.com&lt;/code&gt;.</source>
          <target state="translated">Приведенный выше список упорядочен по убыванию приоритета; URL-адрес, соответствующий пути ключа конфигурации, предпочтительнее, чем URL-адрес, соответствующий его имени пользователя. Например, если URL-адрес &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; ,совпадение ключа конфигурации &lt;code&gt;https://example.com/foo&lt;/code&gt; будет предпочтительнее совпадения ключа конфигурации &lt;code&gt;https://user@example.com&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34cf6a4a25da733f5b8366288a8f31ad385fa0ee" translate="yes" xml:space="preserve">
          <source>The list of identifiers, and other information, of the objects in a &lt;a href=&quot;#def_pack&quot;&gt;pack&lt;/a&gt;, to assist in efficiently accessing the contents of a pack.</source>
          <target state="translated">Список идентификаторов и другая информация об объектах в &lt;a href=&quot;#def_pack&quot;&gt;пакете&lt;/a&gt; , чтобы помочь в эффективном доступе к содержимому пакета.</target>
        </trans-unit>
        <trans-unit id="58413b6422259538de8b3cfc5351841a4fb3ade2" translate="yes" xml:space="preserve">
          <source>The list of mailbox files to read patches from. If you do not supply this argument, the command reads from the standard input. If you supply directories, they will be treated as Maildirs.</source>
          <target state="translated">Список файлов почтового ящика для чтения патчей.Если вы не предоставите этот аргумент,команда будет читаться со стандартного входа.Если вы предоставите каталоги,они будут рассматриваться как мейлдиры.</target>
        </trans-unit>
        <trans-unit id="811a0eecf6c6689902c9fc1e00fe667f20b10132" translate="yes" xml:space="preserve">
          <source>The list of remotes which are fetched by &quot;git remote update &amp;lt;group&amp;gt;&quot;. See &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt;.</source>
          <target state="translated">Список пультов, которые выбираются командой &quot;git remote update &amp;lt;group&amp;gt;&quot;. См. &lt;a href=&quot;git-remote&quot;&gt;Git-remote [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3aadf5969931435dfd81a576572d271c1b7df1e4" translate="yes" xml:space="preserve">
          <source>The list you get with &quot;ls&quot; :-)</source>
          <target state="translated">Список,который вы получаете с &quot;ls&quot; :-)</target>
        </trans-unit>
        <trans-unit id="2d5bfecbee3eeb5c71f69bd43de88bc34222a07d" translate="yes" xml:space="preserve">
          <source>The local offset is specified by &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; as a positive or negative offset from UTC. For example EST (which is 5 hours behind UTC) would be expressed in &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; by &amp;ldquo;-0500&amp;rdquo; while UTC is &amp;ldquo;+0000&amp;rdquo;. The local offset does not affect &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;; it is used only as an advisement to help formatting routines display the timestamp.</source>
          <target state="translated">Локальное смещение указывается &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; как положительное или отрицательное смещение от UTC. Например, EST (который на 5 часов ниже UTC) будет выражен в &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; как &amp;laquo;-0500&amp;raquo;, а UTC - &amp;laquo;+0000&amp;raquo;. Локальное смещение не влияет на &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; ; он используется только как совет, помогающий процедурам форматирования отображать метку времени.</target>
        </trans-unit>
        <trans-unit id="ab508d82c7d8a4545e2bb32ec9ec4fb2386a14cb" translate="yes" xml:space="preserve">
          <source>The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;.</source>
          <target state="translated">Расположение расширяемого файла почтовой карты. Карта почты по умолчанию, расположенная в корне репозитория, загружается первой, а затем файл карты почты, на который указывает эта переменная. Местоположение файла mailmap может быть в подкаталоге репозитория или где-то за пределами самого репозитория. См. &lt;a href=&quot;git-shortlog&quot;&gt;Git-shortlog [1]&lt;/a&gt; и &lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d3bb0979c637e06c575b3f731f106ded5d4b916f" translate="yes" xml:space="preserve">
          <source>The location of per-instance and system-wide configuration files can be overridden using the following environment variables:</source>
          <target state="translated">Местоположение каждого экземпляра и общесистемных конфигурационных файлов может быть переопределено с помощью следующих переменных окружения:</target>
        </trans-unit>
        <trans-unit id="9446c1e5cce4b2ece4fc10ff79540962e21c6551" translate="yes" xml:space="preserve">
          <source>The magic word &lt;code&gt;top&lt;/code&gt; (magic signature: &lt;code&gt;/&lt;/code&gt;) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory.</source>
          <target state="translated">Волшебное слово &lt;code&gt;top&lt;/code&gt; (magic signature: &lt;code&gt;/&lt;/code&gt; ) обеспечивает совпадение с шаблоном из корня рабочего дерева, даже если вы запускаете команду из подкаталога.</target>
        </trans-unit>
        <trans-unit id="64ba77ac0581cbecc6b691422d0c5681817b2387" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands (plus help and quit).</source>
          <target state="translated">В основном цикле команд есть 6 подкоманд (плюс справка и выход).</target>
        </trans-unit>
        <trans-unit id="0b0bee129956915b1cb776d4190a01b55932ed3c" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands.</source>
          <target state="translated">В основном цикле команд есть 6 подкоманд.</target>
        </trans-unit>
        <trans-unit id="821ddd85eba2b4bc6e95a82521b10b32287622db" translate="yes" xml:space="preserve">
          <source>The main trunk is stored in the Git branch named &lt;code&gt;origin&lt;/code&gt;, and additional CVS branches are stored in Git branches with the same names. The most recent version of the main trunk is also left checked out on the &lt;code&gt;master&lt;/code&gt; branch, so you can start adding your own changes right away.</source>
          <target state="translated">Основной ствол хранится в ветке Git с именем &lt;code&gt;origin&lt;/code&gt; , а дополнительные ветки CVS хранятся в ветвях Git с такими же именами. Самая последняя версия основного ствола также не используется в &lt;code&gt;master&lt;/code&gt; ветке, поэтому вы можете сразу же начать добавлять свои собственные изменения.</target>
        </trans-unit>
        <trans-unit id="f31023370321849385c22bc8ae521136bfffac45" translate="yes" xml:space="preserve">
          <source>The mapping of file names from the p4 depot path to Git, by default, involves removing the entire depot path. With this option, the full p4 depot path is retained in Git. For example, path &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt;, when imported from &lt;code&gt;//depot/main/&lt;/code&gt;, becomes &lt;code&gt;foo/bar.c&lt;/code&gt;. With &lt;code&gt;--keep-path&lt;/code&gt;, the Git path is instead &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt;.</source>
          <target state="translated">Отображение имен файлов из пути депо p4 в Git по умолчанию включает удаление всего пути депо. С этим параметром в Git сохраняется полный путь к депо p4. Так , например, путь &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt; , когда импортируется из &lt;code&gt;//depot/main/&lt;/code&gt; , становится &lt;code&gt;foo/bar.c&lt;/code&gt; . С &lt;code&gt;--keep-path&lt;/code&gt; , путь Гита вместо этого &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="696795b724c116f40755fe0ffd2f815f95c8f529" translate="yes" xml:space="preserve">
          <source>The mark command is optional here as some frontends have chosen to generate the Git SHA-1 for the blob on their own, and feed that directly to &lt;code&gt;commit&lt;/code&gt;. This is typically more work than it&amp;rsquo;s worth however, as marks are inexpensive to store and easy to use.</source>
          <target state="translated">Команда mark здесь необязательна, так как некоторые интерфейсы решили самостоятельно сгенерировать Git SHA-1 для большого двоичного объекта и &lt;code&gt;commit&lt;/code&gt; непосредственно для фиксации . Однако, как правило, это больше работы, чем она того стоит, поскольку марки недорого хранить и просты в использовании.</target>
        </trans-unit>
        <trans-unit id="154d6f76415eae422478f55f25c1ddb853a4e1ab" translate="yes" xml:space="preserve">
          <source>The maximum delta depth used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no maximum depth is given on the command line. Defaults to 50. Maximum value is 4095.</source>
          <target state="translated">Максимальная глубина дельты, используемая &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1],&lt;/a&gt; когда максимальная глубина не указана в командной строке. По умолчанию - 50. Максимальное значение - 4095.</target>
        </trans-unit>
        <trans-unit id="95e6e1cf49a26e9f67b2825bc0bd39addf27373a" translate="yes" xml:space="preserve">
          <source>The maximum length of the output filenames generated by the &lt;code&gt;format-patch&lt;/code&gt; command; defaults to 64. Can be overridden by the &lt;code&gt;--filename-max-length=&amp;lt;n&amp;gt;&lt;/code&gt; command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9325da9117f9b4afd884e4f7e837bf9ca641172e" translate="yes" xml:space="preserve">
          <source>The maximum memory in bytes used for caching deltas in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB.</source>
          <target state="translated">Максимальный объем памяти в байтах, используемый для кэширования дельт в &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt; перед их записью в пакет. Этот кеш используется для ускорения фазы записи объекта, так как не требуется повторно вычислять окончательный результат дельты после того, как будет найдено наилучшее соответствие для всех объектов. Это может сильно повлиять на переупаковку больших репозиториев на машинах с ограниченным объемом памяти, особенно если этот кеш подталкивает систему к подкачке. Значение 0 означает отсутствие ограничений. Наименьший размер в 1 байт может использоваться для виртуального отключения этого кэша. По умолчанию 256 МБ.</target>
        </trans-unit>
        <trans-unit id="a0015a1c1a155cb39bc99dd58a785f6e45fb6909" translate="yes" xml:space="preserve">
          <source>The maximum size of a delta, that is cached in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. Maximum value is 65535.</source>
          <target state="translated">Максимальный размер дельты, которая кешируется в &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt; . Этот кеш используется для ускорения фазы записи объекта, так как не требуется повторно вычислять окончательный результат дельты после того, как будет найдено наилучшее соответствие для всех объектов. По умолчанию - 1000. Максимальное значение - 65535.</target>
        </trans-unit>
        <trans-unit id="d2696797b76aad16406d56dd354feaf085869327" translate="yes" xml:space="preserve">
          <source>The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the &lt;code&gt;--max-pack-size&lt;/code&gt; option of &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;. Reaching this limit results in the creation of multiple packfiles; which in turn prevents bitmaps from being created. The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, or &lt;code&gt;g&lt;/code&gt; are supported.</source>
          <target state="translated">Максимальный размер пачки. Этот параметр влияет только на упаковку в файл при переупаковке, т.е. протокол git: // не изменяется. Его можно &lt;code&gt;--max-pack-size&lt;/code&gt; с помощью опции --max-pack-size в &lt;a href=&quot;git-repack&quot;&gt;git-repack [1]&lt;/a&gt; . Достижение этого предела приводит к созданию нескольких файлов пакетов; что, в свою очередь, предотвращает создание растровых изображений. Минимальный допустимый размер ограничен 1 МиБ. По умолчанию не ограничено. Поддерживаются общие суффиксы единиц измерения &lt;code&gt;k&lt;/code&gt; , &lt;code&gt;m&lt;/code&gt; или &lt;code&gt;g&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb8ed32c533714ca4a8bb85ec574c3c5791f3a2f" translate="yes" xml:space="preserve">
          <source>The maximum size of memory that is consumed by each thread in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; for pack window memory when no limit is given on the command line. The value can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. When left unconfigured (or set explicitly to 0), there will be no limit.</source>
          <target state="translated">Максимальный размер памяти, потребляемой каждым потоком в &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt; для памяти окна пакета, когда в командной строке не задано ограничение. Значение может иметь суффикс &amp;laquo;k&amp;raquo;, &amp;laquo;m&amp;raquo; или &amp;laquo;g&amp;raquo;. Если оставить ненастроенным (или явно установить на 0), ограничения не будет.</target>
        </trans-unit>
        <trans-unit id="565cc584b68c5b675a716ec7daae7fd9f3343784" translate="yes" xml:space="preserve">
          <source>The meaning of each part of feature configuration is described below:</source>
          <target state="translated">Значение каждой части конфигурации функции описано ниже:</target>
        </trans-unit>
        <trans-unit id="9c067af8c6826c60723d70b61f19783aa20b528e" translate="yes" xml:space="preserve">
          <source>The merge backend keeps intentionally empty commits by default (though with -i they are marked as empty in the todo list editor, or they can be dropped automatically with --no-keep-empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e3581a01e860cba15921ad7e00a74542d34f54" translate="yes" xml:space="preserve">
          <source>The merge backend works with a full copy of each relevant file, insulating it from these types of problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c94b31b25e0c09828d4438bdd636247e16e902" translate="yes" xml:space="preserve">
          <source>The merge backend works with the full commits on both sides of history and thus has no such limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657f593653b8985b76ea363799992d9ccd8552d1" translate="yes" xml:space="preserve">
          <source>The merge driver can learn the pathname in which the merged result will be stored via placeholder &lt;code&gt;%P&lt;/code&gt;.</source>
          <target state="translated">Драйвер объединения может узнать путь к файлу , в котором объединенный результат будет сохранен через заполнитель &lt;code&gt;%P&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a4ee88dc1fd419e5903b5a6b97383e8c2a1fab9" translate="yes" xml:space="preserve">
          <source>The merge driver is expected to leave the result of the merge in the file named with &lt;code&gt;%A&lt;/code&gt; by overwriting it, and exit with zero status if it managed to merge them cleanly, or non-zero if there were conflicts.</source>
          <target state="translated">Ожидается, что драйвер слияния оставит результат слияния в файле с именем &lt;code&gt;%A&lt;/code&gt; , перезаписав его, и выйдет с нулевым статусом, если ему удалось слить их чисто, или ненулевым, если были конфликты.</target>
        </trans-unit>
        <trans-unit id="d39522f0982abae4a359335f63ed088d0f4a4c4e" translate="yes" xml:space="preserve">
          <source>The merge mechanism (&lt;code&gt;git merge&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; commands) allows the backend &lt;code&gt;merge strategies&lt;/code&gt; to be chosen with &lt;code&gt;-s&lt;/code&gt; option. Some strategies can also take their own options, which can be passed by giving &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; arguments to &lt;code&gt;git merge&lt;/code&gt; and/or &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">Механизм слияния (команды &lt;code&gt;git merge&lt;/code&gt; и &lt;code&gt;git pull&lt;/code&gt; ) позволяет выбирать &lt;code&gt;merge strategies&lt;/code&gt; серверной части с параметром &lt;code&gt;-s&lt;/code&gt; . Некоторые стратегии также могут иметь свои собственные параметры, которые можно передать, передав аргументы &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; командам &lt;code&gt;git merge&lt;/code&gt; и / или &lt;code&gt;git pull&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa594438c3581495b74bb79c047cb66382bd8b0d" translate="yes" xml:space="preserve">
          <source>The merge workflow works by copying branches between upstream and downstream. Upstream can merge contributions into the official history; downstream base their work on the official history.</source>
          <target state="translated">Рабочий процесс слияния работает путем копирования веток между восходящими и нисходящими потоками.Upstream могут объединять вклады в официальную историю;downstream основывают свою работу на официальной истории.</target>
        </trans-unit>
        <trans-unit id="1df107645dfce75dc8613a8a0f6007cf8381d780" translate="yes" xml:space="preserve">
          <source>The merge-base command finds a common ancestor of the given commits, and always returns one or the other in the case where one is a descendant of the other; so the above output shows that e05db0fd actually is an ancestor of v1.5.0-rc1.</source>
          <target state="translated">Команда на основе слияния находит общего предка данных коммитов и всегда возвращает того или иного в случае,если один из них является потомком другого;таким образом,вышеприведенный вывод показывает,что e05db0fd на самом деле является предком v1.5.0-rc1.</target>
        </trans-unit>
        <trans-unit id="91d3bf0b3d356085e2e60914fc9a13ad2e2b8ebf" translate="yes" xml:space="preserve">
          <source>The message in a commit or a tag object is &lt;code&gt;contents&lt;/code&gt;, from which &lt;code&gt;contents:&amp;lt;part&amp;gt;&lt;/code&gt; can be used to extract various parts out of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f5c4372c6fc154ead993a9f4b5a82da922524d" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt; and command line with &lt;code&gt;-m&lt;/code&gt; are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">Сообщение, взятое из файла с &lt;code&gt;-F&lt;/code&gt; и командной строки с &lt;code&gt;-m&lt;/code&gt; , обычно используется как неизмененное сообщение тега. Эта опция позволяет вам редактировать сообщение, полученное из этих источников.</target>
        </trans-unit>
        <trans-unit id="1e2b72f6afed427d21f4e345d320e470730d82f9" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt;, command line with &lt;code&gt;-m&lt;/code&gt;, and from commit object with &lt;code&gt;-C&lt;/code&gt; are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">Сообщение, полученное из файла с &lt;code&gt;-F&lt;/code&gt; , командной строки с &lt;code&gt;-m&lt;/code&gt; и из объекта фиксации с &lt;code&gt;-C&lt;/code&gt; , обычно используется как неизмененное сообщение журнала фиксации. Эта опция позволяет вам редактировать сообщение, полученное из этих источников.</target>
        </trans-unit>
        <trans-unit id="ae16f65784862fd6e529b736650355763df13327" translate="yes" xml:space="preserve">
          <source>The method by which a submodule is updated by &lt;code&gt;git submodule update&lt;/code&gt;, which is the only affected command, others such as &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; are unaffected. It exists for historical reasons, when &lt;code&gt;git submodule&lt;/code&gt; was the only command to interact with submodules; settings like &lt;code&gt;submodule.active&lt;/code&gt; and &lt;code&gt;pull.rebase&lt;/code&gt; are more specific. It is populated by &lt;code&gt;git submodule init&lt;/code&gt; from the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file. See description of &lt;code&gt;update&lt;/code&gt; command in &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;.</source>
          <target state="translated">Метод обновления подмодуля с помощью &lt;code&gt;git submodule update&lt;/code&gt; , который является единственной затронутой командой, другие, такие как &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; , не затрагиваются. Он существует по историческим причинам, когда &lt;code&gt;git submodule&lt;/code&gt; был единственной командой для взаимодействия с подмодулями; настройки , такие как &lt;code&gt;submodule.active&lt;/code&gt; и &lt;code&gt;pull.rebase&lt;/code&gt; более специфичны. Он заполняется &lt;code&gt;git submodule init&lt;/code&gt; из &lt;a href=&quot;gitmodules&quot;&gt;файла gitmodules [5]&lt;/a&gt; . См. Описание команды &lt;code&gt;update&lt;/code&gt; в &lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04ef06b50b9899f38b1e5f5c81eb00396b6d2328" translate="yes" xml:space="preserve">
          <source>The mode parameter is optional (defaults to &lt;code&gt;all&lt;/code&gt;), and is used to specify the handling of untracked files; when -u is not used, the default is &lt;code&gt;normal&lt;/code&gt;, i.e. show untracked files and directories.</source>
          <target state="translated">Параметр режима является необязательным (по умолчанию &lt;code&gt;all&lt;/code&gt; ) и используется для указания обработки неотслеживаемых файлов; когда -u не используется, по умолчанию используется &lt;code&gt;normal&lt;/code&gt; режим, т.е. показывать неотслеживаемые файлы и каталоги.</target>
        </trans-unit>
        <trans-unit id="daee71f2e966cf5f390a0401b9f0381f1242178c" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of ignored files. It is optional: it defaults to &lt;code&gt;traditional&lt;/code&gt;.</source>
          <target state="translated">Параметр mode используется для указания обработки игнорируемых файлов. Это необязательно: по умолчанию используется &lt;code&gt;traditional&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="789771a80f50eaf70002a855307c4e88ea3d25bd" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to &lt;code&gt;all&lt;/code&gt;, and if specified, it must be stuck to the option (e.g. &lt;code&gt;-uno&lt;/code&gt;, but not &lt;code&gt;-u no&lt;/code&gt;).</source>
          <target state="translated">Параметр режима используется для указания обработки неотслеживаемых файлов. Это необязательно: по умолчанию используется &lt;code&gt;all&lt;/code&gt; , и если он указан, он должен быть привязан к опции (например, &lt;code&gt;-uno&lt;/code&gt; , но не &lt;code&gt;-u no&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d56062b3fd6eee94e49e5896b7d127ee25df01a1" translate="yes" xml:space="preserve">
          <source>The modifications stashed away by this command can be listed with &lt;code&gt;git stash list&lt;/code&gt;, inspected with &lt;code&gt;git stash show&lt;/code&gt;, and restored (potentially on top of a different commit) with &lt;code&gt;git stash apply&lt;/code&gt;. Calling &lt;code&gt;git stash&lt;/code&gt; without any arguments is equivalent to &lt;code&gt;git stash push&lt;/code&gt;. A stash is by default listed as &quot;WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;​&quot;, but you can give a more descriptive message on the command line when you create one.</source>
          <target state="translated">Изменения, спрятанные с помощью этой команды, могут быть перечислены с помощью &lt;code&gt;git stash list&lt;/code&gt; , проверены с помощью &lt;code&gt;git stash show&lt;/code&gt; и восстановлены (возможно, поверх другой фиксации) с помощью &lt;code&gt;git stash apply&lt;/code&gt; . Вызов &lt;code&gt;git stash&lt;/code&gt; без аргументов эквивалентен &lt;code&gt;git stash push&lt;/code&gt; . Тайник по умолчанию отображается как &amp;laquo;WIP на имя &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;&amp;raquo;, но вы можете дать более информативное сообщение в командной строке при его создании.</target>
        </trans-unit>
        <trans-unit id="e06fa83026ee56ec3b62a659fa5a44c6e4e4728d" translate="yes" xml:space="preserve">
          <source>The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)</source>
          <target state="translated">Путь к модулю (нужен только если httpd-это Apache).(По умолчанию:/usr/lib/apache2/modules).</target>
        </trans-unit>
        <trans-unit id="08ed4170506fa174e84f549a0e3f26086c486529" translate="yes" xml:space="preserve">
          <source>The more complex forms are:</source>
          <target state="translated">Чем сложнее формы:</target>
        </trans-unit>
        <trans-unit id="7d735293dee944ca58932a7261110828d307c793" translate="yes" xml:space="preserve">
          <source>The most common cause of dangling objects is that you&amp;rsquo;ve rebased a branch, or you have pulled from somebody else who rebased a branch&amp;mdash;​see &lt;a href=&quot;#cleaning-up-history&quot;&gt;Rewriting history and maintaining patch series&lt;/a&gt;. In that case, the old head of the original branch still exists, as does everything it pointed to. The branch pointer itself just doesn&amp;rsquo;t, since you replaced it with another one.</source>
          <target state="translated">Наиболее частая причина появления висячих объектов - это то, что вы перебазировали ветку или получили данные от кого-то еще, кто переустановил ветку - см. &lt;a href=&quot;#cleaning-up-history&quot;&gt;Перезапись истории и поддержание серии исправлений&lt;/a&gt; . В этом случае старый заголовок исходной ветки все еще существует, как и все, на что он указывал. Сам указатель ветки просто не работает, так как вы заменили его другим.</target>
        </trans-unit>
        <trans-unit id="8bc143dd44c89f63596943262174b04211332773" translate="yes" xml:space="preserve">
          <source>The multi-pack-index (MIDX for short) stores a list of objects and their offsets into multiple packfiles. It contains:</source>
          <target state="translated">Мульти-пакет-индекс (MIDX для краткости)хранит список объектов и их смещения в нескольких пакетных файлах.Он содержит:</target>
        </trans-unit>
        <trans-unit id="4ca15f678a55a1443f2d701a54958e45ad8a0235" translate="yes" xml:space="preserve">
          <source>The multi-pack-index allows many packfiles, especially in a context where repacking is expensive (such as a very large repo), or unexpected maintenance time is unacceptable (such as a high-demand build machine). However, the multi-pack-index needs to be rewritten in full every time. We can extend the format to be incremental, so writes are fast. By storing a small &quot;tip&quot; multi-pack-index that points to large &quot;base&quot; MIDX files, we can keep writes fast while still reducing the number of binary searches required for object lookups.</source>
          <target state="translated">Мультипакет-индекс позволяет использовать множество упаковочных файлов,особенно в условиях,когда переупаковка является дорогостоящей (например,очень крупный репо),или неожиданное время обслуживания недопустимо (например,строительная машина,пользующаяся большим спросом).Тем не менее,мультипакет-индекс необходимо каждый раз переписывать полностью.Мы можем расширить формат,чтобы он был инкрементальным,поэтому записи происходят быстро.Сохраняя небольшой &quot;tip&quot; мультипакет-индекс,который указывает на большие &quot;базовые&quot; MIDX-файлы,мы можем продолжать запись быстро,при этом сокращая количество бинарных поисков,необходимых для поиска объектов.</target>
        </trans-unit>
        <trans-unit id="d98c840529f1ab7c2fa3df48a823219f4ff9a17e" translate="yes" xml:space="preserve">
          <source>The multi-pack-index files refer to multiple pack-files and loose objects.</source>
          <target state="translated">Мульти-пакет-индексные файлы относятся к нескольким пакетным файлам и свободным объектам.</target>
        </trans-unit>
        <trans-unit id="1e0c8af9211e361d1a35789c37df84247f7ae9ac" translate="yes" xml:space="preserve">
          <source>The name and the e-mail address of the owner of the key that signed the push certificate.</source>
          <target state="translated">Имя и электронный адрес владельца ключа,который подписал сертификат push.</target>
        </trans-unit>
        <trans-unit id="2551d22d5e60fb51293e5ef827d3f2d640624d55" translate="yes" xml:space="preserve">
          <source>The name of a commit at which to start the new branch; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details. Defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">Имя коммита, с которого начинается новая ветка; подробности см. в &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; . По умолчанию &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0efd5464958e1be85e38672256be6f6e17bc462a" translate="yes" xml:space="preserve">
          <source>The name of a local ref which can be considered &amp;ldquo;upstream&amp;rdquo; from the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; in the same way as &lt;code&gt;refname&lt;/code&gt; above. Additionally respects &lt;code&gt;:track&lt;/code&gt; to show &quot;[ahead N, behind M]&quot; and &lt;code&gt;:trackshort&lt;/code&gt; to show the terse version: &quot;&amp;gt;&quot; (ahead), &quot;&amp;lt;&quot; (behind), &quot;&amp;lt;&amp;gt;&quot; (ahead and behind), or &quot;=&quot; (in sync). &lt;code&gt;:track&lt;/code&gt; also prints &quot;[gone]&quot; whenever unknown upstream ref is encountered. Append &lt;code&gt;:track,nobracket&lt;/code&gt; to show tracking information without brackets (i.e &quot;ahead N, behind M&quot;).</source>
          <target state="translated">Имя локальной ссылки, которую можно рассматривать как восходящую по сравнению с отображаемой ссылкой. Уважает &lt;code&gt;:short&lt;/code&gt; , &lt;code&gt;:lstrip&lt;/code&gt; и &lt;code&gt;:rstrip&lt;/code&gt; таким же образом , как &lt;code&gt;refname&lt;/code&gt; выше. Дополнительно учитывает &lt;code&gt;:track&lt;/code&gt; , чтобы показать &amp;laquo;[впереди N, позади M]&amp;raquo; и &lt;code&gt;:trackshort&lt;/code&gt; чтобы показать краткую версию: &amp;laquo;&amp;gt;&amp;raquo; (впереди), &amp;laquo;&amp;lt;&amp;raquo; (сзади), &amp;laquo;&amp;lt;&amp;gt;&amp;raquo; (впереди и сзади) или &amp;laquo; = &quot;(синхронно). &lt;code&gt;:track&lt;/code&gt; также выводит &amp;laquo;[ушел]&amp;raquo; всякий раз, когда встречается неизвестная ссылка в восходящем направлении. Добавьте &lt;code&gt;:track,nobracket&lt;/code&gt; без скобок , чтобы отображать информацию об отслеживании без скобок (например, &amp;laquo;впереди N, позади M&amp;raquo;).</target>
        </trans-unit>
        <trans-unit id="285243cf13ade280f7038dfb92bbdaa7d26dec36" translate="yes" xml:space="preserve">
          <source>The name of a local ref which represents the &lt;code&gt;@{push}&lt;/code&gt; location for the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt;, &lt;code&gt;:rstrip&lt;/code&gt;, &lt;code&gt;:track&lt;/code&gt;, &lt;code&gt;:trackshort&lt;/code&gt;, &lt;code&gt;:remotename&lt;/code&gt;, and &lt;code&gt;:remoteref&lt;/code&gt; options as &lt;code&gt;upstream&lt;/code&gt; does. Produces an empty string if no &lt;code&gt;@{push}&lt;/code&gt; ref is configured.</source>
          <target state="translated">Имя локальной ссылки, которая представляет расположение &lt;code&gt;@{push}&lt;/code&gt; для отображаемой ссылки. Уважает &lt;code&gt;:short&lt;/code&gt; , &lt;code&gt;:lstrip&lt;/code&gt; , &lt;code&gt;:rstrip&lt;/code&gt; , &lt;code&gt;:track&lt;/code&gt; , &lt;code&gt;:trackshort&lt;/code&gt; , &lt;code&gt;:remotename&lt;/code&gt; и &lt;code&gt;:remoteref&lt;/code&gt; варианты , как &lt;code&gt;upstream&lt;/code&gt; делает. Создает пустую строку, если не настроено &lt;code&gt;@{push}&lt;/code&gt; ref.</target>
        </trans-unit>
        <trans-unit id="25973fbcb02049e23787d52ffa23363b0665166c" translate="yes" xml:space="preserve">
          <source>The name of a new directory to clone into. The &quot;humanish&quot; part of the source repository is used if no directory is explicitly given (&lt;code&gt;repo&lt;/code&gt; for &lt;code&gt;/path/to/repo.git&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; for &lt;code&gt;host.xz:foo/.git&lt;/code&gt;). Cloning into an existing directory is only allowed if the directory is empty.</source>
          <target state="translated">Имя нового каталога для клонирования. &amp;laquo;Humanish&amp;raquo; часть исходного хранилища используется , если каталог не задан явно ( &lt;code&gt;repo&lt;/code&gt; для &lt;code&gt;/path/to/repo.git&lt;/code&gt; и &lt;code&gt;foo&lt;/code&gt; для &lt;code&gt;host.xz:foo/.git&lt;/code&gt; ). Клонирование в существующий каталог разрешено только в том случае, если каталог пуст.</target>
        </trans-unit>
        <trans-unit id="3c836d4cc86fbcc3a897aa8fab973465c40a1899" translate="yes" xml:space="preserve">
          <source>The name of an existing branch already in fast-import&amp;rsquo;s internal branch table. If fast-import doesn&amp;rsquo;t know the name, it&amp;rsquo;s treated as a SHA-1 expression.</source>
          <target state="translated">Имя существующей ветки уже во внутренней таблице ветвей быстрого импорта. Если fast-import не знает имени, он обрабатывается как выражение SHA-1.</target>
        </trans-unit>
        <trans-unit id="c21a579b2f8550495cd7f286a4f77b45b3df2f6e" translate="yes" xml:space="preserve">
          <source>The name of an existing branch to rename.</source>
          <target state="translated">Название существующего филиала для переименования.</target>
        </trans-unit>
        <trans-unit id="b35cfa9e6735c6918643ac8769ab4e5dd81020f0" translate="yes" xml:space="preserve">
          <source>The name of an external credential helper, and any associated options. If the helper name is not an absolute path, then the string &lt;code&gt;git
credential-&lt;/code&gt; is prepended. The resulting string is executed by the shell (so, for example, setting this to &lt;code&gt;foo --option=bar&lt;/code&gt; will execute &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; via the shell. See the manual of specific helpers for examples of their use.</source>
          <target state="translated">Имя внешнего помощника по учетным данным и все связанные параметры. Если имя помощника не является абсолютным путем, то добавляется строка &lt;code&gt;git credential-&lt;/code&gt; . Результирующая строка выполняется оболочкой (так, например, установка этого параметра на &lt;code&gt;foo --option=bar&lt;/code&gt; приведет к выполнению &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; через оболочку. Примеры их использования см. В руководстве по конкретным помощникам.</target>
        </trans-unit>
        <trans-unit id="7efaaad02f8c0d5eaaddaa5b6f8a8113410c8ef1" translate="yes" xml:space="preserve">
          <source>The name of one of the following can be used instead of a URL as &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; argument:</source>
          <target state="translated">Вместо URL в качестве аргумента &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; можно использовать имя одного из следующих :</target>
        </trans-unit>
        <trans-unit id="f54520854ea19fafb55997c9840c558f7f80fed9" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the object that is replaced. The content of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the replacement object.</source>
          <target state="translated">Имя &lt;code&gt;replace&lt;/code&gt; ссылки - это SHA-1 заменяемого объекта. Содержимое ссылки на &lt;code&gt;replace&lt;/code&gt; - это SHA-1 объекта замены.</target>
        </trans-unit>
        <trans-unit id="117daad0c937bbfd67b26eaa98382dde664a6203" translate="yes" xml:space="preserve">
          <source>The name of the branch to create or delete. The new branch name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a branch name.</source>
          <target state="translated">Имя ветки, которую нужно создать или удалить. Новое имя ветки должно пройти все проверки, определенные &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]&lt;/a&gt; . Некоторые из этих проверок могут ограничивать символы, разрешенные в имени ветки.</target>
        </trans-unit>
        <trans-unit id="f40b450a4e1f94bf798289a960712dae0a6f632b" translate="yes" xml:space="preserve">
          <source>The name of the client can be given to &lt;code&gt;git p4&lt;/code&gt; in multiple ways. The variable &lt;code&gt;git-p4.client&lt;/code&gt; takes precedence if it exists. Otherwise, normal p4 mechanisms of determining the client are used: environment variable &lt;code&gt;P4CLIENT&lt;/code&gt;, a file referenced by &lt;code&gt;P4CONFIG&lt;/code&gt;, or the local host name.</source>
          <target state="translated">Имя клиента может быть присвоено &lt;code&gt;git p4&lt;/code&gt; несколькими способами. Переменная &lt;code&gt;git-p4.client&lt;/code&gt; имеет приоритет, если она существует. В противном случае используются обычные механизмы p4 для определения клиента: переменная среды &lt;code&gt;P4CLIENT&lt;/code&gt; , файл, на который ссылается &lt;code&gt;P4CONFIG&lt;/code&gt; , или имя локального хоста.</target>
        </trans-unit>
        <trans-unit id="d25f4900ca4ac26428c337fc8a49a0fffaa87baa" translate="yes" xml:space="preserve">
          <source>The name of the current branch is stored in .git/HEAD.</source>
          <target state="translated">Имя текущей ветки хранится в файле .git/HEAD.</target>
        </trans-unit>
        <trans-unit id="9192c74ec25457f29baaadaeb1d2b767ba20ddac" translate="yes" xml:space="preserve">
          <source>The name of the local ref being pushed, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the local ref is omitted.</source>
          <target state="translated">Имя отправляемой локальной ссылки за вычетом ее префикса &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; . В случае удаления имя локальной ссылки опускается.</target>
        </trans-unit>
        <trans-unit id="61c75d700127b0c70d569d247bca51622e343006" translate="yes" xml:space="preserve">
          <source>The name of the local ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">Имя обновляемого локального ref за вычетом его префикса &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40299b8374a45bc90296f421fddf5763cb8c6908" translate="yes" xml:space="preserve">
          <source>The name of the object to show. For a more complete list of ways to spell object names, see the &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">Имя отображаемого объекта. Более полный список способов &lt;a href=&quot;gitrevisions&quot;&gt;написания&lt;/a&gt; имен объектов см. В разделе &amp;laquo;УКАЗАНИЕ ИЗМЕНЕНИЙ&amp;raquo; в gitrevisions [7] .</target>
        </trans-unit>
        <trans-unit id="15cfdda92a704493f44c3f6bda85fdb4fe25cc87" translate="yes" xml:space="preserve">
          <source>The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append &lt;code&gt;:short&lt;/code&gt;. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; (&lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt;) is appended, strips &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; slash-separated path components from the front (back) of the refname (e.g. &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). If &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is a negative number, strip as many path components as necessary from the specified end to leave &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; path components (e.g. &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;tags/foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). When the ref does not have enough components, the result becomes an empty string if stripping with positive &amp;lt;N&amp;gt;, or it becomes the full refname if stripping with negative &amp;lt;N&amp;gt;. Neither is an error.</source>
          <target state="translated">Имя ссылки (часть после $ GIT_DIR /). Для недвусмысленного краткого имени ссылки добавьте &lt;code&gt;:short&lt;/code&gt; . Параметр core.warnAmbiguousRefs используется для выбора режима строгого сокращения. Если &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; ( &lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt; ) добавляется, полосы &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; прорезных разделенные компоненты пути от передней (задней) части refname (например , &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; поворачивает &lt;code&gt;refs/tags/foo&lt;/code&gt; в &lt;code&gt;foo&lt;/code&gt; и &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; превращает &lt;code&gt;refs/tags/foo&lt;/code&gt; в &lt;code&gt;refs&lt;/code&gt; ). Если &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; - отрицательное число, удалите столько компонентов пути, сколько необходимо с указанного конца, чтобы оставить &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; компоненты пути (например, &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; превращает &lt;code&gt;refs/tags/foo&lt;/code&gt; в &lt;code&gt;tags/foo&lt;/code&gt; , а &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; превращает &lt;code&gt;refs/tags/foo&lt;/code&gt; в &lt;code&gt;refs&lt;/code&gt; ). Когда в ссылке недостаточно компонентов, результатом становится пустая строка при удалении с положительным &amp;lt;N&amp;gt; или полное имя ссылки при удалении с отрицательным &amp;lt;N&amp;gt;. Это тоже не ошибка.</target>
        </trans-unit>
        <trans-unit id="d3667dc69f3d60260150d30873ae903291e9c610" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being fetched from, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the remote ref is &quot;(none)&quot;.</source>
          <target state="translated">Имя извлекаемого удаленного ref за вычетом его префикса &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; . В случае удаления имя удаленного ссылки - &amp;laquo;(нет)&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="f1e1380262032f81dbdd04e4a724dd0dac2f66a0" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">Имя обновляемого удаленного ref за вычетом его префикса &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4541cb8cb079b50ad15e3d46e62cd66b37316e42" translate="yes" xml:space="preserve">
          <source>The name of the remote to create when cloning a repository. Defaults to &lt;code&gt;origin&lt;/code&gt;, and can be overridden by passing the &lt;code&gt;--origin&lt;/code&gt; command-line option to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1208454bdf4c7c5a0ab602103e6dd838ca212a" translate="yes" xml:space="preserve">
          <source>The name of the repository in gitweb is the path to its &lt;code&gt;$GIT_DIR&lt;/code&gt; (its object database) relative to &lt;code&gt;$projectroot&lt;/code&gt;. Therefore the repository $repo can be found at &quot;$projectroot/$repo&quot;.</source>
          <target state="translated">Имя репозитория в gitweb - это путь к его &lt;code&gt;$GIT_DIR&lt;/code&gt; (его объектной базе данных) относительно &lt;code&gt;$projectroot&lt;/code&gt; . Поэтому репозиторий $ repo можно найти по адресу &amp;laquo;$ projectroot / $ repo&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="1b6cc45302b6351d18e813818cde0845c0a5a22a" translate="yes" xml:space="preserve">
          <source>The name of the tag to create, delete, or describe. The new tag name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a tag name.</source>
          <target state="translated">Имя тега, который нужно создать, удалить или описать. Новое имя тега должно пройти все проверки, определенные &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]&lt;/a&gt; . Некоторые из этих проверок могут ограничивать символы, разрешенные в имени тега.</target>
        </trans-unit>
        <trans-unit id="964fd80a7ebc3b646125e059ac3c7f8c3a22061f" translate="yes" xml:space="preserve">
          <source>The named branches will be interpreted as if specified with the &lt;code&gt;-t&lt;/code&gt; option on the &lt;code&gt;git remote add&lt;/code&gt; command line.</source>
          <target state="translated">Именованные ветки будут интерпретироваться так, как если бы они были указаны с параметром &lt;code&gt;-t&lt;/code&gt; в командной строке &lt;code&gt;git remote add&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a7226417649eb7c8f42ca4934a290033c08aad1c" translate="yes" xml:space="preserve">
          <source>The names of objects to show (defaults to &lt;code&gt;HEAD&lt;/code&gt;). For a more complete list of ways to spell object names, see &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">Имена отображаемых объектов (по умолчанию &lt;code&gt;HEAD&lt;/code&gt; ). Более полный список способов &lt;a href=&quot;gitrevisions&quot;&gt;написания&lt;/a&gt; имен объектов см. В разделе &amp;laquo;УКАЗАНИЕ ИЗМЕНЕНИЙ&amp;raquo; в gitrevisions [7] .</target>
        </trans-unit>
        <trans-unit id="df439b2df93c9264d2652e8aa379f62f3b6ab5ac" translate="yes" xml:space="preserve">
          <source>The names of refs that are fetched, together with the object names they point at, are written to &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;. This information may be used by scripts or other git commands, such as &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">Имена &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; вместе с именами объектов, на которые они указывают, записываются в .git / FETCH_HEAD . Эта информация может использоваться скриптами или другими командами git, такими как &lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b9c4b549f992b26edb42d00411780a65661d81d" translate="yes" xml:space="preserve">
          <source>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</source>
          <target state="translated">Нативный транспорт (например,git://URL)не производит аутентификацию и должен использоваться с осторожностью в незащищенных сетях.</target>
        </trans-unit>
        <trans-unit id="86d32cda4c46d201605240981feec896fb3daceb" translate="yes" xml:space="preserve">
          <source>The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.</source>
          <target state="translated">Новая глава филиала укажет на этот коммит.Он может быть указан в качестве имени ответвления,дополнения к коммиту или метки.Если эта опция опущена,вместо неё будет использоваться текущий HEAD.</target>
        </trans-unit>
        <trans-unit id="597e47a48a8bd8b3528838dd5cebedeb7b241f60" translate="yes" xml:space="preserve">
          <source>The new name for an existing branch. The same restrictions as for &amp;lt;branchname&amp;gt; apply.</source>
          <target state="translated">Новое имя существующей ветки. Применяются те же ограничения, что и для &amp;lt;branchname&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="05a068e20a6ba11ea4fd1dbaef65a93e78041978" translate="yes" xml:space="preserve">
          <source>The new stash entry records the modified states only for the files that match the pathspec. The index entries and working tree files are then rolled back to the state in HEAD only for these files, too, leaving files that do not match the pathspec intact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade318097a09c67b5bdaa6c1344cf2a281d7cac8" translate="yes" xml:space="preserve">
          <source>The next parameter is the pattern. This option has to be used for patterns starting with &lt;code&gt;-&lt;/code&gt; and should be used in scripts passing user input to grep. Multiple patterns are combined by &lt;code&gt;or&lt;/code&gt;.</source>
          <target state="translated">Следующий параметр - это узор. Этот параметр должен использоваться для шаблонов, начинающихся с &lt;code&gt;-&lt;/code&gt; , и должен использоваться в сценариях, передающих ввод пользователя в grep. Несколько шаблонов объединяются с помощью &lt;code&gt;or&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="00f28e3b882b5553d45ceeb08082d3dcda522dd0" translate="yes" xml:space="preserve">
          <source>The next step of merging is to merge these three versions of the file, using 3-way merge. This is done by giving &lt;code&gt;git merge-one-file&lt;/code&gt; command as one of the arguments to &lt;code&gt;git merge-index&lt;/code&gt; command:</source>
          <target state="translated">Следующим шагом слияния является слияние этих трех версий файла с помощью 3-стороннего слияния. Для этого нужно &lt;code&gt;git merge-index&lt;/code&gt; команду &lt;code&gt;git merge-one-file&lt;/code&gt; в качестве одного из аргументов команды git merge-index :</target>
        </trans-unit>
        <trans-unit id="c203649e7405cacf1f66f3229b4d864ccf1b5f34" translate="yes" xml:space="preserve">
          <source>The nonce string the process asked the signer to include in the push certificate. If this does not match the value recorded on the &quot;nonce&quot; header in the push certificate, it may indicate that the certificate is a valid one that is being replayed from a separate &quot;git push&quot; session.</source>
          <target state="translated">Строка nonce,которую процесс попросил подписать сертификат,должна быть включена в сертификат push.Если она не совпадает со значением,записанным в заголовке &quot;nonce&quot; в сертификате push,это может указывать на то,что сертификат является действительным,который проигрывается с отдельного сеанса &quot;git push&quot;.</target>
        </trans-unit>
        <trans-unit id="a81eae6f204563324e9f0299e6e5a18af11339c2" translate="yes" xml:space="preserve">
          <source>The normal format target is a tradition printf format and similar to GIT_TRACE format. This format is enabled with the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable or the &lt;code&gt;trace2.normalTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">Целевым объектом нормального формата является традиционный формат printf, аналогичный формату GIT_TRACE. Этот формат включен с &lt;code&gt;GIT_TRACE2&lt;/code&gt; переменной окружения или &lt;code&gt;trace2.normalTarget&lt;/code&gt; системы или глобальные настройки конфигурации.</target>
        </trans-unit>
        <trans-unit id="08867837836724d3f4c3cfbd7d03fa5d964eec62" translate="yes" xml:space="preserve">
          <source>The number of additional commits is the number of commits which would be displayed by &quot;git log v1.0.4..parent&quot;. The hash suffix is &quot;-g&quot; + unambiguous abbreviation for the tip commit of parent (which was &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt;). The &quot;g&quot; prefix stands for &quot;git&quot; and is used to allow describing the version of a software depending on the SCM the software is managed with. This is useful in an environment where people may use different SCMs.</source>
          <target state="translated">Количество дополнительных коммитов - это количество коммитов, которое будет отображаться &quot;git log v1.0.4..parent&quot;. Суффикс хеш-функции - &quot;-g&quot; + однозначное сокращение для &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt; фиксации родительского элемента ( 2414721b194453f058079d897d13c4e377f92dc6 ). Префикс &amp;laquo;g&amp;raquo; означает &amp;laquo;git&amp;raquo; и используется для описания версии программного обеспечения в зависимости от SCM, с помощью которого программное обеспечение управляется. Это полезно в среде, где люди могут использовать разные SCM.</target>
        </trans-unit>
        <trans-unit id="83386653d6009935020ea78a4c28a793cc5fa198" translate="yes" xml:space="preserve">
          <source>The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.</source>
          <target state="translated">Количество сеансов скручивания (подсчитывается по слотам),которое должно сохраняться по запросам.Они не будут завершаться функцией curl_easy_cleanup()до тех пор,пока не будет вызвана http_cleanup().Если USE_CURL_MULTI не определено,то это значение будет ограничено значением 1.По умолчанию 1.</target>
        </trans-unit>
        <trans-unit id="eb593ed0188a165abaa2fc9b58825ac993fcfa11" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">Количество файлов,которые необходимо учитывать при определении переименования при слиянии;если не указано,по умолчанию установлено значение diff.renameLimit.Этот параметр не действует,если обнаружение переименования отключено.</target>
        </trans-unit>
        <trans-unit id="b49ca7e6ecad75b8cf0b0ec3dcf469e017a13140" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection in &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. Defaults to the value of diff.renameLimit.</source>
          <target state="translated">Количество файлов, которые следует учитывать при выполнении обнаружения переименования в &lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt; и &lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt; . По умолчанию используется значение diff.renameLimit.</target>
        </trans-unit>
        <trans-unit id="62caddb975571c60931b3e5e41910f9ec3dfea6e" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing the copy/rename detection; equivalent to the &lt;code&gt;git diff&lt;/code&gt; option &lt;code&gt;-l&lt;/code&gt;. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">Количество файлов, которые следует учитывать при выполнении обнаружения копирования / переименования; эквивалент опции &lt;code&gt;git diff&lt;/code&gt; &lt;code&gt;-l&lt;/code&gt; . Этот параметр не действует, если отключено определение переименования.</target>
        </trans-unit>
        <trans-unit id="f40a726880d5eda55c8da498a0add02c8ea2a7b1" translate="yes" xml:space="preserve">
          <source>The number of push options given on the command line of &lt;code&gt;git push --push-option=...&lt;/code&gt; can be read from the environment variable &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt;, and the options themselves are found in &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt;, &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt;,&amp;hellip;​ If it is negotiated to not use the push options phase, the environment variables will not be set. If the client selects to use push options, but doesn&amp;rsquo;t transmit any, the count variable will be set to zero, &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt;.</source>
          <target state="translated">Количество параметров push, заданных в командной строке &lt;code&gt;git push --push-option=...&lt;/code&gt; , можно прочитать из переменной среды &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt; , а сами параметры находятся в &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt; , &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt; ,&amp;hellip; Если согласовано, чтобы не используйте фазу push-параметров, переменные среды не будут установлены. Если клиент выбирает использование опций push, но не передает их, переменная count будет установлена ​​в ноль, &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5ad10bd3ab58adc794f2122271c46d58529bef4" translate="yes" xml:space="preserve">
          <source>The number of spaces between columns. One space by default.</source>
          <target state="translated">Количество промежутков между колоннами.Один пробел по умолчанию.</target>
        </trans-unit>
        <trans-unit id="911462b0802b22317c5a57a0a0510dbf0c397a66" translate="yes" xml:space="preserve">
          <source>The number of submodules fetched at the same time. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">Количество подмодулей, загружаемых одновременно. По умолчанию используется параметр &lt;code&gt;submodule.fetchJobs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34de3b8749bfae0c14ff8d34783f05c9920748b5" translate="yes" xml:space="preserve">
          <source>The object can be a blob or a submodule commit. It implies the &lt;code&gt;-t&lt;/code&gt; option in &lt;code&gt;git-log&lt;/code&gt; to also find trees.</source>
          <target state="translated">Объектом может быть большой двоичный объект или фиксация подмодуля. Это подразумевает параметр &lt;code&gt;-t&lt;/code&gt; в &lt;code&gt;git-log&lt;/code&gt; , чтобы также находить деревья.</target>
        </trans-unit>
        <trans-unit id="2794f5933199b4937a09c41b8d049f6b88620c25" translate="yes" xml:space="preserve">
          <source>The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.</source>
          <target state="translated">Объектная база данных содержит объекты трёх основных типов:блобы,содержащие файловые данные;деревья,указывающие на блобы и другие деревья для построения иерархии каталогов;и коммиты,каждый из которых ссылается на одно дерево и некоторое количество родительских коммитов.</target>
        </trans-unit>
        <trans-unit id="b5ea163b65a2243d9fc238d7c50700c517adc350" translate="yes" xml:space="preserve">
          <source>The object database is the rather elegant system used to store the history of your project&amp;mdash;​files, directories, and commits.</source>
          <target state="translated">База данных объектов - довольно элегантная система, используемая для хранения истории вашего проекта - файлов, каталогов и коммитов.</target>
        </trans-unit>
        <trans-unit id="db080c7937810b605e4381605a2e18077b89e3c0" translate="yes" xml:space="preserve">
          <source>The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append &lt;code&gt;:short&lt;/code&gt;. For an abbreviation of the object name with desired length append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt;, where the minimum length is MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.</source>
          <target state="translated">Имя объекта (также известное как SHA-1). Для однозначного сокращения имени объекта добавьте &lt;code&gt;:short&lt;/code&gt; . Для сокращения имени объекта с желаемой длиной добавьте &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt; , где минимальная длина - MINIMUM_ABBREV. Длина может быть превышена для обеспечения уникальных имен объектов.</target>
        </trans-unit>
        <trans-unit id="b335d1a75376848bee9affb50a6203b316fcc02d" translate="yes" xml:space="preserve">
          <source>The object referenced by &amp;lt;src&amp;gt; is used to update the &amp;lt;dst&amp;gt; reference on the remote side. Whether this is allowed depends on where in &lt;code&gt;refs/*&lt;/code&gt; the &amp;lt;dst&amp;gt; reference lives as described in detail below, in those sections &quot;update&quot; means any modifications except deletes, which as noted after the next few sections are treated differently.</source>
          <target state="translated">Объект, на который ссылается &amp;lt;src&amp;gt;, используется для обновления ссылки &amp;lt;dst&amp;gt; на удаленной стороне. Разрешено ли это, зависит от того, где в &lt;code&gt;refs/*&lt;/code&gt; находится ссылка &amp;lt;dst&amp;gt;, как подробно описано ниже, в этих разделах &amp;laquo;обновление&amp;raquo; означает любые модификации, кроме удалений, которые, как указано после следующих нескольких разделов, обрабатываются по-разному.</target>
        </trans-unit>
        <trans-unit id="afdbad7acf93ca3457880eb431fd58ab07141e11" translate="yes" xml:space="preserve">
          <source>The object table is actually a hashtable keyed on the object name (the unique SHA-1). This storage configuration allows fast-import to reuse an existing or already written object and avoid writing duplicates to the output packfile. Duplicate blobs are surprisingly common in an import, typically due to branch merges in the source.</source>
          <target state="translated">Таблица объектов на самом деле является хэш-таблицей,к которой привязано имя объекта (уникальный SHA-1).Такая конфигурация хранения позволяет быстро импортировать данные для повторного использования существующего или уже записанного объекта и избежать записи дубликатов в файл выходного пакета.Дубликаты на удивление часто встречаются при импорте,как правило,из-за слияния ветвей в исходном тексте.</target>
        </trans-unit>
        <trans-unit id="0b16e9c4d73790474d293fcd4d96547c235d7d1f" translate="yes" xml:space="preserve">
          <source>The object that the new tag will refer to, usually a commit. Defaults to HEAD.</source>
          <target state="translated">Объект,на который будет ссылаться новый тег,обычно коммит.По умолчанию HEAD.</target>
        </trans-unit>
        <trans-unit id="5468420c6f62137502c6bb00574138b237765047" translate="yes" xml:space="preserve">
          <source>The object type may be a blob, representing the contents of a file, or another tree, representing the contents of a subdirectory. Since trees and blobs, like all other objects, are named by the SHA-1 hash of their contents, two trees have the same SHA-1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical. This allows Git to quickly determine the differences between two related tree objects, since it can ignore any entries with identical object names.</source>
          <target state="translated">Типом объекта может быть блок,представляющий содержимое файла,или другое дерево,представляющее содержимое поддиректории.Так как деревья и блобы,как и все остальные объекты,именуются по SHA-1 хэшу их содержимого,то два дерева имеют одно и то же SHA-1 имя,если и только в том случае,если их содержимое (включая,рекурсивно,содержимое всех подкаталогов)идентично.Это позволяет Git'у быстро определить различия между двумя связанными объектами дерева,так как он может игнорировать любые записи с одинаковыми именами объектов.</target>
        </trans-unit>
        <trans-unit id="abf9c48e6cb6157bcc4ecdd7fbfd1167ee2a4bc5" translate="yes" xml:space="preserve">
          <source>The object types in some more detail:</source>
          <target state="translated">Объекты типизируются более подробно:</target>
        </trans-unit>
        <trans-unit id="1aa11fdf087f0d8d0d32eb67b923b0efa29ecf46" translate="yes" xml:space="preserve">
          <source>The objects are output in the order in which they are found in the index file, which should be (in a correctly constructed file) sorted by object id.</source>
          <target state="translated">Объекты выводятся в порядке их нахождения в индексном файле,который должен быть (в правильно построенном файле)отсортирован по идентификатору объекта.</target>
        </trans-unit>
        <trans-unit id="113c9617d3615ff46d1de3788621403d384bc970" translate="yes" xml:space="preserve">
          <source>The official repository of the &lt;code&gt;git gui&lt;/code&gt; project can be found at:</source>
          <target state="translated">Официальный репозиторий проекта &lt;code&gt;git gui&lt;/code&gt; можно найти по адресу:</target>
        </trans-unit>
        <trans-unit id="d2925f4342d92a06228b4eeddfbffd0ada540f91" translate="yes" xml:space="preserve">
          <source>The one commit in this list that is not related to CMake may very well have been motivated by working on fixing all those bugs introduced by switching to CMake, but it addresses a different concern. To split this branch into two topic branches, the todo list could be edited like this:</source>
          <target state="translated">Единственный коммит в этом списке,не связанный с CMake,возможно,был очень хорошо мотивирован работой по исправлению всех тех ошибок,которые были введены при переходе на CMake,но он решает другую проблему.Чтобы разделить эту ветку на две тематические ветки,можно отредактировать список todo таким образом:</target>
        </trans-unit>
        <trans-unit id="680930999bd0e3bf9880124c135a89bca3a329f3" translate="yes" xml:space="preserve">
          <source>The oneline descriptions are purely for your pleasure; &lt;code&gt;git rebase&lt;/code&gt; will not look at them but at the commit names (&quot;deadbee&quot; and &quot;fa1afe1&quot; in this example), so do not delete or edit the names.</source>
          <target state="translated">Однострочные описания предназначены исключительно для вашего удовольствия; &lt;code&gt;git rebase&lt;/code&gt; будет смотреть не на них, а на имена коммитов (&amp;laquo;deadbee&amp;raquo; и &amp;laquo;fa1afe1&amp;raquo; в этом примере), поэтому не удаляйте и не редактируйте имена.</target>
        </trans-unit>
        <trans-unit id="b174b5f513a45da66bee660cec63368b38af2a1f" translate="yes" xml:space="preserve">
          <source>The only difference between this command and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt; is that they use slightly different output formats, and this command exists only for backward compatibility to support existing scripts, and provide a more familiar command name for people coming from other SCM systems.</source>
          <target state="translated">Единственное различие между этой командой и &lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt; состоит в том, что они используют несколько разные форматы вывода, и эта команда существует только для обратной совместимости для поддержки существующих сценариев и предоставления более знакомого имени команды для людей, работающих с другими системами SCM.</target>
        </trans-unit>
        <trans-unit id="82fa629da6adc18439c1d9295d8f644e8391fd9b" translate="yes" xml:space="preserve">
          <source>The only safe place to make these changes is on the remote repository (i.e., the Git server), usually in the &lt;code&gt;pre-receive&lt;/code&gt; hook or in a continuous integration (CI) system. These are the locations in which policy can be enforced effectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90482aceb580582ec33d188b8fb1bca29f8136a1" translate="yes" xml:space="preserve">
          <source>The option can have the following values, defaulting to &lt;code&gt;group&lt;/code&gt; if no value is given:</source>
          <target state="translated">Параметр может иметь следующие значения, по умолчанию для &lt;code&gt;group&lt;/code&gt; если значение не указано:</target>
        </trans-unit>
        <trans-unit id="72a352b7174eb63582b749d1295b267e0dae9887" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;limit&amp;gt; is useful in cases where your topic is based on other work that is not in upstream. Expanding on the previous example, this might look like:</source>
          <target state="translated">Необязательный &amp;lt;limit&amp;gt; полезен в случаях, когда ваша тема основана на другой работе, не относящейся к апстриму. Если продолжить предыдущий пример, это может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="4136e1c0c625091f77db10ec0b76e55e39fdb1b6" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;style&amp;gt; argument can be either &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one.</source>
          <target state="translated">Необязательный аргумент &amp;lt;style&amp;gt; может быть &lt;code&gt;shallow&lt;/code&gt; или &lt;code&gt;deep&lt;/code&gt; . &lt;code&gt;shallow&lt;/code&gt; цепочка делает каждое письмо ответом на начало серии, где заголовок выбирается из сопроводительного письма, &lt;code&gt;--in-reply-to&lt;/code&gt; и первого патча в этом порядке. &lt;code&gt;deep&lt;/code&gt; цепочка делает каждое письмо ответом на предыдущее.</target>
        </trans-unit>
        <trans-unit id="3dd98bdacd886ba292b303baaba2ecefebed8bab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; command indicates the encoding of the commit message. Most commits are UTF-8 and the encoding is omitted, but this allows importing commit messages into git without first reencoding them.</source>
          <target state="translated">Необязательная команда &lt;code&gt;encoding&lt;/code&gt; указывает кодировку сообщения фиксации. Большинство коммитов - это UTF-8, и кодировка опущена, но это позволяет импортировать сообщения коммитов в git без предварительного их перекодирования.</target>
        </trans-unit>
        <trans-unit id="f1f596d4ea27770161ef3ea6df226eac8321e34f" translate="yes" xml:space="preserve">
          <source>The optional GPG signature of the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ae75c1b10bf71d7e20ef9926e29585fa74a2e0" translate="yes" xml:space="preserve">
          <source>The optional argument &amp;lt;path&amp;gt; is the relative location for the cloned submodule to exist in the superproject. If &amp;lt;path&amp;gt; is not given, the canonical part of the source repository is used (&quot;repo&quot; for &quot;/path/to/repo.git&quot; and &quot;foo&quot; for &quot;host.xz:foo/.git&quot;). If &amp;lt;path&amp;gt; exists and is already a valid Git repository, then it is staged for commit without cloning. The &amp;lt;path&amp;gt; is also used as the submodule&amp;rsquo;s logical name in its configuration entries unless &lt;code&gt;--name&lt;/code&gt; is used to specify a logical name.</source>
          <target state="translated">Необязательный аргумент &amp;lt;path&amp;gt; - это относительное местоположение клонированного подмодуля, существующего в суперпроекте. Если &amp;lt;path&amp;gt; не указан, используется каноническая часть исходного репозитория (&amp;laquo;репо&amp;raquo; для &amp;laquo;/path/to/repo.git&amp;raquo; и &amp;laquo;foo&amp;raquo; для &amp;laquo;host.xz: foo / .git&amp;raquo;). Если &amp;lt;path&amp;gt; существует и уже является допустимым репозиторием Git, то он готовится к фиксации без клонирования. &amp;lt;path&amp;gt; также используется как логическое имя подмодуля в его записях конфигурации, если &lt;code&gt;--name&lt;/code&gt; не используется для указания логического имени.</target>
        </trans-unit>
        <trans-unit id="476c5c2c4870d6be72c4d31b42e1450136c51807" translate="yes" xml:space="preserve">
          <source>The optional configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt; indicates a path to a file containing patterns of file names to exclude, similar to &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;. Patterns in the exclude file are used in addition to those in &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">Необязательная переменная конфигурации &lt;code&gt;core.excludesFile&lt;/code&gt; указывает путь к файлу, содержащему шаблоны имен файлов для исключения, аналогично &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; . Шаблоны в файле исключения используются в дополнение к &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; в $ GIT_DIR / info / exclude .</target>
        </trans-unit>
        <trans-unit id="ad80c43bd988ae6e6061dfab8a056d2afaee7691" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;--contains&lt;/code&gt;, &lt;code&gt;--no-contains&lt;/code&gt;, &lt;code&gt;--merged&lt;/code&gt; and &lt;code&gt;--no-merged&lt;/code&gt; serve four related but different purposes:</source>
          <target state="translated">Параметры &lt;code&gt;--contains&lt;/code&gt; , --no &lt;code&gt;--no-contains&lt;/code&gt; , &lt;code&gt;--merged&lt;/code&gt; и --no &lt;code&gt;--no-merged&lt;/code&gt; служат для четырех связанных, но разных целей:</target>
        </trans-unit>
        <trans-unit id="081a3bdc8213b4774c97cebf32978af69c3476cb" translate="yes" xml:space="preserve">
          <source>The order of stages 1, 2 and 3 (hence the order of three &amp;lt;tree-ish&amp;gt; command-line arguments) are significant when you start a 3-way merge with an index file that is already populated. Here is an outline of how the algorithm works:</source>
          <target state="translated">Порядок этапов 1, 2 и 3 (отсюда порядок трех аргументов командной строки &amp;lt;tree-ish&amp;gt;) важен, когда вы начинаете трехстороннее слияние с уже заполненным индексным файлом. Вот краткое описание того, как работает алгоритм:</target>
        </trans-unit>
        <trans-unit id="3fb57cf5101f783ba73fc6eba17ed42ef2940627" translate="yes" xml:space="preserve">
          <source>The order of the flags used to matter, but not anymore.</source>
          <target state="translated">Раньше порядок следования флагов имел значение,но теперь уже нет.</target>
        </trans-unit>
        <trans-unit id="32a54a6aa8ff67e3d76c47c6fabd2affc1e5cbb5" translate="yes" xml:space="preserve">
          <source>The origin of lines is automatically followed across whole-file renames (currently there is no option to turn the rename-following off). To follow lines moved from one file to another, or to follow lines that were copied and pasted from another file, etc., see the &lt;code&gt;-C&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt; options.</source>
          <target state="translated">При переименовании всего файла автоматически отслеживается происхождение строк (в настоящее время нет возможности отключить отслеживание переименования). Чтобы следить за строками, перемещенными из одного файла в другой, или за строками, которые были скопированы и вставлены из другого файла и т. Д., См. &lt;code&gt;-C&lt;/code&gt; и &lt;code&gt;-M&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b66619a4ae8f145d6aac4431781b08d6ac86597a" translate="yes" xml:space="preserve">
          <source>The origin revision can be changed with the &quot;--origin&quot; option.</source>
          <target state="translated">Ревизия начала отсчета может быть изменена с помощью опции &quot;--начало&quot;.</target>
        </trans-unit>
        <trans-unit id="617fe8d1d55cfe9ccc09f76fcfa190410b239da3" translate="yes" xml:space="preserve">
          <source>The original format used by Greg Kroah-Hartman&amp;rsquo;s &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; script</source>
          <target state="translated">Исходный формат, используемый скриптом Грега Кроа-Хартмана &lt;code&gt;send_lots_of_email.pl&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7a5cdcdcd4d6fcaaf02e53acebd8443c9b015da" translate="yes" xml:space="preserve">
          <source>The original job of &lt;code&gt;git rev-parse&lt;/code&gt; is now taken by the function &lt;code&gt;setup_revisions()&lt;/code&gt;, which parses the revisions and the common command-line options for the revision walker. This information is stored in the struct &lt;code&gt;rev_info&lt;/code&gt; for later consumption. You can do your own command-line option parsing after calling &lt;code&gt;setup_revisions()&lt;/code&gt;. After that, you have to call &lt;code&gt;prepare_revision_walk()&lt;/code&gt; for initialization, and then you can get the commits one by one with the function &lt;code&gt;get_revision()&lt;/code&gt;.</source>
          <target state="translated">Первоначальную работу &lt;code&gt;git rev-parse&lt;/code&gt; теперь выполняет функция &lt;code&gt;setup_revisions()&lt;/code&gt; , которая анализирует версии и общие параметры командной строки для обходчика версий. Эта информация сохраняется в структуре &lt;code&gt;rev_info&lt;/code&gt; для дальнейшего использования. Вы можете выполнить собственный синтаксический анализ параметров командной строки после вызова &lt;code&gt;setup_revisions()&lt;/code&gt; . После этого вы должны вызвать &lt;code&gt;prepare_revision_walk()&lt;/code&gt; для инициализации, а затем вы можете получать коммиты один за другим с помощью функции &lt;code&gt;get_revision()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c9da327e28b59015cec84abd98a33aec635328d" translate="yes" xml:space="preserve">
          <source>The original tags are not deleted, but can be overwritten; use &quot;--tag-name-filter cat&quot; to simply update the tags. In this case, be very careful and make sure you have the old tags backed up in case the conversion has run afoul.</source>
          <target state="translated">Оригинальные теги не удаляются,но могут быть перезаписаны;используйте &quot;--tag-name-filter cat&quot; для простого обновления тегов.В этом случае,будьте очень осторожны и убедитесь,что у вас есть резервная копия старых тегов на случай,если преобразование прошло неудачно.</target>
        </trans-unit>
        <trans-unit id="6c2cf73d4477ea65ac2368f08dedbcc07c9eafb4" translate="yes" xml:space="preserve">
          <source>The other nice thing with test suites, is that when you have one, you already know how to test for bad behavior. So you can use this knowledge to create a new test case for &quot;git bisect&quot; when it appears that there is a regression. So it will be easier to bisect the bug and fix it. And then you can add the test case you just created to your test suite.</source>
          <target state="translated">Другая приятная вещь с тестовыми наборами,это то,что когда у тебя есть такой набор,ты уже знаешь,как проверить на плохое поведение.Таким образом,вы можете использовать эти знания для создания нового тестового случая &quot;git-бисекта&quot;,когда кажется,что есть регрессия.Так что будет проще бисектировать ошибку и исправлять её.А затем вы можете добавить только что созданный тестовый кейс в свой набор тестов.</target>
        </trans-unit>
        <trans-unit id="94bda500b4b5c47f0218909469e6ab7f1eee52b6" translate="yes" xml:space="preserve">
          <source>The other way to drive the bisection process is to tell &quot;git bisect&quot; to launch a script or command at each bisection step to know if the current commit is &quot;good&quot; or &quot;bad&quot;. To do that, we use the &quot;git bisect run&quot; command. For example:</source>
          <target state="translated">Другой способ управления биссектрисным процессом-сказать &quot;git-бисексуалу&quot; о запуске скрипта или команды на каждом биссектрисном шаге,чтобы узнать,является ли текущий коммит &quot;хорошим&quot; или &quot;плохим&quot;.Для этого мы используем команду &quot;запуск бисекта git'а&quot;.Например:</target>
        </trans-unit>
        <trans-unit id="013b9f528101f55f667633859403afae697697c4" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable (see below). If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">Формат вывода изменен для машинного анализа (см. Ниже). Если также указан &lt;code&gt;--stdin&lt;/code&gt; , пути ввода разделяются символом NUL вместо символа перевода строки.</target>
        </trans-unit>
        <trans-unit id="4ebdc78d172a0b82e38a898aa2ae716344def4d5" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable. If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">Формат вывода изменен для машинного анализа. Если также указан &lt;code&gt;--stdin&lt;/code&gt; , пути ввода разделяются символом NUL вместо символа перевода строки.</target>
        </trans-unit>
        <trans-unit id="885a3d9b027501a3f7ddd2554d827f984cacfcf5" translate="yes" xml:space="preserve">
          <source>The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.</source>
          <target state="translated">Формат вывода аналогичен формату &quot;Фарфор&quot;,но он не содержит фактических строк из файла,который аннотируется.</target>
        </trans-unit>
        <trans-unit id="16ca2e6d144e9c4d47f91cfe57ded6c4b6f874af" translate="yes" xml:space="preserve">
          <source>The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.</source>
          <target state="translated">Вывод этой команды предназначен для использования в качестве шаблонного комментария коммита.По умолчанию,длинный формат,рассчитан на то,чтобы быть удобочитаемым,многословным и описательным.Его содержание и формат могут быть изменены в любое время.</target>
        </trans-unit>
        <trans-unit id="467b04ab4f0f42e5eb4db50995625d7a06a04bbc" translate="yes" xml:space="preserve">
          <source>The output is in the format: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Вывод имеет формат: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="297e105083265b9b5df9c784faa30006468bc5fd" translate="yes" xml:space="preserve">
          <source>The output is of the form: &amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</source>
          <target state="translated">Вывод имеет вид: &amp;lt;путь&amp;gt; COLON SP &amp;lt;атрибут&amp;gt; COLON SP &amp;lt;info&amp;gt; LF.</target>
        </trans-unit>
        <trans-unit id="00d47eecfb8e7c432b9a2a4461da0aa0b0a14445" translate="yes" xml:space="preserve">
          <source>The output is the new tag&amp;rsquo;s &amp;lt;object&amp;gt; identifier.</source>
          <target state="translated">Результатом является идентификатор &amp;lt;object&amp;gt; нового тега.</target>
        </trans-unit>
        <trans-unit id="c209f5f99a30592095be06f60778bfc6143218e8" translate="yes" xml:space="preserve">
          <source>The output of &quot;git fetch&quot; depends on the transport method used; this section describes the output when fetching over the Git protocol (either locally or via ssh) and Smart HTTP protocol.</source>
          <target state="translated">Вывод &quot;git fetch&quot; зависит от используемого метода транспортировки;в этом разделе описывается вывод при получении по Git-протоколу (локально или через ssh)и протоколу Smart HTTP.</target>
        </trans-unit>
        <trans-unit id="249df455a76d6d8a4ee813f24ba8c68836888f67" translate="yes" xml:space="preserve">
          <source>The output of &quot;git push&quot; depends on the transport method used; this section describes the output when pushing over the Git protocol (either locally or via ssh).</source>
          <target state="translated">Вывод &quot;git push&quot; зависит от используемого метода транспортировки;в этом разделе описывается вывод при нажатии на Git-протокол (локально или через ssh).</target>
        </trans-unit>
        <trans-unit id="2012a50a7ce95c41c81b087cc42352c50e07741b" translate="yes" xml:space="preserve">
          <source>The output of ls-refs is as follows:</source>
          <target state="translated">Вывод ls-refs выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="c9897264787fe814346af61567793268dae2ec95" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;range-diff&lt;/code&gt; command is subject to change. It is intended to be human-readable porcelain output, not something that can be used across versions of Git to get a textually stable &lt;code&gt;range-diff&lt;/code&gt; (as opposed to something like the &lt;code&gt;--stable&lt;/code&gt; option to &lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id[1]&lt;/a&gt;). There&amp;rsquo;s also no equivalent of &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt; for &lt;code&gt;range-diff&lt;/code&gt;, the output is not intended to be machine-readable.</source>
          <target state="translated">Выходные данные команды &lt;code&gt;range-diff&lt;/code&gt; могут быть изменены. Он предназначен для удобочитаемого вывода из фарфора, а не для использования в разных версиях Git для получения текстуально стабильного &lt;code&gt;range-diff&lt;/code&gt; (в отличие от чего-то вроде опции &lt;code&gt;--stable&lt;/code&gt; для &lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id [1]&lt;/a&gt; ) , Также нет эквивалента &lt;a href=&quot;git-apply&quot;&gt;git-apply [1]&lt;/a&gt; для &lt;code&gt;range-diff&lt;/code&gt; , вывод не предназначен для машинного чтения.</target>
        </trans-unit>
        <trans-unit id="acccdb81223db3ebfe60a727e12d9a4ed87719fe" translate="yes" xml:space="preserve">
          <source>The output order is determined by the order of glob patterns in &amp;lt;orderfile&amp;gt;. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.</source>
          <target state="translated">Порядок вывода определяется порядком шаблонов глобусов в &amp;lt;orderfile&amp;gt;. Все файлы с именами пути, соответствующими первому шаблону, выводятся первыми, все файлы с именами пути, которые соответствуют второму шаблону (но не первому), выводятся следующими, и так далее. Все файлы с именами пути, которые не соответствуют ни одному шаблону, выводятся последними, как если бы в конце файла был неявный шаблон соответствия всем. Если несколько имен пути имеют одинаковый ранг (они соответствуют одному и тому же шаблону, но не более ранним шаблонам), их порядок вывода относительно друг друга является нормальным порядком.</target>
        </trans-unit>
        <trans-unit id="70ec2e58d64c53608a589a3f892a41e430e23c0e" translate="yes" xml:space="preserve">
          <source>The overall time needed to compute this algorithm is the time needed to compute n+m commit diffs and then n*m diffs of patches, plus the time needed to compute the least-cost assignment between n and m diffs. Git uses an implementation of the Jonker-Volgenant algorithm to solve the assignment problem, which has cubic runtime complexity. The matching found in this case will look like this:</source>
          <target state="translated">Общее время,необходимое для вычисления этого алгоритма-это время,необходимое для вычисления n+m commit diffs,а затем n*m diffs патчей,плюс время,необходимое для вычисления наименее затратного распределения между n и m diffs.Git использует реализацию алгоритма Джонкера-Волжанта для решения задачи задания,имеющей кубическую сложность во время выполнения.Сопоставление,найденное в этом случае,будет выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="f8c05a901b25f6434301621f82a267dcb0caae54" translate="yes" xml:space="preserve">
          <source>The p4 changes will be created as the user invoking &lt;code&gt;git p4 submit&lt;/code&gt;. The &lt;code&gt;--preserve-user&lt;/code&gt; option will cause ownership to be modified according to the author of the Git commit. This option requires admin privileges in p4, which can be granted using &lt;code&gt;p4 protect&lt;/code&gt;.</source>
          <target state="translated">Изменения p4 будут созданы, когда пользователь вызовет &lt;code&gt;git p4 submit&lt;/code&gt; . Параметр &lt;code&gt;--preserve-user&lt;/code&gt; приведет к изменению права собственности в соответствии с автором коммита Git. Эта опция требует прав администратора в p4, которые могут быть предоставлены с помощью &lt;code&gt;p4 protect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc53387773cbb38b899a330a03a788e5288eab48" translate="yes" xml:space="preserve">
          <source>The p4 client specification is maintained with the &lt;code&gt;p4 client&lt;/code&gt; command and contains among other fields, a View that specifies how the depot is mapped into the client repository. The &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; commands can consult the client spec when given the &lt;code&gt;--use-client-spec&lt;/code&gt; option or when the useClientSpec variable is true. After &lt;code&gt;git p4 clone&lt;/code&gt;, the useClientSpec variable is automatically set in the repository configuration file. This allows future &lt;code&gt;git p4 submit&lt;/code&gt; commands to work properly; the submit command looks only at the variable and does not have a command-line option.</source>
          <target state="translated">Спецификация клиента p4 поддерживается с помощью команды &lt;code&gt;p4 client&lt;/code&gt; и содержит среди других полей представление, которое определяет, как депо отображается в репозиторий клиента. В &lt;code&gt;clone&lt;/code&gt; и &lt;code&gt;sync&lt;/code&gt; команда может обратиться к спецификации клиента , когда предоставляются &lt;code&gt;--use-client-spec&lt;/code&gt; варианта или когда переменная useClientSpec верно. После &lt;code&gt;git p4 clone&lt;/code&gt; переменная useClientSpec автоматически устанавливается в файле конфигурации репозитория. Это позволяет будущим командам &lt;code&gt;git p4 submit&lt;/code&gt; работать правильно; команда submit смотрит только на переменную и не имеет параметра командной строки.</target>
        </trans-unit>
        <trans-unit id="9fec68b06723905b09b9270262e6a13c1b490876" translate="yes" xml:space="preserve">
          <source>The p4 depot path argument to &lt;code&gt;git p4 sync&lt;/code&gt; and &lt;code&gt;git p4 clone&lt;/code&gt; can be one or more space-separated p4 depot paths, with an optional p4 revision specifier on the end:</source>
          <target state="translated">Аргумент пути депо p4 для &lt;code&gt;git p4 sync&lt;/code&gt; и &lt;code&gt;git p4 clone&lt;/code&gt; может быть одним или несколькими разделенными пробелами путями депо p4 с необязательным спецификатором ревизии p4 в конце:</target>
        </trans-unit>
        <trans-unit id="d877dea1de89fdb5a15efd47a5debfe5403b96f4" translate="yes" xml:space="preserve">
          <source>The pack-indexes (.idx files) remain in the pack directory so we can delete the MIDX file, set core.midx to false, or downgrade without any loss of information.</source>
          <target state="translated">Пакеты-индексы (.idx файлы)остаются в каталоге пакетов,поэтому мы можем удалить MIDX-файл,установить core.midx в false или понизить рейтинг без потери информации.</target>
        </trans-unit>
        <trans-unit id="933f30be1e83e4fe09dc8528b693f5b5a75f065d" translate="yes" xml:space="preserve">
          <source>The packed archive format (.pack) is designed to be self-contained so that it can be unpacked without any further information. Therefore, each object that a delta depends upon must be present within the pack.</source>
          <target state="translated">Формат упакованного архива (.pack)разработан таким образом,чтобы его можно было распаковать без дополнительной информации.Поэтому каждый объект,от которого зависит дельта,должен присутствовать в пакете.</target>
        </trans-unit>
        <trans-unit id="75cd7427877d4a48fded775aaaba114771e37304" translate="yes" xml:space="preserve">
          <source>The packfile(s) created by fast-import do not encourage good disk access patterns. This is caused by fast-import writing the data in the order it is received on standard input, while Git typically organizes data within packfiles to make the most recent (current tip) data appear before historical data. Git also clusters commits together, speeding up revision traversal through better cache locality.</source>
          <target state="translated">Файлы пакетов,созданные при быстром импорте,не поощряют хорошие шаблоны доступа к диску.Это вызвано тем,что быстрый импорт записывает данные в порядке их поступления на стандартный вход,в то время как Git обычно упорядочивает данные в пакетных файлах,чтобы последние (текущие подсказки)данные появлялись перед историческими данными.Git также собирает коммиты вместе,ускоряя обход ревизий за счёт лучшего расположения кэша.</target>
        </trans-unit>
        <trans-unit id="73715b9a828b5f7ca9623cd366d376d487c8e126" translate="yes" xml:space="preserve">
          <source>The partial clone feature records special &quot;promisor&quot; packs that may point to objects that are not stored locally, but available on request to a server. The multi-pack-index does not currently track these promisor packs.</source>
          <target state="translated">Функция частичного клонирования записывает специальные пакеты &quot;promisor&quot;,которые могут указывать на объекты,которые не хранятся локально,но доступны по запросу к серверу.Мультипакет-индекс в настоящее время не отслеживает эти пакеты &quot;promisor&quot;.</target>
        </trans-unit>
        <trans-unit id="608e992a19f0287b5b2e4cbdc92416d882bd253c" translate="yes" xml:space="preserve">
          <source>The password to use when logging in to the server.</source>
          <target state="translated">Пароль для входа на сервер.</target>
        </trans-unit>
        <trans-unit id="f899bc9ba76fee3c960f01f1f955c5a4bf020e98" translate="yes" xml:space="preserve">
          <source>The patch extracted from e-mail.</source>
          <target state="translated">Заплатка,извлеченная из электронной почты.</target>
        </trans-unit>
        <trans-unit id="621265bbad5d0651c63283720f8a5ccddfdeeb61" translate="yes" xml:space="preserve">
          <source>The patch is expected to be inline, directly following the message. Any line that is of the form:</source>
          <target state="translated">Предполагается,что патч будет встроен непосредственно после сообщения.Любая строка в форме:</target>
        </trans-unit>
        <trans-unit id="eedf9ed2547b7a76bcd6fb69785bf954af8d224f" translate="yes" xml:space="preserve">
          <source>The patch itself does not apply cleanly. That is &lt;code&gt;bad&lt;/code&gt; but does not have much to do with your MUA. You might want to rebase the patch with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; before regenerating it in this case.</source>
          <target state="translated">Сам патч не наносится чисто. Это &lt;code&gt;bad&lt;/code&gt; но не имеет отношения к вашему MUA. В этом случае вы можете захотеть переустановить патч с помощью &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1],&lt;/a&gt; прежде чем регенерировать его.</target>
        </trans-unit>
        <trans-unit id="c9ecbf09d9172bac5285d567a6e1031058a01024" translate="yes" xml:space="preserve">
          <source>The patch produced by &lt;code&gt;git format-patch&lt;/code&gt; is in UNIX mailbox format, with a fixed &quot;magic&quot; time stamp to indicate that the file is output from format-patch rather than a real mailbox, like so:</source>
          <target state="translated">Патч, созданный &lt;code&gt;git format-patch&lt;/code&gt; , находится в формате почтового ящика UNIX с фиксированной &amp;laquo;волшебной&amp;raquo; меткой времени, указывающей, что файл выводится из format-patch, а не из реального почтового ящика, например:</target>
        </trans-unit>
        <trans-unit id="7072603eb0a607d061c366f3e4a9cba6cffbd377" translate="yes" xml:space="preserve">
          <source>The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the &quot;DESCRIPTION&quot; section of &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;).</source>
          <target state="translated">Путь может быть как абсолютным, так и относительным. Относительный путь берется относительно каталога, в котором выполняются перехватчики (см. Раздел &amp;laquo;ОПИСАНИЕ&amp;raquo; &lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6ccace0f35f0f4e5cab0e8cffbdf924135579b2e" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;false&quot;; this is specified by listing the name of the attribute prefixed with a dash &lt;code&gt;-&lt;/code&gt; in the attribute list.</source>
          <target state="translated">У пути есть атрибут со специальным значением &amp;laquo;false&amp;raquo;; это указывается путем перечисления имени атрибута с префиксом тире &lt;code&gt;-&lt;/code&gt; в списке атрибутов.</target>
        </trans-unit>
        <trans-unit id="96cc920a42ed7b296307f756480841c1366430ee" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;true&quot;; this is specified by listing only the name of the attribute in the attribute list.</source>
          <target state="translated">Путь имеет атрибут со специальным значением &quot;true&quot;;это указывается путём перечисления только имени атрибута в списке атрибутов.</target>
        </trans-unit>
        <trans-unit id="f3d259c7dde8e69cba5e131da2dcac58054c5102" translate="yes" xml:space="preserve">
          <source>The path has the attribute with specified string value; this is specified by listing the name of the attribute followed by an equal sign &lt;code&gt;=&lt;/code&gt; and its value in the attribute list.</source>
          <target state="translated">Путь имеет атрибут с указанным строковым значением; это указывается путем перечисления имени атрибута, за которым следует знак равенства &lt;code&gt;=&lt;/code&gt; и его значение в списке атрибутов.</target>
        </trans-unit>
        <trans-unit id="9a89a340b481b20bfabef5b1bcb5482c1e173e57" translate="yes" xml:space="preserve">
          <source>The path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later comments (&lt;code&gt;#&lt;/code&gt;), empty lines, and any leading and trailing whitespace is ignored. Everything but a SHA-1 per line will error out on older versions.</source>
          <target state="translated">Путь к списку имен объектов (т. Е. По одному несокращенному SHA-1 на строку), которые, как известно, нарушаются нефатальным образом и должны игнорироваться. В версиях Git 2.20 и более поздних версиях комментарии ( &lt;code&gt;#&lt;/code&gt; ), пустые строки и любые начальные и конечные пробелы игнорируются. Все, кроме SHA-1 на строку, будет ошибкой в ​​более старых версиях.</target>
        </trans-unit>
        <trans-unit id="66bacdcfb6546645ce51a1173beecea036fe198b" translate="yes" xml:space="preserve">
          <source>The path to higher software quality is significantly improved software testing.</source>
          <target state="translated">Путь к более высокому качеству программного обеспечения-это значительно улучшенное тестирование программного обеспечения.</target>
        </trans-unit>
        <trans-unit id="a62f8e77f19dbb91947274f4224d3b2000deceef" translate="yes" xml:space="preserve">
          <source>The path with which the credential will be used. E.g., for accessing a remote https repository, this will be the repository&amp;rsquo;s path on the server.</source>
          <target state="translated">Путь, по которому будут использоваться учетные данные. Например, для доступа к удаленному репозиторию https это будет путь к репозиторию на сервере.</target>
        </trans-unit>
        <trans-unit id="75a6542b84624c1ec2a2753cb02bac2dc12deb38" translate="yes" xml:space="preserve">
          <source>The path within the &amp;lt;repository&amp;gt; that the action is performed on, for those actions that require it.</source>
          <target state="translated">Путь в &amp;lt;репозитории&amp;gt;, над которым выполняется действие, для тех действий, которые требуют этого.</target>
        </trans-unit>
        <trans-unit id="42c5355b2496aa717e00373f3c96e2614e271309" translate="yes" xml:space="preserve">
          <source>The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see &lt;code&gt;curl(1)&lt;/code&gt;). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.</source>
          <target state="translated">Путь к файлу, содержащему ранее сохраненные строки cookie, которые следует использовать в HTTP-сеансе Git, если они соответствуют серверу. Формат файла для чтения файлов cookie должен быть простым заголовком HTTP или форматом файла cookie Netscape / Mozilla (см. &lt;code&gt;curl(1)&lt;/code&gt; ). ОБРАТИТЕ ВНИМАНИЕ, что файл, указанный с помощью http.cookieFile, используется только в качестве входных данных, если не установлен http.saveCookies.</target>
        </trans-unit>
        <trans-unit id="7529cc524422963391df3cb62b329f757e09e898" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a client certificate to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_CERT&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd72157b1a828f8662a88c728954dfe8fd532c2" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a private key to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_KEY&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb891f79fbec881d22446bf8cf74ef0a3e451e0" translate="yes" xml:space="preserve">
          <source>The paths mentioned in the output, unlike many other Git commands, are made relative to the current directory if you are working in a subdirectory (this is on purpose, to help cutting and pasting). See the status.relativePaths config option below.</source>
          <target state="translated">Пути,упомянутые в выводе,в отличие от многих других команд Git'а,создаются относительно текущей директории,если вы работаете в подкаталоге (это специально для помощи в вырезании и вставке).См.ниже опцию конфигурации status.relativePaths.</target>
        </trans-unit>
        <trans-unit id="ae851010ea42ad696931dec57e7a58d6d0655b81" translate="yes" xml:space="preserve">
          <source>The pathspecs are used to limit the world diff operates in. They remove the filepairs outside the specified sets of pathnames. E.g. If the input set of filepairs included:</source>
          <target state="translated">С помощью pathspecs ограничивается диапазон мира,в котором работает диффирамма.Они удаляют пары файлов вне заданных наборов имен.Например,если входной набор пар файлов включен:</target>
        </trans-unit>
        <trans-unit id="a35fe6e03b5cf8e686f61a60362e87d3cf937722" translate="yes" xml:space="preserve">
          <source>The pattern &quot;foo/*&quot;, matches &quot;foo/test.json&quot; (a regular file), &quot;foo/bar&quot; (a directory), but it does not match &quot;foo/bar/hello.c&quot; (a regular file), as the asterisk in the pattern does not match &quot;bar/hello.c&quot; which has a slash in it.</source>
          <target state="translated">Шаблон &quot;foo/*&quot; совпадает с &quot;foo/test.json&quot; (обычный файл),&quot;foo/bar&quot; (каталог),но не совпадает с &quot;foo/bar/hello.c&quot; (обычный файл),так как звездочка в шаблоне не совпадает со звездочкой &quot;bar/hello.c&quot;,в которой есть косая черта.</target>
        </trans-unit>
        <trans-unit id="472a6ff8d8e6e0153adf76e5ad83f89df7215b9f" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;doc/frotz&lt;/code&gt; and &lt;code&gt;/doc/frotz&lt;/code&gt; have the same effect in any &lt;code&gt;.gitignore&lt;/code&gt; file. In other words, a leading slash is not relevant if there is already a middle slash in the pattern.</source>
          <target state="translated">Узор &lt;code&gt;doc/frotz&lt;/code&gt; и &lt;code&gt;/doc/frotz&lt;/code&gt; имеют тот же эффект в любом &lt;code&gt;.gitignore&lt;/code&gt; файле. Другими словами, ведущая косая черта не имеет значения, если в шаблоне уже есть средняя косая черта.</target>
        </trans-unit>
        <trans-unit id="7f3e3da749b8fed6cc11585c7aa5dbe77eee53ad" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;foo/&lt;/code&gt; will match a directory &lt;code&gt;foo&lt;/code&gt; and paths underneath it, but will not match a regular file or a symbolic link &lt;code&gt;foo&lt;/code&gt; (this is consistent with the way how pathspec works in general in Git)</source>
          <target state="translated">Шаблон &lt;code&gt;foo/&lt;/code&gt; будет соответствовать каталогу &lt;code&gt;foo&lt;/code&gt; и путям под ним, но не будет соответствовать обычному файлу или символической ссылке &lt;code&gt;foo&lt;/code&gt; (это согласуется с тем, как pathspec в целом работает в Git)</target>
        </trans-unit>
        <trans-unit id="32166ee916b00891724c1bd52223b5e1e2d10da0" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;hello.*&lt;/code&gt; matches any file or folder whose name begins with &lt;code&gt;hello&lt;/code&gt;. If one wants to restrict this only to the directory and not in its subdirectories, one can prepend the pattern with a slash, i.e. &lt;code&gt;/hello.*&lt;/code&gt;; the pattern now matches &lt;code&gt;hello.txt&lt;/code&gt;, &lt;code&gt;hello.c&lt;/code&gt; but not &lt;code&gt;a/hello.java&lt;/code&gt;.</source>
          <target state="translated">Шаблон &lt;code&gt;hello.*&lt;/code&gt; Соответствует любому файлу или папке, имя которых начинается с &lt;code&gt;hello&lt;/code&gt; . Если кто-то хочет ограничить это только каталогом, а не его подкаталогами, можно добавить перед шаблоном косую черту, т.е. &lt;code&gt;/hello.*&lt;/code&gt; ; шаблон теперь соответствует &lt;code&gt;hello.txt&lt;/code&gt; , &lt;code&gt;hello.c&lt;/code&gt; , но не &lt;code&gt;a/hello.java&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b35cb663783a3682a66157f3dc9fd508efdfceba" translate="yes" xml:space="preserve">
          <source>The pattern can contain standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. Please refer to &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt; for details. For convenience:</source>
          <target state="translated">Шаблон может содержать стандартные подстановочные знаки подстановки и два дополнительных, &lt;code&gt;**/&lt;/code&gt; и &lt;code&gt;/**&lt;/code&gt; , которые могут соответствовать нескольким компонентам пути. Пожалуйста, обратитесь к &lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt; за подробностями. Для удобства:</target>
        </trans-unit>
        <trans-unit id="ae88d32c3f9079756948f2fdc8ae4c4c2e834b93" translate="yes" xml:space="preserve">
          <source>The patterns given should not begin with &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, or &lt;code&gt;refs/remotes&lt;/code&gt; when applied to &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, or &lt;code&gt;--remotes&lt;/code&gt;, respectively, and they must begin with &lt;code&gt;refs/&lt;/code&gt; when applied to &lt;code&gt;--glob&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt;. If a trailing &lt;code&gt;/*&lt;/code&gt; is intended, it must be given explicitly.</source>
          <target state="translated">Приведенные шаблоны не должны начинаться с &lt;code&gt;refs/heads&lt;/code&gt; , &lt;code&gt;refs/tags&lt;/code&gt; или &lt;code&gt;refs/remotes&lt;/code&gt; при применении к &lt;code&gt;--branches&lt;/code&gt; , &lt;code&gt;--tags&lt;/code&gt; или &lt;code&gt;--remotes&lt;/code&gt; соответственно, и они должны начинаться с &lt;code&gt;refs/&lt;/code&gt; при применении к &lt;code&gt;--glob&lt;/code&gt; или &lt;code&gt;--all&lt;/code&gt; . Если предполагается завершающий &lt;code&gt;/*&lt;/code&gt; , он должен быть указан явно.</target>
        </trans-unit>
        <trans-unit id="86b0de7f6b1176e8c07c5aaa523447c3abd4915b" translate="yes" xml:space="preserve">
          <source>The performance format target (PERF) is a column-based format to replace GIT_TRACE_PERFORMANCE and is suitable for development and testing, possibly to complement tools like gprof. This format is enabled with the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable or the &lt;code&gt;trace2.perfTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">Целевой формат производительности (PERF) - это формат на основе столбцов, который заменяет GIT_TRACE_PERFORMANCE и подходит для разработки и тестирования, возможно, для дополнения таких инструментов, как gprof. Этот формат включен с &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; переменной окружения или &lt;code&gt;trace2.perfTarget&lt;/code&gt; системы или глобальные настройки конфигурации.</target>
        </trans-unit>
        <trans-unit id="506071bbd9d0908b14e8f015ca1b0ff23e4ec21e" translate="yes" xml:space="preserve">
          <source>The performance of git-filter-branch is glacially slow; its design makes it impossible for a backward-compatible implementation to ever be fast:</source>
          <target state="translated">Производительность git-фильтровальной линейки медленна в ледниковом режиме;ее конструкция делает невозможным,чтобы обратно совместимая реализация когда-либо была быстрой:</target>
        </trans-unit>
        <trans-unit id="d698b970e30734158c98cc5647b57a259a47bb36" translate="yes" xml:space="preserve">
          <source>The person who put a piece of code into Git.</source>
          <target state="translated">Человек,который вставил кусок кода в Гита.</target>
        </trans-unit>
        <trans-unit id="81b84527afb0ae2e697e75bbd7638af25fa12741" translate="yes" xml:space="preserve">
          <source>The pickaxe search is described in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; (the description of &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; option, which refers to pickaxe entry in &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt; for more details).</source>
          <target state="translated">Поиск кирки описан в &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; (описание опции &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; , которая относится к записи кирки в &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]&lt;/a&gt; для более подробной информации).</target>
        </trans-unit>
        <trans-unit id="525e6a0e6ee3d9fa31ab39c46532aa0c693111e1" translate="yes" xml:space="preserve">
          <source>The placeholders are:</source>
          <target state="translated">Держатели мест:</target>
        </trans-unit>
        <trans-unit id="1651136b42ed906ec527c0b5bb6ead2e015774c3" translate="yes" xml:space="preserve">
          <source>The point of this helper is to reduce the number of times you must type your username or password. For example:</source>
          <target state="translated">Смысл этого помощника заключается в том,чтобы уменьшить количество раз,когда вы должны ввести имя пользователя или пароль.Например:</target>
        </trans-unit>
        <trans-unit id="c89cea9d29e269d3d21a2bb103d39e43b1e539d2" translate="yes" xml:space="preserve">
          <source>The porcelain format</source>
          <target state="translated">Формат фарфора</target>
        </trans-unit>
        <trans-unit id="26e08a1995b67cc0010521ba6bed170106483645" translate="yes" xml:space="preserve">
          <source>The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The &lt;code&gt;--line-porcelain&lt;/code&gt; option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:</source>
          <target state="translated">Формат фарфора обычно подавляет информацию о фиксации, которая уже была просмотрена. Например, будут показаны две строки, относящиеся к одной и той же фиксации, но детали для этой фиксации будут показаны только один раз. Это более эффективно, но может потребовать от читателя сохранения большего количества состояний. Параметр &lt;code&gt;--line-porcelain&lt;/code&gt; может использоваться для вывода полной информации о фиксации для каждой строки, что позволяет более простое (но менее эффективное) использование, например:</target>
        </trans-unit>
        <trans-unit id="20c54b7279b5d1b2be6928d44083be1fd00dfbb8" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are only present if and only if the value is true. The first attribute of a worktree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">Формат фарфора имеет строку для каждого атрибута. Атрибуты перечислены с меткой и значением, разделенными одним пробелом. Булевы атрибуты (например, &lt;code&gt;bare&lt;/code&gt; и &lt;code&gt;detached&lt;/code&gt; ) перечислены только как метка и присутствуют только тогда и только тогда, когда значение истинно. Первым атрибутом рабочего дерева всегда является &lt;code&gt;worktree&lt;/code&gt; , пустая строка указывает конец записи. Например:</target>
        </trans-unit>
        <trans-unit id="d78141a7bccc3a1873780a422f8d41a19ce92e1b" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are present only if the value is true. The first attribute of a working tree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a362940b066b853917862099c8e9ab263cba72b1" translate="yes" xml:space="preserve">
          <source>The port number to bind the gitweb httpd to. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">Номер порта, к которому нужно привязать gitweb httpd. См. &lt;a href=&quot;git-instaweb&quot;&gt;Git-instaweb [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0cecf31c324042fa16f4839249194885b3982bae" translate="yes" xml:space="preserve">
          <source>The port number to bind the httpd to. (Default: 1234)</source>
          <target state="translated">Номер порта,к которому нужно привязать httpd.(По умолчанию:1234)</target>
        </trans-unit>
        <trans-unit id="735bfd35b5b101e4c116696c3cd1ebf6bc58faa9" translate="yes" xml:space="preserve">
          <source>The possible options are:</source>
          <target state="translated">Возможные варианты:</target>
        </trans-unit>
        <trans-unit id="8bc0e360ec6eefb74bc5a1aed65f13e846b6d915" translate="yes" xml:space="preserve">
          <source>The preferred strategy for rolling out a version bump (whether whole repository or for a single file) is to teach git to read the new format, and allow writing the new format with a config switch or command line option (for experimentation or for those who do not care about backwards compatibility with older gits). Then after a long period to allow the reading capability to become common, we may switch to writing the new format by default.</source>
          <target state="translated">Предпочтительная стратегия развертывания бампа версии (как для всего репозитория,так и для одного файла)-научить git'а читать новый формат и разрешить запись нового формата с помощью конфигурационного переключателя или опции командной строки (для экспериментов или для тех,кого не волнует обратная совместимость со старыми gits'ами).Затем,по прошествии долгого времени,чтобы возможность чтения стала обычным делом,мы можем переключиться на запись нового формата по умолчанию.</target>
        </trans-unit>
        <trans-unit id="adf8f6f66c16d1ab5dcd5c39342b75931e439ba4" translate="yes" xml:space="preserve">
          <source>The prefix ability basically makes it trivial to use &lt;code&gt;git checkout-index&lt;/code&gt; as an &quot;export as tree&quot; function. Just read the desired tree into the index, and do:</source>
          <target state="translated">Возможность префикса в основном упрощает использование &lt;code&gt;git checkout-index&lt;/code&gt; в качестве функции &amp;laquo;экспорта в виде дерева&amp;raquo;. Просто прочтите нужное дерево в индексе и выполните:</target>
        </trans-unit>
        <trans-unit id="0f1fc4f35ab6b79f4468bd7525c0542dc9193da5" translate="yes" xml:space="preserve">
          <source>The previously introduced &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; is just a wrapper for &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">Ранее представленный &lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt; - это просто оболочка для &lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="675ae216ecd575fef2e1ffa9eadeda52bdab6e90" translate="yes" xml:space="preserve">
          <source>The primary problem with rewriting the history of a branch has to do with merging. Suppose somebody fetches your branch and merges it into their branch, with a result something like this:</source>
          <target state="translated">Основная проблема с переписыванием истории ветки связана со слиянием.Предположим,что кто-то забирает ваше ответвление и сливает его в своё ответвление,в результате чего получается что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="ff3dc4a94f1f540e3dd725f6eef6c2d405d85a87" translate="yes" xml:space="preserve">
          <source>The primary tool we&amp;rsquo;ve been using to create commits is &lt;code&gt;git-commit
-a&lt;/code&gt;, which creates a commit including every change you&amp;rsquo;ve made to your working tree. But what if you want to commit changes only to certain files? Or only certain changes to certain files?</source>
          <target state="translated">Основным инструментом, который мы использовали для создания &lt;code&gt;git-commit -a&lt;/code&gt; , является git-commit -a , который создает коммит, включающий все изменения, внесенные вами в свое рабочее дерево. Но что, если вы хотите зафиксировать изменения только в определенных файлах? Или только определенные изменения в определенных файлах?</target>
        </trans-unit>
        <trans-unit id="bc32172ebad82b3a8531284b76fc91d0e2655fc8" translate="yes" xml:space="preserve">
          <source>The protection it offers over &lt;code&gt;--force&lt;/code&gt; is ensuring that subsequent changes your work wasn&amp;rsquo;t based on aren&amp;rsquo;t clobbered, but this is trivially defeated if some background process is updating refs in the background. We don&amp;rsquo;t have anything except the remote tracking info to go by as a heuristic for refs you&amp;rsquo;re expected to have seen &amp;amp; are willing to clobber.</source>
          <target state="translated">Защита, которую он предлагает сверх &lt;code&gt;--force&lt;/code&gt; , гарантирует, что последующие изменения, на которых ваша работа не основана, не затерты, но это тривиально побеждено, если какой-то фоновый процесс обновляет ссылки в фоновом режиме. У нас нет ничего, кроме информации об удаленном отслеживании, которую можно было бы использовать в качестве эвристики для ссылок, которые вы, как ожидается, видели и готовы заткнуть.</target>
        </trans-unit>
        <trans-unit id="c8ef7004934ae749808b9e22322b2c11275f98e4" translate="yes" xml:space="preserve">
          <source>The protocol names currently used by git are:</source>
          <target state="translated">Имена протоколов,которые в настоящее время используются git'ом:</target>
        </trans-unit>
        <trans-unit id="19913c2c5a680884fd5ab271ea84dfe92e10bf53" translate="yes" xml:space="preserve">
          <source>The protocol over which the credential will be used (e.g., &lt;code&gt;https&lt;/code&gt;).</source>
          <target state="translated">Протокол, по которому будут использоваться учетные данные (например, &lt;code&gt;https&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="27c53e4d1c63b3496c93b1976851fe0522937712" translate="yes" xml:space="preserve">
          <source>The provided options must not contain a NUL or LF character.</source>
          <target state="translated">Предоставляемые опции не должны содержать символов NUL или LF.</target>
        </trans-unit>
        <trans-unit id="5fb1f43ddd5fc4b8ac18d086f82e6f88c9ed5855" translate="yes" xml:space="preserve">
          <source>The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.</source>
          <target state="translated">Цель gitignore-файлов-обеспечить,чтобы определённые файлы,не отслеживаемые Git'ом,оставались не отслеженными.</target>
        </trans-unit>
        <trans-unit id="a2b9675d20ab3c1e80e15b296d660914f6ea2131" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not suppressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.</source>
          <target state="translated">Целью ловушки является редактирование файла сообщения на месте, и это не подавляется параметром &lt;code&gt;--no-verify&lt;/code&gt; . Ненулевой выход означает отказ ловушки и отмену фиксации. Его не следует использовать как замену ловушке перед фиксацией.</target>
        </trans-unit>
        <trans-unit id="96e3995f595001b3f723f5fc30a3546a03e6b50b" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not supressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. This hook is called even if &lt;code&gt;--prepare-p4-only&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383a661ab7ffdec395082f1f22f245f53263885b" translate="yes" xml:space="preserve">
          <source>The push URL of a remote repository. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">URL-адрес удаленного репозитория. См. &lt;a href=&quot;git-push&quot;&gt;Git-push [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e8cd29a2b80ae7f4721c7a9c69324052af609357" translate="yes" xml:space="preserve">
          <source>The push done by the other person updated the branch that used to point at commit X to point at commit A. It is a fast-forward.</source>
          <target state="translated">Толчок,сделанный другим человеком,обновил ветку,которая использовалась для указания на коммит X,чтобы указать на коммит A.Это быстрая перемотка вперед.</target>
        </trans-unit>
        <trans-unit id="79a20eedac198c71849aef6d1fe1606ea1ee319f" translate="yes" xml:space="preserve">
          <source>The quilt series file.</source>
          <target state="translated">Файл серии одеял.</target>
        </trans-unit>
        <trans-unit id="eb2f9ed5ec284eab8396a9b582f3da5582d364ca" translate="yes" xml:space="preserve">
          <source>The raw output format from &quot;git-diff-index&quot;, &quot;git-diff-tree&quot;, &quot;git-diff-files&quot; and &quot;git diff --raw&quot; are very similar.</source>
          <target state="translated">Формат исходного вывода из &quot;git-diff-index&quot;,&quot;git-diff-tree&quot;,&quot;git-diff-files&quot; и &quot;git-diff --raw&quot; очень похож.</target>
        </trans-unit>
        <trans-unit id="a6ab1028c44c2d54846a9217b4a7ad959d178f38" translate="yes" xml:space="preserve">
          <source>The reachability bitmap is currently paired directly with a single packfile, using the pack-order as the object order to hopefully compress the bitmaps well using run-length encoding. This could be extended to pair a reachability bitmap with a multi-pack-index. If the multi-pack-index is extended to store a &quot;stable object order&quot; (a function Order(hash) = integer that is constant for a given hash, even as the multi-pack-index is updated) then a reachability bitmap could point to a multi-pack-index and be updated independently.</source>
          <target state="translated">В настоящее время растровое изображение доступно в паре непосредственно с одним пакетным файлом,используя пакетный порядок в качестве объекта,чтобы,надеюсь,хорошо сжимать растровые изображения с помощью кодирования длины пробега.Это может быть расширено до пары достижимого растрового изображения с мультипаковым индексом.Если Multi-pack-index расширен для хранения &quot;стабильного порядка объектов&quot; (функция Order(hash)=целое число,которое является постоянным для данного хэша,даже при обновлении Multi-pack-index),то растровое изображение достижимости может указывать на мультипакет-индекс и обновляться независимо.</target>
        </trans-unit>
        <trans-unit id="0aca04dff2f76e52dde4dcdd1542bfe4e1470100" translate="yes" xml:space="preserve">
          <source>The reason fast-import uses &lt;code&gt;:&lt;/code&gt; to denote a mark reference is this character is not legal in a Git branch name. The leading &lt;code&gt;:&lt;/code&gt; makes it easy to distinguish between the mark 42 (&lt;code&gt;:42&lt;/code&gt;) and the branch 42 (&lt;code&gt;42&lt;/code&gt; or &lt;code&gt;refs/heads/42&lt;/code&gt;), or an abbreviated SHA-1 which happened to consist only of base-10 digits.</source>
          <target state="translated">Причина, по которой в быстром импорте используется &lt;code&gt;:&lt;/code&gt; для обозначения ссылки на метку, этот символ недопустим в имени ветки Git. Интерлиньяж &lt;code&gt;:&lt;/code&gt; позволяет легко различать метку 42 ( &lt;code&gt;:42&lt;/code&gt; ) и ветвь 42 ( &lt;code&gt;42&lt;/code&gt; или &lt;code&gt;refs/heads/42&lt;/code&gt; ) или сокращенный SHA-1, который состоит только из цифр с основанием 10.</target>
        </trans-unit>
        <trans-unit id="1aba410e8fcfe74102eea2fcf73898889acee3ed" translate="yes" xml:space="preserve">
          <source>The reason it doesn&amp;rsquo;t error out when provided without &lt;code&gt;--prune&lt;/code&gt; or its config versions is for flexibility of the configured versions, and to maintain a 1=1 mapping between what the command line flags do, and what the configuration versions do.</source>
          <target state="translated">Причина, по которой он не выводит ошибку, когда он предоставляется без &lt;code&gt;--prune&lt;/code&gt; или его версий конфигурации, заключается в гибкости настроенных версий и в поддержании соответствия 1 = 1 между тем, что делают флаги командной строки, и тем, что делают версии конфигурации.</target>
        </trans-unit>
        <trans-unit id="b2defd752d90b2a93e28eb3efe0e516f3fc264fc" translate="yes" xml:space="preserve">
          <source>The rebase will stop where &lt;code&gt;pick&lt;/code&gt; has been replaced with &lt;code&gt;edit&lt;/code&gt; or when a step in the list fails to mechanically resolve conflicts and needs your help. When you are done editing and/or resolving conflicts you can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;. If you decide that things are getting too hairy, you can always bail out with &lt;code&gt;git rebase
--abort&lt;/code&gt;. Even after the rebase is complete, you can still recover the original branch by using the &lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;.</source>
          <target state="translated">Перебазирование будет остановлено там, где &lt;code&gt;pick&lt;/code&gt; был заменен на &lt;code&gt;edit&lt;/code&gt; или когда шаг в списке не может механически разрешить конфликты и требует вашей помощи. Когда вы закончите редактирование и / или разрешение конфликтов, вы можете продолжить с помощью &lt;code&gt;git rebase --continue&lt;/code&gt; . Если вы решите, что ситуация становится слишком сложной, вы всегда можете спастись с помощью &lt;code&gt;git rebase --abort&lt;/code&gt; . Даже после завершения перестановки вы все равно можете восстановить исходную ветку с помощью &lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="939cf091c711a461fc7775d9278b48a4457f30c1" translate="yes" xml:space="preserve">
          <source>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the &lt;code&gt;refs/heads/&lt;/code&gt; hierarchy is used to represent local branches).</source>
          <target state="translated">Пространство имен ref является иерархическим. Для разных целей используются разные подиерархии (например, &lt;code&gt;refs/heads/&lt;/code&gt; иерархия используются для представления локальных ветвей).</target>
        </trans-unit>
        <trans-unit id="d11d2f57237e560f1ae2f7da112ae694568b2d78" translate="yes" xml:space="preserve">
          <source>The ref which the given symbolic ref refers to. If not a symbolic ref, nothing is printed. Respects the &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; options in the same way as &lt;code&gt;refname&lt;/code&gt; above.</source>
          <target state="translated">Ссылка, на которую ссылается данный символический номер. Если не символическая ссылка, ничего не печатается. Уважает &lt;code&gt;:short&lt;/code&gt; , &lt;code&gt;:lstrip&lt;/code&gt; и &lt;code&gt;:rstrip&lt;/code&gt; вариантов таким же образом , как &lt;code&gt;refname&lt;/code&gt; выше.</target>
        </trans-unit>
        <trans-unit id="09256802b46aa557905f47df9fc0a1148d341199" translate="yes" xml:space="preserve">
          <source>The reflogs are kept by default for 30 days, after which they may be pruned. See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; and &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; to learn how to control this pruning, and see the &quot;SPECIFYING REVISIONS&quot; section of &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for details.</source>
          <target state="translated">Рефлоги по умолчанию хранятся в течение 30 дней, после чего их можно удалить. См. &lt;a href=&quot;git-reflog&quot;&gt;Git-reflog [1]&lt;/a&gt; и &lt;a href=&quot;git-gc&quot;&gt;git-gc [1],&lt;/a&gt; чтобы узнать, как управлять этим сокращением, а также подробности в разделе &amp;laquo; &lt;a href=&quot;gitrevisions&quot;&gt;УКАЗАНИЕ&lt;/a&gt; ИЗМЕНЕНИЙ&amp;raquo; в gitrevisions [7] .</target>
        </trans-unit>
        <trans-unit id="29e87ce112fa8f38582e71025c0e3c162626939f" translate="yes" xml:space="preserve">
          <source>The refname parameter is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 arguments are the object names for the refname before and after the update. Note that the hook is called before the refname is updated, so either sha1-old is 0{40} (meaning there is no such ref yet), or it should match what is recorded in refname.</source>
          <target state="translated">Параметр refname относится к $GIT_DIR;например,для головы ведущего это &quot;refs/heads/master&quot;.Два аргумента sha1-это имена объектов для имени ссылки до и после обновления.Обратите внимание,что крюк вызывается до обновления имени,поэтому либо sha1-old равен 0{40}.(это означает,что такого реффикса еще нет),или он должен совпадать с тем,что записано в имени реффикса.</target>
        </trans-unit>
        <trans-unit id="21810fe3549bedbdcfb85519d93701f4c1ec8042" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs that were created will have sha1-old equal to 0{40}, while refs that were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">Значение имени refname относительно $GIT_DIR;например,для головы-ведущего это &quot;refs/heads/master&quot;.Два значения sha1 перед каждым именем ссылки-это имена объектов для имени ссылки до и после обновления.Ссылки,которые были созданы,будут иметь sha1-old равное 0{40},в то время как удаленные будут иметь sha1-new равное 0{40},в противном случае sha1-old и sha1-new должны быть действительными объектами в хранилище.</target>
        </trans-unit>
        <trans-unit id="f7cd6bb7198b77eda24e90f3bdabb1a4fb56aeb0" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs to be created will have sha1-old equal to 0{40}, while refs to be deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">Значение имени refname относительно $GIT_DIR;например,для головы-ведущего это &quot;refs/heads/master&quot;.Два значения sha1 перед каждым именем ссылки-это имена объектов для имени ссылки до и после обновления.Создаваемые ссылки будут иметь sha1-old равное 0{40},в то время как удаляемые ссылки будут иметь sha1-new равное 0{40},в противном случае sha1-old и sha1-new должны быть действительными объектами в хранилище.</target>
        </trans-unit>
        <trans-unit id="efb922792d6081ee214f4a8e1d665108721507f6" translate="yes" xml:space="preserve">
          <source>The refs are using the given hash algorithm. This keyword is only used if the server and client both support the object-format extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce26e3499eea5a4c24942a8e072b3a9539557d0b" translate="yes" xml:space="preserve">
          <source>The regex can also be set via a diff driver or configuration option, see &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; or &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</source>
          <target state="translated">Регулярное выражение также можно установить с помощью драйвера diff или параметра конфигурации, см. &lt;a href=&quot;gitattributes&quot;&gt;Gitattributes [5]&lt;/a&gt; или &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; . Его предоставление явно отменяет любой драйвер diff или настройку конфигурации. Драйверы различий переопределяют параметры конфигурации.</target>
        </trans-unit>
        <trans-unit id="db9cbae31eee7dd0453a2f75d2431a49c7ce5a43" translate="yes" xml:space="preserve">
          <source>The regex must capture the source branch name in $1.</source>
          <target state="translated">Регекс должен захватить имя ветки-источника в $1.</target>
        </trans-unit>
        <trans-unit id="2f22e3781909efae9d373f9fa46942441b8a264c" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">Регулярное выражение, которое драйвер diff должен использовать для распознавания заголовка ханка. Также может использоваться встроенный шаблон. Подробнее см. &lt;a href=&quot;gitattributes&quot;&gt;Gitattributes [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4211f7342bdc098f581fc9d7939f84dc24cd9689" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to split words in a line. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">Регулярное выражение, которое драйвер diff должен использовать для разделения слов в строке. Подробнее см. &lt;a href=&quot;gitattributes&quot;&gt;Gitattributes [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa527c60a8440b01958ab1ade21254172db5c938" translate="yes" xml:space="preserve">
          <source>The remainder of the commit or the tag message that follows the &quot;subject&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0619f2eb83a7faf485cba23bd4bbef8fb0cb4dd" translate="yes" xml:space="preserve">
          <source>The remainder of the line, after stripping the spaces, is used as the help associated to the option.</source>
          <target state="translated">Оставшаяся часть строки после удаления пробелов используется в качестве справки,связанной с опцией.</target>
        </trans-unit>
        <trans-unit id="19c5350e9da63f63a8abbccc7168a03dfd13ebac" translate="yes" xml:space="preserve">
          <source>The remaining features cannot be overridden on a per project basis.</source>
          <target state="translated">Остальные функции не могут быть переопределены для каждого проекта.</target>
        </trans-unit>
        <trans-unit id="303228bfc99fc67a561e0782dc3e0ceb08c259bb" translate="yes" xml:space="preserve">
          <source>The remote branch name for a submodule, used by &lt;code&gt;git submodule
update --remote&lt;/code&gt;. Set this option to override the value found in the &lt;code&gt;.gitmodules&lt;/code&gt; file. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">Имя удаленной ветки для подмодуля, используемое &lt;code&gt;git submodule update --remote&lt;/code&gt; . Установите этот параметр, чтобы переопределить значение, найденное в файле &lt;code&gt;.gitmodules&lt;/code&gt; . См. Подробности в &lt;a href=&quot;git-submodule&quot;&gt;git- &lt;/a&gt;&lt;a href=&quot;gitmodules&quot;&gt;submodule [ &lt;/a&gt;1] и gitmodules [5] .</target>
        </trans-unit>
        <trans-unit id="4fdf928f1cd746e7574e5e26895f63052b9e3300" translate="yes" xml:space="preserve">
          <source>The remote configuration is achieved using the &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables. (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">Удаленная конфигурация достигается с использованием переменных конфигурации &lt;code&gt;remote.origin.url&lt;/code&gt; и &lt;code&gt;remote.origin.fetch&lt;/code&gt; . (См. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="e7b65b070cfabceee72964f903404025034f8258" translate="yes" xml:space="preserve">
          <source>The remote end did not report the successful update of the ref, perhaps because of a temporary error on the remote side, a break in the network connection, or other transient error.</source>
          <target state="translated">Удаленный конец не сообщил об успешном обновлении ссылки,возможно,из-за временной ошибки на удаленной стороне,перерыва в сетевом соединении или другой временной ошибки.</target>
        </trans-unit>
        <trans-unit id="53c927a78ca0c11dc61a2c100f0e02c446d49374" translate="yes" xml:space="preserve">
          <source>The remote end refused the update. Usually caused by a hook on the remote side, or because the remote repository has one of the following safety options in effect: &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; (for pushes to the checked out branch), &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; (for forced non-fast-forward updates), &lt;code&gt;receive.denyDeletes&lt;/code&gt; or &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt;. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Удаленный конец отклонил обновление. Обычно вызывается перехватчиком на удаленной стороне или потому, что в удаленном репозитории действует одна из следующих опций безопасности: &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; (для отправки на извлеченную ветку), &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; (для принудительных обновлений без быстрой перемотки вперед). ), &lt;code&gt;receive.denyDeletes&lt;/code&gt; или &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt; . См. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9422d899b3eadda77c8387091e37d96facb6c2f" translate="yes" xml:space="preserve">
          <source>The remote heads to update from. This is relative to $GIT_DIR (e.g. &quot;HEAD&quot;, &quot;refs/heads/master&quot;). When unspecified, update from all heads the remote side has.</source>
          <target state="translated">Удаленные головки для обновления.Это относительно $GIT_DIR (например,&quot;HEAD&quot;,&quot;refs/heads/master&quot;).Если не указано,обновите информацию со всех головок,имеющихся на удаленной стороне.</target>
        </trans-unit>
        <trans-unit id="0419c5b470511fe246bdc207ab1f44978b5929c7" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential.</source>
          <target state="translated">Имя удаленного хоста для сетевой учетной записи.</target>
        </trans-unit>
        <trans-unit id="2acecc1c91d3ba6caf56ecf7245b62c949c434da" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential. This includes the port number if one was specified (e.g., &quot;example.com:8088&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7632b9807699f7e6cd146f3dd66e0428b068933" translate="yes" xml:space="preserve">
          <source>The remote ref that matches &amp;lt;src&amp;gt; is fetched, and if &amp;lt;dst&amp;gt; is not an empty string, an attempt is made to update the local ref that matches it.</source>
          <target state="translated">Выбирается удаленная ссылка, которая соответствует &amp;lt;src&amp;gt;, и если &amp;lt;dst&amp;gt; не является пустой строкой, делается попытка обновить локальную ссылку, которая соответствует ей.</target>
        </trans-unit>
        <trans-unit id="282ef7eedc5a5bdee9740e04ed8375ea205f3da3" translate="yes" xml:space="preserve">
          <source>The remote refs to update.</source>
          <target state="translated">Удаленные ссылки для обновления.</target>
        </trans-unit>
        <trans-unit id="1126548b6dd0a73d0e4b3cf8a47f765ced5296ec" translate="yes" xml:space="preserve">
          <source>The remote to push to by default. Overrides &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; for all branches, and is overridden by &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; for specific branches.</source>
          <target state="translated">Пульт, на который нужно нажать по умолчанию. Переопределяет &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; для всех ветвей и переопределяется &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; для определенных ветвей.</target>
        </trans-unit>
        <trans-unit id="69cc315a656a6408b19c28c1250214347094ab33" translate="yes" xml:space="preserve">
          <source>The replaced object and the replacement object must be of the same type. This restriction can be bypassed using &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">Заменяемый объект и замещающий объект должны быть одного типа. Это ограничение можно обойти с помощью &lt;code&gt;-f&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ad56792b1c232c0733d7ad92a2a6edfcbfd7d1e" translate="yes" xml:space="preserve">
          <source>The report does not tell you anything about lines which have been deleted or replaced; you need to use a tool such as &lt;code&gt;git diff&lt;/code&gt; or the &quot;pickaxe&quot; interface briefly mentioned in the following paragraph.</source>
          <target state="translated">В отчете ничего не говорится о строках, которые были удалены или заменены; вам нужно использовать такой инструмент, как &lt;code&gt;git diff&lt;/code&gt; или интерфейс &amp;laquo;кирки&amp;raquo;, кратко упомянутый в следующем абзаце.</target>
        </trans-unit>
        <trans-unit id="b4fd8af335028abdc88c8957e63b788cd43e89cc" translate="yes" xml:space="preserve">
          <source>The report of the commands of this hook should have the same order as the input. The exit status of the &lt;code&gt;proc-receive&lt;/code&gt; hook only determines the success or failure of the group of commands sent to it, unless atomic push is in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c986c29f6ffa22f2a8c706bbb75b7aeb4461294" translate="yes" xml:space="preserve">
          <source>The repository URL to be pulled from.</source>
          <target state="translated">URL-адрес репозитория,из которого нужно вытащить.</target>
        </trans-unit>
        <trans-unit id="944d2d5ccd37faa608b4a3dce165543a5adf2fbf" translate="yes" xml:space="preserve">
          <source>The repository the action will be performed on.</source>
          <target state="translated">В репозитории будет произведено действие.</target>
        </trans-unit>
        <trans-unit id="0e7c4601cfd7634812fd5318d08d4f529fb59bef" translate="yes" xml:space="preserve">
          <source>The repository to get a tar archive from.</source>
          <target state="translated">Хранилище для получения архива смолы.</target>
        </trans-unit>
        <trans-unit id="bc81f7623489d466e462d3597d8dc6ebd3c462a1" translate="yes" xml:space="preserve">
          <source>The repository to sync from.</source>
          <target state="translated">Хранилище для синхронизации.</target>
        </trans-unit>
        <trans-unit id="3d7b45c15d44961366710f29c0592cfbaf8293a2" translate="yes" xml:space="preserve">
          <source>The repository to sync into.</source>
          <target state="translated">Репозиторий для синхронизации.</target>
        </trans-unit>
        <trans-unit id="85a32286326310d42bba4488de0fbceb84f9845b" translate="yes" xml:space="preserve">
          <source>The repository to update.</source>
          <target state="translated">Репозиторий для обновления.</target>
        </trans-unit>
        <trans-unit id="15ea4cb9c0b7ca59bf54604e4e274c258d2ab5d8" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header.</source>
          <target state="translated">Ответ &lt;code&gt;fetch&lt;/code&gt; разбивается на несколько разделов, разделенных пакетами-разделителями (0001), причем каждый раздел начинается с заголовка раздела.</target>
        </trans-unit>
        <trans-unit id="f5a3baabdc3717b14a2e7f02d6a5a2eab21baf8b" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header. Most sections are sent only when the packfile is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1a001f6b3f7c16917c0e0241e976b8717f870a" translate="yes" xml:space="preserve">
          <source>The rest of the documentation discusses &lt;code&gt;fsck.*&lt;/code&gt; for brevity, but the same applies for the corresponding &lt;code&gt;receive.fsck.*&lt;/code&gt; and &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt;. variables.</source>
          <target state="translated">В остальной части документации для краткости обсуждается &lt;code&gt;fsck.*&lt;/code&gt; , Но то же самое относится и к соответствующим &lt;code&gt;receive.fsck.*&lt;/code&gt; И &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt; . переменные.</target>
        </trans-unit>
        <trans-unit id="ac10b74ced74e00c661f52e9250a42f47fd6add4" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, because &lt;code&gt;2&lt;/code&gt; is the best common ancestor of all commits.</source>
          <target state="translated">Результат &lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; равен &lt;code&gt;2&lt;/code&gt; , потому что &lt;code&gt;2&lt;/code&gt; - лучший общий предок всех коммитов.</target>
        </trans-unit>
        <trans-unit id="1e8fa948e18ddfaa21178042cd566eaada7aae80" translate="yes" xml:space="preserve">
          <source>The result of comparison is passed from these commands to what is internally called &quot;diffcore&quot;, in a format similar to what is output when the -p option is not used. E.g.</source>
          <target state="translated">Результат сравнения передается из этих команд в то,что внутренне называется &quot;diffcore&quot;,в формате,аналогичном тому,что выводится,когда не используется опция -p.Например</target>
        </trans-unit>
        <trans-unit id="d6478eddd3e6be6e1f0703d8450a597d1ea3dfe6" translate="yes" xml:space="preserve">
          <source>The result of such a bisection would be that we would find that H is the first bad commit, when in fact it&amp;rsquo;s B. So that would be wrong!</source>
          <target state="translated">Результатом такого деления пополам было бы то, что мы обнаружили бы, что H - первая плохая фиксация, тогда как на самом деле это B. Так что это было бы неправильно!</target>
        </trans-unit>
        <trans-unit id="9ed4c9f58d5e6595458ce4cb4952fdfe7c07ce9b" translate="yes" xml:space="preserve">
          <source>The resulting command then has an &quot;operation&quot; argument appended to it (see below for details), and the result is executed by the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baad8b31b0f95aa1296c5c88ad34816424f2926e" translate="yes" xml:space="preserve">
          <source>The resulting directory proj.git contains a &quot;bare&quot; git repository&amp;mdash;​it is just the contents of the &lt;code&gt;.git&lt;/code&gt; directory, without any files checked out around it.</source>
          <target state="translated">Результирующий каталог proj.git содержит &amp;laquo;чистый&amp;raquo; репозиторий git - это просто содержимое каталога &lt;code&gt;.git&lt;/code&gt; без каких-либо извлеченных файлов вокруг него.</target>
        </trans-unit>
        <trans-unit id="31dc4b206e7be8ca9a78c4871cc58f03a5340e5b" translate="yes" xml:space="preserve">
          <source>The revision data is appended to the file if it already exists, for use when doing incremental imports.</source>
          <target state="translated">Данные о ревизиях добавляются к файлу,если он уже существует,для использования при инкрементном импорте.</target>
        </trans-unit>
        <trans-unit id="0ca811b30547ebe29846859e95a6c9147e8141b4" translate="yes" xml:space="preserve">
          <source>The rewrite rule guarantees that existing static files will be properly served, whereas any other URL will be passed to gitweb as PATH_INFO parameter.</source>
          <target state="translated">Правило перезаписи гарантирует,что существующие статические файлы будут корректно обслуживаться,в то время как любой другой URL будет передан gitweb в качестве параметра PATH_INFO.</target>
        </trans-unit>
        <trans-unit id="7511d9248c0671ec876d283606ae9df0bea2f6b2" translate="yes" xml:space="preserve">
          <source>The ripple effect of a &quot;hard case&quot; recovery is especially bad: &lt;code&gt;everyone&lt;/code&gt; downstream from &lt;code&gt;topic&lt;/code&gt; will now have to perform a &quot;hard case&quot; recovery too!</source>
          <target state="translated">Эффект пульсации восстановления в &amp;laquo;жестком&amp;raquo; случае особенно плох: &lt;code&gt;everyone&lt;/code&gt; ниже по течению от &lt;code&gt;topic&lt;/code&gt; , теперь придется выполнять восстановление &amp;laquo;в жестком&amp;raquo; случае!</target>
        </trans-unit>
        <trans-unit id="93d5c7537e241865d860131eb6d72edc95c9d772" translate="yes" xml:space="preserve">
          <source>The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; will try to read it from &lt;code&gt;CVS/Root&lt;/code&gt;. If no such file exists, it checks for the &lt;code&gt;CVSROOT&lt;/code&gt; environment variable.</source>
          <target state="translated">Корень архива CVS. Может быть локальным (простой путь) или удаленным; в настоящее время поддерживаются только методы доступа: local :,: ext: и: pserver:. Если не указан, &lt;code&gt;git cvsimport&lt;/code&gt; попытается прочитать его из &lt;code&gt;CVS/Root&lt;/code&gt; . Если такого файла не существует, он проверяет переменную среды &lt;code&gt;CVSROOT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df41fdf293aec02e3dee1ead27003284471a1181" translate="yes" xml:space="preserve">
          <source>The root of the tree can be represented by an empty string as &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Корень дерева может быть представлен пустой строкой как &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="557dc21e01559e09224bc25bcbd6a672b4e3d883" translate="yes" xml:space="preserve">
          <source>The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.</source>
          <target state="translated">Немного задействовано правило определения того,какое удаленное ответвление необходимо слить после получения,чтобы не нарушить обратную совместимость.</target>
        </trans-unit>
        <trans-unit id="bbff5506f0bff9eed6d1a29f80ce8f838449bb56" translate="yes" xml:space="preserve">
          <source>The rules by which the pattern matches paths are the same as in &lt;code&gt;.gitignore&lt;/code&gt; files (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), with a few exceptions:</source>
          <target state="translated">Правила, по которым шаблон соответствует путям, такие же, как и в файлах &lt;code&gt;.gitignore&lt;/code&gt; (см. &lt;a href=&quot;gitignore&quot;&gt;Gitignore [5]&lt;/a&gt; ), за некоторыми исключениями:</target>
        </trans-unit>
        <trans-unit id="579e7c08387accae89723ba13e3ec53145837232" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;--merge&lt;/code&gt; option above, but changes the way the conflicting hunks are presented, overriding the &lt;code&gt;merge.conflictStyle&lt;/code&gt; configuration variable. Possible values are &quot;merge&quot; (default) and &quot;diff3&quot; (in addition to what is shown by &quot;merge&quot; style, shows the original contents).</source>
          <target state="translated">То же, что &lt;code&gt;--merge&lt;/code&gt; опция --merge выше, но изменяет способ представления конфликтующих &lt;code&gt;merge.conflictStyle&lt;/code&gt; , переопределяя переменную конфигурации merge.conflictStyle . Возможные значения: &amp;laquo;merge&amp;raquo; (по умолчанию) и &amp;laquo;diff3&amp;raquo; (в дополнение к тому, что показано стилем &amp;laquo;merge&amp;raquo;, показывает исходное содержимое).</target>
        </trans-unit>
        <trans-unit id="1a11cc7f94381fe2de07d484775d2914bf62d241" translate="yes" xml:space="preserve">
          <source>The same as the previous one:</source>
          <target state="translated">Так же,как и предыдущий:</target>
        </trans-unit>
        <trans-unit id="ebdfbbadd1b4e3e4d3c390aed297730072348592" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;pu&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;pu&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">Такой же процесс перемотки и восстановления может быть выполнен для &lt;code&gt;pu&lt;/code&gt; . Публичное объявление не требуется, поскольку &lt;code&gt;pu&lt;/code&gt; - это одноразовая ветка, как описано выше.</target>
        </trans-unit>
        <trans-unit id="982acf1816c2fb0e10e67de1c939cdcea16cc699" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;seen&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;seen&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d931302d20c8d2d3f4d29cdb99720d08f56244" translate="yes" xml:space="preserve">
          <source>The same trailer as a v1 pack file:</source>
          <target state="translated">Тот же трейлер,что и файл пакета v1:</target>
        </trans-unit>
        <trans-unit id="ef6e4cd5de79a2002e4df69090fc16d7024fe532" translate="yes" xml:space="preserve">
          <source>The sample &lt;code&gt;prepare-commit-msg&lt;/code&gt; hook that comes with Git removes the help message found in the commented portion of the commit template.</source>
          <target state="translated">Образец ловушки &lt;code&gt;prepare-commit-msg&lt;/code&gt; , поставляемый с Git, удаляет справочное сообщение, обнаруженное в закомментированной части шаблона фиксации.</target>
        </trans-unit>
        <trans-unit id="0814a224cf6ffffca90b05b46ffd264f8d62f600" translate="yes" xml:space="preserve">
          <source>The sample hooks are all disabled by default. To enable one of the sample hooks rename it by removing its &lt;code&gt;.sample&lt;/code&gt; suffix.</source>
          <target state="translated">По умолчанию все хуки сэмплов отключены. Чтобы включить один из примеров перехватчиков, переименуйте его, удалив суффикс &lt;code&gt;.sample&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee2f5fb52849fdcd69a62a399938c4c71ec4e36c" translate="yes" xml:space="preserve">
          <source>The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep the same name, you may be in the situation that two people both have &quot;version X&quot;, but they actually have &lt;code&gt;different&lt;/code&gt; &quot;X&quot;'s. So just call it &quot;X.1&quot; and be done with it.</source>
          <target state="translated">Вменяемая вещь. Просто признайте, что вы облажались, и используйте другое имя. Другие уже видели одно имя тега, и если вы сохраните то же имя, вы можете оказаться в ситуации, когда у двух людей есть &amp;laquo;версия X&amp;raquo;, но на самом деле у них &lt;code&gt;different&lt;/code&gt; &amp;laquo;X&amp;raquo;. Так что просто назовите его &amp;laquo;X.1&amp;raquo; и покончите с этим.</target>
        </trans-unit>
        <trans-unit id="16a78cd21b6c709f016f4a17d2a1069e970db97c" translate="yes" xml:space="preserve">
          <source>The script expects you to provide the key roots where it can start the import from an &lt;code&gt;initial import&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt; type of Arch commit. It will follow and import new branches within the provided roots.</source>
          <target state="translated">Сценарий ожидает, что вы предоставите ключевые корни, откуда он может начать импорт из &lt;code&gt;initial import&lt;/code&gt; или типа &lt;code&gt;tag&lt;/code&gt; фиксации Arch. Он будет следовать и импортировать новые ветви в предоставленные корни.</target>
        </trans-unit>
        <trans-unit id="793ca81ee99913a2e3edc7ca33209f79549422e8" translate="yes" xml:space="preserve">
          <source>The scriptlet sets &lt;code&gt;GIT_DIR&lt;/code&gt; and &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; shell variables, but does &lt;strong&gt;not&lt;/strong&gt; export them to the environment.</source>
          <target state="translated">Сценарий устанавливает переменные оболочки &lt;code&gt;GIT_DIR&lt;/code&gt; и &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; , но &lt;strong&gt;не&lt;/strong&gt; экспортирует их в среду.</target>
        </trans-unit>
        <trans-unit id="8b53f7beee61a37b0174ea389f5f36080ff3c1b7" translate="yes" xml:space="preserve">
          <source>The second .gitignore prevents Git from ignoring &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt;.</source>
          <target state="translated">Второй .gitignore не позволяет Git игнорировать &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc737587a80c0c07a4fffd3646c479ff0f86cddd" translate="yes" xml:space="preserve">
          <source>The second example demonstrates that you can abbreviate the object name to only the first several hexadecimal digits in most places.</source>
          <target state="translated">Второй пример демонстрирует,что в большинстве мест можно сократить имя объекта только до первых нескольких шестнадцатеричных цифр.</target>
        </trans-unit>
        <trans-unit id="2890a9def3fff903603dee47b68cd9b5af108707" translate="yes" xml:space="preserve">
          <source>The second format is what gets used when &lt;code&gt;--stage=all&lt;/code&gt;. The three stage temporary fields (stage1temp, stage2temp, stage3temp) list the name of the temporary file if there is a stage entry in the index or &lt;code&gt;.&lt;/code&gt; if there is no stage entry. Paths which only have a stage 0 entry will always be omitted from the output.</source>
          <target state="translated">Второй формат используется, когда &lt;code&gt;--stage=all&lt;/code&gt; . В трех временных полях этапа (stage1temp, stage2temp, stage3temp) перечисляется имя временного файла, если в индексе или &lt;code&gt;.&lt;/code&gt; если нет выхода на сцену. Пути, которые имеют запись только стадии 0, всегда будут исключены из вывода.</target>
        </trans-unit>
        <trans-unit id="8a6f107e4f2dc8b17455f1349e940becb9fc3a6b" translate="yes" xml:space="preserve">
          <source>The second issue is one of auditing. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important branch. The problematic merge &lt;code&gt;R&lt;/code&gt; above is not likely to be the merge commit that was used to merge into an important branch. Instead, the merge &lt;code&gt;N&lt;/code&gt; was used to merge &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; into the important branch. This commit may have information about why the change &lt;code&gt;X&lt;/code&gt; came to override the changes from &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; in its commit message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b87f951d8d8be1a02da6e062a3489256945d73" translate="yes" xml:space="preserve">
          <source>The second parameter passed to the hook is the indicator for whether or not the index was updated and the skip-worktree bit could have changed. &quot;1&quot; meaning skip-worktree bits could have been updated and &quot;0&quot; meaning they were not.</source>
          <target state="translated">Второй параметр,переданный на крючок-это индикатор того,обновлялся ли индекс или нет,и мог ли измениться бит skip-worktree.&quot;1&quot; означает,что бит skip-worktree мог быть обновлен,а &quot;0&quot;-нет.</target>
        </trans-unit>
        <trans-unit id="b730007914036d9f0fb3ba6052d64853bae216ae" translate="yes" xml:space="preserve">
          <source>The second syntax (&quot;&lt;code&gt;git merge --abort&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts. &lt;code&gt;git merge --abort&lt;/code&gt; will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), &lt;code&gt;git merge --abort&lt;/code&gt; will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</source>
          <target state="translated">Второй синтаксис (&amp;laquo; &lt;code&gt;git merge --abort&lt;/code&gt; &amp;raquo;) может быть запущен только после того, как слияние привело к конфликтам. &lt;code&gt;git merge --abort&lt;/code&gt; прервет процесс слияния и попытается восстановить состояние до слияния. Однако, если при запуске слияния были незафиксированные изменения (и особенно если эти изменения были дополнительно изменены после начала слияния), &lt;code&gt;git merge --abort&lt;/code&gt; в некоторых случаях не сможет восстановить исходные (до слияния) изменения. Следовательно:</target>
        </trans-unit>
        <trans-unit id="1f7dcee78b5872602756cd0d868ad6253db301fe" translate="yes" xml:space="preserve">
          <source>The second transformation in the chain is diffcore-break, and is controlled by the -B option to the &lt;code&gt;git diff-*&lt;/code&gt; commands. This is used to detect a filepair that represents &quot;complete rewrite&quot; and break such filepair into two filepairs that represent delete and create. E.g. If the input contained this filepair:</source>
          <target state="translated">Второе преобразование в цепочке - это diffcore-break, которое управляется параметром -B команд &lt;code&gt;git diff-*&lt;/code&gt; . Это используется для обнаружения файловой пары, которая представляет собой &amp;laquo;полную перезапись&amp;raquo;, и разбивает такую ​​файловую пару на две файловые пары, которые представляют собой удаление и создание. Например, если вход содержит эту файловую пару:</target>
        </trans-unit>
        <trans-unit id="5aa738048a0181b9705365955bd04c18156f9d33" translate="yes" xml:space="preserve">
          <source>The section &lt;code&gt;submodule.foo.*&lt;/code&gt; in the &lt;code&gt;.gitmodules&lt;/code&gt; file gives additional hints to Git&amp;rsquo;s porcelain layer. For example, the &lt;code&gt;submodule.foo.url&lt;/code&gt; setting specifies where to obtain the submodule.</source>
          <target state="translated">Раздел &lt;code&gt;submodule.foo.*&lt;/code&gt; В &lt;code&gt;.gitmodules&lt;/code&gt; файле дает дополнительные подсказки фарфорового слоя Git и . Например, параметр &lt;code&gt;submodule.foo.url&lt;/code&gt; указывает, где получить подмодуль.</target>
        </trans-unit>
        <trans-unit id="addff8a92e5ddb901ae8a38330bc2dcce4be9fbb" translate="yes" xml:space="preserve">
          <source>The section or key is invalid (ret=1),</source>
          <target state="translated">Раздел или ключ недействительны (ret=1),</target>
        </trans-unit>
        <trans-unit id="463ba2454fad2719570e32271a038c3acce699a7" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any &quot;unshallow&quot; lines for anything which the client has not indicated was shallow as a part of its request.</source>
          <target state="translated">Сервер НЕ ДОЛЖЕН посылать какие-либо &quot;непустые&quot; строки для чего-либо,что клиент не указал в своем запросе как непустое.</target>
        </trans-unit>
        <trans-unit id="d868af4cbdec034778f61defdf53e9a4307fd341" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any refs which were not requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">Сервер НЕ ДОЛЖЕН отправлять какие-либо ссылки, которые не были запрошены с использованием строк &lt;code&gt;want-ref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="446930d87bed0e82e29e329dd081708ba37057c2" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;agent=X&lt;/code&gt;) to notify the client that the server is running version &lt;code&gt;X&lt;/code&gt;. The client may optionally send its own agent string by including the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;Y&lt;/code&gt; (in the form &lt;code&gt;agent=Y&lt;/code&gt;) in its request to the server (but it MUST NOT do so if the server did not advertise the agent capability). The &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; strings may contain any printable ASCII characters except space (i.e., the byte range 32 &amp;lt; x &amp;lt; 127), and are typically of the form &quot;package/version&quot; (e.g., &quot;git/1.8.3.1&quot;). The agent strings are purely informative for statistics and debugging purposes, and MUST NOT be used to programmatically assume the presence or absence of particular features.</source>
          <target state="translated">Сервер может рекламировать &lt;code&gt;agent&lt;/code&gt; способность со значением &lt;code&gt;X&lt;/code&gt; (в форме &lt;code&gt;agent=X&lt;/code&gt; ) , чтобы уведомить клиента о том , что сервер работает под управлением версии &lt;code&gt;X&lt;/code&gt; . Клиент может дополнительно послать свою собственную строку агента, включив возможность &lt;code&gt;agent&lt;/code&gt; со значением &lt;code&gt;Y&lt;/code&gt; (в форме &lt;code&gt;agent=Y&lt;/code&gt; ) в свой запрос к серверу (но он НЕ ДОЛЖЕН делать это, если сервер не анонсировал возможности агента). &lt;code&gt;X&lt;/code&gt; и &lt;code&gt;Y&lt;/code&gt; Строки могут содержать любые печатаемые символы ASCII, кроме пробела (т. е. диапазон байтов 32 &amp;lt;x &amp;lt;127), и обычно имеют форму &amp;laquo;пакет / версия&amp;raquo; (например, &amp;laquo;git / 1.8.3.1&amp;raquo;). Строки агента являются чисто информативными для целей статистики и отладки и НЕ ДОЛЖНЫ использоваться для программного предположения о наличии или отсутствии определенных функций.</target>
        </trans-unit>
        <trans-unit id="5d8f08f3df19bb2371d7bbd09e4f22512a514d87" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;object-format&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;object-format=X&lt;/code&gt;) to notify the client that the server is able to deal with objects using hash algorithm X. If not specified, the server is assumed to only handle SHA-1. If the client would like to use a hash algorithm other than SHA-1, it should specify its object-format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c71d3c4f66b93dbf4d80cac3ad0ba90c74cbf8" translate="yes" xml:space="preserve">
          <source>The server may advertise a session ID that can be used to identify this process across multiple requests. The client may advertise its own session ID back to the server as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbb8fc2dd2ef1317864e26b0a2f75da26a1d7f0" translate="yes" xml:space="preserve">
          <source>The server sends a &quot;shallow obj-id&quot; line for each commit whose parents will not be sent in the following packfile.</source>
          <target state="translated">Сервер посылает строку &quot;мелкий объект-ид&quot; для каждого коммита,чьи родители не будут отправлены в следующем пакете.</target>
        </trans-unit>
        <trans-unit id="15cbc52acb55c8a437e7a9fc2cb2ebb8c994afc3" translate="yes" xml:space="preserve">
          <source>The server sends an &quot;unshallow obj-id&quot; line for each commit which the client has indicated is shallow, but is no longer shallow as a result of the fetch (due to its parents being sent in the following packfile).</source>
          <target state="translated">Сервер посылает строку &quot;unshallow obj-id&quot; для каждого коммита,который клиент указал как неглубокий,но больше неглубокий в результате фетча (из-за того,что его родители были отправлены в следующем пакетном файле).</target>
        </trans-unit>
        <trans-unit id="3f482eecb5e3fca563243c0419eece540e0582ac" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;ACK obj-id&quot; for all of the object ids sent as have lines which are common.</source>
          <target state="translated">Сервер ответит &quot;ACK obj-id&quot; для всех присланных идентификаторов объектов,так как они имеют общие строки.</target>
        </trans-unit>
        <trans-unit id="543a974b0aa8c62d541ca2830198235b945cc003" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;NAK&quot; if none of the object ids sent as have lines were common.</source>
          <target state="translated">Сервер ответит &quot;NAK&quot;,если ни один из идентификаторов объектов,отправленных как имеющие строки,не был общим.</target>
        </trans-unit>
        <trans-unit id="568256da628f1737b5310a22de9a07629ce73e0d" translate="yes" xml:space="preserve">
          <source>The server will respond with a &quot;ready&quot; line indicating that the server has found an acceptable common base and is ready to make and send a packfile (which will be found in the packfile section of the same response)</source>
          <target state="translated">Сервер ответит строкой &quot;ready&quot;,указывая,что сервер нашел приемлемую общую базу и готов сделать и отправить пакетный файл (который будет найден в секции пакетного файла в том же ответе)</target>
        </trans-unit>
        <trans-unit id="69ff3eec8c55e5a8095ea13f51e31e429dc845d6" translate="yes" xml:space="preserve">
          <source>The server will send a ref listing (&quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;) for each reference requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">Сервер отправит список ссылок (&quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;) для каждой ссылки, запрошенной с использованием строк &lt;code&gt;want-ref&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="afb7e2ac1ca268d29d3dabe65a1485bc3c99ebf1" translate="yes" xml:space="preserve">
          <source>The server will then check to ensure that the client&amp;rsquo;s request is comprised of a valid command as well as valid capabilities which were advertised. If the request is valid the server will then execute the command. A server MUST wait till it has received the client&amp;rsquo;s entire request before issuing a response. The format of the response is determined by the command being executed, but in all cases a flush-pkt indicates the end of the response.</source>
          <target state="translated">Затем сервер проверит, что запрос клиента состоит из действительной команды, а также допустимых возможностей, которые были объявлены. Если запрос действителен, сервер выполнит команду. Сервер ДОЛЖЕН дождаться получения всего запроса клиента, прежде чем выдать ответ. Формат ответа определяется выполняемой командой, но во всех случаях flush-pkt указывает на конец ответа.</target>
        </trans-unit>
        <trans-unit id="537b1e0777fad4eaaafbf4ccf5940ab37b1e2ed6" translate="yes" xml:space="preserve">
          <source>The shared index part, to be referenced by $GIT_DIR/index and other temporary index files. Only valid in split index mode.</source>
          <target state="translated">Часть общего индекса,на которую будут ссылаться $GIT_DIR/index и другие временные файлы индексов.Действительно только в режиме разделенного индекса.</target>
        </trans-unit>
        <trans-unit id="d11a14c0103fd18e1ebb96bcb7251e0f8abbce80" translate="yes" xml:space="preserve">
          <source>The shift magic first throws away the tree id and then the -p parameters. Note that this handles merges properly! In case Darl committed a merge between P1 and P2, it will be propagated properly and all children of the merge will become merge commits with P1,P2 as their parents instead of the merge commit.</source>
          <target state="translated">Магический сдвиг сначала выбрасывает id дерева,а затем -p параметры.Обратите внимание,что эта ручка правильно сливается! В случае,если Дарл совершил слияние между P1 и P2,оно будет правильно распространено,и все дочерние элементы слияния станут коммитами слияния с P1,P2 в качестве их родителей вместо коммита слияния.</target>
        </trans-unit>
        <trans-unit id="e33b2d8b27401f604cb70ad4d214df90a2abf20c" translate="yes" xml:space="preserve">
          <source>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</source>
          <target state="translated">Индекс схожести-это процент неизмененных линий,а индекс схожести-это процент измененных линий.Это округленное целое число,за которым следует знак процента.Таким образом,значение индекса сходства 100% зарезервировано для двух одинаковых файлов,в то время как 100%-ное отличие означает,что ни одна строка из старого файла не превратилась в новую.</target>
        </trans-unit>
        <trans-unit id="09f0c715250f8ac9e78727d6768d66502facff83" translate="yes" xml:space="preserve">
          <source>The simplest commit to find is the HEAD commit, which we can find from .git/HEAD:</source>
          <target state="translated">Самый простой коммит для поиска-это HEAD коммит,который мы можем найти в .git/HEAD:</target>
        </trans-unit>
        <trans-unit id="938f800e1b465bd0f07eb377492ba2456bfbed2c" translate="yes" xml:space="preserve">
          <source>The simplest way to do this is using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and ssh; to update the remote branch named &lt;code&gt;master&lt;/code&gt; with the latest state of your branch named &lt;code&gt;master&lt;/code&gt;, run</source>
          <target state="translated">Самый простой способ сделать это - использовать &lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt; и ssh; чтобы обновить удаленную ветку с именем &lt;code&gt;master&lt;/code&gt; с последним состоянием вашей ветки с именем &lt;code&gt;master&lt;/code&gt; , запустите</target>
        </trans-unit>
        <trans-unit id="a5eba655ac4b55a1106bdc6c6dbf2b0d1ad04c8a" translate="yes" xml:space="preserve">
          <source>The simplest way to mark a file as binary is to unset the diff attribute in the &lt;code&gt;.gitattributes&lt;/code&gt; file:</source>
          <target state="translated">Самый простой способ пометить файл как двоичный - &lt;code&gt;.gitattributes&lt;/code&gt; атрибут diff в файле .gitattributes :</target>
        </trans-unit>
        <trans-unit id="0f95b7ebe5f42d4f0766af1eda2b35efa6854fa9" translate="yes" xml:space="preserve">
          <source>The size in bytes of the commit or tag message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bb329f9f9a76ae9c81982693e8d5911709e87c" translate="yes" xml:space="preserve">
          <source>The size of the object (the same as &lt;code&gt;git cat-file -s&lt;/code&gt; reports). Append &lt;code&gt;:disk&lt;/code&gt; to get the size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">Размер объекта (как в &lt;code&gt;git cat-file -s&lt;/code&gt; reports). Добавьте &lt;code&gt;:disk&lt;/code&gt; , чтобы получить размер в байтах, который объект занимает на диске. См. Примечание о размерах на диске в разделе &lt;code&gt;CAVEATS&lt;/code&gt; ниже.</target>
        </trans-unit>
        <trans-unit id="3527fa64b6fd749102c379b2fd96b0df5cd454cb" translate="yes" xml:space="preserve">
          <source>The size of the window used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no window size is given on the command line. Defaults to 10.</source>
          <target state="translated">Размер окна, используемого &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1],&lt;/a&gt; когда размер окна не указан в командной строке. По умолчанию 10.</target>
        </trans-unit>
        <trans-unit id="2372575566ae8c805d7580bdcbad6da1c4463611" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the object (the same as &lt;code&gt;cat-file -s&lt;/code&gt; reports).</source>
          <target state="translated">Размер объекта в байтах (такой же, как у отчетов &lt;code&gt;cat-file -s&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="43c333a5a6bd3bca8b34d5163a7aa7b6d79d2d40" translate="yes" xml:space="preserve">
          <source>The size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">Размер в байтах, который объект занимает на диске. См. Примечание о размерах на диске в разделе &lt;code&gt;CAVEATS&lt;/code&gt; ниже.</target>
        </trans-unit>
        <trans-unit id="7d544171c06a9cb39c4059f830c0a8558d3922c9" translate="yes" xml:space="preserve">
          <source>The slash &lt;code&gt;/&lt;/code&gt; is used as the directory separator. Separators may occur at the beginning, middle or end of the &lt;code&gt;.gitignore&lt;/code&gt; search pattern.</source>
          <target state="translated">Косая черта &lt;code&gt;/&lt;/code&gt; используется как разделитель каталогов. Разделители могут &lt;code&gt;.gitignore&lt;/code&gt; в начале, середине или конце поискового шаблона .gitignore .</target>
        </trans-unit>
        <trans-unit id="e18b2266f1b1b9062e466bd05dd697dc8d44c68f" translate="yes" xml:space="preserve">
          <source>The smaller the changes in your commit, the most effective &quot;git bisect&quot; will be. And you will probably need &quot;git bisect&quot; less in the first place, as small changes are easier to review even if they are only reviewed by the committer.</source>
          <target state="translated">Чем меньше изменения в вашем коммите,тем более эффективным будет &quot;git-бисект&quot;.И вам,скорее всего,понадобится меньше &quot;git-биссектов&quot;,так как небольшие изменения легче просмотреть,даже если они просматриваются только коммиттером.</target>
        </trans-unit>
        <trans-unit id="0dab2fe7462a5d0c0b797d08e789dbaaf7bfa1df" translate="yes" xml:space="preserve">
          <source>The smart HTTP server, &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt;, will pass GIT_NAMESPACE through to the backend programs; see &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt; for sample configuration to expose repository namespaces as repositories.</source>
          <target state="translated">Интеллектуальный HTTP-сервер, &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]&lt;/a&gt; , будет передавать GIT_NAMESPACE внутренним программам; см. &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]&lt;/a&gt; для примера конфигурации для предоставления пространств имен репозиториев как репозиториев.</target>
        </trans-unit>
        <trans-unit id="9ee3be6f644f850e9ae409b580b74ced862493f8" translate="yes" xml:space="preserve">
          <source>The solution, of course, is to make a merge that we can undo: merge into a throw-away branch.</source>
          <target state="translated">Решение,конечно,состоит в том,чтобы произвести слияние,которое мы можем отменить:слияние в отбрасывающую ветку.</target>
        </trans-unit>
        <trans-unit id="8a1117f540255f9a5dcffa1baa25558f77657b0e" translate="yes" xml:space="preserve">
          <source>The special case of restarting an incremental import from the current branch value should be written as:</source>
          <target state="translated">Особый случай перезапуска инкрементального импорта из текущего значения ветки должен быть записан как:</target>
        </trans-unit>
        <trans-unit id="3599d1b8b89ee48d0b633dcff9041c57284c3251" translate="yes" xml:space="preserve">
          <source>The special exit code 125 should be used when the current source code cannot be tested. If the script exits with this code, the current revision will be skipped (see &lt;code&gt;git bisect skip&lt;/code&gt; above). 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable&amp;mdash;​these details do not matter, as they are normal errors in the script, as far as &lt;code&gt;bisect run&lt;/code&gt; is concerned).</source>
          <target state="translated">Если текущий исходный код не может быть протестирован, следует использовать специальный код выхода 125. Если сценарий завершается с этим кодом, текущая версия будет пропущена (см. &lt;code&gt;git bisect skip&lt;/code&gt; выше). 125 было выбрано как наивысшее разумное значение для использования для этой цели, потому что 126 и 127 используются оболочками POSIX для сигнализации о конкретном состоянии ошибки (127 - для команды не найдена, 126 - для команды найдена, но не исполняется - эти детали не имеет значение, поскольку это нормальные ошибки в скрипте, что касается выполнения &lt;code&gt;bisect run&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="60ac8fe2a99f998c150bb7d9adc8dfbeed95a10d" translate="yes" xml:space="preserve">
          <source>The special null SHA-1 (40 zeros) specifies that the branch is to be removed.</source>
          <target state="translated">Специальный ноль SHA-1 (40 нулей)указывает,что ветка должна быть удалена.</target>
        </trans-unit>
        <trans-unit id="a4c2fa6682338e4d7c45557107add1984be0213c" translate="yes" xml:space="preserve">
          <source>The special refspec &lt;code&gt;:&lt;/code&gt; (or &lt;code&gt;+:&lt;/code&gt; to allow non-fast-forward updates) directs Git to push &quot;matching&quot; branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side.</source>
          <target state="translated">Специальный refspec &lt;code&gt;:&lt;/code&gt; (или &lt;code&gt;+:&lt;/code&gt; для разрешения обновлений без быстрой перемотки вперед) указывает Git нажимать &amp;laquo;соответствующие&amp;raquo; ветки: для каждой ветки, которая существует на локальной стороне, удаленная сторона обновляется, если ветка с таким же именем уже существует на удаленной стороне.</target>
        </trans-unit>
        <trans-unit id="f2f702d2704e1b64279419d712ca4460c3b7f78e" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;none&lt;/code&gt; can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.</source>
          <target state="translated">Специальную строку &lt;code&gt;none&lt;/code&gt; можно использовать в качестве прокси-команды, чтобы указать, что прокси-сервер не будет использоваться для данного шаблона домена. Это полезно для исключения серверов внутри брандмауэра из использования прокси, при этом по умолчанию используется общий прокси для внешних доменов.</target>
        </trans-unit>
        <trans-unit id="65b859a3a4528b4a1eebafeebe9d2d28ac0eb085" translate="yes" xml:space="preserve">
          <source>The special symbol &quot;HEAD&quot; can always be used to refer to the current branch. In fact, Git uses a file named &lt;code&gt;HEAD&lt;/code&gt; in the &lt;code&gt;.git&lt;/code&gt; directory to remember which branch is current:</source>
          <target state="translated">Для обозначения текущей ветви всегда можно использовать специальный символ &amp;laquo;HEAD&amp;raquo;. Фактически, Git использует файл с именем &lt;code&gt;HEAD&lt;/code&gt; в каталоге &lt;code&gt;.git&lt;/code&gt; , чтобы запомнить текущую ветвь:</target>
        </trans-unit>
        <trans-unit id="54b91d851f1b23aa70b29c0e74d2c28879b6de30" translate="yes" xml:space="preserve">
          <source>The ssh and git protocols additionally support ~username expansion:</source>
          <target state="translated">Протоколы ssh и git дополнительно поддерживают расширение ~username:</target>
        </trans-unit>
        <trans-unit id="ac6c6d73b5f6b7c3cef28dfe32da61495601bd7c" translate="yes" xml:space="preserve">
          <source>The standard actions are:</source>
          <target state="translated">Стандартные действия:</target>
        </trans-unit>
        <trans-unit id="a72f515f06e2719cd062e161d9ed80a61b68c92f" translate="yes" xml:space="preserve">
          <source>The standard email format as described by RFC 2822, for example &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt;.</source>
          <target state="translated">Стандартный формат электронной почты, описанный в RFC 2822, например &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8128f4cfe82d86e129a0094608260664c3bb1ba3" translate="yes" xml:space="preserve">
          <source>The standard helper program to use with git-merge-index</source>
          <target state="translated">Стандартная вспомогательная программа для использования с git-merge-index</target>
        </trans-unit>
        <trans-unit id="4d34b021b617aa2bf3f93982ac428b041f085fbe" translate="yes" xml:space="preserve">
          <source>The starting point for the new branch. Specifying a &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; allows you to create a branch based on some other point in history than where HEAD currently points. (Or, in the case of &lt;code&gt;--detach&lt;/code&gt;, allows you to inspect and detach from some other point.)</source>
          <target state="translated">Отправная точка для новой ветки. Указание &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; позволяет вам создать ветвь, основанную на какой-либо другой точке истории, отличной от той, на которую в настоящее время указывает HEAD. (Или, в случае &lt;code&gt;--detach&lt;/code&gt; , позволяет вам проверить и отсоединиться от какой-либо другой точки.)</target>
        </trans-unit>
        <trans-unit id="ca9ba47b83a1def4d8a6c769f2e642f061d5236a" translate="yes" xml:space="preserve">
          <source>The status of GPG verification of the push certificate, using the same mnemonic as used in &lt;code&gt;%G?&lt;/code&gt; format of &lt;code&gt;git log&lt;/code&gt; family of commands (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;).</source>
          <target state="translated">Статус проверки GPG push-сертификата с использованием той же мнемоники, что и в &lt;code&gt;%G?&lt;/code&gt; Формат &lt;code&gt;git log&lt;/code&gt; семейства команд (см &lt;a href=&quot;git-log&quot;&gt;ГИТ-журнал [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c902748a09ab505851b0b39809c60f3db2027be9" translate="yes" xml:space="preserve">
          <source>The status of the fetch is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">Статус выборки выводится в табличной форме,при этом каждая строка представляет собой статус одного ссылка.Каждая строка имеет форму:</target>
        </trans-unit>
        <trans-unit id="7729563c964ef73ba71f39abfa320766ac0cea33" translate="yes" xml:space="preserve">
          <source>The status of the push is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">Статус нажатия выводится в табличной форме,при этом каждая строка представляет собой статус одного ссылка.Каждая строка имеет форму:</target>
        </trans-unit>
        <trans-unit id="e939f21e3282d453b1398071feb25115360b90b4" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if --porcelain or --verbose option is used.</source>
          <target state="translated">Статус обновленных ссылок отображается только при использовании опции --porcelain или --verbose.</target>
        </trans-unit>
        <trans-unit id="0ebfa7ce02ec5605e425e0cd98062f5bbd8f2510" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if the --verbose option is used.</source>
          <target state="translated">Статус обновленных ссылок отображается только при использовании опции --verbose.</target>
        </trans-unit>
        <trans-unit id="a97643bd561fabe3d136679e4752cb73667ec062" translate="yes" xml:space="preserve">
          <source>The structured objects can further have their structure and connectivity to other objects verified. This is generally done with the &lt;code&gt;git fsck&lt;/code&gt; program, which generates a full dependency graph of all objects, and verifies their internal consistency (in addition to just verifying their superficial consistency through the hash).</source>
          <target state="translated">Структурированные объекты могут дополнительно проверить свою структуру и связь с другими объектами. Обычно это делается с помощью программы &lt;code&gt;git fsck&lt;/code&gt; , которая генерирует полный граф зависимостей всех объектов и проверяет их внутреннюю согласованность (в дополнение к простой проверке их поверхностной согласованности с помощью хеша).</target>
        </trans-unit>
        <trans-unit id="af4ab93b8907c3bc82033e90c4bc6eedaac09e1c" translate="yes" xml:space="preserve">
          <source>The submit process invokes the editor before each p4 change is submitted. If this setting is true, though, the editing step is skipped.</source>
          <target state="translated">Процесс отправки вызывает редактор перед отправкой каждого изменения в p4.Если эта настройка верна,шаг редактирования пропускается.</target>
        </trans-unit>
        <trans-unit id="72386229ffdfc0f6ba847ccdd7620fcafabeae30" translate="yes" xml:space="preserve">
          <source>The submodule directories are there, but they&amp;rsquo;re empty:</source>
          <target state="translated">Каталоги подмодулей есть, но они пусты:</target>
        </trans-unit>
        <trans-unit id="802b1c9a36cac97c548242e11fe5baa3275576f0" translate="yes" xml:space="preserve">
          <source>The submodule will never be considered modified (but will nonetheless show up in the output of status and commit when it has been staged).</source>
          <target state="translated">Субмодуль никогда не будет считаться изменённым (но,тем не менее,будет отображаться в выводе статуса и фиксироваться,когда он был инсценирован).</target>
        </trans-unit>
        <trans-unit id="7180d60887d97b6ca57dd91c2b86681f019ca631" translate="yes" xml:space="preserve">
          <source>The submodule&amp;rsquo;s &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file would come into play when running &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; in the superproject, as this would check if the submodule has any changes not published to any remote. The remotes are configured in the submodule as usual in the &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/config&lt;/code&gt; подмодуля вступит в игру при запуске &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; в суперпроекте, так как это проверяет, есть ли в подмодуле какие-либо изменения, не опубликованные ни на каком удаленном компьютере. Пульты настраиваются в подмодуле, как обычно, в &lt;code&gt;$GIT_DIR/config&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2a87578b15befa74b2d27eca3216884ceb35493c" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{push}&lt;/code&gt; reports the branch &quot;where we would push to&quot; if &lt;code&gt;git push&lt;/code&gt; were run while &lt;code&gt;branchname&lt;/code&gt; was checked out (or the current &lt;code&gt;HEAD&lt;/code&gt; if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in &lt;code&gt;refs/remotes/&lt;/code&gt;).</source>
          <target state="translated">Суффикс &lt;code&gt;@{push}&lt;/code&gt; сообщает ветку, &quot;куда мы будем нажимать&quot;, если &lt;code&gt;git push&lt;/code&gt; был запущен, когда имя &lt;code&gt;branchname&lt;/code&gt; было извлечено (или текущий &lt;code&gt;HEAD&lt;/code&gt; , если имя ветки не указано). Поскольку наш пункт назначения push находится в удаленном репозитории, мы, конечно, сообщаем о локальной ветке отслеживания, которая соответствует этой ветке (то есть, что-то в &lt;code&gt;refs/remotes/&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="c10fd9c6c93e1de11dbe32978aa15d853b4103fb" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{upstream}&lt;/code&gt; to a branchname (short form &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt;) refers to the branch that the branch specified by branchname is set to build on top of (configured with &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;). A missing branchname defaults to the current one. These suffixes are also accepted when spelled in uppercase, and they mean the same thing no matter the case.</source>
          <target state="translated">Суффикс &lt;code&gt;@{upstream}&lt;/code&gt; к имени ответвления (сокращенная форма &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt; ) относится к ветке, на которую устанавливается ветвь, указанная с помощью branchname (настроенная с помощью &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; и &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; ). Отсутствующее имя ветки по умолчанию соответствует текущему. Эти суффиксы также принимаются при написании прописными буквами и означают одно и то же в любом случае.</target>
        </trans-unit>
        <trans-unit id="35fca7d90e0c51050df5863335fd96cb674d847a" translate="yes" xml:space="preserve">
          <source>The symlink will either be absolute (beginning with a /), or relative to the tree root. For instance, if dir/link points to ../../foo, then &amp;lt;symlink&amp;gt; will be ../foo. &amp;lt;size&amp;gt; is the size of the symlink in bytes.</source>
          <target state="translated">Символическая ссылка будет либо абсолютной (начиная с /), либо относительно корня дерева. Например, если dir / link указывает на ../../foo, тогда &amp;lt;symlink&amp;gt; будет ../foo. &amp;lt;размер&amp;gt; - размер символической ссылки в байтах.</target>
        </trans-unit>
        <trans-unit id="1e32c77f2578ce3c979cd217827d9aa3c6897be9" translate="yes" xml:space="preserve">
          <source>The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; characters begin comments to the end of line, blank lines are ignored.</source>
          <target state="translated">Синтаксис довольно гибкий и разрешающий; пробелы в большинстве случаев игнорируются. &lt;code&gt;#&lt;/code&gt; И &lt;code&gt;;&lt;/code&gt; символы начинают комментарии до конца строки, пустые строки игнорируются.</target>
        </trans-unit>
        <trans-unit id="e9a240786337cb206c43c416821000b9a6721022" translate="yes" xml:space="preserve">
          <source>The syntax of the configuration files is that of Perl, since these files are handled by sourcing them as fragments of Perl code (the language that gitweb itself is written in). Variables are typically set using the &lt;code&gt;our&lt;/code&gt; qualifier (as in &quot;&lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt;&quot;) to avoid syntax errors if a new version of gitweb no longer uses a variable and therefore stops declaring it.</source>
          <target state="translated">Синтаксис файлов конфигурации такой же, как у Perl, так как эти файлы обрабатываются путем получения их как фрагментов кода Perl (язык, на котором написан сам gitweb). Переменные обычно устанавливаются с помощью квалификатора &lt;code&gt;our&lt;/code&gt; (как в &amp;laquo; &lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt; &amp;raquo;), чтобы избежать синтаксических ошибок, если новая версия gitweb больше не использует переменную и, следовательно, перестает ее объявлять.</target>
        </trans-unit>
        <trans-unit id="85d5722bf15562fb833fe3c8f580a92fe2e2d3db" translate="yes" xml:space="preserve">
          <source>The tables below show what happens when running:</source>
          <target state="translated">В таблицах ниже показано,что происходит во время работы:</target>
        </trans-unit>
        <trans-unit id="0ab961c529e0da6916842ede03d74fc7b0e0f90e" translate="yes" xml:space="preserve">
          <source>The tag &lt;code&gt;v2.6.18&lt;/code&gt; is short for &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt;.</source>
          <target state="translated">Тег &lt;code&gt;v2.6.18&lt;/code&gt; - это сокращение от &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5173af0305c1d6df2de24b7ea317c256f65109e" translate="yes" xml:space="preserve">
          <source>The template directory will be one of the following (in order):</source>
          <target state="translated">Каталог шаблонов будет одним из следующих (по порядку):</target>
        </trans-unit>
        <trans-unit id="45d4fdaf8fe9ac583ec50051c8f5eb8c944a1ec1" translate="yes" xml:space="preserve">
          <source>The term &lt;a href=&quot;#def_pickaxe&quot;&gt;pickaxe&lt;/a&gt; refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the &lt;code&gt;--pickaxe-all&lt;/code&gt; option, it can be used to view the full &lt;a href=&quot;#def_changeset&quot;&gt;changeset&lt;/a&gt; that introduced or removed, say, a particular line of text. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;.</source>
          <target state="translated">Термин &lt;a href=&quot;#def_pickaxe&quot;&gt;кирка&lt;/a&gt; относится к опции подпрограмм diffcore, которые помогают выбирать изменения, которые добавляют или удаляют заданную текстовую строку. С параметром &lt;code&gt;--pickaxe-all&lt;/code&gt; его можно использовать для просмотра полного &lt;a href=&quot;#def_changeset&quot;&gt;набора изменений,&lt;/a&gt; который ввел или удалил, скажем, определенную строку текста. См. &lt;a href=&quot;git-diff&quot;&gt;Git-diff [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d2ba0595fa8d197d8c3640c03007e070ceba5b47" translate="yes" xml:space="preserve">
          <source>The text conversion is generally a one-way conversion; in this example, we lose the actual image contents and focus just on the text data. This means that diffs generated by textconv are &lt;em&gt;not&lt;/em&gt; suitable for applying. For this reason, only &lt;code&gt;git diff&lt;/code&gt; and the &lt;code&gt;git log&lt;/code&gt; family of commands (i.e., log, whatchanged, show) will perform text conversion. &lt;code&gt;git
format-patch&lt;/code&gt; will never generate this output. If you want to send somebody a text-converted diff of a binary file (e.g., because it quickly conveys the changes you have made), you should generate it separately and send it as a comment &lt;em&gt;in addition to&lt;/em&gt; the usual binary diff that you might send.</source>
          <target state="translated">Преобразование текста обычно является односторонним; в этом примере мы теряем фактическое содержимое изображения и фокусируемся только на текстовых данных. Это означает, что различия, созданные с помощью textconv, &lt;em&gt;не&lt;/em&gt; подходят для применения. По этой причине только &lt;code&gt;git diff&lt;/code&gt; и семейство команд &lt;code&gt;git log&lt;/code&gt; (например, log, whatchanged, show) будут выполнять преобразование текста. &lt;code&gt;git format-patch&lt;/code&gt; никогда не будет генерировать этот вывод. Если вы хотите отправить кому-то преобразованный текст двоичного файла (например, потому что он быстро передает сделанные вами изменения), вы должны сгенерировать его отдельно и отправить как комментарий &lt;em&gt;в дополнение к&lt;/em&gt; обычному двоичному файлу, который вы могли бы Отправить.</target>
        </trans-unit>
        <trans-unit id="eb234a21c48fd769b7576108683d04bf29f253cb" translate="yes" xml:space="preserve">
          <source>The third syntax (&quot;&lt;code&gt;git merge --continue&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts.</source>
          <target state="translated">Третий синтаксис (&amp;laquo; &lt;code&gt;git merge --continue&lt;/code&gt; &amp;raquo;) может быть запущен только после того, как слияние привело к конфликтам.</target>
        </trans-unit>
        <trans-unit id="a25be90a41e318ce76ddb9737f9c1a04e1e950e3" translate="yes" xml:space="preserve">
          <source>The time between the first rc release and the final release is supposed to be used to test rc versions and fight bugs and especially regressions. And this time is more than 80% of the release cycle time. But this is not the end of the fight yet, as of course it continues after the release.</source>
          <target state="translated">Предполагается,что время между первым выпуском rc и финальным выпуском будет использовано для тестирования rc-версий и борьбы с ошибками и особенно с регрессиями.И это время составляет более 80% времени цикла релиза.Но это еще не конец борьбы,так как,конечно,она продолжается и после релиза.</target>
        </trans-unit>
        <trans-unit id="75271c1b7d85cdfdc3bad04249d4464b9c292a44" translate="yes" xml:space="preserve">
          <source>The time of the change is specified by &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; using the date format that was selected by the --date-format=&amp;lt;fmt&amp;gt; command-line option. See &amp;ldquo;Date Formats&amp;rdquo; above for the set of supported formats, and their syntax.</source>
          <target state="translated">Время изменения указывается &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; с использованием формата даты, выбранного параметром командной строки --date-format = &amp;lt;fmt&amp;gt;. См. &amp;laquo;Форматы даты&amp;raquo; выше, чтобы узнать о поддерживаемых форматах и ​​их синтаксисе.</target>
        </trans-unit>
        <trans-unit id="05b9a4ac37ff05623171d65150ac27013efa2fa0" translate="yes" xml:space="preserve">
          <source>The time of the event is specified by &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; as the number of seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII decimal integer.</source>
          <target state="translated">Время события указывается в &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; как количество секунд с начала эпохи UNIX (полночь, 1 января 1970 г., UTC) и записывается как десятичное целое число ASCII.</target>
        </trans-unit>
        <trans-unit id="e85bdfa8e02113c7aa36696add629ec632f05440" translate="yes" xml:space="preserve">
          <source>The todo list presented by the deprecated &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; does not represent the topology of the revision graph (use &lt;code&gt;--rebase-merges&lt;/code&gt; instead). Editing commits and rewording their commit messages should work fine, but attempts to reorder commits tend to produce counterintuitive results. Use &lt;code&gt;--rebase-merges&lt;/code&gt; in such scenarios instead.</source>
          <target state="translated">Список &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; представленный устаревшим --preserve-merges --interactive , не представляет топологию графа ревизий ( вместо этого используйте &lt;code&gt;--rebase-merges&lt;/code&gt; ). Редактирование коммитов и изменение их сообщений о коммитах должно работать нормально, но попытки изменить порядок коммитов, как правило, дают нелогичные результаты. &lt;code&gt;--rebase-merges&lt;/code&gt; используйте --rebase-merges в таких сценариях.</target>
        </trans-unit>
        <trans-unit id="0f8166907df228eb9266d7566c3cde991d9d39bd" translate="yes" xml:space="preserve">
          <source>The total number of paths.</source>
          <target state="translated">Общее количество путей.</target>
        </trans-unit>
        <trans-unit id="46c0269533706ef03961ed4548e480cdcfd7a84a" translate="yes" xml:space="preserve">
          <source>The trailer records 20-byte SHA-1 checksum of all of the above.</source>
          <target state="translated">В прицепе записывается 20-байтовая контрольная сумма SHA-1.</target>
        </trans-unit>
        <trans-unit id="b9ae27ef547547fea9cd9f5b91bb86a4c8f93238" translate="yes" xml:space="preserve">
          <source>The trailer records a pack checksum of all of the above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9380254df0eb0e126f55d72177d625190ab23928" translate="yes" xml:space="preserve">
          <source>The transmission of the packfile begins immediately after the section header</source>
          <target state="translated">Передача пакета начинается сразу после заголовка секции.</target>
        </trans-unit>
        <trans-unit id="de285c430d2e1f897693d7ccc23434e1a3a5c103" translate="yes" xml:space="preserve">
          <source>The tree object is the tree we examined first, and this commit is unusual in that it lacks any parent.</source>
          <target state="translated">Объектом дерева является дерево,которое мы рассмотрели первыми,и этот коммит необычен тем,что в нём нет ни одного родителя.</target>
        </trans-unit>
        <trans-unit id="9178b43dc9b2907a6afd7a3693f2c6894ec0ecd9" translate="yes" xml:space="preserve">
          <source>The tree of actual checked out files. The working tree normally contains the contents of the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; commit&amp;rsquo;s tree, plus any local changes that you have made but not yet committed.</source>
          <target state="translated">Дерево реально извлеченных файлов. Рабочее дерево обычно содержит содержимое дерева фиксации &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; , а также любые локальные изменения, которые вы сделали, но еще не зафиксировали.</target>
        </trans-unit>
        <trans-unit id="26b5c7d70f82997ceabb111adeeb911e4d89a340" translate="yes" xml:space="preserve">
          <source>The tree or commit to produce an archive for.</source>
          <target state="translated">Дерево или обязательство создать архив для.</target>
        </trans-unit>
        <trans-unit id="90f78952a054862b4ed6d79982e2eab2fc081a24" translate="yes" xml:space="preserve">
          <source>The twist is that if some file doesn&amp;rsquo;t match the index, we don&amp;rsquo;t have a backing store thing for it, and we use the magic &quot;all-zero&quot; sha1 to show that. So let&amp;rsquo;s say that you have edited &lt;code&gt;kernel/sched.c&lt;/code&gt;, but have not actually done a &lt;code&gt;git update-index&lt;/code&gt; on it yet - there is no &quot;object&quot; associated with the new state, and you get:</source>
          <target state="translated">Хитрость в том, что если какой-то файл не соответствует индексу, у нас нет для него резервного хранилища, и мы используем магический &amp;laquo;все-ноль&amp;raquo; sha1, чтобы показать это. Итак, предположим, что вы отредактировали &lt;code&gt;kernel/sched.c&lt;/code&gt; , но на самом деле еще не сделали для него &lt;code&gt;git update-index&lt;/code&gt; - нет &amp;laquo;объекта&amp;raquo;, связанного с новым состоянием, и вы получите:</target>
        </trans-unit>
        <trans-unit id="43d0ee9ad50c1c3c133c4c2ff3f216463ab119aa" translate="yes" xml:space="preserve">
          <source>The two options can be specified together to ask a command to work on both the index and the working tree.</source>
          <target state="translated">Эти две опции могут быть заданы вместе,чтобы запросить команду для работы как над индексом,так и над рабочим деревом.</target>
        </trans-unit>
        <trans-unit id="293c342524c5d665ec090c34f37c73d153be74d5" translate="yes" xml:space="preserve">
          <source>The type of the object (&lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;).</source>
          <target state="translated">Тип объекта ( &lt;code&gt;blob&lt;/code&gt; , &lt;code&gt;tree&lt;/code&gt; , &lt;code&gt;commit&lt;/code&gt; , &lt;code&gt;tag&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="35ca6d49608b210b7cf8be4b86261fa4bd55e249" translate="yes" xml:space="preserve">
          <source>The type of the object (the same as &lt;code&gt;cat-file -t&lt;/code&gt; reports).</source>
          <target state="translated">Тип объекта (то же, что и &lt;code&gt;cat-file -t&lt;/code&gt; reports).</target>
        </trans-unit>
        <trans-unit id="a4f9324e934e3998d2ea50e9e2c5152c5cb8ca76" translate="yes" xml:space="preserve">
          <source>The typical usage is to set just the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables; the other options are provided for more complex use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4785efb96aaa5561500dccbb8420f79e52290b85" translate="yes" xml:space="preserve">
          <source>The underlying Git plumbing tools, such as &lt;code&gt;git ls-files&lt;/code&gt; and &lt;code&gt;git read-tree&lt;/code&gt;, read &lt;code&gt;gitignore&lt;/code&gt; patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git add&lt;/code&gt;, use patterns from the sources specified above.</source>
          <target state="translated">Базовые инструменты Git-сантехники, такие как &lt;code&gt;git ls-files&lt;/code&gt; и &lt;code&gt;git read-tree&lt;/code&gt; , читают шаблоны &lt;code&gt;gitignore&lt;/code&gt; , указанные с помощью параметров командной строки, или из файлов, указанных с помощью параметров командной строки. Инструменты Git более высокого уровня, такие как &lt;code&gt;git status&lt;/code&gt; и &lt;code&gt;git add&lt;/code&gt; , используют шаблоны из указанных выше источников.</target>
        </trans-unit>
        <trans-unit id="c7717dd458d0c51efaa12d77d8ac91e6b1b7952a" translate="yes" xml:space="preserve">
          <source>The unique identifier of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;.</source>
          <target state="translated">Уникальный идентификатор &lt;a href=&quot;#def_object&quot;&gt;объекта&lt;/a&gt; . Имя объекта обычно представлено шестнадцатеричной строкой из 40 символов. Также в просторечии называется &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="190c2fffcaa0444f677f39ee7f8533684a0964b1" translate="yes" xml:space="preserve">
          <source>The unit of storage in Git. It is uniquely identified by the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; of its contents. Consequently, an object cannot be changed.</source>
          <target state="translated">Единица хранения в Git. Он однозначно идентифицируется &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; своего содержимого. Следовательно, объект нельзя изменить.</target>
        </trans-unit>
        <trans-unit id="39871fae2a5575ced5627a5aed0eb792e4c6cc2e" translate="yes" xml:space="preserve">
          <source>The untracked cache extension can be enabled by the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">Расширение неотслеживаемого кеша можно включить с помощью переменной конфигурации &lt;code&gt;core.untrackedCache&lt;/code&gt; (см. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="cc7260429a75073116cdc4eb67dbd95326cbd29d" translate="yes" xml:space="preserve">
          <source>The upstream project is expected to have the commit named by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and the output asks it to integrate the changes you made since that commit, up to the commit named by &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, by visiting the repository named by &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Ожидается, что в вышестоящем проекте фиксация будет названа &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; , а в выходных данных будет предложено интегрировать изменения, внесенные вами после этой фиксации, вплоть до фиксации, названной &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; , путем посещения репозитория с именем &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90c1df21766dd92e926e4168cc9d516f756c7832" translate="yes" xml:space="preserve">
          <source>The upstream reference is generally &lt;code&gt;refs/remotes/p4/master&lt;/code&gt;, but can be overridden using the &lt;code&gt;--origin=&lt;/code&gt; command-line option.</source>
          <target state="translated">Ссылка на восходящий поток обычно - &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; , но ее можно переопределить с помощью параметра командной строки &lt;code&gt;--origin=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="26e6d639f86a47deca57ab3911edaae9c5141f38" translate="yes" xml:space="preserve">
          <source>The user wants to fast-forward to $M.</source>
          <target state="translated">Пользователь хочет перемотать назад на $M.</target>
        </trans-unit>
        <trans-unit id="6df61c6f9e257fdbf1ce4a60fb1d73b618d329ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s color.status configuration is not respected; color will always be off.</source>
          <target state="translated">Конфигурация пользователя color.status не соблюдается; цвет всегда будет выключен.</target>
        </trans-unit>
        <trans-unit id="ab6a20b222f27dba657bc91ae7970effd7a690ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s status.relativePaths configuration is not respected; paths shown will always be relative to the repository root.</source>
          <target state="translated">Конфигурация пользователя status.relativePaths не соблюдается; показанные пути всегда будут относиться к корню репозитория.</target>
        </trans-unit>
        <trans-unit id="20126eaca194f3ace1deaba2aaa4133e6326b674" translate="yes" xml:space="preserve">
          <source>The user-provided shell commands will likely involve a pipeline of commands, resulting in the creation of many processes per commit. Creating and running another process takes a widely varying amount of time between operating systems, but on any platform it is very slow relative to invoking a function.</source>
          <target state="translated">Предоставляемые пользователем команды оболочки,скорее всего,будут включать в себя конвейер команд,что приведет к созданию множества процессов за один коммит.Создание и запуск другого процесса занимает много времени в разных операционных системах,но на любой платформе он очень медленный по сравнению с вызовом функции.</target>
        </trans-unit>
        <trans-unit id="b70cc2efdcbaf68bada34e0550746a0012d52bae" translate="yes" xml:space="preserve">
          <source>The username to use when logging in to the server.</source>
          <target state="translated">Имя пользователя,которое будет использоваться при входе на сервер.</target>
        </trans-unit>
        <trans-unit id="ed02ee3239772cb9dc0f4dbf65c91bd756125cc7" translate="yes" xml:space="preserve">
          <source>The usual way to deal with this is to use &lt;code&gt;git revert&lt;/code&gt;. This preserves the history that the original change was made and was a valuable contribution, but also introduces a new commit that undoes those changes because the original had a problem. The commit message of the revert indicates the commit which was reverted and is usually edited to include an explanation as to why the revert was made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c33e134557b27ccb1a85349808f80ba518bd84" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;add&lt;/code&gt; (this is the default) and &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">Допустимые значения для этой опции: &lt;code&gt;add&lt;/code&gt; (это значение по умолчанию) и &lt;code&gt;doNothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17a990c606d2e2e22a8f755a1f843b57ef2f5ef2" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; (this is the default), &lt;code&gt;addIfDifferent&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">Допустимые значения для этой опции: &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; (это значение по умолчанию), &lt;code&gt;addIfDifferent&lt;/code&gt; , &lt;code&gt;add&lt;/code&gt; , &lt;code&gt;replace&lt;/code&gt; или &lt;code&gt;doNothing&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="505e929c5c3b27eed17b03a2625718de5c7f7031" translate="yes" xml:space="preserve">
          <source>The value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.</source>
          <target state="translated">Значение для переменной,которая принимает цвет,представляет собой список цветов (максимум два,один для переднего плана и один для фона)и атрибутов (столько,сколько вам нужно),разделенных пробелами.</target>
        </trans-unit>
        <trans-unit id="e1d242fc18797a443a86ba553d48e3f3cae01e9a" translate="yes" xml:space="preserve">
          <source>The value for many variables that specify various sizes can be suffixed with &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;,&amp;hellip;​ to mean &quot;scale the number by 1024&quot;, &quot;by 1024x1024&quot;, etc.</source>
          <target state="translated">Значения многих переменных, которые определяют различные размеры, могут быть дополнены суффиксами &lt;code&gt;k&lt;/code&gt; , &lt;code&gt;M&lt;/code&gt; ,&amp;hellip;, что означает &amp;laquo;масштабировать число на 1024&amp;raquo;, &amp;laquo;на 1024x1024&amp;raquo; и т. Д.</target>
        </trans-unit>
        <trans-unit id="f1dedc58ec3c676ad597a786553123421e517365" translate="yes" xml:space="preserve">
          <source>The value is a list of three values: a default time zone (for if the client hasn&amp;rsquo;t selected some other time zone and saved it in a cookie), a name of cookie where to store selected time zone, and a CSS class used to mark up dates for manipulation. If you want to turn this feature off, set &quot;default&quot; to empty list: &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">Значение представляет собой список из трех значений: часовой пояс по умолчанию (если клиент не выбрал другой часовой пояс и не сохранил его в файле cookie), имя файла cookie, в котором следует сохранить выбранный часовой пояс, и используемый класс CSS. разметить даты для манипуляций. Если вы хотите отключить эту функцию, установите &amp;laquo;по умолчанию&amp;raquo; на пустой список: &lt;code&gt;[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0462ada8e80b752f4ecad69fb2563ec0b8b930aa" translate="yes" xml:space="preserve">
          <source>The value of 'default' is a list of names of snapshot formats, defined in &lt;code&gt;%known_snapshot_formats&lt;/code&gt; hash, that you wish to offer. Supported formats include &quot;tgz&quot;, &quot;tbz2&quot;, &quot;txz&quot; (gzip/bzip2/xz compressed tar archive) and &quot;zip&quot;; please consult gitweb sources for a definitive list. By default only &quot;tgz&quot; is offered.</source>
          <target state="translated">Значение 'default' - это список имён форматов моментальных снимков, определенных в &lt;code&gt;%known_snapshot_formats&lt;/code&gt; , которые вы хотите предложить. Поддерживаемые форматы включают &amp;laquo;tgz&amp;raquo;, &amp;laquo;tbz2&amp;raquo;, &amp;laquo;txz&amp;raquo; (сжатый tar-архив gzip / bzip2 / xz) и &amp;laquo;zip&amp;raquo;; пожалуйста, обратитесь к источникам gitweb для окончательного списка. По умолчанию предлагается только &amp;laquo;tgz&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="c34b53e9a12553098df9adad4c30762484ffde18" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; must be a valid refname in Git and therefore may contain forward slashes. As &lt;code&gt;LF&lt;/code&gt; is not valid in a Git refname, no quoting or escaping syntax is supported here.</source>
          <target state="translated">Значение &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; должно быть действительным ссылочным именем в Git и, следовательно, может содержать косые черты. Поскольку &lt;code&gt;LF&lt;/code&gt; недопустим в ссылочном имени Git, здесь не поддерживается синтаксис цитирования или экранирования.</target>
        </trans-unit>
        <trans-unit id="8b5a30f586808b1827fdb8f433a15c6c9d49f6ba" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; must be in canonical form. That is it must not:</source>
          <target state="translated">Значение &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; должно быть в канонической форме. То есть не должно:</target>
        </trans-unit>
        <trans-unit id="dfb2ec984e9987b1b930824861a3abbf3e4aa29f" translate="yes" xml:space="preserve">
          <source>The value of this attribute specifies the character encoding that should be used by GUI tools (e.g. &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; and &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;) to display the contents of the relevant file. Note that due to performance considerations &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; does not use this attribute unless you manually enable per-file encodings in its options.</source>
          <target state="translated">Значение этого атрибута указывает кодировку символов, которая должна использоваться инструментами графического интерфейса пользователя (например, &lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt; и &lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt; ) для отображения содержимого соответствующего файла. Обратите внимание, что из соображений производительности &lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt; не использует этот атрибут, если вы вручную не включите кодировку для каждого файла в его параметрах.</target>
        </trans-unit>
        <trans-unit id="4bdcd2a8dee01aee6c5f0f23e7e10ac25985aae6" translate="yes" xml:space="preserve">
          <source>The value of this key is the name of the promisor remote.</source>
          <target state="translated">Значение этого ключа-имя удаленного промоутера.</target>
        </trans-unit>
        <trans-unit id="49e3be97b83e2e2d47823db7b33592c5066364cc" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version &lt;code&gt;v1&lt;/code&gt; format.</source>
          <target state="translated">Параметр version используется для указания версии формата. Это необязательно, по умолчанию используется формат исходной версии &lt;code&gt;v1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a720bc9826a296e909d26ea1e1addd2076945090" translate="yes" xml:space="preserve">
          <source>The victim sends &quot;have&quot; lines advertising the IDs of objects it has that are not explicitly intended to be shared but can be used to optimize the transfer if the peer also has them. The attacker chooses an object ID X to steal and sends a ref to X, but isn&amp;rsquo;t required to send the content of X because the victim already has it. Now the victim believes that the attacker has X, and it sends the content of X back to the attacker later. (This attack is most straightforward for a client to perform on a server, by creating a ref to X in the namespace the client has access to and then fetching it. The most likely way for a server to perform it on a client is to &quot;merge&quot; X into a public branch and hope that the user does additional work on this branch and pushes it back to the server without noticing the merge.)</source>
          <target state="translated">Жертва отправляет строки &amp;laquo;иметь&amp;raquo;, объявляя идентификаторы имеющихся у нее объектов, которые явно не предназначены для совместного использования, но могут использоваться для оптимизации передачи, если они также есть у партнера. Злоумышленник выбирает объект с идентификатором X для кражи и отправляет ссылку на X, но не обязан отправлять содержимое X, поскольку оно уже есть у жертвы. Теперь жертва считает, что у злоумышленника есть X, и позже отправляет содержимое X обратно злоумышленнику. (Эту атаку клиенту проще всего выполнить на сервере, создав ссылку на X в пространстве имен, к которому у клиента есть доступ, а затем извлечет ее. Наиболее вероятный способ для сервера выполнить ее на клиенте - &quot; объединить &quot;X&quot; в общедоступную ветку и надеяться, что пользователь проделает дополнительную работу с этой веткой и отправит ее обратно на сервер, не заметив слияния.)</target>
        </trans-unit>
        <trans-unit id="bad569f9e07003c7e9ba90b91ff6d5e2d3ebab92" translate="yes" xml:space="preserve">
          <source>The virtual host configuration (in Apache configuration file) should look like this:</source>
          <target state="translated">Конфигурация виртуального хоста (в конфигурационном файле Apache)должна выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="6258db9fdd3beac891e6dcfd7dedb19764ce413e" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;git update-index&lt;/code&gt; handles files it is told about can be modified using the various options:</source>
          <target state="translated">То, как &lt;code&gt;git update-index&lt;/code&gt; обрабатывает файлы, о которых говорится, можно изменить с помощью различных параметров:</target>
        </trans-unit>
        <trans-unit id="5fe1a87d113fe93088f754b0185b7bc1cb985816" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using a configuration variable passed with the -c (or --config) command-line option, or the &lt;code&gt;web.browser&lt;/code&gt; configuration variable if the former is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6c5b18c0fd18e4f577ab3723eb5808f05d9f12" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web--browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2adc08265063993fb836b81a622f1e26249d55" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See git-web{litdd}browse[1] for more information about this.</source>
          <target state="translated">Веб-браузер можно указать с помощью переменной конфигурации &lt;code&gt;help.browser&lt;/code&gt; или &lt;code&gt;web.browser&lt;/code&gt; , если первая не задана. Если ни одна из этих переменных конфигурации не задана, вспомогательный сценарий &lt;code&gt;git web{litdd}browse&lt;/code&gt; (вызываемый командой &lt;code&gt;git help&lt;/code&gt; ) выберет подходящее значение по умолчанию. См. Git-web {litdd} browse [1] для получения дополнительной информации об этом.</target>
        </trans-unit>
        <trans-unit id="d52f23a775c5f3aadffb0193202482a8a4b8d0b1" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web--browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38f40c77930468f76ac59e3f127231f37c11803" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See git-web{litdd}browse[1] for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">Веб-браузер, который следует использовать для просмотра страницы gitweb. Он будет передан вспомогательному сценарию &lt;code&gt;git web{litdd}browse&lt;/code&gt; вместе с URL-адресом экземпляра gitweb. См. Git-web {litdd} browse [1] для получения дополнительной информации об этом. В случае сбоя сценария URL-адрес будет выведен на стандартный вывод.</target>
        </trans-unit>
        <trans-unit id="c7492cc5fa9e9927a227312bd1f1ea85a3766cb5" translate="yes" xml:space="preserve">
          <source>The width (in characters) of the &quot;Description&quot; column of the projects list. Longer descriptions will be truncated (trying to cut at word boundary); the full description is available in the &lt;code&gt;title&lt;/code&gt; attribute (usually shown on mouseover). The default is 25, which might be too small if you use long project descriptions.</source>
          <target state="translated">Ширина (в символах) столбца &amp;laquo;Описание&amp;raquo; списка проектов. Более длинные описания будут обрезаны (при попытке обрезать границы слова); полное описание доступно в атрибуте &lt;code&gt;title&lt;/code&gt; (обычно отображается при наведении указателя мыши). Значение по умолчанию - 25, что может быть слишком мало, если вы используете длинные описания проектов.</target>
        </trans-unit>
        <trans-unit id="2a9553b8b798d28f6c8fd9f09980f5b7959498e9" translate="yes" xml:space="preserve">
          <source>The window size parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 250, which is a much more aggressive window size than the default &lt;code&gt;--window&lt;/code&gt; of 10.</source>
          <target state="translated">Параметр размера окна, используемый в алгоритме дельта-сжатия, используемом &lt;code&gt;git gc --aggressive&lt;/code&gt; . По умолчанию это 250, что является гораздо более агрессивным размером окна, чем значение по умолчанию &lt;code&gt;--window&lt;/code&gt; 10.</target>
        </trans-unit>
        <trans-unit id="046739930d5e8946cdceaf820a70c4ac9ebc8d51" translate="yes" xml:space="preserve">
          <source>The working directory then reflects the contents that the project had when it was tagged v2.6.13, and &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; shows two branches, with an asterisk marking the currently checked-out branch:</source>
          <target state="translated">Затем рабочий каталог отражает содержимое, которое было у проекта, когда он был помечен как v2.6.13, а &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; показывает две ветки, где звездочкой отмечена текущая извлеченная ветка:</target>
        </trans-unit>
        <trans-unit id="c76d23bfcb6d4a63fd96acda23f8bee068090518" translate="yes" xml:space="preserve">
          <source>The worktree list command has two output formats. The default format shows the details on a single line with columns. For example:</source>
          <target state="translated">Команда списка рабочего дерева имеет два выходных формата.Формат по умолчанию показывает детали в одной строке со столбцами.Например:</target>
        </trans-unit>
        <trans-unit id="ecaf7c5f30215b083ffbd406549425a7d1040c7d" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git merge topic&lt;/code&gt;&quot; will replay the changes made on the &lt;code&gt;topic&lt;/code&gt; branch since it diverged from &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt;, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">Затем &amp;laquo; &lt;code&gt;git merge topic&lt;/code&gt; &amp;raquo; воспроизведет изменения, внесенные в ветку &lt;code&gt;topic&lt;/code&gt; так как она отклонилась от &lt;code&gt;master&lt;/code&gt; (то есть &lt;code&gt;E&lt;/code&gt; ) до текущей фиксации ( &lt;code&gt;C&lt;/code&gt; ) поверх &lt;code&gt;master&lt;/code&gt; , и запишет результат в новую фиксацию вместе с именами два родительских коммита и сообщение журнала от пользователя с описанием изменений.</target>
        </trans-unit>
        <trans-unit id="f3bf49c80f1bf671798b336ee7a6337eb982b2bc" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git pull&lt;/code&gt;&quot; will fetch and replay the changes from the remote &lt;code&gt;master&lt;/code&gt; branch since it diverged from the local &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt; and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">Затем &amp;laquo; &lt;code&gt;git pull&lt;/code&gt; &amp;raquo; будет извлекать и воспроизводить изменения из удаленной &lt;code&gt;master&lt;/code&gt; ветки, поскольку она расходилась с локальным &lt;code&gt;master&lt;/code&gt; (то есть &lt;code&gt;E&lt;/code&gt; ) до его текущей фиксации ( &lt;code&gt;C&lt;/code&gt; ) поверх &lt;code&gt;master&lt;/code&gt; и записывает результат в новом коммите вместе с имена двух родительских коммитов и сообщение журнала от пользователя, описывающее изменения.</target>
        </trans-unit>
        <trans-unit id="44f92500b7ae9560ae64e2f2fc4f1af900d3ff26" translate="yes" xml:space="preserve">
          <source>Then &quot;git bisect&quot; will checkout a commit of its choosing and ask the user to test it, like this:</source>
          <target state="translated">Затем &quot;git-бисект&quot; извлечёт выбранный коммит и попросит пользователя протестировать его,вот так:</target>
        </trans-unit>
        <trans-unit id="e1ef052a3cd59f805d0ae45d1b9033a6a2faaa95" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;git bisect&lt;/code&gt; will respond with something like</source>
          <target state="translated">Тогда &lt;code&gt;git bisect&lt;/code&gt; ответит чем-то вроде</target>
        </trans-unit>
        <trans-unit id="307236a389d15c9e88cc574f3c2b3a0314992840" translate="yes" xml:space="preserve">
          <source>Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner.</source>
          <target state="translated">Затем скомпилируйте и протестируйте выбранную ревизию,а затем отметьте ревизию как хорошую или плохую обычным способом.</target>
        </trans-unit>
        <trans-unit id="876e252bd62eb2a97f748800c6625b2b00ccfdec" translate="yes" xml:space="preserve">
          <source>Then confirm that the bug persists in a repository created from that stream (many bugs will not, as they really do depend on the exact repository contents):</source>
          <target state="translated">Затем подтвердите,что ошибка сохраняется в репозитории,созданном из этого потока (многие ошибки не будут,так как они действительно зависят от точного содержимого репозитория):</target>
        </trans-unit>
        <trans-unit id="87463a5d117dae6022935ddfd68f09bfbb9b0943" translate="yes" xml:space="preserve">
          <source>Then create the following script to get list of project in the format suitable for GITWEB_LIST build configuration variable (or &lt;code&gt;$projects_list&lt;/code&gt; variable in gitweb config):</source>
          <target state="translated">Затем создайте следующий скрипт, чтобы получить список проектов в формате, подходящем для переменной конфигурации сборки GITWEB_LIST (или переменной &lt;code&gt;$projects_list&lt;/code&gt; в конфигурации gitweb):</target>
        </trans-unit>
        <trans-unit id="b5a742d8577423cd13ed5705b5290de27ff73949" translate="yes" xml:space="preserve">
          <source>Then fixup &quot;master&quot; with &lt;code&gt;git rebase&lt;/code&gt;. Do NOT use &lt;code&gt;git merge&lt;/code&gt; or your history will not be compatible with a future &lt;code&gt;dcommit&lt;/code&gt;!</source>
          <target state="translated">Затем исправьте &quot;master&quot; с помощью &lt;code&gt;git rebase&lt;/code&gt; . НЕ используйте &lt;code&gt;git merge&lt;/code&gt; , иначе ваша история не будет совместима с будущим &lt;code&gt;dcommit&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="78318329e21f0014f75ba54a708b1f46ad0d023c" translate="yes" xml:space="preserve">
          <source>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</source>
          <target state="translated">Затем он сравнивает новое значение пропуска с предыдущим.Если пропущенное дерево превращается из множества в неустановленное,то оно добавляет соответствующий файл обратно.Если же оно перейдет из состояния &quot;Неустановлено&quot; в состояние &quot;Неустановлено&quot;,то этот файл будет удален.</target>
        </trans-unit>
        <trans-unit id="5e9c59419a3e5d8568740259a39319d49129c624" translate="yes" xml:space="preserve">
          <source>Then it examines &lt;code&gt;.gitattributes&lt;/code&gt; (which is in the parent directory), and finds that the first line matches, but &lt;code&gt;t/.gitattributes&lt;/code&gt; file already decided how &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; attributes should be given to this path, so it leaves &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; unset. Attribute &lt;code&gt;baz&lt;/code&gt; is set.</source>
          <target state="translated">Затем он проверяет &lt;code&gt;.gitattributes&lt;/code&gt; (который находится в родительском каталоге) и обнаруживает, что первая строка совпадает, но файл &lt;code&gt;t/.gitattributes&lt;/code&gt; уже решил, как атрибуты &lt;code&gt;merge&lt;/code&gt; , &lt;code&gt;foo&lt;/code&gt; и &lt;code&gt;bar&lt;/code&gt; должны быть присвоены этому пути, поэтому он оставляет &lt;code&gt;foo&lt;/code&gt; и &lt;code&gt;bar&lt;/code&gt; снята с охраны. Атрибут &lt;code&gt;baz&lt;/code&gt; установлен.</target>
        </trans-unit>
        <trans-unit id="1100f313a3d209e54bf3bc725a364711886dbfc4" translate="yes" xml:space="preserve">
          <source>Then modify, reorder, or eliminate patches as needed before applying them again with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;:</source>
          <target state="translated">Затем измените, переупорядочьте или удалите исправления по мере необходимости, прежде чем применять их снова с помощью &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="cd43ef848f2d3c4afb2a44ae28c2a413397c1d96" translate="yes" xml:space="preserve">
          <source>Then provide your password via the pserver method, for example:</source>
          <target state="translated">Затем предоставьте свой пароль,например,методом pserver:</target>
        </trans-unit>
        <trans-unit id="a774f276f116b48d127c0c1418ef7aa2fe46b49b" translate="yes" xml:space="preserve">
          <source>Then simplify each commit &lt;code&gt;C&lt;/code&gt; to its replacement &lt;code&gt;C'&lt;/code&gt; in the final history according to the following rules:</source>
          <target state="translated">Затем упростите каждый коммит &lt;code&gt;C&lt;/code&gt; до его замены &lt;code&gt;C'&lt;/code&gt; в окончательной истории в соответствии со следующими правилами:</target>
        </trans-unit>
        <trans-unit id="2f5d7fdcf8fcb013dcf3c597507de91a5cb0f77d" translate="yes" xml:space="preserve">
          <source>Then simply fork your topic branches from the stable remotes as explained earlier.</source>
          <target state="translated">Затем просто вилка ветки вашей темы из стабильных пультов,как объяснялось ранее.</target>
        </trans-unit>
        <trans-unit id="b19a7b2e2b2e2252f0564256c9b87915d5db46d3" translate="yes" xml:space="preserve">
          <source>Then suppose you modify the last three commits:</source>
          <target state="translated">Тогда предположим,что вы модифицируете три последних коммита:</target>
        </trans-unit>
        <trans-unit id="e69e2e34d497710c4127a780d2a5ed5c7d7fac83" translate="yes" xml:space="preserve">
          <source>Then there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.</source>
          <target state="translated">Тогда есть два способа получить репозиторий поменьше.Более безопасный способ-клонирование,которое сохранит ваш оригинал в целости и сохранности.</target>
        </trans-unit>
        <trans-unit id="5c871054b486e3acaf28dc409c1ab3e693b4fc90" translate="yes" xml:space="preserve">
          <source>Then this &lt;code&gt;git p4 clone&lt;/code&gt; command:</source>
          <target state="translated">Затем эта команда &lt;code&gt;git p4 clone&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="db9b57b987ef397bc0b191d278e31ed2d827cb0a" translate="yes" xml:space="preserve">
          <source>Then you can disable sparse checkout. Sparse checkout support in &lt;code&gt;git read-tree&lt;/code&gt; and similar commands is disabled by default. You need to turn &lt;code&gt;core.sparseCheckout&lt;/code&gt; on in order to have sparse checkout support.</source>
          <target state="translated">Затем вы можете отключить разреженную проверку. Поддержка разреженной проверки в &lt;code&gt;git read-tree&lt;/code&gt; и аналогичных командах по умолчанию отключена. Вам необходимо включить &lt;code&gt;core.sparseCheckout&lt;/code&gt; , чтобы иметь разреженную поддержку при оформлении заказа.</target>
        </trans-unit>
        <trans-unit id="87a33f516a8ffec885e906dbb29e388a5f30ada0" translate="yes" xml:space="preserve">
          <source>Then you can pull and merge, leaving &lt;code&gt;frotz.c&lt;/code&gt; and &lt;code&gt;filfre.c&lt;/code&gt; changes still in the working tree.</source>
          <target state="translated">Затем вы можете вытащить и объединить, оставив изменения &lt;code&gt;frotz.c&lt;/code&gt; и &lt;code&gt;filfre.c&lt;/code&gt; в рабочем дереве.</target>
        </trans-unit>
        <trans-unit id="fa280cd97c17d646b4ce0e60bbbcb27953b34fb3" translate="yes" xml:space="preserve">
          <source>Then you can push both the test and release trees using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;:</source>
          <target state="translated">Затем вы можете отправить деревья тестирования и выпуска с помощью &lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="9015e54306232b9477b76c544780cb6cb29e184c" translate="yes" xml:space="preserve">
          <source>Then you might want a &lt;code&gt;.mailmap&lt;/code&gt; file that looks like:</source>
          <target state="translated">Тогда вам может понадобиться файл &lt;code&gt;.mailmap&lt;/code&gt; , который выглядит так:</target>
        </trans-unit>
        <trans-unit id="bdefcc2b7f4d341c71ca424367a0164c209ac375" translate="yes" xml:space="preserve">
          <source>Then you transfer file.bundle to the target machine B. Because this bundle does not require any existing object to be extracted, you can create a new repository on machine B by cloning from it:</source>
          <target state="translated">Затем вы передаете file.bundle на целевую машину B.Поскольку этот пакет не требует извлечения любого существующего объекта,вы можете создать новое хранилище на машине B,клонируя из него:</target>
        </trans-unit>
        <trans-unit id="e826c3727c0c79aa7b30f2352881ef1c5a35f171" translate="yes" xml:space="preserve">
          <source>Then you would define a &quot;filter.indent.clean&quot; and &quot;filter.indent.smudge&quot; configuration in your .git/config to specify a pair of commands to modify the contents of C programs when the source files are checked in (&quot;clean&quot; is run) and checked out (no change is made because the command is &quot;cat&quot;).</source>
          <target state="translated">Затем вы определяете конфигурацию &quot;filter.indent.clean&quot; и &quot;filter.indent.smudge&quot; в вашем .git/config,чтобы указать пару команд для изменения содержимого программ на Си,когда проверяются исходные файлы (&quot;clean&quot; выполняется)и извлекаются (&quot;clean&quot; выполняется)(никаких изменений не производится,потому что команда &quot;cat&quot;).</target>
        </trans-unit>
        <trans-unit id="c6308f4c83137c8ddf705f0b33927bc3a2a2d3bf" translate="yes" xml:space="preserve">
          <source>Then, make that directory into a Git repository by running &lt;code&gt;git init&lt;/code&gt;, but this time, since its name is not the usual &lt;code&gt;.git&lt;/code&gt;, we do things slightly differently:</source>
          <target state="translated">Затем превратите этот каталог в репозиторий Git, запустив &lt;code&gt;git init&lt;/code&gt; , но на этот раз, поскольку его имя отличается от обычного &lt;code&gt;.git&lt;/code&gt; , мы делаем все немного иначе:</target>
        </trans-unit>
        <trans-unit id="4d45e0228f3dfbda52666260c02f45c435d7f13c" translate="yes" xml:space="preserve">
          <source>Then, use &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; and &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; instead of &lt;code&gt;git bisect good&lt;/code&gt; and &lt;code&gt;git bisect bad&lt;/code&gt; to mark commits.</source>
          <target state="translated">Затем используйте &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; и &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; вместо &lt;code&gt;git bisect good&lt;/code&gt; и &lt;code&gt;git bisect bad&lt;/code&gt; , чтобы отмечать коммиты.</target>
        </trans-unit>
        <trans-unit id="4891bcd6061a60561c6585b63258de3d0b8b270b" translate="yes" xml:space="preserve">
          <source>Then, you can adjust your push URL to use &lt;code&gt;git@example_author&lt;/code&gt; or &lt;code&gt;git@example_committer&lt;/code&gt; instead of &lt;code&gt;git@example.org&lt;/code&gt; (e.g., &lt;code&gt;git remote set-url
git@example_author:org1/project1.git&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b100177b4f5d14520d5631ccbd2bc2ff52393e78" translate="yes" xml:space="preserve">
          <source>Then, you run this command:</source>
          <target state="translated">Затем,ты выполняешь эту команду:</target>
        </trans-unit>
        <trans-unit id="ebbdc2314a6104dc9178c4c9ed7835ad78f84727" translate="yes" xml:space="preserve">
          <source>Then, you would define a &quot;diff.tex.xfuncname&quot; configuration to specify a regular expression that matches a line that you would want to appear as the hunk header &quot;TEXT&quot;. Add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">Затем вы должны определить конфигурацию &amp;laquo;diff.tex.xfuncname&amp;raquo;, чтобы указать регулярное выражение, которое соответствует строке, которая должна отображаться как заголовок фрагмента &amp;laquo;TEXT&amp;raquo;. Добавьте раздел в свой файл &lt;code&gt;$GIT_DIR/config&lt;/code&gt; (или файл &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ) следующим образом:</target>
        </trans-unit>
        <trans-unit id="8d94c9456285c171a8f18dcac7b76fd1fccc9ff4" translate="yes" xml:space="preserve">
          <source>There are (number of parents + 1) &lt;code&gt;@&lt;/code&gt; characters in the chunk header for combined diff format.</source>
          <target state="translated">В заголовке блока для комбинированного формата сравнения есть (количество родителей + 1) символов &lt;code&gt;@&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7e9cf96a6ce9ed5c513750352c4736c076b5145" translate="yes" xml:space="preserve">
          <source>There are CPP wrapper macros and ifdefs to hide most of these details. See &lt;code&gt;trace2.h&lt;/code&gt; for more details. The following discussion will only describe the simplified forms.</source>
          <target state="translated">Существуют макросы оболочки CPP и ifdef, чтобы скрыть большую часть этих деталей. См. &lt;code&gt;trace2.h&lt;/code&gt; для более подробной информации. Следующее обсуждение будет описывать только упрощенные формы.</target>
        </trans-unit>
        <trans-unit id="e4287f1e47cb2bfc1b9e5f25165aef43ceec9d6c" translate="yes" xml:space="preserve">
          <source>There are a few built-in low-level merge drivers defined that can be asked for via the &lt;code&gt;merge&lt;/code&gt; attribute.</source>
          <target state="translated">Определено несколько встроенных низкоуровневых драйверов слияния, которые можно запросить через атрибут &lt;code&gt;merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12f3989319ea3c0cba3d029a62ee2c306fd0616b" translate="yes" xml:space="preserve">
          <source>There are a few built-in patterns to make this easier, and &lt;code&gt;tex&lt;/code&gt; is one of them, so you do not have to write the above in your configuration file (you still need to enable this with the attribute mechanism, via &lt;code&gt;.gitattributes&lt;/code&gt;). The following built in patterns are available:</source>
          <target state="translated">Есть несколько встроенных шаблонов, чтобы упростить это, и &lt;code&gt;tex&lt;/code&gt; - один из них, поэтому вам не нужно записывать вышеуказанное в свой файл конфигурации (вам все равно нужно включить это с помощью механизма атрибутов через &lt;code&gt;.gitattributes&lt;/code&gt; ). Доступны следующие встроенные шаблоны:</target>
        </trans-unit>
        <trans-unit id="336d04ab3583042f88f12edf2d051324b94f62a0" translate="yes" xml:space="preserve">
          <source>There are a few issues to resolve before we can completely switch to Trace2.</source>
          <target state="translated">Есть несколько проблем,которые необходимо решить,прежде чем мы сможем полностью перейти на Trace2.</target>
        </trans-unit>
        <trans-unit id="c8e0813ee0029806de1de3d5b367acd9c0a0d07d" translate="yes" xml:space="preserve">
          <source>There are a few more behavioral differences that most folks would probably consider inconsequential but which are mentioned for completeness:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f553cccafe9fdfa62552e6e1af4be573be245c47" translate="yes" xml:space="preserve">
          <source>There are a few special-purpose refs that do not begin with &lt;code&gt;refs/&lt;/code&gt;. The most notable example is &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">Есть несколько специальных ссылок, которые не начинаются с &lt;code&gt;refs/&lt;/code&gt; . Самый яркий пример - &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cc9f53378dabd08666f7e5c5af2a717dbbd37e28" translate="yes" xml:space="preserve">
          <source>There are a number of factors which affect how much memory fast-import requires to perform an import. Like critical sections of core Git, fast-import uses its own memory allocators to amortize any overheads associated with malloc. In practice fast-import tends to amortize any malloc overheads to 0, due to its use of large block allocations.</source>
          <target state="translated">Существует ряд факторов,влияющих на то,какой объем памяти требуется для быстрого импорта.Как и в случае с критическими разделами ядра Git'а,при быстром импорте используются собственные аллокаторы памяти для амортизации любых накладных расходов,связанных с malloc'ом.На практике быстродействующий импорт,как правило,амортизирует любые накладные расходы,связанные с malloc,до 0 за счет использования больших блоков.</target>
        </trans-unit>
        <trans-unit id="e0b2b532209e8b05d8ee20f67e782301986fd65a" translate="yes" xml:space="preserve">
          <source>There are also cases where existing indexes written by git versions before 2.17 will reference directories that don&amp;rsquo;t exist anymore, potentially causing many &quot;could not open directory&quot; warnings to be printed on &quot;git status&quot;. These are new warnings for existing issues that were previously silently discarded.</source>
          <target state="translated">Также бывают случаи, когда существующие индексы, написанные версиями git до 2.17, будут ссылаться на каталоги, которые больше не существуют, что может привести к тому, что многие предупреждения &amp;laquo;не удалось открыть каталог&amp;raquo; будут напечатаны на &amp;laquo;git status&amp;raquo;. Это новые предупреждения о существующих проблемах, которые ранее игнорировались.</target>
        </trans-unit>
        <trans-unit id="aec0acb7fb7522f7c5da2df9b13975842cb9d1be" translate="yes" xml:space="preserve">
          <source>There are also more complex operations that can be performed. But beware that because the patch is applied only to the index and not the working tree, the working tree will appear to &quot;undo&quot; the change in the index. For example, introducing a new line into the index that is in neither the HEAD nor the working tree will stage the new line for commit, but the line will appear to be reverted in the working tree.</source>
          <target state="translated">Существуют также более сложные операции,которые могут быть выполнены.Но учтите,что поскольку патч применяется только к индексу,а не к рабочему дереву,то рабочее дерево окажется &quot;отменяющим&quot; изменение индекса.Например,введение в индекс новой строки,которая не находится ни в HEAD,ни в рабочем дереве,приведет к фиксации новой строки,но в рабочем дереве она будет выглядеть как &quot;отменяющая&quot; изменение индекса.</target>
        </trans-unit>
        <trans-unit id="a266660a35cd18470141c43d8a3ffa2b3074c06a" translate="yes" xml:space="preserve">
          <source>There are also other situations that cause dangling objects. For example, a &quot;dangling blob&quot; may arise because you did a &lt;code&gt;git add&lt;/code&gt; of a file, but then, before you actually committed it and made it part of the bigger picture, you changed something else in that file and committed that &lt;strong&gt;updated&lt;/strong&gt; thing&amp;mdash;​the old state that you added originally ends up not being pointed to by any commit or tree, so it&amp;rsquo;s now a dangling blob object.</source>
          <target state="translated">Есть и другие ситуации, в которых могут появиться болтающиеся предметы. Например, &amp;laquo;висячий blob&amp;raquo; может возникнуть из-за того, что вы выполнили &lt;code&gt;git add&lt;/code&gt; файла, но затем, прежде чем вы фактически зафиксировали его и сделали его частью более широкой картины, вы изменили что-то еще в этом файле и зафиксировали этот &lt;strong&gt;обновленный&lt;/strong&gt; элемент - Старое состояние, которое вы добавили изначально, заканчивается тем, что на него не указывает ни один коммит или дерево, поэтому теперь это висящий объект blob.</target>
        </trans-unit>
        <trans-unit id="232088d916b340ecad3098c72c2ebccbe30b76e5" translate="yes" xml:space="preserve">
          <source>There are also several operations which should be avoided entirely, as they will make the patch impossible to apply:</source>
          <target state="translated">Есть также несколько операций,которых следует полностью избегать,так как они сделают невозможным применение патча:</target>
        </trans-unit>
        <trans-unit id="eeb0752be9462c9bd2e54575f2023419e06b3d3b" translate="yes" xml:space="preserve">
          <source>There are also ways to automate the bisecting process if you have a test script that can tell a good from a bad commit. See &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; for more information about this and other &lt;code&gt;git
bisect&lt;/code&gt; features.</source>
          <target state="translated">Есть также способы автоматизировать процесс деления пополам, если у вас есть тестовый сценарий, который может отличить хороший коммит от плохого. См. &lt;a href=&quot;git-bisect&quot;&gt;Git-bisect [1]&lt;/a&gt; для получения дополнительной информации об этой и других функциях &lt;code&gt;git bisect&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="753d0dde7d0dbacd496fb113e3e96e5ea6d9494d" translate="yes" xml:space="preserve">
          <source>There are four different types of objects: &quot;blob&quot;, &quot;tree&quot;, &quot;commit&quot;, and &quot;tag&quot;.</source>
          <target state="translated">Существует четыре различных типа объектов:&quot;капля&quot;,&quot;дерево&quot;,&quot;коммит&quot; и &quot;тег&quot;.</target>
        </trans-unit>
        <trans-unit id="a3d0232ce28c94288cf502f722ca216e09b8c5b1" translate="yes" xml:space="preserve">
          <source>There are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the &lt;code&gt;minimal&lt;/code&gt; mode may help interoperability when the same repository is used by these other systems at the same time.</source>
          <target state="translated">Существуют реализации Git, которые не оставляют полезных значений в некоторых полях (например, JGit); исключая эти поля из сравнения, &lt;code&gt;minimal&lt;/code&gt; режим может способствовать взаимодействию, когда один и тот же репозиторий используется этими другими системами одновременно.</target>
        </trans-unit>
        <trans-unit id="ac26d523869587e187089ca0cfe8dfa88bde0428" translate="yes" xml:space="preserve">
          <source>There are many more; see the &quot;SPECIFYING REVISIONS&quot; section of the &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; man page for the complete list of ways to name revisions. Some examples:</source>
          <target state="translated">Есть еще много чего; см. раздел &amp;laquo; &lt;a href=&quot;gitrevisions&quot;&gt;УКАЗАНИЕ РЕДАКЦИЙ&amp;raquo;&lt;/a&gt; на странице руководства gitrevisions [7] для получения полного списка способов присвоения имен ревизиям. Некоторые примеры:</target>
        </trans-unit>
        <trans-unit id="caa64d4f477bb9cc6ae8b8763c8d93ec4bfb0cef" translate="yes" xml:space="preserve">
          <source>There are no facilities for helping users find what unwanted crud they should delete, which means they are much more likely to have incomplete or partial cleanups that sometimes result in confusion and people wasting time trying to understand. (For example, folks tend to just look for big files to delete instead of big directories or extensions, and once they do so, then sometime later folks using the new repository who are going through history will notice a build artifact directory that has some files but not others, or a cache of dependencies (node_modules or similar) which couldn&amp;rsquo;t have ever been functional since it&amp;rsquo;s missing some files.)</source>
          <target state="translated">Нет никаких средств, которые помогли бы пользователям найти, какой нежелательный мусор им следует удалить, а это означает, что у них гораздо больше шансов получить неполные или частичные очистки, которые иногда приводят к путанице и тратят время на попытки понять. (Например, люди, как правило, просто ищут большие файлы для удаления вместо больших каталогов или расширений, и как только они это сделают, то через некоторое время люди, использующие новый репозиторий, которые просматривают историю, заметят каталог артефактов сборки, в котором есть некоторые файлы но не другие, или кеш зависимостей (node_modules или аналогичный), которые никогда не могли быть функциональными, поскольку в нем отсутствуют некоторые файлы.)</target>
        </trans-unit>
        <trans-unit id="ce4a9f9a1026ea763732ff998a2bcfb7b60f26ca" translate="yes" xml:space="preserve">
          <source>There are no public Trace2 data structures.</source>
          <target state="translated">Общедоступных структур данных Trace2 нет.</target>
        </trans-unit>
        <trans-unit id="5a1dbdef2a9d4fcde2fec24ad984bfc7ec6f3aa2" translate="yes" xml:space="preserve">
          <source>There are numerous other tools, such as StGit, which exist for the purpose of maintaining a patch series. These are outside of the scope of this manual.</source>
          <target state="translated">Существует множество других инструментов,таких как StGit,которые существуют для поддержания серии патчей.Они выходят за рамки данного руководства.</target>
        </trans-unit>
        <trans-unit id="306721e74c73edf4b4a1c2554be600724c25d3f0" translate="yes" xml:space="preserve">
          <source>There are other estimates saying that 80% of the cost related to software is about maintenance &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="translated">Есть и другие оценки, согласно которым 80% затрат на программное обеспечение приходится на обслуживание &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7eccee0caa41472aded0ea349d3d3fa4831b32ab" translate="yes" xml:space="preserve">
          <source>There are other real-world examples of using update and post-update hooks found in the Documentation/howto directory.</source>
          <target state="translated">Есть и другие реальные примеры использования перехватчиков обновлений и постобновления,которые можно найти в каталоге Documentation/howto.</target>
        </trans-unit>
        <trans-unit id="ddc4304f0c733f93eaa36c71971b210be6c86baa" translate="yes" xml:space="preserve">
          <source>There are several built-in formats, and you can define additional formats by setting a pretty.&amp;lt;name&amp;gt; config option to either another format name, or a &lt;code&gt;format:&lt;/code&gt; string, as described below (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). Here are the details of the built-in formats:</source>
          <target state="translated">Существует несколько встроенных форматов, и вы можете определить дополнительные форматы, установив для параметра конфигурации pretty. &amp;lt;name&amp;gt; либо другое имя формата, либо строку &lt;code&gt;format:&lt;/code&gt; , как описано ниже (см. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ). Вот подробности встроенных форматов:</target>
        </trans-unit>
        <trans-unit id="172e083c83bf7e6cbde177805c61722f6bdc0777" translate="yes" xml:space="preserve">
          <source>There are some numbers about bugs in general, like a NIST study in 2002 &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; that said:</source>
          <target state="translated">Есть некоторые цифры об ошибках в целом, например, исследование NIST в 2002 году &lt;a href=&quot;#1&quot;&gt;[1], в&lt;/a&gt; котором говорилось:</target>
        </trans-unit>
        <trans-unit id="1a73feb2f257a54073e6e874ef78ceeefd47d29e" translate="yes" xml:space="preserve">
          <source>There are some subtle differences how the backends behave.</source>
          <target state="translated">Есть некоторые тонкие различия в том,как ведут себя бэкенды.</target>
        </trans-unit>
        <trans-unit id="a41ebe77f2eb54fbd4f30714a2e14c8c1d436ea0" translate="yes" xml:space="preserve">
          <source>There are three commands with similar names: &lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git restore&lt;/code&gt; and &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">Есть три команды с похожими именами: &lt;code&gt;git reset&lt;/code&gt; , &lt;code&gt;git restore&lt;/code&gt; и &lt;code&gt;git revert&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27e17ed315eeb27fa67bd10d3870c4d2deb8a92d" translate="yes" xml:space="preserve">
          <source>There are three different approaches: use an add-on to turn off line wraps, configure Thunderbird to not mangle patches, or use an external editor to keep Thunderbird from mangling the patches.</source>
          <target state="translated">Существует три различных подхода:используйте надстройку для отключения оберток,настройте Thunderbird так,чтобы не искажать патчи,или используйте внешний редактор,чтобы удержать Thunderbird от искажения патчей.</target>
        </trans-unit>
        <trans-unit id="8c553f5839a8296a42918c5ea6f6a2fcca19fa49" translate="yes" xml:space="preserve">
          <source>There are three main tools that can be used for this:</source>
          <target state="translated">Для этого можно использовать три основных инструмента:</target>
        </trans-unit>
        <trans-unit id="86e24f426735724adb9ab7ea59c461905251e8e9" translate="yes" xml:space="preserve">
          <source>There are three ways to specify which refs to update on the remote end.</source>
          <target state="translated">Есть три способа указать,какие ссылки обновлять на удаленном конце.</target>
        </trans-unit>
        <trans-unit id="5544b2d42620b4375dbc730230171fe04b9f972b" translate="yes" xml:space="preserve">
          <source>There are two different types of capabilities: normal capabilities, which can be used to convey information or alter the behavior of a request, and commands, which are the core actions that a client wants to perform (fetch, push, etc).</source>
          <target state="translated">Существует два различных типа возможностей:обычные возможности,которые могут быть использованы для передачи информации или изменения поведения запроса,и команды,которые являются основными действиями,которые клиент хочет выполнять (fetch,push и т.д.).</target>
        </trans-unit>
        <trans-unit id="c2015c03c4c8786233c499c7815e06c17100a16b" translate="yes" xml:space="preserve">
          <source>There are two formats accepted for patch files:</source>
          <target state="translated">Существует два формата файлов патчей:</target>
        </trans-unit>
        <trans-unit id="9b5e9b84c7e0cf0cc62bfad7ffc7f5a42847bbc1" translate="yes" xml:space="preserve">
          <source>There are two kinds of fixes, discussed in the following subsections:</source>
          <target state="translated">Существует два вида исправлений,которые рассматриваются в следующих подразделах:</target>
        </trans-unit>
        <trans-unit id="afe3df249e404830655fd820b0b8e96397ac9183" translate="yes" xml:space="preserve">
          <source>There are two main tools that can be used to include changes from one branch on another: &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; and &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;.</source>
          <target state="translated">Есть два основных инструмента, которые можно использовать для включения изменений из одной ветки в другую: &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; и &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1432c9def859812f2dcccb492cbe2b422538cffb" translate="yes" xml:space="preserve">
          <source>There are two ways to specify which commits to operate on.</source>
          <target state="translated">Есть два способа указать,над какими коммитами нужно работать.</target>
        </trans-unit>
        <trans-unit id="04a6eae6f43fc050171fa2270096884eaba0fee3" translate="yes" xml:space="preserve">
          <source>There is a difference between listing multiple &amp;lt;refspec&amp;gt; directly on &lt;em&gt;git pull&lt;/em&gt; command line and having multiple &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; entries in your configuration for a &amp;lt;repository&amp;gt; and running a &lt;em&gt;git pull&lt;/em&gt; command without any explicit &amp;lt;refspec&amp;gt; parameters. &amp;lt;refspec&amp;gt;s listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote ref, &lt;em&gt;git pull&lt;/em&gt; will create an Octopus merge. On the other hand, if you do not list any explicit &amp;lt;refspec&amp;gt; parameter on the command line, &lt;em&gt;git pull&lt;/em&gt; will fetch all the &amp;lt;refspec&amp;gt;s it finds in the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; configuration and merge only the first &amp;lt;refspec&amp;gt; found into the current branch. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one-go by fetching more than one is often useful.</source>
          <target state="translated">Существует разница между перечислением нескольких &amp;lt;refspec&amp;gt; непосредственно в командной строке &lt;em&gt;git pull&lt;/em&gt; и наличием нескольких записей &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; в вашей конфигурации для &amp;lt;repository&amp;gt; и запуском команды &lt;em&gt;git pull&lt;/em&gt; без каких-либо явных параметров &amp;lt;refspec&amp;gt;. &amp;lt;refspec&amp;gt;, указанные явно в командной строке, всегда объединяются в текущую ветку после выборки. Другими словами, если вы укажете более одной удаленной ссылки, &lt;em&gt;git pull&lt;/em&gt; создаст слияние Octopus. С другой стороны, если вы не укажете какой-либо явный параметр &amp;lt;refspec&amp;gt; в командной строке, &lt;em&gt;git pull&lt;/em&gt; извлечет все &amp;lt;refspec&amp;gt;, которые он найдет на &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; конфигурации и объединить только первый найденный &amp;lt;refspec&amp;gt; в текущую ветку. Это связано с тем, что создание Octopus из удаленных ссылок выполняется редко, в то время как отслеживание нескольких удаленных головок за один раз путем получения более чем одной часто бывает полезно.</target>
        </trans-unit>
        <trans-unit id="08d27e369ae02f07111163548604defe0fd7ba02" translate="yes" xml:space="preserve">
          <source>There is a fourth official branch that is used slightly differently:</source>
          <target state="translated">Существует четвертый официальный филиал,который используется несколько иначе:</target>
        </trans-unit>
        <trans-unit id="3ab0818052937d36eff9b5a2767bc99b339b1151" translate="yes" xml:space="preserve">
          <source>There is a script in contrib/thunderbird-patch-inline which can help you include patches with Thunderbird in an easy way. To use it, do the steps above and then use the script as the external editor.</source>
          <target state="translated">Есть скрипт в contrib/thunderbird-patch-inline,который может помочь вам включить патчи с Thunderbird простым способом.Для его использования сделайте описанные выше шаги,а затем используйте скрипт в качестве внешнего редактора.</target>
        </trans-unit>
        <trans-unit id="1232149fc68bcd969b013f8dcdb8f804dc24a0d6" translate="yes" xml:space="preserve">
          <source>There is a tradeoff of course: merges require a more careful branch management. The following subsections discuss the important points.</source>
          <target state="translated">Конечно,есть и компромисс:слияния требуют более тщательного управления филиалами.В следующих подразделах обсуждаются важные моменты.</target>
        </trans-unit>
        <trans-unit id="dad64266cc32a47cdf74ec10317455f91f86159c" translate="yes" xml:space="preserve">
          <source>There is already a project called BBChop created by Ealdwulf Wuffinga on Github that does something like that using Bayesian Search Theory &lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;:</source>
          <target state="translated">Уже существует проект под названием BBChop, созданный Ealdwulf Wuffinga на Github, который делает что-то подобное с использованием теории байесовского поиска &lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="72c8cb7314c2d9e687a4188f4607320887a3abaf" translate="yes" xml:space="preserve">
          <source>There is also a deprecated &lt;code&gt;[section.subsection]&lt;/code&gt; syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.</source>
          <target state="translated">Также существует устаревший синтаксис &lt;code&gt;[section.subsection]&lt;/code&gt; . С помощью этого синтаксиса имя подраздела преобразуется в нижний регистр, а также сравнивается с учетом регистра. Эти имена подразделов подчиняются тем же ограничениям, что и имена разделов.</target>
        </trans-unit>
        <trans-unit id="562a7aac41f0a6a2b8bd94c80ba1df49ae8c2861" translate="yes" xml:space="preserve">
          <source>There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the &lt;code&gt;-&amp;gt;&lt;/code&gt; is omitted from rename entries and the field order is reversed (e.g &lt;code&gt;from -&amp;gt; to&lt;/code&gt; becomes &lt;code&gt;to from&lt;/code&gt;). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.</source>
          <target state="translated">Также для машинного анализа рекомендуется альтернативный формат -z. В этом формате поле статуса такое же, но некоторые другие вещи меняются. Во-первых, в записях переименования опускается &lt;code&gt;-&amp;gt;&lt;/code&gt; , а порядок полей меняется на обратный (например, &lt;code&gt;from -&amp;gt; to&lt;/code&gt; становится &lt;code&gt;to from&lt;/code&gt; ). Во-вторых, за каждым именем файла следует NUL (ASCII 0), заменяющий пробел в качестве разделителя полей и завершающую новую строку (но пробел по-прежнему отделяет поле состояния от первого имени файла). В-третьих, имена файлов, содержащие специальные символы, специально не форматируются; кавычки или обратная косая черта не выполняется.</target>
        </trans-unit>
        <trans-unit id="23b53316aea0dd64f8f21ea0eae539235bf45a74" translate="yes" xml:space="preserve">
          <source>There is also an option to sort by versions, this can be done by using the fieldname &lt;code&gt;version:refname&lt;/code&gt; or its alias &lt;code&gt;v:refname&lt;/code&gt;.</source>
          <target state="translated">Также есть возможность сортировки по версиям, это можно сделать с помощью &lt;code&gt;version:refname&lt;/code&gt; или его псевдонима &lt;code&gt;v:refname&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="490f0c7223e032436f3ed74187899d6766a21bb5" translate="yes" xml:space="preserve">
          <source>There is another common situation where you may encounter non-fast-forward rejection when you try to push, and it is possible even when you are pushing into a repository nobody else pushes into. After you push commit A yourself (in the first picture in this section), replace it with &quot;git commit --amend&quot; to produce commit B, and you try to push it out, because forgot that you have pushed A out already. In such a case, and only if you are certain that nobody in the meantime fetched your earlier commit A (and started building on top of it), you can run &quot;git push --force&quot; to overwrite it. In other words, &quot;git push --force&quot; is a method reserved for a case where you do mean to lose history.</source>
          <target state="translated">Есть еще одна распространенная ситуация,когда при попытке протолкнуть вы можете столкнуться с отказом от перемотки вперёд,и это возможно,даже когда вы протолкнули в репозиторий,в который никто больше не протолкнётся.После того,как вы сами протолкнули коммит A (на первой картинке в этом разделе),замените его на &quot;gith-коммит --amend&quot; для создания коммита B,и вы попытаетесь его вытолкнуть,потому что забыли,что вы уже протолкнули A.В таком случае,и только если вы уверены,что за это время никто не получил ваш предыдущий коммит A (и начал строиться на нём),вы можете запустить &quot;git push --force&quot;,чтобы перезаписать его.Другими словами,&quot;git push --force&quot;-это метод,зарезервированный для случая,когда вы действительно хотите потерять историю.</target>
        </trans-unit>
        <trans-unit id="8a8fda27a5ab0014e2c03663c10e41e5858f14f1" translate="yes" xml:space="preserve">
          <source>There is another simplification mode available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76938def2c927fda8d1c815e17291d57380d4a8a" translate="yes" xml:space="preserve">
          <source>There is another tweak in the bisection algorithm that has not been described in the &quot;bisection algorithm&quot; above.</source>
          <target state="translated">Есть еще один нюанс в алгоритме биссекции,который не был описан выше в &quot;алгоритме биссекции&quot;.</target>
        </trans-unit>
        <trans-unit id="6cd697be600e420b39bb68cc6d967c4ceca70af4" translate="yes" xml:space="preserve">
          <source>There is no option for &lt;code&gt;git rm&lt;/code&gt; to remove from the index only the paths that have disappeared from the filesystem. However, depending on the use case, there are several ways that can be done.</source>
          <target state="translated">Для &lt;code&gt;git rm&lt;/code&gt; нет возможности удалить из индекса только те пути, которые исчезли из файловой системы. Однако, в зависимости от варианта использования, это можно сделать несколькими способами.</target>
        </trans-unit>
        <trans-unit id="60bcaa98facce6fa9b4916fcb4556840549eaf70" translate="yes" xml:space="preserve">
          <source>There is no other restriction on the replaced and replacement objects. Merge commits can be replaced by non-merge commits and vice versa.</source>
          <target state="translated">Других ограничений на замену и замену предметов нет.Объединительные коммиты могут быть заменены коммитами,не использующими коммиты и наоборот.</target>
        </trans-unit>
        <trans-unit id="5b920fe2651a1acef3f4de11b5f87d418bf37e32" translate="yes" xml:space="preserve">
          <source>There is now a new commit &lt;code&gt;e&lt;/code&gt;, but it is referenced only by &lt;code&gt;HEAD&lt;/code&gt;. We can of course add yet another commit in this state:</source>
          <target state="translated">Теперь есть новый коммит &lt;code&gt;e&lt;/code&gt; , но на него ссылается только &lt;code&gt;HEAD&lt;/code&gt; . Конечно, мы можем добавить еще одну фиксацию в этом состоянии:</target>
        </trans-unit>
        <trans-unit id="e84a3494173a3e4e1765afc114a7bb8588db5e4e" translate="yes" xml:space="preserve">
          <source>There is one special case not mentioned above, which is treated differently. Normally, a merge results in a merge commit, with two parents, one pointing at each of the two lines of development that were merged.</source>
          <target state="translated">Есть один особый случай,не упомянутый выше,к которому относятся по-разному.Обычно в результате слияния происходит коммит с двумя родителями,по одному,указывающему на каждую из двух линий развития,которые были объединены.</target>
        </trans-unit>
        <trans-unit id="9c233ac02212216497063926a3cd425b73c1b106" translate="yes" xml:space="preserve">
          <source>There may be other problems when using &lt;code&gt;git rev-list&lt;/code&gt; related to pending objects.</source>
          <target state="translated">При использовании &lt;code&gt;git rev-list&lt;/code&gt; могут возникнуть другие проблемы, связанные с ожидающими объектами.</target>
        </trans-unit>
        <trans-unit id="3cc97d3b58e95d007d294ed252208117b7ea36ad" translate="yes" xml:space="preserve">
          <source>There was a discussion at one point on the linux kernel mailing list of whether it was ok to always ask end user to bisect, and very good points were made to support the point of view that it is ok.</source>
          <target state="translated">В какой-то момент в списке рассылки ядра linux была дискуссия о том,можно ли всегда просить конечного пользователя сделать бисект,и были сделаны очень хорошие замечания,чтобы поддержать точку зрения,что это нормально.</target>
        </trans-unit>
        <trans-unit id="e31f2056d77b9761665b1e39804c963e7c7e3f73" translate="yes" xml:space="preserve">
          <source>Therefore if the refspec for the remote includes e.g. &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt;, or you manually run e.g. &lt;code&gt;git fetch
--prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; it won&amp;rsquo;t be stale remote tracking branches that are deleted, but any local tag that doesn&amp;rsquo;t exist on the remote.</source>
          <target state="translated">Поэтому, если refspec для пульта дистанционного управления включает, например, &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; , или вы вручную запускаете, например, &lt;code&gt;git fetch --prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; он выиграл ' Это устаревшие удаленные ветки отслеживания, но любые локальные теги, которые не существуют на удаленном компьютере.</target>
        </trans-unit>
        <trans-unit id="22e33781a4f63d74c967572b3d2d5742f6f5b3cf" translate="yes" xml:space="preserve">
          <source>These are applied in sequence. The set of filepairs &lt;code&gt;git diff-*&lt;/code&gt; commands find are used as the input to diffcore-break, and the output from diffcore-break is used as the input to the next transformation. The final result is then passed to the output routine and generates either diff-raw format (see Output format sections of the manual for &lt;code&gt;git diff-*&lt;/code&gt; commands) or diff-patch format.</source>
          <target state="translated">Они применяются последовательно. Набор команд &lt;code&gt;git diff-*&lt;/code&gt; пар git diff- * find используется в качестве входных данных для diffcore-break, а выходные данные из diffcore-break используются в качестве входных данных для следующего преобразования. Конечный результат затем передается в процедуру вывода и генерирует либо формат diff-raw (см. Разделы руководства по формату вывода руководства для команд &lt;code&gt;git diff-*&lt;/code&gt; ), либо формат diff-patch.</target>
        </trans-unit>
        <trans-unit id="5e4c5d2d8cb413a7bc102a12d4b32266eb5dffbd" translate="yes" xml:space="preserve">
          <source>These are concerned with describing the specific Git command after the command line, config, and environment are inspected. e.g: &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt;, &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt;.</source>
          <target state="translated">Они связаны с описанием конкретной команды Git после проверки командной строки, конфигурации и среды. например: &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt; , &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd918e1aed68e545e545890a5d457bd39124acbb" translate="yes" xml:space="preserve">
          <source>These are concerned with recording performance data over regions or spans of code. e.g: &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt;.</source>
          <target state="translated">Они связаны с записью данных о производительности по регионам или промежуткам кода. например: &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10ea7c6e4b3ea51596f6b19ba236a57b5e812041" translate="yes" xml:space="preserve">
          <source>These are concerned with the lifetime of the overall git process. e.g: &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt;, &lt;code&gt;void trace2_initialize()&lt;/code&gt;, &lt;code&gt;int trace2_is_enabled()&lt;/code&gt;, &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt;.</source>
          <target state="translated">Они связаны со временем жизни всего процесса git. например: &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt; , &lt;code&gt;void trace2_initialize()&lt;/code&gt; , &lt;code&gt;int trace2_is_enabled()&lt;/code&gt; , &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3dce3473c941e3b3b27a31ac8449a2f1991a75d0" translate="yes" xml:space="preserve">
          <source>These are concerned with the various spawned child processes, including shell scripts, git commands, editors, pagers, and hooks.</source>
          <target state="translated">Они связаны с различными порождёнными детскими процессами,включая сценарии оболочки,команды git'а,редакторы,пейджеры и крючки.</target>
        </trans-unit>
        <trans-unit id="64d6caf87f558c78a882445d71ea9cd47be32d78" translate="yes" xml:space="preserve">
          <source>These are internal helper commands used by other commands; end users typically do not use them directly.</source>
          <target state="translated">Это внутренние вспомогательные команды,используемые другими командами;конечные пользователи обычно не используют их напрямую.</target>
        </trans-unit>
        <trans-unit id="14e40973cf60a547a4fee511ff95c4f84a31a06f" translate="yes" xml:space="preserve">
          <source>These are only used with the &lt;code&gt;dcommit&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; commands.</source>
          <target state="translated">Они используются только с &lt;code&gt;dcommit&lt;/code&gt; и &lt;code&gt;rebase&lt;/code&gt; команд.</target>
        </trans-unit>
        <trans-unit id="1f4226446a769c76931ca392e2a09f31777b3654" translate="yes" xml:space="preserve">
          <source>These are optional command-line options for init. Each of these flags can point to a relative repository path (--tags=project/tags) or a full url (--tags=https://foo.org/project/tags). You can specify more than one --tags and/or --branches options, in case your Subversion repository places tags or branches under multiple paths. The option --stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default. If any of the other options are given as well, they take precedence.</source>
          <target state="translated">Это дополнительные опции командной строки для init.Каждый из этих флагов может указывать на относительный путь к хранилищу (--tags=project/tags)или полный url (--tags=https://foo.org/project/tags).Вы можете указать более одного параметра --tags и/или --branches в случае,если ваше хранилище Subversion помещает метки или ветки по нескольким путям.Опция --stdlayout-это короткий способ установки ствола,тегов,ответвлений в качестве относительных путей,который по умолчанию используется в Subversion.Если заданы и другие опции,то они имеют приоритет.</target>
        </trans-unit>
        <trans-unit id="ef89fe03d8c6b725e4e01a5ddca75169500d3912" translate="yes" xml:space="preserve">
          <source>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; run. They also affect how Git stores the contents you prepare in the working tree in the repository upon &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">Эти атрибуты влияют на то, как содержимое, хранящееся в репозитории, копируется в файлы рабочего дерева при выполнении таких команд, как &lt;code&gt;git switch&lt;/code&gt; , &lt;code&gt;git checkout&lt;/code&gt; и &lt;code&gt;git merge&lt;/code&gt; . Они также влияют на то, как Git хранит подготовленное вами содержимое в рабочем дереве в репозитории после &lt;code&gt;git add&lt;/code&gt; и &lt;code&gt;git commit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e36f59cc4fba5296689c97860f8ef3c808cbf54" translate="yes" xml:space="preserve">
          <source>These can be easily kept up to date using &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">Их можно легко обновлять с помощью &lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d8f5a662d30248028e58618a9cb324b38272bbd8" translate="yes" xml:space="preserve">
          <source>These commands all compare two sets of things; what is compared differs:</source>
          <target state="translated">Все эти команды сравнивают два набора;то,что сравнивается,отличается:</target>
        </trans-unit>
        <trans-unit id="6e07bfec6529e0e8049d6a168dde51eb0ed55268" translate="yes" xml:space="preserve">
          <source>These commands are to interact with foreign SCM and with other people via patch over e-mail.</source>
          <target state="translated">Эти команды предназначены для взаимодействия с иностранным SCM и с другими людьми через патч по электронной почте.</target>
        </trans-unit>
        <trans-unit id="8e87e31fbdfcc66d2844293591fb44e9bb68be03" translate="yes" xml:space="preserve">
          <source>These config values are loaded from system, global, and local Git config, as available. If &lt;code&gt;git for-each-repo&lt;/code&gt; is run in a directory that is not a Git repository, then only the system and global config is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008c5282b165f202ade67dc870d3522a81a841bd" translate="yes" xml:space="preserve">
          <source>These configuration variables control &lt;code&gt;internal&lt;/code&gt; gitweb behavior.</source>
          <target state="translated">Эти переменные конфигурации управляют &lt;code&gt;internal&lt;/code&gt; поведением gitweb.</target>
        </trans-unit>
        <trans-unit id="94d243826a65ff43f06f691e3b2f877746c8e3a7" translate="yes" xml:space="preserve">
          <source>These configurations enable two things. First, each unix user (&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;) of the server will be able to browse through gitweb Git repositories found in &lt;code&gt;~/public_git/&lt;/code&gt; with the following url:</source>
          <target state="translated">Эти конфигурации позволяют две вещи. Во-первых, каждый пользователь unix ( &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; ) сервера сможет просматривать репозитории gitweb Git, находящиеся в &lt;code&gt;~/public_git/&lt;/code&gt; со следующим URL:</target>
        </trans-unit>
        <trans-unit id="3c188c162ef90ed4e72b2204b53fd7bbdf63ed82" translate="yes" xml:space="preserve">
          <source>These environment variables apply to &lt;code&gt;all&lt;/code&gt; core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.</source>
          <target state="translated">Эти переменные среды применяются ко &lt;code&gt;all&lt;/code&gt; основным командам Git. Nb: стоит отметить, что они могут быть использованы / переопределены SCMS, находящейся над Git, поэтому будьте осторожны при использовании внешнего интерфейса.</target>
        </trans-unit>
        <trans-unit id="e4a9928c908043039dae5cc89a184941db222aba" translate="yes" xml:space="preserve">
          <source>These exclude patterns come from these places, in order:</source>
          <target state="translated">Они исключают шаблоны,которые приходят из этих мест,по порядку:</target>
        </trans-unit>
        <trans-unit id="75ad982aca6a7add80092ae27820348741497d7e" translate="yes" xml:space="preserve">
          <source>These flag are passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch.</source>
          <target state="translated">Эти флаги передаются программе &lt;code&gt;git apply&lt;/code&gt; (см. &lt;a href=&quot;git-apply&quot;&gt;Git-apply [1]&lt;/a&gt; ), которая применяет патч.</target>
        </trans-unit>
        <trans-unit id="a66ecfa5cef3d43b11b6332452dde3bc34998a82" translate="yes" xml:space="preserve">
          <source>These flags are passed to &lt;code&gt;git am&lt;/code&gt; to easily change the dates of the rebased commits (see &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;).</source>
          <target state="translated">Эти флаги передаются в &lt;code&gt;git am&lt;/code&gt; , чтобы легко изменять даты перемещенных коммитов (см. &lt;a href=&quot;git-am&quot;&gt;Git-am [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6f1d3498209d5426cb1c8295c9947466ac12cab4" translate="yes" xml:space="preserve">
          <source>These flags are passed to the &lt;code&gt;git apply&lt;/code&gt; (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) program that applies the patch.</source>
          <target state="translated">Эти флаги передаются программе &lt;code&gt;git apply&lt;/code&gt; (см. &lt;a href=&quot;git-apply&quot;&gt;Git-apply [1]&lt;/a&gt; ), которая применяет патч.</target>
        </trans-unit>
        <trans-unit id="17c5d825c714d7f669df648adc8ffa3b9865aa3a" translate="yes" xml:space="preserve">
          <source>These forms reset the index entries for all paths that match the &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; to their state at &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;. (It does not affect the working tree or the current branch.)</source>
          <target state="translated">Эти формы сбрасывают записи индекса для всех путей, соответствующих &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; , в их состояние в &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; . (Это не влияет на рабочее дерево или текущую ветку.)</target>
        </trans-unit>
        <trans-unit id="84dfe82e69639d7dd0490e18b4061edc5e5f61bb" translate="yes" xml:space="preserve">
          <source>These general best practices are very helpful if you bisect often.</source>
          <target state="translated">Эти общие лучшие практики очень полезны,если вы часто бисектировать.</target>
        </trans-unit>
        <trans-unit id="db63350c8a27af092cfd256119dcf34d87e7125f" translate="yes" xml:space="preserve">
          <source>These instructions use the &lt;code&gt;git-cvsimport&lt;/code&gt; script which ships with git, but other importers may provide better results. See the note in &lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport[1]&lt;/a&gt; for other options.</source>
          <target state="translated">В этих инструкциях используется сценарий &lt;code&gt;git-cvsimport&lt;/code&gt; , который поставляется с git, но другие импортеры могут обеспечить лучшие результаты. См. Примечание в &lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport [1]&lt;/a&gt; для получения информации о других параметрах.</target>
        </trans-unit>
        <trans-unit id="4de4cd9ec9920076e498bf4f8c01b7cc0e7335b0" translate="yes" xml:space="preserve">
          <source>These messages are concerned with Git thread usage.</source>
          <target state="translated">Эти сообщения касаются использования потока Git'а.</target>
        </trans-unit>
        <trans-unit id="b8e5bd243ffdab655773f15dbcfc0554b819902f" translate="yes" xml:space="preserve">
          <source>These options are deprecated. Use the above --notes/--no-notes options instead.</source>
          <target state="translated">Эти варианты устарели.Вместо этого используйте описанные выше опционы --notes/--no-notes.</target>
        </trans-unit>
        <trans-unit id="894173daf027c82b1254f620d2cbbddacd04b7fd" translate="yes" xml:space="preserve">
          <source>These options are ignored for historical reasons.</source>
          <target state="translated">Эти варианты игнорируются по историческим причинам.</target>
        </trans-unit>
        <trans-unit id="0608f735748e7710136ac2ca4b1a8fc7f8d0f8a8" translate="yes" xml:space="preserve">
          <source>These options are mostly targeted for packing of Git repositories.</source>
          <target state="translated">Эти опции в основном предназначены для упаковки Git-репозиториев.</target>
        </trans-unit>
        <trans-unit id="44fc7c2eb5b5d3f683db2d8973767b7defab9c76" translate="yes" xml:space="preserve">
          <source>These options are passed to &lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack[1]&lt;/a&gt;. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is &lt;code&gt;--thin&lt;/code&gt;.</source>
          <target state="translated">Эти параметры передаются в &lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack [1]&lt;/a&gt; . Тонкая передача значительно сокращает объем отправляемых данных, когда отправитель и получатель совместно используют одни и те же объекты. По умолчанию &lt;code&gt;--thin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="38ddfaeebf99ab2e211259f05e2350cca6be519d" translate="yes" xml:space="preserve">
          <source>These options are primarily useful when converting a repository from one hash algorithm to another; without them, fast-import will fail if it encounters a submodule because it has no way of writing the object ID into the new hash algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c86ff6978b6c3146e6796c4f36abf160da0176d" translate="yes" xml:space="preserve">
          <source>These options can be used in an initial &lt;code&gt;clone&lt;/code&gt;, along with the &lt;code&gt;sync&lt;/code&gt; options described above.</source>
          <target state="translated">Эти параметры можно использовать в исходном &lt;code&gt;clone&lt;/code&gt; вместе с параметрами &lt;code&gt;sync&lt;/code&gt; , описанными выше.</target>
        </trans-unit>
        <trans-unit id="0ade32a888d52a4ba127b2e5cb51121d4b067e67" translate="yes" xml:space="preserve">
          <source>These options can be used in the initial &lt;code&gt;clone&lt;/code&gt; as well as in subsequent &lt;code&gt;sync&lt;/code&gt; operations.</source>
          <target state="translated">Эти параметры можно использовать как в первоначальном &lt;code&gt;clone&lt;/code&gt; так и в последующих операциях &lt;code&gt;sync&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f45787718e6c314237aec0cf2c5e63156df92c4" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 rebase&lt;/code&gt; behavior.</source>
          <target state="translated">Эти параметры можно использовать для изменения поведения &lt;code&gt;git p4 rebase&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="046bf3cadb648529c8cbf517d3ba66246fc697fc" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 submit&lt;/code&gt; behavior.</source>
          <target state="translated">Эти параметры можно использовать для изменения поведения &lt;code&gt;git p4 submit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5bf9264c3d2f29d27aed45b38db366aee6362601" translate="yes" xml:space="preserve">
          <source>These options control layout (defaults to &lt;code&gt;column&lt;/code&gt;). Setting any of these implies &lt;code&gt;always&lt;/code&gt; if none of &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt; are specified.</source>
          <target state="translated">Эти параметры управляют макетом (по умолчанию &lt;code&gt;column&lt;/code&gt; ). Установка любого из них подразумевает &lt;code&gt;always&lt;/code&gt; если не указано ни одно из значений &lt;code&gt;always&lt;/code&gt; , &lt;code&gt;never&lt;/code&gt; или &lt;code&gt;auto&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="510a1cbefb424a60db8479a49dd55a0966d6d945" translate="yes" xml:space="preserve">
          <source>These options control when the feature should be enabled (defaults to &lt;code&gt;never&lt;/code&gt;):</source>
          <target state="translated">Эти параметры определяют, когда функция должна быть включена (по умолчанию &lt;code&gt;never&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="931e215644554fa9404627a014bfd3cf51399ea5" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.splitIndex&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">Эти параметры действуют независимо от значения переменной конфигурации &lt;code&gt;core.splitIndex&lt;/code&gt; (см. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ). Но когда изменение идет вразрез с настроенным значением, выдается предупреждение, поскольку настроенное значение вступит в силу при следующем чтении индекса, и это приведет к удалению предполагаемого эффекта параметра.</target>
        </trans-unit>
        <trans-unit id="932e8c22c29966222600cac9510425979eeabd1c" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">Эти параметры действуют независимо от значения переменной конфигурации &lt;code&gt;core.untrackedCache&lt;/code&gt; (см. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ). Но когда изменение идет вразрез с настроенным значением, выдается предупреждение, поскольку настроенное значение вступит в силу при следующем чтении индекса, и это приведет к удалению предполагаемого эффекта параметра.</target>
        </trans-unit>
        <trans-unit id="ff7024be4fc3bd9a63ff1aab42e5c2f33080a5ad" translate="yes" xml:space="preserve">
          <source>These parameters can also be set individually with &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt;, &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; and &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Эти параметры также можно задать индивидуально с помощью &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt; , &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; и &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="25d97f197e2ad468ea791c831ca2e71054c4e207" translate="yes" xml:space="preserve">
          <source>These remote-tracking references can be deleted as a one-off with either of:</source>
          <target state="translated">Эти ссылки на удаленное отслеживание могут быть удалены как одноразовые с любой из них:</target>
        </trans-unit>
        <trans-unit id="4994737bcfd88cfa54486bc85e99d5152416b798" translate="yes" xml:space="preserve">
          <source>These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoid ambiguities in certain reference name expressions (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;):</source>
          <target state="translated">Эти правила упрощают для инструментов на основе сценария оболочки анализ имен ссылок, расширение имени пути оболочкой, когда имя ссылки используется без кавычек (по ошибке), а также позволяют избежать двусмысленности в определенных выражениях имен ссылок (см. &lt;a href=&quot;gitrevisions&quot;&gt;Gitrevisions [7]&lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="d2d3b8bc5c27c38dddb2f7c9e54b52668c820483" translate="yes" xml:space="preserve">
          <source>These services can be enabled/disabled using the per-repository configuration file:</source>
          <target state="translated">Эти службы могут быть включены/выключены с помощью конфигурационного файла для каждого хранилища:</target>
        </trans-unit>
        <trans-unit id="11be9ffec744e4c727f505822229118ed50ca097" translate="yes" xml:space="preserve">
          <source>These services can be globally enabled/disabled using the command-line options of this command. If finer-grained control is desired (e.g. to allow &lt;code&gt;git archive&lt;/code&gt; to be run against only in a few selected repositories the daemon serves), the per-repository configuration file can be used to enable or disable them.</source>
          <target state="translated">Эти службы можно глобально включить / отключить с помощью параметров командной строки этой команды. Если требуется более детальный контроль (например, чтобы разрешить запуск &lt;code&gt;git archive&lt;/code&gt; только в нескольких выбранных репозиториях, которые обслуживает демон), можно использовать файл конфигурации для каждого репозитория, чтобы включить или отключить их.</target>
        </trans-unit>
        <trans-unit id="70e4323eda62161a4a47cb9a1d65be89828fd66d" translate="yes" xml:space="preserve">
          <source>These settings help tools pick the right format for output such as patches and result in files being checked out in the appropriate line ending for the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7a1043f71fa1813c0b5e398e97710f483944d9" translate="yes" xml:space="preserve">
          <source>These things may exist in a Git repository.</source>
          <target state="translated">Такие вещи могут существовать в Git-репозитории.</target>
        </trans-unit>
        <trans-unit id="b5c7f688db050c92cfc9bb2aa9d676e52849ec7b" translate="yes" xml:space="preserve">
          <source>These three branches all forked from a common commit, [master], whose commit message is &quot;Add 'git show-branch'&quot;. The &quot;fixes&quot; branch adds one commit &quot;Introduce &quot;reset type&quot; flag to &quot;git reset&quot;&quot;. The &quot;mhf&quot; branch adds many other commits. The current branch is &quot;master&quot;.</source>
          <target state="translated">Все эти три ветки были выведены из общего коммита,[master],сообщение коммита-&quot;Добавить 'git-шоу-отрасль'&quot;.Ответвление &quot;fixes&quot; добавляет один коммит &quot;Ввести флаг &quot;сброса типа&quot; в &quot;git reset&quot;&quot;.В ветке &quot;mhf&quot; добавляется множество других коммитов.Текущая ветка является &quot;основной&quot;.</target>
        </trans-unit>
        <trans-unit id="c6204a9318b7a0526e46b8696b2eb378d52ecf11" translate="yes" xml:space="preserve">
          <source>These two filters behave differently, and by default, a filter is taken as the former, massaging the contents into more convenient shape. A missing filter driver definition in the config, or a filter driver that exits with a non-zero status, is not an error but makes the filter a no-op passthru.</source>
          <target state="translated">Эти два фильтра ведут себя по-разному,и по умолчанию фильтр принимается за первый,массируя содержимое в более удобную форму.Пропущенное определение драйвера фильтра в конфигурации,или драйвер-фильтр,который выходит с ненулевым статусом,не является ошибкой,но делает фильтр не-op passthru.</target>
        </trans-unit>
        <trans-unit id="e20e46dc24b79b5218925e423850545226b0898e" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">Эти две опции влияют на то,как объекты,содержащиеся в пакете,хранятся с использованием дельта-сжатия.Сначала объекты внутренне сортируются по типу,размеру и опциональным именам и сравниваются с другими объектами в окне --window,чтобы посмотреть,экономит ли использование дельта-сжатия место.-глубина ограничивает максимальную глубину дельты;слишком глубокая глубина влияет на производительность на стороне распаковщика,так как для того,чтобы добраться до нужного объекта,дельта-данные должны быть применены столько раз.</target>
        </trans-unit>
        <trans-unit id="de212a952b72f4cd05af023bbd056fa8307c4a9f" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within &lt;code&gt;--window&lt;/code&gt; to see if using delta compression saves space. &lt;code&gt;--depth&lt;/code&gt; limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">Эти два параметра влияют на то, как объекты, содержащиеся в пакете, хранятся с использованием дельта-сжатия. Сначала объекты внутренне сортируются по типу, размеру и (необязательно) именам и сравниваются с другими объектами в &lt;code&gt;--window&lt;/code&gt; , чтобы увидеть, экономит ли использование дельта-сжатия место. &lt;code&gt;--depth&lt;/code&gt; ограничивает максимальную глубину дельты; слишком большое значение влияет на производительность на стороне распаковщика, потому что дельта-данные нужно применять столько раз, чтобы добраться до необходимого объекта.</target>
        </trans-unit>
        <trans-unit id="6a0bfaec1ca5ad5a0f6710f22f7b4b78eecfef67" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except the former implies --local option.</source>
          <target state="translated">Эти два синтаксиса в основном эквивалентны,за исключением того,что первый подразумевает опцию --local.</target>
        </trans-unit>
        <trans-unit id="9270307e15adf00d482cdebd8e068750f310bc87" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; for details.</source>
          <target state="translated">Эти два синтаксиса в основном эквивалентны, за исключением случаев клонирования, когда первый подразумевает параметр --local. См. Подробности в &lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="469e074d32a553c54f69af6603803ffbfd2e6dda" translate="yes" xml:space="preserve">
          <source>These types of entries are generally created as a result of using &lt;code&gt;git
commit --amend&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than &lt;code&gt;gc.reflogExpire&lt;/code&gt;.</source>
          <target state="translated">Эти типы записей обычно создаются в результате использования &lt;code&gt;git commit --amend&lt;/code&gt; или &lt;code&gt;git rebase&lt;/code&gt; и являются коммитами до внесения изменения или переназначения. Поскольку эти изменения не являются частью текущего проекта, большинство пользователей захотят аннулировать их раньше, поэтому значение по умолчанию более агрессивно, чем &lt;code&gt;gc.reflogExpire&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99a10a0726ee032ba80815c05eceb6d5a6ab2aa8" translate="yes" xml:space="preserve">
          <source>These variables control various optional help messages designed to aid new users. All &lt;code&gt;advice.*&lt;/code&gt; variables default to &lt;code&gt;true&lt;/code&gt;, and you can tell Git that you do not need help by setting these to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Эти переменные управляют различными дополнительными справочными сообщениями, предназначенными для помощи новым пользователям. Все переменные &lt;code&gt;advice.*&lt;/code&gt; По умолчанию имеют значение &lt;code&gt;true&lt;/code&gt; , и вы можете сообщить Git, что вам не нужна помощь, установив для них значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="289bbff1e27f0cf157d5208bbfcb9f369ecc1504" translate="yes" xml:space="preserve">
          <source>These variables obviate the need for command-line options in some circumstances, allowing easier restricted usage through git-shell.</source>
          <target state="translated">Эти переменные избавляют от необходимости использования опций командной строки при определённых обстоятельствах,облегчая ограниченное использование через git-shell.</target>
        </trans-unit>
        <trans-unit id="48d5c4b33cae3d35014b5a5e266ea897c2a18c9f" translate="yes" xml:space="preserve">
          <source>These will display all commits which exist only on HEAD or on MERGE_HEAD, and which touch an unmerged file.</source>
          <target state="translated">Они будут отображать все коммиты,которые существуют только на HEAD или на MERGE_HEAD,и которые касаются неупорядоченного файла.</target>
        </trans-unit>
        <trans-unit id="e9ab0d9bdf3f35b7d6ece2d3bc65f4fbb38bad38" translate="yes" xml:space="preserve">
          <source>They are both passed directly to &lt;code&gt;git diff-tree&lt;/code&gt;; see &lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">Оба они передаются непосредственно в &lt;code&gt;git diff-tree&lt;/code&gt; ; см. &lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree [1]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="afa16f632fa562fed5a34ad41431101aacb568d7" translate="yes" xml:space="preserve">
          <source>They can include slash &lt;code&gt;/&lt;/code&gt; for hierarchical (directory) grouping, but no slash-separated component can begin with a dot &lt;code&gt;.&lt;/code&gt; or end with the sequence &lt;code&gt;.lock&lt;/code&gt;.</source>
          <target state="translated">Они могут включать косую черту &lt;code&gt;/&lt;/code&gt; для иерархической группировки (каталогов), но ни один компонент, разделенный косой чертой, не может начинаться с точки &lt;code&gt;.&lt;/code&gt; или закончите последовательностью &lt;code&gt;.lock&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="48a933f433abac80f2e0e41b240081f7a399893c" translate="yes" xml:space="preserve">
          <source>They cannot be the single character &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">Они не могут быть одиночным символом &lt;code&gt;@&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c798a840110b095cd0c31cb10cad16c17f5292dd" translate="yes" xml:space="preserve">
          <source>They cannot begin or end with a slash &lt;code&gt;/&lt;/code&gt; or contain multiple consecutive slashes (see the &lt;code&gt;--normalize&lt;/code&gt; option below for an exception to this rule)</source>
          <target state="translated">Они не могут начинаться или заканчиваться косой чертой &lt;code&gt;/&lt;/code&gt; или содержать несколько последовательных косых &lt;code&gt;--normalize&lt;/code&gt; исключение из этого правила см. В параметре --normalize ниже)</target>
        </trans-unit>
        <trans-unit id="794c847c2b033448497ba9e6f46f59b7325ccd69" translate="yes" xml:space="preserve">
          <source>They cannot contain a &lt;code&gt;\&lt;/code&gt;.</source>
          <target state="translated">Они не могут содержать &lt;code&gt;\&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4cf89d0a711867dbdfa498e7e6b80fb04c020f3" translate="yes" xml:space="preserve">
          <source>They cannot contain a sequence &lt;code&gt;@{&lt;/code&gt;.</source>
          <target state="translated">Они не могут содержать последовательность &lt;code&gt;@{&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c781dcfcbfa7c545717cc72f3f25ac7fba039fd7" translate="yes" xml:space="preserve">
          <source>They cannot end with a dot &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">Они не могут заканчиваться точкой &lt;code&gt;.&lt;/code&gt; ,</target>
        </trans-unit>
        <trans-unit id="cdf3c698f8591838633d63d5550c41009f5d53bb" translate="yes" xml:space="preserve">
          <source>They cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \177 &lt;code&gt;DEL&lt;/code&gt;), space, tilde &lt;code&gt;~&lt;/code&gt;, caret &lt;code&gt;^&lt;/code&gt;, or colon &lt;code&gt;:&lt;/code&gt; anywhere.</source>
          <target state="translated">Они не могут иметь управляющие символы ASCII (т.е. байт, значения которых меньше \ 040 или \ 177 &lt;code&gt;DEL&lt;/code&gt; ), пробел, тильда &lt;code&gt;~&lt;/code&gt; , каретку &lt;code&gt;^&lt;/code&gt; , или толстой кишки &lt;code&gt;:&lt;/code&gt; в любом месте.</target>
        </trans-unit>
        <trans-unit id="9fa9a35ba99f055f59e5fb0fc3903845af8141d1" translate="yes" xml:space="preserve">
          <source>They cannot have question-mark &lt;code&gt;?&lt;/code&gt;, asterisk &lt;code&gt;*&lt;/code&gt;, or open bracket &lt;code&gt;[&lt;/code&gt; anywhere. See the &lt;code&gt;--refspec-pattern&lt;/code&gt; option below for an exception to this rule.</source>
          <target state="translated">У них не может быть вопросительного знака &lt;code&gt;?&lt;/code&gt; , звездочка &lt;code&gt;*&lt;/code&gt; или открывающая скобка &lt;code&gt;[&lt;/code&gt; где угодно. См. Исключение из этого правила в параметре &lt;code&gt;--refspec-pattern&lt;/code&gt; ниже.</target>
        </trans-unit>
        <trans-unit id="07233de88d34b821d099ea14e09099281360fa3d" translate="yes" xml:space="preserve">
          <source>They cannot have two consecutive dots &lt;code&gt;..&lt;/code&gt; anywhere.</source>
          <target state="translated">У них не может быть двух точек подряд &lt;code&gt;..&lt;/code&gt; где угодно.</target>
        </trans-unit>
        <trans-unit id="08cc7b3818b658e36c5e9a0a0fcefabb2c9bd5ce" translate="yes" xml:space="preserve">
          <source>They must contain at least one &lt;code&gt;/&lt;/code&gt;. This enforces the presence of a category like &lt;code&gt;heads/&lt;/code&gt;, &lt;code&gt;tags/&lt;/code&gt; etc. but the actual names are not restricted. If the &lt;code&gt;--allow-onelevel&lt;/code&gt; option is used, this rule is waived.</source>
          <target state="translated">Они должны содержать хотя бы один &lt;code&gt;/&lt;/code&gt; . Это обеспечивает наличие категории, например, &quot; &lt;code&gt;heads/&lt;/code&gt; , &quot; &lt;code&gt;tags/&lt;/code&gt; и т. Д., Но фактические имена не ограничиваются. Если используется &lt;code&gt;--allow-onelevel&lt;/code&gt; , это правило отменяется.</target>
        </trans-unit>
        <trans-unit id="9c66e1086c1b783565f285e9f8d345796e4a920b" translate="yes" xml:space="preserve">
          <source>Things get more complicated if the &lt;code&gt;subsystem&lt;/code&gt; changes do not exactly correspond to the ones before the rebase.</source>
          <target state="translated">Ситуация усложняется, если изменения в &lt;code&gt;subsystem&lt;/code&gt; не совсем соответствуют изменениям до перебазирования.</target>
        </trans-unit>
        <trans-unit id="877bd5e347693a4c90610529b809f198ae203a8a" translate="yes" xml:space="preserve">
          <source>Think about how to create a clear chapter dependency graph that will allow people to get to important topics without necessarily reading everything in between.</source>
          <target state="translated">Подумайте о том,как создать четкий график зависимости от главы,который позволит людям добраться до важных тем,не обязательно читая все,что находится между ними.</target>
        </trans-unit>
        <trans-unit id="5f03012af2a22f62503c31e1e064eb23ddd2be46" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;key&lt;/code&gt; will be used instead of &amp;lt;token&amp;gt; in the trailer. At the end of this key, a separator can appear and then some space characters. By default the only valid separator is &lt;code&gt;:&lt;/code&gt;, but this can be changed using the &lt;code&gt;trailer.separators&lt;/code&gt; config variable.</source>
          <target state="translated">Этот &lt;code&gt;key&lt;/code&gt; будет использоваться вместо &amp;lt;token&amp;gt; в трейлере. В конце этого ключа может появиться разделитель, а затем несколько символов пробела. По умолчанию единственным допустимым разделителем является &lt;code&gt;:&lt;/code&gt; , но его можно изменить с помощью переменной конфигурации &lt;code&gt;trailer.separators&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ed9ef222233001104259cd6ab7e0ea2e028dedb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;merge&lt;/code&gt; can also be done by &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt;, like this:</source>
          <target state="translated">Это &lt;code&gt;merge&lt;/code&gt; также может быть выполнено путем &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="0007248c88629a35b9fa8e1cf4c8fdf299191526" translate="yes" xml:space="preserve">
          <source>This accepts all options that &lt;code&gt;git svn fetch&lt;/code&gt; and &lt;code&gt;git rebase&lt;/code&gt; accept. However, &lt;code&gt;--fetch-all&lt;/code&gt; only fetches from the current [svn-remote], and not all [svn-remote] definitions.</source>
          <target state="translated">Это принимает все параметры, которые принимают &lt;code&gt;git svn fetch&lt;/code&gt; и &lt;code&gt;git rebase&lt;/code&gt; . Однако &lt;code&gt;--fetch-all&lt;/code&gt; извлекает только из текущего [svn-remote], а не всех определений [svn-remote].</target>
        </trans-unit>
        <trans-unit id="c118365ba0290d763b2d4e635fbfbb09d23e73e6" translate="yes" xml:space="preserve">
          <source>This action is disabled by default for performance reasons.</source>
          <target state="translated">Это действие отключено по умолчанию из соображений производительности.</target>
        </trans-unit>
        <trans-unit id="692de83ae64c152ace96a6b22c40c6c7b5256f5f" translate="yes" xml:space="preserve">
          <source>This adds a link titled &quot;graphiclog&quot; after the &quot;summary&quot; link, leading to &lt;code&gt;git-browser&lt;/code&gt; script, passing &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; as a query parameter.</source>
          <target state="translated">Это добавляет ссылку под названием &amp;laquo;graphiclog&amp;raquo; после ссылки &amp;laquo;summary&amp;raquo;, ведущей к скрипту &lt;code&gt;git-browser&lt;/code&gt; , передавая &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; в качестве параметра запроса.</target>
        </trans-unit>
        <trans-unit id="9647e1f610a9d28b74cedc3ffa625f5d98628ec8" translate="yes" xml:space="preserve">
          <source>This algorithm extends the patience algorithm to &quot;support low-occurrence common elements&quot;.</source>
          <target state="translated">Этот алгоритм расширяет алгоритм терпения на &quot;поддержку мало повторяющихся общих элементов&quot;.</target>
        </trans-unit>
        <trans-unit id="5f9e4d22cfa1bc9f924abb0f51a443db2655b318" translate="yes" xml:space="preserve">
          <source>This allows &lt;code&gt;git svn&lt;/code&gt; to re-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata.</source>
          <target state="translated">Это позволяет &lt;code&gt;git svn&lt;/code&gt; повторно отображать URL-адреса репозитория и UUID с зеркал, созданных с использованием SVN :: Mirror (или svk) для метаданных.</target>
        </trans-unit>
        <trans-unit id="cb552885bcd7df779f362e35a229c9d935657c60" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN. The &lt;code&gt;--ignore-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository.</source>
          <target state="translated">Это позволяет указать регулярное выражение Perl, которое приведет к пропуску всех подходящих путей при оформлении заказа из SVN. &lt;code&gt;--ignore-paths&lt;/code&gt; вариант должен соответствовать для каждых &lt;code&gt;fetch&lt;/code&gt; ( в том числе автоматических извлечений из - за &lt;code&gt;clone&lt;/code&gt; , &lt;code&gt;dcommit&lt;/code&gt; , &lt;code&gt;rebase&lt;/code&gt; и т.д.) на данное хранилище.</target>
        </trans-unit>
        <trans-unit id="bf5d12ceb1111e8b06bd58f3985472091a1cae12" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause the inclusion of only matching paths from checkout from SVN. The &lt;code&gt;--include-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository. &lt;code&gt;--ignore-paths&lt;/code&gt; takes precedence over &lt;code&gt;--include-paths&lt;/code&gt;.</source>
          <target state="translated">Это позволяет указать регулярное выражение Perl, которое приведет к включению только совпадающих путей из проверки из SVN. &lt;code&gt;--include-paths&lt;/code&gt; вариант должен соответствовать для каждых &lt;code&gt;fetch&lt;/code&gt; ( в том числе автоматических извлечений из - за &lt;code&gt;clone&lt;/code&gt; , &lt;code&gt;dcommit&lt;/code&gt; , &lt;code&gt;rebase&lt;/code&gt; и т.д.) на данное хранилище. &lt;code&gt;--ignore-paths&lt;/code&gt; имеет приоритет над &lt;code&gt;--include-paths&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c68f089f9144bc4bdc1d710532bfa75a569d11ed" translate="yes" xml:space="preserve">
          <source>This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want. If --branches/-b is specified, the prefix must include a trailing slash. Setting a prefix (with a trailing slash) is strongly encouraged in any case, as your SVN-tracking refs will then be located at &quot;refs/remotes/$prefix/&lt;strong&gt;&quot;, which is compatible with Git&amp;rsquo;s own remote-tracking ref layout (refs/remotes/$remote/&lt;/strong&gt;). Setting a prefix is also useful if you wish to track multiple projects that share a common repository. By default, the prefix is set to &lt;code&gt;origin/&lt;/code&gt;.</source>
          <target state="translated">Это позволяет указать префикс, который будет добавлен к именам пультов, если указаны ствол / ветки / теги. Префикс не включает автоматически завершающую косую черту, поэтому обязательно включите ее в аргумент, если это то, что вы хотите. Если указан --branches / -b, префикс должен включать завершающую косую черту. В любом случае настоятельно рекомендуется установка префикса (с завершающей косой чертой), так как ваши ссылки для отслеживания SVN будут располагаться по адресу &quot;refs / remotes / $ prefix / &lt;strong&gt;&quot;, который совместим с собственным макетом ссылок удаленного отслеживания Git (refs / удаленные / $ удаленные /&lt;/strong&gt; ). Установка префикса также полезна, если вы хотите отслеживать несколько проектов, которые используют общий репозиторий. По умолчанию установлен префикс &lt;code&gt;origin/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99b10fdeae941de841a9ac73e39b7c06fcc2d978" translate="yes" xml:space="preserve">
          <source>This allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.</source>
          <target state="translated">Это позволяет поддерживать диапазоны ревизий для частичной/каутеризированной истории.$NUMBER,$NUMBER1:$NUMBER2 (числовые диапазоны),$NUMBER:HEAD и BASE:$NUMBER поддерживаются.</target>
        </trans-unit>
        <trans-unit id="f18b167effc162d347deb782b83eab22ac73f014" translate="yes" xml:space="preserve">
          <source>This allows users to create repositories from alternate URLs. For example, an administrator could run &lt;code&gt;git svn&lt;/code&gt; on the server locally (accessing via file://) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL.</source>
          <target state="translated">Это позволяет пользователям создавать репозитории из альтернативных URL-адресов. Например, администратор может запустить &lt;code&gt;git svn&lt;/code&gt; на сервере локально (доступ через file: //), но желает распространить репозиторий с общедоступным URL-адресом http: // или svn: // в метаданных, чтобы его пользователи видели общедоступный URL.</target>
        </trans-unit>
        <trans-unit id="86c4c002dbb35b192dee2247feadc27722ad842a" translate="yes" xml:space="preserve">
          <source>This application is a CVS emulation layer for Git.</source>
          <target state="translated">Это приложение является слоем эмуляции CVS для Git'а.</target>
        </trans-unit>
        <trans-unit id="8feea1468fa1fae814e84f89aca492fad30e5da4" translate="yes" xml:space="preserve">
          <source>This applies modifications from a hot-fix branch before each test run, e.g. in case your build or test environment changed so that older revisions may need a fix which newer ones have already. (Make sure the hot-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use &lt;code&gt;git cherry-pick&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.)</source>
          <target state="translated">При этом перед каждым запуском теста применяются модификации из ветки горячего исправления, например, если ваша сборка или тестовая среда изменились так, что более старые версии могут нуждаться в исправлении, которое уже есть в новых. (Убедитесь, что ветка горячего исправления основана на фиксации, которая содержится во всех ревизиях, которые вы делите пополам, чтобы слияние не затягивало слишком много, или используйте &lt;code&gt;git cherry-pick&lt;/code&gt; вместо &lt;code&gt;git merge&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="889d1277201779cf18582f69129975a9bf60d357" translate="yes" xml:space="preserve">
          <source>This applies to files added to the source branch &lt;strong&gt;after&lt;/strong&gt; a daughter branch was created: if previously no commit was made on the daughter branch they will erroneously be added to the daughter branch in git.</source>
          <target state="translated">Это относится к файлам, добавленным в исходную ветвь &lt;strong&gt;после&lt;/strong&gt; создания дочерней ветки: если ранее в дочерней ветке не было сделано никаких фиксаций, они будут ошибочно добавлены в дочернюю ветвь в git.</target>
        </trans-unit>
        <trans-unit id="cd519f993fc33ca56b2cb882b0ae5ba8b983012d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead it sets the vhost field in the git:// service request (to rest of the argument). Default is not to send vhost in such request (if sent).</source>
          <target state="translated">Этот аргумент не будет передан в &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; . Вместо этого он устанавливает поле vhost в сервисном запросе git: // (оставшуюся часть аргумента). По умолчанию в таком запросе (если он отправлен) vhost не отправляется.</target>
        </trans-unit>
        <trans-unit id="9535ee34f2074fa8e689413e0518f1d3faf71e7d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead, it will cause the helper to start by sending git:// service requests to the remote side with the service field set to an appropriate value and the repository field set to rest of the argument. Default is not to send such a request.</source>
          <target state="translated">Этот аргумент не будет передан в &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; . Вместо этого он вызовет запуск помощника с отправки запросов git: // на удаленную сторону с полем службы, установленным на соответствующее значение, и полем репозитория, установленным на остальную часть аргумента. По умолчанию такой запрос не отправляется.</target>
        </trans-unit>
        <trans-unit id="b50cd8ffcdc46b4b68ae7776a2b00f1d1183b6dd" translate="yes" xml:space="preserve">
          <source>This asks for all the history reachable from the given commit but not from any branch, tag, or other reference. If you decide it&amp;rsquo;s something you want, you can always create a new reference to it, e.g.,</source>
          <target state="translated">Это запрашивает всю историю, доступную из данной фиксации, но не из какой-либо ветки, тега или другой ссылки. Если вы решите, что это то, что вам нужно, вы всегда можете создать новую ссылку на него, например,</target>
        </trans-unit>
        <trans-unit id="7efa4dea1c9da210003e0c08e382eb543f66cbf7" translate="yes" xml:space="preserve">
          <source>This attribute controls the length of conflict markers left in the work tree file during a conflicted merge. Only setting to the value to a positive integer has any meaningful effect.</source>
          <target state="translated">Данный атрибут контролирует длину маркеров конфликтов,оставленных в файле рабочего дерева при конфликтном слиянии.Только установка значения в положительное целое число имеет смысл.</target>
        </trans-unit>
        <trans-unit id="4caef1788f338fb02906a32b34bfb366a7539a3a" translate="yes" xml:space="preserve">
          <source>This attribute enables and controls end-of-line normalization. When a text file is normalized, its line endings are converted to LF in the repository. To control what line ending style is used in the working directory, use the &lt;code&gt;eol&lt;/code&gt; attribute for a single file and the &lt;code&gt;core.eol&lt;/code&gt; configuration variable for all text files. Note that setting &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; overrides &lt;code&gt;core.eol&lt;/code&gt; (see the definitions of those options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">Этот атрибут включает и контролирует нормализацию конца строки. Когда текстовый файл нормализуется, его окончания строк преобразуются в LF в репозитории. Для контроля того, что строка , заканчивающаяся стиль используется в рабочем каталоге, используйте &lt;code&gt;eol&lt;/code&gt; атрибут для одного файла и &lt;code&gt;core.eol&lt;/code&gt; переменной конфигурации для всех текстовых файлов. Обратите внимание, что установка &lt;code&gt;core.autocrlf&lt;/code&gt; на &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;input&lt;/code&gt; переопределяет &lt;code&gt;core.eol&lt;/code&gt; (см. Определения этих параметров в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9abb1dada669f4b282e87943eaa4c10d9676f824" translate="yes" xml:space="preserve">
          <source>This attribute sets a specific line-ending style to be used in the working directory. It enables end-of-line conversion without any content checks, effectively setting the &lt;code&gt;text&lt;/code&gt; attribute. Note that setting this attribute on paths which are in the index with CRLF line endings may make the paths to be considered dirty. Adding the path to the index again will normalize the line endings in the index.</source>
          <target state="translated">Этот атрибут устанавливает определенный стиль окончания строки, который будет использоваться в рабочем каталоге. Он обеспечивает преобразование в конце строки без каких-либо проверок содержимого, эффективно устанавливая &lt;code&gt;text&lt;/code&gt; атрибут. Обратите внимание, что установка этого атрибута на пути, которые находятся в индексе с окончаниями строк CRLF, может сделать пути грязными. Повторное добавление пути к индексу нормализует окончания строк в индексе.</target>
        </trans-unit>
        <trans-unit id="a95f413f93d421b5f0b609911f7201baca2aa2de" translate="yes" xml:space="preserve">
          <source>This automatically updates the rev_map if needed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details).</source>
          <target state="translated">Это автоматически обновляет rev_map, если необходимо (подробности см. В &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; В разделе ФАЙЛЫ ниже).</target>
        </trans-unit>
        <trans-unit id="5ef9fc28040a2d8ac737cc9e8915d682487174d5" translate="yes" xml:space="preserve">
          <source>This avoids touching the disk, but removes the additional file. Your project may prefer to adopt a naming convention, such as all-lowercase names, to avoid this problem from occurring again; such a convention can be checked using a &lt;code&gt;pre-receive&lt;/code&gt; hook or as part of a continuous integration (CI) system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756e07e0622c048ffb322b306c002b3fe742a463" translate="yes" xml:space="preserve">
          <source>This behavior can be suppressed with the &lt;code&gt;--no-ff&lt;/code&gt; option.</source>
          <target state="translated">Это поведение можно подавить с помощью опции &lt;code&gt;--no-ff&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ad430bc747d1916521d538bf94c1847176c4231" translate="yes" xml:space="preserve">
          <source>This behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to &lt;code&gt;false&lt;/code&gt; if you want &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git branch&lt;/code&gt; to always behave as if &lt;code&gt;--no-track&lt;/code&gt; were given. Set it to &lt;code&gt;always&lt;/code&gt; if you want this behavior when the start-point is either a local or remote-tracking branch.</source>
          <target state="translated">Это поведение используется по умолчанию, когда начальная точка является ветвью удаленного отслеживания. Установите для переменной конфигурации branch.autoSetupMerge значение &lt;code&gt;false&lt;/code&gt; , если вы хотите, чтобы &lt;code&gt;git switch&lt;/code&gt; , &lt;code&gt;git checkout&lt;/code&gt; и &lt;code&gt;git branch&lt;/code&gt; всегда вели себя так, как если бы был задан параметр &lt;code&gt;--no-track&lt;/code&gt; . Установите его &lt;code&gt;always&lt;/code&gt; если вы хотите, чтобы это поведение происходило, когда начальная точка является либо локальной, либо удаленной ветвью отслеживания.</target>
        </trans-unit>
        <trans-unit id="a57c8928c46f18c8586890f640bdaceff3225ce7" translate="yes" xml:space="preserve">
          <source>This boolean config option controls whether some commands run &lt;code&gt;git maintenance run --auto&lt;/code&gt; after doing their normal work. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d843a8479501e1f56c84b63bc83f8438d9dc3a" translate="yes" xml:space="preserve">
          <source>This boolean config option controls whether the maintenance task with name &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; is run when no &lt;code&gt;--task&lt;/code&gt; option is specified to &lt;code&gt;git maintenance run&lt;/code&gt;. These config values are ignored if a &lt;code&gt;--task&lt;/code&gt; option exists. By default, only &lt;code&gt;maintenance.gc.enabled&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e589ab09a449c7cf7000e50f249deca2b148281c" translate="yes" xml:space="preserve">
          <source>This boolean will enable &lt;code&gt;fsync()&lt;/code&gt; when writing object files.</source>
          <target state="translated">Это логическое значение включает &lt;code&gt;fsync()&lt;/code&gt; при записи объектных файлов.</target>
        </trans-unit>
        <trans-unit id="2a9d8bb8cd3e4996e1654fca8257ad2030d24d70" translate="yes" xml:space="preserve">
          <source>This breakage is of course most of the time unrelated to the breakage we are trying to locate in the commit graph. But it prevents us to know if the interesting &quot;bad behavior&quot; is present or not.</source>
          <target state="translated">Этот разрыв,конечно же,в большинстве случаев не связан с тем,что мы пытаемся найти на графике коммитов.Но это мешает нам узнать,присутствует ли интересное &quot;плохое поведение&quot; или нет.</target>
        </trans-unit>
        <trans-unit id="1a7656b1b8b17aa91ea330f8fbedd0a75097faed" translate="yes" xml:space="preserve">
          <source>This bug has also been shown to affect non-symlink cases of replacing a directory with a file when it comes to the internal structures of the untracked cache, but no case has been reported where this resulted in wrong &quot;git status&quot; output.</source>
          <target state="translated">Также было показано,что эта ошибка влияет на случаи замены каталога на файл,когда речь идёт о внутренних структурах неотслеживаемого кэша,но не было сообщено ни об одном случае,когда это приводило к неправильному выводу &quot;git-статуса&quot;.</target>
        </trans-unit>
        <trans-unit id="bbb14e9c1a32bd1658d34b41d317e78fe3e2cf7e" translate="yes" xml:space="preserve">
          <source>This cache is meant to speed up commands that involve determining untracked files such as &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">Этот кеш предназначен для ускорения выполнения команд, которые включают определение неотслеживаемых файлов, таких как &lt;code&gt;git status&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e9291bab46bd7ea7a2a21b7e8d51146482ff7a6" translate="yes" xml:space="preserve">
          <source>This calculates the same as &lt;code&gt;--bisect&lt;/code&gt;, except that refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used, and except that this outputs text ready to be eval&amp;rsquo;ed by the shell. These lines will assign the name of the midpoint revision to the variable &lt;code&gt;bisect_rev&lt;/code&gt;, and the expected number of commits to be tested after &lt;code&gt;bisect_rev&lt;/code&gt; is tested to &lt;code&gt;bisect_nr&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be good to &lt;code&gt;bisect_good&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be bad to &lt;code&gt;bisect_bad&lt;/code&gt;, and the number of commits we are bisecting right now to &lt;code&gt;bisect_all&lt;/code&gt;.</source>
          <target state="translated">Это вычисляется так же, как &lt;code&gt;--bisect&lt;/code&gt; , за исключением того, что ссылки в &lt;code&gt;refs/bisect/&lt;/code&gt; не используются, и за исключением того, что это выводит текст, готовый для оценки оболочкой. Эти строки присваивают имя ревизии средней точки переменной &lt;code&gt;bisect_rev&lt;/code&gt; , а ожидаемое количество коммитов , которые будут проверены после &lt;code&gt;bisect_rev&lt;/code&gt; - &lt;code&gt;bisect_nr&lt;/code&gt; , ожидаемое количество коммитов , которые будут проверены, если &lt;code&gt;bisect_rev&lt;/code&gt; окажется подходящим для &lt;code&gt;bisect_good&lt;/code&gt; , ожидаемое количество &lt;code&gt;bisect_rev&lt;/code&gt; которые будут проверены, если bisect_rev окажется плохим для &lt;code&gt;bisect_bad&lt;/code&gt; , и количество коммитов , которые мы сейчас &lt;code&gt;bisect_all&lt;/code&gt; пополам до bisect_all .</target>
        </trans-unit>
        <trans-unit id="7d3cf717b036e3b0e81df34e24d7ea082a035f6a" translate="yes" xml:space="preserve">
          <source>This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost.</source>
          <target state="translated">Это может позволить вам сделать частичные зеркала при запуске fetch;но это обычно не рекомендуется,потому что история будет пропущена и потеряна.</target>
        </trans-unit>
        <trans-unit id="636e119b451b3bd7ccaf26b7d43733789f26ed19" translate="yes" xml:space="preserve">
          <source>This can also be set up as the default behaviour by using the &lt;code&gt;worktree.guessRemote&lt;/code&gt; config option.</source>
          <target state="translated">Это также можно настроить как поведение по умолчанию с помощью &lt;code&gt;worktree.guessRemote&lt;/code&gt; конфигурации worktree.guessRemote .</target>
        </trans-unit>
        <trans-unit id="fa409f68e80081ea9a669e9f13a5d077543254ef" translate="yes" xml:space="preserve">
          <source>This can be &lt;code&gt;end&lt;/code&gt;, which is the default, &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;.</source>
          <target state="translated">Это может быть &lt;code&gt;end&lt;/code&gt; по умолчанию, &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;after&lt;/code&gt; или &lt;code&gt;before&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0de02388f102cf8ff32d10ea0ea1542e4435ae39" translate="yes" xml:space="preserve">
          <source>This can be any options that the archiver backend understands. See next section.</source>
          <target state="translated">Это могут быть любые варианты,которые понимает бэкэнд архиватора.См.следующий раздел.</target>
        </trans-unit>
        <trans-unit id="8ebe928ea2c46867d2d30a22aa44b6d209b60b27" translate="yes" xml:space="preserve">
          <source>This can be combined with the gitweb configuration:</source>
          <target state="translated">Это может быть совмещено с конфигурацией gitweb:</target>
        </trans-unit>
        <trans-unit id="3e2aafd0fe68d162abd0214f2c4dbcf97a317242" translate="yes" xml:space="preserve">
          <source>This can be enabled by default with the configuration option mailinfo.scissors.</source>
          <target state="translated">Это может быть включено по умолчанию с помощью опции конфигурации mailinfo.scissors.</target>
        </trans-unit>
        <trans-unit id="90b17ef61d05f77323fefc823815f1b4d0ca5c24" translate="yes" xml:space="preserve">
          <source>This can be set to a comma-separated list of strings. When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), whenever a &quot;Cookies:&quot; header sent by the client is dumped, values of cookies whose key is in that list (case-sensitive) are redacted.</source>
          <target state="translated">Это может быть список строк, разделенных запятыми. Когда трассировка curl включена (см. &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; выше), всякий раз, когда заголовок &amp;laquo;Cookies:&amp;raquo;, отправленный клиентом, сбрасывается, значения файлов cookie, ключ которых находится в этом списке (с учетом регистра), удаляются.</target>
        </trans-unit>
        <trans-unit id="3d49143ca76086473ec42d2280fe45285788984b" translate="yes" xml:space="preserve">
          <source>This can be used to color the metadata of a blame line depending on age of the line.</source>
          <target state="translated">Это может быть использовано для окраски метаданных линии обвинения в зависимости от возраста линии.</target>
        </trans-unit>
        <trans-unit id="0f9fdab39f98d82a2bdc74c13a484288c9af48d4" translate="yes" xml:space="preserve">
          <source>This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:</source>
          <target state="translated">Это может быть использовано для преобразования аргументов в команду,запущенную в подкаталоге,чтобы их можно было использовать после перехода на верхний уровень репозитория.Например:</target>
        </trans-unit>
        <trans-unit id="7c4f04c6d6345aed6141f4d5502d056991a7840c" translate="yes" xml:space="preserve">
          <source>This can be used when you want to include further changes to the merge, or want to write your own merge commit message.</source>
          <target state="translated">Это может быть использовано,когда вы хотите включить дальнейшие изменения в слияние или хотите написать своё собственное сообщение о фиксации слияния.</target>
        </trans-unit>
        <trans-unit id="14d1ead4268c0c0f3315fceadadaf2f291770d82" translate="yes" xml:space="preserve">
          <source>This can be used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; commands.</source>
          <target state="translated">Это может быть использовано с &lt;code&gt;dcommit&lt;/code&gt; , &lt;code&gt;rebase&lt;/code&gt; , &lt;code&gt;branch&lt;/code&gt; и &lt;code&gt;tag&lt;/code&gt; команд.</target>
        </trans-unit>
        <trans-unit id="9067f207a93cdcf6d90b3183367a4ae6097c31d6" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to publish the tree from a commit without exposing its full history. You might want to do this to publish an open source branch of a project whose current tree is &quot;clean&quot;, but whose full history contains proprietary or otherwise encumbered bits of code.</source>
          <target state="translated">Это может быть полезно,когда вы хотите опубликовать дерево из коммита,не раскрывая его полную историю.Вы можете захотеть сделать это,чтобы опубликовать открытую ветку проекта,чьё текущее дерево &quot;чистое&quot;,но чья полная история содержит несвободные или иным образом загромождённые биты кода.</target>
        </trans-unit>
        <trans-unit id="4ddcbb1d5b5e22f922e078b6b0d84fe1dcc0409b" translate="yes" xml:space="preserve">
          <source>This can happen, for example, if you:</source>
          <target state="translated">Это может случиться,например,если ты:</target>
        </trans-unit>
        <trans-unit id="9140f80526c6eb06ff98ed4abf5c0d2e07067266" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</source>
          <target state="translated">Это может разрешить только две головки (т.е.текущее ответвление и другое ответвление,из которого вы вытащили),используя алгоритм 3-х стороннего слияния.Он пытается тщательно обнаружить неоднозначные слияния,и считается в целом безопасным и быстрым.</target>
        </trans-unit>
        <trans-unit id="10679b433b60fbaff0452d6d903b314fee5164d2" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames, but currently cannot make use of detected copies. This is the default merge strategy when pulling or merging one branch.</source>
          <target state="translated">Это может разрешить только две головки с помощью алгоритма 3-хстороннего слияния.При наличии более чем одного общего предка,который может быть использован для 3-полосного слияния,он создает объединенное дерево общих предков и использует его в качестве дерева ссылок для 3-полосного слияния.Сообщается,что это приводит к меньшему количеству конфликтов слияния,не вызывая ошибок при тестировании реальных коммитов слияния,взятых из истории разработки ядра Linux 2.6.Кроме того,это может обнаруживать и обрабатывать слияния с переименованиями,но в настоящее время не может использовать обнаруженные копии.Это стратегия слияния по умолчанию при вытаскивании или слиянии одного ответвления.</target>
        </trans-unit>
        <trans-unit id="2cac39aeb86961e1363f7613dfed0033661ab943" translate="yes" xml:space="preserve">
          <source>This can speed up operations like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO&amp;rsquo;s. Defaults to true.</source>
          <target state="translated">Это может ускорить такие операции, как &lt;code&gt;git diff&lt;/code&gt; и &lt;code&gt;git status&lt;/code&gt; , особенно в файловых системах, таких как NFS, которые имеют слабую семантику кэширования и, следовательно, относительно высокие задержки ввода-вывода. Если этот параметр включен, Git будет выполнять сравнение индекса с данными файловой системы параллельно, что позволяет перекрывать операции ввода-вывода. По умолчанию true.</target>
        </trans-unit>
        <trans-unit id="9202266152fd1a0a2194149286bebd74fe30a95c" translate="yes" xml:space="preserve">
          <source>This capability can be advertised multiple times. The first applicable refspec takes precedence. The left-hand of refspecs advertised with this capability must cover all refs reported by the list command. If no &lt;code&gt;refspec&lt;/code&gt; capability is advertised, there is an implied &lt;code&gt;refspec *:*&lt;/code&gt;.</source>
          <target state="translated">Эта возможность может рекламироваться несколько раз. Первый применимый refspec имеет приоритет. Левая часть ссылок, объявленных с этой возможностью, должна охватывать все ссылки, сообщаемые командой list. Если возможность &lt;code&gt;refspec&lt;/code&gt; не объявляется, подразумевается &lt;code&gt;refspec *:*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="561397ab0857a5bada65e17ac4aabd661a6939b5" translate="yes" xml:space="preserve">
          <source>This chapter covers internal details of the Git implementation which probably only Git developers need to understand.</source>
          <target state="translated">В этой главе рассматриваются внутренние детали реализации Git'а,которые,вероятно,должны быть понятны только разработчикам Git'а.</target>
        </trans-unit>
        <trans-unit id="9301665301f3e50c4417122a8411be226ea5b235" translate="yes" xml:space="preserve">
          <source>This command always gets all objects. Historically, there were three options &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt; for choosing which objects to download. They are now silently ignored.</source>
          <target state="translated">Эта команда всегда получает все объекты. Исторически существовало три параметра &lt;code&gt;-a&lt;/code&gt; , &lt;code&gt;-c&lt;/code&gt; и &lt;code&gt;-t&lt;/code&gt; для выбора объектов для загрузки. Теперь их молча игнорируют.</target>
        </trans-unit>
        <trans-unit id="5b8a59dc9ca3a3d6f247d36df5fb54708fa69494" translate="yes" xml:space="preserve">
          <source>This command applies the patch but does not create a commit. Use &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; to create commits from patches generated by &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; and/or received by email.</source>
          <target state="translated">Эта команда применяет патч, но не создает фиксацию. Используйте &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; для создания коммитов из патчей, сгенерированных &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt; и / или полученных по электронной почте.</target>
        </trans-unit>
        <trans-unit id="1f849e1e7df08a5bb28860e4715d22e12f5d5d20" translate="yes" xml:space="preserve">
          <source>This command assists the developer in this process by recording conflicted automerge results and corresponding hand resolve results on the initial manual merge, and applying previously recorded hand resolutions to their corresponding automerge results.</source>
          <target state="translated">Эта команда помогает разработчику в этом процессе,записывая противоречивые результаты авторского слияния и соответствующие разрешения рук при первоначальном ручном слиянии,а также применяя ранее записанные разрешения рук к соответствующим результатам авторского слияния.</target>
        </trans-unit>
        <trans-unit id="b823d02fd766a4ae4b81090ce369454e7da568d6" translate="yes" xml:space="preserve">
          <source>This command caches credentials in memory for use by future Git programs. The stored credentials never touch the disk, and are forgotten after a configurable timeout. The cache is accessible over a Unix domain socket, restricted to the current user by filesystem permissions.</source>
          <target state="translated">Эта команда кэширует учетные данные в памяти для использования будущими программами Git'а.Сохраненные учетные данные никогда не трогают диск и забываются после настраиваемого тайм-аута.Кэш доступен через доменное гнездо Unix,ограниченное текущим пользователем разрешениями файловой системы.</target>
        </trans-unit>
        <trans-unit id="4784337d21599fe7fcfddcd79392d8470207170e" translate="yes" xml:space="preserve">
          <source>This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run &lt;code&gt;git add&lt;/code&gt; again to add the new content to the index.</source>
          <target state="translated">Эту команду можно выполнить несколько раз перед фиксацией. Он только добавляет содержимое указанного файла (ов) во время выполнения команды добавления; если вы хотите, чтобы последующие изменения были включены в следующую фиксацию, вы должны снова запустить &lt;code&gt;git add&lt;/code&gt; , чтобы добавить новый контент в индекс.</target>
        </trans-unit>
        <trans-unit id="c286ab165ab2a31532b621372beb627366820ec4" translate="yes" xml:space="preserve">
          <source>This command can be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit. For a &lt;code&gt;filemodify&lt;/code&gt; using an inline directive, it can also appear right before the &lt;code&gt;data&lt;/code&gt; directive.</source>
          <target state="translated">Эту команду можно использовать там, где может появиться директива &lt;code&gt;filemodify&lt;/code&gt; , позволяющая использовать ее в середине фиксации. Для изменения &lt;code&gt;filemodify&lt;/code&gt; с использованием встроенной директивы он также может появляться прямо перед директивой &lt;code&gt;data&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74e4352fd2289d447be4133ac0e6d68d162428a6" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;applypatch-msg&lt;/code&gt;, &lt;code&gt;pre-applypatch&lt;/code&gt;, and &lt;code&gt;post-applypatch&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">Эта команда может запускать &lt;code&gt;applypatch-msg&lt;/code&gt; , &lt;code&gt;pre-applypatch&lt;/code&gt; и &lt;code&gt;post-applypatch&lt;/code&gt; . См. &lt;a href=&quot;githooks&quot;&gt;Githooks [5]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="2e5610ce87e5d01d8f8246892b4f05f886b6ad5a" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;commit-msg&lt;/code&gt;, &lt;code&gt;prepare-commit-msg&lt;/code&gt;, &lt;code&gt;pre-commit&lt;/code&gt;, &lt;code&gt;post-commit&lt;/code&gt; and &lt;code&gt;post-rewrite&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">Эта команда может запускать &lt;code&gt;commit-msg&lt;/code&gt; , &lt;code&gt;prepare-commit-msg&lt;/code&gt; , &lt;code&gt;pre-commit&lt;/code&gt; , &lt;code&gt;post-commit&lt;/code&gt; и &lt;code&gt;post-rewrite&lt;/code&gt; . См. &lt;a href=&quot;githooks&quot;&gt;Githooks [5]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="6ba8d48bf258fdf0b61e4a3a7667022fd45b3e45" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial &lt;code&gt;HEAD&lt;/code&gt; file that references the HEAD of the master branch is also created.</source>
          <target state="translated">Эта команда создает пустой репозиторий Git - в основном каталог &lt;code&gt;.git&lt;/code&gt; с подкаталогами для &lt;code&gt;objects&lt;/code&gt; , &lt;code&gt;refs/heads&lt;/code&gt; , &lt;code&gt;refs/tags&lt;/code&gt; и файлов шаблонов. Также создается начальный файл &lt;code&gt;HEAD&lt;/code&gt; , который ссылается на HEAD главной ветви.</target>
        </trans-unit>
        <trans-unit id="283a3a39e231f6367045f912a15047dc4264c5e0" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial branch without any commits will be created (see the &lt;code&gt;--initial-branch&lt;/code&gt; option below for its name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52be87adec196973421cd7319ee0f98c1860983" translate="yes" xml:space="preserve">
          <source>This command degenerates to download everything to complete the asked refs from the remote side when the local side does not have a common ancestor commit.</source>
          <target state="translated">Эта команда дегенерирует,загружая все для завершения запрашиваемых ссылок с удаленной стороны,когда у локальной стороны нет общего коммита предков.</target>
        </trans-unit>
        <trans-unit id="194b70091800ec19021441e8c1778ca9e02b53d5" translate="yes" xml:space="preserve">
          <source>This command ensures that the changes in the experimental branch are already in the current branch.</source>
          <target state="translated">Эта команда гарантирует,что изменения в экспериментальной ветке уже находятся в текущей ветке.</target>
        </trans-unit>
        <trans-unit id="1b788d383418fe8b134f7630991a2d6359c7dd7c" translate="yes" xml:space="preserve">
          <source>This command finds new changes in p4 and imports them as Git commits.</source>
          <target state="translated">Эта команда находит новые изменения в p4 и импортирует их как коммиты Git'а.</target>
        </trans-unit>
        <trans-unit id="4b11fc8efec3bd343a83e9f1aa4620a514b9ab8e" translate="yes" xml:space="preserve">
          <source>This command formats the lines of its standard input into a table with multiple columns. Each input line occupies one cell of the table. It is used internally by other git commands to format output into columns.</source>
          <target state="translated">Эта команда форматирует строки стандартного ввода в таблицу с несколькими столбцами.Каждая строка ввода занимает одну ячейку таблицы.Она используется внутри других команд git'а для форматирования вывода в столбцы.</target>
        </trans-unit>
        <trans-unit id="ade7fdc971ed1f0936fb8fbff7bb1574367ca37b" translate="yes" xml:space="preserve">
          <source>This command is extremely useful if the frontend does not know (or does not care to know) what files are currently on the branch, and therefore cannot generate the proper &lt;code&gt;filedelete&lt;/code&gt; commands to update the content.</source>
          <target state="translated">Эта команда чрезвычайно полезна, если интерфейс не знает (или не заботится об этом), какие файлы в настоящее время находятся в ветке, и, следовательно, не может сгенерировать правильные команды &lt;code&gt;filedelete&lt;/code&gt; для обновления содержимого.</target>
        </trans-unit>
        <trans-unit id="5f45dc9e63088b4d8e620891decbfdd6655de376" translate="yes" xml:space="preserve">
          <source>This command is intended mostly for internal use by scripts automatically invoking &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">Эта команда предназначена в основном для внутреннего использования скриптами, автоматически вызывающими &lt;code&gt;git merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3710225b15829bc8cbeb92895b81ff709286e645" translate="yes" xml:space="preserve">
          <source>This command is recursive by default.</source>
          <target state="translated">По умолчанию эта команда является рекурсивной.</target>
        </trans-unit>
        <trans-unit id="6e8668d616c8790cb8d71e8720597de54ced7850" translate="yes" xml:space="preserve">
          <source>This command is used to combine all objects that do not currently reside in a &quot;pack&quot;, into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.</source>
          <target state="translated">Эта команда используется для объединения всех объектов,которые в настоящее время не проживают в &quot;пакете&quot;,в пакет.Она также может быть использована для реорганизации существующих пакетов в единый,более эффективный пакет.</target>
        </trans-unit>
        <trans-unit id="e7cbc44be580e3c1734536d3564c4b9dc7e501fa" translate="yes" xml:space="preserve">
          <source>This command is used to solve the storage and performance problem by storing the refs in a single file, &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt;. When a ref is missing from the traditional &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory hierarchy, it is looked up in this file and used if found.</source>
          <target state="translated">Эта команда используется для решения проблемы с хранением и производительностью путем хранения ссылок в одном файле &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; . Когда ссылка отсутствует в традиционной иерархии каталогов &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; , она ищется в этом файле и используется, если найдена.</target>
        </trans-unit>
        <trans-unit id="43f707239bbecf8d6bf96bbdb4b367abb8fd5357" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git archive&lt;/code&gt; side, and the program pair is meant to be used to get an archive from a remote repository.</source>
          <target state="translated">Эта команда обычно не вызывается непосредственно конечным пользователем. Пользовательский интерфейс протокола находится на стороне &lt;code&gt;git archive&lt;/code&gt; , а программная пара предназначена для использования для получения архива из удаленного репозитория.</target>
        </trans-unit>
        <trans-unit id="17d67b43408b7b4804e33e1e3b79dc1fbf03af1b" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git fetch-pack&lt;/code&gt; side, and the program pair is meant to be used to pull updates from a remote repository. For push operations, see &lt;code&gt;git send-pack&lt;/code&gt;.</source>
          <target state="translated">Эта команда обычно не вызывается непосредственно конечным пользователем. Пользовательский интерфейс протокола находится на стороне &lt;code&gt;git fetch-pack&lt;/code&gt; , а программная пара предназначена для получения обновлений из удаленного репозитория. Информацию об операциях push см. В &lt;code&gt;git send-pack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36ac8b84f92c3cf141e5ae101adcc45178aae4c7" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git send-pack&lt;/code&gt; side, and the program pair is meant to be used to push updates to remote repository. For pull operations, see &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">Эта команда обычно не вызывается непосредственно конечным пользователем. Пользовательский интерфейс для протокола находится на стороне &lt;code&gt;git send-pack&lt;/code&gt; , а программная пара предназначена для использования для отправки обновлений в удаленный репозиторий. Для получения информации об операциях извлечения см. &lt;a href=&quot;git-fetch-pack&quot;&gt;Git-fetch-pack [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f8cac5b996748b602d2e8f0cf9273cee3d1c4d80" translate="yes" xml:space="preserve">
          <source>This command lets you check that intermediate commits are compilable. The todo list becomes like that:</source>
          <target state="translated">Эта команда позволяет проверить компилируемость промежуточных коммитов.Список todo становится таким:</target>
        </trans-unit>
        <trans-unit id="56bca57be11add071b8aeae38f6a28f443105856" translate="yes" xml:space="preserve">
          <source>This command manages the information recorded in the reflogs.</source>
          <target state="translated">Эта команда управляет информацией,записанной в рефлогах.</target>
        </trans-unit>
        <trans-unit id="7c7ebb85111dd101dc1c2782f6e5cbc235a39c44" translate="yes" xml:space="preserve">
          <source>This command provides a way to interact with p4 repositories using Git.</source>
          <target state="translated">Данная команда предоставляет способ взаимодействия с p4-репозиториями с помощью Git'а.</target>
        </trans-unit>
        <trans-unit id="637c92f99feb8b30861eeaee2e3273c64a9b5351" translate="yes" xml:space="preserve">
          <source>This command reads some patches or commit messages from either the &amp;lt;file&amp;gt; arguments or the standard input if no &amp;lt;file&amp;gt; is specified. If &lt;code&gt;--parse&lt;/code&gt; is specified, the output consists of the parsed trailers.</source>
          <target state="translated">Эта команда считывает некоторые исправления или сообщения фиксации либо из аргументов &amp;lt;file&amp;gt;, либо из стандартного ввода, если &amp;lt;file&amp;gt; не указан. Если &lt;code&gt;--parse&lt;/code&gt; , вывод состоит из проанализированных трейлеров.</target>
        </trans-unit>
        <trans-unit id="a38646d64359b52991af1358c674765acf2c0c11" translate="yes" xml:space="preserve">
          <source>This command should not list any commits. Otherwise, check out &lt;code&gt;master&lt;/code&gt; and merge &lt;code&gt;maint&lt;/code&gt; into it.</source>
          <target state="translated">В этой команде не должно быть никаких коммитов. В противном случае проверьте &lt;code&gt;master&lt;/code&gt; и &lt;code&gt;maint&lt;/code&gt; с ним maint .</target>
        </trans-unit>
        <trans-unit id="6a853b09f1818b9d32f936bd42aa8a84af13b068" translate="yes" xml:space="preserve">
          <source>This command shows the differences between two versions of a patch series, or more generally, two commit ranges (ignoring merge commits).</source>
          <target state="translated">Эта команда показывает различия между двумя версиями серии патчей,или,в более общем плане,между двумя диапазонами коммитов (игнорируя коммиты слияния).</target>
        </trans-unit>
        <trans-unit id="852903a68075d19a47d4520af94edde77996207f" translate="yes" xml:space="preserve">
          <source>This command stores credentials indefinitely on disk for use by future Git programs.</source>
          <target state="translated">Эта команда бессрочно хранит учетные данные на диске для использования будущими программами Git'а.</target>
        </trans-unit>
        <trans-unit id="d143bf10d727fe2f5d0639ed85e199dd448d8bd2" translate="yes" xml:space="preserve">
          <source>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.</source>
          <target state="translated">Эта команда обновляет индекс,используя текущее содержимое,найденное в рабочем дереве,для подготовки инсценировки содержимого к следующей фиксации.Обычно она добавляет текущее содержимое существующих путей в целом,но с некоторыми опциями она также может быть использована для добавления содержимого с применением только части изменений,внесённых в файлы рабочего дерева,или для удаления путей,которые больше не существуют в рабочем дереве.</target>
        </trans-unit>
        <trans-unit id="61eacd31ecbd262bdcbed11d9c6103318919d1be" translate="yes" xml:space="preserve">
          <source>This command uploads a mailbox generated with &lt;code&gt;git format-patch&lt;/code&gt; into an IMAP drafts folder. This allows patches to be sent as other email is when using mail clients that cannot read mailbox files directly. The command also works with any general mailbox in which emails have the fields &quot;From&quot;, &quot;Date&quot;, and &quot;Subject&quot; in that order.</source>
          <target state="translated">Эта команда загружает почтовый ящик, созданный с помощью &lt;code&gt;git format-patch&lt;/code&gt; , в папку черновиков IMAP. Это позволяет отправлять исправления, как и другие электронные письма, при использовании почтовых клиентов, которые не могут напрямую читать файлы почтовых ящиков. Команда также работает с любым обычным почтовым ящиком, в котором электронные письма имеют поля &amp;laquo;От&amp;raquo;, &amp;laquo;Дата&amp;raquo; и &amp;laquo;Тема&amp;raquo; в указанном порядке.</target>
        </trans-unit>
        <trans-unit id="a3bcbdfcf8f3a072ac23f24cf310648f9691fb70" translate="yes" xml:space="preserve">
          <source>This command uses a binary search algorithm to find which commit in your project&amp;rsquo;s history introduced a bug. You use it by first telling it a &quot;bad&quot; commit that is known to contain the bug, and a &quot;good&quot; commit that is known to be before the bug was introduced. Then &lt;code&gt;git
bisect&lt;/code&gt; picks a commit between those two endpoints and asks you whether the selected commit is &quot;good&quot; or &quot;bad&quot;. It continues narrowing down the range until it finds the exact commit that introduced the change.</source>
          <target state="translated">Эта команда использует алгоритм двоичного поиска, чтобы найти, какая фиксация в истории вашего проекта привела к ошибке. Вы используете его, сначала сообщая ему &amp;laquo;плохую&amp;raquo; фиксацию, которая, как известно, содержит ошибку, и &amp;laquo;хорошую&amp;raquo; фиксацию, которая, как известно, была сделана до появления ошибки. Затем &lt;code&gt;git bisect&lt;/code&gt; выбирает фиксацию между этими двумя конечными точками и спрашивает, является ли выбранная фиксация &amp;laquo;хорошей&amp;raquo; или &amp;laquo;плохой&amp;raquo;. Он продолжает сужать диапазон, пока не найдет точную фиксацию, которая внесла изменение.</target>
        </trans-unit>
        <trans-unit id="097f8af4b6f26b418927a5ca4b24d71746b1f843" translate="yes" xml:space="preserve">
          <source>This command uses the &lt;code&gt;diff.color.*&lt;/code&gt; and &lt;code&gt;pager.range-diff&lt;/code&gt; settings (the latter is on by default). See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Эта команда использует &lt;code&gt;diff.color.*&lt;/code&gt; И &lt;code&gt;pager.range-diff&lt;/code&gt; (последний включен по умолчанию). См. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="03bab6a03561ee7ff2e9bf92505bcdd5322bfb51" translate="yes" xml:space="preserve">
          <source>This command will fail with non-zero status upon error. Some exit codes are:</source>
          <target state="translated">Эта команда не будет работать с ненулевым статусом при ошибке.Некоторые коды выхода:</target>
        </trans-unit>
        <trans-unit id="7ed6af6e5518c122d94f4b8fea824fc7938bd5aa" translate="yes" xml:space="preserve">
          <source>This command will fetch changes from the remote branches to your remote-tracking branches &lt;code&gt;origin/*&lt;/code&gt;, and merge the default branch into the current branch.</source>
          <target state="translated">Эта команда извлечет изменения из удаленных ветвей в исходную &lt;code&gt;origin/*&lt;/code&gt; веток удаленного отслеживания и объединит ветвь по умолчанию с текущей веткой.</target>
        </trans-unit>
        <trans-unit id="99c24081605f25434a1fa0a51df82045bf4b7763" translate="yes" xml:space="preserve">
          <source>This command will save your changes away to the &lt;code&gt;stash&lt;/code&gt;, and reset your working tree and the index to match the tip of your current branch. Then you can make your fix as usual.</source>
          <target state="translated">Эта команда сохранит ваши изменения в &lt;code&gt;stash&lt;/code&gt; и сбросит ваше рабочее дерево и индекс, чтобы они соответствовали кончику вашей текущей ветки. Затем вы можете исправить это как обычно.</target>
        </trans-unit>
        <trans-unit id="cb41b9bb98cbe715b8d6c0b50eb0b52309cdc91a" translate="yes" xml:space="preserve">
          <source>This commit will get blown away so a throw-away log message is OK.</source>
          <target state="translated">Этот коммит будет взорван,так что бросаемое сообщение журнала будет в порядке.</target>
        </trans-unit>
        <trans-unit id="068d7057b3017084327709c3e61c2e224fb2a5f6" translate="yes" xml:space="preserve">
          <source>This commits all other changes in the index.</source>
          <target state="translated">Это фиксирует все остальные изменения в индексе.</target>
        </trans-unit>
        <trans-unit id="1d649ab8ff53024e7549864469811ccee0abf2e7" translate="yes" xml:space="preserve">
          <source>This commits your first edits in &lt;code&gt;branch1&lt;/code&gt;.</source>
          <target state="translated">Это фиксирует ваши первые правки в &lt;code&gt;branch1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8bc13c84a009ea0d6abb173ac6100dc00ae7606a" translate="yes" xml:space="preserve">
          <source>This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way &lt;code&gt;diff-tree&lt;/code&gt; shows a merge commit with these flags.</source>
          <target state="translated">Это сравнивает этап 2 (наша ветка), этап 3 (их ветвь) и файл рабочего дерева и выводит комбинированный diff, аналогично тому, как &lt;code&gt;diff-tree&lt;/code&gt; показывает фиксацию слияния с этими флагами.</target>
        </trans-unit>
        <trans-unit id="d3fe164a17e549b712f12743eb90dc676fb8455c" translate="yes" xml:space="preserve">
          <source>This computation involves traversing all the reachable objects, i.e. it has the same cost as &lt;code&gt;git prune&lt;/code&gt;. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn&amp;rsquo;t protect objects referred to by reflogs.</source>
          <target state="translated">Это вычисление включает в себя обход всех доступных объектов, то есть имеет ту же стоимость, что и &lt;code&gt;git prune&lt;/code&gt; . В первую очередь он предназначен для исправления повреждений, вызванных сборкой мусора с использованием более старых версий Git, которые не защищали объекты, на которые ссылаются журналы рефлогов.</target>
        </trans-unit>
        <trans-unit id="241f3360b1ffda93090a6212a837542c91b1e09e" translate="yes" xml:space="preserve">
          <source>This config option controls whether or not the given &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; runs during a &lt;code&gt;git maintenance run --schedule=&amp;lt;frequency&amp;gt;&lt;/code&gt; command. The value must be one of &quot;hourly&quot;, &quot;daily&quot;, or &quot;weekly&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7c3905269f2318ce8a27a07b91b053d9dd7129" translate="yes" xml:space="preserve">
          <source>This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple &lt;code&gt;--[no-]notes[=]&lt;/code&gt; options passed in. That is, a value of &lt;code&gt;true&lt;/code&gt; will show the default notes, a value of &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; will also show notes from that notes ref and a value of &lt;code&gt;false&lt;/code&gt; will negate previous configurations and not show notes.</source>
          <target state="translated">Эту конфигурацию можно указать несколько раз, чтобы можно было включить несколько ссылок на заметки. В этом случае он будет вести себя так же, как и несколько переданных опций &lt;code&gt;--[no-]notes[=]&lt;/code&gt; . То есть, значение &lt;code&gt;true&lt;/code&gt; будет отображать заметки по умолчанию, значение &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; также покажет заметки из этих заметок ref и значение &lt;code&gt;false&lt;/code&gt; аннулируют предыдущие конфигурации и не отображают заметки.</target>
        </trans-unit>
        <trans-unit id="0675827ca8d724102e17a053585b958058551f3d" translate="yes" xml:space="preserve">
          <source>This configuration doesn&amp;rsquo;t have any effect on authenticating to remote services; for that, see &lt;code&gt;credential.username&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6aa4372bde5e931f9e4e006e5a3cd0aea5ccf17" translate="yes" xml:space="preserve">
          <source>This configuration is used in two ways:</source>
          <target state="translated">Эта конфигурация используется двумя способами:</target>
        </trans-unit>
        <trans-unit id="06f31556dacb48424e7a1be662dd26364f785ce9" translate="yes" xml:space="preserve">
          <source>This configuration variable is useful in cases where you&amp;rsquo;d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an &lt;code&gt;init.templateDir&lt;/code&gt; where you&amp;rsquo;ve changed default hooks.</source>
          <target state="translated">Эта переменная конфигурации полезна в тех случаях, когда вы хотите централизованно настраивать хуки Git, а не настраивать их для каждого репозитория, или в качестве более гибкой и централизованной альтернативы &lt;code&gt;init.templateDir&lt;/code&gt; , где вы изменили хуки по умолчанию. ,</target>
        </trans-unit>
        <trans-unit id="eed4a11499740f4bb5f61d3ce7354c5409f33bf3" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. It can be set by the &lt;code&gt;diff.colorMovedWS&lt;/code&gt; configuration setting. These modes can be given as a comma separated list:</source>
          <target state="translated">Это настраивает, как пропуски игнорируются при выполнении обнаружения перемещения для &lt;code&gt;--color-moved&lt;/code&gt; move . Его можно установить с помощью &lt;code&gt;diff.colorMovedWS&lt;/code&gt; конфигурации diff.colorMovedWS . Эти режимы можно указать в виде списка, разделенного запятыми:</target>
        </trans-unit>
        <trans-unit id="9b4ea1fd788cef298d939e77017eddec04b80461" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. These modes can be given as a comma separated list:</source>
          <target state="translated">Это настраивает, как пропуски игнорируются при выполнении обнаружения перемещения для &lt;code&gt;--color-moved&lt;/code&gt; move . Эти режимы можно указать в виде списка, разделенного запятыми:</target>
        </trans-unit>
        <trans-unit id="77030a3f3e0bddf7aada34bc0939552bc0993e3c" translate="yes" xml:space="preserve">
          <source>This counts the number of unpacked object files and disk space consumed by them, to help you decide when it is a good time to repack.</source>
          <target state="translated">Это подсчитывает количество распакованных объектных файлов и потребляемое ими дисковое пространство,чтобы помочь вам решить,когда наступит подходящее время для переупаковки.</target>
        </trans-unit>
        <trans-unit id="3e67b0f2a3d6f811dcdec6a80edd2cc8d01b0b6b" translate="yes" xml:space="preserve">
          <source>This creates a &quot;lightweight&quot; tag. If you would also like to include a comment with the tag, and possibly sign it cryptographically, then you should create a tag object instead; see the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">Это создает &amp;laquo;легкий&amp;raquo; тег. Если вы также хотите включить комментарий с тегом и, возможно, подписать его криптографически, вам следует вместо этого создать объект тега; подробности см. на странице руководства &lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="687e61032de29ec5a828bf99d3854a432acd2a82" translate="yes" xml:space="preserve">
          <source>This creates a new directory &quot;myrepo&quot; containing a clone of Alice&amp;rsquo;s repository. The clone is on an equal footing with the original project, possessing its own copy of the original project&amp;rsquo;s history.</source>
          <target state="translated">Это создает новый каталог myrepo, содержащий клон репозитория Алисы. Клон находится на равных с исходным проектом, имея собственную копию истории исходного проекта.</target>
        </trans-unit>
        <trans-unit id="c2fd84fc2fa04021fed2cadb8707ca64b05a22fb" translate="yes" xml:space="preserve">
          <source>This creates a single &quot;pack file&quot; in .git/objects/pack/ containing all currently unpacked objects. You can then run</source>
          <target state="translated">При этом создаётся один &quot;пакетный файл&quot; в .git/объекты/пакеты/,содержащий все распакованные в данный момент объекты.Затем вы можете запустить</target>
        </trans-unit>
        <trans-unit id="bf43931e74b20a3da5197ed923f890fe71d72016" translate="yes" xml:space="preserve">
          <source>This default configuration is achieved by creating references to the remote branch heads under &lt;code&gt;refs/remotes/origin&lt;/code&gt; and by initializing &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables.</source>
          <target state="translated">Эта конфигурация по умолчанию достигается путем создания ссылок на &lt;code&gt;remote.origin.url&lt;/code&gt; &lt;code&gt;remote.origin.fetch&lt;/code&gt; веток в каталоге &lt;code&gt;refs/remotes/origin&lt;/code&gt; и инициализации переменных конфигурации remote.origin.url и remote.origin.fetch .</target>
        </trans-unit>
        <trans-unit id="984768ad68337dfe2b0015e657c9f4f069afabc8" translate="yes" xml:space="preserve">
          <source>This defines two submodules, &lt;code&gt;libfoo&lt;/code&gt; and &lt;code&gt;libbar&lt;/code&gt;. These are expected to be checked out in the paths &lt;code&gt;include/foo&lt;/code&gt; and &lt;code&gt;include/bar&lt;/code&gt;, and for both submodules a URL is specified which can be used for cloning the submodules.</source>
          <target state="translated">Это определяет два подмодуля, &lt;code&gt;libfoo&lt;/code&gt; и &lt;code&gt;libbar&lt;/code&gt; . Ожидается, что они будут извлечены по путям &lt;code&gt;include/foo&lt;/code&gt; и &lt;code&gt;include/bar&lt;/code&gt; , и для обоих подмодулей указан URL-адрес, который можно использовать для клонирования подмодулей.</target>
        </trans-unit>
        <trans-unit id="57db5304522b1070a0df1071ce5df5d38ea7d002" translate="yes" xml:space="preserve">
          <source>This describes how Tony Luck uses Git in his role as maintainer of the IA64 architecture for the Linux kernel.</source>
          <target state="translated">Здесь описывается,как Тони Лак (Tony Luck)использует Git в качестве сопровождающего архитектуры IA64 для ядра Linux.</target>
        </trans-unit>
        <trans-unit id="c9e275f2996b22cd4415c594fae8f08a0dfe70e8" translate="yes" xml:space="preserve">
          <source>This determines the coloring scheme to be applied to blame output. It can be &lt;code&gt;repeatedLines&lt;/code&gt;, &lt;code&gt;highlightRecent&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; which is the default.</source>
          <target state="translated">Это определяет схему окраски, которая будет применяться к выводу обвинений. Это может быть &lt;code&gt;repeatedLines&lt;/code&gt; , &lt;code&gt;highlightRecent&lt;/code&gt; или &lt;code&gt;none&lt;/code&gt; (по умолчанию).</target>
        </trans-unit>
        <trans-unit id="56ee29b22f07db9306c3380b74b5b0180828e415" translate="yes" xml:space="preserve">
          <source>This directory is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/objects&quot; will be used instead.</source>
          <target state="translated">Этот каталог игнорируется,если установлен $GIT_COMMON_DIR и вместо него будет использоваться &quot;$GIT_COMMON_DIR/объекты&quot;.</target>
        </trans-unit>
        <trans-unit id="2072b137cd96280de0e098678b51f23a76dcd0dc" translate="yes" xml:space="preserve">
          <source>This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients. Set this option to &quot;false&quot; if you track a SVN repository with many empty blobs that are not symlinks. This option may be changed while &lt;code&gt;git svn&lt;/code&gt; is running and take effect on the next revision fetched. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">Это отключает потенциально дорогостоящие проверки обхода неработающих символических ссылок, проверенных в SVN сломанными клиентами. Установите для этого параметра значение &amp;laquo;false&amp;raquo;, если вы отслеживаете репозиторий SVN с большим количеством пустых блобов, не являющихся символическими ссылками. Этот параметр может быть изменен во время работы &lt;code&gt;git svn&lt;/code&gt; и вступит в силу при выборе следующей ревизии. Если не задано, &lt;code&gt;git svn&lt;/code&gt; предполагает, что этот параметр установлен как &quot;true&quot;.</target>
        </trans-unit>
        <trans-unit id="006e62625e60aabc7f31fa591f6f9b4a3bd2a878" translate="yes" xml:space="preserve">
          <source>This document attempts to write down and motivate some of the workflow elements used for &lt;code&gt;git.git&lt;/code&gt; itself. Many ideas apply in general, though the full workflow is rarely required for smaller projects with fewer people involved.</source>
          <target state="translated">Этот документ пытается записать и мотивировать некоторые элементы рабочего процесса, используемые для самого &lt;code&gt;git.git&lt;/code&gt; . Многие идеи применимы в целом, хотя полный рабочий процесс редко требуется для небольших проектов с меньшим количеством людей.</target>
        </trans-unit>
        <trans-unit id="8cd9193645885514540ac19f3167f508bebca422" translate="yes" xml:space="preserve">
          <source>This document presents a specification for a version 2 of Git&amp;rsquo;s wire protocol. Protocol v2 will improve upon v1 in the following ways:</source>
          <target state="translated">В этом документе представлена ​​спецификация для версии 2 сетевого протокола Git. Протокол v2 улучшит версию v1 следующим образом:</target>
        </trans-unit>
        <trans-unit id="46bd1a26c48d1772be26d3d869cc4b6544004ea1" translate="yes" xml:space="preserve">
          <source>This document shows the &quot;raw&quot; syntax as seen by git. The shell and other UIs might require additional quoting to protect special characters and to avoid word splitting.</source>
          <target state="translated">Этот документ показывает &quot;сырой&quot; синтаксис,как его видит git.Оболочка и другие пользовательские интерфейсы могут потребовать дополнительного цитирования для защиты специальных символов и во избежание разделения слов.</target>
        </trans-unit>
        <trans-unit id="a76f8971dde9f8810b677765aca0d70490d9f8fa" translate="yes" xml:space="preserve">
          <source>This document will serve as the master list for extensions. Any implementation wishing to define a new extension should make a note of it here, in order to claim the name.</source>
          <target state="translated">Этот документ будет служить основным списком расширений.Любая реализация,желающая определить новое расширение,должна сделать пометку об этом здесь,чтобы заявить о своем названии.</target>
        </trans-unit>
        <trans-unit id="d24a591988945bec7d040b25bd5a37c73014bcf3" translate="yes" xml:space="preserve">
          <source>This does not affect &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; or the &lt;code&gt;git-diff-*&lt;/code&gt; plumbing commands. Can be overridden on the command line with the &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; option.</source>
          <target state="translated">Это не влияет на &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt; или команды &lt;code&gt;git-diff-*&lt;/code&gt; plumbing. Можно переопределить в командной строке с помощью параметра &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99af460532d2c9f72e65ed17f7464c8aa563e1f4" translate="yes" xml:space="preserve">
          <source>This does not force normalization of text files, but does ensure that text files that you introduce to the repository have their line endings normalized to LF when they are added, and that files that are already normalized in the repository stay normalized.</source>
          <target state="translated">Это не приводит к нормализации текстовых файлов,но гарантирует,что текстовые файлы,которые вы вводите в репозиторий,имеют нормализованные окончания строк,нормализованные к LF,когда они добавляются,и что файлы,которые уже нормализованы в репозитории,остаются нормализованными.</target>
        </trans-unit>
        <trans-unit id="257328db317fb853114a41f8430f87cd826d08a0" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else&amp;rsquo;s local Git repository, either don&amp;rsquo;t use this option or you should both use it in the same local time zone.</source>
          <target state="translated">Это не мешает взаимодействию с репозиторием Subversion, из которого вы клонировали, но если вы хотите, чтобы ваш локальный репозиторий Git мог взаимодействовать с чьим-либо локальным репозиторием Git, либо не используйте эту опцию, либо вы оба должны использовать ее в тот же местный часовой пояс.</target>
        </trans-unit>
        <trans-unit id="45497ef8f3614492732f059c04bc30af3c6593e9" translate="yes" xml:space="preserve">
          <source>This effectively runs &lt;code&gt;add --interactive&lt;/code&gt;, but bypasses the initial command menu and directly jumps to the &lt;code&gt;patch&lt;/code&gt; subcommand. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">Это эффективно запускает &lt;code&gt;add --interactive&lt;/code&gt; , но обходит начальное меню команд и напрямую переходит к подкоманде &lt;code&gt;patch&lt;/code&gt; . Подробнее см. &amp;laquo;Интерактивный режим&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="53c54ba0465bbf9916ac436659dbf61aedb86156" translate="yes" xml:space="preserve">
          <source>This enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">Это позволяет выполнять родительскую перезапись, см. &lt;code&gt;History Simplification&lt;/code&gt; выше.</target>
        </trans-unit>
        <trans-unit id="ccdf590466d01d04dcf6da8ad6a6bec9f02c4d8e" translate="yes" xml:space="preserve">
          <source>This environment allows the specification of an alternate index file. If not specified, the default of &lt;code&gt;$GIT_DIR/index&lt;/code&gt; is used.</source>
          <target state="translated">Эта среда позволяет специфицировать альтернативный индексный файл. Если не указано, используется значение по умолчанию &lt;code&gt;$GIT_DIR/index&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2abd55a6650395bf249165e2f6568e98ab14958c" translate="yes" xml:space="preserve">
          <source>This environment variable allows the specification of an index version for new repositories. It won&amp;rsquo;t affect existing index files. By default index file version 2 or 3 is used. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; for more information.</source>
          <target state="translated">Эта переменная среды позволяет указать версию индекса для новых репозиториев. Это не повлияет на существующие индексные файлы. По умолчанию используется индексный файл версии 2 или 3. См. &lt;a href=&quot;git-update-index&quot;&gt;Git-update-index [1]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="2763e4fc7ba1973ac90184c067d20f9d0fda70a8" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$EDITOR&lt;/code&gt; and &lt;code&gt;$VISUAL&lt;/code&gt;. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; and the &lt;code&gt;core.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Эта переменная среды отменяет &lt;code&gt;$EDITOR&lt;/code&gt; и &lt;code&gt;$VISUAL&lt;/code&gt; . Он используется несколькими командами Git, когда в интерактивном режиме должен быть запущен редактор. См. Также &lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt; и параметр &lt;code&gt;core.editor&lt;/code&gt; в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ddbc158f0dcc3c8ea52494b42fbb66d15e06e460" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$PAGER&lt;/code&gt;. If it is set to an empty string or to the value &quot;cat&quot;, Git will not launch a pager. See also the &lt;code&gt;core.pager&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Эта переменная среды переопределяет &lt;code&gt;$PAGER&lt;/code&gt; . Если для него задана пустая строка или значение &amp;laquo;cat&amp;raquo;, Git не запустит пейджер. См. Также параметр &lt;code&gt;core.pager&lt;/code&gt; в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f82f561bc1110497edce7ce36b1651b7ef0d8603" translate="yes" xml:space="preserve">
          <source>This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and the &lt;code&gt;sequence.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b43d9b9e3f28d79e0c1169949e722bd8f10c35" translate="yes" xml:space="preserve">
          <source>This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also linkit::git-rebase[1] and the &lt;code&gt;sequence.editor&lt;/code&gt; option in linkit::git-config[1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ea93764f52eb3dcc477c86398962bd9bbded98" translate="yes" xml:space="preserve">
          <source>This event contains the command name for this git process and the hierarchy of commands from parent git processes.</source>
          <target state="translated">Это событие содержит имя команды для данного git-процесса и иерархию команд от родительских git-процессов.</target>
        </trans-unit>
        <trans-unit id="f5d9f72db5c7ffa9776d5c71964338d54a2515a4" translate="yes" xml:space="preserve">
          <source>This event contains the complete argv received by main().</source>
          <target state="translated">Это событие содержит полный аргумент,полученный функцией main().</target>
        </trans-unit>
        <trans-unit id="2a4c1f111536d47e2687ea692bfe5bd399b4307d" translate="yes" xml:space="preserve">
          <source>This event contains the discovered full path of the git executable (on platforms that are configured to resolve it).</source>
          <target state="translated">Это событие содержит обнаруженный полный путь исполняемого git-файла (на платформах,настроенных на его разрешение).</target>
        </trans-unit>
        <trans-unit id="c8af8dbf59abf700f44d6449c7c951b54692bd2e" translate="yes" xml:space="preserve">
          <source>This event defines a repo-id and associates it with the root of the worktree.</source>
          <target state="translated">Это событие определяет репоид и связывает его с корнем рабочего дерева.</target>
        </trans-unit>
        <trans-unit id="efbcacd1a490c688869fdd46397140e75919d7ab" translate="yes" xml:space="preserve">
          <source>This event describes a child process that is about to be spawned.</source>
          <target state="translated">Это событие описывает детский процесс,который вот-вот родится.</target>
        </trans-unit>
        <trans-unit id="8c8f935852467fd7c3b46787d77518dc3611a986" translate="yes" xml:space="preserve">
          <source>This event gives the version of the executable and the EVENT format. It should always be the first event in a trace session. The EVENT format version will be incremented if new event types are added, if existing fields are removed, or if there are significant changes in interpretation of existing events or fields. Smaller changes, such as adding a new field to an existing event, will not require an increment to the EVENT format version.</source>
          <target state="translated">Это событие дает версию исполняемого файла и формат EVENT.Это всегда должно быть первым событием в сеансе трассировки.Версия формата EVENT будет увеличиваться при добавлении новых типов событий,удалении существующих полей или значительных изменениях в интерпретации существующих событий или полей.Более мелкие изменения,такие как добавление нового поля к существующему событию,не потребуют приращения к версии формата EVENT.</target>
        </trans-unit>
        <trans-unit id="7ea085d0e611d87af89c62af2b70656c0016dc7e" translate="yes" xml:space="preserve">
          <source>This event is emitted by the Trace2 &lt;code&gt;atexit&lt;/code&gt; routine during final shutdown. It should be the last event emitted by the process.</source>
          <target state="translated">Это событие генерируется подпрограммой Trace2 &lt;code&gt;atexit&lt;/code&gt; во время окончательного выключения. Это должно быть последнее событие, выпущенное процессом.</target>
        </trans-unit>
        <trans-unit id="0b20979b7d0436896a9e4dd619b31c2f047cbd64" translate="yes" xml:space="preserve">
          <source>This event is emitted when git calls &lt;code&gt;exit()&lt;/code&gt;.</source>
          <target state="translated">Это событие генерируется, когда git вызывает &lt;code&gt;exit()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7857843019d5043272d37ee889b33f311c45158" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c63cb7135e802e553dc499a675da732d4f96c3a" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="translated">Это событие генерируется при вызове одной из функций &lt;code&gt;error()&lt;/code&gt; , &lt;code&gt;die()&lt;/code&gt; или &lt;code&gt;usage()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ebb8b872e605289564f67171a3133d84781ab210" translate="yes" xml:space="preserve">
          <source>This event is emitted when the program is terminated by a user signal. Depending on the platform, the signal event may prevent the &quot;atexit&quot; event from being generated.</source>
          <target state="translated">Это событие выдается при завершении программы по пользовательскому сигналу.В зависимости от платформы событие сигнала может препятствовать генерации события &quot;atexit&quot;.</target>
        </trans-unit>
        <trans-unit id="2ca8802f12c75856c4e7ea399ac7a1939e2a37eb" translate="yes" xml:space="preserve">
          <source>This event is generated after the current process has returned from the waitpid() and collected the exit information from the child.</source>
          <target state="translated">Это событие генерируется после того,как текущий процесс возвращается из функции waitpid()и собирает информацию о выходе из дочернего процесса.</target>
        </trans-unit>
        <trans-unit id="9fe6d803410a7d3a5cd4bc2114534352d230200b" translate="yes" xml:space="preserve">
          <source>This event is generated before git attempts to &lt;code&gt;exec()&lt;/code&gt; another command rather than starting a child process.</source>
          <target state="translated">Это событие генерируется до того, как git попытается выполнить &lt;code&gt;exec()&lt;/code&gt; другую команду вместо запуска дочернего процесса.</target>
        </trans-unit>
        <trans-unit id="93caa8939f471f1240286ec30c6905ef3996f20e" translate="yes" xml:space="preserve">
          <source>This event is generated if the &lt;code&gt;exec()&lt;/code&gt; fails and control returns to the current git command.</source>
          <target state="translated">Это событие генерируется, если &lt;code&gt;exec()&lt;/code&gt; терпит неудачу и управление возвращается текущей команде git.</target>
        </trans-unit>
        <trans-unit id="15a0b5629f08a42566247fd3e8af69adc717eef8" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter, such as a config setting, command-line flag, or environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814427d239ec02f31ac7bf0fb913766e18bfb53e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter.</source>
          <target state="translated">Это событие генерируется для регистрации глобального параметра.</target>
        </trans-unit>
        <trans-unit id="54b6cc61590e1e0eba249cc8ddd71ddff154355b" translate="yes" xml:space="preserve">
          <source>This event is generated to log a pre-formatted JSON string containing structured data.</source>
          <target state="translated">Это событие генерируется для записи в журнал предварительно отформатированной JSON-строки,содержащей структурированные данные.</target>
        </trans-unit>
        <trans-unit id="0ee97bbcf1fde0cf306363257efe6b7de578045e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a thread- and region-local key/value pair.</source>
          <target state="translated">Это событие генерируется для протоколирования пары нитевых и регионолокальных ключей/значений.</target>
        </trans-unit>
        <trans-unit id="4caa8d05330c9e1126d8391705e312b0d8975d63" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread exits. It is generated from &lt;strong&gt;within&lt;/strong&gt; the thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">Это событие генерируется при выходе из потока. Оно генерируется из &lt;strong&gt;внутри&lt;/strong&gt; нити-ргос в нити (по причинам TLS).</target>
        </trans-unit>
        <trans-unit id="eba565beaf1b2269c764c147f5196869afe38bce" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread is started. It is generated from &lt;strong&gt;within&lt;/strong&gt; the new thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">Это событие генерируется при запуске потока. Он генерируется &lt;strong&gt;изнутри&lt;/strong&gt; нового потока thread-proc (по причинам TLS).</target>
        </trans-unit>
        <trans-unit id="1684fe3e3862662b36c1dfb0c9bb20558e1f338a" translate="yes" xml:space="preserve">
          <source>This event is generated when entering a region.</source>
          <target state="translated">Это событие генерируется при входе в регион.</target>
        </trans-unit>
        <trans-unit id="809d72e4f54bac6c7054af4e990fa8c97e8c764d" translate="yes" xml:space="preserve">
          <source>This event is generated when leaving a region.</source>
          <target state="translated">Это событие генерируется при выезде из региона.</target>
        </trans-unit>
        <trans-unit id="1e6a7368deeb7ec580313fc82400f1c12d17672a" translate="yes" xml:space="preserve">
          <source>This event is present when an alias is expanded.</source>
          <target state="translated">Это событие происходит при расширении псевдонима.</target>
        </trans-unit>
        <trans-unit id="bca802363ffa9599d9e13df71e2f62ec1454e32f" translate="yes" xml:space="preserve">
          <source>This event is written to the git-trace2-discard sentinel file if there are too many files in the target trace directory (see the trace2.maxFiles config option).</source>
          <target state="translated">Это событие записывается в git-trace2-дисковый sendinel-файл,если в каталоге целевой трассы слишком много файлов (смотри опцию настройки trace2.maxFiles).</target>
        </trans-unit>
        <trans-unit id="8c2ad60a0d9356a6e908b18056fbac1c2b1d4129" translate="yes" xml:space="preserve">
          <source>This event, when present, describes the command variant This event may be emitted more than once.</source>
          <target state="translated">Данное событие,если оно присутствует,описывает вариант команды Данное событие может быть выдано несколько раз.</target>
        </trans-unit>
        <trans-unit id="3e7d09cee878b03064fb9d9484c73f3f00225826" translate="yes" xml:space="preserve">
          <source>This example also shows that thread names are assigned in a racy manner as each thread starts and allocates TLS storage.</source>
          <target state="translated">В данном примере также показано,что имена потоков назначаются в кратчайшие сроки по мере того,как каждый поток начинает и выделяет хранилище TLS.</target>
        </trans-unit>
        <trans-unit id="e296b28f1fcad64b66f85f9abe931f54fc5fbde0" translate="yes" xml:space="preserve">
          <source>This example imports a new remote &quot;p4/proj2&quot; into an existing Git repository:</source>
          <target state="translated">Этот пример импортирует новый удалённый &quot;p4/proj2&quot; в существующий Git-репозиторий:</target>
        </trans-unit>
        <trans-unit id="7cbbc9fac80d3f9e05217d26ad6f34ea5097abe6" translate="yes" xml:space="preserve">
          <source>This example shows that the index contained 3552 entries.</source>
          <target state="translated">Этот пример показывает,что индекс содержал 3552 записи.</target>
        </trans-unit>
        <trans-unit id="af5672891a1be21669d22b688901415e2cf060c3" translate="yes" xml:space="preserve">
          <source>This expands to the object name of the delta base for the given object, if it is stored as a delta. Otherwise it expands to the null object name (all zeroes).</source>
          <target state="translated">Это расширяется до имени объекта базы дельты для данного объекта,если он хранится как дельта.В противном случае оно расширяется до нулевого имени объекта (все нули).</target>
        </trans-unit>
        <trans-unit id="1a642986ccbacca12888668bff4ca6d3b1007b62" translate="yes" xml:space="preserve">
          <source>This explanation comes for &quot;free&quot; because there was no change. Similarly &lt;code&gt;C&lt;/code&gt; could be explained using &lt;code&gt;1&lt;/code&gt;, but that comes at some cost c&amp;gt;0 because of the modification:</source>
          <target state="translated">Это объяснение дано &amp;laquo;бесплатно&amp;raquo;, потому что не было изменений. Точно так же &lt;code&gt;C&lt;/code&gt; можно объяснить с помощью &lt;code&gt;1&lt;/code&gt; , но это требует некоторой стоимости c&amp;gt; 0 из-за модификации:</target>
        </trans-unit>
        <trans-unit id="86a0b58a904e042293eb0ea80455653f123e7d4e" translate="yes" xml:space="preserve">
          <source>This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.</source>
          <target state="translated">Этот расширенный формат может быть полезен при активном переименовании или обнаружении копирования,чтобы вы могли видеть оригинальное имя файла у разных родителей.</target>
        </trans-unit>
        <trans-unit id="fc95481325c82bdecdaa23291b735168b05af418" translate="yes" xml:space="preserve">
          <source>This extension does not change git&amp;rsquo;s behavior at all. It is useful only for testing format-1 compatibility.</source>
          <target state="translated">Это расширение вообще не меняет поведения git. Это полезно только для тестирования совместимости с форматом 1.</target>
        </trans-unit>
        <trans-unit id="24a20ccff9f7f9f91cdf61fb876086b44fc5be61" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis by setting repository&amp;rsquo;s &lt;code&gt;gitweb.pickaxe&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эту функцию можно настроить для каждого репозитория, установив переменную конфигурации репозитория &lt;code&gt;gitweb.pickaxe&lt;/code&gt; (логическое значение).</target>
        </trans-unit>
        <trans-unit id="3fcd9d965aa29d51e3ab01e56c522e086b7f545b" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.avatar&lt;/code&gt; configuration variable.</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.avatar&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da6908103a49ae5e820a33c13aadd5dfdd3e67a7" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.blame&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.blame&lt;/code&gt; (логическая).</target>
        </trans-unit>
        <trans-unit id="1d6d167abae14ab18966eab440f954ed6085f29c" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.grep&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.grep&lt;/code&gt; (логическое значение).</target>
        </trans-unit>
        <trans-unit id="dd4f802848cf6cbdc7682aeefb00472f2c444c9e" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.highlight&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.highlight&lt;/code&gt; (логическая).</target>
        </trans-unit>
        <trans-unit id="a8e82652b1c51e397e7f1e31621e9084d5611fda" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.patches&lt;/code&gt; configuration variable (integer).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.patches&lt;/code&gt; (целое число).</target>
        </trans-unit>
        <trans-unit id="a0528d6fc23cb2716835712f44b5daf955251062" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.remote_heads&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.remote_heads&lt;/code&gt; (логическая).</target>
        </trans-unit>
        <trans-unit id="58b983175f59d7aad97dac71b32251a2f4a8c4a0" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.showSizes&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.showSizes&lt;/code&gt; (логическая).</target>
        </trans-unit>
        <trans-unit id="ee33afe943a28f48529ed67cc410ad185ea09f23" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.snapshot&lt;/code&gt; configuration variable, which contains a comma separated list of formats or &quot;none&quot; to disable snapshots. Unknown values are ignored.</source>
          <target state="translated">Эта функция может быть настроена для каждого репозитория с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.snapshot&lt;/code&gt; , которая содержит список форматов, разделенных запятыми, или &amp;laquo;none&amp;raquo; для отключения моментальных снимков. Неизвестные значения игнорируются.</target>
        </trans-unit>
        <trans-unit id="c2467a6f49bad0810d0f5e1c4a51888ceb4f5b0f" translate="yes" xml:space="preserve">
          <source>This feature can be configured on per-repository basis after setting $feature{&lt;code&gt;extra-branch-refs&lt;/code&gt;}{&lt;code&gt;override&lt;/code&gt;} to true, via repository&amp;rsquo;s &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; configuration variable, which contains a space separated list of refs. An example:</source>
          <target state="translated">Эту функцию можно настроить для каждого репозитория после установки для $ feature { &lt;code&gt;extra-branch-refs&lt;/code&gt; } { &lt;code&gt;override&lt;/code&gt; } значения true с помощью переменной конфигурации репозитория &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; , которая содержит список ссылок , разделенных пробелами. Пример:</target>
        </trans-unit>
        <trans-unit id="83b4612ad81d70c9ed8920a4b451b69b8c3ee080" translate="yes" xml:space="preserve">
          <source>This feature is intended to speed up git operations for repos that have large working directories.</source>
          <target state="translated">Данная функция предназначена для ускорения git-операций для репозиториев с большими рабочими директориями.</target>
        </trans-unit>
        <trans-unit id="6b24b487d6d9654020073f6754733ecc051175ad" translate="yes" xml:space="preserve">
          <source>This feature is semi-deprecated. For scripting purpose, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--porcelain&lt;/code&gt; and &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; are almost always superior alternatives, and users should look at &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--short&lt;/code&gt; or &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; for more user-friendly alternatives.</source>
          <target state="translated">Эта функция частично устарела. Для сценариев &lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--porcelain&lt;/code&gt; и &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1] &lt;/a&gt; &lt;code&gt;--name-status&lt;/code&gt; почти всегда являются &lt;code&gt;--short&lt;/code&gt; альтернативами, и пользователям следует смотреть на &lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt;--short или &lt;a href=&quot;git-diff&quot;&gt;git- diff [1] &lt;/a&gt; &lt;code&gt;--name-status&lt;/code&gt; для более удобных альтернатив.</target>
        </trans-unit>
        <trans-unit id="0861edc399d3214fad2ecef2c8c7d8f9e28b4564" translate="yes" xml:space="preserve">
          <source>This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</source>
          <target state="translated">Эта возможность полезна,когда созданный проект должен быть принят,несмотря на ранние коммиты,содержащие ошибки,которые можно безопасно проигнорировать,такие как недействительные адреса электронной почты коммиттера.Замечание:повреждённые объекты нельзя пропустить с помощью этой настройки.</target>
        </trans-unit>
        <trans-unit id="5474f37d061902594342fbe38be401770ea2769f" translate="yes" xml:space="preserve">
          <source>This feature works by recording the mtime of the working tree directories and then omitting reading directories and stat calls against files in those directories whose mtime hasn&amp;rsquo;t changed. For this to work the underlying operating system and file system must change the &lt;code&gt;st_mtime&lt;/code&gt; field of directories if files in the directory are added, modified or deleted.</source>
          <target state="translated">Эта функция работает, записывая mtime каталогов рабочего дерева и затем пропуская чтение каталогов и вызовы stat для файлов в тех каталогах, mtime которых не изменилось. Чтобы это работало, базовая операционная система и файловая система должны изменить поле &lt;code&gt;st_mtime&lt;/code&gt; каталогов, если файлы в каталоге добавляются, изменяются или удаляются.</target>
        </trans-unit>
        <trans-unit id="ef2541ade640bd800921de0e87cda6dd56d4d5f6" translate="yes" xml:space="preserve">
          <source>This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it.</source>
          <target state="translated">Это извлекает ревизии из родителя SVN текущего HEAD и перезапускает текущую (не привязанную к SVN)работу против нее.</target>
        </trans-unit>
        <trans-unit id="e6f84c5c8c6a08793025b9538660cbd1c1faa637" translate="yes" xml:space="preserve">
          <source>This file contains the commit message of a commit in progress. If &lt;code&gt;git commit&lt;/code&gt; exits due to an error before creating a commit, any commit message that has been provided by the user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">Этот файл содержит сообщение о выполнении фиксации. Если &lt;code&gt;git commit&lt;/code&gt; завершается из-за ошибки перед созданием фиксации, любое сообщение о фиксации, предоставленное пользователем (например, в сеансе редактора), будет доступно в этом файле, но будет перезаписано при следующем вызове &lt;code&gt;git commit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2063696fd909d95d720efff6859f2846f7a33789" translate="yes" xml:space="preserve">
          <source>This file helps dumb transports discover what refs are available in this repository. If the repository is published for dumb transports, this file should be regenerated by &lt;code&gt;git update-server-info&lt;/code&gt; every time a tag or branch is created or modified. This is normally done from the &lt;code&gt;hooks/update&lt;/code&gt; hook, which is run by the &lt;code&gt;git-receive-pack&lt;/code&gt; command when you &lt;code&gt;git push&lt;/code&gt; into the repository.</source>
          <target state="translated">Этот файл помогает немым транспортам обнаружить, какие ссылки доступны в этом репозитории. Если репозиторий публикуется для немого транспорта, этот файл следует повторно создавать с помощью &lt;code&gt;git update-server-info&lt;/code&gt; каждый раз, когда создается или изменяется тег или ветка. Обычно это делается с помощью &lt;code&gt;hooks/update&lt;/code&gt; , которые запускаются командой &lt;code&gt;git-receive-pack&lt;/code&gt; , когда вы &lt;code&gt;git push&lt;/code&gt; в репозиторий.</target>
        </trans-unit>
        <trans-unit id="3487083c7b98c66e39acc8f940f40c0e9ceac88f" translate="yes" xml:space="preserve">
          <source>This file is to help dumb transports discover what packs are available in this object store. Whenever a pack is added or removed, &lt;code&gt;git update-server-info&lt;/code&gt; should be run to keep this file up to date if the repository is published for dumb transports. &lt;code&gt;git repack&lt;/code&gt; does this by default.</source>
          <target state="translated">Этот файл помогает немым транспортным средствам обнаружить, какие пакеты доступны в этом хранилище объектов. Каждый раз, когда пакет добавляется или удаляется, следует запускать &lt;code&gt;git update-server-info&lt;/code&gt; , чтобы поддерживать этот файл в актуальном состоянии, если репозиторий публикуется для немых транспортов. &lt;code&gt;git repack&lt;/code&gt; делает это по умолчанию.</target>
        </trans-unit>
        <trans-unit id="cbe65e34529f44f10bf3c4bc531b3ef1a1689dfb" translate="yes" xml:space="preserve">
          <source>This file mainly serves as the mapping between the name and path of submodules in the superproject, such that the submodule&amp;rsquo;s Git directory can be located.</source>
          <target state="translated">Этот файл в основном служит отображением между именем и путем к подмодулям в суперпроекте, так что можно найти каталог Git подмодуля.</target>
        </trans-unit>
        <trans-unit id="071050e2544b6fc3703fb63508bbfdc9243b46ab" translate="yes" xml:space="preserve">
          <source>This file records URLs to alternate object stores that this object store borrows objects from, to be used when the repository is fetched over HTTP.</source>
          <target state="translated">Этот файл записывает URL-адреса для альтернативных хранилищ объектов,из которых этот объект хранит заимствованные объекты,для использования,когда репозиторий получается по HTTP.</target>
        </trans-unit>
        <trans-unit id="cc3397ff622f0d4d27f532099612807583041388" translate="yes" xml:space="preserve">
          <source>This file records fake commit ancestry information, to pretend the set of parents a commit has is different from how the commit was actually created. One record per line describes a commit and its fake parents by listing their 40-byte hexadecimal object names separated by a space and terminated by a newline.</source>
          <target state="translated">Этот файл записывает фальшивую информацию о предках коммита,чтобы сделать вид,что набор родителей у коммита отличается от того,как коммит был на самом деле создан.Одна запись в строке описывает коммит и его фальшивых родителей,перечисляя их 40-байтные шестнадцатеричные имена объектов,разделенные пробелом и завершенные новой строкой.</target>
        </trans-unit>
        <trans-unit id="1873ba1c652fc3e8dae8a41ecd45dff2c995baaf" translate="yes" xml:space="preserve">
          <source>This file records paths to alternate object stores that this object store borrows objects from, one pathname per line. Note that not only native Git tools use it locally, but the HTTP fetcher also tries to use it remotely; this will usually work if you have relative paths (relative to the object database, not to the repository!) in your alternates file, but it will not work if you use absolute paths unless the absolute path in filesystem and web URL is the same. See also &lt;code&gt;objects/info/http-alternates&lt;/code&gt;.</source>
          <target state="translated">В этом файле записываются пути к альтернативным хранилищам объектов, из которых это хранилище объектов заимствует объекты, по одному пути на строку. Обратите внимание, что не только собственные инструменты Git используют его локально, но и сборщик HTTP также пытается использовать его удаленно; это обычно работает, если у вас есть относительные пути (относительно базы данных объектов, а не к репозиторию!) в вашем альтернативном файле, но это не будет работать, если вы используете абсолютные пути, если абсолютный путь в файловой системе и веб-URL не совпадает. См. Также &lt;code&gt;objects/info/http-alternates&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="517ab2689bb34239adf0b92ebb2a70e736956866" translate="yes" xml:space="preserve">
          <source>This file stores sparse checkout patterns. See also: &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt;.</source>
          <target state="translated">В этом файле хранятся разреженные шаблоны оформления заказа. См. Также: &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="39e8ca5394d81b30bccd145a749de9346fba2480" translate="yes" xml:space="preserve">
          <source>This file uses the following format:</source>
          <target state="translated">Этот файл использует следующий формат:</target>
        </trans-unit>
        <trans-unit id="53c1d1d0fe83b95fe57b9ac9f6f59413589df721" translate="yes" xml:space="preserve">
          <source>This file, by convention among Porcelains, stores the exclude pattern list. &lt;code&gt;.gitignore&lt;/code&gt; is the per-directory ignore file. &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt; and &lt;code&gt;git clean&lt;/code&gt; look at it but the core Git commands do not look at it. See also: &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;.</source>
          <target state="translated">Этот файл, по соглашению среди Porcelains, хранит список исключаемых шаблонов. &lt;code&gt;.gitignore&lt;/code&gt; - это файл игнорирования для каждого каталога. &lt;code&gt;git status&lt;/code&gt; , &lt;code&gt;git add&lt;/code&gt; , &lt;code&gt;git rm&lt;/code&gt; и &lt;code&gt;git clean&lt;/code&gt; смотрят на него, но основные команды Git на него не смотрят. См. Также: &lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d8956b9fdca3244ff8cd9467aefdc82ab275d878" translate="yes" xml:space="preserve">
          <source>This filter may be used if you only need to modify the environment in which the commit will be performed. Specifically, you might want to rewrite the author/committer name/email/time environment variables (see &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for details).</source>
          <target state="translated">Этот фильтр можно использовать, если вам нужно только изменить среду, в которой будет выполняться фиксация. В частности, вы можете захотеть переписать переменные среды имени автора / коммиттера / адреса электронной почты / времени (подробности см. В &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1f7d9b6979d573a6d61c7fc37aef6ce7f09ba079" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;code&gt;git diff-tree --stdin&lt;/code&gt; to also show the commit message before the differences.</source>
          <target state="translated">Этот флаг заставляет &lt;code&gt;git diff-tree --stdin&lt;/code&gt; также показывать сообщение о фиксации перед различиями.</target>
        </trans-unit>
        <trans-unit id="f18c1480999d4a64a19b051751a1dfdb3d01c394" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed.</source>
          <target state="translated">Этот флаг приводит к тому,что объект,уже находящийся в локальном пакете,который имеет файл .keep,будет проигнорирован,даже если он был бы упакован в противном случае.</target>
        </trans-unit>
        <trans-unit id="3b2c5aa43d85ae95c70f7126e1a8d471a0247285" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a pack to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">Этот флаг приводит к тому,что объект,уже находящийся в пакете,игнорируется,даже если в противном случае он был бы упакован.</target>
        </trans-unit>
        <trans-unit id="936ccdd465b71c76f59e3d7929f0e31e3a24c431" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in the given pack to be ignored, even if it would have otherwise been packed. &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; is the pack file name without leading directory (e.g. &lt;code&gt;pack-123.pack&lt;/code&gt;). The option could be specified multiple times to keep multiple packs.</source>
          <target state="translated">Этот флаг заставляет игнорировать объект, уже находящийся в данном пакете, даже если в противном случае он был бы упакован. &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; - это имя файла пакета без ведущего каталога (например, &lt;code&gt;pack-123.pack&lt;/code&gt; ). Опция может быть указана несколько раз, чтобы хранить несколько пакетов.</target>
        </trans-unit>
        <trans-unit id="9fad47cb9db9729fbeb177e82626a6322dbefd6c" translate="yes" xml:space="preserve">
          <source>This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">Этот флаг приводит к тому,что объект,заимствованный из альтернативного хранилища объектов,игнорируется,даже если в противном случае он был бы упакован.</target>
        </trans-unit>
        <trans-unit id="97fddffea713eaa9774ecf695b0619f959916c25" translate="yes" xml:space="preserve">
          <source>This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when -c or --cc are specified, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).</source>
          <target state="translated">Этот флаг вызывает комбинированные различия (используемые для фиксации слияния),чтобы перечислить имя файла от всех родителей.Таким образом,он действует только при указании -c или --cc,и,вероятно,полезен только в случае обнаружения изменения имени файла (т.е.при запросе переименования или обнаружения копирования).</target>
        </trans-unit>
        <trans-unit id="7d04699c745135d6f14712a3d65005478838c3a7" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one &amp;lt;tree-ish&amp;gt;, or &lt;code&gt;--stdin&lt;/code&gt;). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the &lt;code&gt;-m&lt;/code&gt; option does). Furthermore, it lists only files which were modified from all parents.</source>
          <target state="translated">Этот флаг изменяет способ отображения фиксации слияния (что означает, что он полезен только тогда, когда команде задано одно &amp;lt;tree-ish&amp;gt; или &lt;code&gt;--stdin&lt;/code&gt; ). Он показывает различия для каждого из родителей в результате слияния одновременно, вместо того, чтобы показывать попарные различия между родительским элементом и результатом по одному (что и делает параметр &lt;code&gt;-m&lt;/code&gt; ). Кроме того, в нем перечислены только файлы, которые были изменены всеми родителями.</target>
        </trans-unit>
        <trans-unit id="0d503f20848f4e1ff6c5e78038f4bce28f3422a3" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit patch is displayed, in a similar way to the &lt;code&gt;-c&lt;/code&gt; option. It implies the &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other &quot;empty diff&quot; case.</source>
          <target state="translated">Этот флаг изменяет способ отображения патча фиксации слияния аналогично параметру &lt;code&gt;-c&lt;/code&gt; . Он подразумевает параметры &lt;code&gt;-c&lt;/code&gt; и &lt;code&gt;-p&lt;/code&gt; и дополнительно сжимает вывод патча, опуская неинтересные блоки, содержимое которых в родительских файлах имеет только два варианта, а результат слияния выбирает один из них без изменений. Когда все блоки неинтересны, сама фиксация и сообщение журнала фиксации не отображаются, как и в любом другом случае &amp;laquo;пустого сравнения&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="4835250d6cbee97633146544cd1896afcc631099" translate="yes" xml:space="preserve">
          <source>This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</source>
          <target state="translated">Этот флаг отключает эти проверки и может привести к потере коммитов в удалённом репозитории;используйте его с осторожностью.</target>
        </trans-unit>
        <trans-unit id="cc5f19786a1b0eda7705eaaa80c372612ab5d782" translate="yes" xml:space="preserve">
          <source>This flag implies the &lt;code&gt;-c&lt;/code&gt; option and further compresses the patch output by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification.</source>
          <target state="translated">Этот флаг подразумевает параметр &lt;code&gt;-c&lt;/code&gt; и дополнительно сжимает вывод патча, опуская неинтересные блоки, содержимое которых в родительских файлах имеет только два варианта, и результат слияния выбирает один из них без изменений.</target>
        </trans-unit>
        <trans-unit id="03d7872e2a4e991418dc3ea26303b414cb645f27" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch. Implies --apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9f2e241df42ed566896490c4c1723461343597" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git log&lt;/code&gt; program (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;) that generates the patches.</source>
          <target state="translated">Этот флаг передается программе &lt;code&gt;git log&lt;/code&gt; (см. &lt;a href=&quot;git-log&quot;&gt;Git-log [1]&lt;/a&gt; ), которая генерирует исправления.</target>
        </trans-unit>
        <trans-unit id="7d74132f018d1e29c74648fc0cf6690a80cd700b" translate="yes" xml:space="preserve">
          <source>This flag makes the command not to report its progress on the standard error stream.</source>
          <target state="translated">Этот флаг заставляет команду не сообщать о своем прогрессе в стандартном потоке ошибок.</target>
        </trans-unit>
        <trans-unit id="c7300f914a6246e85c4558f9e03e3ac6bd2957c2" translate="yes" xml:space="preserve">
          <source>This flag makes the merge commits show the full diff like regular commits; for each merge parent, a separate log entry and diff is generated. An exception is that only diff against the first parent is shown when &lt;code&gt;--first-parent&lt;/code&gt; option is given; in that case, the output represents the changes the merge brought &lt;code&gt;into&lt;/code&gt; the then-current branch.</source>
          <target state="translated">Этот флаг заставляет коммиты слияния отображать полную разницу, как при обычных коммитах; для каждого родителя слияния создается отдельная запись журнала и разница. Исключением является то, что при &lt;code&gt;--first-parent&lt;/code&gt; опции --first-parent отображается только сравнение с первым родителем ; в этом случае вывод представляет изменения, внесенные слиянием &lt;code&gt;into&lt;/code&gt; текущую ветвь.</target>
        </trans-unit>
        <trans-unit id="824f1a5cbd322eac2edc9b61691e0afb5fb06c7c" translate="yes" xml:space="preserve">
          <source>This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired.</source>
          <target state="translated">Этот флаг говорит команде не использовать данные существующего объекта повторно вообще,в том числе и неисключенные объекты,заставляя все перекомпрессировать.Это подразумевает --нет повторного использования-дельта.Полезен только в непонятном случае,когда требуется оптовое применение другого уровня компрессии на упакованных данных.</target>
        </trans-unit>
        <trans-unit id="e554d11fed47fbadc588fbbd426a692640350799" translate="yes" xml:space="preserve">
          <source>This form can only be used in the middle of a &lt;code&gt;commit&lt;/code&gt;. The path names a directory entry within fast-import&amp;rsquo;s active commit. The path must be quoted in this case.</source>
          <target state="translated">Эту форму можно использовать только в середине &lt;code&gt;commit&lt;/code&gt; . Путь обозначает запись каталога в активной фиксации быстрого импорта. В этом случае путь должен быть указан.</target>
        </trans-unit>
        <trans-unit id="55cd46dfe4dc47146eb359f16ba2ab6440f5d33b" translate="yes" xml:space="preserve">
          <source>This form is to compare the given two paths on the filesystem. You can omit the &lt;code&gt;--no-index&lt;/code&gt; option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git. This form implies &lt;code&gt;--exit-code&lt;/code&gt;.</source>
          <target state="translated">Эта форма предназначена для сравнения двух указанных путей в файловой системе. Вы можете опустить параметр &lt;code&gt;--no-index&lt;/code&gt; при запуске команды в рабочем дереве, управляемом Git, и хотя бы один из путей указывает за пределами рабочего дерева, или при запуске команды за пределами рабочего дерева, управляемого Git. Эта форма подразумевает &lt;code&gt;--exit-code&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a36c2e6e9bf305ffd5ef7a7e4c453ac93dfb865" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &quot;git diff A...B&quot; is equivalent to &quot;git diff $(git merge-base A B) B&quot;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="translated">Эта форма предназначена для просмотра изменений в ветви, содержащей и до второго &amp;lt;commit&amp;gt;, начиная с общего предка обоих &amp;lt;commit&amp;gt;. &amp;laquo;git diff A ... B&amp;raquo; эквивалентно &amp;laquo;git diff $ (git merge-base AB) B&amp;raquo;. Вы можете опустить любой из &amp;lt;commit&amp;gt;, что даст тот же эффект, что и использование HEAD.</target>
        </trans-unit>
        <trans-unit id="1c4bbf16a9eb9be23dc9fab9fed4d09670912ec0" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &lt;code&gt;git diff A...B&lt;/code&gt; is equivalent to &lt;code&gt;git diff $(git merge-base A B) B&lt;/code&gt;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18011d68a19f669179582c8652eaff17f583329f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.</source>
          <target state="translated">Эта форма предназначена для просмотра изменений в вашем рабочем дереве относительно названного &amp;lt;commit&amp;gt;. Вы можете использовать HEAD, чтобы сравнить его с последней фиксацией, или имя ветки, чтобы сравнить с кончиком другой ветки.</target>
        </trans-unit>
        <trans-unit id="0c3233dc5774a7d1fc399a8b304cc732bba72d9f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you &lt;code&gt;could&lt;/code&gt; tell Git to further add to the index but you still haven&amp;rsquo;t. You can stage these changes by using &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;.</source>
          <target state="translated">Эта форма предназначена для просмотра изменений, внесенных вами относительно индекса (промежуточная область для следующей фиксации). Другими словами, различия заключаются в том, что вы &lt;code&gt;could&lt;/code&gt; сказать Git, чтобы он добавлял их в индекс, но вы этого еще не сделали. Вы можете выполнить эти изменения с помощью &lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ee8e76f95895702db36db495b0e53027904973c9" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you staged for the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so if you do not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist (e.g. unborn branches) and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.</source>
          <target state="translated">Эта форма предназначена для просмотра изменений, которые вы подготовили для следующего коммита относительно названного &amp;lt;commit&amp;gt;. Обычно вам нужно сравнение с последней фиксацией, поэтому, если вы не укажете &amp;lt;commit&amp;gt;, по умолчанию будет использоваться HEAD. Если HEAD не существует (например, нерожденные ветки) и &amp;lt;commit&amp;gt; не задан, отображаются все поэтапные изменения. --staged является синонимом --cached.</target>
        </trans-unit>
        <trans-unit id="51dda6a69f38e64f972e32a62549822542d75887" translate="yes" xml:space="preserve">
          <source>This form is to view the differences between the raw contents of two blob objects.</source>
          <target state="translated">Эта форма предназначена для просмотра различий между необработанным содержимым двух блочных объектов.</target>
        </trans-unit>
        <trans-unit id="df8ee2cb26426eddf11d55337361b04a2e3c04bb" translate="yes" xml:space="preserve">
          <source>This form is to view the results of a merge commit. The first listed &amp;lt;commit&amp;gt; must be the merge itself; the remaining two or more commits should be its parents. A convenient way to produce the desired set of revisions is to use the &lt;code&gt;^@&lt;/code&gt; suffix. For instance, if &lt;code&gt;master&lt;/code&gt; names a merge commit, &lt;code&gt;git diff master
master^@&lt;/code&gt; gives the same combined diff as &lt;code&gt;git show master&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3140d31a73de32a89eb697f18f04aa202d7a5d8e" translate="yes" xml:space="preserve">
          <source>This form is to view the results of a merge commit. The first listed &amp;lt;commit&amp;gt; must be the merge itself; the remaining two or more commits should be its parents. A convenient way to produce the desired set of revisions is to use the ^@ suffix. For instance, if &lt;code&gt;master&lt;/code&gt; names a merge commit, &lt;code&gt;git diff master
master^@&lt;/code&gt; gives the same combined diff as &lt;code&gt;git show master&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395d78419362cad7438eb6eae46785d35953f019" translate="yes" xml:space="preserve">
          <source>This form resets the current branch head to &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; and possibly updates the index (resetting it to the tree of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;) and the working tree depending on &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is omitted, defaults to &lt;code&gt;--mixed&lt;/code&gt;. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; must be one of the following:</source>
          <target state="translated">Эта форма сбрасывает заголовок текущей ветки на &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; и, возможно, обновляет индекс (сбрасывая его до дерева &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; ) и рабочее дерево в зависимости от &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; . Если &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; опущен, по умолчанию используется &lt;code&gt;--mixed&lt;/code&gt; . &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; должен быть один из следующих:</target>
        </trans-unit>
        <trans-unit id="90bcd35d4969f3a90ba2bd18f27a5c6eb93f333b" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &amp;lt;start&amp;gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &amp;lt;start&amp;gt; is &amp;ldquo;^/regex/&amp;rdquo;, it will search from the start of file. If &amp;lt;end&amp;gt; is a regex, it will search starting at the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">Эта форма будет использовать первую строку, соответствующую заданному регулярному выражению POSIX. Если &amp;lt;start&amp;gt; является регулярным выражением, поиск будет выполняться с конца предыдущего диапазона &lt;code&gt;-L&lt;/code&gt; , если таковой имеется, в противном случае - с начала файла. Если &amp;lt;start&amp;gt; - &amp;laquo;^ / regex /&amp;raquo;, поиск будет выполняться с начала файла. Если &amp;lt;end&amp;gt; является регулярным выражением, поиск будет выполняться, начиная со строки, заданной &amp;lt;start&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="215f3a05528763c5f39e5365947941ffab5eacc1" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is &lt;code&gt;^/regex/&lt;/code&gt;, it will search from the start of file. If &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; is a regex, it will search starting at the line given by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42c261dd1828c15332725a480fa7095bcc76b2a" translate="yes" xml:space="preserve">
          <source>This format expects the first line of the file to contain the &quot;Cc:&quot; value and the &quot;Subject:&quot; of the message as the second line.</source>
          <target state="translated">Этот формат ожидает,что первая строка файла будет содержать значение &quot;Cc:&quot;,а &quot;Subject:&quot; сообщения-вторую строку.</target>
        </trans-unit>
        <trans-unit id="105520fc7842a24e43537a27759a074335828eb6" translate="yes" xml:space="preserve">
          <source>This format is identical to version &lt;code&gt;0&lt;/code&gt;, with the following exceptions:</source>
          <target state="translated">Этот формат идентичен версии &lt;code&gt;0&lt;/code&gt; , за следующими исключениями:</target>
        </trans-unit>
        <trans-unit id="fd22347e6ce1cebbfe9140a8d5df54f1132eb3e9" translate="yes" xml:space="preserve">
          <source>This format is no longer produced by any Git command, but is and will continue to be supported by &lt;code&gt;update-index --index-info&lt;/code&gt;.</source>
          <target state="translated">Этот формат больше не создается ни одной командой Git, но поддерживается и будет поддерживаться параметром &lt;code&gt;update-index --index-info&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1e42b99834dd201113f33eae88b5856f686096e" translate="yes" xml:space="preserve">
          <source>This format is to put higher order stages into the index file and matches &lt;code&gt;git ls-files --stage&lt;/code&gt; output.</source>
          <target state="translated">Этот формат предназначен для помещения этапов более высокого порядка в индексный файл и соответствует выходу &lt;code&gt;git ls-files --stage&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="483caba3e82677e09e2d521ebba75089a90ce09e" translate="yes" xml:space="preserve">
          <source>This format is to stuff &lt;code&gt;git ls-tree&lt;/code&gt; output into the index.</source>
          <target state="translated">Этот формат предназначен для помещения вывода &lt;code&gt;git ls-tree&lt;/code&gt; в индекс.</target>
        </trans-unit>
        <trans-unit id="078ec0cba6df63b2f2fc0bbcd069e250ea13b628" translate="yes" xml:space="preserve">
          <source>This format is used to refer to another commit in a commit message and is the same as &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt;. By default, the date is formatted with &lt;code&gt;--date=short&lt;/code&gt; unless another &lt;code&gt;--date&lt;/code&gt; option is explicitly specified. As with any &lt;code&gt;format:&lt;/code&gt; with format placeholders, its output is not affected by other options like &lt;code&gt;--decorate&lt;/code&gt; and &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">Этот формат используется для ссылки на другую фиксацию в сообщении фиксации и аналогичен &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt; . По умолчанию дата форматируется с помощью &lt;code&gt;--date=short&lt;/code&gt; , если явно не указан другой параметр &lt;code&gt;--date&lt;/code&gt; . Как и в случае с любым &lt;code&gt;format:&lt;/code&gt; с заполнителями формата, на его вывод не влияют другие параметры, такие как &lt;code&gt;--decorate&lt;/code&gt; и &lt;code&gt;--walk-reflogs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="742c78626a467f269e89b016f43c5e1a7be4cd88" translate="yes" xml:space="preserve">
          <source>This gets rid of the &lt;code&gt;git-svn-id:&lt;/code&gt; lines at the end of every commit.</source>
          <target state="translated">Это избавляет от строк &lt;code&gt;git-svn-id:&lt;/code&gt; в конце каждого коммита.</target>
        </trans-unit>
        <trans-unit id="2acaf36aea784a80df7509fcb8e38355c645c5a7" translate="yes" xml:space="preserve">
          <source>This gives a very controlled flow of fixes. If you notice that you have applied a fix to e.g. &lt;code&gt;master&lt;/code&gt; that is also required in &lt;code&gt;maint&lt;/code&gt;, you will need to cherry-pick it (using &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;) downwards. This will happen a few times and is nothing to worry about unless you do it very frequently.</source>
          <target state="translated">Это дает очень контролируемый поток исправлений. Если вы заметили, что вы применили исправление, например, к &lt;code&gt;master&lt;/code&gt; , которое также требуется в &lt;code&gt;maint&lt;/code&gt; , вам нужно будет выбрать его (используя &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt; ) снизу вверх. Это произойдет несколько раз, и вам не о чем беспокоиться, если вы не будете делать это очень часто.</target>
        </trans-unit>
        <trans-unit id="1f3884c08aac0f5d8941c7814b274c9743619a33" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase had conflicts, or used &lt;code&gt;--interactive&lt;/code&gt; to omit, edit, squash, or fixup commits; or if the upstream used one of &lt;code&gt;commit --amend&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, or a full history rewriting command like &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;&lt;code&gt;filter-repo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Это происходит, если при перебазировании &lt;code&gt;subsystem&lt;/code&gt; возникли конфликты, или если используется &lt;code&gt;--interactive&lt;/code&gt; для исключения , редактирования, сжатия или фиксации фиксации; или если восходящий &lt;code&gt;commit --amend&lt;/code&gt; использовал одну из команд commit --amend , &lt;code&gt;reset&lt;/code&gt; или команду перезаписи полной истории, например &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt; &lt;code&gt;filter-repo&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="53ac63807fcdbfc7e050fb3151d6b086f2e9a274" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase was a simple rebase and had no conflicts.</source>
          <target state="translated">Это происходит, если перебазирование &lt;code&gt;subsystem&lt;/code&gt; было простым перебазированием и не было конфликтов.</target>
        </trans-unit>
        <trans-unit id="d414984e9f8d7bfd782c8f2da36b80bcd80ea28e" translate="yes" xml:space="preserve">
          <source>This has a few user-visible effects and caveats:</source>
          <target state="translated">Это имеет несколько видимых пользователю эффектов и предостережений:</target>
        </trans-unit>
        <trans-unit id="1c876a37c9c7633e47e1a6a38b1f16f75e32a3ed" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;, and lets you add untracked paths to the index.</source>
          <target state="translated">У него очень похожий пользовательский интерфейс для &lt;code&gt;update&lt;/code&gt; и &lt;code&gt;revert&lt;/code&gt; , а также позволяет добавлять в индекс неотслеживаемые пути.</target>
        </trans-unit>
        <trans-unit id="33280cb105ee3b71902ce7b15c9592fd52f73e30" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt;, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.</source>
          <target state="translated">У него очень похожий пользовательский интерфейс для &lt;code&gt;update&lt;/code&gt; , а поэтапная информация для выбранных путей возвращается к версии HEAD. Обращение к новым путям делает их неотслеживаемыми.</target>
        </trans-unit>
        <trans-unit id="4d4512b846dcedcc9cf4704e69eaeda15e1830db" translate="yes" xml:space="preserve">
          <source>This has been requested by some kernel developers because some bugs called sporadic bugs do not appear in all the kernel builds because they are very dependent on the compiler output.</source>
          <target state="translated">Это было запрошено некоторыми разработчиками ядра,потому что некоторые ошибки,называемые спорадическими ошибками,появляются не во всех сборках ядра,потому что они очень зависят от вывода компилятора.</target>
        </trans-unit>
        <trans-unit id="b93781d2b5ee24d7b760545bc5177eb80e4c3e22" translate="yes" xml:space="preserve">
          <source>This has the advantage that it will be saved in your &lt;code&gt;CVS/Root&lt;/code&gt; files and you don&amp;rsquo;t need to worry about always setting the correct environment variable. SSH users restricted to &lt;code&gt;git-shell&lt;/code&gt; don&amp;rsquo;t need to override the default with CVS_SERVER (and shouldn&amp;rsquo;t) as &lt;code&gt;git-shell&lt;/code&gt; understands &lt;code&gt;cvs&lt;/code&gt; to mean &lt;code&gt;git-cvsserver&lt;/code&gt; and pretends that the other end runs the real &lt;code&gt;cvs&lt;/code&gt; better.</source>
          <target state="translated">Это имеет то преимущество, что он будет сохранен в ваших файлах &lt;code&gt;CVS/Root&lt;/code&gt; , и вам не нужно беспокоиться о том, чтобы всегда устанавливать правильную переменную среды. Пользователям SSH, ограниченным &lt;code&gt;git-shell&lt;/code&gt; , не нужно переопределять значение по умолчанию с помощью CVS_SERVER (и не должно), поскольку &lt;code&gt;git-shell&lt;/code&gt; понимает &lt;code&gt;cvs&lt;/code&gt; как означающее &lt;code&gt;git-cvsserver&lt;/code&gt; и делает вид, что другой конец лучше работает с реальными &lt;code&gt;cvs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f27a3b2d1e595dbb21c1b28424b4a89305bcf439" translate="yes" xml:space="preserve">
          <source>This has two implications:</source>
          <target state="translated">Это имеет два последствия:</target>
        </trans-unit>
        <trans-unit id="a2d38b5ae6dea81df64d435d13a5c9c9c6e43a8c" translate="yes" xml:space="preserve">
          <source>This header line is followed by the following information at least once for each commit:</source>
          <target state="translated">За этой строкой заголовка следует как минимум один раз следующая информация для каждого коммита:</target>
        </trans-unit>
        <trans-unit id="aac19de1c954c0a5c2aba42bf1f288afbf74cabf" translate="yes" xml:space="preserve">
          <source>This helper uses specified file descriptors to connect to a remote Git server. This is not meant for end users but for programs and scripts calling git fetch, push or archive.</source>
          <target state="translated">Этот помощник использует указанные файловые дескрипторы для подключения к удалённому Git-серверу.Он предназначен не для конечных пользователей,а для программ и скриптов,вызывающих git fetch,push или archive.</target>
        </trans-unit>
        <trans-unit id="eafdc2cefff4153e88df550a24ce4b00606582ea" translate="yes" xml:space="preserve">
          <source>This hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.</source>
          <target state="translated">Этот крюк может использоваться вместе с соответствующим крюком предварительной коммитации для сохранения и восстановления любой формы метаданных,связанных с рабочим деревом (например:разрешения/владение,ACLS и т.д.).Смотрите contrib/hooks/setgitperms.perl для примера,как это сделать.</target>
        </trans-unit>
        <trans-unit id="9fae8c19d5ced3830760d386f8db3473a746ea76" translate="yes" xml:space="preserve">
          <source>This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.</source>
          <target state="translated">Этот крюк может использоваться для выполнения проверки валидности репозитория,автоматического отображения отличий от предыдущего HEAD,если они отличаются,или установки свойств рабочих метаданных dir.</target>
        </trans-unit>
        <trans-unit id="89a247d66f7dd9fd927ac160899ee7ad4eefe257" translate="yes" xml:space="preserve">
          <source>This hook can be used to prevent &lt;code&gt;forced&lt;/code&gt; update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name. That is, to enforce a &quot;fast-forward only&quot; policy.</source>
          <target state="translated">Эту ловушку можно использовать для предотвращения &lt;code&gt;forced&lt;/code&gt; обновления определенных ссылок, убедившись, что имя объекта является объектом фиксации, который является потомком объекта фиксации, названного старым именем объекта. То есть, чтобы обеспечить соблюдение политики &amp;laquo;только быстрой перемотки вперед&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="e2b4b08b5c7d529703ac2e4609fae5478174d015" translate="yes" xml:space="preserve">
          <source>This hook can be used, for example, to run &lt;code&gt;git update-server-info&lt;/code&gt; if the repository is packed and is served via a dumb transport.</source>
          <target state="translated">Эту ловушку можно использовать, например, для запуска &lt;code&gt;git update-server-info&lt;/code&gt; , если репозиторий упакован и обслуживается через немой транспорт.</target>
        </trans-unit>
        <trans-unit id="ec8359ca4fe68868d4a094d214fa5c736b07b686" translate="yes" xml:space="preserve">
          <source>This hook does not affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;, as it is called after the real work is done.</source>
          <target state="translated">Этот хук не влияет на результат &lt;code&gt;git receive-pack&lt;/code&gt; , так как он вызывается после того, как реальная работа сделана.</target>
        </trans-unit>
        <trans-unit id="4f1494681f56d1e644fae421a13f75381d1bf104" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:</source>
          <target state="translated">Этот крюк выполняет операцию приема один раз.Он не принимает аргументов,но для каждого обращения,которое будет обновляться,он получает на стандартный вход строку формата:</target>
        </trans-unit>
        <trans-unit id="1c705c0b531046d9558421e4543f9aca35624390" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the &lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;pre-receive&lt;/em&gt;&lt;/a&gt; hook does on its standard input.</source>
          <target state="translated">Этот хук выполняется один раз для операции приема. Он не принимает аргументов, но получает ту же информацию, что и ловушка &lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;предварительного приема&lt;/em&gt;&lt;/a&gt; на свой стандартный ввод.</target>
        </trans-unit>
        <trans-unit id="98f6b796f54de07e8019b94d0f551840c498ad05" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but uses a pkt-line format protocol to communicate with &lt;code&gt;receive-pack&lt;/code&gt; to read commands, push-options and send results. In the following example for the protocol, the letter &lt;code&gt;S&lt;/code&gt; stands for &lt;code&gt;receive-pack&lt;/code&gt; and the letter &lt;code&gt;H&lt;/code&gt; stands for this hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f404b0d7afced029532dd1c0ce00c69033fa119" translate="yes" xml:space="preserve">
          <source>This hook is called before any refname is updated and before any fast-forward checks are performed.</source>
          <target state="translated">Этот крючок вызывается перед обновлением любого имени и перед выполнением быстрой перемотки.</target>
        </trans-unit>
        <trans-unit id="6f4d4e6bc9f3d3e90e8224d9cc9d15607a5f159d" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt; и может использоваться, чтобы предотвратить отправку. Ловушка вызывается с двумя параметрами, которые предоставляют имя и местоположение удаленного назначения, если именованный удаленный компьютер не используется, оба значения будут одинаковыми.</target>
        </trans-unit>
        <trans-unit id="b761c5f63f99b7c22c6e4ca4e1bd741b6a19c509" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.</source>
          <target state="translated">Этот перехватчик вызывается &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt; и может использоваться для предотвращения перебазирования ветки. Ловушка может быть вызвана с одним или двумя параметрами. Первый параметр - это апстрим, от которого была разветвлена ​​серия. Второй параметр - это перебазируемая ветвь, и он не устанавливается при перебазировании текущей ветки.</target>
        </trans-unit>
        <trans-unit id="fc84f5afc2cc3712fb061152c42b83b5432e2d28" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes &lt;code&gt;git am&lt;/code&gt; to abort before applying the patch.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; . Он принимает единственный параметр - имя файла, содержащего предлагаемое сообщение журнала фиксации. Выход с ненулевым статусом приводит к прекращению работы &lt;code&gt;git am&lt;/code&gt; перед применением патча.</target>
        </trans-unit>
        <trans-unit id="109f1251e93ab76b92d28a05e1f40ca3ae3e2435" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied and a commit is made.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; . Он не принимает параметров и вызывается после применения патча и совершения фиксации.</target>
        </trans-unit>
        <trans-unit id="31dd1042d3a6d88015bf6a789db56141bf61f664" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; . Он не принимает параметров и вызывается после применения исправления, но до совершения фиксации.</target>
        </trans-unit>
        <trans-unit id="4126a7ec7eb0a54d9b99d1f389fd70ce96c40950" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; and &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-commit&quot;&gt;командами git-commit [1]&lt;/a&gt; и &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; , и его можно обойти с помощью параметра &lt;code&gt;--no-verify&lt;/code&gt; . Он принимает единственный параметр - имя файла, содержащего предлагаемое сообщение журнала фиксации. Выход с ненулевым статусом вызывает прерывание команды.</target>
        </trans-unit>
        <trans-unit id="977ece26ae3c0446a7497462b09e90162737d6ca" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; right after preparing the default log message, and before the editor is started.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt; сразу после подготовки сообщения журнала по умолчанию и перед запуском редактора.</target>
        </trans-unit>
        <trans-unit id="2ae25bad855fc10ca5e955357c713cdbb31a472c" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git commit&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt; , и его можно обойти с помощью опции &lt;code&gt;--no-verify&lt;/code&gt; . Он не принимает никаких параметров и вызывается перед получением предложенного сообщения журнала фиксации и совершением фиксации. Выход из этого сценария с ненулевым статусом вызывает прерывание команды &lt;code&gt;git commit&lt;/code&gt; перед созданием фиксации.</target>
        </trans-unit>
        <trans-unit id="21226463d529e8f7d5082c27401d959f905ec4d1" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. It takes no parameters, and is invoked after a commit is made.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt; . Он не принимает параметров и вызывается после совершения фиксации.</target>
        </trans-unit>
        <trans-unit id="0a4097349c79cead9de93e647cb9ba47cbed7c91" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked after the merge has been carried out successfully and before obtaining the proposed commit log message to make a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git merge&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; , и его можно обойти с помощью опции &lt;code&gt;--no-verify&lt;/code&gt; . Он не принимает никаких параметров и вызывается после успешного выполнения слияния и до получения предложенного сообщения журнала фиксации для совершения фиксации. Выход из этого скрипта с ненулевым статусом приводит к прерыванию команды &lt;code&gt;git merge&lt;/code&gt; перед созданием фиксации.</target>
        </trans-unit>
        <trans-unit id="de911dadfd0a4abc2b13baa4ccbc2ae0aca9f055" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, which happens when a &lt;code&gt;git pull&lt;/code&gt; is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of &lt;code&gt;git merge&lt;/code&gt; and is not executed, if the merge failed due to conflicts.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; , что происходит, когда &lt;code&gt;git pull&lt;/code&gt; выполняется в локальном репозитории. Хук принимает единственный параметр, флаг состояния, указывающий, было ли выполняемое слияние слиянием сквоша. Этот хук не может повлиять на результат &lt;code&gt;git merge&lt;/code&gt; и не выполняется, если слияние не удалось из-за конфликтов.</target>
        </trans-unit>
        <trans-unit id="76961cafe28e294daa6f1b287a02eb4fe4bf07aa" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; configuration variable is set to &lt;code&gt;updateInstead&lt;/code&gt;. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1],&lt;/a&gt; когда он реагирует на &lt;code&gt;git push&lt;/code&gt; и обновляет ссылку (-ы) в своем репозитории, а также когда push пытается обновить ветку, которая в настоящее время проверена, и переменную конфигурации &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; установлен на &lt;code&gt;updateInstead&lt;/code&gt; . Такое нажатие по умолчанию отклоняется, если рабочее дерево и индекс удаленного репозитория имеют какие-либо отличия от текущего извлеченного коммита; когда и рабочее дерево, и индекс совпадают с текущей фиксацией, они обновляются, чтобы соответствовать недавно выдвинутой вершине ветви. Этот хук используется для отмены поведения по умолчанию.</target>
        </trans-unit>
        <trans-unit id="5a56dac625f1205849f2b5f6e3619a708d3ea48e" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1],&lt;/a&gt; когда он реагирует на &lt;code&gt;git push&lt;/code&gt; и обновляет ссылку (и) в своем репозитории. Он выполняется в удаленном репозитории один раз после обновления всех ссылок.</target>
        </trans-unit>
        <trans-unit id="390ce0821ef413eec43c389641cce2dfc9687135" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before starting to update refs on the remote repository, the pre-receive hook is invoked. Its exit status determines the success or failure of the update.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1],&lt;/a&gt; когда он реагирует на &lt;code&gt;git push&lt;/code&gt; и обновляет ссылку (и) в своем репозитории. Непосредственно перед началом обновления ссылок в удаленном репозитории вызывается ловушка предварительного приема. Его статус выхода определяет успех или неудачу обновления.</target>
        </trans-unit>
        <trans-unit id="f508c67d780c6e440d114ab5a4809e8db15887c6" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before updating the ref on the remote repository, the update hook is invoked. Its exit status determines the success or failure of the ref update.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1],&lt;/a&gt; когда он реагирует на &lt;code&gt;git push&lt;/code&gt; и обновляет ссылку (и) в своем репозитории. Непосредственно перед обновлением ссылки в удаленном репозитории вызывается ловушка обновления. Его статус выхода определяет успех или неудачу обновления ссылки.</target>
        </trans-unit>
        <trans-unit id="c165f7e2051fecf641e46f5c29ee35090d7d5f24" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;. If the server has set the multi-valued config variable &lt;code&gt;receive.procReceiveRefs&lt;/code&gt;, and the commands sent to &lt;code&gt;receive-pack&lt;/code&gt; have matching reference names, these commands will be executed by this hook, instead of by the internal &lt;code&gt;execute_commands()&lt;/code&gt; function. This hook is responsible for updating the relevant references and reporting the results back to &lt;code&gt;receive-pack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94fc31562e49c2e1f57905c2984b3787d6eb579" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes &lt;code&gt;git send-email&lt;/code&gt; to abort before sending any e-mails.</source>
          <target state="translated">Этот хук вызывается &lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt; . Он принимает единственный параметр - имя файла, в котором хранится электронное письмо для отправки. Выход с ненулевым статусом приводит к прекращению работы &lt;code&gt;git send-email&lt;/code&gt; перед отправкой любых электронных писем.</target>
        </trans-unit>
        <trans-unit id="898dc345a1faef7e78cc6f07a48d416762cf9e72" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git gc --auto&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;). It takes no parameter, and exiting with non-zero status from this script causes the &lt;code&gt;git gc --auto&lt;/code&gt; to abort.</source>
          <target state="translated">Этот хук вызывается &lt;code&gt;git gc --auto&lt;/code&gt; (см. &lt;a href=&quot;git-gc&quot;&gt;Git-gc [1]&lt;/a&gt; ). Он не принимает параметров, и выход из этого скрипта с ненулевым статусом приводит к прерыванию &lt;code&gt;git gc --auto&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="536d2f256146b81297af8f05d9ee07d3c788ff56" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db96373c38bd1df6e078c9fa2b6d9e050d469bb3" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. It can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; command line option. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa504b80ab7d4ab7fd02bb1c09f7267f7ffd0b87" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">Этот хук вызывается &lt;code&gt;git-p4 submit&lt;/code&gt; . Он не принимает никаких параметров и ничего из стандартного ввода. Выход из этого скрипта с ненулевым статусом предотвращает запуск &lt;code&gt;git-p4 submit&lt;/code&gt; . Выполните &lt;code&gt;git-p4 submit --help&lt;/code&gt; , чтобы узнать подробности.</target>
        </trans-unit>
        <trans-unit id="e343164b203dd1de0ba3f9a30c792df16e0f19da" translate="yes" xml:space="preserve">
          <source>This hook is invoked by any Git command that performs reference updates. It executes whenever a reference transaction is prepared, committed or aborted and may thus get called multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8569f58a670ba9d05dfd0c2191295df64e04e73" translate="yes" xml:space="preserve">
          <source>This hook is invoked by commands that rewrite commits (&lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; when called with &lt;code&gt;--amend&lt;/code&gt; and &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;; however, full-history (re)writing tools like &lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import[1]&lt;/a&gt; or &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; typically do not call it!). Its first argument denotes the command it was invoked by: currently one of &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;. Further command-dependent arguments may be passed in the future.</source>
          <target state="translated">Этот хук вызывается командами, которые перезаписывают коммиты ( &lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt; при вызове с &lt;code&gt;--amend&lt;/code&gt; и &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt; ; однако, инструменты записи полной истории (пере), такие как &lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import [1]&lt;/a&gt; или &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; обычно его не называют!). Его первый аргумент обозначает команду, которой он был вызван: в настоящее время один из вариантов: &lt;code&gt;amend&lt;/code&gt; или &lt;code&gt;rebase&lt;/code&gt; . В будущем могут быть переданы другие аргументы, зависящие от команды.</target>
        </trans-unit>
        <trans-unit id="8c8dde02f7fe4fac23930e917fd59c1d03fbfa8b" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;, other than that the hook&amp;rsquo;s exit status becomes the exit status of these two commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b20b75526e2af7ef8179932e884a838f68429b3" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">Этот хук вызывается, когда &lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt; или &lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt; запускается после обновления рабочего дерева. Перехватчику даются три параметра: ссылка на предыдущую HEAD, ссылка на новую HEAD (которая могла или не могла быть изменена) и флаг, указывающий, была ли проверка проверкой ветви (изменение ветвей, flag = 1) или проверка файла (получение файла из индекса, флаг = 0). Этот хук не может повлиять на результат &lt;code&gt;git switch&lt;/code&gt; или &lt;code&gt;git checkout&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd3ae42761b9b86d30d029aa1493872ff1533f42" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; or &lt;code&gt;.git/hooks/fsmonitor-watchmanv2&lt;/code&gt; depending on the version of the hook to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0692c459d4a723afc690b678a8556c7e5d3814" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt;. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="translated">Этот перехватчик вызывается, когда параметр конфигурации &lt;code&gt;core.fsmonitor&lt;/code&gt; установлен в &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; . Требуется два аргумента: версия (в настоящее время 1) и время в наносекундах, прошедшее с полуночи 1 января 1970 года.</target>
        </trans-unit>
        <trans-unit id="1ea8190ee0fad5a3aca31c578a724c322c0d57cb" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the index is written in read-cache.c do_write_locked_index.</source>
          <target state="translated">Этот крюк вызывается,когда индекс записывается в read-cache.c do_write_locked_index.</target>
        </trans-unit>
        <trans-unit id="bbcd7cc3d137fc9e83cb037a7ffe28a3a104cf5b" translate="yes" xml:space="preserve">
          <source>This hook is invoked with the environment variable &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; if the command will not bring up an editor to modify the commit message.</source>
          <target state="translated">Этот хук вызывается с переменной окружения &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; если команда не вызывает редактор для изменения сообщения фиксации.</target>
        </trans-unit>
        <trans-unit id="ddc7ece9286909c0de44abe41d5a762b67552ed5" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">Этот хук предназначен в первую очередь для уведомления и не может повлиять на результат &lt;code&gt;git am&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="448e187d53f17c70cda00f92a3ee55c4bde07472" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">Этот хук предназначен в основном для уведомления и не может повлиять на результат &lt;code&gt;git commit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="08260832c28c95684a1993d7203db5c6a733006a" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;.</source>
          <target state="translated">Этот хук предназначен в первую очередь для уведомления и не может повлиять на результат &lt;code&gt;git receive-pack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1b9eafafbdf014b8c082347223fc7e3e439cd3c" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. In addition to the list of revision arguments read from the standard input, pretend as if all refs under &lt;code&gt;refs/&lt;/code&gt; are specified to be included.</source>
          <target state="translated">Это означает &lt;code&gt;--revs&lt;/code&gt; . В дополнение к списку аргументов ревизии, считываемых из стандартного ввода, сделайте вид, будто все ссылки в &lt;code&gt;refs/&lt;/code&gt; указаны для включения.</target>
        </trans-unit>
        <trans-unit id="00f6fe101136dac1c604175fe5bf787266d15317" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed.</source>
          <target state="translated">Это означает &lt;code&gt;--revs&lt;/code&gt; . При обработке списка аргументов ревизии, считанного из стандартного ввода, ограничьте упакованные объекты теми, которые еще не упакованы.</target>
        </trans-unit>
        <trans-unit id="23abf25dbec44cc1a257bc71a457bb760d4a79eb" translate="yes" xml:space="preserve">
          <source>This implies the &lt;code&gt;--topo-order&lt;/code&gt; option by default, but the &lt;code&gt;--date-order&lt;/code&gt; option may also be specified.</source>
          <target state="translated">По умолчанию это подразумевает параметр &lt;code&gt;--topo-order&lt;/code&gt; , но также можно указать параметр &lt;code&gt;--date-order&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bafb6d097d43ca4ccca730edb887425acfba8b5" translate="yes" xml:space="preserve">
          <source>This imports the specified depot into &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; in an existing Git repository. The &lt;code&gt;--branch&lt;/code&gt; option can be used to specify a different branch to be used for the p4 content.</source>
          <target state="translated">Это импортирует указанное хранилище в &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; в существующем репозитории Git. &lt;code&gt;--branch&lt;/code&gt; опция может использоваться , чтобы указать другую ветвь будет использоваться для содержания p4.</target>
        </trans-unit>
        <trans-unit id="5a7c7788d041aa1a2f51fc279f1f6f7da23ae666" translate="yes" xml:space="preserve">
          <source>This indicates that the helper is able to interact with the remote side using an explicit hash algorithm extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505428074ae07b004fad59f4eaeb272274ac2c6b" translate="yes" xml:space="preserve">
          <source>This information can be used to determine what commit was the tip of a branch &quot;2 days ago&quot;.</source>
          <target state="translated">Эта информация может быть использована для определения того,какой коммит был вершиной ветки &quot;2 дня назад&quot;.</target>
        </trans-unit>
        <trans-unit id="86187244d1368864bf6af8ccb054656e32b6a58b" translate="yes" xml:space="preserve">
          <source>This instructs git svn to recode pathnames to a given encoding. It can be used by windows users and by those who work in non-utf8 locales to avoid corrupted file names with non-ASCII characters. Valid encodings are the ones supported by Perl&amp;rsquo;s Encode module.</source>
          <target state="translated">Это инструктирует git svn перекодировать пути в заданную кодировку. Его могут использовать пользователи Windows и те, кто работает в локали, отличной от utf8, чтобы избежать искажения имен файлов с символами, отличными от ASCII. Допустимые кодировки - это те, которые поддерживаются модулем Perl Encode.</target>
        </trans-unit>
        <trans-unit id="956c7627c61d83f78ef967d8ba93fedd722fb328" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;commit-graph&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;commit-graph&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of reachable commits that are not in the commit-graph file is at least the value of &lt;code&gt;maintenance.commit-graph.auto&lt;/code&gt;. The default value is 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64a7c2d6ae98d20c277e94177b42af973cafce0" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;incremental-repack&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;incremental-repack&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of pack-files not in the multi-pack-index is at least the value of &lt;code&gt;maintenance.incremental-repack.auto&lt;/code&gt;. The default value is 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61993927f5b7a85ff06e34daa416caf3ce7cbe39" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;loose-objects&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;loose-objects&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of loose objects is at least the value of &lt;code&gt;maintenance.loose-objects.auto&lt;/code&gt;. The default value is 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0909b4167b1b6cfc93db8cafdc74248d3901c792" translate="yes" xml:space="preserve">
          <source>This is a deprecated synonym for &lt;code&gt;repack.writeBitmaps&lt;/code&gt;.</source>
          <target state="translated">Это устаревший синоним &lt;code&gt;repack.writeBitmaps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0663f3ff3f5e643bb58ee19e6a44fd14680c40d5" translate="yes" xml:space="preserve">
          <source>This is a login shell for SSH accounts to provide restricted Git access. It permits execution only of server-side Git commands implementing the pull/push functionality, plus custom commands present in a subdirectory named &lt;code&gt;git-shell-commands&lt;/code&gt; in the user&amp;rsquo;s home directory.</source>
          <target state="translated">Это оболочка входа в систему для учетных записей SSH, обеспечивающая ограниченный доступ к Git. Он разрешает выполнение только серверных команд Git, реализующих функциональность pull / push, а также пользовательских команд, находящихся в подкаталоге с именем &lt;code&gt;git-shell-commands&lt;/code&gt; в домашнем каталоге пользователя.</target>
        </trans-unit>
        <trans-unit id="bb9b1700493e02e1c42808252a2a81a90b07f06f" translate="yes" xml:space="preserve">
          <source>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</source>
          <target state="translated">Это модифицированная рекурсивная стратегия.При слиянии деревьев A и B,если B соответствует поддереву A,B сначала настраивается на соответствие древовидной структуре A,а не на чтение деревьев на одном уровне.Эта настройка также выполняется для общего дерева предков.</target>
        </trans-unit>
        <trans-unit id="9ebc5555eb7976dd79439890cefef50e4fca7252" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable that defines reference prefixes to match the commands in &lt;code&gt;receive-pack&lt;/code&gt;. Commands matching the prefixes will be executed by an external hook &quot;proc-receive&quot;, instead of the internal &lt;code&gt;execute_commands&lt;/code&gt; function. If this variable is not defined, the &quot;proc-receive&quot; hook will never be used, and all commands will be executed by the internal &lt;code&gt;execute_commands&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94478372a5a22fcace1286299ca604a903c0373f" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. &lt;code&gt;.git/config&lt;/code&gt; in a repository) to clear the values inherited from a lower priority configuration files (e.g. &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;).</source>
          <target state="translated">Это многозначная переменная, и пустое значение может использоваться в файле конфигурации с более высоким приоритетом (например, &lt;code&gt;.git/config&lt;/code&gt; в репозитории), чтобы очистить значения, унаследованные от файлов конфигурации с более низким приоритетом (например, &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ) ,</target>
        </trans-unit>
        <trans-unit id="9800795b0feafe785919ba7eb03d901a5af98b6d" translate="yes" xml:space="preserve">
          <source>This is a potentially &lt;em&gt;dangerous&lt;/em&gt; mode of operation. It rewrites history, which does not bode well when you published that history already. Do &lt;strong&gt;not&lt;/strong&gt; use this option unless you have read &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; carefully.</source>
          <target state="translated">Это потенциально &lt;em&gt;опасный&lt;/em&gt; режим работы. Он переписывает историю, что не сулит ничего хорошего, если вы уже опубликовали эту историю. Вы &lt;strong&gt;не&lt;/strong&gt; использовать эту опцию , если вы не прочтете &lt;a href=&quot;git-rebase&quot;&gt;ГИТ-Rebase [1]&lt;/a&gt; тщательно.</target>
        </trans-unit>
        <trans-unit id="7393bcbfeab09d874001a82423e807bb091915e9" translate="yes" xml:space="preserve">
          <source>This is a quick summary of the major commands; the previous chapters explain how these work in more detail.</source>
          <target state="translated">Это краткое изложение основных команд;в предыдущих главах более подробно объясняется,как они работают.</target>
        </trans-unit>
        <trans-unit id="e6b70a1472f7c00669a56c92197ed227d5be5866" translate="yes" xml:space="preserve">
          <source>This is a shorthand for &quot;--pretty=oneline --abbrev-commit&quot; used together.</source>
          <target state="translated">Это сокращение от &quot;--pretty=oneline --abbrev-commit&quot;,используемое вместе.</target>
        </trans-unit>
        <trans-unit id="18c84bcba1b16c1ac1cf14d08c1c68d27e4599a1" translate="yes" xml:space="preserve">
          <source>This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X&amp;rsquo;s HFS+, or Linux ext3 with &quot;data=writeback&quot;).</source>
          <target state="translated">Это пустая трата времени и усилий для файловой системы, которая правильно упорядочивает запись данных, но может быть полезна для файловых систем, которые не используют журналирование (традиционные файловые системы UNIX) или которые ведут только метаданные, а не содержимое файла (OS X HFS + или Linux. ext3 с &quot;данными = обратная запись&quot;).</target>
        </trans-unit>
        <trans-unit id="554ab63db8a74b017dac093a21d0557d821484db" translate="yes" xml:space="preserve">
          <source>This is a toy format. The current time and time zone of this system is always copied into the identity string at the time it is being created by fast-import. There is no way to specify a different time or time zone.</source>
          <target state="translated">Это игрушечный формат.Текущее время и часовой пояс этой системы всегда копируется в идентификационную строку во время ее создания путем быстрого импорта.Нет возможности указать другое время или часовой пояс.</target>
        </trans-unit>
        <trans-unit id="bc30d84517d5f02b55a3811eba6ffba9e6c0e4f0" translate="yes" xml:space="preserve">
          <source>This is a work in progress.</source>
          <target state="translated">Это работа в процессе.</target>
        </trans-unit>
        <trans-unit id="cdf94d586f4e34dd4d9c37fe3a3dd3a90ee94301" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;--group=committer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e77feb91313add3d7aff3491329020f7cd2b88e" translate="yes" xml:space="preserve">
          <source>This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to.</source>
          <target state="translated">Это простой способ проверить конкретную версию без необходимости придумывать имя для новой ветки.Вы всё ещё можете создать новое ответвление (или метку)для этой версии позже,если вы решите это сделать.</target>
        </trans-unit>
        <trans-unit id="86d03a90949a936d437c536daea902a3352ca567" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;rebase&lt;/code&gt; is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as &lt;code&gt;ours&lt;/code&gt; (i.e. &quot;our shared canonical history&quot;), while what you did on your side branch as &lt;code&gt;theirs&lt;/code&gt; (i.e. &quot;one contributor&amp;rsquo;s work on top of it&quot;).</source>
          <target state="translated">Это связано с тем, что &lt;code&gt;rebase&lt;/code&gt; используется в рабочем процессе, который обрабатывает историю на удаленном компьютере как общую каноническую и рассматривает работу, выполненную в ветке, которую вы перебазируете, как стороннюю работу, которую нужно интегрировать, и вы временно принимаете на себя роль хранителя канонической истории при ребазе. Как хранитель канонической истории, вам необходимо просматривать историю с пульта дистанционного управления как &lt;code&gt;ours&lt;/code&gt; (т. Е. &amp;laquo;Нашу общую каноническую историю&amp;raquo;), а то, что вы делали в боковой ветке, как &lt;code&gt;theirs&lt;/code&gt; (т. Е. &amp;laquo;Работу одного участника поверх нее&amp;raquo; ).</target>
        </trans-unit>
        <trans-unit id="95a20fc02bc3cd4094f682df1ea1f755e327d688" translate="yes" xml:space="preserve">
          <source>This is called a &lt;code&gt;hunk header&lt;/code&gt;. The &quot;TEXT&quot; portion is by default a line that begins with an alphabet, an underscore or a dollar sign; this matches what GNU &lt;code&gt;diff -p&lt;/code&gt; output uses. This default selection however is not suited for some contents, and you can use a customized pattern to make a selection.</source>
          <target state="translated">Это называется &lt;code&gt;hunk header&lt;/code&gt; . Часть &amp;laquo;ТЕКСТ&amp;raquo; по умолчанию - это строка, которая начинается с алфавита, подчеркивания или знака доллара; это соответствует тому, что использует вывод GNU &lt;code&gt;diff -p&lt;/code&gt; . Однако этот выбор по умолчанию не подходит для некоторого содержимого, и вы можете использовать собственный шаблон для выбора.</target>
        </trans-unit>
        <trans-unit id="85de32d717921314245903361d4033db93188253" translate="yes" xml:space="preserve">
          <source>This is default name of common system-wide configuration file.</source>
          <target state="translated">Это имя по умолчанию для общего общесистемного конфигурационного файла.</target>
        </trans-unit>
        <trans-unit id="8fabc38be889239efec56b25dba57afb3b308b5b" translate="yes" xml:space="preserve">
          <source>This is default name of fallback system-wide configuration file. This file is used only if per-instance configuration variable is not found.</source>
          <target state="translated">Это имя по умолчанию для резервного общесистемного конфигурационного файла.Этот файл используется только в том случае,если конфигурационная переменная для каждого экземпляра не найдена.</target>
        </trans-unit>
        <trans-unit id="e13cac7eff842df90d7031a70a4150ab3a8cdbc2" translate="yes" xml:space="preserve">
          <source>This is default name of per-instance configuration file. The format of this file is described above.</source>
          <target state="translated">Это имя файла конфигурации по умолчанию для каждого экземпляра.Формат этого файла описан выше.</target>
        </trans-unit>
        <trans-unit id="2ac99b50de3702f5d543e44c6b1ddc55b08d7471" translate="yes" xml:space="preserve">
          <source>This is designed to be as compact as possible.</source>
          <target state="translated">Это разработано для того,чтобы быть как можно более компактным.</target>
        </trans-unit>
        <trans-unit id="2fb3b65e8bdaca2feb11f7bb139eec49acdf4051" translate="yes" xml:space="preserve">
          <source>This is done to avoid disrupting the remote-tracking branches. The end users expect these refs to stay unmoved unless they initiate a fetch. With prefetch task, however, the objects necessary to complete a later real fetch would already be obtained, so the real fetch would go faster. In the ideal case, it will just become an update to a bunch of remote-tracking branches without any object transfer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d30dfd1772dd73a7b51cd065bd14037d1044bf" translate="yes" xml:space="preserve">
          <source>This is done to prevent you from losing your work-in-progress changes, and mixing your random changes in an unrelated merge commit. To illustrate, suppose you start from what has been committed last to your repository:</source>
          <target state="translated">Это сделано для того,чтобы предотвратить потерю изменений в процессе работы и смешивание случайных изменений в несвязанном коммите слияния.В качестве иллюстрации предположим,что вы начинаете с того,что было зафиксировано последним в вашем репозитории:</target>
        </trans-unit>
        <trans-unit id="c5483036881ec5a0c568843866e403149495194d" translate="yes" xml:space="preserve">
          <source>This is how you read a blob (actually, not only a blob, but any type of object). To know how the function &lt;code&gt;read_object_with_reference()&lt;/code&gt; actually works, find the source code for it (something like &lt;code&gt;git grep
read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; in the Git repository), and read the source.</source>
          <target state="translated">Вот как вы читаете blob (фактически, не только blob, но и любой тип объекта). Чтобы узнать, как на самом деле работает функция &lt;code&gt;read_object_with_reference()&lt;/code&gt; , найдите для нее исходный код (что-то вроде &lt;code&gt;git grep read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; в репозитории Git) и прочтите исходный код.</target>
        </trans-unit>
        <trans-unit id="d94f65e687e225292db2cabccebd8f5b3adaa1d5" translate="yes" xml:space="preserve">
          <source>This is ideally suited for read-only updates, i.e., pulling from Git repositories.</source>
          <target state="translated">Это идеально подходит для обновлений только для чтения,т.е.для извлечения из Git-репозиториев.</target>
        </trans-unit>
        <trans-unit id="4f74abb17322f51c4e08c52446429282a69cbb4c" translate="yes" xml:space="preserve">
          <source>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</source>
          <target state="translated">Это предназначено для использования только в тестовом комплекте.Он позволяет форсировать версию для сгенерированного индекса пакета,а также форсировать 64-битные записи индекса на объектах,расположенных выше заданного смещения.</target>
        </trans-unit>
        <trans-unit id="8180429180a5d33dfa16e7d2805d2ac9f53f061d" translate="yes" xml:space="preserve">
          <source>This is just to get you into the groove for the most libified part of Git: the revision walker.</source>
          <target state="translated">Это просто для того,чтобы вы попали в канавку самой освобождённой части Git:ревизионного ходункера.</target>
        </trans-unit>
        <trans-unit id="dce30f3fbb0be29025f159d55505215087cce86b" translate="yes" xml:space="preserve">
          <source>This is known to &lt;code&gt;range-diff&lt;/code&gt; as &quot;dual coloring&quot;. Use &lt;code&gt;--no-dual-color&lt;/code&gt; to revert to color all lines according to the outer diff markers (and completely ignore the inner diff when it comes to color).</source>
          <target state="translated">Это известно в &lt;code&gt;range-diff&lt;/code&gt; как &amp;laquo;двойное окрашивание&amp;raquo;. Используйте &lt;code&gt;--no-dual-color&lt;/code&gt; , чтобы вернуться к раскрашиванию всех линий в соответствии с внешними маркерами различий (и полностью игнорировать внутреннее различие, когда дело доходит до цвета).</target>
        </trans-unit>
        <trans-unit id="51ecbd5eaeeeee461a4969f3b0cb27dc975ebc23" translate="yes" xml:space="preserve">
          <source>This is made much worse if many files have to be fixed to resolve conflicts. That&amp;rsquo;s why such merges are called &quot;evil merges&quot;. They can make regressions very difficult to track down. It can even be misleading to know the first bad commit if it happens to be such a merge, because people might think that the bug comes from bad conflict resolution when it comes from a semantic change in one branch.</source>
          <target state="translated">Это значительно усугубляется, если для разрешения конфликтов необходимо исправить много файлов. Поэтому такие слияния называют &amp;laquo;злыми слияниями&amp;raquo;. Они могут затруднить отслеживание регрессий. Может даже быть ошибочным знать, что первая плохая фиксация произошла в результате такого слияния, потому что люди могут подумать, что ошибка возникает из-за плохого разрешения конфликта, когда она возникает из-за семантического изменения в одной ветви.</target>
        </trans-unit>
        <trans-unit id="2742189647afc1dbda2e1e2ecc6c9303cbb2d70b" translate="yes" xml:space="preserve">
          <source>This is meant to be used by higher level scripts to compute merge results outside of the index, and stuff the results back into the index. For this reason, the output from the command omits entries that match the &amp;lt;branch1&amp;gt; tree.</source>
          <target state="translated">Это предназначено для использования сценариями более высокого уровня для вычисления результатов слияния вне индекса и вставки результатов обратно в индекс. По этой причине в выходных данных команды отсутствуют записи, соответствующие дереву &amp;lt;branch1&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="9ccf843e585a34e60ae505f61685a10813c9c88a" translate="yes" xml:space="preserve">
          <source>This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before &quot;reset&quot;.</source>
          <target state="translated">Чаще всего это делается,когда вы вспоминаете,что то,что вы только что совершили,является неполным,или вы неправильно написали ваше сообщение о коммите,или и то,и другое.Оставляет рабочее дерево таким,каким оно было до &quot;сброса&quot;.</target>
        </trans-unit>
        <trans-unit id="efff48b2c5bed4c5ab6435b6d058280a53664967" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the Porcelain-ish scripts and/or are writing new ones.</source>
          <target state="translated">Это не та команда,которую хотел бы выполнить конечный пользователь.Никогда.Эта документация предназначена для людей,которые изучают фарфоровые сценарии и/или пишут новые.</target>
        </trans-unit>
        <trans-unit id="1a7ca68cf192059586c364ba5f318ecdbeb3a963" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the plumbing scripts and/or are writing new ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9e09ba77ce1340a426d6ae669add42a4fe4542" translate="yes" xml:space="preserve">
          <source>This is not a real filter executed for each commit but a one time setup just before the loop. Therefore no commit-specific variables are defined yet. Functions or variables defined here can be used or modified in the following filter steps except the commit filter, for technical reasons.</source>
          <target state="translated">Это не настоящий фильтр,выполняемый для каждого коммита,а однократная настройка непосредственно перед циклом.Поэтому пока не определены никакие специфические для коммита переменные.Функции или переменные,определённые здесь,могут быть использованы или изменены на следующих шагах фильтра,кроме фильтра фиксации,по техническим причинам.</target>
        </trans-unit>
        <trans-unit id="ad1d1c10cd51125ef48d021d8c7283be0413a66d" translate="yes" xml:space="preserve">
          <source>This is not hard to understand, as soon as you realize that Git simply never knows (or cares) about files that it is not told about explicitly. Git will never go &lt;strong&gt;looking&lt;/strong&gt; for files to compare, it expects you to tell it what the files are, and that&amp;rsquo;s what the index is there for.</source>
          <target state="translated">Это нетрудно понять, как только вы поймете, что Git просто никогда не знает (или не заботится) о файлах, о которых не говорится явно. Git никогда не будет &lt;strong&gt;искать&lt;/strong&gt; файлы для сравнения, он ожидает, что вы скажете ему, что это за файлы, и для этого нужен индекс.</target>
        </trans-unit>
        <trans-unit id="0273358cae89a5a683cca4bca340f2d1ab3cc600" translate="yes" xml:space="preserve">
          <source>This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with &lt;code&gt;-&lt;/code&gt; will remove it from the existing list.</source>
          <target state="translated">Это используется только git-completion.bash для добавления или удаления команд из списка выполненных команд. Обычно выполняются только фарфоровые команды и несколько избранных других. В эту переменную можно добавить другие команды, разделенные пробелом. Если поставить перед командой префикс &lt;code&gt;-&lt;/code&gt; , она будет удалена из существующего списка.</target>
        </trans-unit>
        <trans-unit id="fcaf558e1ca35a6c93dcb363081455cef6ced8a0" translate="yes" xml:space="preserve">
          <source>This is only valid for &amp;lt;end&amp;gt; and will specify a number of lines before or after the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">Это действительно только для &amp;lt;end&amp;gt; и будет указывать количество строк до или после строки, заданной &amp;lt;start&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="3d1897f588ce3866d7bd11a61c4f52eb7dec72ee" translate="yes" xml:space="preserve">
          <source>This is only valid for &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; and will specify a number of lines before or after the line given by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0501180252ff128dca83458515deca695a7ecc" translate="yes" xml:space="preserve">
          <source>This is optional and is only searched when &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is present in $GIT_DIR/config.</source>
          <target state="translated">Это необязательно, и поиск выполняется только в том случае, если &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; присутствует в $ GIT_DIR / config.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
