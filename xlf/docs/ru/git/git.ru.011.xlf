<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="39555b916eeeec115f6735665b5426bf964f4e52" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">Этот параметр можно переопределить с помощью переменной среды &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; , которая должна быть списком ссылок или глобусов, разделенных двоеточиями.</target>
        </trans-unit>
        <trans-unit id="d17d74e5aa80b06bd416eb43f1c510767efc6dc8" translate="yes" xml:space="preserve">
          <source>This setting defaults to &quot;refs/notes/commits&quot;, and it can be overridden by the &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; environment variable. See &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt;.</source>
          <target state="translated">По умолчанию этот параметр имеет значение &amp;laquo;refs / notes / commits&amp;raquo;, и его можно &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; переменной среды GIT_NOTES_REF . См. &lt;a href=&quot;git-notes&quot;&gt;Git-notes [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="843f7e48b1e3c030c426060d83a399e29388c249" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings for this file on checkin and convert them to CRLF when the file is checked out.</source>
          <target state="translated">Эта настройка заставляет Git нормализовать окончания строк для этого файла при проверке и конвертировать их в CRLF,когда файл извлекается.</target>
        </trans-unit>
        <trans-unit id="8c7bb001c250cfdf4247d252deb09b8b2c2a2839" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings to LF on checkin and prevents conversion to CRLF when the file is checked out.</source>
          <target state="translated">Эта настройка заставляет Git нормализовать окончания строк в LF при проверке и предотвращает преобразование в CRLF,когда файл извлекается.</target>
        </trans-unit>
        <trans-unit id="886fc853da603148f91948f5793a0d1be70dc28a" translate="yes" xml:space="preserve">
          <source>This setting is automatically guessed by &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; when the repository was created. By default a repository that ends in &quot;/.git&quot; is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).</source>
          <target state="translated">Этот параметр автоматически определяется &lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt; или &lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt; при создании репозитория. По умолчанию предполагается, что репозиторий, заканчивающийся на &amp;laquo;/.git&amp;raquo;, не пустой (bare = false), в то время как все другие репозитории считаются пустыми (bare = true).</target>
        </trans-unit>
        <trans-unit id="a32da40367d476cb817ba2cfa99cb18bc04a7b3a" translate="yes" xml:space="preserve">
          <source>This setting overrides the default of the &lt;code&gt;--cleanup&lt;/code&gt; option in &lt;code&gt;git commit&lt;/code&gt;. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for details. Changing the default can be useful when you always want to keep lines that begin with comment character &lt;code&gt;#&lt;/code&gt; in your log message, in which case you would do &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; (note that you will have to remove the help lines that begin with &lt;code&gt;#&lt;/code&gt; in the commit log template yourself, if you do this).</source>
          <target state="translated">Этот параметр отменяет значение по умолчанию параметра &lt;code&gt;--cleanup&lt;/code&gt; в &lt;code&gt;git commit&lt;/code&gt; . Подробнее см. &lt;a href=&quot;git-commit&quot;&gt;Git-commit [1]&lt;/a&gt; . Изменение значения по умолчанию может быть полезно, когда вы всегда хотите сохранить в своем сообщении журнала строки, начинающиеся с символа комментария &lt;code&gt;#&lt;/code&gt; , и в этом случае вам нужно будет выполнить &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; (обратите внимание, что вам придется удалить строки справки, которые начинаются с &lt;code&gt;#&lt;/code&gt; в шаблоне журнала фиксации самостоятельно, если вы это сделаете).</target>
        </trans-unit>
        <trans-unit id="e85001143ab4f6109a8db79b80d46592a3792b5e" translate="yes" xml:space="preserve">
          <source>This setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored given the colors if the line was introduced before the given timestamp, overwriting older timestamped colors.</source>
          <target state="translated">Данная настройка должна быть установлена в виде разделенного запятыми списка настроек цвета и даты,начиная и заканчивая цветом,даты должны быть установлены от самых старых до самых новых.Метаданные будут окрашиваться в цвета,если строка была введена до заданной метки времени,перезаписывая старые метки времени.</target>
        </trans-unit>
        <trans-unit id="1b39995bc064271da90ffd3401f4ace36766db6f" translate="yes" xml:space="preserve">
          <source>This setting writes a JSON-based format that is suited for machine interpretation. See &lt;code&gt;GIT_TRACE2&lt;/code&gt; for available trace output options and &lt;a href=&quot;api-trace2&quot;&gt;Trace2 documentation&lt;/a&gt; for full details.</source>
          <target state="translated">Этот параметр записывает формат на основе JSON, который подходит для машинной интерпретации. См. &lt;code&gt;GIT_TRACE2&lt;/code&gt; для доступных опций вывода трассировки и &lt;a href=&quot;api-trace2&quot;&gt;документацию Trace2&lt;/a&gt; для полной информации.</target>
        </trans-unit>
        <trans-unit id="d727921c238e28668ffb0dd7e4775077e3d6b368" translate="yes" xml:space="preserve">
          <source>This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not symlinks and needn&amp;rsquo;t be resolved; e.g., &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt;.</source>
          <target state="translated">Это должен быть список абсолютных путей, разделенных двоеточиями. Если установлено, это список каталогов, в которые Git не должен открывать chdir при поиске каталога репозитория (полезно для исключения медленно загружающихся сетевых каталогов). Он не исключает текущий рабочий каталог или GIT_DIR, установленный в командной строке или в среде. Обычно Git должен прочитать записи в этом списке и разрешить любую символическую ссылку, которая может присутствовать, чтобы сравнить их с текущим каталогом. Однако, если даже этот доступ медленный, вы можете добавить пустую запись в список, чтобы сообщить Git, что последующие записи не являются символическими ссылками и не нуждаются в разрешении; например, &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02391ad98329bedcf2ddfbe7ebdef774e4e7cc67" translate="yes" xml:space="preserve">
          <source>This should help you to submit patches inline using KMail.</source>
          <target state="translated">Это должно помочь вам отправить патчи в KMail.</target>
        </trans-unit>
        <trans-unit id="dc65a8c75ec971d079e04ac05264e8ee2fb908c8" translate="yes" xml:space="preserve">
          <source>This should make &quot;--pretty=oneline&quot; a whole lot more readable for people using 80-column terminals.</source>
          <target state="translated">Это должно сделать &quot;--pretty=oneline&quot; намного более читабельным для людей,использующих 80-колоночные терминалы.</target>
        </trans-unit>
        <trans-unit id="cda899a68420b48633046b1cef20e4960b467a9e" translate="yes" xml:space="preserve">
          <source>This should make it easy to look up svn log messages when svn users refer to -r/--revision numbers.</source>
          <target state="translated">Это должно упростить поиск сообщений журнала svn,когда пользователи svn ссылаются на номера -r/--re-revision.</target>
        </trans-unit>
        <trans-unit id="3fce0b9f9a8369808848ec3f066c1735323bb111" translate="yes" xml:space="preserve">
          <source>This should not be confused with the &lt;code&gt;ours&lt;/code&gt; merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring &lt;code&gt;our&lt;/code&gt; history contains all that happened in it.</source>
          <target state="translated">Это не следует путать с &lt;code&gt;ours&lt;/code&gt; стратегией слияния, которая даже не смотрит на то, что вообще содержит другое дерево. Оно отбрасывает все, что делало другое дерево, заявляя, что &lt;code&gt;our&lt;/code&gt; история содержит все, что с ним произошло.</target>
        </trans-unit>
        <trans-unit id="70d0ce2d7e7f48cdf303b28228ad271bde0b97ac" translate="yes" xml:space="preserve">
          <source>This shows that our resolved version deleted &quot;Hello world&quot; from the first parent, deleted &quot;Goodbye&quot; from the second parent, and added &quot;Goodbye world&quot;, which was previously absent from both.</source>
          <target state="translated">Это показывает,что наша разрешенная версия удалила &quot;Hello world&quot; из первого родителя,удалила &quot;Goodbye&quot; из второго родителя и добавила &quot;Goodbye world&quot;,который ранее отсутствовал в обоих.</target>
        </trans-unit>
        <trans-unit id="e0fbc89a9eb1f686d88b41839c951cd18b86bf5e" translate="yes" xml:space="preserve">
          <source>This shows that you can do without a run script if you write the test on a single line.</source>
          <target state="translated">Это показывает,что вы можете обойтись без запуска скрипта,если напишете тест на одной строке.</target>
        </trans-unit>
        <trans-unit id="f580a082428b40358ee35f346bb87b38bbd6e3f8" translate="yes" xml:space="preserve">
          <source>This shows the change between HEAD and index (i.e. what will be committed if you say &lt;code&gt;git commit&lt;/code&gt;), and between index and working tree files (i.e. what you could stage further before &lt;code&gt;git commit&lt;/code&gt; using &lt;code&gt;git add&lt;/code&gt;) for each path. A sample output looks like this:</source>
          <target state="translated">Это показывает изменение между HEAD и индексом (то есть, что будет зафиксировано, если вы скажете &lt;code&gt;git commit&lt;/code&gt; ), а также между индексом и файлами рабочего дерева (то есть что вы могли бы подготовить дальше перед &lt;code&gt;git commit&lt;/code&gt; с помощью &lt;code&gt;git add&lt;/code&gt; ) для каждого пути. Пример вывода выглядит так:</target>
        </trans-unit>
        <trans-unit id="cdedf9c4235065dcc3b6a065543c259879fefa6b" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Input ignore patterns&amp;gt;&amp;gt;&quot; prompt. You can input space-separated patterns to exclude files and directories from deletion. E.g. &quot;*.c *.h&quot; will excludes files end with &quot;.c&quot; and &quot;.h&quot; from deletion. When you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">Это покажет файлы и каталоги, которые нужно удалить, и выдаст запрос &amp;laquo;Шаблоны игнорирования ввода &amp;gt;&amp;gt;&amp;raquo;. Вы можете ввести шаблоны, разделенные пробелами, чтобы исключить файлы и каталоги из удаления. Например, &amp;laquo;* .c * .h&amp;raquo; исключает файлы, заканчивающиеся на &amp;laquo;.c&amp;raquo; и &amp;laquo;.h&amp;raquo;, из удаления. Если вас устраивает отфильтрованный результат, нажмите ENTER (пусто), чтобы вернуться в главное меню.</target>
        </trans-unit>
        <trans-unit id="d76da1518821bfa115def32fd19d8e8b1e73d979" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Select items to delete&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; like this, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining items are selected. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything. Also when you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">Это показывает файлы и каталоги, которые нужно удалить, и выдает запрос &amp;laquo;Выберите элементы для удаления &amp;gt;&amp;gt;&amp;raquo;. Когда подсказка заканчивается двойным &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , как это, вы можете сделать более одного выбора, объединенные пробелом или запятой. Также вы можете сказать диапазоны. Например, &amp;laquo;2-5 7,9&amp;raquo; для выбора 2,3,4,5,7,9 из списка. Если второе число в диапазоне опущено, выбираются все остальные элементы. Например, &amp;laquo;7-&amp;raquo;, чтобы выбрать 7,8,9 из списка. Вы можете сказать &lt;code&gt;*&lt;/code&gt; , чтобы выбрать все. Также, когда вас устраивает отфильтрованный результат, нажмите ENTER (пусто), чтобы вернуться в главное меню.</target>
        </trans-unit>
        <trans-unit id="53f59db63b45945049b0fe262d831991c1cb4a8d" translate="yes" xml:space="preserve">
          <source>This shows the status information and issues an &quot;Update&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining patches are taken. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything.</source>
          <target state="translated">При этом отображается информация о состоянии и появляется запрос &amp;laquo;Обновить &amp;gt;&amp;gt;&amp;raquo;. Когда подсказка заканчивается двойным &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , вы можете сделать более одного выбора, объединенные пробелом или запятой. Также вы можете сказать диапазоны. Например, &amp;laquo;2-5 7,9&amp;raquo; для выбора 2,3,4,5,7,9 из списка. Если второе число в диапазоне опущено, все оставшиеся исправления будут взяты. Например, &amp;laquo;7-&amp;raquo;, чтобы выбрать 7,8,9 из списка. Вы можете сказать &lt;code&gt;*&lt;/code&gt; , чтобы выбрать все.</target>
        </trans-unit>
        <trans-unit id="728eb7da1f0f1bff86889f4ac114a7967bd3817f" translate="yes" xml:space="preserve">
          <source>This snapshot is now stored in a temporary staging area which Git calls the &quot;index&quot;. You can permanently store the contents of the index in the repository with &lt;code&gt;git commit&lt;/code&gt;:</source>
          <target state="translated">Этот снимок теперь хранится во временной промежуточной области, которую Git называет &amp;laquo;индексом&amp;raquo;. Вы можете постоянно хранить содержимое индекса в репозитории с помощью &lt;code&gt;git commit&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dfa3a419f48a4609a0668c69a143f543612e713a" translate="yes" xml:space="preserve">
          <source>This solution is not 100% bulletproof, in the sense that if some project has a named ref (branch, tag) starting with &lt;code&gt;git/&lt;/code&gt;, then paths such as</source>
          <target state="translated">Это решение не является на 100% пуленепробиваемым в том смысле, что если у какого-либо проекта есть именованный ref (ветка, тег), начинающийся с &lt;code&gt;git/&lt;/code&gt; , то пути, такие как</target>
        </trans-unit>
        <trans-unit id="02da975953020f9ebbe3388889e8a8406f05d0c7" translate="yes" xml:space="preserve">
          <source>This step and the next one could be combined into a single step with &quot;checkout -b my2.6.14 v2.6.14&quot;.</source>
          <target state="translated">Этот и следующий шаг можно объединить в один с &quot;checkout -b my2.6.14 v2.6.14&quot;.</target>
        </trans-unit>
        <trans-unit id="9b0b980e437fd3274de63464aa9184e42833d899" translate="yes" xml:space="preserve">
          <source>This suffix is also accepted when spelled in uppercase, and means the same thing no matter the case.</source>
          <target state="translated">Этот суффикс также принимается при написании в верхнем регистре и означает одно и то же независимо от случая.</target>
        </trans-unit>
        <trans-unit id="01f381d8f83cae139b7e7ff06573574ebdbc8086" translate="yes" xml:space="preserve">
          <source>This supersedes the &lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;post-update&lt;/em&gt;&lt;/a&gt; hook in that it gets both old and new values of all the refs in addition to their names.</source>
          <target state="translated">Это заменяет ловушку &lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;post-update,&lt;/em&gt;&lt;/a&gt; поскольку она получает как старые, так и новые значения всех ссылок в дополнение к их именам.</target>
        </trans-unit>
        <trans-unit id="6339f7da558022ed0ae10f566dd01f30bb047e19" translate="yes" xml:space="preserve">
          <source>This synchronizes your public repository to match the named branch head (i.e. &lt;code&gt;master&lt;/code&gt; in this case) and objects reachable from them in your current repository.</source>
          <target state="translated">Это синхронизирует ваш общедоступный репозиторий в соответствии с заголовком названной ветки (то есть &lt;code&gt;master&lt;/code&gt; в данном случае) и объектами, доступными из них в вашем текущем репозитории.</target>
        </trans-unit>
        <trans-unit id="0012e2584fc653cc03e6dda35ea11cbdc9f6c1a2" translate="yes" xml:space="preserve">
          <source>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path &lt;code&gt;foo:bar&lt;/code&gt; could be specified as an absolute path or &lt;code&gt;./foo:bar&lt;/code&gt; to avoid being misinterpreted as an ssh url.</source>
          <target state="translated">Этот синтаксис распознается только в том случае, если перед первым двоеточием нет косой черты. Это помогает различать локальный путь, содержащий двоеточие. Например, локальный путь &lt;code&gt;foo:bar&lt;/code&gt; может быть указан как абсолютный путь или &lt;code&gt;./foo:bar&lt;/code&gt; , чтобы избежать ошибочной интерпретации как URL-адрес ssh.</target>
        </trans-unit>
        <trans-unit id="9f5d9872e03f1e6dd55415fa2249d9c84ea6f738" translate="yes" xml:space="preserve">
          <source>This takes a text file each of whose lines is a shell glob pattern. Filepairs that match a glob pattern on an earlier line in the file are output before ones that match a later line, and filepairs that do not match any glob pattern are output last.</source>
          <target state="translated">Для этого берется текстовый файл,каждая строка которого представляет собой шаблон оболочки.Пары файлов,которые соответствуют шаблону глобуса на более ранней строке файла,выводятся раньше,чем те,которые соответствуют более поздней строке,а пары файлов,которые не соответствуют шаблону глобуса,выводятся последними.</target>
        </trans-unit>
        <trans-unit id="b169549655fddd825e67d14c1591493d6ac0be03" translate="yes" xml:space="preserve">
          <source>This target is intended to be more of a summary (like GIT_TRACE) and less detailed than the other targets. It ignores thread, region, and data messages, for example.</source>
          <target state="translated">Эта цель должна быть более краткой (как GIT_TRACE)и менее детализированной,чем другие цели.Она игнорирует,например,сообщения о потоке,регионе и данных.</target>
        </trans-unit>
        <trans-unit id="49bec15344e0cef74269dabec868d060f4c1b07d" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that no commit after &lt;code&gt;v2.5&lt;/code&gt;, up to and including &lt;code&gt;v2.6&lt;/code&gt;, should be tested.</source>
          <target state="translated">Это говорит процессу пополам, что никакие &lt;code&gt;v2.5&lt;/code&gt; после v2.5 , вплоть до &lt;code&gt;v2.6&lt;/code&gt; включительно , не должны тестироваться.</target>
        </trans-unit>
        <trans-unit id="1842bab1269e00a8bf77d06ee23570861225cc48" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that the commits between &lt;code&gt;v2.5&lt;/code&gt; and &lt;code&gt;v2.6&lt;/code&gt; (inclusive) should be skipped.</source>
          <target state="translated">Это говорит процессу пополам, что коммиты между &lt;code&gt;v2.5&lt;/code&gt; и &lt;code&gt;v2.6&lt;/code&gt; (включительно) должны быть пропущены.</target>
        </trans-unit>
        <trans-unit id="fb42c5eea9f7afe3662a07fd6af3c3105ab04e8f" translate="yes" xml:space="preserve">
          <source>This tells you that the immediately following version of the file was &quot;newsha&quot;, and that the immediately preceding version was &quot;oldsha&quot;. You also know the commit messages that went with the change from oldsha to 4b9458b and with the change from 4b9458b to newsha.</source>
          <target state="translated">Это говорит о том,что непосредственно следующая версия файла была &quot;newsha&quot;,а непосредственно предшествующая версия-&quot;oldsha&quot;.Вы также знаете о сообщениях коммита,которые пошли с изменением с Oldsha на 4b9458b и с изменением с 4b9458b на newsha.</target>
        </trans-unit>
        <trans-unit id="8f1179423f3ea23a6c9e525ef159db41c1155b6a" translate="yes" xml:space="preserve">
          <source>This transformation is used to detect renames and copies, and is controlled by the -M option (to detect renames) and the -C option (to detect copies as well) to the &lt;code&gt;git diff-*&lt;/code&gt; commands. If the input contained these filepairs:</source>
          <target state="translated">Это преобразование используется для обнаружения переименований и копий и управляется опцией -M (для обнаружения переименований) и опцией -C (также для обнаружения копий) команд &lt;code&gt;git diff-*&lt;/code&gt; . Если входные данные содержали эти файловые пары:</target>
        </trans-unit>
        <trans-unit id="573190bccf8f2a4ea6fc33eedd23b4b8fc3f90f8" translate="yes" xml:space="preserve">
          <source>This transformation is used to merge filepairs broken by diffcore-break, and not transformed into rename/copy by diffcore-rename, back into a single modification. This always runs when diffcore-break is used.</source>
          <target state="translated">Данное преобразование используется для объединения пар файлов,разбитых diffcore-break,и не преобразованных в переименование/копирование по diffcore-rename,обратно в единую модификацию.Это всегда выполняется при использовании diffcore-break.</target>
        </trans-unit>
        <trans-unit id="448726c2164ad1aa28f4d84dcd657bc466764287" translate="yes" xml:space="preserve">
          <source>This transformation limits the set of filepairs to those that change specified strings between the preimage and the postimage in a certain way. -S&amp;lt;block of text&amp;gt; and -G&amp;lt;regular expression&amp;gt; options are used to specify different ways these strings are sought.</source>
          <target state="translated">Это преобразование ограничивает набор файловых пар теми, которые изменяют определенные строки между прообразом и постимажем определенным образом. Параметры -S &amp;lt;блок текста&amp;gt; и -G &amp;lt;регулярное выражение&amp;gt; используются для указания различных способов поиска этих строк.</target>
        </trans-unit>
        <trans-unit id="eb01f7c28a2e42a179d9ca76727e0a7db6bb8dce" translate="yes" xml:space="preserve">
          <source>This transport can be used for both uploading and downloading, and requires you to have a log-in privilege over &lt;code&gt;ssh&lt;/code&gt; to the remote machine. It finds out the set of objects the other side lacks by exchanging the head commits both ends have and transfers (close to) minimum set of objects. It is by far the most efficient way to exchange Git objects between repositories.</source>
          <target state="translated">Этот транспорт может использоваться как для загрузки, так и для скачивания, и требует, чтобы у вас были права входа в систему через &lt;code&gt;ssh&lt;/code&gt; на удаленном компьютере. Он определяет набор объектов, которых не хватает другой стороне, путем обмена головными коммитами, которые есть на обоих концах, и передачи (близкого к) минимального набора объектов. На сегодняшний день это наиболее эффективный способ обмена объектами Git между репозиториями.</target>
        </trans-unit>
        <trans-unit id="1e93313475dc2966a9b364d25d3e63ddb92cd35d" translate="yes" xml:space="preserve">
          <source>This transport is the same as SSH transport but uses &lt;code&gt;sh&lt;/code&gt; to run both ends on the local machine instead of running other end on the remote machine via &lt;code&gt;ssh&lt;/code&gt;.</source>
          <target state="translated">Этот транспорт такой же, как транспорт SSH, но использует &lt;code&gt;sh&lt;/code&gt; для запуска обоих концов на локальном компьютере вместо запуска другого конца на удаленном компьютере через &lt;code&gt;ssh&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="187c060b77919e40b0db07be6c4444d6bedf0f1f" translate="yes" xml:space="preserve">
          <source>This transport was designed for anonymous downloading. Like SSH transport, it finds out the set of objects the downstream side lacks and transfers (close to) minimum set of objects.</source>
          <target state="translated">Этот транспорт был разработан для анонимной загрузки.Как и транспорт SSH,он обнаруживает набор объектов,которых недостает нисходящей стороне,и передает (близкий к)минимальный набор объектов.</target>
        </trans-unit>
        <trans-unit id="a843c4941e9eb68216876c91a59842ae7d058faa" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to import a new project into Git, make changes to it, and share changes with other developers.</source>
          <target state="translated">В этом руководстве объясняется,как импортировать новый проект в Git,вносить в него изменения и делиться изменениями с другими разработчиками.</target>
        </trans-unit>
        <trans-unit id="586b98337ae35b657ccc9687b72106b49b3b174b" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to use the &quot;core&quot; Git commands to set up and work with a Git repository.</source>
          <target state="translated">Данное руководство объясняет,как использовать команды &quot;core&quot; Git'а для настройки и работы с Git-репозиторием.</target>
        </trans-unit>
        <trans-unit id="4f3b7287fc4739a451de38537fb0637003a134c1" translate="yes" xml:space="preserve">
          <source>This tutorial should be enough to perform basic distributed revision control for your projects. However, to fully understand the depth and power of Git you need to understand two simple ideas on which it is based:</source>
          <target state="translated">Этого руководства должно быть достаточно,чтобы выполнить базовый распределённый контроль над ревизиями для ваших проектов.Однако,чтобы полностью понять глубину и мощь Git'а,вам необходимо понять две простые идеи,на которых он основан:</target>
        </trans-unit>
        <trans-unit id="50b7797bad77b49520127714ff8a716873aad978" translate="yes" xml:space="preserve">
          <source>This updates (or creates, as necessary) branches &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; in the local repository by fetching from the branches (respectively) &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;maint&lt;/code&gt; from the remote repository.</source>
          <target state="translated">Это обновляет (или создает, при необходимости) ветки &lt;code&gt;pu&lt;/code&gt; и &lt;code&gt;tmp&lt;/code&gt; в локальном репозитории, извлекая из ветвей (соответственно) &lt;code&gt;pu&lt;/code&gt; и &lt;code&gt;maint&lt;/code&gt; из удаленного репозитория.</target>
        </trans-unit>
        <trans-unit id="3e7d31bbe83aa073e1058fe02ef8026a34345709" translate="yes" xml:space="preserve">
          <source>This updates (or creates, as necessary) branches &lt;code&gt;seen&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; in the local repository by fetching from the branches (respectively) &lt;code&gt;seen&lt;/code&gt; and &lt;code&gt;maint&lt;/code&gt; from the remote repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ac0b727096d7231e8fdcdd112d1a04551c8ca8" translate="yes" xml:space="preserve">
          <source>This used to be the default, but not since Git 2.0 (&lt;code&gt;simple&lt;/code&gt; is the new default).</source>
          <target state="translated">Раньше это было по умолчанию, но не со времен Git 2.0 ( &lt;code&gt;simple&lt;/code&gt; - новое по умолчанию).</target>
        </trans-unit>
        <trans-unit id="fd75f35034e73b98112aaaf4198ee488b9e51804" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but combining it with the &lt;code&gt;--interactive&lt;/code&gt; option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).</source>
          <target state="translated">Здесь используется механизм &lt;code&gt;--interactive&lt;/code&gt; внутри, но явное объединение его с параметром &lt;code&gt;--interactive&lt;/code&gt; обычно не является хорошей идеей, если вы не знаете, что делаете (см. ОШИБКИ ниже).</target>
        </trans-unit>
        <trans-unit id="665eaff82148d49a545a97a7903a8bf0d3754608" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but it can be run without an explicit &lt;code&gt;--interactive&lt;/code&gt;.</source>
          <target state="translated">Здесь используется механизм &lt;code&gt;--interactive&lt;/code&gt; внутри, но его можно запускать без явного &lt;code&gt;--interactive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a59444b879ae5151f30b1cffe08974240ac7bdc" translate="yes" xml:space="preserve">
          <source>This uses the same two-dot range notation we saw earlier with &lt;code&gt;git log&lt;/code&gt;.</source>
          <target state="translated">Здесь используется то же обозначение диапазона из двух точек, которое мы видели ранее с &lt;code&gt;git log&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94dc29f5a82c88ac8ea06389eebe7535e89a6fb1" translate="yes" xml:space="preserve">
          <source>This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.</source>
          <target state="translated">Это значение по умолчанию верно в репозитории,который имеет связанный с ним рабочий каталог,и ложно по умолчанию в &quot;пустом&quot; репозитории.</target>
        </trans-unit>
        <trans-unit id="73a34f84ecc165ae3643b28ecca4c6c41f197412" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) and &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt;.</source>
          <target state="translated">Эта переменная может использоваться для ограничения битов разрешений записей архива tar. По умолчанию 0002, что отключает мировой бит записи. Специальное значение &amp;laquo;user&amp;raquo; указывает, что вместо этого будет использоваться umask архивирующего пользователя. См. Umask (2) и &lt;a href=&quot;git-archive&quot;&gt;git-archive [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="63a384d932515032afb2060852ce18cd5598c9ca" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) for details. If &lt;code&gt;--remote&lt;/code&gt; is used then only the configuration of the remote repository takes effect.</source>
          <target state="translated">Эта переменная может использоваться для ограничения битов разрешений записей архива tar. По умолчанию 0002, что отключает мировой бит записи. Специальное значение &amp;laquo;user&amp;raquo; указывает, что вместо этого будет использоваться umask архивирующего пользователя. См. Подробности в umask (2). Если используется &lt;code&gt;--remote&lt;/code&gt; , действует только конфигурация удаленного репозитория.</target>
        </trans-unit>
        <trans-unit id="0afce327e7d4311118de1c5dc2faa8fa7a291053" translate="yes" xml:space="preserve">
          <source>This variable controls the event target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">Эта переменная управляет целевым назначением события. Это может быть переопределено переменной окружения &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; . В следующей таблице показаны возможные значения.</target>
        </trans-unit>
        <trans-unit id="b3073c2a2c3930628fae47eb515e2fe5729910f0" translate="yes" xml:space="preserve">
          <source>This variable controls the normal target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">Эта переменная контролирует нормальный целевой пункт назначения. Это может быть переопределено переменной окружения &lt;code&gt;GIT_TRACE2&lt;/code&gt; . В следующей таблице показаны возможные значения.</target>
        </trans-unit>
        <trans-unit id="ab644894061fa15fc115b6d355d07c2965277303" translate="yes" xml:space="preserve">
          <source>This variable controls the performance target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">Эта переменная управляет целевым назначением производительности. Это может быть переопределено переменной окружения &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; . В следующей таблице показаны возможные значения.</target>
        </trans-unit>
        <trans-unit id="53008d90e6aae985c2e7839a77d7b54894ce429e" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of branches when displayed by &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default. See &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt; field names for valid values.</source>
          <target state="translated">Эта переменная контролирует порядок сортировки веток при отображении с помощью &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; . Без опции &amp;laquo;--sort = &amp;lt;значение&amp;gt;&amp;raquo; значение этой переменной будет использоваться по умолчанию. См. Допустимые значения в именах полей &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ea1c7eb75a360c1f9f69915dbc32e427ddfb7ced" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of tags when displayed by &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default.</source>
          <target state="translated">Эта переменная управляет порядком сортировки тегов при отображении &lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt; . Без опции &amp;laquo;--sort = &amp;lt;значение&amp;gt;&amp;raquo; значение этой переменной будет использоваться по умолчанию.</target>
        </trans-unit>
        <trans-unit id="c2680b6925a4a160ca8f3fee892cc23ec9be5f4f" translate="yes" xml:space="preserve">
          <source>This variable determines the default value for variables such as &lt;code&gt;color.diff&lt;/code&gt; and &lt;code&gt;color.grep&lt;/code&gt; that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt; if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;always&lt;/code&gt; if you want all output not intended for machine consumption to use color, to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.</source>
          <target state="translated">Эта переменная определяет значение по умолчанию для таких переменных, как &lt;code&gt;color.diff&lt;/code&gt; и &lt;code&gt;color.grep&lt;/code&gt; , которые управляют использованием цвета для каждого семейства команд. Его область действия будет расширяться по мере того, как все больше команд изучают конфигурацию, чтобы установить значение по умолчанию для параметра &lt;code&gt;--color&lt;/code&gt; . Установите для него значение &lt;code&gt;false&lt;/code&gt; или &lt;code&gt;never&lt;/code&gt; если вы предпочитаете, чтобы команды Git не использовали цвет, если он не включен явно в какой-либо другой конфигурации или с параметром &lt;code&gt;--color&lt;/code&gt; . Установите его на &lt;code&gt;always&lt;/code&gt; , если вы хотите, чтобы весь вывод, не предназначенный для использования машиной, использовал цвет, на &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;auto&lt;/code&gt; (это значение по умолчанию, начиная с Git 1.8.4), если вы хотите, чтобы такой вывод использовал цвет при записи в терминал.</target>
        </trans-unit>
        <trans-unit id="2eb6f1e33d90fc7fb4373fa1793932292fbc650d" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;receive-pack&lt;/code&gt; (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by &lt;code&gt;git push&lt;/code&gt; is rejected.</source>
          <target state="translated">Эта переменная такая же, как и &lt;code&gt;transfer.hideRefs&lt;/code&gt; , но применяется только к &lt;code&gt;receive-pack&lt;/code&gt; (и поэтому влияет на отправку, но не на выборку). Попытка обновить или удалить скрытую ссылку с помощью &lt;code&gt;git push&lt;/code&gt; отклонена.</target>
        </trans-unit>
        <trans-unit id="763a368531eb9d8bc40e93c6334e049f21620c45" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;upload-pack&lt;/code&gt; (and so affects only fetches, not pushes). An attempt to fetch a hidden ref by &lt;code&gt;git fetch&lt;/code&gt; will fail. See also &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt;.</source>
          <target state="translated">Эта переменная такая же, как и &lt;code&gt;transfer.hideRefs&lt;/code&gt; , но применяется только к &lt;code&gt;upload-pack&lt;/code&gt; (и поэтому влияет только на выборку, а не на отправку). Попытка получить скрытую ссылку с помощью &lt;code&gt;git fetch&lt;/code&gt; завершится ошибкой. См. Также &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="75aa35a44ffd767e8a239dc01347d150ce1e39ed" translate="yes" xml:space="preserve">
          <source>This variable matters only when using persistent web environments that serve multiple requests using single gitweb instance, like mod_perl, FastCGI or Plackup.</source>
          <target state="translated">Эта переменная имеет значение только при использовании постоянных веб-окружений,которые обслуживают несколько запросов с помощью одного экземпляра gitweb,например mod_perl,FastCGI или Plackup.</target>
        </trans-unit>
        <trans-unit id="c0526214b5c55d639fefd6a92d93b97ec2455930" translate="yes" xml:space="preserve">
          <source>This variable specifies a shell command through which the tar output generated by &lt;code&gt;git archive&lt;/code&gt; should be piped. The command is executed using the shell with the generated tar file on its standard input, and should produce the final output on its standard output. Any compression-level options will be passed to the command (e.g., &quot;-9&quot;). An output file with the same extension as &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; will be use this format if no other format is given.</source>
          <target state="translated">Эта переменная определяет команду оболочки, через которую должен передаваться вывод tar, сгенерированный &lt;code&gt;git archive&lt;/code&gt; . Команда выполняется с использованием оболочки со сгенерированным файлом tar на стандартном входе и должна выдавать окончательный результат на стандартный вывод. Все параметры уровня сжатия будут переданы команде (например, &amp;laquo;-9&amp;raquo;). Выходной файл с тем же расширением, что и &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; , будет использовать этот формат, если не указан другой формат.</target>
        </trans-unit>
        <trans-unit id="99ffcf0d1fc58b3934082bac9786637cf3a8cdad" translate="yes" xml:space="preserve">
          <source>This view is similar to &lt;code&gt;shortlog&lt;/code&gt; view.</source>
          <target state="translated">Это представление похоже на представление &lt;code&gt;shortlog&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16ae6576174eeb48325f0bfa3042bcb20d29d417" translate="yes" xml:space="preserve">
          <source>This was not the case in the initial release of this feature in v2.13.0, which only matched the realpath version. Configuration that wants to be compatible with the initial release of this feature needs to either specify only the realpath version, or both versions.</source>
          <target state="translated">Этого не было в первоначальном релизе этой функции в версии v2.13.0,которая соответствовала только версии realpath.Конфигурация,которая хочет быть совместимой с первоначальным выпуском этой функции,должна либо указывать только версию realpath,либо обе версии.</target>
        </trans-unit>
        <trans-unit id="7c8d457b197b5558b7abfe068bcd1974205f94ad" translate="yes" xml:space="preserve">
          <source>This was optional in prior versions of git, but now it is the default. You can use &lt;code&gt;--no-utf8&lt;/code&gt; to override this.</source>
          <target state="translated">Это было необязательно в предыдущих версиях git, но теперь это значение по умолчанию. Вы можете использовать &lt;code&gt;--no-utf8&lt;/code&gt; , чтобы переопределить это.</target>
        </trans-unit>
        <trans-unit id="314df942d006c94c85d3e8c8bfe0a0b8ef8308d1" translate="yes" xml:space="preserve">
          <source>This will again prompt you for a message describing the change, and then record a new version of the project.</source>
          <target state="translated">При этом снова появится сообщение с описанием изменения,а затем будет записана новая версия проекта.</target>
        </trans-unit>
        <trans-unit id="53cca56aaa41c3093032e1d720cb620b22717e06" translate="yes" xml:space="preserve">
          <source>This will cache the result of running &quot;exif&quot; on each blob indefinitely. If you change the textconv config variable for a diff driver, Git will automatically invalidate the cache entries and re-run the textconv filter. If you want to invalidate the cache manually (e.g., because your version of &quot;exif&quot; was updated and now produces better output), you can remove the cache manually with &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; (where &quot;jpg&quot; is the name of the diff driver, as in the example above).</source>
          <target state="translated">Это будет кэшировать результат выполнения exif для каждого большого двоичного объекта на неопределенный срок. Если вы измените переменную конфигурации textconv для драйвера diff, Git автоматически аннулирует записи кеша и повторно запустит фильтр textconv. Если вы хотите аннулировать кеш вручную (например, потому что ваша версия exif была обновлена ​​и теперь обеспечивает лучший результат), вы можете удалить кеш вручную с помощью &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; (где &quot; jpg &quot;- это имя драйвера diff, как в примере выше).</target>
        </trans-unit>
        <trans-unit id="3d17cc7dd2b4aac7e00ecd2628dbb99eefd074c7" translate="yes" xml:space="preserve">
          <source>This will cause Git to generate &lt;code&gt;Binary files differ&lt;/code&gt; (or a binary patch, if binary patches are enabled) instead of a regular diff.</source>
          <target state="translated">Это приведет к тому, что Git будет генерировать &lt;code&gt;Binary files differ&lt;/code&gt; двоичные файлы (или двоичный патч, если бинарные патчи включены) вместо обычного diff.</target>
        </trans-unit>
        <trans-unit id="dac66330b2bd98fcf90352c4cbeba694c8f4feb3" translate="yes" xml:space="preserve">
          <source>This will check out the currently cached copy of &lt;code&gt;Makefile&lt;/code&gt; into the file &lt;code&gt;.merged-Makefile&lt;/code&gt;.</source>
          <target state="translated">Это проверит &lt;code&gt;.merged-Makefile&lt;/code&gt; кэшированную копию &lt;code&gt;Makefile&lt;/code&gt; в файл .merged-Makefile .</target>
        </trans-unit>
        <trans-unit id="9acb73cd9d17d8ef0d5dfd6af35ea9d0a50c12ab" translate="yes" xml:space="preserve">
          <source>This will create a new commit which undoes the change in HEAD. You will be given a chance to edit the commit message for the new commit.</source>
          <target state="translated">Это создаст новый коммит,который отменит изменение в HEAD.Вам будет предоставлена возможность отредактировать сообщение о коммите для нового коммита.</target>
        </trans-unit>
        <trans-unit id="85437cd96f5cff3dd194d542498fd954d1bf1e01" translate="yes" xml:space="preserve">
          <source>This will define a remote called &quot;origin&quot; in the resulting repository that lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will have an entry like this:</source>
          <target state="translated">Это определит удалённое устройство,называемое &quot;origin&quot; (происхождение)в результирующем репозитории,которое позволит вам извлекать и вытаскивать из связки.Файл $GIT_DIR/config в R2 будет иметь такую запись:</target>
        </trans-unit>
        <trans-unit id="2986121c6e711f05b2ed0ba772dedbd8c66503ff" translate="yes" xml:space="preserve">
          <source>This will error out if $REV is empty or not a valid revision.</source>
          <target state="translated">Это приведет к ошибке,если $REV пустая или недействительная ревизия.</target>
        </trans-unit>
        <trans-unit id="c8b7e8566771f37a03bc25eaec95675ffe82ba31" translate="yes" xml:space="preserve">
          <source>This will export the whole repository and import it into the existing empty repository. Except for reencoding commits that are not in UTF-8, it would be a one-to-one mirror.</source>
          <target state="translated">При этом будет экспортирован весь репозиторий и импортирован в существующий пустой репозиторий.За исключением перекодирования коммитов,которые не в UTF-8,это будет зеркало один к одному.</target>
        </trans-unit>
        <trans-unit id="5f851e29f67384fe2f487309701055635453a02c" translate="yes" xml:space="preserve">
          <source>This will list what commits you must have in order to extract from the bundle and will error out if you do not have them.</source>
          <target state="translated">В этом списке будут перечислены коммиты,которые вы должны иметь для извлечения из пакета,и будут выданы ошибки,если у вас их нет.</target>
        </trans-unit>
        <trans-unit id="7ed8616207d4b6e51bdcbe1e7b524863a0139782" translate="yes" xml:space="preserve">
          <source>This will open your editor with a list of steps to be taken to perform your rebase.</source>
          <target state="translated">Это откроет ваш редактор со списком шагов,которые необходимо предпринять для выполнения перезагрузки.</target>
        </trans-unit>
        <trans-unit id="e9e68cbb3d1c11da9ad7575ebecc630d58996f10" translate="yes" xml:space="preserve">
          <source>This will prompt you for a commit message. You&amp;rsquo;ve now stored the first version of your project in Git.</source>
          <target state="translated">Вам будет предложено сообщение о фиксации. Теперь вы сохранили первую версию своего проекта в Git.</target>
        </trans-unit>
        <trans-unit id="9229da0c83ee0b71f5a22085b5f3b7e07e9ec55a" translate="yes" xml:space="preserve">
          <source>This will remove each of your commits from mywork, temporarily saving them as patches (in a directory named &lt;code&gt;.git/rebase-apply&lt;/code&gt;), update mywork to point at the latest version of origin, then apply each of the saved patches to the new mywork. The result will look like:</source>
          <target state="translated">Это удалит все ваши коммиты из моей работы, временно сохранив их как патчи (в каталоге с именем &lt;code&gt;.git/rebase-apply&lt;/code&gt; ), обновит mywork так, чтобы указывать на последнюю версию origin, а затем применит каждый из сохраненных патчей к новой моей работе , Результат будет выглядеть так:</target>
        </trans-unit>
        <trans-unit id="1c98be5284d00528a6b74a33ba778d044a767668" translate="yes" xml:space="preserve">
          <source>This will result in only b (a and c are cleared).</source>
          <target state="translated">Это приведет только к b (a и c очищаются).</target>
        </trans-unit>
        <trans-unit id="0385ed25689cd3e1167020ff6e8ba549d1603871" translate="yes" xml:space="preserve">
          <source>This will set the property &lt;code&gt;svn:keywords&lt;/code&gt; to &lt;code&gt;FreeBSD=%H&lt;/code&gt; for the file &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt;.</source>
          <target state="translated">Это установит для свойства &lt;code&gt;svn:keywords&lt;/code&gt; значение &lt;code&gt;FreeBSD=%H&lt;/code&gt; для файла &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61383e31770f578e5ee86310440dccd09a4e5008" translate="yes" xml:space="preserve">
          <source>This will show &quot;refs/heads/master&quot; but also &quot;refs/remote/other-repo/master&quot;, if such references exists.</source>
          <target state="translated">При этом будут показаны &quot;refs/heads/master&quot;,а также &quot;refs/remote/other-repo/master&quot;,если такие ссылки существуют.</target>
        </trans-unit>
        <trans-unit id="23dd2de32c54566f1df1adf9f6794600102b9c2b" translate="yes" xml:space="preserve">
          <source>This will start to clean, and you must confirm one by one in order to delete items. Please note that this action is not as efficient as the above two actions.</source>
          <target state="translated">Начнется очистка,для того чтобы удалить элементы,вы должны подтвердить это один за другим.Пожалуйста,обратите внимание,что это действие не так эффективно,как два вышеуказанных действия.</target>
        </trans-unit>
        <trans-unit id="9b7bbd24afc1c6a470a80ef47d5171b33809ea28" translate="yes" xml:space="preserve">
          <source>This works for any of the supported update procedures (&lt;code&gt;--checkout&lt;/code&gt;, &lt;code&gt;--rebase&lt;/code&gt;, etc.). The only change is the source of the target SHA-1. For example, &lt;code&gt;submodule update --remote --merge&lt;/code&gt; will merge upstream submodule changes into the submodules, while &lt;code&gt;submodule update
--merge&lt;/code&gt; will merge superproject gitlink changes into the submodules.</source>
          <target state="translated">Это работает для любой из поддерживаемых процедур обновления ( &lt;code&gt;--checkout&lt;/code&gt; , &lt;code&gt;--rebase&lt;/code&gt; и т. Д.). Единственное изменение - это источник целевого SHA-1. Например, &lt;code&gt;submodule update --remote --merge&lt;/code&gt; объединит изменения субмодулей восходящего потока с субмодулями, а &lt;code&gt;submodule update --merge&lt;/code&gt; объединит изменения суперпроекта gitlink с субмодулями.</target>
        </trans-unit>
        <trans-unit id="5a2ee7840b76b59e3aede30738fb578b292bc5f3" translate="yes" xml:space="preserve">
          <source>This works similarly to &lt;code&gt;svn update&lt;/code&gt; or &lt;code&gt;git pull&lt;/code&gt; except that it preserves linear history with &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt; for ease of dcommitting with &lt;code&gt;git svn&lt;/code&gt;.</source>
          <target state="translated">Это работает аналогично &lt;code&gt;svn update&lt;/code&gt; или &lt;code&gt;git pull&lt;/code&gt; , за исключением того, что сохраняет линейную историю с помощью &lt;code&gt;git rebase&lt;/code&gt; вместо &lt;code&gt;git merge&lt;/code&gt; для простоты dcommitting с помощью &lt;code&gt;git svn&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5bc6c0e59c3e651570d66e12101e9a57040fd659" translate="yes" xml:space="preserve">
          <source>This would leave only one merge commit when your topic branch is finally ready and merged into the master branch. This merge would require you to resolve the conflict, introduced by the commits marked with &lt;code&gt;*&lt;/code&gt;. However, this conflict is often the same conflict you resolved when you created the test merge you blew away. &lt;code&gt;git rerere&lt;/code&gt; helps you resolve this final conflicted merge using the information from your earlier hand resolve.</source>
          <target state="translated">Это оставит только одну фиксацию слияния, когда ваша тематическая ветка, наконец, будет готова и объединена с основной веткой. Это слияние потребует от вас разрешения конфликта, вызванного коммитами, отмеченными &lt;code&gt;*&lt;/code&gt; . Однако этот конфликт часто является тем же конфликтом, который вы разрешили при создании тестового слияния, которое вы удалили. &lt;code&gt;git rerere&lt;/code&gt; поможет вам разрешить это окончательное конфликтующее слияние, используя информацию из вашего предыдущего ручного разрешения.</target>
        </trans-unit>
        <trans-unit id="dcd6f908de988995d9fff4cafd75d14bc0785c1a" translate="yes" xml:space="preserve">
          <source>This would leave the merge result in &lt;code&gt;hello.c~2&lt;/code&gt; file, along with conflict markers if there are conflicts. After verifying the merge result makes sense, you can tell Git what the final merge result for this file is by:</source>
          <target state="translated">Это оставит результат слияния в файле &lt;code&gt;hello.c~2&lt;/code&gt; вместе с маркерами конфликта, если есть конфликты. Убедившись, что результат слияния имеет смысл, вы можете сообщить Git, каков окончательный результат слияния для этого файла:</target>
        </trans-unit>
        <trans-unit id="cf5b7c750a4b16617dfd7cff20be48990a9d7985" translate="yes" xml:space="preserve">
          <source>This:</source>
          <target state="translated">This:</target>
        </trans-unit>
        <trans-unit id="ee3cacca7314105556d3050112f523980e59f973" translate="yes" xml:space="preserve">
          <source>Those snapshots aren&amp;rsquo;t necessarily all arranged in a single line from oldest to newest; instead, work may simultaneously proceed along parallel lines of development, called &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;, which may merge and diverge.</source>
          <target state="translated">Эти снимки не обязательно располагаются в одной строке от самых старых до самых новых; вместо этого работа может идти одновременно по параллельным линиям развития, называемым &lt;a href=&quot;#def_branch&quot;&gt;ветвями&lt;/a&gt; , которые могут сливаться и расходиться.</target>
        </trans-unit>
        <trans-unit id="7a5a53a50d0fbac4f3a27d9d2d5853146557d940" translate="yes" xml:space="preserve">
          <source>Though not required, it&amp;rsquo;s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</source>
          <target state="translated">Хотя это и не обязательно, рекомендуется начинать сообщение фиксации с одной короткой (менее 50 символов) строки, обобщающей изменение, за которой следует пустая строка, а затем более подробное описание. Текст до первой пустой строки в сообщении фиксации рассматривается как заголовок фиксации, и этот заголовок используется во всем Git. Например, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt; превращает фиксацию в электронное письмо и использует заголовок в строке &amp;laquo;Тема&amp;raquo;, а остальную часть фиксации в теле.</target>
        </trans-unit>
        <trans-unit id="fdd6ea0498f5dbe48e6926bc8c91e77146fa2184" translate="yes" xml:space="preserve">
          <source>Though, according to Wikipedia &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">Хотя, согласно Википедии &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="18c9e3ce5bbbf77af11ba41f4d7a7d9b7a1aaa55" translate="yes" xml:space="preserve">
          <source>Thread Events</source>
          <target state="translated">События в области нитей</target>
        </trans-unit>
        <trans-unit id="8850eee2783cf53d0af71d524467316d7d06a850" translate="yes" xml:space="preserve">
          <source>Thread messages added to a thread-proc.</source>
          <target state="translated">Тематические сообщения,добавленные в поток-прок.</target>
        </trans-unit>
        <trans-unit id="1501e9d814d273ed34cc6b50f1b5e25add4ac049" translate="yes" xml:space="preserve">
          <source>Three other shorthands exist, particularly useful for merge commits, for naming a set that is formed by a commit and its parent commits.</source>
          <target state="translated">Существует три других сокращения,особенно полезных для объединения коммитов,для обозначения набора,который формируется коммитом и его родительскими коммитами.</target>
        </trans-unit>
        <trans-unit id="8e23a87c8354d34eb4b513798d76048267e22ae4" translate="yes" xml:space="preserve">
          <source>Three steps:</source>
          <target state="translated">Три шага:</target>
        </trans-unit>
        <trans-unit id="cf3d01be00b3333c6ca36b4d1bb0a1a1c357a43f" translate="yes" xml:space="preserve">
          <source>Throw-away integration</source>
          <target state="translated">Отталкивающая интеграция</target>
        </trans-unit>
        <trans-unit id="c4780f4837eebde8ca1de31df251ef05e2361eb2" translate="yes" xml:space="preserve">
          <source>Thunderbird</source>
          <target state="translated">Thunderbird</target>
        </trans-unit>
        <trans-unit id="d5e84648e0355ba1080675ff57a3c64a03a76a7c" translate="yes" xml:space="preserve">
          <source>Thunderbird in particular is known to be problematic. Thunderbird users may wish to visit this web page for more information: &lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&lt;/a&gt;</source>
          <target state="translated">В частности, известно, что Thunderbird вызывает проблемы. Пользователи Thunderbird могут захотеть посетить эту веб-страницу для получения дополнительной информации: &lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da473e9b687406079cfbc2672fddb50595865b5d" translate="yes" xml:space="preserve">
          <source>Thus we see that this tree has one file in it. The SHA-1 hash is a reference to that file&amp;rsquo;s data:</source>
          <target state="translated">Таким образом, мы видим, что в этом дереве есть один файл. Хэш SHA-1 - это ссылка на данные этого файла:</target>
        </trans-unit>
        <trans-unit id="309fb29079c2e5019b9d34cb235aee0452735a40" translate="yes" xml:space="preserve">
          <source>Thus you can, e.g., turn a library subdirectory into a repository of its own. Note the &lt;code&gt;--&lt;/code&gt; that separates &lt;code&gt;filter-branch&lt;/code&gt; options from revision options, and the &lt;code&gt;--all&lt;/code&gt; to rewrite all branches and tags.</source>
          <target state="translated">Таким образом, вы можете, например, превратить подкаталог библиотеки в собственный репозиторий. Обратите внимание на &lt;code&gt;--&lt;/code&gt; который отделяет параметры &lt;code&gt;filter-branch&lt;/code&gt; от параметров ревизии, и &lt;code&gt;--all&lt;/code&gt; для перезаписи всех ветвей и тегов.</target>
        </trans-unit>
        <trans-unit id="d35ca4f0ad7715e9f69a7f979c2424eb99273503" translate="yes" xml:space="preserve">
          <source>Thus, the following command:</source>
          <target state="translated">Таким образом,следующая команда:</target>
        </trans-unit>
        <trans-unit id="77cc1ec67e1af48d92e062ee397960be200bdf58" translate="yes" xml:space="preserve">
          <source>Thus, we can provide O(log N) lookup time for any number of packfiles.</source>
          <target state="translated">Таким образом,мы можем обеспечить время поиска O(log N)для любого количества пакетных файлов.</target>
        </trans-unit>
        <trans-unit id="ae19d34e63a0724afdaaeabe3d0fe80af7f9e778" translate="yes" xml:space="preserve">
          <source>Time and date specified by the ISO 8601 standard, for example &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;. The parser accepts a space instead of the &lt;code&gt;T&lt;/code&gt; character as well.</source>
          <target state="translated">Время и дата указаны в стандарте ISO 8601, например &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt; . Парсер также принимает пробел вместо символа &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3919d9be78625e6edbfd2764a9b0e03204c6c677" translate="yes" xml:space="preserve">
          <source>Time and date specified by the ISO 8601 standard, for example &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;. The parser accepts a space instead of the &lt;code&gt;T&lt;/code&gt; character as well. Fractional parts of a second will be ignored, for example &lt;code&gt;2005-04-07T22:13:13.019&lt;/code&gt; will be treated as &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bac72478f018c225224e8417f521a2dad6209d3" translate="yes" xml:space="preserve">
          <source>Time zone values can be &quot;local&quot; (for local time zone that browser uses), &quot;utc&quot; (what gitweb uses when JavaScript or this feature is disabled), or numerical time zones in the form of &quot;+/-HHMM&quot;, such as &quot;+0200&quot;.</source>
          <target state="translated">Значения часового пояса могут быть &quot;локальными&quot; (для локального часового пояса,используемого браузером),&quot;utc&quot;.(какой gitweb использует,когда JavaScript или эта функция отключена),или числовые часовые пояса в виде &quot;+/-HHMM&quot;,например &quot;+0200&quot;.</target>
        </trans-unit>
        <trans-unit id="396a560fd1658574279d941c34737eda5359f4fc" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) between the moment the connection is established and the client request is received (typically a rather low value, since that should be basically immediate).</source>
          <target state="translated">Таймаут (в секундах)между моментом установления соединения и получением клиентского запроса (обычно довольно низкое значение,так как это должно быть в основном мгновенным).</target>
        </trans-unit>
        <trans-unit id="0ae2f4dfeb0fa0aaf2833b3c271308d2190a4162" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) for specific client sub-requests. This includes the time it takes for the server to process the sub-request and the time spent waiting for the next client&amp;rsquo;s request.</source>
          <target state="translated">Тайм-аут (в секундах) для определенных клиентских подзапросов. Это включает время, необходимое серверу для обработки подзапроса, и время, потраченное на ожидание следующего клиентского запроса.</target>
        </trans-unit>
        <trans-unit id="ad6b83abe0aada0e5e6aec8e7e7470429fd4ee37" translate="yes" xml:space="preserve">
          <source>Tips and tricks</source>
          <target state="translated">Советы и хитрости</target>
        </trans-unit>
        <trans-unit id="d7242682d2f91b131962f45ed3706e536d3cdcc6" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; more than two &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;.</source>
          <target state="translated">Для того, чтобы &lt;a href=&quot;#def_merge&quot;&gt;объединить&lt;/a&gt; более двух &lt;a href=&quot;#def_branch&quot;&gt;ветвей&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f7305ba472ceab96976009902e7b731f8e52f311" translate="yes" xml:space="preserve">
          <source>To access refs, it&amp;rsquo;s best not to look inside &lt;code&gt;$GIT_DIR&lt;/code&gt; directly. Instead use commands such as &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; or &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; which will handle refs correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c181af3380fe2a4df836df7796a5de6ef8d47c5" translate="yes" xml:space="preserve">
          <source>To access refs, it&amp;rsquo;s best not to look inside GIT_DIR directly. Instead use commands such as &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; or &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; which will handle refs correctly.</source>
          <target state="translated">Чтобы получить доступ к ссылкам, лучше не заглядывать внутрь GIT_DIR напрямую. Вместо этого используйте такие команды, как &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse [1]&lt;/a&gt; или &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref [1],&lt;/a&gt; которые будут правильно обрабатывать ссылки.</target>
        </trans-unit>
        <trans-unit id="bdc5ec95e827bdeffd1f9aab0bef5dd1e05d0443" translate="yes" xml:space="preserve">
          <source>To achieve this, try to split your work into small steps from the very beginning. It is always easier to squash a few commits together than to split one big commit into several. Don&amp;rsquo;t be afraid of making too small or imperfect steps along the way. You can always go back later and edit the commits with &lt;code&gt;git rebase --interactive&lt;/code&gt; before you publish them. You can use &lt;code&gt;git stash push --keep-index&lt;/code&gt; to run the test suite independent of other uncommitted changes; see the EXAMPLES section of &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt;.</source>
          <target state="translated">Для этого постарайтесь с самого начала разбить свою работу на маленькие шаги. Всегда легче объединить несколько коммитов, чем разбить один большой коммит на несколько. Не бойтесь делать слишком маленькие или несовершенные шаги по пути. Вы всегда можете вернуться позже и отредактировать коммиты с помощью &lt;code&gt;git rebase --interactive&lt;/code&gt; перед их публикацией. Вы можете использовать &lt;code&gt;git stash push --keep-index&lt;/code&gt; для запуска набора тестов независимо от других незафиксированных изменений; см. раздел ПРИМЕРЫ в &lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0fad63887775e60c970096082173b077cbcda459" translate="yes" xml:space="preserve">
          <source>To actually match only values with an exclamation mark, you have to</source>
          <target state="translated">Для фактического сопоставления только значений с восклицательным знаком,вы должны</target>
        </trans-unit>
        <trans-unit id="0fea0d3a69770ac7053eba17165f8f811c0d830f" translate="yes" xml:space="preserve">
          <source>To add a new proxy, without altering any of the existing ones, use</source>
          <target state="translated">Чтобы добавить новый прокси,не изменяя ни один из существующих,используйте</target>
        </trans-unit>
        <trans-unit id="6a37f3f129452efb4608e170beca8c23ff8dc189" translate="yes" xml:space="preserve">
          <source>To aid in debugging frontends fast-import ignores any line that begins with &lt;code&gt;#&lt;/code&gt; (ASCII pound/hash) up to and including the line ending &lt;code&gt;LF&lt;/code&gt;. A comment line may contain any sequence of bytes that does not contain an LF and therefore may be used to include any detailed debugging information that might be specific to the frontend and useful when inspecting a fast-import data stream.</source>
          <target state="translated">Чтобы облегчить отладку внешних интерфейсов, fast-import игнорирует любую строку, которая начинается с символа &lt;code&gt;#&lt;/code&gt; (фунт / хэш ASCII) до строки, заканчивающейся &lt;code&gt;LF&lt;/code&gt; включительно . Строка комментария может содержать любую последовательность байтов, которая не содержит LF, и поэтому может использоваться для включения любой подробной отладочной информации, которая может быть специфичной для внешнего интерфейса и полезной при проверке потока данных быстрого импорта.</target>
        </trans-unit>
        <trans-unit id="285359187a2aff04e4ea763b2f3e4bbaf641190b" translate="yes" xml:space="preserve">
          <source>To assist in this, Git also provides the tag object&amp;hellip;​</source>
          <target state="translated">Чтобы помочь в этом, Git также предоставляет объект тега&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="39ed0e01aa6b6521a62db21f8653937d0b5ccadd" translate="yes" xml:space="preserve">
          <source>To avoid common misconfiguration mistakes, &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt; will abort with a warning if any configuration options for &quot;sendmail&quot; exist. Set this variable to bypass the check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0021f1eb05e23f63eb7ccc2f58c52546ee61585" translate="yes" xml:space="preserve">
          <source>To avoid deadlock, such frontends must completely consume any pending output from &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;get-mark&lt;/code&gt;, and &lt;code&gt;cat-blob&lt;/code&gt; before performing writes to fast-import that might block.</source>
          <target state="translated">Чтобы избежать взаимоблокировки, такие интерфейсы должны полностью потреблять любой ожидающий вывод от &lt;code&gt;progress&lt;/code&gt; , &lt;code&gt;ls&lt;/code&gt; , &lt;code&gt;get-mark&lt;/code&gt; и &lt;code&gt;cat-blob&lt;/code&gt; перед выполнением записи в fast-import, которая может заблокировать.</target>
        </trans-unit>
        <trans-unit id="75e1daad195d404dc835c71216234df4a4676d4e" translate="yes" xml:space="preserve">
          <source>To avoid deleting a shared index file that is still used, its modification time is updated to the current time every time a new split index based on the shared index file is either created or read from.</source>
          <target state="translated">Чтобы избежать удаления файла с общим индексом,который все еще используется,время его модификации обновляется до текущего времени каждый раз,когда создается или считывается новый разделенный индекс,основанный на файле с общим индексом.</target>
        </trans-unit>
        <trans-unit id="0b95bb4f949904cf33707d2a81be23c345f8e5aa" translate="yes" xml:space="preserve">
          <source>To avoid false positives (e.g. when a patch has been removed, and an unrelated patch has been added between two iterations of the same patch series), the cost matrix is extended to allow for that, by adding fixed-cost entries for wholesale deletes/adds.</source>
          <target state="translated">Чтобы избежать ложных срабатываний (например,когда патч был удален и между двумя итерациями одной и той же серии патчей был добавлен несвязанный патч),матрица расходов была расширена,чтобы позволить это,путем добавления записей с фиксированной стоимостью для оптовых удалений/добавок.</target>
        </trans-unit>
        <trans-unit id="0fd573776931ed5e5643654b60eb3896366ed973" translate="yes" xml:space="preserve">
          <source>To avoid interfering with other worktrees, it first enables the &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; setting and makes sure to set the &lt;code&gt;core.sparseCheckout&lt;/code&gt; setting in the worktree-specific config file.</source>
          <target state="translated">Чтобы избежать вмешательства в работу других рабочих деревьев, сначала включается параметр &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; и обязательно устанавливается параметр &lt;code&gt;core.sparseCheckout&lt;/code&gt; в файле конфигурации для конкретного дерева.</target>
        </trans-unit>
        <trans-unit id="3c2082115575958e10a9c1afdaf9ab0c9127b12a" translate="yes" xml:space="preserve">
          <source>To avoid recording unrelated changes in the merge commit, &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; will also abort if there are any changes registered in the index relative to the &lt;code&gt;HEAD&lt;/code&gt; commit. (Special narrow exceptions to this rule may exist depending on which merge strategy is in use, but generally, the index must match HEAD.)</source>
          <target state="translated">Чтобы избежать записи несвязанных изменений в фиксации слияния, команды &lt;code&gt;git pull&lt;/code&gt; и &lt;code&gt;git merge&lt;/code&gt; также будут прерваны, если в индексе будут зарегистрированы какие-либо изменения относительно фиксации &lt;code&gt;HEAD&lt;/code&gt; . (Особые узкие исключения из этого правила могут существовать в зависимости от того, какая стратегия слияния используется, но обычно индекс должен соответствовать HEAD.)</target>
        </trans-unit>
        <trans-unit id="3066556f3c40d15744968614a5fc8c1e23bf8a7b" translate="yes" xml:space="preserve">
          <source>To avoid typing long email addresses, point this to one or more email aliases files. You must also supply &lt;code&gt;sendemail.aliasFileType&lt;/code&gt;.</source>
          <target state="translated">Чтобы не вводить длинные адреса электронной почты, укажите здесь один или несколько файлов псевдонимов электронной почты. Вы также должны указать &lt;code&gt;sendemail.aliasFileType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4b87fbf313d264308ea989e0e3b9a4c3d776c25" translate="yes" xml:space="preserve">
          <source>To bootstrap the process, you can first create a bundle that does not have any basis. You can use a tag to remember up to what commit you last processed, in order to make it easy to later update the other repository with an incremental bundle:</source>
          <target state="translated">Чтобы загрузить процесс,вы можете сначала создать связку,которая не имеет никаких оснований.Вы можете использовать метку,чтобы запомнить до того,какой коммит вы обрабатывали в последний раз,чтобы потом легко обновить другой репозиторий инкрементальным пакетом:</target>
        </trans-unit>
        <trans-unit id="9d8840568125195e79747db7654d577582e9ce27" translate="yes" xml:space="preserve">
          <source>To change which notes are shown by &lt;code&gt;git log&lt;/code&gt;, see the &quot;notes.displayRef&quot; configuration in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">Чтобы изменить, какие заметки отображаются в &lt;code&gt;git log&lt;/code&gt; , см. Конфигурацию &amp;laquo;notes.displayRef&amp;raquo; в &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="97883ec3271fcc02269394ee0880b3655a6f452f" translate="yes" xml:space="preserve">
          <source>To check out commit &lt;code&gt;HEAD~3&lt;/code&gt; for temporary inspection or experiment without creating a new branch:</source>
          <target state="translated">Чтобы проверить фиксацию &lt;code&gt;HEAD~3&lt;/code&gt; для временной проверки или эксперимента без создания новой ветки:</target>
        </trans-unit>
        <trans-unit id="d144f3be27bf6711b21fc83fdbf3f1e8ff9fc321" translate="yes" xml:space="preserve">
          <source>To commit a tree you have instantiated with &lt;code&gt;git write-tree&lt;/code&gt;, you&amp;rsquo;d create a &quot;commit&quot; object that refers to that tree and the history behind it&amp;mdash;​most notably the &quot;parent&quot; commits that preceded it in history.</source>
          <target state="translated">Чтобы зафиксировать дерево, экземпляр которого вы создали с помощью &lt;code&gt;git write-tree&lt;/code&gt; , вы должны создать объект &amp;laquo;фиксация&amp;raquo;, который ссылается на это дерево и историю, лежащую за ним, в первую очередь &amp;laquo;родительские&amp;raquo; коммиты, которые предшествовали ему в истории.</target>
        </trans-unit>
        <trans-unit id="05e44c536d85ee3801aa2c0d698cefa8d09c4c33" translate="yes" xml:space="preserve">
          <source>To completely remove a submodule, manually delete &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">Чтобы полностью удалить подмодуль, вручную удалите &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27c15a86c7e79c3805e163825e563ceb0da18b5a" translate="yes" xml:space="preserve">
          <source>To control which revisions to show, gitk supports most options applicable to the &lt;code&gt;git rev-list&lt;/code&gt; command. It also supports a few options applicable to the &lt;code&gt;git diff-*&lt;/code&gt; commands to control how the changes each commit introduces are shown. Finally, it supports some gitk-specific options.</source>
          <target state="translated">Для управления отображаемыми ревизиями gitk поддерживает большинство параметров, применимых к команде &lt;code&gt;git rev-list&lt;/code&gt; . Он также поддерживает несколько параметров, применимых к командам &lt;code&gt;git diff-*&lt;/code&gt; для управления отображением изменений, вносимых каждой фиксацией. Наконец, он поддерживает некоторые параметры, специфичные для gitk.</target>
        </trans-unit>
        <trans-unit id="777e371b82028c9765bc912013f44d79febb95a6" translate="yes" xml:space="preserve">
          <source>To cope with such a situation, after the inner &lt;code&gt;git bisect&lt;/code&gt; finds the next revision to test, the script can apply the patch before compiling, run the real test, and afterwards decide if the revision (possibly with the needed patch) passed the test and then rewind the tree to the pristine state. Finally the script should exit with the status of the real test to let the &lt;code&gt;git bisect run&lt;/code&gt; command loop determine the eventual outcome of the bisect session.</source>
          <target state="translated">Чтобы справиться с такой ситуацией, после того, как внутренний &lt;code&gt;git bisect&lt;/code&gt; найдет следующую ревизию для тестирования, сценарий может применить патч перед компиляцией, запустить настоящий тест, а затем решить, прошла ли ревизия (возможно, с нужным патчем) тест и затем перемотайте дерево до первоначального состояния. Наконец, сценарий должен завершиться со статусом реального теста, чтобы позволить циклу команд &lt;code&gt;git bisect run&lt;/code&gt; определить конечный результат сеанса bisect.</target>
        </trans-unit>
        <trans-unit id="8674c1ca562e6ecc34e19d2429ea897e7602bd28" translate="yes" xml:space="preserve">
          <source>To create your own local live copy of such a &quot;raw&quot; Git repository, you&amp;rsquo;d first create your own subdirectory for the project, and then copy the raw repository contents into the &lt;code&gt;.git&lt;/code&gt; directory. For example, to create your own copy of the Git repository, you&amp;rsquo;d do the following</source>
          <target state="translated">Чтобы создать свою собственную локальную живую копию такого &amp;laquo;сырого&amp;raquo; репозитория Git, вы сначала должны создать свой собственный подкаталог для проекта, а затем скопировать необработанное содержимое репозитория в каталог &lt;code&gt;.git&lt;/code&gt; . Например, чтобы создать свою собственную копию репозитория Git, вы должны сделать следующее</target>
        </trans-unit>
        <trans-unit id="495be7922d2a293092e6f366efd8045104e01478" translate="yes" xml:space="preserve">
          <source>To define a custom merge driver &lt;code&gt;filfre&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">Чтобы определить настраиваемый драйвер слияния &lt;code&gt;filfre&lt;/code&gt; , добавьте раздел в свой файл &lt;code&gt;$GIT_DIR/config&lt;/code&gt; (или файл &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ) следующим образом:</target>
        </trans-unit>
        <trans-unit id="369d97c17e3edbb633e139fcbb4d6a1ea94c1201" translate="yes" xml:space="preserve">
          <source>To define an external diff driver &lt;code&gt;jcdiff&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">Чтобы определить внешний драйвер сравнения &lt;code&gt;jcdiff&lt;/code&gt; , добавьте раздел в свой файл &lt;code&gt;$GIT_DIR/config&lt;/code&gt; (или файл &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ) следующим образом:</target>
        </trans-unit>
        <trans-unit id="302897a013466c7a33ee45af87c508a98422abd4" translate="yes" xml:space="preserve">
          <source>To delete the entry for renames, do</source>
          <target state="translated">Чтобы удалить запись для переименования,сделайте</target>
        </trans-unit>
        <trans-unit id="f31f6b0ae1c80bea942e287ae0ab318c31ede1f4" translate="yes" xml:space="preserve">
          <source>To determine the location of the repository on disk, &lt;code&gt;git http-backend&lt;/code&gt; concatenates the environment variables PATH_INFO, which is set automatically by the web server, and GIT_PROJECT_ROOT, which must be set manually in the web server configuration. If GIT_PROJECT_ROOT is not set, &lt;code&gt;git http-backend&lt;/code&gt; reads PATH_TRANSLATED, which is also set automatically by the web server.</source>
          <target state="translated">Чтобы определить местоположение репозитория на диске, &lt;code&gt;git http-backend&lt;/code&gt; объединяет переменные среды PATH_INFO, которые автоматически устанавливаются веб-сервером, и GIT_PROJECT_ROOT, которые необходимо установить вручную в конфигурации веб-сервера. Если GIT_PROJECT_ROOT не установлен, &lt;code&gt;git http-backend&lt;/code&gt; читает PATH_TRANSLATED, который также автоматически устанавливается веб-сервером.</target>
        </trans-unit>
        <trans-unit id="b99f7180a07f9dbb13dde063c76c98dd5e2d7887" translate="yes" xml:space="preserve">
          <source>To disable features that accept parameters (are configurable), you need to set this element to empty list i.e. &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">Чтобы отключить функции, принимающие параметры (настраиваемые), вам необходимо установить этот элемент в пустой список, то есть &lt;code&gt;[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43f3c91605c9cb6d680c0ea9cf4c1bb2e77b4d9d" translate="yes" xml:space="preserve">
          <source>To disable interactive logins, displaying a greeting instead:</source>
          <target state="translated">Чтобы отключить интерактивные входы в систему,вместо этого отобразите приветствие:</target>
        </trans-unit>
        <trans-unit id="2e78622c40c98dec97477af783b12ba20d12cc1a" translate="yes" xml:space="preserve">
          <source>To display the &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; man page, use &lt;code&gt;git help git&lt;/code&gt;.</source>
          <target state="translated">Чтобы отобразить &lt;code&gt;git help git&lt;/code&gt; страницу &lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt; , используйте git help git .</target>
        </trans-unit>
        <trans-unit id="fa4dddf358b16e56494c90923230fd025e6f958d" translate="yes" xml:space="preserve">
          <source>To do automatic tag object dereferencing, use the &quot;-d&quot; or &quot;--dereference&quot; flag, so you can do</source>
          <target state="translated">Чтобы сделать автоматическую разыменовку объекта тега,используйте флаг &quot;-d&quot; или &quot;--dereference&quot;,таким образом вы можете сделать следующее</target>
        </trans-unit>
        <trans-unit id="dc05ce874d6baee1eae11d94d6fd56f1e0a6d0ed" translate="yes" xml:space="preserve">
          <source>To do the merge, do</source>
          <target state="translated">Чтобы сделать слияние,сделайте</target>
        </trans-unit>
        <trans-unit id="45ed93b09b65e276ec2ef33a1d9d7c3e10d14bfe" translate="yes" xml:space="preserve">
          <source>To do this, the current maintenance branch is copied to another branch named with the previous release version number (e.g. maint-X.Y.(Z-1) where X.Y.Z is the current release).</source>
          <target state="translated">Для этого текущая ветка обслуживания копируется в другую,названную с номером версии предыдущего релиза (например,maint-X.Y.(Z-1),где X.Y.Z является текущим релизом).</target>
        </trans-unit>
        <trans-unit id="380aa6a091a04ad8bbf89399d1982760e370374e" translate="yes" xml:space="preserve">
          <source>To drop a commit, replace the command &quot;pick&quot; with &quot;drop&quot;, or just delete the matching line.</source>
          <target state="translated">Чтобы бросить фиксацию,замените команду &quot;pick&quot; на &quot;drop&quot;,или просто удалите соответствующую строку.</target>
        </trans-unit>
        <trans-unit id="e05b8854f808624747710c5e1d641ee4dabaf30c" translate="yes" xml:space="preserve">
          <source>To elaborate, &quot;reading&quot; means checking for file existence, reading file attributes or file content. The working directory version may be present or absent. If present, its content may match against the index version or not. Writing is not affected by this bit, content safety is still first priority. Note that Git &lt;code&gt;can&lt;/code&gt; update working directory file, that is marked skip-worktree, if it is safe to do so (i.e. working directory version matches index version)</source>
          <target state="translated">Проще говоря, &amp;laquo;чтение&amp;raquo; означает проверку существования файла, чтение атрибутов файла или содержимого файла. Версия рабочего каталога может присутствовать или отсутствовать. Если он присутствует, его содержимое может совпадать с версией индекса или нет. Этот бит не влияет на запись, безопасность содержимого по-прежнему остается на первом месте. Обратите внимание, что Git &lt;code&gt;can&lt;/code&gt; обновить файл рабочего каталога, помеченный как skip-worktree, если это безопасно (т.е. версия рабочего каталога соответствует версии индекса).</target>
        </trans-unit>
        <trans-unit id="64ecd7272d648bbcdba5e527a1a80e43cb0705c5" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;git archive --remote&lt;/code&gt; and disable &lt;code&gt;git fetch&lt;/code&gt; against a repository, have the following in the configuration file in the repository (that is the file &lt;code&gt;config&lt;/code&gt; next to &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;refs&lt;/code&gt; and &lt;code&gt;objects&lt;/code&gt;).</source>
          <target state="translated">Чтобы включить &lt;code&gt;git archive --remote&lt;/code&gt; и отключить &lt;code&gt;git fetch&lt;/code&gt; для репозитория, укажите следующее в файле конфигурации в репозитории (это &lt;code&gt;config&lt;/code&gt; файла рядом с &lt;code&gt;HEAD&lt;/code&gt; , &lt;code&gt;refs&lt;/code&gt; и &lt;code&gt;objects&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="af7d8457fff28a2087e0f74bc51d0468026a9bff" translate="yes" xml:space="preserve">
          <source>To enable a target, set the corresponding environment variable or system or global config value to one of the following:</source>
          <target state="translated">Чтобы активировать целевое значение,установите соответствующую переменную окружения или системное или глобальное значение конфигурации в одно из следующих значений:</target>
        </trans-unit>
        <trans-unit id="01e6eac26c3bbc386ab13c8cd6a9167801f24836" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access, require authorization for both the initial ref advertisement (which we detect as a push via the service parameter in the query string), and the receive-pack invocation itself:</source>
          <target state="translated">Для включения анонимного доступа на чтение,но аутентифицированного доступа на запись,требуется авторизация как для объявления первичного реффикса (который мы определяем как push через параметр сервиса в строке запроса),так и для самого вызова приемника-пакета:</target>
        </trans-unit>
        <trans-unit id="9bda367b82f8881561a1128afb27f36988891c35" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access:</source>
          <target state="translated">Включить анонимный доступ на чтение,но аутентифицированный доступ на запись:</target>
        </trans-unit>
        <trans-unit id="050d5472dcd3f05f019f9a8129d0bb6d5e205df8" translate="yes" xml:space="preserve">
          <source>To enable blame, pickaxe search, and snapshot support (allowing &quot;tar.gz&quot; and &quot;zip&quot; snapshots), while allowing individual projects to turn them off, put the following in your GITWEB_CONFIG file:</source>
          <target state="translated">Чтобы включить поддержку авторства,поиска по кирпичикам и снимков (разрешено делать снимки &quot;tar.gz&quot; и &quot;zip&quot;),одновременно разрешая отдельным проектам отключать их,поместите в ваш файл GITWEB_CONFIG следующее:</target>
        </trans-unit>
        <trans-unit id="fa7174e314ce7012972664ac5bcf82d4b390a6d5" translate="yes" xml:space="preserve">
          <source>To enable git-cvsserver access (which should generally have the &lt;code&gt;no-interactive-login&lt;/code&gt; example above as a prerequisite, as creating the git-shell-commands directory allows interactive logins):</source>
          <target state="translated">Чтобы включить доступ к git-cvsserver (который обычно должен иметь приведенный выше пример &lt;code&gt;no-interactive-login&lt;/code&gt; в качестве предварительного условия, поскольку создание каталога git-shell-commands позволяет интерактивный вход):</target>
        </trans-unit>
        <trans-unit id="69aa803d2928631745bb26ea6d720a34de175dd7" translate="yes" xml:space="preserve">
          <source>To enable that additional nice feature, when a bisection is started and when some good commits are not ancestors of the bad commit, we first compute the merge bases between the bad and the good commits and we chose these merge bases as the first commits that will be checked out and tested.</source>
          <target state="translated">Для включения этой дополнительной хорошей возможности,когда начинается биссектриса и когда некоторые хорошие коммиты не являются предками плохого коммита,мы сначала вычисляем базы слияния между плохим и хорошим коммитами и выбираем эти базы слияния в качестве первых коммитов,которые будут извлечены и протестированы.</target>
        </trans-unit>
        <trans-unit id="ba44f6ad0a0230b79b3149aabc029b57fd7f22d9" translate="yes" xml:space="preserve">
          <source>To enable the sparse-checkout feature, run &lt;code&gt;git sparse-checkout init&lt;/code&gt; to initialize a simple sparse-checkout file and enable the &lt;code&gt;core.sparseCheckout&lt;/code&gt; config setting. Then, run &lt;code&gt;git sparse-checkout set&lt;/code&gt; to modify the patterns in the sparse-checkout file.</source>
          <target state="translated">Чтобы включить функцию разреженной проверки, запустите &lt;code&gt;git sparse-checkout init&lt;/code&gt; , чтобы инициализировать простой файл разреженной проверки и включить &lt;code&gt;core.sparseCheckout&lt;/code&gt; конфигурации core.sparseCheckout . Затем запустите &lt;code&gt;git sparse-checkout set&lt;/code&gt; , чтобы изменить шаблоны в файле sparse-checkout.</target>
        </trans-unit>
        <trans-unit id="1318b73efc503f41a06d5d140c646ee25cf7e427" translate="yes" xml:space="preserve">
          <source>To exclude commits reachable from a commit, a prefix &lt;code&gt;^&lt;/code&gt; notation is used. E.g. &lt;code&gt;^r1 r2&lt;/code&gt; means commits reachable from &lt;code&gt;r2&lt;/code&gt; but exclude the ones reachable from &lt;code&gt;r1&lt;/code&gt; (i.e. &lt;code&gt;r1&lt;/code&gt; and its ancestors).</source>
          <target state="translated">Чтобы исключить коммиты, доступные из коммита, используется нотация префикса &lt;code&gt;^&lt;/code&gt; . Например, &lt;code&gt;^r1 r2&lt;/code&gt; означает, что коммиты достижимы из &lt;code&gt;r2&lt;/code&gt; , но исключают те, которые достижимы из &lt;code&gt;r1&lt;/code&gt; (т.е. &lt;code&gt;r1&lt;/code&gt; и его предки).</target>
        </trans-unit>
        <trans-unit id="a12d809ea9b20c2b561957b059e3fe943cb6e440" translate="yes" xml:space="preserve">
          <source>To find out how the result can be used, just read on in &lt;code&gt;cmd_cat_file()&lt;/code&gt;:</source>
          <target state="translated">Чтобы узнать, как можно использовать результат, просто прочтите в &lt;code&gt;cmd_cat_file()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="338cdf0c3d82152dc96e1eae9cd9922bf736e76c" translate="yes" xml:space="preserve">
          <source>To get a checkout with the Eclipse CVS client:</source>
          <target state="translated">Чтобы получить выписку с клиентом Eclipse CVS:</target>
        </trans-unit>
        <trans-unit id="976f859125db1311d8f82bb8df703ef2ad537fd0" translate="yes" xml:space="preserve">
          <source>To get a reminder of the currently used terms, use</source>
          <target state="translated">Чтобы получить напоминание об используемых в настоящее время терминах,используйте</target>
        </trans-unit>
        <trans-unit id="68b714c59ff5898ff58433a2938d52aeb27df43e" translate="yes" xml:space="preserve">
          <source>To get started with gitweb, run &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; from a Git repository. This would configure and start your web server, and run web browser pointing to gitweb.</source>
          <target state="translated">Чтобы начать работу с gitweb, запустите &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt; из репозитория Git. Это настроит и запустит ваш веб-сервер, а также запустит веб-браузер, указывающий на gitweb.</target>
        </trans-unit>
        <trans-unit id="bf62a03860b36b4b6a615592146052d88035a5f4" translate="yes" xml:space="preserve">
          <source>To get the &quot;base&quot; for the merge, look up the common parent of two commits:</source>
          <target state="translated">Чтобы получить &quot;базу&quot; для слияния,найдите общий родитель двух коммитов:</target>
        </trans-unit>
        <trans-unit id="ec1f343ca45777aa33e95b7222bfb7658aa36062" translate="yes" xml:space="preserve">
          <source>To get the feature/bugfix into an integration branch, simply merge it. If the topic has evolved further in the meantime, merge again. (Note that you do not necessarily have to merge it to the oldest integration branch first. For example, you can first merge a bugfix to &lt;code&gt;next&lt;/code&gt;, give it some testing time, and merge to &lt;code&gt;maint&lt;/code&gt; when you know it is stable.)</source>
          <target state="translated">Чтобы добавить функцию / исправление в ветку интеграции, просто объедините ее. Если за это время тема получила дальнейшее развитие, объединитесь снова. (Обратите внимание, что вам не обязательно сначала объединять его с самой старой ветвью интеграции. Например, вы можете сначала объединить исправление ошибки со &lt;code&gt;next&lt;/code&gt; , дать ему некоторое время для тестирования и слить с &lt;code&gt;maint&lt;/code&gt; , когда вы знаете, что оно стабильно.)</target>
        </trans-unit>
        <trans-unit id="60ae758b58fc83602f1720fb9cc2f0f4fb30b090" translate="yes" xml:space="preserve">
          <source>To give some hard figures, we used to have an average report-to-fix cycle of 142.6 hours (according to our somewhat weird bug-tracker which just measures wall-clock time). Since we moved to Git, we&amp;rsquo;ve lowered that to 16.2 hours. Primarily because we can stay on top of the bug fixing now, and because everyone&amp;rsquo;s jockeying to get to fix bugs (we&amp;rsquo;re quite proud of how lazy we are to let Git find the bugs for us). Each new release results in ~40% fewer bugs (almost certainly due to how we now feel about writing tests).</source>
          <target state="translated">Чтобы привести некоторые точные цифры, у нас был средний цикл между отчетами и исправлениями, составлявший 142,6 часа (в соответствии с нашим несколько странным трекером ошибок, который просто измеряет время на настенных часах). С тех пор, как мы перешли на Git, мы снизили это время до 16,2 часа. В первую очередь потому, что теперь мы можем оставаться на вершине исправления ошибок, и потому что все пытаются исправить ошибки (мы очень гордимся тем, насколько ленивы мы позволяем Git находить ошибки за нас). Каждый новый выпуск приводит к ~ 40% меньше ошибок (почти наверняка из-за того, что мы теперь думаем о написании тестов).</target>
        </trans-unit>
        <trans-unit id="cc855cb566c405d222e3a3236275bbad376833c3" translate="yes" xml:space="preserve">
          <source>To help with that, &lt;code&gt;range&lt;/code&gt; uses the &lt;code&gt;--dual-color&lt;/code&gt; mode by default. In this mode, the diff of diffs will retain the original diff colors, and prefix the lines with -/+ markers that have their &lt;strong&gt;background&lt;/strong&gt; red or green, to make it more obvious that they describe how the diff itself changed.</source>
          <target state="translated">Чтобы помочь с этим, по умолчанию &lt;code&gt;range&lt;/code&gt; использует режим &lt;code&gt;--dual-color&lt;/code&gt; . В этом режиме различие различий сохранит исходные цвета различий и префикс строк с маркерами - / + с красным или зеленым &lt;strong&gt;фоном&lt;/strong&gt; , чтобы сделать более очевидным, что они описывают, как изменилось само различие.</target>
        </trans-unit>
        <trans-unit id="096c5d9029f3f58b2af501ec17fb5d42ac0f73fe" translate="yes" xml:space="preserve">
          <source>To illustrate the difference between &lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; and &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt;, consider a commit with the following diff in the same file:</source>
          <target state="translated">Чтобы проиллюстрировать разницу между &lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; и &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt; , рассмотрим фиксацию со следующим различием в том же файле:</target>
        </trans-unit>
        <trans-unit id="e67d6de21feaa90def83753eb253a23faea561fa" translate="yes" xml:space="preserve">
          <source>To illustrate, suppose you are in a situation where someone develops a &lt;code&gt;subsystem&lt;/code&gt; branch, and you are working on a &lt;code&gt;topic&lt;/code&gt; that is dependent on this &lt;code&gt;subsystem&lt;/code&gt;. You might end up with a history like the following:</source>
          <target state="translated">Для иллюстрации предположим, что вы находитесь в ситуации, когда кто-то разрабатывает ветвь &lt;code&gt;subsystem&lt;/code&gt; , и вы работаете над &lt;code&gt;topic&lt;/code&gt; которая зависит от этой &lt;code&gt;subsystem&lt;/code&gt; . У вас может получиться такая история:</target>
        </trans-unit>
        <trans-unit id="a98d25733140cb4450fff563f123b0d4cafeb9f9" translate="yes" xml:space="preserve">
          <source>To interrupt the rebase (just like an &quot;edit&quot; command would do, but without cherry-picking any commit first), use the &quot;break&quot; command.</source>
          <target state="translated">Чтобы прервать rebase (так же,как это делает команда &quot;edit&quot;,но без вишневого выбора любого коммита вначале),используйте команду &quot;break&quot;.</target>
        </trans-unit>
        <trans-unit id="f6408dba3913ebdb903fdfce1d68f1906d3e56f0" translate="yes" xml:space="preserve">
          <source>To look at only non-zero stages, use &lt;code&gt;--unmerged&lt;/code&gt; flag:</source>
          <target state="translated">Чтобы посмотреть только ненулевые стадии, используйте флаг &lt;code&gt;--unmerged&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5b273f729e50c3bb1996889c896c925cce764cd8" translate="yes" xml:space="preserve">
          <source>To make it readable, we can tell &lt;code&gt;git diff-files&lt;/code&gt; to output the differences as a patch, using the &lt;code&gt;-p&lt;/code&gt; flag:</source>
          <target state="translated">Чтобы сделать его читабельным, мы можем указать &lt;code&gt;git diff-files&lt;/code&gt; выводить различия в виде патча, используя флаг &lt;code&gt;-p&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9fa7b34f2837aaeca157590c3f1e04cfe3400ecb" translate="yes" xml:space="preserve">
          <source>To make referencing the final pathname simpler, you can map each path component; so if you also anonymize &lt;code&gt;subdir&lt;/code&gt; to &lt;code&gt;publicdir&lt;/code&gt;, then the final pathname would be &lt;code&gt;publicdir/bar.c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5411ef1231b1da2dbabaf49f4348af685832f2f7" translate="yes" xml:space="preserve">
          <source>To move the whole tree into a subdirectory, or remove it from there:</source>
          <target state="translated">Переместить все дерево в подкаталог или удалить его оттуда:</target>
        </trans-unit>
        <trans-unit id="9fef1883cb2bb53007927c93e3d8f7431145efad" translate="yes" xml:space="preserve">
          <source>To perform a three-way merge, you start with the two commits you want to merge, find their closest common parent (a third commit), and compare the trees corresponding to these three commits.</source>
          <target state="translated">Для выполнения трехстороннего слияния вы начинаете с двух коммитов,которые вы хотите объединить,находите их ближайшего общего родителя (третий коммит)и сравниваете деревья,соответствующие этим трём коммитам.</target>
        </trans-unit>
        <trans-unit id="a35f3e8a10774da4c0b0f3f87118660d7ef9889e" translate="yes" xml:space="preserve">
          <source>To place a higher stage entry to the index, the path should first be removed by feeding a mode=0 entry for the path, and then feeding necessary input lines in the third format.</source>
          <target state="translated">Чтобы поместить в индекс запись более высокого уровня,путь должен быть сначала удален,подавая для пути запись в режиме mode=0,а затем подавая необходимые строки ввода в третьем формате.</target>
        </trans-unit>
        <trans-unit id="26b0cbf1bc1090821ae6f59cac15f02ec7f562f8" translate="yes" xml:space="preserve">
          <source>To prepare for working on &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, switch to it by updating the index and the files in the working tree, and by pointing &lt;code&gt;HEAD&lt;/code&gt; at the branch. Local modifications to the files in the working tree are kept, so that they can be committed to the &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Чтобы подготовиться к работе с &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; , переключитесь на нее, обновив индекс и файлы в рабочем дереве и указав &lt;code&gt;HEAD&lt;/code&gt; на ветку. Локальные изменения файлов в рабочем дереве сохраняются, поэтому их можно зафиксировать в &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13739c43ac679e23fc4c2d09478ac31e5293cb15" translate="yes" xml:space="preserve">
          <source>To pretend you have a file at path with mode and sha1, say:</source>
          <target state="translated">Чтобы сделать вид,что у вас есть файл в пути с режимом и sha1,скажем:</target>
        </trans-unit>
        <trans-unit id="6785e6ba620455f331d4a09eb8363e2600eabf25" translate="yes" xml:space="preserve">
          <source>To prevent a $GIT_DIR/worktrees entry from being pruned (which can be useful in some situations, such as when the entry&amp;rsquo;s working tree is stored on a portable device), use the &lt;code&gt;git worktree lock&lt;/code&gt; command, which adds a file named &lt;code&gt;locked&lt;/code&gt; to the entry&amp;rsquo;s directory. The file contains the reason in plain text. For example, if a linked working tree&amp;rsquo;s &lt;code&gt;.git&lt;/code&gt; file points to &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; then a file named &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; will prevent the &lt;code&gt;test-next&lt;/code&gt; entry from being pruned. See &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for details.</source>
          <target state="translated">Чтобы предотвратить удаление записи $ GIT_DIR / worktrees (что может быть полезно в некоторых ситуациях, например, когда рабочее дерево записи хранится на портативном устройстве), используйте команду &lt;code&gt;git worktree lock&lt;/code&gt; , которая добавляет файл с именем &lt;code&gt;locked&lt;/code&gt; в список каталог записи. Файл содержит причину в виде обычного текста. Например, если Связанное рабочего дерево в &lt;code&gt;.git&lt;/code&gt; точек файла в &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; то файл с именем &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; предотвратит &lt;code&gt;test-next&lt;/code&gt; запись после обрезки. См. Подробности в &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="af2e73e27abe3e4382121e1f7c2af8f2dfcf3321" translate="yes" xml:space="preserve">
          <source>To prevent a &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; entry from being pruned (which can be useful in some situations, such as when the entry&amp;rsquo;s working tree is stored on a portable device), use the &lt;code&gt;git worktree lock&lt;/code&gt; command, which adds a file named &lt;code&gt;locked&lt;/code&gt; to the entry&amp;rsquo;s directory. The file contains the reason in plain text. For example, if a linked working tree&amp;rsquo;s &lt;code&gt;.git&lt;/code&gt; file points to &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; then a file named &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; will prevent the &lt;code&gt;test-next&lt;/code&gt; entry from being pruned. See &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46ac404b2baca4d3a659bb0594db0c41828389ed" translate="yes" xml:space="preserve">
          <source>To prevent these unnecessary merge conflicts, Git can be told to run a virtual check-out and check-in of all three stages of a file when resolving a three-way merge by setting the &lt;code&gt;merge.renormalize&lt;/code&gt; configuration variable. This prevents changes caused by check-in conversion from causing spurious merge conflicts when a converted file is merged with an unconverted file.</source>
          <target state="translated">Чтобы предотвратить эти ненужные конфликты слияния, Git можно указать для запуска виртуального извлечения и &lt;code&gt;merge.renormalize&lt;/code&gt; всех трех этапов файла при разрешении трехстороннего слияния, установив переменную конфигурации merge.renormalize . Это предотвращает появление ложных конфликтов слияния изменений, вызванных преобразованием регистрации, когда преобразованный файл объединяется с неконвертированным файлом.</target>
        </trans-unit>
        <trans-unit id="91d260766aee213709a415223ac206b93100d7d5" translate="yes" xml:space="preserve">
          <source>To prune objects not used by your repository or another that borrows from your repository via its &lt;code&gt;.git/objects/info/alternates&lt;/code&gt;:</source>
          <target state="translated">Чтобы удалить объекты, не используемые вашим репозиторием или другим, который заимствует из вашего репозитория через его &lt;code&gt;.git/objects/info/alternates&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2f63f42b98c259e7fd0384dd68939f7fc302c5eb" translate="yes" xml:space="preserve">
          <source>To prune references as part of your normal workflow without needing to remember to run that, set &lt;code&gt;fetch.prune&lt;/code&gt; globally, or &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; per-remote in the config. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Чтобы удалить ссылки как часть вашего обычного рабочего процесса, не запоминая его запуск, установите &lt;code&gt;fetch.prune&lt;/code&gt; глобально или &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; для каждого пульта в config. См. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="68bfae2792009c9d944a67bd77b4854e1c8c4d3e" translate="yes" xml:space="preserve">
          <source>To put the loose objects into a pack, just run git repack:</source>
          <target state="translated">Чтобы положить свободные предметы в стаю,просто запустите git-репакет:</target>
        </trans-unit>
        <trans-unit id="8344caf5b982f9b0d4dc99f7ff5aa708ff0b3592" translate="yes" xml:space="preserve">
          <source>To query the value for a given key, do</source>
          <target state="translated">Чтобы запросить значение для данного ключа,сделайте следующее</target>
        </trans-unit>
        <trans-unit id="6d7c1598e59e901d58d9b961c14fa449c82ef069" translate="yes" xml:space="preserve">
          <source>To reapply a series of changes from a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; to a different base, and reset the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; of that branch to the result.</source>
          <target state="translated">Повторно применить серию изменений из &lt;a href=&quot;#def_branch&quot;&gt;ветки&lt;/a&gt; к другой базе и сбросить &lt;a href=&quot;#def_head&quot;&gt;заголовок&lt;/a&gt; этой ветки к результату.</target>
        </trans-unit>
        <trans-unit id="25388a0bc929e9a0e4d2bb9d4d113e8444bb02a5" translate="yes" xml:space="preserve">
          <source>To remove a file from the index and from the working tree, use</source>
          <target state="translated">Для удаления файла из индекса и из рабочего дерева используйте</target>
        </trans-unit>
        <trans-unit id="c7850646e909d85f101794190a2e6f7a699e3e90" translate="yes" xml:space="preserve">
          <source>To remove commits authored by &quot;Darl McBribe&quot; from the history:</source>
          <target state="translated">Удалить из истории коммиты,автором которых является &quot;Дарл МакБрайб&quot;:</target>
        </trans-unit>
        <trans-unit id="65692943c43d72ea453917ea884fccf3994fb56e" translate="yes" xml:space="preserve">
          <source>To remove selection, prefix the input with &lt;code&gt;-&lt;/code&gt; like this:</source>
          <target state="translated">Чтобы удалить выделение, добавьте к входу префикс &lt;code&gt;-&lt;/code&gt; например:</target>
        </trans-unit>
        <trans-unit id="9e91a512899aa79b93af123e6b1768a526248346" translate="yes" xml:space="preserve">
          <source>To repopulate the working directory with all files, use the &lt;code&gt;git sparse-checkout disable&lt;/code&gt; command.</source>
          <target state="translated">Чтобы повторно заполнить рабочий каталог всеми файлами, используйте команду &lt;code&gt;git sparse-checkout disable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c497720a7ab3ae3ef408305ef475289bc14a521" translate="yes" xml:space="preserve">
          <source>To reproduce the entire p4 history in Git, use the &lt;code&gt;@all&lt;/code&gt; modifier on the depot path:</source>
          <target state="translated">Чтобы воспроизвести всю историю p4 в Git, используйте модификатор &lt;code&gt;@all&lt;/code&gt; в пути депо:</target>
        </trans-unit>
        <trans-unit id="d4609928d728916d052df2a3b481b65890e4b16e" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes, use a Location directive around the repository, or one of its parent directories:</source>
          <target state="translated">Чтобы потребовать аутентификацию как при чтении,так и при записи,используйте директиву Location вокруг репозитория или одного из его родительских каталогов:</target>
        </trans-unit>
        <trans-unit id="10ebfb5ceb771c952eff2c39be3b852f1f654421" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes:</source>
          <target state="translated">Требование аутентификации как для чтения,так и для записи:</target>
        </trans-unit>
        <trans-unit id="847928f545abee25f9f8e4e2cc396a049af86735" translate="yes" xml:space="preserve">
          <source>To restore a file in the index to match the version in &lt;code&gt;HEAD&lt;/code&gt; (this is the same as using &lt;a href=&quot;git-reset&quot;&gt;git-reset[1]&lt;/a&gt;)</source>
          <target state="translated">Чтобы восстановить файл в индексе, чтобы он соответствовал версии в &lt;code&gt;HEAD&lt;/code&gt; (это то же самое, что использовать &lt;a href=&quot;git-reset&quot;&gt;git-reset [1]&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="21366b05c441f538e6886570018737e901640e49" translate="yes" xml:space="preserve">
          <source>To restore all files in the current directory</source>
          <target state="translated">Для восстановления всех файлов в текущем каталоге</target>
        </trans-unit>
        <trans-unit id="0ab7e14988a23edeb341648ca7b63377b3dd49d2" translate="yes" xml:space="preserve">
          <source>To restrict rewriting to only part of the history, specify a revision range in addition to the new branch name. The new branch name will point to the top-most revision that a &lt;code&gt;git rev-list&lt;/code&gt; of this range will print.</source>
          <target state="translated">Чтобы ограничить перезапись только частью истории, укажите диапазон ревизий в дополнение к новому имени ветки. Новое имя ветки будет указывать на самую верхнюю ревизию, которую напечатает &lt;code&gt;git rev-list&lt;/code&gt; из этого диапазона.</target>
        </trans-unit>
        <trans-unit id="4d880d7fd779c619b85e62692eb083b5f59e932e" translate="yes" xml:space="preserve">
          <source>To rewrite commits E,F,G,H, use one of these:</source>
          <target state="translated">Чтобы переписать обязательства E,F,G,H,используйте один из них:</target>
        </trans-unit>
        <trans-unit id="47b66273feb1f496168989ebee433bebb314fc85" translate="yes" xml:space="preserve">
          <source>To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:</source>
          <target state="translated">Переписывать только коммиты D,E,F,G,H,но оставлять A,B и C в покое,использовать:</target>
        </trans-unit>
        <trans-unit id="8c31d9c011b7c86062de888fb92cc01426b53584" translate="yes" xml:space="preserve">
          <source>To rewrite the repository to look as if &lt;code&gt;foodir/&lt;/code&gt; had been its project root, and discard all other history:</source>
          <target state="translated">Чтобы переписать репозиторий, чтобы он выглядел так, как будто &lt;code&gt;foodir/&lt;/code&gt; был его корнем проекта, и отбросить всю остальную историю:</target>
        </trans-unit>
        <trans-unit id="7c02b2b350476c8c24e25173b62f35a8ad0c0ae3" translate="yes" xml:space="preserve">
          <source>To see how submodule support works, create four example repositories that can be used later as a submodule:</source>
          <target state="translated">Чтобы посмотреть,как работает поддержка субмодулей,создайте четыре репозитория примеров,которые впоследствии могут быть использованы в качестве субмодуля:</target>
        </trans-unit>
        <trans-unit id="700bc56e5656b835e5cd7fa2e5386957dfc66eac" translate="yes" xml:space="preserve">
          <source>To see the currently remaining suspects in &lt;code&gt;gitk&lt;/code&gt;, issue the following command during the bisection process (the subcommand &lt;code&gt;view&lt;/code&gt; can be used as an alternative to &lt;code&gt;visualize&lt;/code&gt;):</source>
          <target state="translated">Чтобы увидеть в настоящее время остающихся подозреваемых в &lt;code&gt;gitk&lt;/code&gt; , выполните следующую команду в процессе бисекций (подкоманда &lt;code&gt;view&lt;/code&gt; может быть использован в качестве альтернативы &lt;code&gt;visualize&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="faa509deef7fcd4d518cc2cd2e577046b7eb747b" translate="yes" xml:space="preserve">
          <source>To see whether it has already been merged into the test or release branches, use:</source>
          <target state="translated">Чтобы проверить,было ли уже произведено слияние в тестовую ветку или в ветку релизов,используйте:</target>
        </trans-unit>
        <trans-unit id="1e15ca1368deb202f467e491af7bfdb38f930af4" translate="yes" xml:space="preserve">
          <source>To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs that &lt;code&gt;git http-backend&lt;/code&gt; can handle, and forward the rest to gitweb:</source>
          <target state="translated">Чтобы обслуживать gitweb по тому же URL-адресу, используйте ScriptAliasMatch только для тех URL-адресов, которые может обрабатывать &lt;code&gt;git http-backend&lt;/code&gt; , а остальные перенаправьте на gitweb:</target>
        </trans-unit>
        <trans-unit id="3b5c2b799f6b39d60aa882699fc88e3eb3a77175" translate="yes" xml:space="preserve">
          <source>To serve multiple repositories from different &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; in a single repository:</source>
          <target state="translated">Чтобы обслуживать несколько репозиториев из разных &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces [7]&lt;/a&gt; в одном репозитории:</target>
        </trans-unit>
        <trans-unit id="59fa97f902b7761eca14600ff37aff1758dec6bd" translate="yes" xml:space="preserve">
          <source>To set a commit (which typically is at the tip of another history) to be the parent of the current initial commit, in order to paste the other history behind the current history:</source>
          <target state="translated">Установка коммита (который обычно находится на кончике другой истории)в качестве родителя текущего начального коммита,чтобы вставить другую историю за текущую историю:</target>
        </trans-unit>
        <trans-unit id="d091c25539483b5c5b3db274eae656a5f768704a" translate="yes" xml:space="preserve">
          <source>To set the date used in future tag objects, set the environment variable GIT_COMMITTER_DATE (see the later discussion of possible values; the most common form is &quot;YYYY-MM-DD HH:MM&quot;).</source>
          <target state="translated">Для установки даты,используемой в будущих объектах тегов,установите переменную окружения GIT_COMMITTER_DATE (см.последующее обсуждение возможных значений;наиболее распространенная форма-&quot;YYYY-MM-DD HH:MM&quot;).</target>
        </trans-unit>
        <trans-unit id="0de4847876d8ab04ebb463613f39507d60c3b1a3" translate="yes" xml:space="preserve">
          <source>To set this up, first create your work tree by cloning Linus&amp;rsquo;s public tree:</source>
          <target state="translated">Чтобы настроить это, сначала создайте свое рабочее дерево, клонировав публичное дерево Линуса:</target>
        </trans-unit>
        <trans-unit id="6fdb47a7575f286ad7a6b8b651d8470ef2c51c01" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as a regular, non-inetd service that handles repositories for multiple virtual hosts based on their IP addresses, start the daemon like this:</source>
          <target state="translated">Чтобы настроить &lt;code&gt;git daemon&lt;/code&gt; как обычную службу, не относящуюся к inetd, которая обрабатывает репозитории для нескольких виртуальных хостов на основе их IP-адресов, запустите демон следующим образом:</target>
        </trans-unit>
        <trans-unit id="cd4e85b93c0b5a71d973a240463742c429d6ce10" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles any repository under the whitelisted set of directories, /pub/foo and /pub/bar, place an entry like the following into /etc/inetd all on one line:</source>
          <target state="translated">Чтобы настроить &lt;code&gt;git daemon&lt;/code&gt; как службу inetd, которая обрабатывает любой репозиторий из белого списка каталогов, / pub / foo и / pub / bar, поместите в / etc / inetd все в одну строку такую ​​запись:</target>
        </trans-unit>
        <trans-unit id="d85d4c6ac447e3ea7881a95ee3354b641502c913" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles repositories for different virtual hosts, &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;www.example.org&lt;/code&gt;, place an entry like the following into &lt;code&gt;/etc/inetd&lt;/code&gt; all on one line:</source>
          <target state="translated">Чтобы настроить &lt;code&gt;git daemon&lt;/code&gt; как службу inetd, которая обрабатывает репозитории для разных виртуальных хостов, &lt;code&gt;www.example.com&lt;/code&gt; и &lt;code&gt;www.example.org&lt;/code&gt; , поместите следующую запись в &lt;code&gt;/etc/inetd&lt;/code&gt; all в одной строке:</target>
        </trans-unit>
        <trans-unit id="6d1dfa06a0b2e0253dac9a23d3e763ff2be4729c" translate="yes" xml:space="preserve">
          <source>To shelve changes instead of submitting, use &lt;code&gt;--shelve&lt;/code&gt; and &lt;code&gt;--update-shelve&lt;/code&gt;:</source>
          <target state="translated">Чтобы отложить изменения вместо отправки, используйте &lt;code&gt;--shelve&lt;/code&gt; и &lt;code&gt;--update-shelve&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b19251adc869dd31b98316a2df3ca3e146f58f68" translate="yes" xml:space="preserve">
          <source>To show all references called &quot;master&quot;, whether tags or heads or anything else, and regardless of how deep in the reference naming hierarchy they are, use:</source>
          <target state="translated">Для отображения всех ссылок,называемых &quot;master&quot;,будь то теги или головы или что-то еще,и независимо от того,насколько глубоко в иерархии именования ссылок они находятся,используйте:</target>
        </trans-unit>
        <trans-unit id="51ec81ccf2337a76aefa897308cd08d96e515614" translate="yes" xml:space="preserve">
          <source>To show only tags, or only proper branch heads, use &quot;--tags&quot; and/or &quot;--heads&quot; respectively (using both means that it shows tags and heads, but not other random references under the refs/ subdirectory).</source>
          <target state="translated">Для показа только тегов,или только правильных головок ответвлений,используйте &quot;--tags&quot; и/или &quot;--heads&quot; соответственно (использование обоих означает,что показываются только теги и головки,но не другие случайные ссылки в подкаталоге refs/).</target>
        </trans-unit>
        <trans-unit id="864f9f1ee17e37f4b3823291b8524eebd5879fc4" translate="yes" xml:space="preserve">
          <source>To show that as an example, let&amp;rsquo;s go back to the git-tutorial repository we used earlier, and create a branch in it. You do that by simply just saying that you want to check out a new branch:</source>
          <target state="translated">Чтобы показать это в качестве примера, давайте вернемся в репозиторий git-tutorial, который мы использовали ранее, и создадим в нем ветку. Вы делаете это, просто говоря, что хотите проверить новую ветку:</target>
        </trans-unit>
        <trans-unit id="acab411fa1b0a4e2f72e42b537e21a4bc08bf613" translate="yes" xml:space="preserve">
          <source>To simplify the discussion we will suppose that the untestable area is a simple string of commits and that it was created by a breakage introduced by one commit (let&amp;rsquo;s call it BBC for bisect breaking commit) and later fixed by another one (let&amp;rsquo;s call it BFC for bisect fixing commit).</source>
          <target state="translated">Чтобы упростить обсуждение, мы предположим, что непроверяемая область представляет собой простую строку коммитов и что она была создана из-за поломки, вызванной одной фиксацией (назовем ее BBC для разбиения на две части), а затем исправлена ​​другой (назовем ее BFC для фиксации фиксации пополам).</target>
        </trans-unit>
        <trans-unit id="975e3a9279c8287bca9f664bbcc61fee7baa93ca" translate="yes" xml:space="preserve">
          <source>To specify a branch other than the current one, use:</source>
          <target state="translated">Чтобы указать ветку,отличную от текущей,используйте:</target>
        </trans-unit>
        <trans-unit id="b6b6e95c2c1acd4004bc280690d73f7c9df3e3b0" translate="yes" xml:space="preserve">
          <source>To specify a namespace, set the &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; environment variable to the namespace. For each ref namespace, Git stores the corresponding refs in a directory under &lt;code&gt;refs/namespaces/&lt;/code&gt;. For example, &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; will store refs under &lt;code&gt;refs/namespaces/foo/&lt;/code&gt;. You can also specify namespaces via the &lt;code&gt;--namespace&lt;/code&gt; option to &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt;.</source>
          <target state="translated">Чтобы указать пространство имен, установите &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; среды GIT_NAMESPACE в пространство имен. Для каждого пространства имен ref Git сохраняет соответствующие ссылки в каталоге &lt;code&gt;refs/namespaces/&lt;/code&gt; . Например, &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; будет хранить ссылки в &lt;code&gt;refs/namespaces/foo/&lt;/code&gt; . Вы также можете указать пространства имен с помощью параметра &lt;code&gt;--namespace&lt;/code&gt; для &lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d8e0463dddb070b083bcb1d31f0cd304bcae1a2" translate="yes" xml:space="preserve">
          <source>To specify a single commit or a range of commits, use:</source>
          <target state="translated">Для задания одного или нескольких коммитов используйте:</target>
        </trans-unit>
        <trans-unit id="b6bdd73c5af990a9c308cb3582e6683a673000a9" translate="yes" xml:space="preserve">
          <source>To stop tracking a file that is currently tracked, use &lt;code&gt;git rm --cached&lt;/code&gt;.</source>
          <target state="translated">Чтобы остановить отслеживание файла, который в настоящее время отслеживается, используйте &lt;code&gt;git rm --cached&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5aabd990937e7026d6c235ccca8da7a1bd54429f" translate="yes" xml:space="preserve">
          <source>To submit all changes that are in the current Git branch but not in the &lt;code&gt;p4/master&lt;/code&gt; branch, use:</source>
          <target state="translated">Чтобы отправить все изменения, которые есть в текущей ветке Git, но не в ветке &lt;code&gt;p4/master&lt;/code&gt; , используйте:</target>
        </trans-unit>
        <trans-unit id="4d37523ff8334f7ae27e64b17d4088a430f024d8" translate="yes" xml:space="preserve">
          <source>To submit patches using GMail&amp;rsquo;s IMAP interface, first, edit your ~/.gitconfig to specify your account settings:</source>
          <target state="translated">Чтобы отправить исправления с помощью интерфейса IMAP GMail, сначала отредактируйте файл ~ / .gitconfig, указав настройки своей учетной записи:</target>
        </trans-unit>
        <trans-unit id="3829362b0206f78fb7e35755e5364f47036b822a" translate="yes" xml:space="preserve">
          <source>To support virtual hosting, an interpolated path template can be used to dynamically construct alternate paths. The template supports %H for the target hostname as supplied by the client but converted to all lowercase, %CH for the canonical hostname, %IP for the server&amp;rsquo;s IP address, %P for the port number, and %D for the absolute path of the named repository. After interpolation, the path is validated against the directory whitelist.</source>
          <target state="translated">Для поддержки виртуального хостинга можно использовать шаблон интерполированного пути для динамического создания альтернативных путей. Шаблон поддерживает% H для имени целевого хоста, предоставленное клиентом, но преобразованное во все строчные буквы,% CH для канонического имени хоста,% IP для IP-адреса сервера,% P для номера порта и% D для абсолютного пути к названный репозиторий. После интерполяции путь проверяется по белому списку каталогов.</target>
        </trans-unit>
        <trans-unit id="5c5bebcfb262219afa24ad57e1be9ff8017de145" translate="yes" xml:space="preserve">
          <source>To switch back to the previous branch before we switched to mytopic (i.e. &quot;master&quot; branch):</source>
          <target state="translated">Чтобы вернуться в предыдущую ветку перед переключением на митотику (т.е.&quot;главную&quot; ветку):</target>
        </trans-unit>
        <trans-unit id="f604bfa9fc2a5e3a8b43aed4c26f0a58bfbd1e14" translate="yes" xml:space="preserve">
          <source>To tell Git that yes, you really do realize that certain files no longer exist, or that new files should be added, you should use the &lt;code&gt;--remove&lt;/code&gt; and &lt;code&gt;--add&lt;/code&gt; flags respectively.</source>
          <target state="translated">Чтобы сказать Git, что да, вы действительно понимаете, что определенные файлы больше не существуют или что нужно добавить новые файлы, вы должны использовать флаги &lt;code&gt;--remove&lt;/code&gt; и &lt;code&gt;--add&lt;/code&gt; соответственно.</target>
        </trans-unit>
        <trans-unit id="f3c508cb95e621506ae6e931b2fdadcaba14a047" translate="yes" xml:space="preserve">
          <source>To test the interaction of several topics, merge them into a throw-away branch. You must never base any work on such a branch!</source>
          <target state="translated">Чтобы протестировать взаимодействие нескольких тем,объедините их в отбрасывающую ветку.Вы никогда не должны основывать свою работу на такой ветке!</target>
        </trans-unit>
        <trans-unit id="ded44bb687bc8a448accbaa8cf09bc1b10b3ff71" translate="yes" xml:space="preserve">
          <source>To that end, it first finds pairs of commits from both commit ranges that correspond with each other. Two commits are said to correspond when the diff between their patches (i.e. the author information, the commit message and the commit diff) is reasonably small compared to the patches' size. See ``Algorithm`` below for details.</source>
          <target state="translated">Для этого он сначала находит пары коммитов из обоих диапазонов коммитов,которые соответствуют друг другу.Говорят,что два коммита соответствуют друг другу,когда разница между их патчами (т.е.информация об авторе,сообщение о коммите и разница между патчами)достаточно мала по сравнению с размером патчей.Подробности см.в ``Алгоритме` ниже.</target>
        </trans-unit>
        <trans-unit id="28b9a65cbb97d3af18835efd06d4d171278e0508" translate="yes" xml:space="preserve">
          <source>To throw away part of the development, i.e. to assign the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; to an earlier &lt;a href=&quot;#def_revision&quot;&gt;revision&lt;/a&gt;.</source>
          <target state="translated">Отбросить часть разработки, т.е. присвоить &lt;a href=&quot;#def_head&quot;&gt;голову&lt;/a&gt; более ранней &lt;a href=&quot;#def_revision&quot;&gt;ревизии&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f2857b34f71a88c7afeb725363e4097e2e44ff45" translate="yes" xml:space="preserve">
          <source>To top it all off, even when users finally find working commands, they naturally want to share them. But they may be unaware that their repo didn&amp;rsquo;t have some special cases that someone else&amp;rsquo;s does. So, when someone else with a different repository runs the same commands, they get hit by the problems above. Or, the user just runs commands that really were vetted for special cases, but they run it on a different OS where it doesn&amp;rsquo;t work, as noted above.</source>
          <target state="translated">В довершение ко всему, даже когда пользователи, наконец, находят рабочие команды, они, естественно, хотят ими поделиться. Но они могут не знать, что в их репо не было особых случаев, которые есть у кого-то другого. Таким образом, когда кто-то другой с другим репозиторием выполняет те же команды, он сталкивается с проблемами, указанными выше. Или пользователь просто запускает команды, которые действительно были проверены для особых случаев, но они запускают их в другой ОС, где это не работает, как указано выше.</target>
        </trans-unit>
        <trans-unit id="c4d2ca21938c992db0b3b75cacfc935366e6629e" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out</source>
          <target state="translated">Обновлять и обновлять только те файлы,которые уже были проверены.</target>
        </trans-unit>
        <trans-unit id="a8c26a487a2f6627cb1ef2fcc7d8934daa7b62d0" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out:</source>
          <target state="translated">Обновлять и обновлять только уже проверенные файлы:</target>
        </trans-unit>
        <trans-unit id="ec65c1043e980aa5b1f1a444793e6e405a4b07fd" translate="yes" xml:space="preserve">
          <source>To update the index with the contents of a new or modified file, use</source>
          <target state="translated">Для обновления индекса содержимым нового или измененного файла используйте</target>
        </trans-unit>
        <trans-unit id="693fe77a3dea0f3b3cf2c4a884d12237d7043db5" translate="yes" xml:space="preserve">
          <source>To update the resulting mine.git repository, you can fetch or pull after replacing the bundle stored at /home/me/tmp/file.bundle with incremental updates.</source>
          <target state="translated">Чтобы обновить результирующий репозиторий mine.git,вы можете извлечь или извлечь после замены пакета,хранящегося в /home/me/tmp/file.bundle,инкрементными обновлениями.</target>
        </trans-unit>
        <trans-unit id="7804c7379482ba8df4ffa8604001ea71fae1937a" translate="yes" xml:space="preserve">
          <source>To use &quot;old&quot; and &quot;new&quot; instead of &quot;good&quot; and bad, you must run &lt;code&gt;git
bisect start&lt;/code&gt; without commits as argument and then run the following commands to add the commits:</source>
          <target state="translated">Чтобы использовать &amp;laquo;старые&amp;raquo; и &amp;laquo;новые&amp;raquo; вместо &amp;laquo;хороших&amp;raquo; и &amp;laquo;плохих&amp;raquo;, вы должны запустить &lt;code&gt;git bisect start&lt;/code&gt; без коммитов в качестве аргумента, а затем выполнить следующие команды, чтобы добавить коммиты:</target>
        </trans-unit>
        <trans-unit id="288cf0a04f95ab8d9b3cedc9a80bcb75e1eb91a6" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;git send-email&lt;/code&gt; to send your patches through the GMail SMTP server, edit ~/.gitconfig to specify your account settings:</source>
          <target state="translated">Чтобы использовать &lt;code&gt;git send-email&lt;/code&gt; для отправки патчей через SMTP-сервер GMail, отредактируйте ~ / .gitconfig, указав настройки своей учетной записи:</target>
        </trans-unit>
        <trans-unit id="b24b5140a04c50c5ab1f6a8bf4b67a65e4b08446" translate="yes" xml:space="preserve">
          <source>To use a helper, you must first select one to use. Git currently includes the following helpers:</source>
          <target state="translated">Чтобы использовать помощника,сначала необходимо выбрать его.В настоящее время Git включает в себя следующих помощников:</target>
        </trans-unit>
        <trans-unit id="36cbbd22949ca6f21f378ad7a2a2aecbfc17d31c" translate="yes" xml:space="preserve">
          <source>To use the tool, &lt;code&gt;imap.folder&lt;/code&gt; and either &lt;code&gt;imap.tunnel&lt;/code&gt; or &lt;code&gt;imap.host&lt;/code&gt; must be set to appropriate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e4f18d69f51ffe1eea42af728cb3d7bb0059ec" translate="yes" xml:space="preserve">
          <source>To use the tool, imap.folder and either imap.tunnel or imap.host must be set to appropriate values.</source>
          <target state="translated">Для использования инструмента,папка imap.folder и либо imap.tunnel,либо imap.host должны быть установлены на соответствующие значения.</target>
        </trans-unit>
        <trans-unit id="8b51a494019812910be0a147154b59e9ef1b84fa" translate="yes" xml:space="preserve">
          <source>To use this mode effectively, you have to make sure &lt;code&gt;all&lt;/code&gt; the branches you would push out are ready to be pushed out before running &lt;code&gt;git push&lt;/code&gt;, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.</source>
          <target state="translated">Чтобы использовать этот режим эффективно, вы должны убедиться, что &lt;code&gt;all&lt;/code&gt; ветви, которые вы будете выталкивать, готовы к выталкиванию, прежде чем запускать &lt;code&gt;git push&lt;/code&gt; , так как весь смысл этого режима состоит в том, чтобы позволить вам вытолкнуть все ветки за один раз. Если вы обычно заканчиваете работу только с одной веткой и выталкиваете результат, а другие ветки остаются незавершенными, этот режим не для вас. Также этот режим не подходит для отправки в общий центральный репозиторий, поскольку другие люди могут добавлять туда новые ветки или обновлять концы существующих веток, находящихся вне вашего контроля.</target>
        </trans-unit>
        <trans-unit id="0db2ead5af506998515a70d6693b9cc78c43968a" translate="yes" xml:space="preserve">
          <source>To verify that &lt;code&gt;master&lt;/code&gt; is indeed a superset of &lt;code&gt;maint&lt;/code&gt;, use git log:</source>
          <target state="translated">Чтобы убедиться, что &lt;code&gt;master&lt;/code&gt; действительно является надмножеством &lt;code&gt;maint&lt;/code&gt; , используйте git log:</target>
        </trans-unit>
        <trans-unit id="25e07c07376edb7f994c3289d03610c1335d5288" translate="yes" xml:space="preserve">
          <source>Todo list</source>
          <target state="translated">Весь список</target>
        </trans-unit>
        <trans-unit id="feb6706843b17024c0f5d36ae4a2773f9f7a9d9e" translate="yes" xml:space="preserve">
          <source>Toggle the &quot;sparse&quot; algorithm to determine which objects to include in the pack, when combined with the &quot;--revs&quot; option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. If this option is not included, it defaults to the value of &lt;code&gt;pack.useSparse&lt;/code&gt;, which is true unless otherwise specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e89f12173f1b11f3c33dfcf393dbeb53d74231" translate="yes" xml:space="preserve">
          <source>Toggle the pre-push hook (see &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.</source>
          <target state="translated">&lt;a href=&quot;githooks&quot;&gt;Включите&lt;/a&gt; перехватчик предварительного нажатия (см. Githooks [5] ). По умолчанию --verify, что дает ловушке возможность предотвратить толчок. С --no-verify ловушка полностью игнорируется.</target>
        </trans-unit>
        <trans-unit id="e69b3ac557eee7192f98b057069c2f145301ef39" translate="yes" xml:space="preserve">
          <source>Topic branches</source>
          <target state="translated">Тематические отрасли</target>
        </trans-unit>
        <trans-unit id="99011a3381da15bff0042576b0bb55bb6ae9ffd0" translate="yes" xml:space="preserve">
          <source>TortoiseCVS</source>
          <target state="translated">TortoiseCVS</target>
        </trans-unit>
        <trans-unit id="9732ce69da01051c0a62cf40cfeb5063ebcf5c22" translate="yes" xml:space="preserve">
          <source>Trace the evolution of the line range given by &quot;&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&quot; (or the function name regex &amp;lt;funcname&amp;gt;) within the &amp;lt;file&amp;gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and &amp;lt;start&amp;gt; and &amp;lt;end&amp;gt; (or &amp;lt;funcname&amp;gt;) must exist in the starting revision. You can specify this option more than once. Implies &lt;code&gt;--patch&lt;/code&gt;. Patch output can be suppressed using &lt;code&gt;--no-patch&lt;/code&gt;, but other diff formats (namely &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--shortstat&lt;/code&gt;, &lt;code&gt;--dirstat&lt;/code&gt;, &lt;code&gt;--summary&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt;, &lt;code&gt;--name-status&lt;/code&gt;, &lt;code&gt;--check&lt;/code&gt;) are not currently implemented.</source>
          <target state="translated">Проследите эволюцию диапазона строк, заданного &amp;laquo;&amp;lt;start&amp;gt;, &amp;lt;end&amp;gt;&amp;raquo; (или именем функции regex &amp;lt;funcname&amp;gt;) внутри &amp;lt;file&amp;gt;. Вы не можете указывать никакие ограничители pathspec. В настоящее время это ограничено обходом, начиная с одной ревизии, т. Е. Вы можете указать только ноль или один положительный аргумент ревизии, и в начальной ревизии должны существовать &amp;lt;start&amp;gt; и &amp;lt;end&amp;gt; (или &amp;lt;funcname&amp;gt;). Вы можете указать эту опцию более одного раза. Подразумевается &lt;code&gt;--patch&lt;/code&gt; . Вывод исправлений можно подавить с помощью &lt;code&gt;--no-patch&lt;/code&gt; , но другие форматы &lt;code&gt;--raw&lt;/code&gt; (а именно --raw , &lt;code&gt;--numstat&lt;/code&gt; , &lt;code&gt;--shortstat&lt;/code&gt; , &lt;code&gt;--dirstat&lt;/code&gt; , &lt;code&gt;--summary&lt;/code&gt; , &lt;code&gt;--name-only&lt;/code&gt; , &lt;code&gt;--name-status&lt;/code&gt; , &lt;code&gt;--check&lt;/code&gt; ) в настоящее время не реализованы.</target>
        </trans-unit>
        <trans-unit id="324f1031e6064bf946ba7ad7de400c92a706ee71" translate="yes" xml:space="preserve">
          <source>Trace2 api</source>
          <target state="translated">Trace2 api</target>
        </trans-unit>
        <trans-unit id="f39bab439a6977ac76a84295e79b079d44b7d908" translate="yes" xml:space="preserve">
          <source>Trace2 config settings are only read from the system and global config files; repository local and worktree config files and &lt;code&gt;-c&lt;/code&gt; command line arguments are not respected.</source>
          <target state="translated">Параметры конфигурации Trace2 считываются только из системных и глобальных файлов конфигурации; локальные файлы конфигурации репозитория и файлы конфигурации рабочего дерева и аргументы командной строки &lt;code&gt;-c&lt;/code&gt; не соблюдаются.</target>
        </trans-unit>
        <trans-unit id="34f4d5fb2d35b898a8c6180c70ae5079360dafe0" translate="yes" xml:space="preserve">
          <source>Trace2 defines the following set of Trace2 Targets. Format details are given in a later section.</source>
          <target state="translated">Trace2 определяет следующий набор Trace2 Targets.Подробная информация о формате приведена в следующем разделе.</target>
        </trans-unit>
        <trans-unit id="9cffe01770c87380a0c500c2ba4c5fe9919c83ec" translate="yes" xml:space="preserve">
          <source>Trace2 instrumentation throughout the Git code base sends Trace2 messages to the enabled Trace2 Targets. Targets transform these messages content into purpose-specific formats and write events to their data streams. In this manner, the Trace2 API can drive many different types of analysis.</source>
          <target state="translated">Приборы Trace2 по всей базе Git-кода посылают сообщения Trace2 на включённые цели Trace2.Цели трансформируют содержимое этих сообщений в специальные форматы и записывают события в свои потоки данных.Таким образом,API Trace2 может управлять различными типами анализа.</target>
        </trans-unit>
        <trans-unit id="78edf21cb8a1d6593bdb09f0d046c88dfeb5c5d1" translate="yes" xml:space="preserve">
          <source>Trace2 is controlled using &lt;code&gt;trace2.*&lt;/code&gt; config values in the system and global config files and &lt;code&gt;GIT_TRACE2*&lt;/code&gt; environment variables. Trace2 does not read from repo local or worktree config files or respect &lt;code&gt;-c&lt;/code&gt; command line config settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952dc6d60a810a50f48d84409a5ca3162f18abfc" translate="yes" xml:space="preserve">
          <source>Trace2 is controlled using &lt;code&gt;trace2.&lt;/code&gt; config values in the system and global config files and &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variables. Trace2 does not read from repo local or worktree config files or respect &lt;code&gt;-c&lt;/code&gt; command line config settings.</source>
          <target state="translated">Trace2 управляется с помощью &lt;code&gt;trace2.&lt;/code&gt; значения config в системных и глобальных файлах конфигурации и переменные среды &lt;code&gt;GIT_TRACE2&lt;/code&gt; . Trace2 не читает из локальных файлов репозитория или файлов конфигурации рабочего дерева или не соблюдает параметры конфигурации командной строки &lt;code&gt;-c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20f68aac372bbc56e3b5b3e96aea0079529bedb9" translate="yes" xml:space="preserve">
          <source>Trace2 regions are similar to the existing trace_performance_enter() and trace_performance_leave() routines, but are thread safe and maintain per-thread stacks of timers.</source>
          <target state="translated">Регионы Trace2 аналогичны существующим подпрограммам trace_performance_enter()и trace_performance_leave(),но являются потокобезопасными и поддерживают потокобезопасные стеки таймеров.</target>
        </trans-unit>
        <trans-unit id="8bded73626b8544423d59c1c5a0c1bfb684cb12e" translate="yes" xml:space="preserve">
          <source>Trace2 target formats</source>
          <target state="translated">Целевые форматы Trace2</target>
        </trans-unit>
        <trans-unit id="e4cb4d4e7e519744d1375eb303304baebc567ae9" translate="yes" xml:space="preserve">
          <source>Trace2 targets</source>
          <target state="translated">Цели Trace2</target>
        </trans-unit>
        <trans-unit id="a0cfb1f78b98054b282b0aab138d8ea25f2c82bd" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to an entire Subversion-managed project (complete with a trunk, tags and branches):</source>
          <target state="translated">Отслеживание и внесение вклада в весь проект,управляемый Subversion (в комплекте со стволом,тегами и ветками):</target>
        </trans-unit>
        <trans-unit id="847895b0cdb93b975e4c930f95d66dabeb1e64d2" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to the trunk of a Subversion-managed project (ignoring tags and branches):</source>
          <target state="translated">Отслеживание и внесение вклада в ствол проекта,управляемого Subversion (без учета тегов и веток):</target>
        </trans-unit>
        <trans-unit id="667c19a45142471c0c20cc605b683a6a3152afb1" translate="yes" xml:space="preserve">
          <source>Traditionally, tips of branches and tags (collectively known as &lt;code&gt;refs&lt;/code&gt;) were stored one file per ref in a (sub)directory under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory. While many branch tips tend to be updated often, most tags and some branch tips are never updated. When a repository has hundreds or thousands of tags, this one-file-per-ref format both wastes storage and hurts performance.</source>
          <target state="translated">Традиционно подсказки ветвей и теги (вместе известные как &lt;code&gt;refs&lt;/code&gt; ) хранились по одному файлу на ссылку в (под) каталоге в каталоге &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; . Хотя многие советы по ветвям, как правило, обновляются часто, большинство тегов и некоторые советы по ветвям никогда не обновляются. Когда в репозитории есть сотни или тысячи тегов, этот формат &amp;laquo;один файл на ссылку&amp;raquo; не только расходует память, но и снижает производительность.</target>
        </trans-unit>
        <trans-unit id="a5cf7db57e9cf074478d171148671cc677faf56a" translate="yes" xml:space="preserve">
          <source>Trailing spaces are ignored unless they are quoted with backslash (&quot;&lt;code&gt;\&lt;/code&gt;&quot;).</source>
          <target state="translated">Конечные пробелы игнорируются, если они не заключены в кавычки с обратной косой чертой (&quot; &lt;code&gt;\&lt;/code&gt; &quot;).</target>
        </trans-unit>
        <trans-unit id="18baa50eee1aac68104e16bd4ad94c661cde3869" translate="yes" xml:space="preserve">
          <source>Transfer size: In its current form Git requires the whole working tree present. It does not allow partial trees to be transferred in fetch or clone. If the project you work on consists of multiple repositories tied together as submodules in a superproject, you can avoid fetching the working trees of the repositories you are not interested in.</source>
          <target state="translated">Трансфертный размер:В своём нынешнем виде Git требует наличия всего рабочего дерева.Он не позволяет переносить частичные деревья в фетч или клон.Если проект,над которым вы работаете,состоит из нескольких репозиториев,связанных между собой в качестве субмодулей в суперпроекте,вы можете избежать извлечения рабочих деревьев из репозиториев,которые вас не интересуют.</target>
        </trans-unit>
        <trans-unit id="bdf6a912dffd18ed6042052fce8610d96ce56a71" translate="yes" xml:space="preserve">
          <source>Transform stdin by substituting all the 40-character SHA-1 hexes (say $hex) with &quot;$hex ($rev_name)&quot;. When used with --name-only, substitute with &quot;$rev_name&quot;, omitting $hex altogether. Intended for the scripter&amp;rsquo;s use.</source>
          <target state="translated">Преобразуйте стандартный ввод, заменив все 40-символьные гексагоны SHA-1 (например, $ hex) на &amp;laquo;$ hex ($ rev_name)&amp;raquo;. При использовании с --name-only замените его на &quot;$ rev_name&quot;, полностью опуская $ hex. Предназначен для использования скриптером.</target>
        </trans-unit>
        <trans-unit id="fc873c381aea0c960eb3ebd47773defb66d7e124" translate="yes" xml:space="preserve">
          <source>Transmit &amp;lt;string&amp;gt; as a push option. As the push option must not contain LF or NUL characters, the string is not encoded.</source>
          <target state="translated">Передайте &amp;lt;string&amp;gt; как опцию push. Поскольку параметр push не должен содержать символов LF или NUL, строка не кодируется.</target>
        </trans-unit>
        <trans-unit id="32bd61986aca00f68612950bbcdb4915d3d0e846" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server&amp;rsquo;s handling of server options, including unknown ones, is server-specific. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">Передайте заданную строку на сервер при обмене данными с использованием протокола версии 2. Данная строка не должна содержать символа NUL или LF. Обработка сервером параметров сервера, в том числе неизвестных, зависит от сервера. Если &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; несколько --server-option = &amp;lt;option&amp;gt; , все они отправляются другой стороне в порядке, указанном в командной строке.</target>
        </trans-unit>
        <trans-unit id="39635a03df29b9789e505a1038590e24ea96c9e9" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">Передайте заданную строку на сервер при обмене данными с использованием протокола версии 2. Данная строка не должна содержать символа NUL или LF. Если &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; несколько --server-option = &amp;lt;option&amp;gt; , все они отправляются другой стороне в порядке, указанном в командной строке.</target>
        </trans-unit>
        <trans-unit id="2995fbcc2c84443582483713456b482a39b63e37" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line. When no &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; is given from the command line, the values of configuration variable &lt;code&gt;push.pushOption&lt;/code&gt; are used instead.</source>
          <target state="translated">Передайте заданную строку на сервер, который передает их в ловушку предварительного и пост-приема. Данная строка не должна содержать символа NUL или LF. Если &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; несколько --push-option = &amp;lt;option&amp;gt; , все они отправляются другой стороне в порядке, указанном в командной строке. Если в командной строке не &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; вместо этого используются значения переменной конфигурации &lt;code&gt;push.pushOption&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9960fbc3363c91bebbbc4dae3127f4935a1a22d6" translate="yes" xml:space="preserve">
          <source>Treat all files as text.</source>
          <target state="translated">Обращайтесь со всеми файлами как с текстом.</target>
        </trans-unit>
        <trans-unit id="a08e9c61e543dccc4a24afe7a10c95737cbb1ca7" translate="yes" xml:space="preserve">
          <source>Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">Обращайтесь со спецификациями путей буквально (т.е. без подстановок, без магии pathspec). Это эквивалентно установке &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; среды GIT_LITERAL_PATHSPECS на &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8024445062b4bb90b2e84a4da6e0bb207f37b5f4" translate="yes" xml:space="preserve">
          <source>Treat the &amp;lt;string&amp;gt; given to &lt;code&gt;-S&lt;/code&gt; as an extended POSIX regular expression to match.</source>
          <target state="translated">Считайте &amp;lt;string&amp;gt;, заданную параметром &lt;code&gt;-S&lt;/code&gt; , как расширенное регулярное выражение POSIX, которое необходимо сопоставить.</target>
        </trans-unit>
        <trans-unit id="72315ec1092243bb561e5b4697869abb3601099e" translate="yes" xml:space="preserve">
          <source>Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.</source>
          <target state="translated">Считайте репозиторий &quot;голым&quot;.Если окружение GIT_DIR не установлено,оно устанавливается в текущий рабочий каталог.</target>
        </trans-unit>
        <trans-unit id="1dad3a3b77cbf00bf58d87ee853af6d3cddb344a" translate="yes" xml:space="preserve">
          <source>Treat the revision argument as a &amp;lt;revision range&amp;gt;, even if it is just a single commit (that would normally be treated as a &amp;lt;since&amp;gt;). Note that root commits included in the specified range are always formatted as creation patches, independently of this flag.</source>
          <target state="translated">Рассматривайте аргумент ревизии как &amp;lt;диапазон ревизий&amp;gt;, даже если это всего лишь одна фиксация (которая обычно рассматривается как &amp;lt;since&amp;gt;). Обратите внимание, что корневые коммиты, включенные в указанный диапазон, всегда форматируются как исправления создания, независимо от этого флага.</target>
        </trans-unit>
        <trans-unit id="aa88eae97d6ad1936bc41000081122649aee8d74" translate="yes" xml:space="preserve">
          <source>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--ignore-space-at-eol&lt;/code&gt;, and &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt;.</source>
          <target state="translated">Обрабатывает строки с указанным типом изменения пробелов как неизменные для трехстороннего слияния. Изменения пробелов, смешанные с другими изменениями в строке, не игнорируются. См. Также &lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;-b&lt;/code&gt; , &lt;code&gt;-w&lt;/code&gt; , &lt;code&gt;--ignore-space-at-eol&lt;/code&gt; &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt; и --ignore-cr-at-eol .</target>
        </trans-unit>
        <trans-unit id="6ddd0e484558c1f8e50a8fe3c2dc7499225a9297" translate="yes" xml:space="preserve">
          <source>Tree Object</source>
          <target state="translated">Деревянный объект</target>
        </trans-unit>
        <trans-unit id="bce93b7f9d4c3064a3f582b574710500d7e5efb5" translate="yes" xml:space="preserve">
          <source>Tree and blob objects outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be treated the same way as if they were inside &lt;code&gt;refs/tags/*&lt;/code&gt;, any update of them will be rejected.</source>
          <target state="translated">Объекты дерева и blob за пределами &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; будут обрабатываться так же, как если бы они были внутри &lt;code&gt;refs/tags/*&lt;/code&gt; , любое их обновление будет отклонено.</target>
        </trans-unit>
        <trans-unit id="faed43d5018a65bdda1021ea817b81efdd882a1f" translate="yes" xml:space="preserve">
          <source>Tree objects as well as tag objects not pointing at commits, cannot be described. When describing blobs, the lightweight tags pointing at blobs are ignored, but the blob is still described as &amp;lt;committ-ish&amp;gt;:&amp;lt;path&amp;gt; despite the lightweight tag being favorable.</source>
          <target state="translated">Объекты дерева, а также объекты тегов, не указывающие на фиксации, не могут быть описаны. При описании больших двоичных объектов легкие теги, указывающие на большие двоичные объекты, игнорируются, но этот большой двоичный объект по-прежнему описывается как &amp;lt;committ-ish&amp;gt;: &amp;lt;path&amp;gt;, несмотря на то, что облегченный тег является благоприятным.</target>
        </trans-unit>
        <trans-unit id="d94a666a1561928de12071aa36f46464acd70f54" translate="yes" xml:space="preserve">
          <source>Tree to checkout from (when paths are given). If not specified, the index will be used.</source>
          <target state="translated">Дерево,откуда нужно выписаться (когда даны пути).Если не указано,будет использоваться индекс.</target>
        </trans-unit>
        <trans-unit id="fef8232d1c67b8b3403ba454c8ae3c965dc5fb72" translate="yes" xml:space="preserve">
          <source>Trees (aka directories) use just 12 bytes of memory on top of the memory required for their entries (see &amp;ldquo;per active file&amp;rdquo; below). The cost of a tree is virtually 0, as its overhead amortizes out over the individual file entries.</source>
          <target state="translated">Деревья (также известные как каталоги) используют всего 12 байтов памяти поверх памяти, необходимой для их записей (см. &amp;laquo;На каждый активный файл&amp;raquo; ниже). Стоимость дерева практически равна нулю, поскольку накладные расходы амортизируются по сравнению с отдельными записями в файле.</target>
        </trans-unit>
        <trans-unit id="2bb80d7d00c0395ecaf93c5dc9cd657c191b576d" translate="yes" xml:space="preserve">
          <source>Tries to reinstate not only the working tree&amp;rsquo;s changes, but also the index&amp;rsquo;s ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply the changes as they were originally).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8797468d6463e4f71332170d9f50ca7fd321cc3a" translate="yes" xml:space="preserve">
          <source>Trivial merges are done by &lt;code&gt;git read-tree&lt;/code&gt; itself. Only conflicting paths will be in unmerged state when &lt;code&gt;git read-tree&lt;/code&gt; returns.</source>
          <target state="translated">Тривиальные слияния выполняются самим &lt;code&gt;git read-tree&lt;/code&gt; . Когда &lt;code&gt;git read-tree&lt;/code&gt; вернется, только конфликтующие пути будут в несоединенном состоянии .</target>
        </trans-unit>
        <trans-unit id="c14d8e783a9f521d30b73eb971eac8f82acc62a0" translate="yes" xml:space="preserve">
          <source>True merge</source>
          <target state="translated">Истинное слияние</target>
        </trans-unit>
        <trans-unit id="33a579ffc0dccbff15be01734ea4138ea4e7635c" translate="yes" xml:space="preserve">
          <source>Trust</source>
          <target state="translated">Trust</target>
        </trans-unit>
        <trans-unit id="df8a0e781552ee165e12d7086194c5f37262dc36" translate="yes" xml:space="preserve">
          <source>Try to speed up the traversal using the pack bitmap index (if one is available). Note that when traversing with &lt;code&gt;--objects&lt;/code&gt;, trees and blobs will not have their associated path printed.</source>
          <target state="translated">Попробуйте ускорить обход, используя индекс растрового изображения пакета (если он доступен). Обратите внимание, что при &lt;code&gt;--objects&lt;/code&gt; с --objects деревья и капли не будут распечатывать связанный с ними путь.</target>
        </trans-unit>
        <trans-unit id="db494399fc91d335ea933090c261cf51f7615da6" translate="yes" xml:space="preserve">
          <source>Try to update from the upstream resulted in a lot of conflicts; you were not ready to spend a lot of time merging right now, so you decide to do that later.</source>
          <target state="translated">Попытка обновления из апстрима привела к множеству конфликтов;вы не были готовы потратить много времени на слияние прямо сейчас,поэтому вы решили сделать это позже.</target>
        </trans-unit>
        <trans-unit id="3a12d2b4901990f4e580a360ff850809fe3f67b9" translate="yes" xml:space="preserve">
          <source>Turn off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">Отключите любой предыдущий аргумент &lt;code&gt;--filter=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="34771065d121fc03fac8d38d540e254893826329" translate="yes" xml:space="preserve">
          <source>Turn off branch colors, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">Отключите цвета ветвей, даже если в файле конфигурации задан цветной вывод по умолчанию. То же, что &lt;code&gt;--color=never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d9cbb32ce6c68e264cdb30b91e954cf183958d3" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">Отключить цветной дифференциал. Это то же самое, что и &lt;code&gt;--color=never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d9b2354f095eeb41acddbf4f3d69d4ac5775813" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. This can be used to override configuration settings. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">Отключить цветной дифференциал. Это можно использовать для переопределения параметров конфигурации. Это то же самое, что и &lt;code&gt;--color=never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ad464ef4a6c59cdcb2319e829113b9b9a0202fe" translate="yes" xml:space="preserve">
          <source>Turn off colored output, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">Отключите цветной вывод, даже если в файле конфигурации задан цветной вывод по умолчанию. То же, что &lt;code&gt;--color=never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3a997309d5fb6a6ca30f0f6201f278a284d8e1e" translate="yes" xml:space="preserve">
          <source>Turn off match highlighting, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">Отключите выделение совпадений, даже если в файле конфигурации задан цветной вывод по умолчанию. То же, что &lt;code&gt;--color=never&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4fab0f230de92fdcff08739247b39013a4dcf91" translate="yes" xml:space="preserve">
          <source>Turn off move detection. This can be used to override configuration settings. It is the same as &lt;code&gt;--color-moved=no&lt;/code&gt;.</source>
          <target state="translated">Отключите обнаружение движения. Это можно использовать для переопределения параметров конфигурации. Это то же самое, что и &lt;code&gt;--color-moved=no&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0eb0b106db412297afc722cb22850ad8fd89466" translate="yes" xml:space="preserve">
          <source>Turn off rename detection, even when the configuration file gives the default to do so.</source>
          <target state="translated">Отключите определение переименования,даже если файл конфигурации дает его по умолчанию.</target>
        </trans-unit>
        <trans-unit id="4e867193eda90e02a99d5e3b2d3aff016424ee32" translate="yes" xml:space="preserve">
          <source>Turn off rename detection. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">Отключите обнаружение переименования. Это переопределяет переменную конфигурации &lt;code&gt;merge.renames&lt;/code&gt; . См. Также &lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="29eb4a9a74bb1156273caaa264fc85825c0572ef" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">Включите обнаружение переименования, при желании задав порог схожести. См. Также &lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a279dbfc86c680add56c7a5993ef6023dec20637" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. This is the default. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">Включите обнаружение переименования, при желании задав порог схожести. Это значение по умолчанию. Это переопределяет переменную конфигурации &lt;code&gt;merge.renames&lt;/code&gt; . См. Также &lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9d077a66918e3017c929a4d5ef75e05f491a825" translate="yes" xml:space="preserve">
          <source>Turn on/off rename detection regardless of user configuration. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">Включение / выключение обнаружения переименования независимо от конфигурации пользователя. См. Также &lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff597cb2e8f500da1bb43f369ea55f0017801fbc" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal.</source>
          <target state="translated">Включение/выключение прогресса в явном виде.Если ни один из них не указан,то прогресс отображается,если к клемме подключена стандартная ошибка.</target>
        </trans-unit>
        <trans-unit id="b63e204e5b5bb236923126ba202fed353f8079ec" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.</source>
          <target state="translated">Включение/выключение прогресса в явном виде.Если ни один из них не указан,то прогресс отображается,если к клемме подключена стандартная ошибка.Обратите внимание,что не все стратегии слияния могут поддерживать отображение прогресса.</target>
        </trans-unit>
        <trans-unit id="ae22b8d4ecb731b706e41a653df929373ee8e8e0" translate="yes" xml:space="preserve">
          <source>Turns off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;--filter=&lt;/code&gt; любой предыдущий аргумент --filter = .</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="954e9a2594b4d5687b25c9c1a8357bca3253b18f" translate="yes" xml:space="preserve">
          <source>Tweaking diff output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef2d842e6b781b12f96bc62f4ab607c12e12218" translate="yes" xml:space="preserve">
          <source>Two Tree Merge</source>
          <target state="translated">Слияние двух деревьев</target>
        </trans-unit>
        <trans-unit id="6bda5442e87e811366b94ce6966009ecac6ac5dc" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&quot;&lt;code&gt;**&lt;/code&gt;&quot;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">Две последовательные звездочки (&quot; &lt;code&gt;**&lt;/code&gt; &quot;) в образцах, совпадающих с полным путем, могут иметь особое значение:</target>
        </trans-unit>
        <trans-unit id="e187ca5222f2f1c9a298321896225faf75c5697a" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&amp;ldquo;**&amp;rdquo;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">Две последовательные звездочки (&amp;laquo;**&amp;raquo;) в образцах, совпадающих с полным путем, могут иметь особое значение:</target>
        </trans-unit>
        <trans-unit id="fce699584c34eaef39ec9c341ad51961e194a419" translate="yes" xml:space="preserve">
          <source>Two special values are supported: &lt;code&gt;off&lt;/code&gt; will simply close the corresponding standard handle, and if &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; is &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;, standard error will be redirected to the same handle as standard output.</source>
          <target state="translated">Поддерживаются два специальных значения: &lt;code&gt;off&lt;/code&gt; просто закроет соответствующий стандартный дескриптор, а если &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; равен &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; , стандартная ошибка будет перенаправлена ​​на тот же дескриптор, что и стандартный вывод.</target>
        </trans-unit>
        <trans-unit id="34a739d621f3038babff4f0f681d077135e77a75" translate="yes" xml:space="preserve">
          <source>Two things are interesting here:</source>
          <target state="translated">Две вещи здесь интересны:</target>
        </trans-unit>
        <trans-unit id="ced48512ad4d3cb13ca20b7cb1f2f8e4abd0bc9d" translate="yes" xml:space="preserve">
          <source>Tying it all together</source>
          <target state="translated">Связывая все это вместе</target>
        </trans-unit>
        <trans-unit id="3a87a5a93967e0c0facb5bdbedab0a6936494920" translate="yes" xml:space="preserve">
          <source>Type 5 is reserved for future expansion. Type 0 is invalid.</source>
          <target state="translated">Тип 5 зарезервирован для будущего расширения.Тип 0 недействителен.</target>
        </trans-unit>
        <trans-unit id="e8e8d3184972cec12ef3bd94d7eec7947cbe4b53" translate="yes" xml:space="preserve">
          <source>Typical gitweb config files will only change starting (default) time zone, and leave other elements at their default values:</source>
          <target state="translated">Типичные gitweb-конфигурационные файлы изменят только начальный (по умолчанию)часовой пояс,а остальные элементы оставят на своих значениях по умолчанию:</target>
        </trans-unit>
        <trans-unit id="3aa25a3911a2da2f000729dbc451ee040fee4a66" translate="yes" xml:space="preserve">
          <source>Typical usage is something like:</source>
          <target state="translated">Типичное использование-это что-то вроде:</target>
        </trans-unit>
        <trans-unit id="db1f5b1028dc570d4bb8caccd45a45601a38210c" translate="yes" xml:space="preserve">
          <source>Typical use of git credential</source>
          <target state="translated">Типичное использование git-аккаунта</target>
        </trans-unit>
        <trans-unit id="d63a8a509d39725ec5fc85189ba54ffbab2dd0bb" translate="yes" xml:space="preserve">
          <source>Typically it will be placed in a MUA&amp;rsquo;s drafts folder, edited to add timely commentary that should not go in the changelog after the three dashes, and then sent as a message whose body, in our example, starts with &quot;arch/arm config files were&amp;hellip;​&quot;. On the receiving end, readers can save interesting patches in a UNIX mailbox and apply them with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;.</source>
          <target state="translated">Как правило, он будет помещен в папку черновиков MUA, отредактирован для добавления своевременного комментария, который не должен попадать в журнал изменений после трех тире, а затем отправлен в виде сообщения, тело которого в нашем примере начинается с &quot;файлы конфигурации arch / arm были ...&amp;raquo;. На принимающей стороне читатели могут сохранять интересные патчи в почтовом ящике UNIX и применять их с помощью &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3b51965ce078cc4b0d9ecb0a1b113a383a8700dc" translate="yes" xml:space="preserve">
          <source>Typically such a variable may look like this:</source>
          <target state="translated">Обычно такая переменная может выглядеть так:</target>
        </trans-unit>
        <trans-unit id="9f47be9cc1e7fcec80fcc7e52dcbd486a27d2ee2" translate="yes" xml:space="preserve">
          <source>Typically this is run with a script calling Git&amp;rsquo;s imitation of the &lt;code&gt;merge&lt;/code&gt; command from the RCS package.</source>
          <target state="translated">Обычно это запускается с помощью сценария, вызывающего Git-имитацию команды &lt;code&gt;merge&lt;/code&gt; из пакета RCS.</target>
        </trans-unit>
        <trans-unit id="e4333d902cedfd0d4739277fdec621b3f9f09422" translate="yes" xml:space="preserve">
          <source>Typically this matches the real type of &amp;lt;object&amp;gt; but asking for a type that can trivially be dereferenced from the given &amp;lt;object&amp;gt; is also permitted. An example is to ask for a &quot;tree&quot; with &amp;lt;object&amp;gt; being a commit object that contains it, or to ask for a &quot;blob&quot; with &amp;lt;object&amp;gt; being a tag object that points at it.</source>
          <target state="translated">Обычно это соответствует реальному типу &amp;lt;object&amp;gt;, но также разрешается запрос типа, который можно тривиально разыменовать из данного &amp;lt;object&amp;gt;. Например, запросить &amp;laquo;дерево&amp;raquo;, где &amp;lt;object&amp;gt; является объектом фиксации, который его содержит, или запросить &amp;laquo;blob&amp;raquo; с &amp;lt;object&amp;gt;, являющимся объектом тега, который указывает на него.</target>
        </trans-unit>
        <trans-unit id="6b016c5601edd059fd8dc12bb8d8426b6525fff2" translate="yes" xml:space="preserve">
          <source>Typically you would first remove all tracked files from the working tree using this command:</source>
          <target state="translated">Обычно вы сначала удаляете все отслеживаемые файлы из рабочего дерева с помощью этой команды:</target>
        </trans-unit>
        <trans-unit id="3a2ee6ee14f11a86e1818d26c21e9493d38718f1" translate="yes" xml:space="preserve">
          <source>Typically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel.</source>
          <target state="translated">Обычно параллельные рекурсивные и многоотраслевые сборки выполняются быстрее.По умолчанию сборки выполняются последовательно,а не параллельно.</target>
        </trans-unit>
        <trans-unit id="94e92e77c127b9c8a314ec2c48c4916e008c6404" translate="yes" xml:space="preserve">
          <source>Typically, this is invoked as &lt;code&gt;git read-tree -m $H $M&lt;/code&gt;, where $H is the head commit of the current repository, and $M is the head of a foreign tree, which is simply ahead of $H (i.e. we are in a fast-forward situation).</source>
          <target state="translated">Обычно это вызывается как &lt;code&gt;git read-tree -m $H $M&lt;/code&gt; , где $ H - это начальная фиксация текущего репозитория, а $ M - начальная часть стороннего дерева, которое просто опережает $ H (т. Е. Мы находятся в режиме перемотки вперед).</target>
        </trans-unit>
        <trans-unit id="0ada5827188094ef6e82c28e45e078ca96f54ca4" translate="yes" xml:space="preserve">
          <source>U: file is unmerged (you must complete the merge before it can be committed)</source>
          <target state="translated">U:файл распакован (вы должны завершить слияние,прежде чем его можно будет зафиксировать).</target>
        </trans-unit>
        <trans-unit id="1a7a0d0dd35212ae4c8c4c873315c6e7e9351f3b" translate="yes" xml:space="preserve">
          <source>URI and label (title) for the Git logo link (or your site logo, if you chose to use different logo image). By default, these both refer to Git homepage, &lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.com&lt;/a&gt;; in the past, they pointed to Git documentation at &lt;a href=&quot;https://www.kernel.org&quot;&gt;https://www.kernel.org&lt;/a&gt;.</source>
          <target state="translated">URI и метка (заголовок) для ссылки на логотип Git (или логотипа вашего сайта, если вы решили использовать другое изображение логотипа). По умолчанию они оба относятся к домашней &lt;a href=&quot;https://git-scm.com&quot;&gt;странице&lt;/a&gt; Git, https://git-scm.com ; в прошлом они указывали на документацию Git по адресу &lt;a href=&quot;https://www.kernel.org&quot;&gt;https://www.kernel.org&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8561702ffd22bbb5ccd1a81c9c8d8cc77f16fa7e" translate="yes" xml:space="preserve">
          <source>Un-sets the previously set type specifier (if one was previously set). This option requests that &lt;code&gt;git config&lt;/code&gt; not canonicalize the retrieved variable. &lt;code&gt;--no-type&lt;/code&gt; has no effect without &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; or &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Сбрасывает ранее установленный спецификатор типа (если он был ранее установлен). Этот параметр требует, чтобы &lt;code&gt;git config&lt;/code&gt; не канонизировал полученную переменную. &lt;code&gt;--no-type&lt;/code&gt; не действует без &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; или &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="911839695653d988872929c95814b8902e300040" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=oneline&lt;/code&gt;, the commit message is prefixed with this information on the same line. This option cannot be combined with &lt;code&gt;--reverse&lt;/code&gt;. See also &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt;.</source>
          <target state="translated">Под &lt;code&gt;--pretty=oneline&lt;/code&gt; сообщение фиксации предваряется этой информацией в той же строке. Этот параметр нельзя комбинировать с &lt;code&gt;--reverse&lt;/code&gt; . См. Также &lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="64ba59969ba5a36d002d9a189101c624fcf7d3cc" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=reference&lt;/code&gt;, this information will not be shown at all.</source>
          <target state="translated">В разделе &lt;code&gt;--pretty=reference&lt;/code&gt; эта информация не будет отображаться вообще.</target>
        </trans-unit>
        <trans-unit id="c73a6e04cc57ad10ee4ae7284f559a5ae2a53d36" translate="yes" xml:space="preserve">
          <source>Under certain circumstances, some versions of &lt;code&gt;diff&lt;/code&gt; do not correctly detect a missing new-line at the end of the file. As a result, patches created by such &lt;code&gt;diff&lt;/code&gt; programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug.</source>
          <target state="translated">При определенных обстоятельствах некоторые версии &lt;code&gt;diff&lt;/code&gt; неправильно обнаруживают отсутствующую новую строку в конце файла. В результате патчи, созданные такими программами &lt;code&gt;diff&lt;/code&gt; неправильно записывают неполные строки. Этот параметр добавляет поддержку для применения таких исправлений путем обхода этой ошибки.</target>
        </trans-unit>
        <trans-unit id="67a27dbf5548d05ac63e85bd8b4c875d8f48c102" translate="yes" xml:space="preserve">
          <source>Understanding History: Commits</source>
          <target state="translated">Понимание истории:Комментарии</target>
        </trans-unit>
        <trans-unit id="9334dba95d5dfb2042093dd9adbddea5f77c5eb4" translate="yes" xml:space="preserve">
          <source>Understanding history: History diagrams</source>
          <target state="translated">Понимаю историю:Исторические диаграммы</target>
        </trans-unit>
        <trans-unit id="85bd1a7ea75afef7e0417cd2bf9d9f3cf13e5e08" translate="yes" xml:space="preserve">
          <source>Understanding history: What is a branch?</source>
          <target state="translated">Понимаю историю:Что такое филиал?</target>
        </trans-unit>
        <trans-unit id="6d61d96a492f996316f1e84e66cbfde933315e2c" translate="yes" xml:space="preserve">
          <source>Understanding history: commits, parents, and reachability</source>
          <target state="translated">Понимание истории:обязательства,родители и достижимость.</target>
        </trans-unit>
        <trans-unit id="afa47a28efb9d6631a7be02ac359bed5256995ce" translate="yes" xml:space="preserve">
          <source>Undo a commit and redo</source>
          <target state="translated">Отменить обязательство и переделать</target>
        </trans-unit>
        <trans-unit id="61cb90c052dfcd0fda883c6029d1d0fc0a0f4685" translate="yes" xml:space="preserve">
          <source>Undo a commit, making it a topic branch</source>
          <target state="translated">Отменить коммит,сделав его тематической ветвью.</target>
        </trans-unit>
        <trans-unit id="93d74feb000c815128d68a09c83733db43b69c15" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull</source>
          <target state="translated">Отменить слияние или вытягивание</target>
        </trans-unit>
        <trans-unit id="4728c70cd06347b5f285fb3e7887387303b3968e" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull inside a dirty working tree</source>
          <target state="translated">Отмените слияние или втяните в грязное рабочее дерево.</target>
        </trans-unit>
        <trans-unit id="27b7abb5b90b7a2e8f00eaf74b6df8323ba7d926" translate="yes" xml:space="preserve">
          <source>Undo add</source>
          <target state="translated">Отменить добавление</target>
        </trans-unit>
        <trans-unit id="ca677a11d37ffdca5231911a194cc2fcdffc5a26" translate="yes" xml:space="preserve">
          <source>Undo commits permanently</source>
          <target state="translated">Отменить обязательства навсегда</target>
        </trans-unit>
        <trans-unit id="4180759bca2f04cde0ec69611cb0e0ec1cfe7139" translate="yes" xml:space="preserve">
          <source>Undoes the effects of &lt;code&gt;fetch&lt;/code&gt; back to the specified revision. This allows you to re-&lt;code&gt;fetch&lt;/code&gt; an SVN revision. Normally the contents of an SVN revision should never change and &lt;code&gt;reset&lt;/code&gt; should not be necessary. However, if SVN permissions change, or if you alter your --ignore-paths option, a &lt;code&gt;fetch&lt;/code&gt; may fail with &quot;not found in commit&quot; (file not previously visible) or &quot;checksum mismatch&quot; (missed a modification). If the problem file cannot be ignored forever (with --ignore-paths) the only way to repair the repo is to use &lt;code&gt;reset&lt;/code&gt;.</source>
          <target state="translated">Отменяет эффекты &lt;code&gt;fetch&lt;/code&gt; обратно в указанной версии. Это позволяет вам повторно &lt;code&gt;fetch&lt;/code&gt; версию SVN. Обычно содержимое ревизии SVN никогда не должно изменяться, и &lt;code&gt;reset&lt;/code&gt; не требуется. Однако при изменении разрешений SVN или при изменении параметра --ignore-paths &lt;code&gt;fetch&lt;/code&gt; может завершиться ошибкой с сообщением &amp;laquo;не найден в фиксации&amp;raquo; (файл ранее не был виден) или &amp;laquo;несоответствие контрольной суммы&amp;raquo; (изменение пропущено). Если проблемный файл нельзя игнорировать навсегда (с --ignore-paths), единственный способ восстановить репо - использовать &lt;code&gt;reset&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac1f58f831611819b4114b80dd55e3ce540d5b23" translate="yes" xml:space="preserve">
          <source>Undoing a merge</source>
          <target state="translated">Отмена слияния</target>
        </trans-unit>
        <trans-unit id="f552d5a5802e3df6273c784214def9840b82f594" translate="yes" xml:space="preserve">
          <source>Unfortunately this system becomes inefficient once a project has a lot of objects. Try this on an old project:</source>
          <target state="translated">К сожалению,эта система становится неэффективной,когда в проекте много объектов.Попробуйте это на старом проекте:</target>
        </trans-unit>
        <trans-unit id="c7deb06b3e42a38e2b00598939aa39f8d24897bd" translate="yes" xml:space="preserve">
          <source>Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.</source>
          <target state="translated">К сожалению,желаемый эффект очистки текстовых файлов со смешанными окончаниями строк и нежелательный эффект порчи бинарных файлов невозможно разглядеть.В обоих случаях CRLF-файлы удаляются необратимым образом.Для текстовых файлов это правильно,так как CRLF являются окончаниями строк,в то время как для двоичных файлов,преобразующих CRLF,повреждаются данные.</target>
        </trans-unit>
        <trans-unit id="6da1ce58d3a6c34c76807dc44593d7cd8c6563b6" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;--text&lt;/code&gt; is supplied patches of binary files without a textconv filter will be ignored.</source>
          <target state="translated">Если не &lt;code&gt;--text&lt;/code&gt; исправления двоичных файлов без фильтра textconv будут игнорироваться.</target>
        </trans-unit>
        <trans-unit id="54cbf98b314812a07f65f95ae77e8608ddf0b26f" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the &lt;code&gt;replace&lt;/code&gt; reference must not yet exist.</source>
          <target state="translated">Если не указан параметр &lt;code&gt;-f&lt;/code&gt; , ссылка на &lt;code&gt;replace&lt;/code&gt; еще не должна существовать.</target>
        </trans-unit>
        <trans-unit id="ec0a9816e3fe8947b4bfff6f5914c3288bed6fc9" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the named tag must not yet exist.</source>
          <target state="translated">Если не указан параметр &lt;code&gt;-f&lt;/code&gt; , именованный тег еще не должен существовать.</target>
        </trans-unit>
        <trans-unit id="7824ccb45f3d7be1fd07def25712792fbdf3f009" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git annotate&lt;/code&gt; in older versions of git, the extent of the annotation can be limited to both line ranges and revision ranges. The &lt;code&gt;-L&lt;/code&gt; option, which limits annotation to a range of lines, may be specified multiple times.</source>
          <target state="translated">В отличие от &lt;code&gt;git blame&lt;/code&gt; и &lt;code&gt;git annotate&lt;/code&gt; в более старых версиях git, размер аннотации может быть ограничен как диапазонами строк, так и диапазонами ревизий. Параметр &lt;code&gt;-L&lt;/code&gt; , ограничивающий аннотацию диапазоном строк, можно указывать несколько раз.</target>
        </trans-unit>
        <trans-unit id="1fa5e3a4c28161d2ef67ee80d5624341cfa56be1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git diff-files&lt;/code&gt;, which showed the difference between the index file and the working tree, &lt;code&gt;git diff-index&lt;/code&gt; shows the differences between a committed &lt;strong&gt;tree&lt;/strong&gt; and either the index file or the working tree. In other words, &lt;code&gt;git diff-index&lt;/code&gt; wants a tree to be diffed against, and before we did the commit, we couldn&amp;rsquo;t do that, because we didn&amp;rsquo;t have anything to diff against.</source>
          <target state="translated">В отличие от &lt;code&gt;git diff-files&lt;/code&gt; , который показал разницу между индексным файлом и рабочим деревом, &lt;code&gt;git diff-index&lt;/code&gt; показывает различия между зафиксированным &lt;strong&gt;деревом&lt;/strong&gt; и либо индексным файлом, либо рабочим деревом. Другими словами, &lt;code&gt;git diff-index&lt;/code&gt; хочет, чтобы дерево сравнивалось, и до того, как мы сделали фиксацию, мы не могли этого сделать, потому что нам не с чем было сравнивать.</target>
        </trans-unit>
        <trans-unit id="a75073ebd9356a7219cb30b4bb866c17ce8b906c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;gitk&lt;/code&gt;, &lt;code&gt;git gui&lt;/code&gt; focuses on commit generation and single file annotation and does not show project history. It does however supply menu actions to start a &lt;code&gt;gitk&lt;/code&gt; session from within &lt;code&gt;git gui&lt;/code&gt;.</source>
          <target state="translated">В отличие от &lt;code&gt;gitk&lt;/code&gt; , &lt;code&gt;git gui&lt;/code&gt; фокусируется на генерации коммитов и аннотации одного файла и не показывает историю проекта. Однако он предоставляет действия меню для запуска сеанса &lt;code&gt;gitk&lt;/code&gt; из &lt;code&gt;git gui&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cd17281830ac5a9aa50c0d768481eabf04240182" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;raw&lt;/code&gt; format above, the time zone/UTC offset information contained in an RFC 2822 date string is used to adjust the date value to UTC prior to storage. Therefore it is important that this information be as accurate as possible.</source>
          <target state="translated">В отличие от &lt;code&gt;raw&lt;/code&gt; формата, приведенного выше, информация о смещении часового пояса / UTC, содержащаяся в строке даты RFC 2822, используется для корректировки значения даты на UTC до сохранения. Поэтому важно, чтобы эта информация была как можно более точной.</target>
        </trans-unit>
        <trans-unit id="b9ebe23208a4d3f51d6690b78b04b40646f8e2f1" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;rfc2822&lt;/code&gt; format, this format is very strict. Any variation in formatting will cause fast-import to reject the value, and some sanity checks on the numeric values may also be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422977ffd462a03a6cbce65db58b07001eb2214f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;rfc2822&lt;/code&gt; format, this format is very strict. Any variation in formatting will cause fast-import to reject the value.</source>
          <target state="translated">В отличие от формата &lt;code&gt;rfc2822&lt;/code&gt; , этот формат очень строгий. Любое изменение форматирования приведет к тому, что быстрый импорт отклонит значение.</target>
        </trans-unit>
        <trans-unit id="a5e8af576412d2facd9f39a0996da0da165c42ee" translate="yes" xml:space="preserve">
          <source>Unlike the Porcelain format, the filename information is always given and terminates the entry:</source>
          <target state="translated">В отличие от формата &quot;Фарфор&quot;,информация об имени файла всегда указывается и завершает запись:</target>
        </trans-unit>
        <trans-unit id="b603b31236d9df1a4442c23c62ea6317f2525837" translate="yes" xml:space="preserve">
          <source>Unlike the longhand form, when Alice fetches from Bob using a remote repository shorthand set up with &lt;code&gt;git remote&lt;/code&gt;, what was fetched is stored in a remote-tracking branch, in this case &lt;code&gt;bob/master&lt;/code&gt;. So after this:</source>
          <target state="translated">В отличие от полной формы, когда Алиса получает данные от Боба, используя сокращенную запись удаленного репозитория, настроенную с помощью &lt;code&gt;git remote&lt;/code&gt; , то, что было получено, сохраняется в ветке удаленного отслеживания, в данном случае &lt;code&gt;bob/master&lt;/code&gt; . Итак, после этого:</target>
        </trans-unit>
        <trans-unit id="cc8e9909209a90f3a790bc3005980e8527de79e5" translate="yes" xml:space="preserve">
          <source>Unlike the traditional &lt;code&gt;unified&lt;/code&gt; diff format, which shows two files A and B with a single column that has &lt;code&gt;-&lt;/code&gt; (minus &amp;mdash; appears in A but removed in B), &lt;code&gt;+&lt;/code&gt; (plus &amp;mdash; missing in A but added to B), or &lt;code&gt;&quot; &quot;&lt;/code&gt; (space &amp;mdash; unchanged) prefix, this format compares two or more files file1, file2,&amp;hellip;​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X&amp;rsquo;s line is different from it.</source>
          <target state="translated">В отличие от традиционного &lt;code&gt;unified&lt;/code&gt; формата сравнения, который показывает два файла A и B с одним столбцом, в котором есть &lt;code&gt;-&lt;/code&gt; (минус - отображается в A, но удален в B), &lt;code&gt;+&lt;/code&gt; (плюс - отсутствует в A, но добавлен к B) или &lt;code&gt;&quot; &quot;&lt;/code&gt; ( пробел - без изменений), этот формат сравнивает два или более файла file1, file2,&amp;hellip; с одним файлом X и показывает, чем X отличается от каждого из fileN. По одному столбцу для каждого из fileN добавляется к строке вывода, чтобы отметить, чем строка X отличается от нее.</target>
        </trans-unit>
        <trans-unit id="71233552f2a4fc77054593fac1f6899dd0308229" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; and &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">В отличие от таких переменных , как &lt;code&gt;color.ui&lt;/code&gt; и &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; и &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; переменные не будут падать обратно на &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; конфигурации , если они не являются устанавливать. Чтобы единообразно настроить одни и те же параметры fsck в различных обстоятельствах, все три из них должны иметь одинаковые значения.</target>
        </trans-unit>
        <trans-unit id="00ee5ed7b48c819f6f323dbe1b9a72aef5a0c864" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.skipList&lt;/code&gt; and &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.skipList&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">В отличие от таких переменных , как &lt;code&gt;color.ui&lt;/code&gt; и &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.skipList&lt;/code&gt; и &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; переменные не будут падать обратно на &lt;code&gt;fsck.skipList&lt;/code&gt; конфигурации , если они не установлены. Чтобы единообразно настроить одни и те же параметры fsck в различных обстоятельствах, все три из них должны иметь одинаковые значения.</target>
        </trans-unit>
        <trans-unit id="8a3dffb4c65d7a1f27e907ef2a919885d1125ac9" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;), whether that&amp;rsquo;s swapping e.g. a tree object for a blob, or a commit for another commit that&amp;rsquo;s doesn&amp;rsquo;t have the previous commit as an ancestor etc.</source>
          <target state="translated">В отличие при нажатии с &lt;a href=&quot;git-push&quot;&gt;GIT-толчком [1]&lt;/a&gt; , любые обновления за пределами от &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; будут приняты без &lt;code&gt;+&lt;/code&gt; в refspec (или &lt;code&gt;--force&lt;/code&gt; ), независимо от того , что это поменяв , например , объект дерева для сгустка, или коммит для другого коммита, у которого нет предыдущего коммита в качестве предка и т. д.</target>
        </trans-unit>
        <trans-unit id="2f2516ccb262ba2dda1eeb5218e911868837ce78" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, there is no configuration which&amp;rsquo;ll amend these rules, and nothing like a &lt;code&gt;pre-fetch&lt;/code&gt; hook analogous to the &lt;code&gt;pre-receive&lt;/code&gt; hook.</source>
          <target state="translated">В отличие от отправки с помощью &lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt; , здесь нет конфигурации, которая изменяет эти правила, и нет ничего похожего на ловушку &lt;code&gt;pre-fetch&lt;/code&gt; аналогичную ловушке &lt;code&gt;pre-receive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb79f423670171900d7e94880e8d45907e9f995c" translate="yes" xml:space="preserve">
          <source>Unlock a working tree, allowing it to be pruned, moved or deleted.</source>
          <target state="translated">Разблокировка рабочего дерева,позволяющая обрезать,перемещать или удалять его.</target>
        </trans-unit>
        <trans-unit id="b00eee8b49227caba98e5d68033660ff6076ebcc" translate="yes" xml:space="preserve">
          <source>Unmerged entries have the following format; the first character is a &quot;u&quot; to distinguish from ordinary changed entries.</source>
          <target state="translated">Незаполненные записи имеют следующий формат;первый символ-&quot;u&quot;,чтобы отличить их от обычных измененных записей.</target>
        </trans-unit>
        <trans-unit id="2c99cc569343579b221cd64026ecc62bb1c21d7b" translate="yes" xml:space="preserve">
          <source>Unpack objects from a packed archive</source>
          <target state="translated">Распаковать объекты из упакованного архива</target>
        </trans-unit>
        <trans-unit id="42e2a268d032a6abb00d4cbd80feaa1ecd7a75d6" translate="yes" xml:space="preserve">
          <source>Unreachable tags, commits, and trees will also be accessed to find the tips of dangling segments of history. Use &lt;code&gt;--no-dangling&lt;/code&gt; if you don&amp;rsquo;t care about this output and want to speed it up further.</source>
          <target state="translated">Недостижимые теги, коммиты и деревья также будут доступны для поиска подсказок висящих сегментов истории. Используйте &lt;code&gt;--no-dangling&lt;/code&gt; , если вас не волнует этот вывод и вы хотите его еще больше ускорить.</target>
        </trans-unit>
        <trans-unit id="d8a4efd1d470fc3c5ede97084c82a35b9804122a" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules, i.e. remove the whole &lt;code&gt;submodule.$name&lt;/code&gt; section from .git/config together with their work tree. Further calls to &lt;code&gt;git submodule update&lt;/code&gt;, &lt;code&gt;git submodule foreach&lt;/code&gt; and &lt;code&gt;git submodule sync&lt;/code&gt; will skip any unregistered submodules until they are initialized again, so use this command if you don&amp;rsquo;t want to have a local checkout of the submodule in your working tree anymore.</source>
          <target state="translated">Отмените регистрацию данных подмодулей, т.е. удалите весь раздел submodule &lt;code&gt;submodule.$name&lt;/code&gt; Name из .git / config вместе с их рабочим деревом. Дальнейшие вызовы &lt;code&gt;git submodule update&lt;/code&gt; , &lt;code&gt;git submodule foreach&lt;/code&gt; и &lt;code&gt;git submodule sync&lt;/code&gt; будут пропускать любые незарегистрированные подмодули, пока они не будут снова инициализированы, поэтому используйте эту команду, если вы больше не хотите иметь локальную проверку подмодуля в вашем рабочем дереве.</target>
        </trans-unit>
        <trans-unit id="1431f68f359f8699975be39dca08302c67d68d9e" translate="yes" xml:space="preserve">
          <source>Unset</source>
          <target state="translated">Unset</target>
        </trans-unit>
        <trans-unit id="8ff954e80b42b18d3d0fcda602d94db1e46da2d4" translate="yes" xml:space="preserve">
          <source>Unsetting the &lt;code&gt;text&lt;/code&gt; attribute on a path tells Git not to attempt any end-of-line conversion upon checkin or checkout.</source>
          <target state="translated">Снятие атрибута &lt;code&gt;text&lt;/code&gt; на пути указывает Git не предпринимать попытки преобразования конца строки при возврате или оформлении заказа.</target>
        </trans-unit>
        <trans-unit id="7f84947907454dd0cb412d2a8e5d5e3b9c2382f0" translate="yes" xml:space="preserve">
          <source>Unsetting the variable, or setting it to empty, &quot;0&quot; or &quot;false&quot; (case insensitive) disables trace messages.</source>
          <target state="translated">Снятие переменной или установка ее в пустую,&quot;0&quot; или &quot;ложь&quot; (нечувствительная к регистру)отключает сообщения о трассировке.</target>
        </trans-unit>
        <trans-unit id="c176eff9c64fa28a4b6af1aa296cc1394bbf7a80" translate="yes" xml:space="preserve">
          <source>Unshelve</source>
          <target state="translated">Unshelve</target>
        </trans-unit>
        <trans-unit id="9fde2b36ff30053ad23e6a695929873244cc0367" translate="yes" xml:space="preserve">
          <source>Unshelve options</source>
          <target state="translated">нестандартные варианты</target>
        </trans-unit>
        <trans-unit id="004e593b6690fb3d48f4f5a86eac1cd13b5b2234" translate="yes" xml:space="preserve">
          <source>Unshelving will take a shelved P4 changelist, and produce the equivalent git commit in the branch refs/remotes/p4-unshelved/&amp;lt;changelist&amp;gt;.</source>
          <target state="translated">При снятии с полки будет создан отложенный на полку список изменений P4, а в ветке refs / remotes / p4-unshelved / &amp;lt;changelist&amp;gt; будет создан эквивалентный коммит git.</target>
        </trans-unit>
        <trans-unit id="a6e7eb706e115cdaf88206be37eb67b232d007bc" translate="yes" xml:space="preserve">
          <source>Unspecified</source>
          <target state="translated">Unspecified</target>
        </trans-unit>
        <trans-unit id="78f88266b367e8b6e086054e91f1ebc89e168d16" translate="yes" xml:space="preserve">
          <source>Until Git version 2.20, and unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates to &lt;code&gt;refs/tags/*&lt;/code&gt; would be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;). When fetching, we promiscuously considered all tag updates from a remote to be forced fetches. Since Git version 2.20, fetching to update &lt;code&gt;refs/tags/*&lt;/code&gt; works the same way as when pushing. I.e. any updates will be rejected without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;).</source>
          <target state="translated">До Git версии 2.20, и в отличие от при нажатии с &lt;a href=&quot;git-push&quot;&gt;GIT-толчка [1]&lt;/a&gt; , любые обновления &lt;code&gt;refs/tags/*&lt;/code&gt; будет принят без &lt;code&gt;+&lt;/code&gt; в refspec (или &lt;code&gt;--force&lt;/code&gt; ). При выборке мы случайно считали все обновления тегов с удаленного устройства принудительной выборкой. Начиная с версии Git 2.20 выборка для обновления &lt;code&gt;refs/tags/*&lt;/code&gt; работает так же, как и при нажатии. Т.е. любые обновления будут отклонены без &lt;code&gt;+&lt;/code&gt; в refspec (или &lt;code&gt;--force&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9514c500d61430538679eec9081979b274172cf9" translate="yes" xml:space="preserve">
          <source>Untracked cache</source>
          <target state="translated">неотслеживаемый кэш</target>
        </trans-unit>
        <trans-unit id="614ce4ff1bf92552970ab54ff766006d0da693f9" translate="yes" xml:space="preserve">
          <source>Untracked items have the following format:</source>
          <target state="translated">Неотслеживаемые элементы имеют следующий формат:</target>
        </trans-unit>
        <trans-unit id="1eade895e693b4111455eda06a87af1097cf4d6c" translate="yes" xml:space="preserve">
          <source>Untyped &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;, e.g. the contents of a file.</source>
          <target state="translated">Нетипизированный &lt;a href=&quot;#def_object&quot;&gt;объект&lt;/a&gt; , например, содержимое файла.</target>
        </trans-unit>
        <trans-unit id="7b839a219907b09268c047c522a03961e96bd78b" translate="yes" xml:space="preserve">
          <source>Unused configuration variable. Used in Git versions 2.20 and 2.21 as an escape hatch to enable the legacy shellscript implementation of rebase. Now the built-in rewrite of it in C is always used. Setting this will emit a warning, to alert any remaining users that setting this now does nothing.</source>
          <target state="translated">Неиспользуемая конфигурационная переменная.Используется в Git'е версий 2.20 и 2.21 в качестве экранирующего люка для включения реализации rebase по устаревшим shellscript'ам.Теперь всегда используется встроенная перезапись на C.Установка этой переменной будет выдавать предупреждение,чтобы предупредить всех оставшихся пользователей,что установка этой переменной ничего не делает.</target>
        </trans-unit>
        <trans-unit id="315fc3f07f41b1c3600ceb87f6a9f32b85f1da70" translate="yes" xml:space="preserve">
          <source>Unused configuration variable. Used in Git versions 2.22 to 2.26 as an escape hatch to enable the legacy shellscript implementation of stash. Now the built-in rewrite of it in C is always used. Setting this will emit a warning, to alert any remaining users that setting this now does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca31b4c795dcb03444e6d0c037dbcd47081c70a9" translate="yes" xml:space="preserve">
          <source>Update affected files from CVS repository before attempting export.</source>
          <target state="translated">Обновите поврежденные файлы из CVS репозитория перед попыткой экспорта.</target>
        </trans-unit>
        <trans-unit id="82e59b151c004802a1fa23ba3e75a68d14df0e2a" translate="yes" xml:space="preserve">
          <source>Update an existing shelved changelist with this commit. Implies --shelve. Repeat for multiple shelved changelists.</source>
          <target state="translated">Обновите существующий полочный список сменщиков с помощью этого коммита.Подразумевает-полку.Повторите для нескольких полочных сменщиков.</target>
        </trans-unit>
        <trans-unit id="5433caf2e572561b5bb38ff5e69b0263d08b90aa" translate="yes" xml:space="preserve">
          <source>Update and examine branches from the repository you cloned from:</source>
          <target state="translated">Обновляйте и исследуйте ветки из репозитория,из которого вы клонировали:</target>
        </trans-unit>
        <trans-unit id="381f15e94e347f076ef71f417ee29b782a6dcc4d" translate="yes" xml:space="preserve">
          <source>Update auxiliary info file to help dumb servers</source>
          <target state="translated">Обновить вспомогательный информационный файл для помощи немым серверам</target>
        </trans-unit>
        <trans-unit id="d94aecddb1a2d3c03afb4a7cf4e1bb3a0123c2c6" translate="yes" xml:space="preserve">
          <source>Update hook</source>
          <target state="translated">Крючок для обновления</target>
        </trans-unit>
        <trans-unit id="e5f960e3f28d7d7ea59f8750682a356ae18535be" translate="yes" xml:space="preserve">
          <source>Update remote refs along with associated objects</source>
          <target state="translated">Обновление удаленных ссылок вместе с соответствующими объектами</target>
        </trans-unit>
        <trans-unit id="ee3315ea0cbb49ab6105a89db0964480184c3ce9" translate="yes" xml:space="preserve">
          <source>Update the Git repository with recent changes from p4, rebasing your work on top:</source>
          <target state="translated">Обновите Git-репозиторий последними изменениями из p4,переделав вашу работу сверху:</target>
        </trans-unit>
        <trans-unit id="5937294218e2d7b95b7b77414b52c326239ca8d5" translate="yes" xml:space="preserve">
          <source>Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no &amp;lt;pathspec&amp;gt; is used.</source>
          <target state="translated">Обновите индекс, добавляя новые файлы, которые неизвестны индексу, и файлы, измененные в рабочем дереве, но игнорируйте файлы, которые были удалены из рабочего дерева. Эта опция не работает, когда не используется &amp;lt;pathspec&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="94df66721f1bfd4990972c3f5f4a0d6b61f59f9e" translate="yes" xml:space="preserve">
          <source>Update the index just where it already has an entry matching &amp;lt;pathspec&amp;gt;. This removes as well as modifies index entries to match the working tree, but adds no new files.</source>
          <target state="translated">Обновите индекс там, где уже есть запись, соответствующая &amp;lt;pathspec&amp;gt;. Это удаляет, а также изменяет записи индекса в соответствии с рабочим деревом, но не добавляет новых файлов.</target>
        </trans-unit>
        <trans-unit id="03d173e098621e3730258998672da85e88b347b1" translate="yes" xml:space="preserve">
          <source>Update the index not only where the working tree has a file matching &amp;lt;pathspec&amp;gt; but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.</source>
          <target state="translated">Обновите индекс не только там, где в рабочем дереве есть файл, соответствующий &amp;lt;pathspec&amp;gt;, но и там, где в индексе уже есть запись. Это добавляет, изменяет и удаляет записи индекса в соответствии с рабочим деревом.</target>
        </trans-unit>
        <trans-unit id="1a6e291eaaa3e731de98429f7fb37fdac90f0a22" translate="yes" xml:space="preserve">
          <source>Update the object name stored in a ref safely</source>
          <target state="translated">Обновите имя объекта,сохраненное в справочнике,безопасно.</target>
        </trans-unit>
        <trans-unit id="00f0c8a1eac4ed2966a7d563ef87a6387d365dcf" translate="yes" xml:space="preserve">
          <source>Update the origin repository&amp;rsquo;s master branch with the dev branch, allowing non-fast-forward updates. &lt;strong&gt;This can leave unreferenced commits dangling in the origin repository.&lt;/strong&gt; Consider the following situation, where a fast-forward is not possible:</source>
          <target state="translated">Обновите главную ветку исходного репозитория веткой dev, разрешив обновления без быстрой перемотки вперед. &lt;strong&gt;Это может привести к тому, что коммиты, на которые нет ссылок, останутся в исходном репозитории. &lt;/strong&gt;Рассмотрим следующую ситуацию, когда перемотка вперед невозможна:</target>
        </trans-unit>
        <trans-unit id="b73d3968359117cfd051c2e81a709d1d9e1579b7" translate="yes" xml:space="preserve">
          <source>Update the reference to the value of the top reflog entry (i.e. &amp;lt;ref&amp;gt;@{0}) if the previous top entry was pruned. (This option is ignored for symbolic references.)</source>
          <target state="translated">Обновите ссылку на значение верхней записи журнала ссылок (т. Е. &amp;lt;ref&amp;gt; @ {0}), если предыдущая верхняя запись была удалена. (Эта опция игнорируется для символических ссылок.)</target>
        </trans-unit>
        <trans-unit id="d7c08d3ae4fbcbbf6a3dc89cdba309659a4395bc" translate="yes" xml:space="preserve">
          <source>Update the reflog for &amp;lt;name&amp;gt; with &amp;lt;reason&amp;gt;. This is valid only when creating or updating a symbolic ref.</source>
          <target state="translated">Обновите журнал ссылок для &amp;lt;имя&amp;gt;, указав &amp;lt;причина&amp;gt;. Это действительно только при создании или обновлении символьной ссылки.</target>
        </trans-unit>
        <trans-unit id="d053e75e709458eca9f01e5c8910658ea18a25cf" translate="yes" xml:space="preserve">
          <source>Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules. The &quot;updating&quot; can be done in several ways depending on command line options and the value of &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable. The command line option takes precedence over the configuration variable. If neither is given, a &lt;code&gt;checkout&lt;/code&gt; is performed. The &lt;code&gt;update&lt;/code&gt; procedures supported both from the command line as well as through the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration are:</source>
          <target state="translated">Обновите зарегистрированные подмодули, чтобы они соответствовали ожиданиям суперпроекта, путем клонирования недостающих подмодулей, получения недостающих коммитов в подмодулях и обновления рабочего дерева подмодулей. &amp;laquo;Обновление&amp;raquo; может быть выполнено несколькими способами в зависимости от параметров командной строки и значения переменной конфигурации &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; . Параметр командной строки имеет приоритет над переменной конфигурации. Если ни один из них не указан, выполняется &lt;code&gt;checkout&lt;/code&gt; . Процедуры &lt;code&gt;update&lt;/code&gt; , поддерживаемые как из командной строки, так и через &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration:</target>
        </trans-unit>
        <trans-unit id="9a189cb9ecf6f808972788504f5218556d75488e" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches for the repository you cloned from, then merge one of them into your current branch:</source>
          <target state="translated">Обновите удалённые отслеживаемые ветки для репозитория,из которого вы клонировали,затем слейте одну из них в текущую:</target>
        </trans-unit>
        <trans-unit id="b4a6a66956cae4a12a849cae6094fa1d9187d293" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches:</source>
          <target state="translated">Обновите дистанционно отслеживаемые ветки:</target>
        </trans-unit>
        <trans-unit id="6d5daf3e771e4022d14d6727e49c69b93e7e63af" translate="yes" xml:space="preserve">
          <source>Update the sparse-checkout file to include additional patterns. By default, these patterns are read from the command-line arguments, but they can be read from stdin using the &lt;code&gt;--stdin&lt;/code&gt; option. When &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled, the given patterns are interpreted as directory names as in the &lt;code&gt;set&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68dff1cbdca38d9a97763a1d9fd849e951b6a1b" translate="yes" xml:space="preserve">
          <source>Updates files in the working tree to match the version in the index or the specified tree. If no pathspec was given, &lt;code&gt;git checkout&lt;/code&gt; will also update &lt;code&gt;HEAD&lt;/code&gt; to set the specified branch as the current branch.</source>
          <target state="translated">Обновляет файлы в рабочем дереве, чтобы они соответствовали версии в индексе или указанном дереве. Если путь не был указан, &lt;code&gt;git checkout&lt;/code&gt; также обновит &lt;code&gt;HEAD&lt;/code&gt; , чтобы установить указанную ветвь в качестве текущей.</target>
        </trans-unit>
        <trans-unit id="091bf3e8c6fb28b8688a9117ac018615896df561" translate="yes" xml:space="preserve">
          <source>Updates remote refs using local refs, while sending objects necessary to complete the given refs.</source>
          <target state="translated">Обновление удаленных ссылок с использованием локальных ссылок при отправке объектов,необходимых для завершения данных ссылок.</target>
        </trans-unit>
        <trans-unit id="91ca9b60db53a2ebedea4c579e08371ec4025869" translate="yes" xml:space="preserve">
          <source>Updating A with the resulting merge commit will fast-forward and your push will be accepted.</source>
          <target state="translated">Обновление A с последующим коммитом слияния будет быстро перемотано вперед,и ваше нажатие будет принято.</target>
        </trans-unit>
        <trans-unit id="b1b31935884de26d68d690781ac1ec814b3bc924" translate="yes" xml:space="preserve">
          <source>Updating a repository with git fetch</source>
          <target state="translated">Обновление репозитория с помощью git-fetch</target>
        </trans-unit>
        <trans-unit id="c2ed1ab77aee7c3aaed70bc448641d662955a12f" translate="yes" xml:space="preserve">
          <source>Updating existing tests that assume GIT_TRACE format messages.</source>
          <target state="translated">Обновление существующих тестов,которые принимают сообщения формата GIT_TRACE.</target>
        </trans-unit>
        <trans-unit id="c5ded60beb1b0eb17cab63a8e09a8acd2261286e" translate="yes" xml:space="preserve">
          <source>Updating the index did something else too: it created a &lt;code&gt;.git/index&lt;/code&gt; file. This is the index that describes your current working tree, and something you should be very aware of. Again, you normally never worry about the index file itself, but you should be aware of the fact that you have not actually really &quot;checked in&quot; your files into Git so far, you&amp;rsquo;ve only &lt;strong&gt;told&lt;/strong&gt; Git about them.</source>
          <target state="translated">Обновление индекса сделало и кое-что еще: он создал файл &lt;code&gt;.git/index&lt;/code&gt; . Это индекс, который описывает ваше текущее рабочее дерево, и о чем вам следует хорошо знать. Опять же, вы обычно никогда не беспокоитесь о самом индексном файле, но вам следует помнить о том, что вы на самом деле пока не &amp;laquo;вернули&amp;raquo; свои файлы в Git, вы только &lt;strong&gt;рассказали&lt;/strong&gt; о них Git.</target>
        </trans-unit>
        <trans-unit id="583381e5edf6e3ab467919c38286667f0916979d" translate="yes" xml:space="preserve">
          <source>Upon completion, &amp;lt;branch&amp;gt; will be the current branch.</source>
          <target state="translated">По завершении &amp;lt;ветка&amp;gt; будет текущей веткой.</target>
        </trans-unit>
        <trans-unit id="c956664b8da61af6d0e1bf33a6e1ff75cbe45ad1" translate="yes" xml:space="preserve">
          <source>Upon seeing an invalid object name in the input, pretend as if the bad input was not given.</source>
          <target state="translated">Увидев на входе неверное имя объекта,притворитесь,что неверный ввод не был дан.</target>
        </trans-unit>
        <trans-unit id="d725441fc805b8226e9417fb2c8cf53ac8d791d5" translate="yes" xml:space="preserve">
          <source>Upstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch.</source>
          <target state="translated">Верхнее ответвление для сравнения.Может быть любой корректный коммит,а не только имя существующей ветки.По умолчанию используется настройка по умолчанию для текущей ветки.</target>
        </trans-unit>
        <trans-unit id="f5808323e4ba717fc383cb75e63b6cf3a4e857e7" translate="yes" xml:space="preserve">
          <source>Upstream branch to search for equivalent commits. Defaults to the upstream branch of HEAD.</source>
          <target state="translated">Верхняя ветка для поиска эквивалентных коммитов.По умолчанию для верхней ветки HEAD.</target>
        </trans-unit>
        <trans-unit id="309bc26d3c4c2649258f95c7069216bb2a7ac5f4" translate="yes" xml:space="preserve">
          <source>Upstream location from which commits are identified to submit to p4. By default, this is the most recent p4 commit reachable from &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">Местоположение в восходящем направлении, из которого идентифицируются коммиты для отправки в p4. По умолчанию это самая последняя фиксация p4, доступная из &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="df28f1403e8348eae4829434034d1a95e5fe659d" translate="yes" xml:space="preserve">
          <source>Url translation</source>
          <target state="translated">Урл-перевод</target>
        </trans-unit>
        <trans-unit id="7ae770d8c2db91584c78e413662ced65719f53ca" translate="yes" xml:space="preserve">
          <source>Usage of this flag will probably be rare, since you can get rid of commits that start empty by just firing up an interactive rebase and removing the lines corresponding to the commits you don&amp;rsquo;t want. This flag exists as a convenient shortcut, such as for cases where external tools generate many empty commits and you want them all removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51159e5f3b0adbeed98e188d040286280a5320b" translate="yes" xml:space="preserve">
          <source>Usage text</source>
          <target state="translated">Текст использования</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="6039144c2dc6586b6f3f0cb7423bcc0b3de0d0c1" translate="yes" xml:space="preserve">
          <source>Use &quot;patience diff&quot; algorithm when generating patches.</source>
          <target state="translated">Используйте алгоритм &quot;терпения diff&quot; при генерации патчей.</target>
        </trans-unit>
        <trans-unit id="1712fa1f1e6f89a27b7d3117ed39073a3258971d" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;dir&amp;gt; to store the resulting files, instead of the current working directory.</source>
          <target state="translated">Используйте &amp;lt;dir&amp;gt; для хранения полученных файлов вместо текущего рабочего каталога.</target>
        </trans-unit>
        <trans-unit id="89ed1ad2d65d4e1af42e685a9ee22c739e5d2c9b" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;message&amp;gt; instead of the branch names for the first line of the log message. For use with &lt;code&gt;--log&lt;/code&gt;.</source>
          <target state="translated">Используйте &amp;lt;message&amp;gt; вместо имен веток в первой строке сообщения журнала. Для использования с &lt;code&gt;--log&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8e6c324c4e7440184ef28eb2f6fc1fca5a4a325" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;regex&amp;gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies &lt;code&gt;--word-diff&lt;/code&gt; unless it was already enabled.</source>
          <target state="translated">Используйте &amp;lt;regex&amp;gt;, чтобы решить, что такое слово, вместо того, чтобы рассматривать пробелы без пробелов как слово. Также подразумевает &lt;code&gt;--word-diff&lt;/code&gt; , если он еще не был включен.</target>
        </trans-unit>
        <trans-unit id="f70b8a97f949594b729b07efce2ca59a63023925" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;!&lt;/code&gt; to not make the corresponding negated long option available.</source>
          <target state="translated">Используйте &lt;code&gt;!&lt;/code&gt; чтобы не сделать доступным соответствующий отрицательный длинный вариант.</target>
        </trans-unit>
        <trans-unit id="f7924a219e6794d45a36b15b2c44738227b795ff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; to set the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; explicitly. e.g., &quot;git remote set-head origin master&quot; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/master&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">Используйте &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; , чтобы явно установить символические ссылки &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; . например, &amp;laquo;git remote set-head origin master&amp;raquo; установит для символической ссылки &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; значение &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; . Это будет работать, только если &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; уже существует; в противном случае он должен быть получен первым.</target>
        </trans-unit>
        <trans-unit id="e726751622c7eadb004a31b60b5fa1e9cc1fbf90" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; to set the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; explicitly. e.g., &lt;code&gt;git
remote set-head origin master&lt;/code&gt; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/master&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d950943422ee3b93275d1e4b1e510463e5b432e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to contact a running cache daemon (or start a new cache daemon if one is not started). Defaults to &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; unless &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; exists in which case &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; is used instead. If your home directory is on a network-mounted filesystem, you may need to change this to a local filesystem. You must specify an absolute path.</source>
          <target state="translated">Используйте &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; , чтобы связаться с запущенным демоном кеширования (или запустить новый демон кеширования, если он еще не запущен). По умолчанию - &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; если только &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; не существует, и в этом случае вместо него используется &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; . Если ваш домашний каталог находится в сетевой файловой системе, вам может потребоваться изменить его на локальную файловую систему. Вы должны указать абсолютный путь.</target>
        </trans-unit>
        <trans-unit id="faabe60607ec900b5e4ad4f074b4870d8f9c10c6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to lookup and store credentials. The file will have its filesystem permissions set to prevent other users on the system from reading it, but will not be encrypted or otherwise protected. If not specified, credentials will be searched for from &lt;code&gt;~/.git-credentials&lt;/code&gt; and &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt;, and credentials will be written to &lt;code&gt;~/.git-credentials&lt;/code&gt; if it exists, or &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; if it exists and the former does not. See also &lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;.</source>
          <target state="translated">Используйте &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; для поиска и хранения учетных данных. Для файла будут установлены разрешения файловой системы, чтобы другие пользователи системы не могли его читать, но он не будет зашифрован или защищен иным образом. Если не указано, учетные данные будут искать в &lt;code&gt;~/.git-credentials&lt;/code&gt; и &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; , и учетные данные будут записаны в &lt;code&gt;~/.git-credentials&lt;/code&gt; , если он существует, или в &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; если он существует а первое - нет. См. Также &lt;a href=&quot;#FILES&quot;&gt;ФАЙЛЫ&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aadb92eae500ef695bbe6a445720ce25246dd04e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;*&lt;/code&gt; to mean that this option should not be listed in the usage generated for the &lt;code&gt;-h&lt;/code&gt; argument. It&amp;rsquo;s shown for &lt;code&gt;--help-all&lt;/code&gt; as documented in &lt;a href=&quot;gitcli&quot;&gt;gitcli[7]&lt;/a&gt;.</source>
          <target state="translated">Используйте &lt;code&gt;*&lt;/code&gt; , чтобы обозначить, что этот параметр не должен быть указан в использовании, созданном для аргумента &lt;code&gt;-h&lt;/code&gt; . Это показано для &lt;code&gt;--help-all&lt;/code&gt; , как &lt;a href=&quot;gitcli&quot;&gt;описано&lt;/a&gt; в gitcli [7] .</target>
        </trans-unit>
        <trans-unit id="3bbcee2a044e9c08185b38acb1e1c57ceea88054" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--no-guess&lt;/code&gt; to disable this.</source>
          <target state="translated">Используйте &lt;code&gt;--no-guess&lt;/code&gt; , чтобы отключить это.</target>
        </trans-unit>
        <trans-unit id="6deefc2a8fa6667ca14a90dee15faf81b1f0546a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-o master&lt;/code&gt; for continuing an import that was initially done by the old cvs2git tool.</source>
          <target state="translated">Используйте &lt;code&gt;-o master&lt;/code&gt; для продолжения импорта, который изначально был выполнен старым инструментом cvs2git.</target>
        </trans-unit>
        <trans-unit id="a4527eec708654a210ce88433047c8e573fb91f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-r&lt;/code&gt; together with &lt;code&gt;-d&lt;/code&gt; to delete remote-tracking branches. Note, that it only makes sense to delete remote-tracking branches if they no longer exist in the remote repository or if &lt;code&gt;git fetch&lt;/code&gt; was configured not to fetch them again. See also the &lt;code&gt;prune&lt;/code&gt; subcommand of &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt; for a way to clean up all obsolete remote-tracking branches.</source>
          <target state="translated">Используйте &lt;code&gt;-r&lt;/code&gt; вместе с &lt;code&gt;-d&lt;/code&gt; , чтобы удалить ветки удаленного отслеживания. Обратите внимание, что есть смысл удалять ветки удаленного отслеживания, только если они больше не существуют в удаленном репозитории или если &lt;code&gt;git fetch&lt;/code&gt; был настроен на запрет их повторной загрузки. См. Также подкоманду &lt;code&gt;prune&lt;/code&gt; в &lt;a href=&quot;git-remote&quot;&gt;git-remote [1],&lt;/a&gt; чтобы узнать, как очистить все устаревшие ветки удаленного отслеживания.</target>
        </trans-unit>
        <trans-unit id="eb7d25cab29167524de808a8da669505756898ee" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;=&lt;/code&gt; if the option takes an argument.</source>
          <target state="translated">Используйте &lt;code&gt;=&lt;/code&gt; , если опция принимает аргумент.</target>
        </trans-unit>
        <trans-unit id="d247642d4c8609f74c2030daa3d24c7c82d2e46d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;?&lt;/code&gt; to mean that the option takes an optional argument. You probably want to use the &lt;code&gt;--stuck-long&lt;/code&gt; mode to be able to unambiguously parse the optional argument.</source>
          <target state="translated">Использовать &lt;code&gt;?&lt;/code&gt; означает, что опция принимает необязательный аргумент. Вероятно, вы захотите использовать режим &lt;code&gt;--stuck-long&lt;/code&gt; , чтобы иметь возможность однозначно анализировать необязательный аргумент.</target>
        </trans-unit>
        <trans-unit id="7929eb6fd77d1ea35c9c481fc89518eafcc1cd45" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git bisect&lt;/code&gt; to get a short usage description, and &lt;code&gt;git bisect
help&lt;/code&gt; or &lt;code&gt;git bisect -h&lt;/code&gt; to get a long usage description.</source>
          <target state="translated">Используйте &lt;code&gt;git bisect&lt;/code&gt; , чтобы получить краткое описание использования, и &lt;code&gt;git bisect help&lt;/code&gt; или &lt;code&gt;git bisect -h&lt;/code&gt; , чтобы получить подробное описание использования.</target>
        </trans-unit>
        <trans-unit id="599c65a25784af23c9351ba6f4874c534a65a263" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git cherry origin&lt;/code&gt; to see which ones of your patches were accepted, and/or use &lt;code&gt;git rebase origin&lt;/code&gt; to port your unmerged changes forward to the updated upstream.</source>
          <target state="translated">Используйте &lt;code&gt;git cherry origin&lt;/code&gt; , чтобы узнать, какие из ваших патчей были приняты, и / или используйте &lt;code&gt;git rebase origin&lt;/code&gt; , чтобы перенести ваши не объединенные изменения в обновленный апстрим.</target>
        </trans-unit>
        <trans-unit id="f1986201248cbf297f2fb86d6f520b30d057ce7d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; or &lt;code&gt;git remote update&lt;/code&gt; to stay up to date.</source>
          <target state="translated">Используйте &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; или &lt;code&gt;git remote update&lt;/code&gt; , чтобы оставаться в курсе.</target>
        </trans-unit>
        <trans-unit id="252ef42d37b56d31d5e5dc2525ae974052dfca91" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git format-patch origin&lt;/code&gt; to prepare patches for e-mail submission to your upstream and send it out. Go back to step 2. and continue.</source>
          <target state="translated">Используйте &lt;code&gt;git format-patch origin&lt;/code&gt; , чтобы подготовить исправления для отправки по электронной почте в ваш апстрим и отправить его. Вернитесь к шагу 2. и продолжайте.</target>
        </trans-unit>
        <trans-unit id="cd30f3ed950161de3f8267d9a18953af3c02784f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git mergetool&lt;/code&gt; to run one of several merge utilities to resolve merge conflicts. It is typically run after &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">Используйте &lt;code&gt;git mergetool&lt;/code&gt; для запуска одной из нескольких утилит слияния для разрешения конфликтов слияния. Обычно он запускается после &lt;code&gt;git merge&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b298c06fc405635f29d06efdf0f42592d8075f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in option parsing mode (see PARSEOPT section below).</source>
          <target state="translated">Используйте &lt;code&gt;git rev-parse&lt;/code&gt; в режиме анализа параметров (см. Раздел PARSEOPT ниже).</target>
        </trans-unit>
        <trans-unit id="7c9820d48befbd19730095f238fb8a15824823ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in shell quoting mode (see SQ-QUOTE section below). In contrast to the &lt;code&gt;--sq&lt;/code&gt; option below, this mode does only quoting. Nothing else is done to command input.</source>
          <target state="translated">Используйте &lt;code&gt;git rev-parse&lt;/code&gt; в режиме цитирования оболочки (см. Раздел SQ-QUOTE ниже). В отличие от параметра &lt;code&gt;--sq&lt;/code&gt; ниже, этот режим выполняет только цитирование. Больше ничего не делается для ввода команд.</target>
        </trans-unit>
        <trans-unit id="4c4d44083fa5e2a6971987cf935297be30994f4c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stash&lt;/code&gt; when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the &lt;code&gt;HEAD&lt;/code&gt; commit.</source>
          <target state="translated">Используйте &lt;code&gt;git stash&lt;/code&gt; , если вы хотите записать текущее состояние рабочего каталога и индекса, но хотите вернуться в чистый рабочий каталог. Команда сохраняет ваши локальные изменения и возвращает рабочий каталог в соответствие с фиксацией &lt;code&gt;HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41c11f9d8154a7d9c49ff48bc15e09cdeb4a9a5c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; to obtain:</source>
          <target state="translated">Используйте &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; , чтобы получить:</target>
        </trans-unit>
        <trans-unit id="141b00818c5025cc15ff515d81283fc5705a8a4e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace&lt;/code&gt; with no arguments to obtain:</source>
          <target state="translated">Используйте &lt;code&gt;git stripspace&lt;/code&gt; без аргументов, чтобы получить:</target>
        </trans-unit>
        <trans-unit id="ae0479a18945009a7ebac30bdfceaa72c61a99c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ident&lt;/code&gt; in the &lt;code&gt;From:&lt;/code&gt; header of each commit email. If the author ident of the commit is not textually identical to the provided &lt;code&gt;ident&lt;/code&gt;, place a &lt;code&gt;From:&lt;/code&gt; header in the body of the message with the original author. If no &lt;code&gt;ident&lt;/code&gt; is given, use the committer ident.</source>
          <target state="translated">Используйте &lt;code&gt;ident&lt;/code&gt; в заголовке &lt;code&gt;From:&lt;/code&gt; каждого сообщения о фиксации. Если идентификатор автора фиксации не идентичен по тексту предоставленному &lt;code&gt;ident&lt;/code&gt; , поместите заголовок &lt;code&gt;From:&lt;/code&gt; в тело сообщения с исходным автором. Если &lt;code&gt;ident&lt;/code&gt; не указан, используйте идентификатор коммиттера.</target>
        </trans-unit>
        <trans-unit id="8fb68f530aa46816206d7ea34908da4d297edef3" translate="yes" xml:space="preserve">
          <source>Use IPv4 addresses only, ignoring IPv6 addresses.</source>
          <target state="translated">Используйте только IPv4-адреса,игнорируя IPv6-адреса.</target>
        </trans-unit>
        <trans-unit id="d89ac89f76f16a68a863b0d9f578ffd1a558d6b0" translate="yes" xml:space="preserve">
          <source>Use IPv6 addresses only, ignoring IPv4 addresses.</source>
          <target state="translated">Используйте только IPv6-адреса,игнорируя IPv4-адреса.</target>
        </trans-unit>
        <trans-unit id="23206ddfb8d01b68973d7bd9cccf799f208e3657" translate="yes" xml:space="preserve">
          <source>Use Message &amp;rarr; Insert file&amp;hellip;​ and insert the patch.</source>
          <target state="translated">Используйте Сообщение &amp;rarr; Вставить файл&amp;hellip; и вставьте патч.</target>
        </trans-unit>
        <trans-unit id="1b7e380bb9ef947a64359e01f17ce54cd3bdece1" translate="yes" xml:space="preserve">
          <source>Use One Mark Per Commit</source>
          <target state="translated">Использовать одну отметку на каждый комитет</target>
        </trans-unit>
        <trans-unit id="c24268aab2b43d4e294643c8fbcbd60d377e139b" translate="yes" xml:space="preserve">
          <source>Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.</source>
          <target state="translated">Используйте POSIX расширенный/базовый регеxp для шаблонов.По умолчанию используется базовый регеxp.</target>
        </trans-unit>
        <trans-unit id="36e96e4a2fd002679f3b794b4968539810c5c2eb" translate="yes" xml:space="preserve">
          <source>Use Perl-compatible regular expressions for patterns.</source>
          <target state="translated">Используйте Perl-совместимые регулярные выражения для шаблонов.</target>
        </trans-unit>
        <trans-unit id="fd46ce4ee0de88bb1a4ebb0e0c6375d24c2fb065" translate="yes" xml:space="preserve">
          <source>Use SO_REUSEADDR when binding the listening socket. This allows the server to restart without waiting for old connections to time out.</source>
          <target state="translated">Используйте SO_REUSEADDR при привязке прослушивающего разъема.Это позволяет серверу перезагрузиться,не дожидаясь окончания таймаута старых соединений.</target>
        </trans-unit>
        <trans-unit id="f351ffbdfc957393f82f6653e37778e19987b350" translate="yes" xml:space="preserve">
          <source>Use Tag Fixup Branches</source>
          <target state="translated">Использовать ветви крепления метки</target>
        </trans-unit>
        <trans-unit id="41019858ddf6bd113a2b54361af9c75b6d741367" translate="yes" xml:space="preserve">
          <source>Use \0 as the delimiter for pathnames in the output, and print them verbatim. Without this option, pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable core.quotePath (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67640e675158aa473b8a69cc0cdb46fb8ed7283f" translate="yes" xml:space="preserve">
          <source>Use a &quot;stable&quot; sum of hashes as the patch ID. With this option:</source>
          <target state="translated">В качестве идентификатора патча используйте &quot;стабильную&quot; сумму хэшей.С этой опцией:</target>
        </trans-unit>
        <trans-unit id="0ec5feaf620cc0230519584645c952a1ae99d83c" translate="yes" xml:space="preserve">
          <source>Use a client spec to find the list of interesting files in p4. See the &quot;CLIENT SPEC&quot; section below.</source>
          <target state="translated">Используйте спецификацию клиента,чтобы найти список интересных файлов в p4.См.раздел &quot;СПЕЦИАЛЬНЫЙ КЛИЕНТ&quot; ниже.</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">Используйте mergetool. &lt;code&gt;git mergetool&lt;/code&gt; , чтобы запустить графический инструмент слияния, который поможет вам выполнить слияние.</target>
        </trans-unit>
        <trans-unit id="e7589df3d820308df2c8a838829de10cfbcf2077" translate="yes" xml:space="preserve">
          <source>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt;/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde &lt;code&gt;~&lt;/code&gt; on a line of its own.</source>
          <target state="translated">Используйте специальный построчный формат, предназначенный для использования скриптом. Добавленные / удаленные / неизмененные прогоны печатаются в обычном унифицированном формате сравнения, начиная с символа &lt;code&gt;+&lt;/code&gt; / &lt;code&gt;-&lt;/code&gt; / `` в начале строки и до конца строки. Новые строки во вводе представлены тильдой &lt;code&gt;~&lt;/code&gt; на отдельной строке.</target>
        </trans-unit>
        <trans-unit id="77b024aefcbc37a1627539595d18a928f0842816" translate="yes" xml:space="preserve">
          <source>Use a tarball as a starting point for a new repository.</source>
          <target state="translated">Используйте тарбол в качестве отправной точки для нового репозитория.</target>
        </trans-unit>
        <trans-unit id="afac3b09febbe243aa11caf12f594c7284e7bf23" translate="yes" xml:space="preserve">
          <source>Use an &quot;unstable&quot; hash as the patch ID. With this option, the result produced is compatible with the patch-id value produced by git 1.9 and older. Users with pre-existing databases storing patch-ids produced by git 1.9 and older (who do not deal with reordered patches) may want to use this option.</source>
          <target state="translated">Используйте &quot;нестабильный&quot; хэш в качестве идентификатора патча.С помощью этой опции полученный результат совместим со значением patch-id,полученным в git'е 1.9 и более ранних версиях.Пользователи с уже существующими базами данных,в которых хранятся патч-ид,созданный в git 1.9 и более ранних версиях (которые не имеют дела с переупорядоченными патчами),могут использовать эту опцию.</target>
        </trans-unit>
        <trans-unit id="ef4088fc09156b38070cb26da8281dc7bfd8c504" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction for updating the refs. If any of the refs fails to update then the entire push will fail without changing any refs.</source>
          <target state="translated">Используйте атомную транзакцию для обновления ссылок.Если любой из ссылок не удастся обновить,то весь толчок будет неудачным без изменения ссылок.</target>
        </trans-unit>
        <trans-unit id="049c3e05f1b188c69413c7549059c67376f76ed1" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.</source>
          <target state="translated">Используйте атомную транзакцию на удаленной стороне,если она доступна.Либо все ссылки обновляются,либо по ошибке ссылки не обновляются.Если сервер не поддерживает атомные нажатия,то нажатие будет неудачным.</target>
        </trans-unit>
        <trans-unit id="402b0ecf5212c8d413a7923b4b251cf4b803a260" translate="yes" xml:space="preserve">
          <source>Use applying strategies to rebase (calling &lt;code&gt;git-am&lt;/code&gt; internally). This option may become a no-op in the future once the merge backend handles everything the apply one does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55fb404106de44576d9bc731a7fb4baf9a6337c" translate="yes" xml:space="preserve">
          <source>Use binary search to find the commit that introduced a bug</source>
          <target state="translated">Используйте бинарный поиск,чтобы найти коммит,который ввел ошибку.</target>
        </trans-unit>
        <trans-unit id="78ee9b127501691d305b39cc3fc13fc74a1d22a1" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git add --interactive&lt;/code&gt; and &lt;code&gt;git clean --interactive&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;prompt&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;help&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;, for four distinct types of normal output from interactive commands.</source>
          <target state="translated">Используйте настраиваемый цвет для &lt;code&gt;git add --interactive&lt;/code&gt; и &lt;code&gt;git clean --interactive&lt;/code&gt; . &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; может быть &lt;code&gt;prompt&lt;/code&gt; , &lt;code&gt;header&lt;/code&gt; , &lt;code&gt;help&lt;/code&gt; или &lt;code&gt;error&lt;/code&gt; для четырех различных типов нормального вывода интерактивных команд.</target>
        </trans-unit>
        <trans-unit id="bf3aeb7f00c3d69ade01b5cc321078d4f50948ae" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git log --decorate&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;remoteBranch&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; for local branches, remote-tracking branches, tags, stash and HEAD, respectively and &lt;code&gt;grafted&lt;/code&gt; for grafted commits.</source>
          <target state="translated">Использовать индивидуальный цвет для вывода &lt;code&gt;git log --decorate&lt;/code&gt; . &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; - это &lt;code&gt;branch&lt;/code&gt; , &lt;code&gt;remoteBranch&lt;/code&gt; , &lt;code&gt;tag&lt;/code&gt; , &lt;code&gt;stash&lt;/code&gt; или &lt;code&gt;HEAD&lt;/code&gt; для локальных веток, веток удаленного отслеживания, тегов, stash и HEAD, соответственно, и &lt;code&gt;grafted&lt;/code&gt; для привитых коммитов.</target>
        </trans-unit>
        <trans-unit id="29ecef38edab0e1998d46583be9558cf2a562eff" translate="yes" xml:space="preserve">
          <source>Use customized color for branch coloration. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;current&lt;/code&gt; (the current branch), &lt;code&gt;local&lt;/code&gt; (a local branch), &lt;code&gt;remote&lt;/code&gt; (a remote-tracking branch in refs/remotes/), &lt;code&gt;upstream&lt;/code&gt; (upstream tracking branch), &lt;code&gt;plain&lt;/code&gt; (other refs).</source>
          <target state="translated">Используйте индивидуальный цвет для окраски веток. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; может быть &lt;code&gt;current&lt;/code&gt; (текущая ветвь), &lt;code&gt;local&lt;/code&gt; (локальная ветвь), &lt;code&gt;remote&lt;/code&gt; (ветка удаленного отслеживания в refs / remotes /), &lt;code&gt;upstream&lt;/code&gt; (восходящая ветвь отслеживания), &lt;code&gt;plain&lt;/code&gt; (другие ссылки).</target>
        </trans-unit>
        <trans-unit id="fcdeebdb47ef8466da45d806c0dccf091f4447a0" translate="yes" xml:space="preserve">
          <source>Use customized color for diff colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the patch to use the specified color, and is one of &lt;code&gt;context&lt;/code&gt; (context text - &lt;code&gt;plain&lt;/code&gt; is a historical synonym), &lt;code&gt;meta&lt;/code&gt; (metainformation), &lt;code&gt;frag&lt;/code&gt; (hunk header), &lt;code&gt;func&lt;/code&gt; (function in hunk header), &lt;code&gt;old&lt;/code&gt; (removed lines), &lt;code&gt;new&lt;/code&gt; (added lines), &lt;code&gt;commit&lt;/code&gt; (commit headers), &lt;code&gt;whitespace&lt;/code&gt; (highlighting whitespace errors), &lt;code&gt;oldMoved&lt;/code&gt; (deleted lines), &lt;code&gt;newMoved&lt;/code&gt; (added lines), &lt;code&gt;oldMovedDimmed&lt;/code&gt;, &lt;code&gt;oldMovedAlternative&lt;/code&gt;, &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt;, &lt;code&gt;newMovedDimmed&lt;/code&gt;, &lt;code&gt;newMovedAlternative&lt;/code&gt;&lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; (See the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; setting of &lt;code&gt;--color-moved&lt;/code&gt; in &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; for details), &lt;code&gt;contextDimmed&lt;/code&gt;, &lt;code&gt;oldDimmed&lt;/code&gt;, &lt;code&gt;newDimmed&lt;/code&gt;, &lt;code&gt;contextBold&lt;/code&gt;, &lt;code&gt;oldBold&lt;/code&gt;, and &lt;code&gt;newBold&lt;/code&gt; (see &lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff[1]&lt;/a&gt; for details).</source>
          <target state="translated">Используйте индивидуальный цвет для раскраски различий. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; указывает, в какой части патча использовать указанный цвет, и является одним из &lt;code&gt;context&lt;/code&gt; (контекстный текст - &lt;code&gt;plain&lt;/code&gt; является историческим синонимом), &lt;code&gt;meta&lt;/code&gt; (метаинформация), &lt;code&gt;frag&lt;/code&gt; (заголовок блока), &lt;code&gt;func&lt;/code&gt; (функция в заголовке блока), &lt;code&gt;old&lt;/code&gt; (удаленные строки), &lt;code&gt;new&lt;/code&gt; (добавленные строки), &lt;code&gt;commit&lt;/code&gt; (заголовки фиксации), &lt;code&gt;whitespace&lt;/code&gt; (выделение ошибок пробелов), &lt;code&gt;oldMoved&lt;/code&gt; (удаленные строки), &lt;code&gt;newMoved&lt;/code&gt; (добавленные строки), &lt;code&gt;oldMovedDimmed&lt;/code&gt; , &lt;code&gt;oldMovedAlternative&lt;/code&gt; , &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt; , &lt;code&gt;newMovedDimmed&lt;/code&gt; , &lt;code&gt;newMovedAlternative&lt;/code&gt; &lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; ( подробнее см. параметр &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; для &lt;code&gt;--color-moved&lt;/code&gt; в &lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt; ), &lt;code&gt;contextDimmed&lt;/code&gt; , &lt;code&gt;oldDimmed&lt;/code&gt; , &lt;code&gt;newDimmed&lt;/code&gt; , &lt;code&gt;contextBold&lt;/code&gt; , &lt;code&gt;oldBold&lt;/code&gt; и &lt;code&gt;newBold&lt;/code&gt; -range (см. &lt;a href=&quot;git-range-diff&quot;&gt;git-range 1]&lt;/a&gt; для подробностей).</target>
        </trans-unit>
        <trans-unit id="799532fe06b09693cab5782f0c7b74d1305d2cb1" translate="yes" xml:space="preserve">
          <source>Use customized color for each remote keyword. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;hint&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; which match the corresponding keyword.</source>
          <target state="translated">Используйте индивидуальный цвет для каждого удаленного ключевого слова. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; может быть &lt;code&gt;hint&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt; , &lt;code&gt;success&lt;/code&gt; или &lt;code&gt;error&lt;/code&gt; которые соответствуют соответствующему ключевому слову.</target>
        </trans-unit>
        <trans-unit id="e8363e3bb3b19269f1bec63465f050d08c7400a8" translate="yes" xml:space="preserve">
          <source>Use customized color for grep colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the line to use the specified color, and is one of</source>
          <target state="translated">Используйте индивидуальный цвет для раскраски grep. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; указывает, в какой части строки использовать указанный цвет, и является одним из</target>
        </trans-unit>
        <trans-unit id="3d940f7a54cc13b6b8a420b163ce2b7e4ccedf38" translate="yes" xml:space="preserve">
          <source>Use customized color for hints.</source>
          <target state="translated">Используйте индивидуальный цвет для подсказок.</target>
        </trans-unit>
        <trans-unit id="a7bc0186c1d40a59aee910eedb6524484cbce3a0" translate="yes" xml:space="preserve">
          <source>Use customized color for push errors.</source>
          <target state="translated">Используйте настраиваемый цвет для ошибок при нажатии.</target>
        </trans-unit>
        <trans-unit id="efd1e4b094e6a540e69b42772ae161651f4648a2" translate="yes" xml:space="preserve">
          <source>Use customized color for status colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;header&lt;/code&gt; (the header text of the status message), &lt;code&gt;added&lt;/code&gt; or &lt;code&gt;updated&lt;/code&gt; (files which are added but not committed), &lt;code&gt;changed&lt;/code&gt; (files which are changed but not added in the index), &lt;code&gt;untracked&lt;/code&gt; (files which are not tracked by Git), &lt;code&gt;branch&lt;/code&gt; (the current branch), &lt;code&gt;nobranch&lt;/code&gt; (the color the &lt;code&gt;no branch&lt;/code&gt; warning is shown in, defaulting to red), &lt;code&gt;localBranch&lt;/code&gt; or &lt;code&gt;remoteBranch&lt;/code&gt; (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or &lt;code&gt;unmerged&lt;/code&gt; (files which have unmerged changes).</source>
          <target state="translated">Используйте индивидуальный цвет для раскраски статуса. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; - это один из &lt;code&gt;header&lt;/code&gt; (текст заголовка сообщения о состоянии), &lt;code&gt;added&lt;/code&gt; или &lt;code&gt;updated&lt;/code&gt; (файлы, которые добавлены, но не зафиксированы), &lt;code&gt;changed&lt;/code&gt; (файлы, которые изменены, но не добавлены в индекс), &lt;code&gt;untracked&lt;/code&gt; (файлы, которые не отслеживается Git), &lt;code&gt;branch&lt;/code&gt; (текущая ветвь), &lt;code&gt;nobranch&lt;/code&gt; (цвет, в котором отображается предупреждение об &lt;code&gt;no branch&lt;/code&gt; , по &lt;code&gt;localBranch&lt;/code&gt; красный), localBranch или &lt;code&gt;remoteBranch&lt;/code&gt; (имена локальных и удаленных ветвей соответственно, когда информация о ветке и отслеживании отображается в краткий формат статуса), или &lt;code&gt;unmerged&lt;/code&gt; (файлы, в которых есть не объединенные изменения).</target>
        </trans-unit>
        <trans-unit id="42006ecfd08deb9b3ff0a3f1d7240d8f715710f3" translate="yes" xml:space="preserve">
          <source>Use customized color when a push was rejected.</source>
          <target state="translated">Используйте настраиваемый цвет при отклонении нажатия.</target>
        </trans-unit>
        <trans-unit id="7714f2243f3ecb7a0c915a75f0d9677bee5cfddf" translate="yes" xml:space="preserve">
          <source>Use fixed strings for patterns (don&amp;rsquo;t interpret pattern as a regex).</source>
          <target state="translated">Используйте фиксированные строки для шаблонов (не интерпретируйте шаблон как регулярное выражение).</target>
        </trans-unit>
        <trans-unit id="be83392780575c9c0f338875e4ab41fca7ad0580" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of Git objects. We check &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; for the current MIDX file, and &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; for the pack-files to index.</source>
          <target state="translated">Использовать указанный каталог для размещения объектов Git. Мы проверяем &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; для текущего файла MIDX и &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; для индексируемых файлов pack.</target>
        </trans-unit>
        <trans-unit id="58e0e6d68f2b1086e2f61cc3ccf9bb473fce2cb1" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full &lt;code&gt;.git&lt;/code&gt; directory. The commit-graph file is expected to be in the &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; directory and the packfiles are expected to be in &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt;.</source>
          <target state="translated">Используйте данный каталог для расположения файлов пакетов и файла графика фиксации. Этот параметр существует для указания местоположения альтернативы, которая имеет только каталог объектов, а не полный каталог &lt;code&gt;.git&lt;/code&gt; . Предполагается, что файл commit-graph будет в каталоге &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; , а файлы packfiles - в &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="034b8d3eb2bf376cba5a544572cc51a019ffd1af" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full &lt;code&gt;.git&lt;/code&gt; directory. The commit-graph file is expected to be in the &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; directory and the packfiles are expected to be in &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt;. If the directory could not be made into an absolute path, or does not match any known object directory, &lt;code&gt;git commit-graph ...&lt;/code&gt; will exit with non-zero status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e22ac3ec044552fceb6f971a8409c3fc735d918" translate="yes" xml:space="preserve">
          <source>Use gmail as the smtp server</source>
          <target state="translated">Используйте gmail в качестве сервера smtp</target>
        </trans-unit>
        <trans-unit id="243e0ec42451f8d223cf0a086b6e0d020fe017bc" translate="yes" xml:space="preserve">
          <source>Use hash &lt;code&gt;#&lt;/code&gt; for comments that are either on their own line, or after the email address.</source>
          <target state="translated">Используйте хэш &lt;code&gt;#&lt;/code&gt; для комментариев, которые находятся либо в отдельной строке, либо после адреса электронной почты.</target>
        </trans-unit>
        <trans-unit id="fe4290ca9cf2dcf165b3911c20fcc8115cf36b09" translate="yes" xml:space="preserve">
          <source>Use libcurl to communicate with the IMAP server, unless tunneling into it. Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set.</source>
          <target state="translated">Используйте libcurl для связи с IMAP-сервером,если только в него нет туннеля.Игнорируется,если Git был собран без установки опции USE_CURL_FOR_IMAP_SEND.</target>
        </trans-unit>
        <trans-unit id="b43e2a7c9e04ff83908291bc454ceb95c66f26d2" translate="yes" xml:space="preserve">
          <source>Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt;.</source>
          <target state="translated">Используйте файл mailmap для сопоставления имен авторов и коммиттеров и адресов электронной почты с каноническими реальными именами и адресами электронной почты. См. &lt;a href=&quot;git-shortlog&quot;&gt;Git-shortlog [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="869311b9e64386ec94c4224dbda98ca212bcb863" translate="yes" xml:space="preserve">
          <source>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side.</source>
          <target state="translated">Используйте стратегии слияния для ребейзинга.Когда используется стратегия рекурсивного (по умолчанию)слияния,это позволяет ребейзу быть в курсе переименований на восходящей стороне.</target>
        </trans-unit>
        <trans-unit id="07cf71eed9a3b36f45bcc6fde8a3af9707bd0146" translate="yes" xml:space="preserve">
          <source>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504dd078aaf1ec972f6af826bbe142e1450759fa" translate="yes" xml:space="preserve">
          <source>Use of &quot;topic branches&quot; solves these problems. The name is pretty self explanatory, with a caveat that comes from the &quot;merge upwards&quot; rule above:</source>
          <target state="translated">Использование &quot;тематических ветвей&quot; решает эти проблемы.Название довольно само собой разумеющееся,с оговоркой,которая вытекает из приведенного выше правила &quot;слияния вверх&quot;:</target>
        </trans-unit>
        <trans-unit id="2997460999cadfc1fcc5d52315d53b3d5efcd07d" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;dcommit&lt;/code&gt; is preferred to &lt;code&gt;set-tree&lt;/code&gt; (below).</source>
          <target state="translated">Использование &lt;code&gt;dcommit&lt;/code&gt; предпочтительнее, чем &lt;code&gt;set-tree&lt;/code&gt; (ниже).</target>
        </trans-unit>
        <trans-unit id="6b08c4843a60fcea417d6fa6b7562621b3124054" translate="yes" xml:space="preserve">
          <source>Use of this utility is encouraged in favor of directly accessing files under the &lt;code&gt;.git&lt;/code&gt; directory.</source>
          <target state="translated">Рекомендуется использовать эту утилиту в пользу прямого доступа к файлам в каталоге &lt;code&gt;.git&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a96544176d9c64bcdfe76616987380a83e4f896" translate="yes" xml:space="preserve">
          <source>Use permissions reported by umask(2). The default, when &lt;code&gt;--shared&lt;/code&gt; is not specified.</source>
          <target state="translated">Используйте разрешения, указанные в umask (2). По умолчанию, когда &lt;code&gt;--shared&lt;/code&gt; не указан.</target>
        </trans-unit>
        <trans-unit id="7b2e5a64a2bb1a5fbe6304abee401e1d3f35a8f4" translate="yes" xml:space="preserve">
          <source>Use reflog to find a better common ancestor between &amp;lt;upstream&amp;gt; and &amp;lt;branch&amp;gt; when calculating which commits have been introduced by &amp;lt;branch&amp;gt;.</source>
          <target state="translated">Используйте reflog, чтобы найти лучшего общего предка между &amp;lt;upstream&amp;gt; и &amp;lt;branch&amp;gt; при вычислении того, какие коммиты были введены &amp;lt;branch&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="b40e39ff3f77007104d997879dd735023a9dca06" translate="yes" xml:space="preserve">
          <source>Use revisions from revs-file instead of calling &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;.</source>
          <target state="translated">Используйте ревизии из файла revs вместо вызова &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="efb298546ca010c6e357a2c3cc79d1b86fb2f356" translate="yes" xml:space="preserve">
          <source>Use the &quot;sparse&quot; algorithm to determine which objects to include in the pack, when combined with the &quot;--revs&quot; option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames.</source>
          <target state="translated">Используйте &quot;разреженный&quot; алгоритм для определения того,какие объекты включить в пакет,при сочетании с опцией &quot;--revs&quot;.Этот алгоритм ходит только по деревьям,которые появляются в путях,вводящих новые объекты.Это может иметь значительные преимущества в производительности при вычислении пакета для отправки небольшого изменения.Однако,возможно,что в пакетный файл будут добавлены дополнительные объекты,если включённые коммиты содержат определённые типы прямых переименований.</target>
        </trans-unit>
        <trans-unit id="0755f10a2fd51824d1737b45b49a4642d66873f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--in-place&lt;/code&gt; option to edit a message file in place:</source>
          <target state="translated">Используйте параметр &lt;code&gt;--in-place&lt;/code&gt; , чтобы редактировать файл сообщения на месте:</target>
        </trans-unit>
        <trans-unit id="55e7e1126d3aa0a5c8bf2360dfcd495bb1107882" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute only if you cannot store a file in UTF-8 encoding and if you want Git to be able to process the content as text.</source>
          <target state="translated">Используйте атрибут &lt;code&gt;working-tree-encoding&lt;/code&gt; только в том случае, если вы не можете сохранить файл в кодировке UTF-8 и если вы хотите, чтобы Git мог обрабатывать контент как текст.</target>
        </trans-unit>
        <trans-unit id="b5ec705c3f1e9d70bd95302efbf5732684172042" translate="yes" xml:space="preserve">
          <source>Use the branch detection algorithm to find new paths in p4. It is documented below in &quot;BRANCH DETECTION&quot;.</source>
          <target state="translated">Используйте алгоритм обнаружения ветки для поиска новых путей в p4.Он документирован ниже в &quot;BRANCH DETECTION&quot;.</target>
        </trans-unit>
        <trans-unit id="33ac56041ae34da6b3682a94d8a665913a47636a" translate="yes" xml:space="preserve">
          <source>Use the credential (e.g., access the URL with the username and password from step (2)), and see if it&amp;rsquo;s accepted.</source>
          <target state="translated">Используйте учетные данные (например, войдите в URL-адрес с именем пользователя и паролем из шага (2)) и посмотрите, принято ли оно.</target>
        </trans-unit>
        <trans-unit id="4cfefdd524d37cf0c1fedc168c903048fc636bbd" translate="yes" xml:space="preserve">
          <source>Use the customized color for the part of git-blame output that is repeated meta information per line (such as commit id, author name, date and timezone). Defaults to cyan.</source>
          <target state="translated">Используйте настраиваемый цвет для части вывода git-блейма,которая является повторяющейся мета-информацией для каждой строки (такой как идентификатор коммита,имя автора,дата и часовой пояс).По умолчанию голубой цвет.</target>
        </trans-unit>
        <trans-unit id="a024bae6c0f6ae8fa68e77c95e0c4f95100aa970" translate="yes" xml:space="preserve">
          <source>Use the diff tool specified by &amp;lt;tool&amp;gt;. Valid values include emerge, kompare, meld, and vimdiff. Run &lt;code&gt;git difftool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">Используйте инструмент сравнения, указанный в &amp;lt;tool&amp;gt;. Допустимые значения: emerge, kompare, meld и vimdiff. Запустите &lt;code&gt;git difftool --tool-help&lt;/code&gt; для получения списка допустимых настроек &amp;lt;tool&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="161588bc8b76efbad18d428ccf6e2f5e459908d1" translate="yes" xml:space="preserve">
          <source>Use the fast patchset import strategy. This can be significantly faster for large trees, but cannot handle directory renames or permissions changes. The default strategy is slow and safe.</source>
          <target state="translated">Используйте стратегию быстрого импорта патчсетов.Это может быть значительно быстрее для больших деревьев,но не может справиться с переименованием каталогов или изменением прав доступа.Стратегия по умолчанию медленная и безопасная.</target>
        </trans-unit>
        <trans-unit id="89541b63bc820ad5c76ea37101a62452ee62e61c" translate="yes" xml:space="preserve">
          <source>Use the following attributes if your &lt;code&gt;*.ps1&lt;/code&gt; files are UTF-16 little endian encoded without BOM and you want Git to use Windows line endings in the working directory (use &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; instead of &lt;code&gt;UTF-16LE&lt;/code&gt; if you want UTF-16 little endian with BOM). Please note, it is highly recommended to explicitly define the line endings with &lt;code&gt;eol&lt;/code&gt; if the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute is used to avoid ambiguity.</source>
          <target state="translated">Используйте следующие атрибуты, если ваши файлы &lt;code&gt;*.ps1&lt;/code&gt; имеют кодировку UTF-16 с прямым порядком байтов без спецификации, и вы хотите, чтобы Git использовал окончания строк Windows в рабочем каталоге (используйте &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; вместо &lt;code&gt;UTF-16LE&lt;/code&gt; , если вы хотите UTF-16 с порядком байтов в спецификации). Обратите внимание: настоятельно рекомендуется явно определять окончания строк с помощью &lt;code&gt;eol&lt;/code&gt; , если используется атрибут &lt;code&gt;working-tree-encoding&lt;/code&gt; чтобы избежать двусмысленности.</target>
        </trans-unit>
        <trans-unit id="e5c2f58b6a6ebc713504e60181f4f0dd37da2d6d" translate="yes" xml:space="preserve">
          <source>Use the given &amp;lt;msg&amp;gt; as the commit message. If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs.</source>
          <target state="translated">Используйте данный &amp;lt;msg&amp;gt; как сообщение фиксации. Если указано несколько параметров &lt;code&gt;-m&lt;/code&gt; , их значения объединяются в отдельные абзацы.</target>
        </trans-unit>
        <trans-unit id="be3b9715415e0357d3d87d01aa8f812c871fb1e1" translate="yes" xml:space="preserve">
          <source>Use the given &lt;code&gt;msg&lt;/code&gt; as the commit message. This option disables the &lt;code&gt;--edit&lt;/code&gt; option.</source>
          <target state="translated">Используйте данное &lt;code&gt;msg&lt;/code&gt; как сообщение фиксации. Этот параметр отключает параметр &lt;code&gt;--edit&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43103d879018fa15a44cefa9b3baec705e25165c" translate="yes" xml:space="preserve">
          <source>Use the given config file instead of the one specified by GIT_CONFIG.</source>
          <target state="translated">Используйте данный конфигурационный файл вместо указанного GIT_CONFIG.</target>
        </trans-unit>
        <trans-unit id="6d07104b51b424f44cb0346a9ac8f4116b0f06d7" translate="yes" xml:space="preserve">
          <source>Use the given exclude pattern in addition to the standard ignore rules (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;).</source>
          <target state="translated">Используйте данный шаблон исключения в дополнение к стандартным правилам игнорирования (см. &lt;a href=&quot;gitignore&quot;&gt;Gitignore [5]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9a12bbd112f0b48f03fdbbbb0b9c68268bedd960" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. If there is no &lt;code&gt;-s&lt;/code&gt; option &lt;code&gt;git merge-recursive&lt;/code&gt; is used instead. This implies --merge.</source>
          <target state="translated">Используйте данную стратегию слияния. Если нет опции &lt;code&gt;-s&lt;/code&gt; , вместо нее используется &lt;code&gt;git merge-recursive&lt;/code&gt; . Это подразумевает --merge.</target>
        </trans-unit>
        <trans-unit id="aad779cdebc63bc4b25eb19e46a7b214101b70ea" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; for details.</source>
          <target state="translated">Используйте данную стратегию слияния. Следует использовать только один раз. См. Подробности в разделе &amp;laquo;СТРАТЕГИИ СЛИЯНИЯ&amp;raquo; в &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d697cccd6049781089822f14d706ae91b43a781" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no &lt;code&gt;-s&lt;/code&gt; option, a built-in list of strategies is used instead (&lt;code&gt;git merge-recursive&lt;/code&gt; when merging a single head, &lt;code&gt;git merge-octopus&lt;/code&gt; otherwise).</source>
          <target state="translated">Используйте данную стратегию слияния; может быть предоставлено более одного раза, чтобы указать их в том порядке, в котором они должны использоваться. Если нет опции &lt;code&gt;-s&lt;/code&gt; , вместо этого используется встроенный список стратегий ( &lt;code&gt;git merge-recursive&lt;/code&gt; при слиянии одной головы, &lt;code&gt;git merge-octopus&lt;/code&gt; в противном случае).</target>
        </trans-unit>
        <trans-unit id="e15a6801b533c61848133f0481a1499ec359e784" translate="yes" xml:space="preserve">
          <source>Use the given note message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Lines starting with &lt;code&gt;#&lt;/code&gt; and empty lines other than a single line between paragraphs will be stripped out.</source>
          <target state="translated">Используйте данное сообщение-заметку (вместо подсказки). Если указано несколько параметров &lt;code&gt;-m&lt;/code&gt; , их значения объединяются в отдельные абзацы. Строки, начинающиеся с символа &lt;code&gt;#&lt;/code&gt; , и пустые строки, отличные от одной строки между абзацами, будут удалены.</target>
        </trans-unit>
        <trans-unit id="2301e57be484e5bf3374c6061960726be52acd3f" translate="yes" xml:space="preserve">
          <source>Use the given tag message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Implies &lt;code&gt;-a&lt;/code&gt; if none of &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; is given.</source>
          <target state="translated">Используйте данное сообщение тега (вместо запроса). Если указано несколько параметров &lt;code&gt;-m&lt;/code&gt; , их значения объединяются в отдельные абзацы. Подразумевается &lt;code&gt;-a&lt;/code&gt; , если не &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; ни одно из &lt;code&gt;-a&lt;/code&gt; , &lt;code&gt;-s&lt;/code&gt; или -u &amp;lt;keyid&amp;gt; .</target>
        </trans-unit>
        <trans-unit id="52a6c166f490dbb0be0d25b65f46015f7e67e623" translate="yes" xml:space="preserve">
          <source>Use the interactive patch selection interface to chose which changes to commit. See &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; for details.</source>
          <target state="translated">Используйте интерактивный интерфейс выбора патча, чтобы выбрать, какие изменения следует зафиксировать. Подробнее см. &lt;a href=&quot;git-add&quot;&gt;Git-add [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7db128e87ada4e1ec3f3340d8431acfc429f3677" translate="yes" xml:space="preserve">
          <source>Use the merge resolution program specified by &amp;lt;tool&amp;gt;. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run &lt;code&gt;git mergetool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">Используйте программу разрешения слияния, указанную &amp;lt;tool&amp;gt;. Допустимые значения: emerge, gvimdiff, kdiff3, meld, vimdiff и tortoisemerge. Запустите &lt;code&gt;git mergetool --tool-help&lt;/code&gt; , чтобы получить список допустимых настроек &amp;lt;tool&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="047156e36b9d6e8b2155d32a029545b1b026f10e" translate="yes" xml:space="preserve">
          <source>Use the multi-pack-index file to track multiple packfiles using a single index. See &lt;a href=&quot;multi-pack-index&quot;&gt;the multi-pack-index design document&lt;/a&gt;.</source>
          <target state="translated">Используйте файл multi-pack-index для отслеживания нескольких файлов pack-файлов с помощью одного индекса. См. &lt;a href=&quot;multi-pack-index&quot;&gt;Проектный документ с несколькими индексами&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f14443aa07cf034aa00129ee21b4f7df2be49255" translate="yes" xml:space="preserve">
          <source>Use the partial clone feature and request that the server sends a subset of reachable objects according to a given object filter. When using &lt;code&gt;--filter&lt;/code&gt;, the supplied &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; is used for the partial clone filter. For example, &lt;code&gt;--filter=blob:none&lt;/code&gt; will filter out all blobs (file contents) until needed by Git. Also, &lt;code&gt;--filter=blob:limit=&amp;lt;size&amp;gt;&lt;/code&gt; will filter out all blobs of size at least &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;. For more details on filter specifications, see the &lt;code&gt;--filter&lt;/code&gt; option in &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bac5b4ccbcc396e691c8ba8f2af89d4f60c9270" translate="yes" xml:space="preserve">
          <source>Use the same output mode as &lt;a href=&quot;git-annotate&quot;&gt;git-annotate[1]&lt;/a&gt; (Default: off).</source>
          <target state="translated">Используйте тот же режим вывода, что и &lt;a href=&quot;git-annotate&quot;&gt;git-annotate [1]&lt;/a&gt; (по умолчанию: выключено).</target>
        </trans-unit>
        <trans-unit id="0ed67a2ecd3a9ee96ae4cd7dcb45f48a2cf84bf4" translate="yes" xml:space="preserve">
          <source>Use the selected commit message without launching an editor. For example, &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; amends a commit without changing its commit message.</source>
          <target state="translated">Использовать выбранное сообщение фиксации без запуска редактора. Например, &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; изменяет коммит, не изменяя его сообщение о фиксации.</target>
        </trans-unit>
        <trans-unit id="8e65c034e7da87d64be153e02b39a8529bd16f67" translate="yes" xml:space="preserve">
          <source>Use the source ref that matches &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;refs/heads/master&lt;/code&gt;) to update the ref that matches &lt;code&gt;satellite/master&lt;/code&gt; (most probably &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt;) in the &lt;code&gt;mothership&lt;/code&gt; repository; do the same for &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;satellite/dev&lt;/code&gt;.</source>
          <target state="translated">Используйте ссылку на источник, которая соответствует &lt;code&gt;master&lt;/code&gt; (например, &lt;code&gt;refs/heads/master&lt;/code&gt; ), чтобы обновить ссылку, которая соответствует &lt;code&gt;satellite/master&lt;/code&gt; (наиболее вероятно, &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt; ) в репозитории &lt;code&gt;mothership&lt;/code&gt; платы; сделайте то же самое для &lt;code&gt;dev&lt;/code&gt; и &lt;code&gt;satellite/dev&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82b93c6560af27195da14e70510e2b3d8651c3b7" translate="yes" xml:space="preserve">
          <source>Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Actually the possible values of this option are:</source>
          <target state="translated">При общении с сервером используйте указанную версию протокола HTTP.Если вы хотите применить силу по умолчанию.Доступная версия и версия по умолчанию зависят от libcurl.На самом деле возможными значениями этой опции являются:</target>
        </trans-unit>
        <trans-unit id="85fede53ff0add46d3665dfda925d3c1db752a7f" translate="yes" xml:space="preserve">
          <source>Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Currently the possible values of this option are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becfdaabcf538340d904ac918eb155dd5d16c802" translate="yes" xml:space="preserve">
          <source>Use the specified URL to connect to the destination Subversion repository. This is useful in cases where the source SVN repository is read-only. This option overrides configuration property &lt;code&gt;commiturl&lt;/code&gt;.</source>
          <target state="translated">Используйте указанный URL-адрес для подключения к целевому репозиторию Subversion. Это полезно в случаях, когда исходный репозиторий SVN доступен только для чтения. Этот параметр переопределяет свойство конфигурации &lt;code&gt;commiturl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eded6790141cbbb141d77bfcf5fc351397828538" translate="yes" xml:space="preserve">
          <source>Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name: &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e057e9e47493412f91dea4102ac0984cb71bdeb" translate="yes" xml:space="preserve">
          <source>Use the value of the &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable to decide what to notice as error.</source>
          <target state="translated">Используйте значение переменной конфигурации &lt;code&gt;core.whitespace&lt;/code&gt; , чтобы решить, что считать ошибкой.</target>
        </trans-unit>
        <trans-unit id="810f8c03feb9550dd6740190f543dbb37624e241" translate="yes" xml:space="preserve">
          <source>Use this custom program instead of &quot;&lt;code&gt;gpg&lt;/code&gt;&quot; found on &lt;code&gt;$PATH&lt;/code&gt; when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, &quot;&lt;code&gt;gpg --verify $signature - &amp;lt;$file&lt;/code&gt;&quot; is run, and the program is expected to signal a good signature by exiting with code 0, and to generate an ASCII-armored detached signature, the standard input of &quot;&lt;code&gt;gpg -bsau $key&lt;/code&gt;&quot; is fed with the contents to be signed, and the program is expected to send the result to its standard output.</source>
          <target state="translated">Используйте эту специальную программу вместо &quot; &lt;code&gt;gpg&lt;/code&gt; &quot; в &lt;code&gt;$PATH&lt;/code&gt; при создании или проверке подписи PGP. Программа должна поддерживать тот же интерфейс командной строки, что и GPG, а именно: для проверки отсоединенной подписи запускается &quot; &lt;code&gt;gpg --verify $signature - &amp;lt;$file&lt;/code&gt; &quot;, и ожидается, что программа сигнализирует о хорошей подписи путем выхода с кодом. 0, и для генерации &lt;code&gt;gpg -bsau $key&lt;/code&gt; ASCII отдельной подписи на стандартный ввод &amp;laquo; gpg -bsau $ key &amp;raquo; подается подписываемое содержимое, и ожидается, что программа отправит результат на свой стандартный вывод.</target>
        </trans-unit>
        <trans-unit id="a644dabd3c4c5e288aecaab3da05ddb8c7da086c" translate="yes" xml:space="preserve">
          <source>Use this for compatibility with old-style branch names used by earlier versions of &lt;code&gt;git archimport&lt;/code&gt;. Old-style branch names were category--branch, whereas new-style branch names are archive,category--branch--version. In both cases, names given on the command-line will override the automatically-generated ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad85fb495e355ea9ee99bf9caef60d6a5acc4df9" translate="yes" xml:space="preserve">
          <source>Use this for compatibility with old-style branch names used by earlier versions of &lt;code&gt;git archimport&lt;/code&gt;. Old-style branch names were category{litdd}branch, whereas new-style branch names are archive,category{litdd}branch{litdd}version. In both cases, names given on the command-line will override the automatically-generated ones.</source>
          <target state="translated">Используйте это для совместимости с именами веток в старом стиле, используемыми более ранними версиями &lt;code&gt;git archimport&lt;/code&gt; . Имена веток в старом стиле были ветвью категории {litdd}, тогда как имена ветвей нового стиля - это версия архива, категория {litdd} ветка {litdd}. В обоих случаях имена, указанные в командной строке, заменят автоматически созданные.</target>
        </trans-unit>
        <trans-unit id="f09efb8456c99114df5272977533145bfda3715e" translate="yes" xml:space="preserve">
          <source>Use this option to integrate changes from the upstream subproject with your submodule&amp;rsquo;s current HEAD. Alternatively, you can run &lt;code&gt;git pull&lt;/code&gt; from the submodule, which is equivalent except for the remote branch name: &lt;code&gt;update --remote&lt;/code&gt; uses the default upstream repository and &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt;, while &lt;code&gt;git pull&lt;/code&gt; uses the submodule&amp;rsquo;s &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;. Prefer &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; if you want to distribute the default upstream branch with the superproject and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; if you want a more native feel while working in the submodule itself.</source>
          <target state="translated">Используйте эту опцию, чтобы интегрировать изменения из подпроекта восходящего потока с текущим HEAD вашего подмодуля. В качестве альтернативы вы можете запустить &lt;code&gt;git pull&lt;/code&gt; из подмодуля, что эквивалентно, за исключением имени удаленной ветки: &lt;code&gt;update --remote&lt;/code&gt; использует исходный репозиторий и &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; по умолчанию . &amp;lt;name&amp;gt; .branch , тогда как &lt;code&gt;git pull&lt;/code&gt; использует &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; подмодуля . &amp;lt;name&amp;gt; .merge . Предпочитайте &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; если вы хотите распространить ветвь восходящего потока по умолчанию с суперпроектом, и &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; если вы хотите более естественное ощущение при работе с самим подмодулем.</target>
        </trans-unit>
        <trans-unit id="205f9bc458a5cacd665ee1af1eac8a989bc13811" translate="yes" xml:space="preserve">
          <source>Use this option to set the namespace where the original commits will be stored. The default value is &lt;code&gt;refs/original&lt;/code&gt;.</source>
          <target state="translated">Используйте эту опцию, чтобы установить пространство имен, в котором будут храниться исходные коммиты. Значение по умолчанию - &lt;code&gt;refs/original&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="978a87da673ee3d6baf57006a070d2ceaf2e0a29" translate="yes" xml:space="preserve">
          <source>Use this option to set the path to the temporary directory used for rewriting. When applying a tree filter, the command needs to temporarily check out the tree to some directory, which may consume considerable space in case of large projects. By default it does this in the &lt;code&gt;.git-rewrite/&lt;/code&gt; directory but you can override that choice by this parameter.</source>
          <target state="translated">Используйте эту опцию, чтобы установить путь к временному каталогу, используемому для перезаписи. При применении фильтра дерева команде необходимо временно извлечь дерево в какой-либо каталог, который может занимать значительное пространство в случае больших проектов. По умолчанию это делается в каталоге &lt;code&gt;.git-rewrite/&lt;/code&gt; но вы можете переопределить этот выбор с помощью этого параметра.</target>
        </trans-unit>
        <trans-unit id="7dad6966beac366ffc5d985e757265d090b93f5a" translate="yes" xml:space="preserve">
          <source>Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.</source>
          <target state="translated">Используйте этот параметр для нестабильной работы и удаления только путей из индекса.Рабочие файлы дерева,независимо от того,модифицированы они или нет,будут оставлены.</target>
        </trans-unit>
        <trans-unit id="22e3468b42fc7b02294ecbf3cdd521f378eedf7b" translate="yes" xml:space="preserve">
          <source>Use this to customize the program used for the signing format you chose. (see &lt;code&gt;gpg.program&lt;/code&gt; and &lt;code&gt;gpg.format&lt;/code&gt;) &lt;code&gt;gpg.program&lt;/code&gt; can still be used as a legacy synonym for &lt;code&gt;gpg.openpgp.program&lt;/code&gt;. The default value for &lt;code&gt;gpg.x509.program&lt;/code&gt; is &quot;gpgsm&quot;.</source>
          <target state="translated">Используйте это, чтобы настроить программу, используемую для выбранного вами формата подписи. (см. &lt;code&gt;gpg.program&lt;/code&gt; и &lt;code&gt;gpg.format&lt;/code&gt; ) &lt;code&gt;gpg.program&lt;/code&gt; все еще можно использовать как устаревший синоним &lt;code&gt;gpg.openpgp.program&lt;/code&gt; . Значение по умолчанию для &lt;code&gt;gpg.x509.program&lt;/code&gt; - &amp;laquo;gpgsm&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="2c0ec0febb1ffdfb71fd1faf1bdd4ef5cebdb7eb" translate="yes" xml:space="preserve">
          <source>Use this to specify the path to &lt;code&gt;git-upload-pack&lt;/code&gt; on the remote side, if is not found on your $PATH. Installations of sshd ignores the user&amp;rsquo;s environment setup scripts for login shells (e.g. .bash_profile) and your privately installed git may not be found on the system default $PATH. Another workaround suggested is to set up your $PATH in &quot;.bashrc&quot;, but this flag is for people who do not want to pay the overhead for non-interactive shells by having a lean .bashrc file (they set most of the things up in .bash_profile).</source>
          <target state="translated">Используйте это, чтобы указать путь к &lt;code&gt;git-upload-pack&lt;/code&gt; на удаленной стороне, если он не найден в вашем $ PATH. При установке sshd игнорируются сценарии настройки среды пользователя для оболочек входа (например, .bash_profile), и ваш установленный частным образом git может не быть найден в системном значении $ PATH по умолчанию. Другой предлагаемый обходной путь - настроить ваш $ PATH в &quot;.bashrc&quot;, но этот флаг предназначен для людей, которые не хотят оплачивать накладные расходы на неинтерактивные оболочки, имея небольшой файл .bashrc (они устанавливают большинство вещей в .bash_profile).</target>
        </trans-unit>
        <trans-unit id="1f3cdffd9311e81ebd0ee41b41de344f546bb6a2" translate="yes" xml:space="preserve">
          <source>Used DBI driver. You can specify any available driver for this here, but it might not work. cvsserver is tested with &lt;code&gt;DBD::SQLite&lt;/code&gt;, reported to work with &lt;code&gt;DBD::Pg&lt;/code&gt;, and reported &lt;strong&gt;not&lt;/strong&gt; to work with &lt;code&gt;DBD::mysql&lt;/code&gt;. Please regard this as an experimental feature. May not contain colons (&lt;code&gt;:&lt;/code&gt;). Default: &lt;code&gt;SQLite&lt;/code&gt;</source>
          <target state="translated">Использовал драйвер DBI. Вы можете указать здесь любой доступный драйвер, но он может не работать. cvsserver протестирован с &lt;code&gt;DBD::SQLite&lt;/code&gt; , сообщается о работе с &lt;code&gt;DBD::Pg&lt;/code&gt; и сообщается о том, что он &lt;strong&gt;не&lt;/strong&gt; работает с &lt;code&gt;DBD::mysql&lt;/code&gt; . Считайте это экспериментальной функцией. Может не содержать двоеточия ( &lt;code&gt;:&lt;/code&gt; ). По умолчанию: &lt;code&gt;SQLite&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e96c8aa1d6db1322edc422d5cc1ffbd12e71daed" translate="yes" xml:space="preserve">
          <source>Used Perl DBI driver. You can specify any available driver for this here, but it might not work. git-cvsserver is tested with &lt;code&gt;DBD::SQLite&lt;/code&gt;, reported to work with &lt;code&gt;DBD::Pg&lt;/code&gt;, and reported &lt;strong&gt;not&lt;/strong&gt; to work with &lt;code&gt;DBD::mysql&lt;/code&gt;. Experimental feature. May not contain double colons (&lt;code&gt;:&lt;/code&gt;). Default: &lt;code&gt;SQLite&lt;/code&gt;. See &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt;.</source>
          <target state="translated">Используется драйвер Perl DBI. Вы можете указать здесь любой доступный драйвер, но он может не работать. git-cvsserver протестирован с &lt;code&gt;DBD::SQLite&lt;/code&gt; , сообщил, что работает с &lt;code&gt;DBD::Pg&lt;/code&gt; , и сообщил, что &lt;strong&gt;не&lt;/strong&gt; работает с &lt;code&gt;DBD::mysql&lt;/code&gt; . Экспериментальная особенность. Может не содержать двойное двоеточие ( &lt;code&gt;:&lt;/code&gt; ). По умолчанию: &lt;code&gt;SQLite&lt;/code&gt; . См. &lt;a href=&quot;git-cvsserver&quot;&gt;Git-cvsserver [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3dcc5e110a8886980641614ba00244bbf70eb3c6" translate="yes" xml:space="preserve">
          <source>Used as %(if)&amp;hellip;​%(then)&amp;hellip;​%(end) or %(if)&amp;hellip;​%(then)&amp;hellip;​%(else)&amp;hellip;​%(end). If there is an atom with value or string literal after the %(if) then everything after the %(then) is printed, else if the %(else) atom is used, then everything after %(else) is printed. We ignore space when evaluating the string before %(then), this is useful when we use the %(HEAD) atom which prints either &quot;*&quot; or &quot; &quot; and we want to apply the &lt;code&gt;if&lt;/code&gt; condition only on the &lt;code&gt;HEAD&lt;/code&gt; ref. Append &quot;:equals=&amp;lt;string&amp;gt;&quot; or &quot;:notequals=&amp;lt;string&amp;gt;&quot; to compare the value between the %(if:&amp;hellip;​) and %(then) atoms with the given string.</source>
          <target state="translated">Используется как% (если)&amp;hellip;% (затем)&amp;hellip;% (конец) или% (если)&amp;hellip;% (затем)&amp;hellip;% (иначе)&amp;hellip;% (конец). Если есть атом со значением или строковым литералом после% (if), то печатается все, что находится после% (then), иначе, если используется атом% (else), то печатается все, что находится после% (else). Мы игнорируем пробел при оценке строки перед% (then), это полезно, когда мы используем атом% (HEAD), который печатает либо &amp;laquo;*&amp;raquo;, либо &amp;laquo;&amp;raquo;, и мы хотим применить условие &lt;code&gt;if&lt;/code&gt; только к &lt;code&gt;HEAD&lt;/code&gt; ref. Добавьте &quot;: equals = &amp;lt;string&amp;gt;&quot; или &quot;: notequals = &amp;lt;string&amp;gt;&quot;, чтобы сравнить значение между атомами% (if:&amp;hellip;) и% (then) с данной строкой.</target>
        </trans-unit>
        <trans-unit id="88972a7007de9e429d28d6bad7487052b23f9b65" translate="yes" xml:space="preserve">
          <source>Used to check that a bundle file is valid and will apply cleanly to the current repository. This includes checks on the bundle format itself as well as checking that the prerequisite commits exist and are fully linked in the current repository. &lt;code&gt;git bundle&lt;/code&gt; prints a list of missing commits, if any, and exits with a non-zero status.</source>
          <target state="translated">Используется для проверки того, что файл пакета действителен и будет корректно применяться к текущему репозиторию. Это включает в себя проверки самого формата пакета, а также проверку того, что предварительные требования существуют и полностью связаны в текущем репозитории. &lt;code&gt;git bundle&lt;/code&gt; выводит список отсутствующих коммитов, если таковые имеются, и завершает работу с ненулевым статусом.</target>
        </trans-unit>
        <trans-unit id="a81dfbb4b6756f63bb43c72d54c78dd02ef851d4" translate="yes" xml:space="preserve">
          <source>Used to create a bundle named &lt;code&gt;file&lt;/code&gt;. This requires the &lt;code&gt;&amp;lt;git-rev-list-args&amp;gt;&lt;/code&gt; arguments to define the bundle contents. &lt;code&gt;options&lt;/code&gt; contains the options specific to the &lt;code&gt;git bundle create&lt;/code&gt; subcommand.</source>
          <target state="translated">Используется для создания пакета с именем &lt;code&gt;file&lt;/code&gt; . Для этого требуются аргументы &lt;code&gt;&amp;lt;git-rev-list-args&amp;gt;&lt;/code&gt; для определения содержимого пакета. &lt;code&gt;options&lt;/code&gt; содержит параметры, специфичные для подкоманды &lt;code&gt;git bundle create&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fe127bac2ab0b61ffb60c0284f3741224c9951e1" translate="yes" xml:space="preserve">
          <source>Used to enforce or disable certificate revocation checks in cURL when http.sslBackend is set to &quot;schannel&quot;. Defaults to &lt;code&gt;true&lt;/code&gt; if unset. Only necessary to disable this if Git consistently errors and the message is about checking the revocation status of a certificate. This option is ignored if cURL lacks support for setting the relevant SSL option at runtime.</source>
          <target state="translated">Используется для принудительного применения или отключения проверок отзыва сертификатов в cURL, когда для http.sslBackend установлено значение &amp;laquo;schannel&amp;raquo;. По умолчанию &lt;code&gt;true&lt;/code&gt; , если не установлено. Это необходимо только в том случае, если Git постоянно выдает ошибки и появляется сообщение о проверке статуса отзыва сертификата. Эта опция игнорируется, если cURL не поддерживает установку соответствующей опции SSL во время выполнения.</target>
        </trans-unit>
        <trans-unit id="526891fe0801e3a16c20e50ecde492e75d4f6490" translate="yes" xml:space="preserve">
          <source>Used to set the maximum load that we will still respond to gitweb queries. If the server load exceeds this value then gitweb will return &quot;503 Service Unavailable&quot; error. The server load is taken to be 0 if gitweb cannot determine its value. Currently it works only on Linux, where it uses &lt;code&gt;/proc/loadavg&lt;/code&gt;; the load there is the number of active tasks on the system &amp;mdash; processes that are actually running &amp;mdash; averaged over the last minute.</source>
          <target state="translated">Используется для установки максимальной нагрузки, при которой мы все равно будем отвечать на запросы gitweb. Если загрузка сервера превышает это значение, gitweb вернет ошибку &amp;laquo;503 Service Unavailable&amp;raquo;. Загрузка сервера принимается равной 0, если gitweb не может определить ее значение. В настоящее время он работает только в Linux, где используется &lt;code&gt;/proc/loadavg&lt;/code&gt; ; нагрузка - это количество активных задач в системе - процессов, которые фактически выполняются, - усредненное за последнюю минуту.</target>
        </trans-unit>
        <trans-unit id="184dba4369820f49a823e624aa006f74d3fc96ef" translate="yes" xml:space="preserve">
          <source>Used with --remote to specify the path to the &lt;code&gt;git-upload-archive&lt;/code&gt; on the remote side.</source>
          <target state="translated">Используется с --remote для указания пути к &lt;code&gt;git-upload-archive&lt;/code&gt; на удаленной стороне.</target>
        </trans-unit>
        <trans-unit id="a985abb59dca2d23760f5b7ff00e7d00f2d0f353" translate="yes" xml:space="preserve">
          <source>Used with &lt;code&gt;--range-diff&lt;/code&gt;, tweak the heuristic which matches up commits between the previous and current series of patches by adjusting the creation/deletion cost fudge factor. See &lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff[1]&lt;/a&gt;) for details.</source>
          <target state="translated">Используется с &lt;code&gt;--range-diff&lt;/code&gt; , настраивает эвристику, которая сопоставляет коммиты между предыдущей и текущей сериями исправлений, регулируя коэффициент ложной стоимости создания / удаления. См. &lt;a href=&quot;git-range-diff&quot;&gt;Git-range-diff [1]&lt;/a&gt; ) для подробностей.</target>
        </trans-unit>
        <trans-unit id="9777df5e2d0f3ca27a559e53074b9f39896040e8" translate="yes" xml:space="preserve">
          <source>Used with the &lt;code&gt;fetch&lt;/code&gt; command.</source>
          <target state="translated">Используется с командой &lt;code&gt;fetch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea99fa3d480e34606197cb808cc4a18c1d6b1306" translate="yes" xml:space="preserve">
          <source>User Manual</source>
          <target state="translated">руководство пользователя</target>
        </trans-unit>
        <trans-unit id="3d338fa6790366b9708dc60a5019a8d98f73c4b3" translate="yes" xml:space="preserve">
          <source>User configuration and preferences are stored at:</source>
          <target state="translated">Конфигурация и предпочтения пользователя хранятся в памяти:</target>
        </trans-unit>
        <trans-unit id="ba3e3bfcde6395de2671f768450f02d32f692aba" translate="yes" xml:space="preserve">
          <source>User name (e.g., &lt;code&gt;user&lt;/code&gt; in &lt;code&gt;https://user@example.com/repo.git&lt;/code&gt;). If the config key has a user name it must match the user name in the URL exactly. If the config key does not have a user name, that config key will match a URL with any user name (including none), but at a lower precedence than a config key with a user name.</source>
          <target state="translated">Имя пользователя (например, &lt;code&gt;user&lt;/code&gt; в &lt;code&gt;https://user@example.com/repo.git&lt;/code&gt; ). Если ключ конфигурации имеет имя пользователя, оно должно точно соответствовать имени пользователя в URL-адресе. Если ключ конфигурации не имеет имени пользователя, этот ключ конфигурации будет соответствовать URL-адресу с любым именем пользователя (включая отсутствие имени), но с более низким приоритетом, чем ключ конфигурации с именем пользователя.</target>
        </trans-unit>
        <trans-unit id="9eabd3862d3bc88b6d20553afdc4c28a880bd15a" translate="yes" xml:space="preserve">
          <source>User specified as an option to all p4 commands, with &lt;code&gt;-u &amp;lt;user&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4USER&lt;/code&gt; can be used instead.</source>
          <target state="translated">Пользователь, указанный в качестве опции для всех команд p4, с &lt;code&gt;-u &amp;lt;user&amp;gt;&lt;/code&gt; . &lt;code&gt;P4USER&lt;/code&gt; можно использовать переменную окружения P4USER .</target>
        </trans-unit>
        <trans-unit id="3129c28f60cb352aa378d9055c2dee4b71cd917d" translate="yes" xml:space="preserve">
          <source>User-specific configuration file. Also called &quot;global&quot; configuration file.</source>
          <target state="translated">Пользовательский конфигурационный файл.Также называется &quot;глобальным&quot; конфигурационным файлом.</target>
        </trans-unit>
        <trans-unit id="53b3f2b51348a1a5a4076e004425d0d150df3f8e" translate="yes" xml:space="preserve">
          <source>User-specific credentials file.</source>
          <target state="translated">Файл учетных данных пользователя.</target>
        </trans-unit>
        <trans-unit id="fbb3c5af6a1b800cb6bfa442ae5c6ae5ee1a4454" translate="yes" xml:space="preserve">
          <source>Username for SMTP-AUTH. Default is the value of &lt;code&gt;sendemail.smtpUser&lt;/code&gt;; if a username is not specified (with &lt;code&gt;--smtp-user&lt;/code&gt; or &lt;code&gt;sendemail.smtpUser&lt;/code&gt;), then authentication is not attempted.</source>
          <target state="translated">Имя пользователя для SMTP-AUTH. По умолчанию используется значение &lt;code&gt;sendemail.smtpUser&lt;/code&gt; ; если имя пользователя не указано (с помощью &lt;code&gt;--smtp-user&lt;/code&gt; или &lt;code&gt;sendemail.smtpUser&lt;/code&gt; ), попытка аутентификации не выполняется.</target>
        </trans-unit>
        <trans-unit id="dd5ba62269befa999225c8d360ebd4fd64f50001" translate="yes" xml:space="preserve">
          <source>Users may select an automated merge strategy from among the following using either -s/--strategy option or configuring notes.mergeStrategy accordingly:</source>
          <target state="translated">Пользователи могут выбрать автоматическую стратегию слияния,используя либо опцию -s/--strategy,либо настроив notes.mergeStrategy соответственно:</target>
        </trans-unit>
        <trans-unit id="312954bd3f459a8154fbfda7b5edb71c57c929c2" translate="yes" xml:space="preserve">
          <source>Users migrating from CVS may also want to read &lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration[7]&lt;/a&gt;.</source>
          <target state="translated">Пользователи, переходящие с CVS, также могут захотеть прочитать &lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration [7]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bdfc1b01541d0790675419ccbb86b2582c7e882c" translate="yes" xml:space="preserve">
          <source>Users often try to use the assume-unchanged and skip-worktree bits to tell Git to ignore changes to files that are tracked. This does not work as expected, since Git may still check working tree files against the index when performing certain operations. In general, Git does not provide a way to ignore changes to tracked files, so alternate solutions are recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fd200f233551c846ddc52433b7473972ba45cd" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;assume unchanged&amp;rdquo; bit</source>
          <target state="translated">Использование бита &amp;laquo;считать неизменным&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="db59534f65c86c428a7a540c110ff1130d39acfc" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;git add -A&amp;rdquo;</source>
          <target state="translated">Использование &amp;laquo;git add -A&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="3f756864c1cac8254338a14f16b7888b4cd11774" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;git commit -a&amp;rdquo;</source>
          <target state="translated">Использование &amp;laquo;git commit -a&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="1ad6e2bdca2ef33d6f60d1165c40af77488df73e" translate="yes" xml:space="preserve">
          <source>Using --cacheinfo or --info-only</source>
          <target state="translated">Использование --cacheinfo или --info-only</target>
        </trans-unit>
        <trans-unit id="63a49bc3316ec7fe7ab1c50a106ab3c187422a12" translate="yes" xml:space="preserve">
          <source>Using --index-info</source>
          <target state="translated">Использование -индекс-информации</target>
        </trans-unit>
        <trans-unit id="9465002aca9e596e405478c595d6ec82ecf19f4d" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules can only fetch new commits in already checked out submodules right now. When e.g. upstream added a new submodule in the just fetched commits of the superproject the submodule itself cannot be fetched, making it impossible to check out that submodule later without having to do a fetch again. This is expected to be fixed in a future Git version.</source>
          <target state="translated">Использование --recurse-подмодулей позволяет получить новые коммиты только в уже проверенных подмодулях прямо сейчас.Когда,например,восходящий подмодуль добавляется в только что извлечённые коммиты суперпроекта,сам подмодуль не может быть извлечён,что делает невозможным извлечение этого подмодуля позже без необходимости повторного извлечения.Ожидается,что это будет исправлено в будущей версии Git'а.</target>
        </trans-unit>
        <trans-unit id="9ba2b3bf5dd0ae3395bffc9a6bf30c85dfb19a1b" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject by calling read-tree recursively, also setting the submodules' HEAD to be detached at that commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6c4766d3d128d670a5d5adf42fc526da676a66" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules will update the content of all initialized submodules according to the commit recorded in the superproject by calling read-tree recursively, also setting the submodules HEAD to be detached at that commit.</source>
          <target state="translated">Использование --recurse-подмодулей обновит содержимое всех инициализированных подмодулей в соответствии с коммитом,записанным в суперпроекте,вызвав read-tree рекурсивно,а также настроив подмодули HEAD на отсоединение при этом коммите.</target>
        </trans-unit>
        <trans-unit id="8315f077dd8f5ad49468aff013d2df68acafcb5e" translate="yes" xml:space="preserve">
          <source>Using --refresh</source>
          <target state="translated">Использование-обновление</target>
        </trans-unit>
        <trans-unit id="0565ce691b52b5953c2fb97dfb806a2f764f48e2" translate="yes" xml:space="preserve">
          <source>Using --temp or --stage=all</source>
          <target state="translated">Использование --temp или --stage=all</target>
        </trans-unit>
        <trans-unit id="509888a40362653e71adbbdc6d4e59bc0d3d4ce4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--index-filter&lt;/code&gt; with &lt;code&gt;git rm&lt;/code&gt; yields a significantly faster version. Like with using &lt;code&gt;rm filename&lt;/code&gt;, &lt;code&gt;git rm --cached filename&lt;/code&gt; will fail if the file is absent from the tree of a commit. If you want to &quot;completely forget&quot; a file, it does not matter when it entered history, so we also add &lt;code&gt;--ignore-unmatch&lt;/code&gt;:</source>
          <target state="translated">Использование &lt;code&gt;--index-filter&lt;/code&gt; с &lt;code&gt;git rm&lt;/code&gt; дает значительно более быструю версию. Как и при использовании &lt;code&gt;rm filename&lt;/code&gt; , &lt;code&gt;git rm --cached filename&lt;/code&gt; завершится ошибкой, если файл отсутствует в дереве фиксации. Если вы хотите &amp;laquo;полностью забыть&amp;raquo; файл, не имеет значения, когда он вошел в историю, поэтому мы также добавляем &lt;code&gt;--ignore-unmatch&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="802dbfe4495f98c59f087035f936edebe365e8d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all active submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless &lt;code&gt;-f&lt;/code&gt; is used. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, submodules working trees will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5da0d2a32c5b7048069200ef431cff7653b1d4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all active submodules according to the commit recorded in the superproject. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, submodules working trees will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e7ecf39552b28db7a0c771cb5239db7d4a81af" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all initialized submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless &lt;code&gt;-f&lt;/code&gt; is used. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, the work trees of submodules will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodule.</source>
          <target state="translated">Использование &lt;code&gt;--recurse-submodules&lt;/code&gt; обновит содержимое всех инициализированных подмодулей в соответствии с фиксацией, записанной в суперпроекте. Если локальные изменения в подмодуле будут перезаписаны, проверка завершится неудачно, если не используется &lt;code&gt;-f&lt;/code&gt; . Если ничего (или &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ) не используется, деревья работы подмодулей обновляться не будут. Как и в случае с &lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt; , это отключает &lt;code&gt;HEAD&lt;/code&gt; подмодуля.</target>
        </trans-unit>
        <trans-unit id="87e05fa35b92ebd2beac592a4000f99e52c8fa99" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all initialized submodules according to the commit recorded in the superproject. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, the work trees of submodules will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodules.</source>
          <target state="translated">Использование &lt;code&gt;--recurse-submodules&lt;/code&gt; обновит содержимое всех инициализированных подмодулей в соответствии с фиксацией, записанной в суперпроекте. Если ничего (или &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ) не используется, деревья работы подмодулей обновляться не будут. Как и в случае с &lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt; , это приведет к отсоединению &lt;code&gt;HEAD&lt;/code&gt; подмодулей.</target>
        </trans-unit>
        <trans-unit id="131907fc18369579f75831dbffd3a45262caaa68" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-a&lt;/code&gt; would conflate &amp;lt;remote&amp;gt; with any local branches you happen to have been prefixed with the same &amp;lt;remote&amp;gt; pattern.</source>
          <target state="translated">Использование &lt;code&gt;-a&lt;/code&gt; объединит &amp;lt;remote&amp;gt; с любыми локальными ветвями, которые имеют префикс с тем же шаблоном &amp;lt;remote&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="bc196497d8f80228e3ec0969c92ba077224b9158" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;git checkout-index&lt;/em&gt; to &quot;export an entire tree&quot;</source>
          <target state="translated">Использование &lt;em&gt;git checkout-index&lt;/em&gt; для &amp;laquo;экспорта всего дерева&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="bb5a1594f36aa9f526f3a0391e9aecb18bcb1ed6" translate="yes" xml:space="preserve">
          <source>Using Gmail&amp;rsquo;s IMAP interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f145740948f023493614f8cb28fc352a33b08d80" translate="yes" xml:space="preserve">
          <source>Using a limit</source>
          <target state="translated">Используя ограничение</target>
        </trans-unit>
        <trans-unit id="0d18e7415acaf5bf1693b96116e4340271619597" translate="yes" xml:space="preserve">
          <source>Using another project while maintaining independent history. Submodules allow you to contain the working tree of another project within your own working tree while keeping the history of both projects separate. Also, since submodules are fixed to an arbitrary version, the other project can be independently developed without affecting the superproject, allowing the superproject project to fix itself to new versions only when desired.</source>
          <target state="translated">Использование другого проекта при сохранении самостоятельной истории.Субмодули позволяют содержать рабочее дерево другого проекта в собственном рабочем дереве,сохраняя при этом историю обоих проектов отдельно.Также,так как подмодули фиксируются в произвольной версии,другой проект может развиваться независимо,не затрагивая суперпроект,позволяя суперпроектному проекту фиксировать себя в новых версиях только при желании.</target>
        </trans-unit>
        <trans-unit id="03266ad998c58f3651e774794904a59499884e04" translate="yes" xml:space="preserve">
          <source>Using complex scripts</source>
          <target state="translated">Использование сложных скриптов</target>
        </trans-unit>
        <trans-unit id="9a4e17fa716627d801ba04248e7c13675c63f6bf" translate="yes" xml:space="preserve">
          <source>Using direct mode with SSL:</source>
          <target state="translated">Использование прямого режима с SSL:</target>
        </trans-unit>
        <trans-unit id="80be60b71aa62e009a5472e7b71ecca69fb605f2" translate="yes" xml:space="preserve">
          <source>Using direct mode:</source>
          <target state="translated">Использование прямого режима:</target>
        </trans-unit>
        <trans-unit id="1c1bc19943239ea53498134ee5024657c6f7482f" translate="yes" xml:space="preserve">
          <source>Using git for collaboration</source>
          <target state="translated">Использование git для сотрудничества</target>
        </trans-unit>
        <trans-unit id="e742dd237e897f0c09d1168ed38eeca1316d409b" translate="yes" xml:space="preserve">
          <source>Using interactive rebases</source>
          <target state="translated">Использование интерактивных скидок</target>
        </trans-unit>
        <trans-unit id="16c9cb76d4ea0981714eee54828fc3305174e2d5" translate="yes" xml:space="preserve">
          <source>Using macro attributes</source>
          <target state="translated">Использование макроатрибутов</target>
        </trans-unit>
        <trans-unit id="0bcad514939a1a512d30defc1dd83a6988408bd1" translate="yes" xml:space="preserve">
          <source>Using more options generally further limits the output (e.g. &lt;code&gt;--since=&amp;lt;date1&amp;gt;&lt;/code&gt; limits to commits newer than &lt;code&gt;&amp;lt;date1&amp;gt;&lt;/code&gt;, and using it with &lt;code&gt;--grep=&amp;lt;pattern&amp;gt;&lt;/code&gt; further limits to commits whose log message has a line that matches &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;), unless otherwise noted.</source>
          <target state="translated">Использование большего количества параметров обычно дополнительно ограничивает вывод (например, &lt;code&gt;--since=&amp;lt;date1&amp;gt;&lt;/code&gt; ограничивает коммиты новее, чем &lt;code&gt;&amp;lt;date1&amp;gt;&lt;/code&gt; , а использование его с &lt;code&gt;--grep=&amp;lt;pattern&amp;gt;&lt;/code&gt; - дополнительные ограничения для коммитов, в сообщении журнала которых есть строка, которая соответствует &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; date1&amp;gt; pattern&amp;gt; ), если не указано иное.</target>
        </trans-unit>
        <trans-unit id="aab9e25047cbd960c71a3d6743c695a0fbcee99d" translate="yes" xml:space="preserve">
          <source>Using refspecs explicitly:</source>
          <target state="translated">Используя реффиксы в явном виде:</target>
        </trans-unit>
        <trans-unit id="e240eb205361a2a50754a2cbbad5230917e3c8f6" translate="yes" xml:space="preserve">
          <source>Using test suites and git bisect together</source>
          <target state="translated">Использование тестовых наборов и гит-бисектов вместе.</target>
        </trans-unit>
        <trans-unit id="8fdfb0e1e33426ffa586ab6e967bc34118a45d25" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--submodule=log&lt;/code&gt; option with &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; will provide that information too.</source>
          <target state="translated">Использование &lt;code&gt;--submodule=log&lt;/code&gt; с &lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt; также предоставит эту информацию.</target>
        </trans-unit>
        <trans-unit id="d42f8d8f39d5c1ce54e65e242137998175012054" translate="yes" xml:space="preserve">
          <source>Using these options, &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; will act similar to the more specialized family of commit log tools: &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt;, and &lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged[1]&lt;/a&gt;</source>
          <target state="translated">Используя эти параметры, &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt; будет действовать аналогично более специализированному семейству инструментов журнала фиксации: &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; , &lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt; и &lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged [1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a34d360db274a11502bc402ef7758f2bc5adf11b" translate="yes" xml:space="preserve">
          <source>Using this helper will store your passwords unencrypted on disk, protected only by filesystem permissions. If this is not an acceptable security tradeoff, try &lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache[1]&lt;/a&gt;, or find a helper that integrates with secure storage provided by your operating system.</source>
          <target state="translated">Использование этого помощника сохранит ваши пароли в незашифрованном виде на диске, защищенном только разрешениями файловой системы. Если это недопустимый компромисс в плане безопасности, попробуйте &lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache [1]&lt;/a&gt; или найдите помощника, который интегрируется с безопасным хранилищем, предоставляемым вашей операционной системой.</target>
        </trans-unit>
        <trans-unit id="86d0ca06bdb5a3aacec696a9b10115a302a90ea4" translate="yes" xml:space="preserve">
          <source>Using this hook, it is easy to generate mails describing the updates to the repository. This example script sends one mail message per ref listing the commits pushed to the repository, and logs the push certificates of signed pushes with good signatures to a logger service:</source>
          <target state="translated">С помощью этого крючка можно легко генерировать письма с описанием обновлений в репозитории.Этот пример скрипта посылает по одному почтовому сообщению на каждый реферат со списком коммитов,отправленных в репозиторий,и записывает в журнал толкающие сертификаты подписанных коммитов с хорошими подписями в службу регистрации:</target>
        </trans-unit>
        <trans-unit id="7ae98ad0643543d139a0ccded2d96be6c57e816c" translate="yes" xml:space="preserve">
          <source>Using this option for any other purpose (don&amp;rsquo;t ask) is very strongly discouraged.</source>
          <target state="translated">Использование этой опции для любых других целей (не спрашивайте) очень не рекомендуется.</target>
        </trans-unit>
        <trans-unit id="ebe89d9e15d8a582f6b4a48c6c03d60cf9c673f1" translate="yes" xml:space="preserve">
          <source>Using tunnel mode:</source>
          <target state="translated">Использование туннельного режима:</target>
        </trans-unit>
        <trans-unit id="f17a1449e9ed80dcff59f550977b6693d42b10bf" translate="yes" xml:space="preserve">
          <source>Usual 3-way file level merge for text files. Conflicted regions are marked with conflict markers &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=======&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. The version from your branch appears before the &lt;code&gt;=======&lt;/code&gt; marker, and the version from the merged branch appears after the &lt;code&gt;=======&lt;/code&gt; marker.</source>
          <target state="translated">Обычное трехстороннее слияние на уровне файлов для текстовых файлов. Конфликтующие регионы отмечены маркерами конфликта &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; , &lt;code&gt;=======&lt;/code&gt; и &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; . Версия из вашей ветки отображается перед маркером &lt;code&gt;=======&lt;/code&gt; , а версия из объединенной ветки появляется после маркера &lt;code&gt;=======&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6cb51fab051882aaba81e0715d7acfa80e2ce09c" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;git gc&lt;/code&gt; runs very quickly while providing good disk space utilization and performance. This option will cause &lt;code&gt;git gc&lt;/code&gt; to more aggressively optimize the repository at the expense of taking much more time. The effects of this optimization are mostly persistent. See the &quot;AGGRESSIVE&quot; section below for details.</source>
          <target state="translated">Обычно &lt;code&gt;git gc&lt;/code&gt; работает очень быстро, обеспечивая хорошее использование дискового пространства и производительность. Эта опция заставит &lt;code&gt;git gc&lt;/code&gt; более агрессивно оптимизировать репозиторий за счет гораздо большего количества времени. Эффект от этой оптимизации в основном устойчивый. См. Подробности в разделе &amp;laquo;АГРЕССИВНЫЙ&amp;raquo; ниже.</target>
        </trans-unit>
        <trans-unit id="da9e2cbf852524ee1edb371514af799c05f82c93" translate="yes" xml:space="preserve">
          <source>Usually a merge requires the index file as well as the files in the working tree to be up to date with the current head commit, in order not to lose local changes. This flag disables the check with the working tree and is meant to be used when creating a merge of trees that are not directly related to the current working tree status into a temporary index file.</source>
          <target state="translated">Обычно для слияния требуется,чтобы индексный файл,а также файлы в рабочем дереве были актуальны с текущей фиксацией заголовка,чтобы не потерять локальные изменения.Этот флаг отключает проверку с рабочим деревом и предназначен для использования при создании слияния деревьев,не имеющих прямого отношения к текущему состоянию рабочего дерева,во временный индексный файл.</target>
        </trans-unit>
        <trans-unit id="27214bb5573e76f1f8a1f21396536681c10927d6" translate="yes" xml:space="preserve">
          <source>Usually a three-way merge by &lt;code&gt;git read-tree&lt;/code&gt; resolves the merge for really trivial cases and leaves other cases unresolved in the index, so that porcelains can implement different merge policies. This flag makes the command resolve a few more cases internally:</source>
          <target state="translated">Обычно трехстороннее слияние с помощью &lt;code&gt;git read-tree&lt;/code&gt; разрешает слияние для действительно тривиальных случаев и оставляет другие случаи нерешенными в индексе, чтобы фарфор мог реализовать разные политики слияния. Этот флаг заставляет команду разрешить еще несколько случаев внутренне:</target>
        </trans-unit>
        <trans-unit id="1a018c180f83561166ef04fc1c1b049dd7bef5e3" translate="yes" xml:space="preserve">
          <source>Usually given &quot;&amp;lt;feature&amp;gt;&quot; is configurable via the &lt;code&gt;gitweb.&amp;lt;feature&amp;gt;&lt;/code&gt; config variable in the per-repository Git configuration file.</source>
          <target state="translated">Обычно данный параметр &quot;&amp;lt;feature&amp;gt;&quot; настраивается с помощью &lt;code&gt;gitweb.&amp;lt;feature&amp;gt;&lt;/code&gt; конфигурации gitweb. &amp;lt;feature&amp;gt; в файле конфигурации Git для каждого репозитория.</target>
        </trans-unit>
        <trans-unit id="06bd62b74600c2b58fc5390378d7102461c2b477" translate="yes" xml:space="preserve">
          <source>Usually it is easier to configure any desired options through your personal &lt;code&gt;.ssh/config&lt;/code&gt; file. Please consult your ssh documentation for further details.</source>
          <target state="translated">Обычно проще настроить любые желаемые параметры через ваш личный файл &lt;code&gt;.ssh/config&lt;/code&gt; . Дополнительные сведения см. В документации по ssh.</target>
        </trans-unit>
        <trans-unit id="e92c22e35ceb9b2c8da5295a992718e30d5c9f60" translate="yes" xml:space="preserve">
          <source>Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts.</source>
          <target state="translated">Обычно запись коммита,который имеет точно такое же дерево,как и его единственный родительский коммит,является ошибкой,и команда не позволяет вам сделать такой коммит.Эта опция обходит безопасность,и предназначена,в первую очередь,для использования иностранными скриптами интерфейса SCM.</target>
        </trans-unit>
        <trans-unit id="8ce3f0d516dc2a9d67b8e4ba143055eaf7bab452" translate="yes" xml:space="preserve">
          <source>Usually the command automatically creates a sequence of commits. This flag applies the changes necessary to cherry-pick each named commit to your working tree and the index, without making any commit. In addition, when this option is used, your index does not have to match the HEAD commit. The cherry-pick is done against the beginning state of your index.</source>
          <target state="translated">Обычно команда автоматически создает последовательность коммитов.Этот флаг применяет изменения,необходимые для фиксации каждого именованного коммита в вашем рабочем дереве и индексе,без фиксации.Кроме того,при использовании этого параметра ваш индекс не должен совпадать с HEAD-комитом.Выбор вишни делается против начального состояния вашего индекса.</target>
        </trans-unit>
        <trans-unit id="55875ee1e78ad1cfc5a25d1e098bc17781327203" translate="yes" xml:space="preserve">
          <source>Usually the command automatically creates some commits with commit log messages stating which commits were reverted. This flag applies the changes necessary to revert the named commits to your working tree and the index, but does not make the commits. In addition, when this option is used, your index does not have to match the HEAD commit. The revert is done against the beginning state of your index.</source>
          <target state="translated">Обычно команда автоматически создает несколько коммитов с сообщениями журнала коммитов,в которых указывается,какие коммиты были возвращены.Этот флаг применяет изменения,необходимые для возврата именованных коммитов в ваше рабочее дерево и индекс,но не делает коммитов.Кроме того,при использовании этого параметра,ваш индекс не должен совпадать с HEAD коммитом.Возврат осуществляется против начального состояния вашего индекса.</target>
        </trans-unit>
        <trans-unit id="51d5f6e8faedb5ef4d1204f14e2f7ab2d7b77eaf" translate="yes" xml:space="preserve">
          <source>Usually the command stops output upon showing the commit that is the common ancestor of all the branches. This flag tells the command to go &amp;lt;n&amp;gt; more common commits beyond that. When &amp;lt;n&amp;gt; is negative, display only the &amp;lt;reference&amp;gt;s given, without showing the commit ancestry tree.</source>
          <target state="translated">Обычно команда останавливает вывод после отображения фиксации, которая является общим предком всех ветвей. Этот флаг указывает команде на &amp;lt;n&amp;gt; более частых коммитов сверх этого. Когда &amp;lt;n&amp;gt; отрицательно, отображать только данные &amp;lt;reference&amp;gt; без отображения дерева предков фиксации.</target>
        </trans-unit>
        <trans-unit id="29097abe7ecd686605680556737a55dc5b7468af" translate="yes" xml:space="preserve">
          <source>Usually the object names are output in SHA-1 form (with possible &lt;code&gt;^&lt;/code&gt; prefix); this option makes them output in a form as close to the original input as possible.</source>
          <target state="translated">Обычно имена объектов выводятся в форме SHA-1 (с возможным префиксом &lt;code&gt;^&lt;/code&gt; ); эта опция заставляет их выводить в форме, максимально приближенной к исходной.</target>
        </trans-unit>
        <trans-unit id="576f849692364345fa924f476c3413707294c315" translate="yes" xml:space="preserve">
          <source>Usually the output is made one line per flag and parameter. This option makes output a single line, properly quoted for consumption by shell. Useful when you expect your parameter to contain whitespaces and newlines (e.g. when using pickaxe &lt;code&gt;-S&lt;/code&gt; with &lt;code&gt;git diff-*&lt;/code&gt;). In contrast to the &lt;code&gt;--sq-quote&lt;/code&gt; option, the command input is still interpreted as usual.</source>
          <target state="translated">Обычно вывод осуществляется по одной строке на каждый флаг и параметр. Эта опция делает вывод одной строкой, правильно цитируемой для использования оболочкой. Полезно, когда вы ожидаете, что ваш параметр будет содержать пробелы и символы новой строки (например, при использовании &lt;code&gt;git diff-*&lt;/code&gt; &lt;code&gt;-S&lt;/code&gt; с git diff- * ). В отличие от &lt;code&gt;--sq-quote&lt;/code&gt; , ввод команды по-прежнему интерпретируется как обычно.</target>
        </trans-unit>
        <trans-unit id="52303fe63fddea8a07d49fe1df917ff950ba6541" translate="yes" xml:space="preserve">
          <source>Usually the program removes email cruft from the Subject: header line to extract the title line for the commit log message. This option prevents this munging, and is most useful when used to read back &lt;code&gt;git format-patch -k&lt;/code&gt; output.</source>
          <target state="translated">Обычно программа удаляет мусор электронной почты из строки заголовка Subject :, чтобы извлечь строку заголовка для сообщения журнала фиксации. Эта опция предотвращает эту путаницу и наиболее полезна при использовании для чтения вывода &lt;code&gt;git format-patch -k&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12904fba6e8c31d350b5463557502fba670802b3" translate="yes" xml:space="preserve">
          <source>Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent.</source>
          <target state="translated">Обычно вы не можете выбрать слияние,потому что не знаете,какую сторону слияния следует считать главной.Эта опция задает родительский номер (начиная с 1)главной линии и позволяет cherry-pick переиграть изменение относительно указанного родителя.</target>
        </trans-unit>
        <trans-unit id="8ec09d5ac366ce3cd2a5e3c6c67d0b4fe311e4bf" translate="yes" xml:space="preserve">
          <source>Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows revert to reverse the change relative to the specified parent.</source>
          <target state="translated">Обычно вы не можете вернуть слияние,потому что не знаете,какую сторону слияния следует считать основной.Эта опция задает родительский номер (начиная с 1)основной линии и позволяет вернуть изменение относительно указанного родителя.</target>
        </trans-unit>
        <trans-unit id="6969d1a350dfc3fafb277e2e6995e5ac7a289ac5" translate="yes" xml:space="preserve">
          <source>Usually you should not need to change (adjust) any of configuration variables described below; they should be automatically set by gitweb to correct value.</source>
          <target state="translated">Обычно нет необходимости изменять (корректировать)какие-либо из описанных ниже конфигурационных переменных;они должны автоматически устанавливаться gitweb для коррекции значения.</target>
        </trans-unit>
        <trans-unit id="b172c85defacdb686b541793ef9e8aeee0cdf60e" translate="yes" xml:space="preserve">
          <source>Usually you would want to use &lt;code&gt;git fetch&lt;/code&gt;, which is a higher level wrapper of this command, instead.</source>
          <target state="translated">Обычно вместо этого вы хотите использовать &lt;code&gt;git fetch&lt;/code&gt; , который является оболочкой более высокого уровня для этой команды.</target>
        </trans-unit>
        <trans-unit id="bec645de31c299cb10f93b6253e1e1669a5f0a31" translate="yes" xml:space="preserve">
          <source>Usually you would want to use &lt;code&gt;git push&lt;/code&gt;, which is a higher-level wrapper of this command, instead. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">Обычно вместо этого вы хотите использовать &lt;code&gt;git push&lt;/code&gt; , который является оболочкой более высокого уровня для этой команды. См. &lt;a href=&quot;git-push&quot;&gt;Git-push [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5982263578e4f00875c00a40da810fe92911cebc" translate="yes" xml:space="preserve">
          <source>Usually, &quot;git push&quot; refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.</source>
          <target state="translated">Обычно,&quot;git push&quot; отказывается обновлять удалённый рефлекс,который не является предком локального рефлекса,используемого для его перезаписи.</target>
        </trans-unit>
        <trans-unit id="f8497b6ab754b20f8d36f9efb8dfea581706bc5d" translate="yes" xml:space="preserve">
          <source>Usually, dangling blobs and trees aren&amp;rsquo;t very interesting. They&amp;rsquo;re almost always the result of either being a half-way mergebase (the blob will often even have the conflict markers from a merge in it, if you have had conflicting merges that you fixed up by hand), or simply because you interrupted a &lt;code&gt;git fetch&lt;/code&gt; with ^C or something like that, leaving &lt;code&gt;some&lt;/code&gt; of the new objects in the object database, but just dangling and useless.</source>
          <target state="translated">Обычно свисающие капли и деревья не очень интересны. Они почти всегда являются результатом либо наполовину базы слияния (в большом двоичном объекте часто даже присутствуют маркеры конфликта от слияния, если у вас были конфликтующие слияния, которые вы исправили вручную), либо просто потому, что вы прервали &lt;code&gt;git fetch&lt;/code&gt; с ^ C или что - то в этом роде, в результате чего &lt;code&gt;some&lt;/code&gt; из новых объектов в базе данных объектов, а просто болтается и бесполезно.</target>
        </trans-unit>
        <trans-unit id="ebecb811fcb50ea2c9e80ad196b73df5b02ee5fc" translate="yes" xml:space="preserve">
          <source>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when &lt;code&gt;--force-with-lease&lt;/code&gt; option is used, the command refuses to update a remote ref whose current value does not match what is expected.</source>
          <target state="translated">Обычно команда отказывается обновлять удаленную ссылку, которая не является предком локальной ссылки, используемой для ее перезаписи. Кроме того, когда используется опция &lt;code&gt;--force-with-lease&lt;/code&gt; , команда отказывается обновлять удаленную ссылку, текущее значение которой не соответствует ожидаемому.</target>
        </trans-unit>
        <trans-unit id="1039e5d0aca0474d85bb0cc56a14c21769cd56ed" translate="yes" xml:space="preserve">
          <source>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. What this means is that the remote repository can lose commits; use it with care.</source>
          <target state="translated">Обычно команда отказывается обновлять удаленный отказ,который не является предком локального отказа,используемого для его перезаписи.Этот флаг отключает проверку.Это означает,что удалённое хранилище может потерять коммиты;используйте его с осторожностью.</target>
        </trans-unit>
        <trans-unit id="b573cab97a4c7ff4e65c78f089627a289eeb14b6" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;'s include:</source>
          <target state="translated">Допустимые значения &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; включают:</target>
        </trans-unit>
        <trans-unit id="2f441e23dc9e42a84676feea9743dbd62f2c9b12" translate="yes" xml:space="preserve">
          <source>Valid object types are:</source>
          <target state="translated">Действительные типы объектов:</target>
        </trans-unit>
        <trans-unit id="9b5bd1c32c0119d43f13ecb3f634510bb032afd7" translate="yes" xml:space="preserve">
          <source>Validate packed Git archive files</source>
          <target state="translated">Проверять упакованы файлы Git-архива</target>
        </trans-unit>
        <trans-unit id="c95efe4a20b3c90ba09bca423cb347dacda4f997" translate="yes" xml:space="preserve">
          <source>Validates the GPG signature created by &lt;code&gt;git commit -S&lt;/code&gt;.</source>
          <target state="translated">Проверяет подпись GPG, созданную &lt;code&gt;git commit -S&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee833db09826b15f6656c228fc09101a4d262c96" translate="yes" xml:space="preserve">
          <source>Validates the gpg signature created by &lt;code&gt;git tag&lt;/code&gt;.</source>
          <target state="translated">Проверяет подпись gpg, созданную &lt;code&gt;git tag&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="38ecbfb58a1b4075db82e349628396bb680485d8" translate="yes" xml:space="preserve">
          <source>Values for other tools can be used if there is a corresponding &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; configuration entry (see below).</source>
          <target state="translated">Значения для других инструментов можно использовать при наличии соответствующей записи конфигурации &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; (см. Ниже).</target>
        </trans-unit>
        <trans-unit id="4590af9796b7774b94529a47844bbbd8cd70381f" translate="yes" xml:space="preserve">
          <source>Values obtained in later configuration files override values obtained earlier in the above sequence.</source>
          <target state="translated">Значения,полученные в последующих конфигурационных файлах,переопределяют значения,полученные ранее в указанной последовательности.</target>
        </trans-unit>
        <trans-unit id="42a2c91c112ab20fb86d229e79049c16aac8f47b" translate="yes" xml:space="preserve">
          <source>Values of many variables are treated as a simple string, but there are variables that take values of specific types and there are rules as to how to spell them.</source>
          <target state="translated">Значения многих переменных рассматриваются как простая строка,но есть переменные,которые берут значения определенных типов,и есть правила,как они пишутся.</target>
        </trans-unit>
        <trans-unit id="af6a117cf9cae5d8127a5c83e908e26e4094605c" translate="yes" xml:space="preserve">
          <source>Variable substitution</source>
          <target state="translated">переменная замена</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="36ae09eeb0daa8ef3fa73e86b507f064c6f1150e" translate="yes" xml:space="preserve">
          <source>Various Git commands use the following environment variables:</source>
          <target state="translated">Различные команды Git'а используют следующие переменные окружения:</target>
        </trans-unit>
        <trans-unit id="c808db304a88e67e4d99602bde96a3fd73a86c36" translate="yes" xml:space="preserve">
          <source>Various aspects of gitweb&amp;rsquo;s behavior can be controlled through the configuration file &lt;code&gt;gitweb_config.perl&lt;/code&gt; or &lt;code&gt;/etc/gitweb.conf&lt;/code&gt;. See the &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt; for details.</source>
          <target state="translated">Различные аспекты поведения gitweb можно контролировать с помощью файла конфигурации &lt;code&gt;gitweb_config.perl&lt;/code&gt; или &lt;code&gt;/etc/gitweb.conf&lt;/code&gt; . Подробности смотрите в &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="514c3adc237433a43f04caf698ef6f51638f8f03" translate="yes" xml:space="preserve">
          <source>Various commands read from the configuration file and adjust their operation accordingly. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for a list and more details about the configuration mechanism.</source>
          <target state="translated">Различные команды читают из файла конфигурации и соответствующим образом корректируют свою работу. См. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; для получения списка и более подробной информации о механизме конфигурации.</target>
        </trans-unit>
        <trans-unit id="9d741cda072f8e825584f9d44fb913d01a1b3645" translate="yes" xml:space="preserve">
          <source>Various values from structured fields in referenced objects can be used to interpolate into the resulting output, or as sort keys.</source>
          <target state="translated">Различные значения из структурированных полей в ссылающихся объектах могут быть использованы для интерполяции в результирующий вывод или в качестве клавиш сортировки.</target>
        </trans-unit>
        <trans-unit id="0e52597805b02b27bbf6fa8afb053d38cd1cf9a2" translate="yes" xml:space="preserve">
          <source>Various ways to check your working tree</source>
          <target state="translated">Различные способы проверить ваше рабочее дерево</target>
        </trans-unit>
        <trans-unit id="8a8830ff167eaa3505bc00fdd4111ea514743436" translate="yes" xml:space="preserve">
          <source>Verbose output.</source>
          <target state="translated">Вербоскопический выход.</target>
        </trans-unit>
        <trans-unit id="5e80e8afa8277ee05efe0825f2f72b290ab38b7f" translate="yes" xml:space="preserve">
          <source>Verbose.</source>
          <target state="translated">Verbose.</target>
        </trans-unit>
        <trans-unit id="1eee329978eae57e0140879a7cb5a19a8e448f4c" translate="yes" xml:space="preserve">
          <source>Verbosely display information about the searching strategy being employed to standard error. The tag name will still be printed to standard out.</source>
          <target state="translated">Вербально отображает информацию о применяемой стратегии поиска до стандартной ошибки.Имя тега все равно будет распечатано в соответствии со стандартом.</target>
        </trans-unit>
        <trans-unit id="17eca013b0d71c76732d4067f559197bffc5dc5a" translate="yes" xml:space="preserve">
          <source>Verbosity: let &lt;code&gt;cvsimport&lt;/code&gt; report what it is doing.</source>
          <target state="translated">Подробность: пусть &lt;code&gt;cvsimport&lt;/code&gt; сообщает, что он делает.</target>
        </trans-unit>
        <trans-unit id="43241483b8c2e2b351480246076bc9d9d3aeeb38" translate="yes" xml:space="preserve">
          <source>Verifies the connectivity and validity of the objects in the database</source>
          <target state="translated">Проверяет подключение и достоверность объектов в БД.</target>
        </trans-unit>
        <trans-unit id="083f6e6fa7581860cb22a12637eec790f2c234d9" translate="yes" xml:space="preserve">
          <source>Verifies the connectivity and validity of the objects in the database.</source>
          <target state="translated">Проверяет подключение и достоверность объектов в БД.</target>
        </trans-unit>
        <trans-unit id="6f20b572e11a287b2200fc3c18b3124b41ee5e40" translate="yes" xml:space="preserve">
          <source>Verify &amp;lt;ref&amp;gt; against &amp;lt;oldvalue&amp;gt; but do not change it. If &amp;lt;oldvalue&amp;gt; is zero or missing, the ref must not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121ce6e2fb35359b4c456b6cab91a3389a1154d2" translate="yes" xml:space="preserve">
          <source>Verify &amp;lt;ref&amp;gt; against &amp;lt;oldvalue&amp;gt; but do not change it. If &amp;lt;oldvalue&amp;gt; zero or missing, the ref must not exist.</source>
          <target state="translated">Сравните &amp;lt;ref&amp;gt; с &amp;lt;oldvalue&amp;gt;, но не меняйте его. Если &amp;lt;oldvalue&amp;gt; ноль или отсутствует, ссылка не должна существовать.</target>
        </trans-unit>
        <trans-unit id="f2a6ea4dcf4e13700439c2c62eb9c887c3645654" translate="yes" xml:space="preserve">
          <source>Verify that everything reachable from target is fetched. Used after an earlier fetch is interrupted.</source>
          <target state="translated">Убедитесь,что все,до чего можно добраться от цели,получено.Используется после того,как ранняя добыча прервана.</target>
        </trans-unit>
        <trans-unit id="dc19dfe6277cd8889c0ce32fc30714a767c456fd" translate="yes" xml:space="preserve">
          <source>Verify that exactly one parameter is provided, and that it can be turned into a raw 20-byte SHA-1 that can be used to access the object database. If so, emit it to the standard output; otherwise, error out.</source>
          <target state="translated">Убедитесь,что предоставлен ровно один параметр,и что его можно превратить в необработанный 20-байтовый SHA-1,который можно использовать для доступа к объектной базе данных.Если да,то излучите его в стандартный выходной сигнал;в противном случае ошибка будет устранена.</target>
        </trans-unit>
        <trans-unit id="e921c65f691e2b371e3e29dc398bb292612d2860" translate="yes" xml:space="preserve">
          <source>Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.</source>
          <target state="translated">Убедитесь,что фиксация подсказки сливаемой боковой ветки подписана действительным ключом,т.е.ключом,который имеет действительный uid:в модели доверия по умолчанию это означает,что ключ подписи был подписан доверенным ключом.Если фиксация tip-фиса бокового ответвления не подписана действительным ключом,слияние прерывается.</target>
        </trans-unit>
        <trans-unit id="baf3600caf9cbc675ef33fe6c51f69bd006b47ea" translate="yes" xml:space="preserve">
          <source>Verify the GPG signature of the given tag names.</source>
          <target state="translated">Убедитесь,что GPG подпись данных имен тегов.</target>
        </trans-unit>
        <trans-unit id="2977304de3538ddff5d274481548280fa86926b6" translate="yes" xml:space="preserve">
          <source>Verify the MIDX file for the packfiles in the current .git folder.</source>
          <target state="translated">Проверьте MIDX-файл для пакетных файлов в текущей папке .git.</target>
        </trans-unit>
        <trans-unit id="593811a1bcc6cbc445bcfa7fdf52e4a760c41784" translate="yes" xml:space="preserve">
          <source>Verify the contents of the MIDX file.</source>
          <target state="translated">Проверьте содержимое MIDX-файла.</target>
        </trans-unit>
        <trans-unit id="63de76d12bfde7fe2c14402fe2f03160cc3a7318" translate="yes" xml:space="preserve">
          <source>Version 1 porcelain format is similar to the short format, but is guaranteed not to change in a backwards-incompatible way between Git versions or based on user configuration. This makes it ideal for parsing by scripts. The description of the short format above also describes the porcelain format, with a few exceptions:</source>
          <target state="translated">Формат фарфора версии 1 аналогичен короткому,но гарантированно не изменяется в обратном направлении между версиями Git'а или на основе пользовательских настроек.Это делает его идеальным для парсинга по скриптам.Описание короткого формата,приведённое выше,также описывает фарфоровый формат,за некоторыми исключениями:</target>
        </trans-unit>
        <trans-unit id="1bb30898712789d3819631e4bb7ad8cf32d20671" translate="yes" xml:space="preserve">
          <source>Version 1 takes two arguments, a version (1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e409adcd5a97d5085c0477fcb4b42dc9a034a9" translate="yes" xml:space="preserve">
          <source>Version 2 format adds more detailed information about the state of the worktree and changed items. Version 2 also defines an extensible set of easy to parse optional headers.</source>
          <target state="translated">Формат версии 2 добавляет более подробную информацию о состоянии рабочего дерева и измененных элементах.Версия 2 также определяет расширяемый набор удобных для разбора дополнительных заголовков.</target>
        </trans-unit>
        <trans-unit id="2b8063c91f48f5daba279d42a4965f292b8198dd" translate="yes" xml:space="preserve">
          <source>Version 2 pack-*.idx files support packs larger than 4 gib, and</source>
          <target state="translated">Файлы версии 2 pack-*.idx поддерживают пакеты размером более 4 гигабайт,и</target>
        </trans-unit>
        <trans-unit id="76b6cb1496a78fff149bd68b719a91ca0d69c9df" translate="yes" xml:space="preserve">
          <source>Version 2 takes two arguments, a version (2) and a token that is used for identifying changes since the token. For watchman this would be a clock id. This version must output to stdout the new token followed by a NUL before the list of files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a28a75eceea6b3fb1730e69daff64901cead811" translate="yes" xml:space="preserve">
          <source>Version 4 performs a simple pathname compression that reduces index size by 30%-50% on large repositories, which results in faster load time. Version 4 is relatively young (first released in 1.8.0 in October 2012). Other Git implementations such as JGit and libgit2 may not support it yet.</source>
          <target state="translated">Версия 4 выполняет простое сжатие pathname,которое уменьшает размер индекса на 30%-50% на больших репозиториях,что приводит к более быстрой загрузке.Версия 4 относительно молодая (впервые выпущена в 1.8.0 в октябре 2012 года).Другие реализации Git'а,такие как JGit и libgit2,могут его пока не поддерживать.</target>
        </trans-unit>
        <trans-unit id="5b61ffa7c699cf77c98fcf76236048d42ca5d233" translate="yes" xml:space="preserve">
          <source>Version &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">Версия &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fc1164df4f366b4e06ce848f94e3799671648de" translate="yes" xml:space="preserve">
          <source>Version &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">Версия &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26980b77b1e7ef480646032aebce78732551db11" translate="yes" xml:space="preserve">
          <source>Versions of Git older than 1.7.7 don&amp;rsquo;t know about the &lt;code&gt;tar.gz&lt;/code&gt; format, you&amp;rsquo;ll need to use gzip explicitly:</source>
          <target state="translated">Версии Git старше 1.7.7 не знают о формате &lt;code&gt;tar.gz&lt;/code&gt; , вам нужно явно использовать gzip:</target>
        </trans-unit>
        <trans-unit id="48cda44638e8ce2f3c6e764951e4cd137e88bacc" translate="yes" xml:space="preserve">
          <source>Via the alternates mechanism, a &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt; can inherit part of its &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt; from another object database, which is called an &quot;alternate&quot;.</source>
          <target state="translated">С помощью альтернативного механизма &lt;a href=&quot;#def_repository&quot;&gt;репозиторий&lt;/a&gt; может наследовать часть своей &lt;a href=&quot;#def_object_database&quot;&gt;объектной базы данных&lt;/a&gt; от другой объектной базы данных, которая называется &amp;laquo;альтернативной&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="d75bfce3768015c62af9c4bd29fd7cad894764e0" translate="yes" xml:space="preserve">
          <source>Viewing everything that was changed in a revision, and step through revisions one at a time, viewing the history of the repository.</source>
          <target state="translated">Просмотр всего,что было изменено в ревизии,и прохождение ревизий по одной,просмотр истории хранилища.</target>
        </trans-unit>
        <trans-unit id="8e797001d4524362e7db8f18210266901eb28403" translate="yes" xml:space="preserve">
          <source>Viewing files in GUI tools</source>
          <target state="translated">Просмотр файлов в GUI инструментах</target>
        </trans-unit>
        <trans-unit id="05c33ea7de1cccd62a72042e46bec3b3d340cf9f" translate="yes" xml:space="preserve">
          <source>Viewing multiple Git repositories with common root.</source>
          <target state="translated">Просмотр нескольких Git-репозиториев с общим корнем.</target>
        </trans-unit>
        <trans-unit id="1439a80405107c5dd4ca129513bf97eb92ca8c3f" translate="yes" xml:space="preserve">
          <source>Viewing old file versions</source>
          <target state="translated">Просмотр старых версий файлов</target>
        </trans-unit>
        <trans-unit id="cba1ab24737b9af4081eae74baa579853869959f" translate="yes" xml:space="preserve">
          <source>Viewing project history</source>
          <target state="translated">Просмотр истории проекта</target>
        </trans-unit>
        <trans-unit id="48e788f7b4905bc5801452134707bb74e1fddd3c" translate="yes" xml:space="preserve">
          <source>Viewing the blame/annotation details of any file (if enabled).</source>
          <target state="translated">Просмотр информации об авторстве/нотации любого файла (если включено).</target>
        </trans-unit>
        <trans-unit id="afd57038f9956faea3beadae2f663a8f18e1dd6a" translate="yes" xml:space="preserve">
          <source>Viewing the contents of files in the repository at any revision.</source>
          <target state="translated">Просмотр содержимого файлов в хранилище при любой ревизии.</target>
        </trans-unit>
        <trans-unit id="79e8c237bcc343324671ba4de89f13c4632b7437" translate="yes" xml:space="preserve">
          <source>Viewing the revision log of branches, history of files and directories, see what was changed when, by who.</source>
          <target state="translated">Просмотр журнала ревизий ветвей,истории файлов и каталогов,посмотреть,что было изменено когда,кем.</target>
        </trans-unit>
        <trans-unit id="5d3b4279714ad2970a30b9dfdfce1d9cde0d271d" translate="yes" xml:space="preserve">
          <source>Voila.</source>
          <target state="translated">Voila.</target>
        </trans-unit>
        <trans-unit id="f7dda342bfe7129409283096bf9eae6889a3617d" translate="yes" xml:space="preserve">
          <source>Waiting $&amp;lt;int&amp;gt; seconds before reconnecting to SMTP server. Used together with --batch-size option. Defaults to the &lt;code&gt;sendemail.smtpReloginDelay&lt;/code&gt; configuration variable.</source>
          <target state="translated">Ожидание $ &amp;lt;int&amp;gt; секунд перед повторным подключением к SMTP-серверу. Используется вместе с параметром --batch-size. По умолчанию &lt;code&gt;sendemail.smtpReloginDelay&lt;/code&gt; конфигурационная переменная sendemail.smtpReloginDelay .</target>
        </trans-unit>
        <trans-unit id="6abfc589b188840a4520edd8282e2221d54aed84" translate="yes" xml:space="preserve">
          <source>Walk history forward instead of backward. Instead of showing the revision in which a line appeared, this shows the last revision in which a line has existed. This requires a range of revision like START..END where the path to blame exists in START. &lt;code&gt;git blame --reverse START&lt;/code&gt; is taken as &lt;code&gt;git blame
--reverse START..HEAD&lt;/code&gt; for convenience.</source>
          <target state="translated">Идите по истории вперед, а не назад. Вместо того, чтобы показывать ревизию, в которой появилась строка, это показывает последнюю ревизию, в которой существовала строка. Для этого требуется ряд изменений, например START..END, где виновный путь существует в START. &lt;code&gt;git blame --reverse START&lt;/code&gt; для удобства используется как &lt;code&gt;git blame --reverse START..HEAD&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="246770a4db6a59723366cd008c0806351012631a" translate="yes" xml:space="preserve">
          <source>Walk through the patches in the series and warn if we cannot find all of the necessary information to commit a patch. At the time of this writing only missing author information is warned about.</source>
          <target state="translated">Пройдитесь по патчам серии и предупредите,если мы не сможем найти всю необходимую информацию для фиксации патча.На момент написания этой статьи предупреждается только об отсутствующей информации об авторе.</target>
        </trans-unit>
        <trans-unit id="8741434725596a0a6dcba1ea6ce0540165fbeb38" translate="yes" xml:space="preserve">
          <source>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by &lt;code&gt;core.whitespace&lt;/code&gt; configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</source>
          <target state="translated">Предупреждать, если изменения приводят к появлению маркеров конфликта или ошибок пробелов. То, что считается &lt;code&gt;core.whitespace&lt;/code&gt; пробелов, контролируется конфигурацией core.whitespace . По умолчанию завершающие пробелы (включая строки, состоящие исключительно из пробелов) и символ пробела, за которым сразу же следует символ табуляции внутри начального отступа строки, считаются ошибками пробелов. Выход с ненулевым статусом при обнаружении проблем. Не совместим с --exit-code.</target>
        </trans-unit>
        <trans-unit id="d0219dea42624b30174e17cfd1bb37d7d1a042a1" translate="yes" xml:space="preserve">
          <source>Warn of patches that contain lines longer than 998 characters unless a suitable transfer encoding (&lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, or &lt;code&gt;quoted-printable&lt;/code&gt;) is used; this is due to SMTP limits as described by &lt;a href=&quot;http://www.ietf.org/rfc/rfc5322.txt&quot;&gt;http://www.ietf.org/rfc/rfc5322.txt&lt;/a&gt;.</source>
          <target state="translated">Предупреждать о патчах, которые содержат строки длиннее 998 символов, если не используется подходящая кодировка передачи ( &lt;code&gt;auto&lt;/code&gt; , &lt;code&gt;base64&lt;/code&gt; или &lt;code&gt;quoted-printable&lt;/code&gt; ); это связано с ограничениями SMTP, описанными в &lt;a href=&quot;http://www.ietf.org/rfc/rfc5322.txt&quot;&gt;http://www.ietf.org/rfc/rfc5322.txt&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="d9a62a2598117c2be58c53a722de6576cd225a89" translate="yes" xml:space="preserve">
          <source>Warnings are printed on the standard error output for any explicitly unsupported constructs, and any other lines that are not recognized by the parser.</source>
          <target state="translated">Предупреждения выводятся на стандартный вывод ошибок для любых явно неподдерживаемых конструкций,а также для любых других строк,которые не распознаются синтаксическим анализатором.</target>
        </trans-unit>
        <trans-unit id="54490e8680807566a4db5e14166b54af9ee18d68" translate="yes" xml:space="preserve">
          <source>We already saw in &lt;a href=&quot;#understanding-commits&quot;&gt;Understanding History: Commits&lt;/a&gt; that all commits are stored under a 40-digit &quot;object name&quot;. In fact, all the information needed to represent the history of a project is stored in objects with such names. In each case the name is calculated by taking the SHA-1 hash of the contents of the object. The SHA-1 hash is a cryptographic hash function. What that means to us is that it is impossible to find two different objects with the same name. This has a number of advantages; among others:</source>
          <target state="translated">Мы уже видели в &amp;laquo; &lt;a href=&quot;#understanding-commits&quot;&gt;Понимании истории:&lt;/a&gt; коммиты&amp;raquo;, что все коммиты хранятся под 40-значным &amp;laquo;именем объекта&amp;raquo;. Фактически, вся информация, необходимая для представления истории проекта, хранится в объектах с такими именами. В каждом случае имя вычисляется путем взятия хэша SHA-1 содержимого объекта. Хэш SHA-1 - это криптографическая хеш-функция. Для нас это означает, что невозможно найти два разных объекта с одинаковым именем. Это имеет ряд преимуществ; среди прочего:</target>
        </trans-unit>
        <trans-unit id="d6fd523936a98d1231393ad2931c9779a4d79b0e" translate="yes" xml:space="preserve">
          <source>We are looking for a &quot;best&quot; explanation of the new series in terms of the old one. We can represent an &quot;explanation&quot; as an edge in the graph:</source>
          <target state="translated">Мы ищем &quot;лучшее&quot; объяснение новой серии с точки зрения старой.Мы можем представить &quot;объяснение&quot; в виде края на графике:</target>
        </trans-unit>
        <trans-unit id="9b940c15e60e8d5e30f8f0dd6fb317eefa03a3c7" translate="yes" xml:space="preserve">
          <source>We assume that GITWEB_CONFIG has its default Makefile value, namely &lt;code&gt;gitweb_config.perl&lt;/code&gt;. Put the following in &lt;code&gt;gitweb_make_index.perl&lt;/code&gt; file:</source>
          <target state="translated">Мы предполагаем, что GITWEB_CONFIG имеет значение Makefile по умолчанию, а именно &lt;code&gt;gitweb_config.perl&lt;/code&gt; . Поместите в файл &lt;code&gt;gitweb_make_index.perl&lt;/code&gt; следующее :</target>
        </trans-unit>
        <trans-unit id="860f449f084465687d5f3065e9dcdf4471fe0c53" translate="yes" xml:space="preserve">
          <source>We assume the following in /etc/services</source>
          <target state="translated">Мы предполагаем следующее в /etc/services</target>
        </trans-unit>
        <trans-unit id="e666201c4a3affd420bf339541f1e66f556269f5" translate="yes" xml:space="preserve">
          <source>We assume you have already created a Git repository for your project, possibly created from scratch or from a tarball (see &lt;a href=&quot;gittutorial&quot;&gt;gittutorial[7]&lt;/a&gt;), or imported from an already existing CVS repository (see the next section).</source>
          <target state="translated">Мы предполагаем, что вы уже создали репозиторий Git для своего проекта, возможно, созданный с нуля или из &lt;a href=&quot;gittutorial&quot;&gt;архива&lt;/a&gt; (см. Gittutorial [7] ), или импортированный из уже существующего репозитория CVS (см. Следующий раздел).</target>
        </trans-unit>
        <trans-unit id="a35a2d4ac8af99272cba8ca44431c44847ef0735" translate="yes" xml:space="preserve">
          <source>We can also create a tag to refer to a particular commit; after running</source>
          <target state="translated">Мы также можем создать тэг для ссылки на конкретный коммит;после запуска</target>
        </trans-unit>
        <trans-unit id="ec584a188dcd2e25a99263b54f2feb909dc57e99" translate="yes" xml:space="preserve">
          <source>We can ask Git about this particular object with the &lt;code&gt;cat-file&lt;/code&gt; command. Don&amp;rsquo;t copy the 40 hex digits from this example but use those from your own version. Note that you can shorten it to only a few characters to save yourself typing all 40 hex digits:</source>
          <target state="translated">Мы можем спросить Git об этом конкретном объекте с помощью команды &lt;code&gt;cat-file&lt;/code&gt; . Не копируйте 40 шестнадцатеричных цифр из этого примера, используйте их из своей собственной версии. Обратите внимание, что вы можете сократить его до нескольких символов, чтобы не набирать все 40 шестнадцатеричных цифр:</target>
        </trans-unit>
        <trans-unit id="3d0c7ad92eed63e4b86ed7fcdbe0a2af116dc20a" translate="yes" xml:space="preserve">
          <source>We can further investigate the time spent scanning for untracked files.</source>
          <target state="translated">Мы можем дополнительно исследовать время,потраченное на сканирование неотслеживаемых файлов.</target>
        </trans-unit>
        <trans-unit id="14c5f91f2f30d67e424b3d8fa6177783e08a84fd" translate="yes" xml:space="preserve">
          <source>We can get just the branch-head names, and remove &lt;code&gt;master&lt;/code&gt;, with the help of the standard utilities cut and grep:</source>
          <target state="translated">Мы можем получить только имена заголовков веток и удалить &lt;code&gt;master&lt;/code&gt; с помощью стандартных утилит cut и grep:</target>
        </trans-unit>
        <trans-unit id="a00f6027326a1e03d87c7714c37d6396c5fc0f07" translate="yes" xml:space="preserve">
          <source>We can get this using the following command:</source>
          <target state="translated">Мы можем получить это,используя следующую команду:</target>
        </trans-unit>
        <trans-unit id="308213d749ac73498be48acb36aa505b62d477c8" translate="yes" xml:space="preserve">
          <source>We can give this name to &lt;code&gt;git show&lt;/code&gt; to see the details about this commit.</source>
          <target state="translated">Мы можем дать это имя команде &lt;code&gt;git show&lt;/code&gt; , чтобы увидеть подробности об этой фиксации.</target>
        </trans-unit>
        <trans-unit id="164a7b582707458e7c29a45bdd3cb932a29b3ca1" translate="yes" xml:space="preserve">
          <source>We can list all the heads in this repository with &lt;a href=&quot;git-show-ref&quot;&gt;git-show-ref[1]&lt;/a&gt;:</source>
          <target state="translated">Мы можем перечислить все головы в этом репозитории с помощью &lt;a href=&quot;git-show-ref&quot;&gt;git-show-ref [1]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="3342879e047ae36a38db13969064b38d54ccc902" translate="yes" xml:space="preserve">
          <source>We divide Git into high level (&quot;porcelain&quot;) commands and low level (&quot;plumbing&quot;) commands.</source>
          <target state="translated">Мы разделяем Git на команды высокого уровня (&quot;фарфор&quot;)и низкого уровня (&quot;водопровод&quot;).</target>
        </trans-unit>
        <trans-unit id="011f9d254149abd4e25f111f5f8f2bc847e7e4cc" translate="yes" xml:space="preserve">
          <source>We explain how to do this in the following sections.</source>
          <target state="translated">Мы объясним,как это сделать,в следующих разделах.</target>
        </trans-unit>
        <trans-unit id="4822ab43c46db1b5802e2f53899245649e4398bd" translate="yes" xml:space="preserve">
          <source>We formulate a set of &lt;code&gt;rules&lt;/code&gt; for quick reference, while the prose tries to motivate each of them. Do not always take them literally; you should value good reasons for your actions higher than manpages such as this one.</source>
          <target state="translated">Сформулируем свод &lt;code&gt;rules&lt;/code&gt; для быстрого ознакомления, при этом проза пытается мотивировать каждое из них. Не всегда воспринимайте их буквально; вам следует ценить веские причины для своих действий выше, чем такие страницы руководства, как эта.</target>
        </trans-unit>
        <trans-unit id="27af85d69b0e1da45afccff7b9c2331995331c55" translate="yes" xml:space="preserve">
          <source>We found that most commits on the graph may give quite a lot of information when they are tested. And the commits that will not on average give a lot of information are the one near the good and bad commits.</source>
          <target state="translated">Мы обнаружили,что большинство коммитов на графике могут дать довольно много информации при тестировании.А коммиты,которые в среднем не дают много информации,находятся рядом с хорошими и плохими коммитами.</target>
        </trans-unit>
        <trans-unit id="319c4fde5f53d3ebfff60d2ca81633ff5c5e7332" translate="yes" xml:space="preserve">
          <source>We have already seen &lt;a href=&quot;#Updating-a-repository-With-git-fetch&quot;&gt;how to keep remote-tracking branches up to date&lt;/a&gt; with &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;, and how to merge two branches. So you can merge in changes from the original repository&amp;rsquo;s master branch with:</source>
          <target state="translated">Мы уже видели, &lt;a href=&quot;#Updating-a-repository-With-git-fetch&quot;&gt;как обновлять ветки удаленного отслеживания&lt;/a&gt; с помощью &lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt; и как объединить две ветки. Таким образом, вы можете объединить изменения из основной ветки исходного репозитория с помощью:</target>
        </trans-unit>
        <trans-unit id="9313b2be3fe8f9ef5431fd57e740ed2c389d7c2c" translate="yes" xml:space="preserve">
          <source>We have already seen how branches work previously, with &quot;fun and work&quot; example using two branches. The idea is the same if there are more than two branches. Let&amp;rsquo;s say you started out from &quot;master&quot; head, and have some new code in the &quot;master&quot; branch, and two independent fixes in the &quot;commit-fix&quot; and &quot;diff-fix&quot; branches:</source>
          <target state="translated">Мы уже видели, как работают ветки ранее, на примере &amp;laquo;весело и поработай&amp;raquo; с использованием двух веток. Идея такая же, если веток больше двух. Предположим, вы начали с &amp;laquo;master&amp;raquo;, и у вас есть новый код в &amp;laquo;master&amp;raquo; ветке и два независимых исправления в ветвях &amp;laquo;commit-fix&amp;raquo; и &amp;laquo;diff-fix&amp;raquo;:</target>
        </trans-unit>
        <trans-unit id="1170354586d8db2806a89632eb01397ff1d5b39a" translate="yes" xml:space="preserve">
          <source>We have seen several ways of naming commits already:</source>
          <target state="translated">Мы уже видели несколько способов именования коммитов:</target>
        </trans-unit>
        <trans-unit id="ea2d131015439270646c4d9deb94b3238eec4d65" translate="yes" xml:space="preserve">
          <source>We have seen that regressions are an important problem, and that &quot;git bisect&quot; has nice features that complement very well practices and other tools, especially test suites, that are generally used to fight regressions. But it might be needed to change some work-flows and (bad) habits to get the most out of it.</source>
          <target state="translated">Мы видели,что регрессии являются важной проблемой,и что &quot;гит-бисект&quot; имеет хорошие характеристики,которые дополняют очень хорошие практики и другие инструменты,особенно тестовые наборы,которые обычно используются для борьбы с регрессиями.Но,возможно,потребуется изменить некоторые рабочие процессы и (плохие)привычки,чтобы получить от этого максимум пользы.</target>
        </trans-unit>
        <trans-unit id="58d71328c844eab6bb246a8885f29a926cbaf29b" translate="yes" xml:space="preserve">
          <source>We have seen that test suites and git bisect are very powerful when used together. It can be even more powerful if you can combine them with other systems.</source>
          <target state="translated">Мы видели,что тестовые наборы и гит-бисект очень мощны при совместном использовании.Он может быть еще более мощным,если вы сможете комбинировать их с другими системами.</target>
        </trans-unit>
        <trans-unit id="0dc1429b571e4014b12f464201faf90142f01343" translate="yes" xml:space="preserve">
          <source>We ignore all SVN properties except svn:executable. Any unhandled properties are logged to $GIT_DIR/svn/&amp;lt;refname&amp;gt;/unhandled.log</source>
          <target state="translated">Мы игнорируем все свойства SVN, кроме svn: executable. Любые необработанные свойства регистрируются в $ GIT_DIR / svn / &amp;lt;refname&amp;gt; /unhandled.log</target>
        </trans-unit>
        <trans-unit id="5e0e70c2a550cebe0f64341bc25aba4f82846837" translate="yes" xml:space="preserve">
          <source>We said this tutorial shows what plumbing does to help you cope with the porcelain that isn&amp;rsquo;t flushing, but we so far did not talk about how the merge really works. If you are following this tutorial the first time, I&amp;rsquo;d suggest to skip to &quot;Publishing your work&quot; section and come back here later.</source>
          <target state="translated">Мы сказали, что в этом руководстве показано, что делает сантехника, чтобы помочь вам справиться с фарфором, который не смывается, но мы пока не говорили о том, как на самом деле работает слияние. Если вы следуете этому руководству в первый раз, я бы посоветовал пропустить раздел &amp;laquo;Публикация вашей работы&amp;raquo; и вернуться сюда позже.</target>
        </trans-unit>
        <trans-unit id="038e0426e816e440e5c183b0ccfae9faca0c65b5" translate="yes" xml:space="preserve">
          <source>We saw above that &lt;code&gt;origin&lt;/code&gt; is just a shortcut to refer to the repository that you originally cloned from. This information is stored in Git configuration variables, which you can see using &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;:</source>
          <target state="translated">Выше мы видели, что &lt;code&gt;origin&lt;/code&gt; - это просто ярлык для ссылки на репозиторий, из которого вы изначально клонировали. Эта информация хранится в переменных конфигурации Git, которые вы можете увидеть с помощью &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="789eeb5f51968bf21d9746b92623ca08838d8bcb" translate="yes" xml:space="preserve">
          <source>We saw earlier that &quot;git bisect skip&quot; is now using a PRNG to try to avoid areas in the commit graph where commits are untestable. The problem is that sometimes the first bad commit will be in an untestable area.</source>
          <target state="translated">Ранее мы видели,что &quot;git-бисектный пропуск&quot; теперь использует PRNG,чтобы попытаться избежать областей в графе коммитов,где коммиты неоспоримы.Проблема в том,что иногда первый плохой коммит будет в непроверяемой области.</target>
        </trans-unit>
        <trans-unit id="e6f53989efc34bb4d6e54dcd09f15943b6a8a36c" translate="yes" xml:space="preserve">
          <source>We saw in &lt;a href=&quot;#conflict-resolution&quot;&gt;Getting conflict-resolution help during a merge&lt;/a&gt; that during a merge the index can store multiple versions of a single file (called &quot;stages&quot;). The third column in the &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files[1]&lt;/a&gt; output above is the stage number, and will take on values other than 0 for files with merge conflicts.</source>
          <target state="translated">В разделе &amp;laquo; &lt;a href=&quot;#conflict-resolution&quot;&gt;Получение справки по разрешению конфликтов во время слияния&amp;raquo;&lt;/a&gt; мы видели, что во время слияния индекс может хранить несколько версий одного файла (так называемые &amp;laquo;стадии&amp;raquo;). Третий столбец в выходных данных &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files [1]&lt;/a&gt; выше - это номер стадии, и он будет принимать значения, отличные от 0 для файлов с конфликтами слияния.</target>
        </trans-unit>
        <trans-unit id="d5d682276e6a6d081a241de022b4ded4aef9c418" translate="yes" xml:space="preserve">
          <source>We saw in &lt;a href=&quot;#fixing-a-mistake-by-rewriting-history&quot;&gt;Fixing a mistake by rewriting history&lt;/a&gt; that you can replace the most recent commit using</source>
          <target state="translated">В разделе &amp;laquo; &lt;a href=&quot;#fixing-a-mistake-by-rewriting-history&quot;&gt;Исправление ошибки путем переписывания истории&amp;raquo;&lt;/a&gt; мы видели, что вы можете заменить самую последнюю фиксацию, используя</target>
        </trans-unit>
        <trans-unit id="aafdc07c8e0d9b297fcdd505608f380ef754ed45" translate="yes" xml:space="preserve">
          <source>We saw in part one of the tutorial that commits have names like this. It turns out that every object in the Git history is stored under a 40-digit hex name. That name is the SHA-1 hash of the object&amp;rsquo;s contents; among other things, this ensures that Git will never store the same data twice (since identical data is given an identical SHA-1 name), and that the contents of a Git object will never change (since that would change the object&amp;rsquo;s name as well). The 7 char hex strings here are simply the abbreviation of such 40 character long strings. Abbreviations can be used everywhere where the 40 character strings can be used, so long as they are unambiguous.</source>
          <target state="translated">В первой части руководства мы видели, что коммиты имеют такие имена. Оказывается, каждый объект в истории Git хранится под 40-значным шестнадцатеричным именем. Это имя - хэш SHA-1 содержимого объекта; среди прочего, это гарантирует, что Git никогда не будет хранить одни и те же данные дважды (поскольку идентичным данным дается идентичное имя SHA-1), и что содержимое объекта Git никогда не изменится (поскольку это также изменит имя объекта ). Шестнадцатеричные строки из 7 символов здесь - это просто аббревиатура таких строк длиной 40 символов. Аббревиатуры можно использовать везде, где можно использовать строки из 40 символов, при условии, что они недвусмысленны.</target>
        </trans-unit>
        <trans-unit id="09c046487d09b436218fe11aa8c1087251442281" translate="yes" xml:space="preserve">
          <source>We separate the porcelain commands into the main commands and some ancillary user utilities.</source>
          <target state="translated">Мы разделяем команды фарфора на основные команды и некоторые вспомогательные пользовательские утилиты.</target>
        </trans-unit>
        <trans-unit id="f2e875357a5ce85901234308b841a3138ebd851b" translate="yes" xml:space="preserve">
          <source>We should point out that &quot;habitually&quot; (regularly for no real reason) merging an integration branch into your topics &amp;mdash; and by extension, merging anything upstream into anything downstream on a regular basis &amp;mdash; is frowned upon:</source>
          <target state="translated">Мы должны отметить, что &amp;laquo;обычное&amp;raquo; (регулярно без реальной причины) слияние ветки интеграции с вашими темами - и, в более широком смысле, слияние чего-либо восходящего потока с чем-либо нисходящим на регулярной основе - не одобряется:</target>
        </trans-unit>
        <trans-unit id="3b0c2056ade966758c96efbd333ad03c787ca3ac" translate="yes" xml:space="preserve">
          <source>We start with one specialized tool that is useful for finding the commit that introduced a bug into a project.</source>
          <target state="translated">Мы начинаем с одного специализированного инструмента,который полезен для поиска коммита,который ввёл ошибку в проект.</target>
        </trans-unit>
        <trans-unit id="3bb7fbe62fd9b3fa1a7f67f6a431251fe7b02079" translate="yes" xml:space="preserve">
          <source>We start with the most important, the &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt; and the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">Начнем с самого важного - &lt;a href=&quot;#def_object_database&quot;&gt;объектной базы данных&lt;/a&gt; и &lt;a href=&quot;#def_index&quot;&gt;индекса&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fa1acdd625946113b786a5983b045431892f2e96" translate="yes" xml:space="preserve">
          <source>We supposed in the previous examples that the &quot;good&quot; commits were ancestors of the &quot;bad&quot; commit. But this is not a requirement of &quot;git bisect&quot;.</source>
          <target state="translated">В предыдущих примерах мы предполагали,что &quot;хорошие&quot; коммиты являются предками &quot;плохих&quot; коммитов.Но это не является требованием &quot;git-бисекта&quot;.</target>
        </trans-unit>
        <trans-unit id="09e675bfb62532c536d372645ebddf19b07c5684" translate="yes" xml:space="preserve">
          <source>We want to make &lt;code&gt;topic&lt;/code&gt; forked from branch &lt;code&gt;master&lt;/code&gt;; for example, because the functionality on which &lt;code&gt;topic&lt;/code&gt; depends was merged into the more stable &lt;code&gt;master&lt;/code&gt; branch. We want our tree to look like this:</source>
          <target state="translated">Мы хотим, чтобы &lt;code&gt;topic&lt;/code&gt; разветвлена ​​от &lt;code&gt;master&lt;/code&gt; ветки ; например, потому что функциональность, от которой зависит &lt;code&gt;topic&lt;/code&gt; была объединена в более стабильную &lt;code&gt;master&lt;/code&gt; ветку. Мы хотим, чтобы наше дерево выглядело так:</target>
        </trans-unit>
        <trans-unit id="0fa006b18282abd83f954d3423dfd83f70f68c0d" translate="yes" xml:space="preserve">
          <source>We will introduce some tools that can help you do this, explain how to use them, and then explain some of the problems that can arise because you are rewriting history.</source>
          <target state="translated">Мы познакомим вас с некоторыми инструментами,которые могут помочь вам в этом,объясним,как ими пользоваться,а затем объясним некоторые проблемы,которые могут возникнуть из-за того,что вы переписываете историю.</target>
        </trans-unit>
        <trans-unit id="e34d86d215639adac5ecaa74d7f70d803a2ef9de" translate="yes" xml:space="preserve">
          <source>We will sometimes represent Git history using diagrams like the one below. Commits are shown as &quot;o&quot;, and the links between them with lines drawn with - / and \. Time goes left to right:</source>
          <target state="translated">Иногда мы будем представлять историю Git'а,используя диаграммы,подобные приведённым ниже.Коммиты отображаются как &quot;o&quot;,а ссылки между ними с линиями,нарисованными с помощью-/и \.Время идет слева направо:</target>
        </trans-unit>
        <trans-unit id="ab9fd84ced67b4e6059fb12091ba4144199c5397" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll assume that the problem is a single missing or corrupted blob, which is sometimes a solvable problem. (Recovering missing trees and especially commits is &lt;strong&gt;much&lt;/strong&gt; harder).</source>
          <target state="translated">Мы предполагаем, что проблема заключается в единственном отсутствующем или поврежденном большом двоичном объекте, что иногда является решаемой проблемой. (Восстановить пропавшие деревья и особенно коммиты &lt;strong&gt;намного&lt;/strong&gt; сложнее).</target>
        </trans-unit>
        <trans-unit id="2aa7b1ec194976812ce4b6b3f7e0ba34eba549a8" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll keep this simple and stupid, so we&amp;rsquo;ll start off with populating a few trivial files just to get a feel for it.</source>
          <target state="translated">Мы будем делать это просто и глупо, поэтому начнем с заполнения нескольких тривиальных файлов, чтобы просто почувствовать это.</target>
        </trans-unit>
        <trans-unit id="2d4db37414a68811cd95f44af4830929ada62273" translate="yes" xml:space="preserve">
          <source>Webserver configuration</source>
          <target state="translated">настройка веб-портала</target>
        </trans-unit>
        <trans-unit id="c0f36d74c982d11ffbdfaa17b6ab39308ec52a2f" translate="yes" xml:space="preserve">
          <source>Webserver configuration with multiple projects' root</source>
          <target state="translated">Конфигурация сервера с корнем из нескольких проектов</target>
        </trans-unit>
        <trans-unit id="ef6d4f2b2672206d0b50ce512c5b9cc1369fe95f" translate="yes" xml:space="preserve">
          <source>What an alias file in each format looks like can be found in the documentation of the email program of the same name. The differences and limitations from the standard formats are described below:</source>
          <target state="translated">Как выглядит файл псевдонима в каждом формате можно найти в документации одноименной почтовой программы.Различия и ограничения стандартных форматов описаны ниже:</target>
        </trans-unit>
        <trans-unit id="fa6325f935566c907b8b84855ddf6b390a1827e3" translate="yes" xml:space="preserve">
          <source>What are the 7 digits of hex that Git responded to the commit with?</source>
          <target state="translated">Каковы 7 цифр гексагона,которыми Git ответил на обязательство?</target>
        </trans-unit>
        <trans-unit id="5fb651419665147da76edfca56099f33ccd0e645" translate="yes" xml:space="preserve">
          <source>What does this mean?</source>
          <target state="translated">Что это значит?</target>
        </trans-unit>
        <trans-unit id="b77fdbd3385bc488b50aa891b5b4c124304a8f69" translate="yes" xml:space="preserve">
          <source>What is interesting too is that end users that are reporting bugs (or QA people that reproduced a bug) have access to the environment where the bug happens. So they can often more easily reproduce a regression. And if they can bisect, then more information will be extracted from the environment where the bug happens, which means that it will be easier to understand and then fix the bug.</source>
          <target state="translated">Интересно также то,что конечные пользователи,сообщающие об ошибках (или QA-специалисты,которые воспроизвели ошибку),имеют доступ к окружению,в котором происходит ошибка.Так что часто они могут легче воспроизвести регрессию.А если они могут бисектировать,то из окружения,в котором происходит ошибка,будет извлечено больше информации,что означает,что её будет легче понять,а затем исправить.</target>
        </trans-unit>
        <trans-unit id="549056214cd4b23720c4559829b5b36cc5cf6d0c" translate="yes" xml:space="preserve">
          <source>What next?</source>
          <target state="translated">Что дальше?</target>
        </trans-unit>
        <trans-unit id="fe77441e9cc191fb4a5181d6f98e51e7bf6ce4ab" translate="yes" xml:space="preserve">
          <source>What people don&amp;rsquo;t get is that this is a situation where the &quot;end node principle&quot; applies. When you have limited resources (here: developers) you don&amp;rsquo;t push the bulk of the burden upon them. Instead you push things out to the resource you have a lot of, the end nodes (here: users), so that the situation actually scales.</source>
          <target state="translated">Люди не понимают, что это ситуация, в которой применяется &amp;laquo;принцип конечного узла&amp;raquo;. Когда у вас ограниченные ресурсы (здесь: разработчики), вы не перекладываете на них основную нагрузку. Вместо этого вы отправляете вещи на ресурс, которого у вас много, на конечные узлы (здесь: пользователи), так что ситуация действительно масштабируется.</target>
        </trans-unit>
        <trans-unit id="e4950cd435094a3f200db11a5c1b540d80d04769" translate="yes" xml:space="preserve">
          <source>What should you do when you tag a wrong commit and you would want to re-tag?</source>
          <target state="translated">Что делать,если вы пометили неверный коммит и хотели бы повторно пометить?</target>
        </trans-unit>
        <trans-unit id="049920ec0574fb80b08ccee259e5814b007cd44c" translate="yes" xml:space="preserve">
          <source>What the -p option produces is slightly different from the traditional diff format:</source>
          <target state="translated">То,что производит опция -p,несколько отличается от традиционного формата diff:</target>
        </trans-unit>
        <trans-unit id="e27b60d4391d6c41de480e30a2d0df50a6723ae8" translate="yes" xml:space="preserve">
          <source>What to do when a push fails</source>
          <target state="translated">Что делать,если толчок не удается.</target>
        </trans-unit>
        <trans-unit id="42a1dbf4390cedcf2f183fba444335bae8d5ae11" translate="yes" xml:space="preserve">
          <source>What you chose are then highlighted with &lt;code&gt;*&lt;/code&gt;, like this:</source>
          <target state="translated">То, что вы выбрали, затем выделяется &lt;code&gt;*&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="e11a716b5dc9d27d9966b39b2c63b32b4c67e627" translate="yes" xml:space="preserve">
          <source>When &amp;lt;rev&amp;gt; is not specified, the command annotates the changes starting backwards from the working tree copy. This flag makes the command pretend as if the working tree copy has the contents of the named file (specify &lt;code&gt;-&lt;/code&gt; to make the command read from the standard input).</source>
          <target state="translated">Если &amp;lt;rev&amp;gt; не указан, команда аннотирует изменения, начиная с копии рабочего дерева в обратном направлении. Этот флаг заставляет команду делать вид, что копия рабочего дерева имеет содержимое указанного файла (укажите &lt;code&gt;-&lt;/code&gt; чтобы команда считывалась из стандартного ввода).</target>
        </trans-unit>
        <trans-unit id="df8212af8d2323e7260f5fa3c4bc0bbc714643ff" translate="yes" xml:space="preserve">
          <source>When --fork-point is active, &lt;code&gt;fork_point&lt;/code&gt; will be used instead of &amp;lt;upstream&amp;gt; to calculate the set of commits to rebase, where &lt;code&gt;fork_point&lt;/code&gt; is the result of &lt;code&gt;git merge-base --fork-point &amp;lt;upstream&amp;gt;
&amp;lt;branch&amp;gt;&lt;/code&gt; command (see &lt;a href=&quot;git-merge-base&quot;&gt;git-merge-base[1]&lt;/a&gt;). If &lt;code&gt;fork_point&lt;/code&gt; ends up being empty, the &amp;lt;upstream&amp;gt; will be used as a fallback.</source>
          <target state="translated">Когда --fork-point активен, &lt;code&gt;fork_point&lt;/code&gt; будет использоваться вместо &amp;lt;upstream&amp;gt; для вычисления набора &lt;code&gt;fork_point&lt;/code&gt; для перебазирования, где fork_point является результатом &lt;code&gt;git merge-base --fork-point &amp;lt;upstream&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt; command ( см. &lt;a href=&quot;git-merge-base&quot;&gt;git-merge-base [1]&lt;/a&gt; ). Если &lt;code&gt;fork_point&lt;/code&gt; окажется пустым, &amp;lt;upstream&amp;gt; будет использоваться в качестве запасного варианта.</target>
        </trans-unit>
        <trans-unit id="0b903c4e9a3738f389f65549fe23dcd21fd8909d" translate="yes" xml:space="preserve">
          <source>When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If &lt;code&gt;&amp;lt;barrier&amp;gt;&lt;/code&gt; is specified, it is the string that will be shown instead of the default one.</source>
          <target state="translated">Когда --graph не используется, все ветки истории сглаживаются, что может затруднить понимание того, что две последовательные фиксации не принадлежат линейной ветви. В этом случае этот вариант ставит между ними барьер. Если указан &lt;code&gt;&amp;lt;barrier&amp;gt;&lt;/code&gt; , вместо строки по умолчанию будет отображаться строка.</target>
        </trans-unit>
        <trans-unit id="24ff3c267435a7dcecd3166ed52f8210a7c7f0de" translate="yes" xml:space="preserve">
          <source>When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase. The reason is that in some cases the output stream is directly linked to another command which may wish to display progress status of its own as it processes incoming pack data. This flag is like --progress except that it forces progress report for the write-out phase as well even if --stdout is used.</source>
          <target state="translated">При указании --stdout отчет о ходе работы отображается на фазе подсчета и сжатия объектов,но блокируется на фазе записи.Причина в том,что в некоторых случаях выходной поток напрямую связан с другой командой,которая может захотеть отобразить свой статус прогресса при обработке входящих данных пакета.Этот флаг похож на --progress за исключением того,что он заставляет выводить отчет о прогрессе и на фазу записи,даже если используется --stdout.</target>
        </trans-unit>
        <trans-unit id="d3e80ca53bd7d57db503ac84208eff0dbe6d901f" translate="yes" xml:space="preserve">
          <source>When -k is not in effect, all leading strings bracketed with &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; pairs are stripped. This option limits the stripping to only the pairs whose bracketed string contains the word &quot;PATCH&quot;.</source>
          <target state="translated">Когда -k не действует, все начальные строки, заключенные в квадратные скобки парами &lt;code&gt;[&lt;/code&gt; и &lt;code&gt;]&lt;/code&gt; , удаляются. Эта опция ограничивает удаление только парами, строка в квадратных скобках которых содержит слово &amp;laquo;PATCH&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="882475218cb0a9fc17e76a3d4266386adec5dd71" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&quot;$@&quot;&lt;/code&gt; is &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; in the above example, the following usage text would be shown:</source>
          <target state="translated">Когда &lt;code&gt;&quot;$@&quot;&lt;/code&gt; в приведенном выше примере равно &lt;code&gt;-h&lt;/code&gt; или &lt;code&gt;--help&lt;/code&gt; , будет показан следующий текст использования:</target>
        </trans-unit>
        <trans-unit id="d78a0cbb0812363470a0c64a4a94d40dd1da90bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--batch-all-objects&lt;/code&gt; is in use, visit objects in an order which may be more efficient for accessing the object contents than hash order. The exact details of the order are unspecified, but if you do not require a specific order, this should generally result in faster output, especially with &lt;code&gt;--batch&lt;/code&gt;. Note that &lt;code&gt;cat-file&lt;/code&gt; will still show each object only once, even if it is stored multiple times in the repository.</source>
          <target state="translated">Когда используется &lt;code&gt;--batch-all-objects&lt;/code&gt; , посещайте объекты в порядке, который может быть более эффективным для доступа к содержимому объекта, чем порядок хеширования. Точные детали заказа не указаны, но если вам не нужен конкретный порядок, это обычно должно привести к более быстрому выводу, особенно с &lt;code&gt;--batch&lt;/code&gt; . Обратите внимание, что в &lt;code&gt;cat-file&lt;/code&gt; каждый объект по-прежнему будет отображаться только один раз, даже если он хранится в репозитории несколько раз.</target>
        </trans-unit>
        <trans-unit id="95919047a579b82415a0ddd6c6f601bfbb7dc80f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--check&lt;/code&gt; is in effect, or when applying the patch (which is the default when none of the options that disables it is in effect), make sure the patch is applicable to what the current index file records. If the file to be patched in the working tree is not up to date, it is flagged as an error. This flag also causes the index file to be updated.</source>
          <target state="translated">Когда &lt;code&gt;--check&lt;/code&gt; или когда применяется патч (который используется по умолчанию, когда не действует ни одна из отключающих его опций), убедитесь, что патч применим к тому, что записывает текущий индексный файл. Если файл, который нужно исправить в рабочем дереве, устарел, он помечается как ошибка. Этот флаг также вызывает обновление индексного файла.</target>
        </trans-unit>
        <trans-unit id="526cf7ed548b3415806841ff6b0e065a944a8f5e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--compose&lt;/code&gt; is used, git send-email will use the From, Subject, and In-Reply-To headers specified in the message. If the body of the message (what you type after the headers and a blank line) only contains blank (or Git: prefixed) lines, the summary won&amp;rsquo;t be sent, but From, Subject, and In-Reply-To headers will be used unless they are removed.</source>
          <target state="translated">Когда используется &lt;code&gt;--compose&lt;/code&gt; , git send-email будет использовать заголовки From, Subject и In-Reply-To, указанные в сообщении. Если тело сообщения (то, что вы вводите после заголовков и пустую строку) содержит только пустые (или с префиксом Git:) строки, сводка не будет отправлена, но заголовки From, Subject и In-Reply-To будут использоваться до тех пор, пока они не будут удалены.</target>
        </trans-unit>
        <trans-unit id="46dc43993fdd7156fca21e87a205fc0f333f2d9a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--cone&lt;/code&gt; is provided, the &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; setting is also set, allowing for better performance with a limited set of patterns (see &lt;code&gt;CONE PATTERN SET&lt;/code&gt; below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6d168ca5e25a70ab78d5a850025a2ad07d998b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--exclude&lt;/code&gt; and &lt;code&gt;--include&lt;/code&gt; patterns are used, they are examined in the order they appear on the command line, and the first match determines if a patch to each path is used. A patch to a path that does not match any include/exclude pattern is used by default if there is no include pattern on the command line, and ignored if there is any include pattern.</source>
          <target state="translated">Когда используются шаблоны &lt;code&gt;--exclude&lt;/code&gt; и &lt;code&gt;--include&lt;/code&gt; , они проверяются в том порядке, в котором они появляются в командной строке, и первое совпадение определяет, используется ли патч для каждого пути. Патч к пути, который не соответствует какому-либо шаблону включения / исключения, используется по умолчанию, если в командной строке нет шаблона включения, и игнорируется, если есть какой-либо шаблон включения.</target>
        </trans-unit>
        <trans-unit id="febfb7b902fc970c3396f3068a5c66e59c7ec8ea" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--notes&lt;/code&gt; is in effect, the message from the notes is matched as if it were part of the log message.</source>
          <target state="translated">Когда &lt;code&gt;--notes&lt;/code&gt; , сообщение из заметок сопоставляется, как если бы оно было частью сообщения журнала.</target>
        </trans-unit>
        <trans-unit id="b84c74a91c715b3bf1b4e927529a07a15aed9721" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--numstat&lt;/code&gt; has been given, do not munge pathnames, but use a NUL-terminated machine-readable format.</source>
          <target state="translated">Если &lt;code&gt;--numstat&lt;/code&gt; , не изменяйте пути к файлам, а используйте машиночитаемый формат с завершающим нулем.</target>
        </trans-unit>
        <trans-unit id="d371e700585c518084c33d84fef0af43b13c3439" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt; or &lt;code&gt;--name-status&lt;/code&gt; has been given, do not munge pathnames and use NULs as output field terminators.</source>
          <target state="translated">Когда &lt;code&gt;--raw&lt;/code&gt; , &lt;code&gt;--numstat&lt;/code&gt; , &lt;code&gt;--name-only&lt;/code&gt; или &lt;code&gt;--name-status&lt;/code&gt; , не меняйте пути и используйте NUL в качестве ограничителей выходных полей.</target>
        </trans-unit>
        <trans-unit id="e163d548a1a886a531d60736c2ba3e851388a10a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--root&lt;/code&gt; is specified the initial commit will be shown as a big creation event. This is equivalent to a diff against the NULL tree.</source>
          <target state="translated">Когда &lt;code&gt;--root&lt;/code&gt; , начальная фиксация будет отображаться как большое событие создания. Это эквивалентно сравнению с деревом NULL.</target>
        </trans-unit>
        <trans-unit id="8183759ad974b12070a46362dbaa27565534e645" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--show-pulls&lt;/code&gt; is paired with &lt;code&gt;--simplify-merges&lt;/code&gt;, the graph includes all of the necessary information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b88ba2b22685842fbd9b8b75fb2959da8ea9e8b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--stdin&lt;/code&gt; is specified, the command does not take &amp;lt;tree-ish&amp;gt; arguments from the command line. Instead, it reads lines containing either two &amp;lt;tree&amp;gt;, one &amp;lt;commit&amp;gt;, or a list of &amp;lt;commit&amp;gt; from its standard input. (Use a single space as separator.)</source>
          <target state="translated">Когда &lt;code&gt;--stdin&lt;/code&gt; , команда не принимает аргументы &amp;lt;tree-ish&amp;gt; из командной строки. Вместо этого он считывает строки, содержащие два &amp;lt;tree&amp;gt;, один &amp;lt;commit&amp;gt; или список &amp;lt;commit&amp;gt; со стандартного ввода. (Используйте один пробел в качестве разделителя.)</target>
        </trans-unit>
        <trans-unit id="c23ac888d8fe422c1532e2aed10782043e7c6859" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--temp&lt;/code&gt; is used (or implied by &lt;code&gt;--stage=all&lt;/code&gt;) &lt;code&gt;git checkout-index&lt;/code&gt; will create a temporary file for each index entry being checked out. The index will not be updated with stat information. These options can be useful if the caller needs all stages of all unmerged entries so that the unmerged files can be processed by an external merge tool.</source>
          <target state="translated">Когда используется &lt;code&gt;--temp&lt;/code&gt; (или подразумевается &lt;code&gt;--stage=all&lt;/code&gt; ) &lt;code&gt;git checkout-index&lt;/code&gt; будет создавать временный файл для каждой извлекаемой записи индекса. Индекс не будет обновляться статистической информацией. Эти параметры могут быть полезны, если вызывающей стороне нужны все этапы всех несвязанных записей, чтобы необработанные файлы могли быть обработаны внешним инструментом слияния.</target>
        </trans-unit>
        <trans-unit id="5c97ac9560dda79ead627bde39274f79b6e5dd8a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;-G&lt;/code&gt; are used without &lt;code&gt;--pickaxe-all&lt;/code&gt;, only filepairs that match their respective criterion are kept in the output. When &lt;code&gt;--pickaxe-all&lt;/code&gt; is used, if even one filepair matches their respective criterion in a changeset, the entire changeset is kept. This behavior is designed to make reviewing changes in the context of the whole changeset easier.</source>
          <target state="translated">Когда &lt;code&gt;-S&lt;/code&gt; или &lt;code&gt;-G&lt;/code&gt; используются без &lt;code&gt;--pickaxe-all&lt;/code&gt; , в выходных данных сохраняются только файловые пары, соответствующие их критериям. При использовании &lt;code&gt;--pickaxe-all&lt;/code&gt; , если хотя бы одна файловая пара соответствует соответствующему критерию в наборе изменений, сохраняется весь набор изменений. Такое поведение разработано, чтобы упростить просмотр изменений в контексте всего набора изменений.</target>
        </trans-unit>
        <trans-unit id="b7230470efbcbdb8b4c76cdcdcf3272fde68030f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;-G&lt;/code&gt; finds a change, show all the changes in that changeset, not just the files that contain the change in &amp;lt;string&amp;gt;.</source>
          <target state="translated">Когда &lt;code&gt;-S&lt;/code&gt; или &lt;code&gt;-G&lt;/code&gt; находят изменение, отображать все изменения в этом наборе изменений, а не только файлы, содержащие изменение в &amp;lt;string&amp;gt;.</target>
        </trans-unit>
        <trans-unit id="b52ce403c26e2631158c50ee6bd3c17065ed82dc" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-u&lt;/code&gt; option is not used, untracked files and directories are shown (i.e. the same as specifying &lt;code&gt;normal&lt;/code&gt;), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see &lt;code&gt;git update-index --untracked-cache&lt;/code&gt; and &lt;code&gt;git update-index
--split-index&lt;/code&gt;), Otherwise you can use &lt;code&gt;no&lt;/code&gt; to have &lt;code&gt;git status&lt;/code&gt; return more quickly without showing untracked files.</source>
          <target state="translated">Когда опция &lt;code&gt;-u&lt;/code&gt; не используется, отображаются неотслеживаемые файлы и каталоги (то есть такие же, как при указании &lt;code&gt;normal&lt;/code&gt; ), чтобы вы не забыли добавить вновь созданные файлы. Поскольку поиск неотслеживаемых файлов в файловой системе требует дополнительной работы, этот режим может занять некоторое время в большом рабочем дереве. Рассмотрите возможность включения неотслеживаемого кеша и разделенного индекса, если он поддерживается (см. &lt;code&gt;git update-index --untracked-cache&lt;/code&gt; и &lt;code&gt;git update-index --split-index&lt;/code&gt; ). В противном случае вы можете использовать &lt;code&gt;no&lt;/code&gt; , чтобы &lt;code&gt;git status&lt;/code&gt; возвращался быстрее, не показывая неотслеживаемые файлы.</target>
        </trans-unit>
        <trans-unit id="97c7c816e31485397947c4cd78f79e742f80ec39" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-z&lt;/code&gt; output option is in effect, the output is formatted this way:</source>
          <target state="translated">Когда действует опция вывода &lt;code&gt;-z&lt;/code&gt; , вывод форматируется следующим образом:</target>
        </trans-unit>
        <trans-unit id="2bf71954fc8fac90c9030e3b9b1232971580d22a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;FETCH_HEAD&lt;/code&gt; (and no other commit) is specified, the branches recorded in the &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; file by the previous invocation of &lt;code&gt;git fetch&lt;/code&gt; for merging are merged to the current branch.</source>
          <target state="translated">Когда &lt;code&gt;FETCH_HEAD&lt;/code&gt; (и никакая другая фиксация), ветки, записанные в файле &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; при предыдущем вызове &lt;code&gt;git fetch&lt;/code&gt; для слияния, объединяются с текущей ветвью.</target>
        </trans-unit>
        <trans-unit id="30aaf2e9dd06a0335c5f1cb4c0791345a6730170" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled, the input list is considered a list of directories instead of sparse-checkout patterns. The command writes patterns to the sparse-checkout file to include all files contained in those directories (recursively) as well as files that are siblings of ancestor directories. The input format matches the output of &lt;code&gt;git ls-tree --name-only&lt;/code&gt;. This includes interpreting pathnames that begin with a double quote (&quot;) as C-style quoted strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79eb2995cdbf5e2d0a3c4b4e62d970b5798ea30" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is enabled, the config file &lt;code&gt;.git/worktrees/&amp;lt;id&amp;gt;/config.worktree&lt;/code&gt; is read after &lt;code&gt;.git/config&lt;/code&gt; is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093107f57324ea8ddf834562dc5da735634ce1c2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fetch.fsckObjects&lt;/code&gt; or &lt;code&gt;receive.fsckObjects&lt;/code&gt; are not set, the value of this variable is used instead. Defaults to false.</source>
          <target state="translated">Если &lt;code&gt;fetch.fsckObjects&lt;/code&gt; или &lt;code&gt;receive.fsckObjects&lt;/code&gt; не заданы, вместо этого используется значение этой переменной. По умолчанию - false.</target>
        </trans-unit>
        <trans-unit id="f0f4e4ab298d72d3ce878991ffe1cd2532ffab74" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fetch.unpackLimit&lt;/code&gt; or &lt;code&gt;receive.unpackLimit&lt;/code&gt; are not set, the value of this variable is used instead. The default value is 100.</source>
          <target state="translated">Если &lt;code&gt;fetch.unpackLimit&lt;/code&gt; или &lt;code&gt;receive.unpackLimit&lt;/code&gt; не установлены, вместо них используется значение этой переменной. Значение по умолчанию - 100.</target>
        </trans-unit>
        <trans-unit id="0f43e1a31ad9e45784cdafec68b8141e1a628402" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; is set, errors can be switched to warnings and vice versa by configuring the &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; setting where the &lt;code&gt;&amp;lt;msg-id&amp;gt;&lt;/code&gt; is the fsck message ID and the value is one of &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;. For convenience, fsck prefixes the error/warning with the message ID, e.g. &quot;missingEmail: invalid author/committer line - missing email&quot; means that setting &lt;code&gt;fsck.missingEmail = ignore&lt;/code&gt; will hide that issue.</source>
          <target state="translated">Когда установлен &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; , ошибки можно переключить на предупреждения и наоборот, настроив параметр &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; , где &lt;code&gt;&amp;lt;msg-id&amp;gt;&lt;/code&gt; - это идентификатор сообщения fsck, а значение - одно из &lt;code&gt;error&lt;/code&gt; , &lt;code&gt;warn&lt;/code&gt; или &lt;code&gt;ignore&lt;/code&gt; . Для удобства fsck добавляет перед ошибкой / предупреждением идентификатор сообщения, например, &amp;laquo;missingEmail: недопустимая строка автора / коммиттера - отсутствует адрес электронной почты&amp;raquo; означает, что установка &lt;code&gt;fsck.missingEmail = ignore&lt;/code&gt; скроет эту проблему.</target>
        </trans-unit>
        <trans-unit id="ce3f108ee8253a42ecb067bc1a011bcbcd3ad290" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git apply&lt;/code&gt; is used as a &quot;better GNU patch&quot;, the user can pass the &lt;code&gt;--unsafe-paths&lt;/code&gt; option to override this safety check. This option has no effect when &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;--cached&lt;/code&gt; is in use.</source>
          <target state="translated">Когда &lt;code&gt;git apply&lt;/code&gt; используется как &amp;laquo;лучший патч GNU&amp;raquo;, пользователь может передать параметр &lt;code&gt;--unsafe-paths&lt;/code&gt; , чтобы отменить эту проверку безопасности. Этот параметр не действует при использовании &lt;code&gt;--index&lt;/code&gt; или &lt;code&gt;--cached&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dea5ce8f581717a21d1ee89e4952655599f11488" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git difftool&lt;/code&gt; is invoked with this tool (either through the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tool&lt;/code&gt; option or the &lt;code&gt;diff.tool&lt;/code&gt; configuration variable) the configured command line will be invoked with the following variables available: &lt;code&gt;$LOCAL&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff pre-image and &lt;code&gt;$REMOTE&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff post-image. &lt;code&gt;$MERGED&lt;/code&gt; is the name of the file which is being compared. &lt;code&gt;$BASE&lt;/code&gt; is provided for compatibility with custom merge tool commands and has the same value as &lt;code&gt;$MERGED&lt;/code&gt;.</source>
          <target state="translated">Когда с помощью этого инструмента вызывается &lt;code&gt;git difftool&lt;/code&gt; (с помощью параметра &lt;code&gt;-t&lt;/code&gt; или &lt;code&gt;--tool&lt;/code&gt; или &lt;code&gt;diff.tool&lt;/code&gt; конфигурации diff.tool ), настроенная командная строка будет вызвана со следующими доступными переменными: &lt;code&gt;$LOCAL&lt;/code&gt; устанавливается на имя временного файл, содержащий содержимое предварительного изображения diff, а &lt;code&gt;$REMOTE&lt;/code&gt; устанавливается равным имени временного файла, содержащего содержимое пост-изображения diff. &lt;code&gt;$MERGED&lt;/code&gt; - это имя сравниваемого файла. &lt;code&gt;$BASE&lt;/code&gt; предоставляется для совместимости с пользовательскими командами инструмента слияния и имеет то же значение, что и &lt;code&gt;$MERGED&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02bc7953c8eb819402a97fdb05db86103d3e94f0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is run with explicit branches and/or tags to fetch on the command line, e.g. &lt;code&gt;git fetch origin master&lt;/code&gt;, the &amp;lt;refspec&amp;gt;s given on the command line determine what are to be fetched (e.g. &lt;code&gt;master&lt;/code&gt; in the example, which is a short-hand for &lt;code&gt;master:&lt;/code&gt;, which in turn means &quot;fetch the &lt;code&gt;master&lt;/code&gt; branch but I do not explicitly say what remote-tracking branch to update with it from the command line&quot;), and the example command will fetch &lt;code&gt;only&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch. The &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values determine which remote-tracking branch, if any, is updated. When used in this way, the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values do not have any effect in deciding &lt;code&gt;what&lt;/code&gt; gets fetched (i.e. the values are not used as refspecs when the command-line lists refspecs); they are only used to decide &lt;code&gt;where&lt;/code&gt; the refs that are fetched are stored by acting as a mapping.</source>
          <target state="translated">Когда &lt;code&gt;git fetch&lt;/code&gt; запускается с явными ветвями и / или тегами для выборки в командной строке, например, &lt;code&gt;git fetch origin master&lt;/code&gt; , &amp;lt;refspec&amp;gt;, заданные в командной строке, определяют, что нужно получить (например, &lt;code&gt;master&lt;/code&gt; в примере, которым является короткая рука для &lt;code&gt;master:&lt;/code&gt; , который , в свою очередь , означает &amp;laquo;Позовите &lt;code&gt;master&lt;/code&gt; ветвь , но я явно не сказать , что пульт дистанционного отслеживания ветви обновления с ним из командной строки&amp;raquo;), и пример команды будет получать &lt;code&gt;only&lt;/code&gt; на &lt;code&gt;master&lt;/code&gt; - ветви. Значения &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; определяют, какая ветвь удаленного отслеживания, если таковая имеется, обновляется. При таком использовании &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; значения не имеют никакого эффекта при принятии решения &lt;code&gt;what&lt;/code&gt; том, что будет извлечено (т. е. значения не используются в качестве refspecs, когда в командной строке перечислены refspecs); они используются только для того, чтобы решить, &lt;code&gt;where&lt;/code&gt; будут храниться выбранные ссылки, действуя как отображение.</target>
        </trans-unit>
        <trans-unit id="d3bb27ea8d5739147518646e08d478432b5ac353" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is run without specifying what branches and/or tags to fetch on the command line, e.g. &lt;code&gt;git fetch origin&lt;/code&gt; or &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values are used as the refspecs&amp;mdash;​they specify which refs to fetch and which local refs to update. The example above will fetch all branches that exist in the &lt;code&gt;origin&lt;/code&gt; (i.e. any ref that matches the left-hand side of the value, &lt;code&gt;refs/heads/*&lt;/code&gt;) and update the corresponding remote-tracking branches in the &lt;code&gt;refs/remotes/origin/*&lt;/code&gt; hierarchy.</source>
          <target state="translated">Когда &lt;code&gt;git fetch&lt;/code&gt; запускается без указания, какие ветки и / или теги для выборки в командной строке, например, &lt;code&gt;git fetch origin&lt;/code&gt; или &lt;code&gt;git fetch&lt;/code&gt; , &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; значения используются в качестве refspecs - они указывают, какие ссылки для выборки и какие местные ссылки обновлять. В приведенном выше примере будут извлечены все ветки, которые существуют в &lt;code&gt;origin&lt;/code&gt; (т.е. любая ссылка, которая соответствует левой стороне значения, &lt;code&gt;refs/heads/*&lt;/code&gt; ), и обновлены соответствующие ветки удаленного отслеживания в &lt;code&gt;refs/remotes/origin/*&lt;/code&gt; иерархия.</target>
        </trans-unit>
        <trans-unit id="6bfc306f6ccec6cbac00c82d44f7befe47671739" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is used with &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec it may refuse to update the local branch as discussed in the &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; part below. This option overrides that check.</source>
          <target state="translated">Когда &lt;code&gt;git fetch&lt;/code&gt; используется с &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec, он может отказаться обновлять локальную ветку, как описано в части &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; ниже. Эта опция отменяет эту проверку.</target>
        </trans-unit>
        <trans-unit id="b8a0a18f13c1248a211519fc4b6c3ee775403075" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is used with &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec it may refuse to update the local branch as discussed in the &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; part of the &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; documentation. This option overrides that check.</source>
          <target state="translated">Когда &lt;code&gt;git fetch&lt;/code&gt; используется с &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec, он может отказаться обновлять локальную ветку, как описано в части &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; документации &lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt; . Эта опция отменяет эту проверку.</target>
        </trans-unit>
        <trans-unit id="946d45913d1a6d20975808ddb9f4de7a3a592055" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git gc&lt;/code&gt; is run, it calls &lt;code&gt;git worktree prune --expire 3.months.ago&lt;/code&gt;. This config variable can be used to set a different grace period. The value &quot;now&quot; may be used to disable the grace period and prune &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; immediately, or &quot;never&quot; may be used to suppress pruning.</source>
          <target state="translated">При запуске &lt;code&gt;git gc&lt;/code&gt; вызывается &lt;code&gt;git worktree prune --expire 3.months.ago&lt;/code&gt; . Эта переменная конфигурации может использоваться для установки другого льготного периода. Значение &amp;laquo;сейчас&amp;raquo; может использоваться для отключения льготного периода и &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; , или &amp;laquo;никогда&amp;raquo; может использоваться для подавления отсечения.</target>
        </trans-unit>
        <trans-unit id="bdaf9b565f5bc5effacd5e94ca1e6e23df9c9f7a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git gc&lt;/code&gt; is run, it will call &lt;code&gt;prune --expire 2.weeks.ago&lt;/code&gt;. Override the grace period with this config variable. The value &quot;now&quot; may be used to disable this grace period and always prune unreachable objects immediately, or &quot;never&quot; may be used to suppress pruning. This feature helps prevent corruption when &lt;code&gt;git gc&lt;/code&gt; runs concurrently with another process writing to the repository; see the &quot;NOTES&quot; section of &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;.</source>
          <target state="translated">При запуске &lt;code&gt;git gc&lt;/code&gt; вызывается &lt;code&gt;prune --expire 2.weeks.ago&lt;/code&gt; . Отмените льготный период с помощью этой переменной конфигурации. Значение &amp;laquo;сейчас&amp;raquo; может использоваться для отключения этого периода отсрочки и всегда немедленно удалять недоступные объекты, или &amp;laquo;никогда&amp;raquo; может использоваться для подавления отсечения. Эта функция помогает предотвратить повреждение, когда &lt;code&gt;git gc&lt;/code&gt; выполняется одновременно с другим процессом, записывающим в репозиторий; см. раздел &amp;laquo;ПРИМЕЧАНИЯ&amp;raquo; в &lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9771ab35f0db8c62ffb81b026ac116ab479df958" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git mergetool&lt;/code&gt; is invoked with this tool (either through the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tool&lt;/code&gt; option or the &lt;code&gt;merge.tool&lt;/code&gt; configuration variable) the configured command line will be invoked with &lt;code&gt;$BASE&lt;/code&gt; set to the name of a temporary file containing the common base for the merge, if available; &lt;code&gt;$LOCAL&lt;/code&gt; set to the name of a temporary file containing the contents of the file on the current branch; &lt;code&gt;$REMOTE&lt;/code&gt; set to the name of a temporary file containing the contents of the file to be merged, and &lt;code&gt;$MERGED&lt;/code&gt; set to the name of the file to which the merge tool should write the result of the merge resolution.</source>
          <target state="translated">Когда &lt;code&gt;git mergetool&lt;/code&gt; вызывается с помощью этого инструмента (либо с помощью параметра &lt;code&gt;-t&lt;/code&gt; или &lt;code&gt;--tool&lt;/code&gt; , либо с помощью переменной конфигурации &lt;code&gt;merge.tool&lt;/code&gt; ), настроенная командная строка будет вызвана с параметром &lt;code&gt;$BASE&lt;/code&gt; установленным на имя временного файла, содержащего общую базу для слияние, если доступно; &lt;code&gt;$LOCAL&lt;/code&gt; устанавливается равным имени временного файла, содержащего содержимое файла в текущей ветви; &lt;code&gt;$REMOTE&lt;/code&gt; задано имя временного файла, содержащего содержимое файла, который нужно объединить, а в &lt;code&gt;$MERGED&lt;/code&gt; задано имя файла, в который инструмент объединения должен записать результат разрешения объединения.</target>
        </trans-unit>
        <trans-unit id="8d649c2a1b515f828b380ed0228639a9abf6f2e7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git-difftool&lt;/code&gt; is invoked with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; option the default diff tool will be read from the configured &lt;code&gt;diff.guitool&lt;/code&gt; variable instead of &lt;code&gt;diff.tool&lt;/code&gt;. The &lt;code&gt;--no-gui&lt;/code&gt; option can be used to override this setting. If &lt;code&gt;diff.guitool&lt;/code&gt; is not set, we will fallback in the order of &lt;code&gt;merge.guitool&lt;/code&gt;, &lt;code&gt;diff.tool&lt;/code&gt;, &lt;code&gt;merge.tool&lt;/code&gt; until a tool is found.</source>
          <target state="translated">Когда &lt;code&gt;git-difftool&lt;/code&gt; вызывается с параметром &lt;code&gt;-g&lt;/code&gt; или &lt;code&gt;--gui&lt;/code&gt; , инструмент сравнения по умолчанию будет считываться из настроенной переменной &lt;code&gt;diff.guitool&lt;/code&gt; вместо &lt;code&gt;diff.tool&lt;/code&gt; . Параметр &lt;code&gt;--no-gui&lt;/code&gt; может использоваться для отмены этого параметра. Если &lt;code&gt;diff.guitool&lt;/code&gt; не установлен, мы будем отступать в порядке &lt;code&gt;merge.guitool&lt;/code&gt; , &lt;code&gt;diff.tool&lt;/code&gt; , &lt;code&gt;merge.tool&lt;/code&gt; , пока инструмент не будет найден.</target>
        </trans-unit>
        <trans-unit id="dab1778e78eece39a70fe4959b77fef05af95366" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git-mergetool&lt;/code&gt; is invoked with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; option the default merge tool will be read from the configured &lt;code&gt;merge.guitool&lt;/code&gt; variable instead of &lt;code&gt;merge.tool&lt;/code&gt;. If &lt;code&gt;merge.guitool&lt;/code&gt; is not set, we will fallback to the tool configured under &lt;code&gt;merge.tool&lt;/code&gt;.</source>
          <target state="translated">Когда &lt;code&gt;git-mergetool&lt;/code&gt; вызывается с параметром &lt;code&gt;-g&lt;/code&gt; или &lt;code&gt;--gui&lt;/code&gt; , инструмент слияния по умолчанию будет считываться из настроенной переменной &lt;code&gt;merge.guitool&lt;/code&gt; вместо &lt;code&gt;merge.tool&lt;/code&gt; . Если &lt;code&gt;merge.guitool&lt;/code&gt; не установлен, мы вернемся к инструменту, настроенному в &lt;code&gt;merge.tool&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55d1f905322639499a3e0c7d64b920e915841fa1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;group&lt;/code&gt; (or &lt;code&gt;true&lt;/code&gt;), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When &lt;code&gt;all&lt;/code&gt; (or &lt;code&gt;world&lt;/code&gt; or &lt;code&gt;everybody&lt;/code&gt;), the repository will be readable by all users, additionally to being group-shareable. When &lt;code&gt;umask&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;), Git will use permissions reported by umask(2). When &lt;code&gt;0xxx&lt;/code&gt;, where &lt;code&gt;0xxx&lt;/code&gt; is an octal number, files in the repository will have this mode value. &lt;code&gt;0xxx&lt;/code&gt; will override user&amp;rsquo;s umask value (whereas the other options will only override requested parts of the user&amp;rsquo;s umask value). Examples: &lt;code&gt;0660&lt;/code&gt; will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to &lt;code&gt;group&lt;/code&gt; unless umask is e.g. &lt;code&gt;0022&lt;/code&gt;). &lt;code&gt;0640&lt;/code&gt; is a repository that is group-readable but not group-writable. See &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt;. False by default.</source>
          <target state="translated">Когда &lt;code&gt;group&lt;/code&gt; (или &lt;code&gt;true&lt;/code&gt; ), репозиторий становится доступным для совместного использования несколькими пользователями в группе (убедитесь, что все файлы и объекты доступны для групповой записи). Когда &lt;code&gt;all&lt;/code&gt; (или &lt;code&gt;world&lt;/code&gt; или &lt;code&gt;everybody&lt;/code&gt; ), репозиторий будет доступен для чтения всем пользователям, кроме того, что он будет доступен для группового доступа. Когда &lt;code&gt;umask&lt;/code&gt; (или &lt;code&gt;false&lt;/code&gt; ), Git будет использовать разрешения, сообщаемые umask (2). Когда &lt;code&gt;0xxx&lt;/code&gt; , где &lt;code&gt;0xxx&lt;/code&gt; - восьмеричное число, файлы в репозитории будут иметь это значение режима. &lt;code&gt;0xxx&lt;/code&gt; переопределит значение umask пользователя (тогда как другие параметры переопределят только запрошенные части значения umask пользователя). Примеры: &lt;code&gt;0660&lt;/code&gt; сделает репозиторий доступным для чтения / записи для владельца и группы, но недоступным для других (эквивалентно &lt;code&gt;group&lt;/code&gt; если umask не равен, например, &lt;code&gt;0022&lt;/code&gt; ). &lt;code&gt;0640&lt;/code&gt; - это репозиторий, который доступен для чтения для группы, но не для группы для записи. См. &lt;a href=&quot;git-init&quot;&gt;Git-init [1]&lt;/a&gt; . По умолчанию - false.</target>
        </trans-unit>
        <trans-unit id="0c640b1443fdc376fb0e05e5b19871e0f70bfa75" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;interactive&lt;/code&gt;, enable the interactive mode of rebase.</source>
          <target state="translated">В &lt;code&gt;interactive&lt;/code&gt; режиме включите интерактивный режим rebase.</target>
        </trans-unit>
        <trans-unit id="0e5d1d0d5309f291d73a19a6f71347b59d761978" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;konqueror&lt;/code&gt; is specified in the &lt;code&gt;man.viewer&lt;/code&gt; configuration variable, we launch &lt;code&gt;kfmclient&lt;/code&gt; to try to open the man page on an already opened konqueror in a new tab if possible.</source>
          <target state="translated">Когда &lt;code&gt;konqueror&lt;/code&gt; указан в &lt;code&gt;man.viewer&lt;/code&gt; конфигурации man.viewer , мы запускаем &lt;code&gt;kfmclient&lt;/code&gt; , чтобы попытаться открыть страницу руководства на уже открытом konqueror в новой вкладке, если это возможно.</target>
        </trans-unit>
        <trans-unit id="162b4f89725e01e084b1d2a9bb66f41a211da6f6" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;matching&lt;/code&gt; mode is specified, paths that explicitly match an ignored pattern are shown. If a directory matches an ignore pattern, then it is shown, but not paths contained in the ignored directory. If a directory does not match an ignore pattern, but all contents are ignored, then the directory is not shown, but all contents are shown.</source>
          <target state="translated">Когда &lt;code&gt;matching&lt;/code&gt; задан режим, пути , которые явно соответствуют проигнорировано в шаблон показано на рисунке. Если каталог соответствует шаблону игнорирования, он отображается, но не пути, содержащиеся в игнорируемом каталоге. Если каталог не соответствует шаблону игнорирования, но все содержимое игнорируется, тогда каталог не отображается, но отображается все содержимое.</target>
        </trans-unit>
        <trans-unit id="7ee4878df1abaf60b54059eba9faa52c16598786" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;merges&lt;/code&gt; (or just &lt;code&gt;m&lt;/code&gt;), pass the &lt;code&gt;--rebase-merges&lt;/code&gt; option to &lt;code&gt;git rebase&lt;/code&gt; so that the local merge commits are included in the rebase (see &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239b51beb1f8c13233881b0568518d58e269df96" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;merges&lt;/code&gt;, pass the &lt;code&gt;--rebase-merges&lt;/code&gt; option to &lt;code&gt;git rebase&lt;/code&gt; so that the local merge commits are included in the rebase (see &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details).</source>
          <target state="translated">Когда &lt;code&gt;merges&lt;/code&gt; , проходят &lt;code&gt;--rebase-merges&lt;/code&gt; вариант &lt;code&gt;git rebase&lt;/code&gt; так, чтобы местные коммиты слияния включены в перебазировании (см &lt;a href=&quot;git-rebase&quot;&gt;ГИТ-Rebase [1]&lt;/a&gt; для более подробной информации).</target>
        </trans-unit>
        <trans-unit id="26887709475bb99a484f3550dfcf66463a02ff1c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserve&lt;/code&gt; (deprecated in favor of &lt;code&gt;merges&lt;/code&gt;), also pass &lt;code&gt;--preserve-merges&lt;/code&gt; along to &lt;code&gt;git rebase&lt;/code&gt; so that locally committed merge commits will not be flattened by running &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">Когда &lt;code&gt;preserve&lt;/code&gt; (не рекомендуется в пользу &lt;code&gt;merges&lt;/code&gt; ), также передайте &lt;code&gt;--preserve-merges&lt;/code&gt; вместе с &lt;code&gt;git rebase&lt;/code&gt; , чтобы локально зафиксированные коммиты слияния не сглаживались при запуске &lt;code&gt;git pull&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1aa5ac29106f7e567cb177a446057fe6893dfb3c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserve&lt;/code&gt; (or just &lt;code&gt;p&lt;/code&gt;, deprecated in favor of &lt;code&gt;merges&lt;/code&gt;), also pass &lt;code&gt;--preserve-merges&lt;/code&gt; along to &lt;code&gt;git rebase&lt;/code&gt; so that locally committed merge commits will not be flattened by running &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c040d756e251986ff4d930aa40402b774da81b76" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserveUser&lt;/code&gt; is true, &lt;code&gt;git p4&lt;/code&gt; normally dies if it cannot find an author in the p4 user map. This setting submits the change regardless.</source>
          <target state="translated">Когда &lt;code&gt;preserveUser&lt;/code&gt; истинно, &lt;code&gt;git p4&lt;/code&gt; обычно умирает, если не может найти автора в карте пользователя p4. Этот параметр все равно отправляет изменение.</target>
        </trans-unit>
        <trans-unit id="f1cb457481e4cab2531cdb48fb2ed70a72c47f80" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;receive-pack&lt;/code&gt; takes in objects, they are placed into a temporary &quot;quarantine&quot; directory within the &lt;code&gt;$GIT_DIR/objects&lt;/code&gt; directory and migrated into the main object store only after the &lt;code&gt;pre-receive&lt;/code&gt; hook has completed. If the push fails before then, the temporary directory is removed entirely.</source>
          <target state="translated">Когда &lt;code&gt;receive-pack&lt;/code&gt; принимает объекты, они помещаются во временный &amp;laquo;карантинный&amp;raquo; каталог в каталоге &lt;code&gt;$GIT_DIR/objects&lt;/code&gt; и переносятся в главное хранилище объектов только после завершения обработки &lt;code&gt;pre-receive&lt;/code&gt; . Если до этого времени push не удается, временный каталог полностью удаляется.</target>
        </trans-unit>
        <trans-unit id="13eed45e8cb127a4420b06f0b52f497c696b7d45" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;text&lt;/code&gt; is set to &quot;auto&quot;, the path is marked for automatic end-of-line conversion. If Git decides that the content is text, its line endings are converted to LF on checkin. When the file has been committed with CRLF, no conversion is done.</source>
          <target state="translated">Если для &lt;code&gt;text&lt;/code&gt; установлено значение &amp;laquo;авто&amp;raquo;, путь помечается для автоматического преобразования конца строки. Если Git решает, что контент является текстом, его окончания строки преобразуются в LF при возврате. Когда файл зафиксирован с помощью CRLF, преобразование не выполняется.</target>
        </trans-unit>
        <trans-unit id="2bb8610f0d3f51c94aca7dd51e3603814301750d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;text=auto&lt;/code&gt; conversion is enabled in a cross-platform project using push and pull to a central repository the text files containing CRLFs should be normalized.</source>
          <target state="translated">Когда &lt;code&gt;text=auto&lt;/code&gt; преобразование включено в кроссплатформенном проекте с использованием push и pull в центральный репозиторий, текстовые файлы, содержащие CRLF, должны быть нормализованы.</target>
        </trans-unit>
        <trans-unit id="f1b569ad0a0d3f731d90377a830d25de99487fad" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upload-pack&lt;/code&gt; has started &lt;code&gt;pack-objects&lt;/code&gt;, there may be a quiet period while &lt;code&gt;pack-objects&lt;/code&gt; prepares the pack. Normally it would output progress information, but if &lt;code&gt;--quiet&lt;/code&gt; was used for the fetch, &lt;code&gt;pack-objects&lt;/code&gt; will output nothing at all until the pack data begins. Some clients and networks may consider the server to be hung and give up. Setting this option instructs &lt;code&gt;upload-pack&lt;/code&gt; to send an empty keepalive packet every &lt;code&gt;uploadpack.keepAlive&lt;/code&gt; seconds. Setting this option to 0 disables keepalive packets entirely. The default is 5 seconds.</source>
          <target state="translated">Когда &lt;code&gt;upload-pack&lt;/code&gt; запустил &lt;code&gt;pack-objects&lt;/code&gt; , может быть период &lt;code&gt;pack-objects&lt;/code&gt; пока pack-objects готовят пакет. Обычно он выводит информацию о прогрессе, но если для выборки использовалось &lt;code&gt;--quiet&lt;/code&gt; , &lt;code&gt;pack-objects&lt;/code&gt; не будут выводить вообще ничего, пока не начнутся данные пакета. Некоторые клиенты и сети могут счесть сервер зависшим и отказаться от него. Установка этого параметра указывает &lt;code&gt;upload-pack&lt;/code&gt; отправлять пустой пакет keepalive каждые секунды &lt;code&gt;uploadpack.keepAlive&lt;/code&gt; . Установка этого параметра на 0 полностью отключает пакеты keepalive. По умолчанию 5 секунд.</target>
        </trans-unit>
        <trans-unit id="09ea8c9e4617731ed2a0cdf40185d39ec477e171" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; is in effect, allow &lt;code&gt;upload-pack&lt;/code&gt; to accept a fetch request that asks for an object at the tip of a hidden ref (by default, such a request is rejected). See also &lt;code&gt;uploadpack.hideRefs&lt;/code&gt;. Even if this is false, a client may be able to steal objects via the techniques described in the &quot;SECURITY&quot; section of the &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; man page; it&amp;rsquo;s best to keep private data in a separate repository.</source>
          <target state="translated">Когда &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; , разрешите &lt;code&gt;upload-pack&lt;/code&gt; принимать запрос на выборку, который запрашивает объект в конце скрытой ссылки (по умолчанию такой запрос отклоняется). См. Также &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; . Даже если это неверно, клиент может иметь возможность украсть объекты с помощью методов, описанных в разделе &amp;laquo;БЕЗОПАСНОСТЬ&amp;raquo; &lt;a href=&quot;gitnamespaces&quot;&gt;справочной&lt;/a&gt; страницы gitnamespaces [7] ; лучше всего хранить личные данные в отдельном репозитории.</target>
        </trans-unit>
        <trans-unit id="5f953a201b0ae4d35f35034718b3114ef928787f" translate="yes" xml:space="preserve">
          <source>When Git doesn&amp;rsquo;t know how to handle a certain transport protocol, it attempts to use the &lt;code&gt;remote-&amp;lt;transport&amp;gt;&lt;/code&gt; remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</source>
          <target state="translated">Когда Git не знает, как обрабатывать определенный транспортный протокол, он пытается использовать удаленный помощник &lt;code&gt;remote-&amp;lt;transport&amp;gt;&lt;/code&gt; , если он существует. Чтобы явно запросить удаленный помощник, можно использовать следующий синтаксис:</target>
        </trans-unit>
        <trans-unit id="cf58a154a8f8fa8889640812d376b7964ce7bef2" translate="yes" xml:space="preserve">
          <source>When Git encounters a URL of the form &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;transport&amp;gt;&lt;/code&gt; is a protocol that it cannot handle natively, it automatically invokes &lt;code&gt;git remote-&amp;lt;transport&amp;gt;&lt;/code&gt; with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</source>
          <target state="translated">Когда Git встречает URL-адрес формы &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt; , где &lt;code&gt;&amp;lt;transport&amp;gt;&lt;/code&gt; - это протокол, который он не может обрабатывать изначально, он автоматически вызывает &lt;code&gt;git remote-&amp;lt;transport&amp;gt;&lt;/code&gt; с полным URL-адресом в качестве второго аргумента. Если такой URL-адрес встречается непосредственно в командной строке, первый аргумент совпадает со вторым, а если он встречается на настроенном удаленном компьютере, первым аргументом является имя этого пульта.</target>
        </trans-unit>
        <trans-unit id="27018e5bb4c8622ebcfed2f81b80284203c3bc2f" translate="yes" xml:space="preserve">
          <source>When Git encounters the first file that needs to be cleaned or smudged, it starts the filter and performs the handshake. In the handshake, the welcome message sent by Git is &quot;git-filter-client&quot;, only version 2 is supported, and the supported capabilities are &quot;clean&quot;, &quot;smudge&quot;, and &quot;delay&quot;.</source>
          <target state="translated">Когда Git сталкивается с первым файлом,который необходимо очистить или смазать,он запускает фильтр и производит рукопожатие.В процессе рукопожатия приветственное сообщение от Git'а-&quot;git-filter-client&quot;,поддерживается только версия 2,а поддерживаемые возможности-&quot;чисто&quot;,&quot;размазывание&quot; и &quot;задержка&quot;.</target>
        </trans-unit>
        <trans-unit id="f51f886a7edb2e397d8670010685e9d17fb9bc09" translate="yes" xml:space="preserve">
          <source>When Git needs authentication for a particular URL context, credential-store will consider that context a pattern to match against each entry in the credentials file. If the protocol, hostname, and username (if we already have one) match, then the password is returned to Git. See the discussion of configuration in &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for more information.</source>
          <target state="translated">Когда Git требуется аутентификация для определенного контекста URL-адреса, хранилище учетных данных будет рассматривать этот контекст как шаблон для сопоставления с каждой записью в файле учетных данных. Если протокол, имя хоста и имя пользователя (если оно у нас уже есть) совпадают, то пароль возвращается в Git. См. Обсуждение конфигурации в &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="fbdc4494c8c569621bd35073fd02055c267f7e54" translate="yes" xml:space="preserve">
          <source>When Git needs to show you a diff for the path with &lt;code&gt;diff&lt;/code&gt; attribute set to &lt;code&gt;jcdiff&lt;/code&gt;, it calls the command you specified with the above configuration, i.e. &lt;code&gt;j-c-diff&lt;/code&gt;, with 7 parameters, just like &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; program is called. See &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; for details.</source>
          <target state="translated">Когда Git нужно показать вам diff для пути с атрибутом &lt;code&gt;diff&lt;/code&gt; , установленным на &lt;code&gt;jcdiff&lt;/code&gt; , он вызывает команду, указанную вами в приведенной выше конфигурации, то есть &lt;code&gt;j-c-diff&lt;/code&gt; , с 7 параметрами, точно так же, как &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; программа GIT_EXTERNAL_DIFF . Подробнее см. &lt;a href=&quot;git&quot;&gt;Git [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bb3065603615c6a64dfcb623c10f42c6b9e417fa" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;git push --signed&lt;/code&gt; sent a push certificate with a &quot;nonce&quot; that was issued by a receive-pack serving the same repository within this many seconds, export the &quot;nonce&quot; found in the certificate to &lt;code&gt;GIT_PUSH_CERT_NONCE&lt;/code&gt; to the hooks (instead of what the receive-pack asked the sending side to include). This may allow writing checks in &lt;code&gt;pre-receive&lt;/code&gt; and &lt;code&gt;post-receive&lt;/code&gt; a bit easier. Instead of checking &lt;code&gt;GIT_PUSH_CERT_NONCE_SLOP&lt;/code&gt; environment variable that records by how many seconds the nonce is stale to decide if they want to accept the certificate, they only can check &lt;code&gt;GIT_PUSH_CERT_NONCE_STATUS&lt;/code&gt; is &lt;code&gt;OK&lt;/code&gt;.</source>
          <target state="translated">Когда &lt;code&gt;git push --signed&lt;/code&gt; отправил push-сертификат с &quot;nonce&quot;, который был выдан пакетом приема, обслуживающим тот же репозиторий, в течение этого количества секунд, экспортируйте &quot;nonce&quot;, найденный в сертификате, в &lt;code&gt;GIT_PUSH_CERT_NONCE&lt;/code&gt; на хуки (вместо что пакет приема просил включить отправляющую сторону). Это может немного упростить написание чеков в режимах &lt;code&gt;pre-receive&lt;/code&gt; и &lt;code&gt;post-receive&lt;/code&gt; . Вместо проверки переменной среды &lt;code&gt;GIT_PUSH_CERT_NONCE_SLOP&lt;/code&gt; , которая записывает, на сколько секунд одноразовый номер устарел, чтобы решить, хотят ли они принять сертификат, они могут только проверить, что &lt;code&gt;GIT_PUSH_CERT_NONCE_STATUS&lt;/code&gt; в &lt;code&gt;OK&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f34a76491c47ddfcf2959dd6944574eeda479afa" translate="yes" xml:space="preserve">
          <source>When a command has finished, and the client has received the entire response from the server, a client can either request that another command be executed or can terminate the connection. A client may optionally send an empty request consisting of just a flush-pkt to indicate that no more requests will be made.</source>
          <target state="translated">Когда команда завершена,и клиент получил весь ответ от сервера,клиент может либо запросить выполнение другой команды,либо прервать соединение.По желанию клиент может отправить пустой запрос,состоящий только из flush-pkt,чтобы указать,что больше никаких запросов не будет выполняться.</target>
        </trans-unit>
        <trans-unit id="98e606d10b24cc0c03b08a4efd9e014e2a7d092f" translate="yes" xml:space="preserve">
          <source>When a commit is created in this state, the branch is updated to refer to the new commit. Specifically, &lt;code&gt;git commit&lt;/code&gt; creates a new commit &lt;code&gt;d&lt;/code&gt;, whose parent is commit &lt;code&gt;c&lt;/code&gt;, and then updates branch &lt;code&gt;master&lt;/code&gt; to refer to new commit &lt;code&gt;d&lt;/code&gt;. &lt;code&gt;HEAD&lt;/code&gt; still refers to branch &lt;code&gt;master&lt;/code&gt; and so indirectly now refers to commit &lt;code&gt;d&lt;/code&gt;:</source>
          <target state="translated">Когда в этом состоянии создается фиксация, ветка обновляется, чтобы ссылаться на новую фиксацию. В частности, &lt;code&gt;git commit&lt;/code&gt; создает новый коммит &lt;code&gt;d&lt;/code&gt; , родительским элементом которого является commit &lt;code&gt;c&lt;/code&gt; , а затем обновляет &lt;code&gt;master&lt;/code&gt; ветки, чтобы он ссылался на новый коммит &lt;code&gt;d&lt;/code&gt; . &lt;code&gt;HEAD&lt;/code&gt; по- прежнему относится к &lt;code&gt;master&lt;/code&gt; ветки и теперь косвенно относится к фиксации &lt;code&gt;d&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b5e6d106b45c449ef3f9978fa7e9a2c319abd6d7" translate="yes" xml:space="preserve">
          <source>When a conflict occurs while rebasing, rebase stops and asks the user to resolve. Since the user may need to make notable changes while resolving conflicts, after conflicts are resolved and the user has run &lt;code&gt;git rebase --continue&lt;/code&gt;, the rebase should open an editor and ask the user to update the commit message. The merge backend does this, while the apply backend blindly applies the original commit message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d656a10ad8d92cd23d5675fa9c3ba2b92a8d6f" translate="yes" xml:space="preserve">
          <source>When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), do not dump data (that is, only dump info lines and headers).</source>
          <target state="translated">Когда трассировка curl включена (см. &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; выше), не выгружайте данные (то есть выгружайте только информационные строки и заголовки).</target>
        </trans-unit>
        <trans-unit id="855748d09cda03242c615ed9f83d928cff4dd252" translate="yes" xml:space="preserve">
          <source>When a fetch mirror is created with &lt;code&gt;--mirror=fetch&lt;/code&gt;, the refs will not be stored in the &lt;code&gt;refs/remotes/&lt;/code&gt; namespace, but rather everything in &lt;code&gt;refs/&lt;/code&gt; on the remote will be directly mirrored into &lt;code&gt;refs/&lt;/code&gt; in the local repository. This option only makes sense in bare repositories, because a fetch would overwrite any local commits.</source>
          <target state="translated">Когда зеркало выборки создается с помощью &lt;code&gt;--mirror=fetch&lt;/code&gt; , ссылки не будут храниться в пространстве имен &lt;code&gt;refs/remotes/&lt;/code&gt; , а скорее все, что находится в &lt;code&gt;refs/&lt;/code&gt; на удаленном компьютере, будет напрямую отражено в &lt;code&gt;refs/&lt;/code&gt; в локальном репозитории. Эта опция имеет смысл только в чистых репозиториях, потому что выборка перезапишет любые локальные коммиты.</target>
        </trans-unit>
        <trans-unit id="747511f053f093bdd8637c2efa65029ba86d5e79" translate="yes" xml:space="preserve">
          <source>When a git process is a (direct or indirect) child of another git process, it inherits Trace2 context information. This allows the child to print the command hierarchy. This example shows gc as child[3] of fetch. When the gc process reports its name as &quot;gc&quot;, it also reports the hierarchy as &quot;fetch/gc&quot;. (In this example, trace2 messages from the child process is indented for clarity.)</source>
          <target state="translated">Когда git-процесс является (прямым или косвенным)дочерним процессом другого git-процесса,он наследует контекстную информацию Trace2.Это позволяет дочернему процессу распечатывать иерархию команд.В данном примере gc показан как дочерний[3]fetch.Когда процесс gc сообщает своё имя как &quot;gc&quot;,он также сообщает иерархию как &quot;fetch/gc&quot;.(В этом примере сообщения trace2 от дочернего процесса имеют отступы для большей ясности).</target>
        </trans-unit>
        <trans-unit id="dcc866e382263d0b053b9eb6226d8321d2b6f3a3" translate="yes" xml:space="preserve">
          <source>When a helper is executed, it will have one &quot;operation&quot; argument appended to its command line, which is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79294381fcaa0a0dccaa2b41ac29dc7daa74e3f5" translate="yes" xml:space="preserve">
          <source>When a local branch is started off a remote-tracking branch, Git sets up the branch (specifically the &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; configuration entries) so that &lt;code&gt;git pull&lt;/code&gt; will appropriately merge from the remote-tracking branch. This behavior may be changed via the global &lt;code&gt;branch.autoSetupMerge&lt;/code&gt; configuration flag. That setting can be overridden by using the &lt;code&gt;--track&lt;/code&gt; and &lt;code&gt;--no-track&lt;/code&gt; options, and changed later using &lt;code&gt;git branch --set-upstream-to&lt;/code&gt;.</source>
          <target state="translated">Когда локальная ветка запускается из ветки удаленного отслеживания, Git настраивает ветку (в частности, записи конфигурации &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; и &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; ), чтобы &lt;code&gt;git pull&lt;/code&gt; соответствующим образом объединялся с удаленными Отслеживающая ветка. Это поведение можно изменить с помощью глобального &lt;code&gt;branch.autoSetupMerge&lt;/code&gt; конфигурации branch.autoSetupMerge . Этот параметр можно переопределить с помощью параметров &lt;code&gt;--track&lt;/code&gt; и --no &lt;code&gt;--no-track&lt;/code&gt; , а позже изменить с помощью &lt;code&gt;git branch --set-upstream-to&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dbb99a5451930fe8366dedb022737c46385ca3a6" translate="yes" xml:space="preserve">
          <source>When a merge commit is included by &lt;code&gt;--show-pulls&lt;/code&gt;, the merge is treated as if it &quot;pulled&quot; the change from another branch. When using &lt;code&gt;--show-pulls&lt;/code&gt; on this example (and no other options) the resulting graph is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e12783acd89ac9262429bc89fcf85d9b95e88c1" translate="yes" xml:space="preserve">
          <source>When a merge conflict happens during switching branches with the &lt;code&gt;-m&lt;/code&gt; option, you would see something like this:</source>
          <target state="translated">Когда возникает конфликт слияния во время переключения ветвей с параметром &lt;code&gt;-m&lt;/code&gt; , вы увидите что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="8b8f6236a48634fd451e67557b1ed432c992a4a6" translate="yes" xml:space="preserve">
          <source>When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with &lt;code&gt;git add&lt;/code&gt; (or &lt;code&gt;git rm&lt;/code&gt; if the merge should result in deletion of the path).</source>
          <target state="translated">Когда происходит конфликт слияния, записи индекса для конфликтующих путей не объединяются, и вам необходимо разрешить конфликты и пометить разрешенные пути с помощью &lt;code&gt;git add&lt;/code&gt; (или &lt;code&gt;git rm&lt;/code&gt; , если слияние должно привести к удалению пути).</target>
        </trans-unit>
        <trans-unit id="054b9e9957838ff74728498487ffff5f26346d88" translate="yes" xml:space="preserve">
          <source>When a merge isn&amp;rsquo;t resolved automatically, Git leaves the index and the working tree in a special state that gives you all the information you need to help resolve the merge.</source>
          <target state="translated">Когда слияние не разрешается автоматически, Git оставляет индекс и рабочее дерево в особом состоянии, которое дает вам всю информацию, необходимую для разрешения слияния.</target>
        </trans-unit>
        <trans-unit id="1d6b6e4ed4a39cb92155b19d26f3a8478b8d6d5c" translate="yes" xml:space="preserve">
          <source>When a new branch is created with &lt;code&gt;git branch&lt;/code&gt;, &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt; that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see &quot;branch.&amp;lt;name&amp;gt;.rebase&quot;). When &lt;code&gt;never&lt;/code&gt;, rebase is never automatically set to true. When &lt;code&gt;local&lt;/code&gt;, rebase is set to true for tracked branches of other local branches. When &lt;code&gt;remote&lt;/code&gt;, rebase is set to true for tracked branches of remote-tracking branches. When &lt;code&gt;always&lt;/code&gt;, rebase will be set to true for all tracking branches. See &quot;branch.autoSetupMerge&quot; for details on how to set up a branch to track another branch. This option defaults to never.</source>
          <target state="translated">Когда создается новая ветка с помощью &lt;code&gt;git branch&lt;/code&gt; , &lt;code&gt;git switch&lt;/code&gt; или &lt;code&gt;git checkout&lt;/code&gt; , которая отслеживает другую ветку, эта переменная сообщает Git настроить pull для перебазирования вместо слияния (см. &amp;laquo;Branch. &amp;lt;name&amp;gt; .rebase&amp;raquo;). Когда &lt;code&gt;never&lt;/code&gt; , для rebase автоматически не устанавливается значение true. Когда &lt;code&gt;local&lt;/code&gt; , rebase имеет значение true для отслеживаемых ветвей других локальных ветвей. В &lt;code&gt;remote&lt;/code&gt; rebase имеет значение true для отслеживаемых ветвей ветвей удаленного отслеживания. Когда &lt;code&gt;always&lt;/code&gt; , для всех ветвей отслеживания будет установлено значение true. См. &amp;laquo;Branch.autoSetupMerge&amp;raquo; для получения подробной информации о том, как настроить ветку для отслеживания другой ветки. По умолчанию этот параметр никогда не используется.</target>
        </trans-unit>
        <trans-unit id="ed0adff8e63a6741e1694d5ebc304264bd392424" translate="yes" xml:space="preserve">
          <source>When a patch failure occurs, &amp;lt;msg&amp;gt; will be printed to the screen before exiting. This overrides the standard message informing you to use &lt;code&gt;--continue&lt;/code&gt; or &lt;code&gt;--skip&lt;/code&gt; to handle the failure. This is solely for internal use between &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">Когда происходит сбой исправления, перед выходом на экран выводится &amp;lt;msg&amp;gt;. Это отменяет стандартное сообщение, информирующее вас об использовании &lt;code&gt;--continue&lt;/code&gt; или &lt;code&gt;--skip&lt;/code&gt; для обработки сбоя. Это исключительно для внутреннего использования между &lt;code&gt;git rebase&lt;/code&gt; и &lt;code&gt;git am&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5b066fa036c4bb98c79472fbdf38de3d119f100" translate="yes" xml:space="preserve">
          <source>When a patch is part of an ongoing discussion, the patch generated by &lt;code&gt;git format-patch&lt;/code&gt; can be tweaked to take advantage of the &lt;code&gt;git am --scissors&lt;/code&gt; feature. After your response to the discussion comes a line that consists solely of &quot;&lt;code&gt;-- &amp;gt;8 --&lt;/code&gt;&quot; (scissors and perforation), followed by the patch with unnecessary header fields removed:</source>
          <target state="translated">Когда патч является частью продолжающегося обсуждения, патч, созданный с помощью &lt;code&gt;git format-patch&lt;/code&gt; , может быть изменен, чтобы использовать преимущества функции &lt;code&gt;git am --scissors&lt;/code&gt; . После вашего ответа на обсуждение идет строка, состоящая исключительно из &amp;laquo; &lt;code&gt;-- &amp;gt;8 --&lt;/code&gt; &amp;raquo; (ножницы и перфорация), за которой следует патч с удаленными ненужными полями заголовка:</target>
        </trans-unit>
        <trans-unit id="f3cb24e54c9837370739d06bd25b8c911a05ee6b" translate="yes" xml:space="preserve">
          <source>When a path is in the &quot;unmerged&quot; state, running &lt;code&gt;git update-index&lt;/code&gt; for that path tells Git to mark the path resolved.</source>
          <target state="translated">Когда путь находится в &amp;laquo;несвязанном&amp;raquo; состоянии, запуск &lt;code&gt;git update-index&lt;/code&gt; для этого пути сообщает Git пометить путь как разрешенный.</target>
        </trans-unit>
        <trans-unit id="f8965008f9824bf8da0b033710c2d7ac1f3f6568" translate="yes" xml:space="preserve">
          <source>When a pure mode change is encountered (which has no index information), the information is read from the current index instead.</source>
          <target state="translated">Когда происходит чистое изменение режима (в котором нет информации об индексе),информация считывается из текущего индекса.</target>
        </trans-unit>
        <trans-unit id="ef4651b07e5b8cb97cb93de85df1d7e556426d24" translate="yes" xml:space="preserve">
          <source>When a push mirror is created with &lt;code&gt;--mirror=push&lt;/code&gt;, then &lt;code&gt;git push&lt;/code&gt; will always behave as if &lt;code&gt;--mirror&lt;/code&gt; was passed.</source>
          <target state="translated">Когда push-зеркало создается с помощью &lt;code&gt;--mirror=push&lt;/code&gt; , тогда &lt;code&gt;git push&lt;/code&gt; всегда будет вести себя так, как если &lt;code&gt;--mirror&lt;/code&gt; было передано --mirror .</target>
        </trans-unit>
        <trans-unit id="deb13d30f8ba66c920f6495f36b99921916b0fbc" translate="yes" xml:space="preserve">
          <source>When a rebase required merge conflicts to be resolved, compare the changes introduced by the rebase directly afterwards using:</source>
          <target state="translated">В случае,когда для разрешения конфликтов слияния требуется rebase,сравните изменения,внесенные rebase непосредственно после использования:</target>
        </trans-unit>
        <trans-unit id="350766930233515327656bc7b70b13214a7aa33c" translate="yes" xml:space="preserve">
          <source>When a ref is updated, reflog entries are created to keep track of the reason why the ref was updated (which is typically the name of the high-level command that updated the ref), in addition to the old and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in &lt;code&gt;git-sh-setup&lt;/code&gt; to set its name to this variable when it is invoked as the top level command by the end user, to be recorded in the body of the reflog.</source>
          <target state="translated">При обновлении ссылки создаются записи журнала ссылок, чтобы отслеживать причину обновления ссылки (обычно это имя высокоуровневой команды, обновившей ссылку), в дополнение к старому и новому значениям ссылки. , Запрограммированная команда Porcelain может использовать вспомогательную функцию set_reflog_action в &lt;code&gt;git-sh-setup&lt;/code&gt; , чтобы задать имя этой переменной, когда она вызывается конечным пользователем как команда верхнего уровня, для записи в теле журнала reflog.</target>
        </trans-unit>
        <trans-unit id="0a564cf0d83332d2cd6fd3ac884cec9942b078c7" translate="yes" xml:space="preserve">
          <source>When a repository is synchronized via &lt;code&gt;git push&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; objects packed in the source repository are usually stored unpacked in the destination. While this allows you to use different packing strategies on both ends, it also means you may need to repack both repositories every once in a while.</source>
          <target state="translated">Когда репозиторий синхронизируется с помощью &lt;code&gt;git push&lt;/code&gt; и &lt;code&gt;git pull&lt;/code&gt; , объекты, упакованные в исходный репозиторий, обычно хранятся в распакованном виде в месте назначения. Хотя это позволяет вам использовать разные стратегии упаковки на обоих концах, это также означает, что вам может потребоваться время от времени переупаковывать оба репозитория.</target>
        </trans-unit>
        <trans-unit id="89c3a76b400f69bc409951d41f44580e1ce5b550" translate="yes" xml:space="preserve">
          <source>When a scripting language specific quoting is in effect, everything between a top-level opening atom and its matching %(end) is evaluated according to the semantics of the opening atom and only its result from the top-level is quoted.</source>
          <target state="translated">Когда в скриптовом языке действует специальная котировка,все,что находится между атомом открытия верхнего уровня и его соответствием %(end),оценивается в соответствии с семантикой атома открытия,и цитируется только его результат от атома открытия верхнего уровня.</target>
        </trans-unit>
        <trans-unit id="1d0d6b410e7d083b396401fa9485dd3214d89132" translate="yes" xml:space="preserve">
          <source>When a variable is said to take a boolean value, many synonyms are accepted for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;; these are all case-insensitive.</source>
          <target state="translated">Когда говорят, что переменная принимает логическое значение, многие синонимы принимаются для &lt;code&gt;true&lt;/code&gt; и &lt;code&gt;false&lt;/code&gt; ; все они нечувствительны к регистру.</target>
        </trans-unit>
        <trans-unit id="085e4eddfd9be8c4f3b576466769939a6475604e" translate="yes" xml:space="preserve">
          <source>When accepting a new code drop for a vendor branch, you probably want to record both the removal of paths and additions of new paths as well as modifications of existing paths.</source>
          <target state="translated">При принятии нового кода для ветки поставщика вы,вероятно,захотите записать как удаление путей,так и добавление новых,а также изменение существующих путей.</target>
        </trans-unit>
        <trans-unit id="98d4ec1ab85d43886cf359223c5c65ec41aa50b0" translate="yes" xml:space="preserve">
          <source>When accepting a signed push (see &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;), the signed push certificate is stored in a blob and an environment variable &lt;code&gt;GIT_PUSH_CERT&lt;/code&gt; can be consulted for its object name. See the description of &lt;code&gt;post-receive&lt;/code&gt; hook for an example. In addition, the certificate is verified using GPG and the result is exported with the following environment variables:</source>
          <target state="translated">При принятии подписанного push-уведомления (см. &lt;a href=&quot;git-push&quot;&gt;Git-push [1]&lt;/a&gt; ) подписанный push-сертификат сохраняется в &lt;code&gt;GIT_PUSH_CERT&lt;/code&gt; объекте, и имя объекта можно узнать в переменной среды GIT_PUSH_CERT . См. Пример в описании обработчика &lt;code&gt;post-receive&lt;/code&gt; . Кроме того, сертификат проверяется с помощью GPG, и результат экспортируется со следующими переменными среды:</target>
        </trans-unit>
        <trans-unit id="5d78f94855bee5654824b328b5c74fbbbf68d2ce" translate="yes" xml:space="preserve">
          <source>When acquiring credentials, consider the &quot;path&quot; component of an http or https URL to be important. Defaults to false. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for more information.</source>
          <target state="translated">При получении учетных данных важно учитывать компонент &amp;laquo;путь&amp;raquo; URL-адреса http или https. По умолчанию - false. См. &lt;a href=&quot;gitcredentials&quot;&gt;Gitcredentials [7]&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="36125e3b1dadcf8415f427875bfbe6e3edb592ec" translate="yes" xml:space="preserve">
          <source>When adding notes to an object that already has notes, overwrite the existing notes (instead of aborting).</source>
          <target state="translated">При добавлении заметок к объекту,в котором уже есть заметки,перезапишите существующие заметки (вместо прерывания).</target>
        </trans-unit>
        <trans-unit id="31a6893d1f507cb4bce24b6631d6f67bbe0ca8c3" translate="yes" xml:space="preserve">
          <source>When advertising tips of available history from an alternate, use the shell to execute the specified command instead of &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt;. The first argument is the absolute path of the alternate. Output must contain one hex object id per line (i.e., the same as produced by &lt;code&gt;git for-each-ref
--format='%(objectname)'&lt;/code&gt;).</source>
          <target state="translated">При рекламе подсказок доступной истории от альтернативы используйте оболочку для выполнения указанной команды вместо &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt; . Первый аргумент - это абсолютный путь альтернативы. Вывод должен содержать по одному шестнадцатеричному идентификатору объекта в каждой строке (то есть такой же, как полученный &lt;code&gt;git for-each-ref --format='%(objectname)'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="aee562f05eaa47b0988f9365fa4403a675334ce1" translate="yes" xml:space="preserve">
          <source>When an argument can be misunderstood as either a revision or a path, they can be disambiguated by placing &lt;code&gt;--&lt;/code&gt; between them. E.g. &lt;code&gt;git diff -- HEAD&lt;/code&gt; is, &quot;I have a file called HEAD in my work tree. Please show changes between the version I staged in the index and what I have in the work tree for that file&quot;, not &quot;show difference between the HEAD commit and the work tree as a whole&quot;. You can say &lt;code&gt;git diff HEAD --&lt;/code&gt; to ask for the latter.</source>
          <target state="translated">Когда аргумент может быть неправильно истолкован как пересмотр или как путь, они могут быть устранены путем помещения &lt;code&gt;--&lt;/code&gt; между ними. Например, &lt;code&gt;git diff -- HEAD&lt;/code&gt; : &amp;laquo;У меня есть файл с именем HEAD в моем рабочем дереве. Пожалуйста, покажите изменения между версией, которую я разместил в индексе, и тем, что у меня есть в рабочем дереве для этого файла&amp;raquo;, а не &amp;laquo;покажите разницу между HEAD коммит и дерево работы в целом &quot;. Вы можете сказать &lt;code&gt;git diff HEAD --&lt;/code&gt; чтобы запросить последнее.</target>
        </trans-unit>
        <trans-unit id="8ed1e316e9f06aa8f0fbb451acc5e5dd1d53d618" translate="yes" xml:space="preserve">
          <source>When an argument may be understood either as a reference or as a file name, choose to understand it as a format-patch argument (&lt;code&gt;--format-patch&lt;/code&gt;) or as a file name (&lt;code&gt;--no-format-patch&lt;/code&gt;). By default, when such a conflict occurs, git send-email will fail.</source>
          <target state="translated">Если аргумент может пониматься либо как ссылка, либо как имя файла, выберите его понимание как аргумент патча формата ( &lt;code&gt;--format-patch&lt;/code&gt; ) или как имя файла ( &lt;code&gt;--no-format-patch&lt;/code&gt; ). По умолчанию, когда возникает такой конфликт, git send-email не работает.</target>
        </trans-unit>
        <trans-unit id="daa45faaafc93f57dcfa6219226fd8a2224c7353" translate="yes" xml:space="preserve">
          <source>When an interactive command (such as &lt;code&gt;git add --patch&lt;/code&gt;) shows a colorized diff, git will pipe the diff through the shell command defined by this configuration variable. The command may mark up the diff further for human consumption, provided that it retains a one-to-one correspondence with the lines in the original diff. Defaults to disabled (no filtering).</source>
          <target state="translated">Когда интерактивная команда (например, &lt;code&gt;git add --patch&lt;/code&gt; ) показывает раскрашенное различие, git передает различие через команду оболочки, определенную этой переменной конфигурации. Команда может дополнительно разметить разницу для использования человеком при условии, что она сохраняет взаимно однозначное соответствие со строками в исходной разнице. По умолчанию отключено (без фильтрации).</target>
        </trans-unit>
        <trans-unit id="66bd09d84d7f728fe64b22afe9c1d5b02faccf2f" translate="yes" xml:space="preserve">
          <source>When an optional Git branch name (or a Git commit object name) is specified as an argument, the subcommand works on the specified branch, not on the current branch.</source>
          <target state="translated">Когда в качестве аргумента указывается необязательное имя Git-ветки (или имя объекта Git-комита),подкоманда работает на указанной ветке,а не на текущей.</target>
        </trans-unit>
        <trans-unit id="54600ca959ccb5286a6125f852754e8a441f6246" translate="yes" xml:space="preserve">
          <source>When an update changes a branch (or more in general, a ref) that used to point at commit A to point at another commit B, it is called a fast-forward update if and only if B is a descendant of A.</source>
          <target state="translated">Когда обновление изменяет ответвление (или,в общем случае,ссылку),которое раньше указывало на фиксацию А,чтобы указать на другую фиксацию Б,оно называется быстрым перемотным обновлением,если и только если Б является потомком А.</target>
        </trans-unit>
        <trans-unit id="b999dfcfa57d71ee62dbc42f4d8a0527e63491d1" translate="yes" xml:space="preserve">
          <source>When applying a patch, detect a new or modified line that has whitespace errors. What are considered whitespace errors is controlled by &lt;code&gt;core.whitespace&lt;/code&gt; configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors.</source>
          <target state="translated">При применении патча обнаруживайте новую или измененную строку с ошибками в виде пробелов. То, что считается &lt;code&gt;core.whitespace&lt;/code&gt; пробелов, контролируется конфигурацией core.whitespace . По умолчанию завершающие пробелы (включая строки, состоящие исключительно из пробелов) и символ пробела, за которым сразу следует символ табуляции внутри начального отступа строки, считаются ошибками пробелов.</target>
        </trans-unit>
        <trans-unit id="b3581e25b4edfc3eae85f688560f931e31414d31" translate="yes" xml:space="preserve">
          <source>When applying a patch, ignore additions made by the patch. This can be used to extract the common part between two files by first running &lt;code&gt;diff&lt;/code&gt; on them and applying the result with this option, which would apply the deletion part but not the addition part.</source>
          <target state="translated">При применении патча игнорируйте дополнения, сделанные патчем. Это можно использовать для извлечения общей части между двумя файлами, сначала запустив для них &lt;code&gt;diff&lt;/code&gt; и применив результат с этой опцией, которая применила бы часть удаления, но не часть добавления.</target>
        </trans-unit>
        <trans-unit id="6bf2c606b0bf760a50dfcc2e9e2a1dfc6d6ce1b9" translate="yes" xml:space="preserve">
          <source>When applying a patch, ignore changes in whitespace in context lines if necessary. Context lines will preserve their whitespace, and they will not undergo whitespace fixing regardless of the value of the &lt;code&gt;--whitespace&lt;/code&gt; option. New lines will still be fixed, though.</source>
          <target state="translated">При применении патча при необходимости игнорируйте изменения пробелов в контекстных строках. Строки контекста сохранят свои пробелы, и они не будут подвергаться исправлению пробелов независимо от значения параметра &lt;code&gt;--whitespace&lt;/code&gt; . Однако новые строки все равно будут исправлены.</target>
        </trans-unit>
        <trans-unit id="588f408b6e1e0374e87fb8fe5ff6e5cd0dca42b8" translate="yes" xml:space="preserve">
          <source>When applying the patch only to the working tree, mark new files to be added to the index later (see &lt;code&gt;--intent-to-add&lt;/code&gt; option in &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;). This option is ignored unless running in a Git repository and &lt;code&gt;--index&lt;/code&gt; is not specified. Note that &lt;code&gt;--index&lt;/code&gt; could be implied by other options such as &lt;code&gt;--cached&lt;/code&gt; or &lt;code&gt;--3way&lt;/code&gt;.</source>
          <target state="translated">При применении патча только к рабочему дереву, отметьте новые файлы, которые будут добавлены в индекс позже (см. &lt;code&gt;--intent-to-add&lt;/code&gt; в &lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt; ). Этот параметр игнорируется, если он не запущен в репозитории Git и не указан &lt;code&gt;--index&lt;/code&gt; . Обратите внимание, что &lt;code&gt;--index&lt;/code&gt; может подразумеваться другими параметрами, такими как &lt;code&gt;--cached&lt;/code&gt; или &lt;code&gt;--3way&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="59fa333bf5332a3a74a0fa1b62097787ae41682d" translate="yes" xml:space="preserve">
          <source>When asking to &lt;code&gt;abort&lt;/code&gt; (which is the default), this program will die when encountering a signed tag. With &lt;code&gt;strip&lt;/code&gt;, the tags will silently be made unsigned, with &lt;code&gt;warn-strip&lt;/code&gt; they will be made unsigned but a warning will be displayed, with &lt;code&gt;verbatim&lt;/code&gt;, they will be silently exported and with &lt;code&gt;warn&lt;/code&gt;, they will be exported, but you will see a warning.</source>
          <target state="translated">При запросе на &lt;code&gt;abort&lt;/code&gt; (по умолчанию) эта программа умирает при обнаружении подписанного тега. С &lt;code&gt;strip&lt;/code&gt; теги будут автоматически сделаны без подписи, с &lt;code&gt;warn-strip&lt;/code&gt; они будут сделаны без подписи, но будет отображаться предупреждение, &lt;code&gt;verbatim&lt;/code&gt; они будут экспортированы без &lt;code&gt;warn&lt;/code&gt; , а с warn они будут экспортированы, но вы увидите предупреждение ,</target>
        </trans-unit>
        <trans-unit id="a094fa226ab8da9ad05df22ffe9e8c64cbd9aea9" translate="yes" xml:space="preserve">
          <source>When asking to &lt;code&gt;abort&lt;/code&gt; (which is the default), this program will die when encountering such a tag. With &lt;code&gt;drop&lt;/code&gt; it will omit such tags from the output. With &lt;code&gt;rewrite&lt;/code&gt;, if the tagged object is a commit, it will rewrite the tag to tag an ancestor commit (via parent rewriting; see &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;)</source>
          <target state="translated">При запросе на &lt;code&gt;abort&lt;/code&gt; (по умолчанию) эта программа умрет при обнаружении такого тега. С &lt;code&gt;drop&lt;/code&gt; такие теги будут исключены из вывода. При &lt;code&gt;rewrite&lt;/code&gt; , если помеченный объект является фиксацией, он перезапишет тег, чтобы пометить фиксацию предка (посредством родительской перезаписи; см. &lt;a href=&quot;git-rev-list&quot;&gt;Git-rev-list [1]&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="034f3e54dc418fd0aaba391926e4cdc6f9338cc5" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;--incremental&lt;/code&gt; option, the command outputs the result as it is built. The output generally will talk about lines touched by more recent commits first (i.e. the lines will be annotated out of order) and is meant to be used by interactive viewers.</source>
          <target state="translated">При вызове с параметром &lt;code&gt;--incremental&lt;/code&gt; команда выводит результат в том виде, в каком он был построен. Вывод обычно будет говорить о строках, затронутых более поздними коммитами (т.е. строки будут аннотированы не по порядку) и предназначен для использования интерактивными программами просмотра.</target>
        </trans-unit>
        <trans-unit id="37ed40c0b9c191bc52be1eea56e95c21c8c30c92" translate="yes" xml:space="preserve">
          <source>When checking out paths from the index, check out stage #2 (&lt;code&gt;ours&lt;/code&gt;) or #3 (&lt;code&gt;theirs&lt;/code&gt;) for unmerged paths.</source>
          <target state="translated">При проверке путей из индекса проверьте этап № 2 ( &lt;code&gt;ours&lt;/code&gt; ) или № 3 ( &lt;code&gt;theirs&lt;/code&gt; ) для несвязанных путей.</target>
        </trans-unit>
        <trans-unit id="b2d7eb083886da1526ca38a6780f9e98825df5e6" translate="yes" xml:space="preserve">
          <source>When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored.</source>
          <target state="translated">При извлечении путей из индекса не обманывайте неупорядоченные записи;вместо этого неупорядоченные записи игнорируются.</target>
        </trans-unit>
        <trans-unit id="87b021689017efd0b4fbe642f48fde6408f7cde4" translate="yes" xml:space="preserve">
          <source>When checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.</source>
          <target state="translated">При выделении путей из индекса эта опция позволяет воссоздать объединенное слияние в указанных путях.</target>
        </trans-unit>
        <trans-unit id="44968c91f62b2f1c7eb77848556b128eac9d4512" translate="yes" xml:space="preserve">
          <source>When cloning an SVN repository, if none of the options for describing the repository layout is used (--trunk, --tags, --branches, --stdlayout), &lt;code&gt;git svn clone&lt;/code&gt; will create a Git repository with completely linear history, where branches and tags appear as separate directories in the working copy. While this is the easiest way to get a copy of a complete repository, for projects with many branches it will lead to a working copy many times larger than just the trunk. Thus for projects using the standard directory structure (trunk/branches/tags), it is recommended to clone with option &lt;code&gt;--stdlayout&lt;/code&gt;. If the project uses a non-standard structure, and/or if branches and tags are not required, it is easiest to only clone one directory (typically trunk), without giving any repository layout options. If the full history with branches and tags is required, the options &lt;code&gt;--trunk&lt;/code&gt; / &lt;code&gt;--branches&lt;/code&gt; / &lt;code&gt;--tags&lt;/code&gt; must be used.</source>
          <target state="translated">При клонировании репозитория SVN, если не используется ни один из вариантов описания макета репозитория (--trunk, --tags, --branches, --stdlayout), &lt;code&gt;git svn clone&lt;/code&gt; создаст репозиторий Git с полностью линейной историей, где ветки и теги отображаются в рабочей копии как отдельные каталоги. Хотя это самый простой способ получить копию полного репозитория, для проектов с большим количеством ветвей рабочая копия будет во много раз больше, чем просто основная часть. Таким образом, для проектов, использующих стандартную структуру каталогов (ствол / ветки / теги), рекомендуется клонировать с опцией &lt;code&gt;--stdlayout&lt;/code&gt; , Если в проекте используется нестандартная структура и / или если ветки и теги не требуются, проще всего клонировать только один каталог (обычно магистральный), не задавая никаких параметров макета репозитория. Если требуется полная история с ветками и тегами, необходимо использовать параметры &lt;code&gt;--trunk&lt;/code&gt; / &lt;code&gt;--branches&lt;/code&gt; / &lt;code&gt;--tags&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cf5bdc8ee9de0e891bd2e2ffd6ad5374a27fb398" translate="yes" xml:space="preserve">
          <source>When cloning or pulling a repository containing submodules the submodules will not be checked out by default; You can instruct &lt;code&gt;clone&lt;/code&gt; to recurse into submodules. The &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; subcommands of &lt;code&gt;git submodule&lt;/code&gt; will maintain submodules checked out and at an appropriate revision in your working tree. Alternatively you can set &lt;code&gt;submodule.recurse&lt;/code&gt; to have &lt;code&gt;checkout&lt;/code&gt; recursing into submodules.</source>
          <target state="translated">При клонировании или извлечении репозитория, содержащего подмодули, подмодули не будут извлечены по умолчанию; Вы можете указать &lt;code&gt;clone&lt;/code&gt; на рекурсию в подмодули. В &lt;code&gt;init&lt;/code&gt; и &lt;code&gt;update&lt;/code&gt; подкоманды &lt;code&gt;git submodule&lt;/code&gt; будет поддерживать подмодулях проверили и на соответствующем пересмотре в вашем рабочем дереве. В качестве альтернативы вы можете установить &lt;code&gt;submodule.recurse&lt;/code&gt; иметь &lt;code&gt;checkout&lt;/code&gt; рекурсии в подмодули.</target>
        </trans-unit>
        <trans-unit id="2bdda0ba49ff183f8b76fb42fb3146b89e404d42" translate="yes" xml:space="preserve">
          <source>When cloning or pulling a repository containing submodules the submodules will not be checked out by default; you can instruct &lt;code&gt;clone&lt;/code&gt; to recurse into submodules. The &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; subcommands of &lt;code&gt;git submodule&lt;/code&gt; will maintain submodules checked out and at an appropriate revision in your working tree. Alternatively you can set &lt;code&gt;submodule.recurse&lt;/code&gt; to have &lt;code&gt;checkout&lt;/code&gt; recursing into submodules (note that &lt;code&gt;submodule.recurse&lt;/code&gt; also affects other Git commands, see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for a complete list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96f700dec6ecf67635f001fe97af20a3a1af7ba" translate="yes" xml:space="preserve">
          <source>When combining multiple &lt;code&gt;--contains&lt;/code&gt; and &lt;code&gt;--no-contains&lt;/code&gt; filters, only references that contain at least one of the &lt;code&gt;--contains&lt;/code&gt; commits and contain none of the &lt;code&gt;--no-contains&lt;/code&gt; commits are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3693ecef45adf0e594fc21eeb7dc1180a98b303e" translate="yes" xml:space="preserve">
          <source>When combining multiple &lt;code&gt;--merged&lt;/code&gt; and &lt;code&gt;--no-merged&lt;/code&gt; filters, only references that are reachable from at least one of the &lt;code&gt;--merged&lt;/code&gt; commits and from none of the &lt;code&gt;--no-merged&lt;/code&gt; commits are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f5e261fa8e1325a05e77f0fa02cd4e804a016b" translate="yes" xml:space="preserve">
          <source>When committing fixups, consider using &lt;code&gt;merge&lt;/code&gt; to connect the commit(s) which are supplying file revisions to the fixup branch. Doing so will allow tools such as &lt;code&gt;git blame&lt;/code&gt; to track through the real commit history and properly annotate the source files.</source>
          <target state="translated">При фиксации исправлений рассмотрите возможность использования &lt;code&gt;merge&lt;/code&gt; для подключения фиксации (ов), которые предоставляют версии файлов в ветку исправлений. Это позволит таким инструментам, как &lt;code&gt;git blame&lt;/code&gt; , отслеживать реальную историю коммитов и правильно аннотировать исходные файлы.</target>
        </trans-unit>
        <trans-unit id="187746ad8497cb1dac2dfe493269450955422d85" translate="yes" xml:space="preserve">
          <source>When committing to svn from Git (as part of &lt;code&gt;set-tree&lt;/code&gt; or &lt;code&gt;dcommit&lt;/code&gt; operations), if the existing log message doesn&amp;rsquo;t already have a &lt;code&gt;From:&lt;/code&gt; or &lt;code&gt;Signed-off-by:&lt;/code&gt; line, append a &lt;code&gt;From:&lt;/code&gt; line based on the Git commit&amp;rsquo;s author string. If you use this, then &lt;code&gt;--use-log-author&lt;/code&gt; will retrieve a valid author string for all commits.</source>
          <target state="translated">При фиксации в svn из Git (как часть операций &lt;code&gt;set-tree&lt;/code&gt; или &lt;code&gt;dcommit&lt;/code&gt; ), если в существующем сообщении журнала еще нет строки &lt;code&gt;From:&lt;/code&gt; или &lt;code&gt;Signed-off-by:&lt;/code&gt; , добавьте строку &lt;code&gt;From:&lt;/code&gt; на основе коммита Git авторская строка. Если вы используете это, то &lt;code&gt;--use-log-author&lt;/code&gt; будет получать действительную строку автора для всех коммитов.</target>
        </trans-unit>
        <trans-unit id="df4d9e8de337675930b7c7d126c3cbfdb0d919e8" translate="yes" xml:space="preserve">
          <source>When common porcelain operations that create objects are run, they will check whether the repository has grown substantially since the last maintenance, and if so run &lt;code&gt;git gc&lt;/code&gt; automatically. See &lt;code&gt;gc.auto&lt;/code&gt; below for how to disable this behavior.</source>
          <target state="translated">Когда выполняются обычные операции по созданию объектов, они проверяют, существенно ли увеличился репозиторий с момента последнего обслуживания, и если да, то запускают &lt;code&gt;git gc&lt;/code&gt; автоматически. См. &lt;code&gt;gc.auto&lt;/code&gt; ниже, чтобы узнать, как отключить это поведение.</target>
        </trans-unit>
        <trans-unit id="5cef5cc19d56f034a0850f6ce0dc6add0c966a70" translate="yes" xml:space="preserve">
          <source>When comparing two trees, the ID of both trees (separated by a space and terminated by a newline) is printed before the difference. When comparing commits, the ID of the first (or only) commit, followed by a newline, is printed.</source>
          <target state="translated">При сравнении двух деревьев,перед разницей выводится идентификатор обоих деревьев (разделенных пробелом и завершенных новой строкой).При сравнении коммитов выводится идентификатор первой (или единственной)коммиты,за которой следует новая строка.</target>
        </trans-unit>
        <trans-unit id="fe249445673b1134855083e0c3b366c4aeeb2c8e" translate="yes" xml:space="preserve">
          <source>When converting a value to its canonical form using the &lt;code&gt;--type=bool&lt;/code&gt; type specifier, &lt;code&gt;git config&lt;/code&gt; will ensure that the output is &quot;true&quot; or &quot;false&quot; (spelled in lowercase).</source>
          <target state="translated">При преобразовании значения в его каноническую форму с использованием &lt;code&gt;--type=bool&lt;/code&gt; типа --type = bool , &lt;code&gt;git config&lt;/code&gt; гарантирует, что вывод будет &amp;laquo;истинным&amp;raquo; или &amp;laquo;ложным&amp;raquo; (написанным строчными буквами).</target>
        </trans-unit>
        <trans-unit id="5800d8777d6f116b967a3c4b503079e04a8dd27b" translate="yes" xml:space="preserve">
          <source>When copying a remote repository, you&amp;rsquo;ll want to at a minimum update the index cache when you do this, and especially with other peoples' repositories you often want to make sure that the index cache is in some known state (you don&amp;rsquo;t know &lt;strong&gt;what&lt;/strong&gt; they&amp;rsquo;ve done and not yet checked in), so usually you&amp;rsquo;ll precede the &lt;code&gt;git update-index&lt;/code&gt; with a</source>
          <target state="translated">При копировании удаленного репозитория вы захотите как минимум обновить кеш индекса, когда вы это сделаете, и особенно с репозиториями других людей вы часто хотите убедиться, что кеш индекса находится в каком-то известном состоянии (вы не знаю , &lt;strong&gt;что&lt;/strong&gt; они сделали , и еще не зарегистрировались), поэтому , как правило , вы будете предшествовать &lt;code&gt;git update-index&lt;/code&gt; с а</target>
        </trans-unit>
        <trans-unit id="a0c9c076efebd050282e8220820bf37e469a5914" translate="yes" xml:space="preserve">
          <source>When copying notes during a rewrite (see the &quot;notes.rewrite.&amp;lt;command&amp;gt;&quot; option), determines what to do if the target commit already has a note. Must be one of &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;concatenate&lt;/code&gt;, &lt;code&gt;cat_sort_uniq&lt;/code&gt;, or &lt;code&gt;ignore&lt;/code&gt;. Defaults to &lt;code&gt;concatenate&lt;/code&gt;.</source>
          <target state="translated">При копировании заметок во время перезаписи (см. Параметр &amp;laquo;notes.rewrite. &amp;lt;command&amp;gt;&amp;raquo;) определяет, что делать, если у целевого коммита уже есть заметка. Должен быть одним из вариантов &lt;code&gt;overwrite&lt;/code&gt; , &lt;code&gt;concatenate&lt;/code&gt; , &lt;code&gt;cat_sort_uniq&lt;/code&gt; или &lt;code&gt;ignore&lt;/code&gt; . По умолчанию &lt;code&gt;concatenate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f2daf889c63a8ae3ef0bd84b9e0a7bae3186ea5d" translate="yes" xml:space="preserve">
          <source>When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. May be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times.</source>
          <target state="translated">При копировании заметок во время перезаписи укажите (полностью квалифицированный)номер ссылки,чьи заметки должны быть скопированы.Это может быть глобус,в этом случае будут скопированы заметки во всех совпадающих ссылках.Вы также можете указать эту конфигурацию несколько раз.</target>
        </trans-unit>
        <trans-unit id="c445d369a5c50740a59f3ad28697ace644e2811e" translate="yes" xml:space="preserve">
          <source>When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. The ref may be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times.</source>
          <target state="translated">При копировании заметок во время перезаписи укажите (полностью квалифицированный)номер ссылки,чьи заметки следует скопировать.Ссылка может быть глобусом,в этом случае будут скопированы заметки во всех совпадающих ссылках.Вы также можете указать эту конфигурацию несколько раз.</target>
        </trans-unit>
        <trans-unit id="1243aaab79ff33e7a2d49c8eb8b4f16703a1c016" translate="yes" xml:space="preserve">
          <source>When copying notes during a rewrite, what to do if the target commit already has a note. Must be one of &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;concatenate&lt;/code&gt;, &lt;code&gt;cat_sort_uniq&lt;/code&gt;, or &lt;code&gt;ignore&lt;/code&gt;. Defaults to &lt;code&gt;concatenate&lt;/code&gt;.</source>
          <target state="translated">Что делать при копировании заметок во время перезаписи, если в целевом коммите уже есть заметка. Должен быть одним из вариантов &lt;code&gt;overwrite&lt;/code&gt; , &lt;code&gt;concatenate&lt;/code&gt; , &lt;code&gt;cat_sort_uniq&lt;/code&gt; или &lt;code&gt;ignore&lt;/code&gt; . По умолчанию &lt;code&gt;concatenate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb6ea94e62e06bb5ee870300111df0d9f630f320" translate="yes" xml:space="preserve">
          <source>When copying notes during a rewrite, what to do if the target commit already has a note. Must be one of &lt;code&gt;overwrite&lt;/code&gt;, &lt;code&gt;concatenate&lt;/code&gt;, &lt;code&gt;cat_sort_uniq&lt;/code&gt;, or &lt;code&gt;ignore&lt;/code&gt;. This overrides the &lt;code&gt;core.rewriteMode&lt;/code&gt; setting.</source>
          <target state="translated">Что делать при копировании заметок во время перезаписи, если в целевом коммите уже есть заметка. Должен быть одним из вариантов &lt;code&gt;overwrite&lt;/code&gt; , &lt;code&gt;concatenate&lt;/code&gt; , &lt;code&gt;cat_sort_uniq&lt;/code&gt; или &lt;code&gt;ignore&lt;/code&gt; . Это отменяет настройку &lt;code&gt;core.rewriteMode&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa7e030aba2e9a9a4e5882753f19d2b4a66b4e16" translate="yes" xml:space="preserve">
          <source>When creating a new branch, if &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is a branch, mark it as &quot;upstream&quot; from the new branch. This is the default if &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is a remote-tracking branch. See &quot;--track&quot; in &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">При создании новой ветки, если &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; является ветвью, пометьте ее как &amp;laquo;восходящую&amp;raquo; от новой ветки. Это значение по умолчанию, если &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; является ветвью удаленного отслеживания. См. &quot;--Track&quot; в &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; для подробностей.</target>
        </trans-unit>
        <trans-unit id="4e04dc75cba18b40521f918d2128a9cc7f50298f" translate="yes" xml:space="preserve">
          <source>When creating a new branch, if &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is a branch, mark it as &quot;upstream&quot; from the new branch. This is the default if &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is a remote-tracking branch. See &lt;code&gt;--track&lt;/code&gt; in &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d8049451fa958ada38921d90347d3ee7c4d771" translate="yes" xml:space="preserve">
          <source>When creating a new branch, set up &quot;upstream&quot; configuration. &lt;code&gt;-c&lt;/code&gt; is implied. See &lt;code&gt;--track&lt;/code&gt; in &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">При создании новой ветки настройте конфигурацию &amp;laquo;восходящего потока&amp;raquo;. &lt;code&gt;-c&lt;/code&gt; подразумевается. См. &lt;code&gt;--track&lt;/code&gt; в &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; для подробностей.</target>
        </trans-unit>
        <trans-unit id="fc590aa31fec73c4296b9f428640a84b6d3e91a7" translate="yes" xml:space="preserve">
          <source>When creating a new branch, set up &quot;upstream&quot; configuration. See &quot;--track&quot; in &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">При создании новой ветки настройте конфигурацию &amp;laquo;восходящего потока&amp;raquo;. См. &quot;--Track&quot; в &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; для подробностей.</target>
        </trans-unit>
        <trans-unit id="67211ea9327a11f7c102d4d6622e44707e57316e" translate="yes" xml:space="preserve">
          <source>When creating a new branch, set up &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; configuration entries to mark the start-point branch as &quot;upstream&quot; from the new branch. This configuration will tell git to show the relationship between the two branches in &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git branch -v&lt;/code&gt;. Furthermore, it directs &lt;code&gt;git pull&lt;/code&gt; without arguments to pull from the upstream when the new branch is checked out.</source>
          <target state="translated">При создании новой ветви настройте записи конфигурации &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; и &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; , чтобы отметить ветвь начальной точки как &amp;laquo;восходящую&amp;raquo; от новой ветки. Эта конфигурация скажет git показать взаимосвязь между двумя ветвями в &lt;code&gt;git status&lt;/code&gt; и &lt;code&gt;git branch -v&lt;/code&gt; . Кроме того, он предписывает &lt;code&gt;git pull&lt;/code&gt; без аргументов извлекать из восходящего потока, когда новая ветка проверяется.</target>
        </trans-unit>
        <trans-unit id="30421c6d8900807173aa121649f943a72b9b4dbe" translate="yes" xml:space="preserve">
          <source>When creating a packed archive in a repository that has existing packs, the command reuses existing deltas. This sometimes results in a slightly suboptimal pack. This flag tells the command not to reuse existing deltas but compute them from scratch.</source>
          <target state="translated">При создании упакованного архива в репозитории,содержащем существующие пакеты,команда повторно использует существующие дельты.В результате иногда получается несколько неоптимальный пакет.Этот флаг говорит команде не использовать существующие дельты повторно,а вычислять их с нуля.</target>
        </trans-unit>
        <trans-unit id="40641904740525d3a46d2f53ea1f042429403d62" translate="yes" xml:space="preserve">
          <source>When creating files, prepend &amp;lt;string&amp;gt; (usually a directory including a trailing /)</source>
          <target state="translated">При создании файлов добавьте &amp;lt;string&amp;gt; (обычно это каталог, содержащий завершающий /)</target>
        </trans-unit>
        <trans-unit id="55d2573d14b31c180f96244b6210a62251fe4b79" translate="yes" xml:space="preserve">
          <source>When dealing with &lt;code&gt;git diff-tree&lt;/code&gt; output, it takes advantage of the fact that the patch is prefixed with the object name of the commit, and outputs two 40-byte hexadecimal strings. The first string is the patch ID, and the second string is the commit ID. This can be used to make a mapping from patch ID to commit ID.</source>
          <target state="translated">При работе с выводом &lt;code&gt;git diff-tree&lt;/code&gt; он использует тот факт, что патч имеет префикс с именем объекта фиксации и выводит две 40-байтовые шестнадцатеричные строки. Первая строка - это идентификатор патча, а вторая строка - это идентификатор фиксации. Это можно использовать для сопоставления идентификатора патча с идентификатором фиксации.</target>
        </trans-unit>
        <trans-unit id="d776ef3252048cd13183a8501d7c0015731386cd" translate="yes" xml:space="preserve">
          <source>When deciding what attributes are assigned to a path, Git consults &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; file (which has the highest precedence), &lt;code&gt;.gitattributes&lt;/code&gt; file in the same directory as the path in question, and its parent directories up to the toplevel of the work tree (the further the directory that contains &lt;code&gt;.gitattributes&lt;/code&gt; is from the path in question, the lower its precedence). Finally global and system-wide files are considered (they have the lowest precedence).</source>
          <target state="translated">При принятии решения, какие атрибуты назначены пути, Git &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; (который имеет наивысший приоритет), файлу &lt;code&gt;.gitattributes&lt;/code&gt; в том же каталоге, что и рассматриваемый путь, и его родительским каталогам до верхнего уровня дерево работы (чем дальше каталог, содержащий &lt;code&gt;.gitattributes&lt;/code&gt; , от рассматриваемого пути, тем ниже его приоритет). Наконец, рассматриваются глобальные и общесистемные файлы (они имеют самый низкий приоритет).</target>
        </trans-unit>
        <trans-unit id="be47e73cae5925c270f0353e0b448f44fba38688" translate="yes" xml:space="preserve">
          <source>When deinitialized or deleted (see below), the submodule&amp;rsquo;s Git directory is automatically moved to &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; of the superproject.</source>
          <target state="translated">При деинициализации или удалении (см. Ниже) каталог Git подмодуля автоматически перемещается в &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; суперпроекта.</target>
        </trans-unit>
        <trans-unit id="d6198e5c096df70165a4ba7282b14c9062838d85" translate="yes" xml:space="preserve">
          <source>When displaying names of reachable objects, in addition to the SHA-1 also display a name that describes &lt;strong&gt;how&lt;/strong&gt; they are reachable, compatible with &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt;, e.g. &lt;code&gt;HEAD@{1234567890}~25^2:src/&lt;/code&gt;.</source>
          <target state="translated">При отображении имен доступных объектов в дополнение к SHA-1 также отображается имя, описывающее, &lt;strong&gt;как&lt;/strong&gt; они достижимы, совместимые с &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse [1]&lt;/a&gt; , например &lt;code&gt;HEAD@{1234567890}~25^2:src/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39ccc422d97039f55d5b75b982904e65809f0ab0" translate="yes" xml:space="preserve">
          <source>When doing a dry-run, give the output in a porcelain-ready format. See &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; for details. Implies &lt;code&gt;--dry-run&lt;/code&gt;.</source>
          <target state="translated">При выполнении пробного прогона дайте результат в формате, готовом для фарфора. Подробнее см. &lt;a href=&quot;git-status&quot;&gt;Git-status [1]&lt;/a&gt; . Подразумевает &lt;code&gt;--dry-run&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91fdf83cd4cf2351c13b94fc0d59dcd9a51c5b73" translate="yes" xml:space="preserve">
          <source>When doing a dry-run, give the output in the long-format. Implies &lt;code&gt;--dry-run&lt;/code&gt;.</source>
          <target state="translated">При выполнении пробного прогона дайте результат в длинном формате. Подразумевает &lt;code&gt;--dry-run&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7320eee3c7f6d76666dfe697952518d827846a03" translate="yes" xml:space="preserve">
          <source>When doing a dry-run, give the output in the short-format. See &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; for details. Implies &lt;code&gt;--dry-run&lt;/code&gt;.</source>
          <target state="translated">При выполнении пробного прогона дайте результат в кратком формате. Подробнее см. &lt;a href=&quot;git-status&quot;&gt;Git-status [1]&lt;/a&gt; . Подразумевает &lt;code&gt;--dry-run&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9aa102d4a4b04252e6d4b5a0080dce309ef777d4" translate="yes" xml:space="preserve">
          <source>When doing a repository conversion, use a unique mark per commit (&lt;code&gt;mark :&amp;lt;n&amp;gt;&lt;/code&gt;) and supply the --export-marks option on the command line. fast-import will dump a file which lists every mark and the Git object SHA-1 that corresponds to it. If the frontend can tie the marks back to the source repository, it is easy to verify the accuracy and completeness of the import by comparing each Git commit to the corresponding source revision.</source>
          <target state="translated">При преобразовании репозитория используйте уникальную метку для каждой фиксации ( &lt;code&gt;mark :&amp;lt;n&amp;gt;&lt;/code&gt; ) и укажите параметр --export-Mark в командной строке. fast-import создаст дамп файла, в котором перечислены все метки и соответствующий ей объект Git SHA-1. Если интерфейс может привязать метки обратно к исходному репозиторию, легко проверить точность и полноту импорта, сравнив каждую фиксацию Git с соответствующей исходной ревизией.</target>
        </trans-unit>
        <trans-unit id="6f397bf185a0b1be7403f8c718221517e54d79b2" translate="yes" xml:space="preserve">
          <source>When editing the commit message, start the editor with the contents in the given file. The &lt;code&gt;commit.template&lt;/code&gt; configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-F&lt;/code&gt; options.</source>
          <target state="translated">При редактировании сообщения о фиксации запустите редактор с содержимым данного файла. &lt;code&gt;commit.template&lt;/code&gt; переменной конфигурации часто используются , чтобы дать этот параметр неявно к команде. Этот механизм может использоваться проектами, которые хотят дать участникам подсказки о том, что писать в сообщении в каком порядке. Если пользователь выходит из редактора, не отредактировав сообщение, фиксация прерывается. Это не действует, если сообщение отправлено другими способами, например, с параметрами &lt;code&gt;-m&lt;/code&gt; или &lt;code&gt;-F&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7835173f74e58e15c8891f5a3e0b3af743fd1c66" translate="yes" xml:space="preserve">
          <source>When editing, provide the raw object contents rather than pretty-printed ones. Currently this only affects trees, which will be shown in their binary form. This is harder to work with, but can help when repairing a tree that is so corrupted it cannot be pretty-printed. Note that you may need to configure your editor to cleanly read and write binary data.</source>
          <target state="translated">При редактировании,предоставьте необработанное содержимое объекта,а не красиво напечатанное.В настоящее время это касается только деревьев,которые будут отображаться в их двоичном виде.С этим сложнее работать,но это может помочь при восстановлении дерева,которое настолько повреждено,что не может быть красиво напечатано.Обратите внимание,что вам может понадобиться настроить редактор на чистое чтение и запись двоичных данных.</target>
        </trans-unit>
        <trans-unit id="ce47e94310de9fcb0d82c1f052bbcc38f3a11f76" translate="yes" xml:space="preserve">
          <source>When enabled, the default &lt;code&gt;post-update&lt;/code&gt; hook runs &lt;code&gt;git update-server-info&lt;/code&gt; to keep the information used by dumb transports (e.g., HTTP) up to date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.</source>
          <target state="translated">Если этот параметр включен, обработчик &lt;code&gt;post-update&lt;/code&gt; по умолчанию запускает &lt;code&gt;git update-server-info&lt;/code&gt; , чтобы поддерживать информацию, используемую &amp;laquo;тупыми&amp;raquo; транспортами (например, HTTP), в актуальном состоянии. Если вы публикуете репозиторий Git, доступный через HTTP, вам, вероятно, следует включить эту ловушку.</target>
        </trans-unit>
        <trans-unit id="a529b1482d7666548417edb1d901df1240194350" translate="yes" xml:space="preserve">
          <source>When encountering a non-ASCII message or subject that does not declare its encoding, add headers/quoting to indicate it is encoded in &amp;lt;encoding&amp;gt;. Default is the value of the &lt;code&gt;sendemail.assume8bitEncoding&lt;/code&gt;; if that is unspecified, this will be prompted for if any non-ASCII files are encountered.</source>
          <target state="translated">При обнаружении сообщения или темы, отличной от ASCII, которые не объявляют свою кодировку, добавьте заголовки / цитаты, чтобы указать, что они закодированы в &amp;lt;encoding&amp;gt;. По умолчанию используется значение &lt;code&gt;sendemail.assume8bitEncoding&lt;/code&gt; ; если это не указано, будет запрошено, если будут обнаружены какие-либо файлы, отличные от ASCII.</target>
        </trans-unit>
        <trans-unit id="c331bd8bb74634e4f18684aaa53f36ba8f8cf37d" translate="yes" xml:space="preserve">
          <source>When erasing credentials, matching credentials will be erased from all files.</source>
          <target state="translated">При стирании учетных данных,соответствующие учетные данные будут удалены из всех файлов.</target>
        </trans-unit>
        <trans-unit id="74e58a3904b06fc63c005d33dc33b553098868b7" translate="yes" xml:space="preserve">
          <source>When extensions.worktreeConfig is enabled, the config file &lt;code&gt;.git/worktrees/&amp;lt;id&amp;gt;/config.worktree&lt;/code&gt; is read after &lt;code&gt;.git/config&lt;/code&gt; is.</source>
          <target state="translated">Когда включен extension.worktreeConfig, файл конфигурации &lt;code&gt;.git/worktrees/&amp;lt;id&amp;gt;/config.worktree&lt;/code&gt; читается после &lt;code&gt;.git/config&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a73371934954e7de3c00c5b21339d1552e97b06" translate="yes" xml:space="preserve">
          <source>When false, merge the current branch into the upstream branch.</source>
          <target state="translated">При ложном срабатывании слить текущее ответвление с восходящим.</target>
        </trans-unit>
        <trans-unit id="d5dfb7a500ca38e6f311c3fe54f4fbaf71bc47ce" translate="yes" xml:space="preserve">
          <source>When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of &lt;code&gt;remote.*.fetch&lt;/code&gt; configuration variables for the remote repository. Providing an empty &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; to the &lt;code&gt;--refmap&lt;/code&gt; option causes Git to ignore the configured refspecs and rely entirely on the refspecs supplied as command-line arguments. See section on &quot;Configured Remote-tracking Branches&quot; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8afe72df4116adf55dd615031acfafbceae0ec5" translate="yes" xml:space="preserve">
          <source>When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of &lt;code&gt;remote.*.fetch&lt;/code&gt; configuration variables for the remote repository. See section on &quot;Configured Remote-tracking Branches&quot; for details.</source>
          <target state="translated">При извлечении ссылок, перечисленных в командной строке, используйте указанный refspec (может быть задан более одного раза) для сопоставления ссылок с ветвями удаленного отслеживания вместо значений переменных конфигурации &lt;code&gt;remote.*.fetch&lt;/code&gt; для удаленного репозитория. См. Подробности в разделе &amp;laquo;Настроенные ветви удаленного отслеживания&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="f131c02a4584603f0de6ca46a404ddf3258dbf13" translate="yes" xml:space="preserve">
          <source>When files are modified outside of Git, the user will need to stage the modified files explicitly (e.g. see &lt;code&gt;Examples&lt;/code&gt; section in &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;). Git will not normally detect changes to those files.</source>
          <target state="translated">Когда файлы изменяются вне Git, пользователю нужно будет явно обработать измененные файлы (например, см. Раздел &amp;laquo; &lt;code&gt;Examples&lt;/code&gt; &amp;raquo; в &lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]&lt;/a&gt; ). Git обычно не обнаруживает изменений в этих файлах.</target>
        </trans-unit>
        <trans-unit id="e95f7718835508fa2f714691dae7615b5ccee03a" translate="yes" xml:space="preserve">
          <source>When filtering history with &lt;code&gt;&amp;lt;path&amp;gt;&amp;hellip;​&lt;/code&gt;, does not prune some history. (See &quot;History simplification&quot; in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; for a more detailed explanation.)</source>
          <target state="translated">При фильтрации истории с &lt;code&gt;&amp;lt;path&amp;gt;&amp;hellip;​&lt;/code&gt; , не подрезать немного истории. (См. &amp;laquo;Упрощение истории&amp;raquo; в &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; для более подробного объяснения.)</target>
        </trans-unit>
        <trans-unit id="18f94df4064f0faddb37415d13a088dd57356563" translate="yes" xml:space="preserve">
          <source>When first created, objects are stored in individual files, but for efficiency may later be compressed together into &quot;pack files&quot;.</source>
          <target state="translated">При первом создании объекты хранятся в отдельных файлах,но для большей эффективности в дальнейшем могут быть сжаты вместе в &quot;пакетные файлы&quot;.</target>
        </trans-unit>
        <trans-unit id="3ce1186a221491da0c957498f84e962314b0f4f4" translate="yes" xml:space="preserve">
          <source>When given a range of commits to display (e.g. &lt;code&gt;commit1..commit2&lt;/code&gt; or &lt;code&gt;commit2 ^commit1&lt;/code&gt;), only display commits that exist directly on the ancestry chain between the &lt;code&gt;commit1&lt;/code&gt; and &lt;code&gt;commit2&lt;/code&gt;, i.e. commits that are both descendants of &lt;code&gt;commit1&lt;/code&gt;, and ancestors of &lt;code&gt;commit2&lt;/code&gt;.</source>
          <target state="translated">Когда задан диапазон отображаемых &lt;code&gt;commit1..commit2&lt;/code&gt; (например, commit1..commit2 или &lt;code&gt;commit2 ^commit1&lt;/code&gt; ), отображать только те коммиты, которые существуют непосредственно в цепочке предков между &lt;code&gt;commit1&lt;/code&gt; и &lt;code&gt;commit2&lt;/code&gt; , т.е. коммиты, которые являются потомками &lt;code&gt;commit1&lt;/code&gt; и предками &lt;code&gt;commit2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e006844e32fc3d063be827d3911798e9ae2b69bd" translate="yes" xml:space="preserve">
          <source>When given a range of commits to display (e.g. &lt;code&gt;commit1..commit2&lt;/code&gt; or &lt;code&gt;commit2 ^commit1&lt;/code&gt;), only display commits that exist directly on the ancestry chain between the &lt;code&gt;commit1&lt;/code&gt; and &lt;code&gt;commit2&lt;/code&gt;, i.e. commits that are both descendants of &lt;code&gt;commit1&lt;/code&gt;, and ancestors of &lt;code&gt;commit2&lt;/code&gt;. (See &quot;History simplification&quot; in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; for a more detailed explanation.)</source>
          <target state="translated">Когда задан диапазон отображаемых &lt;code&gt;commit1..commit2&lt;/code&gt; (например, commit1..commit2 или &lt;code&gt;commit2 ^commit1&lt;/code&gt; ), отображать только те коммиты, которые существуют непосредственно в цепочке предков между &lt;code&gt;commit1&lt;/code&gt; и &lt;code&gt;commit2&lt;/code&gt; , т.е. коммиты, которые являются потомками &lt;code&gt;commit1&lt;/code&gt; и предками &lt;code&gt;commit2&lt;/code&gt; . (См. &amp;laquo;Упрощение истории&amp;raquo; в &lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt; для более подробного объяснения.)</target>
        </trans-unit>
        <trans-unit id="8281565ed0f01821dd04f5b4f8a282147fc8eb15" translate="yes" xml:space="preserve">
          <source>When given a two-part name section.key, the value for section.&amp;lt;url&amp;gt;.key whose &amp;lt;url&amp;gt; part matches the best to the given URL is returned (if no such key exists, the value for section.key is used as a fallback). When given just the section as name, do so for all the keys in the section and list them. Returns error code 1 if no value is found.</source>
          <target state="translated">При задании имени section.key, состоящего из двух частей, возвращается значение для section. &amp;lt;url&amp;gt; .key, часть &amp;lt;url&amp;gt; которого лучше всего соответствует заданному URL-адресу (если такой ключ не существует, используется значение для section.key как запасной вариант). Если в качестве имени указан только раздел, сделайте это для всех ключей в разделе и перечислите их. Возвращает код ошибки 1, если значение не найдено.</target>
        </trans-unit>
        <trans-unit id="f88bacf945cb9e0553c03a8ac1d906d306ca24eb" translate="yes" xml:space="preserve">
          <source>When given an SVN revision number of the form &lt;code&gt;rN&lt;/code&gt;, returns the corresponding Git commit hash (this can optionally be followed by a tree-ish to specify which branch should be searched). When given a tree-ish, returns the corresponding SVN revision number.</source>
          <target state="translated">Когда указан номер версии SVN в форме &lt;code&gt;rN&lt;/code&gt; , возвращает соответствующий хеш фиксации Git (при желании за ним может следовать древовидный код, указывающий, в какой ветви следует искать). Когда задано дерево, возвращает соответствующий номер версии SVN.</target>
        </trans-unit>
        <trans-unit id="a96423d691859ec79cd98b29f7765677feb267ba" translate="yes" xml:space="preserve">
          <source>When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end.</source>
          <target state="translated">Когда дано,а доступ к репозиторию для клонирования осуществляется через ssh,это указывает путь,не по умолчанию,для команды,запущенной на другом конце.</target>
        </trans-unit>
        <trans-unit id="d1fb59a7ba9cbb456b044d488d1684f86345d108" translate="yes" xml:space="preserve">
          <source>When given, and the repository to fetch from is handled by &lt;code&gt;git fetch-pack&lt;/code&gt;, &lt;code&gt;--exec=&amp;lt;upload-pack&amp;gt;&lt;/code&gt; is passed to the command to specify non-default path for the command run on the other end.</source>
          <target state="translated">Когда он задан, и репозиторий, из которого выполняется выборка, обрабатывается &lt;code&gt;git fetch-pack&lt;/code&gt; , &lt;code&gt;--exec=&amp;lt;upload-pack&amp;gt;&lt;/code&gt; чтобы указать путь , отличный от пути по умолчанию для команды, выполняемой на другом конце.</target>
        </trans-unit>
        <trans-unit id="347806ba4d643d64e35fb6159f6ca9df9bd36627" translate="yes" xml:space="preserve">
          <source>When giving multiple pattern expressions combined with &lt;code&gt;--or&lt;/code&gt;, this flag is specified to limit the match to files that have lines to match all of them.</source>
          <target state="translated">При &lt;code&gt;--or&lt;/code&gt; нескольких шаблонных выражений в сочетании с --or этот флаг указывается, чтобы ограничить совпадение файлами, в которых есть строки, соответствующие всем из них.</target>
        </trans-unit>
        <trans-unit id="a0b6fe15df65f2d5daa97101d52d41abe4f1ad3a" translate="yes" xml:space="preserve">
          <source>When grepping the object store (with &lt;code&gt;--cached&lt;/code&gt; or giving tree objects), running with multiple threads might perform slower than single threaded if &lt;code&gt;--textconv&lt;/code&gt; is given and there&amp;rsquo;re too many text conversions. So if you experience low performance in this case, it might be desirable to use &lt;code&gt;--threads=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aea2178dff194f0c4c01be5fd5d2a4667a09068" translate="yes" xml:space="preserve">
          <source>When he&amp;rsquo;s ready, he tells Alice to pull changes from the repository at /home/bob/myrepo. She does this with:</source>
          <target state="translated">Когда он готов, он говорит Алисе получить изменения из репозитория в / home / bob / myrepo. Она делает это с помощью:</target>
        </trans-unit>
        <trans-unit id="66bba6f8c73ac5f72ec362ac6e58a5210f96d2e5" translate="yes" xml:space="preserve">
          <source>When importing a renamed file or directory, simply delete the old name(s) and modify the new name(s) during the corresponding commit. Git performs rename detection after-the-fact, rather than explicitly during a commit.</source>
          <target state="translated">При импорте переименованного файла или каталога просто удалите старое имя (имена)и измените новое имя (имена)во время соответствующей фиксации.Git выполняет определение переименования после факта,а не явно во время фиксации.</target>
        </trans-unit>
        <trans-unit id="547b791fe6e4a112ecfb6e63c2e9ee0d26e77b05" translate="yes" xml:space="preserve">
          <source>When in cone mode, the &lt;code&gt;git sparse-checkout set&lt;/code&gt; subcommand takes a list of directories instead of a list of sparse-checkout patterns. In this mode, the command &lt;code&gt;git sparse-checkout set A/B/C&lt;/code&gt; sets the directory &lt;code&gt;A/B/C&lt;/code&gt; as a recursive pattern, the directories &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A/B&lt;/code&gt; are added as parent patterns. The resulting sparse-checkout file is now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdd5299d04b153fd0e295904b9e12eec6b499c8" translate="yes" xml:space="preserve">
          <source>When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the path of the linked worktree (if any) and the name of the upstream branch, as well (see also &lt;code&gt;git remote show &amp;lt;remote&amp;gt;&lt;/code&gt;). Note that the current worktree&amp;rsquo;s HEAD will not have its path printed (it will always be your current directory).</source>
          <target state="translated">В режиме списка покажите sha1 и зафиксируйте строку темы для каждого заголовка вместе с отношением к восходящей ветке (если есть). Если задано дважды, выведите путь к связанному рабочему дереву (если есть), а также имя восходящей ветки (см. Также &lt;code&gt;git remote show &amp;lt;remote&amp;gt;&lt;/code&gt; ). Обратите внимание, что путь HEAD текущего рабочего дерева не будет напечатан (это всегда будет ваш текущий каталог).</target>
        </trans-unit>
        <trans-unit id="df3e42ff48559b3d46a4606cc43ea02a4d5742e5" translate="yes" xml:space="preserve">
          <source>When informative errors are turned on, git-daemon will report more verbose errors to the client, differentiating conditions like &quot;no such repository&quot; from &quot;repository not exported&quot;. This is more convenient for clients, but may leak information about the existence of unexported repositories. When informative errors are not enabled, all errors report &quot;access denied&quot; to the client. The default is --no-informative-errors.</source>
          <target state="translated">Когда информационные ошибки включены,git-daemon будет сообщать клиенту о более многословных ошибках,различая такие условия,как &quot;такого репозитория нет&quot; и &quot;репозиторий не экспортируется&quot;.Это удобнее для клиентов,но может привести к утечке информации о существовании не экспортированных репозиториев.Когда информационные ошибки не включены,все ошибки сообщают клиенту &quot;доступ запрещен&quot;.По умолчанию -нет-неинформативные-ошибки.</target>
        </trans-unit>
        <trans-unit id="882f7c25abfabdf5a0527656f301ec49c21b72e8" translate="yes" xml:space="preserve">
          <source>When initializing submodules, a &lt;code&gt;.gitmodules&lt;/code&gt; file in the top-level directory of the containing repository is used to find the url of each submodule. This file should be formatted in the same way as &lt;code&gt;$GIT_DIR/config&lt;/code&gt;. The key to each submodule url is &quot;submodule.$name.url&quot;. See &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">При инициализации подмодулей файл &lt;code&gt;.gitmodules&lt;/code&gt; в каталоге верхнего уровня содержащего репозитория используется для поиска URL-адреса каждого подмодуля. Этот файл должен быть отформатирован так же, как &lt;code&gt;$GIT_DIR/config&lt;/code&gt; . Ключом к URL каждого подмодуля является &amp;laquo;submodule. $ Name.url&amp;raquo;. Подробнее см. &lt;a href=&quot;gitmodules&quot;&gt;Gitmodules [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="854c3f2001a62b8064a99a360e1e32072b64ad8e" translate="yes" xml:space="preserve">
          <source>When initially invoking &lt;code&gt;git am&lt;/code&gt;, you give it the names of the mailboxes to process. Upon seeing the first patch that does not apply, it aborts in the middle. You can recover from this in one of two ways:</source>
          <target state="translated">При первоначальном вызове &lt;code&gt;git am&lt;/code&gt; вы даете ему имена почтовых ящиков для обработки. Увидев первый неприменимый патч, он прерывается на середине. Вы можете избавиться от этого одним из двух способов:</target>
        </trans-unit>
        <trans-unit id="ae919810620b188b4a098cb2c7010981f59eb2a8" translate="yes" xml:space="preserve">
          <source>When invoking a custom merge tool, Git uses a set of temporary files to pass to the tool. If the tool returns an error and this variable is set to &lt;code&gt;true&lt;/code&gt;, then these temporary files will be preserved, otherwise they will be removed after the tool has exited. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">При вызове настраиваемого инструмента слияния Git использует набор временных файлов для передачи инструменту. Если инструмент возвращает ошибку и для этой переменной установлено значение &lt;code&gt;true&lt;/code&gt; , эти временные файлы будут сохранены, в противном случае они будут удалены после выхода из инструмента. По умолчанию - &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8b149cf0c1c59f45e7d020f119cab62bcf88ef5e" translate="yes" xml:space="preserve">
          <source>When it comes to editing that commit, execute &lt;code&gt;git reset HEAD^&lt;/code&gt;. The effect is that the HEAD is rewound by one, and the index follows suit. However, the working tree stays the same.</source>
          <target state="translated">Когда дело доходит до редактирования этого коммита, выполните &lt;code&gt;git reset HEAD^&lt;/code&gt; . В результате HEAD перематывается на единицу, и индекс следует за ним. Однако рабочее дерево остается прежним.</target>
        </trans-unit>
        <trans-unit id="54d95c16d8a8ecd15ca228486caba0d9b645aa97" translate="yes" xml:space="preserve">
          <source>When it is not obvious how to apply a change, the following happens:</source>
          <target state="translated">Когда неясно,как применить изменение,происходит следующее:</target>
        </trans-unit>
        <trans-unit id="42b78027e34d66bfdfc08d7cf571f024832571b4" translate="yes" xml:space="preserve">
          <source>When it is not obvious how to reconcile the changes, the following happens:</source>
          <target state="translated">Когда неясно,как примирить изменения,происходит следующее:</target>
        </trans-unit>
        <trans-unit id="ac3a9525cba718f2ba4c34b577914369145b2d3f" translate="yes" xml:space="preserve">
          <source>When listing references from an alternate, list only references that begin with the given prefix. Prefixes match as if they were given as arguments to &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt;. To list multiple prefixes, separate them with whitespace. If &lt;code&gt;core.alternateRefsCommand&lt;/code&gt; is set, setting &lt;code&gt;core.alternateRefsPrefixes&lt;/code&gt; has no effect.</source>
          <target state="translated">При перечислении ссылок из альтернативного списка указывайте только те ссылки, которые начинаются с данного префикса. Префиксы совпадают, как если бы они были переданы в качестве аргументов для &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt; . Чтобы перечислить несколько префиксов, разделите их пробелами. Если &lt;code&gt;core.alternateRefsCommand&lt;/code&gt; , установка &lt;code&gt;core.alternateRefsPrefixes&lt;/code&gt; не имеет никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="9485b24ac5fd9e24de580d1b4ae98203a381daa8" translate="yes" xml:space="preserve">
          <source>When listing, use the specified &amp;lt;format&amp;gt;, which can be one of &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt;. When omitted, the format defaults to &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">При листинге используйте указанный &amp;lt;format&amp;gt;, который может быть &lt;code&gt;short&lt;/code&gt; , &lt;code&gt;medium&lt;/code&gt; и &lt;code&gt;long&lt;/code&gt; . Если не указано иное, по умолчанию используется &lt;code&gt;short&lt;/code&gt; формат .</target>
        </trans-unit>
        <trans-unit id="0de171dd2f5efd6969d6cc172c7d84e26d4bf231" translate="yes" xml:space="preserve">
          <source>When loosening unreachable objects, do not bother loosening any objects older than &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt;. This can be used to optimize out the write of any objects that would be immediately pruned by a follow-up &lt;code&gt;git prune&lt;/code&gt;.</source>
          <target state="translated">Ослабляя недоступные объекты, не пытайтесь ослабить объекты старше &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; . Это можно использовать для оптимизации записи любых объектов, которые будут немедленно удалены с помощью последующей &lt;code&gt;git prune&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2ecd3bb7ffbd4f19e0c8d754d499b7e6453c84ef" translate="yes" xml:space="preserve">
          <source>When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed, the signature check is reported as a comment in the message template. See also &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;.</source>
          <target state="translated">При слиянии аннотированного (и, возможно, подписанного) тега Git всегда создает фиксацию слияния, даже если возможно быстрое слияние, и шаблон сообщения фиксации подготовлен с сообщением тега. Кроме того, если тег подписан, проверка подписи отображается как комментарий в шаблоне сообщения. См. Также &lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fe18117100b1e7049979d08b3604c39a0ff0f463" translate="yes" xml:space="preserve">
          <source>When merging notes, be more verbose. When pruning notes, report all object names whose notes are removed.</source>
          <target state="translated">При слиянии нот,будьте более многословными.При обрезке заметок сообщайте имена всех объектов,чьи заметки удалены.</target>
        </trans-unit>
        <trans-unit id="2a6ffb56c555f1836377a0b4eb9f01a6db423b92" translate="yes" xml:space="preserve">
          <source>When merging notes, operate quietly.</source>
          <target state="translated">При объединении нот работайте тихо.</target>
        </trans-unit>
        <trans-unit id="452e3643271eefd0a90ad1d2e336613f571129ec" translate="yes" xml:space="preserve">
          <source>When merging notes, resolve notes conflicts using the given strategy. The following strategies are recognized: &quot;manual&quot; (default), &quot;ours&quot;, &quot;theirs&quot;, &quot;union&quot; and &quot;cat_sort_uniq&quot;. This option overrides the &quot;notes.mergeStrategy&quot; configuration setting. See the &quot;NOTES MERGE STRATEGIES&quot; section below for more information on each notes merge strategy.</source>
          <target state="translated">При слиянии нот разрешайте конфликты нот,используя данную стратегию.Признаются следующие стратегии:&quot;ручной&quot; (по умолчанию),&quot;наш&quot;,&quot;их&quot;,&quot;союз&quot; и &quot;cat_sort_uniq&quot;.Эта опция отменяет настройку конфигурации &quot;notes.mergeStrategy&quot;.См.ниже раздел &quot;NOTES MERGE STRATEGIES&quot; для получения дополнительной информации о каждой стратегии слияния записей.</target>
        </trans-unit>
        <trans-unit id="a1f0170f40742ebfd5d162ab78a6fe6f60fbd4e1" translate="yes" xml:space="preserve">
          <source>When missing or is set to &lt;code&gt;default&lt;/code&gt;, many fields in the stat structure are checked to detect if a file has been modified since Git looked at it. When this configuration variable is set to &lt;code&gt;minimal&lt;/code&gt;, sub-second part of mtime and ctime, the uid and gid of the owner of the file, the inode number (and the device number, if Git was compiled to use it), are excluded from the check among these fields, leaving only the whole-second part of mtime (and ctime, if &lt;code&gt;core.trustCtime&lt;/code&gt; is set) and the filesize to be checked.</source>
          <target state="translated">Если он отсутствует или установлен по &lt;code&gt;default&lt;/code&gt; , многие поля в структуре stat проверяются, чтобы определить, был ли файл изменен с тех пор, как Git просмотрел его. Когда эта переменная конфигурации установлена ​​на &lt;code&gt;minimal&lt;/code&gt; , субсекундную часть mtime и ctime, uid и gid владельца файла, номер inode (и номер устройства, если Git был скомпилирован для его использования), исключаются из проверка среди этих полей, оставляя только целую вторую часть mtime (и ctime, если &lt;code&gt;core.trustCtime&lt;/code&gt; ) и размер файла для проверки.</target>
        </trans-unit>
        <trans-unit id="0689b4b76e007bf9e9f69e1368a4eed9e3d9055a" translate="yes" xml:space="preserve">
          <source>When more than one pattern matches the path, a later line overrides an earlier line. This overriding is done per attribute.</source>
          <target state="translated">Когда более одной детали совпадает с контуром,более поздняя линия перекрывает более раннюю.Это переопределение выполняется для каждого атрибута.</target>
        </trans-unit>
        <trans-unit id="7de11bcf0fc6f31a9913abfce53b7b83c6075119" translate="yes" xml:space="preserve">
          <source>When moved lines are colored using e.g. the &lt;code&gt;diff.colorMoved&lt;/code&gt; setting, this option controls the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; how spaces are treated for details of valid modes see &lt;code&gt;--color-moved-ws&lt;/code&gt; in &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;.</source>
          <target state="translated">Когда перемещенные линии окрашиваются, например, с &lt;code&gt;diff.colorMoved&lt;/code&gt; параметра diff.colorMoved , этот параметр управляет &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; как обрабатываются пробелы. Подробные сведения о допустимых режимах см. &lt;code&gt;--color-moved-ws&lt;/code&gt; в &lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="52b8058d0bfbbff70a9ce60ad478453479b9a747" translate="yes" xml:space="preserve">
          <source>When multiple patches are output, the subject prefix will instead be &quot;[PATCH n/m] &quot;. To force 1/1 to be added for a single patch, use &lt;code&gt;-n&lt;/code&gt;. To omit patch numbers from the subject, use &lt;code&gt;-N&lt;/code&gt;.</source>
          <target state="translated">При выводе нескольких патчей префиксом темы будет &amp;laquo;[PATCH n / m]&amp;raquo;. Чтобы принудительно добавить 1/1 для одного патча, используйте &lt;code&gt;-n&lt;/code&gt; . Чтобы опустить номера патчей в теме, используйте &lt;code&gt;-N&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f1cdd3c7b73eb4476790691d3f8180aaaecc09ec" translate="yes" xml:space="preserve">
          <source>When multiple working trees are used, most of files in $GIT_DIR are per-worktree with a few known exceptions. All files under &lt;code&gt;common&lt;/code&gt; however will be shared between all working trees.</source>
          <target state="translated">Когда используются несколько рабочих деревьев, большинство файлов в $ GIT_DIR относятся к каждому рабочему дереву, за некоторыми известными исключениями. Однако все файлы, находящиеся под &lt;code&gt;common&lt;/code&gt; именем, будут совместно использоваться всеми рабочими деревьями.</target>
        </trans-unit>
        <trans-unit id="dea6d60865820d20f017799a5c24231f89c30494" translate="yes" xml:space="preserve">
          <source>When neither the command-line nor the configuration specify what to push, the default behavior is used, which corresponds to the &lt;code&gt;simple&lt;/code&gt; value for &lt;code&gt;push.default&lt;/code&gt;: the current branch is pushed to the corresponding upstream branch, but as a safety measure, the push is aborted if the upstream branch does not have the same name as the local one.</source>
          <target state="translated">Когда ни командная строка, ни конфигурация не указывают, что следует отправлять, используется поведение по умолчанию, которое соответствует &lt;code&gt;simple&lt;/code&gt; значению для &lt;code&gt;push.default&lt;/code&gt; : текущая ветвь передается в соответствующую ветвь восходящего потока, но в качестве меры безопасности push прерывается, если восходящая ветвь не имеет того же имени, что и локальная.</target>
        </trans-unit>
        <trans-unit id="60de604c8e6be170ca14a17caf3d8c66cf8e4c1f" translate="yes" xml:space="preserve">
          <source>When no &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; is given, &lt;code&gt;stash@{0}&lt;/code&gt; is assumed, otherwise &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; must be a reference of the form &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">Если &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; не указан, предполагается &lt;code&gt;stash@{0}&lt;/code&gt; , в противном случае &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; должен быть ссылкой в ​​форме &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1cb728a038f1c7e17113ec68844d5bac04accdd7" translate="yes" xml:space="preserve">
          <source>When no &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; argument is given from the command line, &lt;code&gt;git push&lt;/code&gt; behaves as if each &amp;lt;value&amp;gt; of this variable is given as &lt;code&gt;--push-option=&amp;lt;value&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Если в командной строке не &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; аргумент --push-option = &amp;lt;option&amp;gt; , &lt;code&gt;git push&lt;/code&gt; ведет себя так, как если бы каждое &amp;lt;value&amp;gt; этой переменной задано как &lt;code&gt;--push-option=&amp;lt;value&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a166fc08fc71ee0e3d700a37b70f8845fb53d565" translate="yes" xml:space="preserve">
          <source>When no &lt;code&gt;--whitespace&lt;/code&gt; flag is given from the command line, this configuration item is used as the default.</source>
          <target state="translated">Если в командной строке не &lt;code&gt;--whitespace&lt;/code&gt; флаг --whitespace , этот элемент конфигурации используется по умолчанию.</target>
        </trans-unit>
        <trans-unit id="b29755631cf67968424c24b41012b3c14a5bc20f" translate="yes" xml:space="preserve">
          <source>When no refspec was given on the command line, then &lt;code&gt;git pull&lt;/code&gt; uses the refspec from the configuration or &lt;code&gt;$GIT_DIR/remotes/&amp;lt;origin&amp;gt;&lt;/code&gt;. In such cases, the following rules apply:</source>
          <target state="translated">Если в командной строке не было указано refspec, тогда &lt;code&gt;git pull&lt;/code&gt; использует refspec из конфигурации или &lt;code&gt;$GIT_DIR/remotes/&amp;lt;origin&amp;gt;&lt;/code&gt; . В таких случаях применяются следующие правила:</target>
        </trans-unit>
        <trans-unit id="feee7e6efffd7b04e5558aa779c91bc6a7b795bd" translate="yes" xml:space="preserve">
          <source>When no remote is specified (via -r) the &lt;code&gt;HEAD&lt;/code&gt; branch from CVS is imported to the &lt;code&gt;origin&lt;/code&gt; branch within the Git repository, as &lt;code&gt;HEAD&lt;/code&gt; already has a special meaning for Git. When a remote is specified the &lt;code&gt;HEAD&lt;/code&gt; branch is named remotes/&amp;lt;remote&amp;gt;/master mirroring &lt;code&gt;git clone&lt;/code&gt; behaviour. Use this option if you want to import into a different branch.</source>
          <target state="translated">Если удаленное управление не указано (через -r), ветвь &lt;code&gt;HEAD&lt;/code&gt; из CVS импортируется в &lt;code&gt;origin&lt;/code&gt; ветвь в репозитории Git, поскольку &lt;code&gt;HEAD&lt;/code&gt; уже имеет особое значение для Git. Когда указан пульт, ветвь &lt;code&gt;HEAD&lt;/code&gt; называется remotes / &amp;lt;remote&amp;gt; / master mirroring &lt;code&gt;git clone&lt;/code&gt; behavior. Используйте эту опцию, если вы хотите импортировать в другую ветку.</target>
        </trans-unit>
        <trans-unit id="ac03f302c1aadb048fb52d65d000d2a5006af96e" translate="yes" xml:space="preserve">
          <source>When no remote is specified, by default the &lt;code&gt;origin&lt;/code&gt; remote will be used, unless there&amp;rsquo;s an upstream branch configured for the current branch.</source>
          <target state="translated">Если удаленный сервер не указан, по умолчанию будет использоваться &lt;code&gt;origin&lt;/code&gt; пульт, если только для текущей ветви не настроена восходящая ветвь.</target>
        </trans-unit>
        <trans-unit id="d52e3dbbfef371828cf1a5d65a8a3d7860fbbc07" translate="yes" xml:space="preserve">
          <source>When on branch &amp;lt;name&amp;gt;, it overrides &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; for pushing. It also overrides &lt;code&gt;remote.pushDefault&lt;/code&gt; for pushing from branch &amp;lt;name&amp;gt;. When you pull from one place (e.g. your upstream) and push to another place (e.g. your own publishing repository), you would want to set &lt;code&gt;remote.pushDefault&lt;/code&gt; to specify the remote to push to for all branches, and use this option to override it for a specific branch.</source>
          <target state="translated">Находясь на ветке &amp;lt;имя&amp;gt;, он переопределяет &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; для отправки . Он также переопределяет &lt;code&gt;remote.pushDefault&lt;/code&gt; для отправки из ветки &amp;lt;name&amp;gt;. Когда вы извлекаете из одного места (например, из вашего восходящего потока) и отправляете в другое место (например, в ваш собственный репозиторий публикации), вам нужно установить &lt;code&gt;remote.pushDefault&lt;/code&gt; , чтобы указать удаленный пульт для отправки для всех веток, и использовать этот параметр, чтобы переопределить его для конкретной ветки.</target>
        </trans-unit>
        <trans-unit id="2c5d62eaf7dc4c0abb09284bfc14bacce3f382aa" translate="yes" xml:space="preserve">
          <source>When on branch &amp;lt;name&amp;gt;, it tells &lt;code&gt;git fetch&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; which remote to fetch from/push to. The remote to push to may be overridden with &lt;code&gt;remote.pushDefault&lt;/code&gt; (for all branches). The remote to push to, for the current branch, may be further overridden by &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt;. If no remote is configured, or if you are not on any branch, it defaults to &lt;code&gt;origin&lt;/code&gt; for fetching and &lt;code&gt;remote.pushDefault&lt;/code&gt; for pushing. Additionally, &lt;code&gt;.&lt;/code&gt; (a period) is the current local repository (a dot-repository), see &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;'s final note below.</source>
          <target state="translated">Находясь в ветке &amp;lt;name&amp;gt;, он сообщает &lt;code&gt;git fetch&lt;/code&gt; и &lt;code&gt;git push&lt;/code&gt; ,с какого пульта выбрать / нажать. Удаленный, на который нужно отправить, может быть переопределен с помощью &lt;code&gt;remote.pushDefault&lt;/code&gt; (для всех веток). Пульт дистанционного управления для текущей ветки может быть переопределен с помощью &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; . Если пульт не настроен или вы не находитесь в какой-либо ветке, по умолчанию используется &lt;code&gt;origin&lt;/code&gt; для выборки и &lt;code&gt;remote.pushDefault&lt;/code&gt; для отправки . Кроме того, &lt;code&gt;.&lt;/code&gt; (точка) - текущий локальный репозиторий (точка-репозиторий), см &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; последнее примечание branch. &amp;lt;name&amp;gt; .merge ниже.</target>
        </trans-unit>
        <trans-unit id="99875f2b6ac5843dc20c0934eb9cdf10f7711c8e" translate="yes" xml:space="preserve">
          <source>When one of these flags is specified, the object name recorded for the paths are not updated. Instead, these options set and unset the &quot;fsmonitor valid&quot; bit for the paths. See section &quot;File System Monitor&quot; below for more information.</source>
          <target state="translated">При указании одного из этих флагов имя объекта,записанное для путей,не обновляется.Вместо этого,эти опции устанавливают и снимают бит &quot;fsmonitor valid&quot; для путей.См.ниже раздел &quot;Монитор файловой системы&quot; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="095b3a1631077463d64190b5c04e9903f37eec26" translate="yes" xml:space="preserve">
          <source>When one of these flags is specified, the object name recorded for the paths are not updated. Instead, these options set and unset the &quot;skip-worktree&quot; bit for the paths. See section &quot;Skip-worktree bit&quot; below for more information.</source>
          <target state="translated">При указании одного из этих флагов имя объекта,записанное для путей,не обновляется.Вместо этого,эти опции устанавливают и снимают бит &quot;skip-worktree&quot; для путей.Дополнительные сведения см.в разделе &quot;Бит пропуска рабочего дерева&quot; ниже.</target>
        </trans-unit>
        <trans-unit id="6e8f4e10b13b6ff83d83df5063d58c36d64a87b8" translate="yes" xml:space="preserve">
          <source>When one or more &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; are specified explicitly (whether on the command line or via &lt;code&gt;--stdin&lt;/code&gt;), it can be either a single pattern, or a pair of such pattern separated by a colon &quot;:&quot; (this means that a ref name cannot have a colon in it). A single pattern &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; is just a shorthand for &lt;code&gt;&amp;lt;name&amp;gt;:&amp;lt;name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Если один или несколько &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; указаны явно (в командной строке или с помощью &lt;code&gt;--stdin&lt;/code&gt; ), это может быть либо один шаблон, либо пара таких шаблонов, разделенных двоеточием &quot;:&quot; (это означает, что ссылка имя не может содержать двоеточие). Единственный шаблон &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; - это просто сокращение для &lt;code&gt;&amp;lt;name&amp;gt;:&amp;lt;name&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a9b16c534806b7638cc46892a28dd173752ed8c" translate="yes" xml:space="preserve">
          <source>When packing a blob fast-import always attempts to deltify against the last blob written. Unless specifically arranged for by the frontend, this will probably not be a prior version of the same file, so the generated delta will not be the smallest possible. The resulting packfile will be compressed, but will not be optimal.</source>
          <target state="translated">При упаковке капель быстрого импорта всегда пытаются опорочить последний написанный капля.Если это специально не устроено фронтендом,то,скорее всего,это будет не предыдущая версия того же файла,поэтому сгенерированная дельта будет не самой маленькой.Полученный пакетный файл будет сжат,но не будет оптимальным.</target>
        </trans-unit>
        <trans-unit id="76e4bf1d99930055a44aa05818b2c065730f60bb" translate="yes" xml:space="preserve">
          <source>When passed to &lt;code&gt;init&lt;/code&gt; or &lt;code&gt;clone&lt;/code&gt; this regular expression will be preserved as a config key. See &lt;code&gt;fetch&lt;/code&gt; for a description of &lt;code&gt;--ignore-paths&lt;/code&gt;.</source>
          <target state="translated">При передаче в &lt;code&gt;init&lt;/code&gt; или &lt;code&gt;clone&lt;/code&gt; это регулярное выражение будет сохранено как ключ конфигурации. Смотрите &lt;code&gt;fetch&lt;/code&gt; для описания &lt;code&gt;--ignore-paths&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6a3308486ea0114e28423fc585e726bdfefa0d3" translate="yes" xml:space="preserve">
          <source>When passed to &lt;code&gt;init&lt;/code&gt; or &lt;code&gt;clone&lt;/code&gt; this regular expression will be preserved as a config key. See &lt;code&gt;fetch&lt;/code&gt; for a description of &lt;code&gt;--ignore-refs&lt;/code&gt;.</source>
          <target state="translated">При передаче в &lt;code&gt;init&lt;/code&gt; или &lt;code&gt;clone&lt;/code&gt; это регулярное выражение будет сохранено как ключ конфигурации. См. &lt;code&gt;fetch&lt;/code&gt; для описания &lt;code&gt;--ignore-refs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="247954c989ece2f916f72b869f8bb1eb7f01f09e" translate="yes" xml:space="preserve">
          <source>When passed to &lt;code&gt;init&lt;/code&gt; or &lt;code&gt;clone&lt;/code&gt; this regular expression will be preserved as a config key. See &lt;code&gt;fetch&lt;/code&gt; for a description of &lt;code&gt;--include-paths&lt;/code&gt;.</source>
          <target state="translated">При передаче в &lt;code&gt;init&lt;/code&gt; или &lt;code&gt;clone&lt;/code&gt; это регулярное выражение будет сохранено как ключ конфигурации. Смотрите &lt;code&gt;fetch&lt;/code&gt; для описания &lt;code&gt;--include-paths&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="701b3c119f368819101d8af88b842359e5cb7ac8" translate="yes" xml:space="preserve">
          <source>When paths are given, show them (note that this isn&amp;rsquo;t really raw pathnames, but rather a list of patterns to match). Otherwise implicitly uses the root level of the tree as the sole path argument.</source>
          <target state="translated">Когда пути указаны, покажите их (обратите внимание, что на самом деле это не исходные имена путей, а скорее список шаблонов для сопоставления). В противном случае неявно использует корневой уровень дерева в качестве единственного аргумента пути.</target>
        </trans-unit>
        <trans-unit id="a12bc3537fe67daac72917848a655d5078c91711" translate="yes" xml:space="preserve">
          <source>When pathspec is given on the command line, commit the contents of the files that match the pathspec without recording the changes already added to the index. The contents of these files are also staged for the next commit on top of what have been staged before.</source>
          <target state="translated">Когда в командной строке указывается pathspec,зафиксируйте содержимое файлов,соответствующих pathspec,без записи изменений,уже добавленных в индекс.Содержимое этих файлов также инсценируется для следующей фиксации поверх того,что было инсценировано ранее.</target>
        </trans-unit>
        <trans-unit id="1a6dc462ca36ebe8779cf750259e000c162a076a" translate="yes" xml:space="preserve">
          <source>When pathspec is given to &lt;code&gt;git stash push&lt;/code&gt;, the new stash entry records the modified states only for the files that match the pathspec. The index entries and working tree files are then rolled back to the state in HEAD only for these files, too, leaving files that do not match the pathspec intact.</source>
          <target state="translated">Когда pathspec задается для &lt;code&gt;git stash push&lt;/code&gt; , новая запись stash записывает измененные состояния только для файлов, которые соответствуют pathspec. Записи индекса и файлы рабочего дерева затем откатываются до состояния HEAD только для этих файлов, оставляя неизменными файлы, которые не соответствуют pathspec.</target>
        </trans-unit>
        <trans-unit id="20284d20320c7f9cdd342728ed75cf98e12a1b6c" translate="yes" xml:space="preserve">
          <source>When possible, &lt;code&gt;pack-objects&lt;/code&gt; tries to reuse existing on-disk deltas to avoid having to search for new ones on the fly. This is an important optimization for serving fetches, because it means the server can avoid inflating most objects at all and just send the bytes directly from disk. This optimization can&amp;rsquo;t work when an object is stored as a delta against a base which the receiver does not have (and which we are not already sending). In that case the server &quot;breaks&quot; the delta and has to find a new one, which has a high CPU cost. Therefore it&amp;rsquo;s important for performance that the set of objects in on-disk delta relationships match what a client would fetch.</source>
          <target state="translated">Когда возможно, &lt;code&gt;pack-objects&lt;/code&gt; стараются повторно использовать существующие на диске дельты, чтобы избежать необходимости поиска новых на лету. Это важная оптимизация для обслуживания выборок, потому что это означает, что сервер может вообще избежать раздувания большинства объектов и просто отправлять байты прямо с диска. Эта оптимизация не может работать, когда объект хранится как дельта относительно базы, которой нет у получателя (и которую мы еще не отправляем). В этом случае сервер &amp;laquo;разрывает&amp;raquo; дельту и должен найти новый, у которого высокая стоимость процессора. Поэтому для производительности важно, чтобы набор объектов в дельта-отношениях на диске соответствовал тому, что клиент будет получать.</target>
        </trans-unit>
        <trans-unit id="a5d1e2c9c76493f4d0a607592b15388eabc93e4e" translate="yes" xml:space="preserve">
          <source>When present, it will also copy the value of &lt;code&gt;submodule.$name.update&lt;/code&gt;. This command does not alter existing information in .git/config. You can then customize the submodule clone URLs in .git/config for your local setup and proceed to &lt;code&gt;git submodule update&lt;/code&gt;; you can also just use &lt;code&gt;git submodule update --init&lt;/code&gt; without the explicit &lt;code&gt;init&lt;/code&gt; step if you do not intend to customize any submodule locations.</source>
          <target state="translated">Если он присутствует, он также копирует значение &lt;code&gt;submodule.$name.update&lt;/code&gt; . $ Name.update . Эта команда не изменяет существующую информацию в .git / config. Затем вы можете настроить URL-адреса клонов подмодулей в .git / config для вашей локальной настройки и перейти к &lt;code&gt;git submodule update&lt;/code&gt; ; вы также можете просто использовать &lt;code&gt;git submodule update --init&lt;/code&gt; без явного шага &lt;code&gt;init&lt;/code&gt; если вы не собираетесь настраивать расположение каких-либо подмодулей.</target>
        </trans-unit>
        <trans-unit id="fb5aacfd35a68a879acea2ba6edf150f79c935f9" translate="yes" xml:space="preserve">
          <source>When pushing to a remote that is different from the remote you normally pull from, work as &lt;code&gt;current&lt;/code&gt;. This is the safest option and is suited for beginners.</source>
          <target state="translated">При нажатии на пульт, отличный от пульта, с которого вы обычно подключаетесь, работайте как &lt;code&gt;current&lt;/code&gt; . Это самый безопасный вариант и подходит для новичков.</target>
        </trans-unit>
        <trans-unit id="f99e4f9643f5e033d51557f2aab4b69c000e9e23" translate="yes" xml:space="preserve">
          <source>When pushing, request the remote server to update refs in a single atomic transaction. If successful, all refs will be updated, or none will. If the remote side does not support this capability, the push will fail.</source>
          <target state="translated">При нажатии,попросите удаленный сервер обновить ссылки в одной атомарной транзакции.В случае успеха все ссылки будут обновлены,или ни одна не будет обновлена.Если удаленная сторона не поддерживает эту возможность,нажатие будет неудачным.</target>
        </trans-unit>
        <trans-unit id="24e8d08f5bcd393fd98db303b5bfff38ae149335" translate="yes" xml:space="preserve">
          <source>When reading the &lt;code&gt;core.repositoryformatversion&lt;/code&gt; variable, a git implementation which supports version 1 MUST also read any configuration keys found in the &lt;code&gt;extensions&lt;/code&gt; section of the configuration file.</source>
          <target state="translated">При чтении переменной &lt;code&gt;core.repositoryformatversion&lt;/code&gt; реализация git, которая поддерживает версию 1, ДОЛЖНА также читать любые ключи конфигурации, найденные в разделе &lt;code&gt;extensions&lt;/code&gt; файла конфигурации.</target>
        </trans-unit>
        <trans-unit id="d49438aa2f88cdc57a3b7001a0406b8491bbad55" translate="yes" xml:space="preserve">
          <source>When reading trailers, there can be whitespaces after the token, the separator and the value. There can also be whitespaces inside the token and the value. The value may be split over multiple lines with each subsequent line starting with whitespace, like the &quot;folding&quot; in RFC 822.</source>
          <target state="translated">При чтении трейлеров после токена,разделителя и значения могут быть белые пробела.Также внутри токена и значения могут быть пробелы.Значение может быть разбито на несколько строк с каждой последующей строкой,начинающейся с пробела,как,например,&quot;сгибание&quot; в RFC 822.</target>
        </trans-unit>
        <trans-unit id="c808cfa1e01223bf6f90ceb1edbec20a1b9b3321" translate="yes" xml:space="preserve">
          <source>When reading, the values are read from the system, global and repository local configuration files by default, and options &lt;code&gt;--system&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, &lt;code&gt;--local&lt;/code&gt;, &lt;code&gt;--worktree&lt;/code&gt; and &lt;code&gt;--file &amp;lt;filename&amp;gt;&lt;/code&gt; can be used to tell the command to read from only that location (see &lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;).</source>
          <target state="translated">При чтении значения по умолчанию считываются из системных, глобальных и локальных файлов конфигурации репозитория, а параметры &lt;code&gt;--system&lt;/code&gt; , &lt;code&gt;--global&lt;/code&gt; , &lt;code&gt;--local&lt;/code&gt; , &lt;code&gt;--worktree&lt;/code&gt; и &lt;code&gt;--file &amp;lt;filename&amp;gt;&lt;/code&gt; могут использоваться для указания команда для чтения только из этого места (см. &lt;a href=&quot;#FILES&quot;&gt;ФАЙЛЫ&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="35058e27fd0502a5cbd6b1225fdbfa49a5b7004d" translate="yes" xml:space="preserve">
          <source>When recording the commit, append a line that says &quot;(cherry picked from commit &amp;hellip;​)&quot; to the original commit message in order to indicate which commit this change was cherry-picked from. This is done only for cherry picks without conflicts. Do not use this option if you are cherry-picking from your private branch because the information is useless to the recipient. If on the other hand you are cherry-picking between two publicly visible branches (e.g. backporting a fix to a maintenance branch for an older release from a development branch), adding this information can be useful.</source>
          <target state="translated">При записи фиксации добавьте строку с надписью &amp;laquo;(вишня, выбранная из фиксации&amp;hellip;)&amp;raquo; в исходное сообщение фиксации, чтобы указать, из какой фиксации было выбрано это изменение. Это делается только для вишенки без конфликтов. Не используйте эту опцию, если вы выбираете вишенку из своей частной ветки, потому что информация бесполезна для получателя. Если, с другой стороны, вы выбираете вишню между двумя общедоступными ветвями (например, переносите исправление в ветку обслуживания для более ранней версии из ветки разработки), добавление этой информации может быть полезно.</target>
        </trans-unit>
        <trans-unit id="ccaf8e1c6e304870dc79f0b6ba9e209459375c19" translate="yes" xml:space="preserve">
          <source>When recording your own work, the contents of modified files in your working tree are temporarily stored to a staging area called the &quot;index&quot; with &lt;code&gt;git add&lt;/code&gt;. A file can be reverted back, only in the index but not in the working tree, to that of the last commit with &lt;code&gt;git restore --staged &amp;lt;file&amp;gt;&lt;/code&gt;, which effectively reverts &lt;code&gt;git add&lt;/code&gt; and prevents the changes to this file from participating in the next commit. After building the state to be committed incrementally with these commands, &lt;code&gt;git commit&lt;/code&gt; (without any pathname parameter) is used to record what has been staged so far. This is the most basic form of the command. An example:</source>
          <target state="translated">При записи вашей собственной работы содержимое измененных файлов в вашем рабочем дереве временно сохраняется в промежуточной области, называемой &amp;laquo;индексом&amp;raquo; с помощью &lt;code&gt;git add&lt;/code&gt; . Файл можно вернуть обратно, только в индексе, но не в рабочем дереве, к тому из последнего коммита с помощью &lt;code&gt;git restore --staged &amp;lt;file&amp;gt;&lt;/code&gt; , который эффективно отменяет &lt;code&gt;git add&lt;/code&gt; и предотвращает участие изменений этого файла в следующая фиксация. После создания состояния, которое будет постепенно фиксироваться с помощью этих команд, &lt;code&gt;git commit&lt;/code&gt; (без каких-либо параметров пути) используется для записи того, что было поставлено до сих пор. Это самая простая форма команды. Пример:</target>
        </trans-unit>
        <trans-unit id="35cd60207a202ee3a283a2d8b2047b148806b6b3" translate="yes" xml:space="preserve">
          <source>When remote and local branch are both named &quot;test&quot;:</source>
          <target state="translated">Когда и удаленное,и локальное отделение называются &quot;test&quot;:</target>
        </trans-unit>
        <trans-unit id="2eefb86cce90a60f5ab07db6487aa99da3ba4333" translate="yes" xml:space="preserve">
          <source>When rename/copy is involved, &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</source>
          <target state="translated">Когда используется переименование / копирование, &lt;code&gt;file1&lt;/code&gt; и &lt;code&gt;file2&lt;/code&gt; показывают имя исходного файла для переименования / копирования и имя файла, который производит переименование / копирование, соответственно.</target>
        </trans-unit>
        <trans-unit id="3475b12f6b8e32c3a9c4f496f5f906d95460d63d" translate="yes" xml:space="preserve">
          <source>When repacking with delta islands the delta window tends to get clogged with candidates that are forbidden by the config. Repacking with a big --window helps (and doesn&amp;rsquo;t take as long as it otherwise might because we can reject some object pairs based on islands before doing any computation on the content).</source>
          <target state="translated">При переупаковке с дельта-островами дельта-окно имеет тенденцию забиваться кандидатами, запрещенными конфигурацией. Переупаковка с помощью большого окна --window помогает (и не занимает столько времени, сколько могло бы быть в противном случае, потому что мы можем отклонить некоторые пары объектов на основе островов, прежде чем выполнять какие-либо вычисления с содержимым).</target>
        </trans-unit>
        <trans-unit id="9f9b14ed67913870e54606a7e4140c245c13e689" translate="yes" xml:space="preserve">
          <source>When restoring files in the working tree from the index, use stage #2 (&lt;code&gt;ours&lt;/code&gt;) or #3 (&lt;code&gt;theirs&lt;/code&gt;) for unmerged paths.</source>
          <target state="translated">При восстановлении файлов в рабочем дереве из индекса используйте этап №2 ( &lt;code&gt;ours&lt;/code&gt; ) или этап №3 ( &lt;code&gt;theirs&lt;/code&gt; ) для несвязанных путей.</target>
        </trans-unit>
        <trans-unit id="f350add778942f50c4b0b2f8798762ec9d6fc205" translate="yes" xml:space="preserve">
          <source>When restoring files on the working tree from the index, do not abort the operation if there are unmerged entries and neither &lt;code&gt;--ours&lt;/code&gt;, &lt;code&gt;--theirs&lt;/code&gt;, &lt;code&gt;--merge&lt;/code&gt; or &lt;code&gt;--conflict&lt;/code&gt; is specified. Unmerged paths on the working tree are left alone.</source>
          <target state="translated">При восстановлении файлов в рабочем дереве из индекса не прерывайте операцию, если есть не объединенные записи и не &lt;code&gt;--ours&lt;/code&gt; , &lt;code&gt;--theirs&lt;/code&gt; , &lt;code&gt;--merge&lt;/code&gt; или &lt;code&gt;--conflict&lt;/code&gt; . Незамкнутые пути на рабочем дереве остаются в покое.</target>
        </trans-unit>
        <trans-unit id="84ac309392e16a1f3dcc1a792805de1c5dea7161" translate="yes" xml:space="preserve">
          <source>When restoring files on the working tree from the index, recreate the conflicted merge in the unmerged paths.</source>
          <target state="translated">При восстановлении файлов рабочего дерева из индекса воссоздайте конфликтное слияние в неупорядоченных путях.</target>
        </trans-unit>
        <trans-unit id="273a9228c51e5936f4d142f339102a2bbdd8c3b8" translate="yes" xml:space="preserve">
          <source>When retrieving svn commits into Git (as part of &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, or &lt;code&gt;dcommit&lt;/code&gt; operations), look for the first &lt;code&gt;From:&lt;/code&gt; or &lt;code&gt;Signed-off-by:&lt;/code&gt; line in the log message and use that as the author string.</source>
          <target state="translated">При получении Svn фиксаций Into Git (как часть &lt;code&gt;fetch&lt;/code&gt; , &lt;code&gt;rebase&lt;/code&gt; или &lt;code&gt;dcommit&lt;/code&gt; операций), обратите внимание на первый &lt;code&gt;From:&lt;/code&gt; или &lt;code&gt;Signed-off-by:&lt;/code&gt; линиях в сообщении журнала и использовании, в качестве автора строки.</target>
        </trans-unit>
        <trans-unit id="78d119701beb340fc1dce20129de3c1bebaf8055" translate="yes" xml:space="preserve">
          <source>When revision range specifiers are used to limit the annotation, lines that have not changed since the range boundary (either the commit v2.6.18 or the most recent commit that is more than 3 weeks old in the above example) are blamed for that range boundary commit.</source>
          <target state="translated">При использовании спецификаторов диапазона ревизий для ограничения аннотации,строки,которые не изменились с границы диапазона (либо фиксация v2.6.18,либо последняя фиксация,которой в приведенном выше примере более 3 недель),обвиняются в этой фиксации границы диапазона.</target>
        </trans-unit>
        <trans-unit id="802f2e7848870b44ce9f04fb441477cd05447e6c" translate="yes" xml:space="preserve">
          <source>When rewriting commits with &amp;lt;command&amp;gt; (currently &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;) and this variable is set to &lt;code&gt;true&lt;/code&gt;, Git automatically copies your notes from the original to the rewritten commit. Defaults to &lt;code&gt;true&lt;/code&gt;, but see &quot;notes.rewriteRef&quot; below.</source>
          <target state="translated">При перезаписи коммитов с помощью &amp;lt;command&amp;gt; (в настоящее время &lt;code&gt;amend&lt;/code&gt; или &lt;code&gt;rebase&lt;/code&gt; ) и для этой переменной установлено значение &lt;code&gt;true&lt;/code&gt; , Git автоматически копирует ваши заметки из оригинала в перезаписанный коммит. По умолчанию &lt;code&gt;true&lt;/code&gt; , но см. &amp;laquo;Notes.rewriteRef&amp;raquo; ниже.</target>
        </trans-unit>
        <trans-unit id="b9c5c034bfc575d885230ecf217359276486be76" translate="yes" xml:space="preserve">
          <source>When rewriting commits with &amp;lt;command&amp;gt; (currently &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;), if this variable is &lt;code&gt;false&lt;/code&gt;, git will not copy notes from the original to the rewritten commit. Defaults to &lt;code&gt;true&lt;/code&gt;. See also &quot;&lt;code&gt;notes.rewriteRef&lt;/code&gt;&quot; below.</source>
          <target state="translated">При перезаписи коммитов с помощью &amp;lt;command&amp;gt; (в настоящее время &lt;code&gt;amend&lt;/code&gt; или &lt;code&gt;rebase&lt;/code&gt; ), если эта переменная имеет значение &lt;code&gt;false&lt;/code&gt; , git не будет копировать заметки из оригинала в перезаписанный коммит. По умолчанию &lt;code&gt;true&lt;/code&gt; . См. Также &amp;laquo; &lt;code&gt;notes.rewriteRef&lt;/code&gt; &amp;raquo; ниже.</target>
        </trans-unit>
        <trans-unit id="0528b909a801bc351dbefd46a3e339150f63bb9d" translate="yes" xml:space="preserve">
          <source>When rewriting commits, which notes to copy from the original to the rewritten commit. Must be a colon-delimited list of refs or globs.</source>
          <target state="translated">При переписывании коммитов,примечания к которым нужно скопировать с оригинала на переписанный коммит.Должен быть список ссылок или глобусов,разделенных двоеточием.</target>
        </trans-unit>
        <trans-unit id="777967b1b1cbeac1b786b4e659ef472d75c08474" translate="yes" xml:space="preserve">
          <source>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &amp;lt;path&amp;gt; as an argument.</source>
          <target state="translated">При запуске из подкаталога проекта, с помощью этой опции можно указать исключить изменения вне каталога и показать относительные пути к нему. Когда вы не находитесь в подкаталоге (например, в пустом репозитории), вы можете указать, какой подкаталог будет выводиться относительно, указав &amp;lt;path&amp;gt; в качестве аргумента.</target>
        </trans-unit>
        <trans-unit id="1526deda1d1c171ba9bb8aedb499ef46fa3558ac" translate="yes" xml:space="preserve">
          <source>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &amp;lt;path&amp;gt; as an argument. &lt;code&gt;--no-relative&lt;/code&gt; can be used to countermand both &lt;code&gt;diff.relative&lt;/code&gt; config option and previous &lt;code&gt;--relative&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27ca634a7183f46a280e82c3af06c829ca10b89" translate="yes" xml:space="preserve">
          <source>When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.</source>
          <target state="translated">При запуске из подкаталога команда обычно выводит пути относительно текущего каталога.Эта опция заставляет выводить пути относительно верхней директории проекта.</target>
        </trans-unit>
        <trans-unit id="ed0ff11c4a5dd052209fd6d888b93db83b1003f1" translate="yes" xml:space="preserve">
          <source>When run in a directory that does not have &quot;.git&quot; repository directory, Git tries to find such a directory in the parent directories to find the top of the working tree, but by default it does not cross filesystem boundaries. This environment variable can be set to true to tell Git not to stop at filesystem boundaries. Like &lt;code&gt;GIT_CEILING_DIRECTORIES&lt;/code&gt;, this will not affect an explicit repository directory set via &lt;code&gt;GIT_DIR&lt;/code&gt; or on the command line.</source>
          <target state="translated">При запуске в каталоге, в котором нет каталога репозитория &quot;.git&quot;, Git пытается найти такой каталог в родительских каталогах, чтобы найти вершину рабочего дерева, но по умолчанию он не пересекает границы файловой системы. Для этой переменной среды можно установить значение true, чтобы Git не останавливался на границах файловой системы. Как и &lt;code&gt;GIT_CEILING_DIRECTORIES&lt;/code&gt; , это не повлияет на явный каталог репозитория, установленный через &lt;code&gt;GIT_DIR&lt;/code&gt; или в командной строке.</target>
        </trans-unit>
        <trans-unit id="9ce1b9e20fc14e8e8925879039b8daf3d52acd6a" translate="yes" xml:space="preserve">
          <source>When running the command with &lt;code&gt;-u&lt;/code&gt; and &lt;code&gt;-m&lt;/code&gt; options, the merge result may need to overwrite paths that are not tracked in the current branch. The command usually refuses to proceed with the merge to avoid losing such a path. However this safety valve sometimes gets in the way. For example, it often happens that the other branch added a file that used to be a generated file in your branch, and the safety valve triggers when you try to switch to that branch after you ran &lt;code&gt;make&lt;/code&gt; but before running &lt;code&gt;make clean&lt;/code&gt; to remove the generated file. This option tells the command to read per-directory exclude file (usually &lt;code&gt;.gitignore&lt;/code&gt;) and allows such an untracked but explicitly ignored file to be overwritten.</source>
          <target state="translated">При запуске команды с параметрами &lt;code&gt;-u&lt;/code&gt; и &lt;code&gt;-m&lt;/code&gt; в результате слияния может потребоваться перезапись путей, которые не отслеживаются в текущей ветви. Команда обычно отказывается продолжить слияние, чтобы не потерять такой путь. Однако этот предохранительный клапан иногда мешает. Например, часто бывает , что другая ветвь добавляется файл , который используется , чтобы быть сгенерированным файлом в вашей отрасли, и спусковой предохранительный клапан при попытке переключиться на эту ветвь после вы запускали &lt;code&gt;make&lt;/code&gt; , но перед запуском &lt;code&gt;make clean&lt;/code&gt; , чтобы удалить генерируемый файл. Эта опция сообщает команде, что нужно читать исключаемый файл для каждого каталога (обычно &lt;code&gt;.gitignore&lt;/code&gt; ), и позволяет перезаписать такой неотслеживаемый, но явно игнорируемый файл.</target>
        </trans-unit>
        <trans-unit id="df426fd8f20937aff52c156a03a07b3202618140" translate="yes" xml:space="preserve">
          <source>When sending a patch this way, most often you are sending your own patch, so in addition to the &quot;&lt;code&gt;From $SHA1 $magic_timestamp&lt;/code&gt;&quot; marker you should omit &lt;code&gt;From:&lt;/code&gt; and &lt;code&gt;Date:&lt;/code&gt; lines from the patch file. The patch title is likely to be different from the subject of the discussion the patch is in response to, so it is likely that you would want to keep the Subject: line, like the example above.</source>
          <target state="translated">Отправляя патч таким способом, чаще всего вы отправляете свой собственный патч, поэтому в дополнение к маркеру &amp;laquo; &lt;code&gt;From $SHA1 $magic_timestamp&lt;/code&gt; &amp;raquo; вы должны опустить строки &lt;code&gt;From:&lt;/code&gt; и &lt;code&gt;Date:&lt;/code&gt; в файле патча. Название патча, вероятно, будет отличаться от темы обсуждения, на которое патч отвечает, поэтому вполне вероятно, что вы захотите сохранить строку Subject:, как в примере выше.</target>
        </trans-unit>
        <trans-unit id="85b26b0293721642a3d3ba409cae09a21a570f47" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;always&lt;/code&gt;, always highlight matches. When &lt;code&gt;false&lt;/code&gt; (or &lt;code&gt;never&lt;/code&gt;), never. When set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;, use color only when the output is written to the terminal. If unset, then the value of &lt;code&gt;color.ui&lt;/code&gt; is used (&lt;code&gt;auto&lt;/code&gt; by default).</source>
          <target state="translated">Если установлено значение &amp;laquo; &lt;code&gt;always&lt;/code&gt; , всегда выделять совпадения. Когда &lt;code&gt;false&lt;/code&gt; (или &lt;code&gt;never&lt;/code&gt; ), никогда. Если установлено значение &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;auto&lt;/code&gt; , использовать цвет только тогда, когда вывод записывается на терминал. Если не задано, используется значение &lt;code&gt;color.ui&lt;/code&gt; ( по умолчанию &lt;code&gt;auto&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="dfd0a45591bf4cdb6d73f4e9b16cc039b04690be" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;always&lt;/code&gt;, always use colors for interactive prompts and displays (such as those used by &quot;git-add --interactive&quot; and &quot;git-clean --interactive&quot;). When false (or &lt;code&gt;never&lt;/code&gt;), never. When set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;, use colors only when the output is to the terminal. If unset, then the value of &lt;code&gt;color.ui&lt;/code&gt; is used (&lt;code&gt;auto&lt;/code&gt; by default).</source>
          <target state="translated">Если установлено значение &lt;code&gt;always&lt;/code&gt; , всегда используйте цвета для интерактивных подсказок и дисплеев (например, те, которые используются командами &amp;laquo;git-add --interactive&amp;raquo; и &amp;laquo;git-clean --interactive&amp;raquo;). Когда ложно (или &lt;code&gt;never&lt;/code&gt; ), никогда. Если установлено значение &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;auto&lt;/code&gt; , используйте цвета только при выводе на терминал. Если не задано, используется значение &lt;code&gt;color.ui&lt;/code&gt; ( по умолчанию &lt;code&gt;auto&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9ba7d00c9f4d532d2b9486b8c87259ed84e278f3" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;change&lt;/code&gt;, tells &lt;code&gt;git apply&lt;/code&gt; to ignore changes in whitespace, in the same way as the &lt;code&gt;--ignore-space-change&lt;/code&gt; option. When set to one of: no, none, never, false tells &lt;code&gt;git apply&lt;/code&gt; to respect all whitespace differences. See &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;.</source>
          <target state="translated">Если установлено значение &lt;code&gt;change&lt;/code&gt; , &lt;code&gt;git apply&lt;/code&gt; игнорирует изменения в &lt;code&gt;--ignore-space-change&lt;/code&gt; же, как параметр --ignore-space-change . Если установлено одно из: no, none, never, false сообщает &lt;code&gt;git apply&lt;/code&gt; , чтобы он уважал все различия в пробелах. См. &lt;a href=&quot;git-apply&quot;&gt;Git-apply [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d6e4c3c7b2c6d56efae11b1e0ed0dcb5ce2357b" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;merges&lt;/code&gt;, rebase using &lt;code&gt;git rebase --rebase-merges&lt;/code&gt; so that the local merge commits are included in the rebase (see &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details).</source>
          <target state="translated">Если установлено &lt;code&gt;merges&lt;/code&gt; , перебазируйте с помощью &lt;code&gt;git rebase --rebase-merges&lt;/code&gt; , чтобы локальные коммиты слияния включались в перебазирование (подробности см. В &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="3726def44fed6d7863a8f10abeef80361e6f2701" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;preserve&lt;/code&gt; (deprecated in favor of &lt;code&gt;merges&lt;/code&gt;), rebase with the &lt;code&gt;--preserve-merges&lt;/code&gt; option passed to &lt;code&gt;git rebase&lt;/code&gt; so that locally created merge commits will not be flattened.</source>
          <target state="translated">Если установлено значение &lt;code&gt;preserve&lt;/code&gt; (устарело в пользу &lt;code&gt;merges&lt;/code&gt; ), перебазируйте с параметром &lt;code&gt;--preserve-merges&lt;/code&gt; , переданным в &lt;code&gt;git rebase&lt;/code&gt; , чтобы локально созданные коммиты слияния не сглаживались.</target>
        </trans-unit>
        <trans-unit id="14ded32327ec4343589fd7082ddc1f7fdc8962f6" translate="yes" xml:space="preserve">
          <source>When set to true, &lt;code&gt;git reset&lt;/code&gt; will default to the &lt;code&gt;--quiet&lt;/code&gt; option.</source>
          <target state="translated">Если установлено значение true, &lt;code&gt;git reset&lt;/code&gt; по умолчанию будет использовать параметр &lt;code&gt;--quiet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="01f095efe30e9d32fee48e094d88f96d4eba1bad" translate="yes" xml:space="preserve">
          <source>When set to true, &lt;code&gt;git-rerere&lt;/code&gt; updates the index with the resulting contents after it cleanly resolves conflicts using previously recorded resolution. Defaults to false.</source>
          <target state="translated">Если установлено значение true, &lt;code&gt;git-rerere&lt;/code&gt; обновляет индекс полученным содержимым после того, как полностью разрешает конфликты с использованием ранее записанного разрешения. По умолчанию - false.</target>
        </trans-unit>
        <trans-unit id="e2cc234f1ab166d2852bd6878a576806a19d5021" translate="yes" xml:space="preserve">
          <source>When set to true, a clone of this submodule will be performed as a shallow clone (with a history depth of 1) unless the user explicitly asks for a non-shallow clone.</source>
          <target state="translated">При установке значения true клон этого субмодуля будет выполняться как мелкий клон (с глубиной истории 1),если только пользователь явно не запросит не мелкий клон.</target>
        </trans-unit>
        <trans-unit id="6b72e60e4df8bc4b62a55c38ddf1b7b574998e6d" translate="yes" xml:space="preserve">
          <source>When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run merge on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts. This option can be overridden by the &lt;code&gt;--no-autostash&lt;/code&gt; and &lt;code&gt;--autostash&lt;/code&gt; options of &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92df8026c7e3a5d595e452302b48399c0fa7807" translate="yes" xml:space="preserve">
          <source>When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts. This option can be overridden by the &lt;code&gt;--no-autostash&lt;/code&gt; and &lt;code&gt;--autostash&lt;/code&gt; options of &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;. Defaults to false.</source>
          <target state="translated">Если установлено значение true, автоматически создавать временную запись в тайнике перед началом операции и применять ее после завершения операции. Это означает, что вы можете запустить rebase на грязном рабочем дереве. Однако используйте с осторожностью: последнее приложение тайника после успешной перебазирования может привести к нетривиальным конфликтам. Этот параметр может быть отменен параметрами &lt;code&gt;--no-autostash&lt;/code&gt; и &lt;code&gt;--autostash&lt;/code&gt; команды &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt; . По умолчанию - false.</target>
        </trans-unit>
        <trans-unit id="454e58d95a3a4a743aeef0859eac2b9c78e6f07a" translate="yes" xml:space="preserve">
          <source>When set to true, fetching from this remote by default will also remove any local tags that no longer exist on the remote if pruning is activated in general via &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt;, &lt;code&gt;fetch.prune&lt;/code&gt; or &lt;code&gt;--prune&lt;/code&gt;. Overrides &lt;code&gt;fetch.pruneTags&lt;/code&gt; settings, if any.</source>
          <target state="translated">Если установлено значение true, выборка с этого пульта по умолчанию также удалит все локальные теги, которые больше не существуют на пульте, если сокращение активировано в целом через &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; , &lt;code&gt;fetch.prune&lt;/code&gt; или &lt;code&gt;--prune&lt;/code&gt; . Переопределяет настройки &lt;code&gt;fetch.pruneTags&lt;/code&gt; , если они есть.</target>
        </trans-unit>
        <trans-unit id="2f08cdfbf2bbbb5ba49961d7515ae4f7f92a166e" translate="yes" xml:space="preserve">
          <source>When set to true, fetching from this remote by default will also remove any remote-tracking references that no longer exist on the remote (as if the &lt;code&gt;--prune&lt;/code&gt; option was given on the command line). Overrides &lt;code&gt;fetch.prune&lt;/code&gt; settings, if any.</source>
          <target state="translated">Если установлено значение true, выборка с этого пульта по умолчанию также удалит все ссылки удаленного отслеживания, которые больше не существуют на пульте (как если бы в &lt;code&gt;--prune&lt;/code&gt; была указана опция --prune ). Переопределяет настройки &lt;code&gt;fetch.prune&lt;/code&gt; , если они есть.</target>
        </trans-unit>
        <trans-unit id="5739477a3b9489a88899be9378f898520709209f" translate="yes" xml:space="preserve">
          <source>When set to true, git-receive-pack will advertise the push options capability to its clients. False by default.</source>
          <target state="translated">Когда установлено значение true,git-receive-pack будет рекламировать своим клиентам возможности push options.Ложно по умолчанию.</target>
        </trans-unit>
        <trans-unit id="af12eb66ec26d00e256f0fbfcc7125aeb108aa2e" translate="yes" xml:space="preserve">
          <source>When set to true, this remote will be used to fetch promisor objects.</source>
          <target state="translated">Когда установлено значение true,этот пульт будет использоваться для получения объектов промоутеров.</target>
        </trans-unit>
        <trans-unit id="384788e82f8977bea09d8463e5bbfca26ec8a699" translate="yes" xml:space="preserve">
          <source>When set, the fetch or receive will abort in the case of a malformed object or a link to a nonexistent object. In addition, various other issues are checked for, including legacy issues (see &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt;), and potential security issues like the existence of a &lt;code&gt;.GIT&lt;/code&gt; directory or a malicious &lt;code&gt;.gitmodules&lt;/code&gt; file (see the release notes for v2.2.1 and v2.17.1 for details). Other sanity and security checks may be added in future releases.</source>
          <target state="translated">Если установлено, выборка или получение будет прервана в случае искаженного объекта или ссылки на несуществующий объект. Кроме того, проверяются различные другие проблемы, в том числе устаревшие проблемы (см. &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; ) и потенциальные проблемы безопасности, такие как наличие &lt;code&gt;.GIT&lt;/code&gt; или вредоносного файла &lt;code&gt;.gitmodules&lt;/code&gt; (см. Примечания к выпуску для v2. 2.1 и v2.17.1 для подробностей). Другие проверки работоспособности и безопасности могут быть добавлены в будущих выпусках.</target>
        </trans-unit>
        <trans-unit id="51a9809b150b3fa600feb6c1ea57e78e8de9e787" translate="yes" xml:space="preserve">
          <source>When showing &lt;code&gt;short&lt;/code&gt; or &lt;code&gt;porcelain&lt;/code&gt; status output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the &lt;code&gt;--porcelain&lt;/code&gt; output format. Without the &lt;code&gt;-z&lt;/code&gt; option, filenames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">При отображении &lt;code&gt;short&lt;/code&gt; или &lt;code&gt;porcelain&lt;/code&gt; вывода состояния распечатайте имя файла дословно и завершите записи NUL вместо LF. Если формат не указан, подразумевается выходной формат &lt;code&gt;--porcelain&lt;/code&gt; . Без опции &lt;code&gt;-z&lt;/code&gt; имена файлов с &amp;laquo;необычными&amp;raquo; символами заключаются в кавычки, как описано для переменной конфигурации &lt;code&gt;core.quotePath&lt;/code&gt; (см. &lt;a href=&quot;git-config&quot;&gt;Git-config [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="43f2e6f1690661b84f31283fe1b400a9df885029" translate="yes" xml:space="preserve">
          <source>When showing a change that involves a rename or a copy, &lt;code&gt;--stat&lt;/code&gt; output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves &lt;code&gt;arch/i386/Makefile&lt;/code&gt; to &lt;code&gt;arch/x86/Makefile&lt;/code&gt; while modifying 4 lines will be shown like this:</source>
          <target state="translated">При отображении изменений, включающих переименование или копирование, вывод &lt;code&gt;--stat&lt;/code&gt; форматирует путевые имена компактно, комбинируя общий префикс и суффикс путевых имен. Например, изменение, которое перемещает &lt;code&gt;arch/i386/Makefile&lt;/code&gt; в &lt;code&gt;arch/x86/Makefile&lt;/code&gt; при изменении 4 строк, будет показано следующим образом:</target>
        </trans-unit>
        <trans-unit id="5d4332d6cfe825bd00a3bfef76e9ffde728a5dde" translate="yes" xml:space="preserve">
          <source>When showing commit messages, also show notes which are stored in the given ref. The ref must be fully qualified. If the given ref does not exist, it is not an error but means that no notes should be printed.</source>
          <target state="translated">При отображении сообщений о фиксации,также показывайте заметки,которые хранятся в данном справочнике.Примечания должны быть полностью квалифицированными.Если данный реферат не существует,это не ошибка,но означает,что никакие заметки не должны быть напечатаны.</target>
        </trans-unit>
        <trans-unit id="43020b05da28d5245a5572e708a459c7bb4d40bf" translate="yes" xml:space="preserve">
          <source>When showing object names, prefix them with &lt;code&gt;^&lt;/code&gt; and strip &lt;code&gt;^&lt;/code&gt; prefix from the object names that already have one.</source>
          <target state="translated">При отображении имен объектов добавляйте к ним префикс &lt;code&gt;^&lt;/code&gt; и удаляйте префикс &lt;code&gt;^&lt;/code&gt; из имен объектов, у которых он уже есть.</target>
        </trans-unit>
        <trans-unit id="bf158ec030a04af48fd84ff99f4cdef61dbc802c" translate="yes" xml:space="preserve">
          <source>When showing the value of &amp;lt;name&amp;gt; as a symbolic ref, try to shorten the value, e.g. from &lt;code&gt;refs/heads/master&lt;/code&gt; to &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">При отображении значения &amp;lt;name&amp;gt; как символической ссылки, попробуйте сократить значение, например, от &lt;code&gt;refs/heads/master&lt;/code&gt; до &lt;code&gt;master&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d07871fea9de7a0886062f3dfa8bbc506d97b667" translate="yes" xml:space="preserve">
          <source>When shown by &lt;code&gt;git diff-tree -c&lt;/code&gt;, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by &lt;code&gt;git diff-files -c&lt;/code&gt;, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka &quot;our version&quot;, file2 is stage 3 aka &quot;their version&quot;).</source>
          <target state="translated">При отображении с помощью &lt;code&gt;git diff-tree -c&lt;/code&gt; он сравнивает родителей коммита слияния с результатом слияния (то есть file1..fileN являются родителями). При отображении с помощью &lt;code&gt;git diff-files -c&lt;/code&gt; он сравнивает два неразрешенных родителя слияния с файлом рабочего дерева (т.е. file1 - это этап 2, также известный как &amp;laquo;наша версия&amp;raquo;, file2 - это этап 3, также известный как &amp;laquo;их версия&amp;raquo;).</target>
        </trans-unit>
        <trans-unit id="aea42e2933202e5e3d5f69076d6bebeb378dfcd9" translate="yes" xml:space="preserve">
          <source>When some commits have been skipped (using &quot;git bisect skip&quot;), then the bisection algorithm is the same for step 1) to 3). But then we use roughly the following steps:</source>
          <target state="translated">Когда некоторые коммиты были пропущены (используя &quot;git-bisect skip&quot;),то алгоритм биссекции тот же,что и для шага 1)-3).Но затем мы используем примерно следующие шаги:</target>
        </trans-unit>
        <trans-unit id="4192528671a22eca45fcad6bb5614a7ec165a5d4" translate="yes" xml:space="preserve">
          <source>When specified one or more times, &lt;code&gt;-L&lt;/code&gt; restricts annotation to the requested lines.</source>
          <target state="translated">Если указано один или несколько раз, &lt;code&gt;-L&lt;/code&gt; ограничивает аннотацию запрошенными строками.</target>
        </trans-unit>
        <trans-unit id="75acd7ee44b0e77c6b233d3615dca447d4cfdc8c" translate="yes" xml:space="preserve">
          <source>When specifying the -v option the format used is:</source>
          <target state="translated">При указании опции -v используется формат:</target>
        </trans-unit>
        <trans-unit id="0550af8039db48de114d18431bb7375cee83b91b" translate="yes" xml:space="preserve">
          <source>When switching branches with &lt;code&gt;--merge&lt;/code&gt;, staged changes may be lost.</source>
          <target state="translated">При переключении ветвей с помощью &lt;code&gt;--merge&lt;/code&gt; поэтапные изменения могут быть потеряны.</target>
        </trans-unit>
        <trans-unit id="1f4fa4b7e00510c39cb24519dad3b49f07cff89d" translate="yes" xml:space="preserve">
          <source>When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.</source>
          <target state="translated">При переключении веток,если у вас есть локальные изменения в одном или нескольких файлах,которые отличаются между текущей веткой и веткой,в которую вы переключаетесь,команда отказывается переключать ветки,чтобы сохранить ваши изменения в контексте.Однако,с помощью этой опции выполняется трёхстороннее слияние между текущей веткой,содержимым вашего рабочего дерева и новым ответвлением,и вы будете находиться в новом ответвлении.</target>
        </trans-unit>
        <trans-unit id="7b0d58bb9103d272bfd260e85d337e6780ed225d" translate="yes" xml:space="preserve">
          <source>When switching branches, proceed even if the index or the working tree differs from &lt;code&gt;HEAD&lt;/code&gt;. This is used to throw away local changes.</source>
          <target state="translated">При переключении ветвей продолжайте, даже если индекс или рабочее дерево отличается от &lt;code&gt;HEAD&lt;/code&gt; . Это используется для отбрасывания локальных изменений.</target>
        </trans-unit>
        <trans-unit id="c0e1144ec53aca779c8724f81a0ba0a804f51a81" translate="yes" xml:space="preserve">
          <source>When the &quot;-C&quot; option is used, the original contents of modified files, and deleted files (and also unmodified files, if the &quot;--find-copies-harder&quot; option is used) are considered as candidates of the source files in rename/copy operation. If the input were like these filepairs, that talk about a modified file fileY and a newly created file file0:</source>
          <target state="translated">При использовании опции &quot;-С&quot; исходное содержимое измененных файлов,а также удаленных файлов (а также немодифицированных файлов,если используется опция &quot;--find-copies-harder&quot;)считаются кандидатами исходных файлов в операции переименования/копирования.Если входные данные были похожи на эти пары файлов,то речь идет об измененном файле fileY и вновь созданном файле file0:</target>
        </trans-unit>
        <trans-unit id="f6565c60ff0e235a6b049473d40ff8e72074a702" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; argument is a branch name, the &lt;code&gt;--detach&lt;/code&gt; option can be used to detach &lt;code&gt;HEAD&lt;/code&gt; at the tip of the branch (&lt;code&gt;git checkout
&amp;lt;branch&amp;gt;&lt;/code&gt; would check out that branch without detaching &lt;code&gt;HEAD&lt;/code&gt;).</source>
          <target state="translated">Когда аргумент &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; является именем ветки, параметр &lt;code&gt;--detach&lt;/code&gt; может использоваться для отсоединения &lt;code&gt;HEAD&lt;/code&gt; от конца ветки ( &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; проверяет эту ветку без отсоединения &lt;code&gt;HEAD&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="588cf4af82a088b4d8241fca9de08188511b35c3" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--aggressive&lt;/code&gt; option is supplied, &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt; will be invoked with the &lt;code&gt;-f&lt;/code&gt; flag, which in turn will pass &lt;code&gt;--no-reuse-delta&lt;/code&gt; to &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;. This will throw away any existing deltas and re-compute them, at the expense of spending much more time on the repacking.</source>
          <target state="translated">Если &lt;code&gt;--aggressive&lt;/code&gt; параметр --aggressive , &lt;a href=&quot;git-repack&quot;&gt;git-repack [1]&lt;/a&gt; будет вызываться с флагом &lt;code&gt;-f&lt;/code&gt; , который, в свою очередь, передаст &lt;code&gt;--no-reuse-delta&lt;/code&gt; в &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt; . Это отбросит все существующие дельты и пересчитает их, за счет гораздо большего количества времени на переупаковку.</target>
        </trans-unit>
        <trans-unit id="36c732582138b85601314513444f94ba223454f7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--auto-merge&lt;/code&gt; is given, meld will merge all non-conflicting parts automatically, highlight the conflicting parts and wait for user decision. Setting &lt;code&gt;mergetool.meld.useAutoMerge&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; tells Git to unconditionally use the &lt;code&gt;--auto-merge&lt;/code&gt; option with &lt;code&gt;meld&lt;/code&gt;. Setting this value to &lt;code&gt;auto&lt;/code&gt; makes git detect whether &lt;code&gt;--auto-merge&lt;/code&gt; is supported and will only use &lt;code&gt;--auto-merge&lt;/code&gt; when available. A value of &lt;code&gt;false&lt;/code&gt; avoids using &lt;code&gt;--auto-merge&lt;/code&gt; altogether, and is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82879b1b4c41ea78abef977470f6f223214f239a" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;--stdin&lt;/code&gt; option is provided, the patterns are read from standard in as a newline-delimited list instead of from the arguments.</source>
          <target state="translated">Когда &lt;code&gt;--stdin&lt;/code&gt; опция --stdin , шаблоны считываются из стандарта в виде списка, разделенного новой строкой, а не из аргументов.</target>
        </trans-unit>
        <trans-unit id="0e72b560677fc7dbf879d4b64bab949efbe4ffc6" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;-l&lt;/code&gt; option is used, format changes to</source>
          <target state="translated">Когда используется опция &lt;code&gt;-l&lt;/code&gt; , формат меняется на</target>
        </trans-unit>
        <trans-unit id="2d7535050bbd171bed81a20302444843893d883d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;-z&lt;/code&gt; option is given, pathnames are printed as is and without any quoting and lines are terminated with a NUL (ASCII 0x00) byte.</source>
          <target state="translated">Когда задана опция &lt;code&gt;-z&lt;/code&gt; , пути печатаются как есть и без кавычек, а строки заканчиваются байтом NUL (ASCII 0x00).</target>
        </trans-unit>
        <trans-unit id="e231e06fa3f3b3606e814466b6e12bf27e65315d" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;.gitattributes&lt;/code&gt; file is missing from the work tree, the path in the index is used as a fall-back. During checkout process, &lt;code&gt;.gitattributes&lt;/code&gt; in the index is used and then the file in the working tree is used as a fall-back.</source>
          <target state="translated">Когда файл &lt;code&gt;.gitattributes&lt;/code&gt; отсутствует в рабочем дереве, путь в индексе используется как резервный. В процессе оформления &lt;code&gt;.gitattributes&lt;/code&gt; используются атрибуты .gitattributes в индексе, а затем файл в рабочем дереве используется в качестве запасного варианта .</target>
        </trans-unit>
        <trans-unit id="ca6fe469ff13b0a4412dea9bd34db705e00a71db" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;LESS&lt;/code&gt; environment variable is unset, Git sets it to &lt;code&gt;FRX&lt;/code&gt; (if &lt;code&gt;LESS&lt;/code&gt; environment variable is set, Git does not change it at all). If you want to selectively override Git&amp;rsquo;s default setting for &lt;code&gt;LESS&lt;/code&gt;, you can set &lt;code&gt;core.pager&lt;/code&gt; to e.g. &lt;code&gt;less -S&lt;/code&gt;. This will be passed to the shell by Git, which will translate the final command to &lt;code&gt;LESS=FRX less -S&lt;/code&gt;. The environment does not set the &lt;code&gt;S&lt;/code&gt; option but the command line does, instructing less to truncate long lines. Similarly, setting &lt;code&gt;core.pager&lt;/code&gt; to &lt;code&gt;less -+F&lt;/code&gt; will deactivate the &lt;code&gt;F&lt;/code&gt; option specified by the environment from the command-line, deactivating the &quot;quit if one screen&quot; behavior of &lt;code&gt;less&lt;/code&gt;. One can specifically activate some flags for particular commands: for example, setting &lt;code&gt;pager.blame&lt;/code&gt; to &lt;code&gt;less -S&lt;/code&gt; enables line truncation only for &lt;code&gt;git blame&lt;/code&gt;.</source>
          <target state="translated">Когда переменная среды &lt;code&gt;LESS&lt;/code&gt; не задана, Git устанавливает ее в &lt;code&gt;FRX&lt;/code&gt; (если задана переменная среды &lt;code&gt;LESS&lt;/code&gt; , Git вообще ее не изменяет). Если вы хотите выборочно переопределить настройку Git по умолчанию для &lt;code&gt;LESS&lt;/code&gt; , вы можете установить &lt;code&gt;core.pager&lt;/code&gt; , например, &lt;code&gt;less -S&lt;/code&gt; . Это будет передано в оболочку Git, который переведет последнюю команду в &lt;code&gt;LESS=FRX less -S&lt;/code&gt; . Среда не устанавливает параметр &lt;code&gt;S&lt;/code&gt; , но командная строка устанавливает, давая команду less обрезать длинные строки. Точно так же установка &lt;code&gt;core.pager&lt;/code&gt; на &lt;code&gt;less -+F&lt;/code&gt; отключит &lt;code&gt;F&lt;/code&gt; параметр, заданный средой из командной строки, деактивируя поведение &amp;laquo;выйти, если один экран&amp;raquo; &lt;code&gt;less&lt;/code&gt; . Можно специально активировать некоторые флаги для определенных команд: например, установка &lt;code&gt;pager.blame&lt;/code&gt; на &lt;code&gt;less -S&lt;/code&gt; позволяет обрезать строку только для &lt;code&gt;git blame&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74ad9f83ee4c2323b6a50919a4a444bb844e349c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;core.fsmonitor&lt;/code&gt; configuration variable is changed, the file system monitor is added to or removed from the index the next time a command reads the index. When &lt;code&gt;--[no-]fsmonitor&lt;/code&gt; are used, the file system monitor is immediately added to or removed from the index.</source>
          <target state="translated">При &lt;code&gt;core.fsmonitor&lt;/code&gt; переменной конфигурации core.fsmonitor монитор файловой системы добавляется в индекс или удаляется из него при следующем чтении индекса командой. Когда используется &lt;code&gt;--[no-]fsmonitor&lt;/code&gt; , монитор файловой системы немедленно добавляется в индекс или удаляется из него.</target>
        </trans-unit>
        <trans-unit id="a4c9cc7c80e5659747cb4b3bf0914ba1addde698" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable is changed, the untracked cache is added to or removed from the index the next time a command reads the index; while when &lt;code&gt;--[no-|force-]untracked-cache&lt;/code&gt; are used, the untracked cache is immediately added to or removed from the index.</source>
          <target state="translated">При &lt;code&gt;core.untrackedCache&lt;/code&gt; переменной конфигурации core.untrackedCache неотслеживаемый кеш добавляется или удаляется из индекса в следующий раз, когда команда читает индекс; в то время как, когда используется &lt;code&gt;--[no-|force-]untracked-cache&lt;/code&gt; , неотслеживаемый кеш немедленно добавляется в индекс или удаляется из него.</target>
        </trans-unit>
        <trans-unit id="a212ca612f0b7b9b082dffe71078dd396d414402" translate="yes" xml:space="preserve">
          <source>When the attribute &lt;code&gt;ident&lt;/code&gt; is set for a path, Git replaces &lt;code&gt;$Id$&lt;/code&gt; in the blob object with &lt;code&gt;$Id:&lt;/code&gt;, followed by the 40-character hexadecimal blob object name, followed by a dollar sign &lt;code&gt;$&lt;/code&gt; upon checkout. Any byte sequence that begins with &lt;code&gt;$Id:&lt;/code&gt; and ends with &lt;code&gt;$&lt;/code&gt; in the worktree file is replaced with &lt;code&gt;$Id$&lt;/code&gt; upon check-in.</source>
          <target state="translated">Если для пути установлен атрибут &lt;code&gt;ident&lt;/code&gt; ity , Git заменяет &lt;code&gt;$Id$&lt;/code&gt; в объекте большого двоичного объекта на &lt;code&gt;$Id:&lt;/code&gt; за которым следует 40-символьное шестнадцатеричное имя объекта большого двоичного объекта, за которым следует знак доллара &lt;code&gt;$&lt;/code&gt; при оформлении заказа. Любая последовательность байтов, которая начинается с &lt;code&gt;$Id:&lt;/code&gt; и заканчивается символом &lt;code&gt;$&lt;/code&gt; в файле рабочего дерева, при регистрации заменяется на &lt;code&gt;$Id$&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa514f01de77ed627378917f2aa0b40cefa8c9a0" translate="yes" xml:space="preserve">
          <source>When the command enters the interactive mode, it shows the files and directories to be cleaned, and goes into its interactive command loop.</source>
          <target state="translated">Когда команда переходит в интерактивный режим,она показывает файлы и каталоги,которые необходимо очистить,и переходит в свой интерактивный командный цикл.</target>
        </trans-unit>
        <trans-unit id="8e767c7023b00ca52d4fb770ab49ce4dc284f987" translate="yes" xml:space="preserve">
          <source>When the command enters the interactive mode, it shows the output of the &lt;code&gt;status&lt;/code&gt; subcommand, and then goes into its interactive command loop.</source>
          <target state="translated">Когда команда переходит в интерактивный режим, она показывает вывод подкоманды &lt;code&gt;status&lt;/code&gt; , а затем переходит в интерактивный командный цикл.</target>
        </trans-unit>
        <trans-unit id="e95952399796aad65deb415e39c303153d01cdf9" translate="yes" xml:space="preserve">
          <source>When the command is invoked from a subdirectory, show the path of the current directory relative to the top-level directory.</source>
          <target state="translated">Когда команда вызывается из подкаталога,покажите путь текущей директории относительно директории верхнего уровня.</target>
        </trans-unit>
        <trans-unit id="45506eccf72696bf6e0287a6eeda327142bb0f41" translate="yes" xml:space="preserve">
          <source>When the command is invoked from a subdirectory, show the path of the top-level directory relative to the current directory (typically a sequence of &quot;../&quot;, or an empty string).</source>
          <target state="translated">При вызове команды из подкаталога,покажите путь к каталогу верхнего уровня относительно текущего каталога (обычно это последовательность &quot;../&quot;,или пустая строка).</target>
        </trans-unit>
        <trans-unit id="609d76b7287e730d5e5fcae1b57a1cde4d02d1ae" translate="yes" xml:space="preserve">
          <source>When the command is run without pathspec, it errors out, instead of deinit-ing everything, to prevent mistakes.</source>
          <target state="translated">Когда команда выполняется без pathspec,она ошибается,вместо того,чтобы деинитовать все,чтобы предотвратить ошибки.</target>
        </trans-unit>
        <trans-unit id="2ebded60d45ed8776b0324d8d2138df90f552a15" translate="yes" xml:space="preserve">
          <source>When the command line does not specify what to push with &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; arguments or &lt;code&gt;--all&lt;/code&gt;, &lt;code&gt;--mirror&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt; options, the command finds the default &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; by consulting &lt;code&gt;remote.*.push&lt;/code&gt; configuration, and if it is not found, honors &lt;code&gt;push.default&lt;/code&gt; configuration to decide what to push (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for the meaning of &lt;code&gt;push.default&lt;/code&gt;).</source>
          <target state="translated">Когда в командной строке не указывается, что &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; аргументами &amp;lt;refspec&amp;gt; ... или параметрами &lt;code&gt;--all&lt;/code&gt; , &lt;code&gt;--mirror&lt;/code&gt; , &lt;code&gt;--tags&lt;/code&gt; , команда находит &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; по умолчанию , консультируясь с конфигурацией &lt;code&gt;remote.*.push&lt;/code&gt; и если он не найден, &lt;code&gt;push.default&lt;/code&gt; конфигурацию push.default, чтобы решить, что &lt;code&gt;push.default&lt;/code&gt; значение push.default см. в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4f61ade639e58b8586884fe92cb9eea816606ac2" translate="yes" xml:space="preserve">
          <source>When the command line does not specify where to push with the &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; argument, &lt;code&gt;branch.*.remote&lt;/code&gt; configuration for the current branch is consulted to determine where to push. If the configuration is missing, it defaults to &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">Если в командной строке не указано, куда отправлять с аргументом &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; , выполняется консультация с &lt;code&gt;branch.*.remote&lt;/code&gt; конфигурацией branch. *. Для текущей ветки, чтобы определить, куда отправлять. Если конфигурация отсутствует, по умолчанию используется &lt;code&gt;origin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4dd963bd8e58b7ff2b11f8f622df35ecbcf28d58" translate="yes" xml:space="preserve">
          <source>When the commit diffs differ, &lt;code&gt;git range-diff&lt;/code&gt; recreates the original diffs' coloring, and adds outer -/+ diff markers with the &lt;strong&gt;background&lt;/strong&gt; being red/green to make it easier to see e.g. when there was a change in what exact lines were added.</source>
          <target state="translated">Когда различия при фиксации различаются, &lt;code&gt;git range-diff&lt;/code&gt; воссоздает исходную окраску различий и добавляет внешние маркеры различий - / + с красным / зеленым &lt;strong&gt;фоном&lt;/strong&gt; , чтобы их было легче увидеть, например, когда было изменение в том, какие именно строки были добавлены ,</target>
        </trans-unit>
        <trans-unit id="3625aba84b870871330cdfd48d8779c4e4badb58" translate="yes" xml:space="preserve">
          <source>When the commit log message begins with &quot;squash! &amp;hellip;​&quot; (or &quot;fixup! &amp;hellip;​&quot;), and there is already a commit in the todo list that matches the same &lt;code&gt;...&lt;/code&gt;, automatically modify the todo list of rebase -i so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from &lt;code&gt;pick&lt;/code&gt; to &lt;code&gt;squash&lt;/code&gt; (or &lt;code&gt;fixup&lt;/code&gt;). A commit matches the &lt;code&gt;...&lt;/code&gt; if the commit subject matches, or if the &lt;code&gt;...&lt;/code&gt; refers to the commit&amp;rsquo;s hash. As a fall-back, partial matches of the commit subject work, too. The recommended way to create fixup/squash commits is by using the &lt;code&gt;--fixup&lt;/code&gt;/&lt;code&gt;--squash&lt;/code&gt; options of &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;.</source>
          <target state="translated">Когда сообщение журнала фиксации начинается с &amp;laquo;squash!&amp;hellip;&amp;raquo; (Или &amp;laquo;fixup!&amp;hellip;&amp;raquo;), И в списке задач уже есть фиксация, которая соответствует тому же &lt;code&gt;...&lt;/code&gt; , автоматически измените список задач rebase -i так что коммит помечено для раздавливания приходит сразу после фиксации необходимо изменить, и изменить действие перемещенного совершить из &lt;code&gt;pick&lt;/code&gt; в &lt;code&gt;squash&lt;/code&gt; (или &lt;code&gt;fixup&lt;/code&gt; ). Фиксация соответствует &lt;code&gt;...&lt;/code&gt; , если совпадает тема фиксации или если &lt;code&gt;...&lt;/code&gt; относится к хешу фиксации. В качестве запасного варианта также работают частичные совпадения с предметом коммита. Рекомендуемый способ создания Fixup / сквош совершающего это с помощью &lt;code&gt;--fixup&lt;/code&gt; / &lt;code&gt;--squash&lt;/code&gt; варианты &lt;a href=&quot;git-commit&quot;&gt;мерзавца фиксации [1]&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="777196d17b1a10c66d0cd105e5fb66da2363f7b1" translate="yes" xml:space="preserve">
          <source>When the config key &lt;code&gt;extensions.partialclone&lt;/code&gt; is set, it indicates that the repo was created with a partial clone (or later performed a partial fetch) and that the remote may have omitted sending certain unwanted objects. Such a remote is called a &quot;promisor remote&quot; and it promises that all such omitted objects can be fetched from it in the future.</source>
          <target state="translated">Когда установлен ключ конфигурации &lt;code&gt;extensions.partialclone&lt;/code&gt; , он указывает, что репо было создано с частичным клоном (или позже выполнено частичное получение) и что удаленный компьютер мог пропустить отправку определенных нежелательных объектов. Такой пульт называется &amp;laquo;пульт-обещатель&amp;raquo;, и он обещает, что все такие пропущенные объекты могут быть извлечены из него в будущем.</target>
        </trans-unit>
        <trans-unit id="ef73607bec133cc1d32aaf64deafc8c72104731d" translate="yes" xml:space="preserve">
          <source>When the config key &lt;code&gt;extensions.preciousObjects&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, objects in the repository MUST NOT be deleted (e.g., by &lt;code&gt;git-prune&lt;/code&gt; or &lt;code&gt;git repack -d&lt;/code&gt;).</source>
          <target state="translated">Когда для ключа конфигурации &lt;code&gt;extensions.preciousObjects&lt;/code&gt; установлено значение &lt;code&gt;true&lt;/code&gt; , объекты в репозитории НЕ ДОЛЖНЫ быть удалены (например, с помощью &lt;code&gt;git-prune&lt;/code&gt; или &lt;code&gt;git repack -d&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e23e26ad367e6b915821bbb7b38753fa6fd4c240" translate="yes" xml:space="preserve">
          <source>When the current working directory is below the repository directory print &quot;true&quot;, otherwise &quot;false&quot;.</source>
          <target state="translated">Когда текущий рабочий каталог находится ниже директории хранилища,выведите &quot;true&quot;,в противном случае &quot;false&quot;.</target>
        </trans-unit>
        <trans-unit id="8a7aa53d7bbe6bfa657a2a1bb84359882384d7fa" translate="yes" xml:space="preserve">
          <source>When the current working directory is inside the work tree of the repository print &quot;true&quot;, otherwise &quot;false&quot;.</source>
          <target state="translated">При нахождении текущей рабочей директории внутри рабочего дерева хранилища выведите &quot;true&quot;,иначе &quot;false&quot;.</target>
        </trans-unit>
        <trans-unit id="e614fb1c074d0b3ebd865c7756d786dc01074ea4" translate="yes" xml:space="preserve">
          <source>When the environment variable &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; is set, the program named by it is called to generate diffs, and Git does not use its builtin diff machinery. For a path that is added, removed, or modified, &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; is called with 7 parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7dc6a4dcd86a8d725c2332772df83ad820f427" translate="yes" xml:space="preserve">
          <source>When the environment variable &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; is set, the program named by it is called, instead of the diff invocation described above. For a path that is added, removed, or modified, &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; is called with 7 parameters:</source>
          <target state="translated">Когда переменная среды &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; установлена, вызывается названная ею программа вместо вызова diff, описанного выше. Для добавленного, удаленного или измененного пути &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; вызывается с 7 параметрами:</target>
        </trans-unit>
        <trans-unit id="ec4de571b6827b1e0107c62834d6f8cf9f50bba2" translate="yes" xml:space="preserve">
          <source>When the git-rebase command is run, it will first execute a &quot;pre-rebase&quot; hook if one exists. You can use this hook to do sanity checks and reject the rebase if it isn&amp;rsquo;t appropriate. Please see the template pre-rebase hook script for an example.</source>
          <target state="translated">Когда запускается команда git-rebase, она сначала выполняет перехватчик pre-rebase, если он существует. Вы можете использовать этот хук для проверки работоспособности и отклонения перебазирования, если это не подходит. См. Пример в сценарии ловушки предварительной перебазировки шаблона.</target>
        </trans-unit>
        <trans-unit id="4663df00f4cd516023be3e887d8ecce789e72f00" translate="yes" xml:space="preserve">
          <source>When the history involves criss-cross merges, there can be more than one &lt;code&gt;best&lt;/code&gt; common ancestor for two commits. For example, with this topology:</source>
          <target state="translated">Когда история включает в себя перекрестные слияния, для двух коммитов может быть более одного &lt;code&gt;best&lt;/code&gt; общего предка. Например, с такой топологией:</target>
        </trans-unit>
        <trans-unit id="58beafa5cea14c3b99014fb314d938b1ee9fac65" translate="yes" xml:space="preserve">
          <source>When the man viewer, specified by the &lt;code&gt;man.viewer&lt;/code&gt; configuration variables, is not among the supported ones, then the corresponding &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; configuration variable will be looked up. If this variable exists then the specified tool will be treated as a custom command and a shell eval will be used to run the command with the man page passed as arguments.</source>
          <target state="translated">Когда программа просмотра man, указанная в переменных конфигурации &lt;code&gt;man.viewer&lt;/code&gt; , не входит в число поддерживаемых, будет найдена соответствующая переменная конфигурации &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; . Если эта переменная существует, то указанный инструмент будет рассматриваться как пользовательская команда, и для выполнения команды будет использоваться eval оболочки с переданной в качестве аргументов страницей руководства.</target>
        </trans-unit>
        <trans-unit id="d01c091e9d01b5baf9f294a1d7b9c823d7d014bc" translate="yes" xml:space="preserve">
          <source>When the output goes to a terminal, it is color-coded by default, just like regular &lt;code&gt;git diff&lt;/code&gt;'s output. In addition, the first line (adding a commit) is green, the last line (deleting a commit) is red, the second line (with a perfect match) is yellow like the commit header of &lt;code&gt;git
show&lt;/code&gt;'s output, and the third line colors the old commit red, the new one green and the rest like &lt;code&gt;git show&lt;/code&gt;'s commit header.</source>
          <target state="translated">Когда вывод поступает на терминал, он по умолчанию имеет цветовую кодировку, как и обычный вывод &lt;code&gt;git diff&lt;/code&gt; . Кроме того, первая строка (добавление фиксации) зеленая, последняя строка (удаление фиксации) красная, вторая строка (с идеальным совпадением) желтая, как заголовок фиксации вывода &lt;code&gt;git show&lt;/code&gt; , а третья Строка окрашивает старую фиксацию в красный цвет, новую - в зеленый, а остальное - как заголовок фиксации &lt;code&gt;git show&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ecf68ce55bda2542529810833e005e7f157f71c2" translate="yes" xml:space="preserve">
          <source>When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally. &lt;code&gt;--no-3way&lt;/code&gt; can be used to override am.threeWay configuration variable. For more information, see am.threeWay in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">Если патч не применяется правильно, вернитесь к трехстороннему слиянию, если патч записывает идентичность больших двоичных объектов, к которым он должен применяться, и эти капли доступны локально. &lt;code&gt;--no-3way&lt;/code&gt; можно использовать для переопределения переменной конфигурации am.threeWay. Для получения дополнительной информации см. Am.threeWay в &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="28728fcf386b485f532ec99285643062f0405ba5" translate="yes" xml:space="preserve">
          <source>When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to, and we have those blobs available locally, possibly leaving the conflict markers in the files in the working tree for the user to resolve. This option implies the &lt;code&gt;--index&lt;/code&gt; option, and is incompatible with the &lt;code&gt;--reject&lt;/code&gt; and the &lt;code&gt;--cached&lt;/code&gt; options.</source>
          <target state="translated">Когда патч не применяется чисто, вернитесь к трехстороннему слиянию, если патч записывает идентичность больших двоичных объектов, к которым он должен применяться, и у нас есть эти капли, доступные локально, возможно, оставляя маркеры конфликтов в файлах в рабочем дереве. для разрешения пользователя. Этот параметр подразумевает параметр &lt;code&gt;--index&lt;/code&gt; и несовместим с параметрами &lt;code&gt;--reject&lt;/code&gt; и &lt;code&gt;--cached&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bdd1b4760c591dff915e966378bff929405d28b1" translate="yes" xml:space="preserve">
          <source>When the push is complete, outputs one or more &lt;code&gt;ok &amp;lt;dst&amp;gt;&lt;/code&gt; or &lt;code&gt;error &amp;lt;dst&amp;gt; &amp;lt;why&amp;gt;?&lt;/code&gt; lines to indicate success or failure of each pushed ref. The status report output is terminated by a blank line. The option field &amp;lt;why&amp;gt; may be quoted in a C style string if it contains an LF.</source>
          <target state="translated">Когда отправка завершена, выводится один или несколько &lt;code&gt;ok &amp;lt;dst&amp;gt;&lt;/code&gt; или &lt;code&gt;error &amp;lt;dst&amp;gt; &amp;lt;why&amp;gt;?&lt;/code&gt; строки, чтобы указать успех или неудачу каждой отправленной ссылки. Вывод отчета о состоянии заканчивается пустой строкой. Поле параметра &amp;lt;why&amp;gt; может быть заключено в кавычки в строке стиля C, если оно содержит LF.</target>
        </trans-unit>
        <trans-unit id="c36826b0bb47b2400e28127fc2b6b138c228a63f" translate="yes" xml:space="preserve">
          <source>When the remote branch you want to fetch is known to be rewound and rebased regularly, it is expected that its new tip will not be descendant of its previous tip (as stored in your remote-tracking branch the last time you fetched). You would want to use the &lt;code&gt;+&lt;/code&gt; sign to indicate non-fast-forward updates will be needed for such branches. There is no way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch.</source>
          <target state="translated">Когда известно, что удаленная ветвь, которую вы хотите получить, регулярно перематывается и переустанавливается, ожидается, что ее новый наконечник не будет потомком его предыдущего наконечника (как хранится в вашей ветке удаленного отслеживания при последней выборке). Вы можете использовать знак &lt;code&gt;+&lt;/code&gt; , чтобы указать, что для таких веток потребуются обновления без перемотки вперед. Невозможно определить или объявить, что ветка будет доступна в репозитории с таким поведением; извлекающий пользователь просто должен знать, что это ожидаемый шаблон использования ветки.</target>
        </trans-unit>
        <trans-unit id="c2d02d0fdbdd6b68f91184ab0fd8a5fcfd84e982" translate="yes" xml:space="preserve">
          <source>When the repository is bare print &quot;true&quot;, otherwise &quot;false&quot;.</source>
          <target state="translated">Когда в репозитории есть голая печать &quot;true&quot;,в противном случае &quot;false&quot;.</target>
        </trans-unit>
        <trans-unit id="4881892c9231f2a8cbf0d32abf5995af521026ca" translate="yes" xml:space="preserve">
          <source>When the repository is shallow print &quot;true&quot;, otherwise &quot;false&quot;.</source>
          <target state="translated">Если в репозитории выведено мелкое &quot;true&quot;,в противном случае &quot;false&quot;.</target>
        </trans-unit>
        <trans-unit id="37826a890a4b64bdd1230276a23bd80630675ca5" translate="yes" xml:space="preserve">
          <source>When the repository named by &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; has the commit at a tip of a ref that is different from the ref you have locally, you can use the &lt;code&gt;&amp;lt;local&amp;gt;:&amp;lt;remote&amp;gt;&lt;/code&gt; syntax, to have its local name, a colon &lt;code&gt;:&lt;/code&gt;, and its remote name.</source>
          <target state="translated">Когда хранилище назван &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; имеет фиксацию на кончике реф , который отличается от исх у вас есть локально, вы можете использовать &lt;code&gt;&amp;lt;local&amp;gt;:&amp;lt;remote&amp;gt;&lt;/code&gt; синтаксис, чтобы иметь свое локальное имя, двоеточие &lt;code&gt;:&lt;/code&gt; , и его удаленное имя.</target>
        </trans-unit>
        <trans-unit id="a7fe7f8247bda757ca8d697055bcfe0913ae2caf" translate="yes" xml:space="preserve">
          <source>When the repository to clone from is on a local machine, this flag bypasses the normal &quot;Git aware&quot; transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under &lt;code&gt;.git/objects/&lt;/code&gt; directory are hardlinked to save space when possible.</source>
          <target state="translated">Когда репозиторий, из которого нужно клонировать, находится на локальном компьютере, этот флаг обходит обычный транспортный механизм &amp;laquo;с учетом Git&amp;raquo; и клонирует репозиторий, создавая копию HEAD и всего, что находится в каталогах объектов и ссылок. Файлы в каталоге &lt;code&gt;.git/objects/&lt;/code&gt; жестко связаны для экономии места, когда это возможно.</target>
        </trans-unit>
        <trans-unit id="87edb2bef2f28c0f63de7720d331d50db0279e94" translate="yes" xml:space="preserve">
          <source>When the repository to clone is on the local machine, instead of using hard links, automatically setup &lt;code&gt;.git/objects/info/alternates&lt;/code&gt; to share the objects with the source repository. The resulting repository starts out without any object of its own.</source>
          <target state="translated">Когда репозиторий для клонирования находится на локальном компьютере, вместо использования жестких ссылок автоматически настраивайте &lt;code&gt;.git/objects/info/alternates&lt;/code&gt; для совместного использования объектов с исходным репозиторием. Результирующий репозиторий запускается без какого-либо собственного объекта.</target>
        </trans-unit>
        <trans-unit id="e18b845f941d21aaf5232c387f67cb23d0a4e759" translate="yes" xml:space="preserve">
          <source>When the result of a &lt;code&gt;git bisect&lt;/code&gt; is a non-merge commit, you should normally be able to discover the problem by examining just that commit. Developers can make this easy by breaking their changes into small self-contained commits. That won&amp;rsquo;t help in the case above, however, because the problem isn&amp;rsquo;t obvious from examination of any single commit; instead, a global view of the development is required. To make matters worse, the change in semantics in the problematic function may be just one small part of the changes in the upper line of development.</source>
          <target state="translated">Когда результатом &lt;code&gt;git bisect&lt;/code&gt; является фиксация без слияния, вы обычно можете обнаружить проблему, изучив только эту фиксацию. Разработчики могут упростить это, разбив свои изменения на небольшие автономные коммиты. Однако это не поможет в приведенном выше случае, потому что проблема не очевидна при изучении любого отдельного коммита; вместо этого требуется глобальный взгляд на развитие. Что еще хуже, изменение семантики проблемной функции может быть лишь небольшой частью изменений в верхней строке разработки.</target>
        </trans-unit>
        <trans-unit id="57dfd8622d0e5d97d5c5344dbdac2c35010a468d" translate="yes" xml:space="preserve">
          <source>When the split index feature is used, shared index files that were not modified since the time this variable specifies will be removed when a new shared index file is created. The value &quot;now&quot; expires all entries immediately, and &quot;never&quot; suppresses expiration altogether. The default value is &quot;2.weeks.ago&quot;. Note that a shared index file is considered modified (for the purpose of expiration) each time a new split-index file is either created based on it or read from it. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">При использовании функции разделения индекса файлы общих индексов, которые не были изменены с момента, указанного в этой переменной, будут удалены при создании нового файла общего индекса. Значение &amp;laquo;сейчас&amp;raquo; немедленно удаляет все записи, а &amp;laquo;никогда&amp;raquo; полностью подавляет истечение срока. Значение по умолчанию - &amp;laquo;2.weeks.ago&amp;raquo;. Обратите внимание, что файл общего индекса считается измененным (с целью истечения срока его действия) каждый раз, когда на его основе создается новый файл с разделенным индексом или считывается из него. См. &lt;a href=&quot;git-update-index&quot;&gt;Git-update-index [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="887ef75c2523fd6b4da84b3a0a714f4995305746" translate="yes" xml:space="preserve">
          <source>When the split index feature is used, this specifies the percent of entries the split index can contain compared to the total number of entries in both the split index and the shared index before a new shared index is written. The value should be between 0 and 100. If the value is 0 then a new shared index is always written, if it is 100 a new shared index is never written. By default the value is 20, so a new shared index is written if the number of entries in the split index would be greater than 20 percent of the total number of entries. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">Когда используется функция разделенного индекса, это указывает процент записей, которые может содержать разделенный индекс, по сравнению с общим количеством записей как в разделенном индексе, так и в общем индексе до записи нового общего индекса. Значение должно быть от 0 до 100. Если значение равно 0, то всегда записывается новый общий индекс, если он равен 100, новый общий индекс никогда не записывается. По умолчанию значение равно 20, поэтому новый общий индекс будет записан, если количество записей в разделенном индексе будет больше 20 процентов от общего количества записей. См. &lt;a href=&quot;git-update-index&quot;&gt;Git-update-index [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1631afdb92ffecd0a40ddcd8f40433691ff79d82" translate="yes" xml:space="preserve">
          <source>When the value is &lt;code&gt;interactive&lt;/code&gt; (or just &lt;code&gt;i&lt;/code&gt;), the rebase is run in interactive mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249674ff1351f5c865508a34f368a209ce692426" translate="yes" xml:space="preserve">
          <source>When the value is &lt;code&gt;interactive&lt;/code&gt;, the rebase is run in interactive mode.</source>
          <target state="translated">Когда значение является &lt;code&gt;interactive&lt;/code&gt; , перебазирование выполняется в интерактивном режиме.</target>
        </trans-unit>
        <trans-unit id="2a8620af5de619d02cbdb1290090cf457f4270c6" translate="yes" xml:space="preserve">
          <source>When the working tree is updated, using --recurse-submodules will also recursively reset the working tree of all active submodules according to the commit recorded in the superproject, also setting the submodules' HEAD to be detached at that commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc30d1504ae5818b5ebed3f68f464e3d8d41b06" translate="yes" xml:space="preserve">
          <source>When there are approximately more than this many loose objects in the repository, &lt;code&gt;git gc --auto&lt;/code&gt; will pack them. Some Porcelain commands use this command to perform a light-weight garbage collection from time to time. The default value is 6700.</source>
          <target state="translated">Когда в репозитории примерно больше свободных объектов, &lt;code&gt;git gc --auto&lt;/code&gt; упакует их. Некоторые команды Porcelain используют эту команду для выполнения время от времени упрощенной сборки мусора. Значение по умолчанию - 6700.</target>
        </trans-unit>
        <trans-unit id="c316674f184677333eb7d2b00fe1f02bf0eda4b8" translate="yes" xml:space="preserve">
          <source>When there are content conflicts, the merge machinery tries to annotate each side&amp;rsquo;s conflict markers with the commits where the content came from. Since the apply backend drops the original information about the rebased commits and their parents (and instead generates new fake commits based off limited information in the generated patches), those commits cannot be identified; instead it has to fall back to a commit summary. Also, when merge.conflictStyle is set to diff3, the apply backend will use &quot;constructed merge base&quot; to label the content from the merge base, and thus provide no information about the merge base commit whatsoever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fefa7cb364ff9a836bef0837ac15925fecc8f2" translate="yes" xml:space="preserve">
          <source>When there are more than this many packs that are not marked with &lt;code&gt;*.keep&lt;/code&gt; file in the repository, &lt;code&gt;git gc
--auto&lt;/code&gt; consolidates them into one larger pack. The default value is 50. Setting this to 0 disables it. Setting &lt;code&gt;gc.auto&lt;/code&gt; to 0 will also disable this.</source>
          <target state="translated">Если в репозитории имеется большее количество пакетов, не отмеченных &lt;code&gt;*.keep&lt;/code&gt; файлом, &lt;code&gt;git gc --auto&lt;/code&gt; объединяет их в один более крупный пакет. Значение по умолчанию - 50. Установка этого значения в 0 отключает его. Установка &lt;code&gt;gc.auto&lt;/code&gt; на 0 также отключит это.</target>
        </trans-unit>
        <trans-unit id="a99bf9777c550eb2f6602e82876314f8cadcb15d" translate="yes" xml:space="preserve">
          <source>When there is only one argument given and it is not &lt;code&gt;--&lt;/code&gt; (e.g. &lt;code&gt;git
checkout abc&lt;/code&gt;), and when the argument is both a valid &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; (e.g. a branch &lt;code&gt;abc&lt;/code&gt; exists) and a valid &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; (e.g. a file or a directory whose name is &quot;abc&quot; exists), Git would usually ask you to disambiguate. Because checking out a branch is so common an operation, however, &lt;code&gt;git checkout abc&lt;/code&gt; takes &quot;abc&quot; as a &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; in such a situation. Use &lt;code&gt;git checkout -- &amp;lt;pathspec&amp;gt;&lt;/code&gt; if you want to checkout these paths out of the index.</source>
          <target state="translated">Когда указан только один аргумент, а его нет &lt;code&gt;--&lt;/code&gt; (например, &lt;code&gt;git checkout abc&lt;/code&gt; ), и когда аргумент является как допустимым &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; (например, существует ветвь &lt;code&gt;abc&lt;/code&gt; ), так и допустимым &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; (например, файл или существует каталог с именем &amp;laquo;abc&amp;raquo;), Git обычно просит вас устранить неоднозначность. Однако, поскольку извлечение ветки является очень распространенной операцией, в такой ситуации &lt;code&gt;git checkout abc&lt;/code&gt; принимает &amp;laquo;abc&amp;raquo; в качестве &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; . Используйте &lt;code&gt;git checkout -- &amp;lt;pathspec&amp;gt;&lt;/code&gt; если вы хотите извлечь эти пути из индекса.</target>
        </trans-unit>
        <trans-unit id="3ff1d02c565a22d417998ec283b077273b716d4a" translate="yes" xml:space="preserve">
          <source>When these environment variables are set, the corresponding command-line arguments may not be used.</source>
          <target state="translated">При установке этих переменных окружения соответствующие аргументы командной строки могут не использоваться.</target>
        </trans-unit>
        <trans-unit id="86c4d2dcd046b538b0d9c792061f20bffd3f8c8e" translate="yes" xml:space="preserve">
          <source>When this flag is provided, the pack is read from stdin instead and a copy is then written to &amp;lt;pack-file&amp;gt;. If &amp;lt;pack-file&amp;gt; is not specified, the pack is written to objects/pack/ directory of the current Git repository with a default name determined from the pack content. If &amp;lt;pack-file&amp;gt; is not specified consider using --keep to prevent a race condition between this process and &lt;code&gt;git repack&lt;/code&gt;.</source>
          <target state="translated">Когда указан этот флаг, пакет читается из стандартного ввода, а затем его копия записывается в &amp;lt;pack-file&amp;gt;. Если &amp;lt;pack-file&amp;gt; не указан, пакет записывается в каталог objects / pack / текущего репозитория Git с именем по умолчанию, определяемым из содержимого пакета. Если &amp;lt;pack-file&amp;gt; не указан, рассмотрите возможность использования --keep, чтобы предотвратить состояние гонки между этим процессом и &lt;code&gt;git repack&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c91915e7d5f6096e68c1652d49f4ac505147354d" translate="yes" xml:space="preserve">
          <source>When this flag is specified, the object names recorded for the paths are not updated. Instead, this option sets/unsets the &quot;assume unchanged&quot; bit for the paths. When the &quot;assume unchanged&quot; bit is on, the user promises not to change the file and allows Git to assume that the working tree file matches what is recorded in the index. If you want to change the working tree file, you need to unset the bit to tell Git. This is sometimes helpful when working with a big project on a filesystem that has very slow lstat(2) system call (e.g. cifs).</source>
          <target state="translated">При установке этого флага имена объектов,записанные для путей,не обновляются.Вместо этого,данная опция устанавливает/удаляет бит &quot;assume unchanged&quot; для путей.При включённом бите &quot;assume unchanged&quot; (не изменять)пользователь обещает не изменять файл и позволяет Git'у полагать,что файл рабочего дерева соответствует тому,что записано в индексе.Если вы хотите изменить файл рабочего дерева,вам нужно снять бит,чтобы сообщить Git'у.Это иногда полезно при работе с большим проектом на файловой системе с очень медленным системным вызовом lstat(2)(например,cifs).</target>
        </trans-unit>
        <trans-unit id="b1f75c6b9b1b22670befceda22525699cad697f2" translate="yes" xml:space="preserve">
          <source>When this form of &lt;code&gt;git read-tree&lt;/code&gt; returns successfully, you can see which of the &quot;local changes&quot; that you made were carried forward by running &lt;code&gt;git diff-index --cached $M&lt;/code&gt;. Note that this does not necessarily match what &lt;code&gt;git diff-index --cached $H&lt;/code&gt; would have produced before such a two tree merge. This is because of cases 18 and 19 --- if you already had the changes in $M (e.g. maybe you picked it up via e-mail in a patch form), &lt;code&gt;git diff-index
--cached $H&lt;/code&gt; would have told you about the change before this merge, but it would not show in &lt;code&gt;git diff-index --cached $M&lt;/code&gt; output after the two-tree merge.</source>
          <target state="translated">Когда эта форма &lt;code&gt;git read-tree&lt;/code&gt; возвращается успешно, вы можете увидеть , какие из &amp;laquo;локальных изменений&amp;raquo; , которые были внесены были перенесены, запустив &lt;code&gt;git diff-index --cached $M&lt;/code&gt; . Обратите внимание, что это не обязательно соответствует тому, что &lt;code&gt;git diff-index --cached $H&lt;/code&gt; произвел бы до такого слияния двух деревьев. Это из-за случаев 18 и 19 - если у вас уже были изменения в $ M (например, возможно, вы получили его по электронной почте в форме патча), &lt;code&gt;git diff-index --cached $H&lt;/code&gt; сказал бы вам об изменении до этого слияния, но оно не будет отображаться в &lt;code&gt;git diff-index --cached $M&lt;/code&gt; после слияния двух деревьев.</target>
        </trans-unit>
        <trans-unit id="a7b5d3881356f9c9c7fd25660fd80f9c16873a97" translate="yes" xml:space="preserve">
          <source>When this option is specified, the behavior is as if a special &lt;code&gt;&amp;lt;token&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; argument were added at the beginning of the command line, where &amp;lt;value&amp;gt; is taken to be the standard output of the specified command with any leading and trailing whitespace trimmed off.</source>
          <target state="translated">Когда указана эта опция, поведение выглядит так, как если бы в начале командной строки был добавлен специальный аргумент &lt;code&gt;&amp;lt;token&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; , где &amp;lt;value&amp;gt; принимается как стандартный вывод указанной команды с любыми ведущими и завершающие пробелы обрезаны.</target>
        </trans-unit>
        <trans-unit id="fe0e96d95c4eefa9bfe72917d015cf48a18efcc2" translate="yes" xml:space="preserve">
          <source>When this special attribute is read by &lt;code&gt;git credential&lt;/code&gt;, the value is parsed as a URL and treated as if its constituent parts were read (e.g., &lt;code&gt;url=https://example.com&lt;/code&gt; would behave as if &lt;code&gt;protocol=https&lt;/code&gt; and &lt;code&gt;host=example.com&lt;/code&gt; had been provided). This can help callers avoid parsing URLs themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de58814133990da5a575ac12a35ef9b3b981ae4a" translate="yes" xml:space="preserve">
          <source>When this special attribute is read by &lt;code&gt;git credential&lt;/code&gt;, the value is parsed as a URL and treated as if its constituent parts were read (e.g., &lt;code&gt;url=https://example.com&lt;/code&gt; would behave as if &lt;code&gt;protocol=https&lt;/code&gt; and &lt;code&gt;host=example.com&lt;/code&gt; had been provided). This can help callers avoid parsing URLs themselves. Note that any components which are missing from the URL (e.g., there is no username in the example above) will be set to empty; if you want to provide a URL and override some attributes, provide the URL attribute first, followed by any overrides.</source>
          <target state="translated">Когда этот специальный атрибут считывается &lt;code&gt;git credential&lt;/code&gt; , значение анализируется как URL-адрес и обрабатывается так, как если бы были прочитаны его составные части (например, &lt;code&gt;url=https://example.com&lt;/code&gt; будет вести себя так, как если бы &lt;code&gt;protocol=https&lt;/code&gt; и &lt;code&gt;host=example.com&lt;/code&gt; был предоставлен). Это может помочь вызывающим абонентам избежать самостоятельного анализа URL-адресов. Обратите внимание, что любые компоненты, отсутствующие в URL-адресе (например, в приведенном выше примере нет имени пользователя), будут установлены как пустые; если вы хотите предоставить URL-адрес и переопределить некоторые атрибуты, сначала укажите атрибут URL-адреса, а затем любые переопределения.</target>
        </trans-unit>
        <trans-unit id="882eafec7b82da90c1fd3ae7dc7040457d013cf9" translate="yes" xml:space="preserve">
          <source>When trace files are written to a target directory, they will be named according to the last component of the SID (optionally followed by a counter to avoid filename collisions).</source>
          <target state="translated">Когда файлы трассировок записываются в целевую директорию,они будут именоваться в соответствии с последним компонентом SID (опционально за ними следует счетчик,чтобы избежать столкновений имен файлов).</target>
        </trans-unit>
        <trans-unit id="1771ffd8c74f9f0b2e623ff3c52581b28a17469b" translate="yes" xml:space="preserve">
          <source>When tracking multiple directories (using --stdlayout, --branches, or --tags options), git svn will attempt to connect to the root (or highest allowed level) of the Subversion repository. This default allows better tracking of history if entire projects are moved within a repository, but may cause issues on repositories where read access restrictions are in place. Passing &lt;code&gt;--no-minimize-url&lt;/code&gt; will allow git svn to accept URLs as-is without attempting to connect to a higher level directory. This option is off by default when only one URL/branch is tracked (it would do little good).</source>
          <target state="translated">При отслеживании нескольких каталогов (с использованием параметров --stdlayout, --branches или --tags) git svn попытается подключиться к корню (или самому высокому разрешенному уровню) репозитория Subversion. Это значение по умолчанию позволяет лучше отслеживать историю, если целые проекты перемещаются в репозиторий, но может вызвать проблемы в репозиториях, где есть ограничения доступа для чтения. Передача &lt;code&gt;--no-minimize-url&lt;/code&gt; позволит git svn принимать URL-адреса как есть, не пытаясь подключиться к каталогу более высокого уровня. Этот параметр отключен по умолчанию, если отслеживается только один URL / ветка (от этого мало пользы).</target>
        </trans-unit>
        <trans-unit id="442a6a05d34f849ad275ea5e7d6f50f5aafe59d9" translate="yes" xml:space="preserve">
          <source>When true, and when reachability bitmaps are enabled, pack-objects will try to send parts of the bitmapped packfile verbatim. This can reduce memory and CPU usage to serve fetches, but might result in sending a slightly larger pack. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce35b3add797f616ba5b3be537b437a03e625f0" translate="yes" xml:space="preserve">
          <source>When true, git will default to using the &lt;code&gt;--sparse&lt;/code&gt; option in &lt;code&gt;git pack-objects&lt;/code&gt; when the &lt;code&gt;--revs&lt;/code&gt; option is present. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. Default is &lt;code&gt;false&lt;/code&gt; unless &lt;code&gt;feature.experimental&lt;/code&gt; is enabled.</source>
          <target state="translated">Если true, git по умолчанию будет использовать параметр &lt;code&gt;--sparse&lt;/code&gt; в &lt;code&gt;git pack-objects&lt;/code&gt; , если &lt;code&gt;--revs&lt;/code&gt; параметр --revs . Этот алгоритм обходит только деревья, которые появляются на путях, которые вводят новые объекты. Это может иметь значительные преимущества в производительности при вычислении пакета для отправки небольшого изменения. Однако возможно, что в pack-файл будут добавлены дополнительные объекты, если включенные коммиты содержат определенные типы прямого переименования. По умолчанию &lt;code&gt;false&lt;/code&gt; , если не включен &lt;code&gt;feature.experimental&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a46d4189a8b9229b7d91d54cdebfebe81ffd9ae6" translate="yes" xml:space="preserve">
          <source>When true, git will default to using the &lt;code&gt;--sparse&lt;/code&gt; option in &lt;code&gt;git pack-objects&lt;/code&gt; when the &lt;code&gt;--revs&lt;/code&gt; option is present. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d73311a3b4a00977d7e2237078b01efb9320bfa" translate="yes" xml:space="preserve">
          <source>When true, git will include a &quot;hash cache&quot; section in the bitmap index (if one is written). This cache can be used to feed git&amp;rsquo;s delta heuristics, potentially leading to better deltas between bitmapped and non-bitmapped objects (e.g., when serving a fetch between an older, bitmapped pack and objects that have been pushed since the last gc). The downside is that it consumes 4 bytes per object of disk space. Defaults to true.</source>
          <target state="translated">Если true, git будет включать раздел &amp;laquo;хеш-кеш&amp;raquo; в индекс растрового изображения (если он записан). Этот кеш можно использовать для передачи дельта-эвристики git, что потенциально может привести к улучшению разницы между объектами с растровым отображением и без него (например, при обслуживании выборки между более старым пакетом с растровым отображением и объектами, которые были отправлены с момента последнего gc). Обратной стороной является то, что он потребляет 4 байта на объект дискового пространства. По умолчанию true.</target>
        </trans-unit>
        <trans-unit id="98f36898b39f3ac14609adb644f7b367554be4b3" translate="yes" xml:space="preserve">
          <source>When true, git will use pack bitmaps (if available) when packing to stdout (e.g., during the server side of a fetch). Defaults to true. You should not generally need to turn this off unless you are debugging pack bitmaps.</source>
          <target state="translated">Если это так,то при упаковке в stdout git будет использовать растровые пакеты (если они есть)(например,во время серверной стороны получения).По умолчанию равно true.Обычно вам не нужно выключать это значение,если только вы не отлаживаете битовые карты пакета.</target>
        </trans-unit>
        <trans-unit id="3060361b8b64f7f4f15aa5d402b402d65fd1ef21" translate="yes" xml:space="preserve">
          <source>When true, git will write a bitmap index when packing all objects to disk (e.g., when &lt;code&gt;git repack -a&lt;/code&gt; is run). This index can speed up the &quot;counting objects&quot; phase of subsequent packs created for clones and fetches, at the cost of some disk space and extra time spent on the initial repack. This has no effect if multiple packfiles are created. Defaults to true on bare repos, false otherwise.</source>
          <target state="translated">Если установлено значение true, git будет записывать индекс растрового изображения при упаковке всех объектов на диск (например, при запуске &lt;code&gt;git repack -a&lt;/code&gt; ). Этот индекс может ускорить фазу &amp;laquo;подсчета объектов&amp;raquo; последующих пакетов, созданных для клонов и выборок, за счет некоторого дискового пространства и дополнительного времени, затрачиваемого на начальную репакцию. Это не действует, если создано несколько файлов пакетов. По умолчанию true для голых репозиториев, в противном случае - false.</target>
        </trans-unit>
        <trans-unit id="b7b0c56b83a62c5cf7d9e0b77ba1430747588d7a" translate="yes" xml:space="preserve">
          <source>When true, rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when &quot;git pull&quot; is run. See &quot;branch.&amp;lt;name&amp;gt;.rebase&quot; for setting this on a per-branch basis.</source>
          <target state="translated">Если установлено значение true, перебазировать ветки поверх полученной ветки вместо объединения ветки по умолчанию с удаленного по умолчанию при запуске &amp;laquo;git pull&amp;raquo;. См. &quot;Branch. &amp;lt;name&amp;gt; .rebase&quot; для настройки этого для каждой ветки.</target>
        </trans-unit>
        <trans-unit id="c15c8ba9ac152f7e581087f6ca67eb8a95961a05" translate="yes" xml:space="preserve">
          <source>When true, rebase the branch &amp;lt;name&amp;gt; on top of the fetched branch, instead of merging the default branch from the default remote when &quot;git pull&quot; is run. See &quot;pull.rebase&quot; for doing this in a non branch-specific manner.</source>
          <target state="translated">Если установлено значение true, переставьте ветвь &amp;lt;name&amp;gt; поверх выбранной ветки вместо слияния ветки по умолчанию с удаленного по умолчанию при запуске &amp;laquo;git pull&amp;raquo;. См. &quot;Pull.rebase&quot; для того, чтобы сделать это не привязанным к ветке способом.</target>
        </trans-unit>
        <trans-unit id="32f2ccfcaf97ac2d1b8fdcbcf4ee46e8d18499a7" translate="yes" xml:space="preserve">
          <source>When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes.</source>
          <target state="translated">Когда это верно,перезагрузите текущее ответвление на верхней части верхнего течения после извлечения.Если есть удалённое отслеживаемое ответвление,соответствующее верхнему ответвлению,и ответвление верхнего уровня было перебазировано с момента последней загрузки,то этот перебазинг использует эту информацию,чтобы избежать перебазирования нелокальных изменений.</target>
        </trans-unit>
        <trans-unit id="e3872f2dbeef66b0c7927df02dbbfa3a35c8d12b" translate="yes" xml:space="preserve">
          <source>When two trees are given, it compares the first tree with the second. When a single commit is given, it compares the commit with its parents. The remaining commits, when given, are used as if they are parents of the first commit.</source>
          <target state="translated">Когда даются два дерева,он сравнивает первое дерево со вторым.Когда задан один коммит,он сравнивает коммит со своими родителями.Остальные коммиты,когда они заданы,используются,как если бы они были родителями первого коммита.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
