<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="vue_router">
    <body>
      <group id="vue_router">
        <trans-unit id="bbc943a2e601e6b13b22293e246af47a7e54b1bd" translate="yes" xml:space="preserve">
          <source>$route</source>
          <target state="translated">$route</target>
        </trans-unit>
        <trans-unit id="ae47c41f673b2d58768b8be64b33f63e643a81b0" translate="yes" xml:space="preserve">
          <source>$route.fullPath</source>
          <target state="translated">$route.fullPath</target>
        </trans-unit>
        <trans-unit id="bd933596293770a6a74175a52ae61bad2c0805eb" translate="yes" xml:space="preserve">
          <source>$route.hash</source>
          <target state="translated">$route.hash</target>
        </trans-unit>
        <trans-unit id="1b2f0bcf5085a69565f7f3dd9b2669dccab0aedd" translate="yes" xml:space="preserve">
          <source>$route.matched</source>
          <target state="translated">$route.matched</target>
        </trans-unit>
        <trans-unit id="2dcfeb60738fd374f4147229df77d39ff75b2dee" translate="yes" xml:space="preserve">
          <source>$route.name</source>
          <target state="translated">$route.name</target>
        </trans-unit>
        <trans-unit id="2ef5c591965bcc329c5ebc1dfcb687114f817e1e" translate="yes" xml:space="preserve">
          <source>$route.params</source>
          <target state="translated">$route.params</target>
        </trans-unit>
        <trans-unit id="a32363633914d08a7464643f6fd716fb4787a5a1" translate="yes" xml:space="preserve">
          <source>$route.path</source>
          <target state="translated">$route.path</target>
        </trans-unit>
        <trans-unit id="356305ca6d453ad02b108afe16317e19fef48b63" translate="yes" xml:space="preserve">
          <source>$route.query</source>
          <target state="translated">$route.query</target>
        </trans-unit>
        <trans-unit id="fb7ea86b30882f9789be7514b521bc39b211fc50" translate="yes" xml:space="preserve">
          <source>$route.redirectedFrom</source>
          <target state="translated">$route.redirectedFrom</target>
        </trans-unit>
        <trans-unit id="e2b54aaf637a706167ffdbc58bf59fe6f6ebb14c" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2013&amp;ndash;present Evan You</source>
          <target state="translated">&amp;copy; 2013 &amp;ndash; настоящее время Эван Ю</target>
        </trans-unit>
        <trans-unit id="17056c6f3b828e55a0714e10813195205ded5f4a" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt;</source>
          <target state="translated">&amp;lt;router-link&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9e5f35bd4b348475e6427871362480610fedb18d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `active-class` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; свойство `active-class`</target>
        </trans-unit>
        <trans-unit id="0919d275fffa1249415d2c149b2fcf4833a87845" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `append` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `append` prop</target>
        </trans-unit>
        <trans-unit id="8e5bcf9a8806af0c5517632e7a22fc8c6b301e4e" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `event` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `event` опора</target>
        </trans-unit>
        <trans-unit id="64256a593489293bc997bac113451c603807527c" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact-active-class` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `точный-активный-класс` опора</target>
        </trans-unit>
        <trans-unit id="dcacc42c9c63ee714569aa3e93438661925b20a6" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `exact` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `точное` свойство</target>
        </trans-unit>
        <trans-unit id="62a59864940863d5f5f310c91b2015056dcfe20d" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `replace` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `replace` prop</target>
        </trans-unit>
        <trans-unit id="17c934050ccdd19eab898c5be992e0f077075433" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `tag` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `tag` опора</target>
        </trans-unit>
        <trans-unit id="62afbd0360009766d040dcd101d2ac55aad87577" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-link&amp;gt; `to` prop</source>
          <target state="translated">&amp;lt;router-link&amp;gt; `to` prop</target>
        </trans-unit>
        <trans-unit id="b717f260fbb5dd71166ff6f87fc04bafa674fdeb" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt;</source>
          <target state="translated">&amp;lt;router-view&amp;gt;</target>
        </trans-unit>
        <trans-unit id="4917556424377e1bac5bec47f7e51fcce47c92c8" translate="yes" xml:space="preserve">
          <source>&amp;lt;router-view&amp;gt; `name` prop</source>
          <target state="translated">&amp;lt;router-view&amp;gt; `name` prop</target>
        </trans-unit>
        <trans-unit id="d980089e856205bcec5547594f80529b4bb2dbf4" translate="yes" xml:space="preserve">
          <source>/user/:username</source>
          <target state="translated">/user/:username</target>
        </trans-unit>
        <trans-unit id="8e473671079d8bf355ffb5aeaa2520e6e19a39c5" translate="yes" xml:space="preserve">
          <source>/user/:username/post/:post_id</source>
          <target state="translated">/user/:username/post/:post_id</target>
        </trans-unit>
        <trans-unit id="3e68ca614f1e2a458bd8cee024e17ec781d46d7f" translate="yes" xml:space="preserve">
          <source>/user/evan</source>
          <target state="translated">/user/evan</target>
        </trans-unit>
        <trans-unit id="8355ca333b10656272c592da956843def0d8c9b8" translate="yes" xml:space="preserve">
          <source>/user/evan/post/123</source>
          <target state="translated">/user/evan/post/123</target>
        </trans-unit>
        <trans-unit id="9a6d6a7b23103027b10fd0068f6d2895e45a4359" translate="yes" xml:space="preserve">
          <source>/users/:username</source>
          <target state="translated">/users/:username</target>
        </trans-unit>
        <trans-unit id="3116027cc4721833458e85b5ceda4bd49d63aac4" translate="yes" xml:space="preserve">
          <source>/users/:username/posts/:postId</source>
          <target state="translated">/users/:username/posts/:postId</target>
        </trans-unit>
        <trans-unit id="010a5c17cc4ce842791191537d7456653fc56f60" translate="yes" xml:space="preserve">
          <source>/users/eduardo</source>
          <target state="translated">/users/eduardo</target>
        </trans-unit>
        <trans-unit id="752f36f8454e2b9b4da62ac0e4b63fa653f4be60" translate="yes" xml:space="preserve">
          <source>/users/eduardo/posts/123</source>
          <target state="translated">/users/eduardo/posts/123</target>
        </trans-unit>
        <trans-unit id="c97ec024acd0782a5a17e06b51c2599c06c9cc14" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt; from - Route location we are navigating from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140893f30fddd4cc762bab7f8852f42931278a6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt; to - Route location we are navigating to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29da293bceafae264ed4012a408da0bae2e0b980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#routelocationraw&quot;&gt;&lt;code&gt;RouteLocationRaw&lt;/code&gt;&lt;/a&gt;: redirects to a different location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e03929199dbde7bb3976cd68f0e8587dba725c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../api/index#getroutes&quot;&gt;&lt;code&gt;router.getRoutes()&lt;/code&gt;&lt;/a&gt;: get an array with all the route records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a5b04aada6b63d96c60fcbdc710cf51666a29d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../../api/index#hasroute&quot;&gt;&lt;code&gt;router.hasRoute()&lt;/code&gt;&lt;/a&gt;: check if a route exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0ebedb0d96fa25852a72276465d939abbde65d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;guide/index&quot;&gt;Get started&lt;/a&gt; or play with the &lt;a href=&quot;https://github.com/vuejs/vue-router-next/tree/master/playground&quot;&gt;playground&lt;/a&gt; (see &lt;a href=&quot;https://github.com/vuejs/vue-router-next&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; to run them).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c37385e6b17ff0279b3d5ab84993b537814527" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;guide/index&quot;&gt;Get started&lt;/a&gt; or play with the &lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;examples&lt;/a&gt; (see &lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt; to run them).</source>
          <target state="translated">&lt;a href=&quot;guide/index&quot;&gt;Начните работу&lt;/a&gt; или &lt;a href=&quot;https://github.com/vuejs/vue-router/&quot;&gt; &lt;code&gt;README.md&lt;/code&gt; &lt;/a&gt; с &lt;a href=&quot;https://github.com/vuejs/vue-router/tree/dev/examples&quot;&gt;примерами&lt;/a&gt; (см. README.md, чтобы запустить их).</target>
        </trans-unit>
        <trans-unit id="5f568f5d151a701cff64bbb17fc3099dac774ab9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; provides npm-based CDN links. The above link will always point to the latest release on npm. You can also use a specific version/tag via URLs like &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; предоставляет ссылки CDN на основе npm. Вышеупомянутая ссылка всегда будет указывать на последний выпуск на npm. Вы также можете использовать определенную версию / тег через URL-адреса, например &lt;code&gt;https://unpkg.com/vue-router@2.0.0/dist/vue-router.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="66d06707b682026c1373eb667f9329df647d5a72" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://unpkg.com&quot;&gt;Unpkg.com&lt;/a&gt; provides npm-based CDN links. The above link will always point to the latest release on npm. You can also use a specific version/tag via URLs like &lt;code&gt;https://unpkg.com/vue-router@3.0.0/dist/vue-router.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e43e5aa8d91f7232f080e2aebd6a9aa533d683" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://v3.vuejs.org/guide/transitions-enterleave.html&quot;&gt;All transition APIs&lt;/a&gt; work the same here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc059da745e5ec5d6cb942898d0e5f4e41769a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;All transition APIs&lt;/a&gt; work the same here.</source>
          <target state="translated">&lt;a href=&quot;https://vuejs.org/guide/transitions.html&quot;&gt;Все API перехода&lt;/a&gt; работают здесь одинаково.</target>
        </trans-unit>
        <trans-unit id="1d49455089244dca76c495760fd4f43f0ea96e6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;abstract&quot;&lt;/code&gt;: &lt;code&gt;createMemoryHistory()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13599e350671b7c1627bc21f58bd7d02a37c17c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;hash&quot;&lt;/code&gt;: &lt;code&gt;createWebHashHistory()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5650929476675759ca1403b9c92d6b39b3d5965" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&quot;history&quot;&lt;/code&gt;: &lt;code&gt;createWebHistory()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f26414a86c1bdbf5af5c50d608525f6f4daf7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$route&lt;/code&gt; properties Encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5023e7150c1db9bd8af9a146a524ca3c97c6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; Реквизиты</target>
        </trans-unit>
        <trans-unit id="c27f6d9810c248e5339dfcf8978e132d7e8f2b9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; exposes a low level customization through a &lt;a href=&quot;https://v3.vuejs.org/guide/component-slots.html#scoped-slots&quot;&gt;scoped slot&lt;/a&gt;. This is a more advanced API that primarily targets library authors but can come in handy for developers as well, to build a custom component like a &lt;em&gt;NavLink&lt;/em&gt; or other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb64e7180cfede93521de20cc5070e7faf2f0d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is preferred over hard-coded &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; for the following reasons:</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; предпочтительнее жестко запрограммированного &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt; по следующим причинам:</target>
        </trans-unit>
        <trans-unit id="391a8cb2c3e0dcdc37873698e88d0be707ba1503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; is the component for enabling user navigation in a router-enabled app. The target location is specified with the &lt;code&gt;to&lt;/code&gt; prop. It renders as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag with correct &lt;code&gt;href&lt;/code&gt; by default, but can be configured with the &lt;code&gt;tag&lt;/code&gt; prop. In addition, the link automatically gets an active CSS class when the target route is active.</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; - это компонент для включения навигации пользователя в приложении с поддержкой маршрутизатора. Целевое местоположение указывается с помощью &lt;code&gt;to&lt;/code&gt; prop. По умолчанию он отображается как тег &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; с правильным &lt;code&gt;href&lt;/code&gt; , но его можно настроить с помощью свойства &lt;code&gt;tag&lt;/code&gt; . Кроме того, ссылка автоматически получает активный класс CSS, когда целевой маршрут активен.</target>
        </trans-unit>
        <trans-unit id="8048e254d403a196da6e8f0242ac4cdafcbf0c36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;'s &lt;code&gt;v-slot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751d371787cc9b4f7b424a9cbedecf5d396458eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; Props</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; Реквизиты</target>
        </trans-unit>
        <trans-unit id="c0bd2d5da1436a6216321994bb4d448e6bc2cca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; exposes a &lt;code&gt;v-slot&lt;/code&gt; API mainly to wrap your route components with &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df885bc66070f82d978fea287f6e6e20438a2847" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;'s &lt;code&gt;v-slot&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0694b3da860a23970d4b5c23750beb4b8c7afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e7995571aef97f624448d51568b181ad8e0b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;(vm: ComponentPublicInstance) =&amp;gt; any&lt;/code&gt;&lt;strong&gt;only for &lt;code&gt;beforeRouteEnter&lt;/code&gt;&lt;/strong&gt;: A callback to be executed once the navigation completes. Receives the route component instance as the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9a61da8d01cc038593feae078e275df4dd15da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo(/foo)?/suffix&lt;/code&gt; becomes &lt;code&gt;/foo/:_(foo)?/suffix&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18c42f2ed3cf022191d6bfb310279aeb43075b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo(foo)?&lt;/code&gt; becomes &lt;code&gt;/foo:_(foo)?&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb280ad23b158cb4d6103b2a7cd971b3ed8080d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;/foo/(.*)&lt;/code&gt; becomes &lt;code&gt;/foo/:_(.*)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392d3216bfd839329db24a375c347f40a038468c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Component&lt;/code&gt;: VNodes to be passed to a &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt;'s &lt;code&gt;is&lt;/code&gt; prop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcb4f3c2b2d6b4db1e76c697c631a4401d87828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; next (Optional) - Callback to validate the navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa40192fa2b6ce9811978688ea693865c7a66fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Nav&lt;/code&gt; is just a regular component</source>
          <target state="translated">&lt;code&gt;Nav&lt;/code&gt; - это просто обычный компонент</target>
        </trans-unit>
        <trans-unit id="d4d4da5b1052cfaa8e18ae6636b0a0bdb2226cf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt;, &lt;code&gt;UserProfile&lt;/code&gt;, &lt;code&gt;UserProfilePreview&lt;/code&gt; are nested view components</source>
          <target state="translated">&lt;code&gt;UserEmailsSubscriptions&lt;/code&gt; , &lt;code&gt;UserProfile&lt;/code&gt; , &lt;code&gt;UserProfilePreview&lt;/code&gt; - это вложенные компоненты представления.</target>
        </trans-unit>
        <trans-unit id="f2833ce2bfd0bf668e88aee765843e3b572ff716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSettings&lt;/code&gt; is the parent view component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339bb7bce4bdd7501eede7218e8fffaf06787009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSettings&lt;/code&gt; is the view component</source>
          <target state="translated">&lt;code&gt;UserSettings&lt;/code&gt; - это компонент представления</target>
        </trans-unit>
        <trans-unit id="a56de1f1f64b8ea396997a9f32709d577b1fbb45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aborted&lt;/code&gt;: &lt;code&gt;false&lt;/code&gt; was returned inside of a navigation guard to the navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c248d8bb241f09ffb6fbc7f22d684eb0a1d8b67a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract&lt;/code&gt;: works in all JavaScript environments, e.g. server-side with Node.js. &lt;strong&gt;The router will automatically be forced into this mode if no browser API is present.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;abstract&lt;/code&gt; : работает во всех средах JavaScript, например на стороне сервера с Node.js. &lt;strong&gt;Маршрутизатор будет автоматически переведен в этот режим, если API браузера отсутствует.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af3a1eca3ef1a5555c0872eef167faab0dbff5fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append&lt;/code&gt; allows you to append the path to the &lt;code&gt;current&lt;/code&gt; route (as with &lt;a href=&quot;#router-link-props&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;append&lt;/code&gt; позволяет вам добавить путь к &lt;code&gt;current&lt;/code&gt; маршруту (как с &lt;a href=&quot;#router-link-props&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="96bff7f6f2a3e47ca24053eedc998ff1287c01cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeEnter&lt;/code&gt; guards &lt;strong&gt;only trigger when entering the route&lt;/strong&gt;, they don't trigger when the &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; change e.g. going from &lt;code&gt;/users/2&lt;/code&gt; to &lt;code&gt;/users/3&lt;/code&gt; or going from &lt;code&gt;/users/2#info&lt;/code&gt; to &lt;code&gt;/users/2#projects&lt;/code&gt;. They are only triggered when navigating &lt;strong&gt;from a different&lt;/strong&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19879dbc4b4c2c9276d88336c28eaf6c690928f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelled&lt;/code&gt;: A new navigation took place before the current navigation could finish. e.g. &lt;code&gt;router.push&lt;/code&gt; was called while waiting inside of a navigation guard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129408f980a6f71e8252a2b7d310994da58b1f7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;current&lt;/code&gt; is the current Route by default (most of the time you don't need to change this)</source>
          <target state="translated">&lt;code&gt;current&lt;/code&gt; - это текущий маршрут по умолчанию (в большинстве случаев вам не нужно его менять)</target>
        </trans-unit>
        <trans-unit id="4cd075448189ead8d3d79777f8c36c42227c0955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duplicated&lt;/code&gt;: The navigation was prevented because we are already at the target location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d2f9ec274350ed210789ebfeb1e80035da1538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;: cancel the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the &lt;code&gt;from&lt;/code&gt; route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2eccb3ab27ad3d3c3b585c39664bcb48cbcff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;: cancels the navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7901311941adc2e28baff529d7b714b0fefc1c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt; is now decoded, that way it can be copied over: &lt;code&gt;router.push({ hash: $route.hash })&lt;/code&gt; and be used directly in &lt;a href=&quot;../../api/index#scrollbehavior&quot;&gt;scrollBehavior&lt;/a&gt;'s &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189c0025be7509058d16e090465cd0385f78be80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt;: uses the URL hash for routing. Works in all Vue-supported browsers, including those that do not support HTML5 History API.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; : использует хеш URL для маршрутизации. Работает во всех браузерах с поддержкой Vue, включая те, которые не поддерживают HTML5 History API.</target>
        </trans-unit>
        <trans-unit id="97eed375fc42f919f4e9b643c4bb1890cb0f7295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;: requires HTML5 History API and server config. See &lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;HTML5 History Mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; : требуется HTML5 History API и конфигурация сервера. См. Раздел &amp;laquo; &lt;a href=&quot;../guide/essentials/history-mode&quot;&gt;Режим истории HTML5&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0b103b021b9621de589ce2ae44d1d65b12c99e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt;: resolved url. This would be the &lt;code&gt;href&lt;/code&gt; attribute of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. It contains the &lt;code&gt;base&lt;/code&gt; if any was provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58b2dbc0bef12a78d609ec7bf08b4f7f8e93325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;href&lt;/code&gt;: resolved url. This would be the &lt;code&gt;href&lt;/code&gt; attribute of an &lt;code&gt;a&lt;/code&gt; element</source>
          <target state="translated">&lt;code&gt;href&lt;/code&gt; : разрешенный URL. Это будет атрибут &lt;code&gt;href&lt;/code&gt; элемента &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="611ffa6d9619afb4b3249c4b1280720afdac83a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#active-class&quot;&gt;active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isActive&lt;/code&gt; : &lt;code&gt;true&lt;/code&gt; , если должен применяться &lt;a href=&quot;#active-class&quot;&gt;активный класс&lt;/a&gt; . Позволяет применить произвольный класс</target>
        </trans-unit>
        <trans-unit id="c9993767989e7bad687499bef48dec8e8dcd1831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#active-class&quot;&gt;active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9656f6654118175ebf382e9f9c1431925bcd1855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isExactActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#exact-active-class&quot;&gt;exact active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class</source>
          <target state="translated">&lt;code&gt;isExactActive&lt;/code&gt; : &lt;code&gt;true&lt;/code&gt; , если должен применяться &lt;a href=&quot;#exact-active-class&quot;&gt;точный активный класс&lt;/a&gt; . Позволяет применить произвольный класс</target>
        </trans-unit>
        <trans-unit id="b8387221eaefdadb45e4d925adb2626b1aeb971c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isExactActive&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the &lt;a href=&quot;#exact-active-class&quot;&gt;exact active class&lt;/a&gt; should be applied. Allows to apply an arbitrary class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d504eaad212b1e406054d3192107cdebdcc5d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;navigate&lt;/code&gt;: function to trigger the navigation. &lt;strong&gt;It will automatically prevent events when necessary&lt;/strong&gt;, the same way &lt;code&gt;router-link&lt;/code&gt; does</source>
          <target state="translated">&lt;code&gt;navigate&lt;/code&gt; : функция для запуска навигации. &lt;strong&gt;Он будет автоматически предотвратить события , когда это необходимо&lt;/strong&gt; , так же , как &lt;code&gt;router-link&lt;/code&gt; делает</target>
        </trans-unit>
        <trans-unit id="91af7b938b42ca28c7f8180636eea2188ac32cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;navigate&lt;/code&gt;: function to trigger the navigation. &lt;strong&gt;It will automatically prevent events when necessary&lt;/strong&gt;, the same way &lt;code&gt;router-link&lt;/code&gt; does, e.g. &lt;code&gt;ctrl&lt;/code&gt; or &lt;code&gt;cmd&lt;/code&gt; + click will still be ignored by &lt;code&gt;navigate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a809e4f08b53da8fd7d37a751468791fa6a8ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized &lt;a href=&quot;#routelocationnormalized&quot;&gt;route location&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fbbf7066c3d9354554b2609da08e7517fcebc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized location</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt; : разрешенное нормализованное местоположение</target>
        </trans-unit>
        <trans-unit id="2bf0f15dc1c0a7ea9b093a3c4e405463f52715e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;: resolved normalized location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4ae5a9e39a806af75882e2b086e5d5bfb57f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router-link&lt;/code&gt; exposes a low level customization through a &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;scoped slot&lt;/a&gt;. This is a more advanced API that primarily targets library authors but can come in handy for developers as well, most of the time in a custom component like a &lt;em&gt;NavLink&lt;/em&gt; or other.</source>
          <target state="translated">&lt;code&gt;router-link&lt;/code&gt; предоставляет низкоуровневую настройку через &lt;a href=&quot;https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots&quot;&gt;слот&lt;/a&gt; с заданной областью . Это более продвинутый API, который в первую очередь ориентирован на авторов библиотек, но может пригодиться и разработчикам, большую часть времени в виде настраиваемого компонента, такого как &lt;em&gt;NavLink&lt;/em&gt; или другой.</target>
        </trans-unit>
        <trans-unit id="1ca04f2e2a14f37a9f04ba3d616c21c1bee36880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router-view&lt;/code&gt; will display the component that corresponds to the url. You can put it anywhere to adapt it to your layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5163b9301f6ec898f0ad922c8f4c446f97a1259" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.app&lt;/code&gt; used to represent the last root component (Vue instance) that injected the router. Vue Router can now be safely used by multiple Vue applications at the same time. You can still add it when using the router:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad00e4ec5139821a57dabec0287d90207dd4c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.beforeResolve&lt;/code&gt; is the ideal spot to fetch data or do any other operation that you want to avoid doing if the user cannot enter a page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede4d0ad8bb2b51b5b2b14261f74e01c4c9c6897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;router.push&lt;/code&gt; and all the other navigation methods return a &lt;em&gt;Promise&lt;/em&gt; that allows us to wait til the navigation is finished and to know if it succeeded or failed. We will talk more about that in &lt;a href=&quot;../advanced/navigation-handling&quot;&gt;Navigation Handling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0163f0e8bd3d5e405cdcbe5abad2efecfbc0a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;routes&lt;/code&gt; option is required in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca74d03132c6a1c2e870892d63755efb23a225e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scrollBehavior&lt;/code&gt; changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7ccceaf6e196c7d1a040849263f9f6c033bcf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;keep-alive&lt;/code&gt; must now be used &lt;strong&gt;inside&lt;/strong&gt; of &lt;code&gt;RouterView&lt;/code&gt; via the &lt;code&gt;v-slot&lt;/code&gt; API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dc0031606e17ddf411d75acdb1adf87a5780e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undefined | void | true&lt;/code&gt;: validates the navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b33026ea8fd215f12d789371dfb8a1ad6610cf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v-slot&lt;/code&gt; API (3.1.0+)</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; API (3.1.0+)</target>
        </trans-unit>
        <trans-unit id="105a0b4759b072acbf3f5caad5c732de1378b383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vue-router&lt;/code&gt; uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; as its path matching engine, so it supports many advanced matching patterns such as optional dynamic segments, zero or more / one or more requirements, and even custom regex patterns. Check out its &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;documentation&lt;/a&gt; for these advanced patterns, and &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;this example&lt;/a&gt; of using them in &lt;code&gt;vue-router&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vue-router&lt;/code&gt; использует &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp в&lt;/a&gt; качестве механизма сопоставления путей, поэтому он поддерживает множество расширенных шаблонов сопоставления, таких как необязательные динамические сегменты, ноль или несколько / одно или несколько требований и даже пользовательские шаблоны регулярных выражений. Ознакомьтесь с его &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp#parameters&quot;&gt;документацией&lt;/a&gt; по этим расширенным шаблонам и с &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-matching/app.js&quot;&gt;этим примером&lt;/a&gt; их использования в &lt;code&gt;vue-router&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b313cd5c52caaa6485f1073613beebd813f00bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; (offset only supported in 2.6.0+)</source>
          <target state="translated">&lt;code&gt;{ selector: string, offset? : { x: number, y: number }}&lt;/code&gt; (смещение поддерживается только в 2.6.0+)</target>
        </trans-unit>
        <trans-unit id="c238ca1b115d2cdede402cc33a7431f54e04cc73" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Navigation Failures&lt;/em&gt; are &lt;code&gt;Error&lt;/code&gt; instances with a few extra properties that gives us enough information to know what navigation was prevented and why. To check the nature of a navigation result, use the &lt;code&gt;isNavigationFailure&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3a6d8b7355aed0065ffea6c33f58e770dc5d44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Navigation Failures&lt;/em&gt;'s properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583cfde09a1360aa77098a06e99e38233ed3cdd8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Parameters&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Parameters&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d1dbe6ec2fcc5cc583f066d2d323aa23374ef4ce" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;The nested view components are omitted here but you can find the complete source code for the example above &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Компоненты вложенного представления здесь опущены, но вы можете найти полный исходный код для примера выше &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;здесь&lt;/a&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4fac0bef8a644d999b3cad91a9f9a5acc91a6ebb" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-fullPath&quot;&gt;$route.fullPath&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c11e00b2564886e95f2e3e968183b169b9fe441" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-hash&quot;&gt;$route.hash&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b71dfa4baecd89c7ee1f8419263541f945c335dd" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-matched&quot;&gt;$route.matched&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92ef7643f2712e5f5409f9b0a9fc20ea4b43afec" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-name&quot;&gt;$route.name&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96d1157695c4bd399db774e48518889c47570451" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-params&quot;&gt;$route.params&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7a8d8937c8e4e28bc63d5b8e6b813189ae0e8c0" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-path&quot;&gt;$route.path&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6573b6281dec720e4ab3018e24b58c4b5df19e23" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-query&quot;&gt;$route.query&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc3d56099f87e0d1e43e14294c252e742db988e5" translate="yes" xml:space="preserve">
          <source>&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</source>
          <target state="translated">&lt;strong id=&quot;route-object-redirectedFrom&quot;&gt;$route.redirectedFrom&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73c15197133db1ce9671a21babe5d55ac33756df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;from: Route&lt;/code&gt;&lt;/strong&gt;: the current route being navigated away from.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;from: Route&lt;/code&gt; &lt;/strong&gt; : текущий маршрут, от которого выполняется навигация.</target>
        </trans-unit>
        <trans-unit id="3210f05a704dec4b1c094ea26f578ec5134e258b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;from&lt;/code&gt;&lt;/strong&gt;: the current route location &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;in a normalized format&lt;/a&gt; being navigated away from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d867643772e9ef0f90dca26d991bd61e7d2d09a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next('/')&lt;/code&gt; or &lt;code&gt;next({ path: '/' })&lt;/code&gt;&lt;/strong&gt;: redirect to a different location. The current navigation will be aborted and a new one will be started. You can pass any location object to &lt;code&gt;next&lt;/code&gt;, which allows you to specify options like &lt;code&gt;replace: true&lt;/code&gt;, &lt;code&gt;name: 'home'&lt;/code&gt; and any option used in &lt;a href=&quot;../../api/index#to&quot;&gt;&lt;code&gt;router-link&lt;/code&gt;'s &lt;code&gt;to&lt;/code&gt; prop&lt;/a&gt; or &lt;a href=&quot;../../api/index#router-push&quot;&gt;&lt;code&gt;router.push&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next('/')&lt;/code&gt; или &lt;code&gt;next({ path: '/' })&lt;/code&gt; &lt;/strong&gt; : перенаправить в другое место. Текущая навигация будет прервана и начнется новая. Вы можете передать любой объект местоположения к &lt;code&gt;next&lt;/code&gt; , которая позволяет определить параметрыкак &lt;code&gt;replace: true&lt;/code&gt; , &lt;code&gt;name: 'home'&lt;/code&gt; и любой параметриспользуемый в&lt;a href=&quot;../../api/index#to&quot;&gt; &lt;code&gt;router-link&lt;/code&gt; &amp;laquo;S , &lt;code&gt;to&lt;/code&gt; поддержать&lt;/a&gt; или&lt;a href=&quot;../../api/index#router-push&quot;&gt; &lt;code&gt;router.push&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d10de2ce08935b888355cfc5209983856ceabc72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/strong&gt;: move on to the next hook in the pipeline. If no hooks are left, the navigation is &lt;strong&gt;confirmed&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/strong&gt; : перейти к следующему хуку в конвейере. Если крючков не осталось, переход&lt;strong&gt; подтверждается&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bd5f2287807263c04bce722222c123698b327757" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(error)&lt;/code&gt;&lt;/strong&gt;: (2.4.0+) if the argument passed to &lt;code&gt;next&lt;/code&gt; is an instance of &lt;code&gt;Error&lt;/code&gt;, the navigation will be aborted and the error will be passed to callbacks registered via &lt;a href=&quot;../../api/index#router-onerror&quot;&gt;&lt;code&gt;router.onError()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(error)&lt;/code&gt; &lt;/strong&gt; : (2.4.0+) если аргумент, переданный в &lt;code&gt;next&lt;/code&gt; , является экземпляром &lt;code&gt;Error&lt;/code&gt; , навигация будет прервана, и ошибка будет передана&lt;a href=&quot;../../api/index#router-onerror&quot;&gt; &lt;code&gt;router.onError()&lt;/code&gt; &lt;/a&gt; обратного вызова, зарегистрированным через router.onError () .</target>
        </trans-unit>
        <trans-unit id="35a20b24c354c5ad8d363a0a6cc7cbb4955efc25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next(false)&lt;/code&gt;&lt;/strong&gt;: abort the current navigation. If the browser URL was changed (either manually by the user or via back button), it will be reset to that of the &lt;code&gt;from&lt;/code&gt; route.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next(false)&lt;/code&gt; &lt;/strong&gt; : прервать текущую навигацию. Если URL-адрес браузера был изменен (вручную пользователем или с помощью кнопки &amp;laquo;Назад&amp;raquo;), он будет сброшен на URL-адрес &lt;code&gt;from&lt;/code&gt; маршрута.</target>
        </trans-unit>
        <trans-unit id="8d4fd6417cf648085f5a319fa87e224269455b3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;next: Function&lt;/code&gt;&lt;/strong&gt;: this function must be called to &lt;strong&gt;resolve&lt;/strong&gt; the hook. The action depends on the arguments provided to &lt;code&gt;next&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;next: Function&lt;/code&gt; &lt;/strong&gt; : эта функция должна быть вызвана для&lt;strong&gt; разрешения&lt;/strong&gt; перехвата. Действие зависит от аргументовпредоставленных &lt;code&gt;next&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="692c595e63b46ccc3431b621082e8fa5bef1f3d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;to: Route&lt;/code&gt;&lt;/strong&gt;: the target &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;Route Object&lt;/a&gt; being navigated to.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;to: Route&lt;/code&gt; &lt;/strong&gt; : целевой&lt;a href=&quot;../../api/index#the-route-object&quot;&gt; объект маршрута, к&lt;/a&gt; которомувыполняетсянавигация.</target>
        </trans-unit>
        <trans-unit id="5e4a5d55d9865341dd4dc87493a567c5e45ba29e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;to&lt;/code&gt;&lt;/strong&gt;: the target route location &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;in a normalized format&lt;/a&gt; being navigated to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e57ea9e639d9c6933741beeeccac340447cde1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;All&lt;/strong&gt; navigations are now always asynchronous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2101bc75b3b803a2712edeb26cd0d04a12fbf812" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An alias of &lt;code&gt;/&lt;/code&gt; as &lt;code&gt;/home&lt;/code&gt; means when the user visits &lt;code&gt;/home&lt;/code&gt;, the URL remains &lt;code&gt;/home&lt;/code&gt;, but it will be matched as if the user is visiting &lt;code&gt;/&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b7c8ca4a999bad33b5831545e1788c63dc6d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;An alias of &lt;code&gt;/a&lt;/code&gt; as &lt;code&gt;/b&lt;/code&gt; means when the user visits &lt;code&gt;/b&lt;/code&gt;, the URL remains &lt;code&gt;/b&lt;/code&gt;, but it will be matched as if the user is visiting &lt;code&gt;/a&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Псевдоним &lt;code&gt;/a&lt;/code&gt; as &lt;code&gt;/b&lt;/code&gt; означает, что когда пользователь посещает &lt;code&gt;/b&lt;/code&gt; , URL-адрес остается &lt;code&gt;/b&lt;/code&gt; , но он будет сопоставлен, как если бы пользователь посещал &lt;code&gt;/a&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0a205d2b3de2c4f756a0f007ab11b2eb18591c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Arguments&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Arguments&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="da8185af2453502d2a6d21a954b64a48f5e8d3af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Decouple it by using &lt;code&gt;props&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Разделите это с помощью &lt;code&gt;props&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1920a86464a80ef8f055ec720a9bbad4335f1b36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660e6e5069856ed7a471d6a2c39a4f15a0c3efaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;page&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b653888ea613af16e3d5419c607dfd2c749d4c43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt; (or global &lt;a href=&quot;#linkactiveclass&quot;&gt;&lt;code&gt;linkActiveClass&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b612e0f47baaa05bd135ae162755d2080de34073" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt; (or global &lt;a href=&quot;#linkexactactiveclass&quot;&gt;&lt;code&gt;linkExactActiveClass&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaaad54355debb41a165436b930d4d335e6dd7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default&lt;/strong&gt;: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd33bccabf4baed11a0e5d64ae015384a797ae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Details&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Details&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="aec29b6e22750bc511d0ca82430cb4a126753e79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="1bfb124a5c007d689be864e3a2ebd16e3664c182" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching After Navigation&lt;/strong&gt;: perform the navigation first, and fetch data in the incoming component's lifecycle hook. Display a loading state while data is being fetched.</source>
          <target state="translated">&lt;strong&gt;Получение после навигации&lt;/strong&gt; : сначала выполните навигацию и извлеките данные в ловушке жизненного цикла входящего компонента. Отображение состояния загрузки во время получения данных.</target>
        </trans-unit>
        <trans-unit id="784e78a4a863c42db56de5d99730217f98191764" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fetching Before Navigation&lt;/strong&gt;: Fetch data before navigation in the route enter guard, and perform the navigation after data has been fetched.</source>
          <target state="translated">&lt;strong&gt;Получение&lt;/strong&gt; данных перед навигацией: получение данных перед навигацией по маршруту, входящему в охрану, и выполнение навигации после получения данных.</target>
        </trans-unit>
        <trans-unit id="85aa166ff434e379c8599f4624e12e78defa0f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Instead of coupling to &lt;code&gt;$route&lt;/code&gt;:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Вместо связывания с &lt;code&gt;$route&lt;/code&gt; :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86d0ba4307d3d286e8917735285562ed5f0feb93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make sure to always call the &lt;code&gt;next&lt;/code&gt; function, otherwise the hook will never be resolved.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Обязательно всегда вызывайте &lt;code&gt;next&lt;/code&gt; функцию, иначе ловушка никогда не будет разрешена.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="642101b00ce497cec114f21ff5898e639801ff69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note about SEO&lt;/strong&gt;: when using aliases, make sure to &lt;a href=&quot;https://support.google.com/webmasters/answer/139066?hl=en&quot;&gt;define canonical links&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed409cff95e4d497045c8e930679df562a355d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that nested paths that start with &lt;code&gt;/&lt;/code&gt; will be treated as a root path. This allows you to leverage the component nesting without having to use a nested URL.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Обратите внимание, что вложенные пути, начинающиеся с &lt;code&gt;/&lt;/code&gt; , будут рассматриваться как корневой путь. Это позволяет вам использовать вложение компонентов без использования вложенного URL-адреса.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0aec4cdffd53c36dfc090da8e974a1be937b9a80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: Inside of a Vue instance, you have access to the router instance as &lt;code&gt;$router&lt;/code&gt;. You can therefore call &lt;code&gt;this.$router.push&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Примечание. Внутри экземпляра Vue у вас есть доступ к экземпляру маршрутизатора как &lt;code&gt;$router&lt;/code&gt; . Поэтому вы можете назвать &lt;code&gt;this.$router.push&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d064eb0fb56e93c57a44a1fe432eca814279295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: this feature only works if the browser supports &lt;code&gt;history.pushState&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Примечание: эта функция работает, только если браузер поддерживает &lt;code&gt;history.pushState&lt;/code&gt; .&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8c987a4ff8744b98065a5eaac261bda80334b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the destination is the same as the current route and only params are changing (e.g. going from one profile to another &lt;code&gt;/users/1&lt;/code&gt; -&amp;gt; &lt;code&gt;/users/2&lt;/code&gt;), you will have to use &lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt;&lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;/a&gt; to react to changes (e.g. fetching the user information).</source>
          <target state="translated">&lt;strong&gt;Примечание.&lt;/strong&gt; Если пункт назначения совпадает с текущим маршрутом, и меняются только параметры (например, переход от одного профиля к другому &lt;code&gt;/users/1&lt;/code&gt; -&amp;gt; &lt;code&gt;/users/2&lt;/code&gt; ), вам придется использовать &lt;a href=&quot;dynamic-matching#reacting-to-params-changes&quot;&gt; &lt;code&gt;beforeRouteUpdate&lt;/code&gt; ,&lt;/a&gt; чтобы реагировать на изменения (например, получение информация о пользователе).</target>
        </trans-unit>
        <trans-unit id="f2cd00a05c4e51c80b150666326157914820525e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Note&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f731a0483e5d55c7ef53ce77b71cd21cc581fa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;params&lt;/code&gt; are ignored if a &lt;code&gt;path&lt;/code&gt; is provided, which is not the case for &lt;code&gt;query&lt;/code&gt;, as shown in the example above. Instead, you need to provide the &lt;code&gt;name&lt;/code&gt; of the route or manually specify the whole &lt;code&gt;path&lt;/code&gt; with any parameter:</source>
          <target state="translated">&lt;strong&gt;Примечание&lt;/strong&gt; : &lt;code&gt;params&lt;/code&gt; игнорируются, если указан &lt;code&gt;path&lt;/code&gt; , что не относится к &lt;code&gt;query&lt;/code&gt; , как показано в примере выше. Вместо этого вам нужно указать &lt;code&gt;name&lt;/code&gt; маршрута или вручную указать весь &lt;code&gt;path&lt;/code&gt; с любым параметром:</target>
        </trans-unit>
        <trans-unit id="f44bc5cde0a86679734bccf41236b30399e35e60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Let's forget about how the HTML/CSS should look like to represent such layout and focus on the components used.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;Примечание&lt;/strong&gt; . &lt;em&gt;Забудем о том, как должен выглядеть HTML / CSS для представления такого макета, и сосредоточимся на используемых компонентах.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="71d35ee23eb8ebffb9ac3b6f5d61e739a313747f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The following examples assume you are serving your app from the root folder. If you deploy to a subfolder, you should use &lt;a href=&quot;https://cli.vuejs.org/config/#publicpath&quot;&gt;the &lt;code&gt;publicPath&lt;/code&gt; option of Vue CLI&lt;/a&gt; and the related &lt;a href=&quot;../../api/index#createwebhistory&quot;&gt;&lt;code&gt;base&lt;/code&gt; property of the router&lt;/a&gt;. You also need to adjust the examples below to use the subfolder instead of the root folder (e.g. replacing &lt;code&gt;RewriteBase /&lt;/code&gt; with &lt;code&gt;RewriteBase /name-of-your-subfolder/&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cc20a2aeb890c387a4173ac148be150ce1de73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: &lt;code&gt;append&lt;/code&gt; wasn't used very often, is easy to replicate in user land.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fb152e238b330054139e2b671cf90ce34a08eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Having &lt;code&gt;parent&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt; creates unnecessary circular references while the properties could be retrieved already through &lt;code&gt;matched&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689dbbe16432e67e670d720d3fb05b1825bfeeaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Previously, the router would navigate to &lt;code&gt;/&lt;/code&gt; but display nothing (instead of the home page). Throwing an error makes more sense because we cannot produce a valid URL to navigate to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b755ba28024ed081f18803f9063e4925a5a99a8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Same as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c2185e01f11f6f3843ddd5074de177b2c38b50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: See the &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0028-router-active-link.md#summary&quot;&gt;RFC about active matching&lt;/a&gt; changes for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3816e18d186d5e5a8242e7d3f508cae66f39d8ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: The router is designed to be created with routes even though you can add them later on. You need at least one route in most scenarios and this is written once per app in general.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def41c5b24e5a8b928ef083fe0bcd3b57bb5b7eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: These props were often used together to use something different from an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag but were introduced before the &lt;code&gt;v-slot&lt;/code&gt; API and are not used enough to justify adding to the bundle size for everybody.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ee74b3bdba36f1127b0f830b114b2602bc31d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This allows to easily copy existing properties of a location when calling &lt;code&gt;router.push()&lt;/code&gt; and &lt;code&gt;router.resolve()&lt;/code&gt;, and make the resulting route location consistent across browsers. &lt;code&gt;router.push()&lt;/code&gt; is now idempotent, meaning that calling &lt;code&gt;router.push(route.fullPath)&lt;/code&gt;, &lt;code&gt;router.push({ hash: route.hash })&lt;/code&gt;, &lt;code&gt;router.push({ query: route.query })&lt;/code&gt;, and &lt;code&gt;router.push({ params: route.params })&lt;/code&gt; will not create extra encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae64459913e44b35ea736430b7eccab5a4d4219b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This is to make trailing slash behavior consistent: by default all routes allow a trailing slash. It can be disabled by using the &lt;code&gt;strict&lt;/code&gt; option and manually appending (or not) a slash to the routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dc604fae68f39c4ce150a728ea7398a9b99bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This method was only used during SSR and is a one liner that can be done by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7781bc463238fbcd97f63d8811f2036ebcc876" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: This was a necessary change. See the &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0034-router-view-keep-alive-transitions.md&quot;&gt;related RFC&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721d3e2a633603d19dcbce3a10e278e8cca99dd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Uniting multiple methods that were used for the same purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd60388770e3ea8c5b39c1fdc521b348a5ad8f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Vue 3 applications do not exist in Vue 2 and now we property support multiple applications using the same Router instance, so having an &lt;code&gt;app&lt;/code&gt; property would have been misleading because it would have been the application instead of the root instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde1c69a2bad67935f18e301d0656506143786e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: Vue Router doesn't use &lt;code&gt;path-to-regexp&lt;/code&gt; anymore, instead it implements its own parsing system that allows route ranking and enables dynamic routing. Since we usually add one single catch-all route per project, there is no big benefit in supporting a special syntax for &lt;code&gt;*&lt;/code&gt;. The encoding of params is encoding across routes, without exception to make things easier to predict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3662d106fb13e96d5956786ebb52dc415f931b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: We use the history state to save information about the navigation like the scroll position, previous location, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b15dcee6d6cb6a04d06df0828a2789d3fe60e81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: enable tree shaking of non used histories as well as implementing custom histories for advanced use cases like native solutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde7269e3a948f7f9bae1d5017bd5fdd6d6b69e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reason&lt;/strong&gt;: making the object similar to &lt;code&gt;ScrollToOptions&lt;/code&gt; to make it feel more familiar with native JS APIs and potentially enable future new options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48635880c8c262599371bbd0bfe133e24a77d7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/meta&quot;&gt;Meta fields&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57503297db731b3460b632720060b5d8be525808" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-failures&quot;&gt;Navigation Failures&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76abd165efb6cf6bf06a190e3c2fffacb35856d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e584d17760162b1f4f1cdbfbd749c3b7ca933a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation guards&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dac01c9541fb3288b6cc5e8dbb88d09cf9d535d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/dynamic-matching&quot;&gt;Dynamic Route Matching&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7bb061a72e257430c2a5fcf409d1e6d644e43c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;Named Views&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b7e5600b906bc7cfb1ba38d9e8dd6c3ec28976" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/nested-routes&quot;&gt;Nested Routes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9962f1bcef72e7f141ae772da9a0f68c02293daa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See Also&lt;/strong&gt;: &lt;a href=&quot;../guide/essentials/passing-props&quot;&gt;Passing props to Route Components&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b397576126f3b34bb03975aeada27aff281f00ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;: &lt;a href=&quot;../guide/advanced/meta&quot;&gt;Meta fields&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad161f00f812acca91de8fc9c23a641f82fe7640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Signature:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Signature:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49cd92a540f8d5ddaf089011afae080a463c00bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TIP&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TIP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16dbebaa7ac8526488dfeec2bc03bc86437d37c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationfailuretype&quot;&gt;&lt;code&gt;NavigationFailureType&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517584027a38470a5964749a61b6f13b32a4e21e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationguard&quot;&gt;&lt;code&gt;NavigationGuard | NavigationGuard[]&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e71145ae395881457a2e9506f0d25666136227f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#navigationguard&quot;&gt;&lt;code&gt;NavigationGuard&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a038c317b561ff9faf88069f1498d04bbe1e9b92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocation&quot;&gt;&lt;code&gt;RouteLocation&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7d14cd6bdb01d54a5a9e0721309c5d21a8dfa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;Ref&amp;lt;RouteLocationNormalized&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd2017851ac0c12f56fb41f651f3d71935552f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationnormalized&quot;&gt;&lt;code&gt;RouteLocationNormalized&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e671d285fa7d0715a2f8b74af8a853d70891b542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routelocationraw&quot;&gt;&lt;code&gt;RouteLocationRaw&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f382a1e8f1380a7e9a6b41dac409aa6aca95ef60" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routemeta&quot;&gt;&lt;code&gt;RouteMeta&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5252b2977cee45b2df363dee6df215953fb97361" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routerecordnormalized&quot;&gt;&lt;code&gt;RouteRecordNormalized[]&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6390b001df8c94c73d38b6e10af8bd7da1f5d34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;RouterOptions&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230bd8c79a15d5412a276b5bf6f8cb84b1765b68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;'page' | 'step' | 'location' | 'date' | 'time' | 'true' | 'false'&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2706bf0b16507535350b2b7763719d3d24235b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, Component&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1d94d8b9434361f4881b0d5132f53789867c47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, boolean | Function | Record&amp;lt;string, any&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c541f730a73bf6d02c181923b586e3bff2a560" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;Record&amp;lt;string, string | string[]&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57714391ff1820ac532ddef88030330b66fcaaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteLocationRaw | (to: RouteLocationNormalized) =&amp;gt; RouteLocationRaw&lt;/code&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74864012032a4647971d4699004e150560309f3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteMeta&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2082df5daa3a29ce9db84d01c0c6bf3ecf246a66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;RouteRecordNormalized | undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b2b23ba42a024f41ed287836eaa226dc822467" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;boolean | Record&amp;lt;string, any&amp;gt; | (to: RouteLocationNormalized) =&amp;gt; Record&amp;lt;string, any&amp;gt;&lt;/code&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cdb2ee7923f2f2101b8ecc2e67f1a76cd5e5803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df45b8ade9225d32f33b1d05656b8381d2fe1efd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | string[]&lt;/code&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a138ac4b22c1c17d17ede29a85486229a389eced" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol | undefined | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3557a23acbfa8cd144f7ecd27c39cf360ca45e84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol | undefined&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb14a15e130a9f460745859d862e6c3783295f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string | symbol&lt;/code&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36e784330ea0d8fa8e23ea3ba8ecdab78f8ef1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;string&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e70664b82e9285b0e1087d765b689f030f52f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: Array of &lt;a href=&quot;#routerecordraw&quot;&gt;&lt;code&gt;RouteRecordRaw&lt;/code&gt;&lt;/a&gt; (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2437843cabebc07eb3904167483e23d95a149f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;: Array of normalized &lt;a href=&quot;#routerecordnormalized&quot;&gt;route records&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f12251e037ac26f45b1cdd71584a9346e1ac384" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VERSION NOTE&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ВЕРСИЯ ПРИМЕЧАНИЕ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56d6254e7cba0f476d3d275412f956128f1ae309" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When using the &lt;code&gt;v-slot&lt;/code&gt; API, it is required to pass one single child to &lt;code&gt;router-link&lt;/code&gt;&lt;/strong&gt;. If you don't, &lt;code&gt;router-link&lt;/code&gt; will wrap its children in a &lt;code&gt;span&lt;/code&gt; element.</source>
          <target state="translated">&lt;strong&gt;При использовании API &lt;code&gt;v-slot&lt;/code&gt; требуется передать одного дочернего &lt;code&gt;router-link&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; в &lt;/strong&gt;&lt;strong&gt;router-link&lt;/strong&gt; . Если вы этого не сделаете, &lt;code&gt;router-link&lt;/code&gt; обернет свои дочерние элементы в элемент &lt;code&gt;span&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6651e38d4a3763e7779e24d7dae0f0aba6d5a8a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteEnter&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf400eb99af38983093f201712bffd8645fddfaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteLeave&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61b1e414f09221f5876897f91853a1684f2da844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;beforeRouteUpdate&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="203651569c6adf2d7bf9feeba3de1e6bf672d10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$route&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$route&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6cab0895dec254016a0b4192af900a73d674e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;this.$router&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;this.$router&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74e6a0908f8875366c17fcdd1d60fc460ab641c1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../api/index#routelocationraw&quot;&gt;Route Location&lt;/a&gt;: Redirect to a different location by passing a route location as if you were calling &lt;a href=&quot;../../api/index#push&quot;&gt;&lt;code&gt;router.push()&lt;/code&gt;&lt;/a&gt;, which allows you to pass options like &lt;code&gt;replace: true&lt;/code&gt; or &lt;code&gt;name: 'home'&lt;/code&gt;. The current navigation is dropped and a new one is created with the same &lt;code&gt;from&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa08ab80de675eb3a18676fb5bf0d3a4d028a50" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; aborts the navigation by doing &lt;code&gt;return false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3cfac07709143e09d25b0712eec2bb4b1cc1f0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; redirects somewhere else by returning a new location (e.g. &lt;code&gt;return '/login'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5e4abc951240e67b5bed576fbf917603dcf1ba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigation-guards&quot;&gt;navigation guard&lt;/a&gt; throws an &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffd81cfc65c073e5fd2f99826c0bf891940353d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;param&lt;/em&gt; is denoted by a colon &lt;code&gt;:&lt;/code&gt;. When a route is matched, the value of its &lt;em&gt;params&lt;/em&gt; will be exposed as &lt;code&gt;this.$route.params&lt;/code&gt; in every component. Therefore, we can render the current user ID by updating &lt;code&gt;User&lt;/code&gt;'s template to this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9880655df0348048352e89351ab27e9a1587740" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;route object&lt;/strong&gt; represents the state of the current active route. It contains parsed information of the current URL and the &lt;strong&gt;route records&lt;/strong&gt; matched by the URL.</source>
          <target state="translated">Объект &lt;strong&gt;маршрута&lt;/strong&gt; представляет состояние текущего активного маршрута. Он содержит проанализированную информацию о текущем URL-адресе и &lt;strong&gt;записях маршрута,&lt;/strong&gt; соответствующих URL-адресу.</target>
        </trans-unit>
        <trans-unit id="de326a0c6cfccf38b1552e3f181af23288635b06" translate="yes" xml:space="preserve">
          <source>A cancelled navigation is a navigation that failed because a more recent navigation finished started (not necessarily finished).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7eeed51c310e14e1a74eadd1ccf4fdd2be4c57a" translate="yes" xml:space="preserve">
          <source>A duplicated navigation is a navigation that failed because it was initiated while already being at the exact same location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db78120123d41c4b39ab69d8274419abba6f5c5c" translate="yes" xml:space="preserve">
          <source>A dynamic segment is denoted by a colon &lt;code&gt;:&lt;/code&gt;. When a route is matched, the value of the dynamic segments will be exposed as &lt;code&gt;this.$route.params&lt;/code&gt; in every component. Therefore, we can render the current user ID by updating &lt;code&gt;User&lt;/code&gt;'s template to this:</source>
          <target state="translated">Сегмент динамической обозначается двоеточием &lt;code&gt;:&lt;/code&gt; . При сопоставлении маршрута значение динамических сегментов будет отображаться как &lt;code&gt;this.$route.params&lt;/code&gt; в каждом компоненте. Таким образом, мы можем оказать текущий идентификатор пользователя путем обновления &lt;code&gt;User&lt;/code&gt; &amp;laquo;s шаблон для этого:</target>
        </trans-unit>
        <trans-unit id="6a28e6458553bf9dffbc24cf0c5d77829e37c2bb" translate="yes" xml:space="preserve">
          <source>A history object that can be passed to the router constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62859e3dd19a85f18cea1734afe33886a4906def" translate="yes" xml:space="preserve">
          <source>A new navigation guard takes place while the previous one not finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f277a8f6ddabd79470c3132948b29ae1868e50ca" translate="yes" xml:space="preserve">
          <source>A raw location can either be a &lt;code&gt;string&lt;/code&gt; like &lt;code&gt;/users/posva#bio&lt;/code&gt; or an object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156b2b9ae12f81d9512005ec2d0d3037c4a7e252" translate="yes" xml:space="preserve">
          <source>A redirect means when the user visits &lt;code&gt;/a&lt;/code&gt;, the URL will be replaced by &lt;code&gt;/b&lt;/code&gt;, and then matched as &lt;code&gt;/b&lt;/code&gt;. But what is an alias?</source>
          <target state="translated">Перенаправление означает, что когда пользователь посещает &lt;code&gt;/a&lt;/code&gt; , URL-адрес будет заменен на &lt;code&gt;/b&lt;/code&gt; , а затем сопоставлен с &lt;code&gt;/b&lt;/code&gt; . Но что такое псевдоним?</target>
        </trans-unit>
        <trans-unit id="f1aa289d4aae14d23521a531c5a44b76bf583cc9" translate="yes" xml:space="preserve">
          <source>A redirect means when the user visits &lt;code&gt;/home&lt;/code&gt;, the URL will be replaced by &lt;code&gt;/&lt;/code&gt;, and then matched as &lt;code&gt;/&lt;/code&gt;. But what is an alias?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ef491cd87b4b8ec5aad0c69a6fdaeff958091d" translate="yes" xml:space="preserve">
          <source>A route location that has all of its component resolved (if any was lazy loaded) so it can be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a97a71775a961a8fa29e1af5fbe06b5cf8aac91" translate="yes" xml:space="preserve">
          <source>A string that equals the path of the current route, always resolved as an absolute path. e.g. &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt;.</source>
          <target state="translated">Строка, равная пути текущего маршрута, всегда разрешается как абсолютный путь. например, &lt;code&gt;&quot;/foo/bar&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93f1fd81d54664927d097306e9adc4ec82129bf1" translate="yes" xml:space="preserve">
          <source>A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the &lt;code&gt;components&lt;/code&gt; (with an &lt;strong&gt;s&lt;/strong&gt;) option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adc69887814392cf8b2d46cce9a44b4e624c105" translate="yes" xml:space="preserve">
          <source>A view is rendered by using a component, therefore multiple views require multiple components for the same route. Make sure to use the &lt;code&gt;components&lt;/code&gt; (with an s) option:</source>
          <target state="translated">Представление визуализируется с помощью компонента, поэтому для нескольких представлений требуется несколько компонентов для одного и того же маршрута. Убедитесь, что вы используете опцию &lt;code&gt;components&lt;/code&gt; (с s):</target>
        </trans-unit>
        <trans-unit id="d965ff716dfb5048d05e248f0578ad1b5cdce5e4" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/named-views-vue-router-4-examples-rd20l&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758a291e7a2a79f8af1c46240ce3c623fad13150" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/nested-named-views-vue-router-4-examples-re9yl?&amp;amp;initialpath=%2Fsettings%2Femails&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef365ad89dd8092cdb2ccf41dceae9d09a6df4b8" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/nested-views-vue-router-4-examples-hl326?initialpath=%2Fusers%2Feduardo&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebf3bc188fb1ae35742e39f148cf47072c3e640" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://codesandbox.io/s/route-params-vue-router-examples-mlb14?from-embed&amp;amp;initialpath=%2Fusers%2Feduardo%2Fposts%2F1&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11155a31d243422200f48fd2d8cc4952c34d02fe" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Рабочую демонстрацию этого примера можно найти &lt;a href=&quot;https://jsfiddle.net/posva/22wgksa3/&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8a50bb9b5e99e675cac89d89fca695cf654e6c9a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Рабочую демонстрацию этого примера можно найти &lt;a href=&quot;https://jsfiddle.net/posva/6du90epg/&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d676fbfda78cccf76196a5a6fb7ab7d0650c2b1a" translate="yes" xml:space="preserve">
          <source>A working demo of this example can be found &lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Рабочую демонстрацию этого примера можно найти &lt;a href=&quot;https://jsfiddle.net/yyx990803/L7hscd8h/&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API ссылка</target>
        </trans-unit>
        <trans-unit id="db9e4bda64bce6a8af84a56447bcc71aaa2629ab" translate="yes" xml:space="preserve">
          <source>Accessing the Router and current Route inside &lt;code&gt;setup&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee02640af2f71fddb96622160e5693c7ec196627" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that executes before any navigation. Returns a function that removes the registered guard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83221a3e5482bf47cc185d6f5d46f8c54191bc3e" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that executes before navigation is about to be resolved. At this state all component have been fetched and other navigation guards have been successful. Returns a function that removes the registered guard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e335b7d1ca92a85400e341fbc596010aa5e84e9f" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that triggers whenever the component for the current location is about to be left. Similar to &lt;code&gt;beforeRouteLeave&lt;/code&gt; but can be used in any component. The guard is removed when the component is unmounted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d5baf0a17772e91bf9da7187331ff13139dcf1" translate="yes" xml:space="preserve">
          <source>Add a navigation guard that triggers whenever the current location is about to be updated. Similar to &lt;code&gt;beforeRouteUpdate&lt;/code&gt; but can be used in any component. The guard is removed when the component is unmounted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17ea0a4bf58d3ade24ab5643bf8675fcbc289a9" translate="yes" xml:space="preserve">
          <source>Add a navigation hook that is executed after every navigation. Returns a function that removes the registered hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6a67441fc47e67f00a242be4570a2b8c2886e1" translate="yes" xml:space="preserve">
          <source>Add a new &lt;a href=&quot;#routerecordraw&quot;&gt;Route Record&lt;/a&gt; as the child of an existing route. If the route has a &lt;code&gt;name&lt;/code&gt; and there is already an existing one with the same one, it removes it first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58d9bb9c80c3f67de5e8876be47377684ac7178" translate="yes" xml:space="preserve">
          <source>Add a new &lt;a href=&quot;#routerecordraw&quot;&gt;route record&lt;/a&gt; to the router. If the route has a &lt;code&gt;name&lt;/code&gt; and there is already an existing one with the same one, it removes it first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2defa3a9b3b8557a3da80eb0d8f457b531b7a4" translate="yes" xml:space="preserve">
          <source>Add global navigation guards. See &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; for more details.</source>
          <target state="translated">Добавьте глобальную навигационную защиту. См. Подробности в разделе &quot; &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Защита навигации&quot;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="182f7d7f84ac28b85cefada3d8096af7dff435a8" translate="yes" xml:space="preserve">
          <source>Add this to your &lt;code&gt;firebase.json&lt;/code&gt;:</source>
          <target state="translated">Добавьте это в свой &lt;code&gt;firebase.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="68556b52a12d36015cf950a0807a4240b396386b" translate="yes" xml:space="preserve">
          <source>Adding Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850f83d26ade6869c17e3ce94ebbe500aff92503" translate="yes" xml:space="preserve">
          <source>Adding Routes inside navigation guards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52b2714ebddf6a873808b29346ef9923c62e08a" translate="yes" xml:space="preserve">
          <source>Adding nested routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ece44d1ec28254f8ca17100636e79dbda88cf3" translate="yes" xml:space="preserve">
          <source>Adding routes to your router is usually done via the &lt;a href=&quot;../../api/index#routes&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; but in some situations, you might want to add or remove routes while the application is already running. Application with extensible interfaces like &lt;a href=&quot;https://cli.vuejs.org/dev-guide/ui-api.html&quot;&gt;Vue CLI UI&lt;/a&gt; can use this to make the application grow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff10318d6a3ea10c8ed7f1df89afbad435b3c4d" translate="yes" xml:space="preserve">
          <source>Adds an error handler that is called every time a non caught error happens during navigation. This includes errors thrown synchronously and asynchronously, errors returned or passed to &lt;code&gt;next&lt;/code&gt; in any navigation guard, and errors occurred when trying to resolve an async component that is required to render a route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072891203234508378cabfbdc97d9e0e3f7d7693" translate="yes" xml:space="preserve">
          <source>Advanced Matching Patterns</source>
          <target state="translated">Расширенные Соответствующие Шаблоны</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="01cdb433901eaed93511bf81b347b962b5de5033" translate="yes" xml:space="preserve">
          <source>Aliases for the route. Allows defining extra paths that will behave like a copy of the record. This enables paths shorthands like &lt;code&gt;/users/:id&lt;/code&gt; and &lt;code&gt;/u/:id&lt;/code&gt;. &lt;strong&gt;All &lt;code&gt;alias&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; values must share the same params&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e81512f2281ef292b1a2eac8152e34ca98905a" translate="yes" xml:space="preserve">
          <source>All navigation failures expose &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; properties to reflect the current location as well as the target location for the navigation that failed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82ffc245f5ae8d4661509267cce6581944eca76" translate="yes" xml:space="preserve">
          <source>All navigations, including the first one, are now asynchronous, meaning that, if you use a &lt;code&gt;transition&lt;/code&gt;, you may need to wait for the router to be &lt;em&gt;ready&lt;/em&gt; before mounting the app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ab2fb5ffc2f798f1fd9c600f91a00c36b0858c" translate="yes" xml:space="preserve">
          <source>All of the the things above &lt;strong&gt;work the same way with &lt;code&gt;async&lt;/code&gt; functions&lt;/strong&gt; and Promises:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c315b4e50c639fe7a19ef97c5ef2a6fe0f4ddd9b" translate="yes" xml:space="preserve">
          <source>All route records matched by a route are exposed on the &lt;code&gt;$route&lt;/code&gt; object (and also route objects in navigation guards) as the &lt;code&gt;$route.matched&lt;/code&gt; Array. Therefore, we will need to iterate over &lt;code&gt;$route.matched&lt;/code&gt; to check for meta fields in route records.</source>
          <target state="translated">Все записи маршрута, соответствующие маршруту, отображаются в объекте &lt;code&gt;$route&lt;/code&gt; (а также в объектах маршрута в средствах навигации) в &lt;code&gt;$route.matched&lt;/code&gt; массива $ route.matched . Следовательно, нам нужно будет &lt;code&gt;$route.matched&lt;/code&gt; чтобы проверить мета-поля в записях маршрута.</target>
        </trans-unit>
        <trans-unit id="428969103a07da9d0757fc0c0e060b02d9171f1f" translate="yes" xml:space="preserve">
          <source>All route records matched by a route are exposed on the &lt;code&gt;$route&lt;/code&gt; object (and also route objects in navigation guards) as the &lt;code&gt;$route.matched&lt;/code&gt; Array. We could loop through that array to check all &lt;code&gt;meta&lt;/code&gt; fields, but Vue Router also provides you a &lt;code&gt;$route.meta&lt;/code&gt; that is a non-recursive merge of &lt;strong&gt;all &lt;code&gt;meta&lt;/code&gt;&lt;/strong&gt; fields from parent to child. Meaning you can simply write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bc64fe5ce112af8a785974fd7adaceb66968ee" translate="yes" xml:space="preserve">
          <source>All three methods return a function that removes the registered guard/hook.</source>
          <target state="translated">Все три метода возвращают функцию,которая удаляет зарегистрированную защиту/крюк.</target>
        </trans-unit>
        <trans-unit id="aca32441641fc332fd67bf08f37b0f8b94b172c5" translate="yes" xml:space="preserve">
          <source>Allows passing down params as props to the component rendered by &lt;code&gt;router-view&lt;/code&gt;. When passed to a &lt;em&gt;multiple views record&lt;/em&gt;, it should be an object with the same keys as &lt;code&gt;components&lt;/code&gt; or a &lt;code&gt;boolean&lt;/code&gt; to be applied to each component. target location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b803ac69fdd5698d8172f7ec83f52493666ea8" translate="yes" xml:space="preserve">
          <source>Allows you to move forward or backward through the history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9806804175595dd24e6b4a14d4c81924fc9865" translate="yes" xml:space="preserve">
          <source>Alongside the &lt;code&gt;path&lt;/code&gt;, you can provide a &lt;code&gt;name&lt;/code&gt; to any route. This has the following advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f687baf76efd583ba0ef8e00c797ebd3606ba953" translate="yes" xml:space="preserve">
          <source>Also, all examples will be using the full version of Vue to make on-the-fly template compilation possible. See more details &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Кроме того, во всех примерах будет использоваться полная версия Vue, чтобы сделать возможной компиляцию шаблонов на лету. Подробнее см. &lt;a href=&quot;https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only&quot;&gt;Здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d774c1d9d8403ab8fadec6dd85f65a1f6379db5" translate="yes" xml:space="preserve">
          <source>Alternatively, if you are using a Node.js server, you can implement the fallback by using the router on the server side to match the incoming URL and respond with 404 if no route is matched. Check out the &lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;Vue server side rendering documentation&lt;/a&gt; for more information.</source>
          <target state="translated">В качестве альтернативы, если вы используете сервер Node.js, вы можете реализовать резервный вариант, используя маршрутизатор на стороне сервера для сопоставления входящего URL-адреса и ответа 404, если не сопоставлен ни один маршрут. Ознакомьтесь с &lt;a href=&quot;https://ssr.vuejs.org/en/&quot;&gt;документацией&lt;/a&gt; по рендерингу на стороне сервера Vue для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="bc481c13f192125008dd5b760fe07cb50cef941a" translate="yes" xml:space="preserve">
          <source>An Array containing &lt;strong&gt;route records&lt;/strong&gt; for all nested path segments of the current route. Route records are the copies of the objects in the &lt;code&gt;routes&lt;/code&gt; configuration Array (and in &lt;code&gt;children&lt;/code&gt; Arrays):</source>
          <target state="translated">Массив, содержащий &lt;strong&gt;записи маршрута&lt;/strong&gt; для всех вложенных сегментов пути текущего маршрута. Записи маршрута - это копии объектов в массиве конфигурации &lt;code&gt;routes&lt;/code&gt; (и в &lt;code&gt;children&lt;/code&gt; массивах):</target>
        </trans-unit>
        <trans-unit id="334accf52f5b9ff6ea50d776fd6348da762371a9" translate="yes" xml:space="preserve">
          <source>An aborted navigation is a navigation that failed because a navigation guard returned &lt;code&gt;false&lt;/code&gt; or called &lt;code&gt;next(false)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e258ee9f428616628018a4e303bafec2ed1d1719" translate="yes" xml:space="preserve">
          <source>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration's nesting structure.</source>
          <target state="translated">Псевдоним дает вам свободу сопоставить структуру пользовательского интерфейса с произвольным URL,вместо того,чтобы быть ограниченным структурой вложенности конфигурации.</target>
        </trans-unit>
        <trans-unit id="0e61c9116cd1488628ba92a510b3e33cd455e056" translate="yes" xml:space="preserve">
          <source>An alias gives you the freedom to map a UI structure to an arbitrary URL, instead of being constrained by the configuration's nesting structure. Make the alias start with a &lt;code&gt;/&lt;/code&gt; to make the path absolute in nested routes. You can even combine both and provide multiple aliases with an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3739e791fa19d2d317437f3ee57f9500444cd8" translate="yes" xml:space="preserve">
          <source>An error occurred when trying to resolve an async component that is required to render a route.</source>
          <target state="translated">Произошла ошибка при попытке разрешения асинхронного компонента,необходимого для отображения маршрута.</target>
        </trans-unit>
        <trans-unit id="d3cc39b59db1700be7d035e2588f46cc66fbf241" translate="yes" xml:space="preserve">
          <source>An example use case is checking for a meta field in the global navigation guard:</source>
          <target state="translated">Пример использования-проверка мета-поля в глобальной навигационной системе:</target>
        </trans-unit>
        <trans-unit id="71da084f036eb26c37015ce8d4360c5a8d73a895" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of dynamic segments and star segments. If there are no params the value will be an empty object.</source>
          <target state="translated">Объект,содержащий пары ключ/значение динамических сегментов и звёздных сегментов.Если параметров нет,то значение будет пустым объектом.</target>
        </trans-unit>
        <trans-unit id="14a69c21f7224d348475851000b8f3ad2545a273" translate="yes" xml:space="preserve">
          <source>An object that contains key/value pairs of the query string. For example, for a path &lt;code&gt;/foo?user=1&lt;/code&gt;, we get &lt;code&gt;$route.query.user == 1&lt;/code&gt;. If there is no query the value will be an empty object.</source>
          <target state="translated">Объект, содержащий пары ключ / значение строки запроса. Например, для пути &lt;code&gt;/foo?user=1&lt;/code&gt; мы получаем &lt;code&gt;$route.query.user == 1&lt;/code&gt; . Если запроса нет, значением будет пустой объект.</target>
        </trans-unit>
        <trans-unit id="70b5b36906d97151e1fdbc7737386f8f8f62f7f0" translate="yes" xml:space="preserve">
          <source>And can optionally return any of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c1de7dc1047d71f67c38a050edbdf38b437ae0" translate="yes" xml:space="preserve">
          <source>Any non-name props will be passed along to the rendered component, however most of the time the per-route data is contained in the route's params.</source>
          <target state="translated">Любой неименованный реквизит будет передаваться в отрисовываемый компонент,однако большую часть времени данные по маршруту содержатся в параметрах маршрута.</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="6841cac3c7e190438931bbeb9c4f778e303b8d57" translate="yes" xml:space="preserve">
          <source>Arbitrary data attached to all matched records merged (non recursively) from parent to child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fed9a82f104f7580b9a5e6b4f10de8ea8d75149" translate="yes" xml:space="preserve">
          <source>Arbitrary data attached to the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1bde3fe19a0290e7c25c42c7cba548f289783c" translate="yes" xml:space="preserve">
          <source>Array of &lt;a href=&quot;#routerecord&quot;&gt;normalized route records&lt;/a&gt; that were matched with the given route location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085554440a61484dcc1f7f1b33296afe385a8f75" translate="yes" xml:space="preserve">
          <source>As the name suggests, the navigation guards provided by &lt;code&gt;vue-router&lt;/code&gt; are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</source>
          <target state="translated">Как следует из названия, средства навигации, предоставляемые &lt;code&gt;vue-router&lt;/code&gt; , в основном используются для защиты навигации путем перенаправления или отмены. Есть несколько способов подключиться к процессу навигации по маршруту: глобально, для каждого маршрута или внутри компонента.</target>
        </trans-unit>
        <trans-unit id="6479b2cdcd6bf2273d013335ee1c13d94f38feae" translate="yes" xml:space="preserve">
          <source>As the name suggests, the navigation guards provided by Vue router are primarily used to guard navigations either by redirecting it or canceling it. There are a number of ways to hook into the route navigation process: globally, per-route, or in-component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f0d70c190fc4a8136b23e7c202d297fe902db8a" translate="yes" xml:space="preserve">
          <source>As the return value of calling &lt;code&gt;router.match(location)&lt;/code&gt;</source>
          <target state="translated">В качестве возвращаемого значения вызывающего &lt;code&gt;router.match(location)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2c97a8fd58950f45f4f8b46c796579baae2800de" translate="yes" xml:space="preserve">
          <source>As we said at the beginning, there are different situations aborting a navigation, all of them resulting in different &lt;em&gt;Navigation Failures&lt;/em&gt;. They can be differentiated using the &lt;code&gt;isNavigationFailure&lt;/code&gt; and &lt;code&gt;NavigationFailureType&lt;/code&gt;. There are four different types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f4dd01c3d7db0526d49b5cbafc444aab559129" translate="yes" xml:space="preserve">
          <source>As you can see the &lt;code&gt;children&lt;/code&gt; option is just another Array of route configuration objects like &lt;code&gt;routes&lt;/code&gt; itself. Therefore, you can keep nesting views as much as you need.</source>
          <target state="translated">Как видите, опция &lt;code&gt;children&lt;/code&gt; - это просто еще один массив объектов конфигурации &lt;code&gt;routes&lt;/code&gt; таких как сам маршруты . Таким образом, вы можете использовать столько вложенных видов, сколько вам нужно.</target>
        </trans-unit>
        <trans-unit id="818bf616731d813da29be2c0bd3f130135b65f56" translate="yes" xml:space="preserve">
          <source>As you can see the &lt;code&gt;children&lt;/code&gt; option is just another Array of routes like &lt;code&gt;routes&lt;/code&gt; itself. Therefore, you can keep nesting views as much as you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec41d6e2df2143b34eb02cee62d58dd44a178637" translate="yes" xml:space="preserve">
          <source>Aside from using &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to create anchor tags for declarative navigation, we can do this programmatically using the router's instance methods.</source>
          <target state="translated">Помимо использования &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; для создания тегов привязки для декларативной навигации, мы можем сделать это программно, используя методы экземпляра маршрутизатора.</target>
        </trans-unit>
        <trans-unit id="6892b3141eb3858e6e6734f0568f78454577256f" translate="yes" xml:space="preserve">
          <source>Async Scrolling</source>
          <target state="translated">Async Прокрутка</target>
        </trans-unit>
        <trans-unit id="81602e12367d65ce549e69e1c37235c140ea5133" translate="yes" xml:space="preserve">
          <source>At the moment navigation guards in mixins are not supported. You can track its support at &lt;a href=&quot;https://github.com/vuejs/vue-router-next/issues/454&quot;&gt;vue-router#454&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7225d2fef206412748c0b12502f4d384c0583fe" translate="yes" xml:space="preserve">
          <source>At this point, with the above configuration, when you visit &lt;code&gt;/user/eduardo&lt;/code&gt;, nothing will be rendered inside &lt;code&gt;User&lt;/code&gt;'s &lt;code&gt;router-view&lt;/code&gt;, because no nested route is matched. Maybe you do want to render something there. In such case you can provide an empty nested path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560d9ddb225f90c85a47caeebc767f3890a40408" translate="yes" xml:space="preserve">
          <source>At this point, with the above configuration, when you visit &lt;code&gt;/user/foo&lt;/code&gt;, nothing will be rendered inside &lt;code&gt;User&lt;/code&gt;'s outlet, because no sub route is matched. Maybe you do want to render something there. In such case you can provide an empty subroute path:</source>
          <target state="translated">На данный момент, с помощью данной конфигурации, когда вы посещаете &lt;code&gt;/user/foo&lt;/code&gt; , ничего не будет оказано внутри &lt;code&gt;User&lt;/code&gt; выход &amp;laquo;s, потому что к югу от маршрута не соответствует. Может быть, вы действительно хотите что-то там отрендерить. В таком случае вы можете указать пустой маршрут подпрограммы:</target>
        </trans-unit>
        <trans-unit id="4b03af5b9707cfb00129fce04dcae195f1ab6e14" translate="yes" xml:space="preserve">
          <source>Automatic encoding/decoding of &lt;code&gt;params&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a3a0808241d1ddcdd16b4426dad25ca4b30149" translate="yes" xml:space="preserve">
          <source>Base applied to all urls, defaults to '/'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd122c84cb00b96ba0c759ebc8ca3844d91ee84" translate="yes" xml:space="preserve">
          <source>Basic Guides</source>
          <target state="translated">Основные руководства</target>
        </trans-unit>
        <trans-unit id="97b04b139822245070b96f3d09cf3f514c27cc3a" translate="yes" xml:space="preserve">
          <source>Because of the introduction of the &lt;code&gt;v-slot&lt;/code&gt; api for &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, you must pass it to the &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; using the &lt;code&gt;v-slot&lt;/code&gt; API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f52362109b1ec051301e606cb5a7ca1723f9d0e" translate="yes" xml:space="preserve">
          <source>Because we are redirecting, we are replacing the ongoing navigation, effectively behaving like the example shown before. In real world scenarios, adding is more likely to happen outside of navigation guards, e.g. when a view component mounts, it register new routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1cef8f6ff28aefd85a71082156d723f7d14f7d" translate="yes" xml:space="preserve">
          <source>Because we don't have access to &lt;code&gt;this&lt;/code&gt; inside of &lt;code&gt;setup&lt;/code&gt;, we cannot directly access &lt;code&gt;this.$router&lt;/code&gt; or &lt;code&gt;this.$route&lt;/code&gt; anymore. Instead we use the &lt;code&gt;useRouter&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd822da880def873ee94ff5ae2a7680f21c0ffa" translate="yes" xml:space="preserve">
          <source>Become a Sponsor!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af937dea18aa986c5f4fc133d29571143e4abfb5" translate="yes" xml:space="preserve">
          <source>Before enter guard specific to this record. Note &lt;code&gt;beforeEnter&lt;/code&gt; has no effect if the record has a &lt;code&gt;redirect&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f2c975095b2c670386a2048860d02904b95686" translate="yes" xml:space="preserve">
          <source>Before you could directly pass a template to be rendered by a route components' &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; by nesting it under a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e692507c61c133f149855270ff0ed201204f76" translate="yes" xml:space="preserve">
          <source>Boolean mode</source>
          <target state="translated">булевский режим</target>
        </trans-unit>
        <trans-unit id="769de6efcca54a966e32ce1e951115d253ef6e63" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;event&lt;/code&gt;, and &lt;code&gt;tag&lt;/code&gt; props have been removed from &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. You can use the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; to fully customize &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e67b4987ae6d22f103ede8e74955a53c30b3ab" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;router.match&lt;/code&gt;, and &lt;code&gt;router.resolve&lt;/code&gt; have been merged together into &lt;code&gt;router.resolve&lt;/code&gt; with a slightly different signature. &lt;a href=&quot;../../api/index#resolve&quot;&gt;Refer to the API&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6f50fe6a684e36f2680d1b1f0d995148104f1b" translate="yes" xml:space="preserve">
          <source>Breaking Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd6e08a7d72bc51707c83e8345f50df410bd4c7" translate="yes" xml:space="preserve">
          <source>But in some scenarios we don't want to add that static section &lt;code&gt;/o&lt;/code&gt;/&lt;code&gt;p&lt;/code&gt;. However, &lt;code&gt;orderId&lt;/code&gt; is always a number while &lt;code&gt;productName&lt;/code&gt; can be anything, so we can specify a custom regexp for a param in parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fe7a9c8499f8e70f58beb2e853763dc32cd2e4" translate="yes" xml:space="preserve">
          <source>But this will close the menu right away because &lt;strong&gt;navigations are asynchronous&lt;/strong&gt;, we need to &lt;code&gt;await&lt;/code&gt; the promise returned by &lt;code&gt;router.push&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb908939e94ce057ff8bee886271e8b1037c103" translate="yes" xml:space="preserve">
          <source>By adding a route with a conflicting name. If you add a route that has the same name as an existing route, it will remove the route first and then add the route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9fe5e4c895f5acbdfa75e489077b52c71c8a32" translate="yes" xml:space="preserve">
          <source>By calling &lt;code&gt;app.use(router)&lt;/code&gt;, we get access to it as &lt;code&gt;this.$router&lt;/code&gt; as well as the current route as &lt;code&gt;this.$route&lt;/code&gt; inside of any component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe31676a32b4a35df4e65d446da5590cc794055" translate="yes" xml:space="preserve">
          <source>By calling the callback returned by &lt;code&gt;router.addRoute()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371e23371f040d46377c93e80323577b039227a1" translate="yes" xml:space="preserve">
          <source>By injecting the router, we get access to it as &lt;code&gt;this.$router&lt;/code&gt; as well as the current route as &lt;code&gt;this.$route&lt;/code&gt; inside of any component:</source>
          <target state="translated">Внедряя маршрутизатор, мы получаем доступ к нему как &lt;code&gt;this.$router&lt;/code&gt; а также к текущему маршруту как &lt;code&gt;this.$route&lt;/code&gt; внутри любого компонента:</target>
        </trans-unit>
        <trans-unit id="e47f21e291c7d2038443eff51647191eeb1e8b44" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;router.removeRoute()&lt;/code&gt; to remove a route by its name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2eb76c16d1dbaafeb4edae6f2898624090fd07d" translate="yes" xml:space="preserve">
          <source>Bypassing path ranking (e.g. to display a )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f503c9d423abd93075704f88db9bb761be6157d" translate="yes" xml:space="preserve">
          <source>Caddy</source>
          <target state="translated">Caddy</target>
        </trans-unit>
        <trans-unit id="634dbb9a22c3a338c47024d7abe85b658ba519d0" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeEnter&lt;/code&gt; in route configs.</source>
          <target state="translated">Звоните &lt;code&gt;beforeEnter&lt;/code&gt; в конфиги маршрута.</target>
        </trans-unit>
        <trans-unit id="4249140880ca52e7ef11d9503d69924589f207c9" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteEnter&lt;/code&gt; in activated components.</source>
          <target state="translated">Вызов &lt;code&gt;beforeRouteEnter&lt;/code&gt; в активированных компонентах.</target>
        </trans-unit>
        <trans-unit id="6f5e8f22fe8e7626c225034bbb0f3238e2e74539" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteLeave&lt;/code&gt; guards in deactivated components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7e90ad58713ac0a25e678176802f3fa200decb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;beforeRouteUpdate&lt;/code&gt; guards in reused components.</source>
          <target state="translated">Вызовите охрану &lt;code&gt;beforeRouteUpdate&lt;/code&gt; в повторно используемых компонентах.</target>
        </trans-unit>
        <trans-unit id="8e5a58466233e6c803ddbe25aba939e739eb3019" translate="yes" xml:space="preserve">
          <source>Call callbacks passed to &lt;code&gt;next&lt;/code&gt; in &lt;code&gt;beforeRouteEnter&lt;/code&gt; guards with instantiated instances.</source>
          <target state="translated">Обратные вызовы, переданные &lt;code&gt;next&lt;/code&gt; в охранниках &lt;code&gt;beforeRouteEnter&lt;/code&gt; с созданными экземплярами.</target>
        </trans-unit>
        <trans-unit id="b9a8c6f5621a1b9d78881b4558f1e7afa9d9ea72" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;afterEach&lt;/code&gt; hooks.</source>
          <target state="translated">Вызвать глобальные хуки &lt;code&gt;afterEach&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="637f232310f9b20f4e6cf7008a301ce8a37fc2d2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeEach&lt;/code&gt; guards.</source>
          <target state="translated">Позвоните в глобальную охрану &lt;code&gt;beforeEach&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f706c0b8eaadca091201ae841597e18c20f22a2" translate="yes" xml:space="preserve">
          <source>Call global &lt;code&gt;beforeResolve&lt;/code&gt; guards.</source>
          <target state="translated">Вызовите глобальных охранников &lt;code&gt;beforeResolve&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05385d5830e5c072c1827ed4365f6efdd71ed73d" translate="yes" xml:space="preserve">
          <source>Call leave guards in deactivated components.</source>
          <target state="translated">Вызовите охранников в деактивированных компонентах.</target>
        </trans-unit>
        <trans-unit id="5bbc0d73488282dd93b70e27cef933e4b1ea6db0" translate="yes" xml:space="preserve">
          <source>Catch all / 404 Not found Route</source>
          <target state="translated">Поймать все/404 Не найден Маршрут</target>
        </trans-unit>
        <trans-unit id="60eabda4414994f2e4082faeec38a86e3b44db04" translate="yes" xml:space="preserve">
          <source>Catch all routes (&lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt;) must now be defined using a parameter with a custom regex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09dbd187de708ee21b01806ae5b0ca883102654a" translate="yes" xml:space="preserve">
          <source>Caveat</source>
          <target state="translated">Caveat</target>
        </trans-unit>
        <trans-unit id="d75ae57b7d1c8c668340ce65ecc96e069036f1c0" translate="yes" xml:space="preserve">
          <source>Changes are ordered by their usage. It is therefore recommended to follow this list in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c329ed52a2e5ffe770b15cad6d57d47667dc76c8" translate="yes" xml:space="preserve">
          <source>Check out more examples explaining active link class &lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">Ознакомьтесь с другими примерами, объясняющими активный класс ссылок &lt;a href=&quot;https://jsfiddle.net/8xrk1n9f/&quot;&gt;вживую&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0224b758c57bf0aa5fc2d78687f2d063c461ab62" translate="yes" xml:space="preserve">
          <source>Checks if a route with a given name exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8c19e6be4fd73475f7c2978538b3cc399dcc54" translate="yes" xml:space="preserve">
          <source>Children route records of the current route. Empty array if none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a10eac01da6a50d3afadaa4d63223f7dbdcc858" translate="yes" xml:space="preserve">
          <source>Class to apply on the rendered &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; when the link is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f04a07b6776ab2d39aec7b020b45ac96dbc8bd2" translate="yes" xml:space="preserve">
          <source>Class to apply on the rendered &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; when the link is exact active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9d53e0a04f1a7d92239dc5d0a8c7339bfa0b13" translate="yes" xml:space="preserve">
          <source>Combining Vue's &lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;async component feature&lt;/a&gt; and webpack's &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;code splitting feature&lt;/a&gt;, it's trivially easy to lazy-load route components.</source>
          <target state="translated">Комбинируя &lt;a href=&quot;https://vuejs.org/guide/components.html#Async-Components&quot;&gt;функцию асинхронного компонента&lt;/a&gt; Vue и функцию разделения &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/&quot;&gt;кода&lt;/a&gt; веб-пакета, легко лениво загружать компоненты маршрута.</target>
        </trans-unit>
        <trans-unit id="538f73ebb0f2283ee510d20e22c8b3dc2611a725" translate="yes" xml:space="preserve">
          <source>Combining the two, this is how to define an async component that will be automatically code-split by webpack:</source>
          <target state="translated">Объединив эти два способа,можно определить компонент асинхронизации,который будет автоматически кодироваться web-пакетом:</target>
        </trans-unit>
        <trans-unit id="c21b56685e74ee34e112c6265f95d4660855489e" translate="yes" xml:space="preserve">
          <source>Component Enabled Options</source>
          <target state="translated">Опции,включенные в компоненты</target>
        </trans-unit>
        <trans-unit id="6f1e4ac04228a38b2df9f816ebdf9943fc476cbc" translate="yes" xml:space="preserve">
          <source>Component Injected Properties</source>
          <target state="translated">Свойства компонентов впрыскиваемых</target>
        </trans-unit>
        <trans-unit id="68473142532c241b6b4d87aa608c7dcf5c7b3829" translate="yes" xml:space="preserve">
          <source>Component Injections</source>
          <target state="translated">Инъекции компонентов</target>
        </trans-unit>
        <trans-unit id="612f6427c9092a5834602047d990b4384c86915b" translate="yes" xml:space="preserve">
          <source>Composition API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e23dedbd12b01ee96ff40a945559ebf3d7f2687" translate="yes" xml:space="preserve">
          <source>Composition API guards can also be used in any component rendered by &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, they don't have to be used directly on the route component like in-component guards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447504d07a309bf4f61ba3d1b8acc798c1179562" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active with exact match. Note the default value can also be configured globally via the &lt;code&gt;linkExactActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">Настройте активный класс CSS, применяемый, когда ссылка активна с точным соответствием. Обратите внимание, что значение по умолчанию также можно настроить глобально с помощью параметра &lt;code&gt;linkExactActiveClass&lt;/code&gt; маршрутизатора linkExactActiveClass .</target>
        </trans-unit>
        <trans-unit id="598c83f3c40328d106949afdf0610e818376f591" translate="yes" xml:space="preserve">
          <source>Configure the active CSS class applied when the link is active. Note the default value can also be configured globally via the &lt;code&gt;linkActiveClass&lt;/code&gt; router constructor option.</source>
          <target state="translated">Настройте активный класс CSS, применяемый, когда ссылка активна. Обратите внимание, что значение по умолчанию также можно настроить глобально с помощью параметра &lt;code&gt;linkActiveClass&lt;/code&gt; маршрутизатора linkActiveClass .</target>
        </trans-unit>
        <trans-unit id="08c47906bf83e39ad87e06aca0fe381d685ab20a" translate="yes" xml:space="preserve">
          <source>Configure the router mode.</source>
          <target state="translated">Настройте режим маршрутизатора.</target>
        </trans-unit>
        <trans-unit id="179589cabbf6e5556838d12a18510a83d0e5840f" translate="yes" xml:space="preserve">
          <source>Controls whether the router should fallback to &lt;code&gt;hash&lt;/code&gt; mode when the browser does not support &lt;code&gt;history.pushState&lt;/code&gt; but mode is set to &lt;code&gt;history&lt;/code&gt;.</source>
          <target state="translated">Определяет, должен ли маршрутизатор переходить в режим &lt;code&gt;hash&lt;/code&gt; если браузер не поддерживает &lt;code&gt;history.pushState&lt;/code&gt; , но для режима установлено значение &lt;code&gt;history&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd84a1e60895c6267650c7ed76c93863634a08f7" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;_redirects&lt;/code&gt; file that is included with your deployed files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604a3713372f436d1cb20925918b04c41010dfd1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;web.config&lt;/code&gt; file in the root directory of your site with the following:</source>
          <target state="translated">Создайте файл &lt;code&gt;web.config&lt;/code&gt; в корневом каталоге вашего сайта со следующим:</target>
        </trans-unit>
        <trans-unit id="9868a4a168bb5e4e0cc7bd6735932973b7ab08f9" translate="yes" xml:space="preserve">
          <source>Creates a Router instance that can be used by a Vue app. Check the &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;RouterOptions&lt;/code&gt;&lt;/a&gt; for a list of all the properties that can be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8205ba954f5fe00a5a35d4aadf28cad8ed6996ce" translate="yes" xml:space="preserve">
          <source>Creates a hash history. Useful for web applications with no host (e.g. &lt;code&gt;file://&lt;/code&gt;) or when configuring a server to handle any URL isn't an option. &lt;strong&gt;Note you should use &lt;a href=&quot;#createwebhistory&quot;&gt;&lt;code&gt;createWebHistory&lt;/code&gt;&lt;/a&gt; if SEO matters to you&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9527cc13bec56fa8bea8551be6135705cde7a94" translate="yes" xml:space="preserve">
          <source>Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere. If the user is not on a browser context, it's up to them to replace that location with the starter location by either calling &lt;code&gt;router.push()&lt;/code&gt; or &lt;code&gt;router.replace()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d989b2ecb8d8ea27a3e16010096369fc9fc8f3" translate="yes" xml:space="preserve">
          <source>Creates an HTML5 history. Most common history for single page applications. The application must be served through the http protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ffccb8bb55835416705cdf732220caea61308d" translate="yes" xml:space="preserve">
          <source>Creating a Single-page Application with Vue + Vue Router feels natural: with Vue.js, we are already composing our application with components. When adding Vue Router to the mix, all we need to do is map our components to the routes and let Vue Router know where to render them. Here's a basic example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b0a80537d0b93c4c92d2861e9bbeb03c1a7f33" translate="yes" xml:space="preserve">
          <source>Creating a Single-page Application with Vue + Vue Router is dead simple. With Vue.js, we are already composing our application with components. When adding Vue Router to the mix, all we need to do is map our components to the routes and let Vue Router know where to render them. Here's a basic example:</source>
          <target state="translated">Создание одностраничного приложения с помощью маршрутизатора Vue+Vue очень просто.С помощью Vue.js мы уже составляем наше приложение с компонентами.При добавлении Vue Router в микс все,что нам нужно сделать,это сопоставить наши компоненты с маршрутами и дать Vue Router знать,где их отрисовать.Вот основной пример:</target>
        </trans-unit>
        <trans-unit id="f239dc5f61ff2b32c7d339fd4659595ec368c723" translate="yes" xml:space="preserve">
          <source>Current route location. Readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec019b1e50801a9311096611e9399cf055b455e" translate="yes" xml:space="preserve">
          <source>Custom Regexp in params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf6dde34ecab51035432c1b02fd02044d187a6a" translate="yes" xml:space="preserve">
          <source>Custom data attached to the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0f0286a1cfb05554016c710e5c948d475c24ac" translate="yes" xml:space="preserve">
          <source>Custom implementation to parse a query. Must decode query keys and values. See its counterpart, &lt;a href=&quot;#stringifyquery&quot;&gt;stringifyQuery&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1853793a21dbb0d37c05ea0f0996c76d1b4914c" translate="yes" xml:space="preserve">
          <source>Custom implementation to stringify a query object. Should not prepend a leading &lt;code&gt;?&lt;/code&gt;. Should properly encode query keys and values. &lt;a href=&quot;#parsequery&quot;&gt;parseQuery&lt;/a&gt; counterpart to handle query parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f31f9c9de48f97cd9f14f9d5e4b1227ebfaf383" translate="yes" xml:space="preserve">
          <source>Customizable Scroll Behavior</source>
          <target state="translated">Настраиваемое поведение прокрутки</target>
        </trans-unit>
        <trans-unit id="126e1bff33bc4a33979dcd9da131a2801aeb7664" translate="yes" xml:space="preserve">
          <source>DOM updates triggered.</source>
          <target state="translated">Сработали обновления DOM.</target>
        </trans-unit>
        <trans-unit id="890e1257a40dfb0f216d69df75d9cda18023d0bb" translate="yes" xml:space="preserve">
          <source>Data Fetching</source>
          <target state="translated">Сбор данных</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="3484c6fcb53ac09a3fead481f71e452bc3f9e097" translate="yes" xml:space="preserve">
          <source>Declarative</source>
          <target state="translated">Declarative</target>
        </trans-unit>
        <trans-unit id="f65c5596776c06a59d0ce7a69fe222507b9b9a51" translate="yes" xml:space="preserve">
          <source>Decoded &lt;code&gt;hash&lt;/code&gt; section of the URL. Always starts with a &lt;code&gt;#&lt;/code&gt;. Empty string if there is no &lt;code&gt;hash&lt;/code&gt; in the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee6558ca9e4f1fc9567275e6b2607489370a9a5" translate="yes" xml:space="preserve">
          <source>Decoded values in &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; are now consistent no matter where the navigation is initiated (older browsers will still produce unencoded &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;fullPath&lt;/code&gt;). The initial navigation should yield the same results as in-app navigations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89764369e0ca3d87f1b4d7b04f366d13ac29694" translate="yes" xml:space="preserve">
          <source>Default class applied to active &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink&lt;/a&gt;. If none is provided, &lt;code&gt;router-link-active&lt;/code&gt; will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58474dbda93210588095c9b2218627dabdb261f7" translate="yes" xml:space="preserve">
          <source>Default class applied to exact active &lt;a href=&quot;#router-link-props&quot;&gt;RouterLink&lt;/a&gt;. If none is provided, &lt;code&gt;router-link-exact-active&lt;/code&gt; will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3f89814984abd9b96bc69007ca85ae060c9ed5" translate="yes" xml:space="preserve">
          <source>Defines if this record is the alias of another one. This property is &lt;code&gt;undefined&lt;/code&gt; if the record is the original one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8933bd7033a4306c23c49bb480c49359b7e328" translate="yes" xml:space="preserve">
          <source>Delaying the scroll</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2a1f5a91d31ace28961a444d73ff19c7d2bb5f" translate="yes" xml:space="preserve">
          <source>Denotes the target route of the link. When clicked, the value of the &lt;code&gt;to&lt;/code&gt; prop will be passed to &lt;code&gt;router.push()&lt;/code&gt; internally, so it can either be a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;#routelocationraw&quot;&gt;route location object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785cf0391e1a17613040723181ad0242ee7dbb32" translate="yes" xml:space="preserve">
          <source>Denotes the target route of the link. When clicked, the value of the &lt;code&gt;to&lt;/code&gt; prop will be passed to &lt;code&gt;router.push()&lt;/code&gt; internally, so the value can be either a string or a location descriptor object.</source>
          <target state="translated">Обозначает целевой маршрут ссылки. При нажатии значение &lt;code&gt;router.push()&lt;/code&gt; &lt;code&gt;to&lt;/code&gt; prop будет передано в router.push () внутренне, поэтому значение может быть либо строкой, либо объектом дескриптора местоположения.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="0aee9c3221a3da071a601cb3dd04aa286ee556f6" translate="yes" xml:space="preserve">
          <source>Detecting Navigation Failures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99989607634c22477585715a08209293f2cd2fa5" translate="yes" xml:space="preserve">
          <source>Detecting Redirections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d9b9f619dbd27ad649a2fb2ed512704a8498dc" translate="yes" xml:space="preserve">
          <source>Dev Build</source>
          <target state="translated">Dev Build</target>
        </trans-unit>
        <trans-unit id="fe58255abc7333a2ab7662b2a089e7fcc7667d00" translate="yes" xml:space="preserve">
          <source>Dictionary of decoded params extracted from &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6592593af63523f1ffd40042fab5dd1cc3598e" translate="yes" xml:space="preserve">
          <source>Dictionary of decoded query params extracted from the &lt;code&gt;search&lt;/code&gt; section of the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3df214bd255b235c6d782e6b918d71f1c1a2710" translate="yes" xml:space="preserve">
          <source>Dictionary of named views, if none, contains an object with the key &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9b0210a13988df0a846cc5545d1c32ec191877" translate="yes" xml:space="preserve">
          <source>Dictionary of the &lt;a href=&quot;#props&quot;&gt;&lt;code&gt;props&lt;/code&gt; option&lt;/a&gt; for each named view. If none, it will contain only one property named &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c34a91146af369e3ae2402147c7c1e8625e246" translate="yes" xml:space="preserve">
          <source>Different History modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74745b615d9f78ad12547f424519672e5eb962d" translate="yes" xml:space="preserve">
          <source>Differentiating Navigation Failures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3802d9202faed1ee478163e33ce9ddf939795ae9" translate="yes" xml:space="preserve">
          <source>Direct Download / CDN</source>
          <target state="translated">Прямая загрузка/CDN</target>
        </trans-unit>
        <trans-unit id="9f900a6b2f910e4862a4828a84b847040342a939" translate="yes" xml:space="preserve">
          <source>Do &lt;strong&gt;not&lt;/strong&gt; use &lt;a href=&quot;https://v3.vuejs.org/guide/component-dynamic-async.html#async-components&quot;&gt;Async components&lt;/a&gt; for routes. Async components can still be used inside route components but route component themselves are just dynamic imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea81d16e983f772ff8f6e64d4b16ed9e8c6eb715" translate="yes" xml:space="preserve">
          <source>Due to the removal of &lt;code&gt;path-to-regexp&lt;/code&gt;, unnamed parameters are no longer supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5741bbff94960e62ed6fcda2ffbc8bf291509f" translate="yes" xml:space="preserve">
          <source>Dynamic Route Matching</source>
          <target state="translated">Динамическое совпадение маршрутов</target>
        </trans-unit>
        <trans-unit id="567610db7d4aa94eecb67255f022fb5959d6a202" translate="yes" xml:space="preserve">
          <source>Dynamic Route Matching with Params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2546c086cf942a9a9e7934c599acd7a2a13800d1" translate="yes" xml:space="preserve">
          <source>Dynamic Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2abcad3fc26933b61c23051035b020e60ef7d76" translate="yes" xml:space="preserve">
          <source>Dynamic routing is achieved mainly via two functions: &lt;code&gt;router.addRoute()&lt;/code&gt; and &lt;code&gt;router.removeRoute()&lt;/code&gt;. They &lt;strong&gt;only&lt;/strong&gt; register a new route, meaning that if the newly added route matches the current location, it would require you to &lt;strong&gt;manually navigate&lt;/strong&gt; with &lt;code&gt;router.push()&lt;/code&gt; or &lt;code&gt;router.replace()&lt;/code&gt; to display that new route. Let's take a look at an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3d8ec9f1affbff8f734f537e37271abb248165" translate="yes" xml:space="preserve">
          <source>Dynamically add more routes to the router. The argument must be an Array using the same route config format with the &lt;code&gt;routes&lt;/code&gt; constructor option.</source>
          <target state="translated">Динамически добавляйте новые маршруты к маршрутизатору. Аргумент должен быть массивом, использующим тот же формат конфигурации &lt;code&gt;routes&lt;/code&gt; параметр конструктора маршрутов .</target>
        </trans-unit>
        <trans-unit id="c9c97afe5a933e0af40a15a9e24fed6c565e49dd" translate="yes" xml:space="preserve">
          <source>Edit this page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9381cee168966ec0b5100dc4c624b13de266e6" translate="yes" xml:space="preserve">
          <source>Encoded &lt;code&gt;pathname&lt;/code&gt; section of the URL associated to the route location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da817c6762af0c7f48b86fa472783deb72016b1" translate="yes" xml:space="preserve">
          <source>Encoded URL associated to the route location. Contains &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2321f096c18a699228d5ecc531360c5ee98e45e" translate="yes" xml:space="preserve">
          <source>Enumeration with all possible types for navigation failures. Can be passed to &lt;a href=&quot;#isnavigationfailure&quot;&gt;isNavigationFailure&lt;/a&gt; to check for specific failures. &lt;strong&gt;Never use any of the numerical values&lt;/strong&gt;, always use the variables like &lt;code&gt;NavigationFailureType.aborted&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c467ae21d128d7193caebbe399b812abbf159e" translate="yes" xml:space="preserve">
          <source>Every guard function receives three arguments:</source>
          <target state="translated">Каждая охранная функция получает три аргумента:</target>
        </trans-unit>
        <trans-unit id="e517f314069424c3e86f4c6d8856cfc3c9966304" translate="yes" xml:space="preserve">
          <source>Every guard function receives two arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bac23f28aec2ade8b77c4f238e7a22aa94fe46" translate="yes" xml:space="preserve">
          <source>Example Server Configurations</source>
          <target state="translated">Пример конфигурации сервера</target>
        </trans-unit>
        <trans-unit id="ea90a9028e4260b0b7f6845eac8160877c8ae4dd" translate="yes" xml:space="preserve">
          <source>Example: Applying Active Class to Outer Element</source>
          <target state="translated">Пример:Применение активного класса к внешнему элементу</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="6ea555d5143dcddf991fec16297649cdb9c9c9e9" translate="yes" xml:space="preserve">
          <source>Express with Node.js</source>
          <target state="translated">Экспресс с Node.js</target>
        </trans-unit>
        <trans-unit id="60c366a75a5d7cfcf01dfbb8f9a7f61594aa847a" translate="yes" xml:space="preserve">
          <source>Extending RouterLink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cf55a69f4df4c161869ea8e2d7b9a4330c5741" translate="yes" xml:space="preserve">
          <source>Fetching After Navigation</source>
          <target state="translated">Захват после навигации</target>
        </trans-unit>
        <trans-unit id="d7886fbab1b4f934f0a1de4803c3c7bec7bd522d" translate="yes" xml:space="preserve">
          <source>Fetching Before Navigation</source>
          <target state="translated">Захват перед навигацией</target>
        </trans-unit>
        <trans-unit id="ac4b4cf3c6166e203b8679a9dbb8159d0c81310b" translate="yes" xml:space="preserve">
          <source>Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12968f6b0d3abadd283ff066759a7b791258a0e4" translate="yes" xml:space="preserve">
          <source>Finally, you can directly define route navigation guards inside route components (the ones passed to the router configuration) with the following options:</source>
          <target state="translated">Наконец,вы можете напрямую определить навигационные ограждения маршрута внутри компонентов маршрута (те,которые передаются в конфигурацию маршрутизатора)со следующими опциями:</target>
        </trans-unit>
        <trans-unit id="a01db2ae475f14b70ac1d75463ca58257cfa1529" translate="yes" xml:space="preserve">
          <source>Fine-grained navigation control</source>
          <target state="translated">Мелкозернистый навигационный контроль</target>
        </trans-unit>
        <trans-unit id="5f133c80f125f45ee0dbdf789783d6285b5c326c" translate="yes" xml:space="preserve">
          <source>Firebase hosting</source>
          <target state="translated">Хостинг Firebase</target>
        </trans-unit>
        <trans-unit id="373ebcfb47d28107cdb989722313264dd872952e" translate="yes" xml:space="preserve">
          <source>First, an async component can be defined as a factory function that returns a Promise (which should resolve to the component itself):</source>
          <target state="translated">Во-первых,компонент асинхронизации можно определить как заводскую функцию,которая возвращает Обещание (которое должно разрешаться самому компоненту):</target>
        </trans-unit>
        <trans-unit id="df0806b24093e99d864f17e99384efbe1d25e90c" translate="yes" xml:space="preserve">
          <source>First, each route object in the &lt;code&gt;routes&lt;/code&gt; configuration is called a &lt;strong&gt;route record&lt;/strong&gt;. Route records may be nested. Therefore when a route is matched, it can potentially match more than one route record.</source>
          <target state="translated">Во-первых, каждый объект &lt;code&gt;routes&lt;/code&gt; конфигурации маршрутов называется &lt;strong&gt;записью маршрута&lt;/strong&gt; . Записи маршрута могут быть вложенными. Следовательно, когда маршрут совпадает, он потенциально может соответствовать более чем одной записи маршрута.</target>
        </trans-unit>
        <trans-unit id="6a65bf6fcf34175ff79aaa50332ab88e3c4fdbde" translate="yes" xml:space="preserve">
          <source>For Node.js/Express, consider using &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback middleware&lt;/a&gt;.</source>
          <target state="translated">Для Node.js / Express рассмотрите возможность использования &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;промежуточного программного обеспечения connect-history-api-fallback&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b1e8e9f52767f0036500ce99a480baa669242b2c" translate="yes" xml:space="preserve">
          <source>For TypeScript users, &lt;code&gt;vue-router@3.0+&lt;/code&gt; requires &lt;code&gt;vue@2.5+&lt;/code&gt;, and vice versa.</source>
          <target state="translated">Для пользователей TypeScript &lt;code&gt;vue-router@3.0+&lt;/code&gt; требует &lt;code&gt;vue@2.5+&lt;/code&gt; , и наоборот.</target>
        </trans-unit>
        <trans-unit id="b84487772f3e0cb7184255459fbb540893ece7a9" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">Для расширенного использования ознакомьтесь с &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-alias/app.js&quot;&gt;примером&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="489c0c70c863fa104256940ebe3fe288f47435b7" translate="yes" xml:space="preserve">
          <source>For advanced usage, check out the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">Для расширенного использования ознакомьтесь с &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/route-props/app.js&quot;&gt;примером&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="57531f3c0d6aa0bea14c7b9b683c5a03f5eb3b51" translate="yes" xml:space="preserve">
          <source>For example, with the above route config, the URL &lt;code&gt;/foo/bar&lt;/code&gt; will match both the parent route record and the child route record.</source>
          <target state="translated">Например, с приведенной выше конфигурацией маршрута URL &lt;code&gt;/foo/bar&lt;/code&gt; будет соответствовать как родительской записи маршрута, так и дочерней записи маршрута.</target>
        </trans-unit>
        <trans-unit id="b0570a0839e80d681677ea7396f8d020d3962d64" translate="yes" xml:space="preserve">
          <source>For example, with the above route config, the URL &lt;code&gt;/posts/new&lt;/code&gt; will match both the parent route record (&lt;code&gt;path: '/posts'&lt;/code&gt;) and the child route record (&lt;code&gt;path: 'new'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="036a717afd24a521f1446cb57757a166d602dd99" translate="yes" xml:space="preserve">
          <source>For more details see &lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;Scroll Behavior&lt;/a&gt;.</source>
          <target state="translated">Подробнее см. &lt;a href=&quot;../guide/advanced/scroll-behavior&quot;&gt;Поведение при прокрутке&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ac4e81a56cc8dc13ec2ca3b54c9e2e00def537b9" translate="yes" xml:space="preserve">
          <source>For other advanced usage, checkout the &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;example&lt;/a&gt;.</source>
          <target state="translated">Для другого расширенного использования ознакомьтесь с &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js&quot;&gt;примером&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="471cdedb60b8fff38528d47b8f0c2597cb9e7860" translate="yes" xml:space="preserve">
          <source>For routes with named views, you have to define the &lt;code&gt;props&lt;/code&gt; option for each named view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ebdb5c1e02ab14d0abe1c5bd1ae44a255ae404" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity, all, route records &lt;strong&gt;are omitting the &lt;code&gt;component&lt;/code&gt; property&lt;/strong&gt; to focus on the &lt;code&gt;path&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f8c3f2cdac27443d5de2aaa51cb565413b312b" translate="yes" xml:space="preserve">
          <source>Full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Полный пример &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/named-routes/app.js&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="56e2a78217e3fd68618113a0c15dbe403b951d96" translate="yes" xml:space="preserve">
          <source>Function mode</source>
          <target state="translated">Функциональный режим</target>
        </trans-unit>
        <trans-unit id="d36c5c0ca26dc8a7f2c4fd3b0df6400fa0b2c109" translate="yes" xml:space="preserve">
          <source>Function that can be passed to control a router navigation. The &lt;code&gt;next&lt;/code&gt; callback can be omitted if you return a value (or a Promise) instead, which is encouraged. Possible return values (and parameters for &lt;code&gt;next&lt;/code&gt;) are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081e76bebfbb6be2d7926f6cf6cf34a04126c0de" translate="yes" xml:space="preserve">
          <source>Function to control scrolling when navigating between pages. Can return a Promise to delay scrolling. Check .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc5030c9d849d60c4187d48add33340709b3d18" translate="yes" xml:space="preserve">
          <source>Get Started &amp;rarr;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d420c70f9cabeb41a82928a0fb24c104d6e992c" translate="yes" xml:space="preserve">
          <source>Get a full list of all the &lt;a href=&quot;#routerecord&quot;&gt;route records&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="a1bfbb67e361dc39af82afc913bb9934fdd1f0b4" translate="yes" xml:space="preserve">
          <source>Given any &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;normalized route location&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62b6898ffa5a5e18fab1b46e9f332358f97378d" translate="yes" xml:space="preserve">
          <source>Given any nested named route with an empty &lt;code&gt;path&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e8ab6c07a3acf4c2204d6b70bcb472586550981" translate="yes" xml:space="preserve">
          <source>Given the app we created in the last chapter:</source>
          <target state="translated">Учитывая приложение,которое мы создали в последней главе:</target>
        </trans-unit>
        <trans-unit id="04b81c50025b47abd4de06d5d2d43a3f431b8b3e" translate="yes" xml:space="preserve">
          <source>Global After Hooks</source>
          <target state="translated">Global After Hooks</target>
        </trans-unit>
        <trans-unit id="39fe16e37e3132d15e0fbf4f80ae9c736ada4b64" translate="yes" xml:space="preserve">
          <source>Global Before Guards</source>
          <target state="translated">Глобальные перед стражами</target>
        </trans-unit>
        <trans-unit id="c78825b4c48ff8948dc48798ccc5fe8425bd6e4d" translate="yes" xml:space="preserve">
          <source>Global Resolve Guards</source>
          <target state="translated">Глобальные Решающие Стражи</target>
        </trans-unit>
        <trans-unit id="571bfb07cac37435662705c30ebba47b6a968777" translate="yes" xml:space="preserve">
          <source>Global before guards are called in creation order, whenever a navigation is triggered. Guards may be resolved asynchronously, and the navigation is considered &lt;strong&gt;pending&lt;/strong&gt; before all hooks have been resolved.</source>
          <target state="translated">Global перед вызовом охранников в порядке создания при срабатывании навигации. Охранники могут быть разрешены асинхронно, и переход считается &lt;strong&gt;отложенным&lt;/strong&gt; до того, как будут разрешены все перехватчики.</target>
        </trans-unit>
        <trans-unit id="dd9c40ae1404d776848a122807b1c216f9fd4ff8" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class for exact matches. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">Глобально настроить активный класс по умолчанию &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; для точных совпадений. Также см. &lt;a href=&quot;#router-link&quot;&gt;Router-link&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bad55014845b46b06bee9764378d62ab9c019c1a" translate="yes" xml:space="preserve">
          <source>Globally configure &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; default active class. Also see &lt;a href=&quot;#router-link&quot;&gt;router-link&lt;/a&gt;.</source>
          <target state="translated">Глобально настроить активный класс по умолчанию &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; . Также см. &lt;a href=&quot;#router-link&quot;&gt;Router-link&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="641c78159b06984b968d21e7af4bd585d17df31e" translate="yes" xml:space="preserve">
          <source>Go back in history if possible by calling &lt;code&gt;history.back()&lt;/code&gt;. Equivalent to &lt;code&gt;router.go(-1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179826d589efefeebe70956693777c580ac760fe" translate="yes" xml:space="preserve">
          <source>Go forward in history if possible by calling &lt;code&gt;history.forward()&lt;/code&gt;. Equivalent to &lt;code&gt;router.go(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbf6ecd2f8d2909ec7298d8eda3787d8cfb77ff" translate="yes" xml:space="preserve">
          <source>Going to any page, &lt;code&gt;/about&lt;/code&gt;, &lt;code&gt;/store&lt;/code&gt;, or &lt;code&gt;/3-tricks-to-improve-your-routing-code&lt;/code&gt; ends up rendering the &lt;code&gt;Article&lt;/code&gt; component. If we are on &lt;code&gt;/about&lt;/code&gt; and we add a new route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19c13f99632b474452f8a18894c07cd6fa72b4c" translate="yes" xml:space="preserve">
          <source>Gold Sponsors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea78ebe08d1386045a768205f28719d8bbea6c68" translate="yes" xml:space="preserve">
          <source>Grouping Components in the Same Chunk</source>
          <target state="translated">Группировка компонентов в одном флаконе</target>
        </trans-unit>
        <trans-unit id="9f738ce8457f291b18ee47e665e96baa84f38fcd" translate="yes" xml:space="preserve">
          <source>HTML</source>
          <target state="translated">HTML</target>
        </trans-unit>
        <trans-unit id="d0af1b42be6477058b4fe3d76bd1657cbdda202b" translate="yes" xml:space="preserve">
          <source>HTML5 History Mode</source>
          <target state="translated">режим истории HTML5</target>
        </trans-unit>
        <trans-unit id="ecf58483618c1faa69f05aca8c3f3ddfcd66c14e" translate="yes" xml:space="preserve">
          <source>HTML5 Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a558985230ac3cb404ec8adf6f468e15eb4eed" translate="yes" xml:space="preserve">
          <source>HTML5 history mode or hash mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f998d2f920d7fa8d57fe7e8745ef748da09071" translate="yes" xml:space="preserve">
          <source>HTML5 history mode or hash mode, with auto-fallback in IE9</source>
          <target state="translated">Режим истории HTML5 или хэш-режим,с автоматическим откатом в IE9</target>
        </trans-unit>
        <trans-unit id="aabb66e03ec10bd67a0272f8819900c8295c109b" translate="yes" xml:space="preserve">
          <source>Hash Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183d3bda933cac132b1dd21d5834c8786fbca77a" translate="yes" xml:space="preserve">
          <source>Here are some of the interfaces and types used by Vue Router. The documentation references them to give you an idea of the existing properties in objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d68b54e7e4109ad893204b6f26e0708c9cc4d6" translate="yes" xml:space="preserve">
          <source>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; directly in their browser. Now that's ugly.</source>
          <target state="translated">Однако здесь возникает проблема: поскольку наше приложение является одностраничным клиентским приложением, без правильной конфигурации сервера пользователи получат ошибку 404, если они будут обращаться к &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; непосредственно в своем браузере. Вот это уродливо.</target>
        </trans-unit>
        <trans-unit id="ffd24f7c2971cc526929749ddc043643b2eb3399" translate="yes" xml:space="preserve">
          <source>Here comes a problem, though: Since our app is a single page client side app, without a proper server configuration, the users will get a 404 error if they access &lt;code&gt;https://example.com/user/id&lt;/code&gt; directly in their browser. Now that's ugly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44939cb70708e79d998ef17ea4434d07299b80c6" translate="yes" xml:space="preserve">
          <source>Here is a full snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584deca8320b4a6f87353dfa5f080654c25a2980" translate="yes" xml:space="preserve">
          <source>Here is the correct version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34e0feba7b9eeabcd77ca390cdeaec4a234b764" translate="yes" xml:space="preserve">
          <source>History Manipulation</source>
          <target state="translated">Манипуляция историей</target>
        </trans-unit>
        <trans-unit id="b2d65ae52fd9d9a993eac8f11cfd42d525af8e12" translate="yes" xml:space="preserve">
          <source>History implementation used by the router. Most web applications should use &lt;code&gt;createWebHistory&lt;/code&gt; but it requires the server to be properly configured. You can also use a &lt;em&gt;hash&lt;/em&gt; based history with &lt;code&gt;createWebHashHistory&lt;/code&gt; that does not require any configuration on the server but isn't handled at all by search engines and does poorly on SEO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0246196abd9134d11e797df909a2239577c70d5a" translate="yes" xml:space="preserve">
          <source>However, you can access the instance by passing a callback to &lt;code&gt;next&lt;/code&gt;. The callback will be called when the navigation is confirmed, and the component instance will be passed to the callback as the argument:</source>
          <target state="translated">Однако вы можете получить доступ к экземпляру, передав обратный вызов &lt;code&gt;next&lt;/code&gt; . Обратный вызов будет вызван при подтверждении навигации, и экземпляр компонента будет передан обратному вызову в качестве аргумента:</target>
        </trans-unit>
        <trans-unit id="f7c32e5e91730c7288c256a7228e1273afb0bdd4" translate="yes" xml:space="preserve">
          <source>If a falsy value or an empty object is returned, no scrolling will happen.</source>
          <target state="translated">Если возвращается фальшивое значение или пустой объект,прокрутка не происходит.</target>
        </trans-unit>
        <trans-unit id="a0517237d92d5d305cb4a982821ba1e4bc4c1af8" translate="yes" xml:space="preserve">
          <source>If a navigation is prevented, resulting in the user staying on the same page, the resolved value of the &lt;code&gt;Promise&lt;/code&gt; returned by &lt;code&gt;router.push&lt;/code&gt; will be a &lt;em&gt;Navigation Failure&lt;/em&gt;. Otherwise, it will be a &lt;em&gt;falsy&lt;/em&gt; value (usually &lt;code&gt;undefined&lt;/code&gt;). This allows us to differentiate the case where we navigated away from where we are or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91f796ec7bc9d258330e45501d1a3505dd30c6f" translate="yes" xml:space="preserve">
          <source>If nothing, &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; is returned, &lt;strong&gt;the navigation is validated&lt;/strong&gt;, and the next navigation guard is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11df13ace21b6719040859dbebfe3fd607bb81fd" translate="yes" xml:space="preserve">
          <source>If we want to do something after a navigation is finished, we need a way to wait after calling &lt;code&gt;router.push&lt;/code&gt;. Imagine we have a mobile menu that allows us to go to different pages and we only want to hide the menu once we have navigated to the new page, we might want to do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49910c5f3a09c1a2a5644b36aaa9d21c610f608b" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; to your &lt;code&gt;a&lt;/code&gt; element, you must omit the &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; handler.</source>
          <target state="translated">Если вы добавляете &lt;code&gt;target=&quot;_blank&quot;&lt;/code&gt; в свой элемент &lt;code&gt;a&lt;/code&gt; , вы должны опустить обработчик &lt;code&gt;@click=&quot;navigate&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8e2cc7d90282df1b84b1e86e1d9f29da65e6728" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;history-mode&quot;&gt;History mode&lt;/a&gt;, make sure to follow the instructions to correctly configure your server as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba84b8a4610a4b430c6161f414ad4be1f9ef00f5" translate="yes" xml:space="preserve">
          <source>If you are writing your component using the &lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-setup.html#setup&quot;&gt;composition API and a &lt;code&gt;setup&lt;/code&gt; function&lt;/a&gt;, you can add update and leave guards through &lt;code&gt;onBeforeRouteUpdate&lt;/code&gt; and &lt;code&gt;onBeforeRouteLeave&lt;/code&gt; respectively. Please refer to the &lt;a href=&quot;composition-api#navigation-guards&quot;&gt;Composition API section&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d05886797b156f0e09ff5934f45a4acd51828b" translate="yes" xml:space="preserve">
          <source>If you decide to add or remove routes inside of a navigation guard, you should not call &lt;code&gt;router.replace()&lt;/code&gt; but trigger a redirection by returning the new location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4138308da253dcef665f1aaad4cc49aa6a42e89c" translate="yes" xml:space="preserve">
          <source>If you need to dig how your routes are transformed into Regexp to understand why a route isn't being matched or, to report a bug, you can use the &lt;a href=&quot;https://paths.esm.dev/?p=AAMeJSyAwR4UbFDAFxAcAGAIJXMAAA..#&quot;&gt;path ranker tool&lt;/a&gt;. It supports sharing your routes through the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d540fc274c9d072c5b4100c098d68002c4e652f" translate="yes" xml:space="preserve">
          <source>If you need to match routes with multiple sections like &lt;code&gt;/first/second/third&lt;/code&gt;, you should mark a param as repeatable with &lt;code&gt;*&lt;/code&gt; (0 or more) and &lt;code&gt;+&lt;/code&gt; (1 or more):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97cf2b759f92fcc431463462e3c878ae145ddc19" translate="yes" xml:space="preserve">
          <source>If you omit the second parameter: &lt;code&gt;isNavigationFailure(failure)&lt;/code&gt;, it will only check if &lt;code&gt;failure&lt;/code&gt; is a &lt;em&gt;Navigation Failure&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54873f2ce2d40adca068768967316da5c24b973e" translate="yes" xml:space="preserve">
          <source>If you prefer using a render function or create &lt;code&gt;computed&lt;/code&gt; properties, you can use the &lt;code&gt;useLink&lt;/code&gt; from the &lt;a href=&quot;composition-api&quot;&gt;Composition API&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf49d509e0a3607c76d7e53f4e62c0f9c2c6cc1" translate="yes" xml:space="preserve">
          <source>If you want to simulate the &quot;scroll to anchor&quot; behavior:</source>
          <target state="translated">Если вы хотите смоделировать поведение &quot;прокрутки к якорю&quot;:</target>
        </trans-unit>
        <trans-unit id="d25c358abf8f92a3c961f2ff25d6053db583fbab" translate="yes" xml:space="preserve">
          <source>If you wish to customize this behavior, e.g. take into account the &lt;code&gt;hash&lt;/code&gt; section, you should use the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt; to extend &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628ec263bf2844b96b116e2c13ebbc75164336c6" translate="yes" xml:space="preserve">
          <source>If your browser supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions/behavior&quot;&gt;scroll behavior&lt;/a&gt;, you can make it smooth:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af121786c707b3ca9ef9605d9fbbc36c7b411ea1" translate="yes" xml:space="preserve">
          <source>If your route has parameters, make sure to include them in any absolute alias:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae5537a6af22693e8cc60001bfaf1893dd13eca" translate="yes" xml:space="preserve">
          <source>Imagine having the following router with one single route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae10a7d8459debcadacac2bb97288eee8b865ff" translate="yes" xml:space="preserve">
          <source>In 2.2.0+, optionally provide &lt;code&gt;onComplete&lt;/code&gt; and &lt;code&gt;onAbort&lt;/code&gt; callbacks to &lt;code&gt;router.push&lt;/code&gt; or &lt;code&gt;router.replace&lt;/code&gt; as the 2nd and 3rd arguments. These callbacks will be called when the navigation either successfully completed (after all async hooks are resolved), or aborted (navigated to the same route, or to a different route before current navigation has finished), respectively. In 3.1.0+, you can omit the 2nd and 3rd parameter and &lt;code&gt;router.push&lt;/code&gt;/&lt;code&gt;router.replace&lt;/code&gt; will return a promise instead if Promises are supported.</source>
          <target state="translated">В версии 2.2.0+ необязательно предоставьте &lt;code&gt;onAbort&lt;/code&gt; вызовы &lt;code&gt;onComplete&lt;/code&gt; и onAbort для &lt;code&gt;router.push&lt;/code&gt; или &lt;code&gt;router.replace&lt;/code&gt; в качестве 2-го и 3-го аргументов. Эти обратные вызовы будут вызываться, когда навигация либо успешно завершена (после того, как все асинхронные перехватчики разрешены), либо прервана (переход по тому же маршруту или к другому маршруту до завершения текущей навигации), соответственно. В версии 3.1.0+ вы можете опустить 2-й и 3-й параметр, и &lt;code&gt;router.push&lt;/code&gt; / &lt;code&gt;router.replace&lt;/code&gt; вместо этого вернет обещание, если обещания поддерживаются.</target>
        </trans-unit>
        <trans-unit id="ed362c80e4a0c1d90cf802b990d676db62248b7d" translate="yes" xml:space="preserve">
          <source>In HTML5 history mode, &lt;code&gt;router-link&lt;/code&gt; will intercept the click event so that the browser doesn't try to reload the page.</source>
          <target state="translated">В режиме истории HTML5 &lt;code&gt;router-link&lt;/code&gt; перехватывает событие click, чтобы браузер не пытался перезагрузить страницу.</target>
        </trans-unit>
        <trans-unit id="e0559d066ccf324232d9ddb62fa5276b3390d603" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;$route.params&lt;/code&gt;, the &lt;code&gt;$route&lt;/code&gt; object also exposes other useful information such as &lt;code&gt;$route.query&lt;/code&gt; (if there is a query in the URL), &lt;code&gt;$route.hash&lt;/code&gt;, etc. You can check out the full details in the &lt;a href=&quot;../../api/index#routelocationnormalized&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123c58d7d20c981fdc7b0a2f037f2f3fb1149e14" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;$route.params&lt;/code&gt;, the &lt;code&gt;$route&lt;/code&gt; object also exposes other useful information such as &lt;code&gt;$route.query&lt;/code&gt; (if there is a query in the URL), &lt;code&gt;$route.hash&lt;/code&gt;, etc. You can check out the full details in the &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;API Reference&lt;/a&gt;.</source>
          <target state="translated">В дополнение к &lt;code&gt;$route.params&lt;/code&gt; , то &lt;code&gt;$route&lt;/code&gt; объект также предоставляет другую полезную информацию , такую как &lt;code&gt;$route.query&lt;/code&gt; (если есть запрос в URL), &lt;code&gt;$route.hash&lt;/code&gt; и т.д. Вы можете проверить полную информацию в &lt;a href=&quot;../../api/index#the-route-object&quot;&gt;Справочник по API&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c091137da9c8bf9dad00a78ac51c44c72c7f1633" translate="yes" xml:space="preserve">
          <source>In all cases, &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; are normalized route locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c9352ede93756918856c618a17b8a9c6356bed" translate="yes" xml:space="preserve">
          <source>In both cases, the router will navigate to the path &lt;code&gt;/user/123&lt;/code&gt;.</source>
          <target state="translated">В обоих случаях маршрутизатор перейдет по пути &lt;code&gt;/user/123&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="be9f04b73f3fd15873ce54f6c3576986215a4ac2" translate="yes" xml:space="preserve">
          <source>In both cases, the router will navigate to the path &lt;code&gt;/user/erina&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e533914aa31f20a4125d3d149dd7c0f5212753ea" translate="yes" xml:space="preserve">
          <source>In general, it's a good idea &lt;strong&gt;to always use dynamic imports&lt;/strong&gt; for all your routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5b361507dc6af09afbce464c84de751e4dc20d" translate="yes" xml:space="preserve">
          <source>In order to use transitions on your route components and animate navigations, you need to use the &lt;a href=&quot;../../api/index#router-view-s-v-slot&quot;&gt;v-slot API&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fafdcb96e5bc2be63e1d1c4b79430e604edc5e7" translate="yes" xml:space="preserve">
          <source>In practice, you might want to use your &lt;code&gt;AppLink&lt;/code&gt; component for different parts of your application. e.g. using &lt;a href=&quot;https://tailwindcss.com&quot;&gt;Tailwind CSS&lt;/a&gt;, you could create a &lt;code&gt;NavLink.vue&lt;/code&gt; component with all the classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b65707cf85c2823fbbb1f02b766ba87e00e18b6" translate="yes" xml:space="preserve">
          <source>In previous versions of Vue Router, it was also possible to use a &lt;em&gt;third argument&lt;/em&gt;&lt;code&gt;next&lt;/code&gt;, this was a common source of mistakes and went through an &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0037-router-return-guards.md#motivation&quot;&gt;RFC&lt;/a&gt; to remove it. However, it is still supported, meaning you can pass a third argument to any navigation guard. In that case, &lt;strong&gt;you must call &lt;code&gt;next&lt;/code&gt; exactly once&lt;/strong&gt; in any given pass through a navigation guard. It can appear more than once, but only if the logical paths have no overlap, otherwise the hook will never be resolved or produce errors. Here is &lt;strong&gt;a bad example&lt;/strong&gt; of redirecting to user to &lt;code&gt;/login&lt;/code&gt; if they are not authenticated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782d7f49a5d72cff3e2f84db10fda99309b5092d" translate="yes" xml:space="preserve">
          <source>In this specific scenario we are using a &lt;a href=&quot;route-matching-syntax#custom-regexp-in-params&quot;&gt;custom regexp&lt;/a&gt; between parentheses and marking the &lt;code&gt;pathMatch&lt;/code&gt; param as &lt;a href=&quot;route-matching-syntax#optional-parameters&quot;&gt;optionally repeatable&lt;/a&gt;. This is to allows us to directly navigate to the route if we need to by splitting the &lt;code&gt;path&lt;/code&gt; into an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ef6b30790e7707505a23e0b38e7700dc2f0d63" translate="yes" xml:space="preserve">
          <source>In vue-cli, nuxt, and vite projects, this file usually goes under a folder named &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf00c4093074d65696e6e9ab00bb1db82826baf" translate="yes" xml:space="preserve">
          <source>In-Component Guards</source>
          <target state="translated">многокомпонентная охрана</target>
        </trans-unit>
        <trans-unit id="ab960247ddc5acc97d8c2a113b63893d536bcf7c" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;vue-router&lt;/code&gt; after Vue and it will install itself automatically:</source>
          <target state="translated">Включите &lt;code&gt;vue-router&lt;/code&gt; после Vue, и он установится автоматически:</target>
        </trans-unit>
        <trans-unit id="6ea33ef6479c3bee7cc36716183bc85a1bd20da7" translate="yes" xml:space="preserve">
          <source>Initial list of routes that should be added to the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33644a716b603e6f92424ce605e53778ae79ba3e" translate="yes" xml:space="preserve">
          <source>Initial route location where the router is. Can be used in navigation guards to differentiate the initial navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7ae3fbd0a8cc0491d2e986f5c89a82826853c5" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;$route&lt;/code&gt; watcher callbacks</source>
          <target state="translated">Обратные вызовы внутри &lt;code&gt;$route&lt;/code&gt; watcher</target>
        </trans-unit>
        <trans-unit id="d820495ee5f4040175aec835f4a5b5a33ef1fa06" translate="yes" xml:space="preserve">
          <source>Inside components as &lt;code&gt;this.$route&lt;/code&gt;</source>
          <target state="translated">Внутри компонентов как &lt;code&gt;this.$route&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b74dc7409c8cacfbc49aeb2ec96c522df9be3f7" translate="yes" xml:space="preserve">
          <source>Inside navigation guards as the first two arguments:</source>
          <target state="translated">Внутренние навигационные охранники как первые два аргумента:</target>
        </trans-unit>
        <trans-unit id="c876f7b6d25954e644f1c0f79615345a5db0f583" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;scrollBehavior&lt;/code&gt; function as the first two arguments:</source>
          <target state="translated">Внутри функции &lt;code&gt;scrollBehavior&lt;/code&gt; в качестве первых двух аргументов:</target>
        </trans-unit>
        <trans-unit id="bd040edfed95e6068f33b83c57406115b80d4532" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt;</source>
          <target state="translated">Установить &lt;a href=&quot;https://www.iis.net/downloads/microsoft/url-rewrite&quot;&gt;IIS UrlRewrite&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="91d60654c70276c1f55519257a6b16f94cdd53b8" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;mod_rewrite&lt;/code&gt;, you could also use &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt;&lt;code&gt;FallbackResource&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Вместо &lt;code&gt;mod_rewrite&lt;/code&gt; вы также можете использовать &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_dir.html#fallbackresource&quot;&gt; &lt;code&gt;FallbackResource&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f2f94321c0c12321807b0fb675d4b99213d9f776" translate="yes" xml:space="preserve">
          <source>Internet Information Services (IIS)</source>
          <target state="translated">Информационные услуги Интернета (IIS)</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="7b38a0e68956f86b8611c4bc859e451a256e5d62" translate="yes" xml:space="preserve">
          <source>It acts like &lt;code&gt;router.push&lt;/code&gt;, the only difference is that it navigates without pushing a new history entry, as its name suggests - it replaces the current entry.</source>
          <target state="translated">Он действует как &lt;code&gt;router.push&lt;/code&gt; , с той лишь разницей, что он перемещается, не нажимая новую запись в истории, как следует из названия - он заменяет текущую запись.</target>
        </trans-unit>
        <trans-unit id="4dd2201f9c96e8fce8de77dad5aaa7b1cd8874e3" translate="yes" xml:space="preserve">
          <source>It is also possible to determine the transition to use dynamically based on the relationship between the target route and current route. Using a very similar snippet to the one just before:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0a42d5487908d2325dff65c967d5d5a60b2223" translate="yes" xml:space="preserve">
          <source>It is also possible to determine the transition to use dynamically based on the relationship between the target route and current route:</source>
          <target state="translated">Можно также определить переход к использованию динамически,основываясь на связи между целевым маршрутом и текущим маршрутом:</target>
        </trans-unit>
        <trans-unit id="6b25562a9e1b9df280a5fe2c99faad91421f8e2a" translate="yes" xml:space="preserve">
          <source>It is possible to create complex layouts using named views with nested views. When doing so, you will also need to give nested &lt;code&gt;router-view&lt;/code&gt; a name. Let's take a Settings panel example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7d69c290b5bd596fb28a4ccea84635c6bdac7" translate="yes" xml:space="preserve">
          <source>It is possible to create complex layouts using named views with nested views. When doing so, you will also need to name nested &lt;code&gt;router-view&lt;/code&gt; components used. Let's take a Settings panel example:</source>
          <target state="translated">Можно создавать сложные макеты, используя именованные представления с вложенными представлениями. При этом вам также потребуется назвать используемые вложенные компоненты &lt;code&gt;router-view&lt;/code&gt; . Возьмем пример панели настроек:</target>
        </trans-unit>
        <trans-unit id="81d0e504088dda7cc62b721fb627aa9bee443e41" translate="yes" xml:space="preserve">
          <source>It is possible to type the meta field by extending the &lt;code&gt;RouteMeta&lt;/code&gt; interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1b5f5c29b6497f61ce7508d8bab18e0dd25a54" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that Vue Router navigation methods (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;) work consistently in all router modes (&lt;code&gt;history&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; and &lt;code&gt;abstract&lt;/code&gt;).</source>
          <target state="translated">Стоит отметить, что методы навигации Vue Router ( &lt;code&gt;push&lt;/code&gt; , &lt;code&gt;replace&lt;/code&gt; , &lt;code&gt;go&lt;/code&gt; ) работают согласованно во всех режимах маршрутизатора ( &lt;code&gt;history&lt;/code&gt; , &lt;code&gt;hash&lt;/code&gt; и &lt;code&gt;abstract&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="727fcfe489da6a794c57bd83e62d1074d4cfb953" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that Vue Router navigation methods (&lt;code&gt;push&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;) work consistently no matter the kind of &lt;a href=&quot;../../api/index#history&quot;&gt;&lt;code&gt;history&lt;/code&gt; option&lt;/a&gt; is passed when creating the router instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f030b9d9f6ad48cfae5fd8ac9cbb110c6c37c67d" translate="yes" xml:space="preserve">
          <source>It uses a hash character (&lt;code&gt;#&lt;/code&gt;) before the actual URL that is internally passed. Because this section of the URL is never sent to the server, it doesn't require any special treatment on the server level. &lt;strong&gt;It does however have a bad impact in SEO&lt;/strong&gt;. If that's a concern for you, use the HTML5 history mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7b30b16b9eb13c34964f528c2928fc9569c73c" translate="yes" xml:space="preserve">
          <source>It works the same way in both HTML5 history mode and hash mode, so if you ever decide to switch mode, or when the router falls back to hash mode in IE9, nothing needs to be changed.</source>
          <target state="translated">Он работает одинаково как в режиме истории HTML5,так и в хэш-режиме,так что если вы когда-нибудь решите переключить режим,или когда маршрутизатор вернется в хэш-режим в IE9,ничего менять не нужно.</target>
        </trans-unit>
        <trans-unit id="95da97951714f8275297cc461ba6368782badc3e" translate="yes" xml:space="preserve">
          <source>It's also possible to directly add a property &lt;code&gt;replace: true&lt;/code&gt; to the &lt;code&gt;routeLocation&lt;/code&gt; that is passed to &lt;code&gt;router.push&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee098f844094a7c03980d5161149e4ab793d52bd" translate="yes" xml:space="preserve">
          <source>It's also possible to redirect to a relative location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a683fb5d21ff64bdb536f3cf69c63824f1405dc5" translate="yes" xml:space="preserve">
          <source>It's also possible to throw an &lt;code&gt;Error&lt;/code&gt; if an unexpected situation was met. This will also cancel the navigation and call any callback registered via &lt;a href=&quot;../../api/index#onerror&quot;&gt;&lt;code&gt;router.onError()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdf11f436055ccb0f4e6d63818ee613b025039c" translate="yes" xml:space="preserve">
          <source>It's possible to hook this up with events from a page-level transition component to make the scroll behavior play nicely with your page transitions, but due to the possible variance and complexity in use cases, we simply provide this primitive to enable specific userland implementations.</source>
          <target state="translated">Можно подключить его к событиям из компонента перехода на уровне страницы,чтобы заставить поведение прокрутки хорошо играть с переходами на странице,но из-за возможной дисперсии и сложности в использовании,мы просто предоставляем этот примитив,чтобы включить специфические реализации пользовательского уровня.</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="2023893211646b38329738f0c75758b66f90c972" translate="yes" xml:space="preserve">
          <source>Lazy Loading Routes</source>
          <target state="translated">Ленивые маршруты загрузки</target>
        </trans-unit>
        <trans-unit id="82dd054881d919f11b4984e16cd88f149ee21db8" translate="yes" xml:space="preserve">
          <source>Learn more about navigation failures on &lt;a href=&quot;navigation-failures&quot;&gt;its guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960763001b8d9b9065802f6e1547e28eeab1142a" translate="yes" xml:space="preserve">
          <source>Let's assume we have a &lt;code&gt;Post&lt;/code&gt; component that needs to fetch the data for a post based on &lt;code&gt;$route.params.id&lt;/code&gt;:</source>
          <target state="translated">Предположим, у нас есть компонент &lt;code&gt;Post&lt;/code&gt; , которому необходимо получить данные для публикации на основе &lt;code&gt;$route.params.id&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7d9beb7cfbec11578096c45ff575d51ae36be5be" translate="yes" xml:space="preserve">
          <source>Let's extend RouterLink to handle external links as well and adding a custom &lt;code&gt;inactive-class&lt;/code&gt; in an &lt;code&gt;AppLink.vue&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb99167f96cfad1971c85dcd1d05fa9f2b6b7ab" translate="yes" xml:space="preserve">
          <source>Let's say you want to use the package &lt;a href=&quot;https://github.com/ljharb/qs&quot;&gt;qs&lt;/a&gt; to parse queries, you can provide both &lt;code&gt;parseQuery&lt;/code&gt; and &lt;code&gt;stringifyQuery&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Лицензия MIT.</target>
        </trans-unit>
        <trans-unit id="4915ca87eec25d13d5ac866672b6c4238dab8b71" translate="yes" xml:space="preserve">
          <source>Links with automatic active CSS classes</source>
          <target state="translated">Ссылки с автоматическими активными CSS классами</target>
        </trans-unit>
        <trans-unit id="d219c68101f532de10add2cf42fb9dbeca73d3be" translate="yes" xml:space="preserve">
          <source>Location</source>
          <target state="translated">Location</target>
        </trans-unit>
        <trans-unit id="73577b97f7fb4a49bc08e3c3dacdf5efacd08be5" translate="yes" xml:space="preserve">
          <source>Looking at existing routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0e0d8f508f5f76e2da4beec76db69b72c0d2ce" translate="yes" xml:space="preserve">
          <source>MIT Licensed | Copyright &amp;copy; 2014-present Evan You, Eduardo San Martin Morote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470a58d707562a96dccfe89d233cb39f51ee3b85" translate="yes" xml:space="preserve">
          <source>Make sure to &lt;strong&gt;escape backslashes (&lt;code&gt;\&lt;/code&gt;)&lt;/strong&gt; like we did with &lt;code&gt;\d&lt;/code&gt; (becomes &lt;code&gt;\\d&lt;/code&gt;) to actually pass the backslash character in a string in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92680ca040170e2f3c165102fde3e8bf6487a0ea" translate="yes" xml:space="preserve">
          <source>Matching Priority</source>
          <target state="translated">Приоритет соответствия</target>
        </trans-unit>
        <trans-unit id="6853c98a6f4358bbfed1b3b9c81d308649299b0f" translate="yes" xml:space="preserve">
          <source>Member</source>
          <target state="translated">Member</target>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="a818f7755875219fecec57f0a3928722b60eaee4" translate="yes" xml:space="preserve">
          <source>Migrating from Vue 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbcf4f06b58b82b0ef4f4ebb7b6bfa25b5455c4" translate="yes" xml:space="preserve">
          <source>Missing required &lt;code&gt;params&lt;/code&gt; on named routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3211dfc6706021083577bbc609b0178a57df986b" translate="yes" xml:space="preserve">
          <source>Modular, component-based router configuration</source>
          <target state="translated">Модульная,компонентная конфигурация маршрутизатора</target>
        </trans-unit>
        <trans-unit id="f22823a2fd44dbe72abae48bfb0f4aaa1c23b6b0" translate="yes" xml:space="preserve">
          <source>Most applications will use static routes like &lt;code&gt;/about&lt;/code&gt; and dynamic routes like &lt;code&gt;/users/:userId&lt;/code&gt; like we just saw in &lt;a href=&quot;dynamic-matching&quot;&gt;Dynamic Route Matching&lt;/a&gt;, but Vue Router has much more to offer!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f4b3a2fda0bcb45085fe57c2956f448fc1f4e6" translate="yes" xml:space="preserve">
          <source>Most of Vue Router API has remained unchanged during its rewrite from v3 (for Vue 2) to v4 (for Vue 3) but there are still a few breaking changes that you might encounter while migrating your application. This guide is here to help you understand why these changes happened and how to adapt your application to make it work with Vue Router 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357ce8af641ad6024526b4587590a1b5fd5039a8" translate="yes" xml:space="preserve">
          <source>Moved the &lt;code&gt;base&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c3100c0ee24cb9d9ea4f0877f0905c1b82d9ba" translate="yes" xml:space="preserve">
          <source>Multiple views records (&lt;a href=&quot;../guide/essentials/named-views&quot;&gt;named views&lt;/a&gt;): have a &lt;code&gt;components&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96151afb0ff27ffefdb8a977735f92951b71c0b2" translate="yes" xml:space="preserve">
          <source>Name for the route record. &lt;code&gt;undefined&lt;/code&gt; if none was provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2ba2810eca3e2a2e049e5b700a9bc6f49c2eca" translate="yes" xml:space="preserve">
          <source>Name of the route to check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb81e7caba6e84aa1708562a1114a1e3142596d" translate="yes" xml:space="preserve">
          <source>Name of the route to remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33d0a16416aadff4b68e3238fad1ab174a916bb" translate="yes" xml:space="preserve">
          <source>Named Routes</source>
          <target state="translated">Названные маршруты</target>
        </trans-unit>
        <trans-unit id="4b4baaa726aeae2df5efab33c30dccfc59484a03" translate="yes" xml:space="preserve">
          <source>Named Views</source>
          <target state="translated">Названные виды</target>
        </trans-unit>
        <trans-unit id="914b6a22355623df7b5d899294a80c57435831d7" translate="yes" xml:space="preserve">
          <source>Named children routes with an empty &lt;code&gt;path&lt;/code&gt; no longer appends a slash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d331e04fbf14eebc4764009f0446b5379c6b80" translate="yes" xml:space="preserve">
          <source>Named views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af41b08c1d868960ee0e9d9af1ed763d0fb61bc6" translate="yes" xml:space="preserve">
          <source>Native Node.js</source>
          <target state="translated">Родной узел.</target>
        </trans-unit>
        <trans-unit id="48b4388ba7a705c5499cb14b885f6877cc0f09d6" translate="yes" xml:space="preserve">
          <source>Navigate to a different location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a189408428569f56a01ea8a00d8ad2c20ecd6d8" translate="yes" xml:space="preserve">
          <source>Navigating or resolving to the named route &lt;code&gt;dashboard&lt;/code&gt; will now produce a URL &lt;strong&gt;without a trailing slash&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0314f151ede8c8503a59cfbfc3523b01d34aecf7" translate="yes" xml:space="preserve">
          <source>Navigation Failures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07230c4db479422597919304a18bd14cae18e95e" translate="yes" xml:space="preserve">
          <source>Navigation Guards</source>
          <target state="translated">Навигационная охрана</target>
        </trans-unit>
        <trans-unit id="ad97c58c21ae3ad462c67b621752398d8cf7de88" translate="yes" xml:space="preserve">
          <source>Navigation confirmed.</source>
          <target state="translated">Навигация подтверждена.</target>
        </trans-unit>
        <trans-unit id="36dce255ed2b66c1383cee16a5b56882628ef880" translate="yes" xml:space="preserve">
          <source>Navigation guard applied when entering this record from somewhere else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5f50ce4cf1f31c2f564fe1c7376dae97b5d9e3" translate="yes" xml:space="preserve">
          <source>Navigation guard to add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b963954a8eaddaedd87360c2ae706f15babaccc3" translate="yes" xml:space="preserve">
          <source>Navigation guards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559d530e63bf6d2141aa81f2bea1bf91ee38f7b8" translate="yes" xml:space="preserve">
          <source>Navigation guards in mixins are ignored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f221d368d3114fc49312f46b6d13a34dda2b8f8" translate="yes" xml:space="preserve">
          <source>Navigation is confirmed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaed24547504400177ecf8ccb6c88025b631a06" translate="yes" xml:space="preserve">
          <source>Navigation triggered.</source>
          <target state="translated">Навигация запущена.</target>
        </trans-unit>
        <trans-unit id="ef7405a3aaf9c9d82e8c0e3630b5b9eeb12a3c33" translate="yes" xml:space="preserve">
          <source>NavigationFailure</source>
          <target state="translated">NavigationFailure</target>
        </trans-unit>
        <trans-unit id="a113caeb70c0c9e88c0d5a791cb8c753474c4b31" translate="yes" xml:space="preserve">
          <source>NavigationFailureType</source>
          <target state="translated">NavigationFailureType</target>
        </trans-unit>
        <trans-unit id="398dc7bfc38c99f2eafd2f16e20e708ba8aa355d" translate="yes" xml:space="preserve">
          <source>NavigationGuard</source>
          <target state="translated">NavigationGuard</target>
        </trans-unit>
        <trans-unit id="645c1a609218a4d27634dfa8ea27c89f5f1ce092" translate="yes" xml:space="preserve">
          <source>NavigationHookAfter</source>
          <target state="translated">NavigationHookAfter</target>
        </trans-unit>
        <trans-unit id="0b5ff356281045481c2265d94104931fc97e4610" translate="yes" xml:space="preserve">
          <source>Nested Named Views</source>
          <target state="translated">Вложенные виды</target>
        </trans-unit>
        <trans-unit id="bef32b44309c819256ef91505f3ce46153114806" translate="yes" xml:space="preserve">
          <source>Nested Routes</source>
          <target state="translated">Вложенные маршруты</target>
        </trans-unit>
        <trans-unit id="2f30bbc93aff9a021a6bb7d40bb01c7e1a30b727" translate="yes" xml:space="preserve">
          <source>Nested route/view mapping</source>
          <target state="translated">Вложенное отображение маршрута/просмотра</target>
        </trans-unit>
        <trans-unit id="0acd1e85a404e5891f604d402741f453222fb1cb" translate="yes" xml:space="preserve">
          <source>Nested routes mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f099e38519c7e17d0bfe72f101c6fc1c48253ab" translate="yes" xml:space="preserve">
          <source>Nested routes of the current record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd711a21d476e6fe66700859fd27013606d0d82" translate="yes" xml:space="preserve">
          <source>Netlify</source>
          <target state="translated">Netlify</target>
        </trans-unit>
        <trans-unit id="991811073fa9e43dacc47a3e8d3f151b6f8a5061" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;history&lt;/code&gt; option to replace &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025519ea3f483eb11a3c8608b8a731eee0947b1b" translate="yes" xml:space="preserve">
          <source>New Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb4b21b400ed7bdabab34b9e79d6404c608dbeb" translate="yes" xml:space="preserve">
          <source>New in 2.8.0</source>
          <target state="translated">Новое в 2.8.0</target>
        </trans-unit>
        <trans-unit id="9e9a067b68d4d9013ce433c5f888f696111a4f9f" translate="yes" xml:space="preserve">
          <source>No hardcoded URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a37868af5c11b20e29bb32be6de412ad6ea3aa5" translate="yes" xml:space="preserve">
          <source>Non existent named routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64975cede4ab166943299cfacf29df64b9b5b32e" translate="yes" xml:space="preserve">
          <source>Normalized path of the record. Includes any parent's &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1421b5e69d37af4f223d60869150e8ac86c8dee9" translate="yes" xml:space="preserve">
          <source>Normalized route location. Does not have any &lt;a href=&quot;#routerecordraw&quot;&gt;redirect records&lt;/a&gt;. In navigation guards, &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; are always of this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9428be15ef4072ac82f32f8a16385c5c251696" translate="yes" xml:space="preserve">
          <source>Normalized version of a &lt;a href=&quot;#routerecordraw&quot;&gt;Route Record&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a0e8bd8ba8cfc1de48c1ade52eb80e3b492ce5" translate="yes" xml:space="preserve">
          <source>Not to worry: To fix the issue, all you need to do is add a simple catch-all fallback route to your server. If the URL doesn't match any static assets, it should serve the same &lt;code&gt;index.html&lt;/code&gt; page that your app lives in. Beautiful, again!</source>
          <target state="translated">Не волнуйтесь: чтобы решить эту проблему, все, что вам нужно сделать, это добавить к серверу простой универсальный резервный маршрут. Если URL-адрес не соответствует никаким статическим ресурсам, он должен обслуживать ту же страницу &lt;code&gt;index.html&lt;/code&gt; ,на которой находится ваше приложение. И снова красиво!</target>
        </trans-unit>
        <trans-unit id="f19d6f903ec7fe4c25f4d1bb684621417b47e039" translate="yes" xml:space="preserve">
          <source>Note &lt;code&gt;path&lt;/code&gt; must be provided encoded (e.g. &lt;code&gt;phantom blood&lt;/code&gt; becomes &lt;code&gt;phantom%20blood&lt;/code&gt;) while &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt; must not, they are encoded by the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655de95e7670d92e1754b1a473e042a596c14827" translate="yes" xml:space="preserve">
          <source>Note adding routes does not trigger a new navigation, meaning that the added route will not be displayed unless a new navigation is triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6f6ffe9d4ca8311886ca7f613384b026ef4fc5" translate="yes" xml:space="preserve">
          <source>Note how instead of using regular &lt;code&gt;a&lt;/code&gt; tags, we use a custom component &lt;code&gt;router-link&lt;/code&gt; to create links. This allows Vue Router to change the URL without reloading the page, handle URL generation as well as its encoding. We will see later how to benefit from these features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf231df9872fa9a19e36fceba50ee3b65af6768" translate="yes" xml:space="preserve">
          <source>Note it is possible to achieve a similar behavior by using &lt;a href=&quot;meta&quot;&gt;route meta fields&lt;/a&gt; and &lt;a href=&quot;#global-before-guards&quot;&gt;global navigation guards&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e1c28f71b271e74095cb412d9718f1a1dd3d89" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; are not applied on the route that redirects, only on its target. In the example below, adding a &lt;code&gt;beforeEnter&lt;/code&gt; or &lt;code&gt;beforeLeave&lt;/code&gt; guard to the &lt;code&gt;/a&lt;/code&gt; route would not have any effect.</source>
          <target state="translated">Обратите внимание, что &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guard&lt;/a&gt; не применяется к маршруту, который перенаправляет, а только к его цели. В приведенном ниже примере добавление &lt;code&gt;beforeEnter&lt;/code&gt; или &lt;code&gt;beforeLeave&lt;/code&gt; к маршруту &lt;code&gt;/a&lt;/code&gt; не будет иметь никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="ac5192d7e15a96da5f2f24339f2563c8a5023ea7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;*&lt;/code&gt; technically also marks a parameter as optional but &lt;code&gt;?&lt;/code&gt; parameters cannot be repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e81fa927ae576a7a77d7347aa93d6d3b675c08" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;beforeRouteEnter&lt;/code&gt; is the only guard that supports passing a callback to &lt;code&gt;next&lt;/code&gt;. For &lt;code&gt;beforeRouteUpdate&lt;/code&gt; and &lt;code&gt;beforeRouteLeave&lt;/code&gt;, &lt;code&gt;this&lt;/code&gt; is already available, so passing a callback is unnecessary and therefore &lt;em&gt;not supported&lt;/em&gt;:</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;beforeRouteEnter&lt;/code&gt; - единственный охранник, который поддерживает передачу обратного вызова &lt;code&gt;next&lt;/code&gt; . Для &lt;code&gt;beforeRouteUpdate&lt;/code&gt; и &lt;code&gt;beforeRouteLeave&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt; уже доступно, так что прохождение обратного вызова не требуется , и , следовательно , &lt;em&gt;не поддерживается&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="11937dfe81e47af091a7a29839fce3ca35342c9c" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt; are not applied on the route that redirects, only on its target&lt;/strong&gt;. e.g. In the example below, adding a &lt;code&gt;beforeEnter&lt;/code&gt; guard to the &lt;code&gt;/home&lt;/code&gt; route would not have any effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7545486545368445ac1f8b956c66efa2a2254bf" translate="yes" xml:space="preserve">
          <source>Note that &lt;strong&gt;if you have navigation guards upon the initial navigation&lt;/strong&gt;, you might not want to block the app render until they are resolved unless you are doing Server Side Rendering. In this scenario, not waiting the router to be ready to mount the app would yield the same result as in Vue 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1ae28e911a64fa1c1fa82d09086f2dd4cc59e4" translate="yes" xml:space="preserve">
          <source>Note this will work if &lt;code&gt;path&lt;/code&gt; was &lt;code&gt;/parent/&lt;/code&gt; as the relative location &lt;code&gt;home&lt;/code&gt; to &lt;code&gt;/parent/&lt;/code&gt; is indeed &lt;code&gt;/parent/home&lt;/code&gt; but the relative location of &lt;code&gt;home&lt;/code&gt; to &lt;code&gt;/parent&lt;/code&gt; is &lt;code&gt;/home&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acae5db10be39649ef7b1b8b5e6c79d6bc32c31b" translate="yes" xml:space="preserve">
          <source>Note we still have access to &lt;code&gt;$router&lt;/code&gt; and &lt;code&gt;$route&lt;/code&gt; in templates, so there is no need to return &lt;code&gt;router&lt;/code&gt; or &lt;code&gt;route&lt;/code&gt; inside of &lt;code&gt;setup&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5e955176c936244f35826582ff7f92d57ea138" translate="yes" xml:space="preserve">
          <source>Note you can use &lt;code&gt;Symbol&lt;/code&gt;s for names in routes if you wish to use this function but want to avoid conflicts in names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a01f4b70602dab2d18f8611d2bc76af8c22422" translate="yes" xml:space="preserve">
          <source>Note you can use any name instead of &lt;code&gt;_&lt;/code&gt; for the param. The point is to provide one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66819e4b27a76327ff3f7f1554dfc32762722dc5" translate="yes" xml:space="preserve">
          <source>Nothing needs to change in the route config, just use &lt;code&gt;Foo&lt;/code&gt; as usual:</source>
          <target state="translated">В конфигурации маршрута ничего менять не нужно, просто используйте &lt;code&gt;Foo&lt;/code&gt; как обычно:</target>
        </trans-unit>
        <trans-unit id="b9854b4ee72e20cf46424b31f8fb60496aa9d57a" translate="yes" xml:space="preserve">
          <source>Notice that a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; automatically gets the &lt;code&gt;.router-link-active&lt;/code&gt; class when its target route is matched. You can learn more about it in its &lt;a href=&quot;../api/index#router-link&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; автоматически получает &lt;code&gt;.router-link-active&lt;/code&gt; когда его целевой маршрут совпадает. Вы можете узнать больше об этом в &lt;a href=&quot;../api/index#router-link&quot;&gt;справочнике по API&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40eddaef857ef5cfaedb727b42037014203c4199" translate="yes" xml:space="preserve">
          <source>Now URLs like &lt;code&gt;/user/foo&lt;/code&gt; and &lt;code&gt;/user/bar&lt;/code&gt; will both map to the same route.</source>
          <target state="translated">Теперь URL-адреса, такие как &lt;code&gt;/user/foo&lt;/code&gt; и &lt;code&gt;/user/bar&lt;/code&gt; , будут соответствовать одному и тому же маршруту.</target>
        </trans-unit>
        <trans-unit id="d43ae5f8114af27af15f745b265122296a2214ee" translate="yes" xml:space="preserve">
          <source>Now URLs like &lt;code&gt;/users/johnny&lt;/code&gt; and &lt;code&gt;/users/jolyne&lt;/code&gt; will both map to the same route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c463d638e96afc65424ce9cbbd07841457c3d3" translate="yes" xml:space="preserve">
          <source>Now the menu will close once the navigation is finished but it will also close if the navigation was prevented. We need a way to detect if we actually changed the page we are one or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6ab08cf5a4f5f55b8a12e9df31193335d9975b" translate="yes" xml:space="preserve">
          <source>Now, going to &lt;code&gt;/25&lt;/code&gt; will match &lt;code&gt;/:orderId&lt;/code&gt; while going to anything else will match &lt;code&gt;/:productName&lt;/code&gt;. The order of the &lt;code&gt;routes&lt;/code&gt; array doesn't even matter!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f58022f766261caffba5edc95b9a9f6abe4cafe" translate="yes" xml:space="preserve">
          <source>Object mode</source>
          <target state="translated">Режим объекта</target>
        </trans-unit>
        <trans-unit id="9e57c1fa9b77b0d8fd3557e6984a62308d3665cc" translate="yes" xml:space="preserve">
          <source>On SSR, you need to manually pass the appropriate history:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe6bf860b85b361d427ae111c8df54a68d83e74" translate="yes" xml:space="preserve">
          <source>One consequence of this is that &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; will be active for every route! To force the link into &quot;exact match mode&quot;, use the &lt;code&gt;exact&lt;/code&gt; prop:</source>
          <target state="translated">Одним из следствий этого является то, что &lt;code&gt;&amp;lt;router-link to=&quot;/&quot;&amp;gt;&lt;/code&gt; будет активен для каждого маршрута! Чтобы перевести ссылку в &quot;режим точного совпадения&quot;, используйте опцию &lt;code&gt;exact&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="22cb362145457cd718598c267d42d98d75403097" translate="yes" xml:space="preserve">
          <source>One thing to note when using routes with params is that when the user navigates from &lt;code&gt;/user/foo&lt;/code&gt; to &lt;code&gt;/user/bar&lt;/code&gt;, &lt;strong&gt;the same component instance will be reused&lt;/strong&gt;. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. &lt;strong&gt;However, this also means that the lifecycle hooks of the component will not be called&lt;/strong&gt;.</source>
          <target state="translated">При использовании маршрутов с параметрами следует отметить одну вещь: когда пользователь переходит из &lt;code&gt;/user/foo&lt;/code&gt; в &lt;code&gt;/user/bar&lt;/code&gt; , &lt;strong&gt;тот же экземпляр компонента будет повторно использован&lt;/strong&gt; . Поскольку оба маршрута отображают один и тот же компонент, это более эффективно, чем уничтожение старого экземпляра и последующее создание нового. &lt;strong&gt;Однако это также означает, что перехватчики жизненного цикла компонента не будут вызываться&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="1bbf55373113eb977393f5dd321f35770e23cfdb" translate="yes" xml:space="preserve">
          <source>One thing to note when using routes with params is that when the user navigates from &lt;code&gt;/users/johnny&lt;/code&gt; to &lt;code&gt;/users/jolyne&lt;/code&gt;, &lt;strong&gt;the same component instance will be reused&lt;/strong&gt;. Since both routes render the same component, this is more efficient than destroying the old instance and then creating a new one. &lt;strong&gt;However, this also means that the lifecycle hooks of the component will not be called&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bd7c4c981e70d8a7a07937e2cd9a5d19e4e506" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;path&lt;/code&gt; section is matched, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; aren't taken into account anymore</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb266b541e4b08a278d9159821a983ea3b5932f" translate="yes" xml:space="preserve">
          <source>Optional parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65d279781d1c756a1ffe1e390c23f7864590f08" translate="yes" xml:space="preserve">
          <source>Optional third argument &lt;code&gt;next&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3caa719a1c46af7afb784dedaa641ce946457ef0" translate="yes" xml:space="preserve">
          <source>Options to initialize the router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046793d8826f7ce628a8c0fe40b3cbce54497fb1" translate="yes" xml:space="preserve">
          <source>Or even use a function for dynamic redirecting:</source>
          <target state="translated">Или даже используйте функцию для динамического перенаправления:</target>
        </trans-unit>
        <trans-unit id="3d1f5ce248d4fbbc0d11f219d548dfc5dd5adf41" translate="yes" xml:space="preserve">
          <source>Or, use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;navigation guard&lt;/a&gt; introduced in 2.2:</source>
          <target state="translated">Или используйте &lt;code&gt;beforeRouteUpdate&lt;/code&gt; &lt;a href=&quot;../advanced/navigation-guards&quot;&gt;навигации &lt;/a&gt;beforeRouteUpdate, представленное в 2.2:</target>
        </trans-unit>
        <trans-unit id="31f6f604ef5751678a4e76271ea8f836c84336c2" translate="yes" xml:space="preserve">
          <source>Or, use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt;&lt;a href=&quot;../advanced/navigation-guards&quot;&gt;navigation guard&lt;/a&gt;, which also allows to cancel the navigation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494c0c8a15cd209b328c0aabdbf55374d71cbdb0" translate="yes" xml:space="preserve">
          <source>Original options object passed to create the Router. Readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91249dc20c49d676cce833a9923195f2e2d486ef" translate="yes" xml:space="preserve">
          <source>Other Guides</source>
          <target state="translated">Другие руководства</target>
        </trans-unit>
        <trans-unit id="feb887b2f3c99dc56536e908dd8c13c2e6068810" translate="yes" xml:space="preserve">
          <source>Otherwise there will be an initial transition as if you provided the &lt;code&gt;appear&lt;/code&gt; prop to &lt;code&gt;transition&lt;/code&gt; because the router displays its initial location (nothing) and then displays the first location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f699f295e5ae4ac633cfa18437fed38d028b3fdb" translate="yes" xml:space="preserve">
          <source>Parameter</source>
          <target state="translated">Parameter</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="b4d8e8d1674e7f734cc358fb12f76e2d4b7ca1da" translate="yes" xml:space="preserve">
          <source>Parent Route Record where &lt;code&gt;route&lt;/code&gt; should be appended at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2019c2002b88d1423b00871a4756c80a3a2781e" translate="yes" xml:space="preserve">
          <source>Passing Props to Route Components</source>
          <target state="translated">Проходные реквизиты к компонентам маршрута</target>
        </trans-unit>
        <trans-unit id="1455fd98f6fa17b73d47ef2c5d6a884bebc83fd7" translate="yes" xml:space="preserve">
          <source>Passing content to route components' &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98499c5c8a6f64e0a2f509a8580a20b9e4438e1" translate="yes" xml:space="preserve">
          <source>Path of the record. Should start with &lt;code&gt;/&lt;/code&gt; unless the record is the child of another record. Can define parameters: &lt;code&gt;/users/:id&lt;/code&gt; matches &lt;code&gt;/users/1&lt;/code&gt; as well as &lt;code&gt;/users/posva&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b26aba5cee750beb1314811649192d3f41dcc61" translate="yes" xml:space="preserve">
          <source>Per-Route Guard</source>
          <target state="translated">охрана маршрута</target>
        </trans-unit>
        <trans-unit id="9c95ba720f7490c64c5284e62aabf2337f81bd7a" translate="yes" xml:space="preserve">
          <source>Per-Route Transition</source>
          <target state="translated">линейный переход</target>
        </trans-unit>
        <trans-unit id="c7086f4a06cd82bf20f266327a0bf4a48f3f850c" translate="yes" xml:space="preserve">
          <source>Prevents you from having a typo in the url</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc84978ebebfacb7e5a7426cf2bc186f4e115de6" translate="yes" xml:space="preserve">
          <source>Programmatic</source>
          <target state="translated">Programmatic</target>
        </trans-unit>
        <trans-unit id="6ac41420921db4b82a6fc5a064c1c845ef1ef7bc" translate="yes" xml:space="preserve">
          <source>Programmatic Navigation</source>
          <target state="translated">Программная навигация</target>
        </trans-unit>
        <trans-unit id="44bb5bfefa4ccff63de0aa433945ea87b01b2b12" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL by pushing an entry in the history stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2ee3ed976304543929fa7b0a5365888b10e69a" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL by replacing the current entry in the history stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ea926127d780e977ef91fb29c2e11e32ef8f1a" translate="yes" xml:space="preserve">
          <source>Programmatically navigate to a new URL. See &lt;a href=&quot;../guide/essentials/navigation&quot;&gt;Programmatic Navigation&lt;/a&gt; for more details.</source>
          <target state="translated">Программно перейти к новому URL-адресу. Подробнее см. В разделе &lt;a href=&quot;../guide/essentials/navigation&quot;&gt;Программная навигация&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3bad3c00666eda3f50844fffd5dc27eff3dd96f0" translate="yes" xml:space="preserve">
          <source>Proper encoding for URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8d3baced9c5e7884c8c86724de198f8f80e16a" translate="yes" xml:space="preserve">
          <source>Provide custom query string parse / stringify functions. Overrides the default.</source>
          <target state="translated">Предоставление пользовательских функций разбора строк запроса/строк.Переопределяет значение по умолчанию.</target>
        </trans-unit>
        <trans-unit id="71475c7492f9919f7120fac0c6529aab177da0a1" translate="yes" xml:space="preserve">
          <source>Pushing or resolving a named route without its required params will throw an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d53bf0e3012da7c289e74ca05b9f82b60e56d89" translate="yes" xml:space="preserve">
          <source>Pushing or resolving a non existent named route throws an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d498231c446ebbc705277a601f2f6bdcb9863b" translate="yes" xml:space="preserve">
          <source>Raw route location to resolve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed07d9b64ce0152e500f79bbef89c568b7f1658" translate="yes" xml:space="preserve">
          <source>Raw route locations also support an extra option &lt;code&gt;replace&lt;/code&gt; to call &lt;code&gt;router.replace()&lt;/code&gt; instead of &lt;code&gt;router.push()&lt;/code&gt; in navigation guards. Note this also internally calls &lt;code&gt;router.replace()&lt;/code&gt; even when calling &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f0529aa6c0b6cd2083e3a6368bba819840a7d7" translate="yes" xml:space="preserve">
          <source>Reacting to Params Changes</source>
          <target state="translated">Реагирование на изменения в парамах</target>
        </trans-unit>
        <trans-unit id="526ba9b15d7e0af70c58f07b6eccd992ee1bc4bb" translate="yes" xml:space="preserve">
          <source>Real app UIs are usually composed of components that are nested multiple levels deep. It is also very common that the segments of a URL corresponds to a certain structure of nested components, for example:</source>
          <target state="translated">Реальные приложения UI,как правило,состоят из компонентов,которые вложены несколько уровней глубоко.Также очень часто сегменты URL соответствуют определенной структуре вложенных компонентов,например:</target>
        </trans-unit>
        <trans-unit id="58cfcdca5ed542240131e60e7a5af5e83f61e786" translate="yes" xml:space="preserve">
          <source>Redirect</source>
          <target state="translated">Redirect</target>
        </trans-unit>
        <trans-unit id="872a53613a6cd7a171894de65cd005be5a189f12" translate="yes" xml:space="preserve">
          <source>Redirect and Alias</source>
          <target state="translated">Переориентация и псевдоним</target>
        </trans-unit>
        <trans-unit id="c98b4d3308a45834526ce449202848f4eba869a6" translate="yes" xml:space="preserve">
          <source>Redirect records: cannot have &lt;code&gt;component&lt;/code&gt; or &lt;code&gt;components&lt;/code&gt; option because a redirect record is never reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cef8495ed3efecc490bc4d66c9957eb645c538" translate="yes" xml:space="preserve">
          <source>Redirecting is also done in the &lt;code&gt;routes&lt;/code&gt; configuration. To redirect from &lt;code&gt;/a&lt;/code&gt; to &lt;code&gt;/b&lt;/code&gt;:</source>
          <target state="translated">Перенаправление также выполняется в конфигурации &lt;code&gt;routes&lt;/code&gt; . Чтобы перенаправить из &lt;code&gt;/a&lt;/code&gt; в &lt;code&gt;/b&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5e03acae55c659588b259583338e24a88915601b" translate="yes" xml:space="preserve">
          <source>Register a callback which will be called when an error is caught during a route navigation. Note for an error to be called, it must be one of the following scenarios:</source>
          <target state="translated">Зарегистрируйте обратный вызов,который будет вызван при обнаружении ошибки во время навигации по маршруту.Обратите внимание,что для вызова ошибки это должен быть один из следующих сценариев:</target>
        </trans-unit>
        <trans-unit id="6d0bced16bbab5a0c6381837cabc90ac09261c39" translate="yes" xml:space="preserve">
          <source>Regular params will only match characters in between url fragments, separated by &lt;code&gt;/&lt;/code&gt;. If we want to match &lt;strong&gt;anything&lt;/strong&gt;, we can use a custom &lt;em&gt;param&lt;/em&gt; regexp by adding the regexp inside parentheses right after the &lt;em&gt;param&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44643ea5c5697be4b30047afe003b8f7dc43c4d9" translate="yes" xml:space="preserve">
          <source>Regular params will only match characters in between url fragments, separated by &lt;code&gt;/&lt;/code&gt;. If we want to match &lt;strong&gt;anything&lt;/strong&gt;, we can use the asterisk (&lt;code&gt;*&lt;/code&gt;):</source>
          <target state="translated">Обычные параметры будут соответствовать только символам между фрагментами URL, разделенным &lt;code&gt;/&lt;/code&gt; . Если мы хотим сопоставить &lt;strong&gt;что-либо&lt;/strong&gt; , мы можем использовать звездочку ( &lt;code&gt;*&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="cf4c4091520b98eb1b1999bbb53cf35fd417385f" translate="yes" xml:space="preserve">
          <source>Relative redirecting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb1e457692275b0cbe497b5cdfa463b963b481c" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;params or query changes won't trigger enter/leave navigation guards&lt;/strong&gt;. You can either &lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;watch the &lt;code&gt;$route&lt;/code&gt; object&lt;/a&gt; to react to those changes, or use the &lt;code&gt;beforeRouteUpdate&lt;/code&gt; in-component guard.</source>
          <target state="translated">Помните, что изменения &lt;strong&gt;параметров или запросов не активируют средства навигации входа / выхода&lt;/strong&gt; . Вы можете &lt;a href=&quot;../essentials/dynamic-matching#reacting-to-params-changes&quot;&gt;наблюдать за тем, как объект &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt; отреагирует на эти изменения, или использовать &lt;code&gt;beforeRouteUpdate&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="191829e7b6f10f5436cea9c91b601a048cbca439" translate="yes" xml:space="preserve">
          <source>Remember to pass the &lt;code&gt;custom&lt;/code&gt; option to &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to prevent it from wrapping its content inside of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939ae36bbcc73d32b93b93bbc6561786d94895d0" translate="yes" xml:space="preserve">
          <source>Remember you can &lt;code&gt;await router.replace()&lt;/code&gt; if you need to wait for the new route to be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e00a015eeabefea1b90ea1fac41c07d1489ed07" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;append&lt;/code&gt; prop in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3557f48d66187e97b27a8a248133a96fb77304c9" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; props in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61822a9b9ff981deb989aabf9b1bfbfd30738825" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;parent&lt;/code&gt; from route locations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152d22004c30b3a16f5ab07a204df37eacde4847" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;pathToRegexpOptions&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a4b4a1c70861aa9a5fcd4b6caa6820e4178a75" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.app&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1f47ac88e5282e588aef4e4a2ff6947a67692a" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.getMatchedComponents()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080dd48e0b36ddc9454a7f3f2cd144064137993c" translate="yes" xml:space="preserve">
          <source>Removal of &lt;code&gt;router.match&lt;/code&gt; and changes to &lt;code&gt;router.resolve&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e651d240bbe84a8df3ccf38f792ed08f46e2a15" translate="yes" xml:space="preserve">
          <source>Removal of the &lt;code&gt;exact&lt;/code&gt; prop in &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c052673cfec20fa8525107747967c0ae749968cf" translate="yes" xml:space="preserve">
          <source>Removal of unnamed parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f73fb1b2b80f9842b6f4b49a1e2a2ea2861e96" translate="yes" xml:space="preserve">
          <source>Remove an existing route by its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9f34adc79c0356311276378466a5a20effada5" translate="yes" xml:space="preserve">
          <source>Removed &lt;code&gt;*&lt;/code&gt; (star or catch all) routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd100b0e6848250c3dd868f0d275ea97db0bb3a4" translate="yes" xml:space="preserve">
          <source>Removing routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd4afc569f64890c7549f807d82e970a947910f" translate="yes" xml:space="preserve">
          <source>Renders &lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;&amp;lt;span&amp;gt;/home&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ef6d589785a493cc5ebbee8f1e59fd279e6918" translate="yes" xml:space="preserve">
          <source>Renders &lt;code&gt;&amp;lt;a href=&quot;/home&quot;&amp;gt;/home&amp;lt;/a&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a44f4dc77212babb33a99c2238d06f1dfc2f695" translate="yes" xml:space="preserve">
          <source>Repeatable params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10347b84122f6c923e90b9fdf20fd25fe47636f" translate="yes" xml:space="preserve">
          <source>Replace current location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1465ea43f024203be3a258e57b095e0b2762e2" translate="yes" xml:space="preserve">
          <source>Replaced &lt;code&gt;onReady&lt;/code&gt; with &lt;code&gt;isReady&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88429579c754b2e4d3683288db9f7a924c0974c7" translate="yes" xml:space="preserve">
          <source>Resolve async route components.</source>
          <target state="translated">Разрешите компоненты асинхронного маршрута.</target>
        </trans-unit>
        <trans-unit id="65d0435bc7be76e6e4c3954b758cdcd778d44380" translate="yes" xml:space="preserve">
          <source>Resolved &lt;a href=&quot;#routelocationraw&quot;&gt;RouteLocationRaw&lt;/a&gt; that can contain &lt;a href=&quot;#routerecordraw&quot;&gt;redirect records&lt;/a&gt;. Apart from that it has the same properties as &lt;a href=&quot;#routelocationnormalized&quot;&gt;RouteLocationNormalized&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78584839e5838f29b10c37405eaf8a6ac7c76fe" translate="yes" xml:space="preserve">
          <source>Returning the &lt;code&gt;savedPosition&lt;/code&gt; will result in a native-like behavior when navigating with back/forward buttons:</source>
          <target state="translated">Возврат &lt;code&gt;savedPosition&lt;/code&gt; приведет к поведению, аналогичному собственному при навигации с помощью кнопок назад / вперед:</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="387c217682995e7b70e87fa357eab163296205aa" translate="yes" xml:space="preserve">
          <source>Returns a Promise that resolves when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route. If the initial navigation already happened, the promise resolves immediately.This is useful in server-side rendering to ensure consistent output on both the server and the client. Note that on server side, you need to manually push the initial location while on client side, the router automatically picks it up from the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3ad3cf949ec4b3e1af61f8f3065866b05512ce" translate="yes" xml:space="preserve">
          <source>Returns an Array of the components (definition/constructor, not instances) matched by the provided location or the current route. This is mostly used during server-side rendering to perform data prefetching.</source>
          <target state="translated">Возвращает массив компонентов (определение/конструктор,а не экземпляры),совпадающий с предоставленным местоположением или текущим маршрутом.В основном используется во время серверного рендеринга для выполнения предварительной выборки данных.</target>
        </trans-unit>
        <trans-unit id="d7da8ed6e862bf9efd3e9f62643a040e42e8b759" translate="yes" xml:space="preserve">
          <source>Returns everything exposed by the &lt;a href=&quot;#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78019b4c75245ea7e219b310d9faaf3ed58eefb1" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#routelocation&quot;&gt;normalized version&lt;/a&gt; of a &lt;a href=&quot;#routelocationraw&quot;&gt;route location&lt;/a&gt;. Also includes an &lt;code&gt;href&lt;/code&gt; property that includes any existing &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c518b782bcd9df8b0339c6f2427a4b47cc60c6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;#router-properties&quot;&gt;router&lt;/a&gt; instance. Equivalent to using &lt;code&gt;$router&lt;/code&gt; inside templates. Must be called inside of &lt;code&gt;setup()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a36f25b1ebb3aeb1b7dc08727359ec60ea60ee5" translate="yes" xml:space="preserve">
          <source>Returns the current route location. Equivalent to using &lt;code&gt;$route&lt;/code&gt; inside templates. Must be called inside of &lt;code&gt;setup()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f96c7a98ceba257c7a2cba704c62f75cb87b83" translate="yes" xml:space="preserve">
          <source>Reverse URL resolving. Given location in form same as used in &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Разрешение обратного URL. Данное местоположение по форме такое же, как в &lt;code&gt;&amp;lt;router-link/&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4999528efe0f94f8f66b1dc05aad8ebaaae7b2be" translate="yes" xml:space="preserve">
          <source>Route</source>
          <target state="translated">Route</target>
        </trans-unit>
        <trans-unit id="f178d9cbdaadbfcdce35cc4e0b16c043f79ef6fd" translate="yes" xml:space="preserve">
          <source>Route Meta Fields</source>
          <target state="translated">Маршрутные метаполя</target>
        </trans-unit>
        <trans-unit id="efaaab5dc398bef87cbcd2fcea3d10d70d8bbd86" translate="yes" xml:space="preserve">
          <source>Route Object Properties</source>
          <target state="translated">Свойства объекта маршрута</target>
        </trans-unit>
        <trans-unit id="ffb101fa1d84f7d4486a4f524c86bd6a14fe62dd" translate="yes" xml:space="preserve">
          <source>Route Record to add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbede324d9a949b9cb463db8af682afac0eb4ae9" translate="yes" xml:space="preserve">
          <source>Route location to navigate to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf616b4316f6a7792099bbd813bb6efa1d22e76" translate="yes" xml:space="preserve">
          <source>Route location we were initially trying to access before ending up on the current location when a &lt;code&gt;redirect&lt;/code&gt; option was found or a navigation guard called &lt;code&gt;next()&lt;/code&gt; with a route location. &lt;code&gt;undefined&lt;/code&gt; if there was no redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16df124e1276a966a95a8099bf00120d8c8b591d" translate="yes" xml:space="preserve">
          <source>Route location we were navigating from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf656900ea53d89bdc87bfa05a3e483ab4da8b0" translate="yes" xml:space="preserve">
          <source>Route location we were navigating to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf24b2ac491ab4f0861f5f876118c8447caa002" translate="yes" xml:space="preserve">
          <source>Route params, query, wildcards</source>
          <target state="translated">Параметры маршрута,запрос,подстановочные знаки</target>
        </trans-unit>
        <trans-unit id="ff676ab351c959b6125a968a740a38d21ccb6b3b" translate="yes" xml:space="preserve">
          <source>Route record that can be provided by the user when adding routes via the &lt;a href=&quot;#routeroptions&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; or via &lt;a href=&quot;#addroutes&quot;&gt;&lt;code&gt;router.addRoutes()&lt;/code&gt;&lt;/a&gt;. There are three different kind of route records:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1effcfd004511edf487558b241065fd6c6c439" translate="yes" xml:space="preserve">
          <source>Route-Based Dynamic Transition</source>
          <target state="translated">Динамический переход на основе маршрута</target>
        </trans-unit>
        <trans-unit id="1e4aaf24e8374f5c015dd2ca246a01cf0fc99c22" translate="yes" xml:space="preserve">
          <source>RouteConfig</source>
          <target state="translated">RouteConfig</target>
        </trans-unit>
        <trans-unit id="02d8d17717011d917d90ff83e4a0b3c2209dc327" translate="yes" xml:space="preserve">
          <source>RouteLocation</source>
          <target state="translated">RouteLocation</target>
        </trans-unit>
        <trans-unit id="ea64e8b38c328b9870134a808acc902fa90351ec" translate="yes" xml:space="preserve">
          <source>RouteLocationNormalized</source>
          <target state="translated">RouteLocationNormalized</target>
        </trans-unit>
        <trans-unit id="3284cd4cb1a70c5886036bfb9c2dc4062f0d78c4" translate="yes" xml:space="preserve">
          <source>RouteLocationRaw</source>
          <target state="translated">RouteLocationRaw</target>
        </trans-unit>
        <trans-unit id="91de9466d1ac490af74dc2d9271acabd0bf955e9" translate="yes" xml:space="preserve">
          <source>RouteRecordNormalized</source>
          <target state="translated">RouteRecordNormalized</target>
        </trans-unit>
        <trans-unit id="078dc03920878fc11553f544cdff8a93bfb9dba8" translate="yes" xml:space="preserve">
          <source>RouteRecordRaw</source>
          <target state="translated">RouteRecordRaw</target>
        </trans-unit>
        <trans-unit id="61c1d27f7171536b1ecc5df8e1f3d8c5c9fefc7a" translate="yes" xml:space="preserve">
          <source>Router Construction Options</source>
          <target state="translated">Варианты построения маршрутизатора</target>
        </trans-unit>
        <trans-unit id="2e1838554fec8632f2e27e2232f0a9c553143110" translate="yes" xml:space="preserve">
          <source>Router Instance Methods</source>
          <target state="translated">Методы маршрутизатора</target>
        </trans-unit>
        <trans-unit id="e7f39db9665e9e7b15d490cea293333b9ca9f2fb" translate="yes" xml:space="preserve">
          <source>Router Instance Properties</source>
          <target state="translated">Свойства маршрутизатора</target>
        </trans-unit>
        <trans-unit id="58fd0090c316b7228ec0a56794a878d9bcc74259" translate="yes" xml:space="preserve">
          <source>Router Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1faf89e3b623e1a5eaac56215988d24c34c25dac" translate="yes" xml:space="preserve">
          <source>Router Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af276ca463048ad6a52d6368324c363f6c636c56" translate="yes" xml:space="preserve">
          <source>RouterLinkOptions</source>
          <target state="translated">RouterLinkOptions</target>
        </trans-unit>
        <trans-unit id="d8e23234343e4a265d4734b56d771102be709c73" translate="yes" xml:space="preserve">
          <source>RouterOptions</source>
          <target state="translated">RouterOptions</target>
        </trans-unit>
        <trans-unit id="833b49319798dd3229365eff801afcd66c753ef8" translate="yes" xml:space="preserve">
          <source>RouterOptions.base</source>
          <target state="translated">RouterOptions.base</target>
        </trans-unit>
        <trans-unit id="5c94ab4afd451a6c75be941ba1a332f700c7b271" translate="yes" xml:space="preserve">
          <source>RouterOptions.fallback</source>
          <target state="translated">RouterOptions.fallback</target>
        </trans-unit>
        <trans-unit id="a6a71a3c615b71fa18dfabe16958efe8a954be43" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkActiveClass</source>
          <target state="translated">RouterOptions.linkActiveClass</target>
        </trans-unit>
        <trans-unit id="a3b414a25a718d66edd0a60b09fe7e8b14feeced" translate="yes" xml:space="preserve">
          <source>RouterOptions.linkExactActiveClass</source>
          <target state="translated">RouterOptions.linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="b1f3441c2a652d1c9f341126405e100b126d5dda" translate="yes" xml:space="preserve">
          <source>RouterOptions.mode</source>
          <target state="translated">RouterOptions.mode</target>
        </trans-unit>
        <trans-unit id="02a0c6b6ad7ff83236c43f2b27e906e5d1da56b2" translate="yes" xml:space="preserve">
          <source>RouterOptions.parseQuery / stringifyQuery</source>
          <target state="translated">RouterOptions.parseQuery/stringifyQuery</target>
        </trans-unit>
        <trans-unit id="ed78fca5da829ceec546e652b1cb232072966088" translate="yes" xml:space="preserve">
          <source>RouterOptions.routes</source>
          <target state="translated">RouterOptions.routes</target>
        </trans-unit>
        <trans-unit id="2c66f8accea4c1855450a7c83268642fa0656f71" translate="yes" xml:space="preserve">
          <source>RouterOptions.scrollBehavior</source>
          <target state="translated">RouterOptions.scrollBehavior</target>
        </trans-unit>
        <trans-unit id="ccb6ce111ea1ffaae38be4e379a24260845a4cd3" translate="yes" xml:space="preserve">
          <source>Routes are now active based on the route records they represent instead of the generated route location objects and their &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt;, and &lt;code&gt;hash&lt;/code&gt; properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558852da778f521dc276064269f9e710ae055025" translate="yes" xml:space="preserve">
          <source>Routes' Matching Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d66d7d1ff0c6a202bf1133bd5ca283b06c675b" translate="yes" xml:space="preserve">
          <source>START_LOCATION</source>
          <target state="translated">START_LOCATION</target>
        </trans-unit>
        <trans-unit id="e0596a1adc9bfd16283229a08fe714c7f0e636b8" translate="yes" xml:space="preserve">
          <source>Scroll Behavior</source>
          <target state="translated">Поведение свитка</target>
        </trans-unit>
        <trans-unit id="71d0912e026dc7a009be1e6e16b6c856427233a5" translate="yes" xml:space="preserve">
          <source>Second, in webpack 2, we can use the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;dynamic import&lt;/a&gt; syntax to indicate a code-split point:</source>
          <target state="translated">Во-вторых, в webpack 2 мы можем использовать синтаксис &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;динамического импорта&lt;/a&gt; для указания точки разделения кода:</target>
        </trans-unit>
        <trans-unit id="910d9257f1da3a588d7c110055be4d2d58d59a55" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;In Component Guards&lt;/a&gt;.</source>
          <target state="translated">См. Раздел &amp;laquo; &lt;a href=&quot;../guide/advanced/navigation-guards#in-component-guards&quot;&gt;Защита компонентов&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0cdbee57c9d61aea21d3f61df384d5d286dbae09" translate="yes" xml:space="preserve">
          <source>See full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Смотрите полный пример &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/transitions/app.js&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3ca3a2a2118f0a9ed97c6e2439ac18302ef8a7ce" translate="yes" xml:space="preserve">
          <source>See more in the &lt;a href=&quot;route-matching-syntax#repeatable-params&quot;&gt;repeated params&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c263edad49b6f4c271aeaa49c2421987156874d" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;append&lt;/code&gt; prop always appends the relative path to the current path. For example, assuming we are navigating from &lt;code&gt;/a&lt;/code&gt; to a relative link &lt;code&gt;b&lt;/code&gt;, without &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/b&lt;/code&gt;, but with &lt;code&gt;append&lt;/code&gt; we will end up at &lt;code&gt;/a/b&lt;/code&gt;.</source>
          <target state="translated">Настройка &lt;code&gt;append&lt;/code&gt; prop всегда добавляет относительный путь к текущему пути. Например, предполагая, что мы переходим от &lt;code&gt;/a&lt;/code&gt; к относительной ссылке &lt;code&gt;b&lt;/code&gt; , без &lt;code&gt;append&lt;/code&gt; мы закончим в &lt;code&gt;/b&lt;/code&gt; , но с &lt;code&gt;append&lt;/code&gt; мы закончим в &lt;code&gt;/a/b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2df78320bc495352bdf39a1085d854418e6cac2" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;replace&lt;/code&gt; prop will call &lt;code&gt;router.replace()&lt;/code&gt; instead of &lt;code&gt;router.push()&lt;/code&gt; when clicked, so the navigation will not leave a history record.</source>
          <target state="translated">Установка &lt;code&gt;replace&lt;/code&gt; prop будет вызывать &lt;code&gt;router.replace()&lt;/code&gt; вместо &lt;code&gt;router.push()&lt;/code&gt; при нажатии, поэтому навигация не будет оставлять запись в истории.</target>
        </trans-unit>
        <trans-unit id="46a94dbbd4790f8205b0a817760e72fa622a2361" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;false&lt;/code&gt; essentially makes every &lt;code&gt;router-link&lt;/code&gt; navigation a full page refresh in IE9. This is useful when the app is server-rendered and needs to work in IE9, because a hash mode URL does not work with SSR.</source>
          <target state="translated">Установка этого значения в &lt;code&gt;false&lt;/code&gt; ,по сути, делает каждую навигацию по &lt;code&gt;router-link&lt;/code&gt; полностью обновленной в IE9. Это полезно, когда приложение отображается на сервере и должно работать в IE9, поскольку URL-адрес режима хеширования не работает с SSR.</target>
        </trans-unit>
        <trans-unit id="671048db110a3469e52979ba873e1f31f52b0adc" translate="yes" xml:space="preserve">
          <source>Signature:</source>
          <target state="translated">Signature:</target>
        </trans-unit>
        <trans-unit id="0a009f19aef724da25b633c4e8ec74c1e6c57a83" translate="yes" xml:space="preserve">
          <source>Signatures:</source>
          <target state="translated">Signatures:</target>
        </trans-unit>
        <trans-unit id="57ec4ee133c6b7e2e92cdcc7b421aa3c5c49414e" translate="yes" xml:space="preserve">
          <source>Silver Sponsors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073f10cdc3fead341331cedecaaf7b0230d8d4c6" translate="yes" xml:space="preserve">
          <source>Similarly, if you were calling &lt;code&gt;history.replaceState()&lt;/code&gt; without preserving the current state, you will need to pass the current &lt;code&gt;history.state&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b309129b0928ab5637f1329cc9b1622c1899eda7" translate="yes" xml:space="preserve">
          <source>Since it's just a component, it works with &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt;. When using the both together, make sure to use &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; inside:</source>
          <target state="translated">Поскольку это всего лишь компонент, он работает с &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; . При использовании обоих вместе, убедитесь, что используете &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; внутри:</target>
        </trans-unit>
        <trans-unit id="67617841112e8fc88adea7ca66ce82c7f040a26e" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; is essentially a dynamic component, we can apply transition effects to it the same way using the &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">Поскольку &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; по сути является динамическим компонентом, мы можем применить к нему эффекты перехода таким же образом, используя компонент &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0db2742714e1363dd47be494ce93aede5bdae375" translate="yes" xml:space="preserve">
          <source>Since the prop &lt;code&gt;to&lt;/code&gt; accepts the same kind of object as &lt;code&gt;router.push&lt;/code&gt;, the exact same rules apply to both of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2eab83868cbb2018b1a874390f93826579be7a0" translate="yes" xml:space="preserve">
          <source>Single views records: have a &lt;code&gt;component&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99967819e7c344898b7f5cd24d01b88f4a531300" translate="yes" xml:space="preserve">
          <source>So how do we access this &lt;code&gt;meta&lt;/code&gt; field?</source>
          <target state="translated">Так как же нам получить доступ к этому &lt;code&gt;meta&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="b1af8852b06cff8674f6940a2035acf95c4141bc" translate="yes" xml:space="preserve">
          <source>Some application's UIs are composed of components that are nested multiple levels deep. In this case, it is very common that the segments of a URL corresponds to a certain structure of nested components, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e072c45a56a56cbf99ba402fb4ee27bd1462940d" translate="yes" xml:space="preserve">
          <source>Some of new features to keep an eye on in Vue Router 4 include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47509bf5c58ce57a092a288e1bf085394866b2a" translate="yes" xml:space="preserve">
          <source>Sometimes it is more convenient to identify a route with a name, especially when linking to a route or performing navigations. You can give a route a name in the &lt;code&gt;routes&lt;/code&gt; options while creating the Router instance:</source>
          <target state="translated">Иногда удобнее идентифицировать маршрут по имени, особенно при привязке к маршруту или выполнении навигации. Вы можете дать маршруту имя в параметрах &lt;code&gt;routes&lt;/code&gt; при создании экземпляра маршрутизатора:</target>
        </trans-unit>
        <trans-unit id="a6e252d9e94a641f7201be6ee56e2627c06169f7" translate="yes" xml:space="preserve">
          <source>Sometimes the same URL may be matched by multiple routes. In such a case the matching priority is determined by the order of route definition: the earlier a route is defined, the higher priority it gets.</source>
          <target state="translated">Иногда один и тот же URL может совпадать с несколькими маршрутами.В таком случае приоритет совпадения определяется порядком определения маршрута:чем раньше будет определен маршрут,тем выше будет его приоритет.</target>
        </trans-unit>
        <trans-unit id="881f4003a927ca08b4071cbb3a8888176c11bc1e" translate="yes" xml:space="preserve">
          <source>Sometimes we may want the active class to be applied to an outer element rather than the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element itself, in that case, you can wrap that element inside a &lt;code&gt;router-link&lt;/code&gt; and use the &lt;code&gt;v-slot&lt;/code&gt; properties to create your link:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c78fa18c05228aa3988fe7758e8dfdfee27b6f" translate="yes" xml:space="preserve">
          <source>Sometimes we may want the active class to be applied to an outer element rather than the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag itself, in that case, you can wrap that element inside a &lt;code&gt;router-link&lt;/code&gt; and use the &lt;code&gt;v-slot&lt;/code&gt; properties to create your link:</source>
          <target state="translated">Иногда нам может потребоваться применить активный класс к внешнему элементу, а не к самому тегу &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; , в этом случае вы можете обернуть этот элемент внутри &lt;code&gt;router-link&lt;/code&gt; и использовать свойства &lt;code&gt;v-slot&lt;/code&gt; для создания ссылки:</target>
        </trans-unit>
        <trans-unit id="332b325341fba64b850ebd8f2eeaa0d19560cae7" translate="yes" xml:space="preserve">
          <source>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;named chunks&lt;/a&gt; by providing a chunk name using a special comment syntax (requires webpack &amp;gt; 2.4):</source>
          <target state="translated">Иногда нам может понадобиться сгруппировать все компоненты, вложенные в один и тот же маршрут, в один и тот же асинхронный блок. Для этого нам нужно использовать &lt;a href=&quot;https://webpack.js.org/guides/code-splitting-async/#chunk-names&quot;&gt;именованные блоки&lt;/a&gt; , указав имя блока с использованием специального синтаксиса комментариев (требуется webpack&amp;gt; 2.4):</target>
        </trans-unit>
        <trans-unit id="4d96d49fb7fa8a2fcf329655a48fbcd890920961" translate="yes" xml:space="preserve">
          <source>Sometimes we may want to group all the components nested under the same route into the same async chunk. To achieve that we need to use &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/#dynamic-imports&quot;&gt;named chunks&lt;/a&gt; by providing a chunk name using a special comment syntax (requires webpack &amp;gt; 2.4):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602969d71302e6b49ad43c1a43ec02daaf9cf2af" translate="yes" xml:space="preserve">
          <source>Sometimes we need to wait a bit before scrolling in the page. For example, when dealing with transitions, we want to wait for the transition to finish before scrolling. To do this you can return a Promise that returns the desired position descriptor. Here is an example where we wait 500ms before scrolling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2711d8ebe3a7a6248cdb5416c095b9588b27d5" translate="yes" xml:space="preserve">
          <source>Sometimes we want &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; to render as another tag, e.g &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Then we can use &lt;code&gt;tag&lt;/code&gt; prop to specify which tag to render to, and it will still listen to click events for navigation.</source>
          <target state="translated">Иногда мы хотим, чтобы &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; отображался как другой тег, например, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; . Затем мы можем использовать свойство &lt;code&gt;tag&lt;/code&gt; чтобы указать, какой тег нужно отображать, и он все равно будет прослушивать события щелчка для навигации.</target>
        </trans-unit>
        <trans-unit id="559e629883f73acac255b3a777bfc5ed36572151" translate="yes" xml:space="preserve">
          <source>Sometimes you need to display multiple views at the same time instead of nesting them, e.g. creating a layout with a &lt;code&gt;sidebar&lt;/code&gt; view and a &lt;code&gt;main&lt;/code&gt; view. This is where named views come in handy. Instead of having one single outlet in your view, you can have multiple and give each of them a name. A &lt;code&gt;router-view&lt;/code&gt; without a name will be given &lt;code&gt;default&lt;/code&gt; as its name.</source>
          <target state="translated">Иногда вам нужно отображать несколько представлений одновременно, а не вкладывать их, например, создавая макет с видом &lt;code&gt;sidebar&lt;/code&gt; и &lt;code&gt;main&lt;/code&gt; видом. Вот здесь и пригодятся именованные виды. Вместо того, чтобы иметь в вашем представлении одну-единственную розетку, вы можете иметь несколько и дать каждой из них имя. &lt;code&gt;router-view&lt;/code&gt; без имени будет дан по &lt;code&gt;default&lt;/code&gt; в качестве его имени.</target>
        </trans-unit>
        <trans-unit id="80c22a281f2411a826028def672b188a9db5ba37" translate="yes" xml:space="preserve">
          <source>Sometimes you need to fetch data from the server when a route is activated. For example, before rendering a user profile, you need to fetch the user's data from the server. We can achieve this in two different ways:</source>
          <target state="translated">Иногда вам нужно получить данные с сервера,когда маршрут активирован.Например,перед отрисовкой профиля пользователя необходимо получить данные пользователя с сервера.Этого можно добиться двумя разными способами:</target>
        </trans-unit>
        <trans-unit id="dbad2511bc05617aaa24b446bac3ec4968f6315e" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to attach arbitrary information to routes like transition names, who can access the route, etc. This can be achieved through the &lt;code&gt;meta&lt;/code&gt; property which accepts an object of properties and can be accessed on the route location and navigation guards. You can define &lt;code&gt;meta&lt;/code&gt; properties like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05477b7e20cf8c615743b4d1d92c7caf91c8dcd1" translate="yes" xml:space="preserve">
          <source>Specify the event(s) that can trigger the link navigation.</source>
          <target state="translated">Укажите событие (события),которое может вызвать навигацию по ссылке.</target>
        </trans-unit>
        <trans-unit id="068a22f61f3db94269ab675efff014f3fb75087b" translate="yes" xml:space="preserve">
          <source>Technically, both are valid choices - it ultimately depends on the user experience you are aiming for.</source>
          <target state="translated">Технически,и то,и другое является правильным выбором-в конечном счете,это зависит от опыта пользователя,к которому вы стремитесь.</target>
        </trans-unit>
        <trans-unit id="687d29fbc88ced0c0b4cc5e85f3cdff8a6d730b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index#mode&quot;&gt;mode&lt;/a&gt; the router is using.</source>
          <target state="translated">&lt;a href=&quot;index#mode&quot;&gt;Режим&lt;/a&gt; маршрутизатор использует.</target>
        </trans-unit>
        <trans-unit id="04e697c4c0982279fe937992c14787c25b1f00ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; component is a functional component that renders the matched component for the given path. Components rendered in &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; can also contain its own &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;, which will render components for nested paths.</source>
          <target state="translated">Компонент &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; - это функциональный компонент, который отображает согласованный компонент для заданного пути. Компоненты, отображаемые в &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; , также могут содержать собственный &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; , который будет отображать компоненты для вложенных путей.</target>
        </trans-unit>
        <trans-unit id="a8cd8048165dbdfdbaf97306eb178bd73657686d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; here is a top-level &lt;code&gt;router-view&lt;/code&gt;. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. For example, if we add one inside the &lt;code&gt;User&lt;/code&gt; component's template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08608ef6a2b61ff5e3d12ea1a2a5973072989475" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; here is a top-level outlet. It renders the component matched by a top level route. Similarly, a rendered component can also contain its own, nested &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. For example, if we add one inside the &lt;code&gt;User&lt;/code&gt; component's template:</source>
          <target state="translated">&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; здесь выходное отверстие верхнего уровня. Он отображает компонент, соответствующий маршруту верхнего уровня. Точно так же визуализированный компонент может также содержать свой собственный вложенный &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; . Например, если мы добавим его в шаблон компонента &lt;code&gt;User&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f1f5eb58ebb5f1684f4b310363e94f6347277589" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; section for &lt;code&gt;UserSettings&lt;/code&gt; component in the above layout would look something like this:</source>
          <target state="translated">Раздел &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; для компонента &lt;code&gt;UserSettings&lt;/code&gt; в приведенном выше макете будет выглядеть примерно так:</target>
        </trans-unit>
        <trans-unit id="f5efb9ff1c8f67f47685d3f76d3eb9df07a21bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;append&lt;/code&gt; prop has been removed from &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. You can manually concatenate the value to an existing &lt;code&gt;path&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016c125eb583531d9538cad319f8a92f4f2039e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base&lt;/code&gt; option is now passed as the first argument to &lt;code&gt;createWebHistory&lt;/code&gt; (and other histories):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffac73304a3247ab71d5acf0d0089b4643469ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard does &lt;strong&gt;NOT&lt;/strong&gt; have access to &lt;code&gt;this&lt;/code&gt;, because the guard is called before the navigation is confirmed, thus the new entering component has not even been created yet.</source>
          <target state="translated">&lt;code&gt;beforeRouteEnter&lt;/code&gt; защитный кожух не &lt;strong&gt;НЕ&lt;/strong&gt; имеют доступ к &lt;code&gt;this&lt;/code&gt; , так как охранник вызывается до навигации подтверждается, что новый компонент ввод даже не был создан.</target>
        </trans-unit>
        <trans-unit id="ae08a38e49be7d56942260c667f2a8e08b4e567a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;component&lt;/code&gt; (and &lt;code&gt;components&lt;/code&gt;) option accepts a function that returns a Promise of a component and Vue Router &lt;strong&gt;will only fetch it when entering the page for the first time&lt;/strong&gt;, then use the cached version. Which means you can also have more complex functions as long as they return a Promise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3503154108990837b76599d594a8bbb066e5f585" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exact&lt;/code&gt; prop has been removed because the caveat it was fixing is no longer present so you should be able to safely remove it. There are however two things you should be aware of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfa5993acfcae98efc1bbe4094a09c4ebfbf321" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;history&lt;/code&gt; option when creating the router instance allows us to choose among different history modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bfbd789f64ac906a59c09f45770589f54ff920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode: 'history'&lt;/code&gt; option has been replaced with a more flexible one named &lt;code&gt;history&lt;/code&gt;. Depending on which mode you were using, you will have to replace it with the appropriate function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d9fe9e5c84ee70fb4dbc07d406f0311ecd2153" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property has been removed from normalized route locations (&lt;code&gt;this.$route&lt;/code&gt; and object returned by &lt;code&gt;router.resolve&lt;/code&gt;). You can still access it via the &lt;code&gt;matched&lt;/code&gt; array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb351c79c236a2c61a1cbe94ac8065189d958a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathToRegexpOptions&lt;/code&gt; and &lt;code&gt;caseSensitive&lt;/code&gt; properties of route records have been replaced with &lt;code&gt;sensitive&lt;/code&gt; and &lt;code&gt;strict&lt;/code&gt; options for &lt;code&gt;createRouter()&lt;/code&gt;. They can now also be directly passed when creating the router with &lt;code&gt;createRouter()&lt;/code&gt;. Any other option specific to &lt;code&gt;path-to-regexp&lt;/code&gt; has been removed as &lt;code&gt;path-to-regexp&lt;/code&gt; is no longer used to parse paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f048c701f20717bd450c88548efc68d063e7f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;route&lt;/code&gt; object is a reactive object, so any of its properties can be watched and you should &lt;strong&gt;avoid watching the whole &lt;code&gt;route&lt;/code&gt;&lt;/strong&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a969c9ecd26cb18544d7ffcc6b09ca6f76a01167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollBehavior&lt;/code&gt; function receives the &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; route objects, like &lt;a href=&quot;navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;. The third argument, &lt;code&gt;savedPosition&lt;/code&gt;, is only available if this is a &lt;code&gt;popstate&lt;/code&gt; navigation (triggered by the browser's back/forward buttons).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e51fe4a377c162aa9aa7660ecf5294ec09a28c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollBehavior&lt;/code&gt; function receives the &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; route objects. The third argument, &lt;code&gt;savedPosition&lt;/code&gt;, is only available if this is a &lt;code&gt;popstate&lt;/code&gt; navigation (triggered by the browser's back/forward buttons).</source>
          <target state="translated">Функция &lt;code&gt;scrollBehavior&lt;/code&gt; получает объекты маршрута &lt;code&gt;to&lt;/code&gt; и &lt;code&gt;from&lt;/code&gt; . Третий аргумент, &lt;code&gt;savedPosition&lt;/code&gt; , доступен только в том случае, если это &lt;code&gt;popstate&lt;/code&gt; навигация (запускаемая кнопками браузера назад / вперед).</target>
        </trans-unit>
        <trans-unit id="b201105a82e6b1036d079ab3dadf0d77a44a591c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;leave guard&lt;/strong&gt; is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by calling &lt;code&gt;next(false)&lt;/code&gt;.</source>
          <target state="translated">Ограничитель &lt;strong&gt;выхода&lt;/strong&gt; обычно используется для предотвращения случайного выхода пользователя из маршрута с несохраненными изменениями. Навигацию можно отменить, вызвав &lt;code&gt;next(false)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd2e60c316c6566a5b3e19411b5d07ab0336af54" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;leave guard&lt;/strong&gt; is usually used to prevent the user from accidentally leaving the route with unsaved edits. The navigation can be canceled by returning &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab97ce9509d6e41f417491fa98ce232a056e404" translate="yes" xml:space="preserve">
          <source>The Full Navigation Resolution Flow</source>
          <target state="translated">Поток с полным навигационным разрешением</target>
        </trans-unit>
        <trans-unit id="b52528f5ecc7cde98c69b52899cf341c3903825e" translate="yes" xml:space="preserve">
          <source>The HTML5 mode is created with &lt;code&gt;createWebHistory()&lt;/code&gt; and is the recommend mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce5d364b93ce99ee04526a5645a7a0786cdf33e" translate="yes" xml:space="preserve">
          <source>The Route Object</source>
          <target state="translated">Объект &quot;Маршрут</target>
        </trans-unit>
        <trans-unit id="9aae68b78cb45f2551e7d818549eb2d0fc6017c4" translate="yes" xml:space="preserve">
          <source>The RouterLink component exposes enough &lt;code&gt;props&lt;/code&gt; to suffice most basic applications but it doesn't try to cover every possible use case and you will likely find yourself using &lt;code&gt;v-slot&lt;/code&gt; for some advanced cases. In most medium to large sized applications, it's worth creating one if not multiple custom RouterLink components to reuse them across your application. Some examples are Links in a Navigation Menu, handling external links, adding an &lt;code&gt;inactive-class&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5791c2e4084ff3c184ea22c374183b77459d77" translate="yes" xml:space="preserve">
          <source>The URL &lt;code&gt;/search?q=vue&lt;/code&gt; would pass &lt;code&gt;{query: 'vue'}&lt;/code&gt; as props to the &lt;code&gt;SearchUser&lt;/code&gt; component.</source>
          <target state="translated">URL &lt;code&gt;/search?q=vue&lt;/code&gt; будет передавать &lt;code&gt;{query: 'vue'}&lt;/code&gt; в качестве &lt;code&gt;SearchUser&lt;/code&gt; компонента SearchUser .</target>
        </trans-unit>
        <trans-unit id="555c4d2ce807e9566e32519437eb61e3c547687c" translate="yes" xml:space="preserve">
          <source>The above can be expressed in the route configuration as:</source>
          <target state="translated">Вышеизложенное может быть выражено в конфигурации маршрута как:</target>
        </trans-unit>
        <trans-unit id="d93da155230aa0a489a38b391d91acc258632b33" translate="yes" xml:space="preserve">
          <source>The above usage will apply the same transition for all routes. If you want each route's component to have different transitions, you can instead combine &lt;a href=&quot;meta&quot;&gt;meta fields&lt;/a&gt; and a dynamic &lt;code&gt;name&lt;/code&gt; on &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf700d0b596efe64523dfdfd3077fd79cdb6d201" translate="yes" xml:space="preserve">
          <source>The above usage will apply the same transition for all routes. If you want each route's component to have different transitions, you can instead use &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; with different names inside each route component:</source>
          <target state="translated">Приведенное выше использование будет применять одинаковый переход для всех маршрутов. Если вы хотите, чтобы каждый компонент маршрута имел разные переходы, вы можете вместо этого использовать &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; с разными именами внутри каждого компонента маршрута:</target>
        </trans-unit>
        <trans-unit id="2082f4f8778f7c6a06e0469829d19c0acde7c5a4" translate="yes" xml:space="preserve">
          <source>The argument can be a string path, or a location descriptor object. Examples:</source>
          <target state="translated">Аргументом может быть строковый путь или объект дескриптора местоположения.Примеры:</target>
        </trans-unit>
        <trans-unit id="d51405a3849a5f1aa494f8064229450ca2126ed2" translate="yes" xml:space="preserve">
          <source>The base URL of the app. For example, if the entire single page application is served under &lt;code&gt;/app/&lt;/code&gt;, then &lt;code&gt;base&lt;/code&gt; should use the value &lt;code&gt;&quot;/app/&quot;&lt;/code&gt;.</source>
          <target state="translated">Базовый URL-адрес приложения. Например, если все одностраничное приложение обслуживается в &lt;code&gt;/app/&lt;/code&gt; , тогда &lt;code&gt;base&lt;/code&gt; должно использовать значение &lt;code&gt;&quot;/app/&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0c7eb2a366c5fadf10e452d6f7ff2daffd3b2bcb" translate="yes" xml:space="preserve">
          <source>The current active &lt;a href=&quot;#routelocationnormalized&quot;&gt;route location&lt;/a&gt;. This property is read-only and its properties are immutable, but it can be watched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9b668edfbb90c8dd8566bc19351395810269f0" translate="yes" xml:space="preserve">
          <source>The current active &lt;a href=&quot;#the-route-object&quot;&gt;Route&lt;/a&gt;. This property is read-only and its properties are immutable, but it can be watched.</source>
          <target state="translated">Текущий активный &lt;a href=&quot;#the-route-object&quot;&gt;маршрут&lt;/a&gt; . Это свойство доступно только для чтения, и его свойства неизменны, но за ним можно наблюдать.</target>
        </trans-unit>
        <trans-unit id="3f7bab8a351710813a1792361d32a5a6df1ae38e" translate="yes" xml:space="preserve">
          <source>The current route represented as a &lt;a href=&quot;#the-route-object&quot;&gt;Route Object&lt;/a&gt;.</source>
          <target state="translated">Текущий маршрут представлен как объект &lt;a href=&quot;#the-route-object&quot;&gt;маршрута&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a4ee70db8e60fe3e3ae0c4e3f48b36f4ea00269d" translate="yes" xml:space="preserve">
          <source>The default active class matching behavior is &lt;strong&gt;inclusive match&lt;/strong&gt;. For example, &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; will get this class applied as long as the current path starts with &lt;code&gt;/a/&lt;/code&gt; or is &lt;code&gt;/a&lt;/code&gt;.</source>
          <target state="translated">По умолчанию поведение сопоставления активного класса &lt;strong&gt;включает сопоставление&lt;/strong&gt; . Например, &lt;code&gt;&amp;lt;router-link to=&quot;/a&quot;&amp;gt;&lt;/code&gt; будет применять этот класс, пока текущий путь начинается с &lt;code&gt;/a/&lt;/code&gt; или &lt;code&gt;/a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3fc018db58291e889985ef9f6a90a3d9035b1b0e" translate="yes" xml:space="preserve">
          <source>The default mode for &lt;code&gt;vue-router&lt;/code&gt; is &lt;em&gt;hash mode&lt;/em&gt; - it uses the URL hash to simulate a full URL so that the page won't be reloaded when the URL changes.</source>
          <target state="translated">По умолчанию для &lt;code&gt;vue-router&lt;/code&gt; используется &lt;em&gt;режим хеширования&lt;/em&gt; - он использует хэш URL для имитации полного URL, чтобы страница не перезагружалась при изменении URL.</target>
        </trans-unit>
        <trans-unit id="9a016caa76d4a05870f99a4eed3dee7033ee46f7" translate="yes" xml:space="preserve">
          <source>The error is caught and asynchronously handled by calling &lt;code&gt;next(err)&lt;/code&gt; inside a route guard function;</source>
          <target state="translated">Ошибка обнаруживается и асинхронно обрабатывается путем вызова &lt;code&gt;next(err)&lt;/code&gt; внутри функции защиты маршрута;</target>
        </trans-unit>
        <trans-unit id="0f2f86ab65bf1970fdb56cd32d84972e49a6c8f2" translate="yes" xml:space="preserve">
          <source>The error is thrown synchronously inside a route guard function;</source>
          <target state="translated">Ошибка выбрасывается синхронно внутри функции защиты маршрута;</target>
        </trans-unit>
        <trans-unit id="284f06aba90e4ddb5df25b1f1b9a5198e79522e7" translate="yes" xml:space="preserve">
          <source>The example above assumes two things: first, the newly added route record will match the &lt;code&gt;to&lt;/code&gt; location, effectively resulting in a different location from the one we were trying to access. Second, &lt;code&gt;hasNecessaryRoute()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; after adding the new route to avoid an infinite redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c075159a60e00b34c35411eb16921a443fd961" translate="yes" xml:space="preserve">
          <source>The existing &lt;code&gt;router.onReady()&lt;/code&gt; function has been replaced with &lt;code&gt;router.isReady()&lt;/code&gt; which doesn't take any argument and returns a Promise:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61cff4ca13414860678d49874e056e8f8749345f" translate="yes" xml:space="preserve">
          <source>The full resolved URL including query and hash.</source>
          <target state="translated">Полный разрешенный URL,включая запрос и хэш.</target>
        </trans-unit>
        <trans-unit id="6244b85b86684136a7ed756ed5c84e676b51389b" translate="yes" xml:space="preserve">
          <source>The function can return a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt;&lt;code&gt;ScrollToOptions&lt;/code&gt;&lt;/a&gt; position object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c04a5b16accbdac8df1dd93e195c169aaf7ac6" translate="yes" xml:space="preserve">
          <source>The function can return a scroll position object. The object could be in the form of:</source>
          <target state="translated">Функция может возвращать объект положения прокрутки.Объект может быть в форме:</target>
        </trans-unit>
        <trans-unit id="f4cd7e9b6b86b9e5c6185ca441386ebe4a72c908" translate="yes" xml:space="preserve">
          <source>The hash history mode is created with &lt;code&gt;createWebHashHistory()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93691fb604f98a02503f006adee0c664623afde" translate="yes" xml:space="preserve">
          <source>The hash of the current route (with the &lt;code&gt;#&lt;/code&gt;), if it has one. If no hash is present the value will be an empty string.</source>
          <target state="translated">Хеш текущего маршрута (с &lt;code&gt;#&lt;/code&gt; ), если он есть. Если хеша нет, значение будет пустой строкой.</target>
        </trans-unit>
        <trans-unit id="c95a5a08b02b8c35a7c740f5f3e801d9d440558a" translate="yes" xml:space="preserve">
          <source>The introduction of &lt;code&gt;setup&lt;/code&gt; and Vue's &lt;a href=&quot;https://v3.vuejs.org/guide/composition-api-introduction.html&quot;&gt;Composition API&lt;/a&gt;, open up new possibilities but to be able to get the full potential out of Vue Router, we will need to use a few new functions to replace access to &lt;code&gt;this&lt;/code&gt; and in-component navigation guards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9383ecf0e25a97eb42beee9108a618520a4193c8" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;router.getMatchedComponents&lt;/code&gt; is now removed as matched components can be retrieved from &lt;code&gt;router.currentRoute.value.matched&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97562970847680561b46ccccb1070fa6a1adf666" translate="yes" xml:space="preserve">
          <source>The name of the current route, if it has one. (See &lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;Named Routes&lt;/a&gt;)</source>
          <target state="translated">Название текущего маршрута, если он есть. (См. &lt;a href=&quot;../guide/essentials/named-routes&quot;&gt;Именованные маршруты&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5bf899b9e668624d6f5b32ffbaed72a551c9d02d" translate="yes" xml:space="preserve">
          <source>The name of the route being redirected from, if there were one. (See &lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;Redirect and Alias&lt;/a&gt;)</source>
          <target state="translated">Имя перенаправляемого маршрута, если таковой был. (См. &lt;a href=&quot;../guide/essentials/redirect-and-alias&quot;&gt;Перенаправление и Псевдоним&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="33becc9dbbac7d5ad3fae4e44690c199bee011fb" translate="yes" xml:space="preserve">
          <source>The object returned in &lt;code&gt;scrollBehavior&lt;/code&gt; is now similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions&quot;&gt;&lt;code&gt;ScrollToOptions&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;x&lt;/code&gt; is renamed to &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is renamed to &lt;code&gt;top&lt;/code&gt;. See &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0035-router-scroll-position.md&quot;&gt;RFC&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e326cc4cc1f95361d7ab1c48db06b9d0eb69df3b" translate="yes" xml:space="preserve">
          <source>The official router for Vue.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95d110f1797da4af5385f0a1dc02f740110cda8" translate="yes" xml:space="preserve">
          <source>The page will still show the &lt;code&gt;Article&lt;/code&gt; component, we need to manually call &lt;code&gt;router.replace()&lt;/code&gt; to change the current location and overwrite where we were (instead of pushing a new entry, ending up in the same location twice in our history):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96eedc52dc9774c9fd0d2c7a415ac78d6b370276" translate="yes" xml:space="preserve">
          <source>The position in the history to which you want to move, relative to the current page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7596de321e7718793658a9c5a8698a11ec0acec" translate="yes" xml:space="preserve">
          <source>The property &lt;code&gt;routes&lt;/code&gt; is now required in &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e707eb7100daabaf223a4d0e5e9741dbce85d94a" translate="yes" xml:space="preserve">
          <source>The redirect can also be targeting a named route:</source>
          <target state="translated">Переадресация также может быть нацелена на именованный маршрут:</target>
        </trans-unit>
        <trans-unit id="1fbc13eca1bdc9570369c8131c1580d7dac0f41c" translate="yes" xml:space="preserve">
          <source>The root Vue instance the &lt;code&gt;router&lt;/code&gt; was injected into.</source>
          <target state="translated">Корневой экземпляр Vue, в который был внедрен &lt;code&gt;router&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e6a4b5957343fea0ebfd0bd1d19e4759dbd35bf" translate="yes" xml:space="preserve">
          <source>The route object can be found in multiple places:</source>
          <target state="translated">Объект маршрута можно найти в нескольких местах:</target>
        </trans-unit>
        <trans-unit id="922d7fca7f2e145286ae58b5a3c707147df2c6ec" translate="yes" xml:space="preserve">
          <source>The route object is immutable. Every successful navigation will result in a fresh route object.</source>
          <target state="translated">Объект маршрута является непреложным.Каждая успешная навигация приводит к появлению нового объекта маршрута.</target>
        </trans-unit>
        <trans-unit id="faa4bc3d702668e81503a764428cce9b603c0348" translate="yes" xml:space="preserve">
          <source>The router instance.</source>
          <target state="translated">Маршрутизатор.</target>
        </trans-unit>
        <trans-unit id="9fa790e3bac7002dcf74356b703b8218c4bd2fcc" translate="yes" xml:space="preserve">
          <source>The same rules apply for the &lt;code&gt;to&lt;/code&gt; property of the &lt;code&gt;router-link&lt;/code&gt; component.</source>
          <target state="translated">Те же правила применяются &lt;code&gt;to&lt;/code&gt; свойству to компонента &lt;code&gt;router-link&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e47ac241f5fdf160dc18347b31d6fb75fc4cab74" translate="yes" xml:space="preserve">
          <source>The second argument &lt;code&gt;errorCallback&lt;/code&gt; is only supported in 2.4+. It will be called when the initial route resolution runs into an error (e.g. failed to resolve an async component).</source>
          <target state="translated">Второй аргумент &lt;code&gt;errorCallback&lt;/code&gt; поддерживается только в версии 2.4+. Он будет вызываться, когда при первоначальном разрешении маршрута возникает ошибка (например, не удалось разрешить асинхронный компонент).</target>
        </trans-unit>
        <trans-unit id="464adc66f5daee42f009a534fcfb5073b5271c4b" translate="yes" xml:space="preserve">
          <source>The slash character (&lt;code&gt;/&lt;/code&gt;) is now properly decoded inside &lt;code&gt;params&lt;/code&gt; while still producing an encoded version on the URL: &lt;code&gt;%2F&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6934271e865a3a534a429938bddac1f8100b037" translate="yes" xml:space="preserve">
          <source>The user will stay on the previous view while the resource is being fetched for the incoming view. It is therefore recommended to display a progress bar or some kind of indicator while the data is being fetched. If the data fetch fails, it's also necessary to display some kind of global warning message.</source>
          <target state="translated">Пользователь останется в предыдущем представлении,пока ресурс будет получен для входящего представления.Поэтому рекомендуется выводить на экран индикатор прогресса или какой-нибудь индикатор во время получения данных.Если получение данных не удается,необходимо также вывести на экран некое глобальное предупреждающее сообщение.</target>
        </trans-unit>
        <trans-unit id="248801da37f4ea250f622f78c57cb1786b096bd9" translate="yes" xml:space="preserve">
          <source>Then you can achieve the layout above with this route configuration:</source>
          <target state="translated">Затем с помощью данной конфигурации маршрута можно получить схему,описанную выше:</target>
        </trans-unit>
        <trans-unit id="62a2319b92e2fba599c6cb6b46590e5e8177fec0" translate="yes" xml:space="preserve">
          <source>There are few different ways to remove existing routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f584628b0b3a8bd05f38486c74f1e218c10c40f3" translate="yes" xml:space="preserve">
          <source>There is a caveat to this: Your server will no longer report 404 errors as all not-found paths now serve up your &lt;code&gt;index.html&lt;/code&gt; file. To get around the issue, you should implement a catch-all route within your Vue app to show a 404 page:</source>
          <target state="translated">Здесь есть предостережение: ваш сервер больше не будет сообщать об ошибке 404, поскольку все ненайденные пути теперь обслуживают ваш файл &lt;code&gt;index.html&lt;/code&gt; . Чтобы обойти проблему, вы должны реализовать в приложении Vue комплексный маршрут для отображения страницы 404:</target>
        </trans-unit>
        <trans-unit id="1894f2b9422130da979408591dea6e5ebe3fb654" translate="yes" xml:space="preserve">
          <source>Therefore, if you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History APIs&lt;/a&gt;, manipulating history will be super easy with Vue Router.</source>
          <target state="translated">Поэтому, если вы уже знакомы с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;API истории браузера&lt;/a&gt; , управлять историей с Vue Router будет очень просто.</target>
        </trans-unit>
        <trans-unit id="2d764d562378e228a2d451c5c6b625821795fc9d" translate="yes" xml:space="preserve">
          <source>Therefore, if you are already familiar with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History_API&quot;&gt;Browser History APIs&lt;/a&gt;, manipulating history will feel familiar when using Vue Router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d950cf3eda5501bc1ccde2caaf1ee1b6e56fcdd" translate="yes" xml:space="preserve">
          <source>These can also be combined with custom Regexp by adding them &lt;strong&gt;after the closing parentheses&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3704ec0f80059da1d6bb85860c2e3810beffce8a" translate="yes" xml:space="preserve">
          <source>These guards have the exact same signature as global before guards.</source>
          <target state="translated">У этих охранников точно такая же подпись,как у глобальных до охранников.</target>
        </trans-unit>
        <trans-unit id="ad8331253cc719148a7ab74e4c86b1f9d2bf6793" translate="yes" xml:space="preserve">
          <source>These properties are injected into every child component by calling &lt;code&gt;app.use(router)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ea9002e72e16715aa79b230300c2f7a726c70a" translate="yes" xml:space="preserve">
          <source>These properties are injected into every child component by passing the router instance to the root instance as the &lt;code&gt;router&lt;/code&gt; option.</source>
          <target state="translated">Эти свойства вводятся в каждый дочерний компонент путем передачи экземпляра маршрутизатора корневому экземпляру в качестве параметра &lt;code&gt;router&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f00f854885caf5311a4b34f89dad7373f6d089c2" translate="yes" xml:space="preserve">
          <source>They also reflect &lt;a href=&quot;navigation-failures&quot;&gt;navigation failures&lt;/a&gt; as the third argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea83653fde0d9f7ac1885d22979d32e0fa629ef" translate="yes" xml:space="preserve">
          <source>They are useful for analytics, changing the title of the page, accessibility features like announcing the page and many other things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77b18ab4c745157e070e1084b72b6f83fc376c5" translate="yes" xml:space="preserve">
          <source>This allows you to use the component anywhere, which makes the component easier to reuse and test.</source>
          <target state="translated">Это позволяет использовать компонент в любом месте,что облегчает его повторное использование и тестирование.</target>
        </trans-unit>
        <trans-unit id="30e43d86db0b1c5adcae4d5c945926f7a47409cd" translate="yes" xml:space="preserve">
          <source>This has an important side effect about children &lt;code&gt;redirect&lt;/code&gt; records like these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e322a7cbf99e7b1e44e569d75dface178a8d5435" translate="yes" xml:space="preserve">
          <source>This is the exact same object used programatically with &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="translated">Это тот же самый объект, который программно используется с &lt;code&gt;router.push()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5a85eb6673a4fc165f9fa27c60128d711cf7122e" translate="yes" xml:space="preserve">
          <source>This is the exact same object used programmatically with &lt;code&gt;router.push()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884da4433efc5d1a2324d6a582da71f5cc8a01cb" translate="yes" xml:space="preserve">
          <source>This is the method called internally when you click a &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;, so clicking &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; is the equivalent of calling &lt;code&gt;router.push(...)&lt;/code&gt;.</source>
          <target state="translated">Этот метод вызывается изнутри, когда вы щелкаете &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; , поэтому нажатие &lt;code&gt;&amp;lt;router-link :to=&quot;...&quot;&amp;gt;&lt;/code&gt; эквивалентно вызову &lt;code&gt;router.push(...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="451711dc47c7c6f517891ef01d44526a904aae93" translate="yes" xml:space="preserve">
          <source>This is useful in server-side rendering to ensure consistent output on both the server and the client.</source>
          <target state="translated">Это полезно при рендеринге на стороне сервера для обеспечения согласованного вывода как на сервере,так и на клиенте.</target>
        </trans-unit>
        <trans-unit id="ee2874bd09832648e927011bc049ef1435d1bcac" translate="yes" xml:space="preserve">
          <source>This is useful when the routes do not have a name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e6ca582a7ffb3b4a27b7a236e09e3c39fedba3" translate="yes" xml:space="preserve">
          <source>This method queues a callback to be called when the router has completed the initial navigation, which means it has resolved all async enter hooks and async components that are associated with the initial route.</source>
          <target state="translated">Этот метод ставит в очередь обратный вызов,когда маршрутизатор завершил начальную навигацию,что означает,что он разрешил все асинхронные входные крюки и асинхронные компоненты,связанные с начальным маршрутом.</target>
        </trans-unit>
        <trans-unit id="8f9abf85244867999073e6cdf9a897dd11548ea3" translate="yes" xml:space="preserve">
          <source>This method takes a single integer as parameter that indicates by how many steps to go forward or go backward in the history stack, similar to &lt;code&gt;window.history.go(n)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae2228ce7503030d2468a6c7972b2ad671c498c" translate="yes" xml:space="preserve">
          <source>This method takes a single integer as parameter that indicates by how many steps to go forwards or go backwards in the history stack, similar to &lt;code&gt;window.history.go(n)&lt;/code&gt;.</source>
          <target state="translated">Этот метод принимает одно целое число в качестве параметра, который указывает, на сколько шагов нужно перейти вперед или назад в стеке истории, аналогично &lt;code&gt;window.history.go(n)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8de516807bb76de74bd492fff1bca2c34d2b4fa7" translate="yes" xml:space="preserve">
          <source>This will give you an array of params instead of a string and will also require you to pass an array when using named routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe5d8369ea8f01c36cb95214d652370c92181ae" translate="yes" xml:space="preserve">
          <source>This will simply make the page scroll to top for all route navigations.</source>
          <target state="translated">Это просто сделает прокрутку страницы вверх для всех навигаций по маршруту.</target>
        </trans-unit>
        <trans-unit id="11b1e8b431c9e34c7ee34c7c573653195f98f07f" translate="yes" xml:space="preserve">
          <source>Throughout the docs, we will often use the &lt;code&gt;router&lt;/code&gt; instance. Keep in mind that &lt;code&gt;this.$router&lt;/code&gt; is exactly the same as directly using the &lt;code&gt;router&lt;/code&gt; instance created through &lt;code&gt;createRouter&lt;/code&gt;. The reason we use &lt;code&gt;this.$router&lt;/code&gt; is because we don't want to import the router in every single component that needs to manipulate routing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f198ff0bc070b0417c58edb952e48f722940e00" translate="yes" xml:space="preserve">
          <source>Throughout the docs, we will often use the &lt;code&gt;router&lt;/code&gt; instance. Keep in mind that &lt;code&gt;this.$router&lt;/code&gt; is exactly the same as using &lt;code&gt;router&lt;/code&gt;. The reason we use &lt;code&gt;this.$router&lt;/code&gt; is because we don't want to import the router in every single component that needs to manipulate routing.</source>
          <target state="translated">В документации мы часто будем использовать экземпляр &lt;code&gt;router&lt;/code&gt; . Имейте в виду, что &lt;code&gt;this.$router&lt;/code&gt; - это то же самое, что и использование &lt;code&gt;router&lt;/code&gt; . Причина, по которой мы используем &lt;code&gt;this.$router&lt;/code&gt; заключается в том, что мы не хотим импортировать маршрутизатор в каждый отдельный компонент, который должен управлять маршрутизацией.</target>
        </trans-unit>
        <trans-unit id="bcb03ae78b25c08291ff4165aa2e7fd313fddd4f" translate="yes" xml:space="preserve">
          <source>To access the router or the route inside the &lt;code&gt;setup&lt;/code&gt; function, call the &lt;code&gt;useRouter&lt;/code&gt; or &lt;code&gt;useRoute&lt;/code&gt; functions. We will learn more about this in &lt;a href=&quot;advanced/composition-api#accessing-the-router-and-current-route-inside-setup&quot;&gt;the Composition API&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e218c8d751be391c6a069b1c19544f7ae1ba8464" translate="yes" xml:space="preserve">
          <source>To add nested routes to an existing route, you can pass the &lt;em&gt;name&lt;/em&gt; of the route as its first parameter to &lt;code&gt;router.addRoute()&lt;/code&gt;, this will effectively add the route as if it was added through &lt;code&gt;children&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b124764e161f705cb1898a04f2d1f2ddffb40e" translate="yes" xml:space="preserve">
          <source>To decouple this component from the router use option &lt;code&gt;props&lt;/code&gt;:</source>
          <target state="translated">Чтобы отделить этот компонент от маршрутизатора, используйте опцию &lt;code&gt;props&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="40a21d40bf366489567fe26e35bb7f8cdb0ea8a6" translate="yes" xml:space="preserve">
          <source>To get rid of the hash, we can use the router's &lt;strong&gt;history mode&lt;/strong&gt;, which leverages the &lt;code&gt;history.pushState&lt;/code&gt; API to achieve URL navigation without a page reload:</source>
          <target state="translated">Чтобы избавиться от хеша, мы можем использовать &lt;strong&gt;режим истории&lt;/strong&gt; маршрутизатора , который использует API &lt;code&gt;history.pushState&lt;/code&gt; для навигации по URL без перезагрузки страницы:</target>
        </trans-unit>
        <trans-unit id="f968e79f3bebc79ac6accd649e1b80b5c03e62a5" translate="yes" xml:space="preserve">
          <source>To link to a named route, you can pass an object to the &lt;code&gt;router-link&lt;/code&gt; component's &lt;code&gt;to&lt;/code&gt; prop:</source>
          <target state="translated">Чтобы связать с именованным маршрутом, вы можете передать объект компоненту &lt;code&gt;router-link&lt;/code&gt; &lt;code&gt;to&lt;/code&gt; поддержки:</target>
        </trans-unit>
        <trans-unit id="f9e41c5cba93beb2ecf29928a19e36e0a4700272" translate="yes" xml:space="preserve">
          <source>To make typings more consistent and expressive, some types have been renamed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2ac39b7f1eaeb6260ec962194235aea944d778" translate="yes" xml:space="preserve">
          <source>To navigate to a different URL, use &lt;code&gt;router.push&lt;/code&gt;. This method pushes a new entry into the history stack, so when the user clicks the browser back button they will be taken to the previous URL.</source>
          <target state="translated">Чтобы перейти к другому URL-адресу, используйте &lt;code&gt;router.push&lt;/code&gt; . Этот метод помещает новую запись в стек истории, поэтому, когда пользователь нажимает кнопку возврата в браузере, он переходит к предыдущему URL-адресу.</target>
        </trans-unit>
        <trans-unit id="d0662adaee77be33943eebd9dcfec1b0c534e241" translate="yes" xml:space="preserve">
          <source>To react to params changes in the same component, you can simply watch anything on the &lt;code&gt;$route&lt;/code&gt; object, in this scenario, the &lt;code&gt;$route.params&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a814a90fe9d7eb161bb19c80c4d6453392d66e1c" translate="yes" xml:space="preserve">
          <source>To react to params changes in the same component, you can simply watch the &lt;code&gt;$route&lt;/code&gt; object:</source>
          <target state="translated">Чтобы отреагировать на изменение параметров в том же компоненте, вы можете просто посмотреть объект &lt;code&gt;$route&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f16973dd0c4af59976d00a672894b991cdd7c9b2" translate="yes" xml:space="preserve">
          <source>To render components into this nested &lt;code&gt;router-view&lt;/code&gt;, we need to use the &lt;code&gt;children&lt;/code&gt; option in any of the routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb37c7b821c62ffa66d4da832925e5c201bf1f7" translate="yes" xml:space="preserve">
          <source>To render components into this nested outlet, we need to use the &lt;code&gt;children&lt;/code&gt; option in &lt;code&gt;VueRouter&lt;/code&gt; constructor config:</source>
          <target state="translated">Чтобы отображать компоненты во вложенном выходе, нам нужно использовать опцию &lt;code&gt;children&lt;/code&gt; в &lt;code&gt;VueRouter&lt;/code&gt; конструктора VueRouter :</target>
        </trans-unit>
        <trans-unit id="ab39260fea78bd5cdfde4b98ccfd4bc7bd02a43c" translate="yes" xml:space="preserve">
          <source>Transitions</source>
          <target state="translated">Transitions</target>
        </trans-unit>
        <trans-unit id="a4ac04b1899f80d62fce6ec0d8196f8f6c37bddc" translate="yes" xml:space="preserve">
          <source>Traverse history</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4444a66fb6e0b58af45061a5485da34a09bc09" translate="yes" xml:space="preserve">
          <source>Try to keep the &lt;code&gt;props&lt;/code&gt; function stateless, as it's only evaluated on route changes. Use a wrapper component if you need state to define the props, that way vue can react to state changes.</source>
          <target state="translated">Старайтесь держать &lt;code&gt;props&lt;/code&gt; функцию лица без гражданства, как это оценивается только на изменениях маршрута. Используйте компонент оболочки, если вам нужно состояние для определения свойств, чтобы vue мог реагировать на изменения состояния.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="5855e1223cedf94ad0b6dc47625105b33a541e19" translate="yes" xml:space="preserve">
          <source>Type declaration for &lt;code&gt;RouteConfig&lt;/code&gt;:</source>
          <target state="translated">Объявление типа для &lt;code&gt;RouteConfig&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="09f34b6f04c782293708cb0bd636ff7126c536d7" translate="yes" xml:space="preserve">
          <source>Type of the navigation failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="20cf00647920860dd64dc8c728fae3029b925844" translate="yes" xml:space="preserve">
          <source>TypeScript changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0d48ce614d6cfe5fce5b6f4084a2df409df051" translate="yes" xml:space="preserve">
          <source>Unique name for the route record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8286e5a1f395a713e574e6c0b6ec95de663a68" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;history.state&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10799693756047c125932282923d155105c7fe0d" translate="yes" xml:space="preserve">
          <source>User-level route location that can be passed to &lt;code&gt;router.push()&lt;/code&gt;, &lt;code&gt;redirect&lt;/code&gt;, and returned in &lt;a href=&quot;../guide/advanced/navigation-guards&quot;&gt;Navigation Guards&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6513128745f1da8beb6400260062b62ac8738bfa" translate="yes" xml:space="preserve">
          <source>Users are already on the page that they are trying to navigate to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5751afb337c680e5e84da3851f1bca73258d946a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$route&lt;/code&gt; in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs.</source>
          <target state="translated">Использование &lt;code&gt;$route&lt;/code&gt; в вашем компоненте создает тесную связь с маршрутом, что ограничивает гибкость компонента, поскольку его можно использовать только для определенных URL-адресов.</target>
        </trans-unit>
        <trans-unit id="bd0c6de9e7b95926d53d216217f47b2039c72089" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;$route&lt;/code&gt; in your component creates a tight coupling with the route which limits the flexibility of the component as it can only be used on certain URLs. While this is not necessarily a bad thing, we can decouple this behavior with a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6aedab66e85d77c129fd23e06af19eb16532db" translate="yes" xml:space="preserve">
          <source>Using the composition API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db263ddb8d32a64a0bf38c8cb481ff7dc37d297" translate="yes" xml:space="preserve">
          <source>Using the options API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="8bc235c19fb54fce48db733e0f0fbb119f0ae68f" translate="yes" xml:space="preserve">
          <source>Value passed to the attribute &lt;code&gt;aria-current&lt;/code&gt; when the link is exactly active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c52f71c0f3c8b53d7d433eb9091bbf6786b322" translate="yes" xml:space="preserve">
          <source>Values in &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;fullPath&lt;/code&gt; are not decoded anymore. They will appear as provided by the browser (most browsers provide them encoded). e.g. directly writing on the address bar &lt;code&gt;https://example.com/hello world&lt;/code&gt; will yield the encoded version: &lt;code&gt;https://example.com/hello%20world&lt;/code&gt; and both &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;fullPath&lt;/code&gt; will be &lt;code&gt;/hello%20world&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d26897a43db04ce923013721681c90785d2c00" translate="yes" xml:space="preserve">
          <source>Very often we will need to map routes with the given pattern to the same component. For example we may have a &lt;code&gt;User&lt;/code&gt; component which should be rendered for all users but with different user IDs. In &lt;code&gt;vue-router&lt;/code&gt; we can use a dynamic segment in the path to achieve that:</source>
          <target state="translated">Очень часто нам нужно сопоставить маршруты с заданным шаблоном с одним и тем же компонентом. Например, у нас может быть компонент &lt;code&gt;User&lt;/code&gt; , который должен отображаться для всех пользователей, но с разными идентификаторами пользователей. В &lt;code&gt;vue-router&lt;/code&gt; мы можем использовать динамический сегмент пути для достижения этого:</target>
        </trans-unit>
        <trans-unit id="cfdc7b3ea1b0c8e8877fda03996c85647e836377" translate="yes" xml:space="preserve">
          <source>Very often we will need to map routes with the given pattern to the same component. For example we may have a &lt;code&gt;User&lt;/code&gt; component which should be rendered for all users but with different user IDs. In Vue Router we can use a dynamic segment in the path to achieve that, we call that a &lt;em&gt;param&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375cf55f91216e77b508717797d05fb22beefd2a" translate="yes" xml:space="preserve">
          <source>View transition effects powered by Vue.js' transition system</source>
          <target state="translated">Просмотреть эффекты перехода на основе системы перехода Vue.js</target>
        </trans-unit>
        <trans-unit id="bf53a6c36521f7bfb85181c1e488fc3bdefe2160" translate="yes" xml:space="preserve">
          <source>Vue Router</source>
          <target state="translated">Вид маршрутизатора</target>
        </trans-unit>
        <trans-unit id="5c7fbc25eadec21d8c4f5c4196380aaaee3523e7" translate="yes" xml:space="preserve">
          <source>Vue Router and the Composition API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64c7f69bf65721a85219ae85bad646e77f641f0" translate="yes" xml:space="preserve">
          <source>Vue Router exposes the internal behavior of RouterLink as a Composition API function. It gives access the same properties as the &lt;a href=&quot;../../api/index#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt; API&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a69e98a109edc8870409c04bde6b399d9a3482" translate="yes" xml:space="preserve">
          <source>Vue Router gives you two functions to look at existing routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1492cdf9423931020a391d91e6dad97c0b5a2737" translate="yes" xml:space="preserve">
          <source>Vue Router is no longer a class but a set of functions. Instead of writing &lt;code&gt;new Router()&lt;/code&gt;, you now have to call &lt;code&gt;createRouter&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d485b5c28c9dd7fdd69a49964755c045a0d8b0d" translate="yes" xml:space="preserve">
          <source>Vue Router is the official router for &lt;a href=&quot;http://v3.vuejs.org&quot;&gt;Vue.js&lt;/a&gt;. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca5266265ed3aea3483c13e9476203377ffc810" translate="yes" xml:space="preserve">
          <source>Vue Router is the official router for &lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt;. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</source>
          <target state="translated">Вьет маршрутизатор является официальным маршрутизатором для &lt;a href=&quot;http://vuejs.org&quot;&gt;Vue.js&lt;/a&gt; . Он глубоко интегрирован с ядром Vue.js, что упрощает создание одностраничных приложений с помощью Vue.js. Возможности включают:</target>
        </trans-unit>
        <trans-unit id="4fcd1c779b4d20e3689b2448d52ed89e94d5eff3" translate="yes" xml:space="preserve">
          <source>Vue Router saves information on the &lt;code&gt;history.state&lt;/code&gt;. If you have any code manually calling &lt;code&gt;history.pushState()&lt;/code&gt;, you should likely avoid it or refactor it with a regular &lt;code&gt;router.push()&lt;/code&gt; and a &lt;code&gt;history.replaceState()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893b7bf1204705172e13e9cd704e975b4de8ae93" translate="yes" xml:space="preserve">
          <source>Vue Router supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports&quot;&gt;dynamic imports&lt;/a&gt; out of the box, meaning you can replace static imports with dynamic ones:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2193c34506d46d84ab96e184d1735cd030a25464" translate="yes" xml:space="preserve">
          <source>Vue Router uses its own path matching syntax, inspired by the one used by &lt;code&gt;express&lt;/code&gt;, so it supports many advanced matching patterns such as optional params, zero or more / one or more requirements, and even custom regex patterns. Please check the &lt;a href=&quot;route-matching-syntax&quot;&gt;Advanced Matching&lt;/a&gt; documentation to explore them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb47c1ebf7881c1dc69c46536df702e895f7c1d" translate="yes" xml:space="preserve">
          <source>Waiting for the result of a Navigation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3604acf13128a42d94157cb0c5d8328dbb1a88b5" translate="yes" xml:space="preserve">
          <source>We can add an &lt;a href=&quot;navigation-guards#global-after-hooks&quot;&gt;after navigation hook&lt;/a&gt; to dynamically add information to the &lt;code&gt;meta&lt;/code&gt; field based on the depth of the route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e38605a4a493c27c8a5d6ee9d645fba14a9a9a" translate="yes" xml:space="preserve">
          <source>We can also use &lt;a href=&quot;meta&quot;&gt;route meta fields&lt;/a&gt; to implement fine-grained scroll behavior control. Check out a full example &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Мы также можем использовать &lt;a href=&quot;meta&quot;&gt;мета-поля маршрута&lt;/a&gt; для реализации детального контроля поведения прокрутки. Ознакомьтесь с полным примером &lt;a href=&quot;https://github.com/vuejs/vue-router/blob/dev/examples/scroll-behavior/app.js&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04b903f718c55d4f30d5c401c174e57308af95f6" translate="yes" xml:space="preserve">
          <source>We can replace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0352badf3e41913c3f3e9620f942cb5077ecbe2c" translate="yes" xml:space="preserve">
          <source>We will be using &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt; in the code samples in the guide.</source>
          <target state="translated">Мы будем использовать &lt;a href=&quot;https://github.com/lukehoban/es6features&quot;&gt;ES2015&lt;/a&gt; в примерах кода в руководстве.</target>
        </trans-unit>
        <trans-unit id="15b474187c7078074aa9ed72c9112ae1156c52a0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is an object, this will be set as the component props as-is. Useful for when the props are static.</source>
          <target state="translated">Когда &lt;code&gt;props&lt;/code&gt; является объектом, он будет установлен как свойства компонента как есть. Полезно, когда опоры статичны.</target>
        </trans-unit>
        <trans-unit id="d2513a78af894fa1eaf54225e0979827f5c12641" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;props&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;route.params&lt;/code&gt; will be set as the component props.</source>
          <target state="translated">Когда &lt;code&gt;props&lt;/code&gt; установлен в &lt;code&gt;true&lt;/code&gt; , то &lt;code&gt;route.params&lt;/code&gt; будет установлено в качестве компонентов реквизита.</target>
        </trans-unit>
        <trans-unit id="d414b66019d6cf13d6c1114261c9443bce5d8cdd" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt;, it will render the component with the corresponding name in the matched route record's &lt;code&gt;components&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ccecf482f54b6d805c179314065a64f0b2d6b9" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; has a name, it will render the component with the corresponding name in the matched route record's &lt;code&gt;components&lt;/code&gt; option. See &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;Named Views&lt;/a&gt; for an example.</source>
          <target state="translated">Когда &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; имеет имя, он будет отображать компонент с соответствующим именем в опции &lt;code&gt;components&lt;/code&gt; сопоставленной записи маршрута . См. Пример в &lt;a href=&quot;../guide/essentials/named-views&quot;&gt;именованных представлениях&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="370e9eb49967d3c0b483f412401dc604f33c8a96" translate="yes" xml:space="preserve">
          <source>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route's components into a separate chunk, and only load them when the route is visited.</source>
          <target state="translated">При сборке приложений с пакетом,пакет JavaScript может стать довольно большим,и таким образом повлиять на время загрузки страницы.Было бы более эффективно,если бы мы могли разделить компоненты каждого маршрута на отдельные фрагменты,и загружать их только при посещении маршрута.</target>
        </trans-unit>
        <trans-unit id="ab5b4d6e3d2c05ce1d0075c5d125333116133a1e" translate="yes" xml:space="preserve">
          <source>When building apps with a bundler, the JavaScript bundle can become quite large, and thus affect the page load time. It would be more efficient if we can split each route's components into a separate chunks, and only load them when the route is visited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a598ced62d3edd035797f59b8e377213dd56ff0" translate="yes" xml:space="preserve">
          <source>When creating the router instance, you can provide the &lt;code&gt;scrollBehavior&lt;/code&gt; function:</source>
          <target state="translated">При создании экземпляра роутера вы можете предоставить функцию &lt;code&gt;scrollBehavior&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d7de5381460775c8745045dbd13f331c7c88f728" translate="yes" xml:space="preserve">
          <source>When defining a param like &lt;code&gt;:userId&lt;/code&gt;, we internally use the following regexp &lt;code&gt;([^/]+)&lt;/code&gt; (at least one character that isn't a slash &lt;code&gt;/&lt;/code&gt;) to extract params from URLs. This works well unless you need to differentiate two routes based on the param content. Imagine two routes &lt;code&gt;/:orderId&lt;/code&gt; and &lt;code&gt;/:productName&lt;/code&gt;, both would match the exact same URLs, so we need a way to differentiate them. The easiest way would be to add a static section to the path that differentiates them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6daa58ef55cd1163f43761607b0cdc7228f950b1" translate="yes" xml:space="preserve">
          <source>When returning a new location inside of a Navigation Guard, we are triggering a new navigation that overrides the ongoing one. Differently from other return values, a redirection doesn't prevent a navigation, &lt;strong&gt;it creates a new one&lt;/strong&gt;. It is therefore checked differently, by reading the &lt;code&gt;redirectedFrom&lt;/code&gt; property in a Route Location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e714346832e17cf65c274f305abc3b1e0ad285" translate="yes" xml:space="preserve">
          <source>When the URL is &lt;code&gt;/foo/bar&lt;/code&gt;, &lt;code&gt;$route.matched&lt;/code&gt; will be an Array containing both objects (cloned), in parent to child order.</source>
          <target state="translated">Когда URL-адрес &lt;code&gt;/foo/bar&lt;/code&gt; , &lt;code&gt;$route.matched&lt;/code&gt; будет массивом, содержащим оба объекта (клонированные) в порядке от родительского к дочернему.</target>
        </trans-unit>
        <trans-unit id="5c2b30c6d5f6b6c51b2aeb5be92ba203bf029dab" translate="yes" xml:space="preserve">
          <source>When used with a module system, you must explicitly install the router via &lt;code&gt;Vue.use()&lt;/code&gt;:</source>
          <target state="translated">При использовании с модульной системой вы должны явно установить маршрутизатор через &lt;code&gt;Vue.use()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="73ca895563503412ed9e81d2069627e813f48534" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;resolve&lt;/code&gt;, and &lt;code&gt;replace&lt;/code&gt; and providing a &lt;code&gt;string&lt;/code&gt; location or a &lt;code&gt;path&lt;/code&gt; property in an object, &lt;strong&gt;it must be encoded&lt;/strong&gt; (like in the previous version). On the other hand, &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;hash&lt;/code&gt; must be provided in its unencoded version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894d4e3c0a1dda761d28d161ed2c31ac0dde23da" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;router-link&lt;/code&gt;, Vue Router calls &lt;code&gt;router.push&lt;/code&gt; to trigger a navigation. While the expected behavior for most links is to navigate a user to a new page, there are a few situations where users will remain on the same page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93aaa65612ef60babed2aa9e05813e5850debcf" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;asterisk&lt;/em&gt; routes, make sure to correctly order your routes so that &lt;em&gt;asterisk&lt;/em&gt; ones are at the end. The route &lt;code&gt;{ path: '*' }&lt;/code&gt; is usually used to 404 client side. If you are using &lt;em&gt;History mode&lt;/em&gt;, make sure to &lt;a href=&quot;history-mode&quot;&gt;correctly configure your server&lt;/a&gt; as well.</source>
          <target state="translated">При использовании маршрутов со &lt;em&gt;звездочкой&lt;/em&gt; убедитесь, что маршруты правильно упорядочены, чтобы в конце были маршруты со &lt;em&gt;звездочкой&lt;/em&gt; . Маршрут &lt;code&gt;{ path: '*' }&lt;/code&gt; обычно используется на стороне клиента 404. Если вы используете &lt;em&gt;режим истории&lt;/em&gt; , не забудьте также &lt;a href=&quot;history-mode&quot;&gt;правильно настроить свой сервер&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="97b8e721025fa58b91ef960eab5b68bd8381f37f" translate="yes" xml:space="preserve">
          <source>When using Babel, you will need to add the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt; plugin so that Babel can properly parse the syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19980f29a3a5c0ac4a541612d57660a1818f7d4" translate="yes" xml:space="preserve">
          <source>When using a bundler like webpack, this will automatically benefit from &lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot;&gt;code splitting&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09a113e124c947936cc9ed9cc36a71326cb4a50" translate="yes" xml:space="preserve">
          <source>When using an &lt;em&gt;asterisk&lt;/em&gt;, a param named &lt;code&gt;pathMatch&lt;/code&gt; is automatically added to &lt;code&gt;$route.params&lt;/code&gt;. It contains the rest of the url matched by the &lt;em&gt;asterisk&lt;/em&gt;:</source>
          <target state="translated">При использовании &lt;em&gt;звездочки&lt;/em&gt; , пары по имени &lt;code&gt;pathMatch&lt;/code&gt; автоматически добавляются в &lt;code&gt;$route.params&lt;/code&gt; . Он содержит остальную часть URL-адреса, &lt;em&gt;отмеченного звездочкой&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="654d7b5318472e61b7ba9786645ee2ba53c15acf" translate="yes" xml:space="preserve">
          <source>When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. &lt;code&gt;vue-router&lt;/code&gt; allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</source>
          <target state="translated">При использовании маршрутизации на стороне клиента мы можем захотеть прокрутить вверх при переходе к новому маршруту или сохранить позицию прокрутки записей истории, как это делает реальная перезагрузка страницы. &lt;code&gt;vue-router&lt;/code&gt; позволяет вам достичь этого и даже лучше, позволяет полностью настроить поведение прокрутки при навигации по маршруту.</target>
        </trans-unit>
        <trans-unit id="4877bce231087b8b125642a59163b8ce9eac3862" translate="yes" xml:space="preserve">
          <source>When using client-side routing, we may want to scroll to top when navigating to a new route, or preserve the scrolling position of history entries just like real page reload does. Vue Router allows you to achieve these and even better, allows you to completely customize the scroll behavior on route navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60314411ff9cac02192073319927dc1ca2221dd" translate="yes" xml:space="preserve">
          <source>When using history mode, the URL will look &quot;normal,&quot; e.g. &lt;code&gt;http://oursite.com/user/id&lt;/code&gt;. Beautiful!</source>
          <target state="translated">При использовании режима истории URL-адрес будет выглядеть &amp;laquo;обычным&amp;raquo;, например &lt;code&gt;http://oursite.com/user/id&lt;/code&gt; . Прекрасный!</target>
        </trans-unit>
        <trans-unit id="76317408e04c432f27553e62930595e45d6e0847" translate="yes" xml:space="preserve">
          <source>When using history mode, the URL will look &quot;normal,&quot; e.g. &lt;code&gt;https://example.com/user/id&lt;/code&gt;. Beautiful!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc02aef8c3b391db93840118b90dec2b415d224" translate="yes" xml:space="preserve">
          <source>When using this approach, we navigate and render the incoming component immediately, and fetch data in the component's &lt;code&gt;created&lt;/code&gt; hook. It gives us the opportunity to display a loading state while the data is being fetched over the network, and we can also handle loading differently for each view.</source>
          <target state="translated">При использовании этого подхода мы осуществляем навигацию и визуализацию входящего компонента немедленно, а также извлекаем данные в обработчике &lt;code&gt;created&lt;/code&gt; компонента . Это дает нам возможность отображать состояние загрузки во время загрузки данных по сети, а также мы можем обрабатывать загрузку по-разному для каждого представления.</target>
        </trans-unit>
        <trans-unit id="0ef4c31bc6df6ea69b26692cb9b125d1cf8d3a93" translate="yes" xml:space="preserve">
          <source>When writing a &lt;code&gt;redirect&lt;/code&gt;, you can omit the &lt;code&gt;component&lt;/code&gt; option because it is never directly reached so there is no component to render. The only exception are &lt;a href=&quot;nested-routes&quot;&gt;nested routes&lt;/a&gt;: if a route record has &lt;code&gt;children&lt;/code&gt; and a &lt;code&gt;redirect&lt;/code&gt; property, it should also have a &lt;code&gt;component&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cc117fab6263f7211081d22d65df80783ceb89" translate="yes" xml:space="preserve">
          <source>When you are using the &lt;code&gt;base&lt;/code&gt; option in HTML5 history mode, you don't need to include it in &lt;code&gt;to&lt;/code&gt; prop's URLs.</source>
          <target state="translated">Когда вы используете &lt;code&gt;base&lt;/code&gt; опцию в режиме истории HTML5, вам не нужно включать ее &lt;code&gt;to&lt;/code&gt; поддержки URL-адресов.</target>
        </trans-unit>
        <trans-unit id="9b3b302220b09f0ae598d14b7ae52aeeeae016b6" translate="yes" xml:space="preserve">
          <source>Whenever a route is removed, &lt;strong&gt;all of its aliases and children&lt;/strong&gt; are removed with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d194e48a46b26cc7897e6110764ca46b15b9bfdf" translate="yes" xml:space="preserve">
          <source>Where to redirect if the route is directly matched. The redirection happens before any navigation guard and triggers a new navigation with the new target location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9a4268760ee8c03323a48afbec0d7f3f52fc76" translate="yes" xml:space="preserve">
          <source>Where to redirect if the route is directly matched. The redirection happens before any navigation guard and triggers a new navigation with the new target location. Can also be a function that receives the target route location and returns the location we should redirect to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b00a86cb820a643fdb9df14e2ff70c640efdbf" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; should not wrap its content in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element. Useful when using &lt;a href=&quot;#router-link-s-v-slot&quot;&gt;&lt;code&gt;v-slot&lt;/code&gt;&lt;/a&gt; to create a custom RouterLink. By default, &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; will render its content wrapped in an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, even when using &lt;code&gt;v-slot&lt;/code&gt;. Passing the &lt;code&gt;custom&lt;/code&gt; prop, removes that behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8691ce4b9afdef7a1af9da92eb870add90d6f61c" translate="yes" xml:space="preserve">
          <source>While you can still use in-component navigation guards with a &lt;code&gt;setup&lt;/code&gt; function, Vue Router exposes update and leave guards as Composition API functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4446df79d1370319467592e28dbebd4c3d82d6b8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;vue-router&lt;/code&gt;, it is very simple to express this relationship using nested route configurations.</source>
          <target state="translated">С &lt;code&gt;vue-router&lt;/code&gt; эти отношения очень просто выразить с помощью конфигураций вложенных маршрутов.</target>
        </trans-unit>
        <trans-unit id="b598b2534b98ccf2f88f95a53a07b16bd9d630f6" translate="yes" xml:space="preserve">
          <source>With Vue Router, you can express this relationship using nested route configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d288e66c2b04e3ae98f5a06ccc29b5c1455471d4" translate="yes" xml:space="preserve">
          <source>With this approach we fetch the data before actually navigating to the new route. We can perform the data fetching in the &lt;code&gt;beforeRouteEnter&lt;/code&gt; guard in the incoming component, and only call &lt;code&gt;next&lt;/code&gt; when the fetch is complete:</source>
          <target state="translated">При таком подходе мы получаем данные перед фактическим переходом к новому маршруту. Мы можем выполнять &lt;code&gt;beforeRouteEnter&lt;/code&gt; данных в защитном элементе beforeRouteEnter во входящем компоненте и вызывать &lt;code&gt;next&lt;/code&gt; только после завершения выборки:</target>
        </trans-unit>
        <trans-unit id="081dedc6227e0e55d23820f47e7e9c896394c5cd" translate="yes" xml:space="preserve">
          <source>You can add the following options to route components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a994c42f35fd2e9f8464db0415b1e50c5c315d" translate="yes" xml:space="preserve">
          <source>You can also check out this example &lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;live&lt;/a&gt;.</source>
          <target state="translated">Вы также можете посмотреть этот пример &lt;a href=&quot;https://jsfiddle.net/yyx990803/xgrjzsup/&quot;&gt;вживую&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="63df9fae1f760b3e506e42daf53ec463a5e58e27" translate="yes" xml:space="preserve">
          <source>You can also extend the TypeScript definition of the &lt;code&gt;Router&lt;/code&gt; interface to add the &lt;code&gt;app&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6764342a7b1534b2cb94118d3b6629fdf077abe" translate="yes" xml:space="preserve">
          <source>You can also mark a parameter as optional by using the &lt;code&gt;?&lt;/code&gt; modifier (0 or 1):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea2e03f3bdf48ee303af6134602aab23854aba6" translate="yes" xml:space="preserve">
          <source>You can also pass a CSS selector or a DOM element via &lt;code&gt;el&lt;/code&gt;. In that scenario, &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; will be treated as relative offsets to that element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd42bc16638e567ed6ef48a2b99a6689f0f21322" translate="yes" xml:space="preserve">
          <source>You can also pass an array of functions to &lt;code&gt;beforeEnter&lt;/code&gt;, this is useful when reusing guards for different routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e815d06584fa57837db82d17e57326a9d3123d" translate="yes" xml:space="preserve">
          <source>You can also register global after hooks, however unlike guards, these hooks do not get a &lt;code&gt;next&lt;/code&gt; function and cannot affect the navigation:</source>
          <target state="translated">Вы также можете зарегистрировать глобальные хуки после, однако, в отличие от охранников, эти хуки не получают &lt;code&gt;next&lt;/code&gt; функции и не могут влиять на навигацию:</target>
        </trans-unit>
        <trans-unit id="dceb3c719a2affde3934cc32a255fb6e8bac211f" translate="yes" xml:space="preserve">
          <source>You can also return a Promise that resolves to the desired position descriptor:</source>
          <target state="translated">Вы также можете вернуть Обещание,которое разрешается в желаемый дескриптор позиции:</target>
        </trans-unit>
        <trans-unit id="87372b6a91ff376092ecc00b583afd4e75bf1fef" translate="yes" xml:space="preserve">
          <source>You can check out a live example &lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Вы можете посмотреть живой пример &lt;a href=&quot;https://jsfiddle.net/yyx990803/4xfa2f19/&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="52a45f015af3c7e89ae621b8c057c43ce893c17a" translate="yes" xml:space="preserve">
          <source>You can create a function that returns props. This allows you to cast parameters into other types, combine static values with route-based values, etc.</source>
          <target state="translated">Вы можете создать функцию,которая возвращает реквизит.Это позволяет преобразовывать параметры в другие типы,объединять статические значения со значениями на основе маршрута и т.д.</target>
        </trans-unit>
        <trans-unit id="b1adba09890f98c1b3ec7486a6a2350042ffe55e" translate="yes" xml:space="preserve">
          <source>You can define &lt;code&gt;beforeEnter&lt;/code&gt; guards directly on a route's configuration object:</source>
          <target state="translated">Вы можете определить охрану &lt;code&gt;beforeEnter&lt;/code&gt; непосредственно в объекте конфигурации маршрута:</target>
        </trans-unit>
        <trans-unit id="f9c7573f8d0fd8bb3f874e98560d1ebc3051886f" translate="yes" xml:space="preserve">
          <source>You can have multiple &lt;em&gt;params&lt;/em&gt; in the same route, and they will map to corresponding fields on &lt;code&gt;$route.params&lt;/code&gt;. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f861ad07b617f0765fc567107e9e603992caea" translate="yes" xml:space="preserve">
          <source>You can have multiple dynamic segments in the same route, and they will map to corresponding fields on &lt;code&gt;$route.params&lt;/code&gt;. Examples:</source>
          <target state="translated">У вас может быть несколько динамических сегментов в одном маршруте, и они будут отображаться в соответствующие поля в &lt;code&gt;$route.params&lt;/code&gt; . Примеры:</target>
        </trans-unit>
        <trans-unit id="91c9c8c9c91650676c169a76575a2310ebc323bc" translate="yes" xml:space="preserve">
          <source>You can include a &lt;code&gt;meta&lt;/code&gt; field when defining a route:</source>
          <target state="translated">Вы можете включить &lt;code&gt;meta&lt;/code&gt; поле при определении маршрута:</target>
        </trans-unit>
        <trans-unit id="6ec3c840ce7353ceb670eb5fdafad625869a7713" translate="yes" xml:space="preserve">
          <source>You can more about the syntax on &lt;a href=&quot;https://docs.netlify.com/routing/redirects/rewrites-proxies/#history-pushstate-and-single-page-apps&quot;&gt;Netlify documentation&lt;/a&gt;. You can also &lt;a href=&quot;https://docs.netlify.com/configure-builds/file-based-configuration/&quot;&gt;create a &lt;code&gt;netlify.toml&lt;/code&gt;&lt;/a&gt; to combine &lt;em&gt;redirections&lt;/em&gt; with other Netlify features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc2b7c4e64215b0f6dfda986ae622658ce356bc" translate="yes" xml:space="preserve">
          <source>You can register a global guard with &lt;code&gt;router.beforeResolve&lt;/code&gt;. This is similar to &lt;code&gt;router.beforeEach&lt;/code&gt; because it triggers on &lt;strong&gt;every navigation&lt;/strong&gt;, but resolve guards are called right before the navigation is confirmed, &lt;strong&gt;after all in-component guards and async route components are resolved&lt;/strong&gt;. Here is an example that ensures the user has given access to the Camera for routes that &lt;a href=&quot;meta&quot;&gt;have defined a custom meta&lt;/a&gt; property &lt;code&gt;requiresCamera&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaa153c3e42e4b62970046f5ffaf744b8c7954d" translate="yes" xml:space="preserve">
          <source>You can register a global guard with &lt;code&gt;router.beforeResolve&lt;/code&gt;. This is similar to &lt;code&gt;router.beforeEach&lt;/code&gt;, with the difference that resolve guards will be called right before the navigation is confirmed, &lt;strong&gt;after all in-component guards and async route components are resolved&lt;/strong&gt;.</source>
          <target state="translated">Вы можете зарегистрировать глобальную охрану с помощью &lt;code&gt;router.beforeResolve&lt;/code&gt; . Это похоже на &lt;code&gt;router.beforeEach&lt;/code&gt; , с той разницей, что средства защиты разрешения будут вызываться непосредственно перед подтверждением навигации, &lt;strong&gt;после того как разрешены все средства защиты компонентов и компоненты асинхронного маршрута&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="91d70ca0e20247f409fa0d7f3606c443e7d0d92e" translate="yes" xml:space="preserve">
          <source>You can register global before guards using &lt;code&gt;router.beforeEach&lt;/code&gt;:</source>
          <target state="translated">Вы можете зарегистрировать global before &lt;code&gt;router.beforeEach&lt;/code&gt; с помощью router.beforeEach :</target>
        </trans-unit>
        <trans-unit id="f4e8f1bf1aa4f62da6dd96a5076471808268cf35" translate="yes" xml:space="preserve">
          <source>You don't need to add the &lt;code&gt;*&lt;/code&gt; for repeated params if you don't plan to directly push to the not found route using its name. If you call &lt;code&gt;router.push('/not/found/url')&lt;/code&gt;, it will provide the right &lt;code&gt;pathMatch&lt;/code&gt; param.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360fc60f946b0e1fb46441c21ec094cefc382a47" translate="yes" xml:space="preserve">
          <source>You don't need to do this when using global script tags.</source>
          <target state="translated">Вам не нужно делать этого при использовании глобальных тегов сценариев.</target>
        </trans-unit>
        <trans-unit id="fdc0308691390af461887e831e2f5799b218ef4e" translate="yes" xml:space="preserve">
          <source>You may have noticed that &lt;code&gt;router.push&lt;/code&gt;, &lt;code&gt;router.replace&lt;/code&gt; and &lt;code&gt;router.go&lt;/code&gt; are counterparts of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;&lt;code&gt;window.history.pushState&lt;/code&gt;, &lt;code&gt;window.history.replaceState&lt;/code&gt; and &lt;code&gt;window.history.go&lt;/code&gt;&lt;/a&gt;, and they do imitate the &lt;code&gt;window.history&lt;/code&gt; APIs.</source>
          <target state="translated">Возможно, вы заметили, что &lt;code&gt;router.push&lt;/code&gt; , &lt;code&gt;router.replace&lt;/code&gt; и &lt;code&gt;router.go&lt;/code&gt; являются аналогами &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt; &lt;code&gt;window.history.pushState&lt;/code&gt; , &lt;code&gt;window.history.replaceState&lt;/code&gt; и &lt;code&gt;window.history.go&lt;/code&gt; &lt;/a&gt; и имитируют API &lt;code&gt;window.history&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="854dba594054d248b54c4e773f248a92460af780" translate="yes" xml:space="preserve">
          <source>You must define a global &lt;code&gt;append&lt;/code&gt; function on your &lt;em&gt;App&lt;/em&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42001955a4630b11faa63d03b789c8381c402c78" translate="yes" xml:space="preserve">
          <source>You will have to clone directly from GitHub and build &lt;code&gt;vue-router&lt;/code&gt; yourself if you want to use the latest dev build.</source>
          <target state="translated">Вам нужно будет клонировать прямо из GitHub и самостоятельно собрать &lt;code&gt;vue-router&lt;/code&gt; , если вы хотите использовать последнюю сборку для разработчиков.</target>
        </trans-unit>
        <trans-unit id="33c7418d4dd301f2ad8592cef6b713a291d5dc4c" translate="yes" xml:space="preserve">
          <source>aborted</source>
          <target state="translated">aborted</target>
        </trans-unit>
        <trans-unit id="22c922a7722e225567a4b9082890a1c0a2a34dc0" translate="yes" xml:space="preserve">
          <source>active-class</source>
          <target state="translated">active-class</target>
        </trans-unit>
        <trans-unit id="cff189789a24d3a0c6568ff793ab307c2f5e703a" translate="yes" xml:space="preserve">
          <source>addRoute</source>
          <target state="translated">addRoute</target>
        </trans-unit>
        <trans-unit id="fde8c600951c09f9872b892841195a7629152e94" translate="yes" xml:space="preserve">
          <source>afterEach</source>
          <target state="translated">afterEach</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="a9a59f26c50e09e9ec16a6e992f5ec9a02ac3329" translate="yes" xml:space="preserve">
          <source>aliasOf</source>
          <target state="translated">aliasOf</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="320eb1bfeaf12fd7419608f4ee7a953270028244" translate="yes" xml:space="preserve">
          <source>aria-current-value</source>
          <target state="translated">aria-current-value</target>
        </trans-unit>
        <trans-unit id="e34aac5c6849fdb3570b660a5e774a81c616a4a9" translate="yes" xml:space="preserve">
          <source>available values: &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</source>
          <target state="translated">доступные значения: &lt;code&gt;&quot;hash&quot; | &quot;history&quot; | &quot;abstract&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="61bb8d29b5be7db307cb29005bff087ebe300454" translate="yes" xml:space="preserve">
          <source>back</source>
          <target state="translated">back</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="7d99fbf783cfec7f174a35d00957229c4ec49a92" translate="yes" xml:space="preserve">
          <source>beforeEach</source>
          <target state="translated">beforeEach</target>
        </trans-unit>
        <trans-unit id="18ae4457594432e76aaec3b9b9b5a99a5568d980" translate="yes" xml:space="preserve">
          <source>beforeEnter</source>
          <target state="translated">beforeEnter</target>
        </trans-unit>
        <trans-unit id="b53d98f73106bac90f193c697c59ab1dff1901e6" translate="yes" xml:space="preserve">
          <source>beforeResolve</source>
          <target state="translated">beforeResolve</target>
        </trans-unit>
        <trans-unit id="8761d26fb8d6c7853faf7cf13fd3e5471364dc36" translate="yes" xml:space="preserve">
          <source>cancelled</source>
          <target state="translated">cancelled</target>
        </trans-unit>
        <trans-unit id="42685f11da91a55b1f5c5b782edb2f0fc1dd5148" translate="yes" xml:space="preserve">
          <source>children</source>
          <target state="translated">children</target>
        </trans-unit>
        <trans-unit id="c212f08ed1157ae268fd83d142afd5ccd48664b2" translate="yes" xml:space="preserve">
          <source>components</source>
          <target state="translated">components</target>
        </trans-unit>
        <trans-unit id="558d84209fcceec0efc231ef1543c1afb1a3c64a" translate="yes" xml:space="preserve">
          <source>createMemoryHistory</source>
          <target state="translated">createMemoryHistory</target>
        </trans-unit>
        <trans-unit id="e38a0d9db7043da2ea87d722c316f035c30f9c8e" translate="yes" xml:space="preserve">
          <source>createRouter</source>
          <target state="translated">createRouter</target>
        </trans-unit>
        <trans-unit id="7b654c1668d01af4224ff101ff001c879dd9b76d" translate="yes" xml:space="preserve">
          <source>createWebHashHistory</source>
          <target state="translated">createWebHashHistory</target>
        </trans-unit>
        <trans-unit id="71dc391cc883a324ef11e1286677d9d2cd2155c0" translate="yes" xml:space="preserve">
          <source>createWebHistory</source>
          <target state="translated">createWebHistory</target>
        </trans-unit>
        <trans-unit id="f28633e032abfa9a862b7d14478d159c0e2fbe36" translate="yes" xml:space="preserve">
          <source>currentRoute</source>
          <target state="translated">currentRoute</target>
        </trans-unit>
        <trans-unit id="f9ac14b63a75faf57d8db6f919bfabb2502d273c" translate="yes" xml:space="preserve">
          <source>custom</source>
          <target state="translated">custom</target>
        </trans-unit>
        <trans-unit id="99b10c37b942ce1bc4a061b17674e700284477fc" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;/&quot;&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;/&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5b86475c5ce19d01e0cac89c9799c7283c7d817" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;a&quot;&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;a&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32d04dbda316ea929438d99dc5deb9bfed79c294" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;default&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc7e54a97eb660f817218b1cedc02e8d9e783123" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;hash&quot; (in browser) | &quot;abstract&quot; (in Node.js)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f018a79ddcbe226a0fa236f8257a7f90261a2b33" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;router-link-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a09a446c9b3680978568555d5a02876f163d4278" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;&quot;router-link-exact-active&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c5e5af919de42d74014a2fd8d7af6f3238aba66" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;'click'&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;'click'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b853518a7253a67751993712323af2afe8d26a75" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6fd6e8dec26869827df393505cdc6fbe0e5b3f8" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">по умолчанию: &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="736fcab46d3c183000b547caa2f1f0abcdcd1c87" translate="yes" xml:space="preserve">
          <source>delta</source>
          <target state="translated">delta</target>
        </trans-unit>
        <trans-unit id="6321b66c3d74f51a3682fe62d6d5f203acb67df4" translate="yes" xml:space="preserve">
          <source>duplicated</source>
          <target state="translated">duplicated</target>
        </trans-unit>
        <trans-unit id="b636d7b90c44146fcdd75dacd33af199ddc37500" translate="yes" xml:space="preserve">
          <source>error handler to register</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5006ed0248a019713b762563076292379daf07b4" translate="yes" xml:space="preserve">
          <source>event</source>
          <target state="translated">event</target>
        </trans-unit>
        <trans-unit id="b55e22fe7830e8fe49f48f834b913ef8618f0521" translate="yes" xml:space="preserve">
          <source>exact</source>
          <target state="translated">exact</target>
        </trans-unit>
        <trans-unit id="de8dc393f32ea87cda6843c8979f8bc15f115a5a" translate="yes" xml:space="preserve">
          <source>exact-active-class</source>
          <target state="translated">exact-active-class</target>
        </trans-unit>
        <trans-unit id="5d288ad264adcc2a70039c116c397be72c30fe76" translate="yes" xml:space="preserve">
          <source>fallback</source>
          <target state="translated">fallback</target>
        </trans-unit>
        <trans-unit id="ace0c5e90ac07202e99d0186576979bacac854c0" translate="yes" xml:space="preserve">
          <source>forward</source>
          <target state="translated">forward</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="619713ad5afcfe48bd0fd5dbbcac2d33359613f3" translate="yes" xml:space="preserve">
          <source>fullPath</source>
          <target state="translated">fullPath</target>
        </trans-unit>
        <trans-unit id="65d3c70fa485a26386880f5e6296ceb8cfd2ce92" translate="yes" xml:space="preserve">
          <source>getRoutes</source>
          <target state="translated">getRoutes</target>
        </trans-unit>
        <trans-unit id="1ec558a60b5dda24597816c924776716018caf8b" translate="yes" xml:space="preserve">
          <source>go</source>
          <target state="translated">go</target>
        </trans-unit>
        <trans-unit id="c7e42d43b0a326f8979eb4bbeb3655f7deb91f40" translate="yes" xml:space="preserve">
          <source>guard</source>
          <target state="translated">guard</target>
        </trans-unit>
        <trans-unit id="31a81ec93db3740ee3984fc40e34a60b0412643d" translate="yes" xml:space="preserve">
          <source>handler</source>
          <target state="translated">handler</target>
        </trans-unit>
        <trans-unit id="5d0381ac5160e174d6dcbb4ef661b2cbd6d4e574" translate="yes" xml:space="preserve">
          <source>hasRoute</source>
          <target state="translated">hasRoute</target>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="4df0e6a21ec6a23a3721f71c0e947871720c309f" translate="yes" xml:space="preserve">
          <source>if you are using Babel, you will need to add the &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import&lt;/a&gt; plugin so that Babel can properly parse the syntax.</source>
          <target state="translated">если вы используете Babel, вам нужно будет добавить плагин &lt;a href=&quot;https://babeljs.io/docs/plugins/syntax-dynamic-import/&quot;&gt;syntax-dynamic-import,&lt;/a&gt; чтобы Babel мог правильно проанализировать синтаксис.</target>
        </trans-unit>
        <trans-unit id="8799419db1a362129b0bb2a9c7c2557c505892b1" translate="yes" xml:space="preserve">
          <source>isReady</source>
          <target state="translated">isReady</target>
        </trans-unit>
        <trans-unit id="b6dd75299d5b83e3df928ca455992bdffdbeedbc" translate="yes" xml:space="preserve">
          <source>leaveGuard</source>
          <target state="translated">leaveGuard</target>
        </trans-unit>
        <trans-unit id="d175db7336b4deaf3b1a69b2f762ee3bed67cb20" translate="yes" xml:space="preserve">
          <source>linkActiveClass</source>
          <target state="translated">linkActiveClass</target>
        </trans-unit>
        <trans-unit id="e41ac53cf69868bc1c3a7ee6ef65c73237c62040" translate="yes" xml:space="preserve">
          <source>linkExactActiveClass</source>
          <target state="translated">linkExactActiveClass</target>
        </trans-unit>
        <trans-unit id="d010685fc836384d78ac35ea6590bf2c53e4247f" translate="yes" xml:space="preserve">
          <source>matched</source>
          <target state="translated">matched</target>
        </trans-unit>
        <trans-unit id="89f41168b29a18bea64d6f6cdc32335cd79cb41b" translate="yes" xml:space="preserve">
          <source>matched path</source>
          <target state="translated">подходящий путь</target>
        </trans-unit>
        <trans-unit id="cb030491157b26a570b6ee91e5b068d99c3b72f6" translate="yes" xml:space="preserve">
          <source>meta</source>
          <target state="translated">meta</target>
        </trans-unit>
        <trans-unit id="e78fe7049341b36116d8054f5a3e00d01f245fcc" translate="yes" xml:space="preserve">
          <source>mode</source>
          <target state="translated">mode</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="42f887092eed9eed78b5b3dc3472764a43d827ea" translate="yes" xml:space="preserve">
          <source>navigation guard to add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afbd3b7cb7f464bb3241a16913e92e2cf6ace45" translate="yes" xml:space="preserve">
          <source>navigation hook to add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ff45f3e30daec8f2c1da3a46cdc95c48025e89" translate="yes" xml:space="preserve">
          <source>new Router becomes createRouter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a3ed6f2965252c6ac4957d95f7a3bdfca47101" translate="yes" xml:space="preserve">
          <source>nginx</source>
          <target state="translated">nginx</target>
        </trans-unit>
        <trans-unit id="660051d15ac64cec704cfacca2c2eab008f657e8" translate="yes" xml:space="preserve">
          <source>npm</source>
          <target state="translated">npm</target>
        </trans-unit>
        <trans-unit id="62fc756a3de9b9cbb5754dd2da26eccaddc3ea99" translate="yes" xml:space="preserve">
          <source>onBeforeRouteLeave</source>
          <target state="translated">onBeforeRouteLeave</target>
        </trans-unit>
        <trans-unit id="a04113b3891bf9d205bb02ecd867e5f2f318fbbd" translate="yes" xml:space="preserve">
          <source>onBeforeRouteUpdate</source>
          <target state="translated">onBeforeRouteUpdate</target>
        </trans-unit>
        <trans-unit id="34c18e24d1dfbbb529faba38b503601cb512f20e" translate="yes" xml:space="preserve">
          <source>onError</source>
          <target state="translated">onError</target>
        </trans-unit>
        <trans-unit id="ba965fb153711071fe0701d7c93c7d5ec2e10b41" translate="yes" xml:space="preserve">
          <source>optional base to provide. Defaults to &lt;code&gt;location.pathname + location.search&lt;/code&gt;. If there is a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;head&lt;/code&gt;, its value will be ignored in favor of this parameter &lt;strong&gt;but note it affects all the history.pushState() calls&lt;/strong&gt;, meaning that if you use a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag, its &lt;code&gt;href&lt;/code&gt; value &lt;strong&gt;has to match this parameter&lt;/strong&gt; (ignoring anything after the &lt;code&gt;#&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301288d463e63a480e550d8a09e43f90f150c861" translate="yes" xml:space="preserve">
          <source>optional base to provide. Useful when the application is hosted inside of a folder like &lt;code&gt;https://example.com/folder/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513f8de9259fe7658fe14d1352c54ccf070e911f" translate="yes" xml:space="preserve">
          <source>options</source>
          <target state="translated">options</target>
        </trans-unit>
        <trans-unit id="fd7b034e09b752c24942cd9b0b20c29db2dc3e90" translate="yes" xml:space="preserve">
          <source>params</source>
          <target state="translated">params</target>
        </trans-unit>
        <trans-unit id="ca0450b471757295fd42518cf19f242cfd3f708d" translate="yes" xml:space="preserve">
          <source>parentName</source>
          <target state="translated">parentName</target>
        </trans-unit>
        <trans-unit id="5ad0ea70e32e296a57cbfa6f96280cbd79caa6b6" translate="yes" xml:space="preserve">
          <source>parseQuery</source>
          <target state="translated">parseQuery</target>
        </trans-unit>
        <trans-unit id="953c0c236f2356b54ee370e347c14c3865381884" translate="yes" xml:space="preserve">
          <source>parseQuery / stringifyQuery</source>
          <target state="translated">parseQuery/stringifyQuery</target>
        </trans-unit>
        <trans-unit id="3150ecd5e0294534a81ae047ddac559de481d774" translate="yes" xml:space="preserve">
          <source>path</source>
          <target state="translated">path</target>
        </trans-unit>
        <trans-unit id="91cc2e927b3bfb1d4477b744f7c70221ddb86ef1" translate="yes" xml:space="preserve">
          <source>pattern</source>
          <target state="translated">pattern</target>
        </trans-unit>
        <trans-unit id="aa60968734f4f4d402439b0e033649c02834cb03" translate="yes" xml:space="preserve">
          <source>props</source>
          <target state="translated">props</target>
        </trans-unit>
        <trans-unit id="fe769bae9076fd096b976fe25deb99259eefb7ef" translate="yes" xml:space="preserve">
          <source>props object that can be passed to &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt;. Accepts &lt;code&gt;Ref&lt;/code&gt;s and &lt;code&gt;ComputedRef&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc867c03d6f1f4385a2475b4be1137e585036dd1" translate="yes" xml:space="preserve">
          <source>push</source>
          <target state="translated">push</target>
        </trans-unit>
        <trans-unit id="7cd9148ec5a552dbf68de5a6debcf8e4d974db72" translate="yes" xml:space="preserve">
          <source>query</source>
          <target state="translated">query</target>
        </trans-unit>
        <trans-unit id="fb5ed1e8458cc7da71478ddab87136681cb0179e" translate="yes" xml:space="preserve">
          <source>redirect</source>
          <target state="translated">redirect</target>
        </trans-unit>
        <trans-unit id="28b7fc08d7e7008fe2436d5ee7fb36281bcbea3a" translate="yes" xml:space="preserve">
          <source>redirectedFrom</source>
          <target state="translated">redirectedFrom</target>
        </trans-unit>
        <trans-unit id="88d876f0b2f156496db3da61b113febd8f67f1e3" translate="yes" xml:space="preserve">
          <source>removeRoute</source>
          <target state="translated">removeRoute</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="1a77d416224cbbe77a439cfd6c198030cb522872" translate="yes" xml:space="preserve">
          <source>required</source>
          <target state="translated">required</target>
        </trans-unit>
        <trans-unit id="4e7a20843e2f67b213946ac43a43c4d2ea3a66a3" translate="yes" xml:space="preserve">
          <source>resolve</source>
          <target state="translated">resolve</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
