<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="enzyme">
    <body>
      <group id="enzyme">
        <trans-unit id="2032cdf17b8018da9f8cc49308ff18d8fc308475" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015 Airbnb, Inc.</source>
          <target state="translated">&amp;copy; 2015 Airbnb, Inc.</target>
        </trans-unit>
        <trans-unit id="cadc5a9164aea9cfc91b89869b14ad15896f7640" translate="yes" xml:space="preserve">
          <source>(stable)</source>
          <target state="translated">(stable)</target>
        </trans-unit>
        <trans-unit id="dea338f658cd127bb84339a8fd24fd8a6d5f1c75" translate="yes" xml:space="preserve">
          <source>(work in progress)</source>
          <target state="translated">(работа в процессе)</target>
        </trans-unit>
        <trans-unit id="7931517f2bed5ba697980abc193bc4576c1eb259" translate="yes" xml:space="preserve">
          <source>); wrapper.find('a').invoke('onClick')().then(() =&amp;gt; { // expect() });</source>
          <target state="translated">); wrapper.find ('a'). invoke ('onClick') (). then (() =&amp;gt; {// expect ()});</target>
        </trans-unit>
        <trans-unit id="d74a519f9c8d1785ce841389d36e6cad6f9ce5c8" translate="yes" xml:space="preserve">
          <source>); } } const wrapper = shallow(</source>
          <target state="translated">); }} const wrapper = shallow (</target>
        </trans-unit>
        <trans-unit id="53d66e0d7660118af4f654aecb299d5535c3e001" translate="yes" xml:space="preserve">
          <source>.at()</source>
          <target state="translated">.at()</target>
        </trans-unit>
        <trans-unit id="0b34c104a2a9447cc032af561ae1a51fd5608fe8" translate="yes" xml:space="preserve">
          <source>.at(index) =&amp;gt; ReactWrapper</source>
          <target state="translated">.at (индекс) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="c263257445e73f24b8cc5450ae7bf6a29f79807f" translate="yes" xml:space="preserve">
          <source>.at(index) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.at (индекс) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="0f29c0f00260f9811b0f5d1099817b063224f845" translate="yes" xml:space="preserve">
          <source>.childAt()</source>
          <target state="translated">.childAt()</target>
        </trans-unit>
        <trans-unit id="cdb40a448c5ad608249d34dc266e0b9880f5936e" translate="yes" xml:space="preserve">
          <source>.childAt(index) =&amp;gt; ReactWrapper</source>
          <target state="translated">.childAt (индекс) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="de3421722a83707ad020d15c7e1cbc982f6c6314" translate="yes" xml:space="preserve">
          <source>.childAt(index) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.childAt (индекс) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="a786e420d44f025ee4ea716195aea605a3e3e331" translate="yes" xml:space="preserve">
          <source>.children()</source>
          <target state="translated">.children()</target>
        </trans-unit>
        <trans-unit id="91b0bee07af525b47fc7182dda3afeef124070cc" translate="yes" xml:space="preserve">
          <source>.children([selector]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.children ([селектор]) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="61000711b862434c29bee3dd9b44ae6dd29fd626" translate="yes" xml:space="preserve">
          <source>.children([selector]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.children ([селектор]) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="48611064085dc9936fb466d2efb9718789da5b0f" translate="yes" xml:space="preserve">
          <source>.closest()</source>
          <target state="translated">.closest()</target>
        </trans-unit>
        <trans-unit id="802dbbc09e4669a26120f854c6e2aad8ea625b00" translate="yes" xml:space="preserve">
          <source>.closest(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.closest (селектор) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="92176522bee605c47e13923244a0618c7c69efa3" translate="yes" xml:space="preserve">
          <source>.closest(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.closest (селектор) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="36aa70864077b7df29e3a8a46823a49e07c6ea6e" translate="yes" xml:space="preserve">
          <source>.contains()</source>
          <target state="translated">.contains()</target>
        </trans-unit>
        <trans-unit id="37e898b462aaec5e7cbe6f204df374e02e68e3ce" translate="yes" xml:space="preserve">
          <source>.contains(nodeOrNodes) =&amp;gt; Boolean</source>
          <target state="translated">.contains (nodeOrNodes) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="c4cfe77bfc469304d67354fad2d251b0f6f367c1" translate="yes" xml:space="preserve">
          <source>.containsAllMatchingElements()</source>
          <target state="translated">.containsAllMatchingElements()</target>
        </trans-unit>
        <trans-unit id="80304978dce6d2b1b4fa50a98513a0c50b8dfdbc" translate="yes" xml:space="preserve">
          <source>.containsAllMatchingElements(patternNodes) =&amp;gt; Boolean</source>
          <target state="translated">.containsAllMatchingElements (patternNodes) =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="36c6f54f680386ac5b1505caec1b6b993ca6831b" translate="yes" xml:space="preserve">
          <source>.containsAnyMatchingElements()</source>
          <target state="translated">.containsAnyMatchingElements()</target>
        </trans-unit>
        <trans-unit id="eb111a4e7dd1e0174280b80cbf5319e13fe27a00" translate="yes" xml:space="preserve">
          <source>.containsAnyMatchingElements(patternNodes) =&amp;gt; Boolean</source>
          <target state="translated">.containsAnyMatchingElements (patternNodes) =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="534feff6faf088563474620cea82f4aaea7e5289" translate="yes" xml:space="preserve">
          <source>.containsMatchingElement()</source>
          <target state="translated">.containsMatchingElement()</target>
        </trans-unit>
        <trans-unit id="5f8676c8f0e043646dbb88e91aeb0f82b8036131" translate="yes" xml:space="preserve">
          <source>.containsMatchingElement(patternNode) =&amp;gt; Boolean</source>
          <target state="translated">.containsMatchingElement (patternNode) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="5390b492c200f9bc9d8ca82a99cb8e8ee22173ac" translate="yes" xml:space="preserve">
          <source>.context()</source>
          <target state="translated">.context()</target>
        </trans-unit>
        <trans-unit id="1d4714c41ab23fa4661aeae5889745358a64538a" translate="yes" xml:space="preserve">
          <source>.context([key]) =&amp;gt; Any</source>
          <target state="translated">.context ([key]) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="45cd57a7a40b4bdf7697e22f5ac4e03e13e68bf3" translate="yes" xml:space="preserve">
          <source>.debug()</source>
          <target state="translated">.debug()</target>
        </trans-unit>
        <trans-unit id="2d1ea8e4d1a538c2a93c82d5cd08aa5963d02893" translate="yes" xml:space="preserve">
          <source>.debug([options]) =&amp;gt; String</source>
          <target state="translated">.debug ([параметры]) =&amp;gt; Строка</target>
        </trans-unit>
        <trans-unit id="dc533af2ffaf3e7082e18033dd4326061e252995" translate="yes" xml:space="preserve">
          <source>.detach()</source>
          <target state="translated">.detach()</target>
        </trans-unit>
        <trans-unit id="057ba754cd8b7b3865bd7cdb204389450df4bb44" translate="yes" xml:space="preserve">
          <source>.detach() =&amp;gt; void</source>
          <target state="translated">.detach () =&amp;gt; пусто</target>
        </trans-unit>
        <trans-unit id="ec19cef49c8347e22e2ebe30e5fcf46d38a4625d" translate="yes" xml:space="preserve">
          <source>.dive()</source>
          <target state="translated">.dive()</target>
        </trans-unit>
        <trans-unit id="86843d52501cb9ccf8a04ec087bb18bed269f684" translate="yes" xml:space="preserve">
          <source>.dive([options]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.dive ([параметры]) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="21f8e36738a2165e31b4ebb61a08953aa2c35fac" translate="yes" xml:space="preserve">
          <source>.equals()</source>
          <target state="translated">.equals()</target>
        </trans-unit>
        <trans-unit id="e02a0f57f0c635dc001657815d66d0eb539532a9" translate="yes" xml:space="preserve">
          <source>.equals(node) =&amp;gt; Boolean</source>
          <target state="translated">.equals (узел) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="ca50fef1c86f80ecac1245e21788e4a5584ac738" translate="yes" xml:space="preserve">
          <source>.every()</source>
          <target state="translated">.every()</target>
        </trans-unit>
        <trans-unit id="4f2636aaa4ae31aa951517d315cf088fd24500a5" translate="yes" xml:space="preserve">
          <source>.every(selector) =&amp;gt; Boolean</source>
          <target state="translated">.every (селектор) =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="3ab1a3ec7be4299006dcdaac98b75236782ba572" translate="yes" xml:space="preserve">
          <source>.everyWhere()</source>
          <target state="translated">.everyWhere()</target>
        </trans-unit>
        <trans-unit id="7f83620423e5555bf3fb3819ce861bf7b824e8eb" translate="yes" xml:space="preserve">
          <source>.everyWhere(fn) =&amp;gt; Boolean</source>
          <target state="translated">.everyWhere (fn) =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="fd80251f038b3e506519cba3204e2a5073109ce8" translate="yes" xml:space="preserve">
          <source>.exists()</source>
          <target state="translated">.exists()</target>
        </trans-unit>
        <trans-unit id="f84416a1f2a7ce452f7d0443c760082e3ed70a33" translate="yes" xml:space="preserve">
          <source>.exists([selector]) =&amp;gt; Boolean</source>
          <target state="translated">.exists ([селектор]) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="0b55f75d20e84ea4218ae334a687431d8b584627" translate="yes" xml:space="preserve">
          <source>.filter()</source>
          <target state="translated">.filter()</target>
        </trans-unit>
        <trans-unit id="29faa2e721032dcd210cba4e24c12e6ce3a08301" translate="yes" xml:space="preserve">
          <source>.filter(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.filter (селектор) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8bef3a7e7f8bba1b235334765d5391d3b1a93843" translate="yes" xml:space="preserve">
          <source>.filter(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.filter (селектор) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="0769a90c91e56a682799c8f50377f470b45f2ce6" translate="yes" xml:space="preserve">
          <source>.filterWhere()</source>
          <target state="translated">.filterWhere()</target>
        </trans-unit>
        <trans-unit id="f81fab64a06c696b861a96e443a7da0b316449ba" translate="yes" xml:space="preserve">
          <source>.filterWhere(fn) =&amp;gt; ReactWrapper</source>
          <target state="translated">.filterWhere (fn) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8fe3b7d79081909c3f3aa6e6bf925d8067338fc2" translate="yes" xml:space="preserve">
          <source>.filterWhere(fn) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.filterWhere (fn) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="d25980948b24cf9ba73d9afbc5d63be60b6e77fb" translate="yes" xml:space="preserve">
          <source>.find()</source>
          <target state="translated">.find()</target>
        </trans-unit>
        <trans-unit id="02b22a88fba3ca639cda77a3738bfd5a083616be" translate="yes" xml:space="preserve">
          <source>.find(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.find (селектор) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="b5b2cdeedbddb2b9e0dd339e704fdc15f7ee48b0" translate="yes" xml:space="preserve">
          <source>.find(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.find (селектор) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="fe4cef07185b34ef5a1edd1f59f6bdc340e2f14d" translate="yes" xml:space="preserve">
          <source>.findWhere()</source>
          <target state="translated">.findWhere()</target>
        </trans-unit>
        <trans-unit id="4522f664ea70e96c04493b4c2421b6fbc341edff" translate="yes" xml:space="preserve">
          <source>.findWhere(fn) =&amp;gt; ReactWrapper</source>
          <target state="translated">.findWhere (fn) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="f9361e3664c8d186281641bf5b33ac6968f699cd" translate="yes" xml:space="preserve">
          <source>.findWhere(fn) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.findWhere (fn) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="3019bf6f4baaced1f2405ef293a2e70aa8e6b35f" translate="yes" xml:space="preserve">
          <source>.first()</source>
          <target state="translated">.first()</target>
        </trans-unit>
        <trans-unit id="504403670f4cfbe627bf49f986521d609bccc10d" translate="yes" xml:space="preserve">
          <source>.first() =&amp;gt; ReactWrapper</source>
          <target state="translated">.first () =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="1266e12ca3fcbff49b9153936d1cbdd464b16583" translate="yes" xml:space="preserve">
          <source>.first() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.first () =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="fe5a1f4be45a725a6f693d5215c88479571204be" translate="yes" xml:space="preserve">
          <source>.forEach()</source>
          <target state="translated">.forEach()</target>
        </trans-unit>
        <trans-unit id="816bb6531a6e51f14c34c08e89889d61404e4b1a" translate="yes" xml:space="preserve">
          <source>.forEach(fn) =&amp;gt; Self</source>
          <target state="translated">.forEach (fn) =&amp;gt; Самостоятельно</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">.get()</target>
        </trans-unit>
        <trans-unit id="abf3e5898200ee797859cabf6eb8c6d5e3ca78e2" translate="yes" xml:space="preserve">
          <source>.get(index) =&amp;gt; ReactElement</source>
          <target state="translated">.get (индекс) =&amp;gt; ReactElement</target>
        </trans-unit>
        <trans-unit id="a826ca3897f1b51db136e6f06bac7bd2f2725c57" translate="yes" xml:space="preserve">
          <source>.getDOMNode()</source>
          <target state="translated">.getDOMNode()</target>
        </trans-unit>
        <trans-unit id="670587dc1da12bb542378b048260839f68e78055" translate="yes" xml:space="preserve">
          <source>.getDOMNode() =&amp;gt; DOMComponent</source>
          <target state="translated">.getDOMNode () =&amp;gt; DOMComponent</target>
        </trans-unit>
        <trans-unit id="fa3c68d6722d39cbe280342bdac7c1374ec80ea6" translate="yes" xml:space="preserve">
          <source>.getElement()</source>
          <target state="translated">.getElement()</target>
        </trans-unit>
        <trans-unit id="a9277cf38fdd9903e0448bbaaccd49cdec485c25" translate="yes" xml:space="preserve">
          <source>.getElement() =&amp;gt; ReactElement</source>
          <target state="translated">.getElement () =&amp;gt; ReactElement</target>
        </trans-unit>
        <trans-unit id="39c84e44774d70ee1ff406bb0d8d525a9bbbb168" translate="yes" xml:space="preserve">
          <source>.getElements()</source>
          <target state="translated">.getElements()</target>
        </trans-unit>
        <trans-unit id="2eb44e54e302031bd767cb041ac1892539521033" translate="yes" xml:space="preserve">
          <source>.getElements() =&amp;gt; Array&amp;lt;ReactElement&amp;gt;</source>
          <target state="translated">.getElements () =&amp;gt; Массив &amp;lt;ReactElement&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e1e4aa6ee3239f436aba07c1b34245bd955bb721" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent()</source>
          <target state="translated">.getWrappingComponent()</target>
        </trans-unit>
        <trans-unit id="91cd8c7a91da5e0badd42941b890ac37a25cca14" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent() =&amp;gt; ReactWrapper</source>
          <target state="translated">.getWrappingComponent () =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="83a4c345b5ced26ef736327504882247ed8e00ff" translate="yes" xml:space="preserve">
          <source>.getWrappingComponent() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.getWrappingComponent () =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="96124e5fb1d7cbc90c498505fdd9504eeca52dc0" translate="yes" xml:space="preserve">
          <source>.hasClass()</source>
          <target state="translated">.hasClass()</target>
        </trans-unit>
        <trans-unit id="fce92fe27ebcd4f05f230d9f2ddf912b7e11fa47" translate="yes" xml:space="preserve">
          <source>.hasClass(className) =&amp;gt; Boolean</source>
          <target state="translated">.hasClass (имя класса) =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="69989229c5af2f1ca4fda8d2af39b3a0caf1b912" translate="yes" xml:space="preserve">
          <source>.hostNodes()</source>
          <target state="translated">.hostNodes()</target>
        </trans-unit>
        <trans-unit id="bcf96420ac4419075504f3bf23811b7ed71814d8" translate="yes" xml:space="preserve">
          <source>.hostNodes() =&amp;gt; ReactWrapper</source>
          <target state="translated">.hostNodes () =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="8586889897289bf28f49342f8acd773dab787d87" translate="yes" xml:space="preserve">
          <source>.hostNodes() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.hostNodes () =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="f8a162560934b258b9bf667f9ed261d5ab062168" translate="yes" xml:space="preserve">
          <source>.html()</source>
          <target state="translated">.html()</target>
        </trans-unit>
        <trans-unit id="383e56fa39edd2e88842e29cc73c446186ee713d" translate="yes" xml:space="preserve">
          <source>.html() =&amp;gt; String</source>
          <target state="translated">.html () =&amp;gt; Строка</target>
        </trans-unit>
        <trans-unit id="5c1cae81e92716725038ef8ff005330a2be999cd" translate="yes" xml:space="preserve">
          <source>.instance()</source>
          <target state="translated">.instance()</target>
        </trans-unit>
        <trans-unit id="5b32cce58776e6ca9e5244d5c58a2d5f7b5e57e7" translate="yes" xml:space="preserve">
          <source>.instance() =&amp;gt; ReactComponent</source>
          <target state="translated">.instance () =&amp;gt; ReactComponent</target>
        </trans-unit>
        <trans-unit id="40fc0a74dacf15f75cb9f89cf88ae4d893036b67" translate="yes" xml:space="preserve">
          <source>.invoke()</source>
          <target state="translated">.invoke()</target>
        </trans-unit>
        <trans-unit id="44b0d7d0b56149929fb968729a83b4a59ab9b54d" translate="yes" xml:space="preserve">
          <source>.invoke(invokePropName)(...args) =&amp;gt; Any</source>
          <target state="translated">.invoke (invokePropName) (... args) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="9c88f00c33b931df9c0dadce4b821d223b509078" translate="yes" xml:space="preserve">
          <source>.invoke(propName)(...args) =&amp;gt; Any</source>
          <target state="translated">.invoke (propName) (... args) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="efa9cbe5b501feebb73d3f581c22f3f9623d6901" translate="yes" xml:space="preserve">
          <source>.is()</source>
          <target state="translated">.is()</target>
        </trans-unit>
        <trans-unit id="98ea7cd832986b42fd7ed641390f1ef7429d7ff5" translate="yes" xml:space="preserve">
          <source>.is(selector) =&amp;gt; Boolean</source>
          <target state="translated">.is (селектор) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="b13bdfefb4929bf201197f3fe6779be602e64f6f" translate="yes" xml:space="preserve">
          <source>.isEmpty()</source>
          <target state="translated">.isEmpty()</target>
        </trans-unit>
        <trans-unit id="9d83c5885a258aa1fd96fa45e7ddcd047d2cd6c0" translate="yes" xml:space="preserve">
          <source>.isEmpty() =&amp;gt; Boolean</source>
          <target state="translated">.isEmpty () =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="227fda682c609959f3a8e305093428ff300cc889" translate="yes" xml:space="preserve">
          <source>.isEmptyRender()</source>
          <target state="translated">.isEmptyRender()</target>
        </trans-unit>
        <trans-unit id="12a17da79b6466b01d697e5abf7fcb73f0b4ff6d" translate="yes" xml:space="preserve">
          <source>.isEmptyRender() =&amp;gt; Boolean</source>
          <target state="translated">.isEmptyRender () =&amp;gt; Логическое</target>
        </trans-unit>
        <trans-unit id="0c1c680b54198b881b9b79fe1154835d63194e2b" translate="yes" xml:space="preserve">
          <source>.key()</source>
          <target state="translated">.key()</target>
        </trans-unit>
        <trans-unit id="7238d01202ba3a2f08c1553efc4c6e14b957efe4" translate="yes" xml:space="preserve">
          <source>.key() =&amp;gt; String</source>
          <target state="translated">.key () =&amp;gt; Строка</target>
        </trans-unit>
        <trans-unit id="4e4ab3cdd4f7b5e0d93df5067004e69bdd8ee5e6" translate="yes" xml:space="preserve">
          <source>.last()</source>
          <target state="translated">.last()</target>
        </trans-unit>
        <trans-unit id="2c1c0f2b70ed563c9efc8e9d0349ce614101f56f" translate="yes" xml:space="preserve">
          <source>.last() =&amp;gt; ReactWrapper</source>
          <target state="translated">.last () =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="deb51db40536307a023e05a60dabd9c8c8402f59" translate="yes" xml:space="preserve">
          <source>.last() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.last () =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="3185d17866a519bedb219fdba7b49006d6c86ef6" translate="yes" xml:space="preserve">
          <source>.map()</source>
          <target state="translated">.map()</target>
        </trans-unit>
        <trans-unit id="5b523bc1eef378558ad363f467bffe2184386a65" translate="yes" xml:space="preserve">
          <source>.map(fn) =&amp;gt; Array&amp;lt;Any&amp;gt;</source>
          <target state="translated">.map (fn) =&amp;gt; Массив &amp;lt;Любой&amp;gt;</target>
        </trans-unit>
        <trans-unit id="83aa89b3aa70798bcaf77b9d08564b9cbed0bce0" translate="yes" xml:space="preserve">
          <source>.matchesElement()</source>
          <target state="translated">.matchesElement()</target>
        </trans-unit>
        <trans-unit id="fec3c1d0b642f316fb11adfd7308990d1aca275c" translate="yes" xml:space="preserve">
          <source>.matchesElement(patternNode) =&amp;gt; Boolean</source>
          <target state="translated">.matchesElement (patternNode) =&amp;gt; Логический</target>
        </trans-unit>
        <trans-unit id="8c90cb77e8dbf9f300dc0f8f7482b18a4d3bb6ee" translate="yes" xml:space="preserve">
          <source>.mount()</source>
          <target state="translated">.mount()</target>
        </trans-unit>
        <trans-unit id="6f375214d6aa98e8643f30818c02a8340fe5c2e9" translate="yes" xml:space="preserve">
          <source>.mount() =&amp;gt; Self</source>
          <target state="translated">.mount () =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="4fc14749d33e7880cd7245d6a5aad8f3db40214b" translate="yes" xml:space="preserve">
          <source>.name()</source>
          <target state="translated">.name()</target>
        </trans-unit>
        <trans-unit id="398669416f081dfe7e17e4a60f707220f932cb66" translate="yes" xml:space="preserve">
          <source>.name() =&amp;gt; String|null</source>
          <target state="translated">.name () =&amp;gt; Строка | null</target>
        </trans-unit>
        <trans-unit id="31bffc417e9e69c3c4257c87226e3d355237fc02" translate="yes" xml:space="preserve">
          <source>.not()</source>
          <target state="translated">.not()</target>
        </trans-unit>
        <trans-unit id="09d056f13f599eb2cb50c6e31bdb360e84ada0aa" translate="yes" xml:space="preserve">
          <source>.not(selector) =&amp;gt; ReactWrapper</source>
          <target state="translated">.not (селектор) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="296ca420d1340afa5c6c1110333e6bc779ab1799" translate="yes" xml:space="preserve">
          <source>.not(selector) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.not (селектор) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="9a6644c290f123044e7fc356a4a38b24950a4b84" translate="yes" xml:space="preserve">
          <source>.parent()</source>
          <target state="translated">.parent()</target>
        </trans-unit>
        <trans-unit id="157c10297175a91760c6698dfbbfcef62d8d8509" translate="yes" xml:space="preserve">
          <source>.parent() =&amp;gt; ReactWrapper</source>
          <target state="translated">.parent () =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="3388f58890019e4fbf073601b1f39120d2659c0c" translate="yes" xml:space="preserve">
          <source>.parent() =&amp;gt; ShallowWrapper</source>
          <target state="translated">.parent () =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="b0f343cf54dddc7e306aa70004c350ac5ab3d359" translate="yes" xml:space="preserve">
          <source>.parents()</source>
          <target state="translated">.parents()</target>
        </trans-unit>
        <trans-unit id="a7a23f28f538d184d310aa4ad2bce84c9b521f6f" translate="yes" xml:space="preserve">
          <source>.parents([selector]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.parents ([селектор]) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="affcfae973ca424b560910186f15acc2debd8124" translate="yes" xml:space="preserve">
          <source>.parents([selector]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.parents ([селектор]) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="ce38a626c733ea5a44689d8d9d6e57d62e5e3143" translate="yes" xml:space="preserve">
          <source>.prop()</source>
          <target state="translated">.prop()</target>
        </trans-unit>
        <trans-unit id="bd88d06ae2ed8f126cb099b54da1e1fa783a6bfc" translate="yes" xml:space="preserve">
          <source>.prop(key) =&amp;gt; Any</source>
          <target state="translated">.prop (key) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="2754e5782485dadee6f6cdc682297c0245c652dd" translate="yes" xml:space="preserve">
          <source>.props()</source>
          <target state="translated">.props()</target>
        </trans-unit>
        <trans-unit id="8f7e831ebbc9064e895998b5e76d957d8bfd1910" translate="yes" xml:space="preserve">
          <source>.props() =&amp;gt; Object</source>
          <target state="translated">.props () =&amp;gt; Объект</target>
        </trans-unit>
        <trans-unit id="d0f4b4460b8db067171b431083b80dc1bb7de9b4" translate="yes" xml:space="preserve">
          <source>.reduce()</source>
          <target state="translated">.reduce()</target>
        </trans-unit>
        <trans-unit id="d79683073d4de7675b25a146fa5ab15d54805013" translate="yes" xml:space="preserve">
          <source>.reduce(fn[, initialValue]) =&amp;gt; Any</source>
          <target state="translated">.reduce (fn [, initialValue]) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="a98dabe2456633c8c3140e65a41fab916ad295f1" translate="yes" xml:space="preserve">
          <source>.reduceRight()</source>
          <target state="translated">.reduceRight()</target>
        </trans-unit>
        <trans-unit id="b1621478e672d323f9dc11df5468705525e6b02f" translate="yes" xml:space="preserve">
          <source>.reduceRight(fn[, initialValue]) =&amp;gt; Any</source>
          <target state="translated">.reduceRight (fn [, initialValue]) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="08bc4d97c3fd194ed0ec7fb4de15a2af94513c87" translate="yes" xml:space="preserve">
          <source>.ref()</source>
          <target state="translated">.ref()</target>
        </trans-unit>
        <trans-unit id="e7acd1711a9c4243c13f81f3fe3f2b7ba73e1856" translate="yes" xml:space="preserve">
          <source>.ref(refName) =&amp;gt; ReactComponent | HTMLElement</source>
          <target state="translated">.ref (refName) =&amp;gt; ReactComponent | HTMLElement</target>
        </trans-unit>
        <trans-unit id="1a388604a7dd5ecab37a223d2c0246def5b8740b" translate="yes" xml:space="preserve">
          <source>.render()</source>
          <target state="translated">.render()</target>
        </trans-unit>
        <trans-unit id="23ba699ed33caf422f0c7e0e965b8f673d6ec074" translate="yes" xml:space="preserve">
          <source>.render() =&amp;gt; CheerioWrapper</source>
          <target state="translated">.render () =&amp;gt; CheerioWrapper</target>
        </trans-unit>
        <trans-unit id="78980199f2448e570e8b61a439a689bbca20beaa" translate="yes" xml:space="preserve">
          <source>.renderProp()</source>
          <target state="translated">.renderProp()</target>
        </trans-unit>
        <trans-unit id="f1eda17f39fa1e19903d68c3a9466ff8347e10cd" translate="yes" xml:space="preserve">
          <source>.renderProp(propName)(...args) =&amp;gt; ReactWrapper</source>
          <target state="translated">.renderProp (propName) (... args) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="c216e53c7e5c23d915000858905661fc723b33b5" translate="yes" xml:space="preserve">
          <source>.renderProp(propName)(...args) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.renderProp (propName) (... args) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="118f901db477623cab89e5d732b1e96b850f79f4" translate="yes" xml:space="preserve">
          <source>.setContext()</source>
          <target state="translated">.setContext()</target>
        </trans-unit>
        <trans-unit id="0f68594a4f9e414a580a9f8791e81173ab0260e8" translate="yes" xml:space="preserve">
          <source>.setContext(context) =&amp;gt; Self</source>
          <target state="translated">.setContext (контекст) =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="a16f7316d578f41213bb2b50c4143a7b4e924706" translate="yes" xml:space="preserve">
          <source>.setProps()</source>
          <target state="translated">.setProps()</target>
        </trans-unit>
        <trans-unit id="ec172a403f07851eaf439bb2959a3181071ed93f" translate="yes" xml:space="preserve">
          <source>.setProps(nextProps[, callback]) =&amp;gt; Self</source>
          <target state="translated">.setProps (nextProps [, callback]) =&amp;gt; Самостоятельно</target>
        </trans-unit>
        <trans-unit id="f38e67f9c6b8ce2a71b0ad56d1cf4e00852ab269" translate="yes" xml:space="preserve">
          <source>.setState()</source>
          <target state="translated">.setState()</target>
        </trans-unit>
        <trans-unit id="c6f0d961b61e15edbe7d4711a89e4de36e69ea7c" translate="yes" xml:space="preserve">
          <source>.setState(nextState[, callback]) =&amp;gt; Self</source>
          <target state="translated">.setState (nextState [, callback]) =&amp;gt; Самостоятельно</target>
        </trans-unit>
        <trans-unit id="0d16ffaaa4298d300567e9d0fcd258630879ff12" translate="yes" xml:space="preserve">
          <source>.shallow()</source>
          <target state="translated">.shallow()</target>
        </trans-unit>
        <trans-unit id="04f8eea8f4e957826ff131c127f89d2a7b11d903" translate="yes" xml:space="preserve">
          <source>.shallow([options]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.shallow ([параметры]) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="ef687395a5a18042048d3f16eb111db9b0b67d03" translate="yes" xml:space="preserve">
          <source>.simulate()</source>
          <target state="translated">.simulate()</target>
        </trans-unit>
        <trans-unit id="bc132935223f8667ec7b2eb415d11fb3e011e485" translate="yes" xml:space="preserve">
          <source>.simulate(event[, ...args]) =&amp;gt; Self</source>
          <target state="translated">.simulate (event [, ... args]) =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="d2b5ce446417baaf5d35ec54daef1adc93b4673d" translate="yes" xml:space="preserve">
          <source>.simulate(event[, mock]) =&amp;gt; Self</source>
          <target state="translated">.simulate (event [, mock]) =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="6005ec4af456bd12d9dfe9c089bbd4a731800a82" translate="yes" xml:space="preserve">
          <source>.simulateError()</source>
          <target state="translated">.simulateError()</target>
        </trans-unit>
        <trans-unit id="ae43b3030032e64a12b11112a7d6ffdfbfe50a69" translate="yes" xml:space="preserve">
          <source>.simulateError(error) =&amp;gt; Self</source>
          <target state="translated">.simulateError (error) =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="6be3698ab08268d63e0d30c335775d92e26f8a1f" translate="yes" xml:space="preserve">
          <source>.slice()</source>
          <target state="translated">.slice()</target>
        </trans-unit>
        <trans-unit id="27bcc7ab9f4eef5bc0d4e720e26ecfa0f35a7f06" translate="yes" xml:space="preserve">
          <source>.slice([begin[, end]]) =&amp;gt; ReactWrapper</source>
          <target state="translated">.slice ([начало [, конец]]) =&amp;gt; ReactWrapper</target>
        </trans-unit>
        <trans-unit id="795077cf5e5e39a93e2da187dd91e6aa21847a4c" translate="yes" xml:space="preserve">
          <source>.slice([begin[, end]]) =&amp;gt; ShallowWrapper</source>
          <target state="translated">.slice ([начало [, конец]]) =&amp;gt; ShallowWrapper</target>
        </trans-unit>
        <trans-unit id="a406c6b94f2b02818d5564224a8e92c8e6769bef" translate="yes" xml:space="preserve">
          <source>.some()</source>
          <target state="translated">.some()</target>
        </trans-unit>
        <trans-unit id="4d1e9a7d650c3a971b8ce20309b371d8ed6e80d3" translate="yes" xml:space="preserve">
          <source>.some(selector) =&amp;gt; Boolean</source>
          <target state="translated">.some (селектор) =&amp;gt; Boolean</target>
        </trans-unit>
        <trans-unit id="db91b0a5466b23ca1703fc6b3dfc2f9efd7815ab" translate="yes" xml:space="preserve">
          <source>.someWhere()</source>
          <target state="translated">.someWhere()</target>
        </trans-unit>
        <trans-unit id="7021962ac940244958d17872c43766529128d9f5" translate="yes" xml:space="preserve">
          <source>.someWhere(fn) =&amp;gt; Boolean</source>
          <target state="translated">.someWhere (fn) =&amp;gt; логический</target>
        </trans-unit>
        <trans-unit id="d7f5f58a8b1d480731118e6a8c59f39a5b784602" translate="yes" xml:space="preserve">
          <source>.state()</source>
          <target state="translated">.state()</target>
        </trans-unit>
        <trans-unit id="b0ee6903c2b704f6ed99f2b8821786ca1ec7ecd9" translate="yes" xml:space="preserve">
          <source>.state([key]) =&amp;gt; Any</source>
          <target state="translated">.state ([key]) =&amp;gt; Любой</target>
        </trans-unit>
        <trans-unit id="8ec03b5ff19bd2d8ace9844302870026c8848ddf" translate="yes" xml:space="preserve">
          <source>.tap()</source>
          <target state="translated">.tap()</target>
        </trans-unit>
        <trans-unit id="04b7081cd8a623b41cb7527c545d3960d7c3cfdc" translate="yes" xml:space="preserve">
          <source>.tap(intercepter) =&amp;gt; Self</source>
          <target state="translated">.tap (intercepter) =&amp;gt; Самостоятельно</target>
        </trans-unit>
        <trans-unit id="a6e2a5dac461b86fb479ea7d0eac6d40bb267b05" translate="yes" xml:space="preserve">
          <source>.text()</source>
          <target state="translated">.text()</target>
        </trans-unit>
        <trans-unit id="d36646b5bf94f76416b5820ad0940c22212f7a2e" translate="yes" xml:space="preserve">
          <source>.text() =&amp;gt; String</source>
          <target state="translated">.text () =&amp;gt; Строка</target>
        </trans-unit>
        <trans-unit id="f5fb766a24e15073c66504e0601b39744e6a61ce" translate="yes" xml:space="preserve">
          <source>.type()</source>
          <target state="translated">.type()</target>
        </trans-unit>
        <trans-unit id="0b8d2c430807f68da74898f1f4cfa44484d47fc5" translate="yes" xml:space="preserve">
          <source>.type() =&amp;gt; String | Function | null</source>
          <target state="translated">.type () =&amp;gt; Строка | Функция | ноль</target>
        </trans-unit>
        <trans-unit id="32ed84e20fddb945f562e9c1fe8c9794b1468d6f" translate="yes" xml:space="preserve">
          <source>.unmount()</source>
          <target state="translated">.unmount()</target>
        </trans-unit>
        <trans-unit id="a258de79d8d9d49c02609976ddcc2228895be173" translate="yes" xml:space="preserve">
          <source>.unmount() =&amp;gt; Self</source>
          <target state="translated">.unmount () =&amp;gt; Самостоятельная</target>
        </trans-unit>
        <trans-unit id="586e51964c7545b834914728b8253d36ec546cb3" translate="yes" xml:space="preserve">
          <source>.update()</source>
          <target state="translated">.update()</target>
        </trans-unit>
        <trans-unit id="2856b9d7b79be0c2de2cdd07199f94e619fb5a67" translate="yes" xml:space="preserve">
          <source>.update() =&amp;gt; Self</source>
          <target state="translated">.update () =&amp;gt; Самостоятельно</target>
        </trans-unit>
        <trans-unit id="ee8a90ef4fe3af3dd1dd1ea4967de66ce9d5abcc" translate="yes" xml:space="preserve">
          <source>1. A Valid CSS Selector</source>
          <target state="translated">1.Действительный селектор CSS</target>
        </trans-unit>
        <trans-unit id="16cc99d3aeb4219b6b9e231273a866610cdd72b9" translate="yes" xml:space="preserve">
          <source>2. A React Component Constructor</source>
          <target state="translated">2.Конструктор реактивных компонентов</target>
        </trans-unit>
        <trans-unit id="2a41214233a248a59f5e53c8b00f3134c3359c56" translate="yes" xml:space="preserve">
          <source>3. A React Component&amp;rsquo;s displayName</source>
          <target state="translated">3. displayName компонента React.</target>
        </trans-unit>
        <trans-unit id="93c810769c6beb69d94c8f5bb36123fc05c7bf4b" translate="yes" xml:space="preserve">
          <source>3rd Party Adapters</source>
          <target state="translated">сторонние адаптеры</target>
        </trans-unit>
        <trans-unit id="65240fc1a8746cd417ff1070cb3328300500aa5e" translate="yes" xml:space="preserve">
          <source>4. Object Property Selector</source>
          <target state="translated">4.Выбор свойств объекта</target>
        </trans-unit>
        <trans-unit id="2811c42d39d2139383e3b6c619e111ba4f94f664" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - retrieve a wrapper node by index</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - получить узел-оболочку по индексу</target>
        </trans-unit>
        <trans-unit id="97d33cb61e97fa7293d2efe426189962f015888a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - retrieve any wrapper node</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - получить любой узел-оболочку</target>
        </trans-unit>
        <trans-unit id="f055a7f21c03264d3d09b4ed70eab2c6ca410dab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - same, but returns the React node in a single-node wrapper.</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - то же самое, но возвращает узел React в одноузловой оболочке .</target>
        </trans-unit>
        <trans-unit id="ea85b86cc9dabebc9cd18bb816a7486eae910ca8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - retrieve a wrapper node by index</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - получить узел оболочки по индексу</target>
        </trans-unit>
        <trans-unit id="6cb2a53541705f018753c33c49a7b3d9d60eb9e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - retrieve any wrapper node</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - получить любой узел-оболочку</target>
        </trans-unit>
        <trans-unit id="e0a229af785f3d2f31cb235f6d4e4c646e64c584" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;at&quot;&gt;&lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - same, but returns the React node in a single-node wrapper.</source>
          <target state="translated">&lt;a href=&quot;at&quot;&gt; &lt;code&gt;.at(index) =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - то же самое, но возвращает узел React в одноузловой оболочке .</target>
        </trans-unit>
        <trans-unit id="c098b77005a58c62d20e9b80e78b8a86bf083119" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsallmatchingelements&quot;&gt;&lt;code&gt;.containsAllMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - must match all nodes in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsallmatchingelements&quot;&gt; &lt;code&gt;.containsAllMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - должен соответствовать всем узлам в patternNodes</target>
        </trans-unit>
        <trans-unit id="b90900c070bc136bb30b1bab9ca6afe269398d8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsallmatchingelements&quot;&gt;&lt;code&gt;.containsAllMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - must match all nodes in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsallmatchingelements&quot;&gt; &lt;code&gt;.containsAllMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - должен соответствовать всем узлам в patternNodes</target>
        </trans-unit>
        <trans-unit id="57143c41e7ec9831c361364cc352c636ec1569d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsanymatchingelements&quot;&gt;&lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - must match at least one in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsanymatchingelements&quot;&gt; &lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - должен соответствовать хотя бы одному в patternNodes</target>
        </trans-unit>
        <trans-unit id="21f87e6f4a073e8abcaf89fa5a7ecaf30bffe817" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsanymatchingelements&quot;&gt;&lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - must match at least one in patternNodes</source>
          <target state="translated">&lt;a href=&quot;containsanymatchingelements&quot;&gt; &lt;code&gt;.containsAnyMatchingElements() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - должен соответствовать хотя бы одному в patternNodes</target>
        </trans-unit>
        <trans-unit id="e405a63e31346faed48cc03d4275a1fb9df2fbe9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching whole wrapper</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - правила сопоставления всей оболочки</target>
        </trans-unit>
        <trans-unit id="82107449427e29a570ef58fd9025741f5b3b80ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - searches all nodes in the wrapper, and searches their entire depth</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - ищет все узлы в оболочке и ищет их всю глубину</target>
        </trans-unit>
        <trans-unit id="ac5471c9df08f4ba7d05b00faac756734698f6a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching whole wrapper</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - правила сопоставления всей оболочки</target>
        </trans-unit>
        <trans-unit id="2fa63d229bade8fedd2767d09578d817030d0f69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;containsmatchingelement&quot;&gt;&lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - searches all nodes in the wrapper, and searches their entire depth</source>
          <target state="translated">&lt;a href=&quot;containsmatchingelement&quot;&gt; &lt;code&gt;.containsMatchingElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - ищет все узлы в оболочке и ищет их всю глубину</target>
        </trans-unit>
        <trans-unit id="8bd3e5211fe400842292b6882c53e41f80e1ac2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;first&quot;&gt;&lt;code&gt;.first() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - same as at(0)</source>
          <target state="translated">&lt;a href=&quot;first&quot;&gt; &lt;code&gt;.first() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - то же, что и в (0)</target>
        </trans-unit>
        <trans-unit id="a502bb38d5ef3203f1a4af58d72b938822aaebb6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;first&quot;&gt;&lt;code&gt;.first() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - same as at(0)</source>
          <target state="translated">&lt;a href=&quot;first&quot;&gt; &lt;code&gt;.first() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - то же, что и в (0)</target>
        </trans-unit>
        <trans-unit id="f551e8f0dd857a7874e38ab851f40663dfde9e3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;get&quot;&gt;&lt;code&gt;.get(index) =&amp;gt; ReactElement&lt;/code&gt;&lt;/a&gt; - same, but returns the React node itself, with no wrapper.</source>
          <target state="translated">&lt;a href=&quot;get&quot;&gt; &lt;code&gt;.get(index) =&amp;gt; ReactElement&lt;/code&gt; &lt;/a&gt; - то же самое, но возвращает сам узел React, без оболочки.</target>
        </trans-unit>
        <trans-unit id="edf02a111175028c4817932702793334973423cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jasmine-enzyme&quot;&gt;&lt;code&gt;jasmine-enzyme&lt;/code&gt;&lt;/a&gt; with Jasmine.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jasmine-enzyme&quot;&gt; &lt;code&gt;jasmine-enzyme&lt;/code&gt; &lt;/a&gt; с жасмином .</target>
        </trans-unit>
        <trans-unit id="f0d88e0aae00969587db2115975c3185ef4e01a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme&quot;&gt;&lt;code&gt;jest-enzyme&lt;/code&gt;&lt;/a&gt; with Jest.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/FormidableLabs/enzyme-matchers/tree/master/packages/jest-enzyme&quot;&gt; &lt;code&gt;jest-enzyme&lt;/code&gt; &lt;/a&gt; с Jest.</target>
        </trans-unit>
        <trans-unit id="507e02a6ff283804bde03960448e32f3957d56f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/PsychoLlama/expect-enzyme&quot;&gt;&lt;code&gt;expect-enzyme&lt;/code&gt;&lt;/a&gt; for expect.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/PsychoLlama/expect-enzyme&quot;&gt; &lt;code&gt;expect-enzyme&lt;/code&gt; &lt;/a&gt; для ожидания.</target>
        </trans-unit>
        <trans-unit id="66287bce8deb635bb10c10ca9a6e419d20301434" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/hapijs/lab&quot;&gt;Lab&lt;/a&gt; is a simple test utility for node &amp;amp; part of the &lt;a href=&quot;https://github.com/hapijs/hapi&quot;&gt;Hapi.js&lt;/a&gt; framework universe. Lab's initial code borrowed heavily from &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt;. &lt;a href=&quot;https://github.com/hapijs/code&quot;&gt;Code&lt;/a&gt; is Lab's standard assertion library and was created as a direct rewrite of &lt;a href=&quot;https://github.com/chaijs&quot;&gt;Chai&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/hapijs/lab&quot;&gt;Lab&lt;/a&gt; - это простая тестовая утилита для узла и части &lt;a href=&quot;https://github.com/hapijs/hapi&quot;&gt;вселенной&lt;/a&gt; фреймворка Hapi.js. Исходный код Lab в значительной степени заимствован у &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt; . &lt;a href=&quot;https://github.com/hapijs/code&quot;&gt;Code&lt;/a&gt; - это стандартная библиотека утверждений Lab, созданная как прямая переработка &lt;a href=&quot;https://github.com/chaijs&quot;&gt;Chai&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f71c6509842acaf3858442f7d0147b2bd583c82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt;&lt;code&gt;chai-enzyme&lt;/code&gt;&lt;/a&gt; with Mocha/Chai.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/producthunt/chai-enzyme&quot;&gt; &lt;code&gt;chai-enzyme&lt;/code&gt; &lt;/a&gt; с Mocha / Chai.</target>
        </trans-unit>
        <trans-unit id="a475de9491ea22e21762d015fa9a7c08c5ae3b94" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/rkotze/should-enzyme&quot;&gt;&lt;code&gt;should-enzyme&lt;/code&gt;&lt;/a&gt; for should.js.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rkotze/should-enzyme&quot;&gt; &lt;code&gt;should-enzyme&lt;/code&gt; &lt;/a&gt; для should.js.</target>
        </trans-unit>
        <trans-unit id="92b334c66f661b1de1d164add2481d534e81b875" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;JSDOM&lt;/a&gt; is a JavaScript based headless browser that can be used to create a realistic testing environment.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;JSDOM&lt;/a&gt; - это автономный браузер на основе JavaScript, который можно использовать для создания реалистичной среды тестирования.</target>
        </trans-unit>
        <trans-unit id="ed267375bf43a3c8ce0c62924922e6e2d6df8946" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act()&lt;/code&gt;&lt;/a&gt; wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a4b06c863c7a5313a1f50dd48ca9cbece2ff47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matcheselement&quot;&gt;&lt;code&gt;.matchesElement() =&amp;gt; ReactWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching each node</source>
          <target state="translated">&lt;a href=&quot;matcheselement&quot;&gt; &lt;code&gt;.matchesElement() =&amp;gt; ReactWrapper&lt;/code&gt; &lt;/a&gt; - правила сопоставления каждого узла</target>
        </trans-unit>
        <trans-unit id="e5f8ceef7f672cbc69690b12c5a54bbe4a52ca5f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;matcheselement&quot;&gt;&lt;code&gt;.matchesElement() =&amp;gt; ShallowWrapper&lt;/code&gt;&lt;/a&gt; - rules for matching each node</source>
          <target state="translated">&lt;a href=&quot;matcheselement&quot;&gt; &lt;code&gt;.matchesElement() =&amp;gt; ShallowWrapper&lt;/code&gt; &lt;/a&gt; - правила сопоставления каждого узла</target>
        </trans-unit>
        <trans-unit id="4c3182f3b05e39517a65acc469503b1b62285158" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt; [optional]): A mock event object that will get passed through to the event handlers.</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; ( &lt;code&gt;Any&lt;/code&gt; [необязательно]): фиктивный объект события, который будет передан обработчикам событий.</target>
        </trans-unit>
        <trans-unit id="7d5acc4ca66b815f01b08610b04a1d41733cfbec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt; [optional]): Arguments that is passed to the prop function</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; ( &lt;code&gt;Any&lt;/code&gt; [необязательно]): аргументы, которые передаются в функцию prop</target>
        </trans-unit>
        <trans-unit id="481edbe5311b140f23ae39ad44738b021c51bfbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;...args&lt;/code&gt; (&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;...args&lt;/code&gt; ( &lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="3a0f1cbd92a9648a21322fb1caef4c03222f0248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.contains()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.contains()&lt;/code&gt; ожидает ReactElement, а не селектора (как и многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью ReactElement или JSX-выражения.</target>
        </trans-unit>
        <trans-unit id="4ce995a9da83f1ed08cbe8802542ceead4a76c4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsAllMatchingElements()&lt;/code&gt; expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array of ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsAllMatchingElements()&lt;/code&gt; ожидает массив ReactElement, а не селектор (как многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью массива ReactElement или выражения JSX.</target>
        </trans-unit>
        <trans-unit id="bfb0adc0d4f2949949d8c576392cd9e9b3444975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsAnyMatchingElements()&lt;/code&gt; expects an array of ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with an array ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsAnyMatchingElements()&lt;/code&gt; ожидает массив ReactElement, а не селектор (как многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью массива ReactElement или выражения JSX.</target>
        </trans-unit>
        <trans-unit id="e06dbaae32f0ec98c69252fc4a13797a958808a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.containsMatchingElement()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.containsMatchingElement()&lt;/code&gt; ожидает ReactElement, а не селектора (как многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью ReactElement или JSX-выражения.</target>
        </trans-unit>
        <trans-unit id="1c9dce95e5dde7f3ec4c843eb0e40f4eddb93428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.equals()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.equals()&lt;/code&gt; ожидает ReactElement, а не селектора (как и многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью ReactElement или JSX-выражения.</target>
        </trans-unit>
        <trans-unit id="6ceb9442c1571ab6874956a4d4e19fd3d260d8b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.hasClass()&lt;/code&gt; expects a class name, NOT a CSS selector. &lt;code&gt;.hasClass('.foo')&lt;/code&gt; should be &lt;code&gt;.hasClass('foo')&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.hasClass()&lt;/code&gt; ожидает имя класса, а НЕ селектор CSS. &lt;code&gt;.hasClass('.foo')&lt;/code&gt; должен быть &lt;code&gt;.hasClass('foo')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="05c149be1e957ecc67ff6c8f266eb85f316d65aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.matchesElement()&lt;/code&gt; expects a ReactElement, not a selector (like many other methods). Make sure that when you are calling it you are calling it with a ReactElement or a JSX expression.</source>
          <target state="translated">&lt;code&gt;.matchesElement()&lt;/code&gt; ожидает ReactElement, а не селектора (как и многие другие методы). Убедитесь, что когда вы вызываете его, вы вызываете его с помощью ReactElement или JSX-выражения.</target>
        </trans-unit>
        <trans-unit id="dadc7392eaff93a6f151dec5ffa53c57a3d6ba85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.setContext()&lt;/code&gt; can only be used on a wrapper that was initially created with a call to &lt;code&gt;mount()&lt;/code&gt; that includes a &lt;code&gt;context&lt;/code&gt; specified in the options argument.</source>
          <target state="translated">&lt;code&gt;.setContext()&lt;/code&gt; может использоваться только в оболочке, которая была изначально создана с помощью вызова &lt;code&gt;mount()&lt;/code&gt; которая включает &lt;code&gt;context&lt;/code&gt; указанный в аргументе options.</target>
        </trans-unit>
        <trans-unit id="f5b0ede9933d09f7cce305efd68bcb38ee0c70f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.setContext()&lt;/code&gt; can only be used on a wrapper that was initially created with a call to &lt;code&gt;shallow()&lt;/code&gt; that includes a &lt;code&gt;context&lt;/code&gt; specified in the options argument.</source>
          <target state="translated">&lt;code&gt;.setContext()&lt;/code&gt; может использоваться только в оболочке, которая изначально была создана с помощью вызова &lt;code&gt;shallow()&lt;/code&gt; который включает &lt;code&gt;context&lt;/code&gt; указанный в аргументе options.</target>
        </trans-unit>
        <trans-unit id="47f20b479e690ad91d4ce690604c96cc0811c5e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Any&lt;/code&gt;: Returns the value from the prop function</source>
          <target state="translated">&lt;code&gt;Any&lt;/code&gt; : возвращает значение из функции prop.</target>
        </trans-unit>
        <trans-unit id="ca3956b3f471852ac0595865a375e56804bdfa9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt;: Returns an array of the returned values from the mapping function..</source>
          <target state="translated">&lt;code&gt;Array&amp;lt;Any&amp;gt;&lt;/code&gt; : возвращает массив значений, возвращаемых функцией сопоставления.</target>
        </trans-unit>
        <trans-unit id="f168e046ce164dd340e724959de67593e765834f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;: The retrieved ReactElements.</source>
          <target state="translated">&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; : полученные элементы ReactElement.</target>
        </trans-unit>
        <trans-unit id="8d8fa0ac39d5ff39c167bc6e34da84502a153613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if at least one of the nodes in the current wrapper matched the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : Истина, если хотя бы один из узлов в текущей оболочке соответствует предоставленному селектору.</target>
        </trans-unit>
        <trans-unit id="68916001eb3670694fd336110a1eee869a3d74ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if at least one of the nodes in the current wrapper passed the predicate function.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : Истина, если хотя бы один из узлов в текущей оболочке передал функцию предиката.</target>
        </trans-unit>
        <trans-unit id="034499982ca2d0c2b0eada854113e064e7974855" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if every node in the current wrapper matched the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : Истина, если каждый узел в текущей оболочке соответствует предоставленному селектору.</target>
        </trans-unit>
        <trans-unit id="9ded831b0f7642ca360462b388659a86d4da5bed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: True if every node in the current wrapper passed the predicate function.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : Истина, если каждый узел в текущей оболочке передал функцию предиката.</target>
        </trans-unit>
        <trans-unit id="38a2e1c6e280f64f5c5dac519af48ee0fd1cd3ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not any nodes are on the list, or the selector had any matches.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли какие-либо узлы в списке или есть ли у селектора совпадения.</target>
        </trans-unit>
        <trans-unit id="f303e83a882a967ca1eed448cd8d046d10be2780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in it's render tree that looks like the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у текущей оболочки узел где-нибудь в дереве рендеринга, похожий на переданный.</target>
        </trans-unit>
        <trans-unit id="71b466b0a8ca3edac4a38cdbf3245ec92d786f67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in its render tree that looks like one of the array passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у текущей оболочки узел где-нибудь в дереве рендеринга, который выглядит как один из переданного массива.</target>
        </trans-unit>
        <trans-unit id="236ec5d642683b85b46e88e1db6bdad79903875c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has a node anywhere in its render tree that matches the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у текущей оболочки узел где-нибудь в дереве рендеринга, который соответствует переданному.</target>
        </trans-unit>
        <trans-unit id="0ccc1e8a3d9793f772fd21f3fba3831e5675a530" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has nodes anywhere in its render tree that looks like the nodes passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у текущей оболочки узлы где-нибудь в дереве рендеринга, которые выглядят как переданные узлы.</target>
        </trans-unit>
        <trans-unit id="958f67d6d2f85c6f8417036e625b304f1e380e31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper has nodes anywhere in its render tree that match the ones passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у текущей оболочки узлы где-либо в дереве рендеринга, которые соответствуют переданным.</target>
        </trans-unit>
        <trans-unit id="91bc1cbe19a6ec078ba2548f6effd2b47f881555" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the current wrapper match the one passed in.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : соответствует ли текущая оболочка переданной.</target>
        </trans-unit>
        <trans-unit id="58b0077e8da603b9d29b08d3976d69bb664e499c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node has found the class name.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : обнаружил ли завернутый узел имя класса.</target>
        </trans-unit>
        <trans-unit id="0db8bb128f280f6d5b52aa168b78dbae42f27fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node has the class.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : есть ли у обернутого узла класс.</target>
        </trans-unit>
        <trans-unit id="18de4c125481f7ccc7c0e0566f2f62fc5ae58fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapped node matches the provided selector.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : соответствует ли завернутый узел предоставленному селектору.</target>
        </trans-unit>
        <trans-unit id="1b3548c2141ec045588698098e7b1fd84103ff8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether or not the wrapper is empty.</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : независимо от того, пуста ли оболочка.</target>
        </trans-unit>
        <trans-unit id="498d1a37e3f4cf065b3ef21ca665393c32237377" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Boolean&lt;/code&gt;: whether the return is falsy</source>
          <target state="translated">&lt;code&gt;Boolean&lt;/code&gt; : является ли возврат ложным</target>
        </trans-unit>
        <trans-unit id="9f5a040d30516b99825141c42c2c9c4b3a3b9d2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CheerioWrapper&lt;/code&gt;: The resulting Cheerio object</source>
          <target state="translated">&lt;code&gt;CheerioWrapper&lt;/code&gt; : полученный объект Cheerio</target>
        </trans-unit>
        <trans-unit id="f47ef7bd46a1e31dcf7f7f178479ca895447473e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DOMComponent&lt;/code&gt;: The retrieved DOM component.</source>
          <target state="translated">&lt;code&gt;DOMComponent&lt;/code&gt; : полученный компонент DOM.</target>
        </trans-unit>
        <trans-unit id="f375a60bde526ef53aac5699a209193c6dd57849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactComponent | HTMLElement&lt;/code&gt;: The node that matches the provided reference name. This can be a react component instance, or an HTML element instance.</source>
          <target state="translated">&lt;code&gt;ReactComponent | HTMLElement&lt;/code&gt; : узел, соответствующий указанному ссылочному имени. Это может быть экземпляр компонента реакции или экземпляр элемента HTML.</target>
        </trans-unit>
        <trans-unit id="7c3540897075b2d39d8e77a725d0e126b5f1cc6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactComponent|DOMComponent&lt;/code&gt;: The retrieved instance.</source>
          <target state="translated">&lt;code&gt;ReactComponent|DOMComponent&lt;/code&gt; : полученный экземпляр.</target>
        </trans-unit>
        <trans-unit id="7222f070164ef0d99fceef41c6dea3f592b5dbfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactElement&lt;/code&gt;: The retrieved ReactElement.</source>
          <target state="translated">&lt;code&gt;ReactElement&lt;/code&gt; : полученный ReactElement.</target>
        </trans-unit>
        <trans-unit id="bee0e230f218bb7b2c4bef843a163084e6fe0176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactElement&lt;/code&gt;: The retrieved node.</source>
          <target state="translated">&lt;code&gt;ReactElement&lt;/code&gt; : полученный узел.</target>
        </trans-unit>
        <trans-unit id="a9de663eb7f4d7f105b692f04136babca07c27bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A &lt;code&gt;ReactWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : а &lt;code&gt;ReactWrapper&lt;/code&gt; вокруг вынесенного &lt;code&gt;wrappingComponent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4582655aa8310eb0905688aeb53705236ef6c6cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the filtered nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает отфильтрованные узлы.</target>
        </trans-unit>
        <trans-unit id="7948b094fa1017eea2b906fb9745dea27b8d12ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the first node in the set.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает первый узел в наборе.</target>
        </trans-unit>
        <trans-unit id="5896531c0043f13e1a5d16dc81e963199c62c918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the found nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает найденные узлы.</target>
        </trans-unit>
        <trans-unit id="9b5d2c552250fd8635f8c28e8126a3fa9ad30a05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the last node in the set.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает последний узел в наборе.</target>
        </trans-unit>
        <trans-unit id="2298744b854c643d921bbc0267fa204312a0491a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the node returned from the render prop.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает узел, возвращенный из опоры рендеринга.</target>
        </trans-unit>
        <trans-unit id="3c5328135437b61732739752f0411a8da54dec60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the resulting node.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает получившийся узел.</target>
        </trans-unit>
        <trans-unit id="18723bb069d9d8466478c97704c6bdbfbf9f1a53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the resulting nodes.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает результирующие узлы.</target>
        </trans-unit>
        <trans-unit id="bfef3b5efd51436e162c16f650d1ad9cca5aa849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper that wraps the retrieved node.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка, которая обертывает извлеченный узел.</target>
        </trans-unit>
        <trans-unit id="0387b02a2276159fd756a0680643a62f69e7fd29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: A new wrapper with the subset of nodes specified.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : новая оболочка с указанным подмножеством узлов.</target>
        </trans-unit>
        <trans-unit id="635c9dee7b5a17e29fbced7b656168241183b1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: Returns itself.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : возвращает себя.</target>
        </trans-unit>
        <trans-unit id="3960d95a0f3461b72fbca66cd1b92ed9e1b796b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactWrapper&lt;/code&gt;: The wrapper instance around the rendered output.</source>
          <target state="translated">&lt;code&gt;ReactWrapper&lt;/code&gt; : экземпляр оболочки вокруг визуализированного вывода.</target>
        </trans-unit>
        <trans-unit id="13395029eb6e2c6c58159f092944811c70e98cac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Self&lt;/code&gt;: the current ReactWrapper instance.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; : текущий экземпляр ReactWrapper.</target>
        </trans-unit>
        <trans-unit id="137a951ef8933ef3a343dcac318858d1149002c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Self&lt;/code&gt;: the current ShallowWrapper instance.</source>
          <target state="translated">&lt;code&gt;Self&lt;/code&gt; : текущий экземпляр ShallowWrapper.</target>
        </trans-unit>
        <trans-unit id="6bd3125828de07e4479a1b06cfacbe8ba857c4e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A &lt;code&gt;ShallowWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : а &lt;code&gt;ShallowWrapper&lt;/code&gt; вокруг вынесенного &lt;code&gt;wrappingComponent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1ae118af6da7710b58e8c4a35b0dcccb8494fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the current node after it's been shallow rendered.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает текущий узел после его неглубокой визуализации.</target>
        </trans-unit>
        <trans-unit id="65bf94eec1fc0a1ce1b1b57bf9def5048f16e8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the filtered nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает отфильтрованные узлы.</target>
        </trans-unit>
        <trans-unit id="5919deb5fa2351558423c0b98ed7c99363334d27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the first node in the set.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает первый узел в наборе.</target>
        </trans-unit>
        <trans-unit id="7fd69cc86902d52e50a641ed92ba6854cb482b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the found nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает найденные узлы.</target>
        </trans-unit>
        <trans-unit id="1e3e2a103936d5fb0feb471845cb9997d6cfb481" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the last node in the set.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает последний узел в наборе.</target>
        </trans-unit>
        <trans-unit id="95ae11db2a27f7dd025e961b483f5710f72cff13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the node after it's been shallow rendered.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает узел после его неглубокой визуализации.</target>
        </trans-unit>
        <trans-unit id="524045ff86fb59eef0e5c783652e8681e8a4b355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the node returned from the render prop.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает узел, возвращенный из опоры рендеринга.</target>
        </trans-unit>
        <trans-unit id="9c30187e5d79821ecfed0f8facce088d04280ede" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the resulting node.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает получившийся узел.</target>
        </trans-unit>
        <trans-unit id="39981da15ae70d4dc702652730943fa20833f05f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the resulting nodes.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает результирующие узлы.</target>
        </trans-unit>
        <trans-unit id="3c133c4ae8eaa3da8d5f3721e3dfc5742a1a75aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper that wraps the retrieved node.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка, которая обертывает извлеченный узел.</target>
        </trans-unit>
        <trans-unit id="75e41093f079ea2fb04d42b54ba700faf9523ea1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: A new wrapper with the subset of nodes specified.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : новая оболочка с указанным подмножеством узлов.</target>
        </trans-unit>
        <trans-unit id="3cb41a47b5c296e4977c96de68f04d09330170ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: Returns itself.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : возвращает себя.</target>
        </trans-unit>
        <trans-unit id="0f790f7e3f43dcac8008ccaba58ae318cc55a726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ShallowWrapper&lt;/code&gt;: The wrapper instance around the rendered output.</source>
          <target state="translated">&lt;code&gt;ShallowWrapper&lt;/code&gt; : экземпляр оболочки вокруг визуализированного вывода.</target>
        </trans-unit>
        <trans-unit id="ae40a0692ce974c58dc08f75bcde053d39d3e600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String | Function | null&lt;/code&gt;: The type of the node</source>
          <target state="translated">&lt;code&gt;String | Function | null&lt;/code&gt; : Тип узла</target>
        </trans-unit>
        <trans-unit id="4c378f8d810dbe6d084fa26cc3911a793dd2bcb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting HTML string</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : результирующая строка HTML.</target>
        </trans-unit>
        <trans-unit id="bed3376a1c3652a7d4d40b046a61f31538c91843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting string</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : результирующая строка</target>
        </trans-unit>
        <trans-unit id="49f34d2a1ae2aab2874a59fe6b160e08e295e1c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: The resulting string.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; : результирующая строка.</target>
        </trans-unit>
        <trans-unit id="44b96b7f35ce54b11453c132a7c6a6632fefa7bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String|null&lt;/code&gt;: The name of the current node</source>
          <target state="translated">&lt;code&gt;String|null&lt;/code&gt; : имя текущего узла</target>
        </trans-unit>
        <trans-unit id="5dcfe11dd468d02b2c1f362e60b5f1962c874959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;: Returns an array of the returned values from the mapping function...</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; : возвращает массив значений, возвращаемых функцией сопоставления ...</target>
        </trans-unit>
        <trans-unit id="c05784dd80bcb2effcbffae71b29e01f0179e16d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt; [optional]): Index from which to slice (defaults to &lt;code&gt;0&lt;/code&gt;). If negative, this is treated as &lt;code&gt;length+begin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; ( &lt;code&gt;Number&lt;/code&gt; [optional]): Индекс, от которого нужно вырезать (по умолчанию &lt;code&gt;0&lt;/code&gt; ). Если отрицательное, это рассматривается как &lt;code&gt;length+begin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52d867156356dc473edcaa854460eb821bedaa59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt; [optional]): If provided, the callback function will be executed once setProps has completed</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ( &lt;code&gt;Function&lt;/code&gt; [необязательно]): если предоставлено, функция обратного вызова будет выполнена после завершения setProps</target>
        </trans-unit>
        <trans-unit id="8436ec5686c59273394c9544f37871a46d3c2aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt; [optional]): If provided, the callback function will be executed once setState has completed</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; ( &lt;code&gt;Function&lt;/code&gt; [необязательно]): если предоставлено, функция обратного вызова будет выполнена после завершения setState</target>
        </trans-unit>
        <trans-unit id="52e1d0430ed2861e5fe25a9177807877c039c44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;children()&lt;/code&gt; now has slightly different meaning</source>
          <target state="translated">&lt;code&gt;children()&lt;/code&gt; теперь имеет немного другое значение</target>
        </trans-unit>
        <trans-unit id="4798061ed40099bd5949736a23c519cc6d7d276c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;className&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; | &lt;code&gt;RegExp&lt;/code&gt;): A single class name or a regex expression.</source>
          <target state="translated">&lt;code&gt;className&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; | &lt;code&gt;RegExp&lt;/code&gt; ): одно имя класса или выражение регулярного выражения.</target>
        </trans-unit>
        <trans-unit id="9834bdfa66c0ae1a1140ec5de43232406a69f27f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new props to merge in with the current state</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; ( &lt;code&gt;Object&lt;/code&gt; ): объект, содержащий новые свойства для слияния с текущим состоянием.</target>
        </trans-unit>
        <trans-unit id="852000135a1c2bb932006aab87e9cdfc3b9fd29f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;describeWithDOM&lt;/code&gt; API and clearing the document after every test</source>
          <target state="translated">&lt;code&gt;describeWithDOM&lt;/code&gt; API и очищать документ после каждого теста</target>
        </trans-unit>
        <trans-unit id="31c0419a77ac69c34a8b81c81f85eb42ba6ad605" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt; [optional]): Index at which to end slicing (defaults to &lt;code&gt;length&lt;/code&gt;). If negative, this is treated as &lt;code&gt;length+end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; ( &lt;code&gt;Number&lt;/code&gt; [необязательно]): Индекс, по которому следует завершить нарезку (по умолчанию - &lt;code&gt;length&lt;/code&gt; ). Если отрицательный, это рассматривается как &lt;code&gt;length+end&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94944f198e337aacfd7a6dfa7c67caa21dc5853a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; (&lt;code&gt;Any&lt;/code&gt;): The error to throw.</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; ( &lt;code&gt;Any&lt;/code&gt; ): ошибка, которую нужно выдать.</target>
        </trans-unit>
        <trans-unit id="3161c8c0aa99735c9fbfe4765fb3ba540d8491ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The event name to be simulated</source>
          <target state="translated">&lt;code&gt;event&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; ): имя события, которое будет смоделировано</target>
        </trans-unit>
        <trans-unit id="356127c657abcd44596ea44ede55d20205dd51d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;find()&lt;/code&gt; now returns host nodes and DOM nodes</source>
          <target state="translated">&lt;code&gt;find()&lt;/code&gt; теперь возвращает узлы хоста и узлы DOM</target>
        </trans-unit>
        <trans-unit id="4a83e4dc978aad4cf0d57eb0532274923b179784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ReactWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt;): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; ( &lt;code&gt;Function ( ReactWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt; ): функция сопоставления, которая будет запускаться для каждого узла в коллекции, результаты которой будут сопоставлены с возвращаемым массивом. Следует ожидать, что в качестве первого аргумента будет ReactWrapper, и он будет запущен с контекстом исходного экземпляра.</target>
        </trans-unit>
        <trans-unit id="869ad92e40b6938742688fdc09f539acefcfe8ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ReactWrapper node, Number index )&lt;/code&gt;): A callback to be run for every node in the collection. Should expect a ReactWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; ( &lt;code&gt;Function ( ReactWrapper node, Number index )&lt;/code&gt; ): обратный вызов, выполняемый для каждого узла в коллекции. Следует ожидать, что в качестве первого аргумента будет ReactWrapper, и он будет запущен с контекстом исходного экземпляра.</target>
        </trans-unit>
        <trans-unit id="bc51a6fb1a6fb2a1a61f7a64a88b2777d138dec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ShallowWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt;): A mapping function to be run for every node in the collection, the results of which will be mapped to the returned array. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; ( &lt;code&gt;Function ( ShallowWrapper node, Number index ) =&amp;gt; Any&lt;/code&gt; ): функция сопоставления, которая будет запущена для каждого узла в коллекции, результаты которой будут сопоставлены с возвращаемым массивом. Следует ожидать ShallowWrapper в качестве первого аргумента и будет выполняться с контекстом исходного экземпляра.</target>
        </trans-unit>
        <trans-unit id="ad66642de3e8d047a5f3d7475a5abb87def9d126" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function ( ShallowWrapper node, Number index )&lt;/code&gt;): A callback to be run for every node in the collection. Should expect a ShallowWrapper as the first argument, and will be run with a context of the original instance.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; ( &lt;code&gt;Function ( ShallowWrapper node, Number index )&lt;/code&gt; ): обратный вызов, выполняемый для каждого узла в коллекции. Следует ожидать ShallowWrapper в качестве первого аргумента и будет выполняться с контекстом исходного экземпляра.</target>
        </trans-unit>
        <trans-unit id="00c44962fc68d5c563425d2085bfc9f5d01fa2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fn&lt;/code&gt; (&lt;code&gt;Function&lt;/code&gt;): A reducing function to be run for every node in the collection, with the following arguments:</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; ( &lt;code&gt;Function&lt;/code&gt; ): функция сокращения, запускаемая для каждого узла в коллекции, со следующими аргументами:</target>
        </trans-unit>
        <trans-unit id="12ffa40a82b243408fc4d0bc6f5b3193129b4d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt;): A zero-based integer indicating which node to retrieve.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; ( &lt;code&gt;Number&lt;/code&gt; ): отсчитываемое от нуля целое число, указывающее, какой узел нужно получить.</target>
        </trans-unit>
        <trans-unit id="3681d764c6ae6c8cddae773f2d0dbcb9d11b5466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;Number&lt;/code&gt;): The index of the node being processed</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; ( &lt;code&gt;Number&lt;/code&gt; ): индекс обрабатываемого узла</target>
        </trans-unit>
        <trans-unit id="6f7dd04a7bec56153a7cc7c4e23ab299bd2a2167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;number&lt;/code&gt;): A zero-based integer indicating which node to retrieve.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; ( &lt;code&gt;number&lt;/code&gt; ): отсчитываемое от нуля целое число, указывающее, какой узел нужно получить.</target>
        </trans-unit>
        <trans-unit id="03287835c45577eb41b738243bb2a7b05c3698b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialValue&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt; [optional]): If provided, this will be passed in as the first argument to the first invocation of the reducing function. If omitted, the first &lt;code&gt;node&lt;/code&gt; will be provided and the iteration will begin on the second node in the collection.</source>
          <target state="translated">&lt;code&gt;initialValue&lt;/code&gt; ( &lt;code&gt;T&lt;/code&gt; [необязательно]): если предоставлено, оно будет передано в качестве первого аргумента при первом вызове функции уменьшения. Если не указан, будет предоставлен первый &lt;code&gt;node&lt;/code&gt; , и итерация начнется со второго узла в коллекции.</target>
        </trans-unit>
        <trans-unit id="94c2d2c9b862989a1013139909943aa4c914654a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intercepter&lt;/code&gt; (&lt;code&gt;Self&lt;/code&gt;): the current ReactWrapper instance.</source>
          <target state="translated">&lt;code&gt;intercepter&lt;/code&gt; ( &lt;code&gt;Self&lt;/code&gt; ): текущий экземпляр ReactWrapper.</target>
        </trans-unit>
        <trans-unit id="d647244e2d61821c17c748abdc11860408165e49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intercepter&lt;/code&gt; (&lt;code&gt;Self&lt;/code&gt;): the current ShallowWrapper instance.</source>
          <target state="translated">&lt;code&gt;intercepter&lt;/code&gt; ( &lt;code&gt;Self&lt;/code&gt; ): текущий экземпляр ShallowWrapper.</target>
        </trans-unit>
        <trans-unit id="861ca36d2296a15e45d73970988cc6d58f7dc0e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsdom v10~&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;jsdom v10~&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8fce60f3e87f2ddad5dcbef179b187e1f547382c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsdom ~&amp;lt;v10&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;jsdom ~&amp;lt;v10&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="98f98aad30dfbe2bb2b1cb83fcfbfb4ad42a8b0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; [optional]): If provided, the return value will be the &lt;code&gt;this.context[key]&lt;/code&gt; of the root component instance.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; [optional]): Если предоставлено, возвращаемое значение будет &lt;code&gt;this.context[key]&lt;/code&gt; экземпляра корневого компонента.</target>
        </trans-unit>
        <trans-unit id="0223a0a2029819b616cd556032a83aab20a69af0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt; [optional]): If provided, the return value will be the &lt;code&gt;this.state[key]&lt;/code&gt; of the root component instance.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; [optional]): Если предоставлено, возвращаемое значение будет &lt;code&gt;this.state[key]&lt;/code&gt; экземпляра корневого компонента.</target>
        </trans-unit>
        <trans-unit id="195adf515abef5dfdebcb742fa2bf341badf4b7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The prop name, that is, &lt;code&gt;this.props[key]&lt;/code&gt; or &lt;code&gt;props[key]&lt;/code&gt; for the root node of the wrapper.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; ): имя свойства, то есть &lt;code&gt;this.props[key]&lt;/code&gt; или &lt;code&gt;props[key]&lt;/code&gt; для корневого узла оболочки.</target>
        </trans-unit>
        <trans-unit id="c670cda1f21b8ff37130b0127ea2ece4ce4b93e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mock&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt; [optional]): A mock event object that will be merged with the event object passed to the handlers.</source>
          <target state="translated">&lt;code&gt;mock&lt;/code&gt; ( &lt;code&gt;Object&lt;/code&gt; [необязательно]): фиктивный объект события, который будет объединен с объектом события, переданным обработчикам.</target>
        </trans-unit>
        <trans-unit id="707d58fd86bd2f39d703ce996971f314a37fe4d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextProps&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new props to merge in with the current props</source>
          <target state="translated">&lt;code&gt;nextProps&lt;/code&gt; ( &lt;code&gt;Object&lt;/code&gt; ): объект, содержащий новые свойства для слияния с текущими свойствами.</target>
        </trans-unit>
        <trans-unit id="5a359ee87e420e93cd82b9a40ddfd8c488fc1463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextState&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt;): An object containing new state to merge in with the current state</source>
          <target state="translated">&lt;code&gt;nextState&lt;/code&gt; ( &lt;code&gt;Object&lt;/code&gt; ): объект, содержащий новое состояние для слияния с текущим состоянием</target>
        </trans-unit>
        <trans-unit id="fde5bdac4170a98d04a3fbfedc6a819b7912c735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node to render</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ReactElement&lt;/code&gt; ): узел для рендеринга</target>
        </trans-unit>
        <trans-unit id="ef191301d1201ec4a725054605fb78d76a720c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ReactElement&lt;/code&gt; ): узел, присутствие которого вы обнаруживаете в дереве рендеринга текущего экземпляра.</target>
        </trans-unit>
        <trans-unit id="8fda72b722db144d711a736a4caa59511439a3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactWrapper&lt;/code&gt;): A single-node wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ReactWrapper&lt;/code&gt; ): одноузловая оболочка вокруг обрабатываемого узла</target>
        </trans-unit>
        <trans-unit id="352ba4db1610271097ce9c88df91b079b78d72ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ReactWrapper&lt;/code&gt;): A wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ReactWrapper&lt;/code&gt; ): оболочка вокруг обрабатываемого узла</target>
        </trans-unit>
        <trans-unit id="46e8a68302a273dda03b4c56d13b53055434a478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ShallowWrapper&lt;/code&gt;): A single-node wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ShallowWrapper&lt;/code&gt; ): одноузловая оболочка вокруг обрабатываемого узла</target>
        </trans-unit>
        <trans-unit id="66786179b50f3117e247364c2721a3db158bf91b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt; (&lt;code&gt;ShallowWrapper&lt;/code&gt;): A wrapper around the node being processed</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; ( &lt;code&gt;ShallowWrapper&lt;/code&gt; ): оболочка вокруг обрабатываемого узла</target>
        </trans-unit>
        <trans-unit id="85657b57ea657261a1bcbdbe8b37dcaefceb0864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeOrNodes&lt;/code&gt; (&lt;code&gt;ReactElement|Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;): The node or array of nodes whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;nodeOrNodes&lt;/code&gt; ( &lt;code&gt;ReactElement|Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; ): узел или массив узлов, присутствие которых вы обнаруживаете в дереве визуализации текущего экземпляра.</target>
        </trans-unit>
        <trans-unit id="88d58aa31147364a4efdc9f2e8271ac0112d5de1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.attachTo&lt;/code&gt;: (&lt;code&gt;DOMElement&lt;/code&gt; [optional]): DOM Element to attach the component to.</source>
          <target state="translated">&lt;code&gt;options.attachTo&lt;/code&gt; : ( &lt;code&gt;DOMElement&lt;/code&gt; [необязательно]): элемент DOM, к которому будет прикреплен компонент.</target>
        </trans-unit>
        <trans-unit id="21105959a5a83ca5cbf39e801aada72956dcd327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.childContextTypes&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Merged contextTypes for all children of the wrapper.</source>
          <target state="translated">&lt;code&gt;options.childContextTypes&lt;/code&gt; : ( &lt;code&gt;Object&lt;/code&gt; [необязательно]): объединенные contextTypes для всех дочерних элементов оболочки.</target>
        </trans-unit>
        <trans-unit id="46aa0cc5da3f5b35ed4475d10f57c4f1068231a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.context&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Context to be passed into the component</source>
          <target state="translated">&lt;code&gt;options.context&lt;/code&gt; : ( &lt;code&gt;Object&lt;/code&gt; [необязательно]): контекст, передаваемый в компонент</target>
        </trans-unit>
        <trans-unit id="54de248eafdd73dd648d1590b64acca824dc0267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, &lt;code&gt;componentDidMount&lt;/code&gt; is not called on the component, and &lt;code&gt;componentDidUpdate&lt;/code&gt; is not called after &lt;a href=&quot;shallowwrapper/setprops&quot;&gt;&lt;code&gt;setProps&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallowwrapper/setcontext&quot;&gt;&lt;code&gt;setContext&lt;/code&gt;&lt;/a&gt;. Default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt; : ( &lt;code&gt;Boolean&lt;/code&gt; [необязательно]): если установлено значение true, &lt;code&gt;componentDidMount&lt;/code&gt; не вызывается для компонента, а &lt;code&gt;componentDidUpdate&lt;/code&gt; не &lt;a href=&quot;shallowwrapper/setprops&quot;&gt; &lt;code&gt;setProps&lt;/code&gt; &lt;/a&gt; после setProps и &lt;a href=&quot;shallowwrapper/setcontext&quot;&gt; &lt;code&gt;setContext&lt;/code&gt; &lt;/a&gt; . По умолчанию &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b47ead2b8f1ef58c820f89396f3bccd1dcaf4798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, &lt;code&gt;componentDidMount&lt;/code&gt; is not called on the component, and &lt;code&gt;componentDidUpdate&lt;/code&gt; is not called after &lt;a href=&quot;shallowwrapper/setprops.md&quot;&gt;&lt;code&gt;setProps&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallowwrapper/setcontext.md&quot;&gt;&lt;code&gt;setContext&lt;/code&gt;&lt;/a&gt;. Default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options.disableLifecycleMethods&lt;/code&gt; : ( &lt;code&gt;Boolean&lt;/code&gt; [необязательно]): если установлено значение true, &lt;code&gt;componentDidMount&lt;/code&gt; не вызывается для компонента, а &lt;code&gt;componentDidUpdate&lt;/code&gt; не &lt;a href=&quot;shallowwrapper/setprops.md&quot;&gt; &lt;code&gt;setProps&lt;/code&gt; &lt;/a&gt; после setProps и &lt;a href=&quot;shallowwrapper/setcontext.md&quot;&gt; &lt;code&gt;setContext&lt;/code&gt; &lt;/a&gt; . По умолчанию &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab2d0bf7e9271d65eafbb2d539d39017bc206987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.ignoreProps&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): Whether props should be omitted in the resulting string. Props are included by default.</source>
          <target state="translated">&lt;code&gt;options.ignoreProps&lt;/code&gt; : ( &lt;code&gt;Boolean&lt;/code&gt; [необязательно]): следует ли опускать реквизиты в результирующей строке. Реквизит включены по умолчанию.</target>
        </trans-unit>
        <trans-unit id="713511aace894a39a7e50bb3bc6f46fbc52e8a13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.suspenseFallback&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): If set to true, when rendering &lt;code&gt;Suspense&lt;/code&gt; enzyme will replace all the lazy components in children with &lt;code&gt;fallback&lt;/code&gt; element prop. Otherwise it won't handle fallback of lazy component. Default to &lt;code&gt;true&lt;/code&gt;. Note: not supported in React &amp;lt; 16.6.</source>
          <target state="translated">&lt;code&gt;options.suspenseFallback&lt;/code&gt; : ( &lt;code&gt;Boolean&lt;/code&gt; [optional]): если установлено значение true, при рендеринге &lt;code&gt;Suspense&lt;/code&gt; энзим заменит все ленивые компоненты в дочерних элементах с помощью &lt;code&gt;fallback&lt;/code&gt; element. В противном случае он не будет обрабатывать откат ленивого компонента. По умолчанию &lt;code&gt;true&lt;/code&gt; . Примечание: не поддерживается в React &amp;lt;16.6.</target>
        </trans-unit>
        <trans-unit id="f9fc9fbd5c216378f66962101e19eef1391fc83b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.verbose&lt;/code&gt;: (&lt;code&gt;Boolean&lt;/code&gt; [optional]): Whether arrays and objects passed as props should be verbosely printed.</source>
          <target state="translated">&lt;code&gt;options.verbose&lt;/code&gt; : ( &lt;code&gt;Boolean&lt;/code&gt; [необязательно]): должны ли массивы и объекты, передаваемые в качестве свойств, выводиться подробно.</target>
        </trans-unit>
        <trans-unit id="b30bdf889ef9ae1f20e5141dd0b1d3c3e09b59ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponent&lt;/code&gt;: (&lt;code&gt;ComponentType&lt;/code&gt; [optional]): A component that will render as a parent of the &lt;code&gt;node&lt;/code&gt;. It can be used to provide context to the &lt;code&gt;node&lt;/code&gt;, among other things. See the &lt;a href=&quot;reactwrapper/getwrappingcomponent&quot;&gt;&lt;code&gt;getWrappingComponent()&lt;/code&gt; docs&lt;/a&gt; for an example. &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;wrappingComponent&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; render its children.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponent&lt;/code&gt; : ( &lt;code&gt;ComponentType&lt;/code&gt; [необязательно]): компонент, который будет отображаться как родительский &lt;code&gt;node&lt;/code&gt; . Среди прочего, его можно использовать для предоставления контекста &lt;code&gt;node&lt;/code&gt; . См. &lt;a href=&quot;reactwrapper/getwrappingcomponent&quot;&gt; &lt;code&gt;getWrappingComponent()&lt;/code&gt; документации getWrappingComponent ()&lt;/a&gt; . &lt;strong&gt;Примечание&lt;/strong&gt; : &lt;code&gt;wrappingComponent&lt;/code&gt; &lt;em&gt;должен&lt;/em&gt; отображать своих дочерних элементов.</target>
        </trans-unit>
        <trans-unit id="5e884ee05317f5e52d6e5df4025573aa27bf567d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponent&lt;/code&gt;: (&lt;code&gt;ComponentType&lt;/code&gt; [optional]): A component that will render as a parent of the &lt;code&gt;node&lt;/code&gt;. It can be used to provide context to the &lt;code&gt;node&lt;/code&gt;, among other things. See the &lt;a href=&quot;shallowwrapper/getwrappingcomponent&quot;&gt;&lt;code&gt;getWrappingComponent()&lt;/code&gt; docs&lt;/a&gt; for an example. &lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;wrappingComponent&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; render its children.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponent&lt;/code&gt; : ( &lt;code&gt;ComponentType&lt;/code&gt; [необязательно]): компонент, который будет отображаться как родительский &lt;code&gt;node&lt;/code&gt; . Среди прочего, его можно использовать для предоставления контекста &lt;code&gt;node&lt;/code&gt; . См. &lt;a href=&quot;shallowwrapper/getwrappingcomponent&quot;&gt; &lt;code&gt;getWrappingComponent()&lt;/code&gt; документации getWrappingComponent ()&lt;/a&gt; . &lt;strong&gt;Примечание&lt;/strong&gt; : &lt;code&gt;wrappingComponent&lt;/code&gt; &lt;em&gt;должен&lt;/em&gt; отображать своих дочерних элементов.</target>
        </trans-unit>
        <trans-unit id="207a8f915b5a348e98394db0a4b65855bc3a0487" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options.wrappingComponentProps&lt;/code&gt;: (&lt;code&gt;Object&lt;/code&gt; [optional]): Initial props to pass to the &lt;code&gt;wrappingComponent&lt;/code&gt; if it is specified.</source>
          <target state="translated">&lt;code&gt;options.wrappingComponentProps&lt;/code&gt; : ( &lt;code&gt;Object&lt;/code&gt; [необязательно]): начальные свойства для передачи &lt;code&gt;wrappingComponent&lt;/code&gt; если он указан.</target>
        </trans-unit>
        <trans-unit id="96fd4a86a0652392a4812bfa38e393e6f64d00a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; (&lt;code&gt;Object&lt;/code&gt; [optional]):</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ( &lt;code&gt;Object&lt;/code&gt; [необязательно]):</target>
        </trans-unit>
        <trans-unit id="5bd7b98a27a4702fa5a0108392d734a6739e5269" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="39d0c1de3671005e48fd7dbe7527754743620249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; ( &lt;code&gt;ReactElement&lt;/code&gt; ): узел, присутствие которого вы обнаруживаете в дереве визуализации текущего экземпляра.</target>
        </trans-unit>
        <trans-unit id="d8f5ab70132bbf3c5ad219893fd366597fe2ef74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; (&lt;code&gt;ReactElement&lt;/code&gt;): The node whose presence you are detecting in the wrapper's single node.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; ( &lt;code&gt;ReactElement&lt;/code&gt; ): узел, присутствие которого вы обнаруживаете в единственном узле оболочки.</target>
        </trans-unit>
        <trans-unit id="52e1a94f17e1cf5675e110941ecb2eeba9ec4abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; props (attributes) must appear in the wrapper's nodes, but not the other way around. Their values must match if they do appear.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; (атрибуты) patternNode должны появляться в узлах оболочки, но не наоборот. Их значения должны совпадать, если они появляются.</target>
        </trans-unit>
        <trans-unit id="a8b5e74a8eb7042b70e01772c9b5a6c64e8a012f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNode&lt;/code&gt; style CSS properties must appear in the wrapper's node's style, but not the other way around. Their values must match if they do appear.</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; CSS-свойства стиля patternNode должны отображаться в стиле узла оболочки, но не наоборот. Их значения должны совпадать, если они появляются.</target>
        </trans-unit>
        <trans-unit id="7c319efecd2d4e183045af98f2ee8a46cce656ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;patternNodes&lt;/code&gt; (&lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt;): The array of nodes whose presence you are detecting in the current instance's render tree.</source>
          <target state="translated">&lt;code&gt;patternNodes&lt;/code&gt; ( &lt;code&gt;Array&amp;lt;ReactElement&amp;gt;&lt;/code&gt; ): массив узлов, присутствие которых вы обнаруживаете в дереве визуализации текущего экземпляра.</target>
        </trans-unit>
        <trans-unit id="ff064cea1fe62f97dff4ab8aa6de120874f2acf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function called with the passed in wrapped nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката, вызываемая с переданными в оболочке узлами.</target>
        </trans-unit>
        <trans-unit id="1381e08635e951a15b5dc5065da41dbaf09a84f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function that is passed a wrapped node.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката, которой передается завернутый узел.</target>
        </trans-unit>
        <trans-unit id="23d94fca768b70ea968aa2ff011bdf36ad677b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function to match the nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ReactWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката для сопоставления узлов.</target>
        </trans-unit>
        <trans-unit id="9eba376a99562cf2fd8e1f9761b52469a15a20bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function called with the passed in wrapped nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката, вызываемая с переданными в оболочке узлами.</target>
        </trans-unit>
        <trans-unit id="24c99ee9f5c400eb01fbbf0e738e85084da7617e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function that is passed a wrapped node.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката, которой передается завернутый узел.</target>
        </trans-unit>
        <trans-unit id="353ba39a7e7f75b033f0d15cf13d20e7f617beee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;predicate&lt;/code&gt; (&lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt;): A predicate function to match the nodes.</source>
          <target state="translated">&lt;code&gt;predicate&lt;/code&gt; ( &lt;code&gt;ShallowWrapper =&amp;gt; Boolean&lt;/code&gt; ): функция предиката для сопоставления узлов.</target>
        </trans-unit>
        <trans-unit id="b19124f5da19ec85fafcfe4191d2a4aca844b157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;propName&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="b9d53d50d39762fb00034ac8e268afa1c47ca3a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The function prop that is invoked</source>
          <target state="translated">&lt;code&gt;propName&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; ): вызываемая функция prop</target>
        </trans-unit>
        <trans-unit id="7377e51f83571f606874ec97b031777e7d0fe48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ref(refName)&lt;/code&gt; now returns the actual ref instead of a wrapper</source>
          <target state="translated">&lt;code&gt;ref(refName)&lt;/code&gt; теперь возвращает фактическую ссылку вместо оболочки</target>
        </trans-unit>
        <trans-unit id="6b60ea309a93d1a6a7d4b4804005f2e041d49b1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refName&lt;/code&gt; (&lt;code&gt;String&lt;/code&gt;): The ref attribute of the node</source>
          <target state="translated">&lt;code&gt;refName&lt;/code&gt; ( &lt;code&gt;String&lt;/code&gt; ): атрибут ref узла</target>
        </trans-unit>
        <trans-unit id="8088759753471c6338f1fda056547b0d8d4dfeb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; returns a wrapper very similar to the other renderers in enzyme, &lt;a href=&quot;mount&quot;&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;shallow&quot;&gt;&lt;code&gt;shallow&lt;/code&gt;&lt;/a&gt;; however, &lt;code&gt;render&lt;/code&gt; uses a third party HTML parsing and traversal library &lt;a href=&quot;http://cheeriojs.github.io/cheerio/&quot;&gt;Cheerio&lt;/a&gt;. We believe that Cheerio handles parsing and traversing HTML extremely well, and duplicating this functionality ourselves would be a disservice.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; возвращает обертку, очень похожую на другие рендереры по параметрам фермент, &lt;a href=&quot;mount&quot;&gt; &lt;code&gt;mount&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;shallow&quot;&gt; &lt;code&gt;shallow&lt;/code&gt; &lt;/a&gt; ; однако &lt;code&gt;render&lt;/code&gt; использует стороннюю библиотеку синтаксического анализа и обхода HTML &lt;a href=&quot;http://cheeriojs.github.io/cheerio/&quot;&gt;Cheerio&lt;/a&gt; . Мы считаем, что Cheerio очень хорошо справляется с синтаксическим анализом и просмотром HTML, и дублирование этой функции будет плохой услугой.</target>
        </trans-unit>
        <trans-unit id="3a7ebda3f5307394e7389dacf06a2eca1775be66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): A selector to filter the children by.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; ( &lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [необязательно]): селектор для фильтрации дочерних элементов .</target>
        </trans-unit>
        <trans-unit id="7135a335a7c1d8a07d43e307c6d7115960c91a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): The selector to check existence for.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; ( &lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [необязательно]): селектор, наличие которого нужно проверить.</target>
        </trans-unit>
        <trans-unit id="320957adeb511542dbee13c625460427a584d9b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt; [optional]): The selector to filter the parents by.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; ( &lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; [необязательно]): селектор, по которому нужно фильтровать родителей.</target>
        </trans-unit>
        <trans-unit id="8b0098a13d72047d1035d780e50464fbe31bc17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;selector&lt;/code&gt; (&lt;a href=&quot;../selector&quot;&gt;&lt;code&gt;EnzymeSelector&lt;/code&gt;&lt;/a&gt;): The selector to match.</source>
          <target state="translated">&lt;code&gt;selector&lt;/code&gt; ( &lt;a href=&quot;../selector&quot;&gt; &lt;code&gt;EnzymeSelector&lt;/code&gt; &lt;/a&gt; ): соответствующий селектор.</target>
        </trans-unit>
        <trans-unit id="b35550fe8a37629aae47924f22fc6dedc5770cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useCallback()&lt;/code&gt; doesn't memoize callback in React shallow renderer. &lt;a href=&quot;https://github.com/facebook/react/issues/15774&quot;&gt;Related issue&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d27842f4149cc132e58854e51f27eb6baea0d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useEffect()&lt;/code&gt; and &lt;code&gt;useLayoutEffect()&lt;/code&gt; don't get called in the React shallow renderer. &lt;a href=&quot;https://github.com/facebook/react/issues/15275&quot;&gt;Related issue&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f543ae24bb2a91ffe140390a6b5fc3b47c4a22fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; (&lt;code&gt;T&lt;/code&gt;): The value returned by the previous invocation of this function</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ( &lt;code&gt;T&lt;/code&gt; ): значение, возвращенное предыдущим вызовом этой функции</target>
        </trans-unit>
        <trans-unit id="42bcff12a0041b7cf0871c4aab2096b36ea04632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).hostNodes().debug()&lt;/code&gt; will now return:</source>
          <target state="translated">&lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).hostNodes().debug()&lt;/code&gt; теперь вернет:</target>
        </trans-unit>
        <trans-unit id="ad0eebe14cabf68c723be7978864b8d00134d781" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;reactwrapper/exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;Не рекомендуется&lt;/em&gt; : используйте вместо этого &lt;a href=&quot;reactwrapper/exists&quot;&gt;.exists ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b5e189bdcbbfeacc821f6dc558916906f91c9b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;reactwrapper/exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ac4d71f8e0c5c5c51fd0f5e5b149fad5c2c55f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;shallowwrapper/exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;Не рекомендуется&lt;/em&gt; : используйте вместо этого &lt;a href=&quot;shallowwrapper/exists&quot;&gt;.exists ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="71060dac6eac9584cedbd0b9e07c8bdfc7f22c43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Deprecated&lt;/em&gt;: Use &lt;a href=&quot;shallowwrapper/exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ee636dd6ecbf3a519deccd73795beb3caf504d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;a href=&quot;exists&quot;&gt;.exists()&lt;/a&gt; instead.</source>
          <target state="translated">&lt;strong&gt;Не рекомендуется&lt;/strong&gt; : используйте вместо этого &lt;a href=&quot;exists&quot;&gt;.exists ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47ae20f3ed55947635a1d9e6779fce8af7fba2a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;a href=&quot;exists&quot;&gt;&lt;code&gt;.exists()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c347ab0c6038705e55b13eaed3ba526ceaf04f57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: unlike shallow or static rendering, full rendering actually mounts the component in the DOM, which means that tests can affect each other if they are all using the same DOM. Keep that in mind while writing your tests and, if necessary, use &lt;a href=&quot;reactwrapper/unmount&quot;&gt;&lt;code&gt;.unmount()&lt;/code&gt;&lt;/a&gt; or something similar as cleanup.</source>
          <target state="translated">&lt;strong&gt;Примечание&lt;/strong&gt; : в отличие от поверхностного или статического рендеринга, полный рендеринг фактически монтирует компонент в DOM, что означает, что тесты могут влиять друг на друга, если все они используют одну и ту же DOM. Помните об этом при написании тестов и, если необходимо, используйте &lt;a href=&quot;reactwrapper/unmount&quot;&gt; &lt;code&gt;.unmount()&lt;/code&gt; &lt;/a&gt; или что-то подобное в качестве очистки.</target>
        </trans-unit>
        <trans-unit id="9495eaa8e29f02c1d8fea95beb914a3d1ea34ee6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;React Key and Ref Props&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24b3e543fedbb0fd4488bf72392857e2adc1f62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Key and Ref Props&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Ключ и реквизит&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fb3182f387b23f7c3b2cc9a112697edd81a7772c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The most important part is to ensure that the test runs with the &lt;code&gt;jestEnvironment&lt;/code&gt; set to &lt;code&gt;jsdom&lt;/code&gt;&lt;/strong&gt; - one way is to include a &lt;code&gt;/* @jest-environment jsdom */&lt;/code&gt; comment at the top of the file.</source>
          <target state="translated">&lt;strong&gt;Самая важная часть - убедиться, что тест запускается с &lt;code&gt;jestEnvironment&lt;/code&gt; , установленным на &lt;code&gt;jsdom&lt;/code&gt; &lt;/strong&gt; - один из способов - включить &lt;code&gt;/* @jest-environment jsdom */&lt;/code&gt; комментарий в верхней части файла.</target>
        </trans-unit>
        <trans-unit id="807097e186ec0348c982acfd4d6d87b289b22eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Undefined Properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Неопределенные свойства&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21f5e794a28924461e65e65b06d3500058399a6b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want more CSS support?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Хотите больше поддержки CSS?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="38f525a1f877f57133c35a298271b482a4c54493" translate="yes" xml:space="preserve">
          <source>A common pattern to trigger handlers with &lt;code&gt;.act()&lt;/code&gt; and assert is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a64b0b3a0c1bc433e5b98a310aa3329540b2030" translate="yes" xml:space="preserve">
          <source>A method that re-mounts the component, if it is not currently mounted. This can be used to simulate a component going through an unmount/mount lifecycle.</source>
          <target state="translated">Способ повторного монтажа компонента,если он в данный момент не смонтирован.Он может быть использован для моделирования жизненного цикла компонента,проходящего через размонтирование/монтаж.</target>
        </trans-unit>
        <trans-unit id="be508415d82e8959a3016eebe3438478c8f03124" translate="yes" xml:space="preserve">
          <source>A method that re-mounts the component.</source>
          <target state="translated">Метод,позволяющий перемонтировать компонент.</target>
        </trans-unit>
        <trans-unit id="91720ae87da99eb05f6d35949b98d8fcd154dfd2" translate="yes" xml:space="preserve">
          <source>A method that sets the context of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing contexts.</source>
          <target state="translated">Метод,который задает контекст корневого компонента и возвращает назад.Полезен для проверки поведения компонента во времени при изменении контекста.</target>
        </trans-unit>
        <trans-unit id="065b13a13ff98e5367c23638fd31c488c8135ee7" translate="yes" xml:space="preserve">
          <source>A method that sets the props of the root component, and re-renders. Useful for when you are wanting to test how the component behaves over time with changing props. Calling this, for instance, will call the &lt;code&gt;componentWillReceiveProps&lt;/code&gt; lifecycle method.</source>
          <target state="translated">Метод, который устанавливает свойства корневого компонента и выполняет повторную визуализацию. Полезно, когда вы хотите проверить, как компонент ведет себя с течением времени при изменении свойств. Вызов этого, например, вызовет метод жизненного цикла &lt;code&gt;componentWillReceiveProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="132b786abf7a5429f20b8d9c66b3d60ce0b64a04" translate="yes" xml:space="preserve">
          <source>A method that un-mounts the component.</source>
          <target state="translated">Метод,который размонтирует компонент.</target>
        </trans-unit>
        <trans-unit id="ad4ef4d88128bca8b5e2ad7ebe46ad30c8a5a8bc" translate="yes" xml:space="preserve">
          <source>A method that unmounts the component. This can be used to simulate a component going through an unmount/mount lifecycle.</source>
          <target state="translated">Метод,который размонтирует компонент.Он может быть использован для моделирования жизненного цикла компонента,проходящего через размонтирование/монтирование.</target>
        </trans-unit>
        <trans-unit id="06b119d9f4dd7e0d79d0eae4e22435eb2301678f" translate="yes" xml:space="preserve">
          <source>A method to invoke &lt;code&gt;setState()&lt;/code&gt; on the root component instance, similar to how you might in the methods of the component, and re-renders. This method is useful for testing your component in hard-to-achieve states, however should be used sparingly. If possible, you should utilize your component's external API (which is often accessible via &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance()&lt;/code&gt;&lt;/a&gt;) in order to get it into whatever state you want to test, in order to be as accurate of a test as possible. This is not always practical, however.</source>
          <target state="translated">Метод для вызова &lt;code&gt;setState()&lt;/code&gt; в экземпляре корневого компонента, аналогичный тому, как вы могли бы использовать методы компонента, и повторной визуализации. Этот метод полезен для тестирования вашего компонента в труднодоступных состояниях, однако его следует использовать с осторожностью. Если возможно, вы должны использовать внешний API вашего компонента (который часто доступен через &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance()&lt;/code&gt; &lt;/a&gt; ), чтобы перевести его в любое состояние, которое вы хотите протестировать, чтобы быть максимально точным для теста. Однако это не всегда практично.</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API ссылка</target>
        </trans-unit>
        <trans-unit id="d0fbf0f0ea3852d4c9207721953a3f8b296a7c7a" translate="yes" xml:space="preserve">
          <source>AVA</source>
          <target state="translated">AVA</target>
        </trans-unit>
        <trans-unit id="adba83d0f299b6ad8ce15ef730a1aa3a129c36b4" translate="yes" xml:space="preserve">
          <source>Adapter Package</source>
          <target state="translated">Пакет адаптеров</target>
        </trans-unit>
        <trans-unit id="2a6850da08a924da1eaf0364654b085408ec9dea" translate="yes" xml:space="preserve">
          <source>Airbnb has one of the largest enzyme test suites, coming in at around 30,000 enzyme unit tests. After upgrading enzyme to v3.x in Airbnb's code base, 99.6% of these tests succeeded with no modifications at all. Most of the tests that broke we found to be easy to fix, and some we found to actually depend on what could arguably be considered a bug in v2.x, and the breakage was actually desired.</source>
          <target state="translated">Airbnb имеет один из самых больших наборов для тестирования ферментов,в который входит около 30.000 тестов на единицу фермента.После обновления фермента до v3.x в кодовой базе Airbnb,99.6% этих тестов прошли без каких-либо модификаций.Большинство тестов,которые были сломаны,было легко исправить,а некоторые фактически зависели от того,что можно было бы считать ошибкой в v2.x,и поломка была на самом деле желательной.</target>
        </trans-unit>
        <trans-unit id="678cb01863c9335e9e6de08cd501949bc020ec93" translate="yes" xml:space="preserve">
          <source>Alternative karma-webpack setup</source>
          <target state="translated">Альтернативная карма-вэбпак настройка</target>
        </trans-unit>
        <trans-unit id="81a8eac680be5e51aaf3f3f43c448405e7ae64f2" translate="yes" xml:space="preserve">
          <source>Although this is a breaking change, I believe the new behavior is closer to what people would actually expect and want. Having enzyme wrappers be immutable results in more deterministic tests that are less prone to flakiness from external factors.</source>
          <target state="translated">Несмотря на то,что это радикальное изменение,я считаю,что новое поведение ближе к тому,чего люди на самом деле ожидают и чего они хотят.Наличие ферментной обертки является непреложным результатом в более детерминированных тестах,которые менее подвержены шелушению от внешних факторов.</target>
        </trans-unit>
        <trans-unit id="4483a3bbbf76d1cd1062ad90129336541849e816" translate="yes" xml:space="preserve">
          <source>And then you're ready to go! In your test files you can simply &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; enzyme:</source>
          <target state="translated">И тогда вы готовы к работе! В ваших тестовых файлах вы можете просто &lt;code&gt;require&lt;/code&gt; или &lt;code&gt;import&lt;/code&gt; фермент:</target>
        </trans-unit>
        <trans-unit id="d7599d196da39e6e2f3491b423ae99a3fcf06f87" translate="yes" xml:space="preserve">
          <source>Anywhere you want to use Enzyme, import the Enzyme setup file just as you would Enzyme itself.</source>
          <target state="translated">Везде,где вы хотите использовать Enzyme,импортируйте установочный файл Enzyme так же,как и сам Enzyme.</target>
        </trans-unit>
        <trans-unit id="b41a3cead6f4d75a22a23c4237c12c8d8bf7c92c" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt;, and is processed from left to right.</source>
          <target state="translated">Применяет предоставленную функцию уменьшения ко всем узлам оболочки, чтобы уменьшить до одного значения. Каждый узел передается как &lt;code&gt;ReactWrapper&lt;/code&gt; и обрабатывается слева направо.</target>
        </trans-unit>
        <trans-unit id="fde9c1cb97e8f5ce30030d414512774f7424fa66" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt;, and is processed from right to left.</source>
          <target state="translated">Применяет предоставленную функцию уменьшения ко всем узлам оболочки, чтобы уменьшить до одного значения. Каждый узел передается как &lt;code&gt;ReactWrapper&lt;/code&gt; и обрабатывается справа налево.</target>
        </trans-unit>
        <trans-unit id="b6ad060ba1737f9c06e22179778882627b9f798d" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt;, and is processed from left to right.</source>
          <target state="translated">Применяет предоставленную функцию уменьшения ко всем узлам оболочки, чтобы уменьшить до одного значения. Каждый узел передается как &lt;code&gt;ShallowWrapper&lt;/code&gt; и обрабатывается слева направо.</target>
        </trans-unit>
        <trans-unit id="9314b70da5d0eddf7985e6c6b2925475d087c171" translate="yes" xml:space="preserve">
          <source>Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt;, and is processed from right to left.</source>
          <target state="translated">Применяет предоставленную функцию уменьшения ко всем узлам оболочки, чтобы уменьшить до одного значения. Каждый узел передается как &lt;code&gt;ShallowWrapper&lt;/code&gt; и обрабатывается справа налево.</target>
        </trans-unit>
        <trans-unit id="99c41fbcb3006b15ff9086cdd6105d300104215c" translate="yes" xml:space="preserve">
          <source>Are you here to check whether or not Enzyme is compatible with React 16? Are you currently using Enzyme 2.x? Great! Check out our &lt;a href=&quot;docs/guides/migration-from-2-to-3&quot;&gt;migration guide&lt;/a&gt; for help moving on to Enzyme v3 where React 16 is supported.</source>
          <target state="translated">Вы здесь, чтобы проверить, совместим ли Enzyme с React 16? Вы в настоящее время используете Enzyme 2.x? Большой! Ознакомьтесь с нашим &lt;a href=&quot;docs/guides/migration-from-2-to-3&quot;&gt;руководством&lt;/a&gt; по миграции, чтобы узнать, как перейти на Enzyme v3, где поддерживается React 16.</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="f6971b937ddf14b8f0076da118da58f9ad7760fb" translate="yes" xml:space="preserve">
          <source>As a result, a standalone script like the one below is generally a good approach:</source>
          <target state="translated">В результате,автономный сценарий,подобный приведенному ниже,как правило,является хорошим подходом:</target>
        </trans-unit>
        <trans-unit id="3c3b8180d983e8fde485964450481680b95dd8f7" translate="yes" xml:space="preserve">
          <source>As noted in the function signature above passing a mock event is optional. It is worth noting that &lt;code&gt;ReactWrapper&lt;/code&gt; will pass a &lt;code&gt;SyntheticEvent&lt;/code&gt; object to the event handler in your code. Keep in mind that if the code you are testing uses properties that are not included in the &lt;code&gt;SyntheticEvent&lt;/code&gt;, for instance &lt;code&gt;event.target.value&lt;/code&gt;, you will need to provide a mock event like so &lt;code&gt;.simulate(&quot;change&quot;, { target: { value: &quot;foo&quot; }})&lt;/code&gt; for it to work.</source>
          <target state="translated">Как указано в сигнатуре функции выше, передача фиктивного события необязательна. Стоит отметить, что &lt;code&gt;ReactWrapper&lt;/code&gt; передаст объект &lt;code&gt;SyntheticEvent&lt;/code&gt; обработчику событий в вашем коде. Имейте в виду, что если код, который вы тестируете, использует свойства, которые не включены в &lt;code&gt;SyntheticEvent&lt;/code&gt; , например &lt;code&gt;event.target.value&lt;/code&gt; , вам нужно будет предоставить &lt;code&gt;.simulate(&quot;change&quot;, { target: { value: &quot;foo&quot; }})&lt;/code&gt; событие, например, так .simulate (&quot;change&quot;, {target: {value : &quot;foo&quot;}}), чтобы он работал.</target>
        </trans-unit>
        <trans-unit id="678c27c52881376a9093cf7b5e15e7585f1f0a72" translate="yes" xml:space="preserve">
          <source>As noted in the function signature above passing a mock event is optional. Keep in mind that if the code you are testing uses the event for something like, calling &lt;code&gt;event.preventDefault()&lt;/code&gt; or accessing any of its properties you must provide a mock event object with the properties your code requires.</source>
          <target state="translated">Как указано в сигнатуре функции выше, передача фиктивного события необязательна. Имейте в виду, что если код, который вы тестируете, использует событие для чего-то вроде вызова &lt;code&gt;event.preventDefault()&lt;/code&gt; или доступа к любому из его свойств, вы должны предоставить фиктивный объект события со свойствами, которые требуются вашему коду.</target>
        </trans-unit>
        <trans-unit id="ad8757bc7723651624f9093d901f156595153317" translate="yes" xml:space="preserve">
          <source>As of Enzyme v3, the &lt;code&gt;shallow&lt;/code&gt; API does call React lifecycle methods such as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;. You can read more about this in the &lt;a href=&quot;../guides/migration-from-2-to-3#lifecycle-methods&quot;&gt;version 3 migration guide&lt;/a&gt;.</source>
          <target state="translated">Начиная с Enzyme v3, &lt;code&gt;shallow&lt;/code&gt; API вызывает такие методы жизненного цикла React, как &lt;code&gt;componentDidMount&lt;/code&gt; и &lt;code&gt;componentDidUpdate&lt;/code&gt; . Подробнее об этом можно прочитать в &lt;a href=&quot;../guides/migration-from-2-to-3#lifecycle-methods&quot;&gt;руководстве по миграции&lt;/a&gt; на версию 3 .</target>
        </trans-unit>
        <trans-unit id="cfb7b8ce7bddcbdb66fc0d77fd4fe1c9e2c699a4" translate="yes" xml:space="preserve">
          <source>As of v0.18, React Native uses React as a dependency rather than a forked version of the library, which means it is now possible to use enzyme's &lt;code&gt;shallow&lt;/code&gt; with React Native components.</source>
          <target state="translated">Начиная с версии 0.18, React Native использует React как зависимость, а не как разветвленную версию библиотеки, что означает, что теперь можно использовать &lt;code&gt;shallow&lt;/code&gt; ферментную библиотеку с компонентами React Native.</target>
        </trans-unit>
        <trans-unit id="e15b63ed6a239a36c9a34b938df893a7540c2f98" translate="yes" xml:space="preserve">
          <source>As we can see, we can easily assert on the text and the count of this component. But we haven't caused any state changes yet. Let's see what it looks like when we simulate a &lt;code&gt;click&lt;/code&gt; event on the increment and decrement buttons:</source>
          <target state="translated">Как мы видим, мы можем легко утверждать текст и количество этого компонента. Но мы еще не вызвали никаких изменений состояния. Давайте посмотрим, как это выглядит, когда мы имитируем событие &lt;code&gt;click&lt;/code&gt; на кнопках увеличения и уменьшения:</target>
        </trans-unit>
        <trans-unit id="d59e1c17e2626f04e427fc226ea0f35285b25d27" translate="yes" xml:space="preserve">
          <source>At the moment, Enzyme has adapters that provide compatibility with &lt;code&gt;React 16.x&lt;/code&gt;, &lt;code&gt;React 15.x&lt;/code&gt;, &lt;code&gt;React 0.14.x&lt;/code&gt; and &lt;code&gt;React 0.13.x&lt;/code&gt;.</source>
          <target state="translated">На данный момент Фермент имеет адаптеры , которые обеспечивают совместимость с &lt;code&gt;React 16.x&lt;/code&gt; , &lt;code&gt;React 15.x&lt;/code&gt; , &lt;code&gt;React 0.14.x&lt;/code&gt; и &lt;code&gt;React 0.13.x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03c6f277e5a749aaf16196ccaea9e0be64eef201" translate="yes" xml:space="preserve">
          <source>At the time of writing this, enzyme publishes &quot;officially supported&quot; adapters for React 0.13.x, 0.14.x, 15.x, and 16.x. These adapters are npm packages of the form &lt;code&gt;enzyme-adapter-react-{{version}}&lt;/code&gt;.</source>
          <target state="translated">На момент написания этой статьи энзим выпускает &amp;laquo;официально поддерживаемые&amp;raquo; адаптеры для React 0.13.x, 0.14.x, 15.x и 16.x. Эти адаптеры представляют собой пакеты npm в формате &lt;code&gt;enzyme-adapter-react-{{version}}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="da5a001a877099e1eeed13e42a6b6a99e7927978" translate="yes" xml:space="preserve">
          <source>At this point, there is an ambiguity about what &lt;code&gt;wrapper.find(Box).children()&lt;/code&gt; should return. Although the &lt;code&gt;&amp;lt;Box ... /&amp;gt;&lt;/code&gt; element has a &lt;code&gt;children&lt;/code&gt; prop of &lt;code&gt;&amp;lt;div className=&quot;div&quot; /&amp;gt;&lt;/code&gt;, the actual rendered children of the element that the box component renders is a &lt;code&gt;&amp;lt;div className=&quot;box&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">На данный момент существует двусмысленность относительно того, что должна возвращать &lt;code&gt;wrapper.find(Box).children()&lt;/code&gt; . Хотя &lt;code&gt;&amp;lt;Box ... /&amp;gt;&lt;/code&gt; элемент имеет &lt;code&gt;children&lt;/code&gt; опора &lt;code&gt;&amp;lt;div className=&quot;div&quot; /&amp;gt;&lt;/code&gt; , фактические оказанные дети элемента , что компонент коробка делает это &lt;code&gt;&amp;lt;div className=&quot;box&quot;&amp;gt;...&amp;lt;/div&amp;gt;&lt;/code&gt; элемент.</target>
        </trans-unit>
        <trans-unit id="5811997356e555a7062092490e6cdfb3c2bab657" translate="yes" xml:space="preserve">
          <source>Basic Enzyme setup with Karma</source>
          <target state="translated">Базовая настройка фермента с помощью Кармы</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">Основное использование</target>
        </trans-unit>
        <trans-unit id="fd4679572c2a75d69074d5dce995284cb1546cdd" translate="yes" xml:space="preserve">
          <source>CSS Selector</source>
          <target state="translated">CSS-селектор</target>
        </trans-unit>
        <trans-unit id="d3756b0ae68bbc9d47fa5f4daada451319ed08ab" translate="yes" xml:space="preserve">
          <source>CSS Selector results and &lt;code&gt;hostNodes()&lt;/code&gt;</source>
          <target state="translated">Результаты CSS-селектора и &lt;code&gt;hostNodes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d1d4d66a2ab99f965a1c9835a511daf661b0d51f" translate="yes" xml:space="preserve">
          <source>CSS Selectors:</source>
          <target state="translated">CSS Селекторы:</target>
        </trans-unit>
        <trans-unit id="268eabfb4175fc0090951c35b5d5fa8d9ce2de7a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;props()&lt;/code&gt; after a state change</source>
          <target state="translated">Вызов &lt;code&gt;props()&lt;/code&gt; после изменения состояния</target>
        </trans-unit>
        <trans-unit id="287d8cdd722d558cd3fe3587323eac06d457af3b" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;.forceUpdate()&lt;/code&gt; on the root component instance.</source>
          <target state="translated">Вызывает &lt;code&gt;.forceUpdate()&lt;/code&gt; для экземпляра корневого компонента.</target>
        </trans-unit>
        <trans-unit id="17235702ae1f63bceb977ea0236680fd89435d13" translate="yes" xml:space="preserve">
          <source>Cheerio has been updated, thus &lt;code&gt;render(...)&lt;/code&gt; has been updated as well</source>
          <target state="translated">Cheerio был обновлен, поэтому &lt;code&gt;render(...)&lt;/code&gt; также был обновлен</target>
        </trans-unit>
        <trans-unit id="86e54558a727f34642f8027f0919c63723bd2740" translate="yes" xml:space="preserve">
          <source>Common Gotchas</source>
          <target state="translated">Обыкновенные Попадающиеся</target>
        </trans-unit>
        <trans-unit id="0691f3aadb9f444736a4a6807d958628c9b6c003" translate="yes" xml:space="preserve">
          <source>Component Constructors:</source>
          <target state="translated">Конструкторы компонентов:</target>
        </trans-unit>
        <trans-unit id="6cdf67e78fe3fc309046b6cb42a38025a05f8c56" translate="yes" xml:space="preserve">
          <source>Component Display Name:</source>
          <target state="translated">Имя отображения компонентов:</target>
        </trans-unit>
        <trans-unit id="5a7283632e9f0f972a91ad4fde1fcda959cd0028" translate="yes" xml:space="preserve">
          <source>Configure Enzyme</source>
          <target state="translated">Настройте фермент</target>
        </trans-unit>
        <trans-unit id="d7edce30a0f780a1fd04fa1de2b5559aa8b7fb82" translate="yes" xml:space="preserve">
          <source>Configure enzyme with other test libraries and include JSDOM on the fly</source>
          <target state="translated">Настройте фермент с другими тестовыми библиотеками и включите JSDOM на лету</target>
        </trans-unit>
        <trans-unit id="00fc6493d8e585ad15cc6acfedf12476ec058f0f" translate="yes" xml:space="preserve">
          <source>Configure with Jest</source>
          <target state="translated">Настройка с помощью шута</target>
        </trans-unit>
        <trans-unit id="bf435256ca2679ca437b5835568c416eb16f8708" translate="yes" xml:space="preserve">
          <source>Configuring an Adapter</source>
          <target state="translated">Настройка адаптера</target>
        </trans-unit>
        <trans-unit id="761174dc2bc4ccb22cf00d8cce9f0c420b66dd65" translate="yes" xml:space="preserve">
          <source>Configuring your Adapter</source>
          <target state="translated">Настройка адаптера</target>
        </trans-unit>
        <trans-unit id="2eed0c1e594b080862ea4398d7b2e0bd6e8900dc" translate="yes" xml:space="preserve">
          <source>Consider the following simple react component:</source>
          <target state="translated">Рассмотрим следующий простой компонент реакции:</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="fad2797569bbffc15d93e080ac0714e2df9e3e01" translate="yes" xml:space="preserve">
          <source>Create a file prefixed with enzyme.test.ts for example &lt;code&gt;component.enzyme.test.js&lt;/code&gt;:</source>
          <target state="translated">Создайте файл с префиксом ferme.test.ts, например &lt;code&gt;component.enzyme.test.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="170e413c978b725737646772adb70eac1f05f394" translate="yes" xml:space="preserve">
          <source>Create a separate test file</source>
          <target state="translated">Создать отдельный тестовый файл</target>
        </trans-unit>
        <trans-unit id="0d651fdaca48f800a1c3940cff87bf6383cb9c5e" translate="yes" xml:space="preserve">
          <source>Create an Enzyme setup file. This file will configure Enzyme with the appropriate React adapter. It can also be used to initialize any that you'd like available for all tests. To avoid having to import this file and Enzyme, you can re-export all Enzyme exports from this file and just import it.</source>
          <target state="translated">Создайте установочный файл Enzyme.Этот файл настроит Enzyme с помощью соответствующего адаптера React.Он также может быть использован для инициализации любого теста,доступного для всех тестов.Чтобы избежать необходимости импортировать этот файл и Enzyme,вы можете реэкспортировать все экспортированные Enzyme из этого файла и просто импортировать его.</target>
        </trans-unit>
        <trans-unit id="203704e612b15fd6235feea182a8d35117f77f72" translate="yes" xml:space="preserve">
          <source>Create or update a &lt;code&gt;jest.config.js&lt;/code&gt; file at the root of your project to include the &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; setting:</source>
          <target state="translated">Создайте или обновите файл &lt;code&gt;jest.config.js&lt;/code&gt; в корне вашего проекта, чтобы включить параметр &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8357168650fe2b93cbc3b4fc12c67f9d373f3401" translate="yes" xml:space="preserve">
          <source>Currently, event simulation for the shallow renderer does not propagate as one would normally expect in a real environment. As a result, one must call &lt;code&gt;.simulate()&lt;/code&gt; on the actual node that has the event handler set.</source>
          <target state="translated">В настоящее время моделирование событий для поверхностного рендерера не распространяется, как обычно можно было бы ожидать в реальной среде. В результате необходимо вызвать &lt;code&gt;.simulate()&lt;/code&gt; на фактическом узле, на котором установлен обработчик событий.</target>
        </trans-unit>
        <trans-unit id="cc09bbc77f2b6d17035370a6c8fbdd6cd54942fa" translate="yes" xml:space="preserve">
          <source>Default example configuration for Jest and JSDOM replacement</source>
          <target state="translated">Конфигурация примера по умолчанию для замены шута и JSDOM</target>
        </trans-unit>
        <trans-unit id="b05a4217286b9d708c8fe326a27dc6d564a24844" translate="yes" xml:space="preserve">
          <source>Detaches the react tree from the DOM. Runs &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; under the hood.</source>
          <target state="translated">Отсоединяет дерево реакции от DOM. Запускает &lt;code&gt;ReactDOM.unmountComponentAtNode()&lt;/code&gt; под капотом.</target>
        </trans-unit>
        <trans-unit id="23a2649c982fb9f04442ca32f85ab606907a24c5" translate="yes" xml:space="preserve">
          <source>ES5:</source>
          <target state="translated">ES5:</target>
        </trans-unit>
        <trans-unit id="f5041e09f7258cafa9baa37f0a577cc3cafdd1c5" translate="yes" xml:space="preserve">
          <source>ES6:</source>
          <target state="translated">ES6:</target>
        </trans-unit>
        <trans-unit id="ca295a5986f0f91a44191ce05c61a8025fc02fe8" translate="yes" xml:space="preserve">
          <source>Each adapter may have additional peer dependencies which you will need to install as well. For instance, &lt;code&gt;enzyme-adapter-react-16&lt;/code&gt; has peer dependencies on &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;.</source>
          <target state="translated">Каждый адаптер может иметь дополнительные одноранговые зависимости, которые вам также необходимо будет установить. Например, &lt;code&gt;enzyme-adapter-react-16&lt;/code&gt; имеет равноправные зависимости от &lt;code&gt;react&lt;/code&gt; и &lt;code&gt;react-dom&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab29fa8a56ff145087da27a089e58c2eca6b159a" translate="yes" xml:space="preserve">
          <source>Element referential identity is no longer preserved</source>
          <target state="translated">Ссылочная идентичность элементов больше не сохраняется</target>
        </trans-unit>
        <trans-unit id="9d818071488cd0fd15915face926b0ea26228d9d" translate="yes" xml:space="preserve">
          <source>Enzyme</source>
          <target state="translated">Enzyme</target>
        </trans-unit>
        <trans-unit id="51355837d75578bfd096bb738a13105d30be552e" translate="yes" xml:space="preserve">
          <source>Enzyme Adapter Package</source>
          <target state="translated">Пакет ферментного адаптера</target>
        </trans-unit>
        <trans-unit id="ad23adcd497d068a319e4afbdaf0da5eab7f86cb" translate="yes" xml:space="preserve">
          <source>Enzyme Future</source>
          <target state="translated">Ферменты будущего</target>
        </trans-unit>
        <trans-unit id="1c5e09957340a9598a75b16c615131644d8a7629" translate="yes" xml:space="preserve">
          <source>Enzyme is a JavaScript Testing utility for React that makes it easier to test your React Components' output. You can also manipulate, traverse, and in some ways simulate runtime given the output.</source>
          <target state="translated">Enzyme-это утилита для тестирования реактивных компонентов на JavaScript,которая облегчает тестирование выходных данных реактивных компонентов.Вы также можете манипулировать,траверсировать и в некотором роде имитировать время выполнения,заданное на выходе.</target>
        </trans-unit>
        <trans-unit id="029c2f4444a98371a6b3a4bc4a7dd1d6fc2ae0d1" translate="yes" xml:space="preserve">
          <source>Enzyme is unopinionated regarding which test runner or assertion library you use, and should be compatible with all major test runners and assertion libraries out there. The documentation and examples for enzyme use &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/&quot;&gt;chai&lt;/a&gt;, but you should be able to extrapolate to your framework of choice.</source>
          <target state="translated">Enzyme не знает, какую программу запуска тестов или библиотеку утверждений вы используете, и должен быть совместим со всеми основными программами запуска тестов и библиотеками утверждений. В документации и примерах для ферментов используются &lt;a href=&quot;https://mochajs.org/&quot;&gt;мокко&lt;/a&gt; и &lt;a href=&quot;http://chaijs.com/&quot;&gt;чай&lt;/a&gt; , но вы должны иметь возможность экстраполировать их на выбранную вами структуру.</target>
        </trans-unit>
        <trans-unit id="6a414dbbbf682b5322546cb7359fe381bf11a255" translate="yes" xml:space="preserve">
          <source>Enzyme supports &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;react hooks&lt;/a&gt; with some limitations in &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/shallow.html&quot;&gt;&lt;code&gt;.shallow()&lt;/code&gt;&lt;/a&gt; due to upstream issues in React's shallow renderer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332ef742bd38fad48236491c83da6947ff66ab4d" translate="yes" xml:space="preserve">
          <source>Enzyme's API is meant to be intuitive and flexible by mimicking jQuery's API for DOM manipulation and traversal.</source>
          <target state="translated">API фермента предназначено для интуитивной и гибкой работы,имитируя API jQuery для манипулирования и обхода DOM.</target>
        </trans-unit>
        <trans-unit id="46ed75648787ff4b317851f8f9c38e938fe80dd0" translate="yes" xml:space="preserve">
          <source>Even though the name would imply this simulates an actual event, &lt;code&gt;.simulate()&lt;/code&gt; will in fact target the component's prop based on the event you give it. For example, &lt;code&gt;.simulate('click')&lt;/code&gt; will actually get the &lt;code&gt;onClick&lt;/code&gt; prop and call it.</source>
          <target state="translated">Несмотря на то, что название подразумевает, что это имитирует реальное событие, &lt;code&gt;.simulate()&lt;/code&gt; на самом деле будет нацеливаться на опору компонента на основе события, которое вы ему даете. Например, &lt;code&gt;.simulate('click')&lt;/code&gt; будет на самом деле получить &lt;code&gt;onClick&lt;/code&gt; опору и назвать его.</target>
        </trans-unit>
        <trans-unit id="4818e3faca46f86be35832baf58ad68961fdb525" translate="yes" xml:space="preserve">
          <source>Every attribute of the wrapped element must be matched by the element you're checking. To permit (and ignore) additional attributes on the wrapped element, use containsMatchingElement() instead.</source>
          <target state="translated">Каждый атрибут обернутого элемента должен соответствовать проверяемому элементу.Чтобы разрешить (и проигнорировать)дополнительные атрибуты на оберточном элементе,используйте containsMatchingElement().</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="9cf87e7b85f81825622eb49cf420110a9ba45d55" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;class component&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9ec891d2dd56dd8d24f6d7d96a4db9ffd1a644" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;functional component&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e2ace057c2d9491137c471958a51c0e1163604" translate="yes" xml:space="preserve">
          <source>Example Project for Jest version 15+</source>
          <target state="translated">Пример проекта для Jest версии 15+</target>
        </trans-unit>
        <trans-unit id="ab858fbecacbb162fe9006ca94bc02b81d92156e" translate="yes" xml:space="preserve">
          <source>Example Projects</source>
          <target state="translated">Примеры проектов</target>
        </trans-unit>
        <trans-unit id="4f55a6b0c05587d1df38c1ecc27eaa3ea003dca1" translate="yes" xml:space="preserve">
          <source>Example Test: enzyme + Lab + Code</source>
          <target state="translated">Пример теста:фермент+лаборатория+код</target>
        </trans-unit>
        <trans-unit id="654d7a479004b2b26e7de7b5ed9cd79a331ded80" translate="yes" xml:space="preserve">
          <source>Example Usage</source>
          <target state="translated">Пример использования</target>
        </trans-unit>
        <trans-unit id="5215cd1d5ac2d102ec4bfa415d61da891dba6be0" translate="yes" xml:space="preserve">
          <source>Example test for Jest 15+</source>
          <target state="translated">Пример теста для Jest 15+</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="9a9a9ce32412b7a5db5abed278e3d9dea69c3313" translate="yes" xml:space="preserve">
          <source>Finally, you need to configure enzyme to use the adapter you want it to use. To do this, you can use the top level &lt;code&gt;configure(...)&lt;/code&gt; API.</source>
          <target state="translated">Наконец, вам необходимо настроить фермент для использования адаптера, который вы хотите использовать. Для этого вы можете использовать API верхнего уровня &lt;code&gt;configure(...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="926639caa1b21fa8457f87d7096534efe12b003c" translate="yes" xml:space="preserve">
          <source>Find every node in the render tree that matches the provided selector.</source>
          <target state="translated">Найдите каждый узел в дереве рендеринга,совпадающий с предоставленным селектором.</target>
        </trans-unit>
        <trans-unit id="4d91043a3187d510ab72a61c5f21b438ede28285" translate="yes" xml:space="preserve">
          <source>Find every node in the render tree that returns true for the provided predicate function.</source>
          <target state="translated">Найдите каждый узел в дереве рендера,который возвращает true для предоставляемой предикатной функции.</target>
        </trans-unit>
        <trans-unit id="117c96a6e071cb6d3a5137a0259f3117349d2d2a" translate="yes" xml:space="preserve">
          <source>Finds every node in the render tree of the current wrapper that matches the provided selector.</source>
          <target state="translated">Находит каждый узел в дереве рендеринга текущей обёртки,который соответствует заданному селектору.</target>
        </trans-unit>
        <trans-unit id="ff3d35b29e52a4434a3abfb9627527e8da5c745f" translate="yes" xml:space="preserve">
          <source>Finds every node in the render tree that returns true for the provided predicate function.</source>
          <target state="translated">Находит каждый узел в дереве рендера,который возвращает true для предоставляемой предикатной функции.</target>
        </trans-unit>
        <trans-unit id="4f93a275f75fed40467930d3bbe437bba9d7ecd6" translate="yes" xml:space="preserve">
          <source>Following React's behavior, &lt;code&gt;.equals()&lt;/code&gt; ignores properties whose values are &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Следуя поведению React, &lt;code&gt;.equals()&lt;/code&gt; игнорирует свойства, значения которых &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="69b90b3a854d0427166bdc10d865b89fefdcc4c3" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;mount&lt;/code&gt; wrappers, the &lt;code&gt;.getNode()&lt;/code&gt; method used to return the actual component instance. This method no longer exists, but &lt;code&gt;.instance()&lt;/code&gt; is functionally equivalent to what &lt;code&gt;.getNode()&lt;/code&gt; used to be.</source>
          <target state="translated">Для оболочек &lt;code&gt;mount&lt;/code&gt; метод &lt;code&gt;.getNode()&lt;/code&gt; используется для возврата фактического экземпляра компонента. Этот метод больше не существует, но &lt;code&gt;.instance()&lt;/code&gt; функционально эквивалентен тому, что &lt;code&gt;.getNode()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0b0bb561bb23d4c4f7a3834a6e5c9fa2ff28df5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;mount&lt;/code&gt;, updates are sometimes required when they weren't before</source>
          <target state="translated">Для &lt;code&gt;mount&lt;/code&gt; иногда требуются обновления, которых раньше не было</target>
        </trans-unit>
        <trans-unit id="09bc7ee5b6a668d25e805ff6efa077979462493c" translate="yes" xml:space="preserve">
          <source>For Library</source>
          <target state="translated">Для библиотеки</target>
        </trans-unit>
        <trans-unit id="ac01306a20857038c2ac22e97c91b721922733f5" translate="yes" xml:space="preserve">
          <source>For example, consider the following example:</source>
          <target state="translated">Например,рассмотрим следующий пример:</target>
        </trans-unit>
        <trans-unit id="cd003f8c7138c25c1d0217d87a75a97b62b34819" translate="yes" xml:space="preserve">
          <source>For instance, consider the following contrived example:</source>
          <target state="translated">Например,рассмотрим следующий надуманный пример:</target>
        </trans-unit>
        <trans-unit id="8e0ad3f7772ae403b24d8e656ac8c6e4cdb4ba6c" translate="yes" xml:space="preserve">
          <source>For shallow wrappers, if you were previously using &lt;code&gt;.getNode()&lt;/code&gt;, you will want to replace those calls with &lt;code&gt;.getElement()&lt;/code&gt;, which is now functionally equivalent to what &lt;code&gt;.getNode()&lt;/code&gt; used to do. One caveat is that previously &lt;code&gt;.getNode()&lt;/code&gt; would return the actual element instance that was created in the &lt;code&gt;render&lt;/code&gt; function of the component you were testing, but now it will be a structurally equal react element, but not referentially equal. Your tests will need to be updated to account for this.</source>
          <target state="translated">Для мелких оболочек, если вы ранее использовали &lt;code&gt;.getNode()&lt;/code&gt; , вы захотите заменить эти вызовы на &lt;code&gt;.getElement()&lt;/code&gt; , который теперь функционально эквивалентен тому, что &lt;code&gt;.getNode()&lt;/code&gt; . Одно предостережение заключается в том, что ранее &lt;code&gt;.getNode()&lt;/code&gt; возвращал фактический экземпляр элемента, который был создан в функции &lt;code&gt;render&lt;/code&gt; компонента, который вы тестировали, но теперь это будет структурно равный элемент реакции, но не равный по ссылкам. Чтобы учесть это, необходимо обновить ваши тесты.</target>
        </trans-unit>
        <trans-unit id="72beab796ee156401548f8526bc361d972a34a93" translate="yes" xml:space="preserve">
          <source>For the best experience with enzyme, it is recommended that you load a document into the global scope &lt;em&gt;before&lt;/em&gt; requiring React for the first time. It is very important that the below script gets run &lt;em&gt;before&lt;/em&gt; React's code is run.</source>
          <target state="translated">Для наилучшего опыта работы с ферментом рекомендуется загрузить документ в глобальную область видимости &lt;em&gt;перед&lt;/em&gt; тем, как в первый раз потребовать React. Очень важно, чтобы приведенный ниже сценарий запускался &lt;em&gt;до&lt;/em&gt; запуска кода React.</target>
        </trans-unit>
        <trans-unit id="4014ea7935efc652541982b622530de60f606492" translate="yes" xml:space="preserve">
          <source>For the purposes of this documentation, we will refer to Cheerio's constructor as &lt;code&gt;CheerioWrapper&lt;/code&gt;, which is to say that it is analogous to our &lt;code&gt;ReactWrapper&lt;/code&gt; and &lt;code&gt;ShallowWrapper&lt;/code&gt; constructors. You can reference the &lt;a href=&quot;https://github.com/cheeriojs/cheerio#api&quot;&gt;Cheerio API docs&lt;/a&gt; for methods available on a &lt;code&gt;CheerioWrapper&lt;/code&gt; instance.</source>
          <target state="translated">В целях этой документации мы будем называть конструктор &lt;code&gt;CheerioWrapper&lt;/code&gt; , что означает, что он аналогичен нашим конструкторам &lt;code&gt;ReactWrapper&lt;/code&gt; и &lt;code&gt;ShallowWrapper&lt;/code&gt; . Вы можете ссылаться на &lt;a href=&quot;https://github.com/cheeriojs/cheerio#api&quot;&gt;документацию Cheerio API&lt;/a&gt; о методах, доступных в экземпляре &lt;code&gt;CheerioWrapper&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="06d6633fa0bd7e83f10bae95c3414091f4bfa305" translate="yes" xml:space="preserve">
          <source>Forces a re-render. Useful to run before checking the render output if something external may be updating the state of the component somewhere.</source>
          <target state="translated">Вызовет повторный отступление.Полезно запускать перед проверкой вывода рендера,если что-то внешнее может обновлять состояние компонента где-то.</target>
        </trans-unit>
        <trans-unit id="4e6c05afa7d596722328e81bdef2831f35817f9e" translate="yes" xml:space="preserve">
          <source>Full DOM Rendering</source>
          <target state="translated">Полная аренда модели DOM</target>
        </trans-unit>
        <trans-unit id="570a629cefd9707d7a3fd0666f5a1df6847deb98" translate="yes" xml:space="preserve">
          <source>Full DOM rendering is ideal for use cases where you have components that may interact with DOM APIs or need to test components that are wrapped in higher order components.</source>
          <target state="translated">Полный рендеринг DOM идеально подходит для случаев,когда у вас есть компоненты,которые могут взаимодействовать с DOM API,или вам необходимо протестировать компоненты,обернутые в компоненты более высокого порядка.</target>
        </trans-unit>
        <trans-unit id="79c676ffd703a9503c4628cafa5ed681170a3ff9" translate="yes" xml:space="preserve">
          <source>Full DOM rendering requires that a full DOM API be available at the global scope. This means that it must be run in an environment that at least &amp;ldquo;looks like&amp;rdquo; a browser environment. If you do not want to run your tests inside of a browser, the recommended approach to using &lt;code&gt;mount&lt;/code&gt; is to depend on a library called &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; which is essentially a headless browser implemented completely in JS.</source>
          <target state="translated">Полный рендеринг DOM требует, чтобы полный DOM API был доступен в глобальной области. Это означает, что он должен запускаться в среде, которая хотя бы &amp;laquo;похожа&amp;raquo; на среду браузера. Если вы не хотите запускать тесты внутри браузера, рекомендуемый подход к использованию &lt;code&gt;mount&lt;/code&gt; заключается в использовании библиотеки под названием &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom,&lt;/a&gt; которая, по сути, является безголовым браузером, полностью реализованным на JS.</target>
        </trans-unit>
        <trans-unit id="7d7fc3e9d020cf229dd7fe8cb296c0487b5676f3" translate="yes" xml:space="preserve">
          <source>Full Rendering API</source>
          <target state="translated">Полный API рендеринга</target>
        </trans-unit>
        <trans-unit id="1e2f18bbd2cd56eb4eb5216936b1c3a7fb95f62b" translate="yes" xml:space="preserve">
          <source>Full Rendering API (mount(...))</source>
          <target state="translated">Полный API рендеринга (mount(...))</target>
        </trans-unit>
        <trans-unit id="623cd81f510f4da18c7d51e491936ee4bbfcf0af" translate="yes" xml:space="preserve">
          <source>Further, enzyme requires the test utilities addon be installed:</source>
          <target state="translated">Кроме того,фермент требует установки тестовых утилит addon:</target>
        </trans-unit>
        <trans-unit id="8e32a626681dc1c85c62f706ba8a29b2c8662dae" translate="yes" xml:space="preserve">
          <source>Further, enzyme supports combining any of those supported syntaxes together, as with CSS:</source>
          <target state="translated">Кроме того,фермент поддерживает объединение любого из поддерживаемых синтаксисов вместе,как и в CSS:</target>
        </trans-unit>
        <trans-unit id="58c198c1797fd0e9bac60db7c1630abfbf85567c" translate="yes" xml:space="preserve">
          <source>Further, enzyme with React 0.14 requires the test utilities addon be installed:</source>
          <target state="translated">Кроме того,фермент с реакцией 0.14 требует установки тестовых утилит addon:</target>
        </trans-unit>
        <trans-unit id="047ca54032a1756c098d3bc1a941a0ed8e583df8" translate="yes" xml:space="preserve">
          <source>Future</source>
          <target state="translated">Future</target>
        </trans-unit>
        <trans-unit id="0fe5c0df09b7c8d3085b32420b2c803b718de6ce" translate="yes" xml:space="preserve">
          <source>Get a wrapper with all of the children nodes of the current wrapper.</source>
          <target state="translated">Возьмите обертку со всеми детскими узлами текущей обертки.</target>
        </trans-unit>
        <trans-unit id="71f93ae601b006b1edfa697f30633edaff282734" translate="yes" xml:space="preserve">
          <source>Get a wrapper with all of the parents (ancestors) of the current node.</source>
          <target state="translated">Возьмите обертку со всеми родителями (предками)текущего узла.</target>
        </trans-unit>
        <trans-unit id="bcc338b4ccaa03442427c4bc6320f42c435786d9" translate="yes" xml:space="preserve">
          <source>Get a wrapper with the direct parent of the current node.</source>
          <target state="translated">Получите обертку с прямым родителем текущего узла.</target>
        </trans-unit>
        <trans-unit id="e3d99edbac0f4f049eca23adc2829e569716d83f" translate="yes" xml:space="preserve">
          <source>Get a wrapper with the first ancestor of the current node to match the provided selector.</source>
          <target state="translated">Получите обертку с первым родоначальником текущего узла в соответствии с предоставленным селектором.</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="eeffe19337aa7b2a08bd4bf51147350bd9fb4750" translate="yes" xml:space="preserve">
          <source>Here is the sample of &lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/master/lib/old-api.md&quot;&gt;jsdom old API&lt;/a&gt; as well.</source>
          <target state="translated">Вот и образец &lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/master/lib/old-api.md&quot;&gt;старого API jsdom&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="67ddd9c8373dc32fd2e1b07b4592d833fecdba21" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;wrappingComponent&lt;/code&gt; was passed in &lt;code&gt;options&lt;/code&gt;, this methods returns a &lt;code&gt;ReactWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;. This &lt;code&gt;ReactWrapper&lt;/code&gt; can be used to update the &lt;code&gt;wrappingComponent&lt;/code&gt;'s props, state, etc.</source>
          <target state="translated">Если &lt;code&gt;wrappingComponent&lt;/code&gt; был принят в &lt;code&gt;options&lt;/code&gt; , эти методы возвращают &lt;code&gt;ReactWrapper&lt;/code&gt; вокруг оказанной &lt;code&gt;wrappingComponent&lt;/code&gt; . Это &lt;code&gt;ReactWrapper&lt;/code&gt; может быть использован для обновления &lt;code&gt;wrappingComponent&lt;/code&gt; &amp;laquo;s реквизита, состояние и т.д.</target>
        </trans-unit>
        <trans-unit id="6d196d5cbe18d2626402589bbcbd087f16a192cb" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;wrappingComponent&lt;/code&gt; was passed in &lt;code&gt;options&lt;/code&gt;, this methods returns a &lt;code&gt;ShallowWrapper&lt;/code&gt; around the rendered &lt;code&gt;wrappingComponent&lt;/code&gt;. This &lt;code&gt;ShallowWrapper&lt;/code&gt; can be used to update the &lt;code&gt;wrappingComponent&lt;/code&gt;'s props, state, etc.</source>
          <target state="translated">Если &lt;code&gt;wrappingComponent&lt;/code&gt; был принят в &lt;code&gt;options&lt;/code&gt; , эти методы возвращают &lt;code&gt;ShallowWrapper&lt;/code&gt; вокруг оказанной &lt;code&gt;wrappingComponent&lt;/code&gt; . Это &lt;code&gt;ShallowWrapper&lt;/code&gt; может быть использован для обновления &lt;code&gt;wrappingComponent&lt;/code&gt; &amp;laquo;s реквизита, состояние и т.д.</target>
        </trans-unit>
        <trans-unit id="8d8b27059ba58e27f5bb57845056194fd5d95d56" translate="yes" xml:space="preserve">
          <source>If the current wrapper is wrapping the root component, returns the root component's latest render output wrapped in an array.</source>
          <target state="translated">Если текущая обёртка обёртывает корневой компонент,возвращает последний вывод рендеринга корневого компонента,обёрнутый в массив.</target>
        </trans-unit>
        <trans-unit id="cd3aa8d900efbd925f70d3751f828629cc3b730b" translate="yes" xml:space="preserve">
          <source>If the current wrapper is wrapping the root component, returns the root component's latest render output.</source>
          <target state="translated">Если текущая обёртка обёртывает корневой компонент,возвращает последний вывод рендеринга корневого компонента.</target>
        </trans-unit>
        <trans-unit id="29c24082476175f3e2a25b93ef8cac1a6fd8d5cf" translate="yes" xml:space="preserve">
          <source>If you are interested in using enzyme with custom assertions and convenience functions for testing your React components, you can consider using:</source>
          <target state="translated">Если вы заинтересованы в использовании фермента с пользовательскими утверждениями и функциями удобства для тестирования ваших реактивных компонентов,вы можете рассмотреть возможность использования:</target>
        </trans-unit>
        <trans-unit id="057985eec7bb7033f7d7c21429768d3f59cdf7cd" translate="yes" xml:space="preserve">
          <source>If you are using Jest 0.9 &amp;ndash; 14.0 with enzyme and using Jest's automocking feature, you will need to mark react and enzyme to be unmocked in your &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">Если вы используете Jest 0.9&amp;ndash;14.0 с энзимом и используете функцию автоактивации Jest, вам нужно будет отметить реакцию и энзим, которые нужно разблокировать, в вашем &lt;code&gt;package.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d04ddabda3cbb8f7f456df1c505f3cde873778be" translate="yes" xml:space="preserve">
          <source>If you are using a previous version of Jest together with npm3, you may need to unmock &lt;a href=&quot;https://github.com/airbnb/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;more modules&lt;/a&gt;.</source>
          <target state="translated">Если вы используете предыдущую версию Jest вместе с npm3, вам может потребоваться разблокировать &lt;a href=&quot;https://github.com/airbnb/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;больше модулей&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="270536b82199933750f62ff68306325ea479a6f1" translate="yes" xml:space="preserve">
          <source>If you are using a previous version of Jest together with npm3, you may need to unmock &lt;a href=&quot;https://github.com/enzymejs/enzyme/blob/78febd90fe2fb184771b8b0356b0fcffbdad386e/docs/guides/jest.md&quot;&gt;more modules&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9606c84ad8105d871263f864aa2162ff83fbc52e" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">Если вы используете средство выполнения тестов, которое запускает код в среде на основе браузера, вы можете использовать &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt; для объединения кода React.</target>
        </trans-unit>
        <trans-unit id="6c126ce3622e3cfcee72895a39395e916cfe9361" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;https://webpack.js.org/&quot;&gt;webpack&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">Если вы используете средство &lt;a href=&quot;https://webpack.js.org/&quot;&gt;запуска&lt;/a&gt; тестов, которое запускает код в среде на основе браузера, вы можете использовать веб- пакет для объединения кода React.</target>
        </trans-unit>
        <trans-unit id="9cc4a58bea32ac205d3a00921b20de266fabfc15" translate="yes" xml:space="preserve">
          <source>If you are using a test runner that runs code in a browser-based environment, you may be using &lt;a href=&quot;systemjs&quot;&gt;SystemJS&lt;/a&gt; in order to bundle your React code.</source>
          <target state="translated">Если вы используете средство &lt;a href=&quot;systemjs&quot;&gt;запуска&lt;/a&gt; тестов, которое запускает код в среде на основе браузера, вы можете использовать SystemJS для объединения кода React.</target>
        </trans-unit>
        <trans-unit id="1853254371b2bb13ae7828811f3d9d37d32c5a38" translate="yes" xml:space="preserve">
          <source>If you are wanting to use Enzyme with React 0.14, but don't already have React 0.14 and react-dom installed, you should do so:</source>
          <target state="translated">Если вы хотите использовать фермент с реакцией 0.14,но еще не установили реакцию 0.14 и реактивный дом,вам следует это сделать:</target>
        </trans-unit>
        <trans-unit id="30edf39c7c70b4c577f3900f6b1309b68b544ca7" translate="yes" xml:space="preserve">
          <source>If you are wanting to use Enzyme with React 15, but don't already have React 15 and react-dom installed, you should do so:</source>
          <target state="translated">Если вы хотите использовать фермент с Реакцией 15,но еще не установили Реакцию 15 и реактивный дом,вам следует это сделать:</target>
        </trans-unit>
        <trans-unit id="63eead382a162c12f6a8f99e50ce4ab4ab1183b4" translate="yes" xml:space="preserve">
          <source>If you are wanting to use enzyme with React 0.13, but don't already have React 0.13 installed, you should do so:</source>
          <target state="translated">Если вы хотите использовать фермент с Реакцией 0.13,но еще не установили Реакцию 0.13,вам следует это сделать:</target>
        </trans-unit>
        <trans-unit id="85f0e12d899c36f88f8a4d84a42a4a5cb7a7260d" translate="yes" xml:space="preserve">
          <source>If you are wanting to use enzyme with React 16, but don't already have React 16 and react-dom installed, you should do so:</source>
          <target state="translated">Если вы хотите использовать фермент с Реакцией 16,но еще не установили Реакцию 16 и реактивный дом,вам следует это сделать:</target>
        </trans-unit>
        <trans-unit id="6cc090f0a2bd29811b8593bdde596c3c54d9d2b6" translate="yes" xml:space="preserve">
          <source>If you have to search by &lt;code&gt;undefined&lt;/code&gt; property value, use &lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;.findWhere()&lt;/a&gt;.</source>
          <target state="translated">Если вам нужно выполнить поиск по &lt;code&gt;undefined&lt;/code&gt; значению свойства, используйте &lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;.findWhere ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cf09485d31fa6e716abb9f06b062eaea56bd9e31" translate="yes" xml:space="preserve">
          <source>If you have to search by &lt;code&gt;undefined&lt;/code&gt; property value, use &lt;a href=&quot;shallowwrapper/findwhere&quot;&gt;&lt;code&gt;.findWhere()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71da1115a8b12af6134f4a43327ebe0700a0168d" translate="yes" xml:space="preserve">
          <source>If you'd like to opt out globally, you can run the following:</source>
          <target state="translated">Если вы хотите отказаться от участия глобально,вы можете запустить следующее:</target>
        </trans-unit>
        <trans-unit id="bd4d4e6bd37eed79fec5edeb5f16a3b54e0ce351" translate="yes" xml:space="preserve">
          <source>If you're using Karma and Webpack using &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack#alternative-usage&quot;&gt;karma-webpack's alternative setup&lt;/a&gt;, you can configure enzyme in your test entry file and import Enzyme directly in individual tests.</source>
          <target state="translated">Если вы используете Karma и Webpack, используя &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack#alternative-usage&quot;&gt;альтернативную настройку karma-webpack&lt;/a&gt; , вы можете настроить фермент в файле ввода теста и импортировать фермент непосредственно в отдельные тесты.</target>
        </trans-unit>
        <trans-unit id="c652b51ddd487136ed859565f1a0bd0a962942a2" translate="yes" xml:space="preserve">
          <source>If you're using React 16.8+ and &lt;code&gt;.mount()&lt;/code&gt;, Enzyme will wrap apis including &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/simulate.html&quot;&gt;&lt;code&gt;.simulate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setProps.html&quot;&gt;&lt;code&gt;.setProps()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/setContext.html&quot;&gt;&lt;code&gt;.setContext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/invoke.html&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act()&lt;/code&gt;&lt;/a&gt; so you don't need to manually wrap it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd4ca4971f2b471c0171d60bb4669c0595e5ef6" translate="yes" xml:space="preserve">
          <source>Import Enzyme from the Enzyme setup file</source>
          <target state="translated">Импорт фермента из установочного файла Enzyme</target>
        </trans-unit>
        <trans-unit id="414fe52537e1abe93f8c234cc6a8c2e2c9cad7a8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;enzyme&lt;/code&gt; v2, executing an event that would change a component state (and in turn update props) would return those updated props via the &lt;code&gt;.props&lt;/code&gt; method.</source>
          <target state="translated">В &lt;code&gt;enzyme&lt;/code&gt; v2 выполнение события, которое изменило бы состояние компонента (и, в свою очередь, обновило свойства), вернет эти обновленные свойства через метод &lt;code&gt;.props&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b920dbd0b5a5c8c88b853f096ab28398b03daddd" translate="yes" xml:space="preserve">
          <source>In enzyme v2, the wrapper returned from &lt;code&gt;mount(...)&lt;/code&gt; had a prototype method on it &lt;code&gt;ref(refName)&lt;/code&gt; that returned a wrapper around the actual element of that ref. This has now been changed to return the actual ref, which we believe is a more intuitive API.</source>
          <target state="translated">В энзиме v2 в оболочке, возвращаемой из &lt;code&gt;mount(...)&lt;/code&gt; был прототип метода &lt;code&gt;ref(refName)&lt;/code&gt; который возвращал оболочку вокруг фактического элемента этой ссылки. Теперь это было изменено, чтобы возвращать фактический ref, который, как мы считаем, является более интуитивно понятным API.</target>
        </trans-unit>
        <trans-unit id="e59fed93b0ffe503c0d370ba36565168ade3efc7" translate="yes" xml:space="preserve">
          <source>In enzyme v3, the expression &lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).length)&lt;/code&gt; will return 3 and not 1 as in previous versions. A closer look using &lt;a href=&quot;../api/reactwrapper/debug&quot;&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; reveals:</source>
          <target state="translated">В &lt;code&gt;wrapper.find(&quot;[aria-expanded=true]&quot;).length)&lt;/code&gt; v3 выражение wrapper.find (&quot;[aria-extended = true]&quot;). Length) вернет 3, а не 1, как в предыдущих версиях. Более пристальный взгляд с использованием &lt;a href=&quot;../api/reactwrapper/debug&quot;&gt; &lt;code&gt;debug&lt;/code&gt; &lt;/a&gt; показывает:</target>
        </trans-unit>
        <trans-unit id="bb8f78f6abd15e723b3e6c9d55577cdf4b9149eb" translate="yes" xml:space="preserve">
          <source>In enzyme v3, we now have &lt;code&gt;.children()&lt;/code&gt; return the &lt;em&gt;rendered&lt;/em&gt; children. In other words, it returns the element that is returned from that component's &lt;code&gt;render&lt;/code&gt; function.</source>
          <target state="translated">В &lt;code&gt;.children()&lt;/code&gt; v3 у нас теперь есть .children (), возвращающий &lt;em&gt;отрисованные&lt;/em&gt; дочерние элементы . Другими словами, он возвращает элемент, который возвращается функцией &lt;code&gt;render&lt;/code&gt; этого компонента .</target>
        </trans-unit>
        <trans-unit id="f2ebecba11006afe5e6dab26c6ed914444836617" translate="yes" xml:space="preserve">
          <source>In our experience, this is most often what people would actually want and expect out of the &lt;code&gt;.ref(...)&lt;/code&gt; method.</source>
          <target state="translated">По нашему опыту, это чаще всего то, что люди действительно хотят и ожидают от &lt;code&gt;.ref(...)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e7544a425d557cd505e3e4433205f4ce687ebf7" translate="yes" xml:space="preserve">
          <source>In practice we have found that this isn't actually needed that often, and when it is it is not difficult to add. Additionally, having the enzyme wrapper automatically update alongside the real render tree can result in flaky tests when writing asynchronous tests. This breaking change was worth the architectural benefits of the new adapter system in v3, and we believe is a better choice for an assertion library to take.</source>
          <target state="translated">На практике мы обнаружили,что на самом деле это не так уж и часто необходимо,а когда это необходимо,добавить несложно.Кроме того,наличие ферментной обёртки,автоматически обновляющейся вместе с реальным деревом рендера,может привести к флэки-тестам при написании асинхронных тестов.Это прерывистое изменение стоило архитектурных преимуществ новой системы адаптеров в v3,и мы считаем,что это лучший выбор для библиотеки утверждений.</target>
        </trans-unit>
        <trans-unit id="616b5bdc368799c2dfb5c2d1cb34c9dea3939bfb" translate="yes" xml:space="preserve">
          <source>In previous versions of enzyme, there was a public &lt;code&gt;describeWithDOM&lt;/code&gt; API which loaded in a new JSDOM document into the global namespace before every test, ensuring that tests were deterministic and did not have side-effects.</source>
          <target state="translated">В предыдущих версиях фермента существовал общедоступный API-интерфейс &lt;code&gt;describeWithDOM&lt;/code&gt; , который загружался в новом документе JSDOM в глобальное пространство имен перед каждым тестом, гарантируя, что тесты были детерминированными и не имели побочных эффектов.</target>
        </trans-unit>
        <trans-unit id="dd73fc327272bc89685bbefe838a813d810b42c0" translate="yes" xml:space="preserve">
          <source>In some cases find will return a host node and DOM node. Take the following for example:</source>
          <target state="translated">В некоторых случаях найти вернет хост-узел и DOM-узел.Возьмем для примера следующее:</target>
        </trans-unit>
        <trans-unit id="248ea40b051f5f11da5a8f53f0484c850adeb065" translate="yes" xml:space="preserve">
          <source>In the wild</source>
          <target state="translated">В дикой природе</target>
        </trans-unit>
        <trans-unit id="d9567956e626bedb02b6e08f4c9decf994522429" translate="yes" xml:space="preserve">
          <source>In this case enzyme will automatically check for updates after an event simulation takes place, as it knows that this is a very common place for state changes to occur. In this case there is no difference between v2 and v3.</source>
          <target state="translated">В этом случае фермент будет автоматически проверять обновления после симуляции события,так как он знает,что это очень распространенное место для изменения состояния.В этом случае нет разницы между v2 и v3.</target>
        </trans-unit>
        <trans-unit id="3b55c784ca97d77dddd46fa97b6eadf82c781403" translate="yes" xml:space="preserve">
          <source>In this case we can call &lt;code&gt;.ref('abc')&lt;/code&gt; on a wrapper of &lt;code&gt;Box&lt;/code&gt;. In this case it will return a wrapper around the rendered div. To demonstrate, we can see that both &lt;code&gt;wrapper&lt;/code&gt; and the result of &lt;code&gt;ref(...)&lt;/code&gt; share the same constructor:</source>
          <target state="translated">В этом случае мы можем вызвать &lt;code&gt;.ref('abc')&lt;/code&gt; для оболочки &lt;code&gt;Box&lt;/code&gt; . В этом случае он вернет оболочку вокруг визуализированного div. Чтобы продемонстрировать, мы видим, что и &lt;code&gt;wrapper&lt;/code&gt; и результат &lt;code&gt;ref(...)&lt;/code&gt; используют один и тот же конструктор:</target>
        </trans-unit>
        <trans-unit id="de4b77a31baedac39ae98781534fedafe76ee659" translate="yes" xml:space="preserve">
          <source>In this case, running:</source>
          <target state="translated">В данном случае,бежать:</target>
        </trans-unit>
        <trans-unit id="3d40855065a318f6c6a1c4c13ed160647897911e" translate="yes" xml:space="preserve">
          <source>In this code, there is a timer that continuously changes the rendered output of this component. This might be a reasonable thing to do in your application. The thing is, enzyme has no way of knowing that these changes are taking place, and no way to automatically update the render tree. In enzyme v2, enzyme operated &lt;em&gt;directly&lt;/em&gt; on the in-memory representation of the render tree that React itself had. This means that even though enzyme couldn't know when the render tree was updated, updates would be reflected anyway, since React &lt;em&gt;does&lt;/em&gt; know.</source>
          <target state="translated">В этом коде есть таймер, который непрерывно изменяет визуализированный вывод этого компонента. Это может быть разумным решением для вашего приложения. Дело в том, что у фермента нет способа узнать, что эти изменения происходят, и нет способа автоматически обновить дерево рендеринга. В энзиме v2 энзим работал &lt;em&gt;непосредственно&lt;/em&gt; с представлением в памяти дерева рендеринга, которое было у самого React. Это означает , что даже если фермент не мог знать , когда делают дерево было обновлено, обновления будут отражены в любом случае, так как Реагировать &lt;em&gt;делает&lt;/em&gt; знаю.</target>
        </trans-unit>
        <trans-unit id="a7a8929f7586abdc1d58901d3607abbc81cf925c" translate="yes" xml:space="preserve">
          <source>In this guide, we will go over a couple of the most common breakages that we ran into, and how to fix them. Hopefully this will make your upgrade path that much easier. If during your upgrade you find a breakage that doesn't seem to make sense to you, feel free to file an issue.</source>
          <target state="translated">В этом руководстве мы рассмотрим пару наиболее распространенных поломок,с которыми мы столкнулись,и как их исправить.Надеюсь,это сделает ваш путь обновления намного проще.Если во время обновления вы обнаружите поломку,которая,как вам кажется,не имеет смысла,не стесняйтесь и оформите проблему.</target>
        </trans-unit>
        <trans-unit id="cbb27be4606666081259d9e675c3f0f11e1c6a89" translate="yes" xml:space="preserve">
          <source>In v2.x, &lt;code&gt;iconCount&lt;/code&gt; would be 1. In v3.x, it will be 2. This is because in v2.x it would find all of the elements matching the selector, and then remove any duplicates. Since &lt;code&gt;ICONS.success&lt;/code&gt; is included twice in the render tree, but it's a constant that's reused, it would show up as a duplicate in the eyes of enzyme v2.x. In enzyme v3, the elements that are traversed are transformations of the underlying react elements, and are thus different references, resulting in two elements being found.</source>
          <target state="translated">В v2.x &lt;code&gt;iconCount&lt;/code&gt; будет 1. В v3.x это будет 2. Это потому, что в v2.x он найдет все элементы, соответствующие селектору, а затем удалит все дубликаты. Поскольку &lt;code&gt;ICONS.success&lt;/code&gt; дважды включается в дерево рендеринга, но это постоянная, которая используется повторно, она будет отображаться как дубликат в глазах энзима v2.x. В энзиме v3 элементы, которые пересекаются, являются преобразованиями основных реагирующих элементов и, таким образом, являются разными ссылками, в результате чего обнаруживаются два элемента.</target>
        </trans-unit>
        <trans-unit id="ce61da6ddc6890af865bbcbf35ba320338b29f18" translate="yes" xml:space="preserve">
          <source>In v3, the contract is slightly changed. The ref is exactly what React would assign as the ref. In this case, it would be a DOM Element:</source>
          <target state="translated">В v3 контракт незначительно изменен.Реакция-это именно то,что Реакция назначит в качестве рефери.В этом случае это был бы элемент DOM:</target>
        </trans-unit>
        <trans-unit id="627ab7a298f17fec8e38bccc1d91af9eed291718" translate="yes" xml:space="preserve">
          <source>Install Jest, and its Babel integrations, as recommended in the &lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;Jest docs&lt;/a&gt;. Install enzyme. Then, simply require/import React, enzyme functions, and your module at the top of a test file.</source>
          <target state="translated">Установите Jest и его интеграции с Babel, как рекомендовано в &lt;a href=&quot;https://facebook.github.io/jest/docs/en/getting-started.html&quot;&gt;документации Jest&lt;/a&gt; . Установите фермент. Затем просто потребуйте / импортируйте React, функции ферментов и ваш модуль в верхней части тестового файла.</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="3d23465ae441d7d0798b0dc5121cc754d9d4e3e0" translate="yes" xml:space="preserve">
          <source>Invokes a function prop.</source>
          <target state="translated">Вызывает функциональный реквизит.</target>
        </trans-unit>
        <trans-unit id="2d9901d3fdea33b982eca1070d3aa1e07f9faeb0" translate="yes" xml:space="preserve">
          <source>Invokes a function prop. Note that in React 16.8+, &lt;code&gt;.invoke&lt;/code&gt; will wrap your handler with &lt;a href=&quot;https://reactjs.org/docs/test-utils.html#act&quot;&gt;&lt;code&gt;ReactTestUtils.act&lt;/code&gt;&lt;/a&gt; and call &lt;code&gt;.update()&lt;/code&gt; automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad61420b504be96b444a70a45fa7e33753784475" translate="yes" xml:space="preserve">
          <source>Invokes a prop function on the current node and returns the function's return value.</source>
          <target state="translated">Запускает функцию поддержки на текущем узле и возвращает возвращаемое функцией значение.</target>
        </trans-unit>
        <trans-unit id="7d94b03802e935d9f9898bbbe3dced624f97b08e" translate="yes" xml:space="preserve">
          <source>Invokes intercepter and returns itself. intercepter is called with itself. This is helpful when debugging nodes in method chains.</source>
          <target state="translated">Вызывает перехватчик и возвращает себя.Перехватчик называется сам с собой.Это полезно при отладке узлов в цепочках методов.</target>
        </trans-unit>
        <trans-unit id="b000c316b86cd8474dab118e70ad9dd058811ab0" translate="yes" xml:space="preserve">
          <source>It is important, however, to make sure that your tests using the global DOM APIs do not have leaky side-effects which could change the results of other tests. Until there is a better option, this is left to you to ensure.</source>
          <target state="translated">Однако,важно убедиться,что ваши тесты,использующие глобальные DOM API,не имеют утечек побочных эффектов,которые могут изменить результаты других тестов.До тех пор,пока не появится лучший вариант,это остается на ваше усмотрение.</target>
        </trans-unit>
        <trans-unit id="085fcf8b8477ab40d0335545176b5fae273d1620" translate="yes" xml:space="preserve">
          <source>It is possible for the community to create additional (non-official) adapters that will make enzyme work with other libraries. If you have made one and it's not included in the list below, feel free to make a PR to this README and add a link to it! The known 3rd party adapters are:</source>
          <target state="translated">Сообщество может создавать дополнительные (неофициальные)адаптеры,которые заставят фермент работать с другими библиотеками.Если вы сделали один из них и его нет в списке ниже,не стесняйтесь делать PR на этот README и добавлять ссылку на него! Известные адаптеры сторонних производителей:</target>
        </trans-unit>
        <trans-unit id="1d49b77ab61fd0ff7eac41f9a863a80dd8231fce" translate="yes" xml:space="preserve">
          <source>It is worth noting that React Native allows for a &lt;a href=&quot;https://facebook.github.io/react-native/docs/view#testid&quot;&gt;testID&lt;/a&gt; prop, that can be used a selector similar to &lt;code&gt;className&lt;/code&gt; in standard React:</source>
          <target state="translated">Стоит отметить, что React Native позволяет использовать &lt;a href=&quot;https://facebook.github.io/react-native/docs/view#testid&quot;&gt;свойство testID&lt;/a&gt; , которое может использоваться как селектор, аналогичный &lt;code&gt;className&lt;/code&gt; в стандартном React:</target>
        </trans-unit>
        <trans-unit id="3f0c2f2f9fc38f2b55d14066f74088f9a46e1873" translate="yes" xml:space="preserve">
          <source>Iterates through each node of the current wrapper and executes the provided function</source>
          <target state="translated">Проходит через каждый узел текущей обертки и выполняет предоставленную функцию</target>
        </trans-unit>
        <trans-unit id="87f1ccf9e2b97ed25667075bb0738812f0e3b73c" translate="yes" xml:space="preserve">
          <source>Iterates through each node of the current wrapper and executes the provided function with a wrapper around the corresponding node passed in as the first argument.</source>
          <target state="translated">Проходит через каждый узел текущей обертки и выполняет предоставленную функцию с оберткой вокруг соответствующего узла,переданного в качестве первого аргумента.</target>
        </trans-unit>
        <trans-unit id="760e0d80faf9972d0a62dcc783d08213ddfc2594" translate="yes" xml:space="preserve">
          <source>JSDOM + Mocha</source>
          <target state="translated">JSDOM+Мока</target>
        </trans-unit>
        <trans-unit id="3fdfc3ef8d8dda0eb4ebd3789240cc3f6a2a32a1" translate="yes" xml:space="preserve">
          <source>JSDOM will allow all of the &lt;code&gt;enzyme&lt;/code&gt; behavior you would expect. While Jest snapshot testing can be used with this approach as well, it isn't encouraged and is only supported through &lt;code&gt;wrapper.debug()&lt;/code&gt;.</source>
          <target state="translated">JSDOM обеспечивает все ожидаемое поведение &lt;code&gt;enzyme&lt;/code&gt; . Хотя с этим подходом также можно использовать тестирование снимков Jest, это не рекомендуется и поддерживается только через &lt;code&gt;wrapper.debug()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="908edefadd774242003862b325fb4429970a887e" translate="yes" xml:space="preserve">
          <source>Jest prior to version 15</source>
          <target state="translated">Шутить до версии 15</target>
        </trans-unit>
        <trans-unit id="af11460c5b2533513024763a5dce7c599baa852b" translate="yes" xml:space="preserve">
          <source>Jest version 15 and up</source>
          <target state="translated">Шуточная версия 15 и выше</target>
        </trans-unit>
        <trans-unit id="7b0de0d8f92e4d7d6abaf8a05621c7069d1267df" translate="yes" xml:space="preserve">
          <source>Jsdom requires node 4 or above. As a result, if you want to use it with &lt;code&gt;mount&lt;/code&gt;, you will need to make sure node 4 or iojs is on your machine. If you are stuck using an older version of Node, you may want to try using a browser-based test runner such as &lt;a href=&quot;karma&quot;&gt;Karma&lt;/a&gt;.</source>
          <target state="translated">Jsdom требует узла 4 или выше. В результате, если вы хотите использовать его с &lt;code&gt;mount&lt;/code&gt; , вам нужно будет убедиться, что на вашем компьютере есть узел 4 или iojs. Если вы застряли на более старой версии Node, вы можете попробовать использовать средство запуска тестов на основе браузера, такое как &lt;a href=&quot;karma&quot;&gt;Karma&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6641ccb6316ab92d471a682166ba02a5febd1742" translate="yes" xml:space="preserve">
          <source>Karma is a popular test runner that can run tests in multiple browser environments. Depending on your Karma setup, you may have a number of options for configuring Enzyme.</source>
          <target state="translated">Karma является популярным тестовым бегуном,который может выполнять тесты в нескольких средах браузера.В зависимости от настроек Karma у вас может быть несколько вариантов настройки Enzyme.</target>
        </trans-unit>
        <trans-unit id="97184cc3c547f78e18c2ae30dd18b0ec7f313288" translate="yes" xml:space="preserve">
          <source>Keep in mind that this method determines equality based on the equality of the node's children as well.</source>
          <target state="translated">Имейте в виду,что этот метод определяет равенство и на основе равенства детей узла.</target>
        </trans-unit>
        <trans-unit id="2f7de45577c15861c57b74d4f29a80707b7d62cb" translate="yes" xml:space="preserve">
          <source>Keep in mind that this method determines matching based on the matching of the node's children as well.</source>
          <target state="translated">Имейте в виду,что этот метод определяет соответствие и на основе соответствия дочерних элементов узла.</target>
        </trans-unit>
        <trans-unit id="4e83763d491228050caf3b9085b7cd5cdfae127c" translate="yes" xml:space="preserve">
          <source>Let's consider a different way this test could have been written.</source>
          <target state="translated">Давайте рассмотрим другой способ написания этого теста.</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Лицензия MIT.</target>
        </trans-unit>
        <trans-unit id="e4019f353fefb585ea7232aefc6176fd777d36e8" translate="yes" xml:space="preserve">
          <source>Lifecycle methods</source>
          <target state="translated">Методы жизненного цикла</target>
        </trans-unit>
        <trans-unit id="2c029f2cd3dfcc80cba5c52d625c37340f57b0d7" translate="yes" xml:space="preserve">
          <source>Likewise, running:</source>
          <target state="translated">Точно так же,бежать:</target>
        </trans-unit>
        <trans-unit id="e50b4426bd02c7ead34ce6dfbdd183a17560f687" translate="yes" xml:space="preserve">
          <source>Loading an emulated DOM with JSDOM</source>
          <target state="translated">Загрузка эмулированного флэш-накопителя с JSDOM</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="62eb4beb7d3cb76291ea799476d021bd545e371e" translate="yes" xml:space="preserve">
          <source>Manually sets context of the root component.</source>
          <target state="translated">Вручную устанавливает контекст корневого компонента.</target>
        </trans-unit>
        <trans-unit id="5a000ec9f61914d788405467c930c0970794b471" translate="yes" xml:space="preserve">
          <source>Manually sets props of the root component.</source>
          <target state="translated">Ручная установка реквизита корневого компонента.</target>
        </trans-unit>
        <trans-unit id="375788bd47f3004cfbd30ac5285c7133351a9c5e" translate="yes" xml:space="preserve">
          <source>Manually sets state of the root component.</source>
          <target state="translated">Вручную устанавливает состояние корневого компонента.</target>
        </trans-unit>
        <trans-unit id="1760ace6059945af8f8dc55f7b3325fe7bcb82bb" translate="yes" xml:space="preserve">
          <source>Many methods in enzyme&amp;rsquo;s API accept a &lt;em&gt;selector&lt;/em&gt; as an argument. You can select several different ways:</source>
          <target state="translated">Многие методы в API энзима принимают в качестве аргумента &lt;em&gt;селектор&lt;/em&gt; . Вы можете выбрать несколько разных способов:</target>
        </trans-unit>
        <trans-unit id="df26848d0a9e8defbee11ca591066a00ca8d692e" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array.</source>
          <target state="translated">Объединяет текущий массив узлов с другим массивом.</target>
        </trans-unit>
        <trans-unit id="6056340ca8e72eb72f1a630a109266836d8878ff" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array. Each node is passed in as a &lt;code&gt;ReactWrapper&lt;/code&gt; to the map function.</source>
          <target state="translated">Сопоставляет текущий массив узлов с другим массивом. Каждый узел передается в &lt;code&gt;ReactWrapper&lt;/code&gt; карты как ReactWrapper .</target>
        </trans-unit>
        <trans-unit id="612a11947deccda12d116eebd4b0928282141eb5" translate="yes" xml:space="preserve">
          <source>Maps the current array of nodes to another array. Each node is passed in as a &lt;code&gt;ShallowWrapper&lt;/code&gt; to the map function.</source>
          <target state="translated">Сопоставляет текущий массив узлов с другим массивом. Каждый узел передается в &lt;code&gt;ShallowWrapper&lt;/code&gt; карты как ShallowWrapper .</target>
        </trans-unit>
        <trans-unit id="8cb0efde29500617f2164324f6809ca33a506183" translate="yes" xml:space="preserve">
          <source>Migration Guide for enzyme v2.x to v3.x</source>
          <target state="translated">Руководство по миграции для фермента v2.x-v3.x</target>
        </trans-unit>
        <trans-unit id="75b00d6edbc3a669a907ae86dfebaade6de3979e" translate="yes" xml:space="preserve">
          <source>NOTE: Prior to v3.8.0 of enzyme, can only be called on a wrapper instance that is also the root instance.</source>
          <target state="translated">ЗАМЕЧАНИЕ:До версии 3.8.0 фермент может вызываться только на экземпляре обертки,который также является корневым экземпляром.</target>
        </trans-unit>
        <trans-unit id="091883a74253162ebd02d902e5e2aaa1b8c3e201" translate="yes" xml:space="preserve">
          <source>NOTE: This will &lt;em&gt;only&lt;/em&gt; work if the selector (and thus the component&amp;rsquo;s &lt;code&gt;displayName&lt;/code&gt;) is a string starting with a capital letter. Strings starting with lower case letters will be assumed to be a CSS selector (therefore a tag name).</source>
          <target state="translated">ПРИМЕЧАНИЕ. Это будет работать, &lt;em&gt;только&lt;/em&gt; если селектор (и, следовательно, &lt;code&gt;displayName&lt;/code&gt; компонента ) является строкой, начинающейся с заглавной буквы. Строки, начинающиеся со строчных букв, будут считаться селектором CSS (следовательно, именем тега).</target>
        </trans-unit>
        <trans-unit id="cee5733958af2cdd18c6c589b40534524869b31b" translate="yes" xml:space="preserve">
          <source>NOTE: When called on a shallow wrapper, &lt;code&gt;.prop(key)&lt;/code&gt; will return values for props on the root node that the component &lt;em&gt;renders&lt;/em&gt;, not the component itself. To return the props for the entire React component, use &lt;code&gt;wrapper.instance().props&lt;/code&gt;. See &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">ПРИМЕЧАНИЕ. При вызове неглубокой оболочки &lt;code&gt;.prop(key)&lt;/code&gt; будет возвращать значения для свойств в корневом узле, который &lt;em&gt;визуализирует&lt;/em&gt; компонент , а не для самого компонента. Чтобы вернуть &lt;code&gt;wrapper.instance().props&lt;/code&gt; для всего компонента React, используйте wrapper.instance (). Props . См. &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cc7fd9fb0e55497ff9e90e4203fe1f63a815717f" translate="yes" xml:space="preserve">
          <source>NOTE: When called on a shallow wrapper, &lt;code&gt;.props()&lt;/code&gt; will return values for props on the root node that the component &lt;em&gt;renders&lt;/em&gt;, not the component itself.</source>
          <target state="translated">ПРИМЕЧАНИЕ. При вызове неглубокой оболочки &lt;code&gt;.props()&lt;/code&gt; будет возвращать значения свойств для корневого узла, который &lt;em&gt;визуализирует&lt;/em&gt; компонент , а не сам компонент.</target>
        </trans-unit>
        <trans-unit id="3b2c20adfa111ce2a4510a086d82c1ca018ce3f7" translate="yes" xml:space="preserve">
          <source>NOTE: With React &lt;code&gt;16&lt;/code&gt; and above, &lt;code&gt;instance()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; for stateless functional components.</source>
          <target state="translated">ПРИМЕЧАНИЕ. В React &lt;code&gt;16&lt;/code&gt; и выше &lt;code&gt;instance()&lt;/code&gt; возвращает значение &lt;code&gt;null&lt;/code&gt; для функциональных компонентов без состояния.</target>
        </trans-unit>
        <trans-unit id="9377463d2cd2bd6eecda0f0f4d7bd2318e601cf0" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper instance that is also the root instance.</source>
          <target state="translated">ЗАМЕЧАНИЕ:может вызываться только экземпляр обертки,который также является корневым экземпляром.</target>
        </trans-unit>
        <trans-unit id="6a5d0f356c889a19393869bcd716092b80b8c090" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper instance that is also the root instance. With React &lt;code&gt;16&lt;/code&gt; and above, &lt;code&gt;instance()&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt; for stateless functional components.</source>
          <target state="translated">ПРИМЕЧАНИЕ: может вызываться только для экземпляра оболочки, который также является корневым экземпляром. В React &lt;code&gt;16&lt;/code&gt; и выше &lt;code&gt;instance()&lt;/code&gt; возвращает значение &lt;code&gt;null&lt;/code&gt; для функциональных компонентов без состояния.</target>
        </trans-unit>
        <trans-unit id="184bdeb1df9ab3c2c26b6e34611bf393cc609426" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper of a single non-DOM component element node, otherwise it will throw an error. If you have to shallow-wrap a wrapper with multiple child nodes, use &lt;a href=&quot;shallow&quot;&gt;.shallow()&lt;/a&gt;.</source>
          <target state="translated">ПРИМЕЧАНИЕ: может быть вызван только для оболочки одного узла элемента компонента, не являющегося DOM, иначе это вызовет ошибку. Если вам нужно обернуть оболочку несколькими дочерними узлами, используйте &lt;a href=&quot;shallow&quot;&gt;.shallow ()&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bc7593074e1e4415c564110b1eb4b512716f2ae6" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on a wrapper of a single non-DOM component element node, otherwise it will throw an error. If you have to shallow-wrap a wrapper with multiple child nodes, use &lt;a href=&quot;shallow&quot;&gt;&lt;code&gt;.shallow()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54342ac5b9696d06e43174ee44cb1ed6620fe75" translate="yes" xml:space="preserve">
          <source>NOTE: can only be called on wrapper of a single non-DOM component element node.</source>
          <target state="translated">ПРИМЕЧАНИЕ:может быть вызвано только на обертке одного не DOM-компонентного элемента узла.</target>
        </trans-unit>
        <trans-unit id="4192d93255f2037a90abeab85c29964838a0216a" translate="yes" xml:space="preserve">
          <source>NOTE: this does not force a re-render. Use &lt;code&gt;wrapper.setProps({})&lt;/code&gt; to force a re-render.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f87372ba39a517dab878178b973a97633cbb7ee" translate="yes" xml:space="preserve">
          <source>Next, to get started with enzyme, you can simply install it with npm:</source>
          <target state="translated">Далее,чтобы начать работать с ферментом,вы можете просто установить его с npm:</target>
        </trans-unit>
        <trans-unit id="2704597f00ed5a5902967202bcfa1d6ea3f64d6a" translate="yes" xml:space="preserve">
          <source>No equivalent for ShallowWrappers.</source>
          <target state="translated">Нет эквивалента для ShallowWrappers.</target>
        </trans-unit>
        <trans-unit id="99beda9bdbf16ea128f48de9615baa92e1fc423f" translate="yes" xml:space="preserve">
          <source>Node Equality now ignores &lt;code&gt;undefined&lt;/code&gt; values</source>
          <target state="translated">Node Equality теперь игнорирует &lt;code&gt;undefined&lt;/code&gt; значения</target>
        </trans-unit>
        <trans-unit id="56d834da4c41891a65d5df126eb0fbfe1f3cc32b" translate="yes" xml:space="preserve">
          <source>Node.js Compatibility</source>
          <target state="translated">Node.js Совместимость</target>
        </trans-unit>
        <trans-unit id="272938fbe94aac2ec7943900b4bf021951c11f66" translate="yes" xml:space="preserve">
          <source>Note that you may want to perform some additional mocking around native components, or if you want to perform snapshot testing against React Native components. Notice how you may need to mock React Navigation's &lt;code&gt;KeyGenerator&lt;/code&gt; in this case, to avoid random React keys that will cause snapshots to always fail.</source>
          <target state="translated">Обратите внимание, что вы можете захотеть выполнить дополнительные насмешки над собственными компонентами или если вы хотите выполнить тестирование моментальных снимков компонентов React Native. Обратите внимание , как вы , возможно , придется издеваться Реагировать навигация по &lt;code&gt;KeyGenerator&lt;/code&gt; в этом случае, чтобы избежать случайных Реагировать ключи , которые будут вызывать моментальные снимки всегда терпят неудачу.</target>
        </trans-unit>
        <trans-unit id="90cdfd42358142e9efe45e1e609a88f48ba1a20f" translate="yes" xml:space="preserve">
          <source>Note: can only be called on a wrapper of a single node.</source>
          <target state="translated">Примечание:может вызываться только на обертке одного узла.</target>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="f382a6e547ea25cdaf30f6ad5ce1543438e301d6" translate="yes" xml:space="preserve">
          <source>Now lets say we have a test which does something like:</source>
          <target state="translated">Теперь скажем,что у нас есть тест,который делает что-то подобное:</target>
        </trans-unit>
        <trans-unit id="2cfb9ba9bf9b69ab7fc66cced8726e4a627e7d80" translate="yes" xml:space="preserve">
          <source>Now your machine will be running Node 4. You can use the &lt;code&gt;nvm use&lt;/code&gt; command to switch between the two environments:</source>
          <target state="translated">Теперь на вашем компьютере будет запущен Node 4. Вы можете использовать команду &lt;code&gt;nvm use&lt;/code&gt; для переключения между двумя средами:</target>
        </trans-unit>
        <trans-unit id="97c1d68b25dd96a3c4a614d86470040b5990b3ea" translate="yes" xml:space="preserve">
          <source>Now, in &lt;code&gt;enzyme&lt;/code&gt; v3, you are required to re-find the component; for example:</source>
          <target state="translated">Теперь в &lt;code&gt;enzyme&lt;/code&gt; v3 вам необходимо заново найти компонент; например:</target>
        </trans-unit>
        <trans-unit id="8b0da8b37bc549db749506873bfc235153e1e2dd" translate="yes" xml:space="preserve">
          <source>Object Property Selector:</source>
          <target state="translated">Выбор свойств объекта:</target>
        </trans-unit>
        <trans-unit id="ce9fe6e31bd56d2cf57ca3b1310629b0ad41fd50" translate="yes" xml:space="preserve">
          <source>Organizations and projects using &lt;code&gt;enzyme&lt;/code&gt; can list themselves &lt;a href=&quot;inthewild.md&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Организации и проекты, использующие &lt;code&gt;enzyme&lt;/code&gt; могут указать себя &lt;a href=&quot;inthewild.md&quot;&gt;здесь&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="34922b3a1dbc65072f9fb6d34e4f30220d790567" translate="yes" xml:space="preserve">
          <source>Otherwise, the match follows the same rules as &lt;code&gt;matchesElement&lt;/code&gt;.</source>
          <target state="translated">В противном случае совпадение подчиняется тем же правилам, что и &lt;code&gt;matchesElement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02846c59f34916dfd16f0ebc7108b1d3e5075e6b" translate="yes" xml:space="preserve">
          <source>Outputs to console:</source>
          <target state="translated">Выходы на консоль:</target>
        </trans-unit>
        <trans-unit id="5dd8ea410cd3d83335c738b3dbe1715d6b34d7c3" translate="yes" xml:space="preserve">
          <source>PRs implementing more support for CSS selectors will be accepted and is an area of development for enzyme that will likely be focused on in the future.</source>
          <target state="translated">ОР,оказывающие большую поддержку селекционерам УСС,будут приняты и станут одним из направлений развития ферментов,на котором,вероятно,в будущем основное внимание будет уделяться.</target>
        </trans-unit>
        <trans-unit id="98ea62a6316d0d39d8e64c6b697fbabe4c5dd85b" translate="yes" xml:space="preserve">
          <source>Prior enzyme v3, we would observe the following behavior:</source>
          <target state="translated">Приоритетный фермент v3,мы бы наблюдали следующее поведение:</target>
        </trans-unit>
        <trans-unit id="42e3b001dfd21e6e374f0eb92c81d737957e7aa2" translate="yes" xml:space="preserve">
          <source>Prior to enzyme 3.0 there were some issues with conditional requires that were used to maintain backwards compatibility with React versions. With enzyme 3.0+, this should no longer be an issue. If it is, please file a GitHub issue or make a PR to this documentation with instructions on how to set it up.</source>
          <target state="translated">До фермента 3.0 существовали некоторые проблемы с условными требованиями,которые использовались для поддержания обратной совместимости с React-версиями.С ферментом 3.0+это больше не должно быть проблемой.Если это так,пожалуйста,отправьте сообщение о проблеме GitHub или напишите PR в эту документацию с инструкциями по ее настройке.</target>
        </trans-unit>
        <trans-unit id="33e746bee15045e6936cee4dda087dc811a98eee" translate="yes" xml:space="preserve">
          <source>Private properties and methods have been removed</source>
          <target state="translated">Частные владения и методы были удалены</target>
        </trans-unit>
        <trans-unit id="6a82f0c78db8dd669093e7c34f08489657bce49c" translate="yes" xml:space="preserve">
          <source>React 15.x</source>
          <target state="translated">Реакция 15.x</target>
        </trans-unit>
        <trans-unit id="33fcf725f773361bab8954d00597f1d0ba35e5d6" translate="yes" xml:space="preserve">
          <source>React 16.x</source>
          <target state="translated">Реакция 16.x</target>
        </trans-unit>
        <trans-unit id="ae1d789a7d86f41c5df32df65a68ab5844aed037" translate="yes" xml:space="preserve">
          <source>React Hooks support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5512f2ed79478256d4e306d08aec989819adea91" translate="yes" xml:space="preserve">
          <source>React applications are dynamic. When testing your react components, you often want to test them before &lt;em&gt;and after&lt;/em&gt; certain state changes take place. When using &lt;code&gt;mount&lt;/code&gt;, any react component instance in the entire render tree could register code to initiate a state change at any time.</source>
          <target state="translated">Приложения React динамичны. При тестировании компонентов реакции вы часто хотите протестировать их до &lt;em&gt;и после того, как&lt;/em&gt; произойдут определенные изменения состояния. При использовании &lt;code&gt;mount&lt;/code&gt; любой экземпляр реагирующего компонента во всем дереве рендеринга может зарегистрировать код для инициирования изменения состояния в любое время.</target>
        </trans-unit>
        <trans-unit id="0498f2e51c0775ecb158dd2dfe9ffc1e737be5d7" translate="yes" xml:space="preserve">
          <source>React component name and props (&lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Button[type=&quot;submit&quot;]&lt;/code&gt;, etc) - however, please note that it is strongly encouraged to find by component constructor/function and not by display name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48647bc40e8da265ad3f0daad6f311438928fa27" translate="yes" xml:space="preserve">
          <source>React semver compatibility</source>
          <target state="translated">Реакционная полупроводниковая совместимость</target>
        </trans-unit>
        <trans-unit id="1afbe1c92bade3c5195cbe87245c9338e8f78a02" translate="yes" xml:space="preserve">
          <source>ReactWrapper API</source>
          <target state="translated">ReactWrapper API</target>
        </trans-unit>
        <trans-unit id="06a4296daa13605b50738dfe50fbaae79395f5de" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/mount&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">Прочтите полную &lt;a href=&quot;docs/api/mount&quot;&gt;документацию по API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83b786401cfb568d37b3f75b3245caf5357c262e" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/render&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">Прочтите полную &lt;a href=&quot;docs/api/render&quot;&gt;документацию по API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="532f6afe18f113880d94f23a77e7ccab93f1deb8" translate="yes" xml:space="preserve">
          <source>Read the full &lt;a href=&quot;docs/api/shallow&quot;&gt;API Documentation&lt;/a&gt;</source>
          <target state="translated">Прочтите полную &lt;a href=&quot;docs/api/shallow&quot;&gt;документацию по API&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ae5ddb000e590fc6ab648cc3ae9e151edcdfdd30" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched nodes to the first in the set, just like &lt;code&gt;.at(0)&lt;/code&gt;.</source>
          <target state="translated">Сократите набор согласованных узлов до первого в наборе, как &lt;code&gt;.at(0)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d9c1c1b3dab2786b576c8e732536e59553a495d" translate="yes" xml:space="preserve">
          <source>Reduce the set of matched nodes to the last in the set, just like &lt;code&gt;.at(length - 1)&lt;/code&gt;.</source>
          <target state="translated">Уменьшите набор совпадающих узлов до последнего в наборе, как &lt;code&gt;.at(length - 1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ccff428899c967a3d55f3fc0f93235dc1bc5819" translate="yes" xml:space="preserve">
          <source>Reduces the current array of nodes to a value</source>
          <target state="translated">Уменьшает текущий массив узлов до значения</target>
        </trans-unit>
        <trans-unit id="dd1ea7efe5e373a144f50e06ea911ba50b2ebee0" translate="yes" xml:space="preserve">
          <source>Reduces the current array of nodes to a value, from right to left.</source>
          <target state="translated">Уменьшает текущий массив узлов до значения,справа налево.</target>
        </trans-unit>
        <trans-unit id="06c51f535be0284f47142bee741d11a92bae0aef" translate="yes" xml:space="preserve">
          <source>Related Methods</source>
          <target state="translated">Связанные методы</target>
        </trans-unit>
        <trans-unit id="ce21c301aba7b19e79e040426adc0bb673795029" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that do not match the provided selector.</source>
          <target state="translated">Удалите узлы в текущей обертке,которые не соответствуют предусмотренному селектору.</target>
        </trans-unit>
        <trans-unit id="ff2a8b984309013c5d79723ecf4d7e85ed3ec2d7" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that do not return true for the provided predicate function.</source>
          <target state="translated">Удалите узлы в текущей обертке,которые не возвращают true для предусмотренной функции предиката.</target>
        </trans-unit>
        <trans-unit id="32f3f76b91e6bb31e23e6471239bbbf0bbcd31a1" translate="yes" xml:space="preserve">
          <source>Remove nodes in the current wrapper that match the provided selector. (inverse of &lt;code&gt;.filter()&lt;/code&gt;)</source>
          <target state="translated">Удалите узлы в текущей оболочке, которые соответствуют предоставленному селектору. (инверсия &lt;code&gt;.filter()&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f2d4f296845c93235dc62dbb5b8c6c9ce6c66870" translate="yes" xml:space="preserve">
          <source>Removes nodes that are not host nodes; e.g., this will only return HTML nodes.</source>
          <target state="translated">Удаляет узлы,которые не являются узлами хоста;например,это вернет только HTML узлы.</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="86474c2255e8e4ff4875e3d79aede85f053698c6" translate="yes" xml:space="preserve">
          <source>Returns a CheerioWrapper around the rendered HTML of the single node's subtree. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает CheerioWrapper вокруг отображенного HTML поддерева одного узла.Это должна быть обертка одного узла.</target>
        </trans-unit>
        <trans-unit id="211f494c0a568d444559814ce3694a88c8f9ce24" translate="yes" xml:space="preserve">
          <source>Returns a CheerioWrapper of the current node's subtree.</source>
          <target state="translated">Возвращает чирлидерскую обертку поддерева текущего узла.</target>
        </trans-unit>
        <trans-unit id="d48f90d7e389e762bae92e61487e1612ed651cf6" translate="yes" xml:space="preserve">
          <source>Returns a function that, when called with arguments &lt;code&gt;args&lt;/code&gt;, will return a new wrapper based on the render prop in the original wrapper's prop &lt;code&gt;propName&lt;/code&gt;.</source>
          <target state="translated">Возвращает функцию, которая при вызове с аргументами &lt;code&gt;args&lt;/code&gt; возвращает новую оболочку на основе &lt;code&gt;propName&lt;/code&gt; рендеринга в propName исходной оболочки .</target>
        </trans-unit>
        <trans-unit id="b208d8e1ea6a1d1381c2ea60572548597c2e70b0" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of &lt;code&gt;Array#slice&lt;/code&gt;.</source>
          <target state="translated">Возвращает новую оболочку с подмножеством узлов исходной оболочки в соответствии с правилами &lt;code&gt;Array#slice&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="84b3eb8ab39a479977153d2360384a085515a55c" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector can be provided and it will filter the children by this selector</source>
          <target state="translated">Возвращает новую обертку со всеми дочерними процессами узла(ов)в текущей обертке.Опционально может быть предусмотрен селектор,который будет фильтровать дочерние элементы по этому селектору</target>
        </trans-unit>
        <trans-unit id="5d96cebed6958dafb15f68ca3b871c5a4401ac12" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with child at the specified index.</source>
          <target state="translated">Возвращает новую обертку с ребенком по указанному индексу.</target>
        </trans-unit>
        <trans-unit id="53dac4bb028547104237df7cad647ac790c3cf91" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only host nodes. When using &lt;code&gt;react-dom&lt;/code&gt;, host nodes are HTML elements rather than custom React components, e.g. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; versus &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Возвращает новую оболочку только с узлами хоста. При использовании &lt;code&gt;react-dom&lt;/code&gt; узлы хоста являются элементами HTML, а не пользовательскими компонентами React, например, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; вместо &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27c03b12897cdad0c688c7a86bc370312159c4c9" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that don't match the provided selector.</source>
          <target state="translated">Возвращает новую обертку только с теми узлами текущей обертки,которые не совпадают с предоставленным селектором.</target>
        </trans-unit>
        <trans-unit id="aae1712e7b83fc8bc756489e56950ccd84d1e15b" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that match the provided selector.</source>
          <target state="translated">Возвращает новую обертку только с теми узлами текущей обертки,которые совпадают с предоставленным селектором.</target>
        </trans-unit>
        <trans-unit id="7c08cd5e05f57b1784e102f649ce960d691e09d3" translate="yes" xml:space="preserve">
          <source>Returns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true.</source>
          <target state="translated">Возвращает новую обертку только с теми узлами текущей обертки,которые при передаче в предоставленную предикатную функцию возвращают true.</target>
        </trans-unit>
        <trans-unit id="51aab425482762c72b05a0dff6c4459464d9e82f" translate="yes" xml:space="preserve">
          <source>Returns a static HTML rendering of the current node.</source>
          <target state="translated">Возвращает статический HTML рендеринг текущего узла.</target>
        </trans-unit>
        <trans-unit id="8eb82b4477a1feba11f0c279f4d4d7bb95db7329" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the current render tree. See also &lt;a href=&quot;debug&quot;&gt;.debug()&lt;/a&gt;</source>
          <target state="translated">Возвращает строку визуализированной разметки HTML текущего дерева визуализации. См. Также &lt;a href=&quot;debug&quot;&gt;.debug ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bca84c1c2845bcc3f755b016779891fcfed37dc2" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the current render tree. See also &lt;a href=&quot;debug&quot;&gt;&lt;code&gt;.debug()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127ca02451a822a26a76eda473030fac6a21e3b5" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered HTML markup of the entire current render tree (not just the shallow-rendered part). It uses &lt;a href=&quot;../render&quot;&gt;static rendering&lt;/a&gt; internally. To see only the shallow-rendered part use &lt;a href=&quot;debug&quot;&gt;&lt;code&gt;.debug()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Возвращает строку отрисованной HTML-разметки всего текущего дерева отрисовки (а не только мелко отрисованной части). Он использует &lt;a href=&quot;../render&quot;&gt;статический рендеринг&lt;/a&gt; внутри. Чтобы увидеть только мелко отрисованную часть, используйте &lt;a href=&quot;debug&quot;&gt; &lt;code&gt;.debug()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4a223563f29c59cea67266939a3d3ac5e488f509" translate="yes" xml:space="preserve">
          <source>Returns a string of the rendered text of the current render tree. This function should be looked at with skepticism if being used to test what the actual HTML output of the component will be. If that is what you would like to test, use enzyme's &lt;code&gt;render&lt;/code&gt; function instead.</source>
          <target state="translated">Возвращает строку визуализированного текста текущего дерева визуализации. К этой функции следует относиться скептически, если она используется для проверки того, каким будет фактический HTML-вывод компонента. Если это то, что вы хотите протестировать, используйте вместо этого функцию &lt;code&gt;render&lt;/code&gt; фермента .</target>
        </trans-unit>
        <trans-unit id="4843e6ccc4589e08813463b7d2d9e025dc98a35f" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the current render tree for debugging purposes.</source>
          <target state="translated">Возвращает строковое представление текущего дерева рендера для отладки.</target>
        </trans-unit>
        <trans-unit id="c63c229f44fa6b7610dd366f82cf22267b3335c7" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the current shallow render tree for debugging purposes.</source>
          <target state="translated">Возвращает строковое представление текущего мелкого дерева рендера для отладки.</target>
        </trans-unit>
        <trans-unit id="4681ee9b89e70349c8dc415ac91a984a52520b16" translate="yes" xml:space="preserve">
          <source>Returns a string representation of the text nodes in the current render tree.</source>
          <target state="translated">Возвращает строковое представление текстовых узлов в текущем дереве рендера.</target>
        </trans-unit>
        <trans-unit id="6024b791fa3fccd05adaf11bb2782533526cf507" translate="yes" xml:space="preserve">
          <source>Returns a wrapper around all of the parents/ancestors of the single node in the wrapper. Does not include the node itself. Optionally, a selector can be provided and it will filter the parents by this selector. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает обертку вокруг всех родителей/анцесторов одного узла в обертке.Не включает сам узел.Дополнительно может быть предусмотрен селектор,который будет фильтровать родителей по этому селектору.Он должен быть одноузловой оберткой.</target>
        </trans-unit>
        <trans-unit id="47743cf1c7aa4154d6a5e0de9efc8139e113256c" translate="yes" xml:space="preserve">
          <source>Returns a wrapper around the node at a given index of the current wrapper.</source>
          <target state="translated">Возвращает обертку вокруг узла при заданном индексе текущей обертки.</target>
        </trans-unit>
        <trans-unit id="c93c139f81b3a1a8bf11c0337060399fc54ce7f8" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the first element that matches the selector by traversing up through the wrapped node's ancestors in the tree, starting with itself. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает обертку первого элемента,совпадающего с селектором,путем обхода по предкам обернутого узла в дереве,начиная с самого себя.Это должна быть одноузловая обёртка.</target>
        </trans-unit>
        <trans-unit id="868df0bf326d063f31eb0dd560c03b713601a0df" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the first node of the current wrapper.</source>
          <target state="translated">Возвращает обертку первого узла текущей обертки.</target>
        </trans-unit>
        <trans-unit id="63aed6ecb0ed15101e6b22d9cfb3cc695b4a6c34" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the last node of the current wrapper.</source>
          <target state="translated">Возвращает обертку последнего узла текущей обертки.</target>
        </trans-unit>
        <trans-unit id="17850ccab13167414365a4b05ff0fff1f73fb17a" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the node at the provided index of the current wrapper.</source>
          <target state="translated">Возвращает обертку узла по указанному индексу текущей обертки.</target>
        </trans-unit>
        <trans-unit id="e1a2d0a4328ea8c0ecf7a3fa158e0bcc21a46f4b" translate="yes" xml:space="preserve">
          <source>Returns a wrapper of the node rendered by the provided render prop.</source>
          <target state="translated">Возвращает обертку узла,оказанную предоставленным рендером.</target>
        </trans-unit>
        <trans-unit id="f0d2faea5b4935c7b9202273f5ff0f32be1c8dbf" translate="yes" xml:space="preserve">
          <source>Returns a wrapper representing the &lt;code&gt;wrappingComponent&lt;/code&gt;, if one was passed.</source>
          <target state="translated">Возвращает оболочку, представляющую &lt;code&gt;wrappingComponent&lt;/code&gt; , если он был передан.</target>
        </trans-unit>
        <trans-unit id="04c5da6aa8b4c608b9f5ddc72caa8bfc6e369eda" translate="yes" xml:space="preserve">
          <source>Returns a wrapper with the direct parent of the node in the current wrapper.</source>
          <target state="translated">Возвращает обертку с прямым родителем узла в текущей обертке.</target>
        </trans-unit>
        <trans-unit id="f595703da6e83d34c82d5b1b7dd507c6e3074eba" translate="yes" xml:space="preserve">
          <source>Returns an HTML-like string of the wrapper for debugging purposes. Useful to print out to the console when tests are not passing when you expect them to.</source>
          <target state="translated">Возвращает HTML-подобную строку обертки для отладки.Полезен для распечатки в консоли,когда тесты не проходят,когда вы этого ожидаете.</target>
        </trans-unit>
        <trans-unit id="4271154becfe0b19fa840b1121e6684e2570ded5" translate="yes" xml:space="preserve">
          <source>Returns the context hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.</source>
          <target state="translated">Возвращает хэш контекста для корневого узла обертки.Опционально передает в имени реквизита и возвращает именно это значение.</target>
        </trans-unit>
        <trans-unit id="c912b2655423dd33fa8ad3fcbc594c43b6b68010" translate="yes" xml:space="preserve">
          <source>Returns the context of the root component.</source>
          <target state="translated">Возвращает контекст корневого компонента.</target>
        </trans-unit>
        <trans-unit id="78f15630eb3ff36a32821f65f8d5bac419c1419d" translate="yes" xml:space="preserve">
          <source>Returns the instance of the root component.</source>
          <target state="translated">Возвращает экземпляр корневого компонента.</target>
        </trans-unit>
        <trans-unit id="447c8420b99aa12995505934f0bf0010780fb813" translate="yes" xml:space="preserve">
          <source>Returns the key of the current node.</source>
          <target state="translated">Возвращает ключ текущего узла.</target>
        </trans-unit>
        <trans-unit id="37be156c308403fe9c4b077210d1335623b52b6a" translate="yes" xml:space="preserve">
          <source>Returns the key of the root component.</source>
          <target state="translated">Возвращает ключ корневого компонента.</target>
        </trans-unit>
        <trans-unit id="e47376a68934a2ac36c571d2396005363e200a37" translate="yes" xml:space="preserve">
          <source>Returns the key value for the node of the current wrapper. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает значение ключа для узла текущей обертки.Это должна быть одноузловая обертка.</target>
        </trans-unit>
        <trans-unit id="cb24a58637ebb8e0960878f4adaead76c7c809de" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of the wrapper.</source>
          <target state="translated">Возвращает имя текущего узла обертки.</target>
        </trans-unit>
        <trans-unit id="84ee32cf6b18bbe3b330b63424397e5669ac0398" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of this wrapper. If it's a composite component, this will be the name of the component. If it's a native DOM node, it will be a string of the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Возвращает имя текущего узла этой оболочки. Если это составной компонент, это будет имя компонента. Если это собственный узел DOM, это будет строка имени тега. Если он &lt;code&gt;null&lt;/code&gt; , он будет &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="846143e8df1dd2a6b2e571661528144644fffaa4" translate="yes" xml:space="preserve">
          <source>Returns the name of the current node of this wrapper. If it's a composite component, this will be the name of the top-most rendered component. If it's a native DOM node, it will be a string of the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Возвращает имя текущего узла этой оболочки. Если это составной компонент, это будет имя самого верхнего визуализируемого компонента. Если это собственный узел DOM, это будет строка имени тега. Если он &lt;code&gt;null&lt;/code&gt; , он будет &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5400340ec1f7ab7bd7a0473ef35352961dff0a8c" translate="yes" xml:space="preserve">
          <source>Returns the named prop of the current node.</source>
          <target state="translated">Возвращает именованный реквизит текущего узла.</target>
        </trans-unit>
        <trans-unit id="06c2cc816d79f19530781a952587937db44f244d" translate="yes" xml:space="preserve">
          <source>Returns the named prop of the root component.</source>
          <target state="translated">Возвращает именованную опору корневого компонента.</target>
        </trans-unit>
        <trans-unit id="8287b58f3bfb5736e1ffa964ff5354fb0f5fd82a" translate="yes" xml:space="preserve">
          <source>Returns the node at a given index of the current wrapper.</source>
          <target state="translated">Возвращает узел с заданным индексом текущей обертки.</target>
        </trans-unit>
        <trans-unit id="3653e5310b59cf8e8bf0833ab9ed374e2ae0b95f" translate="yes" xml:space="preserve">
          <source>Returns the node at the provided index of the current wrapper.</source>
          <target state="translated">Возвращает узел по указанному индексу текущей обертки.</target>
        </trans-unit>
        <trans-unit id="5e8480c2078249ec45e2369935f2a91e33fc89ad" translate="yes" xml:space="preserve">
          <source>Returns the node that matches the provided reference name.</source>
          <target state="translated">Возвращает узел,совпадающий с предоставленным именем ссылки.</target>
        </trans-unit>
        <trans-unit id="8fdac4394f2315ef6d7f99c1b7ced80cbe77ef4a" translate="yes" xml:space="preserve">
          <source>Returns the outer most DOMComponent of the current wrapper.</source>
          <target state="translated">Возвращает внешнюю самую большую часть DOM-компонентной оболочки тока.</target>
        </trans-unit>
        <trans-unit id="01a22f1bc3dae6b4a4af6fdca4454020f6b9a974" translate="yes" xml:space="preserve">
          <source>Returns the prop value for the root node of the wrapper with the provided key. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает значение опора для корневого узла обертки с помощью предоставленного ключа.Это должен быть одноузловой оберток.</target>
        </trans-unit>
        <trans-unit id="33e6052badc784dd5909fa432085955c791f1501" translate="yes" xml:space="preserve">
          <source>Returns the props object for the root node of the wrapper. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает объект реквизита для корневого узла обертки.Он должен быть одноузловой оберткой.</target>
        </trans-unit>
        <trans-unit id="9785f2f026dd9329db363ea5fe1dbff1d78b74d0" translate="yes" xml:space="preserve">
          <source>Returns the props of the current node.</source>
          <target state="translated">Возвращает реквизит текущего узла.</target>
        </trans-unit>
        <trans-unit id="5cefd55129c5acf7625014f28e5df67c28f941af" translate="yes" xml:space="preserve">
          <source>Returns the props of the root component.</source>
          <target state="translated">Возвращает реквизит корневого компонента.</target>
        </trans-unit>
        <trans-unit id="3d263f5896e4560d55620aad0ec5d79d0f92e7fb" translate="yes" xml:space="preserve">
          <source>Returns the single-node wrapper's node's underlying class instance; &lt;code&gt;this&lt;/code&gt; in its methods.</source>
          <target state="translated">Возвращает базовый экземпляр класса узла одноузловой оболочки; &lt;code&gt;this&lt;/code&gt; в его методах.</target>
        </trans-unit>
        <trans-unit id="e13463ff83395c203ef765d79d9ffe0f2d2fa47e" translate="yes" xml:space="preserve">
          <source>Returns the single-node wrapper's node's underlying class instance; &lt;code&gt;this&lt;/code&gt; in its methods. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает базовый экземпляр класса узла одноузловой оболочки; &lt;code&gt;this&lt;/code&gt; в его методах. Это должна быть одноузловая оболочка.</target>
        </trans-unit>
        <trans-unit id="b58e3d2886171b4d60e046e9ba158eb3ed65e604" translate="yes" xml:space="preserve">
          <source>Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.</source>
          <target state="translated">Возвращает хэш состояния для корневого узла обертки.Опционально передается в имени реквизита и возвращает именно это значение.</target>
        </trans-unit>
        <trans-unit id="4edc0f249bfdbd3d391e3151f66c380ba92b38f9" translate="yes" xml:space="preserve">
          <source>Returns the state of the root component.</source>
          <target state="translated">Возвращает состояние корневого компонента.</target>
        </trans-unit>
        <trans-unit id="e3dc6352b2247fdf6114634bdb91d35890b51d74" translate="yes" xml:space="preserve">
          <source>Returns the type of the current node of the wrapper.</source>
          <target state="translated">Возвращает тип текущего узла обертки.</target>
        </trans-unit>
        <trans-unit id="432a423434b7d94b9844d12ae49c0ebc5e2e3381" translate="yes" xml:space="preserve">
          <source>Returns the type of the only node of this wrapper. If it's a React component, this will be the component constructor. If it's a native DOM node, it will be a string with the tag name. If it's &lt;code&gt;null&lt;/code&gt;, it will be &lt;code&gt;null&lt;/code&gt;. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает тип единственного узла этой оболочки. Если это компонент React, это будет конструктор компонента. Если это собственный узел DOM, это будет строка с именем тега. Если он &lt;code&gt;null&lt;/code&gt; , он будет &lt;code&gt;null&lt;/code&gt; . Это должна быть одноузловая оболочка.</target>
        </trans-unit>
        <trans-unit id="cf98fccc9ebd9e81478403223bfb43953b7c80c9" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElement.</source>
          <target state="translated">Возвращает завернутый Элемент Реакции.</target>
        </trans-unit>
        <trans-unit id="823e779b7f9e397ed81174292fa167f83f68d1a7" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElements</source>
          <target state="translated">Возвращает завернутые реактивные элементы</target>
        </trans-unit>
        <trans-unit id="83a0716520da4b65eaa8f5b9b6cd5221d5e7fe27" translate="yes" xml:space="preserve">
          <source>Returns the wrapped ReactElements.</source>
          <target state="translated">Возвращает завернутые Реактивные Элементы.</target>
        </trans-unit>
        <trans-unit id="b70c97509718f3bdb9af7f24520cbd34c19940f6" translate="yes" xml:space="preserve">
          <source>Returns the wrapper's underlying instance.</source>
          <target state="translated">Возвращает образец обертки.</target>
        </trans-unit>
        <trans-unit id="e52b57c814f329a48c32fac61942677c7a5dfec5" translate="yes" xml:space="preserve">
          <source>Returns whether or not a &lt;code&gt;patternNode&lt;/code&gt; react element matches any element in the render tree.</source>
          <target state="translated">Возвращает, соответствует ли элемент реакции &lt;code&gt;patternNode&lt;/code&gt; какому-либо элементу в дереве визуализации.</target>
        </trans-unit>
        <trans-unit id="58f7301ace8af3d7cca1914747061834d401b706" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given node or array of nodes exists in the render tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0adf31212e3add50555c683b374fdfd7898fb6" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given node or array of nodes is somewhere in the render tree.</source>
          <target state="translated">Возвращает,находится ли заданный узел или массив узлов где-то в дереве рендера.</target>
        </trans-unit>
        <trans-unit id="0e9d9dcb61d20f7298f07aaa2590068f62aa56a3" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element &lt;code&gt;patternNode&lt;/code&gt; matches the wrapper's render tree. It must be a single-node wrapper, and only the root node is checked.</source>
          <target state="translated">Возвращает, совпадает ли данный &lt;code&gt;patternNode&lt;/code&gt; элемента реакции с деревом визуализации оболочки. Это должна быть одноузловая оболочка, и проверяется только корневой узел.</target>
        </trans-unit>
        <trans-unit id="24f4f3cadaf232e04552c4725b309909f84f6c9e" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element exists in the render tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a764d093854729f4270fb088e83b83240afe16e" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element exists in the shallow render tree.</source>
          <target state="translated">Возвращает,существует ли заданный элемент реакции в мелком дереве рендера или нет.</target>
        </trans-unit>
        <trans-unit id="15f2233e6f94e07999edbad8efe6cfbbdaf6bbd0" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element is somewhere in the render tree.</source>
          <target state="translated">Возвращает,находится ли заданный элемент реакции где-то в дереве рендера.</target>
        </trans-unit>
        <trans-unit id="0f172b634d571b5a98761a45aca05f000e20dbce" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element matches the current render tree.</source>
          <target state="translated">Возвращает,соответствует ли заданный элемент реакции текущему дереву рендера.</target>
        </trans-unit>
        <trans-unit id="baf851fdc1725427d5c5090b54c13e5f052926b8" translate="yes" xml:space="preserve">
          <source>Returns whether or not a given react element matches the shallow render tree.</source>
          <target state="translated">Возвращает,соответствует ли заданный элемент реакции мелкому дереву рендера.</target>
        </trans-unit>
        <trans-unit id="867c910192c0675c2819c4cef528319c3b040533" translate="yes" xml:space="preserve">
          <source>Returns whether or not all given react elements match elements in the render tree. It will determine if an element in the wrapper matches the expected element by checking if the expected element has the same props as the wrapper's element and share the same values.</source>
          <target state="translated">Возвращает,все ли указанные реагирующие элементы совпадают с элементами в дереве рендера.Определяет,совпадает ли элемент в обертке с ожидаемым элементом,проверяя,имеет ли ожидаемый элемент тот же реквизит,что и элемент обертки,и разделяет ли он те же значения.</target>
        </trans-unit>
        <trans-unit id="eb31d8464b8592701130dcccf6f18bcc194ea4e3" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the given react elements in &lt;code&gt;patternNodes&lt;/code&gt; match an element in the wrapper's render tree. Every single element of &lt;code&gt;patternNodes&lt;/code&gt; must be matched one or more times. Matching follows the rules for &lt;code&gt;containsMatchingElement&lt;/code&gt;.</source>
          <target state="translated">Возвращает, соответствуют ли все заданные элементы реакции в &lt;code&gt;patternNodes&lt;/code&gt; элементу в дереве визуализации оболочки. Каждый отдельный элемент &lt;code&gt;patternNodes&lt;/code&gt; должен быть сопоставлен один или несколько раз. Сопоставление следует правилам для &lt;code&gt;containsMatchingElement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="659a816db7009c87b4d02990c9dd936eab34f08d" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the nodes in the wrapper match the provided selector.</source>
          <target state="translated">Возвращает,совпадают ли все узлы обертки с предоставленным селектором или нет.</target>
        </trans-unit>
        <trans-unit id="4de88389c5396b6d1696d30923dd0f7c55bb6092" translate="yes" xml:space="preserve">
          <source>Returns whether or not all of the nodes in the wrapper pass the provided predicate function.</source>
          <target state="translated">Возвращает,все ли узлы обертки передают предоставленную предикатную функцию.</target>
        </trans-unit>
        <trans-unit id="a862739a2d7cd7d0852eb3b7376a61b0a79a3a8e" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements are somewhere in the render tree.</source>
          <target state="translated">Возвращает,все ли данные реагирующие элементы находятся где-то в дереве рендера.</target>
        </trans-unit>
        <trans-unit id="a6b869c7ede2cf7289b6a5bcca7bf1a1ba482fa6" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exist in the render tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091dc61a59619ce541bd13cb51fe13e812a4193b" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exist in the shallow render tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469bc49dd70c04b970ce01a1d419808c041d1ead" translate="yes" xml:space="preserve">
          <source>Returns whether or not all the given react elements exists in the shallow render tree.</source>
          <target state="translated">Возвращает,все ли указанные элементы реакции существуют в мелком дереве рендера.</target>
        </trans-unit>
        <trans-unit id="85c615a8c10e6c9a349e979e529af0c2fb80dd21" translate="yes" xml:space="preserve">
          <source>Returns whether or not any nodes exist in the wrapper. Or, if a selector is passed in, whether that selector has any matches in the wrapper.</source>
          <target state="translated">Возвращает,существуют ли узлы в обертке или нет.Или,если селектор передан,имеет ли этот селектор какие-либо совпадения в обертке.</target>
        </trans-unit>
        <trans-unit id="eb1b857e32b078c3d1cb47c6bbf88828f70fdf19" translate="yes" xml:space="preserve">
          <source>Returns whether or not any of the nodes in the wrapper match the provided selector.</source>
          <target state="translated">Возвращает,соответствует ли какой-либо из узлов обертки предусмотренному селектору.</target>
        </trans-unit>
        <trans-unit id="575f789b9c8a3dc4c75029c0f7974d41af83656c" translate="yes" xml:space="preserve">
          <source>Returns whether or not any of the nodes in the wrapper pass the provided predicate function.</source>
          <target state="translated">Возвращает,передает ли любой из узлов обертки предоставленную предикатную функцию или нет.</target>
        </trans-unit>
        <trans-unit id="06654358298453abadf1b8310b716cfff7d64c17" translate="yes" xml:space="preserve">
          <source>Returns whether or not at least one of the given react elements in &lt;code&gt;patternNodes&lt;/code&gt; matches an element in the wrapper's render tree. One or more elements of &lt;code&gt;patternNodes&lt;/code&gt; must be matched one or more times. Matching follows the rules for &lt;code&gt;containsMatchingElement&lt;/code&gt;.</source>
          <target state="translated">Возвращает, соответствует ли хотя бы один из заданных элементов реакции в &lt;code&gt;patternNodes&lt;/code&gt; элементу в дереве рендеринга оболочки. Один или несколько элементов &lt;code&gt;patternNodes&lt;/code&gt; должны совпадать один или несколько раз. Сопоставление следует правилам для &lt;code&gt;containsMatchingElement&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8cf4cb4a4aa0c8ea7e078bd1c228a9cee0618513" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements exist in the render tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11254dc672b909ace4b040c6801d74a726ca2335" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements exists in the shallow render tree.</source>
          <target state="translated">Возвращает,существует ли один из данных элементов реакции в мелком дереве рендера.</target>
        </trans-unit>
        <trans-unit id="4504c0f423a02b4218abd7114857d447704ea406" translate="yes" xml:space="preserve">
          <source>Returns whether or not one of the given react elements is somewhere in the render tree.</source>
          <target state="translated">Возвращает,находится ли один из данных элементов реакции где-то в дереве рендера.</target>
        </trans-unit>
        <trans-unit id="c38f9643e7f3e984a233f21ee2274973725a4391" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current component returns a falsy value.</source>
          <target state="translated">Возвращает,возвращает ли текущий компонент фальшивое значение или нет.</target>
        </trans-unit>
        <trans-unit id="369ad60091e721a22c782c44b65ae885f4acdb02" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node exists, or, if given a selector, whether that selector has any matching results.</source>
          <target state="translated">Возвращает,существует ли текущий узел или,если ему присвоен селектор,есть ли у этого селектора какие-либо результаты совпадений.</target>
        </trans-unit>
        <trans-unit id="a771e8f191285f6aa463c3ad3eed1378818b2624" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node has the given class name or not.</source>
          <target state="translated">Возвращает,имеет ли текущий узел имя данного класса или нет.</target>
        </trans-unit>
        <trans-unit id="fc98d0069f457f71a48b5e980101db65c37f6661" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current node matches a provided selector.</source>
          <target state="translated">Возвращает,соответствует ли текущий узел заданному селектору или нет.</target>
        </trans-unit>
        <trans-unit id="b49059fd6c85ecbe02125b8a19f26e14d5517f0e" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current render tree is equal to the given node, based on the expected value.</source>
          <target state="translated">Возвращает,равно ли текущее дерево рендера данному узлу,исходя из ожидаемого значения.</target>
        </trans-unit>
        <trans-unit id="d2e8d5064c09eeaaec10ddc518d8e3dede463cc0" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current root node has the given class name or not.</source>
          <target state="translated">Возвращает,имеет ли текущий корневой узел заданное имя класса или нет.</target>
        </trans-unit>
        <trans-unit id="233392cbe7671a782ef0a549a58bc2deb01c09a1" translate="yes" xml:space="preserve">
          <source>Returns whether or not the current wrapper root node render tree looks like the one passed in.</source>
          <target state="translated">Возвращает,выглядит ли текущее дерево рендеринга корневого узла обертки как переданное.</target>
        </trans-unit>
        <trans-unit id="ab7e06314b68985a4dca47ac41336bbe48e98e25" translate="yes" xml:space="preserve">
          <source>Returns whether or not the single wrapped node matches the provided selector. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает,соответствует ли одиночный обернутый узел предусмотренному селектору или нет.Это должна быть одноузловая обертка.</target>
        </trans-unit>
        <trans-unit id="a87b82ec0344eaff42fa814dc9e2944bff0d1c65" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapped node has a &lt;code&gt;className&lt;/code&gt; prop including the passed in class name. It must be a single-node wrapper.</source>
          <target state="translated">Возвращает, имеет ли обернутый узел &lt;code&gt;className&lt;/code&gt; включая переданное имя класса. Это должна быть одноузловая оболочка.</target>
        </trans-unit>
        <trans-unit id="1e04aaa9e6cfef881c53425f11070af35bc03dca" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapper is empty.</source>
          <target state="translated">Возвращает,пустая ли обертка.</target>
        </trans-unit>
        <trans-unit id="68b5c859ac067125cfa1e0f2016660b97de40ffa" translate="yes" xml:space="preserve">
          <source>Returns whether or not the wrapper would ultimately render only the allowed falsy values: &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Возвращает, будет ли оболочка в конечном итоге отображать только разрешенные ложные значения: &lt;code&gt;false&lt;/code&gt; или &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="16ba610be171c837303028031a6a2fd55ab391ba" translate="yes" xml:space="preserve">
          <source>Running Enzyme Tests</source>
          <target state="translated">Бегущие ферментные тесты</target>
        </trans-unit>
        <trans-unit id="fcea4287c8724fcee16957ab6009c4b2b945b7e4" translate="yes" xml:space="preserve">
          <source>Say we have the following components:</source>
          <target state="translated">Скажем,у нас есть следующие компоненты:</target>
        </trans-unit>
        <trans-unit id="b27bc3b0a50b31cdf4a7d272648bf3c4d5bd05c3" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://airbnb.io/enzyme/CONTRIBUTING.html&quot;&gt;Contributors Guide&lt;/a&gt;</source>
          <target state="translated">См. &lt;a href=&quot;https://airbnb.io/enzyme/CONTRIBUTING.html&quot;&gt;Руководство для авторов&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83e8689ff526f9176c1d4258734909901000c766" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://enzymejs.github.io/enzyme/CONTRIBUTING.html&quot;&gt;Contributors Guide&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33135b2be3829032e957a12a0f1841528f96ad5" translate="yes" xml:space="preserve">
          <source>Selecting a HOC-wrapped component, or a component with a custom &lt;code&gt;displayName&lt;/code&gt;, even with lowercase letters (for example, &lt;code&gt;withHOC(MyComponent)&lt;/code&gt;) will work as well.</source>
          <target state="translated">Выбор компонента с &lt;code&gt;withHOC(MyComponent)&lt;/code&gt; HOC или компонента с настраиваемым &lt;code&gt;displayName&lt;/code&gt; , даже с использованием строчных букв (например, withHOC (MyComponent) ), также будет работать.</target>
        </trans-unit>
        <trans-unit id="6584488e7e848b728586926b3453232076a5973f" translate="yes" xml:space="preserve">
          <source>Shallow Rendering</source>
          <target state="translated">Рендеринг на мелководье</target>
        </trans-unit>
        <trans-unit id="0c98f7d21505cddcac91bc78829889e4c4c8e4be" translate="yes" xml:space="preserve">
          <source>Shallow Rendering API</source>
          <target state="translated">API мелкого рендеринга</target>
        </trans-unit>
        <trans-unit id="f97189e2777bb733d6529ed43422826c350ef594" translate="yes" xml:space="preserve">
          <source>Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result.</source>
          <target state="translated">Неглубокий рендеринг одного не DOM ребенка текущей обертки,и возврат обертки вокруг результата.</target>
        </trans-unit>
        <trans-unit id="c3c554f004d13b70d82552d2faa5192f10ab6ed6" translate="yes" xml:space="preserve">
          <source>Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result. It must be a single-node wrapper, and the node must be a React component.</source>
          <target state="translated">Неглубокий рендеринг одного не DOM ребенка текущей обертки,и возврат обертки вокруг результата.Это должна быть одноузловая обертка,а узел должен быть реактивным компонентом.</target>
        </trans-unit>
        <trans-unit id="29775febdd3aacedecb05e7c6370e98d0ace312c" translate="yes" xml:space="preserve">
          <source>Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that your tests aren't indirectly asserting on behavior of child components.</source>
          <target state="translated">Неглубокий рендеринг полезен для того,чтобы ограничить себя в тестировании компонента как единицы,а также для того,чтобы убедиться,что ваши тесты не будут косвенно утверждать о поведении дочерних компонентов.</target>
        </trans-unit>
        <trans-unit id="6fcf3ec45dade6e18e24e9a546d7a39ae274a32d" translate="yes" xml:space="preserve">
          <source>Shallow renders the current node and returns a shallow wrapper around it.</source>
          <target state="translated">Мелкий делает текущий узел и возвращает неглубокую обертку вокруг него.</target>
        </trans-unit>
        <trans-unit id="65678f72629e87f46025249a398b3e8b418c67d8" translate="yes" xml:space="preserve">
          <source>Shallow renders the root node and returns a shallow wrapper around it. It must be a single-node wrapper.</source>
          <target state="translated">Мелкий делает корневой узел и возвращает неглубокую обертку вокруг него.Это должна быть одноузловая обёртка.</target>
        </trans-unit>
        <trans-unit id="560e58be4b35a3a4b6fbcd0759163a10d81df23e" translate="yes" xml:space="preserve">
          <source>ShallowWrapper API</source>
          <target state="translated">API мелкой обёртки</target>
        </trans-unit>
        <trans-unit id="8ff4ce86898e61c7e721a7c7c1ab809d753ce8e1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;setState&lt;/code&gt;, this method accepts a props object and will merge it in with the already existing props.</source>
          <target state="translated">Подобно &lt;code&gt;setState&lt;/code&gt; , этот метод принимает объект реквизита и объединяет его с уже существующими реквизитами.</target>
        </trans-unit>
        <trans-unit id="b9aad7fb1da5a5c866c5852d99771055afd37ad4" translate="yes" xml:space="preserve">
          <source>Similarly, if you have a ref on a composite component, the &lt;code&gt;ref(...)&lt;/code&gt; method will return an instance of that element:</source>
          <target state="translated">Точно так же, если у вас есть ссылка на составной компонент, метод &lt;code&gt;ref(...)&lt;/code&gt; вернет экземпляр этого элемента:</target>
        </trans-unit>
        <trans-unit id="0a2796687259fb731a09b73a24df1ba2becd8fd1" translate="yes" xml:space="preserve">
          <source>Similarly, if you want to create some one-off elements for your test to mount into:</source>
          <target state="translated">Аналогичным образом,если вы хотите создать несколько одноразовых элементов для вашего теста,в который вы хотите вмонтировать:</target>
        </trans-unit>
        <trans-unit id="9d954c92a3aa5e77fc739d63f50f276bad17d58d" translate="yes" xml:space="preserve">
          <source>Simulate a component throwing an error as part of its rendering lifecycle.</source>
          <target state="translated">Моделировать компонент,бросающий ошибку,как часть жизненного цикла его рендеринга.</target>
        </trans-unit>
        <trans-unit id="702ee90247c3bf17eb2caf76e1ca1508ac106c40" translate="yes" xml:space="preserve">
          <source>Simulate events on the root node in the wrapper. It must be a single-node wrapper.</source>
          <target state="translated">Моделируйте события на корневом узле обертки.Это должна быть одноузловая обертка.</target>
        </trans-unit>
        <trans-unit id="e9ef863d8d64208d4d7b89d35c6e5d4391ca972d" translate="yes" xml:space="preserve">
          <source>Simulates an event on the current node.</source>
          <target state="translated">Моделирует событие на текущем узле.</target>
        </trans-unit>
        <trans-unit id="3f5f1d9d76dae330858a85c6b06f4bb96cc20fd8" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;&amp;lt;Foo/&amp;gt;&lt;/code&gt; has the className &lt;code&gt;bar&lt;/code&gt; it is returned as the &lt;em&gt;hostNode&lt;/em&gt;. As expected the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the className &lt;code&gt;bar&lt;/code&gt; is also returned</source>
          <target state="translated">Так как &lt;code&gt;&amp;lt;Foo/&amp;gt;&lt;/code&gt; имеет Classname &lt;code&gt;bar&lt;/code&gt; он возвращается как &lt;em&gt;hostNode&lt;/em&gt; . Как и ожидалось, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; с имя класса &lt;code&gt;bar&lt;/code&gt; также возвращается</target>
        </trans-unit>
        <trans-unit id="c21d763dbbb03a35ee7d68c75a0fb54014d00ec5" translate="yes" xml:space="preserve">
          <source>Since enzyme's &lt;a href=&quot;../api/mount&quot;&gt;&lt;code&gt;mount&lt;/code&gt;&lt;/a&gt; API requires a DOM, JSDOM is required in order to use &lt;code&gt;mount&lt;/code&gt; if you are not already in a browser environment (ie, a Node environment).</source>
          <target state="translated">Поскольку API &lt;a href=&quot;../api/mount&quot;&gt; &lt;code&gt;mount&lt;/code&gt; &lt;/a&gt; энзима требует DOM, JSDOM требуется для использования &lt;code&gt;mount&lt;/code&gt; если вы еще не находитесь в среде браузера (т. Е. В среде узла).</target>
        </trans-unit>
        <trans-unit id="3dd0fdaa1df48bfebe63ca70acca30e2fce76103" translate="yes" xml:space="preserve">
          <source>Some times you may need to switch between different versions of node, you can use a CLI tool called &lt;code&gt;nvm&lt;/code&gt; to quickly switch between node versions.</source>
          <target state="translated">Иногда вам может потребоваться переключаться между разными версиями узла, вы можете использовать инструмент CLI под названием &lt;code&gt;nvm&lt;/code&gt; для быстрого переключения между версиями узла.</target>
        </trans-unit>
        <trans-unit id="9cd0cfcdfd36362b796ce8d68ef122d71e59f347" translate="yes" xml:space="preserve">
          <source>Starting with version 15, Jest &lt;a href=&quot;https://facebook.github.io/jest/blog/2016/09/01/jest-15.html&quot;&gt;no longer mocks modules by default&lt;/a&gt;. Because of this, you no longer have to add &lt;em&gt;any&lt;/em&gt; special configuration for Jest to use it with enzyme.</source>
          <target state="translated">Начиная с версии 15, Jest &lt;a href=&quot;https://facebook.github.io/jest/blog/2016/09/01/jest-15.html&quot;&gt;больше не имитирует модули по умолчанию&lt;/a&gt; . По этой причине вам больше не нужно добавлять &lt;em&gt;какую-либо&lt;/em&gt; специальную конфигурацию для Jest, чтобы использовать его с ферментом.</target>
        </trans-unit>
        <trans-unit id="509cd62dd60a50e7b4735e094e0210d9b1134894" translate="yes" xml:space="preserve">
          <source>Static Rendered Markup</source>
          <target state="translated">Статическая разметка</target>
        </trans-unit>
        <trans-unit id="54b46dfae6b94679cde8e3d5c3ad73422be95285" translate="yes" xml:space="preserve">
          <source>Static Rendering API</source>
          <target state="translated">API статического реендеринга</target>
        </trans-unit>
        <trans-unit id="bae7d5be70820ed56467bd9a63744e23b47bd711" translate="yes" xml:space="preserve">
          <source>Status</source>
          <target state="translated">Status</target>
        </trans-unit>
        <trans-unit id="98d508d41cffafb39fa02f701f8248db8f343f3f" translate="yes" xml:space="preserve">
          <source>Switching between node versions</source>
          <target state="translated">Переключение между узловыми версиями</target>
        </trans-unit>
        <trans-unit id="b7b7dfe68350053e905721a37a75f592238c9f42" translate="yes" xml:space="preserve">
          <source>Syncs the enzyme component tree snapshot with the react component tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2b436067b73c2052fbbb3531c9f1145b976bda" translate="yes" xml:space="preserve">
          <source>Syncs the enzyme component tree snapshot with the react component tree. Useful to run before checking the render output if something external may be updating the state of the component somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51c55b719457118a73f5732f4dd4772aaba2e20" translate="yes" xml:space="preserve">
          <source>Tape</source>
          <target state="translated">Tape</target>
        </trans-unit>
        <trans-unit id="1c5ef51f8905605261054da7b74533748fbc136f" translate="yes" xml:space="preserve">
          <source>Taps into the wrapper method chain. Helpful for debugging.</source>
          <target state="translated">Включается в цепь оберточного метода.Полезно для отладки.</target>
        </trans-unit>
        <trans-unit id="b4934060bbb12a64f293f08202886d0057aae9eb" translate="yes" xml:space="preserve">
          <source>Test Setup</source>
          <target state="translated">Тестовая настройка</target>
        </trans-unit>
        <trans-unit id="4f5ad4e784253de531dcc73476c842aa79752de1" translate="yes" xml:space="preserve">
          <source>Testing with multiple arguments</source>
          <target state="translated">Тестирование с множеством аргументов</target>
        </trans-unit>
        <trans-unit id="69f05200ad02c73438325a9f97edf3a3d6dfa554" translate="yes" xml:space="preserve">
          <source>Testing with no arguments</source>
          <target state="translated">Тестирование без аргументов</target>
        </trans-unit>
        <trans-unit id="1417a3fe84f02d7fda06589765ae6d626c0c86db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;patternNode&lt;/code&gt; acts like a wildcard. For it to match a node in the wrapper:</source>
          <target state="translated">&lt;code&gt;patternNode&lt;/code&gt; действует как групповой символ. Чтобы он соответствовал узлу в оболочке:</target>
        </trans-unit>
        <trans-unit id="cd7675006da936cebc148177240a5e66648ae315" translate="yes" xml:space="preserve">
          <source>The attribute syntax also works by value, rather than by string. Strings, numbers, and boolean property values are supported. Example:</source>
          <target state="translated">Синтаксис атрибута также работает по значению,а не по строке.Поддерживаются строки,числа и значения булевых свойств.Пример:</target>
        </trans-unit>
        <trans-unit id="fd58be381bfe23b0165c7806ae67160d0e04ea8c" translate="yes" xml:space="preserve">
          <source>The change from enzyme v2.x to v3.x is a more significant change than in previous major releases, due to the fact that the internal implementation of enzyme has been almost completely rewritten.</source>
          <target state="translated">Переход с версии v2.x на версию v3.x является более существенным изменением,чем в предыдущих мажорных релизах,в связи с тем,что внутренняя реализация фермента была почти полностью переписана.</target>
        </trans-unit>
        <trans-unit id="14448a0e0377e480b7ddc7124808d01c9039a9bd" translate="yes" xml:space="preserve">
          <source>The fix here is to use enzyme's &lt;code&gt;wrapper.update()&lt;/code&gt; method after a state change has occurred:</source>
          <target state="translated">Исправление здесь - использовать метод энзима &lt;code&gt;wrapper.update()&lt;/code&gt; после того, как произошло изменение состояния:</target>
        </trans-unit>
        <trans-unit id="e9f19186d396c6168a387208aba2109004664e70" translate="yes" xml:space="preserve">
          <source>The following adapters are officially provided by enzyme, and have the following compatibility with React:</source>
          <target state="translated">Следующие адаптеры официально поставляются ферментом и имеют следующую совместимость с React:</target>
        </trans-unit>
        <trans-unit id="fe9f3fd382924a7e8731b5719a699030b506dfe2" translate="yes" xml:space="preserve">
          <source>The following code takes a wrapper with two nodes, one a &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; React component, and the other a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, and filters out the React component.</source>
          <target state="translated">Следующий код берет оболочку с двумя узлами, один из которых представляет собой компонент React &lt;code&gt;&amp;lt;MyComponent&amp;gt;&lt;/code&gt; , а другой - &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; , и отфильтровывает компонент React.</target>
        </trans-unit>
        <trans-unit id="0b82c6558c979a69a42d165552fb8dcad890488f" translate="yes" xml:space="preserve">
          <source>The goal of this rewrite was to address a lot of the major issues that have plagued enzyme since its initial release. It was also to simultaneously remove a lot of the dependencies that enzyme has on React internals, and to make enzyme more &quot;pluggable&quot;, paving the way for enzyme to be used with &quot;React-like&quot; libraries such as Preact and Inferno.</source>
          <target state="translated">Целью этой переписки было решение многих основных проблем,от которых страдал фермент с момента его первого релиза.Кроме того,было одновременно устранено множество зависимостей,которые фермент имеет от внутренних реакций,и сделан фермент более &quot;подключаемым&quot;,прокладывая путь для использования фермента с &quot;React-like&quot; библиотеками,такими как &quot;Preact&quot; и &quot;Inferno&quot;.</target>
        </trans-unit>
        <trans-unit id="f0a8eaf54af7dfb1510e599e33714d6695659e2d" translate="yes" xml:space="preserve">
          <source>The list of adapter npm packages for React semver ranges are as follows:</source>
          <target state="translated">Ниже приведен список npm-пакетов адаптеров для полупроводниковых диапазонов React:</target>
        </trans-unit>
        <trans-unit id="04b45de707ab95f373326a79b052ae2b05363038" translate="yes" xml:space="preserve">
          <source>The method is intentionally not &quot;fluent&quot; (in that it doesn't return &lt;code&gt;this&lt;/code&gt;) because you should not be doing anything with this wrapper after this method is called.</source>
          <target state="translated">Метод намеренно не является &amp;laquo;беглым&amp;raquo; (в том смысле, что он не возвращает &lt;code&gt;this&lt;/code&gt; ), потому что вы не должны ничего делать с этой оболочкой после вызова этого метода.</target>
        </trans-unit>
        <trans-unit id="54b41bd79d0396c5810d85957c4174e7cd1ce85e" translate="yes" xml:space="preserve">
          <source>The most common manifestation of this problem can be shown with the following example:</source>
          <target state="translated">Наиболее распространенное проявление этой проблемы можно показать на следующем примере:</target>
        </trans-unit>
        <trans-unit id="de7f705e7f07d5fbad8e80d7cfb73f792af8f048" translate="yes" xml:space="preserve">
          <source>The order of precedence on returning the name is: &lt;code&gt;type.displayName&lt;/code&gt; -&amp;gt; &lt;code&gt;type.name&lt;/code&gt; -&amp;gt; &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">Порядок приоритета при возврате имени следующий: &lt;code&gt;type.displayName&lt;/code&gt; -&amp;gt; &lt;code&gt;type.name&lt;/code&gt; -&amp;gt; &lt;code&gt;type&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa5bafa4d729eb6a990261728a5428c58659dd37" translate="yes" xml:space="preserve">
          <source>The problem here is that once we grab the instance using &lt;code&gt;wrapper.instance()&lt;/code&gt;, enzyme has no way of knowing if you are going to execute something that will cause a state transition, and thus does not know when to ask for an updated render tree from React. As a result, &lt;code&gt;.text()&lt;/code&gt; never changes value.</source>
          <target state="translated">Проблема здесь в том, что как только мы захватываем экземпляр с помощью &lt;code&gt;wrapper.instance()&lt;/code&gt; , энзим не имеет возможности узнать, собираетесь ли вы выполнить что-то, что вызовет переход состояния, и поэтому не знает, когда запрашивать обновленное дерево рендеринга. из React. В результате &lt;code&gt;.text()&lt;/code&gt; никогда не меняет значение.</target>
        </trans-unit>
        <trans-unit id="daf0b4f3030360830d4073aeca63f4d54cd2a60a" translate="yes" xml:space="preserve">
          <source>The root component you are rendering must have a &lt;code&gt;contextTypes&lt;/code&gt; static property.</source>
          <target state="translated">Корневой компонент, который вы визуализируете, должен иметь статическое свойство &lt;code&gt;contextTypes&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf48627746bdf49edc54d5941c5bc3a73c5877ea" translate="yes" xml:space="preserve">
          <source>The selector &lt;code&gt;[anum=3]&lt;/code&gt; will select the first  but not the second, because there's no quotes surrounding the 3. The selector &lt;code&gt;[anum=&quot;3&quot;]&lt;/code&gt; will select the second, because it's explicitly looking for a string because of the quotes surrounding 3. The same goes for the boolean; [abool=false] will select the first but not the second, etc.</source>
          <target state="translated">Селектор &lt;code&gt;[anum=3]&lt;/code&gt; выберет первый, но не второй, потому что нет кавычек, окружающих 3. Селектор &lt;code&gt;[anum=&quot;3&quot;]&lt;/code&gt; выберет второй, потому что он явно ищет строку из-за кавычек, окружающих 3. То же самое и с логическим значением; [abool = false] выберет первый, но не второй и т. д.</target>
        </trans-unit>
        <trans-unit id="ae6aad03a4ca9495db1eb566aad13da43dc3f967" translate="yes" xml:space="preserve">
          <source>Then create or update the file specified in &lt;code&gt;setupFilesAfterEnv&lt;/code&gt;, in this case &lt;code&gt;setup-tests.js&lt;/code&gt; in the project root:</source>
          <target state="translated">Затем создайте или обновите файл, указанный в &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; , в данном случае &lt;code&gt;setup-tests.js&lt;/code&gt; в корне проекта:</target>
        </trans-unit>
        <trans-unit id="9ce43c0103f6d00da73685f37f07ed1168ee5266" translate="yes" xml:space="preserve">
          <source>Then you should then be able to start writing tests!</source>
          <target state="translated">Тогда вы сможете начать писать тесты!</target>
        </trans-unit>
        <trans-unit id="98c43d6f3379ce74ae886cdbf7846f995e0be32b" translate="yes" xml:space="preserve">
          <source>There are several properties that are on an enzyme &quot;wrapper&quot; that were considered to be private and were undocumented as a result. Despite being undocumented, people may have been relying on them. In an effort to make making changes less likely to be accidentally breaking in the future, we have decided to make these properties properly &quot;private&quot;. The following properties will no longer be accessible on enzyme &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;mount&lt;/code&gt; instances:</source>
          <target state="translated">Есть несколько свойств, которые находятся на &amp;laquo;обертке&amp;raquo; фермента, которые считались частными и в результате были недокументированы. Несмотря на отсутствие документов, люди могли полагаться на них. Стремясь снизить вероятность случайного выхода изменений в будущем, мы решили сделать эти свойства должным образом &amp;laquo;закрытыми&amp;raquo;. Следующие свойства больше не будут доступны на &lt;code&gt;shallow&lt;/code&gt; или &lt;code&gt;mount&lt;/code&gt; экземплярах ферментов :</target>
        </trans-unit>
        <trans-unit id="21ff270d6ed5af4091bd8d63f9d33b0d47397de3" translate="yes" xml:space="preserve">
          <source>There is no corresponding &lt;code&gt;dive&lt;/code&gt; method for ReactWrappers.</source>
          <target state="translated">Там нет соответствующего &lt;code&gt;dive&lt;/code&gt; метод ReactWrappers.</target>
        </trans-unit>
        <trans-unit id="c88108e486651421b0890c1a2eb70f3dfa36b6d3" translate="yes" xml:space="preserve">
          <source>This approach is no longer recommended. React's source code makes several assumptions about the environment it is running in, and one of them is that the &lt;code&gt;global.document&lt;/code&gt; that is found at &quot;require time&quot; is going to be the one and only document it ever needs to worry about. As a result, this type of &quot;reloading&quot; ends up causing more pain than it prevents.</source>
          <target state="translated">Этот подход больше не рекомендуется. Исходный код React делает несколько предположений относительно среды, в которой он работает, и одно из них состоит в том, что &lt;code&gt;global.document&lt;/code&gt; , который находится в &quot;require time&quot;, будет единственным документом, о котором ему когда-либо нужно беспокоиться. В результате этот тип &amp;laquo;перезагрузки&amp;raquo; в конечном итоге вызывает больше боли, чем предотвращает.</target>
        </trans-unit>
        <trans-unit id="e89acafb45f9dadda31505ee9a95c6403476ae32" translate="yes" xml:space="preserve">
          <source>This can be difficult when you want your test suite to run with typical Continuous Integration servers such as Travis.</source>
          <target state="translated">Это может быть сложно,когда вы хотите,чтобы ваш набор тестов работал с типичными серверами непрерывной интеграции,такими как Travis.</target>
        </trans-unit>
        <trans-unit id="34cc70b8d4de39a16fe4daa9d8c9996a91daf6d2" translate="yes" xml:space="preserve">
          <source>This essentially calls &lt;code&gt;wrapper.prop(propName)(...args)&lt;/code&gt;.</source>
          <target state="translated">По сути, это вызывает &lt;code&gt;wrapper.prop(propName)(...args)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a1f5370c420b51072fdf41a91fd5d714e33f747" translate="yes" xml:space="preserve">
          <source>This essentially calls wrapper.prop(propName)(...args).</source>
          <target state="translated">По сути,это вызывает wrapper.prop(propName)(...args).</target>
        </trans-unit>
        <trans-unit id="67aae79eb216ddb5f494e83c6f8b9a55d3413bf6" translate="yes" xml:space="preserve">
          <source>This is a basic &quot;counter&quot; component in React. Here our resulting markup is a function of &lt;code&gt;this.state.count&lt;/code&gt;, which can get updated by the &lt;code&gt;increment&lt;/code&gt; and &lt;code&gt;decrement&lt;/code&gt; functions. Let's take a look at what some enzyme tests with this component might look like, and when we do or don't have to call &lt;code&gt;update()&lt;/code&gt;.</source>
          <target state="translated">Это базовый &quot;счетчик&quot; в React. Здесь наша результирующая разметка является функцией &lt;code&gt;this.state.count&lt;/code&gt; , которая может обновляться функциями &lt;code&gt;increment&lt;/code&gt; и &lt;code&gt;decrement&lt;/code&gt; . Давайте посмотрим, как могут выглядеть некоторые ферментные тесты с этим компонентом, и когда нам нужно или не нужно вызывать &lt;code&gt;update()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d650cd97f511118f65ca455db78526fcfd92098" translate="yes" xml:space="preserve">
          <source>This is particularly useful in combination with React 16 error boundaries (ie, the &lt;code&gt;componentDidCatch&lt;/code&gt; and &lt;code&gt;static getDerivedStateFromError&lt;/code&gt; lifecycle methods).</source>
          <target state="translated">Это особенно полезно в сочетании с границами ошибок React 16 (т. &lt;code&gt;static getDerivedStateFromError&lt;/code&gt; жизненного цикла &lt;code&gt;componentDidCatch&lt;/code&gt; и static getDerivedStateFromError ).</target>
        </trans-unit>
        <trans-unit id="64c18eea6d76734fa603733d5e714fa9b4672148" translate="yes" xml:space="preserve">
          <source>This may seem like a subtle difference, but making this change will be important for future APIs we would like to introduce.</source>
          <target state="translated">Это может показаться тонким различием,но внесение этого изменения будет важно для будущих API,которые мы хотели бы ввести.</target>
        </trans-unit>
        <trans-unit id="75928e7051878916146451cc7237f402c24a0099" translate="yes" xml:space="preserve">
          <source>This method is a reliable way of accessing the props of a node; &lt;code&gt;wrapper.instance().props&lt;/code&gt; will work as well, but in React 16+, stateless functional components do not have an instance. See &lt;a href=&quot;instance&quot;&gt;&lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Этот метод - надежный способ доступа к свойствам узла; &lt;code&gt;wrapper.instance().props&lt;/code&gt; будет работать, но в React 16+ функциональные компоненты без сохранения состояния не имеют экземпляра. См. &lt;a href=&quot;instance&quot;&gt; &lt;code&gt;.instance() =&amp;gt; ReactComponent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9bb60f0d371e9140329e7106af453bcc2adfc770" translate="yes" xml:space="preserve">
          <source>This method is effectively the negation or inverse of &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Этот метод фактически является отрицанием или инверсией &lt;a href=&quot;filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a751a0351ca228167b0712384eb843c978bc775c" translate="yes" xml:space="preserve">
          <source>This method will most commonly be used as a &quot;cleanup&quot; method if you decide to use the &lt;code&gt;attachTo&lt;/code&gt; or &lt;code&gt;hydrateIn&lt;/code&gt; option in &lt;code&gt;mount(node, options)&lt;/code&gt;.</source>
          <target state="translated">Этот метод чаще всего будет использоваться как метод &amp;laquo;очистки&amp;raquo;, если вы решите использовать параметр &lt;code&gt;attachTo&lt;/code&gt; или &lt;code&gt;hydrateIn&lt;/code&gt; в &lt;code&gt;mount(node, options)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a8930ecb739db424d5d0df6ef8621a1747943499" translate="yes" xml:space="preserve">
          <source>This will default enzyme back to the previous behavior globally. If instead you'd only like to opt enzyme to the previous behavior for a specific test, you can do the following:</source>
          <target state="translated">По умолчанию этот фермент вернется к предыдущему поведению глобально.Если вместо этого вы хотите выбрать фермент для предыдущего поведения только для конкретного теста,вы можете сделать следующее:</target>
        </trans-unit>
        <trans-unit id="48b2fc5945e0eb50da2da8d67f030dbbbcc32fc4" translate="yes" xml:space="preserve">
          <source>To avoid this you can explicity query for the DOM node: &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt;. Alternatively if you would like to only find host nodes use &lt;a href=&quot;../api/shallowwrapper/hostnodes&quot;&gt;hostNodes()&lt;/a&gt;</source>
          <target state="translated">Чтобы избежать этого, вы можете запросить &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt; запрос для узла DOM: wrapper.find ('div.bar') . В качестве альтернативы, если вы хотите найти только хост-узлы, используйте &lt;a href=&quot;../api/shallowwrapper/hostnodes&quot;&gt;hostNodes ()&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="001847f6373fc4264e1397f1aa89d57b25d36091" translate="yes" xml:space="preserve">
          <source>To avoid this you can explicity query for the DOM node: &lt;code&gt;wrapper.find('div.bar')&lt;/code&gt;. Alternatively if you would like to only find host nodes use &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ShallowWrapper/hostNodes.html&quot;&gt;hostNodes()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fe06b9f13303c023a6e17d9b5abe4845548672" translate="yes" xml:space="preserve">
          <source>To get started with enzyme, you can simply install it via npm. You will need to install enzyme along with an Adapter corresponding to the version of react (or other UI Component library) you are using. For instance, if you are using enzyme with React 16, you can run:</source>
          <target state="translated">Чтобы приступить к работе с ферментом,можно просто установить его через npm.Вам нужно будет установить фермент вместе с адаптером,соответствующим используемой вами версии реакции (или другой библиотеки UI Component).Например,если вы используете фермент с реакцией 16,вы можете запустить его:</target>
        </trans-unit>
        <trans-unit id="bbfaea96cbbd16eac96f1a9da34bed2aea33eca1" translate="yes" xml:space="preserve">
          <source>To get the wrapper that was returned by enzyme 2:</source>
          <target state="translated">Чтобы получить обертку,которую вернул фермент 2:</target>
        </trans-unit>
        <trans-unit id="5961dfea7a46501ec6cf9bf7395b4402a4294c33" translate="yes" xml:space="preserve">
          <source>To install &lt;code&gt;nvm&lt;/code&gt;, use the curl script from &lt;a href=&quot;http://nvm.sh&quot;&gt;http://nvm.sh&lt;/a&gt;, and then:</source>
          <target state="translated">Чтобы установить &lt;code&gt;nvm&lt;/code&gt; , используйте сценарий curl из &lt;a href=&quot;http://nvm.sh&quot;&gt;http://nvm.sh&lt;/a&gt; , а затем:</target>
        </trans-unit>
        <trans-unit id="39adb7d2e820059a12833b6307237676b58ad269" translate="yes" xml:space="preserve">
          <source>To perform the necessary configuration in your testing framework, it is recommended to use a setup script, such as with Jest's &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; setting.</source>
          <target state="translated">Чтобы выполнить необходимую настройку в вашей среде тестирования, рекомендуется использовать сценарий установки, например, с параметром Jest &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02055a86dabb06d94de1b614c374ef4adb0e93a6" translate="yes" xml:space="preserve">
          <source>To return only the html nodes use the &lt;a href=&quot;../api/reactwrapper/hostnodes&quot;&gt;&lt;code&gt;hostNodes()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Чтобы вернуть только узлы html, используйте &lt;a href=&quot;../api/reactwrapper/hostnodes&quot;&gt; &lt;code&gt;hostNodes()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="743ee74d065812e1b161964495ad0fd662d1b837" translate="yes" xml:space="preserve">
          <source>To run the setup file to configure Enzyme and the Adapter (as shown in the &lt;a href=&quot;http://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs&lt;/a&gt;) with Jest, set &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; (previously &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt;) in your config file (check &lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest's documentation&lt;/a&gt; for the possible locations of that config file) to literally the string &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; and the path to your setup file.</source>
          <target state="translated">Чтобы запустить установочный файл для настройки Enzyme и адаптера (как показано в &lt;a href=&quot;http://airbnb.io/enzyme/docs/installation/&quot;&gt;документации&lt;/a&gt; по установке ) с помощью Jest, установите &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; (ранее &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt; ) в своем файле конфигурации (см &lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;. Документацию Jest, чтобы&lt;/a&gt; узнать о возможных местах этого файла конфигурации) буквально на строку &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; и путь к вашему установочному файлу.</target>
        </trans-unit>
        <trans-unit id="8abe2630a27a301a3f4e96394604310b6ad79e86" translate="yes" xml:space="preserve">
          <source>To run the setup file to configure Enzyme and the Adapter (as shown in the &lt;a href=&quot;https://airbnb.io/enzyme/docs/installation/&quot;&gt;Installation docs&lt;/a&gt;) with Jest, set &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; (previously &lt;code&gt;setupTestFrameworkScriptFile&lt;/code&gt;) in your config file (check &lt;a href=&quot;http://jestjs.io/docs/en/configuration&quot;&gt;Jest's documentation&lt;/a&gt; for the possible locations of that config file) to literally the string &lt;code&gt;&amp;lt;rootDir&amp;gt;&lt;/code&gt; and the path to your setup file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1932b2cc7181ad1d6f37471665485061105e0f" translate="yes" xml:space="preserve">
          <source>To use enzyme to test React Native, you currently need to configure an adapter, and load an emulated DOM.</source>
          <target state="translated">Чтобы использовать фермент для тестирования React Native,в настоящее время необходимо настроить адаптер и загрузить эмулированный DOM.</target>
        </trans-unit>
        <trans-unit id="8e76f50b0c0070c13bd3575482a1b3e02694ad16" translate="yes" xml:space="preserve">
          <source>To use enzyme's &lt;code&gt;mount&lt;/code&gt; until a React Native adapter exists, an emulated DOM must be loaded.</source>
          <target state="translated">Чтобы использовать &lt;code&gt;mount&lt;/code&gt; фермента до появления адаптера React Native, необходимо загрузить эмулированный DOM.</target>
        </trans-unit>
        <trans-unit id="da0531f7a776bc0f9ed3a79eacdfebaf95626b7d" translate="yes" xml:space="preserve">
          <source>Undefined properties are not allowed in the object property selector and will cause an error:</source>
          <target state="translated">Неопределенные свойства не допускаются в селекторе свойств объекта и приведут к ошибке:</target>
        </trans-unit>
        <trans-unit id="37b86a1e4083a8c9826e8d440741608d49956214" translate="yes" xml:space="preserve">
          <source>Unfortunately, React Native has many environmental dependencies that can be hard to simulate without a host device.</source>
          <target state="translated">К сожалению,React Native имеет много зависимостей от окружающей среды,которые может быть трудно смоделировать без хост-устройства.</target>
        </trans-unit>
        <trans-unit id="4c7d75a7398deaec8f1a682012bc2fd84deb68d7" translate="yes" xml:space="preserve">
          <source>Unmount the component from the DOM node it's attached to.</source>
          <target state="translated">Отключите компонент от DOM-узла,к которому он прикреплен.</target>
        </trans-unit>
        <trans-unit id="29b86486c6061ee8d73c218e760634322dd772ce" translate="yes" xml:space="preserve">
          <source>Update the file specified in &lt;code&gt;setupFilesAfterEnv&lt;/code&gt;, in this case &lt;code&gt;setup-tests.js&lt;/code&gt; in the project root:</source>
          <target state="translated">Обновите файл, указанный в &lt;code&gt;setupFilesAfterEnv&lt;/code&gt; , в данном случае &lt;code&gt;setup-tests.js&lt;/code&gt; в корне проекта:</target>
        </trans-unit>
        <trans-unit id="83af9e201878ffcd919622639a3ba1112fd7c590" translate="yes" xml:space="preserve">
          <source>Upgrading from Enzyme 2.x or React &amp;lt; 16</source>
          <target state="translated">Обновление с Enzyme 2.x или React &amp;lt;16</target>
        </trans-unit>
        <trans-unit id="07ee91c3dd1340b2baa75b84b491e60df34adbb3" translate="yes" xml:space="preserve">
          <source>Use enzyme's &lt;code&gt;render&lt;/code&gt; function to generate HTML from your React tree, and analyze the resulting HTML structure.</source>
          <target state="translated">Используйте функцию &lt;code&gt;render&lt;/code&gt; энзима, чтобы сгенерировать HTML из вашего дерева React и проанализировать полученную структуру HTML.</target>
        </trans-unit>
        <trans-unit id="d07c7d0b47ab66dd05249f29c311cd658e060249" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;attachTo&lt;/code&gt;/&lt;code&gt;hydrateIn&lt;/code&gt; is not generally recommended unless it is absolutely necessary to test something. It is your responsibility to clean up after yourself at the end of the test if you do decide to use it, though.</source>
          <target state="translated">Использование &lt;code&gt;attachTo&lt;/code&gt; / &lt;code&gt;hydrateIn&lt;/code&gt; обычно не рекомендуется, за исключением случаев, когда это абсолютно необходимо для тестирования. Однако вы обязаны убрать за собой в конце теста, если вы все же решите его использовать.</target>
        </trans-unit>
        <trans-unit id="41e058e858bd4ed3b80e851b7a30551e8bc75069" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Browserify</source>
          <target state="translated">Использование фермента с браузером</target>
        </trans-unit>
        <trans-unit id="cc33a99cf933ab3d901eb190abc5f99de3eb073e" translate="yes" xml:space="preserve">
          <source>Using Enzyme with JSDOM</source>
          <target state="translated">Использование фермента с JSDOM</target>
        </trans-unit>
        <trans-unit id="70aad13579c3cb82c61b0b92be9709298cbff923" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Jest</source>
          <target state="translated">Использование фермента со шуткой</target>
        </trans-unit>
        <trans-unit id="f97a80adbb3eb7910e89f83dc11f24ece1d7cb71" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Karma</source>
          <target state="translated">Использование фермента с кармой</target>
        </trans-unit>
        <trans-unit id="77dc5fa66b5652fc9f919dd5ab5712ac873b565c" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Lab</source>
          <target state="translated">Использование фермента с лабораторией</target>
        </trans-unit>
        <trans-unit id="c31d93ec44aa0b749cab6d2946a785b361489375" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Mocha</source>
          <target state="translated">Использование фермента с Мокко</target>
        </trans-unit>
        <trans-unit id="4f85a912e88bcf5ff0f68d2fc9ccb04020d78ccb" translate="yes" xml:space="preserve">
          <source>Using Enzyme with React Native</source>
          <target state="translated">Использование фермента с реактивным корнем</target>
        </trans-unit>
        <trans-unit id="a2ceb38f6b6815d454600793c1a521ab176b2180" translate="yes" xml:space="preserve">
          <source>Using Enzyme with SystemJS</source>
          <target state="translated">Использование фермента с SystemJS</target>
        </trans-unit>
        <trans-unit id="eaf2297bf406ec31163e3bf93da6422c489c4304" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Tape and AVA</source>
          <target state="translated">Использование фермента с лентой и AVA</target>
        </trans-unit>
        <trans-unit id="a50cf433650b00ab493913826707ec4a409ae7f7" translate="yes" xml:space="preserve">
          <source>Using Enzyme with Webpack</source>
          <target state="translated">Использование фермента с Webpack</target>
        </trans-unit>
        <trans-unit id="9b2d830d7ef60eb1a65e1a40a5e8c4f85901f164" translate="yes" xml:space="preserve">
          <source>Using enzyme to Test Components in React Native</source>
          <target state="translated">Использование фермента для тестирования компонентов в реактивных аборигенов</target>
        </trans-unit>
        <trans-unit id="4aaae5aebd6cbd791ccb02b2508ee98248313e57" translate="yes" xml:space="preserve">
          <source>Using enzyme with Browserify</source>
          <target state="translated">Использование фермента с браузером</target>
        </trans-unit>
        <trans-unit id="5045d278bae4d4ff0767d8bbb6a3be6b9fbf5aeb" translate="yes" xml:space="preserve">
          <source>Using enzyme with JSDOM</source>
          <target state="translated">Использование фермента с JSDOM</target>
        </trans-unit>
        <trans-unit id="2942b954c19bb0c12528f8a8fcaecdd06878ce93" translate="yes" xml:space="preserve">
          <source>Using enzyme with Jest</source>
          <target state="translated">Использование фермента со шуткой</target>
        </trans-unit>
        <trans-unit id="7353ec4635e60485bbdfb3822f8c4a8c8ae5fad7" translate="yes" xml:space="preserve">
          <source>Using enzyme with Karma</source>
          <target state="translated">Использование фермента с кармой</target>
        </trans-unit>
        <trans-unit id="ba620a3c4d64a4bdb6abdf93acad50a9b3a9e006" translate="yes" xml:space="preserve">
          <source>Using enzyme with Lab and Code</source>
          <target state="translated">Использование фермента с лабораторией и кодом</target>
        </trans-unit>
        <trans-unit id="88a5dfbe94f0c84de2f4841c5b99b1623e9f66de" translate="yes" xml:space="preserve">
          <source>Using enzyme with Mocha</source>
          <target state="translated">Использование фермента с Мокко</target>
        </trans-unit>
        <trans-unit id="46e24cb51a67486a23b220c1a235c2993a1eca34" translate="yes" xml:space="preserve">
          <source>Using enzyme with SystemJS</source>
          <target state="translated">Использование фермента с SystemJS</target>
        </trans-unit>
        <trans-unit id="da4cca9d9ee15098e126dc264764294dcbc0e6fd" translate="yes" xml:space="preserve">
          <source>Using enzyme with Tape and AVA</source>
          <target state="translated">Использование фермента с лентой и AVA</target>
        </trans-unit>
        <trans-unit id="46aba284c0474bd028d07590fa8994e57585d8d9" translate="yes" xml:space="preserve">
          <source>Using enzyme with Webpack</source>
          <target state="translated">Использование фермента с Webpack</target>
        </trans-unit>
        <trans-unit id="800df7d9b3f30ccc9f103f81ee28e14499d8d5a6" translate="yes" xml:space="preserve">
          <source>Using enzyme's find when lacking className props</source>
          <target state="translated">Использование ферментной находки,когда отсутствует реквизит className.</target>
        </trans-unit>
        <trans-unit id="a3d8e64699058d041f162da1a528e800b95d840c" translate="yes" xml:space="preserve">
          <source>We cannot wrap the result of &lt;code&gt;.prop()&lt;/code&gt; (or &lt;code&gt;.props()&lt;/code&gt;) with &lt;code&gt;.act()&lt;/code&gt; in Enzyme internally since it will break the equality of the returned value. However, you could use &lt;code&gt;.invoke()&lt;/code&gt; to simplify the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833c594d16af3b2019f5bdaae9cc31697bf1593d" translate="yes" xml:space="preserve">
          <source>We have done our best to make enzyme v3 as API compatible with v2.x as possible, however there are a handful of breaking changes that we decided we needed to make, intentionally, in order to support this new architecture and also improve the usability of the library long-term.</source>
          <target state="translated">Мы сделали все возможное,чтобы сделать фермент v3 как API совместимым с v2.x,однако есть несколько изменений,которые мы решили сделать,намеренно,чтобы поддержать эту новую архитектуру,а также улучшить удобство использования библиотеки в долгосрочной перспективе.</target>
        </trans-unit>
        <trans-unit id="dc82f9686cb576529576cc72416ae2a606c6a033" translate="yes" xml:space="preserve">
          <source>We have updated enzyme to consider node &quot;equality&quot; in a semantically identical way to how react treats nodes. More specifically, we've updated enzyme's algorithms to treat &lt;code&gt;undefined&lt;/code&gt; props as equivalent to the absence of a prop. Consider the following example:</source>
          <target state="translated">Мы обновили фермент, чтобы учитывать &amp;laquo;равенство&amp;raquo; узлов семантически идентично тому, как реагирует на узлы. В частности, мы обновили алгоритмы фермента, чтобы рассматривать &lt;code&gt;undefined&lt;/code&gt; пропсы как эквивалентные отсутствию пропсов. Рассмотрим следующий пример:</target>
        </trans-unit>
        <trans-unit id="48372456a13e09aaeffe6f55f876b7155bd4ed17" translate="yes" xml:space="preserve">
          <source>When testing with JSDOM, the &lt;code&gt;setup.js&lt;/code&gt; file above needs to be run before the test suite runs. If you are using mocha, this can be done from the command line using the &lt;code&gt;--require&lt;/code&gt; option:</source>
          <target state="translated">При тестировании с помощью &lt;code&gt;setup.js&lt;/code&gt; указанный выше файл setup.js необходимо запустить до запуска набора тестов. Если вы используете мокко, это можно сделать из командной строки с помощью параметра &lt;code&gt;--require&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="231adeefefc497660e81253b358378a54b95e47a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;mount(...)&lt;/code&gt;, it can sometimes be unclear exactly what this would mean. Consider for example the following react components:</source>
          <target state="translated">При использовании &lt;code&gt;mount(...)&lt;/code&gt; иногда может быть неясно, что именно это означает. Рассмотрим, например, следующие реагирующие компоненты:</target>
        </trans-unit>
        <trans-unit id="7926bb34bfe1e79abf68acd6b5481d7bbbec0554" translate="yes" xml:space="preserve">
          <source>While a React Native adapter is &lt;a href=&quot;https://github.com/airbnb/enzyme/issues/1436&quot;&gt;in discussion&lt;/a&gt;, a standard adapter may be used, such as 'enzyme-adapter-react-16':</source>
          <target state="translated">Пока &lt;a href=&quot;https://github.com/airbnb/enzyme/issues/1436&quot;&gt;обсуждается&lt;/a&gt; адаптер React Native , можно использовать стандартный адаптер, например, &amp;laquo;фермент-адаптер-реакция-16&amp;raquo;:</target>
        </trans-unit>
        <trans-unit id="9212a316627564bb41a9d16e9af1d5059f16bb33" translate="yes" xml:space="preserve">
          <source>While a React Native adapter is &lt;a href=&quot;https://github.com/enzymejs/enzyme/issues/1436&quot;&gt;in discussion&lt;/a&gt;, a standard adapter may be used, such as 'enzyme-adapter-react-16':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323d44d40bb0208cbd64f39a204e7427bcf3f689" translate="yes" xml:space="preserve">
          <source>While in most cases, any React prop can be used, there are exceptions. The &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; props will never work; React uses these props internally.</source>
          <target state="translated">Хотя в большинстве случаев можно использовать любую опору React, есть исключения. В &lt;code&gt;key&lt;/code&gt; и &lt;code&gt;ref&lt;/code&gt; реквизита никогда не будет работать; React использует эти свойства для внутренних целей.</target>
        </trans-unit>
        <trans-unit id="1d8cf09aecdbf661705a42803de583da4b89e293" translate="yes" xml:space="preserve">
          <source>While some have had success with &lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer&lt;/a&gt;, the recommended approach is to use &lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;, as documented for enzyme at the &lt;a href=&quot;https://airbnb.io/enzyme/docs/guides/jsdom.html&quot;&gt;JSDOM&lt;/a&gt; documentation page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c09a79d280b069ff8ab8cdc35a71f2a8742e178" translate="yes" xml:space="preserve">
          <source>While some have had success with &lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer&lt;/a&gt;, the recommended approach is to use &lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt;, as documented for enzyme at the &lt;a href=&quot;jsdom&quot;&gt;JSDOM&lt;/a&gt; documentation page.</source>
          <target state="translated">Хотя некоторые из них добились успеха с помощью &lt;a href=&quot;https://github.com/Root-App/react-native-mock-render&quot;&gt;react-native-mock-renderer&lt;/a&gt; , рекомендуется использовать &lt;a href=&quot;jsdom&quot;&gt;https://github.com/tmpvar/jsdom&lt;/a&gt; , как &lt;a href=&quot;jsdom&quot;&gt;описано&lt;/a&gt; для фермента на странице документации JSDOM .</target>
        </trans-unit>
        <trans-unit id="6155b89fdcebcd6746d57c5c8f50f6a46e98fca7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mount&lt;/code&gt;, &lt;code&gt;.getNode()&lt;/code&gt; should not be used. &lt;code&gt;.instance()&lt;/code&gt; does what it used to.</source>
          <target state="translated">С &lt;code&gt;mount&lt;/code&gt; , &lt;code&gt;.getNode()&lt;/code&gt; не следует использовать. &lt;code&gt;.instance()&lt;/code&gt; делает то, что раньше.</target>
        </trans-unit>
        <trans-unit id="1c16049db5e88ea160998ae2fd7f7715c71de685" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mount&lt;/code&gt;, &lt;code&gt;.instance()&lt;/code&gt; can be called at any level of the tree</source>
          <target state="translated">С &lt;code&gt;mount&lt;/code&gt; , &lt;code&gt;.instance()&lt;/code&gt; может быть вызван на любом уровне дерева</target>
        </trans-unit>
        <trans-unit id="260f3e7b5b4457d3b4fb0af050704a6685d9dfe7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;shallow&lt;/code&gt;, &lt;code&gt;.getNode()&lt;/code&gt; should be replaced with &lt;code&gt;getElement()&lt;/code&gt;</source>
          <target state="translated">С &lt;code&gt;shallow&lt;/code&gt; , &lt;code&gt;.getNode()&lt;/code&gt; следует заменить &lt;code&gt;getElement()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff822aab78c2e81bf29aea31a895f96ed84eb953" translate="yes" xml:space="preserve">
          <source>With enzyme v3, the behavior is now as follows:</source>
          <target state="translated">С ферментом v3 поведение теперь следующее:</target>
        </trans-unit>
        <trans-unit id="14efcdf8f931b396c14844226be86319b7297dd6" translate="yes" xml:space="preserve">
          <source>With enzyme v3, we have now turned on this mode by default, instead of making it opt-in. It is now possible to &lt;em&gt;opt-out&lt;/em&gt; instead. Additionally, you can now opt-out at a global level.</source>
          <target state="translated">В энзиме v3 мы теперь включили этот режим по умолчанию, а не включили его. Вместо этого теперь можно &lt;em&gt;отказаться&lt;/em&gt; . Кроме того, теперь вы можете отказаться от участия на глобальном уровне.</target>
        </trans-unit>
        <trans-unit id="2c940185a89fe9757b6d95e50233e3b1343117c5" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;attachTo&lt;/code&gt; option, you can mount components to attached DOM elements:</source>
          <target state="translated">С &lt;code&gt;attachTo&lt;/code&gt; параметра attachTo вы можете монтировать компоненты к присоединенным элементам DOM:</target>
        </trans-unit>
        <trans-unit id="14c6e38867d97cf194b082f906dfe97190afab8f" translate="yes" xml:space="preserve">
          <source>With this component, the behavior in enzyme v2.x the behavior would have been like:</source>
          <target state="translated">С этим компонентом поведение фермента v2.x было бы похожим:</target>
        </trans-unit>
        <trans-unit id="3fe9f6e2b74549c19b39bfd8943a434201f39136" translate="yes" xml:space="preserve">
          <source>Working with React 0.13</source>
          <target state="translated">Работа с реакцией 0.13</target>
        </trans-unit>
        <trans-unit id="7cd51920910f9f8cc47419f838ab5d724fa49299" translate="yes" xml:space="preserve">
          <source>Working with React 0.14</source>
          <target state="translated">Работа с реакцией 0,14</target>
        </trans-unit>
        <trans-unit id="45c628ac483f54a92454527b4a3563cd4cb489d8" translate="yes" xml:space="preserve">
          <source>Working with React 15</source>
          <target state="translated">Работа с Реакцией 15</target>
        </trans-unit>
        <trans-unit id="e689ffad9cbe73673591e2d1a617835a229ac48e" translate="yes" xml:space="preserve">
          <source>Working with React 16</source>
          <target state="translated">Работа с Реакцией 16</target>
        </trans-unit>
        <trans-unit id="322870eca2189db563a6cf101db9e659b54b8f12" translate="yes" xml:space="preserve">
          <source>Would output the following to the console:</source>
          <target state="translated">Выводит на консоль следующее:</target>
        </trans-unit>
        <trans-unit id="0c955332935b16f4093e9c21950145bf7c6b6c67" translate="yes" xml:space="preserve">
          <source>You do &lt;strong&gt;not&lt;/strong&gt; need to include Jest's own renderer, unless you want to use it &lt;em&gt;only&lt;/em&gt; for Jest snapshot testing.</source>
          <target state="translated">Вам &lt;strong&gt;не&lt;/strong&gt; нужно включать собственное средство визуализации Jest, если вы не хотите использовать его &lt;em&gt;только&lt;/em&gt; для тестирования снимков Jest.</target>
        </trans-unit>
        <trans-unit id="8da7a369f8f700fcf2a51cc169b4d961ca7135cf" translate="yes" xml:space="preserve">
          <source>You will want to configure enzyme with the adapter you'd like to use before using enzyme in your tests. The way to do this is with &lt;code&gt;enzyme.configure(...)&lt;/code&gt;. For example, if your project depends on React 16, you would want to configure enzyme this way:</source>
          <target state="translated">Перед использованием фермента в тестах вам нужно настроить фермент с помощью адаптера, который вы хотите использовать. Это можно сделать с помощью &lt;code&gt;enzyme.configure(...)&lt;/code&gt; . Например, если ваш проект зависит от React 16, вам нужно настроить фермент следующим образом:</target>
        </trans-unit>
        <trans-unit id="08534f33c201a45017b502e90a800f1b708ebcb3" translate="yes" xml:space="preserve">
          <source>\</source>
          <target state="translated">\</target>
        </trans-unit>
        <trans-unit id="b1eba0d72cb54fcab444479f482326f49ab59b53" translate="yes" xml:space="preserve">
          <source>```jsx class Foo extends React.Component { loadData() { return fetch(); }</source>
          <target state="translated">`` `jsx class Foo расширяет React.Component {loadData () {return fetch (); }</target>
        </trans-unit>
        <trans-unit id="3767869448827e8662a5e49ec8bbfcccac68b4b1" translate="yes" xml:space="preserve">
          <source>`~16.0.0-0 \</source>
          <target state="translated">`~ 16.0.0-0 \</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="66db218ac1be48949dc358f42ad507231a1a06e5" translate="yes" xml:space="preserve">
          <source>attribute syntax (&lt;code&gt;[href=&quot;foo&quot;]&lt;/code&gt;, &lt;code&gt;[type=&quot;text&quot;]&lt;/code&gt;, and the other attribute selectors listed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Attribute_selectors&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">синтаксис атрибута ( &lt;code&gt;[href=&quot;foo&quot;]&lt;/code&gt; , &lt;code&gt;[type=&quot;text&quot;]&lt;/code&gt; и другие перечисленные &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Attribute_selectors&quot;&gt;здесь&lt;/a&gt; селекторы атрибутов .)</target>
        </trans-unit>
        <trans-unit id="a6212920c6b99515f550c31cdb7631b05146adb6" translate="yes" xml:space="preserve">
          <source>can only be called on a wrapper of a single node.</source>
          <target state="translated">можно вызвать только на обертке одного узла.</target>
        </trans-unit>
        <trans-unit id="2f3a15ba2c6dee0fd37d7d4bc043fbb66d61f2a8" translate="yes" xml:space="preserve">
          <source>class syntax (&lt;code&gt;.foo&lt;/code&gt;, &lt;code&gt;.foo-bar&lt;/code&gt;, etc.)</source>
          <target state="translated">синтаксис класса ( &lt;code&gt;.foo&lt;/code&gt; , &lt;code&gt;.foo-bar&lt;/code&gt; и т. д.)</target>
        </trans-unit>
        <trans-unit id="b04d34bf9a3923ac70eae738d5cfe3c676602665" translate="yes" xml:space="preserve">
          <source>contents must match: In text nodes, leading and trailing spaces are ignored, but not space in the middle. Child elements must match according to these rules, recursively.</source>
          <target state="translated">Содержимое должно совпадать:В текстовых узлах лидирующие и скользящие пробелы игнорируются,но не пробелы посередине.Дочерние элементы должны соответствовать этим правилам,рекурсивно.</target>
        </trans-unit>
        <trans-unit id="ca02a16f691cd4050929388ed56bc9b5169d1434" translate="yes" xml:space="preserve">
          <source>element tag name syntax (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;span&lt;/code&gt;, etc.)</source>
          <target state="translated">синтаксис имени тега элемента ( &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;div&lt;/code&gt; , &lt;code&gt;span&lt;/code&gt; и т. д.)</target>
        </trans-unit>
        <trans-unit id="57627a5faa485a8c3ffa55c5fc06940b5ffdc130" translate="yes" xml:space="preserve">
          <source>enzyme Adapter Package</source>
          <target state="translated">пакет ферментного адаптера</target>
        </trans-unit>
        <trans-unit id="bebc90c6446be7ac51485dd181d38fd95704e77a" translate="yes" xml:space="preserve">
          <source>enzyme Selectors</source>
          <target state="translated">селекторы ферментов</target>
        </trans-unit>
        <trans-unit id="bd22188d38d53380e66ef2fa196267e11ac6136d" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find React components based on their constructor. You can pass in the reference to the component&amp;rsquo;s constructor. Of course, this kind of selector only checks the component type; it ignores props and children.</source>
          <target state="translated">фермент позволяет находить компоненты React на основе их конструктора. Вы можете передать ссылку на конструктор компонента. Конечно, этот вид селектора проверяет только тип компонента; он игнорирует реквизит и детей.</target>
        </trans-unit>
        <trans-unit id="f4c9435c285533437145c82e4355e7155a5a75cb" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find components and nodes based on a subset of their properties:</source>
          <target state="translated">Фермент позволяет находить компоненты и узлы на основе подмножества их свойств:</target>
        </trans-unit>
        <trans-unit id="c7a49c8d40895e1de1ad068a46d2dde86b02818b" translate="yes" xml:space="preserve">
          <source>enzyme allows you to find components based on a component&amp;rsquo;s &lt;code&gt;displayName&lt;/code&gt;. If a component exists in a render tree where its &lt;code&gt;displayName&lt;/code&gt; is set and has its first character as a capital letter, you can use a string to find it:</source>
          <target state="translated">фермент позволяет находить компоненты на основе &lt;code&gt;displayName&lt;/code&gt; компонента . Если компонент существует в дереве рендеринга, в котором установлено его &lt;code&gt;displayName&lt;/code&gt; , и его первый символ является заглавной буквой, вы можете использовать строку, чтобы найти его:</target>
        </trans-unit>
        <trans-unit id="1727dacac8b65ff0b5cc6197d3dc59638aeaa114" translate="yes" xml:space="preserve">
          <source>enzyme can be used with your test runner of choice. All examples in the documentation will be provided using &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt; and &lt;a href=&quot;http://chaijs.com/api/bdd/&quot;&gt;BDD style chai&lt;/a&gt;, although neither library is a dependency of enzyme.</source>
          <target state="translated">Фермент можно использовать с выбранным вами бегуном. Все примеры в документации будут предоставлены с использованием &lt;a href=&quot;https://mochajs.org/&quot;&gt;мокко&lt;/a&gt; и &lt;a href=&quot;http://chaijs.com/api/bdd/&quot;&gt;BDD стиле Chai&lt;/a&gt; , хотя ни одна библиотека представляет собой зависимость фермента.</target>
        </trans-unit>
        <trans-unit id="58650e89adab3718dbfc17c7698f152b34d563b6" translate="yes" xml:space="preserve">
          <source>enzyme does attempt to automatically &quot;update&quot; the root wrapper in most common scenarios, but these are only the state changes that it knows about. For all other state changes, you may need to call &lt;code&gt;wrapper.update()&lt;/code&gt; yourself.</source>
          <target state="translated">Фермент действительно пытается автоматически &amp;laquo;обновить&amp;raquo; корневую оболочку в большинстве распространенных сценариев, но это только те изменения состояния, о которых он знает. Для всех других изменений состояния вам может потребоваться самостоятельно вызвать &lt;code&gt;wrapper.update()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4ad07fb25faae64edd9a193629eb98ce33eae2d" translate="yes" xml:space="preserve">
          <source>enzyme has a &lt;code&gt;.children()&lt;/code&gt; method which is intended to return the rendered children of a wrapper.</source>
          <target state="translated">У фермента есть метод &lt;code&gt;.children()&lt;/code&gt; который предназначен для возврата отрисованных дочерних элементов оболочки.</target>
        </trans-unit>
        <trans-unit id="3cb0e38a9de9b049940e161c6afcfc2f0a91c247" translate="yes" xml:space="preserve">
          <source>enzyme now allows for you to grab the &lt;code&gt;instance()&lt;/code&gt; of a wrapper at any level of the render tree, not just at the root. This means that you can &lt;code&gt;.find(...)&lt;/code&gt; a specific component, then grab its instance and call &lt;code&gt;.setState(...)&lt;/code&gt; or any other methods on the instance that you'd like.</source>
          <target state="translated">Теперь энзим позволяет вам получить &lt;code&gt;instance()&lt;/code&gt; оболочки на любом уровне дерева рендеринга, а не только в корне. Это означает, что вы можете &lt;code&gt;.find(...)&lt;/code&gt; конкретный компонент, затем захватить его экземпляр и вызвать &lt;code&gt;.setState(...)&lt;/code&gt; или любые другие методы в экземпляре, который вам нужен.</target>
        </trans-unit>
        <trans-unit id="2a3a8361bdc11cefc24487bbead71eac312e49db" translate="yes" xml:space="preserve">
          <source>enzyme now has an &quot;Adapter&quot; system. This means that you now need to install enzyme along with another module that provides the Adapter that tells enzyme how to work with your version of React (or whatever other React-like library you are using).</source>
          <target state="translated">у фермента теперь есть система &quot;Адаптер&quot;.Это означает,что теперь вам нужно установить фермент вместе с другим модулем,который предоставляет Адаптер,подсказывающий ферменту,как работать с вашей версией React (или любой другой React-подобной библиотекой,которую вы используете).</target>
        </trans-unit>
        <trans-unit id="8cb422dc1c29aa7c57ff5f85e58bf99f207017fe" translate="yes" xml:space="preserve">
          <source>enzyme should be installed using npm:</source>
          <target state="translated">Фермент должен быть установлен с использованием npm:</target>
        </trans-unit>
        <trans-unit id="c047ea42f89ccb9d0bdd4bceea9936d6253edb0f" translate="yes" xml:space="preserve">
          <source>enzyme supports a subset of valid CSS selectors to find nodes inside a render tree. Support is as follows:</source>
          <target state="translated">Фермент поддерживает подмножество корректных CSS селекторов для поиска узлов внутри дерева рендера.Поддержка заключается в следующем:</target>
        </trans-unit>
        <trans-unit id="6247f0cf9590fd3104bdea103f149226162f9ff5" translate="yes" xml:space="preserve">
          <source>enzyme v2.x had an optional flag that could be passed in to all &lt;code&gt;shallow&lt;/code&gt; calls which would make it so that more of the component's lifecycle methods were called (such as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;).</source>
          <target state="translated">У фермента v2.x был необязательный флаг, который можно было передать всем &lt;code&gt;shallow&lt;/code&gt; вызовам, что сделало бы это так, чтобы вызывались другие методы жизненного цикла компонента (такие как &lt;code&gt;componentDidMount&lt;/code&gt; и &lt;code&gt;componentDidUpdate&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="329777629264c5dc51e8658636a7416405f5fc19" translate="yes" xml:space="preserve">
          <source>enzyme v3 architecturally created a layer where React would create an intermediate representation of the render tree at an instance in time and pass that to enzyme to traverse and inspect. This has many advantages, but one of the side effects is that now the intermediate representation does not receive automatic updates.</source>
          <target state="translated">Фермент v3 архитектурно создал слой,в котором React создаст промежуточное представление дерева рендеринга на экземпляре во времени и передаст его ферменту для прохождения и осмотра.Это имеет много преимуществ,но одним из побочных эффектов является то,что теперь промежуточное представление не получает автоматического обновления.</target>
        </trans-unit>
        <trans-unit id="5ec9142dd4da758484bc5a90769d17cb0af0299f" translate="yes" xml:space="preserve">
          <source>enzyme v3 now returns &lt;strong&gt;all&lt;/strong&gt; nodes in the result set and not just html nodes. Consider this example:</source>
          <target state="translated">фермент v3 теперь возвращает &lt;strong&gt;все&lt;/strong&gt; узлы в наборе результатов, а не только узлы html. Рассмотрим этот пример:</target>
        </trans-unit>
        <trans-unit id="329f8e2ace5e0281fdaeb096478b603e3ff76abb" translate="yes" xml:space="preserve">
          <source>enzyme v3 now uses a real CSS selector parser rather than its own incomplete parser implementation. This is done with &lt;a href=&quot;https://github.com/aweary/rst-selector-parser&quot;&gt;rst-selector-parser&lt;/a&gt; a fork of &lt;a href=&quot;https://github.com/gajus/scalpel/&quot;&gt;scalpel&lt;/a&gt; which is a CSS parser implemented with &lt;a href=&quot;https://nearley.js.org/&quot;&gt;nearley&lt;/a&gt;. We don't think this should cause any breakages across enzyme v2.x to v3.x, but if you believe you have found something that did indeed break, please file an issue with us. Thank you to &lt;a href=&quot;https://github.com/aweary&quot;&gt;Brandon Dail&lt;/a&gt; for making this happen!</source>
          <target state="translated">В ферменте v3 теперь используется настоящий синтаксический анализатор селектора CSS, а не его собственная неполная реализация синтаксического анализатора. Это делается с помощью &lt;a href=&quot;https://github.com/aweary/rst-selector-parser&quot;&gt;rst-selector-parser&lt;/a&gt; - вилки &lt;a href=&quot;https://github.com/gajus/scalpel/&quot;&gt;скальпеля,&lt;/a&gt; которая представляет собой синтаксический анализатор CSS, реализованный с помощью &lt;a href=&quot;https://nearley.js.org/&quot;&gt;nearley&lt;/a&gt; . Мы не думаем, что это должно вызвать какие-либо поломки в энзимах v2.x - v3.x, но если вы считаете, что обнаружили что-то, что действительно сломалось, сообщите нам о проблеме. Спасибо &lt;a href=&quot;https://github.com/aweary&quot;&gt;Брэндону Дейлу&lt;/a&gt; за то, что это произошло!</target>
        </trans-unit>
        <trans-unit id="49a6279db019421a80af977cbd378222f9c22919" translate="yes" xml:space="preserve">
          <source>enzyme was originally designed to work with Mocha, so getting it up and running with Mocha should be no problem at all. Simply install it and start using it:</source>
          <target state="translated">Фермент изначально был разработан для работы с Мокко,так что его запуск с Мокко не должен быть проблемой.Просто установите его и начинайте использовать:</target>
        </trans-unit>
        <trans-unit id="861cac19ff766a1d2b8dcec4e4e51021cfb9c109" translate="yes" xml:space="preserve">
          <source>enzyme works well with &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt; and &lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA&lt;/a&gt;. Simply install it and start using it:</source>
          <target state="translated">Фермент хорошо работает с &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt; и &lt;a href=&quot;https://github.com/avajs/ava&quot;&gt;AVA&lt;/a&gt; . Просто установите его и начните пользоваться:</target>
        </trans-unit>
        <trans-unit id="ea1a7e23ed6e705398bf2e57cda9ab04f3cee2ab" translate="yes" xml:space="preserve">
          <source>enzyme's new architecture means that the react &quot;render tree&quot; is transformed into an intermediate representation that is common across all react versions so that enzyme can properly traverse it independent of React's internal representations. A side effect of this is that enzyme no longer has access to the actual object references that were returned from &lt;code&gt;render&lt;/code&gt; in your React components. This normally isn't much of a problem, but can manifest as a test failure in some cases.</source>
          <target state="translated">Новая архитектура энзима означает, что &amp;laquo;дерево рендеринга&amp;raquo; реакции преобразуется в промежуточное представление, общее для всех версий реакции, так что энзим может правильно проходить по нему независимо от внутренних представлений React. Побочным эффектом этого является то, что энзим больше не имеет доступа к фактическим ссылкам на объекты, которые были возвращены от &lt;code&gt;render&lt;/code&gt; в ваших компонентах React. Обычно это не является большой проблемой, но в некоторых случаях может проявляться как сбой теста.</target>
        </trans-unit>
        <trans-unit id="404ba72417d031a1fff28f4a52246b60557a5a9d" translate="yes" xml:space="preserve">
          <source>enzyme's top level &lt;code&gt;render&lt;/code&gt; API returns a &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt; object. The version of Cheerio that we use has been upgraded to 1.0.0. For debugging issues across enzyme v2.x and v3.x with the &lt;code&gt;render&lt;/code&gt; API, we recommend checking out &lt;a href=&quot;https://github.com/cheeriojs/cheerio/blob/48eae25c93702a29b8cd0d09c4a2dce2f912d1f4/History.md&quot;&gt;Cheerio's Changelog&lt;/a&gt; and posting an issue on that repo instead of enzyme's unless you believe it is a bug in enzyme's use of the library.</source>
          <target state="translated">API &lt;code&gt;render&lt;/code&gt; верхнего уровня фермента возвращает объект &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt; . Версия Cheerio, которую мы используем, была обновлена ​​до 1.0.0. Для отладки проблем с ферментами v2.x и v3.x с помощью API &lt;code&gt;render&lt;/code&gt; мы рекомендуем проверить &lt;a href=&quot;https://github.com/cheeriojs/cheerio/blob/48eae25c93702a29b8cd0d09c4a2dce2f912d1f4/History.md&quot;&gt;журнал изменений Cheerio&lt;/a&gt; и опубликовать проблему в этом репозитории вместо фермента, если вы не считаете, что это ошибка в использовании библиотеки ферментом.</target>
        </trans-unit>
        <trans-unit id="72134973984f004638cd5211623660df9b803f81" translate="yes" xml:space="preserve">
          <source>enzyme-example-ava</source>
          <target state="translated">enzyme-example-ava</target>
        </trans-unit>
        <trans-unit id="2c6a5270d365493d9f9139910e3fc1db42148318" translate="yes" xml:space="preserve">
          <source>enzyme-example-lab</source>
          <target state="translated">enzyme-example-lab</target>
        </trans-unit>
        <trans-unit id="a8982146d25e1dd316ed4d87a3da5e89b5fe0162" translate="yes" xml:space="preserve">
          <source>enzyme-example-tape</source>
          <target state="translated">enzyme-example-tape</target>
        </trans-unit>
        <trans-unit id="92e44b83f3ce3b200577ca9541d1d71c808465be" translate="yes" xml:space="preserve">
          <source>id syntax (&lt;code&gt;#foo&lt;/code&gt;, &lt;code&gt;#foo-bar&lt;/code&gt;, etc.)</source>
          <target state="translated">синтаксис id ( &lt;code&gt;#foo&lt;/code&gt; , &lt;code&gt;#foo-bar&lt;/code&gt; и т. д.)</target>
        </trans-unit>
        <trans-unit id="bc3cfada8917c301d1871c7c86923823b6e7a1b9" translate="yes" xml:space="preserve">
          <source>render() { return (</source>
          <target state="translated">render(){return(</target>
        </trans-unit>
        <trans-unit id="2b40a53d1bcfa81f78e3a74832a3301fc46e7207" translate="yes" xml:space="preserve">
          <source>tag names must match</source>
          <target state="translated">имена тегов должны совпадать</target>
        </trans-unit>
        <trans-unit id="3f337d978c8964f02a8810f4c527f4f84a505ccc" translate="yes" xml:space="preserve">
          <source>the matches can happen anywhere in the wrapper's contents</source>
          <target state="translated">совпадения могут произойти где угодно в содержимом обёртки.</target>
        </trans-unit>
        <trans-unit id="be2c51820bdcc2f4574523d7e0376a44ad483c6f" translate="yes" xml:space="preserve">
          <source>the wrapper can contain more than one node; all are searched</source>
          <target state="translated">обёртка может содержать более одного узла;все они ищут</target>
        </trans-unit>
        <trans-unit id="e65077566bcb3ed3f85e55b91f1e9cf9ab2d942c" translate="yes" xml:space="preserve">
          <source>universal syntax (&lt;code&gt;*&lt;/code&gt;)</source>
          <target state="translated">универсальный синтаксис ( &lt;code&gt;*&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7baa41c34cb8fb63ce8e4b4c7a7508b49fb9e6d6" translate="yes" xml:space="preserve">
          <source>will raise if called on a wrapper of a stateless functional component.</source>
          <target state="translated">поднимут,если вызовут обертку функционального компонента без гражданства.</target>
        </trans-unit>
        <trans-unit id="349bec450cbafbec44cdaf1061fd9dcf13cec0bc" translate="yes" xml:space="preserve">
          <source>~16.1`</source>
          <target state="translated">~16.1`</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
