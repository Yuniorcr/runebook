<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="f248a387f0f37e77ff666c2a85a59f7074c24d85" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;@deprecated&lt;/code&gt; only supports functions and macros. However you can use the &lt;code&gt;:deprecated&lt;/code&gt; key in the annotation metadata to annotate the docs of modules, types and callbacks too.</source>
          <target state="translated">В настоящее время &lt;code&gt;@deprecated&lt;/code&gt; поддерживает только функции и макросы. Однако вы можете использовать ключ &lt;code&gt;:deprecated&lt;/code&gt; в метаданных аннотации для аннотирования документов модулей, типов и обратных вызовов.</target>
        </trans-unit>
        <trans-unit id="51f90102aa9d37408ac2a331660c80b3de845ceb" translate="yes" xml:space="preserve">
          <source>Currently it defines types and the minimal implementation for a calendar behaviour in Elixir. The goal of the Calendar features in Elixir is to provide a base for interoperability instead of full-featured datetime API.</source>
          <target state="translated">В настоящее время он определяет типы и минимальную реализацию календарного поведения в Elixir.Целью функций &quot;Календарь&quot; в Elixir является обеспечение базы для функциональной совместимости вместо полнофункционального API для работы с датами.</target>
        </trans-unit>
        <trans-unit id="58e947fb9b58beb32c0020272eaa3d95ced9ee44" translate="yes" xml:space="preserve">
          <source>Currently the only accepted PID is &lt;code&gt;self()&lt;/code&gt;.</source>
          <target state="translated">В настоящее время единственный допустимый PID - это &lt;code&gt;self()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="63f26076c7ac35014e638bc9d9a7df511fa73b4d" translate="yes" xml:space="preserve">
          <source>Currently we have two tests tagged with &lt;code&gt;@tag :distributed&lt;/code&gt;. The &amp;ldquo;server interaction&amp;rdquo; test in &lt;code&gt;KVServerTest&lt;/code&gt;, and the &amp;ldquo;route requests across nodes&amp;rdquo; in &lt;code&gt;KV.RouterTest&lt;/code&gt;. Both tests are failing since they require a routing table, which is currently empty.</source>
          <target state="translated">В настоящее время у нас есть два теста с тегами &lt;code&gt;@tag :distributed&lt;/code&gt; . Тест &amp;laquo;взаимодействия с сервером&amp;raquo; в &lt;code&gt;KVServerTest&lt;/code&gt; и &amp;laquo;маршрутизация запросов между узлами&amp;raquo; в &lt;code&gt;KV.RouterTest&lt;/code&gt; . Оба теста не работают, так как им требуется таблица маршрутизации, которая в настоящее время пуста.</target>
        </trans-unit>
        <trans-unit id="fb478f5ec7bb7da049009c9e3df88349c2f53b74" translate="yes" xml:space="preserve">
          <source>Currently, there is no official way to cross-compile a release from one target triple to another, due to the complexities involved in the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdaaebe2bbb603df00e4573b0900ccd99aa7d09" translate="yes" xml:space="preserve">
          <source>Custom Sigils</source>
          <target state="translated">Пользовательские сигнализированные данные</target>
        </trans-unit>
        <trans-unit id="d797cab8a29cd6c10dc9372d1ab9213b989caf7f" translate="yes" xml:space="preserve">
          <source>Custom and overridden operators</source>
          <target state="translated">Пользовательские и переопределенные операторы</target>
        </trans-unit>
        <trans-unit id="00146f5b748062fe67c9600ecfcdf444284e0bcf" translate="yes" xml:space="preserve">
          <source>Custom attributes</source>
          <target state="translated">Пользовательские атрибуты</target>
        </trans-unit>
        <trans-unit id="e3fd71a31afaaf057b0fedc28ba72336f1780a64" translate="yes" xml:space="preserve">
          <source>Custom backends</source>
          <target state="translated">Пользовательские бэкэнды</target>
        </trans-unit>
        <trans-unit id="abe70270d1f6e2920fe2d28c23289b5295fb962a" translate="yes" xml:space="preserve">
          <source>Custom configuration</source>
          <target state="translated">Пользовательская конфигурация</target>
        </trans-unit>
        <trans-unit id="170bc5dc5f750c41d4def27ed27eed6bf3c468fb" translate="yes" xml:space="preserve">
          <source>Custom editors are supported by using the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; notations, for example:</source>
          <target state="translated">Пользовательские редакторы поддерживаются с использованием &lt;code&gt;__FILE__&lt;/code&gt; и &lt;code&gt;__LINE__&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="642fb7c499e4524f98e2922e90ae2a2b071cfd52" translate="yes" xml:space="preserve">
          <source>Custom formatting</source>
          <target state="translated">Настраиваемое форматирование</target>
        </trans-unit>
        <trans-unit id="cfa121c3915c8b4ef6e8270f4ee6bf76b09bdab9" translate="yes" xml:space="preserve">
          <source>Custom patterns and guards expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb31d3e78f5111c059041eed039c75877655487" translate="yes" xml:space="preserve">
          <source>Custom sigils</source>
          <target state="translated">Пользовательские знаки</target>
        </trans-unit>
        <trans-unit id="39876974b7f78aa10c505abd0ccf4a46df612fca" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and are available outside the module they&amp;rsquo;re defined in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b447a4b2b4a5635d3f0dd6f81cbcc0d90e8e4a6d" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and available outside the module they&amp;rsquo;re defined in:</source>
          <target state="translated">Пользовательские типы, определенные через &lt;code&gt;@type&lt;/code&gt; , экспортируются и доступны вне модуля, в котором они определены:</target>
        </trans-unit>
        <trans-unit id="d7f0ac9e007291a6ccc21d036f4711505ad9d0b1" translate="yes" xml:space="preserve">
          <source>Customization</source>
          <target state="translated">Customization</target>
        </trans-unit>
        <trans-unit id="a43ab69a51d511753170a537818f222e76faeaa7" translate="yes" xml:space="preserve">
          <source>Customization and configuration summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b25d03b9dabe02b1fafe8ede605cce72a76c6c5" translate="yes" xml:space="preserve">
          <source>Customization per environment can be done by accessing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;the &lt;code&gt;Mix.env&lt;/code&gt; function&lt;/a&gt; in your &lt;code&gt;mix.exs&lt;/code&gt; file, which returns the current environment as an atom. That&amp;rsquo;s what we have used in the &lt;code&gt;:start_permanent&lt;/code&gt; options:</source>
          <target state="translated">Настройка на окружающую среду может быть сделано путем доступа &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;к &lt;code&gt;Mix.env&lt;/code&gt; функции&lt;/a&gt; в вашем &lt;code&gt;mix.exs&lt;/code&gt; файл, который возвращает текущую среду в качестве атома. Вот что мы использовали в параметрах &lt;code&gt;:start_permanent&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="6908397a2d8b0784b2ec70f0d5374964dc182a77" translate="yes" xml:space="preserve">
          <source>Daemon mode (Unix-like)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c85db56e6f90f1fcaafbed47e91067f22fbe9" translate="yes" xml:space="preserve">
          <source>Data structures</source>
          <target state="translated">Структуры данных</target>
        </trans-unit>
        <trans-unit id="696ae3d17016ea7046f1ce357ae0b1f6103499a3" translate="yes" xml:space="preserve">
          <source>Data structures such as lists, tuples, and binaries are marked respectively by the delimiters &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;{...}&lt;/code&gt;, and &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;. Each element is separated by comma. A trailing comma is also allowed, such as in &lt;code&gt;[1, 2, 3,]&lt;/code&gt;.</source>
          <target state="translated">Структуры данных, такие как списки, кортежи и двоичные файлы, помечаются соответственно разделителями &lt;code&gt;[...]&lt;/code&gt; , &lt;code&gt;{...}&lt;/code&gt; и &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; . Каждый элемент разделяется запятой. Также допускается использование завершающей запятой, например, в &lt;code&gt;[1, 2, 3,]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">Типы данных</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="904c0db9491168bf7b0f96a8127a1e2e956e54ec" translate="yes" xml:space="preserve">
          <source>Date.Range</source>
          <target state="translated">Date.Range</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="067497ecd979a531adeb039b5c57048e6702a8f2" translate="yes" xml:space="preserve">
          <source>Day of the month</source>
          <target state="translated">День месяца</target>
        </trans-unit>
        <trans-unit id="a2dfedeffd1ead187411349e305b1fe627303452" translate="yes" xml:space="preserve">
          <source>Day of the week</source>
          <target state="translated">День недели</target>
        </trans-unit>
        <trans-unit id="7c9881c0cb27c6197626d060644aab99eb05aa54" translate="yes" xml:space="preserve">
          <source>Day of the year</source>
          <target state="translated">День года</target>
        </trans-unit>
        <trans-unit id="d0c32ae37c8ec0c5b70c6fbada27ade3b4484def" translate="yes" xml:space="preserve">
          <source>Debug options supported by the &lt;code&gt;start*&lt;/code&gt; functions</source>
          <target state="translated">Параметры отладки, поддерживаемые функциями &lt;code&gt;start*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="4dbfbf2c1ca5c9cbf7ff86eebf9f1e60dfaae3c2" translate="yes" xml:space="preserve">
          <source>Debugging with the :sys module</source>
          <target state="translated">Отладка с модулем :sys</target>
        </trans-unit>
        <trans-unit id="49bac63211bb6e767f6bd201454a7033e302753a" translate="yes" xml:space="preserve">
          <source>Decodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">Расшифровывает &lt;code&gt;string&lt;/code&gt; как &amp;laquo;x-www-form-urlencoded&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="f7d7142bd19e1c0ea0198316fec06393f6cb0ea2" translate="yes" xml:space="preserve">
          <source>Decodes a base 16 encoded string into a binary string.</source>
          <target state="translated">Декодирует базовую 16-кодированную строку в двоичную.</target>
        </trans-unit>
        <trans-unit id="fb034015ded81968d20fd5f7e210338ebd758879" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string into a binary string.</source>
          <target state="translated">Декодирует базовую 32-кодированную строку в двоичную.</target>
        </trans-unit>
        <trans-unit id="885c7e9658ad97e9a9af45bd4781416e206a6334" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string with extended hexadecimal alphabet into a binary string.</source>
          <target state="translated">Декодирует базовую 32-кодированную строку с расширенным шестнадцатеричным алфавитом в двоичную строку.</target>
        </trans-unit>
        <trans-unit id="4b608e75a46b84e1feb5de2f9f73f4f8523e9f1d" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string into a binary string.</source>
          <target state="translated">Декодирует базовую 64-кодированную строку в двоичную.</target>
        </trans-unit>
        <trans-unit id="b945eb1852da433ae69fcf285b6a56aed338e16f" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string with URL and filename safe alphabet into a binary string.</source>
          <target state="translated">Декодирует базовую 64-кодированную строку с безопасным алфавитом URL и имени файла в двоичную строку.</target>
        </trans-unit>
        <trans-unit id="12cd61b38813ead53840f88994a5a092cca61e7f" translate="yes" xml:space="preserve">
          <source>Decodes a query string into a map.</source>
          <target state="translated">Декодирует строку запроса на карте.</target>
        </trans-unit>
        <trans-unit id="624612278a208a23a0e8ccd36697aaa475bd3192" translate="yes" xml:space="preserve">
          <source>Decomposes a local or remote call into its remote part (when provided), function name and argument list.</source>
          <target state="translated">Разлагает локальный или удаленный вызов на удаленную часть (когда это предусмотрено),имя функции и список аргументов.</target>
        </trans-unit>
        <trans-unit id="7151035c3114809bda0193c2a85fa1a470935213" translate="yes" xml:space="preserve">
          <source>Default Unit</source>
          <target state="translated">Блок по умолчанию</target>
        </trans-unit>
        <trans-unit id="6bcca2541d3f4eb99df509a0ef05a98d2f536b6d" translate="yes" xml:space="preserve">
          <source>Default arguments</source>
          <target state="translated">Аргументы по умолчанию</target>
        </trans-unit>
        <trans-unit id="6593ff7fb992a5e5072fa654c1b194d94010d120" translate="yes" xml:space="preserve">
          <source>Default background color.</source>
          <target state="translated">Цвет фона по умолчанию.</target>
        </trans-unit>
        <trans-unit id="6e98c72a394abdbcd4b12051bb239d5b6259e9ce" translate="yes" xml:space="preserve">
          <source>Default text color.</source>
          <target state="translated">Цвет текста по умолчанию.</target>
        </trans-unit>
        <trans-unit id="89487e7c33b83cf47b069ff9b1fec8587ba1c7a6" translate="yes" xml:space="preserve">
          <source>Default translation for Erlang log messages.</source>
          <target state="translated">Трансляция сообщений журнала Erlang по умолчанию.</target>
        </trans-unit>
        <trans-unit id="e19bd89011e61a7bb0e77dd718395ff863fa6b57" translate="yes" xml:space="preserve">
          <source>Default values and required keys</source>
          <target state="translated">Значения по умолчанию и требуемые клавиши</target>
        </trans-unit>
        <trans-unit id="0b6846959c6ecef6294ea2738ab118ae06eb0104" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects.</source>
          <target state="translated">По умолчанию &lt;code&gt;true&lt;/code&gt; для проектов Elixir, &lt;code&gt;false&lt;/code&gt; для проектов Erlang.</target>
        </trans-unit>
        <trans-unit id="86bc280a68c01f58573355e9cc73f727e31ec7ae" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects. Note: if you set this to &lt;code&gt;false&lt;/code&gt; for an Elixir project, you will have to add paths to Elixir's &lt;code&gt;ebin&lt;/code&gt; directories to &lt;code&gt;ERL_LIBS&lt;/code&gt; environment variable when running the resulting escript, in order for the code loader to be able to find &lt;code&gt;:elixir&lt;/code&gt; application and its children applications (if they are used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8d69c2362401ce4e3ef9f4dba08bffc1bb4866" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;a href=&quot;#function_from_string/5&quot;&gt;&lt;code&gt;function_from_string/5&lt;/code&gt;&lt;/a&gt;) or a file (&lt;a href=&quot;#function_from_file/5&quot;&gt;&lt;code&gt;function_from_file/5&lt;/code&gt;&lt;/a&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3da7d067c0e2af23683cd3618963a0c016ef27c" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;code&gt;function_from_string&lt;/code&gt;) or a file (&lt;code&gt;function_from_file&lt;/code&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="translated">Определите функцию из строки ( &lt;code&gt;function_from_string&lt;/code&gt; ) или файла ( &lt;code&gt;function_from_file&lt;/code&gt; ). Это позволяет вам встроить шаблон как функцию в модуль, который затем будет скомпилирован. Это предпочтительный API, если у вас есть доступ к шаблону во время компиляции.</target>
        </trans-unit>
        <trans-unit id="02454c3ef87373b5da454ba33a54d81ec93d84e1" translate="yes" xml:space="preserve">
          <source>Define the &lt;code&gt;@shortdoc&lt;/code&gt; attribute if you wish to make the task publicly visible on &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt;. Omit this attribute if you do not want your task to be listed via &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af570fa4ced5be1c1e832e70770e29cb3378f42" translate="yes" xml:space="preserve">
          <source>Define the function explicitly (v1.0)</source>
          <target state="translated">Определите функцию явно (v1.0).</target>
        </trans-unit>
        <trans-unit id="bc125b89387e69b38c0b71432e6451758cd10e9b" translate="yes" xml:space="preserve">
          <source>Define the rollover moment for the given calendar.</source>
          <target state="translated">Определите момент опрокидывания для данного календаря.</target>
        </trans-unit>
        <trans-unit id="cdc8ce38051bdb795b598be018ffa7c0e1241cd3" translate="yes" xml:space="preserve">
          <source>Defined as</source>
          <target state="translated">Определяется как</target>
        </trans-unit>
        <trans-unit id="0e6d691613c83b20a4bdec6dda26151ba97d0294" translate="yes" xml:space="preserve">
          <source>Defines &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Mix.Shell&lt;/code&gt;&lt;/a&gt; contract.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c159947b8552c14519d220c3a6ddfaa0e00eeec" translate="yes" xml:space="preserve">
          <source>Defines ExUnit callbacks.</source>
          <target state="translated">Определяет обратные вызовы ExUnit.</target>
        </trans-unit>
        <trans-unit id="3fba28715c151409c38236ee7000eb4ed16c82f1" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;file#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Определяет структуру &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stream&lt;/code&gt; ,&lt;/a&gt; возвращаемую &lt;a href=&quot;file#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="83a9409d00bd2dad95a1afabb5663ee3e1f46569" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;https://hexdocs.pm/elixir/File.html#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718b6b621786a1acc4c26d42dbc485e26faf7eec" translate="yes" xml:space="preserve">
          <source>Defines a callback that runs once the test exits.</source>
          <target state="translated">Определяет обратный вызов,который запускается после завершения теста.</target>
        </trans-unit>
        <trans-unit id="9200a3742bfb9e88c562c9f6f3ed2f69e18c6f67" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before all tests in a case.</source>
          <target state="translated">Определяет обратный вызов,который должен быть выполнен перед всеми тестами в деле.</target>
        </trans-unit>
        <trans-unit id="4b6166591f75c5a4bf0202583ee95cba035668e8" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before each test in a case.</source>
          <target state="translated">Определяет обратный вызов,который должен быть выполнен перед каждым тестом в конкретном случае.</target>
        </trans-unit>
        <trans-unit id="d5bc2aab7b6f9616afc524a405cb7757608452d9" translate="yes" xml:space="preserve">
          <source>Defines a function callback according to the given type specification.</source>
          <target state="translated">Определяет обратный вызов функции в соответствии со спецификацией данного типа.</target>
        </trans-unit>
        <trans-unit id="c5db38a50b427e41d0ad25365053a42c56f8a1f7" translate="yes" xml:space="preserve">
          <source>Defines a function that delegates to another module.</source>
          <target state="translated">Определяет функцию,которая делегируется другому модулю.</target>
        </trans-unit>
        <trans-unit id="307e106c43982d5b12630cb72b848406b819c6c6" translate="yes" xml:space="preserve">
          <source>Defines a function with the given name and body.</source>
          <target state="translated">Определяет функцию с заданным именем и телом.</target>
        </trans-unit>
        <trans-unit id="f063e0d1325de98da63498e5fe376536a4c88d2c" translate="yes" xml:space="preserve">
          <source>Defines a macro callback according to the given type specification.</source>
          <target state="translated">Определяет обратный вызов макроса в соответствии со спецификацией данного типа.</target>
        </trans-unit>
        <trans-unit id="d1bdce6fb82524ea6dca239a6d1b4282ce120736" translate="yes" xml:space="preserve">
          <source>Defines a macro with the given name and body.</source>
          <target state="translated">Определяет макрос с заданным именем и телом.</target>
        </trans-unit>
        <trans-unit id="45436ad823527d91893ee57c61d5208fd54f8f28" translate="yes" xml:space="preserve">
          <source>Defines a module given by name with the given contents.</source>
          <target state="translated">Свойство определяет модуль по имени с заданным содержимым.</target>
        </trans-unit>
        <trans-unit id="2b7b7c71d4c9f86dc9189095ea6eb365a7951119" translate="yes" xml:space="preserve">
          <source>Defines a module template to be used throughout your test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf550b43951705ff60d293e8451b26e72a1b3d68" translate="yes" xml:space="preserve">
          <source>Defines a new bitstring.</source>
          <target state="translated">Определяет новую струну.</target>
        </trans-unit>
        <trans-unit id="5e5448d0355663eca910a26c7f674b96bdfb1318" translate="yes" xml:space="preserve">
          <source>Defines a not implemented test with a string.</source>
          <target state="translated">Свойство определяет нереализованный тест со строкой.</target>
        </trans-unit>
        <trans-unit id="3c2d3289caf113cf07d04f07d984ecc30b13bea4" translate="yes" xml:space="preserve">
          <source>Defines a private function with the given name and body.</source>
          <target state="translated">Свойство определяет частную функцию с заданным именем и телом.</target>
        </trans-unit>
        <trans-unit id="08a09270f00cde41495279c24131c417ef5be1db" translate="yes" xml:space="preserve">
          <source>Defines a private macro with the given name and body.</source>
          <target state="translated">Определяет частный макрос с заданным именем и телом.</target>
        </trans-unit>
        <trans-unit id="234e236e77f17928fa5de859398ddc5049a5ff60" translate="yes" xml:space="preserve">
          <source>Defines a protocol.</source>
          <target state="translated">Определяет протокол.</target>
        </trans-unit>
        <trans-unit id="49de89ada1df4216656fd082e602510e9a3bfba6" translate="yes" xml:space="preserve">
          <source>Defines a public function with the given name and body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0c62dc473198ec220624054b59c8e5facbee00" translate="yes" xml:space="preserve">
          <source>Defines a public macro with the given name and body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0422852f7761d300210619550ed122f7749dee" translate="yes" xml:space="preserve">
          <source>Defines a range.</source>
          <target state="translated">Определяет диапазон.</target>
        </trans-unit>
        <trans-unit id="84d0bf0e5d21a052c34ad1cf8cc4fd2c0b2d922d" translate="yes" xml:space="preserve">
          <source>Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="translated">Свойство определяет удаленный вызов,вызов анонимной функции или псевдоним.</target>
        </trans-unit>
        <trans-unit id="148ce01689924171178db559eb8519855c18cbf6" translate="yes" xml:space="preserve">
          <source>Defines a set of macros to create, access, and pattern match on a record.</source>
          <target state="translated">Определяет набор макросов для создания,доступа и сопоставления шаблонов на записи.</target>
        </trans-unit>
        <trans-unit id="d43aa789386d3da190d548740ece58b49c1b5c28" translate="yes" xml:space="preserve">
          <source>Defines a struct.</source>
          <target state="translated">Определяет структуру.</target>
        </trans-unit>
        <trans-unit id="e8fc9a0e945bdfdd9fe422d72e6867459e1dd52d" translate="yes" xml:space="preserve">
          <source>Defines a test with &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff008b3bfc5f520079685bb6518c7f8c263c332" translate="yes" xml:space="preserve">
          <source>Defines a test with a string.</source>
          <target state="translated">Определяет тест со строкой.</target>
        </trans-unit>
        <trans-unit id="e440b3cbec6e05424773317aba5a8cdb773dabba" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a4f177d77d4b3501935507c322bb13c914958e" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;io#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Определяет структуру &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; ,&lt;/a&gt; возвращаемую &lt;a href=&quot;io#stream/2&quot;&gt; &lt;code&gt;IO.stream/2&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;io#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="61d9e7c667e3e371baebf26eb4a1e174baee751d" translate="yes" xml:space="preserve">
          <source>Defines an anonymous function.</source>
          <target state="translated">Определяет анонимную функцию.</target>
        </trans-unit>
        <trans-unit id="1f336908a8420d524aec43e1dfa0a8c9f56be6ac" translate="yes" xml:space="preserve">
          <source>Defines an exception.</source>
          <target state="translated">Определяет исключение.</target>
        </trans-unit>
        <trans-unit id="47c4eab1a12c9a4e9e5bfc15095c4f5f1e7f8420" translate="yes" xml:space="preserve">
          <source>Defines an implementation for the given protocol.</source>
          <target state="translated">Определяет реализацию для данного протокола.</target>
        </trans-unit>
        <trans-unit id="7574e6578cdcbcf5986b0221d662d60206450586" translate="yes" xml:space="preserve">
          <source>Defines and manipulates Mix projects.</source>
          <target state="translated">Определяет и манипулирует проектами Mix.</target>
        </trans-unit>
        <trans-unit id="c87324807b8cf7ca458804ea8ef4c07d69ba7fe6" translate="yes" xml:space="preserve">
          <source>Defines options for module compilation. This is used to configure both Elixir and Erlang compilers, as any other compilation pass added by external tools. For example:</source>
          <target state="translated">Определяет опции для компиляции модулей.Используется для настройки компиляторов Elixir и Erlang,как и любых других передач компиляции,добавляемых внешними инструментами.Например:</target>
        </trans-unit>
        <trans-unit id="51d68b5790fad1de6d84cef24485698c5aa44718" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a supervisor which will be started with the given arguments.</source>
          <target state="translated">Определяет данный &lt;code&gt;module&lt;/code&gt; как супервизор, который будет запущен с заданными аргументами.</target>
        </trans-unit>
        <trans-unit id="a74b181531a071dccf103975ef9b5f457594135a" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a worker which will be started with the given arguments.</source>
          <target state="translated">Определяет данный &lt;code&gt;module&lt;/code&gt; как рабочий, который будет запущен с заданными аргументами.</target>
        </trans-unit>
        <trans-unit id="5ba739f06f65411df500be4fe361a087cd34108a" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.html&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7e7a56a0498c33eb4666ce267e88fdd0443785" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">Определяет параметры, используемые протоколом &lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="706e656786be6150857ba9d00e3f4736e1b09e1e" translate="yes" xml:space="preserve">
          <source>Defines the release structure and convenience for assembling releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f752321778df74391c3378581723efb4dca5e78b" translate="yes" xml:space="preserve">
          <source>Defines warnings to request or suppress when using a version of &lt;code&gt;:dialyzer&lt;/code&gt; that supports module attributes.</source>
          <target state="translated">Определяет предупреждения для запроса или подавления при использовании версии &lt;code&gt;:dialyzer&lt;/code&gt; , которая поддерживает атрибуты модуля.</target>
        </trans-unit>
        <trans-unit id="99cdfc3cbea74f1f4372e3c3f255ee42a2f77809" translate="yes" xml:space="preserve">
          <source>Defining a protocol automatically defines a type named &lt;code&gt;t&lt;/code&gt;, which can be used as follows:</source>
          <target state="translated">Определение протокола автоматически определяет тип с именем &lt;code&gt;t&lt;/code&gt; , который можно использовать следующим образом:</target>
        </trans-unit>
        <trans-unit id="eed610b2a524f1fea8a5a11a6b90ab2b660a40c7" translate="yes" xml:space="preserve">
          <source>Defining a specification</source>
          <target state="translated">Определение спецификации</target>
        </trans-unit>
        <trans-unit id="375bfa92ccfe2bd509e0a5a5c9ecb19ed5761bbc" translate="yes" xml:space="preserve">
          <source>Defining behaviours</source>
          <target state="translated">Определение поведения</target>
        </trans-unit>
        <trans-unit id="1ea27e7345dd55520e1c3fd955a1961190ab35d0" translate="yes" xml:space="preserve">
          <source>Defining custom guard expressions</source>
          <target state="translated">Определение пользовательских защитных выражений</target>
        </trans-unit>
        <trans-unit id="67ee31ce55d3432708e003e7896d5c65897de368" translate="yes" xml:space="preserve">
          <source>Defining custom operators</source>
          <target state="translated">Определение пользовательских операторов</target>
        </trans-unit>
        <trans-unit id="88f1538130a6f0b0a36142a4e1e014b6b0b27ac0" translate="yes" xml:space="preserve">
          <source>Defining custom types</source>
          <target state="translated">Определение пользовательских типов</target>
        </trans-unit>
        <trans-unit id="fbb6738813740f5989865f0caccc2aedd14ecd4c" translate="yes" xml:space="preserve">
          <source>Defining custom types can help communicate the intention of your code and increase its readability. Custom types can be defined within modules via the &lt;code&gt;@type&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da279c1a631ba36a0429ee2b6ef866ee7c040663" translate="yes" xml:space="preserve">
          <source>Defining extracted records with anonymous functions in the values</source>
          <target state="translated">Определение извлекаемых записей с анонимными функциями в значениях</target>
        </trans-unit>
        <trans-unit id="d271da3ed06fd6bd866bb6e79184abd537c3512e" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but it quickly becomes annoying since we&amp;rsquo;re repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; directive in order to declare our own custom type.</source>
          <target state="translated">Такое определение спецификаций функций работает, но быстро становится раздражающим, поскольку мы повторяем тип &lt;code&gt;{number, String.t}&lt;/code&gt; снова и снова. Мы можем использовать директиву &lt;code&gt;@type&lt;/code&gt; для объявления нашего собственного настраиваемого типа.</target>
        </trans-unit>
        <trans-unit id="0b772a8609651705eb8dde2b64b91c2000ee893a" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but we end up repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; attribute to declare our own custom type and cut down on the repetition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fec1dfeb38c397bddde90cce354ec968be3e685" translate="yes" xml:space="preserve">
          <source>Defining structs</source>
          <target state="translated">Определение структур</target>
        </trans-unit>
        <trans-unit id="ac3516b411710c30e4cd006454c7f1994a4da34a" translate="yes" xml:space="preserve">
          <source>Delegation only works with functions; delegating macros is not supported.</source>
          <target state="translated">Делегирование работает только с функциями,делегирование макросов не поддерживается.</target>
        </trans-unit>
        <trans-unit id="e726a77011c0fe0cd388991d477e194ae9fd7af2" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;value&lt;/code&gt; from &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">Удаляет &lt;code&gt;value&lt;/code&gt; из &lt;code&gt;map_set&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7197d992ec2d7887544bc401d08055b1f065eeeb" translate="yes" xml:space="preserve">
          <source>Deletes a path from the Erlang VM code path list. This is the list of directories the Erlang VM uses for finding module code.</source>
          <target state="translated">Удаляет путь из списка путей VM-кода Эрланга.Это список директорий,которые VM Erlang использует для поиска кода модуля.</target>
        </trans-unit>
        <trans-unit id="23800ac90aacec2911367a4560daa8ed5fec9cb1" translate="yes" xml:space="preserve">
          <source>Deletes an environment variable.</source>
          <target state="translated">Удаляет переменную окружения.</target>
        </trans-unit>
        <trans-unit id="28cada09dd4174a63836f40b25ecf14ff7e1c534" translate="yes" xml:space="preserve">
          <source>Deletes generated application files.</source>
          <target state="translated">Удаляет сгенерированные файлы приложений.</target>
        </trans-unit>
        <trans-unit id="e6a3899638112ac7460e060d887ef65128ba4bb0" translate="yes" xml:space="preserve">
          <source>Deletes logging level for all modules to primary level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51596caccd970cb4a08314add121664dd042408" translate="yes" xml:space="preserve">
          <source>Deletes logging level for given module to primary level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666b6e6f3ed57f226d5de485fc7c0243f6bedb5a" translate="yes" xml:space="preserve">
          <source>Deletes registry metadata for the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6511b55cc1b351a9cd395e58f52ffa508ee0de39" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;key&lt;/code&gt; from the given &lt;code&gt;app&lt;/code&gt; environment.</source>
          <target state="translated">Удаляет &lt;code&gt;key&lt;/code&gt; из данной среды &lt;code&gt;app&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cda458e47c2adb906a94c0b5117cdc3d628bc0de" translate="yes" xml:space="preserve">
          <source>Deletes the child specification identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">Удаляет &lt;code&gt;child_id&lt;/code&gt; спецификацию, идентифицированную child_id .</target>
        </trans-unit>
        <trans-unit id="06519f5a98d8a9576fa45c95f0c76ae133cbfd51" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="translated">Удаляет элемент по данному &lt;code&gt;index&lt;/code&gt; из &lt;code&gt;tuple&lt;/code&gt; . Вызывает ошибку &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; ,&lt;/a&gt; если &lt;code&gt;index&lt;/code&gt; отрицательный, больше или равен длине &lt;code&gt;tuple&lt;/code&gt; . Индекс отсчитывается от нуля.</target>
        </trans-unit>
        <trans-unit id="fd3c9b264d49ac26b30c967deba1cf019e912877" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768479db33c4ea83d038f3e75c0b46d08cfff3a1" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">Удаляет записи в списке ключевых слов для &lt;code&gt;key&lt;/code&gt; со &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="30f8ea2c4a41f9ff990549664a0c3e8cc979a2f3" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">Удаляет записи в списке ключевых слов для определенного &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e356fc985f5b4c45501dcdd4bf05b2d169dc820a" translate="yes" xml:space="preserve">
          <source>Deletes the entry in &lt;code&gt;map&lt;/code&gt; for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">Удаляет запись на &lt;code&gt;map&lt;/code&gt; для определенного &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="84bf7f6c44bf7d1a25fea2eb0b485822b94e4057" translate="yes" xml:space="preserve">
          <source>Deletes the first entry in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">Удаляет первую запись в списке ключевых слов для определенного &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f8205134472497de5f123b07ed4ca04623561776" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;element&lt;/code&gt; from the &lt;code&gt;list&lt;/code&gt;. Returns a new list without the element.</source>
          <target state="translated">Удаляет указанный &lt;code&gt;element&lt;/code&gt; из &lt;code&gt;list&lt;/code&gt; . Возвращает новый список без элемента.</target>
        </trans-unit>
        <trans-unit id="6931640e5585d21423be80c31e8281e15f83ebe2" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;key&lt;/code&gt; from the process dictionary.</source>
          <target state="translated">Удаляет указанный &lt;code&gt;key&lt;/code&gt; из словаря процесса.</target>
        </trans-unit>
        <trans-unit id="96c74c6ec914e8875fe5447015216dd83996fdd6" translate="yes" xml:space="preserve">
          <source>Deletes the given dependencies' files, including build artifacts and fetched sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241d39fd9168ac37f5f1398b699e96cae08161ab" translate="yes" xml:space="preserve">
          <source>Deletes the module attribute that matches the given key.</source>
          <target state="translated">Удаляет атрибут модуля,соответствующий данному ключу.</target>
        </trans-unit>
        <trans-unit id="a7699468279a4b12f6e55a5ad1b8c725c2c3ca8c" translate="yes" xml:space="preserve">
          <source>Demonitors the monitor identified by the given &lt;code&gt;reference&lt;/code&gt;.</source>
          <target state="translated">Демонстрирует монитор, идентифицированный по данной &lt;code&gt;reference&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="ca0bdefd221fdbfd10bc0f3013fa9c019ef6808e" translate="yes" xml:space="preserve">
          <source>Dependencies and umbrella projects</source>
          <target state="translated">Зависимости и зонтичные проекты</target>
        </trans-unit>
        <trans-unit id="a491fbe030b9498ae78cd8f4bbd75506aa4b23b5" translate="yes" xml:space="preserve">
          <source>Dependencies are loaded again, now with an updated env environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aeab4e8a30c470967346544f8d2eeabc88b3b63" translate="yes" xml:space="preserve">
          <source>Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; and change the &lt;code&gt;deps/0&lt;/code&gt; function to the following:</source>
          <target state="translated">Зависимости между приложениями в зонтичном проекте по-прежнему должны быть определены явно, и Mix упрощает это. Откройте &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; и измените функцию &lt;code&gt;deps/0&lt;/code&gt; на следующее:</target>
        </trans-unit>
        <trans-unit id="20c4e61613e0bb2759ad45cedce4f0b014181be0" translate="yes" xml:space="preserve">
          <source>Dependencies must be specified in the &lt;code&gt;mix.exs&lt;/code&gt; file in one of the following formats:</source>
          <target state="translated">Зависимости должны быть указаны в файле &lt;code&gt;mix.exs&lt;/code&gt; в одном из следующих форматов:</target>
        </trans-unit>
        <trans-unit id="fc73fac5fc75582095a6f843e32787bf5448edd3" translate="yes" xml:space="preserve">
          <source>Dependencies types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1313d46d93e4456c33c34bdf877a2b31296e6f6b" translate="yes" xml:space="preserve">
          <source>Dependencies within an umbrella project</source>
          <target state="translated">Зависимости в рамках зонтичного проекта</target>
        </trans-unit>
        <trans-unit id="2ae4f4df59c1f88916b85e951202eefbff4c7b68" translate="yes" xml:space="preserve">
          <source>Dependency definition options</source>
          <target state="translated">Варианты определения зависимости</target>
        </trans-unit>
        <trans-unit id="8ef7583b0e7ed117ec9a27cd09f5e8d10632bf4f" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1bc59655cdca7840ee9bf9d55721f13ebb7a55" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="translated">В зависимости от значения аккумулятора результат, возвращаемый &lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; ,&lt;/a&gt; будет изменяться. Пожалуйста, проверьте документацию типа &lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="8d458ed0bd596292bbe634a9b96cac2cab2e4961" translate="yes" xml:space="preserve">
          <source>Deployments</source>
          <target state="translated">Deployments</target>
        </trans-unit>
        <trans-unit id="4962f760a0cc6ed936dcedffadba8733dd81e124" translate="yes" xml:space="preserve">
          <source>Deploys a given module's BEAM code to a list of nodes.</source>
          <target state="translated">Развертывает код BEAM данного модуля на список узлов.</target>
        </trans-unit>
        <trans-unit id="f6ef72731d9f2999dced5cdda829d282f60229ed" translate="yes" xml:space="preserve">
          <source>Deprecated feature</source>
          <target state="translated">Исключенная функция</target>
        </trans-unit>
        <trans-unit id="e5135ac9aa0f3adf0ead688638a7cada98f65645" translate="yes" xml:space="preserve">
          <source>Deprecated function to retrieve old documentation format.</source>
          <target state="translated">Утраченная функция для получения старого формата документации.</target>
        </trans-unit>
        <trans-unit id="355cf2e1caeb8e5de974f3e0ee6f449e9a16967c" translate="yes" xml:space="preserve">
          <source>Deprecated mechanism to retrieve the last exception stacktrace.</source>
          <target state="translated">Утраченный механизм для извлечения последней стековой дорожки исключений.</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="8189415262d9b40fadd78cc759dd14fdb9868384" translate="yes" xml:space="preserve">
          <source>Deps task</source>
          <target state="translated">Задача Депутатов</target>
        </trans-unit>
        <trans-unit id="1751cb6240f8427862c44d9fda1a1acebc588f2b" translate="yes" xml:space="preserve">
          <source>Derives the &lt;code&gt;protocol&lt;/code&gt; for &lt;code&gt;module&lt;/code&gt; with the given options.</source>
          <target state="translated">Выводит &lt;code&gt;protocol&lt;/code&gt; для &lt;code&gt;module&lt;/code&gt; с заданными параметрами.</target>
        </trans-unit>
        <trans-unit id="b1f507cfab066377ebfd776c06ce8c6ae1d1dfae" translate="yes" xml:space="preserve">
          <source>Deriving</source>
          <target state="translated">Deriving</target>
        </trans-unit>
        <trans-unit id="469b2320b22b8de425b1224d561debab3b7e4eec" translate="yes" xml:space="preserve">
          <source>Describes tests together.</source>
          <target state="translated">Описывает тесты вместе.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="373b67a9ef6e15b48984d2e64ecfb18feb928f40" translate="yes" xml:space="preserve">
          <source>Design principles</source>
          <target state="translated">Принципы конструирования</target>
        </trans-unit>
        <trans-unit id="9c5959e7ab4938c2e1595e724f3e5f686f3d536b" translate="yes" xml:space="preserve">
          <source>Destructures two lists, assigning each term in the right one to the matching term in the left one.</source>
          <target state="translated">Разрушает два списка,присваивая каждому термину в правом списке совпадающий термин в левом.</target>
        </trans-unit>
        <trans-unit id="55519a961a5691717096efcabf1914eee5dab5a5" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;integer&lt;/code&gt; is odd.</source>
          <target state="translated">Определяет, является ли &lt;code&gt;integer&lt;/code&gt; нечетным.</target>
        </trans-unit>
        <trans-unit id="026e5ca0dfda1ad25fabda732fd35af3e32e25b5" translate="yes" xml:space="preserve">
          <source>Determines if an &lt;code&gt;integer&lt;/code&gt; is even.</source>
          <target state="translated">Определяет, является ли &lt;code&gt;integer&lt;/code&gt; четным.</target>
        </trans-unit>
        <trans-unit id="ada7ef5eac5cda7b071d8c84d536d21adaaabe11" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;enumerable&lt;/code&gt; is empty.</source>
          <target state="translated">Определяет, пусто ли &lt;code&gt;enumerable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="240590c512304822fc6f9051f63c5097957b51d1" translate="yes" xml:space="preserve">
          <source>Determines if the date given is valid according to the proleptic Gregorian calendar.</source>
          <target state="translated">Определяет,действительна ли указанная дата по пролептическому григорианскому календарю.</target>
        </trans-unit>
        <trans-unit id="76efef7f9a49f47616dc673a59a2c3e837af4cb0" translate="yes" xml:space="preserve">
          <source>Determines whether a given file path (supplied to ExUnit/Mix as arguments on the command line) includes a line number filter, and if so returns the appropriate ExUnit configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecb9b726f00ef60a6a7e35454782b134568f041" translate="yes" xml:space="preserve">
          <source>Developers can also use &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; to build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b906ed370d76a314f78611272f97a7c5324fbfb8" translate="yes" xml:space="preserve">
          <source>Developers can also use tools like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; that build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="translated">Разработчики также могут использовать такие инструменты, как &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; , для создания &lt;strong&gt;выпусков&lt;/strong&gt; . Релизы могут упаковать весь ваш исходный код, а также виртуальную машину Erlang в один каталог. Релизы также дают вам явный контроль над тем, как каждое приложение запускается и в каком порядке. Они также обеспечивают более удобный механизм для запуска и остановки систем, отладки, ведения журнала, а также для мониторинга системы.</target>
        </trans-unit>
        <trans-unit id="17f25608342d4ab77bb1907f884cfe439bc54de0" translate="yes" xml:space="preserve">
          <source>Developers may also implement their own backends, an option that is explored in more detail below.</source>
          <target state="translated">Разработчики также могут реализовать свои собственные бэкэнды,вариант,который более подробно рассматривается ниже.</target>
        </trans-unit>
        <trans-unit id="0f26c5755a434f3e16da5992d7fb7b82ce5cc7eb" translate="yes" xml:space="preserve">
          <source>Developers may also use umbrella projects to break large business domains apart. The caution here is to make sure the domains don&amp;rsquo;t depend on each other (also known as cyclic dependencies). If you run into such situations, it means those applications are not as isolated from each other as you originally thought, and you have architectural and design issues to solve.</source>
          <target state="translated">Разработчики также могут использовать зонтичные проекты для разделения больших бизнес-доменов. Здесь следует предостеречь, чтобы домены не зависели друг от друга (также известные как циклические зависимости). Если вы столкнетесь с такими ситуациями, это означает, что эти приложения не так изолированы друг от друга, как вы первоначально думали, и вам необходимо решить архитектурные и дизайнерские проблемы.</target>
        </trans-unit>
        <trans-unit id="f8e1b365eba8e74b8bfe96cbfcdf64fb1b529aa8" translate="yes" xml:space="preserve">
          <source>Developers may want to customize the VM flags and environment variables given when the release starts. This is typically done by customizing two files inside your release: &lt;code&gt;releases/RELEASE_VSN/vm.args&lt;/code&gt; and &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; (or &lt;code&gt;env.bat&lt;/code&gt; on Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4df092ce16103b5263190978f954da4abebc038" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; struct directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">Разработчикам следует избегать создания структуры &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; напрямую и вместо этого полагаться на функции, предоставляемые этим модулем, а также функции сторонних библиотек календарей.</target>
        </trans-unit>
        <trans-unit id="9399f0af7289ccae2bbfba26b54d6beaa45eceaa" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Date structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">Разработчикам следует избегать непосредственного создания структур Date и вместо этого полагаться на функции,предоставляемые этим модулем,а также на функции сторонних календарных библиотек.</target>
        </trans-unit>
        <trans-unit id="372765583e2c62003b134d7cd14c816d752b1af8" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the NaiveDateTime structs directly and instead, rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">Разработчикам следует избегать создания структур NaiveDateTime напрямую,а вместо этого полагаться на функции,предоставляемые этим модулем,а также на функции сторонних календарных библиотек.</target>
        </trans-unit>
        <trans-unit id="055215a2dc231830ec70e2ea3ed245f009feefc1" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Time structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">Разработчикам следует избегать непосредственного создания временных структур и вместо этого полагаться на функции,предоставляемые этим модулем,а также на функции сторонних календарных библиотек.</target>
        </trans-unit>
        <trans-unit id="9189bcb16b1c4a850379e209c0a8399dce99e6b1" translate="yes" xml:space="preserve">
          <source>Developers typically interact with the application environment and its callback module. Therefore those will be the topics we will cover first before jumping into details about the application resource file and life-cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b414f7b11d4d2f5dc034b2a293c66c101f5ce2" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49670694b8769b5d39822cc3c17e46c76506631f" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f9f33bf587fbe7754189054b93906eb196c38a" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">Разработчики обычно вызывают &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; &lt;/a&gt; в конце обратного вызова init, чтобы вернуть надлежащие флаги контроля.</target>
        </trans-unit>
        <trans-unit id="c23ae07b94722ec4976e1fcb3346ba8a18a11515" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;supervisor#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">Разработчики обычно вызывают &lt;a href=&quot;supervisor#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt; в конце обратного вызова init, чтобы вернуть соответствующие флаги контроля.</target>
        </trans-unit>
        <trans-unit id="c943b3eb860130726114a82a12d17559028bcef9" translate="yes" xml:space="preserve">
          <source>Developing in Elixir does not make your code free of race conditions. However, Elixir&amp;rsquo;s abstractions where nothing is shared by default make it easier to spot a race condition&amp;rsquo;s root cause.</source>
          <target state="translated">Разработка в Elixir не освобождает ваш код от состояния гонки. Однако абстракции Elixir, в которых по умолчанию ничего не используется совместно, упрощают определение первопричины состояния гонки.</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="6b689de83c32738e6559500bab1e32306f72a975" translate="yes" xml:space="preserve">
          <source>Diagnostic information such as a warning or compilation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3550a4a38c380e14df95457cd13d6dabbd0c0b20" translate="yes" xml:space="preserve">
          <source>Dict</source>
          <target state="translated">Dict</target>
        </trans-unit>
        <trans-unit id="28a9d7ddb98e082ecef8831bdb74b74701f20d77" translate="yes" xml:space="preserve">
          <source>Differences from &lt;code&gt;defmodule&lt;/code&gt;</source>
          <target state="translated">Отличия от &lt;code&gt;defmodule&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="951f149c561762e46794ae9088e9246ba02fb48d" translate="yes" xml:space="preserve">
          <source>Differences to &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Различия для &lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5d20542733f8e0c7eb21a37d3a9649be5cfd67f9" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7664bc212e56811cb62a63d951c16c5ee311e137" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="translated">Разделители каталогов всегда должны быть записаны как &lt;code&gt;/&lt;/code&gt; , даже в Windows. Вы можете вызвать &lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; &lt;/a&gt; для нормализации пути перед вызовом этой функции.</target>
        </trans-unit>
        <trans-unit id="07461fdd8bbd77721cfe447edf9e4bd20cbd0023" translate="yes" xml:space="preserve">
          <source>Directory structure</source>
          <target state="translated">Структура каталога</target>
        </trans-unit>
        <trans-unit id="5095c2a8d43020f623949798775e0dea6df3427e" translate="yes" xml:space="preserve">
          <source>Disables logging for the current process.</source>
          <target state="translated">Отключает протоколирование текущего процесса.</target>
        </trans-unit>
        <trans-unit id="3243542aa799d7700902fa9d17f21c898a51bd23" translate="yes" xml:space="preserve">
          <source>Dispatching happens in the process that calls &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; either serially or concurrently in case of multiple partitions (via spawned tasks). The registered processes are not involved in dispatching unless involving them is done explicitly (for example, by sending them a message in the callback).</source>
          <target state="translated">Диспетчеризация происходит в процессе, который вызывает &lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; &lt;/a&gt; последовательно или одновременно в случае нескольких разделов (через порожденные задачи). Зарегистрированные процессы не участвуют в диспетчеризации, если их вовлечение не выполняется явно (например, путем отправки им сообщения в обратном вызове).</target>
        </trans-unit>
        <trans-unit id="129dd56090745e370bed845813615f5c08f21b2a" translate="yes" xml:space="preserve">
          <source>Distributed tasks</source>
          <target state="translated">Распределенные задачи</target>
        </trans-unit>
        <trans-unit id="aef0124ef44afd7de1feb0a9b09b0c6ee2798fe2" translate="yes" xml:space="preserve">
          <source>Distributed tasks and tags</source>
          <target state="translated">Распределенные задачи и теги</target>
        </trans-unit>
        <trans-unit id="b4c7a18ac5c24ec1029c892a8a7fb3fbcc59af1d" translate="yes" xml:space="preserve">
          <source>Distributed tasks are exactly the same as supervised tasks. The only difference is that we pass the node name when spawning the task on the supervisor. Open up &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; from the &lt;code&gt;:kv&lt;/code&gt; application. Let&amp;rsquo;s add a task supervisor as the last child of the tree:</source>
          <target state="translated">Распределенные задачи точно такие же, как контролируемые задачи. Единственная разница в том, что мы передаем имя узла при порождении задачи в супервизоре. Откройте &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; из приложения &lt;code&gt;:kv&lt;/code&gt; . Давайте добавим супервизора задач в качестве последнего потомка дерева:</target>
        </trans-unit>
        <trans-unit id="98348afa0d882c80ed7d05917265b30ff93c136a" translate="yes" xml:space="preserve">
          <source>Divides a string into parts based on a pattern.</source>
          <target state="translated">Разделяет строку на части по шаблону.</target>
        </trans-unit>
        <trans-unit id="4f19d3c5ba97dc473a0dd975ca453b2aa1eeca76" translate="yes" xml:space="preserve">
          <source>Divides a string into substrings at each Unicode whitespace occurrence with leading and trailing whitespace ignored. Groups of whitespace are treated as a single occurrence. Divisions do not occur on non-breaking whitespace.</source>
          <target state="translated">Разделяет строку на подстроки при каждом появлении пробела в Unicode с игнорированием лидирующего и скользящего пробела.Группы пробельных символов рассматриваются как единое вхождение.Разделения не происходят при неразрывном пробеле.</target>
        </trans-unit>
        <trans-unit id="d81ee0347de2d9ae77f2a442736c72a2f69253b7" translate="yes" xml:space="preserve">
          <source>Do not call this function at the tail of another function. Due to tail call optimization, a stacktrace entry would not be added and the stacktrace would be incorrectly trimmed. Therefore make sure at least one expression (or an atom such as &lt;code&gt;:ok&lt;/code&gt;) follows the &lt;a href=&quot;#warn/1&quot;&gt;&lt;code&gt;IO.warn/1&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4d17c0fddf7977be47a1ef9b14e7b1d0cef265" translate="yes" xml:space="preserve">
          <source>Do not rely on the particular format returned by the &lt;code&gt;format*&lt;/code&gt; functions in this module. They may be changed in future releases in order to better suit Elixir's tool chain. In other words, by using the functions in this module it is guaranteed you will format exceptions as in the current Elixir version being used.</source>
          <target state="translated">Не полагайтесь на конкретный формат, возвращаемый функциями &lt;code&gt;format*&lt;/code&gt; в этом модуле. Они могут быть изменены в будущих выпусках, чтобы лучше соответствовать цепочке инструментов Elixir. Другими словами, используя функции этого модуля, вы гарантированно отформатируете исключения, как в текущей используемой версии Elixir.</target>
        </trans-unit>
        <trans-unit id="7ed32458ab08d1762c48c121c3b7d606e8351db4" translate="yes" xml:space="preserve">
          <source>Do not rely on them as they may change or be fully removed in future versions of the language. They are often used by &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#quote/2&quot;&gt;&lt;code&gt;quote/2&lt;/code&gt;&lt;/a&gt; and the compiler to provide features like hygiene, better error messages, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7bc96b42e95f7c693c3ce91032568e412218c3" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4fd1f0a9baed4ec08ef8c1f9bda3731a7c9d57" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C=/2&quot;&gt;&lt;code&gt;&amp;lt;=/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3E=/2&quot;&gt;&lt;code&gt;&amp;gt;=/2&lt;/code&gt;&lt;/a&gt; and friends when sorting structs. That's because the built-in operators above perform structural comparison and not a semantic one. Imagine we sort the following list of dates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be89a1272cff39c64911be3f9a33057d2a2263c" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;mix.project#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="translated">Не используйте &lt;a href=&quot;mix.project#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt; для поиска конфигурации времени выполнения. Используйте его только для настройки аспектов вашего проекта (например, каталогов компиляции), а не среды выполнения вашего приложения.</target>
        </trans-unit>
        <trans-unit id="a8d3dcf5e3a5a8a9d6963913c532d9b07e33dbf9" translate="yes" xml:space="preserve">
          <source>Do not use special match variables &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; and &lt;code&gt;:&quot;$$&quot;&lt;/code&gt;, because they might not work as expected.</source>
          <target state="translated">Не используйте специальные переменные соответствия &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; и &lt;code&gt;:&quot;$$&quot;&lt;/code&gt; , потому что они могут работать не так, как ожидалось.</target>
        </trans-unit>
        <trans-unit id="9078c7f338a72de9ec9a277913417c733a31c6ad" translate="yes" xml:space="preserve">
          <source>Do not use this function to generate a sequence of numbers. If blocking the caller process is not necessary, use &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; instead.</source>
          <target state="translated">Не используйте эту функцию для генерации последовательности чисел. Если в блокировке вызывающего процесса нет необходимости, используйте &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c967365f49cb78e9480b70b6bc54898d3348c0d" translate="yes" xml:space="preserve">
          <source>Doctest will looking for a line starting with &lt;code&gt;** (&lt;/code&gt; and it will parse it accordingly to extract the exception name and message. The exception parser will consider all following lines part of the exception message until there is an empty line or there is a new expression prefixed with &lt;code&gt;iex&amp;gt;&lt;/code&gt;. Therefore, it is possible to match on multiline messages as long as there are no empty lines on the message itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e01c221d853296d84e769113c74b2df4ca129d1" translate="yes" xml:space="preserve">
          <source>Doctests</source>
          <target state="translated">Doctests</target>
        </trans-unit>
        <trans-unit id="54cc8e778254d8263003ab87576a482705e9e652" translate="yes" xml:space="preserve">
          <source>Doctests allow us to generate tests from code examples found in &lt;code&gt;@moduledoc&lt;/code&gt; and &lt;code&gt;@doc&lt;/code&gt; attributes. To do this, invoke the &lt;a href=&quot;#doctest/1&quot;&gt;&lt;code&gt;doctest/1&lt;/code&gt;&lt;/a&gt; macro from within your test case and ensure your code examples are written according to the syntax and guidelines below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6f84b7484c0cf7709bebbb23583c23abf1b083" translate="yes" xml:space="preserve">
          <source>Doctests are specified by an indentation of four spaces followed by the &lt;code&gt;iex&amp;gt;&lt;/code&gt; prompt in a documentation string. If a command spans multiple lines, you can use &lt;code&gt;...&amp;gt;&lt;/code&gt;, as in IEx. The expected result should start at the next line after &lt;code&gt;iex&amp;gt;&lt;/code&gt; or &lt;code&gt;...&amp;gt;&lt;/code&gt; line(s) and is terminated either by a newline or a new &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix.</source>
          <target state="translated">Доктесты задаются отступом из четырех пробелов, за которым &lt;code&gt;iex&amp;gt;&lt;/code&gt; приглашение iex&amp;gt; в строке документации. Если команда занимает несколько строк, вы можете использовать &lt;code&gt;...&amp;gt;&lt;/code&gt; , как в IEx. Ожидаемый результат должен начинаться со следующей строки после строки &lt;code&gt;iex&amp;gt;&lt;/code&gt; или &lt;code&gt;...&amp;gt;&lt;/code&gt; и заканчиваться новой &lt;code&gt;iex&amp;gt;&lt;/code&gt; или новым префиксом iex&amp;gt; .</target>
        </trans-unit>
        <trans-unit id="acfc0021db2710ad6e5c5976444819b508e6a8e7" translate="yes" xml:space="preserve">
          <source>Doctests, patterns and with</source>
          <target state="translated">Врачебные тесты,схемы и с</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="dbeb3b73b289a45968e86a1c4e28757eddbb7b21" translate="yes" xml:space="preserve">
          <source>Documentation != Code comments</source>
          <target state="translated">Документация !=Комментарии к коду</target>
        </trans-unit>
        <trans-unit id="dc66ec30a9e7992a7f99224cd60ef6a9e6f7c515" translate="yes" xml:space="preserve">
          <source>Documentation in Elixir is usually attached to module attributes. Let's see an example:</source>
          <target state="translated">Документация в Elixir обычно прикреплена к атрибутам модуля.Рассмотрим пример:</target>
        </trans-unit>
        <trans-unit id="d46677a0ad1e404b917f0ea8b3b31b80c34ffa5f" translate="yes" xml:space="preserve">
          <source>Documentation metadata</source>
          <target state="translated">Метаданные документации</target>
        </trans-unit>
        <trans-unit id="fcb85c951e6d656fcd603d110a64fcd8866200d9" translate="yes" xml:space="preserve">
          <source>Documents in a group are attempted to be rendered together to the best of the renderer ability.</source>
          <target state="translated">Документы,входящие в группу,пытаются визуализировать вместе,насколько это возможно.</target>
        </trans-unit>
        <trans-unit id="e86919b582b64b77ec53c038e64ee362a74d9398" translate="yes" xml:space="preserve">
          <source>Does not include fractional seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd6d91ba0fc6656f3596671325c2a8e0bccb23f" translate="yes" xml:space="preserve">
          <source>Does not load any of the implementations.</source>
          <target state="translated">Не загружает ни одну из реализаций.</target>
        </trans-unit>
        <trans-unit id="e1c5568ff1b2696956a80de3fbdad95c454b1c9a" translate="yes" xml:space="preserve">
          <source>Does not load any of the protocols.</source>
          <target state="translated">Не загружает ни один из протоколов.</target>
        </trans-unit>
        <trans-unit id="c263be485f93e4de275853028d24c5388efd78f6" translate="yes" xml:space="preserve">
          <source>Doing 0.1 * 0.1 should return 0.01, but because 0.1 is actually 0.1000000014, the result is 0.010000000000000002, and because this is not the closest representable number to 0.01, you'll get the wrong result for this operation</source>
          <target state="translated">Выполнение 0.1*0.1 должно вернуть 0.01,но так как 0.1 на самом деле 0.1000000014,результат 0.010000000000000002,и так как это не самое близкое к 0.01 репрезентабельное число,то вы получите неправильный результат для этой операции.</target>
        </trans-unit>
        <trans-unit id="576aa93d193455e3276b07f4cd2af71d8167c617" translate="yes" xml:space="preserve">
          <source>Doing it in reverse order will raise a syntax error:</source>
          <target state="translated">Если сделать это в обратном порядке,то возникнет синтаксическая ошибка:</target>
        </trans-unit>
        <trans-unit id="a56ad56b6280b6eca6747cdcbe707267d3443caf" translate="yes" xml:space="preserve">
          <source>Domain-specific languages</source>
          <target state="translated">Языки,специфичные для домена</target>
        </trans-unit>
        <trans-unit id="e6ab4e40cdc60406c301246d5709b2813b1c0221" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t drink the kool aid</source>
          <target state="translated">Не пей помощь кула</target>
        </trans-unit>
        <trans-unit id="bfd4ab20e5eed869032f79c7d0b2472213257269" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that you can also check the &lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;source code of Elixir itself&lt;/a&gt;, which is mostly written in Elixir (mainly the &lt;code&gt;lib&lt;/code&gt; directory), or &lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;explore Elixir&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">Не забывайте, что вы также можете проверить &lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;исходный код самого Elixir&lt;/a&gt; , который в основном написан на Elixir (в основном, каталог &lt;code&gt;lib&lt;/code&gt; ), или &lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;изучить документацию Elixir&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5db8bef0a01561d7d57f3c78471d1ef61330dd5e" translate="yes" xml:space="preserve">
          <source>Dot operator. Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3dff4b81533f75ceec6a97ebb6191aa309061e" translate="yes" xml:space="preserve">
          <source>Drops elements at the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">Удаляет элементы в начале &lt;code&gt;enumerable&lt;/code&gt; а &lt;code&gt;fun&lt;/code&gt; возвращает истинное значение.</target>
        </trans-unit>
        <trans-unit id="594f287d9f0bd3fb9ea891584418c737436dd38e" translate="yes" xml:space="preserve">
          <source>Drops the &lt;code&gt;amount&lt;/code&gt; of elements from the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">Удаляет &lt;code&gt;amount&lt;/code&gt; элементов из &lt;code&gt;enumerable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ab32b2e5c71cd1c17d36b26a0d25edc63a27b074" translate="yes" xml:space="preserve">
          <source>Drops the given &lt;code&gt;keys&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">Сбрасывает данные &lt;code&gt;keys&lt;/code&gt; с &lt;code&gt;map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdb8b8343fe7d1adbf36b056e528d2571ea6a12c" translate="yes" xml:space="preserve">
          <source>Drops the given keys from the keyword list.</source>
          <target state="translated">Отображает заданные ключи из списка ключевых слов.</target>
        </trans-unit>
        <trans-unit id="69c0475e80c404bbdc2d49a7a643fb10c6ace760" translate="yes" xml:space="preserve">
          <source>Due to immutability, loops in Elixir (as in any functional programming language) are written differently from imperative languages. For example, in an imperative language like C, one would write:</source>
          <target state="translated">Благодаря неизменяемости,циклы в эликсире (как и в любом функциональном языке программирования)написаны иначе,чем в императивных языках.Например,на императивном языке,таком как C,можно было бы написать:</target>
        </trans-unit>
        <trans-unit id="5cf07ff6fe7f2d796d09183c5eda29bcd66f1127" translate="yes" xml:space="preserve">
          <source>Due to their cons cell based representation, prepending an element to a list is always fast (constant time), while appending becomes slower as the list grows in size (linear time):</source>
          <target state="translated">Благодаря представлению,основанному на методе &quot;минус ячейки&quot;,добавление элемента в список всегда происходит быстро (постоянное время),в то время как добавление становится медленнее по мере увеличения размера списка (линейное время):</target>
        </trans-unit>
        <trans-unit id="4f1ef09b3bb7845a809a8a0e2e38529155ed603e" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="translated">Из-за своей лени потоки полезны при работе с большими (или даже бесконечными) коллекциями. При связывании многих операций с &lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; создаются промежуточные списки, а &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; создает рецепт вычислений, которые выполняются в более поздний момент. Посмотрим на другой пример:</target>
        </trans-unit>
        <trans-unit id="bb320794ee00a758f7983100b77521dd3b189d58" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4a3188c65902a880f35052cd6e431c13b80b5a" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9895fb241f7b45a9dc3e35cea835d242910bcea5" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">Благодаря этому свойству Elixir полагается на функции, начинающиеся с символа подчеркивания, для присоединения к модулям метаданных времени компиляции. Чаще всего такие функции имеют формат &lt;code&gt;__foo__&lt;/code&gt; . Например, каждый модуль в Elixir имеет функцию &lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;__info__/1&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="e98f40360712c64e6a04a39d7c38770f1fe9b496" translate="yes" xml:space="preserve">
          <source>Duplicate keys and ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d17d072820769c205a9be99134b8181cc1f8d63" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">Дублирующиеся записи удаляются, преобладает последняя. В отличие от &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt; , &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; гарантирует, что ключи уникальны.</target>
        </trans-unit>
        <trans-unit id="076f63ae0f418e3862988b172f7c4cc5852450a8" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">Дублирующиеся записи удаляются, преобладает последняя. В отличие от &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt; , &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; гарантирует, что ключи уникальны.</target>
        </trans-unit>
        <trans-unit id="64aa4fe0da505292ed7a57df0b239e0d4183ccec" translate="yes" xml:space="preserve">
          <source>Duplicated keys appear duplicated in the final list of keys.</source>
          <target state="translated">Дублированные клавиши появляются в финальном списке дубликатов.</target>
        </trans-unit>
        <trans-unit id="efdd2fd6681b594f9b79a82e9b5aa48b4fbf5e9b" translate="yes" xml:space="preserve">
          <source>Duplicated keys are not removed.</source>
          <target state="translated">Дублированные ключи не удаляются.</target>
        </trans-unit>
        <trans-unit id="ac53e68a8e0e729bf98aeec7ce7b6340de177d35" translate="yes" xml:space="preserve">
          <source>Duplicated keys are preserved in the new keyword list.</source>
          <target state="translated">Дублированные ключи сохраняются в новом списке ключевых слов.</target>
        </trans-unit>
        <trans-unit id="b3b6f1eeffe99ed90517ec6eae526962d142636d" translate="yes" xml:space="preserve">
          <source>Duplicated keys are removed; the latest one prevails.</source>
          <target state="translated">Дублированные ключи удаляются;превалирует последний.</target>
        </trans-unit>
        <trans-unit id="9ba8d07a9bc46aeb1c779fab12a8b4dd715ff170" translate="yes" xml:space="preserve">
          <source>Duplicates the given element &lt;code&gt;n&lt;/code&gt; times in a list.</source>
          <target state="translated">Дублирует данный элемент в списке &lt;code&gt;n&lt;/code&gt; раз.</target>
        </trans-unit>
        <trans-unit id="612d35050e691a1a2b9f22fe6b8f2fde9cb8f9d1" translate="yes" xml:space="preserve">
          <source>Dynamic dispatch</source>
          <target state="translated">Динамическое отправление</target>
        </trans-unit>
        <trans-unit id="edd7dafc098b4b13db6ad466bd4e821198c0337f" translate="yes" xml:space="preserve">
          <source>Dynamic names</source>
          <target state="translated">Динамические имена</target>
        </trans-unit>
        <trans-unit id="46d2782a295d697a8b9e27c2d91c25f66bfd854d" translate="yes" xml:space="preserve">
          <source>Dynamic supervisors</source>
          <target state="translated">Динамические руководители</target>
        </trans-unit>
        <trans-unit id="3aa9130077fcc44c7eb24ab3a909359998b572f0" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor</source>
          <target state="translated">DynamicSupervisor</target>
        </trans-unit>
        <trans-unit id="4981d257018e7d749e02934b79c0b6bdb94f8f95" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;Поведение&lt;/small&gt; DynamicSupervisor&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ba279830cac8f3b7ac440b34f16c258d525250e" translate="yes" xml:space="preserve">
          <source>Dynamically adds a child specification to &lt;code&gt;supervisor&lt;/code&gt; and starts that child.</source>
          <target state="translated">Динамически добавляет дочернюю спецификацию к &lt;code&gt;supervisor&lt;/code&gt; и запускает ее.</target>
        </trans-unit>
        <trans-unit id="887cf55c60fc1c9af6689bd5e2a2c3b3766133c3" translate="yes" xml:space="preserve">
          <source>Dynamically supervised tasks</source>
          <target state="translated">Динамически контролируемые задачи</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="5b16ec2483e166fe049f665c022763eabe66f30f" translate="yes" xml:space="preserve">
          <source>EEx</source>
          <target state="translated">EEx</target>
        </trans-unit>
        <trans-unit id="af3993684170f3f24c787f9d7ffb881775da9c68" translate="yes" xml:space="preserve">
          <source>EEx has the concept of engines which allows you to modify or transform the code extracted from the given string or file.</source>
          <target state="translated">В EEx есть концепция движков,которая позволяет модифицировать или преобразовывать код,извлеченный из заданной строки или файла.</target>
        </trans-unit>
        <trans-unit id="818fc332cfd248836c5442317677dfe04bdbbd73" translate="yes" xml:space="preserve">
          <source>EEx stands for Embedded Elixir. It allows you to embed Elixir code inside a string in a robust way.</source>
          <target state="translated">EEx означает встраиваемый эликсир.Он позволяет надежно встраивать код эликсира в строку.</target>
        </trans-unit>
        <trans-unit id="22a24f67ecb347cc9015ff6237454fdbf0669653" translate="yes" xml:space="preserve">
          <source>EEx.Engine &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">EEx. &lt;small&gt;Поведение&lt;/small&gt; двигателя&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eebf2acaee05e7c09c816457012d68bbfc96c6f3" translate="yes" xml:space="preserve">
          <source>EEx.SmartEngine</source>
          <target state="translated">EEx.SmartEngine</target>
        </trans-unit>
        <trans-unit id="674e9c18d21c34b87c83982cf9afa4d95159a4be" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError</source>
          <target state="translated">EEx.SyntaxError</target>
        </trans-unit>
        <trans-unit id="49bba56082c8e3c9fff304ab7864ed3cb3a25fb5" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">EEx.SyntaxError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98d18c239604c617df6f8788536838fd25d8c03d" translate="yes" xml:space="preserve">
          <source>EEx: &lt;code&gt;&amp;lt;%=&lt;/code&gt; in middle and end expressions</source>
          <target state="translated">EEx: &lt;code&gt;&amp;lt;%=&lt;/code&gt; в средних и конечных выражениях</target>
        </trans-unit>
        <trans-unit id="1b4d835a11a6493d1e10defe1536a05fda39d532" translate="yes" xml:space="preserve">
          <source>ELixir tracks three types of dependencies between modules: compile, exports, and runtime. If a module has a compile time dependency on another module, the caller module has to be recompiled whenever the callee changes. Compile-time dependencies are typically added when using macros or when invoking functions in the module body (outside of functions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eceb14d6ed554f3e39c3487db659c8d63e28acd" translate="yes" xml:space="preserve">
          <source>ETS</source>
          <target state="translated">ETS</target>
        </trans-unit>
        <trans-unit id="1500176ef8cc8bfbbaf08eb4c1316bcf890f3395" translate="yes" xml:space="preserve">
          <source>ETS (Erlang Term Storage)</source>
          <target state="translated">ETS (Erlang Term Storage)</target>
        </trans-unit>
        <trans-unit id="4f5a2cc3fa91eb59c67ada064593bcea69c5e3b4" translate="yes" xml:space="preserve">
          <source>ETS allows us to store any Elixir term in an in-memory table. Working with ETS tables is done via &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlang&amp;rsquo;s &lt;code&gt;:ets&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">ETS позволяет нам хранить любой термин Elixir в таблице в памяти. Работа с таблицами ETS осуществляется через &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;модуль &lt;/a&gt;Erlang &lt;code&gt;:ets&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8e8dd8378100a7f6cf535d73f581bb5835a296a0" translate="yes" xml:space="preserve">
          <source>ETS as a cache</source>
          <target state="translated">ETS в качестве кэша</target>
        </trans-unit>
        <trans-unit id="0c6b672feadc74b2fa303a786fd5682cec52505f" translate="yes" xml:space="preserve">
          <source>ETS lets you create a table containing tuples. By default, ETS tables are protected, which means only the owner process may write to the table but any other process can read. ETS has some functionality to allow a table to be used as a simple database, a key-value store or as a cache mechanism.</source>
          <target state="translated">ETS позволяет создать таблицу,содержащую кортежи.По умолчанию таблицы ETS защищены,что означает,что только процесс владельца может записывать в таблицу,но любой другой процесс может читать.ETS имеет некоторую функциональность,позволяющую использовать таблицу в качестве простой базы данных,хранилища значений ключей или в качестве механизма кэширования.</target>
        </trans-unit>
        <trans-unit id="52adb6284390fce5741221672f061e71df403d05" translate="yes" xml:space="preserve">
          <source>ETS tables can also be named, allowing us to access them by a given name:</source>
          <target state="translated">Таблицы ETS также могут иметь имена,что позволяет нам получать к ним доступ по заданному имени:</target>
        </trans-unit>
        <trans-unit id="362cea4d522d64f424e9ad3e438c8000b26fb5c9" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;enumerable&lt;/code&gt; element is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be linked to the current process, similarly to &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый &lt;code&gt;enumerable&lt;/code&gt; элемент передается в качестве аргумента данной функции &lt;code&gt;fun&lt;/code&gt; и обрабатывается ее собственной задачей. Задачи будут связаны с текущим процессом, аналогично &lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c70223b508f5fb20c656733438516d9c4a38e207" translate="yes" xml:space="preserve">
          <source>Each application has an environment that stores the application&amp;rsquo;s specific configuration by key. For example, we could store the routing table in the &lt;code&gt;:kv&lt;/code&gt; application environment, giving it a default value and allowing other applications to change the table as needed.</source>
          <target state="translated">Каждое приложение имеет среду, в которой по ключам хранится конкретная конфигурация приложения. Например, мы могли бы сохранить таблицу маршрутизации в среде приложения &lt;code&gt;:kv&lt;/code&gt; , присвоив ей значение по умолчанию и разрешив другим приложениям изменять таблицу по мере необходимости.</target>
        </trans-unit>
        <trans-unit id="3405035bc16c9169ba3e4eb3a0b15b99fd33b0e0" translate="yes" xml:space="preserve">
          <source>Each application has its own environment. The environment is a keyword list that maps atoms to terms. Note that this environment is unrelated to the operating system environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b77596010e1d94e168b64218473fa0c4476548" translate="yes" xml:space="preserve">
          <source>Each application in our system can be started and stopped. The rules for starting and stopping an application are also defined in the &lt;code&gt;.app&lt;/code&gt; file. When we invoke &lt;code&gt;iex -S mix&lt;/code&gt;, Mix compiles our application and then starts it.</source>
          <target state="translated">Каждое приложение в нашей системе можно запускать и останавливать. Правила запуска и остановки приложения также определены в файле &lt;code&gt;.app&lt;/code&gt; . Когда мы вызываем &lt;code&gt;iex -S mix&lt;/code&gt; , Mix компилирует наше приложение, а затем запускает его.</target>
        </trans-unit>
        <trans-unit id="6ee7cee4e35c13e97e0b113c7ad93de2b2e9f9ff" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/2&quot;&gt;&lt;code&gt;async/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый элемент в &lt;code&gt;enumerable&lt;/code&gt; передается в качестве аргумента данной функции &lt;code&gt;fun&lt;/code&gt; и обрабатывается ее собственной задачей. Задачи будут созданы под данным &lt;code&gt;supervisor&lt;/code&gt; и связаны с текущим процессом, аналогично &lt;a href=&quot;#async/2&quot;&gt; &lt;code&gt;async/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0bff2b054449ef93f88ae378fceaa7c3773b512d" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый элемент в &lt;code&gt;enumerable&lt;/code&gt; передается в качестве аргумента данной функции &lt;code&gt;fun&lt;/code&gt; и обрабатывается ее собственной задачей. Задачи будут созданы под данным &lt;code&gt;supervisor&lt;/code&gt; и не будут связаны с текущим процессом, как и &lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f8ff31374c6e0e1792073cfd7bf59921a2ee8196" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/4&quot;&gt;&lt;code&gt;async_nolink/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый элемент в &lt;code&gt;enumerable&lt;/code&gt; будет добавлен к заданным &lt;code&gt;args&lt;/code&gt; и обработан своей собственной задачей. Задачи будут созданы под данным &lt;code&gt;supervisor&lt;/code&gt; и не будут связаны с текущим процессом, как и в &lt;a href=&quot;#async_nolink/4&quot;&gt; &lt;code&gt;async_nolink/4&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3e074b39ec3a1ed372a909c0a3201829b19421e8" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be linked to an intermediate process that is then linked to the current process. This means a failure in a task terminates the current process and a failure in the current process terminates all tasks.</source>
          <target state="translated">Каждый элемент &lt;code&gt;enumerable&lt;/code&gt; будет добавлен к заданным &lt;code&gt;args&lt;/code&gt; и обработан его собственной задачей. Задачи будут связаны с промежуточным процессом, который затем будет связан с текущим процессом. Это означает, что сбой в задаче завершает текущий процесс, а сбой в текущем процессе завершает все задачи.</target>
        </trans-unit>
        <trans-unit id="ea81b39bec07b5eca51e7cb8e73b08cc88b185e5" translate="yes" xml:space="preserve">
          <source>Each element will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/4&quot;&gt;&lt;code&gt;async/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый элемент будет добавлен к заданным &lt;code&gt;args&lt;/code&gt; и обработан своей собственной задачей. Задачи будут созданы под данным &lt;code&gt;supervisor&lt;/code&gt; и связаны с текущим процессом, аналогично &lt;a href=&quot;#async/4&quot;&gt; &lt;code&gt;async/4&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d6a3bdb3211b725603f1e420065f9f512a455e5f" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77459e85ee4402d66fd92ef0b7844cafe8faeccd" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Каждая запись в реестре связана с процессом, зарегистрировавшим ключ. В случае сбоя процесса ключи, связанные с этим процессом, автоматически удаляются. Все сравнения ключей в реестре выполняются с помощью операции сопоставления ( &lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f51dcc2b38618bcc3fe87f6cb31bfc9d58a91577" translate="yes" xml:space="preserve">
          <source>Each item in the list is a map with the following keys:</source>
          <target state="translated">Каждый пункт списка представляет собой карту со следующими клавишами:</target>
        </trans-unit>
        <trans-unit id="532f0099dc0a59c8142722d964bd46289ef70cfc" translate="yes" xml:space="preserve">
          <source>Each key-value pair in the map is converted to a two-element tuple &lt;code&gt;{key, value}&lt;/code&gt; in the resulting list.</source>
          <target state="translated">Каждая пара &quot;ключ-значение&quot; на карте преобразуется в двухэлементный кортеж &lt;code&gt;{key, value}&lt;/code&gt; в результирующем списке.</target>
        </trans-unit>
        <trans-unit id="4934170f741619738531430df9405d17c3b39b24" translate="yes" xml:space="preserve">
          <source>Each module can be decorated with one or more attributes. The following ones are currently defined by Elixir:</source>
          <target state="translated">Каждый модуль может быть украшен одним или несколькими атрибутами.Следующие атрибуты в настоящее время определены Elixir:</target>
        </trans-unit>
        <trans-unit id="9ac8e172618067a3e6bc12be54b49bfe15535ac3" translate="yes" xml:space="preserve">
          <source>Each module gets an &lt;code&gt;__info__/1&lt;/code&gt; function when it's compiled. The function takes one of the following items:</source>
          <target state="translated">Каждый модуль при &lt;code&gt;__info__/1&lt;/code&gt; получает функцию __info __ / 1 . Функция принимает один из следующих элементов:</target>
        </trans-unit>
        <trans-unit id="e4ebc93808a7013b1682e04607e3d5c0727d33dc" translate="yes" xml:space="preserve">
          <source>Each number given to a binary is meant to represent a byte and therefore must go up to 255. Binaries allow modifiers to be given to store numbers bigger than 255 or to convert a code point to its UTF-8 representation:</source>
          <target state="translated">Каждое число,присваиваемое двоичному файлу,должно представлять байт и,следовательно,должно доходить до 255.Бинарные файлы позволяют задавать модификаторы для хранения чисел больше 255 или преобразовывать точку кода в ее UTF-8 представление:</target>
        </trans-unit>
        <trans-unit id="86d9329e1ed2a43e214726a374900569c7bc6fae" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;https://hexdocs.pm/elixir/DynamicSupervisor.html&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372725c1f82abeb98e09b054fcea454db1d9af25" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Каждый процесс, запущенный с приложением, должен быть указан как дочерний под вышеприведенным &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; . Мы называем эти &amp;laquo;статические процессы&amp;raquo;, потому что они известны заранее. Для обработки динамических процессов, таких как те, которые запускаются во время запросов и других пользовательских вводов, посмотрите модуль &lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b076bdb70baef474140c948c212f1de89050946f" translate="yes" xml:space="preserve">
          <source>Each registered SCM will be asked if they consume this dependency, receiving &lt;code&gt;[github: &quot;foo/bar&quot;]&lt;/code&gt; as argument. Since this option makes sense for the Git SCM, it will return an update list of options while other SCMs would simply return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c52364e96da340fb31c3249f2e8693baeb5686f" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a597396bbd78d869061e9cc988eca475a9257e" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;mix.tasks.help&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="translated">У каждой задачи есть свои параметры, а иногда и конкретная конфигурация, которую нужно определить в функции &lt;code&gt;project/0&lt;/code&gt; . Вы можете использовать &lt;a href=&quot;mix.tasks.help&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt; чтобы перечислить все доступные задачи, и &lt;code&gt;mix help NAME&lt;/code&gt; чтобы показать справку по конкретной задаче.</target>
        </trans-unit>
        <trans-unit id="bcac1b6f9d120c9722086c7e508489b0226da684" translate="yes" xml:space="preserve">
          <source>Each variable is identified by a tuple of two elements, where the first element is the variable name as an atom and the second element is its context, which may be an atom or an integer.</source>
          <target state="translated">Каждая переменная идентифицируется кортежом из двух элементов,где первый элемент-имя переменной как атом,а второй-ее контекст,который может быть атомом или целым числом.</target>
        </trans-unit>
        <trans-unit id="68310c7d97bd5e9d47967e9e9edcb285e94d70ff" translate="yes" xml:space="preserve">
          <source>Eager to learn more? Keep reading!</source>
          <target state="translated">Хочешь узнать больше? Продолжайте читать!</target>
        </trans-unit>
        <trans-unit id="773015863b8b24712e29c53fe98994b9728f6381" translate="yes" xml:space="preserve">
          <source>Eager vs Lazy</source>
          <target state="translated">Eager vs Lazy</target>
        </trans-unit>
        <trans-unit id="28ac06af2cb7839cf14f9821c41dfad421032a0a" translate="yes" xml:space="preserve">
          <source>Echo server</source>
          <target state="translated">сервер Эхо</target>
        </trans-unit>
        <trans-unit id="eeccb169551120a3e6a633e63e844185e028c154" translate="yes" xml:space="preserve">
          <source>Edit the file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt;, filling in the blanks for the client API:</source>
          <target state="translated">Отредактируйте файл по адресу &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; , заполнив пробелы для клиентского API:</target>
        </trans-unit>
        <trans-unit id="ddd5726bf13c26ce5252aef42e6ba8f0c851bd53" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25857c2157bff6e7a9f798c89b04873173125f2d" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Элементы сравниваются с помощью &lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b1bc7fb1f226e6f6f3ef7ee47c49d49289229118" translate="yes" xml:space="preserve">
          <source>Elements are only emitted when &lt;code&gt;fun&lt;/code&gt; returns a new value or the &lt;code&gt;enum&lt;/code&gt; finishes.</source>
          <target state="translated">Элементы испускаются только тогда, когда &lt;code&gt;fun&lt;/code&gt; возвращает новое значение или завершается &lt;code&gt;enum&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a38ddcfce78b5b0835df229de1f7e325877919bd" translate="yes" xml:space="preserve">
          <source>Elements can be inserted using &lt;a href=&quot;#put/2&quot;&gt;&lt;code&gt;MapSet.put/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9167aadfec3df02db420d4d2b50af0ffd51604f5" translate="yes" xml:space="preserve">
          <source>Elements in a set don't have to be of the same type and they can be populated from an &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html#t:t/0&quot;&gt;enumerable&lt;/a&gt; using &lt;a href=&quot;#new/1&quot;&gt;&lt;code&gt;MapSet.new/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c7bf14304705b88f3bf9ecdfcf919293c76e53" translate="yes" xml:space="preserve">
          <source>Elixir</source>
          <target state="translated">Elixir</target>
        </trans-unit>
        <trans-unit id="e5c4daa79e73a93f8dc527746d72ef1e1f99e8dd" translate="yes" xml:space="preserve">
          <source>Elixir 1.5.0 onwards</source>
          <target state="translated">Эликсир 1.5.0 дальше</target>
        </trans-unit>
        <trans-unit id="67dd209de0ff8f0eac333c13b028cb684c348812" translate="yes" xml:space="preserve">
          <source>Elixir 1.9.0 onwards</source>
          <target state="translated">Эликсир 1.9.0 вперёд.</target>
        </trans-unit>
        <trans-unit id="bff9443fa7cf4ae0bab8d5c8f1f4dab57c2d5acf" translate="yes" xml:space="preserve">
          <source>Elixir Forum</source>
          <target state="translated">Эликсирный форум</target>
        </trans-unit>
        <trans-unit id="de61752fa33c065b078b47c60fdefbfedf94b579" translate="yes" xml:space="preserve">
          <source>Elixir allows developers to attach arbitrary metadata to the documentation. This is done by passing a keyword list to the relevant attribute (such as &lt;code&gt;@moduledoc&lt;/code&gt;, &lt;code&gt;@typedoc&lt;/code&gt;, and &lt;code&gt;@doc&lt;/code&gt;). A commonly used metadata is &lt;code&gt;:since&lt;/code&gt;, which annotates in which version that particular module, function, type, or callback was added, as shown in the example above.</source>
          <target state="translated">Elixir позволяет разработчикам прикреплять к документации произвольные метаданные. Это делается путем передачи списка ключевых слов в соответствующий атрибут (например, &lt;code&gt;@moduledoc&lt;/code&gt; , &lt;code&gt;@typedoc&lt;/code&gt; и &lt;code&gt;@doc&lt;/code&gt; ). Обычно используемые метаданные &lt;code&gt;:since&lt;/code&gt; , которые указывают, в какой версии был добавлен конкретный модуль, функция, тип или обратный вызов, как показано в примере выше.</target>
        </trans-unit>
        <trans-unit id="3c0ee4efd422df64d926e1699ce27c5bdf0b25e6" translate="yes" xml:space="preserve">
          <source>Elixir allows integers to contain &lt;code&gt;_&lt;/code&gt; to separate digits and provides conveniences to represent integers in other bases:</source>
          <target state="translated">Elixir позволяет целым числам содержать &lt;code&gt;_&lt;/code&gt; для разделения цифр и обеспечивает удобство представления целых чисел в других основаниях:</target>
        </trans-unit>
        <trans-unit id="f75c26877ef871217ff6769618e4b459e83b4aa9" translate="yes" xml:space="preserve">
          <source>Elixir allows us to derive a protocol implementation based on the &lt;code&gt;Any&lt;/code&gt; implementation. Let&amp;rsquo;s first implement &lt;code&gt;Any&lt;/code&gt; as follows:</source>
          <target state="translated">Elixir позволяет нам получить реализацию протокола на основе реализации &lt;code&gt;Any&lt;/code&gt; . Давайте сначала реализуем &lt;code&gt;Any&lt;/code&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="83c382416abbdb750f7a0b52274c72d3eeffa512" translate="yes" xml:space="preserve">
          <source>Elixir allows variables to be rebound via static single assignment:</source>
          <target state="translated">Эликсир допускает отскок переменных через статическое одиночное присваивание:</target>
        </trans-unit>
        <trans-unit id="0e0d77b67e657e2b9066c1ff6972927494c31617" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">Эликсир позволяет пропускать ведущие &lt;code&gt;:&lt;/code&gt; для атомов &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;true&lt;/code&gt; и &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="413742c1494e68731a98eab50395aa0ab07b3d83" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ff842a6a4a3cf98a11fae4fd4498e3695c470e" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code.&lt;/strong&gt;</source>
          <target state="translated">Elixir уже предоставляет механизмы для написания вашего повседневного кода в простой и удобочитаемой форме, используя свои структуры данных и функции. Макросы следует использовать только в крайнем случае. Помните, что &lt;strong&gt;явное лучше, чем неявное&lt;/strong&gt; . &lt;strong&gt;Четкий код лучше краткого.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3c84bd869e800cf00a0f15faeb1fec6f09ff020" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code&lt;/strong&gt;.</source>
          <target state="translated">Elixir уже предоставляет механизмы для написания вашего повседневного кода в простой и удобочитаемой форме, используя свои структуры данных и функции. Макросы следует использовать только в крайнем случае. Помните, что &lt;strong&gt;явное лучше, чем неявное&lt;/strong&gt; . &lt;strong&gt;Четкий код лучше краткого&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="04d508ddfa3159bfde64248d0cbc115d950cb551" translate="yes" xml:space="preserve">
          <source>Elixir also accepts by default the segment to be a literal string or a literal charlist, which are by default expanded to integers:</source>
          <target state="translated">Эликсир также принимает по умолчанию сегмент как строку или символ литерала,которые по умолчанию расширены до целых чисел:</target>
        </trans-unit>
        <trans-unit id="738cbc7a97733fcad20b5d4c9dce828da97453d5" translate="yes" xml:space="preserve">
          <source>Elixir also allows developers to enforce certain keys must always be given when building the struct:</source>
          <target state="translated">Эликсир также позволяет разработчикам применять определенные ключи,которые всегда должны быть даны при построении структуры:</target>
        </trans-unit>
        <trans-unit id="b2aeb44fb689a73ee1106300bdf2d7f03241fd14" translate="yes" xml:space="preserve">
          <source>Elixir also contains an &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; function that is a superset of &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Эликсир также содержит функцию &lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt; которая является надмножеством &lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1ca22ed394bb9b18d990dbe14484b3d50b19e9ce" translate="yes" xml:space="preserve">
          <source>Elixir also has special forms that are always imported and cannot be skipped. These are described in &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html&quot;&gt;&lt;code&gt;Kernel.SpecialForms&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bac89af66dd6a427b4aa3efe3deb03cf5a1fe14" translate="yes" xml:space="preserve">
          <source>Elixir also has special forms that are always imported and cannot be skipped. These are described in &lt;a href=&quot;kernel.specialforms&quot;&gt;&lt;code&gt;Kernel.SpecialForms&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Эликсир также имеет специальные формы, которые всегда импортируются и не могут быть пропущены. Они описаны в &lt;a href=&quot;kernel.specialforms&quot;&gt; &lt;code&gt;Kernel.SpecialForms&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d27fae45dd0d77eb7585ffc475445da313d3682e" translate="yes" xml:space="preserve">
          <source>Elixir also includes five special forms that follow the double underscore format: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;and &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt; retrieve compile-time information about the current environment, while &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; retrieves the stacktrace for the current exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6faa91bfb900d671613a6ab47e73da0ae09fa34" translate="yes" xml:space="preserve">
          <source>Elixir also includes five special forms that follow the double underscore format: &lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;and &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt; retrieve compile-time information about the current environment, while &lt;a href=&quot;kernel.specialforms#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; retrieves the stacktrace for the current exception.</source>
          <target state="translated">Elixir также включает пять специальных форм, которые следуют формату двойного подчеркивания: &lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt; информацию о текущей среде во время &lt;a href=&quot;kernel.specialforms#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt; , а __STACKTRACE __ / 0 извлекает трассировку стека для текущего исключения.</target>
        </trans-unit>
        <trans-unit id="243375bae75a446726d90d677eb7c983b489e516" translate="yes" xml:space="preserve">
          <source>Elixir also leverages pattern matching and guards in function clauses to provide clear error messages in case invalid arguments are given.</source>
          <target state="translated">Elixir также использует сопоставление шаблонов и защитные элементы в функциональных клаузулах для обеспечения четких сообщений об ошибках в случае предоставления недействительных аргументов.</target>
        </trans-unit>
        <trans-unit id="e898bf471d8f0d3097ac913073c090b0a995d7eb" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; to manipulate lists:</source>
          <target state="translated">Elixir также предоставляет &lt;code&gt;++&lt;/code&gt; и &lt;code&gt;--&lt;/code&gt; для управления списками:</target>
        </trans-unit>
        <trans-unit id="ac31c787a75befbe1897dbbb6fdd942221f00c86" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!==&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; as comparison operators:</source>
          <target state="translated">Эликсир также &lt;code&gt;==&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; , &lt;code&gt;===&lt;/code&gt; , &lt;code&gt;!==&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; И &lt;code&gt;&amp;gt;&lt;/code&gt; как операторы сравнения:</target>
        </trans-unit>
        <trans-unit id="969c208849fcc11446141a26b255b57b75a2b0ba" translate="yes" xml:space="preserve">
          <source>Elixir also provides &lt;code&gt;Port&lt;/code&gt;, &lt;code&gt;Reference&lt;/code&gt;, and &lt;code&gt;PID&lt;/code&gt; as data types (usually used in process communication), and we will take a quick look at them when talking about processes. For now, let&amp;rsquo;s take a look at some of the basic operators that go with our basic types.</source>
          <target state="translated">Elixir также предоставляет &lt;code&gt;Port&lt;/code&gt; , &lt;code&gt;Reference&lt;/code&gt; и &lt;code&gt;PID&lt;/code&gt; в качестве типов данных (обычно используемых при взаимодействии процессов), и мы кратко рассмотрим их, когда будем говорить о процессах. А пока давайте взглянем на некоторые из основных операторов, которые используются в наших основных типах.</target>
        </trans-unit>
        <trans-unit id="dd8a8082108a2f1897c7e7583cc32113fdc162fe" translate="yes" xml:space="preserve">
          <source>Elixir also provides anonymous functions. Anonymous functions allow us to store and pass executable code around as if it was an integer or a string. They are delimited by the keywords &lt;code&gt;fn&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;:</source>
          <target state="translated">Эликсир также предоставляет анонимные функции. Анонимные функции позволяют нам хранить и передавать исполняемый код, как если бы он был целым числом или строкой. Они разделяются ключевыми словами &lt;code&gt;fn&lt;/code&gt; и &lt;code&gt;end&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f6f4bfc221320e14428c9be4379f06c74f568d51" translate="yes" xml:space="preserve">
          <source>Elixir also provides other data types that are built on top of the types listed above. Some of them are:</source>
          <target state="translated">Elixir также предоставляет другие типы данных,которые построены на основе вышеперечисленных типов.Некоторые из них:</target>
        </trans-unit>
        <trans-unit id="9cf0686be60034d3cedafe5362a85407c3741f2a" translate="yes" xml:space="preserve">
          <source>Elixir also provides ranges:</source>
          <target state="translated">Эликсир также предоставляет ассортимент:</target>
        </trans-unit>
        <trans-unit id="5fcce84b0f48ff34d06fe32176864fe647eb61ef" translate="yes" xml:space="preserve">
          <source>Elixir also provides three boolean operators: &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt;. These operators are strict in the sense that they expect something that evaluates to a boolean (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) as their first argument:</source>
          <target state="translated">Эликсир также обеспечивает три логических операторов: &lt;code&gt;or&lt;/code&gt; , &lt;code&gt;and&lt;/code&gt; и &lt;code&gt;not&lt;/code&gt; . Эти операторы являются строгими в том смысле, что они ожидают в качестве первого аргумента чего-то, что оценивается как логическое ( &lt;code&gt;true&lt;/code&gt; или &lt;code&gt;false&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="8d3fab2e2b3e4ed4bda1748059118a3b75cf1e13" translate="yes" xml:space="preserve">
          <source>Elixir also supports &lt;code&gt;left not in right&lt;/code&gt;, which evaluates to &lt;code&gt;not(left in right)&lt;/code&gt;:</source>
          <target state="translated">Elixir также поддерживает &lt;code&gt;left not in right&lt;/code&gt; , что оценивается как &lt;code&gt;not(left in right)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5a36737e425de601f0dbbe73bf7e68eed9cd0ed3" translate="yes" xml:space="preserve">
          <source>Elixir also supports Unicode in identifiers since Elixir v1.5, as defined in the &lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;Unicode Annex #31&lt;/a&gt;. The focus of this document is to describe how Elixir implements the requirements outlined in the Unicode Annex. These requirements are referred to as R1, R6 and so on.</source>
          <target state="translated">Elixir также поддерживает Unicode в идентификаторах, начиная с Elixir v1.5, как определено в &lt;a href=&quot;https://unicode.org/reports/tr31/&quot;&gt;Приложении № 31&lt;/a&gt; к Unicode . Цель этого документа - описать, как Elixir реализует требования, изложенные в Приложении Unicode. Эти требования обозначаются как R1, R6 и так далее.</target>
        </trans-unit>
        <trans-unit id="831831bd1adbcc4e3da08a8f57e2923a4e93799a" translate="yes" xml:space="preserve">
          <source>Elixir also supports a syntax where if the last argument of a call is a keyword list then the square brackets can be skipped. This means that the following:</source>
          <target state="translated">Elixir также поддерживает синтаксис,в котором,если последним аргументом вызова является список ключевых слов,то квадратные скобки можно пропустить.Это означает следующее:</target>
        </trans-unit>
        <trans-unit id="e5d64f0301ab6ac559b63f1c82cbf0dfd37dce82" translate="yes" xml:space="preserve">
          <source>Elixir also supports formatting Erlang reports using Elixir syntax. This can be controlled with two configurations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de5cd58455d962f06640f299cca5e324e9a622" translate="yes" xml:space="preserve">
          <source>Elixir also supports private macros via &lt;code&gt;defmacrop&lt;/code&gt;. As private functions, these macros are only available inside the module that defines them, and only at compilation time.</source>
          <target state="translated">Elixir также поддерживает частные макросы через &lt;code&gt;defmacrop&lt;/code&gt; . Как частные функции, эти макросы доступны только внутри модуля, который их определяет, и только во время компиляции.</target>
        </trans-unit>
        <trans-unit id="f11824c210053777bec7ddf3a89c32be210d45f2" translate="yes" xml:space="preserve">
          <source>Elixir also supports shortcut notations for entering binary, octal, and hexadecimal numbers:</source>
          <target state="translated">Эликсир также поддерживает быстрые нотации для ввода двоичных,восьмеричных и шестнадцатеричных чисел:</target>
        </trans-unit>
        <trans-unit id="6b48fb3c07925bbce80ec4c8c677ff0705ab892b" translate="yes" xml:space="preserve">
          <source>Elixir also supports string interpolation:</source>
          <target state="translated">Эликсир также поддерживает строковую интерполяцию:</target>
        </trans-unit>
        <trans-unit id="f27c2220090ae1ef4a23c356a5a485deee8ca35d" translate="yes" xml:space="preserve">
          <source>Elixir applies bug fixes only to the latest minor branch. Security patches are available for the last 5 minor branches:</source>
          <target state="translated">Elixir применяет исправления ошибок только к последней младшей ветке.Исправления безопасности доступны для последних 5 минорных ветвей:</target>
        </trans-unit>
        <trans-unit id="cda5c07ad4a993425301fa7396f1616f92211ddb" translate="yes" xml:space="preserve">
          <source>Elixir backends can be configured directly under the &lt;code&gt;:logger&lt;/code&gt; application in your &lt;code&gt;config/config.exs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e561bb8baee392958755d80698909955398d5251" translate="yes" xml:space="preserve">
          <source>Elixir backends run in a separate process which comes with overload protection. However, because this process is a single GenEvent, any long running action should be avoided, as it can lead to bottlenecks in the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1480fcb21427da507d41fe00e9730d3102cc1601" translate="yes" xml:space="preserve">
          <source>Elixir brings the concept of module attributes from Erlang. For example:</source>
          <target state="translated">Эликсир привносит концепцию атрибутов модуля из Эрланга.Например:</target>
        </trans-unit>
        <trans-unit id="f52903a1f8e7fe32784dca96bfb06586e6419189" translate="yes" xml:space="preserve">
          <source>Elixir build information.</source>
          <target state="translated">Эликсир строит информацию.</target>
        </trans-unit>
        <trans-unit id="b2a6e08225deb1351d7c526d4a6fc2d20b9e7df8" translate="yes" xml:space="preserve">
          <source>Elixir comes with a notation for declaring types and specifications. Elixir is a dynamically typed language, and as such, type specifications are never used by the compiler to optimize or modify code. Still, using type specifications is useful because:</source>
          <target state="translated">Эликсир поставляется с нотацией для декларирования типов и спецификаций.Elixir-это динамически типизированный язык,и поэтому спецификации типов никогда не используются компилятором для оптимизации или модификации кода.Тем не менее,использование спецификаций типов является полезным,потому что:</target>
        </trans-unit>
        <trans-unit id="93e98cb33410c274eb01c0b51b9f879f209f597d" translate="yes" xml:space="preserve">
          <source>Elixir converts switches to underscored atoms, so &lt;code&gt;--source-path&lt;/code&gt; becomes &lt;code&gt;:source_path&lt;/code&gt;. This is done to better suit Elixir conventions. However, this means that switches can't contain underscores and switches that do contain underscores are always returned in the list of invalid switches.</source>
          <target state="translated">Elixir преобразует переключатели в подчеркнутые атомы, поэтому &lt;code&gt;--source-path&lt;/code&gt; становится &lt;code&gt;:source_path&lt;/code&gt; . Это сделано, чтобы лучше соответствовать правилам Elixir. Однако это означает, что переключатели не могут содержать подчеркивания, а переключатели, которые действительно содержат подчеркивания, всегда возвращаются в списке недопустимых переключателей.</target>
        </trans-unit>
        <trans-unit id="0c34f7340cb61df5785bd5c3a3996417777eeba7" translate="yes" xml:space="preserve">
          <source>Elixir custom backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515cdde695b80400042e85d03697fe8c3de3f321" translate="yes" xml:space="preserve">
          <source>Elixir deprecations happen in 3 steps:</source>
          <target state="translated">Эликсирные депрессии происходят в 3 этапа:</target>
        </trans-unit>
        <trans-unit id="408fc2d27b6f9604c990c32c8ff3bc032eba3849" translate="yes" xml:space="preserve">
          <source>Elixir developers must use &lt;code&gt;snake_case&lt;/code&gt; when defining variables, function names, module attributes, and the like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea52283db054d97df43a259e29d9ebc73278a8f" translate="yes" xml:space="preserve">
          <source>Elixir developers must use &lt;code&gt;snake_case&lt;/code&gt; when defining variables, function names, module attributes, etc.:</source>
          <target state="translated">Разработчики Elixir должны использовать &lt;code&gt;snake_case&lt;/code&gt; при определении переменных, имен функций, атрибутов модулей и т. Д .:</target>
        </trans-unit>
        <trans-unit id="3fdde18bd0e2fa1e6f5b249dcbd96934a496c8e2" translate="yes" xml:space="preserve">
          <source>Elixir developers often use module attributes when they wish to make a value more visible or reusable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67460a48d2b2975fa71d28207c9deda3618cb78d" translate="yes" xml:space="preserve">
          <source>Elixir developers typically prefer to use the &lt;code&gt;map.field&lt;/code&gt; syntax and pattern matching instead of the functions in the &lt;code&gt;Map&lt;/code&gt; module when working with maps because they lead to an assertive style of programming. &lt;a href=&quot;http://blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/&quot;&gt;This blog post&lt;/a&gt; provides insight and examples on how you get more concise and faster software by writing assertive code in Elixir.</source>
          <target state="translated">Разработчики Elixir обычно предпочитают использовать синтаксис &lt;code&gt;map.field&lt;/code&gt; и сопоставление с образцом вместо функций в модуле &lt;code&gt;Map&lt;/code&gt; при работе с картами, потому что они приводят к напористому стилю программирования. &lt;a href=&quot;http://blog.plataformatec.com.br/2014/09/writing-assertive-code-with-elixir/&quot;&gt;В этом сообщении блога&lt;/a&gt; представлены идеи и примеры того, как получить более краткое и быстрое программное обеспечение, написав напористый код в Elixir.</target>
        </trans-unit>
        <trans-unit id="a06f21bbf8d0fbad80b3654800782c5ec40cbcc7" translate="yes" xml:space="preserve">
          <source>Elixir developers typically prefer to use the &lt;code&gt;map.field&lt;/code&gt; syntax and pattern matching instead of the functions in the &lt;code&gt;Map&lt;/code&gt; module when working with maps because they lead to an assertive style of programming. &lt;a href=&quot;https://dashbit.co/blog/writing-assertive-code-with-elixir&quot;&gt;This blog post by Jos&amp;eacute; Valim&lt;/a&gt; provides insight and examples on how you get more concise and faster software by writing assertive code in Elixir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ccd31147a48e978a78387a61b5eaefec5c15c1" translate="yes" xml:space="preserve">
          <source>Elixir developers will often use module attributes as constants:</source>
          <target state="translated">Разработчики Elixir часто будут использовать атрибуты модуля в качестве констант:</target>
        </trans-unit>
        <trans-unit id="7edf337af4809fac0491b9f969182b600dc4a216" translate="yes" xml:space="preserve">
          <source>Elixir discourages the use of the &lt;code&gt;string()&lt;/code&gt; type. The &lt;code&gt;string()&lt;/code&gt; type refers to Erlang strings, which are known as &quot;charlists&quot; in Elixir. They do not refer to Elixir strings, which are UTF-8 encoded binaries. To avoid confusion, if you attempt to use the type &lt;code&gt;string()&lt;/code&gt;, Elixir will emit a warning. You should use &lt;code&gt;charlist()&lt;/code&gt;, &lt;code&gt;nonempty_charlist()&lt;/code&gt;, &lt;code&gt;binary()&lt;/code&gt; or &lt;code&gt;String.t()&lt;/code&gt; accordingly, or any of the several literal representations for these types.</source>
          <target state="translated">Elixir не рекомендует использовать тип &lt;code&gt;string()&lt;/code&gt; . Тип &lt;code&gt;string()&lt;/code&gt; относится к строкам Erlang, которые в Elixir известны как &amp;laquo;списки символов&amp;raquo;. Они не относятся к строкам Elixir, которые представляют собой двоичные файлы в кодировке UTF-8. Чтобы избежать путаницы, если вы попытаетесь использовать &lt;code&gt;string()&lt;/code&gt; типа () , Elixir выдаст предупреждение. Вы должны использовать &lt;code&gt;charlist()&lt;/code&gt; , &lt;code&gt;nonempty_charlist()&lt;/code&gt; , &lt;code&gt;binary()&lt;/code&gt; или &lt;code&gt;String.t()&lt;/code&gt; соответственно, или любой из нескольких буквальных представлений для этих типов.</target>
        </trans-unit>
        <trans-unit id="d6df36f3b70e0d4fb5ddb48d10dbf25423b1cc5a" translate="yes" xml:space="preserve">
          <source>Elixir documentation also includes supporting documents under the &quot;Pages&quot; section. Those are:</source>
          <target state="translated">Документация Elixir также включает сопроводительные документы в разделе &quot;Страницы&quot;.Ими являются:</target>
        </trans-unit>
        <trans-unit id="dfbdabad266a6ed24abe7282e3054447cc34c95a" translate="yes" xml:space="preserve">
          <source>Elixir documentation is written using Markdown. There are plenty of guides on Markdown online, we recommend the ones available at GitHub as a getting started point:</source>
          <target state="translated">Документация на эликсир написана с использованием Markdown.В Markdown есть много руководств онлайн,мы рекомендуем те,которые доступны на GitHub в качестве отправной точки:</target>
        </trans-unit>
        <trans-unit id="b8ad464d7c3f98c28d6c1301d748b4474f625349" translate="yes" xml:space="preserve">
          <source>Elixir does not allow the use of ZWJ or ZWNJ in identifiers and therefore does not implement R1a. R1b is guaranteed for backwards compatibility purposes.</source>
          <target state="translated">Elixir не позволяет использовать ZWJ или ZWNJ в идентификаторах и поэтому не реализует R1a.R1b гарантируется для целей обратной совместимости.</target>
        </trans-unit>
        <trans-unit id="d746cd61df3db6f2fe47fafb3741869cc1431ba6" translate="yes" xml:space="preserve">
          <source>Elixir does not contain a function similar to &lt;code&gt;printf&lt;/code&gt; found in C and other languages. Luckily, the Erlang standard library functions &lt;code&gt;:io.format/2&lt;/code&gt; and &lt;code&gt;:io_lib.format/2&lt;/code&gt; may be used. The first formats to terminal output, while the second formats to an iolist. The format specifiers differ from &lt;code&gt;printf&lt;/code&gt;, &lt;a href=&quot;http://erlang.org/doc/man/io.html#format-1&quot;&gt;refer to the Erlang documentation for details&lt;/a&gt;.</source>
          <target state="translated">Эликсир не содержит функции, подобной &lt;code&gt;printf&lt;/code&gt; , найденной в C и других языках. К счастью, можно использовать стандартные библиотечные функции Erlang &lt;code&gt;:io.format/2&lt;/code&gt; и &lt;code&gt;:io_lib.format/2&lt;/code&gt; . Первый форматирует вывод на терминал, а второй форматирует в iolist. Спецификаторы формата отличаются от &lt;code&gt;printf&lt;/code&gt; , &lt;a href=&quot;http://erlang.org/doc/man/io.html#format-1&quot;&gt;подробности см&lt;/a&gt; . В документации Erlang .</target>
        </trans-unit>
        <trans-unit id="979dd9d85c61d8b521a5dc2ef6b2263883c16c08" translate="yes" xml:space="preserve">
          <source>Elixir has a handful of reserved attributes. Here are a few of them, the most commonly used ones:</source>
          <target state="translated">Эликсир имеет несколько зарезервированных атрибутов.Вот несколько из них,наиболее часто используемых:</target>
        </trans-unit>
        <trans-unit id="da143eaa5f18150282df48049071c1cc1a0e242a" translate="yes" xml:space="preserve">
          <source>Elixir has functions, like &lt;a href=&quot;#and/2&quot;&gt;&lt;code&gt;and/2&lt;/code&gt;&lt;/a&gt;, that &lt;em&gt;only&lt;/em&gt; work with booleans, but also functions that work with these truthy/falsy values, like &lt;a href=&quot;#&amp;amp;&amp;amp;/2&quot;&gt;&lt;code&gt;&amp;amp;&amp;amp;/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#!/1&quot;&gt;&lt;code&gt;!/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">В Elixir есть функции, такие как &lt;a href=&quot;#and/2&quot;&gt; &lt;code&gt;and/2&lt;/code&gt; &lt;/a&gt; , которые работают &lt;em&gt;только&lt;/em&gt; с логическими значениями, но также есть функции, которые работают с этими истинными / ложными значениями, например &lt;a href=&quot;#&amp;amp;&amp;amp;/2&quot;&gt; &lt;code&gt;&amp;amp;&amp;amp;/2&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#!/1&quot;&gt; &lt;code&gt;!/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="88f2b25faa45986049480c976c00dd5855a6e36c" translate="yes" xml:space="preserve">
          <source>Elixir has three error mechanisms: errors, throws, and exits. In this chapter, we will explore each of them and include remarks about when each should be used.</source>
          <target state="translated">Эликсир имеет три механизма ошибок:ошибки,бросы и выходы.В этой главе мы рассмотрим каждый из них и включим замечания о том,когда каждый из них должен быть использован.</target>
        </trans-unit>
        <trans-unit id="0713d95ea58614452d3bd4a78be0cb70359f5d00" translate="yes" xml:space="preserve">
          <source>Elixir has three options for endianness: &lt;code&gt;big&lt;/code&gt;, &lt;code&gt;little&lt;/code&gt;, and &lt;code&gt;native&lt;/code&gt;. The default is &lt;code&gt;big&lt;/code&gt;:</source>
          <target state="translated">В Elixir есть три варианта порядка байтов: &lt;code&gt;big&lt;/code&gt; , &lt;code&gt;little&lt;/code&gt; и &lt;code&gt;native&lt;/code&gt; . По умолчанию &lt;code&gt;big&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fe30cf194fcc420b9fc8698a6260db192b62dfe9" translate="yes" xml:space="preserve">
          <source>Elixir has two syntaxes for function calls. With parens and no parens. By default, Elixir will add parens to all calls except for:</source>
          <target state="translated">Эликсир имеет два синтаксиса для вызовов функций.С парнями и без парен.По умолчанию,Elixir будет добавлять парены ко всем вызовам за исключением:</target>
        </trans-unit>
        <trans-unit id="9c36cafc5f1778cc6d258e84e87e60d138fd12a4" translate="yes" xml:space="preserve">
          <source>Elixir is a dynamically typed language, so all types in Elixir are checked at runtime. Nonetheless, Elixir comes with &lt;strong&gt;typespecs&lt;/strong&gt;, which are a notation used for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea9e99a9db02305c5b70e98171ae53976e93c92" translate="yes" xml:space="preserve">
          <source>Elixir is a dynamically typed language, so all types in Elixir are inferred by the runtime. Nonetheless, Elixir comes with &lt;strong&gt;typespecs&lt;/strong&gt;, which are a notation used for:</source>
          <target state="translated">Elixir - это язык с динамической типизацией, поэтому все типы в Elixir определяются средой выполнения. Тем не менее, Elixir поставляется со &lt;strong&gt;спецификациями типов&lt;/strong&gt; , которые используются для обозначения:</target>
        </trans-unit>
        <trans-unit id="e56a48282c5929f27448e4f74f02e189acbe3204" translate="yes" xml:space="preserve">
          <source>Elixir is an extensible and very customizable programming language thanks to its meta-programming support. Most meta-programming in Elixir is done through macros, which are very useful in several situations, especially for writing DSLs. We have written a short guide that explains the basic mechanisms behind macros, shows how to write macros, and how to use macros to create DSLs:</source>
          <target state="translated">Elixir-расширяемый и очень настраиваемый язык программирования благодаря поддержке мета-программирования.Большая часть мета-программирования в Elixir осуществляется с помощью макросов,которые очень полезны в некоторых ситуациях,особенно при написании DSL.Мы написали краткое руководство,которое объясняет основные механизмы,стоящие за макросами,показывает,как писать макросы,и как использовать макросы для создания DSL:</target>
        </trans-unit>
        <trans-unit id="63771eaf5ff6c9a6bd6258b28e240e5f31e971be" translate="yes" xml:space="preserve">
          <source>Elixir is an immutable language where nothing is shared by default. If we want to share information, which can be read and modified from multiple places, we have two main options in Elixir:</source>
          <target state="translated">Эликсир-это неизменный язык,в котором по умолчанию нет ничего общего.Если мы хотим поделиться информацией,которая может быть прочитана и изменена из нескольких мест,у нас есть два основных варианта в Elixir:</target>
        </trans-unit>
        <trans-unit id="52c491dbf300477fadaef34d4fecd5fbbc6358fa" translate="yes" xml:space="preserve">
          <source>Elixir is capable of parsing a predefined set of operators; this means that it's not possible to define new operators (like one could do in Haskell, for example). However, not all operators that Elixir can parse are &lt;em&gt;used&lt;/em&gt; by Elixir: for example, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; are used by Elixir for addition and boolean &lt;em&gt;or&lt;/em&gt;, but &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; is not used (but valid).</source>
          <target state="translated">Elixir может анализировать заранее определенный набор операторов; это означает, что невозможно определять новые операторы (как, например, в Haskell). Однако не все операторы, которые может анализировать Elixir, &lt;em&gt;используются&lt;/em&gt; Elixir: например, &lt;code&gt;+&lt;/code&gt; и &lt;code&gt;||&lt;/code&gt; используются Elixir для сложения и логического &lt;em&gt;или&lt;/em&gt; , но &lt;code&gt;&amp;lt;~&amp;gt;&lt;/code&gt; не используется (но действителен).</target>
        </trans-unit>
        <trans-unit id="119a6b69354b723a3119d7eb9b274e46b1a606de" translate="yes" xml:space="preserve">
          <source>Elixir is currently at major version v1. A new backwards compatible minor release happens every 6 months. Patch releases are not scheduled and are made whenever there are bug fixes or security patches.</source>
          <target state="translated">В настоящее время Elixir находится в мажорной версии v1.Новый минорный релиз с обратной совместимостью выходит каждые 6 месяцев.Релизы патчей не планируются и делаются всякий раз,когда есть исправления ошибок или исправления безопасности.</target>
        </trans-unit>
        <trans-unit id="5569a08dfbe33692762e6efedcb5c7ea0454136a" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to delay the resolution to the latest possible moment. So, if you call &lt;code&gt;length([1, 2, 3])&lt;/code&gt; inside quote, but no &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; function is available, it is then expanded in the caller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e6a9f7e2024169f36143b3110efa2bf4ec167a" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to delay the resolution to the latest possible moment. So, if you call &lt;code&gt;length([1, 2, 3])&lt;/code&gt; inside quote, but no &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;length/1&lt;/code&gt;&lt;/a&gt; function is available, it is then expanded in the caller:</source>
          <target state="translated">Эликсир достаточно умен, чтобы отложить разрешение до самого последнего момента. Итак, если вы вызываете &lt;code&gt;length([1, 2, 3])&lt;/code&gt; внутри кавычки, но функция &lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;length/1&lt;/code&gt; &lt;/a&gt; недоступна, она затем раскрывается в вызывающей стороне:</target>
        </trans-unit>
        <trans-unit id="94be6db8aa623aad96175d2a4f009eb3d49d1f72" translate="yes" xml:space="preserve">
          <source>Elixir is smart enough to recompile only files that have changed and their dependencies. This means if &lt;code&gt;lib/a.ex&lt;/code&gt; is invoking a function defined over &lt;code&gt;lib/b.ex&lt;/code&gt;, whenever &lt;code&gt;lib/b.ex&lt;/code&gt; changes, &lt;code&gt;lib/a.ex&lt;/code&gt; is also recompiled.</source>
          <target state="translated">Эликсир достаточно умен, чтобы перекомпилировать только измененные файлы и их зависимости. Это означает, что если &lt;code&gt;lib/a.ex&lt;/code&gt; вызывает функцию, определенную в &lt;code&gt;lib/b.ex&lt;/code&gt; , всякий раз, когда &lt;code&gt;lib/b.ex&lt;/code&gt; изменяется, &lt;code&gt;lib/a.ex&lt;/code&gt; также перекомпилируется.</target>
        </trans-unit>
        <trans-unit id="a352a9b0a3e5c7519c223a1075bc3428e61e0561" translate="yes" xml:space="preserve">
          <source>Elixir is versioned according to a vMAJOR.MINOR.PATCH schema.</source>
          <target state="translated">Эликсир выполнен по схеме vMAJOR.MINOR.PATCH.</target>
        </trans-unit>
        <trans-unit id="d990d24327822ea7a421e913e80e0202d0dfa1bb" translate="yes" xml:space="preserve">
          <source>Elixir macros have late resolution. This guarantees that a variable defined inside a quote won&amp;rsquo;t conflict with a variable defined in the context where that macro is expanded. For example:</source>
          <target state="translated">Макросы Эликсира имеют позднее разрешение. Это гарантирует, что переменная, определенная внутри кавычек, не будет конфликтовать с переменной, определенной в контексте, в котором этот макрос раскрывается. Например:</target>
        </trans-unit>
        <trans-unit id="6c0929a451e1f448275dcbe066bf77535364105c" translate="yes" xml:space="preserve">
          <source>Elixir minor and patch releases are backwards compatible: well-defined behaviours and documented APIs in a given version will continue working on future versions.</source>
          <target state="translated">Elixir minor и патчи обратно совместимы:четко определенные модели поведения и документированные API в данной версии будут продолжать работать над будущими версиями.</target>
        </trans-unit>
        <trans-unit id="f4a72643c7a8a6ed5341995de6e14044af2a034d" translate="yes" xml:space="preserve">
          <source>Elixir module names can be dynamically generated. This is very useful when working with macros. For instance, one could write:</source>
          <target state="translated">Имена модулей эликсира могут быть динамически сгенерированы.Это очень полезно при работе с макросами.Например,можно написать:</target>
        </trans-unit>
        <trans-unit id="3135e8d914a8aafb03877d33ea9a4b0de24e09f7" translate="yes" xml:space="preserve">
          <source>Elixir offers several sigils to deal with various flavors of times and dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e063af00bef300726332e4ffbf98de73c83bdc5a" translate="yes" xml:space="preserve">
          <source>Elixir on Discord</source>
          <target state="translated">Эликсир на Раздорах</target>
        </trans-unit>
        <trans-unit id="005e7c25a3d3787c9fd9aad492021fe09a8bd012" translate="yes" xml:space="preserve">
          <source>Elixir on Slack</source>
          <target state="translated">Эликсир на слабине</target>
        </trans-unit>
        <trans-unit id="6ec353d0b43e8fcc2bae198d8d18d71fc59a96c0" translate="yes" xml:space="preserve">
          <source>Elixir programs should prefer to validate data as close to the end user as possible, so the errors are easy to locate and fix. This practice also saves you from writing defensive code in the internals of the library.</source>
          <target state="translated">Программы Elixir должны предпочитать проверять данные как можно ближе к конечному пользователю,чтобы ошибки можно было легко найти и исправить.Эта практика также спасает вас от написания защитного кода во внутреннем пространстве библиотеки.</target>
        </trans-unit>
        <trans-unit id="34badf132890db803056b8a329274a11ed6c00d4" translate="yes" xml:space="preserve">
          <source>Elixir projects are usually organized into three directories:</source>
          <target state="translated">Проекты эликсира,как правило,организованы в три каталога:</target>
        </trans-unit>
        <trans-unit id="bd498b5c0b475852faf005a008b3295d3968391d" translate="yes" xml:space="preserve">
          <source>Elixir promotes the use of Markdown with heredocs to write readable documentation. Heredocs are multi-line strings, they start and end with triple double-quotes, keeping the formatting of the inner text. We can access the documentation of any compiled module directly from IEx:</source>
          <target state="translated">Elixir поощряет использование Markdown с heredocs для записи читаемой документации.Heredocs-это многострочные строки,они начинаются и заканчиваются тройными двойными кавычками,сохраняя форматирование внутреннего текста.Доступ к документации любого скомпилированного модуля мы можем получить непосредственно из IEx:</target>
        </trans-unit>
        <trans-unit id="8cd089c42b27bd178061d32f4f832a4a6ee4ad2d" translate="yes" xml:space="preserve">
          <source>Elixir provides Perl-compatible regular expressions (regexes), as implemented by the &lt;a href=&quot;http://www.pcre.org/&quot;&gt;PCRE&lt;/a&gt; library. Regexes also support modifiers. For example, the &lt;code&gt;i&lt;/code&gt; modifier makes a regular expression case insensitive:</source>
          <target state="translated">Elixir предоставляет Perl-совместимые регулярные выражения (regexes), реализованные библиотекой &lt;a href=&quot;http://www.pcre.org/&quot;&gt;PCRE&lt;/a&gt; . Регулярные выражения также поддерживают модификаторы. Например, модификатор &lt;code&gt;i&lt;/code&gt; делает регулярное выражение нечувствительным к регистру:</target>
        </trans-unit>
        <trans-unit id="ea04f299ea8e7d138416f7682d04dace2f8332f3" translate="yes" xml:space="preserve">
          <source>Elixir provides a bunch of predicate functions to check for a value type. For example, the &lt;code&gt;is_boolean/1&lt;/code&gt; function can be used to check if a value is a boolean or not:</source>
          <target state="translated">Elixir предоставляет набор функций-предикатов для проверки типа значения. Например, &lt;code&gt;is_boolean/1&lt;/code&gt; может использоваться для проверки, является ли значение логическим или нет:</target>
        </trans-unit>
        <trans-unit id="f9d0324f32083b4357effd55af42179e669e80ba" translate="yes" xml:space="preserve">
          <source>Elixir provides a special and more concise syntax for keyword lists that looks like this:</source>
          <target state="translated">Elixir предоставляет специальный и более лаконичный синтаксис для списков ключевых слов,который выглядит так:</target>
        </trans-unit>
        <trans-unit id="3fb7d8bf0ef1942795033493f666d84321055fe3" translate="yes" xml:space="preserve">
          <source>Elixir provides excellent interoperability with Erlang libraries. In fact, Elixir discourages simply wrapping Erlang libraries in favor of directly interfacing with Erlang code. In this section, we will present some of the most common and useful Erlang functionality that is not found in Elixir.</source>
          <target state="translated">Elixir обеспечивает отличную совместимость с библиотеками Erlang.Фактически,Elixir отговаривает от простого обертывания библиотек Erlang в пользу прямого взаимодействия с кодом Erlang.В этом разделе мы представим некоторые из наиболее распространенных и полезных функциональных возможностей Erlang,которых нет в Elixir.</target>
        </trans-unit>
        <trans-unit id="b3b982e7fff9bd521206b036c548d296e906492a" translate="yes" xml:space="preserve">
          <source>Elixir provides macros as a mechanism for meta-programming (writing code that generates code). Macros are expanded at compile time.</source>
          <target state="translated">Elixir предоставляет макросы как механизм для мета-программирования (написания кода,который генерирует код).Макросы расширяются во время компиляции.</target>
        </trans-unit>
        <trans-unit id="449df725d4d68a46665d86a115b480918573511c" translate="yes" xml:space="preserve">
          <source>Elixir provides many &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;built-in types&lt;/a&gt;, such as &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;pid&lt;/code&gt;, that can be used to document function signatures. For example, the &lt;code&gt;round/1&lt;/code&gt; function, which rounds a number to its nearest integer. As you can see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;in its documentation&lt;/a&gt;, &lt;code&gt;round/1&lt;/code&gt;&amp;rsquo;s typed signature is written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c38afe5476b8521de1ce73619db182fce82f5c4" translate="yes" xml:space="preserve">
          <source>Elixir provides many conveniences for working with ports and some drawbacks. We will explore those below.</source>
          <target state="translated">Elixir предоставляет множество удобств для работы с портами и некоторые недостатки.Мы рассмотрим их ниже.</target>
        </trans-unit>
        <trans-unit id="86797814ddc42c874f88a51b77e92d177f55b7bc" translate="yes" xml:space="preserve">
          <source>Elixir provides optional parentheses for non-qualified and qualified calls.</source>
          <target state="translated">Elixir предоставляет дополнительные скобки для неквалифицированных и квалифицированных вызовов.</target>
        </trans-unit>
        <trans-unit id="1d9a8b35858a0497976075a187083dacc1314354" translate="yes" xml:space="preserve">
          <source>Elixir provides pattern matching, which allows us to assert on the shape or extract values from data-structures. Patterns are often augmented with guards, which give developers the ability to perform more complex checks, albeit limited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1e334b03a647f5918bb69c761fab411cd3e870" translate="yes" xml:space="preserve">
          <source>Elixir provides similar mechanisms for imports and aliases too. This guarantees that a macro will behave as specified by its source module rather than conflicting with the target module where the macro is expanded. Hygiene can be bypassed under specific situations by using macros like &lt;code&gt;var!/2&lt;/code&gt; and &lt;code&gt;alias!/1&lt;/code&gt;, although one must be careful when using those as they directly change the user environment.</source>
          <target state="translated">Эликсир также предоставляет аналогичные механизмы для импорта и псевдонимов. Это гарантирует, что макрос будет вести себя так, как указано в его исходном модуле, а не конфликтовать с целевым модулем, в котором макрос раскрывается. Гигиену можно обойти в определенных ситуациях, используя такие макросы, как &lt;code&gt;var!/2&lt;/code&gt; и &lt;code&gt;alias!/1&lt;/code&gt; , хотя при их использовании следует соблюдать осторожность, поскольку они напрямую изменяют среду пользователя.</target>
        </trans-unit>
        <trans-unit id="7ee83992e184ceb0497492aa46813f6e12944aa3" translate="yes" xml:space="preserve">
          <source>Elixir provides the concept of enumerables and &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;the &lt;code&gt;Enum&lt;/code&gt; module&lt;/a&gt; to work with them. We have already learned two enumerables: lists and maps.</source>
          <target state="translated">Elixir обеспечивает концепцию перечислимых и &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;в &lt;code&gt;Enum&lt;/code&gt; модуль&lt;/a&gt; для работы с ними. Мы уже узнали два перечисления: списки и карты.</target>
        </trans-unit>
        <trans-unit id="56408c183550d2230f17bffa1fd59dd5a2aa2dd3" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in comparison operators (all of which can be used in guards):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38b66bd0f1f07df9af68419dad5d7545d3eb5b0" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in comparison operators:</source>
          <target state="translated">Elixir предоставляет следующие встроенные операторы сравнения:</target>
        </trans-unit>
        <trans-unit id="a073541c1c4061c5b62e401a691e0182a896f380" translate="yes" xml:space="preserve">
          <source>Elixir provides the following built-in operators that are defined as functions that can be overridden:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac046d5521e866f330d69759ab8c6306ded55946" translate="yes" xml:space="preserve">
          <source>Elixir quote/unquote mechanisms provide a functionality called unquote fragments. Unquote fragments provide an easy way to generate functions on the fly. Consider this example:</source>
          <target state="translated">Механизмы эликсира цитат/нецитат обеспечивают функциональность,называемую &quot;фрагментами от кавычек&quot;.Фрагменты от кавычек обеспечивают простой способ генерации функций &quot;на лету&quot;.Рассмотрим этот пример:</target>
        </trans-unit>
        <trans-unit id="8d30f35ec7987f572743e95ef255bb1ce5bee72e" translate="yes" xml:space="preserve">
          <source>Elixir relies on underscores in different situations.</source>
          <target state="translated">Эликсир полагается на подчёркивания в различных ситуациях.</target>
        </trans-unit>
        <trans-unit id="ecffee7d986ded673e3f20c49d26acf93d1febaf" translate="yes" xml:space="preserve">
          <source>Elixir represents &lt;code&gt;Foo.Bar&lt;/code&gt; as &lt;code&gt;__aliases__&lt;/code&gt; so calls can be unambiguously identified by the operator &lt;code&gt;:.&lt;/code&gt;. For example:</source>
          <target state="translated">Elixir представляет &lt;code&gt;Foo.Bar&lt;/code&gt; как &lt;code&gt;__aliases__&lt;/code&gt; , поэтому вызовы могут быть однозначно идентифицированы оператором &lt;code&gt;:.&lt;/code&gt; , Например:</target>
        </trans-unit>
        <trans-unit id="e6bdbab87b861494b0b9df9b50e56bb5cc5d2563" translate="yes" xml:space="preserve">
          <source>Elixir requires all atoms and variables to be in NFC form. Any other form will fail with a relevant error message. Quoted-atoms and strings can, however, be in any form and are not verified by the parser.</source>
          <target state="translated">Эликсир требует,чтобы все атомы и переменные были в форме NFC.Любая другая форма не будет работать с соответствующим сообщением об ошибке.Однако,цитируемые атомы и строки могут быть в любой форме и не проверяются синтаксическим анализатором.</target>
        </trans-unit>
        <trans-unit id="edacc18f14ad696b0fd9cee85daa785d105406a3" translate="yes" xml:space="preserve">
          <source>Elixir reserves the following module names: &lt;code&gt;Elixir&lt;/code&gt;, &lt;code&gt;Any&lt;/code&gt;, &lt;code&gt;BitString&lt;/code&gt;, &lt;code&gt;PID&lt;/code&gt;, and &lt;code&gt;Reference&lt;/code&gt;.</source>
          <target state="translated">Elixir резервирует следующие имена модулей: &lt;code&gt;Elixir&lt;/code&gt; , &lt;code&gt;Any&lt;/code&gt; , &lt;code&gt;BitString&lt;/code&gt; , &lt;code&gt;PID&lt;/code&gt; и &lt;code&gt;Reference&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6a2a631e623ec7dcc0aeb7c643dc24be890d814b" translate="yes" xml:space="preserve">
          <source>Elixir runs on the Erlang Virtual Machine and, sooner or later, an Elixir developer will want to interface with existing Erlang libraries. Here&amp;rsquo;s a list of online resources that cover Erlang&amp;rsquo;s fundamentals and its more advanced features:</source>
          <target state="translated">Elixir работает на виртуальной машине Erlang, и рано или поздно разработчик Elixir захочет взаимодействовать с существующими библиотеками Erlang. Вот список онлайн-ресурсов, которые охватывают основы Erlang и его более продвинутые функции:</target>
        </trans-unit>
        <trans-unit id="4a5fefa1f8798cec1647f9fe4a71993a0c63afa5" translate="yes" xml:space="preserve">
          <source>Elixir sees the right-hand side is a function call and pipes to it. This means that, if you want to pipe to an anonymous or captured function, it must also be explicitly called.</source>
          <target state="translated">Эликсир видит,что правая сторона-это вызов функции и трубки к ней.Это означает,что если вы хотите подключиться к анонимной или захваченной функции,она также должна быть явно вызвана.</target>
        </trans-unit>
        <trans-unit id="a8974a1be92f4c12c0a0c52c8b32e2ca1e35088a" translate="yes" xml:space="preserve">
          <source>Elixir ships with facilities to connect nodes and exchange information between them. In fact, we use the same concepts of processes, message passing and receiving messages when working in a distributed environment because Elixir processes are &lt;em&gt;location transparent&lt;/em&gt;. This means that when sending a message, it doesn&amp;rsquo;t matter if the recipient process is on the same node or on another node, the</source>
          <target state="translated">Elixir поставляется со средствами для соединения узлов и обмена информацией между ними. Фактически, мы используем те же концепции процессов, передачи и получения сообщений при работе в распределенной среде, потому что процессы Elixir &lt;em&gt;прозрачны для местоположения&lt;/em&gt; . Это означает, что при отправке сообщения не имеет значения, находится ли процесс-получатель на том же узле или на другом узле,</target>
        </trans-unit>
        <trans-unit id="5c11d827abbb7cde35b0a581d6299d5d74cd7a62" translate="yes" xml:space="preserve">
          <source>Elixir ships with some built-in protocols. In previous chapters, we have discussed the &lt;code&gt;Enum&lt;/code&gt; module which provides many functions that work with any data structure that implements the &lt;code&gt;Enumerable&lt;/code&gt; protocol:</source>
          <target state="translated">Эликсир поставляется с некоторыми встроенными протоколами. В предыдущих главах мы обсуждали модуль &lt;code&gt;Enum&lt;/code&gt; , который предоставляет множество функций, которые работают с любой структурой данных, реализующей протокол &lt;code&gt;Enumerable&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="dd2cbcbe1872ea6a04fdc11aaa0e830351ff7c7a" translate="yes" xml:space="preserve">
          <source>Elixir spawned a process on another node and returned its pid. The code then executed on the other node where the &lt;code&gt;Hello.world/0&lt;/code&gt; function exists and invoked that function. Note that the result of &amp;ldquo;hello world&amp;rdquo; was printed on the current node &lt;code&gt;bar&lt;/code&gt; and not on &lt;code&gt;foo&lt;/code&gt;. In other words, the message to be printed was sent back from &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;. This happens because the process spawned on the other node (&lt;code&gt;foo&lt;/code&gt;) knows all of the output should be sent back to the original node!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3a064f8543389f89760aca91a7bf4bd3fe1730" translate="yes" xml:space="preserve">
          <source>Elixir spawned a process on another node and returned its pid. The code then executed on the other node where the &lt;code&gt;Hello.world/0&lt;/code&gt; function exists and invoked that function. Note that the result of &amp;ldquo;hello world&amp;rdquo; was printed on the current node &lt;code&gt;bar&lt;/code&gt; and not on &lt;code&gt;foo&lt;/code&gt;. In other words, the message to be printed was sent back from &lt;code&gt;foo&lt;/code&gt; to &lt;code&gt;bar&lt;/code&gt;. This happens because the process spawned on the other node (&lt;code&gt;foo&lt;/code&gt;) still has the group leader of the current node (&lt;code&gt;bar&lt;/code&gt;). We have briefly talked about group leaders in the &lt;a href=&quot;../io-and-the-file-system#processes-and-group-leaders&quot;&gt;IO chapter&lt;/a&gt;.</source>
          <target state="translated">Эликсир породил процесс на другом узле и вернул его pid. Затем код выполняется на другом узле, где существует функция &lt;code&gt;Hello.world/0&lt;/code&gt; , и вызывает эту функцию. Обратите внимание, что результат &amp;laquo;hello world&amp;raquo; был напечатан на &lt;code&gt;bar&lt;/code&gt; текущего узла, а не на &lt;code&gt;foo&lt;/code&gt; . Другими словами, сообщение для печати было отправлено обратно с &lt;code&gt;foo&lt;/code&gt; на &lt;code&gt;bar&lt;/code&gt; . Это происходит потому, что процесс, порожденный на другом узле ( &lt;code&gt;foo&lt;/code&gt; ), все еще имеет лидера группы текущего узла ( &lt;code&gt;bar&lt;/code&gt; ). Мы кратко говорили о лидерах групп в &lt;a href=&quot;../io-and-the-file-system#processes-and-group-leaders&quot;&gt;главе&lt;/a&gt; об ИО .</target>
        </trans-unit>
        <trans-unit id="cdde1bffc734f7ff0a1635ad03d752544e76408f" translate="yes" xml:space="preserve">
          <source>Elixir stores documentation inside pre-defined chunks in the bytecode. It can be accessed from Elixir by using the &lt;a href=&quot;code#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; function. This also means documentation is only accessed when required and not when modules are loaded by the Virtual Machine. The only downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not have their bytecode written to disk.</source>
          <target state="translated">Elixir хранит документацию внутри заранее определенных фрагментов байт-кода. Доступ к нему можно получить из Elixir с помощью функции &lt;a href=&quot;code#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt; . Это также означает, что доступ к документации осуществляется только при необходимости, а не при загрузке модулей виртуальной машиной. Единственным недостатком является то, что модули, определенные в памяти, как и модули, определенные в IEx, не могут получить доступ к своей документации, поскольку их байт-код не записан на диск.</target>
        </trans-unit>
        <trans-unit id="73308596a035e74f58128367e181ad0b11e8c767" translate="yes" xml:space="preserve">
          <source>Elixir stores documentation inside pre-defined chunks in the bytecode. It can be accessed from Elixir by using the &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; function. This also means documentation is only accessed when required and not when modules are loaded by the Virtual Machine. The only downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not have their bytecode written to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4784f8c761fcb64ca50be28ca3ee0726dd1e34" translate="yes" xml:space="preserve">
          <source>Elixir supports &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; as booleans:</source>
          <target state="translated">Эликсир поддерживает логические значения &lt;code&gt;true&lt;/code&gt; и &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c1fca4af1967c47f797a528ad384a0b6142eeed4" translate="yes" xml:space="preserve">
          <source>Elixir supports Unicode throughout the language.</source>
          <target state="translated">Эликсир поддерживает Юникод на всем языке.</target>
        </trans-unit>
        <trans-unit id="6e32af56db37e615dec6eaffbd92d992d378d08f" translate="yes" xml:space="preserve">
          <source>Elixir supports compilation tracers, which allows modules to observe constructs handled by the Elixir compiler when compiling files. A tracer is a module that implements the &lt;code&gt;trace/2&lt;/code&gt; function. The function receives the event name as first argument and &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; as second and it must return &lt;code&gt;:ok&lt;/code&gt;. It is very important for a tracer to do as little work as possible synchronously and dispatch the bulk of the work to a separate process. &lt;strong&gt;Slow tracers will slow down compilation&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649a2834ec800cb52f399145f24bccb3f23afbc9" translate="yes" xml:space="preserve">
          <source>Elixir supports compound types as well. For example, a list of integers has type &lt;code&gt;[integer]&lt;/code&gt;, or maps that define keys and types (see the example below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f173b2bc2f5965b36c7172e06c818c7bd04ae05" translate="yes" xml:space="preserve">
          <source>Elixir supports compound types as well. For example, a list of integers has type &lt;code&gt;[integer]&lt;/code&gt;. You can see all the built-in types provided by Elixir &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html&quot;&gt;in the typespecs docs&lt;/a&gt;.</source>
          <target state="translated">Elixir также поддерживает составные типы. Например, список целых чисел имеет тип &lt;code&gt;[integer]&lt;/code&gt; . Вы можете увидеть все встроенные типы, предоставляемые Elixir, &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html&quot;&gt;в документации по типам&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="96cc8eea24e4342cdb1b99a08ca9183edff74d45" translate="yes" xml:space="preserve">
          <source>Elixir supports conversions from charlists which contains any Unicode code point.</source>
          <target state="translated">Elixir поддерживает конвертацию из чарлистов,содержащих любую точку кода Юникода.</target>
        </trans-unit>
        <trans-unit id="c47342d7972fff0f119dd077cbc8a84f69c35e4d" translate="yes" xml:space="preserve">
          <source>Elixir supports only code points &lt;code&gt;\t&lt;/code&gt; (0009), &lt;code&gt;\n&lt;/code&gt; (000A), &lt;code&gt;\r&lt;/code&gt; (000D) and &lt;code&gt;\s&lt;/code&gt; (0020) as whitespace and therefore does not follow requirement R3. R3 requires a wider variety of whitespace and syntax characters to be supported.</source>
          <target state="translated">Эликсир поддерживает только кодовые точки &lt;code&gt;\t&lt;/code&gt; (0009), &lt;code&gt;\n&lt;/code&gt; (000A), &lt;code&gt;\r&lt;/code&gt; (000D) и &lt;code&gt;\s&lt;/code&gt; (0020) в качестве пробелов и поэтому не следует требованию R3. R3 требует поддержки большего количества символов пробела и синтаксиса.</target>
        </trans-unit>
        <trans-unit id="01176f0775592b687fb8331c0702b3ffd6028d87" translate="yes" xml:space="preserve">
          <source>Elixir supports some sigil variants to deal with escaping characters and interpolation. In particular, uppercase letters sigils do not perform interpolation nor escaping. For example, although both &lt;code&gt;~s&lt;/code&gt; and &lt;code&gt;~S&lt;/code&gt; will return strings, the former allows escape codes and interpolation while the latter does not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310bbc013224b7904b922e667f4bf7001bdc5fa3" translate="yes" xml:space="preserve">
          <source>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). Elixir's AST is a regular Elixir data structure composed of the following elements:</source>
          <target state="translated">Синтаксис эликсира был разработан для прямого преобразования в абстрактное синтаксическое дерево (AST).AST эликсира-это обычная структура данных эликсира,состоящая из следующих элементов:</target>
        </trans-unit>
        <trans-unit id="ff71b1cca0c9586eb958681a7c3aaf58f79bc884" translate="yes" xml:space="preserve">
          <source>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). This means the Elixir syntax is mostly uniform with a handful of &quot;syntax sugar&quot; constructs to reduce the noise in common Elixir idioms.</source>
          <target state="translated">Синтаксис эликсира был разработан для прямого преобразования в абстрактное синтаксическое дерево (AST).Это означает,что синтаксис эликсира в основном однороден с горсткой конструкций &quot;синтаксиса сахара&quot; для уменьшения шума в общих идиоматических выражениях эликсира.</target>
        </trans-unit>
        <trans-unit id="ce4861615a3c3b43c097938810a51ecb7a613f3a" translate="yes" xml:space="preserve">
          <source>Elixir treats documentation and code comments as different concepts. Documentation is an explicit contract between you and users of your Application Programming Interface (API), be them third-party developers, co-workers, or your future self. Modules and functions must always be documented if they are part of your API.</source>
          <target state="translated">Elixir рассматривает документацию и комментарии к коду как различные понятия.Документация-это явный договор между Вами и пользователями Вашего Интерфейса Программирования Приложений (API),будь то сторонние разработчики,коллеги по работе или Ваше будущее.Модули и функции всегда должны быть документированы,если они являются частью Вашего API.</target>
        </trans-unit>
        <trans-unit id="94ab78733fcffaa0c8d9d75151f47ea7434ea05a" translate="yes" xml:space="preserve">
          <source>Elixir treats documentation as a first-class citizen. This means documentation should be easy to write and easy to read. In this document you will learn how to write documentation in Elixir, covering constructs like module attributes, style practices and doctests.</source>
          <target state="translated">Эликсир относится к документации как к первоклассному гражданину.Это означает,что документация должна быть легкой в написании и легко читаемой.В этом документе вы узнаете,как писать документацию в Elixir,охватывая такие конструкции,как атрибуты модулей,стилевые практики и тесты документации.</target>
        </trans-unit>
        <trans-unit id="3977a0d710ac9b9b84f6c1288fefa9a0d84df520" translate="yes" xml:space="preserve">
          <source>Elixir uses UTF-8 to encode its strings, which means that code points are encoded as a series of 8-bit bytes. UTF-8 is a &lt;strong&gt;variable width&lt;/strong&gt; character encoding that uses one to four bytes to store each code point; it is capable of encoding all valid Unicode code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c067ad566a52ceb3738f6cd14c05e81b89ddb512" translate="yes" xml:space="preserve">
          <source>Elixir uses curly brackets to define tuples. Like lists, tuples can hold any value:</source>
          <target state="translated">Эликсир использует фигурные скобки для определения кортежей.Как и списки,кортежи могут иметь любое значение:</target>
        </trans-unit>
        <trans-unit id="b7437bc89e4d7cd42e4777ca92ac246386afa15d" translate="yes" xml:space="preserve">
          <source>Elixir uses single quotes to define charlists:</source>
          <target state="translated">Эликсир использует одиночные котировки для определения чарлистов:</target>
        </trans-unit>
        <trans-unit id="0a0c9ca226ff9075b8b4027dc040b09a7fc4c136" translate="yes" xml:space="preserve">
          <source>Elixir uses square brackets to specify a list of values. Values can be of any type:</source>
          <target state="translated">Эликсир использует квадратные скобки для указания списка значений.Значения могут быть любого типа:</target>
        </trans-unit>
        <trans-unit id="1ca97f233cf2ddf0b1c0bf0e2277569cae997e55" translate="yes" xml:space="preserve">
          <source>Elixir v1.7 adopts &lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt; which is a new documentation format meant to be shared across all BEAM languages. The old format, used by &lt;a href=&quot;#get_docs/2&quot;&gt;&lt;code&gt;Code.get_docs/2&lt;/code&gt;&lt;/a&gt;, is no longer available, and therefore this function always returns &lt;code&gt;nil&lt;/code&gt;. Use &lt;a href=&quot;#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7410ee1b8baed2ca63c0da7fbd59f8909583c454" translate="yes" xml:space="preserve">
          <source>Elixir v1.7 adopts &lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt; which is a new documentation format meant to be shared across all BEAM languages. The old format, used by &lt;a href=&quot;code#get_docs/2&quot;&gt;&lt;code&gt;Code.get_docs/2&lt;/code&gt;&lt;/a&gt;, is no longer available, and therefore this function always returns &lt;code&gt;nil&lt;/code&gt;. Use &lt;a href=&quot;code#fetch_docs/1&quot;&gt;&lt;code&gt;Code.fetch_docs/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Elixir v1.7 принимает &lt;a href=&quot;http://erlang.org/eep/eeps/eep-0048.html&quot;&gt;EEP 48&lt;/a&gt; , новый формат документации, предназначенный для совместного использования на всех языках BEAM. Старый формат, используемый &lt;a href=&quot;code#get_docs/2&quot;&gt; &lt;code&gt;Code.get_docs/2&lt;/code&gt; &lt;/a&gt; , больше не доступен, и поэтому эта функция всегда возвращает &lt;code&gt;nil&lt;/code&gt; . &lt;a href=&quot;code#fetch_docs/1&quot;&gt; &lt;code&gt;Code.fetch_docs/1&lt;/code&gt; &lt;/a&gt; этого используйте Code.fetch_docs / 1 .</target>
        </trans-unit>
        <trans-unit id="e2c8e7ddf395da597d9d7092789c372c5e9cb894" translate="yes" xml:space="preserve">
          <source>Elixir version</source>
          <target state="translated">эликсирная версия</target>
        </trans-unit>
        <trans-unit id="3ef1a22d73c732ddfb0e37deb22c5920363b7ef9" translate="yes" xml:space="preserve">
          <source>Elixir version information.</source>
          <target state="translated">Информация о версии эликсира.</target>
        </trans-unit>
        <trans-unit id="2d1a3e13eeda4320739159e4214187b33436ad5e" translate="yes" xml:space="preserve">
          <source>Elixir will accept any module name as long as the expression passed as the first argument to &lt;a href=&quot;#defmodule/2&quot;&gt;&lt;code&gt;defmodule/2&lt;/code&gt;&lt;/a&gt; evaluates to an atom. Note that, when a dynamic name is used, Elixir won't nest the name under the current module nor automatically set up an alias.</source>
          <target state="translated">Elixir примет любое имя модуля, пока выражение, переданное в качестве первого аргумента &lt;a href=&quot;#defmodule/2&quot;&gt; &lt;code&gt;defmodule/2&lt;/code&gt; ,&lt;/a&gt; оценивается как атом. Обратите внимание, что при использовании динамического имени Elixir не будет вкладывать имя в текущий модуль и автоматически настраивать псевдоним.</target>
        </trans-unit>
        <trans-unit id="0c3a96ef15c7b10a131a32d7fe611882ee9f141c" translate="yes" xml:space="preserve">
          <source>Elixir will automatically wrap the function body in a &lt;code&gt;try&lt;/code&gt; whenever one of &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; is specified.</source>
          <target state="translated">Elixir автоматически заключит тело функции в &lt;code&gt;try&lt;/code&gt; всякий раз, когда указано одно из следующих: &lt;code&gt;after&lt;/code&gt; , &lt;code&gt;rescue&lt;/code&gt; или &lt;code&gt;catch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a85970e0faad243447c5114389dcdeb0a39d337f" translate="yes" xml:space="preserve">
          <source>Elixir&amp;rsquo;s processes should not be confused with operating system processes. Processes in Elixir are extremely lightweight in terms of memory and CPU (even compared to threads as used in many other programming languages). Because of this, it is not uncommon to have tens or even hundreds of thousands of processes running simultaneously.</source>
          <target state="translated">Не следует путать процессы Elixir с процессами операционной системы. Процессы в Elixir чрезвычайно легки с точки зрения памяти и ЦП (даже по сравнению с потоками, используемыми во многих других языках программирования). Из-за этого нередко одновременно работают десятки или даже сотни тысяч процессов.</target>
        </trans-unit>
        <trans-unit id="74afface970af5cae73731659047f9af84feb478" translate="yes" xml:space="preserve">
          <source>Elixir's AST (Abstract Syntax Tree)</source>
          <target state="translated">Эликсир АСТ (абстрактное синтаксическое дерево)</target>
        </trans-unit>
        <trans-unit id="ce6d269d872319624d23c6d1f8a1436923e77f5d" translate="yes" xml:space="preserve">
          <source>Elixir's interactive shell.</source>
          <target state="translated">Интерактивная оболочка Эликсира.</target>
        </trans-unit>
        <trans-unit id="b500d25431abdc8af2398b8e041e9fe8f8aee8f4" translate="yes" xml:space="preserve">
          <source>Elixir's standard library contains a few frequently used behaviours such as &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;application&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Стандартная библиотека Elixir содержит несколько часто используемых поведений, таких как &lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;application&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9b38f6b406adad2c4ad9a3c750691827797402b8" translate="yes" xml:space="preserve">
          <source>Elixir's standard library contains a few frequently used behaviours such as &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c075ef1bb96e78c3aeb788db6fdaa2ad6900d8" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">Else</target>
        </trans-unit>
        <trans-unit id="a956e2fd0a59819b9e171fd2f4db600228e545a0" translate="yes" xml:space="preserve">
          <source>Embeds a template given by &lt;code&gt;contents&lt;/code&gt; into the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fd52b24df6fd39026fb28f8524cf6ca06d78cf" translate="yes" xml:space="preserve">
          <source>Embeds a text given by &lt;code&gt;contents&lt;/code&gt; into the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3a40099a2074128eab39c61a99ee9cc8c97d42" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values for the given accumulator.</source>
          <target state="translated">Испускает последовательность значений для данного аккумулятора.</target>
        </trans-unit>
        <trans-unit id="13f5c3f168a677e832d55a71220e8084e5ebb435" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values for the given resource.</source>
          <target state="translated">Использует последовательность значений для данного ресурса.</target>
        </trans-unit>
        <trans-unit id="ee36a1b257d40c27de1319e9f52bd4df213a780a" translate="yes" xml:space="preserve">
          <source>Emits a sequence of values, starting with &lt;code&gt;start_value&lt;/code&gt;. Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; on the previous value.</source>
          <target state="translated">Выдает последовательность значений, начиная с &lt;code&gt;start_value&lt;/code&gt; . Последовательные значения генерируются путем вызова &lt;code&gt;next_fun&lt;/code&gt; для предыдущего значения.</target>
        </trans-unit>
        <trans-unit id="c167634bd4b2e54cc64b0ca7da7acd698bd3f926" translate="yes" xml:space="preserve">
          <source>Empty list elements are discarded.</source>
          <target state="translated">Элементы пустого списка отбрасываются.</target>
        </trans-unit>
        <trans-unit id="2965dae66a63ca2f32957370b2d3c71d31f0404a" translate="yes" xml:space="preserve">
          <source>Empty list elements from &lt;code&gt;list&lt;/code&gt; are discarded, but not the ones from &lt;code&gt;tail&lt;/code&gt;.</source>
          <target state="translated">Пустые элементы списка из &lt;code&gt;list&lt;/code&gt; отбрасываются, но не из &lt;code&gt;tail&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e62ffd3f17608b67830975574d7151f053f3b91e" translate="yes" xml:space="preserve">
          <source>Empty strings are only removed from the result if the &lt;code&gt;:trim&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Пустые строки удаляются из результата только в том случае, если для параметра &lt;code&gt;:trim&lt;/code&gt; установлено значение &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55e69718479729085dd821e5465e25f44c0324fa" translate="yes" xml:space="preserve">
          <source>Enables logging for the current process.</source>
          <target state="translated">Позволяет вести журнал текущего процесса.</target>
        </trans-unit>
        <trans-unit id="e2d19b78121686bc349ccaa09a8452830a7f9140" translate="yes" xml:space="preserve">
          <source>Encircled.</source>
          <target state="translated">Encircled.</target>
        </trans-unit>
        <trans-unit id="c616c5fe7020dabc2f93906e0a5f2e05bdc7d8a9" translate="yes" xml:space="preserve">
          <source>Encodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">Кодирует &lt;code&gt;string&lt;/code&gt; как &amp;laquo;x-www-form-urlencoded&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="89ea780eda521b71e81ed735656c9b61d9499afc" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 16 encoded string.</source>
          <target state="translated">Кодирует двоичную строку в базовую 16-кодированную строку.</target>
        </trans-unit>
        <trans-unit id="b7e8311ecf9de60bb4c8128af17fdd4f6e19c5bd" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 32 encoded string with an extended hexadecimal alphabet.</source>
          <target state="translated">Кодирует двоичную строку в базовую 32 кодированную строку с расширенным шестнадцатеричным алфавитом.</target>
        </trans-unit>
        <trans-unit id="36e80d95ff066a33ec7f84aa78c9dbee7b1c006d" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 32 encoded string.</source>
          <target state="translated">Кодирует двоичную строку в базовую 32-кодированную строку.</target>
        </trans-unit>
        <trans-unit id="02f9836e91d8d8f20631bf25f980c01911623202" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 64 encoded string with URL and filename safe alphabet.</source>
          <target state="translated">Кодирует двоичную строку в базовую 64-кодированную строку с безопасным алфавитом URL и имени файла.</target>
        </trans-unit>
        <trans-unit id="598559f4be54955449341d6458c6b1bc5c089d2a" translate="yes" xml:space="preserve">
          <source>Encodes a binary string into a base 64 encoded string.</source>
          <target state="translated">Кодирует двоичную строку в базовую 64-кодированную строку.</target>
        </trans-unit>
        <trans-unit id="669885d2c33e97774bece663078c5982ab0c0947" translate="yes" xml:space="preserve">
          <source>Encodes an enumerable into a query string.</source>
          <target state="translated">Кодирует перечисление в строку запроса.</target>
        </trans-unit>
        <trans-unit id="5821fec7ee87050117e2081a31b307f34868a8ad" translate="yes" xml:space="preserve">
          <source>Encoding</source>
          <target state="translated">Encoding</target>
        </trans-unit>
        <trans-unit id="322c5d3730703ae50125a473e7a7c3d0e9ef2301" translate="yes" xml:space="preserve">
          <source>Endianness</source>
          <target state="translated">Endianness</target>
        </trans-unit>
        <trans-unit id="2ea89f176d80e61e2fa991e7665230fc139bc40d" translate="yes" xml:space="preserve">
          <source>Enforcing keys</source>
          <target state="translated">Исполняющие ключи</target>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="translated">Engine</target>
        </trans-unit>
        <trans-unit id="428bd921a8f300c3b20c8266821204a755c68434" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; and its applications are started.</source>
          <target state="translated">Обеспечивает запуск данного &lt;code&gt;app&lt;/code&gt; и его приложений.</target>
        </trans-unit>
        <trans-unit id="555514beae7482d6d57cd04de49cfc7d3710c06c" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb7dedc1a9428584a4069438797a9ae78f66928" translate="yes" xml:space="preserve">
          <source>Ensures the given &lt;code&gt;app&lt;/code&gt; is started.</source>
          <target state="translated">Обеспечивает запуск данного &lt;code&gt;app&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23ee0124a924556d787c30d38fea8fafda3318c2" translate="yes" xml:space="preserve">
          <source>Ensures the given module is compiled and loaded.</source>
          <target state="translated">Обеспечивает компиляцию и загрузку данного модуля.</target>
        </trans-unit>
        <trans-unit id="c639ba03accf3baf6f605c3c0a367752ac1ba4b8" translate="yes" xml:space="preserve">
          <source>Ensures the given module is loaded.</source>
          <target state="translated">Обеспечивает загрузку данного модуля.</target>
        </trans-unit>
        <trans-unit id="02d3338a85e66444166e14ec820ab3f756bc5765" translate="yes" xml:space="preserve">
          <source>Ensures the project structure for the given project exists.</source>
          <target state="translated">Обеспечивает наличие структуры проекта для данного проекта.</target>
        </trans-unit>
        <trans-unit id="dd06dfc909fbc0c4ad3d2dc1fed376ba517fa970" translate="yes" xml:space="preserve">
          <source>Entries with duplicated keys end up in the same keyword list.</source>
          <target state="translated">Записи с дублирующимися ключами попадают в один и тот же список ключевых слов.</target>
        </trans-unit>
        <trans-unit id="20588ae8e5c269292d35f9dfffa8f2eb3fd3c259" translate="yes" xml:space="preserve">
          <source>Enum</source>
          <target state="translated">Enum</target>
        </trans-unit>
        <trans-unit id="44a9d3cb7758b69424c29688d3733784f2d7beb8" translate="yes" xml:space="preserve">
          <source>Enum.EmptyError</source>
          <target state="translated">Enum.EmptyError</target>
        </trans-unit>
        <trans-unit id="203f8ecd57ba73b4d911d61ce2b2e0bbecd88546" translate="yes" xml:space="preserve">
          <source>Enum.EmptyError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Enum.EmptyError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="92ff846ccb27bb1237f0fe73dffd1111a34febfd" translate="yes" xml:space="preserve">
          <source>Enum.OutOfBoundsError</source>
          <target state="translated">Enum.OutOfBoundsError</target>
        </trans-unit>
        <trans-unit id="64fce429b4436d311f9ed265caf9dbd13748ca8e" translate="yes" xml:space="preserve">
          <source>Enum.OutOfBoundsError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Enum.OutOfBoundsError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="translated">Enumerable</target>
        </trans-unit>
        <trans-unit id="a8bd4b8016c41ed593121704b28a0f638927292f" translate="yes" xml:space="preserve">
          <source>Enumerable &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">Перечислимый &lt;small&gt;протокол&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d949b006b0cb6700716702ddad84d81584b294d8" translate="yes" xml:space="preserve">
          <source>Enumerable keys in &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#drop/2&quot;&gt;&lt;code&gt;Map.drop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#split/2&quot;&gt;&lt;code&gt;Map.split/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://hexdocs.pm/elixir/Map.html#take/2&quot;&gt;&lt;code&gt;Map.take/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c0dbf914d64832e2d144e52e6254adb376dd46" translate="yes" xml:space="preserve">
          <source>Enumerable keys in &lt;a href=&quot;map#drop/2&quot;&gt;&lt;code&gt;Map.drop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;map#split/2&quot;&gt;&lt;code&gt;Map.split/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;map#take/2&quot;&gt;&lt;code&gt;Map.take/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Перечислимые ключи в &lt;a href=&quot;map#drop/2&quot;&gt; &lt;code&gt;Map.drop/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;map#split/2&quot;&gt; &lt;code&gt;Map.split/2&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;map#take/2&quot;&gt; &lt;code&gt;Map.take/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="140efbf707d0a7d6c39e74eac70140aecd0e5c56" translate="yes" xml:space="preserve">
          <source>Enumerable protocol used by &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">Перечислимый протокол, используемый модулями &lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a08785570fea867f5f88ca2ee2af7ae3e1313ca0" translate="yes" xml:space="preserve">
          <source>Enumerable protocol used by &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50ecedb47e87b1d9271881d5fe0a9349ed165af" translate="yes" xml:space="preserve">
          <source>Enumerable.acc (0)</source>
          <target state="translated">Перечисляется.acc (0)</target>
        </trans-unit>
        <trans-unit id="165c38b0e896ed9f5159922dce36f171ef2320bb" translate="yes" xml:space="preserve">
          <source>Enumerable.continuation (0)</source>
          <target state="translated">Enumerable.continue (0)</target>
        </trans-unit>
        <trans-unit id="ba612d94bc0277c74713f344be3f6d833e339b91" translate="yes" xml:space="preserve">
          <source>Enumerable.count (1)</source>
          <target state="translated">Число (1)</target>
        </trans-unit>
        <trans-unit id="c8a16ef4893a246c5d44ffbd9b826395af284553" translate="yes" xml:space="preserve">
          <source>Enumerable.member? (2)</source>
          <target state="translated">Член? (2)</target>
        </trans-unit>
        <trans-unit id="a9bae250bd6ab01ed637153931cbca7969a9d2fd" translate="yes" xml:space="preserve">
          <source>Enumerable.reduce (3)</source>
          <target state="translated">Перечислить.уменьшить (3)</target>
        </trans-unit>
        <trans-unit id="ee6aa06bf997d33de46b0f36134133d251942cde" translate="yes" xml:space="preserve">
          <source>Enumerable.reducer (0)</source>
          <target state="translated">Перечисляемый.редуктор (0)</target>
        </trans-unit>
        <trans-unit id="642806a29777279924e9371db22138badd652470" translate="yes" xml:space="preserve">
          <source>Enumerable.result (0)</source>
          <target state="translated">Перечисляемый.результат (0)</target>
        </trans-unit>
        <trans-unit id="67feaa35a2d44a604538ef39106d006cede14270" translate="yes" xml:space="preserve">
          <source>Enumerable.slice (1)</source>
          <target state="translated">Перечисляемый.ломтик (1)</target>
        </trans-unit>
        <trans-unit id="976e95d4d549c47ec6aacfa3aeb87430d06ae485" translate="yes" xml:space="preserve">
          <source>Enumerable.slicing_fun (0)</source>
          <target state="translated">Enumerable.slicing_fun (0)</target>
        </trans-unit>
        <trans-unit id="8099438503374b0f111ad8c4312c5674efd4704f" translate="yes" xml:space="preserve">
          <source>Enumerable.t (0)</source>
          <target state="translated">Enumerable.t (0)</target>
        </trans-unit>
        <trans-unit id="7d2e28d9448f286359bfee7b46440bedbb9fdf58" translate="yes" xml:space="preserve">
          <source>Enumerables</source>
          <target state="translated">Enumerables</target>
        </trans-unit>
        <trans-unit id="1dc0acb1a8bb4c81550d3ac71c2122f2718c66f7" translate="yes" xml:space="preserve">
          <source>Enumerables and Streams</source>
          <target state="translated">Числители и потоки</target>
        </trans-unit>
        <trans-unit id="30d600c6cc439356af01777f989e3d24add2e962" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, by removing the elements for which function &lt;code&gt;fun&lt;/code&gt; returned duplicate elements.</source>
          <target state="translated">Перечисляет &lt;code&gt;enumerable&lt;/code&gt; , удаляя элементы, для которых функция &lt;code&gt;fun&lt;/code&gt; вернула повторяющиеся элементы.</target>
        </trans-unit>
        <trans-unit id="0710d3c7a9e2c2a7ab19f785bc7e4ac156c8c8ae" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, removing all duplicated elements.</source>
          <target state="translated">Перечисляет &lt;code&gt;enumerable&lt;/code&gt; , удаляя все повторяющиеся элементы.</target>
        </trans-unit>
        <trans-unit id="d63d851ffe5d4b54e805b90b32ec2610b7cdc775" translate="yes" xml:space="preserve">
          <source>Enumerates the &lt;code&gt;enumerable&lt;/code&gt;, returning a list where all consecutive duplicated elements are collapsed to a single element.</source>
          <target state="translated">Перечисляет &lt;code&gt;enumerable&lt;/code&gt; , возвращая список, в котором все последовательные повторяющиеся элементы свернуты в один элемент.</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">Переменные среды</target>
        </trans-unit>
        <trans-unit id="e22b06d69ee07489bc27f1054e5551d2fb3ffec1" translate="yes" xml:space="preserve">
          <source>Environment variables that are not meant to hold a value (and act basically as flags) should be set to either &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt;, for example:</source>
          <target state="translated">Переменные среды, которые не предназначены для хранения значений (и действуют в основном как флаги), должны иметь значение &lt;code&gt;1&lt;/code&gt; или &lt;code&gt;true&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="017b53c42e43b39e1f5aabf6f7280c2f777243a2" translate="yes" xml:space="preserve">
          <source>Environments</source>
          <target state="translated">Environments</target>
        </trans-unit>
        <trans-unit id="8263704ec4e031f9cd98ed43d056f7db9e2fa14d" translate="yes" xml:space="preserve">
          <source>Equal to operator. Returns &lt;code&gt;true&lt;/code&gt; if the two terms are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9ca98304ae0b29eb5edae09971f0cda610aca2" translate="yes" xml:space="preserve">
          <source>Erlang Term Storage</source>
          <target state="translated">Эрлангское терминальное хранилище</target>
        </trans-unit>
        <trans-unit id="873eaae56cb75c28c82e887676a81c9c926d3d76" translate="yes" xml:space="preserve">
          <source>Erlang VM process identifier.</source>
          <target state="translated">Идентификатор процесса VM Эрланг.</target>
        </trans-unit>
        <trans-unit id="0f56eeaacbf7d4f4fe215cd958650ad712192183" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir also have the idea of &lt;a href=&quot;#t:chardata/0&quot;&gt;&lt;code&gt;chardata/0&lt;/code&gt;&lt;/a&gt;. Chardata is very similar to IO data: the only difference is that integers in IO data represent bytes while integers in chardata represent Unicode code points. Bytes (&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;byte/0&lt;/code&gt;&lt;/a&gt;) are integers in the &lt;code&gt;0..255&lt;/code&gt; range, while Unicode code points (&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#built-in-types&quot;&gt;&lt;code&gt;char/0&lt;/code&gt;&lt;/a&gt;) are integers in the range &lt;code&gt;0..0x10FFFF&lt;/code&gt;. The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides the &lt;a href=&quot;#chardata_to_string/1&quot;&gt;&lt;code&gt;chardata_to_string/1&lt;/code&gt;&lt;/a&gt; function for chardata as the &quot;counter-part&quot; of the &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; function for IO data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d81fb4bfd2d9c41c1a7ce9b604e0403471792c0" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir also have the idea of &lt;a href=&quot;#t:chardata/0&quot;&gt;&lt;code&gt;chardata/0&lt;/code&gt;&lt;/a&gt;. Chardata is very similar to IO data: the only difference is that integers in IO data represent bytes while integers in chardata represent Unicode codepoints. Bytes (&lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;byte/0&lt;/code&gt;&lt;/a&gt;) are integers in the &lt;code&gt;0..255&lt;/code&gt; range, while Unicode codepoints (&lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;char/0&lt;/code&gt;&lt;/a&gt;) are integers in the range &lt;code&gt;0..0x10FFFF&lt;/code&gt;. The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides the &lt;a href=&quot;#chardata_to_string/1&quot;&gt;&lt;code&gt;chardata_to_string/1&lt;/code&gt;&lt;/a&gt; function for chardata as the &quot;counter-part&quot; of the &lt;a href=&quot;#iodata_to_binary/1&quot;&gt;&lt;code&gt;iodata_to_binary/1&lt;/code&gt;&lt;/a&gt; function for IO data.</source>
          <target state="translated">В Erlang и Elixir также есть идея &lt;a href=&quot;#t:chardata/0&quot;&gt; &lt;code&gt;chardata/0&lt;/code&gt; &lt;/a&gt; . Chardata очень похожи на данные ввода-вывода: единственное отличие состоит в том, что целые числа в данных ввода-вывода представляют байты, а целые числа в chardata представляют собой кодовые точки Unicode. Байты ( &lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;byte/0&lt;/code&gt; &lt;/a&gt; ) - это целые числа в диапазоне &lt;code&gt;0..255&lt;/code&gt; , а кодовые точки Unicode ( &lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;char/0&lt;/code&gt; &lt;/a&gt; ) - это целые числа в диапазоне &lt;code&gt;0..0x10FFFF&lt;/code&gt; . Модуль &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt; предоставляет &lt;a href=&quot;#chardata_to_string/1&quot;&gt; &lt;code&gt;chardata_to_string/1&lt;/code&gt; &lt;/a&gt; для chardata в качестве &quot;противоположной части&quot; функции &lt;a href=&quot;#iodata_to_binary/1&quot;&gt; &lt;code&gt;iodata_to_binary/1&lt;/code&gt; &lt;/a&gt; для данных ввода-вывода.</target>
        </trans-unit>
        <trans-unit id="257cd41d0a52105a1f464fecff0c7474573eaa0b" translate="yes" xml:space="preserve">
          <source>Erlang and Elixir are sometimes known for the capability of upgrading a node that is running in production without shutting down that node. However, this feature is not supported out of the box by Elixir releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad841c6351d40f6ce14b1c3365f66f45cf90f9a" translate="yes" xml:space="preserve">
          <source>Erlang configuration - options that handle integration with Erlang's logging facilities</source>
          <target state="translated">Конфигурация Erlang-опции,которые обрабатывают интеграцию с средствами ведения логов Erlang</target>
        </trans-unit>
        <trans-unit id="dcdbc42e4590fc1cd5b2780008879d7043463df9" translate="yes" xml:space="preserve">
          <source>Erlang errors</source>
          <target state="translated">Получение ошибок</target>
        </trans-unit>
        <trans-unit id="afd9042ead7605c46c0058e1b4e52ac063ec4da4" translate="yes" xml:space="preserve">
          <source>Erlang errors are transformed into Elixir ones when rescuing:</source>
          <target state="translated">Ошибки Эрланга при спасении трансформируются в эликсирные:</target>
        </trans-unit>
        <trans-unit id="ef09a5110ea182804c30762b32ada9f7c5b439dd" translate="yes" xml:space="preserve">
          <source>Erlang handlers run in the same process as the process logging the message/event. This gives developers more flexibility but they should avoid performing any long running action in such handlers, as it may slow down the action being executed considerably. At the moment, there is no built-in overload protection for Erlang handlers, so it is your responsibility to implement it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e47b987c75aeed2cf56f80f3a45202d7a9cade" translate="yes" xml:space="preserve">
          <source>Erlang has two modes to load code: interactive and embedded.</source>
          <target state="translated">В Erlang есть два режима загрузки кода:интерактивный и встроенный.</target>
        </trans-unit>
        <trans-unit id="c4aea0a9415c252cca77b12b8e68bf25c0600b44" translate="yes" xml:space="preserve">
          <source>Erlang libraries</source>
          <target state="translated">эрлангские библиотеки</target>
        </trans-unit>
        <trans-unit id="947adf59db0f5074b68cab24e83d10f84084f65d" translate="yes" xml:space="preserve">
          <source>Erlang projects</source>
          <target state="translated">Эрлангские проекты</target>
        </trans-unit>
        <trans-unit id="353a427c9c3948990fb1397e32a17449450dd341" translate="yes" xml:space="preserve">
          <source>Erlang&amp;rsquo;s official website has a short &lt;a href=&quot;http://www.erlang.org/course/concurrent_programming.html&quot;&gt;tutorial&lt;/a&gt; with pictures that briefly describe Erlang&amp;rsquo;s primitives for concurrent programming.</source>
          <target state="translated">На официальном сайте Erlang есть краткое &lt;a href=&quot;http://www.erlang.org/course/concurrent_programming.html&quot;&gt;руководство&lt;/a&gt; с изображениями, которые кратко описывают примитивы Erlang для параллельного программирования.</target>
        </trans-unit>
        <trans-unit id="2924249c9d3eeb99cc39153818164a0a08c129f2" translate="yes" xml:space="preserve">
          <source>Erlang&amp;rsquo;s official website has a short &lt;a href=&quot;https://www.erlang.org/course&quot;&gt;tutorial&lt;/a&gt;. There is chapter with pictures briefly describing Erlang&amp;rsquo;s primitives for &lt;a href=&quot;https://www.erlang.org/course/concurrent_programming.html&quot;&gt;concurrent programming&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b602b5d1c8c7cedbd11a4c46c7bec0f2ef6328" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 19 onwards</source>
          <target state="translated">Эрланг/ОТП 19 вперёд</target>
        </trans-unit>
        <trans-unit id="9f3b0640f155508325d5fd627bb055c21f7b1145" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 20 onwards</source>
          <target state="translated">Erlang/OTP 20 вперёд</target>
        </trans-unit>
        <trans-unit id="3c959257e030332549e20072b5db96d3e0320669" translate="yes" xml:space="preserve">
          <source>Erlang/OTP handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d3ba354eaa3fdf7c394b986d2d13ceb0a09b7f" translate="yes" xml:space="preserve">
          <source>Erlang/OTP handlers must be listed under your own application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20c6b34c6701bebbb6bc88a9d6f49d957b3f1ee" translate="yes" xml:space="preserve">
          <source>Erlang/OTP integration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0240f7d16642d7d18aa4135e9508d4430ca6ed28" translate="yes" xml:space="preserve">
          <source>Erlang/OTP versioning is independent from the versioning of Elixir. Each version of Elixir supports a specific range of Erlang/OTP versions. The compatibility table is shown below.</source>
          <target state="translated">Версионирование Erlang/OTP не зависит от версионирования Elixir.Каждая версия Elixir поддерживает определенный диапазон версий Erlang/OTP.Таблица совместимости показана ниже.</target>
        </trans-unit>
        <trans-unit id="95b539190ee1df5b25c9d30c7a60632c2c6242b6" translate="yes" xml:space="preserve">
          <source>ErlangError</source>
          <target state="translated">ErlangError</target>
        </trans-unit>
        <trans-unit id="eb887d05f639b63c61d49ed79af8fbf4426605b6" translate="yes" xml:space="preserve">
          <source>ErlangError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ErlangError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">обработка ошибок</target>
        </trans-unit>
        <trans-unit id="6a37b79ee438a25b4b00f639862f12f01079bb8d" translate="yes" xml:space="preserve">
          <source>Error logger configuration</source>
          <target state="translated">конфигурация регистратора ошибок</target>
        </trans-unit>
        <trans-unit id="9497fa3a6a15769b096afdea76d16a9bb93c4394" translate="yes" xml:space="preserve">
          <source>Error reasons</source>
          <target state="translated">Ошибочные причины</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="e4b51562d8691be50e95ec4d102a96ec94cfc7fc" translate="yes" xml:space="preserve">
          <source>Errors (or &lt;em&gt;exceptions&lt;/em&gt;) are used when exceptional things happen in the code. A sample error can be retrieved by trying to add a number into an atom:</source>
          <target state="translated">Ошибки (или &lt;em&gt;исключения&lt;/em&gt; ) используются, когда в коде происходят исключительные вещи. Пример ошибки можно получить, попытавшись добавить число в атом:</target>
        </trans-unit>
        <trans-unit id="1e769d29496e91df4803194e858296cef49f583c" translate="yes" xml:space="preserve">
          <source>Errors can be &lt;strong&gt;rescued&lt;/strong&gt; using the &lt;code&gt;try/rescue&lt;/code&gt; construct:</source>
          <target state="translated">Ошибки можно &lt;strong&gt;исправить&lt;/strong&gt; с помощью конструкции &lt;code&gt;try/rescue&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ace44333765fe041260545be00bfe6b34903e900" translate="yes" xml:space="preserve">
          <source>Errors in guards</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7f25adbd68385b52715a0e769e2e3468d082ed" translate="yes" xml:space="preserve">
          <source>Escape characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf06e4f5765ec1423667355b26bedd03532387d" translate="yes" xml:space="preserve">
          <source>Escapes a string to be literally matched in a regex.</source>
          <target state="translated">Спасается от струны,которая в буквальном смысле слова совпадает с регексом.</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="7e30234707fb1dda8ea3159dd78fbf5f465fb228" translate="yes" xml:space="preserve">
          <source>Escripts are installed at &lt;code&gt;~/.mix/escripts&lt;/code&gt;. Add that path to your &lt;code&gt;PATH&lt;/code&gt; environment variable to be able to run installed escripts from any directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc5f1f3afc3241e14ccf2fda82512fad9553a23" translate="yes" xml:space="preserve">
          <source>Escripts should be used as a mechanism to share scripts between developers and not as a deployment mechanism. For running live systems, consider using &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; or building releases. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; module for more information on systems life-cycles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef08760354a34230fab73487dfba3c92eef3db07" translate="yes" xml:space="preserve">
          <source>Escripts should be used as a mechanism to share scripts between developers and not as a deployment mechanism. For running live systems, consider using &lt;a href=&quot;mix.tasks.run&quot;&gt;&lt;code&gt;mix run&lt;/code&gt;&lt;/a&gt; or building releases. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; module for more information on systems life-cycles.</source>
          <target state="translated">Эскрипты следует использовать как механизм для обмена скриптами между разработчиками, а не как механизм развертывания. Для запуска живых систем рассмотрите возможность использования &lt;a href=&quot;mix.tasks.run&quot;&gt; &lt;code&gt;mix run&lt;/code&gt; &lt;/a&gt; версий или сборочных версий. См. Модуль &amp;laquo; &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt; &amp;raquo; для получения дополнительной информации о жизненных циклах систем.</target>
        </trans-unit>
        <trans-unit id="9a5a63b505c94b9715c6cb22738effadf43970a2" translate="yes" xml:space="preserve">
          <source>Establishes a connection to &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">Устанавливает соединение с &lt;code&gt;node&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5197d13a701e91968e7385a64eaafa020ebb9b3e" translate="yes" xml:space="preserve">
          <source>Evals the given file.</source>
          <target state="translated">Сопоставляет данный файл.</target>
        </trans-unit>
        <trans-unit id="a80e33a10ee3ca88cd7700527b66fae439803baa" translate="yes" xml:space="preserve">
          <source>Evaluate a string (&lt;a href=&quot;#eval_string/3&quot;&gt;&lt;code&gt;eval_string/3&lt;/code&gt;&lt;/a&gt;) or a file (&lt;a href=&quot;#eval_file/3&quot;&gt;&lt;code&gt;eval_file/3&lt;/code&gt;&lt;/a&gt;) directly. This is the simplest API to use but also the slowest, since the code is evaluated and not compiled before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61e6ac1811baae3135839c7b54f099f020838b7" translate="yes" xml:space="preserve">
          <source>Evaluate a string (&lt;code&gt;eval_string&lt;/code&gt;) or a file (&lt;code&gt;eval_file&lt;/code&gt;) directly. This is the simplest API to use but also the slowest, since the code is evaluated and not compiled before.</source>
          <target state="translated">Оценить строку ( &lt;code&gt;eval_string&lt;/code&gt; ) или файл ( &lt;code&gt;eval_file&lt;/code&gt; ) напрямую. Это самый простой в использовании API, но также и самый медленный, поскольку код оценивается и не компилируется раньше.</target>
        </trans-unit>
        <trans-unit id="b6b73d4e37c0e2fc6bcd10607ad1cdb1b13313ab" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;fun&lt;/code&gt; and puts the result under &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; unless &lt;code&gt;key&lt;/code&gt; is already present.</source>
          <target state="translated">Оценивает &lt;code&gt;fun&lt;/code&gt; и помещает результат под &lt;code&gt;key&lt;/code&gt; на &lt;code&gt;map&lt;/code&gt; если &lt;code&gt;key&lt;/code&gt; еще не указан.</target>
        </trans-unit>
        <trans-unit id="47fea9e50d94c5ba5334f9182ab4da272971ff69" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;fun&lt;/code&gt; and puts the result under &lt;code&gt;key&lt;/code&gt; in keyword list unless &lt;code&gt;key&lt;/code&gt; is already present.</source>
          <target state="translated">Оценивает &lt;code&gt;fun&lt;/code&gt; и помещает результат под &lt;code&gt;key&lt;/code&gt; в списке &lt;code&gt;key&lt;/code&gt; слов, если ключ еще не указан.</target>
        </trans-unit>
        <trans-unit id="378c49e24c10c27a713c2ca33d351716056ef24a" translate="yes" xml:space="preserve">
          <source>Evaluates and copy templates at &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a2755ea234063a3a9b34d6399df316742199aa" translate="yes" xml:space="preserve">
          <source>Evaluates the &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; filters against the given &lt;code&gt;tags&lt;/code&gt; to determine if tests should be skipped or excluded.</source>
          <target state="translated">Оценивает фильтры &lt;code&gt;include&lt;/code&gt; и &lt;code&gt;exclude&lt;/code&gt; по заданным &lt;code&gt;tags&lt;/code&gt; чтобы определить, следует ли пропустить тесты или исключить их.</target>
        </trans-unit>
        <trans-unit id="a872b79753ae8c15cc036688d28a6487ac1713c4" translate="yes" xml:space="preserve">
          <source>Evaluates the configuration &lt;code&gt;contents&lt;/code&gt; for the given &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">Оценивает &lt;code&gt;contents&lt;/code&gt; конфигурации для данного &lt;code&gt;file&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d2ad4fd562a8770695759664566e68c79e896d7" translate="yes" xml:space="preserve">
          <source>Evaluates the contents given by &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">Оценивает содержимое, указанное в &lt;code&gt;string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f66e28bdcb030fa5267d28739b480d4ccf00895" translate="yes" xml:space="preserve">
          <source>Evaluates the expression corresponding to the first clause that evaluates to a truthy value.</source>
          <target state="translated">Оценивает выражение,соответствующее первому пункту,которое оценивает до правдоподобного значения.</target>
        </trans-unit>
        <trans-unit id="1ba5f7241081077b03b80183e469003ca9d8656f" translate="yes" xml:space="preserve">
          <source>Evaluates the given configuration file.</source>
          <target state="translated">Оценивает данный конфигурационный файл.</target>
        </trans-unit>
        <trans-unit id="f9da9d74593adcfa13d94962a59c2dd76ee78247" translate="yes" xml:space="preserve">
          <source>Evaluates the given expressions and handles any error, exit, or throw that may have happened.</source>
          <target state="translated">Оценивает данные выражения и обрабатывает любую ошибку,выход или бросок,которые могли произойти.</target>
        </trans-unit>
        <trans-unit id="8c971533ea3061f79d23aaa5efa90e539f841e09" translate="yes" xml:space="preserve">
          <source>Evaluates the quoted contents in the given module's context.</source>
          <target state="translated">Оценивает цитируемое содержимое в контексте данного модуля.</target>
        </trans-unit>
        <trans-unit id="faed542c6d7a022474593aebff34b62313141b57" translate="yes" xml:space="preserve">
          <source>Evaluates the quoted contents.</source>
          <target state="translated">Оценивает цитируемое содержание.</target>
        </trans-unit>
        <trans-unit id="211455d468ff468d1666caa77c6ea4a591130f77" translate="yes" xml:space="preserve">
          <source>Evaluating configuration</source>
          <target state="translated">Оценка конфигурации</target>
        </trans-unit>
        <trans-unit id="af2f0cacf83a79f7f113163a613ddccc7608558d" translate="yes" xml:space="preserve">
          <source>Even a map is represented as a call to &lt;code&gt;%{}&lt;/code&gt;:</source>
          <target state="translated">Даже карта представлена ​​как вызов &lt;code&gt;%{}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9379ba740718a45c562052c55dae060f6e11aa7a" translate="yes" xml:space="preserve">
          <source>Even if the timer had expired and the message was sent, this function does not tell you if the timeout message has arrived at its destination yet.</source>
          <target state="translated">Даже если таймер истек и сообщение было отправлено,эта функция не сообщает,прибыло ли еще сообщение о таймауте по назначению.</target>
        </trans-unit>
        <trans-unit id="27ed9c8d1ab5b1899cff5f812cb51b56f1af0736" translate="yes" xml:space="preserve">
          <source>Even if we have type-specific functions for getting the size built into Elixir (such as &lt;code&gt;tuple_size/1&lt;/code&gt;), we could implement a generic &lt;code&gt;Size&lt;/code&gt; protocol that all data structures for which size is pre-computed would implement.</source>
          <target state="translated">Даже если у нас есть зависящие от типа функции для получения размера, встроенные в Elixir (например, &lt;code&gt;tuple_size/1&lt;/code&gt; ), мы могли бы реализовать общий протокол &lt;code&gt;Size&lt;/code&gt; , который реализовали бы все структуры данных, для которых размер предварительно вычислен.</target>
        </trans-unit>
        <trans-unit id="9d8348e73cb5ab059583fd7f108ed8a332dfe09b" translate="yes" xml:space="preserve">
          <source>Even though Elixir attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Elixir functions and it&amp;rsquo;s considered to be bad style to use them when they&amp;rsquo;re not necessary. So write macros responsibly.</source>
          <target state="translated">Несмотря на то, что Elixir делает все возможное, чтобы обеспечить безопасную среду для макросов, основная ответственность за написание чистого кода с помощью макросов ложится на разработчиков. Макросы сложнее писать, чем обычные функции Elixir, и считается плохим стилем использовать их, когда они не нужны. Так что пишите макросы ответственно.</target>
        </trans-unit>
        <trans-unit id="52a8ac08291fe93f3d696a3c45b1d1387494b7dc" translate="yes" xml:space="preserve">
          <source>Even though Elixir attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Elixir functions and it's considered to be bad style to use them when they're not necessary. So write macros responsibly.</source>
          <target state="translated">Несмотря на то,что Elixir делает все возможное,чтобы обеспечить безопасную среду для макросов,основная ответственность за написание чистого кода с макросами ложится на разработчиков.Макросы сложнее писать,чем обычные функции Elixir,и использовать их,когда в них нет необходимости,считается плохим стилем.Поэтому пишите макросы ответственно.</target>
        </trans-unit>
        <trans-unit id="b287135931c568aaa11f51a4123249a43f85f9eb" translate="yes" xml:space="preserve">
          <source>Even though lists preserve the user ordering, the functions in &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Keyword&lt;/code&gt;&lt;/a&gt; do not guarantee any ordering. For example, if you invoke &lt;code&gt;Keyword.put(opts, new_key, new_value)&lt;/code&gt;, there is no guarantee to where &lt;code&gt;new_key&lt;/code&gt; will be added (to the front, to the end, or anywhere else).</source>
          <target state="translated">Несмотря на то, что списки сохраняют порядок пользователей, функции в &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Keyword&lt;/code&gt; &lt;/a&gt; не гарантируют никакого порядка. Например, если вы вызываете &lt;code&gt;Keyword.put(opts, new_key, new_value)&lt;/code&gt; , нет гарантии, куда будет добавлен &lt;code&gt;new_key&lt;/code&gt; (вперед, в конец или где-либо еще).</target>
        </trans-unit>
        <trans-unit id="028b9d4259c03a084cc43fe3d1014cc325f783d4" translate="yes" xml:space="preserve">
          <source>Even though the directory is empty and there is no &lt;code&gt;.app&lt;/code&gt; file it is considered the application directory based on the name &quot;foo/ebin&quot;. The name may contain a dash &lt;code&gt;-&lt;/code&gt; which is considered to be the app version and it is removed for the lookup purposes:</source>
          <target state="translated">Несмотря на то, что каталог пуст и нет файла &lt;code&gt;.app&lt;/code&gt; , он считается каталогом приложения на основании имени &amp;laquo;foo / ebin&amp;raquo;. Название может содержать тир &lt;code&gt;-&lt;/code&gt; которая считается версией приложения и он удаляется для целей подстановки:</target>
        </trans-unit>
        <trans-unit id="c198b47773d307f8ee645f6d155cb12a7d81efef" translate="yes" xml:space="preserve">
          <source>Even though the head of the list is not &lt;code&gt;nil&lt;/code&gt;, the first clause for &lt;code&gt;not_nil_head?/1&lt;/code&gt; fails because the expression does not evaluate to &lt;code&gt;true&lt;/code&gt;, but to &lt;code&gt;&quot;some_value&quot;&lt;/code&gt;, therefore triggering the second clause which returns &lt;code&gt;false&lt;/code&gt;. To make the guard behave correctly, you must ensure that the guard evaluates to &lt;code&gt;true&lt;/code&gt;, like so:</source>
          <target state="translated">Несмотря на то, что &lt;code&gt;not_nil_head?/1&lt;/code&gt; списка не равен &lt;code&gt;nil&lt;/code&gt; , первое предложение not_nil_head? / 1 завершается ошибкой, потому что выражение не оценивается как &lt;code&gt;true&lt;/code&gt; , а как &lt;code&gt;&quot;some_value&quot;&lt;/code&gt; , поэтому запускается второе предложение, которое возвращает &lt;code&gt;false&lt;/code&gt; . Чтобы охранник вел себя правильно, вы должны убедиться, что он оценивает значение &lt;code&gt;true&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="0521395297ab7a58030d272e2c72be5c8cdef7df" translate="yes" xml:space="preserve">
          <source>Even though the match works, &lt;code&gt;assert&lt;/code&gt; still expects a truth value. In such cases, simply use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt;&lt;code&gt;Kernel.==/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt;&lt;code&gt;Kernel.match?/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Несмотря на то, что совпадение работает, &lt;code&gt;assert&lt;/code&gt; по- прежнему ожидает значения истинности. В таких случаях просто используйте &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#==/2&quot;&gt; &lt;code&gt;Kernel.==/2&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#match?/2&quot;&gt; &lt;code&gt;Kernel.match?/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e115b0b23e56d703ace76f71257a63ef9824a34f" translate="yes" xml:space="preserve">
          <source>Even though the representation changed, the raw data does remain a list of numbers, which can be handled as such:</source>
          <target state="translated">Несмотря на то,что представление изменилось,необработанные данные все же остаются списком номеров,с которыми можно работать как с таковыми:</target>
        </trans-unit>
        <trans-unit id="84e3c9de2ccf9da0f358458d3784bc3f849f3c2c" translate="yes" xml:space="preserve">
          <source>Even though we haven't specified &lt;code&gt;--debug&lt;/code&gt; in the list of switches, it is part of the returned options. This would also work:</source>
          <target state="translated">Несмотря на то, что мы не указали &lt;code&gt;--debug&lt;/code&gt; в списке переключателей, он является частью возвращаемых параметров. Это также сработает:</target>
        </trans-unit>
        <trans-unit id="7cb4e4b7449c91102c58fcbb978127750613197b" translate="yes" xml:space="preserve">
          <source>Even with such guarantees, the developer plays a big role when writing macros responsibly. If you are confident you need to resort to macros, remember that macros are not your API. Keep your macro definitions short, including their quoted contents. For example, instead of writing a macro like this:</source>
          <target state="translated">Даже при таких гарантиях разработчик играет большую роль при ответственном написании макросов.Если вы уверены,что вам нужно прибегать к макросам,помните,что макросы-это не ваш API.Сохраните короткие определения макросов,включая их цитируемое содержимое.Например,вместо того,чтобы писать подобный макрос:</target>
        </trans-unit>
        <trans-unit id="f153167a1bbb1f584f7f422c6cb126c95946d20e" translate="yes" xml:space="preserve">
          <source>Every describe block receives a name which is used as prefix for upcoming tests. Inside a block, &lt;a href=&quot;exunit.callbacks#setup/1&quot;&gt;&lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt;&lt;/a&gt; may be invoked and it will define a setup callback to run only for the current block. The describe name is also added as a tag, allowing developers to run tests for specific blocks.</source>
          <target state="translated">Каждый блок описания получает имя, которое используется в качестве префикса для предстоящих тестов. Внутри блока может быть вызван &lt;a href=&quot;exunit.callbacks#setup/1&quot;&gt; &lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt; ,&lt;/a&gt; который определит обратный вызов установки, который будет запускаться только для текущего блока. Имя описания также добавляется как тег, позволяющий разработчикам запускать тесты для определенных блоков.</target>
        </trans-unit>
        <trans-unit id="a46c9a7fca545c132d8df109dd8dcaca95a3c354" translate="yes" xml:space="preserve">
          <source>Every describe block receives a name which is used as prefix for upcoming tests. Inside a block, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#setup/1&quot;&gt;&lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt;&lt;/a&gt; may be invoked and it will define a setup callback to run only for the current block. The describe name is also added as a tag, allowing developers to run tests for specific blocks.</source>
          <target state="translated">Каждый блок описания получает имя, которое используется в качестве префикса для предстоящих тестов. Внутри блока может быть вызван &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Callbacks.html#setup/1&quot;&gt; &lt;code&gt;ExUnit.Callbacks.setup/1&lt;/code&gt; &lt;/a&gt; , и он определит обратный вызов установки, который будет запускаться только для текущего блока. Имя описания также добавляется как тег, позволяющий разработчикам запускать тесты для определенных блоков.</target>
        </trans-unit>
        <trans-unit id="6ef3d6f408824f6647a6e0d3de1a30549693b5c2" translate="yes" xml:space="preserve">
          <source>Every function clause dispatches the appropriate command to the &lt;code&gt;KV.Registry&lt;/code&gt; server that we registered during the &lt;code&gt;:kv&lt;/code&gt; application startup. Since our &lt;code&gt;:kv_server&lt;/code&gt; depends on the &lt;code&gt;:kv&lt;/code&gt; application, it is completely fine to depend on the services it provides.</source>
          <target state="translated">Каждое предложение функции отправляет соответствующую команду на сервер &lt;code&gt;KV.Registry&lt;/code&gt; , который мы зарегистрировали во время запуска приложения &lt;code&gt;:kv&lt;/code&gt; . Поскольку наш &lt;code&gt;:kv_server&lt;/code&gt; зависит от приложения &lt;code&gt;:kv&lt;/code&gt; , вполне нормально зависеть от предоставляемых им сервисов.</target>
        </trans-unit>
        <trans-unit id="40baf8ceb490ed83843fc93e589192534f9511aa" translate="yes" xml:space="preserve">
          <source>Every new test starts on a new line, with an &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix. Multiline expressions can be used by prefixing subsequent lines with either &lt;code&gt;...&amp;gt;&lt;/code&gt; (recommended) or &lt;code&gt;iex&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">Каждый новый тест начинается с новой строки с префиксом &lt;code&gt;iex&amp;gt;&lt;/code&gt; . Можно использовать многострочные выражения, добавляя к последующим строкам &lt;code&gt;iex&amp;gt;&lt;/code&gt; &lt;code&gt;...&amp;gt;&lt;/code&gt; (рекомендуется) или iex&amp;gt; .</target>
        </trans-unit>
        <trans-unit id="76e353e9635feb9762b1896c7c1b95987d4b25d4" translate="yes" xml:space="preserve">
          <source>Every project has a &lt;code&gt;mix.exs&lt;/code&gt; file, with instructions on how to build, compile, run tests, and so on. Libraries commonly have a &lt;code&gt;lib&lt;/code&gt; directory, which includes Elixir source code, and a &lt;code&gt;test&lt;/code&gt; directory. A &lt;code&gt;src&lt;/code&gt; directory may also exist for Erlang sources.</source>
          <target state="translated">В каждом проекте есть файл &lt;code&gt;mix.exs&lt;/code&gt; с инструкциями по сборке, компиляции, запуску тестов и так далее. Библиотеки обычно имеют каталог &lt;code&gt;lib&lt;/code&gt; , который включает исходный код Elixir, и каталог &lt;code&gt;test&lt;/code&gt; . &lt;code&gt;src&lt;/code&gt; каталог также может существовать для источников Эрланга.</target>
        </trans-unit>
        <trans-unit id="02a22b2e5fd456a7ae0a76d486db20f724d54096" translate="yes" xml:space="preserve">
          <source>Every release contains an environment file, named &lt;code&gt;env.sh&lt;/code&gt; on Unix-like systems and &lt;code&gt;env.bat&lt;/code&gt; on Windows machines, that executes before the Elixir system starts. In this file, you can execute any OS-level code, such as invoke other applications, set environment variables and so on. Some of those environment variables can even configure how the release itself runs.</source>
          <target state="translated">Каждый выпуск содержит файл среды с именем &lt;code&gt;env.sh&lt;/code&gt; в Unix-подобных системах и &lt;code&gt;env.bat&lt;/code&gt; на машинах Windows, который запускается до запуска системы Elixir. В этом файле вы можете выполнять любой код уровня ОС, например вызывать другие приложения, устанавливать переменные среды и так далее. Некоторые из этих переменных среды могут даже настроить работу самого выпуска.</target>
        </trans-unit>
        <trans-unit id="b3ec0c5ca215e236f63402da7cfee38e03a48ba1" translate="yes" xml:space="preserve">
          <source>Every time a file is opened, Elixir spawns a new process. Writing to a file is equivalent to sending messages to the process that writes to the file descriptor.</source>
          <target state="translated">Каждый раз,когда файл открывается,Elixir запускает новый процесс.Запись в файл эквивалентна отправке сообщений процессу,который записывает в дескриптор файла.</target>
        </trans-unit>
        <trans-unit id="d10c5b0b93979a90184cbb51fe0a0e036d577833" translate="yes" xml:space="preserve">
          <source>Every time an attribute is read inside a function, a snapshot of its current value is taken. In other words, the value is read at compilation time and not at runtime. As we are going to see, this also makes attributes useful as storage during module compilation.</source>
          <target state="translated">Каждый раз при считывании атрибута внутри функции делается снимок его текущего значения.Другими словами,значение считывается во время компиляции,а не во время исполнения.Как мы увидим,это также делает атрибуты полезными в качестве хранилища при компиляции модуля.</target>
        </trans-unit>
        <trans-unit id="8195a151075d5ab9fbd9a600b260682c39388d0f" translate="yes" xml:space="preserve">
          <source>Every time an attribute is read inside a function, a snapshot of its current value is taken. In other words, the value is read at compilation time and not at runtime. As we are going to see, this also makes attributes useful to be used as storage during module compilation.</source>
          <target state="translated">Каждый раз при считывании атрибута внутри функции делается снимок его текущего значения.Другими словами,значение считывается во время компиляции,а не во время исполнения.Как мы увидим,это также делает атрибуты полезными для использования в качестве хранилища при компиляции модуля.</target>
        </trans-unit>
        <trans-unit id="78b99dda1ab8cad5aa5dc088e4709cd8ffa9a689" translate="yes" xml:space="preserve">
          <source>Every time we need to look up a bucket, we need to send a message to the registry. In case our registry is being accessed concurrently by multiple processes, the registry may become a bottleneck!</source>
          <target state="translated">Каждый раз,когда нам нужно найти ведро,мы должны отправить сообщение в реестр.В случае,если к нашему реестру одновременно обращаются несколько процессов,реестр может стать узким местом!</target>
        </trans-unit>
        <trans-unit id="62cee6babe5c5a8fa4e03c567fac109731766e5f" translate="yes" xml:space="preserve">
          <source>Every time you add a new child to a supervisor, it is important to evaluate if the supervisor strategy is correct as well as the order of child processes. In this case, we are using &lt;code&gt;:one_for_one&lt;/code&gt; and the &lt;code&gt;KV.Registry&lt;/code&gt; is started before &lt;code&gt;KV.BucketSupervisor&lt;/code&gt;.</source>
          <target state="translated">Каждый раз, когда вы добавляете нового дочернего элемента к супервизору, важно оценивать правильность стратегии супервизора, а также порядок дочерних процессов. В этом случае мы используем &lt;code&gt;:one_for_one&lt;/code&gt; , а &lt;code&gt;KV.Registry&lt;/code&gt; запускается до &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b446cdb18e309af06e8229f9b0fda9244ac6da3e" translate="yes" xml:space="preserve">
          <source>Every time you concatenate binaries or use interpolation (&lt;code&gt;#{}&lt;/code&gt;) you are making copies of those binaries. However, in many cases you don't need the complete binary while you create it, but only at the end to print it out or send it somewhere. In such cases, you can construct the binary by creating IO data:</source>
          <target state="translated">Каждый раз, когда вы объединяете двоичные файлы или используете интерполяцию ( &lt;code&gt;#{}&lt;/code&gt; ), вы делаете копии этих двоичных файлов. Однако во многих случаях вам не нужен полный двоичный файл при его создании, а только в конце, чтобы распечатать или отправить куда-нибудь. В таких случаях вы можете создать двоичный файл, создав данные ввода-вывода:</target>
        </trans-unit>
        <trans-unit id="ed798ff113b14474967cd268a8bbd91a2314f668" translate="yes" xml:space="preserve">
          <source>Every time you do a &lt;a href=&quot;#call/3&quot;&gt;&lt;code&gt;GenServer.call/3&lt;/code&gt;&lt;/a&gt;, the client will send a message that must be handled by the &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; callback in the GenServer. A &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; message must be handled by &lt;a href=&quot;#c:handle_cast/2&quot;&gt;&lt;code&gt;handle_cast/2&lt;/code&gt;&lt;/a&gt;. There are 7 possible callbacks to be implemented when you use a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;. The only required callback is &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый раз, когда вы выполняете &lt;a href=&quot;#call/3&quot;&gt; &lt;code&gt;GenServer.call/3&lt;/code&gt; &lt;/a&gt; , клиент отправляет сообщение, которое должно быть обработано обратным вызовом handle_call &lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt; в GenServer. &lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt; сообщение должно быть обработано &lt;a href=&quot;#c:handle_cast/2&quot;&gt; &lt;code&gt;handle_cast/2&lt;/code&gt; &lt;/a&gt; . При использовании &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; можно реализовать 7 возможных обратных вызовов . Единственный требуемый обратный вызов - это &lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="962675beca29d3a850376db901731b3eb3593d3c" translate="yes" xml:space="preserve">
          <source>Every time you do a &lt;a href=&quot;genserver#call/3&quot;&gt;&lt;code&gt;GenServer.call/3&lt;/code&gt;&lt;/a&gt;, the client will send a message that must be handled by the &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; callback in the GenServer. A &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; message must be handled by &lt;a href=&quot;#c:handle_cast/2&quot;&gt;&lt;code&gt;handle_cast/2&lt;/code&gt;&lt;/a&gt;. There are 7 possible callbacks to be implemented when you use a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;. The only required callback is &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Каждый раз, когда вы выполняете &lt;a href=&quot;genserver#call/3&quot;&gt; &lt;code&gt;GenServer.call/3&lt;/code&gt; &lt;/a&gt; , клиент будет отправлять сообщение, которое должно быть обработано обратным вызовом handle_call &lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt; в GenServer. &lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt; сообщение должно быть обработано &lt;a href=&quot;#c:handle_cast/2&quot;&gt; &lt;code&gt;handle_cast/2&lt;/code&gt; &lt;/a&gt; . При использовании &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; можно реализовать 7 возможных обратных вызовов . Единственный требуемый обратный вызов - это &lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3205df423b3d81a662d949f234ea958bc947b117" translate="yes" xml:space="preserve">
          <source>Every value in the map is a string, and these are:</source>
          <target state="translated">Каждое значение на карте-это строка,и это так:</target>
        </trans-unit>
        <trans-unit id="bd021f13376bc32f27e40804859460a61c19bc80" translate="yes" xml:space="preserve">
          <source>Everything that is inside the function we passed to the agent happens in the agent process. In this case, since the agent process is the one receiving and responding to our messages, we say the agent process is the server. Everything outside the function is happening in the client.</source>
          <target state="translated">Все,что находится внутри функции,которую мы передали агенту,происходит в процессе работы агента.В данном случае,поскольку процесс агента является тем,который принимает и отвечает на наши сообщения,мы говорим,что процесс агента является сервером.Все,что происходит вне функции,происходит в клиенте.</target>
        </trans-unit>
        <trans-unit id="1cf46969c22298bcd54d98e6e2c526dc85b4471b" translate="yes" xml:space="preserve">
          <source>Everything we have done so far could have been implemented with an &lt;code&gt;Agent&lt;/code&gt;. In this section, we will see one of many things that we can achieve with a GenServer that is not possible with an Agent.</source>
          <target state="translated">Все, что мы сделали до сих пор, можно было реализовать с помощью &lt;code&gt;Agent&lt;/code&gt; . В этом разделе мы увидим одну из многих вещей, которых мы можем достичь с помощью GenServer, чего невозможно достичь с помощью агента.</target>
        </trans-unit>
        <trans-unit id="76820f41cc3743792e89eb2f8f24b62c9538f00b" translate="yes" xml:space="preserve">
          <source>ExUnit</source>
          <target state="translated">ExUnit</target>
        </trans-unit>
        <trans-unit id="5c93a2b236252a89748bc06f469e33d5dc2f6a4b" translate="yes" xml:space="preserve">
          <source>ExUnit automatically creates a temporary directory for tests tagged with &lt;code&gt;:tmp_dir&lt;/code&gt; and puts the path to that directory into the test context. The directory is removed before being created to ensure we start with a blank slate.</source>
          <target state="translated">ExUnit автоматически создает временный каталог для тестов с тегом &lt;code&gt;:tmp_dir&lt;/code&gt; и помещает путь к этому каталогу в контекст теста. Перед созданием каталог удаляется, чтобы гарантировать, что мы начнем с чистого листа.</target>
        </trans-unit>
        <trans-unit id="b0bdc79e9fc2af1de5a45467b3f1630138afbfe1" translate="yes" xml:space="preserve">
          <source>ExUnit can optionally suppress printing of log messages that are generated during a test. Log messages generated while running a test are captured and only if the test fails are they printed to aid with debugging.</source>
          <target state="translated">ExUnit может опционально подавлять печать лог-сообщений,которые генерируются во время тестирования.Сообщения журнала,генерируемые во время выполнения теста,перехватываются и только в случае неудачи теста распечатываются для облегчения отладки.</target>
        </trans-unit>
        <trans-unit id="c48c9be568f6b4c0f2e197839d3d8f36c2515f00" translate="yes" xml:space="preserve">
          <source>ExUnit provides tags and filtering functionality that allow developers to select which tests to run. The most common functionality is to exclude some particular tests from running by default in your test helper file:</source>
          <target state="translated">ExUnit предоставляет теги и функциональность фильтрации,которые позволяют разработчикам выбирать,какие тесты запускать.Наиболее распространенной функциональностью является исключение некоторых конкретных тестов из запуска по умолчанию в файле помощника теста:</target>
        </trans-unit>
        <trans-unit id="745dfe2a60f037338c2fefadc9162188f364f731" translate="yes" xml:space="preserve">
          <source>ExUnit supports the following options:</source>
          <target state="translated">ExUnit поддерживает следующие опции:</target>
        </trans-unit>
        <trans-unit id="2a6345907bef5ae0698454dc9d06ee0ed677f2c2" translate="yes" xml:space="preserve">
          <source>ExUnit.AssertionError</source>
          <target state="translated">ExUnit.AssertionError</target>
        </trans-unit>
        <trans-unit id="7bca0a1e09b5a1e6a12113e9ce6109c131e65f8d" translate="yes" xml:space="preserve">
          <source>ExUnit.AssertionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.AssertionError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f25c6298726d908d1e5e794bcc788478aa5fad10" translate="yes" xml:space="preserve">
          <source>ExUnit.Assertions</source>
          <target state="translated">ExUnit.Assertions</target>
        </trans-unit>
        <trans-unit id="57cef9f68db32989085431b21b29a52b82750643" translate="yes" xml:space="preserve">
          <source>ExUnit.Callbacks</source>
          <target state="translated">ExUnit.Callbacks</target>
        </trans-unit>
        <trans-unit id="b3d66fa6516f4ac426d6095179546b33f36c0614" translate="yes" xml:space="preserve">
          <source>ExUnit.CaptureIO</source>
          <target state="translated">ExUnit.CaptureIO</target>
        </trans-unit>
        <trans-unit id="2ad208584040b9fe065269a5120b26089443ba8f" translate="yes" xml:space="preserve">
          <source>ExUnit.CaptureLog</source>
          <target state="translated">ExUnit.CaptureLog</target>
        </trans-unit>
        <trans-unit id="b2783ae3bb7e24c853deac54a917d583149053c2" translate="yes" xml:space="preserve">
          <source>ExUnit.Case</source>
          <target state="translated">ExUnit.Case</target>
        </trans-unit>
        <trans-unit id="987b4f38599b32760dd676508e3a70f39b41abee" translate="yes" xml:space="preserve">
          <source>ExUnit.CaseTemplate</source>
          <target state="translated">ExUnit.CaseTemplate</target>
        </trans-unit>
        <trans-unit id="53d1f918a06cc534372a86260796a2d4c309360f" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest</source>
          <target state="translated">ExUnit.DocTest</target>
        </trans-unit>
        <trans-unit id="d9999b4f8af1e866e1f0ea61762d5c1cc8ad2341" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest.Error</source>
          <target state="translated">ExUnit.DocTest.Error</target>
        </trans-unit>
        <trans-unit id="67f2a3042727823ccf7dbd9817c09cbbb8efa9a4" translate="yes" xml:space="preserve">
          <source>ExUnit.DocTest.Error &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DocTest.Error &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="704ab5cbebf8d2029c97c7f45718c1bb4afd3696" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateDescribeError</source>
          <target state="translated">ExUnit.DuplicateDescribeError</target>
        </trans-unit>
        <trans-unit id="aa1d2c3323c831aec609875e9f0efa265c871e03" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateDescribeError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DuplicateDescribeError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1405ead3862a5cfca420a49f538bc241594f997e" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateTestError</source>
          <target state="translated">ExUnit.DuplicateTestError</target>
        </trans-unit>
        <trans-unit id="2a268d99fb56998619707be3b9214a541f86d7ab" translate="yes" xml:space="preserve">
          <source>ExUnit.DuplicateTestError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.DuplicateTestError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d7bd9d677f0a9c6dc45310d081af8fcc4ca6e2ec" translate="yes" xml:space="preserve">
          <source>ExUnit.Filters</source>
          <target state="translated">ExUnit.Filters</target>
        </trans-unit>
        <trans-unit id="f8206f0d81a07fa8af2ac0840c2bae2ed2f08165" translate="yes" xml:space="preserve">
          <source>ExUnit.Formatter</source>
          <target state="translated">ExUnit.Formatter</target>
        </trans-unit>
        <trans-unit id="229fc09a3b8e6efa5ac9d2ca8a11a9f502333ec1" translate="yes" xml:space="preserve">
          <source>ExUnit.MultiError</source>
          <target state="translated">ExUnit.MultiError</target>
        </trans-unit>
        <trans-unit id="735227bd3ecbb542e7953b335de901a172e5d02e" translate="yes" xml:space="preserve">
          <source>ExUnit.MultiError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.MultiError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c5c72bd93dc7e3f0a7d2fffbd54cf9bb0f675038" translate="yes" xml:space="preserve">
          <source>ExUnit.Test</source>
          <target state="translated">ExUnit.Test</target>
        </trans-unit>
        <trans-unit id="97bb13a74b9a963a04a1d616ace7b7ad0af2e626" translate="yes" xml:space="preserve">
          <source>ExUnit.TestModule</source>
          <target state="translated">ExUnit.TestModule</target>
        </trans-unit>
        <trans-unit id="f755d37b9e89df3ed4f26779dc2f46df095cbb0b" translate="yes" xml:space="preserve">
          <source>ExUnit.TimeoutError</source>
          <target state="translated">ExUnit.TimeoutError</target>
        </trans-unit>
        <trans-unit id="0eb19ea70731acc4546a8736af6c56cc94e70fc3" translate="yes" xml:space="preserve">
          <source>ExUnit.TimeoutError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ExUnit.TimeoutError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="2e4ccc244461fd2a12825ef96a60da2329e2ce3c" translate="yes" xml:space="preserve">
          <source>Example output:</source>
          <target state="translated">Пример вывода:</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="d26b3d4470724ac05d7c9da540813fd9a38a03b8" translate="yes" xml:space="preserve">
          <source>Example: aggregating coverage reports from all umbrella children</source>
          <target state="translated">Пример:агрегирование отчетов по охвату от всех &quot;зонтичных&quot; детей</target>
        </trans-unit>
        <trans-unit id="c74c91815529047b04fef7063d238333584897a5" translate="yes" xml:space="preserve">
          <source>Example: aggregating partitioned runs</source>
          <target state="translated">Пример:объединение разбитых на разделы прогонов</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="25122b962e79de0ee8a27ce3b5647bd4c01ca409" translate="yes" xml:space="preserve">
          <source>Examples (in ISO)</source>
          <target state="translated">Примеры (в ИСО)</target>
        </trans-unit>
        <trans-unit id="0d3f1fb4ead37a9ebada8ba4792a85c60fc239e8" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#is_even/1&quot;&gt;&lt;code&gt;Integer.is_even/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_list/1&quot;&gt;&lt;code&gt;Kernel.is_list/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;https://hexdocs.pm/elixir/Integer.html#is_even/1&quot;&gt; &lt;code&gt;Integer.is_even/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_list/1&quot;&gt; &lt;code&gt;Kernel.is_list/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36164a25cdcc73cd1cf8d728f5b2f50878a4ec40" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt;&lt;code&gt;Kernel.length/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#length/1&quot;&gt; &lt;code&gt;Kernel.length/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8c5fda773f78bb26a8e1303d5c85d69d871488af" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#map_size/1&quot;&gt;&lt;code&gt;Kernel.map_size/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;Kernel.tuple_size/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#map_size/1&quot;&gt; &lt;code&gt;Kernel.map_size/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;Kernel.tuple_size/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad9928fd1db4bd5dbdaaf41bf03f0e344ec8d2e7" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html#keyword?/1&quot;&gt;&lt;code&gt;Keyword.keyword?/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt;&lt;code&gt;Mix.debug?/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#contains?/2&quot;&gt;&lt;code&gt;String.contains?/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;https://hexdocs.pm/elixir/Keyword.html#keyword?/1&quot;&gt; &lt;code&gt;Keyword.keyword?/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt; &lt;code&gt;Mix.debug?/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/elixir/String.html#contains?/2&quot;&gt; &lt;code&gt;String.contains?/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b67cde3e2893f45e1d2342cc89a6c494050168c1" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;integer#is_even/1&quot;&gt;&lt;code&gt;Integer.is_even/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#is_list/1&quot;&gt;&lt;code&gt;Kernel.is_list/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;integer#is_even/1&quot;&gt; &lt;code&gt;Integer.is_even/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;kernel#is_list/1&quot;&gt; &lt;code&gt;Kernel.is_list/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fba0066e54914f2c201f52bafe91a91ee882db71" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;kernel#length/1&quot;&gt;&lt;code&gt;Kernel.length/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;kernel#length/1&quot;&gt; &lt;code&gt;Kernel.length/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;string#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59e48be0f15bfe533102ec4eff7ccf70153ea050" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;kernel#map_size/1&quot;&gt;&lt;code&gt;Kernel.map_size/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#tuple_size/1&quot;&gt;&lt;code&gt;Kernel.tuple_size/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;kernel#map_size/1&quot;&gt; &lt;code&gt;Kernel.map_size/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;kernel#tuple_size/1&quot;&gt; &lt;code&gt;Kernel.tuple_size/1&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8894d30453776d313609dc175c436a396fe228a1" translate="yes" xml:space="preserve">
          <source>Examples: &lt;a href=&quot;keyword#keyword?/1&quot;&gt;&lt;code&gt;Keyword.keyword?/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt;&lt;code&gt;Mix.debug?/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;string#contains?/2&quot;&gt;&lt;code&gt;String.contains?/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Примеры: &lt;a href=&quot;keyword#keyword?/1&quot;&gt; &lt;code&gt;Keyword.keyword?/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#debug?/0&quot;&gt; &lt;code&gt;Mix.debug?/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;string#contains?/2&quot;&gt; &lt;code&gt;String.contains?/2&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="80519cae3a2fe4f658e3d881595a3f1c8312fcf3" translate="yes" xml:space="preserve">
          <source>Excellent!</source>
          <target state="translated">Excellent!</target>
        </trans-unit>
        <trans-unit id="60ec7b5f4ed1c9f91fe92c8f85e12cb5b5d0e653" translate="yes" xml:space="preserve">
          <source>Excellent! A release was assembled in &lt;code&gt;_build/prod/rel/foo&lt;/code&gt;. Inside the release, there will be a &lt;code&gt;bin/foo&lt;/code&gt; file which is the entry point to your system. It supports multiple commands, such as:</source>
          <target state="translated">Превосходно! Релиз собран в &lt;code&gt;_build/prod/rel/foo&lt;/code&gt; . Внутри релиза будет файл &lt;code&gt;bin/foo&lt;/code&gt; , который является точкой входа в вашу систему. Он поддерживает несколько команд, таких как:</target>
        </trans-unit>
        <trans-unit id="20049bc069b0a04404c23d571b5e0b56f0660c02" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="translated">Exception</target>
        </trans-unit>
        <trans-unit id="44e97cbdae038c2c5424f2954134819fe68f1b89" translate="yes" xml:space="preserve">
          <source>Exception &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Исключительное &lt;small&gt;поведение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="3d517d7c8883cc469bb6f0690fb53e26f6870d0a" translate="yes" xml:space="preserve">
          <source>Exceptions are structs backed by a module that implements the &lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour. The &lt;a href=&quot;exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour requires two functions to be implemented:</source>
          <target state="translated">Исключения - это структуры, поддерживаемые модулем, реализующим поведение &lt;a href=&quot;exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; поведение требует две функции должны быть реализованы:</target>
        </trans-unit>
        <trans-unit id="8e51b2994e896de8ce300f36d4a22aa73a3be30a" translate="yes" xml:space="preserve">
          <source>Exceptions are structs backed by a module that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour. The &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; behaviour requires two functions to be implemented:</source>
          <target state="translated">Исключения - это структуры, поддерживаемые модулем, реализующим поведение &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;https://hexdocs.pm/elixir/Exception.html&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; поведение требует две функции должны быть реализованы:</target>
        </trans-unit>
        <trans-unit id="f5f7c811b0be5635dd0fe494c23bb6038a54a491" translate="yes" xml:space="preserve">
          <source>Exceptions in the &lt;code&gt;else&lt;/code&gt; block are not caught. If no pattern inside the &lt;code&gt;else&lt;/code&gt; block matches, an exception will be raised; this exception is not caught by the current &lt;code&gt;try/catch/rescue/after&lt;/code&gt; block.</source>
          <target state="translated">Исключения в блоке &lt;code&gt;else&lt;/code&gt; не отлавливаются. Если ни один шаблон внутри блока &lt;code&gt;else&lt;/code&gt; не совпадает, возникает исключение; это исключение не перехватывается текущим блоком &lt;code&gt;try/catch/rescue/after&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea74b62ed292a57db053839d4dd2cfb1e0f29152" translate="yes" xml:space="preserve">
          <source>Excluded (via :exclude filters)</source>
          <target state="translated">Исключено (через :исключить фильтры)</target>
        </trans-unit>
        <trans-unit id="3341b34959d98dd397fee5b24380ce422a7f718a" translate="yes" xml:space="preserve">
          <source>Executes the given &lt;code&gt;command&lt;/code&gt; as a shell command and invokes the &lt;code&gt;callback&lt;/code&gt; for the streamed response.</source>
          <target state="translated">Выполняет заданную &lt;code&gt;command&lt;/code&gt; как команду оболочки и вызывает &lt;code&gt;callback&lt;/code&gt; для потокового ответа.</target>
        </trans-unit>
        <trans-unit id="70a317365d7713ea507b0cb5d939c290a69f7da8" translate="yes" xml:space="preserve">
          <source>Executes the given &lt;code&gt;command&lt;/code&gt; with &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">Выполняет заданную &lt;code&gt;command&lt;/code&gt; с &lt;code&gt;args&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8de8bb94364b91423f5a970361d0ca351b0ec3d4" translate="yes" xml:space="preserve">
          <source>Executes the given command and forwards its messages to the current process.</source>
          <target state="translated">Выполняет данную команду и перенаправляет ее сообщения текущему процессу.</target>
        </trans-unit>
        <trans-unit id="c1372af04a9efd8163a10572859082b925f8dafa" translate="yes" xml:space="preserve">
          <source>Executes the given command and prints its output to stdout as it comes.</source>
          <target state="translated">Выполняет данную команду и распечатывает ее вывод в stdout по мере поступления.</target>
        </trans-unit>
        <trans-unit id="a75d5012d51d09974229d69b19fd7d7622bdc109" translate="yes" xml:space="preserve">
          <source>Executes the given command and returns its exit status.</source>
          <target state="translated">Выполняет данную команду и возвращает статус выхода.</target>
        </trans-unit>
        <trans-unit id="7c07c6d426de3d265c77a3c160b7a3bafe862b2c" translate="yes" xml:space="preserve">
          <source>Executes the given command quietly without outputting anything.</source>
          <target state="translated">Выполняет данную команду тихо,ничего не выводя.</target>
        </trans-unit>
        <trans-unit id="4004d7a200a9edc8cf038043abae23d5809c733f" translate="yes" xml:space="preserve">
          <source>Executes the given command.</source>
          <target state="translated">Выполняет данную команду.</target>
        </trans-unit>
        <trans-unit id="55f164b4c64455051e302faf23d4842520137933" translate="yes" xml:space="preserve">
          <source>Executes the given function for each element.</source>
          <target state="translated">Выполняет данную функцию для каждого элемента.</target>
        </trans-unit>
        <trans-unit id="b5ce416e76da997843fde479e97ac42967b3d692" translate="yes" xml:space="preserve">
          <source>Executes the tasks separated by comma.</source>
          <target state="translated">Выполняет задачи,разделенные запятой.</target>
        </trans-unit>
        <trans-unit id="7ac90140fbd596d3f7878d936c650ac9466a6ee5" translate="yes" xml:space="preserve">
          <source>Exit reasons and restarts</source>
          <target state="translated">Причины выхода и перезагрузки</target>
        </trans-unit>
        <trans-unit id="53b33039635fa494645e1b43b50ac67531129d6a" translate="yes" xml:space="preserve">
          <source>Exiting the shell</source>
          <target state="translated">Выход из оболочки</target>
        </trans-unit>
        <trans-unit id="f45e71feb97fe698bfbbe5199dddf26ea61ae573" translate="yes" xml:space="preserve">
          <source>Exiting with any other reason is considered abnormal and treated as a crash. This means the default supervisor behaviour kicks in, error reports are emitted, and so forth.</source>
          <target state="translated">Выход по любой другой причине считается ненормальным и рассматривается как авария.Это означает,что запускается поведение супервайзера по умолчанию,выдаются отчеты об ошибках и так далее.</target>
        </trans-unit>
        <trans-unit id="31a12820b55617ff15b68585a3da10bfbeb53dca" translate="yes" xml:space="preserve">
          <source>Exiting with any other reason is considered abnormal and treated as a crash. This means the default supervisor behaviour kicks in, error reports are emitted, etc.</source>
          <target state="translated">Выход по любой другой причине считается ненормальным и рассматривается как авария.Это означает,что запускается поведение супервизора по умолчанию,выдаются отчеты об ошибках и т.д.</target>
        </trans-unit>
        <trans-unit id="d71626cd31b069ac3980d7ed6a6abb80f71225a3" translate="yes" xml:space="preserve">
          <source>Exits</source>
          <target state="translated">Exits</target>
        </trans-unit>
        <trans-unit id="7977d0a8642620960ce842afec7459a90da93ce6" translate="yes" xml:space="preserve">
          <source>Exits are used by the OTP to determine if a process exited abnormally or not. The following exits are considered &quot;normal&quot;:</source>
          <target state="translated">Выходы используются OTP для определения аномального или нет выхода из процесса.Следующие выходы считаются &quot;нормальными&quot;:</target>
        </trans-unit>
        <trans-unit id="d2a34bd07d0e86299a6bc287e4921ca1aef50681" translate="yes" xml:space="preserve">
          <source>Expands the path relative to the path given as the second argument expanding any &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; characters.</source>
          <target state="translated">Расширяет путь относительно пути, заданного вторым аргументом, расширяя any &lt;code&gt;.&lt;/code&gt; и &lt;code&gt;..&lt;/code&gt; персонажи.</target>
        </trans-unit>
        <trans-unit id="56faca74d01072fe618cfc8860e3704b0f548536" translate="yes" xml:space="preserve">
          <source>Expands the struct given by &lt;code&gt;module&lt;/code&gt; in the given &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">Расширяет структуру, заданную &lt;code&gt;module&lt;/code&gt; в данном &lt;code&gt;env&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a58d845ac21beded647c9679bfd179b6ae8af84c" translate="yes" xml:space="preserve">
          <source>Expands to something akin to:</source>
          <target state="translated">Расширяется до чего-то похожего:</target>
        </trans-unit>
        <trans-unit id="4ae47f3ad3318c24412abe41c786c7c08970f0f5" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;date&lt;/code&gt; if each entry fits its appropriate range, raises if the date is invalid.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;date&lt;/code&gt; если каждая запись соответствует соответствующему диапазону, увеличивается, если дата недействительна.</target>
        </trans-unit>
        <trans-unit id="13b37db6b572edb898a47a3bd0fb0e8a7a11988b" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;naive_datetime&lt;/code&gt; if each entry fits its appropriate range, raises if time or date is invalid.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;naive_datetime&lt;/code&gt; , если каждая запись соответствует соответствующему диапазону, увеличивается, если время или дата недопустимы.</target>
        </trans-unit>
        <trans-unit id="bcd459526f4b99811c8fbb63304ea87ace873e34" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;time&lt;/code&gt; if each entry fits its appropriate range, raises if the time is invalid.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;time&lt;/code&gt; если каждая запись соответствует соответствующему диапазону, увеличивается, если время недействительно.</target>
        </trans-unit>
        <trans-unit id="91a8dae3c7e0a7461d109ccac314fd3b05583329" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, date}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;{:ok, date}&lt;/code&gt; если каждая запись соответствует соответствующему диапазону, в противном случае возвращает &lt;code&gt;{:error, reason}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36147c4004a324e8f3e4b2ea0f84715a379f133f" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, naive_datetime}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;{:ok, naive_datetime}&lt;/code&gt; если каждая запись соответствует соответствующему диапазону, в противном случае возвращает &lt;code&gt;{:error, reason}&lt;/code&gt; cause} .</target>
        </trans-unit>
        <trans-unit id="b1f148de03b18e5985298d31921d5f1111620987" translate="yes" xml:space="preserve">
          <source>Expects all values to be integers. Returns &lt;code&gt;{:ok, time}&lt;/code&gt; if each entry fits its appropriate range, returns &lt;code&gt;{:error, reason}&lt;/code&gt; otherwise.</source>
          <target state="translated">Ожидает, что все значения будут целыми числами. Возвращает &lt;code&gt;{:ok, time}&lt;/code&gt; если каждая запись соответствует соответствующему диапазону, в противном случае возвращает &lt;code&gt;{:error, reason}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1387b27163a391ef8f7a170807b6e12dfd7c742a" translate="yes" xml:space="preserve">
          <source>Expects the same command line options as &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt;&lt;code&gt;mix compile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ожидает те же параметры командной строки, что и при &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt; &lt;code&gt;mix compile&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6d58782f27892aec9906a2b37b517051b421e83e" translate="yes" xml:space="preserve">
          <source>Expects the same command line options as &lt;a href=&quot;mix.tasks.compile&quot;&gt;&lt;code&gt;mix compile&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Ожидает те же параметры командной строки, что и при &lt;a href=&quot;mix.tasks.compile&quot;&gt; &lt;code&gt;mix compile&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8185e179a98e4c14d7d2dc6601e54859946ed332" translate="yes" xml:space="preserve">
          <source>Explicit derivations can now be called via &lt;code&gt;__deriving__&lt;/code&gt;:</source>
          <target state="translated">Явные производные теперь можно вызывать через &lt;code&gt;__deriving__&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1af430d5daa7566a82be8754e90eab91a53418f6" translate="yes" xml:space="preserve">
          <source>Explicitly convert to string with &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; (v1.0)</source>
          <target state="translated">Явное преобразование в строку с помощью &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt; (v1.0)</target>
        </trans-unit>
        <trans-unit id="a311e0f546569e17c6cb9a033783cc3c973c3f50" translate="yes" xml:space="preserve">
          <source>Exploring</source>
          <target state="translated">Exploring</target>
        </trans-unit>
        <trans-unit id="17144cbaf80b5556f57bcc08120468f882fb7da0" translate="yes" xml:space="preserve">
          <source>Exports dependencies are compile time dependencies on the module API, namely structs and its public definitions. For example, if you import a module but only use its functions, it is an export dependency. If you use a struct, it is an export dependency too. Export dependencies are only recompiled if the module API changes. Note, however, that compile time dependencies have higher precedence than exports. Therefore if you import a module and use its macros, it is a compile time dependency.</source>
          <target state="translated">Зависимости экспорта-это временные зависимости компиляции от API модуля,а именно структур и его публичных определений.Например,если вы импортируете модуль,но используете только его функции,то это будет экспортная зависимость.Если вы используете структуру,то это также экспортная зависимость.Зависимости экспорта перекомпилируются только в случае изменения API модуля.Обратите внимание,однако,что временные зависимости при компиляции имеют больший приоритет,чем экспортные.Поэтому,если вы импортируете модуль и используете его макросы,это является временной зависимостью при компиляции.</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="bd636ca0127e991954457d5520bc826a5790bde1" translate="yes" xml:space="preserve">
          <source>Expressions in IEx</source>
          <target state="translated">Выражения в IEx</target>
        </trans-unit>
        <trans-unit id="ee1891c8d113531de2d0f468e0034dd1a97f49a7" translate="yes" xml:space="preserve">
          <source>Expressions on multiple lines are also supported:</source>
          <target state="translated">Поддерживаются также выражения на нескольких строках:</target>
        </trans-unit>
        <trans-unit id="96e930ee8659a5428bf86a0d55155d9541ab8120" translate="yes" xml:space="preserve">
          <source>Extension point for precompiling dependencies.</source>
          <target state="translated">Точка расширения для прекомпилирующих зависимостей.</target>
        </trans-unit>
        <trans-unit id="8fdb5d77c0ea69e962db331c0331d4ccd1f6e481" translate="yes" xml:space="preserve">
          <source>External dependencies</source>
          <target state="translated">Внешние зависимости</target>
        </trans-unit>
        <trans-unit id="ecfbef1298f91628d1f080163cdf6946c9def817" translate="yes" xml:space="preserve">
          <source>External dependencies are the ones not tied to your business domain. For example, if you need an HTTP API for your distributed KV application, you can use the &lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt; project as an external dependency.</source>
          <target state="translated">Внешние зависимости - это те, которые не привязаны к вашему бизнес-домену. Например, если вам нужен HTTP API для вашего распределенного приложения KV, вы можете использовать проект &lt;a href=&quot;https://github.com/elixir-lang/plug&quot;&gt;Plug&lt;/a&gt; как внешнюю зависимость.</target>
        </trans-unit>
        <trans-unit id="c150e0ee17017b4793bcf0b0cc69d4046c404195" translate="yes" xml:space="preserve">
          <source>Extract test cases from the documentation.</source>
          <target state="translated">Извлеките тестовые случаи из документации.</target>
        </trans-unit>
        <trans-unit id="95e8ae6e88b22e27a03f7d64d058e8d835494561" translate="yes" xml:space="preserve">
          <source>Extracts all protocols from the given paths.</source>
          <target state="translated">Извлекает все протоколы из заданных путей.</target>
        </trans-unit>
        <trans-unit id="6672f515f4795b7a00946cd73a72fe3b0d731698" translate="yes" xml:space="preserve">
          <source>Extracts all records information from an Erlang file.</source>
          <target state="translated">Извлекает всю информацию о записях из файла Erlang.</target>
        </trans-unit>
        <trans-unit id="0aa4ae6318b818f36730be7bf017b931ef4ea73b" translate="yes" xml:space="preserve">
          <source>Extracts all types implemented for the given protocol from the given paths.</source>
          <target state="translated">Извлекает из заданных путей все типы,реализованные для данного протокола.</target>
        </trans-unit>
        <trans-unit id="fe0c75ba33dd78a4066417d5f149fc1b26fb8202" translate="yes" xml:space="preserve">
          <source>Extracts record information from an Erlang file.</source>
          <target state="translated">Извлекает информацию о записях из файла Эрланга.</target>
        </trans-unit>
        <trans-unit id="574d59827e0eb28bc33410c7d28d8d1801cae6ee" translate="yes" xml:space="preserve">
          <source>Extracts the part of the binary starting at &lt;code&gt;start&lt;/code&gt; with length &lt;code&gt;length&lt;/code&gt;. Binaries are zero-indexed.</source>
          <target state="translated">Извлекает часть двоичного файла, начиная с &lt;code&gt;start&lt;/code&gt; с length &lt;code&gt;length&lt;/code&gt; . Бинарные файлы имеют нулевую индексацию.</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="09fef5d8d9a3c86b2523fef60d512606e7fe0003" translate="yes" xml:space="preserve">
          <source>Failed</source>
          <target state="translated">Failed</target>
        </trans-unit>
        <trans-unit id="96fff357d65451f89027b22467cd65b418ae720a" translate="yes" xml:space="preserve">
          <source>Failing guards</source>
          <target state="translated">Неисправные охранники</target>
        </trans-unit>
        <trans-unit id="1652d7e1326512444d5398f784563f91db27adf9" translate="yes" xml:space="preserve">
          <source>Failing to specify the size for the non-last causes compilation to fail:</source>
          <target state="translated">Неспособность указать размер для не последних приводит к ошибке компиляции:</target>
        </trans-unit>
        <trans-unit id="a8f785f9330c1e75e28a2a7140d3aec99d182b95" translate="yes" xml:space="preserve">
          <source>Fails with &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the name is not registered to any PID or port.</source>
          <target state="translated">Ошибка с &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; ,&lt;/a&gt; если имя не зарегистрировано ни для какого PID или порта.</target>
        </trans-unit>
        <trans-unit id="0ccdf9c4d16331f9f9a7885177207e85c8dc38a3" translate="yes" xml:space="preserve">
          <source>Fails with &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the name is not registered to any PID or port.</source>
          <target state="translated">Ошибка с &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; ,&lt;/a&gt; если имя не зарегистрировано ни для какого PID или порта.</target>
        </trans-unit>
        <trans-unit id="a6d0b09e283994372eb19fd9e9acdd66b7d8a5ff" translate="yes" xml:space="preserve">
          <source>Fails with a message.</source>
          <target state="translated">Проваливается с сообщением.</target>
        </trans-unit>
        <trans-unit id="d98c0b711b96d90c648aa1ba79214b16cf3c847f" translate="yes" xml:space="preserve">
          <source>Faint (decreased intensity). Not widely supported.</source>
          <target state="translated">Слабый (пониженная интенсивность).Не пользуется широкой поддержкой.</target>
        </trans-unit>
        <trans-unit id="80eafe8c844b802892eae9dec9a932d3aae704a2" translate="yes" xml:space="preserve">
          <source>Fallback to &lt;code&gt;Any&lt;/code&gt;</source>
          <target state="translated">Вернуться к &lt;code&gt;Any&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e83224357f427a57043b90f12511c5e7c2761fe6" translate="yes" xml:space="preserve">
          <source>Falsy values (of which there are exactly two):</source>
          <target state="translated">Фальшивые значения (которых ровно два):</target>
        </trans-unit>
        <trans-unit id="84961cf65129825950c4fb505dbebfa0af3c33d5" translate="yes" xml:space="preserve">
          <source>Feel free to go ahead and do the changes above and write some unit tests. The idea is that your tests will start an instance of the &lt;code&gt;KV.Registry&lt;/code&gt; and pass it as an argument to &lt;code&gt;run/2&lt;/code&gt; instead of relying on the global &lt;code&gt;KV.Registry&lt;/code&gt;. This has the advantage of keeping our tests asynchronous as there is no shared state.</source>
          <target state="translated">Не стесняйтесь вносить изменения, указанные выше, и писать несколько модульных тестов. Идея состоит в том, что ваши тесты будут запускать экземпляр &lt;code&gt;KV.Registry&lt;/code&gt; и передавать его в качестве аргумента в &lt;code&gt;run/2&lt;/code&gt; вместо того, чтобы полагаться на глобальный &lt;code&gt;KV.Registry&lt;/code&gt; . Это имеет то преимущество, что наши тесты остаются асинхронными, поскольку нет общего состояния.</target>
        </trans-unit>
        <trans-unit id="4e9eab4f18f16e5a9faaa07931254d91146148ac" translate="yes" xml:space="preserve">
          <source>Fetches a copy of &lt;code&gt;rebar&lt;/code&gt; or &lt;code&gt;rebar3&lt;/code&gt; from the given path or URL.</source>
          <target state="translated">Получает копию &lt;code&gt;rebar&lt;/code&gt; или арматурного &lt;code&gt;rebar3&lt;/code&gt; по заданному пути или URL-адресу.</target>
        </trans-unit>
        <trans-unit id="6ce2d20bef71f0063b999c8745340e3f56b5a4aa" translate="yes" xml:space="preserve">
          <source>Fetches the test supervisor for the current test.</source>
          <target state="translated">Захватывает руководителя теста для текущего теста.</target>
        </trans-unit>
        <trans-unit id="c0e97bf839fe5fe85207b4a9d492c885c7fec652" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; and returns it in a tuple.</source>
          <target state="translated">Получает значение для определенного &lt;code&gt;key&lt;/code&gt; и возвращает его в виде кортежа.</target>
        </trans-unit>
        <trans-unit id="e51d5ee9800fb6a00e8f93feaec0009d2b77b447" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; in the given &lt;code&gt;map&lt;/code&gt;, erroring out if &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">Выбирает значение для определенного &lt;code&gt;key&lt;/code&gt; в данной &lt;code&gt;map&lt;/code&gt; , выдает ошибку, если &lt;code&gt;map&lt;/code&gt; не содержит &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a43e0afb7d744e48d3c341e4b08f1f780c55b575" translate="yes" xml:space="preserve">
          <source>Fetches the value for a specific &lt;code&gt;key&lt;/code&gt; in the given &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">Получает значение для определенного &lt;code&gt;key&lt;/code&gt; на данной &lt;code&gt;map&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e32be0757ce9c975d2425bacc76ae29c90d94cf3" translate="yes" xml:space="preserve">
          <source>Fetches the value for specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">Получает значение для определенного &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5f8f513b41db299570bc23df8a5cd56d7a7348b" translate="yes" xml:space="preserve">
          <source>Fetches the value for the given key in a container (a map, keyword list, or struct that implements the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; behaviour).</source>
          <target state="translated">Получает значение для данного ключа в контейнере (карту, список ключевых слов или структуру, реализующую поведение &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="31798ce3f2f936a238f0a2c5ab7cdb503c7ea839" translate="yes" xml:space="preserve">
          <source>File permissions are specified by adding together the following octal modes:</source>
          <target state="translated">Права доступа к файлам задаются путем сложения следующих восьмеричных режимов:</target>
        </trans-unit>
        <trans-unit id="e9762f0351951cf7ed47c0893d9de2c36796a05d" translate="yes" xml:space="preserve">
          <source>File.CopyError</source>
          <target state="translated">File.CopyError</target>
        </trans-unit>
        <trans-unit id="7b57f930765dd268a9cde88eaefc8e395b0beb29" translate="yes" xml:space="preserve">
          <source>File.CopyError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.CopyError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="27e1fc83e1258e80dfd4127d0a4ce93324162992" translate="yes" xml:space="preserve">
          <source>File.Error</source>
          <target state="translated">File.Error</target>
        </trans-unit>
        <trans-unit id="8354290eb6b6ea2cbcbaa3bd4c48c21f5649591a" translate="yes" xml:space="preserve">
          <source>File.Error &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.Error &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5561cc6859be7830bb0219495771f2109757df2e" translate="yes" xml:space="preserve">
          <source>File.LinkError</source>
          <target state="translated">File.LinkError</target>
        </trans-unit>
        <trans-unit id="ff963e9e333fceee8593af446c12736218860d8a" translate="yes" xml:space="preserve">
          <source>File.LinkError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.LinkError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34595af71c483f8de72a2abf0c30fcef3475a04a" translate="yes" xml:space="preserve">
          <source>File.RenameError</source>
          <target state="translated">File.RenameError</target>
        </trans-unit>
        <trans-unit id="918afebd70d1938336f0bcc22b61603501a5ef93" translate="yes" xml:space="preserve">
          <source>File.RenameError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">File.RenameError &lt;small&gt;исключение&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="26a6590f983813e802ea4c694400ea32fe379883" translate="yes" xml:space="preserve">
          <source>File.Stat</source>
          <target state="translated">File.Stat</target>
        </trans-unit>
        <trans-unit id="665c1dadb9609c9481c5f8ebc57dca4f06031e23" translate="yes" xml:space="preserve">
          <source>File.Stream</source>
          <target state="translated">File.Stream</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="e4b01a2510691aed09a9f3e1dbbc4fcd455e3aee" translate="yes" xml:space="preserve">
          <source>Filters can also be given:</source>
          <target state="translated">Фильтры также могут быть предоставлены:</target>
        </trans-unit>
        <trans-unit id="2503811e18a88c94424e3c46d73925ff58ba8899" translate="yes" xml:space="preserve">
          <source>Filters can either be a regular expression or any data structure that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol, which is invoked before comparing the filter with the &lt;code&gt;:tag&lt;/code&gt; value.</source>
          <target state="translated">Фильтры могут быть либо регулярным выражением, либо любой структурой данных, реализующей протокол &lt;a href=&quot;https://hexdocs.pm/elixir/String.Chars.html&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt; , который вызывается перед сравнением фильтра со значением &lt;code&gt;:tag&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e53af0e96b0cc30e1acdc06f0e1e173375388aa" translate="yes" xml:space="preserve">
          <source>Filters the &lt;code&gt;enumerable&lt;/code&gt;, i.e. returns only those elements for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">Фильтрует &lt;code&gt;enumerable&lt;/code&gt; , т.е. возвращает только те элементы, для которых &lt;code&gt;fun&lt;/code&gt; возвращает истинное значение.</target>
        </trans-unit>
        <trans-unit id="38e91ba97986e6ce700c58bdd7ad300d67734ab8" translate="yes" xml:space="preserve">
          <source>Final note</source>
          <target state="translated">Заключительное примечание</target>
        </trans-unit>
        <trans-unit id="35edd1c925c63232dc7f42b120954fad87230406" translate="yes" xml:space="preserve">
          <source>Finally note all protocols are compiled with &lt;code&gt;debug_info&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, regardless of the option set by &lt;code&gt;elixirc&lt;/code&gt; compiler. The debug info is used for consolidation and it may be removed after consolidation.</source>
          <target state="translated">Наконец, обратите внимание, что все протоколы компилируются с &lt;code&gt;debug_info&lt;/code&gt; , установленным в значение &lt;code&gt;true&lt;/code&gt; , независимо от параметра, установленного компилятором &lt;code&gt;elixirc&lt;/code&gt; . Информация отладки используется для консолидации и может быть удалена после консолидации.</target>
        </trans-unit>
        <trans-unit id="04fdf1c25fdd5f8a57c6967c66cfb3a7de5f847e" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;setup_all&lt;/code&gt; callbacks run in a separate process per module, while all &lt;code&gt;setup&lt;/code&gt; callbacks run in the same process as the test itself. &lt;a href=&quot;#on_exit/2&quot;&gt;&lt;code&gt;on_exit/2&lt;/code&gt;&lt;/a&gt; callbacks always run in a separate process, as implied by their name. The test process always exits with reason &lt;code&gt;:shutdown&lt;/code&gt;, which means any process linked to the test process will also exit, although asynchronously. Therefore it is preferred to use &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt; to guarantee synchronous termination.</source>
          <target state="translated">Наконец, &lt;code&gt;setup_all&lt;/code&gt; вызовы setup_all выполняются в отдельном процессе для каждого модуля, в то время как все обратные вызовы &lt;code&gt;setup&lt;/code&gt; выполняются в том же процессе, что и сам тест. Обратные вызовы &lt;a href=&quot;#on_exit/2&quot;&gt; &lt;code&gt;on_exit/2&lt;/code&gt; &lt;/a&gt; всегда выполняются в отдельном процессе, как следует из их имени. Процесс тестирования всегда завершается с указанием причины &lt;code&gt;:shutdown&lt;/code&gt; , что означает, что любой процесс, связанный с процессом тестирования, также завершится, хотя и асинхронно. Поэтому предпочтительно использовать &lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; ,&lt;/a&gt; чтобы гарантировать синхронное завершение.</target>
        </trans-unit>
        <trans-unit id="4a48b23e11b49db2f57e13074e7a2452579f61b9" translate="yes" xml:space="preserve">
          <source>Finally, Elixir has a construct called aliases which we will explore later. Aliases start in upper case and are also atoms:</source>
          <target state="translated">Наконец,у Эликсира есть конструкция,называемая псевдонимами,которую мы рассмотрим позже.Псевдонимы начинаются в верхнем регистре и также являются атомами:</target>
        </trans-unit>
        <trans-unit id="f1f7036035e55443b9fb00eab5b0f156761b7796" translate="yes" xml:space="preserve">
          <source>Finally, Elixir provides tools such as escripts and archives, which are different mechanisms for packaging your application. Those are typically used when tools must be shared between developers and not as deployment options. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt;&lt;code&gt;mix help archive.build&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt;&lt;code&gt;mix help escript.build&lt;/code&gt;&lt;/a&gt; for more detail.</source>
          <target state="translated">Наконец, Elixir предоставляет такие инструменты, как секретные коды и архивы, которые представляют собой различные механизмы для упаковки вашего приложения. Они обычно используются, когда инструменты должны использоваться разработчиками совместно, а не в качестве вариантов развертывания. Дополнительные сведения см. В &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html&quot;&gt; &lt;code&gt;mix help archive.build&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html&quot;&gt; &lt;code&gt;mix help escript.build&lt;/code&gt; &lt;/a&gt; по сочетанию escript.build .</target>
        </trans-unit>
        <trans-unit id="51f5f67bdc287fa28acb4c9223c262389c58e3ea" translate="yes" xml:space="preserve">
          <source>Finally, aliases can also be used to augment existing tasks. Let's suppose you want to augment &lt;a href=&quot;mix.tasks.clean&quot;&gt;&lt;code&gt;mix clean&lt;/code&gt;&lt;/a&gt; to clean another directory Mix does not know about:</source>
          <target state="translated">Наконец, псевдонимы также могут использоваться для дополнения существующих задач. Предположим, вы хотите улучшить &lt;a href=&quot;mix.tasks.clean&quot;&gt; &lt;code&gt;mix clean&lt;/code&gt; ,&lt;/a&gt; чтобы очистить другой каталог, о котором Mix не знает:</target>
        </trans-unit>
        <trans-unit id="191e1198a5b11d86c8e069a1379cf393ac7fbbc2" translate="yes" xml:space="preserve">
          <source>Finally, anonymous functions are also closures and as such they can access variables that are in scope when the function is defined. Let&amp;rsquo;s define a new anonymous function that uses the &lt;code&gt;add&lt;/code&gt; anonymous function we have previously defined:</source>
          <target state="translated">Наконец, анонимные функции также являются замыканиями и, как таковые, могут обращаться к переменным, которые находятся в области видимости при определении функции. Давайте определим новую анонимную функцию, которая использует ранее определенную нами анонимную функцию &lt;code&gt;add&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1877a861abfea57d3175dd4ec2545e64bd06b283" translate="yes" xml:space="preserve">
          <source>Finally, as discussed in the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; documentation, remember that the initial context metadata can also be set via &lt;code&gt;@tag&lt;/code&gt;s, which can then be accessed in the &lt;code&gt;setup&lt;/code&gt; block:</source>
          <target state="translated">Наконец, как обсуждалось в документации &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt; , помните, что исходные метаданные контекста также могут быть установлены через &lt;code&gt;@tag&lt;/code&gt; s, к которым затем можно получить доступ в блоке &lt;code&gt;setup&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4f8f9ee80a4128eebbd8b8d0785f0bf4b51354e3" translate="yes" xml:space="preserve">
          <source>Finally, attributes can also be read inside functions:</source>
          <target state="translated">Наконец,атрибуты также могут быть прочитаны внутри функций:</target>
        </trans-unit>
        <trans-unit id="668fb656f73feadaab2b70bd66310c5a6a4ae07c" translate="yes" xml:space="preserve">
          <source>Finally, beware of redundant code comments, such as the ones describing the exact same that the code does:</source>
          <target state="translated">Наконец,остерегайтесь избыточных комментариев к коду,например,описывающих то же самое,что и код:</target>
        </trans-unit>
        <trans-unit id="7b06c2901c51b502cac134085935b1c4ea9f9da4" translate="yes" xml:space="preserve">
          <source>Finally, check &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; for other supported operations.</source>
          <target state="translated">Наконец, проверьте &lt;a href=&quot;https://hexdocs.pm/elixir/Task.Supervisor.html&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; на&lt;/a&gt; предмет других поддерживаемых операций.</target>
        </trans-unit>
        <trans-unit id="1083a91a64ef83410037ffb35fd49e9fb40c270f" translate="yes" xml:space="preserve">
          <source>Finally, check &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; for other supported operations.</source>
          <target state="translated">Наконец, проверьте &lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; на&lt;/a&gt; предмет других поддерживаемых операций.</target>
        </trans-unit>
        <trans-unit id="f726a5d73225d60359e8c4f7a62c08247c5e3152" translate="yes" xml:space="preserve">
          <source>Finally, copy the &lt;code&gt;kv&lt;/code&gt; application we have built so far to the &lt;code&gt;apps&lt;/code&gt; directory in our new umbrella project. The final directory structure should match the structure we mentioned earlier:</source>
          <target state="translated">Наконец, скопируйте приложение &lt;code&gt;kv&lt;/code&gt; , которое мы создали до сих пор, в каталог &lt;code&gt;apps&lt;/code&gt; в нашем новом зонтичном проекте. Окончательная структура каталогов должна соответствовать структуре, о которой мы говорили ранее:</target>
        </trans-unit>
        <trans-unit id="fab90ae3564b828d174f4a1339c23b2f23ef10c1" translate="yes" xml:space="preserve">
          <source>Finally, developers should also avoid defining functions inside the &lt;code&gt;__using__/1&lt;/code&gt; callback, unless those functions are the default implementation of a previously defined &lt;code&gt;@callback&lt;/code&gt; or are functions meant to be overridden (see &lt;a href=&quot;#defoverridable/1&quot;&gt;&lt;code&gt;defoverridable/1&lt;/code&gt;&lt;/a&gt;). Even in these cases, defining functions should be seen as a &quot;last resort&quot;.</source>
          <target state="translated">Наконец, разработчики также должны избегать определения функций внутри обратного вызова &lt;code&gt;__using__/1&lt;/code&gt; , если только эти функции не являются реализацией по умолчанию ранее определенного &lt;code&gt;@callback&lt;/code&gt; или функциями, которые должны быть переопределены (см. &lt;a href=&quot;#defoverridable/1&quot;&gt; &lt;code&gt;defoverridable/1&lt;/code&gt; &lt;/a&gt; ). Даже в этих случаях определение функций следует рассматривать как &amp;laquo;последнее средство&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="0a5904f73dbbcd0930c32f8ef2421f6ebf86cef4" translate="yes" xml:space="preserve">
          <source>Finally, different from the other callbacks, we have defined a &amp;ldquo;catch-all&amp;rdquo; clause for &lt;code&gt;handle_info/2&lt;/code&gt; that discards any unknown message. To understand why, let&amp;rsquo;s move on to the next section.</source>
          <target state="translated">Наконец, в отличие от других обратных вызовов, мы определили &amp;laquo; &lt;code&gt;handle_info/2&lt;/code&gt; &amp;raquo; предложение для handle_info / 2, которое отбрасывает любое неизвестное сообщение. Чтобы понять почему, перейдем к следующему разделу.</target>
        </trans-unit>
        <trans-unit id="2dca70c0e3d6a9acaabab7bc96177fe2d9c44844" translate="yes" xml:space="preserve">
          <source>Finally, do not use this function on IO devices in Unicode mode as it will return the wrong result.</source>
          <target state="translated">Наконец,не используйте эту функцию на IO устройствах в режиме Юникод,так как она вернет неверный результат.</target>
        </trans-unit>
        <trans-unit id="5d1ed29b60633fb5430adba7b8757ea6539225e2" translate="yes" xml:space="preserve">
          <source>Finally, if you don't want to raise on empty enumerables, you can pass the empty fallback:</source>
          <target state="translated">Наконец,если вы не хотите поднимать на пустые перечисления,вы можете пройти пустое падение:</target>
        </trans-unit>
        <trans-unit id="8e8ca83f100555992c56e00e0551b89ee834e2cb" translate="yes" xml:space="preserve">
          <source>Finally, in order for runtime configuration to work properly (as well as any other &quot;Config provider&quot; as defined next), it needs to be able to persist the newly computed configuration to disk. The computed config file will be written to &quot;tmp&quot; directory inside the release every time the system boots. You can configure the &quot;tmp&quot; directory by setting the &lt;code&gt;RELEASE_TMP&lt;/code&gt; environment variable, either explicitly or inside your &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; (or &lt;code&gt;env.bat&lt;/code&gt; on Windows).</source>
          <target state="translated">Наконец, чтобы конфигурация среды выполнения работала должным образом (как и любой другой &amp;laquo;поставщик конфигурации&amp;raquo;, как определено далее), она должна иметь возможность сохранять вновь вычисленную конфигурацию на диске. Вычисленный файл конфигурации будет записываться в каталог &amp;laquo;tmp&amp;raquo; внутри выпуска при каждой загрузке системы. Вы можете настроить каталог &amp;laquo;tmp&amp;raquo;, установив &lt;code&gt;RELEASE_TMP&lt;/code&gt; среды RELEASE_TMP либо явно, либо внутри ваших &lt;code&gt;releases/RELEASE_VSN/env.sh&lt;/code&gt; (или &lt;code&gt;env.bat&lt;/code&gt; в Windows).</target>
        </trans-unit>
        <trans-unit id="b0a0fcc78d43cdb2d5efe08a2aa140520d91d3bf" translate="yes" xml:space="preserve">
          <source>Finally, it also documents two special forms, &lt;a href=&quot;#__block__/1&quot;&gt;&lt;code&gt;__block__/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#__aliases__/1&quot;&gt;&lt;code&gt;__aliases__/1&lt;/code&gt;&lt;/a&gt;, which are not intended to be called directly by the developer but they appear in quoted contents since they are essential in Elixir's constructs.</source>
          <target state="translated">Наконец, он также документирует две специальные формы, &lt;a href=&quot;#__block__/1&quot;&gt; &lt;code&gt;__block__/1&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#__aliases__/1&quot;&gt; &lt;code&gt;__aliases__/1&lt;/code&gt; &lt;/a&gt; , которые не предназначены для непосредственного вызова разработчиком, но они появляются в цитируемом содержимом, поскольку они необходимы в конструкциях Elixir.</target>
        </trans-unit>
        <trans-unit id="f74f8991d0d3c9a479fe59d35b99b4abf4e6cf52" translate="yes" xml:space="preserve">
          <source>Finally, it's advised to profile your program with the &lt;code&gt;prod&lt;/code&gt; environment, since this should provide more realistic insights into bottlenecks.</source>
          <target state="translated">Наконец, рекомендуется профилировать вашу программу с помощью среды &lt;code&gt;prod&lt;/code&gt; , поскольку это должно обеспечить более реалистичное понимание узких мест.</target>
        </trans-unit>
        <trans-unit id="e7d511ddfbac4fd8a034329e957061520ac4e991" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind it is not required for you to assemble the release from the umbrella root. You can also assemble the release from each child application individually. Doing it from the root, however, allows you to include two applications that do not depend on each other as part of the same release.</source>
          <target state="translated">Наконец,имейте в виду,что вам не нужно собирать релиз из корня зонтика.Вы также можете собрать релиз из каждого приложения ребенка в отдельности.Делая это из корня,однако,позволяет включить два приложения,которые не зависят друг от друга,как часть одного и того же релиза.</target>
        </trans-unit>
        <trans-unit id="04258f441df3a0685acf7dc84f54350179d26c35" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind that applications in an umbrella project all share the same configurations and dependencies. If two applications in your umbrella need to configure the same dependency in drastically different ways or even use different versions, you have probably outgrown the benefits brought by umbrellas. Remember you can break the umbrella and still leverage the benefits behind &amp;ldquo;mono-repos&amp;rdquo;.</source>
          <target state="translated">Наконец, имейте в виду, что все приложения в зонтичном проекте имеют одинаковые конфигурации и зависимости. Если двум приложениям в вашем зонтике необходимо настроить одну и ту же зависимость совершенно разными способами или даже использовать разные версии, вы, вероятно, переросли преимущества, которые дает зонтик. Помните, что вы можете сломать зонтик и по-прежнему использовать преимущества &amp;laquo;монорепо&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="b17d2e9b41800db01905629d7c64202ebf54e9fc" translate="yes" xml:space="preserve">
          <source>Finally, keep in mind that variable assignments inside the comprehension, be it in generators, filters or inside the block, are not reflected outside of the comprehension.</source>
          <target state="translated">Наконец,имейте в виду,что переменные назначения внутри понимания,будь то в генераторах,фильтрах или внутри блока,не отражаются вне понимания.</target>
        </trans-unit>
        <trans-unit id="7b0dc026cfea9e2e7b1becee88cabf1eed936967" translate="yes" xml:space="preserve">
          <source>Finally, note &lt;code&gt;cond&lt;/code&gt; considers any value besides &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; to be true:</source>
          <target state="translated">Наконец, обратите внимание, что &lt;code&gt;cond&lt;/code&gt; считает истинным любое значение, кроме &lt;code&gt;nil&lt;/code&gt; и &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1e8a25344ef8715d7cecfc3690b780ce1c60f07c" translate="yes" xml:space="preserve">
          <source>Finally, note all protocols are compiled with &lt;code&gt;debug_info&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, regardless of the option set by the &lt;code&gt;elixirc&lt;/code&gt; compiler. The debug info is used for consolidation and it is removed after consolidation unless globally set.</source>
          <target state="translated">Наконец, обратите внимание, что все протоколы компилируются с &lt;code&gt;debug_info&lt;/code&gt; , установленным в &lt;code&gt;true&lt;/code&gt; , независимо от параметра, установленного компилятором &lt;code&gt;elixirc&lt;/code&gt; . Отладочная информация используется для консолидации и удаляется после консолидации, если не задана глобально.</target>
        </trans-unit>
        <trans-unit id="7a86bfddfc1fd1f3cd3bcab92a5988d59aa4d019" translate="yes" xml:space="preserve">
          <source>Finally, note it is also possible to simply pass the &lt;code&gt;Stack&lt;/code&gt; module as a child:</source>
          <target state="translated">Наконец, обратите внимание, что также можно просто передать модуль &lt;code&gt;Stack&lt;/code&gt; как дочерний:</target>
        </trans-unit>
        <trans-unit id="b5e8ec2ca3602b6bc2810511f915ff11214b601b" translate="yes" xml:space="preserve">
          <source>Finally, note map keys in patterns must always be literals or previously bound variables matched with the pin operator.</source>
          <target state="translated">Наконец,клавиши карты-записи в деталях всегда должны быть буквами или предварительно связанными переменными,совпадающими с оператором pin.</target>
        </trans-unit>
        <trans-unit id="ddefd09be238de8fef0e43712279c903c785e333" translate="yes" xml:space="preserve">
          <source>Finally, note strings themselves are valid algebra documents that keep their formatting when pretty printed. This means your &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; implementation may simply return a string, although that will devoid it of any pretty-printing.</source>
          <target state="translated">Наконец, строки заметок сами по себе являются действительными алгебраическими документами, которые сохраняют свое форматирование при правильной печати. Это означает, что ваша реализация &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; может просто возвращать строку, хотя это избавит ее от какой-либо красивой печати.</target>
        </trans-unit>
        <trans-unit id="7e168ab8bcfeb48be21d768c678e77ae94e3845d" translate="yes" xml:space="preserve">
          <source>Finally, note that attributes can also be read inside functions:</source>
          <target state="translated">Наконец,обратите внимание,что атрибуты также могут быть прочитаны внутри функций:</target>
        </trans-unit>
        <trans-unit id="525d826b02e67b29a0d7a1fb2bd96144f8ca9ed8" translate="yes" xml:space="preserve">
          <source>Finally, note the coverage itself is not measured across the projects themselves. For example, if project B depends on A, and if there is code in A that is only executed from project B, those lines will not be marked as covered, which is important, as those projects should be developed and tested in isolation.</source>
          <target state="translated">Наконец,следует отметить,что сам охват не измеряется по всем проектам.Например,если проект B зависит от A,и если в A есть код,который выполняется только из проекта B,то эти строки не будут помечены как покрытые,что важно,так как эти проекты должны разрабатываться и тестироваться изолированно.</target>
        </trans-unit>
        <trans-unit id="d4f7dd24a40c84b2db68e974eaff07a24dba709d" translate="yes" xml:space="preserve">
          <source>Finally, note the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module are eager: they will traverse the enumerable as soon as they are invoked. This is particularly dangerous when working with infinite enumerables. In such cases, you should use the &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module, which allows you to lazily express computations, without traversing collections, and work with possibly infinite collections. See the &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module for examples and documentation.</source>
          <target state="translated">Наконец, обратите внимание, что функции в модуле &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; активны: они будут проходить через перечислимое, как только они будут вызваны. Это особенно опасно при работе с бесконечными перечислениями. В таких случаях вам следует использовать модуль &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; , который позволяет вам лениво выражать вычисления без обхода коллекций и работать с возможно бесконечными коллекциями. См. Модуль &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; для примеров и документации.</target>
        </trans-unit>
        <trans-unit id="60bc3c90be2296af6dc74f8ac6ed31dee639afd7" translate="yes" xml:space="preserve">
          <source>Finally, note the functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module are eager: they will traverse the enumerable as soon as they are invoked. This is particularly dangerous when working with infinite enumerables. In such cases, you should use the &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module, which allows you to lazily express computations, without traversing collections, and work with possibly infinite collections. See the &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; module for examples and documentation.</source>
          <target state="translated">Наконец, обратите внимание, что функции в модуле &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; активны: они будут проходить через перечислимое, как только они будут вызваны. Это особенно опасно при работе с бесконечными перечислениями. В таких случаях вам следует использовать модуль &lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; , который позволяет вам лениво выражать вычисления без обхода коллекций и работать с возможно бесконечными коллекциями. См. Модуль &lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; для примеров и документации.</target>
        </trans-unit>
        <trans-unit id="12f0160206d216529166c8634dc691e626760b5b" translate="yes" xml:space="preserve">
          <source>Finally, notice that attributes can also be read inside functions:</source>
          <target state="translated">Наконец,обратите внимание,что атрибуты также могут быть прочитаны внутри функций:</target>
        </trans-unit>
        <trans-unit id="989e69e0609a31b9b4fe9f32b562a703b9696c7b" translate="yes" xml:space="preserve">
          <source>Finally, remember that strings in Elixir are UTF-8 encoded binaries. This means that, similar to charlists, prefix matches on strings are also possible with the binary concatenation operator (&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">Наконец, помните, что строки в Elixir - это двоичные файлы в кодировке UTF-8. Это означает, что, подобно спискам символов, совпадение префиксов в строках также возможно с помощью оператора двоичной конкатенации ( &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%3C%3E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; &lt;/a&gt; ):</target>
        </trans-unit>
        <trans-unit id="232829bb783ca862d2a7fbdd06c1982a8e6d4a55" translate="yes" xml:space="preserve">
          <source>Finally, remember you can also get a mini-overview of the runtime info by calling &lt;code&gt;runtime_info/0&lt;/code&gt; directly in IEx.</source>
          <target state="translated">Наконец, помните, что вы также можете получить мини-обзор информации о времени выполнения, вызвав &lt;code&gt;runtime_info/0&lt;/code&gt; непосредственно в IEx.</target>
        </trans-unit>
        <trans-unit id="3d4e093b24b7868fdbb88889dcf9d11e7ebbe5c8" translate="yes" xml:space="preserve">
          <source>Finally, the line &lt;code&gt;import_config &quot;#{Mix.env()}.exs&quot;&lt;/code&gt; will import other config files, based on the current Mix environment, such as &lt;code&gt;config/dev.exs&lt;/code&gt; and &lt;code&gt;config/test.exs&lt;/code&gt;.</source>
          <target state="translated">Наконец, строка &lt;code&gt;import_config &quot;#{Mix.env()}.exs&quot;&lt;/code&gt; импортирует другие файлы конфигурации на основе текущей среды Mix, такие как &lt;code&gt;config/dev.exs&lt;/code&gt; и &lt;code&gt;config/test.exs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b6807f6f10cbe61d66aff585c4548460bfb9b94d" translate="yes" xml:space="preserve">
          <source>Finally, the line &lt;code&gt;import_config &quot;#{config_env()}.exs&quot;&lt;/code&gt; will import other config files based on the current configuration environment, such as &lt;code&gt;config/dev.exs&lt;/code&gt; and &lt;code&gt;config/test.exs&lt;/code&gt;.</source>
          <target state="translated">Наконец, строка &lt;code&gt;import_config &quot;#{config_env()}.exs&quot;&lt;/code&gt; импортирует другие файлы конфигурации на основе текущей среды конфигурации, такие как &lt;code&gt;config/dev.exs&lt;/code&gt; и &lt;code&gt;config/test.exs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="321ba25e566c212d784496c47ffc76a0ad896628" translate="yes" xml:space="preserve">
          <source>Finally, the stacktrace relates to the failure itself, giving information about the test and often the place the failure was generated from within the source files.</source>
          <target state="translated">Наконец,стековая трассировка относится к самому срыву,давая информацию о тесте и часто о месте,где сбой был сгенерирован из исходных файлов.</target>
        </trans-unit>
        <trans-unit id="924ac30e08d7b545eac852afc656f22c82661634" translate="yes" xml:space="preserve">
          <source>Finally, these operators appear in the precedence table above but are only meaningful within certain constructs:</source>
          <target state="translated">Наконец,эти операторы появляются в приведенной выше таблице приоритетов,но имеют смысл только в рамках определенных конструкций:</target>
        </trans-unit>
        <trans-unit id="3f56c580dd08d36a6b47e54333acfe9e1d8d30e4" translate="yes" xml:space="preserve">
          <source>Finally, this module also contains Elixir related functions, a bit tied to Elixir formatting, such as &lt;a href=&quot;#to_doc/2&quot;&gt;&lt;code&gt;to_doc/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Наконец, этот модуль также содержит функции, связанные с Elixir, немного привязанные к форматированию Elixir, такие как &lt;a href=&quot;#to_doc/2&quot;&gt; &lt;code&gt;to_doc/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9005decc18b830a894ffeaad85db25d6cd8463cf" translate="yes" xml:space="preserve">
          <source>Finally, to convert a String into a list of integer code points, known as &quot;charlists&quot; in Elixir, you can call &lt;code&gt;String.to_charlist&lt;/code&gt;:</source>
          <target state="translated">Наконец, чтобы преобразовать String в список целочисленных кодовых точек, известный как &amp;laquo;charlists&amp;raquo; в Elixir, вы можете вызвать &lt;code&gt;String.to_charlist&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="29c7d0203ff19b759dff9a8dcf709329c059ef93" translate="yes" xml:space="preserve">
          <source>Finally, you may have observed that each doctest corresponds to a different test in our suite, which now reports a total of 7 doctests. That is because ExUnit considers the following to define two different doctests:</source>
          <target state="translated">Наконец,вы,возможно,заметили,что каждый doctest соответствует разным тестам в нашем комплекте,который теперь сообщает в общей сложности 7 doctests.Это связано с тем,что ExUnit считает,что для определения двух различных доктестов необходимо следующее:</target>
        </trans-unit>
        <trans-unit id="82318fe7e7a021f4fa35e9409276a28582c98da1" translate="yes" xml:space="preserve">
          <source>Find more about the pipe operator &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt;by reading its documentation&lt;/a&gt;.</source>
          <target state="translated">Узнайте больше об операторе канала &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2&quot;&gt;, прочитав его документацию&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d473a61a8edc12c54afe46832414dc97879d0388" translate="yes" xml:space="preserve">
          <source>Finds a template path for the release.</source>
          <target state="translated">Находит путь к шаблону релиза.</target>
        </trans-unit>
        <trans-unit id="e44a6c20b46b4eb7ebeba1748cd0e7795b1fd20f" translate="yes" xml:space="preserve">
          <source>Finds the &lt;code&gt;{pid, value}&lt;/code&gt; pair for the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; in no particular order.</source>
          <target state="translated">Находит пару &lt;code&gt;{pid, value}&lt;/code&gt; для данного &lt;code&gt;key&lt;/code&gt; в &lt;code&gt;registry&lt;/code&gt; в произвольном порядке.</target>
        </trans-unit>
        <trans-unit id="d980122971e9d4fe80a33e7b799338a83929abd3" translate="yes" xml:space="preserve">
          <source>Finds the element at the given &lt;code&gt;index&lt;/code&gt; (zero-based).</source>
          <target state="translated">Находит элемент по заданному &lt;code&gt;index&lt;/code&gt; (с нуля).</target>
        </trans-unit>
        <trans-unit id="fdbbbf2a367be4fcd9eca718811c5a61aea8c66b" translate="yes" xml:space="preserve">
          <source>First of all, since we generated this project inside &lt;code&gt;kv_umbrella/apps&lt;/code&gt;, Mix automatically detected the umbrella structure and added four lines to the project definition:</source>
          <target state="translated">Прежде всего, поскольку мы сгенерировали этот проект внутри &lt;code&gt;kv_umbrella/apps&lt;/code&gt; , Mix автоматически обнаружил структуру зонтика и добавил четыре строки в определение проекта:</target>
        </trans-unit>
        <trans-unit id="21e0a6d768daca714108b3a36ec6e2151c3c1139" translate="yes" xml:space="preserve">
          <source>First this task guarantees that all dependencies are in place and that the current project has been compiled. Then the current application is started as a temporary application, unless &lt;code&gt;:start_permanent&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in your project configuration or the &lt;code&gt;--permanent&lt;/code&gt; option is given, then it's started as permanent, which guarantees the node will shut down if the application crashes permanently.</source>
          <target state="translated">Во-первых, эта задача гарантирует, что все зависимости установлены и текущий проект скомпилирован. Затем текущее приложение запускается как временное приложение, если &lt;code&gt;:start_permanent&lt;/code&gt; не установлено в &lt;code&gt;true&lt;/code&gt; в конфигурации вашего проекта или не &lt;code&gt;--permanent&lt;/code&gt; опция --permanent , тогда оно запускается как постоянное, что гарантирует, что узел отключится, если приложение выйдет из строя навсегда.</target>
        </trans-unit>
        <trans-unit id="0b225f4fd1da05fdbc3ee99a9f166606b1d95c47" translate="yes" xml:space="preserve">
          <source>First, if the routing tables are the opposite of each other, such as &lt;code&gt;[{?a..?m, :&quot;foo@computer-name&quot;}, {?n..?z, :&quot;bar@computer-name&quot;}]&lt;/code&gt; in one node and &lt;code&gt;[{?a..?m, :&quot;bar@computer-name&quot;}, {?n..?z, :&quot;foo@computer-name&quot;}]&lt;/code&gt; in the other, you can have a routing request that will run recursively in the cluster infinitely. This can be tackled at the application level by making sure you pass a list of seen nodes when we route, such as &lt;code&gt;KV.Router.route(bucket, mod, fun, args, seen_nodes)&lt;/code&gt;. Then by checking if the node being dispatched to was already visited, we can avoid the cycle. Implementing and testing this functionality will be left as an exercise.</source>
          <target state="translated">Во-первых, если таблицы маршрутизации противоположны друг другу, например &lt;code&gt;[{?a..?m, :&quot;foo@computer-name&quot;}, {?n..?z, :&quot;bar@computer-name&quot;}]&lt;/code&gt; в одном узле и &lt;code&gt;[{?a..?m, :&quot;bar@computer-name&quot;}, {?n..?z, :&quot;foo@computer-name&quot;}]&lt;/code&gt; в другом, вы можете иметь запрос маршрутизации, который будет рекурсивно выполняться в кластере бесконечно. Эту проблему можно решить на уровне приложения, убедившись, что вы передаете список видимых узлов при маршрутизации, например &lt;code&gt;KV.Router.route(bucket, mod, fun, args, seen_nodes)&lt;/code&gt; . Затем, проверив, посещался ли уже отправляемый узел, мы можем избежать цикла. Внедрение и тестирование этой функции оставим как упражнение.</target>
        </trans-unit>
        <trans-unit id="fe6a7fa579eecc0b0104d2aa94bc63bd9d9aa9d6" translate="yes" xml:space="preserve">
          <source>First, the &lt;code&gt;request&lt;/code&gt; is sent to every node in &lt;code&gt;nodes&lt;/code&gt;; then, the caller waits for the replies. This function returns a two-element tuple &lt;code&gt;{replies, bad_nodes}&lt;/code&gt; where:</source>
          <target state="translated">Сначала &lt;code&gt;request&lt;/code&gt; отправляется на каждый узел в &lt;code&gt;nodes&lt;/code&gt; ; затем вызывающий абонент ожидает ответов. Эта функция возвращает двухэлементный кортеж &lt;code&gt;{replies, bad_nodes}&lt;/code&gt; где:</target>
        </trans-unit>
        <trans-unit id="60398b803dd263be0dc63a6c96308aea282994d5" translate="yes" xml:space="preserve">
          <source>First, the formatter never changes the semantics of the code by default. This means the input AST and the output AST are equivalent. Optional behaviour, such as &lt;code&gt;:rename_deprecated_at&lt;/code&gt;, is allowed to break this guarantee.</source>
          <target state="translated">Во-первых, модуль форматирования по умолчанию никогда не изменяет семантику кода. Это означает, что входной и выходной AST эквивалентны. Необязательное поведение, такое как &lt;code&gt;:rename_deprecated_at&lt;/code&gt; , может нарушать эту гарантию.</target>
        </trans-unit>
        <trans-unit id="761d6955efc7722bb7c5e17c7ad9ae6eee0e3a82" translate="yes" xml:space="preserve">
          <source>Flattens the given &lt;code&gt;list&lt;/code&gt; of nested lists.</source>
          <target state="translated">Сглаживает данный &lt;code&gt;list&lt;/code&gt; вложенных списков.</target>
        </trans-unit>
        <trans-unit id="384278e07033851614565e0c9f8e0ea314279560" translate="yes" xml:space="preserve">
          <source>Flattens the given &lt;code&gt;list&lt;/code&gt; of nested lists. The list &lt;code&gt;tail&lt;/code&gt; will be added at the end of the flattened list.</source>
          <target state="translated">Сглаживает данный &lt;code&gt;list&lt;/code&gt; вложенных списков. &lt;code&gt;tail&lt;/code&gt; списка будет добавлен в конец сглаженного списка.</target>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="translated">Float</target>
        </trans-unit>
        <trans-unit id="e0ed30f7614c69e32cbce2c9fd0bd8fcaa7586e6" translate="yes" xml:space="preserve">
          <source>Float numbers require a dot followed by at least one digit and also support &lt;code&gt;e&lt;/code&gt; for scientific notation:</source>
          <target state="translated">Для чисел с плавающей запятой требуется точка, за которой следует хотя бы одна цифра, а также поддержка &lt;code&gt;e&lt;/code&gt; для экспоненциальной записи:</target>
        </trans-unit>
        <trans-unit id="a4495969af61f575a24ee4711fa76dfaafb26d0e" translate="yes" xml:space="preserve">
          <source>Floats in Elixir are 64-bit double precision.</source>
          <target state="translated">Поплавки в Эликсире имеют 64-битную двойную точность.</target>
        </trans-unit>
        <trans-unit id="9ee393efb1b19d0c371e21c8a5d6360e13a111b0" translate="yes" xml:space="preserve">
          <source>Flushes all &lt;code&gt;:mix_shell&lt;/code&gt; and &lt;code&gt;:mix_shell_input&lt;/code&gt; messages from the current process.</source>
          <target state="translated">Удаляет все сообщения &lt;code&gt;:mix_shell&lt;/code&gt; и &lt;code&gt;:mix_shell_input&lt;/code&gt; из текущего процесса.</target>
        </trans-unit>
        <trans-unit id="1f37e32316ff57285093c07bcc6fa68a47a4a700" translate="yes" xml:space="preserve">
          <source>Flushes the logger.</source>
          <target state="translated">Смывает лесозаготовитель.</target>
        </trans-unit>
        <trans-unit id="d44af71a2582a2b67261bbce0307838133bc552a" translate="yes" xml:space="preserve">
          <source>Flushes the output buffer and returns its current contents.</source>
          <target state="translated">Промывает выходной буфер и возвращает его текущее содержимое.</target>
        </trans-unit>
        <trans-unit id="1fd9c42d3180adcefdbd370b8adb9856f5a36877" translate="yes" xml:space="preserve">
          <source>Folds (reduces) the given list from the left with a function. Requires an accumulator.</source>
          <target state="translated">Складывает (уменьшает)данный список слева с помощью функции.Требуется аккумулятор.</target>
        </trans-unit>
        <trans-unit id="569c663a35f673e18e4fd8649f95dd98dfc6e9c3" translate="yes" xml:space="preserve">
          <source>Folds (reduces) the given list from the right with a function. Requires an accumulator.</source>
          <target state="translated">Складывает (уменьшает)данный список справа с помощью функции.Требуется аккумулятор.</target>
        </trans-unit>
        <trans-unit id="2fa0635488dcee65136d608f773cf5f9ef5e7acf" translate="yes" xml:space="preserve">
          <source>Folds a list of documents into a document using the given folder function.</source>
          <target state="translated">Складывает список документов в документ с помощью функции данной папки.</target>
        </trans-unit>
        <trans-unit id="708d44cdbbf26cc5087abdc9244c378da50e27f8" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;call/2&lt;/code&gt; requests, we implement a &lt;code&gt;handle_call/3&lt;/code&gt; callback that receives the &lt;code&gt;request&lt;/code&gt;, the process from which we received the request (&lt;code&gt;_from&lt;/code&gt;), and the current server state (&lt;code&gt;names&lt;/code&gt;). The &lt;code&gt;handle_call/3&lt;/code&gt; callback returns a tuple in the format &lt;code&gt;{:reply, reply, new_state}&lt;/code&gt;. The first element of the tuple, &lt;code&gt;:reply&lt;/code&gt;, indicates that the server should send a reply back to the client. The second element, &lt;code&gt;reply&lt;/code&gt;, is what will be sent to the client while the third, &lt;code&gt;new_state&lt;/code&gt; is the new server state.</source>
          <target state="translated">Для запросов &lt;code&gt;call/2&lt;/code&gt; мы реализуем обратный вызов &lt;code&gt;handle_call/3&lt;/code&gt; , который получает &lt;code&gt;request&lt;/code&gt; , процесс, от которого мы получили запрос ( &lt;code&gt;_from&lt;/code&gt; ), и текущее состояние сервера ( &lt;code&gt;names&lt;/code&gt; ). &lt;code&gt;handle_call/3&lt;/code&gt; обратного вызова возвращает кортеж в формате &lt;code&gt;{:reply, reply, new_state}&lt;/code&gt; . Первый элемент кортежа &lt;code&gt;:reply&lt;/code&gt; указывает, что сервер должен отправить ответ клиенту. Второй элемент, &lt;code&gt;reply&lt;/code&gt; , будет отправлен клиенту, а третий, &lt;code&gt;new_state&lt;/code&gt; , - это новое состояние сервера.</target>
        </trans-unit>
        <trans-unit id="85fe9a9b5eab6f7837fd7ce17f20db0e36c96d5e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;cast/2&lt;/code&gt; requests, we implement a &lt;code&gt;handle_cast/2&lt;/code&gt; callback that receives the &lt;code&gt;request&lt;/code&gt; and the current server state (&lt;code&gt;names&lt;/code&gt;). The &lt;code&gt;handle_cast/2&lt;/code&gt; callback returns a tuple in the format &lt;code&gt;{:noreply, new_state}&lt;/code&gt;. Note that in a real application we would have probably implemented the callback for &lt;code&gt;:create&lt;/code&gt; with a synchronous call instead of an asynchronous cast. We are doing it this way to illustrate how to implement a cast callback.</source>
          <target state="translated">Для запросов &lt;code&gt;cast/2&lt;/code&gt; мы реализуем обратный вызов &lt;code&gt;handle_cast/2&lt;/code&gt; , который получает &lt;code&gt;request&lt;/code&gt; и текущее состояние сервера ( &lt;code&gt;names&lt;/code&gt; ). &lt;code&gt;handle_cast/2&lt;/code&gt; обратного вызова возвращает кортеж в формате &lt;code&gt;{:noreply, new_state}&lt;/code&gt; . Обратите внимание, что в реальном приложении мы, вероятно, реализовали бы обратный вызов для &lt;code&gt;:create&lt;/code&gt; с синхронным вызовом вместо асинхронного приведения. Мы делаем это таким образом, чтобы проиллюстрировать, как реализовать обратный вызов приведения.</target>
        </trans-unit>
        <trans-unit id="3c507ce5e858adfd9920b90e4c749fbfaa148e35" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt;&lt;code&gt;:compile.file/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Полный список параметров см. В &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt; &lt;code&gt;:compile.file/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9b0f265cab36385ed743f3055c68d076ae6c612a" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt;&lt;code&gt;:compile.file/2&lt;/code&gt;&lt;/a&gt;. The option &lt;code&gt;:debug_info&lt;/code&gt; is always added to the end of it. You can disable that using:</source>
          <target state="translated">Полный список параметров см. В &lt;a href=&quot;http://www.erlang.org/doc/man/compile.html#file-2&quot;&gt; &lt;code&gt;:compile.file/2&lt;/code&gt; &lt;/a&gt; . Параметр &lt;code&gt;:debug_info&lt;/code&gt; всегда добавляется в его конец. Вы можете отключить это, используя:</target>
        </trans-unit>
        <trans-unit id="40b1a5cb3bd304af286350dbfa2dd4e5a7bde159" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/leex.html#file-2&quot;&gt;&lt;code&gt;:leex.file/2&lt;/code&gt;&lt;/a&gt;. Note that the &lt;code&gt;:report&lt;/code&gt;, &lt;code&gt;:return_errors&lt;/code&gt;, and &lt;code&gt;:return_warnings&lt;/code&gt; options are overridden by this compiler, thus setting them has no effect.</source>
          <target state="translated">Полный список опций см &lt;a href=&quot;http://www.erlang.org/doc/man/leex.html#file-2&quot;&gt; &lt;code&gt;:leex.file/2&lt;/code&gt; &lt;/a&gt; . Обратите внимание , что &lt;code&gt;:report&lt;/code&gt; , &lt;code&gt;:return_errors&lt;/code&gt; и &lt;code&gt;:return_warnings&lt;/code&gt; вариантов перекрывается этим компилятором, таким образом устанавливая их не имеют никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="3e1748b035236f7578aca77841e51909dcda09f3" translate="yes" xml:space="preserve">
          <source>For a complete list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/yecc.html#file-1&quot;&gt;&lt;code&gt;:yecc.file/1&lt;/code&gt;&lt;/a&gt;. Note that the &lt;code&gt;:report&lt;/code&gt;, &lt;code&gt;:return_errors&lt;/code&gt;, and &lt;code&gt;:return_warnings&lt;/code&gt; options are overridden by this compiler, thus setting them has no effect.</source>
          <target state="translated">Полный список опций см &lt;a href=&quot;http://www.erlang.org/doc/man/yecc.html#file-1&quot;&gt; &lt;code&gt;:yecc.file/1&lt;/code&gt; &lt;/a&gt; . Обратите внимание , что &lt;code&gt;:report&lt;/code&gt; , &lt;code&gt;:return_errors&lt;/code&gt; и &lt;code&gt;:return_warnings&lt;/code&gt; вариантов перекрывается этим компилятором, таким образом устанавливая их не имеют никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="cbadcbaa533f681fcd43632a6b2da738e09b45d0" translate="yes" xml:space="preserve">
          <source>For a description of all options, see &lt;a href=&quot;#put_compiler_option/2&quot;&gt;&lt;code&gt;put_compiler_option/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для описания всех опций см. &lt;a href=&quot;#put_compiler_option/2&quot;&gt; &lt;code&gt;put_compiler_option/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5de5c09f365a342ca1f4adef5fcae8f98c944b89" translate="yes" xml:space="preserve">
          <source>For a detailed explanation it's worth reading the analysis in &lt;a href=&quot;http://www.erlang.org/doc/man/fprof.html#analysis&quot;&gt;Erlang/OTP documentation for fprof&lt;/a&gt;.</source>
          <target state="translated">Для подробного объяснения стоит прочитать анализ &lt;a href=&quot;http://www.erlang.org/doc/man/fprof.html#analysis&quot;&gt;документации Erlang / OTP для fprof&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b520e99e07d5ece73b44be8ccfff4f1b35fe3ab3" translate="yes" xml:space="preserve">
          <source>For a machine with 8 cores, the above will process 16 items instead of 10. The reason is that &lt;a href=&quot;#async_stream/5&quot;&gt;&lt;code&gt;async_stream/5&lt;/code&gt;&lt;/a&gt; always have 8 elements processing at once. So by the time &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; says it got all elements it needed, there are still 6 elements left to be processed.</source>
          <target state="translated">Для машины с 8 ядрами вышеупомянутое будет обрабатывать 16 элементов вместо 10. Причина в том, что &lt;a href=&quot;#async_stream/5&quot;&gt; &lt;code&gt;async_stream/5&lt;/code&gt; &lt;/a&gt; всегда обрабатывает 8 элементов одновременно. Таким образом, к тому времени, когда &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; сообщит,&lt;/a&gt; что получил все необходимые элементы, осталось обработать еще 6 элементов.</target>
        </trans-unit>
        <trans-unit id="455bca35994e1d4d5c63a42b082bcc28685c8fab" translate="yes" xml:space="preserve">
          <source>For a more complete rundown on the VM support for different times, see the &lt;a href=&quot;http://www.erlang.org/doc/apps/erts/time_correction.html&quot;&gt;chapter on time and time correction&lt;/a&gt; in the Erlang docs.</source>
          <target state="translated">Более полное изложение поддержки виртуальных машин в разное время см. В &lt;a href=&quot;http://www.erlang.org/doc/apps/erts/time_correction.html&quot;&gt;главе о времени и коррекции времени&lt;/a&gt; в документации Erlang.</target>
        </trans-unit>
        <trans-unit id="2ad3bd05a62d0ba912c71da5b141b89b54b65bc7" translate="yes" xml:space="preserve">
          <source>For a more complete understanding of the exit reasons and their impact, see the &quot;Exit reasons and restarts&quot; section.</source>
          <target state="translated">Более полное представление о причинах выхода и их влиянии см.в разделе &quot;Причины выхода и перезагрузки&quot;.</target>
        </trans-unit>
        <trans-unit id="28d7d5e1dc06aba969a0b236e650a8f1ae4054d6" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation, please read the &quot;Shutdown values (:shutdown)&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Для более подробного объяснения, пожалуйста, прочтите раздел &amp;laquo;Значения выключения (: shutdown)&amp;raquo; в модуле &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="282328027889720b4154eca4c4806b544bc3a754" translate="yes" xml:space="preserve">
          <source>For a more in-depth explanation, please read the &quot;Shutdown values (:shutdown)&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Для более подробного объяснения, пожалуйста, прочтите раздел &amp;laquo;Значения выключения (: shutdown)&amp;raquo; в модуле &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="37b344bcdc0c7b8779f65785a14e8c7aa3e5ded0" translate="yes" xml:space="preserve">
          <source>For accessing atom keys, one may also &lt;code&gt;map.key&lt;/code&gt;. Note that while &lt;code&gt;map[key]&lt;/code&gt; will return &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;map&lt;/code&gt; doesn't contain &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;map.key&lt;/code&gt; will raise if &lt;code&gt;map&lt;/code&gt; doesn't contain the key &lt;code&gt;:key&lt;/code&gt;.</source>
          <target state="translated">Для доступа к атомным ключам можно также использовать &lt;code&gt;map.key&lt;/code&gt; . Обратите внимание, что в то время как &lt;code&gt;map[key]&lt;/code&gt; вернет &lt;code&gt;nil&lt;/code&gt; , если &lt;code&gt;map&lt;/code&gt; не содержит &lt;code&gt;key&lt;/code&gt; , &lt;code&gt;map.key&lt;/code&gt; будет повышаться, если &lt;code&gt;map&lt;/code&gt; не содержит key &lt;code&gt;:key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="57b9d70004f10cc3b53d8d1fb3e515752a611d21" translate="yes" xml:space="preserve">
          <source>For all other time zones, it returns &lt;code&gt;{:error, :utc_only_time_zone_database}&lt;/code&gt;.</source>
          <target state="translated">Для всех других часовых поясов он возвращает &lt;code&gt;{:error, :utc_only_time_zone_database}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f912dfac4d0836d413b5ac057a2a5efa533103ff" translate="yes" xml:space="preserve">
          <source>For all remaining scenarios, libraries should not force their users to use the application environment for configuration. If the user of a library believes that certain parameter should be configured globally, then they can wrap the library functionality with their own application environment configuration.</source>
          <target state="translated">Для всех остальных сценариев,библиотеки не должны заставлять своих пользователей использовать среду приложений для настройки.Если пользователь библиотеки считает,что определенный параметр должен быть сконфигурирован глобально,то он может обернуть функциональность библиотеки собственной конфигурацией среды приложения.</target>
        </trans-unit>
        <trans-unit id="5c0878fd6cedf49cadfbc1ce37dc2efcc64e9280" translate="yes" xml:space="preserve">
          <source>For anonymous functions, there is also information about any of the atoms &lt;code&gt;:index&lt;/code&gt;, &lt;code&gt;:new_index&lt;/code&gt;, &lt;code&gt;:new_uniq&lt;/code&gt;, &lt;code&gt;:uniq&lt;/code&gt;, and &lt;code&gt;:pid&lt;/code&gt;. For a named function, the value of any of these items is always the atom &lt;code&gt;:undefined&lt;/code&gt;.</source>
          <target state="translated">Для анонимных функций, есть также информация о любом из атомов &lt;code&gt;:index&lt;/code&gt; , &lt;code&gt;:new_index&lt;/code&gt; , &lt;code&gt;:new_uniq&lt;/code&gt; , &lt;code&gt;:uniq&lt;/code&gt; , и &lt;code&gt;:pid&lt;/code&gt; . Для именованной функции значением любого из этих элементов всегда является атом &lt;code&gt;:undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b4ad9d30cceadfeb05cba1ddc74ec23c371587e" translate="yes" xml:space="preserve">
          <source>For any function, the information asked for can be any of the atoms &lt;code&gt;:module&lt;/code&gt;, &lt;code&gt;:name&lt;/code&gt;, &lt;code&gt;:arity&lt;/code&gt;, &lt;code&gt;:env&lt;/code&gt;, or &lt;code&gt;:type&lt;/code&gt;.</source>
          <target state="translated">Для любой функции, информация попросил может быть любой из атомов &lt;code&gt;:module&lt;/code&gt; , &lt;code&gt;:name&lt;/code&gt; , &lt;code&gt;:arity&lt;/code&gt; , &lt;code&gt;:env&lt;/code&gt; , или &lt;code&gt;:type&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="19051a75616b4ec98796f8226da734aa9dd4e72d" translate="yes" xml:space="preserve">
          <source>For binaries, the default is the size of the binary. Only the last binary in a match can use the default size. All others must have their size specified explicitly, even if the match is unambiguous. For example:</source>
          <target state="translated">Для двоичных файлов по умолчанию используется размер двоичного файла.Размер по умолчанию может использоваться только для последнего совпадающего двоичного файла.Все остальные должны явно указывать свой размер,даже если соответствие однозначно.Например:</target>
        </trans-unit>
        <trans-unit id="b53d094e78539531bab25286f248fcbe76cc3712" translate="yes" xml:space="preserve">
          <source>For cases like the one above, &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt;&lt;code&gt;Task.await/2&lt;/code&gt;&lt;/a&gt; are preferred.</source>
          <target state="translated">Для случаев, подобных описанному выше, &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://hexdocs.pm/elixir/Task.html#await/2&quot;&gt; &lt;code&gt;Task.await/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bee446e092800012625413c21226bed4c6f88b01" translate="yes" xml:space="preserve">
          <source>For cases like the one above, &lt;a href=&quot;task#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;task#await/2&quot;&gt;&lt;code&gt;Task.await/2&lt;/code&gt;&lt;/a&gt; are preferred.</source>
          <target state="translated">Для случаев, подобных описанному выше, &lt;a href=&quot;task#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;task#await/2&quot;&gt; &lt;code&gt;Task.await/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4bcf46e59d6f52359a868d6e88a0b7c5725001a1" translate="yes" xml:space="preserve">
          <source>For companies and teams, we recommend developers to run &lt;code&gt;mix format --check-formatted&lt;/code&gt; on their continuous integration servers, ensuring all current and future code follows the standard.</source>
          <target state="translated">Компаниям и командам мы рекомендуем разработчикам запускать на своих серверах непрерывной интеграции &lt;code&gt;mix format --check-formatted&lt;/code&gt; , чтобы весь текущий и будущий код соответствовал стандарту.</target>
        </trans-unit>
        <trans-unit id="57326dd8df98d78d81aebf773cf3bf48a345cefe" translate="yes" xml:space="preserve">
          <source>For compiling many files concurrently, see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.ParallelCompiler.html#compile/2&quot;&gt;&lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для одновременной компиляции множества файлов см. &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.ParallelCompiler.html#compile/2&quot;&gt; &lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b735130a48640def7fafe41aafe71355bd32d99" translate="yes" xml:space="preserve">
          <source>For compiling many files concurrently, see &lt;a href=&quot;kernel.parallelcompiler#compile/2&quot;&gt;&lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для одновременной компиляции множества файлов см. &lt;a href=&quot;kernel.parallelcompiler#compile/2&quot;&gt; &lt;code&gt;Kernel.ParallelCompiler.compile/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="22400dc268fe8a7d24bf1a85c2d093a54cf84f6d" translate="yes" xml:space="preserve">
          <source>For convenience, consider adding &lt;code&gt;~/.mix/escripts&lt;/code&gt; directory to your &lt;code&gt;PATH&lt;/code&gt; environment variable. For more information, check the wikipedia article on PATH: &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;https://en.wikipedia.org/wiki/PATH_(variable)&lt;/a&gt;</source>
          <target state="translated">Для удобства рассмотрите возможность добавления &lt;code&gt;~/.mix/escripts&lt;/code&gt; в &lt;code&gt;PATH&lt;/code&gt; среды PATH . Для получения дополнительной информации ознакомьтесь со статьей в Википедии о PATH: &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;https://en.wikipedia.org/wiki/PATH_(variable)&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dfd371e570b65e572a1bfac8fa45fb1789e4dcde" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all imports, requires and aliases defined in the current environment will be automatically carried over:</source>
          <target state="translated">Для удобства, вы можете передать &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; , как &lt;code&gt;opts&lt;/code&gt; аргумент и весь импорт, требует и псевдонимы , определенные в текущей среде будут автоматически перенесены:</target>
        </trans-unit>
        <trans-unit id="d8d23e5be0a4ca18d043f1de42dd2f9c986db30d" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all options will be automatically extracted from the current environment:</source>
          <target state="translated">Для удобства, вы можете передать &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;opts&lt;/code&gt; аргумента и все параметры будут автоматически извлекаются из текущей среды:</target>
        </trans-unit>
        <trans-unit id="fc1c26fa0cb08e8439005305225bde72db303603" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all imports, requires and aliases defined in the current environment will be automatically carried over:</source>
          <target state="translated">Для удобства, вы можете передать &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; , как &lt;code&gt;opts&lt;/code&gt; аргумент и весь импорт, требует и псевдонимы , определенные в текущей среде будут автоматически перенесены:</target>
        </trans-unit>
        <trans-unit id="98082b67d38ae575b213c7f51ae3f6f67492121c" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;opts&lt;/code&gt; argument and all options will be automatically extracted from the current environment:</source>
          <target state="translated">Для удобства, вы можете передать &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;opts&lt;/code&gt; аргумента и все параметры будут автоматически извлекаются из текущей среды:</target>
        </trans-unit>
        <trans-unit id="44989465a60239ad9d5198d147baa434ebc38464" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass any &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, as the first argument or as options. Both the module and all options will be automatically extracted from the environment:</source>
          <target state="translated">Для удобства вы можете передать любую структуру &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt; , например &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; , в качестве первого аргумента или параметров. И модуль, и все параметры будут автоматически извлечены из среды:</target>
        </trans-unit>
        <trans-unit id="54af569b6a029610c5091d98fd6f8fdc1073fe13" translate="yes" xml:space="preserve">
          <source>For convenience, you can pass any &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct, such as &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt;, as the first argument or as options. Both the module and all options will be automatically extracted from the environment:</source>
          <target state="translated">Для удобства вы можете передать любую структуру &lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt; , например &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt; , в качестве первого аргумента или в качестве параметров. И модуль, и все параметры будут автоматически извлечены из среды:</target>
        </trans-unit>
        <trans-unit id="74cba56f60db3c6914d9e9b93e9bb138f70a33f1" translate="yes" xml:space="preserve">
          <source>For converting a binary to a different encoding and for Unicode normalization mechanisms, see Erlang's &lt;code&gt;:unicode&lt;/code&gt; module.</source>
          <target state="translated">Для преобразования двоичного файла в другую кодировку и механизмов нормализации Unicode см &lt;code&gt;:unicode&lt;/code&gt; Модуль Erlang : unicode .</target>
        </trans-unit>
        <trans-unit id="6add89b99abcbf70ca9badb7516b8595c553f524" translate="yes" xml:space="preserve">
          <source>For debugging complex systems, jumping at the code is not enough. It is necessary to have an understanding of the whole virtual machine, processes, applications, as well as set up tracing mechanisms. Luckily this can be achieved in Erlang with &lt;code&gt;:observer&lt;/code&gt;. In your application:</source>
          <target state="translated">Для отладки сложных систем недостаточно прыгать по коду. Необходимо иметь представление обо всей виртуальной машине, процессах, приложениях, а также настраивать механизмы отслеживания. К счастью, в Erlang это можно сделать с помощью &lt;code&gt;:observer&lt;/code&gt; . В вашем приложении:</target>
        </trans-unit>
        <trans-unit id="5a06afd6a1e3c7ee6cdc0611f593f11b1bb1243b" translate="yes" xml:space="preserve">
          <source>For defining your own guards, Elixir even provides conveniences in &lt;code&gt;defguard&lt;/code&gt; and &lt;code&gt;defguardp&lt;/code&gt;. Let's look at a quick case study: we want to check whether an argument is an even or an odd integer. With pattern matching this is impossible because there is an infinite number of integers, and therefore we can't pattern match on every single one of them. Therefore we must use guards. We will just focus on checking for even numbers since checking for the odd ones is almost identical.</source>
          <target state="translated">Для определения ваших собственных стражей в Elixir даже есть удобство &lt;code&gt;defguard&lt;/code&gt; и &lt;code&gt;defguardp&lt;/code&gt; . Давайте посмотрим на небольшой пример: мы хотим проверить, является ли аргумент четным или нечетным целым числом. С сопоставлением с образцом это невозможно, потому что существует бесконечное количество целых чисел, и поэтому мы не можем сопоставить с образцом для каждого из них. Поэтому мы должны использовать охрану. Мы просто сосредоточимся на проверке четных чисел, поскольку проверка нечетных почти идентична.</target>
        </trans-unit>
        <trans-unit id="cb347f81732d219e27a511b076553d17de737f2a" translate="yes" xml:space="preserve">
          <source>For detailed documentation, see the &lt;a href=&quot;typespecs&quot;&gt;typespec documentation&lt;/a&gt;.</source>
          <target state="translated">Подробную документацию см. &lt;a href=&quot;typespecs&quot;&gt;В документации&lt;/a&gt; по типам .</target>
        </trans-unit>
        <trans-unit id="c3a098e863f08842ff154a18684a91f2e51c3a25" translate="yes" xml:space="preserve">
          <source>For detailed documentation, see the &lt;a href=&quot;typespecs#behaviours&quot;&gt;behaviour typespec documentation&lt;/a&gt;.</source>
          <target state="translated">Подробную документацию см. &lt;a href=&quot;typespecs#behaviours&quot;&gt;В документации по типам поведения&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="312205920e8b42c10300fdc1c0d355fb769ce4d0" translate="yes" xml:space="preserve">
          <source>For details about code points and graphemes, see the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module documentation.</source>
          <target state="translated">Подробнее о кодовых точках и графемах см. В документации модуля &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f4a8cd91cf5db5cd126fba13df45a267644abde" translate="yes" xml:space="preserve">
          <source>For duplicate registries:</source>
          <target state="translated">Для дубликатов реестров:</target>
        </trans-unit>
        <trans-unit id="72d0f0434fbcec9eb207f396a9fc529d7587b375" translate="yes" xml:space="preserve">
          <source>For dynamically logging messages, see &lt;a href=&quot;#bare_log/3&quot;&gt;&lt;code&gt;bare_log/3&lt;/code&gt;&lt;/a&gt;. But note that &lt;a href=&quot;#bare_log/3&quot;&gt;&lt;code&gt;bare_log/3&lt;/code&gt;&lt;/a&gt; always evaluates its arguments (unless the argument is an anonymous function).</source>
          <target state="translated">Для динамической регистрации сообщений см. &lt;a href=&quot;#bare_log/3&quot;&gt; &lt;code&gt;bare_log/3&lt;/code&gt; &lt;/a&gt; . Но обратите внимание, что &lt;a href=&quot;#bare_log/3&quot;&gt; &lt;code&gt;bare_log/3&lt;/code&gt; &lt;/a&gt; всегда оценивает свои аргументы (если аргумент не является анонимной функцией).</target>
        </trans-unit>
        <trans-unit id="1a7f7d68ad358e0a245cd7d3ae221748af013919" translate="yes" xml:space="preserve">
          <source>For each failure, ExUnit prints a detailed report, containing the test name with the test case, the code that failed and the values for the left side and right side (rhs) of the &lt;code&gt;==&lt;/code&gt; operator.</source>
          <target state="translated">Для каждого сбоя ExUnit распечатывает подробный отчет, содержащий имя теста с тестовым примером, код, который завершился ошибкой, и значения для левой и правой стороны (rhs) оператора &lt;code&gt;==&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9e3caa2dc1d9000c1cebb47a719b8e0066b5bd2d" translate="yes" xml:space="preserve">
          <source>For each protocol in the &lt;code&gt;@derive&lt;/code&gt; list, Elixir will assert the protocol has been implemented for &lt;code&gt;Any&lt;/code&gt;. If the &lt;code&gt;Any&lt;/code&gt; implementation defines a &lt;code&gt;__deriving__/3&lt;/code&gt; callback, the callback will be invoked and it should define the implementation module. Otherwise an implementation that simply points to the &lt;code&gt;Any&lt;/code&gt; implementation is automatically derived. For more information on the &lt;code&gt;__deriving__/3&lt;/code&gt; callback, see &lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#derive/3&quot;&gt;&lt;code&gt;Protocol.derive/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для каждого протокола в списке &lt;code&gt;@derive&lt;/code&gt; Elixir будет утверждать, что протокол реализован для &lt;code&gt;Any&lt;/code&gt; . Если реализация &lt;code&gt;Any&lt;/code&gt; определяет обратный вызов &lt;code&gt;__deriving__/3&lt;/code&gt; обратный вызов будет вызван, и он должен определить модуль реализации. В противном случае автоматически создается реализация, которая просто указывает на реализацию &lt;code&gt;Any&lt;/code&gt; . Для получения дополнительной информации об &lt;code&gt;__deriving__/3&lt;/code&gt; см. &lt;a href=&quot;https://hexdocs.pm/elixir/Protocol.html#derive/3&quot;&gt; &lt;code&gt;Protocol.derive/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e0fb1546f77232688d241d37ca1d325018f6f776" translate="yes" xml:space="preserve">
          <source>For each protocol in the &lt;code&gt;@derive&lt;/code&gt; list, Elixir will assert the protocol has been implemented for &lt;code&gt;Any&lt;/code&gt;. If the &lt;code&gt;Any&lt;/code&gt; implementation defines a &lt;code&gt;__deriving__/3&lt;/code&gt; callback, the callback will be invoked and it should define the implementation module. Otherwise an implementation that simply points to the &lt;code&gt;Any&lt;/code&gt; implementation is automatically derived. For more information on the &lt;code&gt;__deriving__/3&lt;/code&gt; callback, see &lt;a href=&quot;protocol#derive/3&quot;&gt;&lt;code&gt;Protocol.derive/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для каждого протокола в списке &lt;code&gt;@derive&lt;/code&gt; Elixir будет утверждать, что протокол реализован для &lt;code&gt;Any&lt;/code&gt; . Если реализация &lt;code&gt;Any&lt;/code&gt; определяет обратный вызов &lt;code&gt;__deriving__/3&lt;/code&gt; обратный вызов будет вызван, и он должен определить модуль реализации. В противном случае автоматически создается реализация, которая просто указывает на реализацию &lt;code&gt;Any&lt;/code&gt; . Для получения дополнительной информации об &lt;code&gt;__deriving__/3&lt;/code&gt; см. &lt;a href=&quot;protocol#derive/3&quot;&gt; &lt;code&gt;Protocol.derive/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="25c946451972c973e2251bc9392dd413447e547a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; will take longer as the input grows. On the other hand, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#byte_size/1&quot;&gt;&lt;code&gt;Kernel.byte_size/1&lt;/code&gt;&lt;/a&gt; always runs in constant time (i.e. regardless of the input size).</source>
          <target state="translated">Например, &lt;a href=&quot;#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt; займет больше времени по мере увеличения ввода. С другой стороны, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#byte_size/1&quot;&gt; &lt;code&gt;Kernel.byte_size/1&lt;/code&gt; &lt;/a&gt; всегда выполняется в постоянное время (т.е. независимо от размера ввода).</target>
        </trans-unit>
        <trans-unit id="1ce575e007b24aad8c7c6a66939213cc21ace30a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;the Ecto library&lt;/a&gt; makes use of these features to provide an elegant DSL for writing database queries:</source>
          <target state="translated">Например, &lt;a href=&quot;https://github.com/elixir-lang/ecto&quot;&gt;библиотека Ecto&lt;/a&gt; использует эти функции для обеспечения элегантного DSL для написания запросов к базе данных:</target>
        </trans-unit>
        <trans-unit id="72de0d4d0cc3d700aee14fc5035d60936c6b125d" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;keyword#get/3&quot;&gt;&lt;code&gt;Keyword.get/3&lt;/code&gt;&lt;/a&gt; will get the first entry matching the given key, regardless if duplicated entries exist. Similarly, &lt;a href=&quot;keyword#put/3&quot;&gt;&lt;code&gt;Keyword.put/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;keyword#delete/3&quot;&gt;&lt;code&gt;Keyword.delete/3&lt;/code&gt;&lt;/a&gt; ensure all duplicated entries for a given key are removed when invoked. Note that operations that require keys to be found in the keyword list (like &lt;a href=&quot;keyword#get/3&quot;&gt;&lt;code&gt;Keyword.get/3&lt;/code&gt;&lt;/a&gt;) need to traverse the list in order to find keys, so these operations may be slower than their map counterparts.</source>
          <target state="translated">Например, &lt;a href=&quot;keyword#get/3&quot;&gt; &lt;code&gt;Keyword.get/3&lt;/code&gt; &lt;/a&gt; получит первую запись, соответствующую данному ключу, независимо от того, существуют ли повторяющиеся записи. Аналогичным образом &lt;a href=&quot;keyword#put/3&quot;&gt; &lt;code&gt;Keyword.put/3&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;keyword#delete/3&quot;&gt; &lt;code&gt;Keyword.delete/3&lt;/code&gt; &lt;/a&gt; гарантируют, что все повторяющиеся записи для данного ключа удаляются при вызове. Обратите внимание, что операции, которые требуют, чтобы ключи были найдены в списке ключевых слов (например, &lt;a href=&quot;keyword#get/3&quot;&gt; &lt;code&gt;Keyword.get/3&lt;/code&gt; &lt;/a&gt; ), должны пройти по списку, чтобы найти ключи, поэтому эти операции могут быть медленнее, чем их аналоги на карте.</target>
        </trans-unit>
        <trans-unit id="0e6838c5c681ffb29b6c7310ee5d238a1c820319" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;string#length/1&quot;&gt;&lt;code&gt;String.length/1&lt;/code&gt;&lt;/a&gt; will take longer as the input grows. On the other hand, &lt;a href=&quot;kernel#byte_size/1&quot;&gt;&lt;code&gt;Kernel.byte_size/1&lt;/code&gt;&lt;/a&gt; always runs in constant time (i.e. regardless of the input size).</source>
          <target state="translated">Например, &lt;a href=&quot;string#length/1&quot;&gt; &lt;code&gt;String.length/1&lt;/code&gt; &lt;/a&gt; займет больше времени по мере увеличения ввода. С другой стороны, &lt;a href=&quot;kernel#byte_size/1&quot;&gt; &lt;code&gt;Kernel.byte_size/1&lt;/code&gt; &lt;/a&gt; всегда выполняется в постоянное время (т.е. независимо от размера ввода).</target>
        </trans-unit>
        <trans-unit id="26266e605a5c6ee91c1509624141ef8292746ecc" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;:info&lt;/code&gt; takes precedence over &lt;code&gt;:debug&lt;/code&gt;. If your log level is set to &lt;code&gt;:info&lt;/code&gt; then all &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:notice&lt;/code&gt; and above will be passed to backends. If your log level is set to &lt;code&gt;:alert&lt;/code&gt;, only &lt;code&gt;:alert&lt;/code&gt; and &lt;code&gt;:emergency&lt;/code&gt; will be printed.</source>
          <target state="translated">Например &lt;code&gt;:info&lt;/code&gt; имеет приоритет над &lt;code&gt;:debug&lt;/code&gt; . Если уровень протоколирования устанавливается в &lt;code&gt;:info&lt;/code&gt; , то все &lt;code&gt;:info&lt;/code&gt; , &lt;code&gt;:notice&lt;/code&gt; и выше будут переданы бэкэндов. Если ваш уровень журнала установлен на &lt;code&gt;:alert&lt;/code&gt; , будут напечатаны только &lt;code&gt;:alert&lt;/code&gt; и &lt;code&gt;:emergency&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8c117e3a1a342b1f8160acdddadbc25ed7792af" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;:info&lt;/code&gt; takes precedence over &lt;code&gt;:debug&lt;/code&gt;. If your log level is set to &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt;, &lt;code&gt;:warn&lt;/code&gt;, and &lt;code&gt;:error&lt;/code&gt; will be printed to the console. If your log level is set to &lt;code&gt;:warn&lt;/code&gt;, only &lt;code&gt;:warn&lt;/code&gt; and &lt;code&gt;:error&lt;/code&gt; will be printed.</source>
          <target state="translated">Например &lt;code&gt;:info&lt;/code&gt; имеет приоритет над &lt;code&gt;:debug&lt;/code&gt; . Если уровень протоколирования устанавливается в &lt;code&gt;:info&lt;/code&gt; , &lt;code&gt;:info&lt;/code&gt; , &lt;code&gt;:warn&lt;/code&gt; , и &lt;code&gt;:error&lt;/code&gt; будет выведено на консоль. Если ваш уровень журнала установлен на &lt;code&gt;:warn&lt;/code&gt; , будут напечатаны только &lt;code&gt;:warn&lt;/code&gt; и &lt;code&gt;:error&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="852751a1fe78b13274da6029c51675b7e90dcb56" translate="yes" xml:space="preserve">
          <source>For example, Nerves uses this function to force all dependencies to be reloaded after it updates the system environment. It goes roughly like this:</source>
          <target state="translated">Например,Нервы используют эту функцию для того,чтобы заставить все зависимости перезагружаться после обновления системного окружения.Примерно так и происходит:</target>
        </trans-unit>
        <trans-unit id="4af1c4caff42157f9481064fecc0d437c1cbd415" translate="yes" xml:space="preserve">
          <source>For example, a bitstring generator can be used with the &lt;code&gt;:into&lt;/code&gt; option in order to easily remove all spaces in a string:</source>
          <target state="translated">Например, генератор битовых строк можно использовать с параметром &lt;code&gt;:into&lt;/code&gt; , чтобы легко удалить все пробелы в строке:</target>
        </trans-unit>
        <trans-unit id="e07fb9806a4d8ebf20cacc02e52f4a77448a86cc" translate="yes" xml:space="preserve">
          <source>For example, a value that is not meant to be used must be assigned to &lt;code&gt;_&lt;/code&gt; or to a variable starting with underscore:</source>
          <target state="translated">Например, значение, которое не предназначено для использования, должно быть присвоено &lt;code&gt;_&lt;/code&gt; или переменной, начинающейся с подчеркивания:</target>
        </trans-unit>
        <trans-unit id="4d8801f0d497391a5a53cac45037cd40a678af92" translate="yes" xml:space="preserve">
          <source>For example, although the code point &quot;&amp;eacute;&quot; is a single character, its underlying representation uses two bytes:</source>
          <target state="translated">Например, хотя кодовая точка &amp;laquo;&amp;eacute;&amp;raquo; является одним символом, его базовое представление использует два байта:</target>
        </trans-unit>
        <trans-unit id="fc12bb8ea1c91096d68d9eef9815101e3f31bcef" translate="yes" xml:space="preserve">
          <source>For example, consider you have a project called &lt;code&gt;my_app&lt;/code&gt; that depends on another one called &lt;code&gt;my_dep&lt;/code&gt;. &lt;code&gt;my_dep&lt;/code&gt; wants to export some configuration, so &lt;code&gt;my_dep/.formatter.exs&lt;/code&gt; would look like this:</source>
          <target state="translated">Например, представьте, что у вас есть проект с именем &lt;code&gt;my_app&lt;/code&gt; , который зависит от другого &lt;code&gt;my_dep&lt;/code&gt; именем my_dep . &lt;code&gt;my_dep&lt;/code&gt; хочет экспортировать некоторую конфигурацию, поэтому &lt;code&gt;my_dep/.formatter.exs&lt;/code&gt; будет выглядеть так:</target>
        </trans-unit>
        <trans-unit id="bafc7c87cc4324b3f378e1b55b1f860c335be286" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol we have:</source>
          <target state="translated">Например, для протокола &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; у нас есть:</target>
        </trans-unit>
        <trans-unit id="d0a61e8f663dab72d666aa99d7d8392df6e2866f" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol we have:</source>
          <target state="translated">Например, для протокола &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; у нас есть:</target>
        </trans-unit>
        <trans-unit id="10d10d9aafa7b7150f21f408c108aefffcb399e3" translate="yes" xml:space="preserve">
          <source>For example, for the &lt;code&gt;MyBehaviour&lt;/code&gt; module defined in &quot;Optional callbacks&quot; above:</source>
          <target state="translated">Например, для модуля &lt;code&gt;MyBehaviour&lt;/code&gt; , определенного в разделе &amp;laquo;Дополнительные обратные вызовы&amp;raquo; выше:</target>
        </trans-unit>
        <trans-unit id="8cdbd82ecc31ecfa904887629dd77138df5f318e" translate="yes" xml:space="preserve">
          <source>For example, if the &lt;code&gt;args&lt;/code&gt; in the above &lt;code&gt;echo&lt;/code&gt; task were inspected, you might see something like this:</source>
          <target state="translated">Например, если были проверены &lt;code&gt;args&lt;/code&gt; в приведенной выше задаче &lt;code&gt;echo&lt;/code&gt; , вы могли бы увидеть что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="8306be9b21cc2aa72f1fd185081e1e544776e5ce" translate="yes" xml:space="preserve">
          <source>For example, if we want to use the &lt;code&gt;duplicate/2&lt;/code&gt; function from the &lt;code&gt;List&lt;/code&gt; module several times, we can import it:</source>
          <target state="translated">Например, если мы хотим использовать функцию &lt;code&gt;duplicate/2&lt;/code&gt; из модуля &lt;code&gt;List&lt;/code&gt; несколько раз, мы можем импортировать ее:</target>
        </trans-unit>
        <trans-unit id="9f456eb16f2bcd93d7684bd1cc3f45a1a1b9a12d" translate="yes" xml:space="preserve">
          <source>For example, if you are waiting for a process to perform some action, it is better to communicate the progress of such action with messages.</source>
          <target state="translated">Например,если вы ждете,пока процесс выполнит какое-либо действие,лучше сообщить о ходе выполнения этого действия с помощью сообщений.</target>
        </trans-unit>
        <trans-unit id="dcc71fade44be2f0b07fe15278a544d60b766461" translate="yes" xml:space="preserve">
          <source>For example, if you expect the target system to have a config file in an absolute path, you can configure your &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt; as:</source>
          <target state="translated">Например, если вы ожидаете, что целевая система будет иметь файл конфигурации по абсолютному пути, вы можете настроить &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt; как:</target>
        </trans-unit>
        <trans-unit id="d7c6d734ff451f6956c6aacbeccd9d4fdd938f74" translate="yes" xml:space="preserve">
          <source>For example, if you have a release named &lt;code&gt;demo&lt;/code&gt;, you can install the service and then start it from the release root as follows:</source>
          <target state="translated">Например, если у вас есть выпуск с именем &lt;code&gt;demo&lt;/code&gt; , вы можете установить службу, а затем запустить ее из корня выпуска следующим образом:</target>
        </trans-unit>
        <trans-unit id="3fcebcea9fb6c7cf3c366b1c527f43067e4ff086" translate="yes" xml:space="preserve">
          <source>For example, if you push the &lt;code&gt;kv&lt;/code&gt; project to a Git repository, you&amp;rsquo;ll need to list it in your deps code in order to use it:</source>
          <target state="translated">Например, если вы &lt;code&gt;kv&lt;/code&gt; проект kv в репозиторий Git, вам нужно будет указать его в своем коде deps, чтобы использовать:</target>
        </trans-unit>
        <trans-unit id="f3f65aca3ddc3c99d917b0c1b11f664e45fbabf4" translate="yes" xml:space="preserve">
          <source>For example, imagine a function that checks that the head of a list is not &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="translated">Например, представьте функцию, которая проверяет, что заголовок списка не равен &lt;code&gt;nil&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="aa3f335cc98a4af2b77268595737e5b7b1ed0489" translate="yes" xml:space="preserve">
          <source>For example, imagine that you have a binary with letters where you want to count how many times each lowercase letter happens, ignoring all uppercase ones. For instance, for the string &lt;code&gt;&quot;AbCabCABc&quot;&lt;/code&gt;, we want to return the map &lt;code&gt;%{&quot;a&quot; =&amp;gt; 1, &quot;b&quot; =&amp;gt; 2, &quot;c&quot; =&amp;gt; 1}&lt;/code&gt;.</source>
          <target state="translated">Например, представьте, что у вас есть двоичный файл с буквами, в котором вы хотите подсчитать, сколько раз встречается каждая строчная буква, игнорируя все прописные. Например, для строки &lt;code&gt;&quot;AbCabCABc&quot;&lt;/code&gt; мы хотим вернуть карту &lt;code&gt;%{&quot;a&quot; =&amp;gt; 1, &quot;b&quot; =&amp;gt; 2, &quot;c&quot; =&amp;gt; 1}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8f71ae8328569a71678b0be29a48fd915491141" translate="yes" xml:space="preserve">
          <source>For example, imagine the following configuration:</source>
          <target state="translated">Например,представьте себе следующую конфигурацию:</target>
        </trans-unit>
        <trans-unit id="92738f48db6bf8520616d3f910c86cb70b6a91a2" translate="yes" xml:space="preserve">
          <source>For example, imagine we want to implement a Validator module which provides a data validation domain-specific language. We could implement it using data structures, functions or macros. Let&amp;rsquo;s see what those different DSLs would look like:</source>
          <target state="translated">Например, представьте, что мы хотим реализовать модуль Validator, который предоставляет язык, специфичный для области проверки данных. Мы могли бы реализовать это с помощью структур данных, функций или макросов. Давайте посмотрим, как будут выглядеть эти разные DSL:</target>
        </trans-unit>
        <trans-unit id="2ea959d5faa9cf257e82d7007ec084b4f335c593" translate="yes" xml:space="preserve">
          <source>For example, imagine you have a variable &lt;code&gt;number&lt;/code&gt; which contains the number you want to inject inside a quoted expression.</source>
          <target state="translated">Например, представьте , у вас есть переменное &lt;code&gt;number&lt;/code&gt; , которое содержит номер , который вы хотите , чтобы ввести в кавычках выражение.</target>
        </trans-unit>
        <trans-unit id="a2be4f8e8e8f8a802e09e5114bdae52f10f3c768" translate="yes" xml:space="preserve">
          <source>For example, imagine you have an API that receives a filename as a binary. At some point you will want to write to this file. You could have a function like this:</source>
          <target state="translated">Например,представьте,что у вас есть API,который получает имя файла в виде двоичного файла.В какой-то момент вы захотите записать в этот файл.У вас может быть такая функция:</target>
        </trans-unit>
        <trans-unit id="36f70d74391e0cf5d436981e9565a03fd1f683a6" translate="yes" xml:space="preserve">
          <source>For example, imagine you need to load some configuration from a JSON file and load that into the system. Said configuration provider would look like:</source>
          <target state="translated">Например,представьте,что вам нужно загрузить некоторую конфигурацию из JSON файла и загрузить ее в систему.Сказал провайдер конфигурации будет выглядеть так:</target>
        </trans-unit>
        <trans-unit id="e595982d4d16b2fed73877c7eb51c758ba09c9f8" translate="yes" xml:space="preserve">
          <source>For example, imagine your computer, router, printer, or whatever device is not working properly. How do you often fix it? By restarting it. Once we restart the device, we reset the device back to its initial state, which is well-tested and guaranteed to work. In Elixir, we apply this same approach to software: whenever a process crashes, we start a new process to perform the same job as the crashed process.</source>
          <target state="translated">Например,представьте,что ваш компьютер,маршрутизатор,принтер или любое другое устройство работает неправильно.Как часто вы это исправляете? Перезапуская его.Как только мы перезапускаем устройство,мы возвращаем его в исходное состояние,которое хорошо протестировано и гарантированно работает.В Elixir мы применяем тот же подход к программному обеспечению:всякий раз,когда происходит сбой процесса,мы запускаем новый процесс для выполнения того же задания,что и в случае сбойного процесса.</target>
        </trans-unit>
        <trans-unit id="700e114b8e70a0f80ebb6154d773287b9067f337" translate="yes" xml:space="preserve">
          <source>For example, imagine your computer, router, printer, or whatever device is not working properly. How often do you fix it by restarting it? Once we restart the device, we reset the device back to its initial state, which is well-tested and guaranteed to work. In Elixir, we apply this same approach to software: whenever a process crashes, we start a new process to perform the same job as the crashed process.</source>
          <target state="translated">Например,представьте,что ваш компьютер,маршрутизатор,принтер или любое другое устройство работает неправильно.Как часто вы исправляете это,перезапуская его? Как только мы перезапускаем устройство,мы возвращаем его в исходное состояние,которое хорошо протестировано и гарантированно работает.В Elixir мы применяем тот же подход к программному обеспечению:всякий раз,когда происходит сбой процесса,мы запускаем новый процесс для выполнения того же задания,что и в случае сбойного процесса.</target>
        </trans-unit>
        <trans-unit id="f3cd6f9b58acaa3e0524e83ef7217c631726de0e" translate="yes" xml:space="preserve">
          <source>For example, in &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;cond&lt;/code&gt;:</source>
          <target state="translated">Например, в &lt;code&gt;case&lt;/code&gt; и &lt;code&gt;cond&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5132419edebfb5538ebf32de072ef747449be00a" translate="yes" xml:space="preserve">
          <source>For example, in order to write test cases using the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; framework provided with Elixir, a developer should &lt;code&gt;use&lt;/code&gt; the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">Например, для того , чтобы тестовые записи с помощью &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt; рамки снабженного эликсира, разработчик должен &lt;code&gt;use&lt;/code&gt; в &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt; модуль:</target>
        </trans-unit>
        <trans-unit id="d7d72e926d93f3ca1c487388374604ee39ad35ad" translate="yes" xml:space="preserve">
          <source>For example, in order to write tests using the ExUnit framework, a developer should use the &lt;code&gt;ExUnit.Case&lt;/code&gt; module:</source>
          <target state="translated">Например, чтобы писать тесты с использованием фреймворка ExUnit, разработчик должен использовать модуль &lt;code&gt;ExUnit.Case&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3a8a1f3ca0f4f6e6f52cd5c38c70ee3321a7257d" translate="yes" xml:space="preserve">
          <source>For example, setting the mode &lt;code&gt;0o755&lt;/code&gt; gives it write, read and execute permission to the owner and both read and execute permission to group and others.</source>
          <target state="translated">Например, установка режима &lt;code&gt;0o755&lt;/code&gt; дает право на запись, чтение и выполнение владельцу, а также разрешение на чтение и выполнение для группы и других пользователей.</target>
        </trans-unit>
        <trans-unit id="aa476bb5aa4307e87b6892c3eef680e2a1027574" translate="yes" xml:space="preserve">
          <source>For example, someone using your application can override its &lt;code&gt;:redis_host&lt;/code&gt; environment variable as follows:</source>
          <target state="translated">Например, кто-то, кто использует ваше приложение, может переопределить его &lt;code&gt;:redis_host&lt;/code&gt; среды : redis_host следующим образом:</target>
        </trans-unit>
        <trans-unit id="c1f9245784df422bc589c02556ded2ebe4df04fc" translate="yes" xml:space="preserve">
          <source>For example, take a group document represented as &lt;code&gt;[1, 2, 3]&lt;/code&gt; where the space after every comma is a break. When the document above does not fit a single line, all breaks are enabled, causing the document to be rendered as:</source>
          <target state="translated">Например, возьмите групповой документ, представленный как &lt;code&gt;[1, 2, 3]&lt;/code&gt; где пробел после каждой запятой - это разрыв. Когда документ выше не умещается в одну строку, все разрывы включаются, в результате чего документ отображается как:</target>
        </trans-unit>
        <trans-unit id="5d84b09dd24eed2b37c8292a1e28d040806e59c5" translate="yes" xml:space="preserve">
          <source>For example, take the following &lt;code&gt;.iex.exs&lt;/code&gt; file:</source>
          <target state="translated">Например, возьмите следующий файл &lt;code&gt;.iex.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4d2ade3e7c04be9a767d2179941a1c0d02c356f6" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt;&lt;code&gt;tuple_size/1&lt;/code&gt;&lt;/a&gt; function only works with tuples. If we use it with anything else, an argument error is raised:</source>
          <target state="translated">Например, &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#tuple_size/1&quot;&gt; &lt;code&gt;tuple_size/1&lt;/code&gt; &lt;/a&gt; работает только с кортежами. Если мы используем его с чем-либо еще, возникает ошибка аргумента:</target>
        </trans-unit>
        <trans-unit id="f77c979642e1a9533effb1fde71896e71b2b1b38" translate="yes" xml:space="preserve">
          <source>For example, the &lt;a href=&quot;https://hexdocs.pm/elixir/Record.html&quot;&gt;&lt;code&gt;Record&lt;/code&gt;&lt;/a&gt; module in Elixir provides a series of macros to be used in patterns and guards that allows tuples to have named fields during compilation.</source>
          <target state="translated">Например, модуль &lt;a href=&quot;https://hexdocs.pm/elixir/Record.html&quot;&gt; &lt;code&gt;Record&lt;/code&gt; &lt;/a&gt; в Elixir предоставляет серию макросов для использования в шаблонах и защитах, которые позволяют кортежам иметь именованные поля во время компиляции.</target>
        </trans-unit>
        <trans-unit id="dabd9937e48a29e73846df5608de823548c08b1e" translate="yes" xml:space="preserve">
          <source>For example, the code point &quot;&amp;eacute;&quot; is two bytes:</source>
          <target state="translated">Например, кодовая точка &amp;laquo;&amp;eacute;&amp;raquo; составляет два байта:</target>
        </trans-unit>
        <trans-unit id="d6d855b74f3622b261e79dba8a4c6c84fa6807d2" translate="yes" xml:space="preserve">
          <source>For example, the decimal number &lt;code&gt;3&lt;/code&gt; when represented with 4 bits in base 2 would be &lt;code&gt;0011&lt;/code&gt;, which is equivalent to the values &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, each stored using 1 bit:</source>
          <target state="translated">Например, десятичное число &lt;code&gt;3&lt;/code&gt; , представленное 4 битами в базе 2, будет &lt;code&gt;0011&lt;/code&gt; , что эквивалентно значениям &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; , каждое из которых хранится с использованием 1 бита:</target>
        </trans-unit>
        <trans-unit id="d5c30e8005c0c98d6e53ce8dd367db66742e7504" translate="yes" xml:space="preserve">
          <source>For example, the following agent implements a counter:</source>
          <target state="translated">Например,следующий агент реализует счетчик:</target>
        </trans-unit>
        <trans-unit id="f261112170af791387e9b66db2c2a75a6ec23785" translate="yes" xml:space="preserve">
          <source>For example, the following is a keyword list:</source>
          <target state="translated">Например,ниже приведен список ключевых слов:</target>
        </trans-unit>
        <trans-unit id="3df9b543906bfd5595a0cacf49aeb1e63c393e38" translate="yes" xml:space="preserve">
          <source>For example, the module implementing the &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol for lists is &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.List.html&quot;&gt;&lt;code&gt;Enumerable.List&lt;/code&gt;&lt;/a&gt;. Therefore, we can invoke &lt;code&gt;__impl__/1&lt;/code&gt; on this module:</source>
          <target state="translated">Например, модуль, реализующий протокол &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.html&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; для списков, - это &lt;a href=&quot;https://hexdocs.pm/elixir/Enumerable.List.html&quot;&gt; &lt;code&gt;Enumerable.List&lt;/code&gt; &lt;/a&gt; . Следовательно, мы можем вызвать &lt;code&gt;__impl__/1&lt;/code&gt; в этом модуле:</target>
        </trans-unit>
        <trans-unit id="b821bcc62d19a98d61faaca345d43a31156e0565" translate="yes" xml:space="preserve">
          <source>For example, the numbers 0.1 and 0.01 are two of them, what means the result of squaring 0.1 does not give 0.01 neither the closest representable. Here is what happens in this case:</source>
          <target state="translated">Например,числа 0.1 и 0.01 являются двумя из них,что означает,что результат квадрата 0.1 не дает 0.01 и не дает 0.01 ни самого близкого представления.Вот что происходит в этом случае:</target>
        </trans-unit>
        <trans-unit id="3780e894751fdee43da26866cc6af18a271859a8" translate="yes" xml:space="preserve">
          <source>For example, to add multiple backends to your application, modify your configuration:</source>
          <target state="translated">Например,чтобы добавить несколько бэкэндов к вашему приложению,измените вашу конфигурацию:</target>
        </trans-unit>
        <trans-unit id="4009f5a45e54514dcb5423e242c0ca43c71a40ed" translate="yes" xml:space="preserve">
          <source>For example, to configure &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; to redirect all Erlang messages using a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">Например, чтобы настроить &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt; для перенаправления всех сообщений Erlang с помощью файла &lt;code&gt;config/config.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="97810dcc8560ef61b772f3bdcad87ca93ff037d4" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;:backends&lt;/code&gt; and purge all calls that happen at compile time with level lower than &lt;code&gt;:info&lt;/code&gt; in a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">Например, чтобы настроить &lt;code&gt;:backends&lt;/code&gt; и очистить все вызовы, которые происходят во время компиляции с уровнем ниже, чем &lt;code&gt;:info&lt;/code&gt; в файле &lt;code&gt;config/config.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="21a8e2abf86d2318a5a86e1829eeef5e5857c798" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;:level&lt;/code&gt; and &lt;code&gt;:truncate&lt;/code&gt; options in a &lt;code&gt;config/config.exs&lt;/code&gt; file:</source>
          <target state="translated">Например, чтобы настроить параметры &lt;code&gt;:level&lt;/code&gt; и &lt;code&gt;:truncate&lt;/code&gt; в файле &lt;code&gt;config/config.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a0b9557028bd4e04dc9baddf4fcbc9b36f7fb55a" translate="yes" xml:space="preserve">
          <source>For example, to configure the &lt;code&gt;erlc_options&lt;/code&gt; for your Erlang project you may run:</source>
          <target state="translated">Например, чтобы настроить &lt;code&gt;erlc_options&lt;/code&gt; для вашего проекта Erlang, вы можете запустить:</target>
        </trans-unit>
        <trans-unit id="76a5d4e647864137abb48e20144e766fb0c89015" translate="yes" xml:space="preserve">
          <source>For example, to disable color, one may use the configuration:</source>
          <target state="translated">Например,для отключения цвета можно использовать конфигурацию:</target>
        </trans-unit>
        <trans-unit id="a765ecc41513328acb3598f8f52b46ee7deada9a" translate="yes" xml:space="preserve">
          <source>For example, to lookup a server process, monitor it and send a cast to it:</source>
          <target state="translated">Например,чтобы просмотреть серверный процесс,проследить за ним и послать ему гипс:</target>
        </trans-unit>
        <trans-unit id="cabc9384ea2bf9af1b99579a392dfd97e82162f8" translate="yes" xml:space="preserve">
          <source>For example, to split a test suite into 4 partitions and run them, you would use the following commands:</source>
          <target state="translated">Например,чтобы разделить тестовый набор на 4 раздела и запустить их,вы должны использовать следующие команды:</target>
        </trans-unit>
        <trans-unit id="49838731982f45b819651e28face607e270a0d83" translate="yes" xml:space="preserve">
          <source>For example, to update a map inside another map:</source>
          <target state="translated">Например,чтобы обновить карту внутри другой карты:</target>
        </trans-unit>
        <trans-unit id="f8d6f1962522c5a74c0c716a39923ef1c094d4d7" translate="yes" xml:space="preserve">
          <source>For example, to write test cases using the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; framework provided with Elixir, a developer should &lt;code&gt;use&lt;/code&gt; the &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">Например, чтобы писать тесты с использованием &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt; рамки снабженной эликсиром, разработчик должен &lt;code&gt;use&lt;/code&gt; в &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.Case.html&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt; модуль:</target>
        </trans-unit>
        <trans-unit id="16fe3a971c511fed7157a7e0a03e09bb51dcfcf2" translate="yes" xml:space="preserve">
          <source>For example, we can configure IEx default prompt to another value. Just open &lt;code&gt;config/config.exs&lt;/code&gt; and add the following to the end:</source>
          <target state="translated">Например, мы можем настроить приглашение по умолчанию IEx на другое значение. Просто откройте &lt;code&gt;config/config.exs&lt;/code&gt; и добавьте следующие строки в конце:</target>
        </trans-unit>
        <trans-unit id="3ad4f120b95aba025295d32b32cd84c67c8c60d6" translate="yes" xml:space="preserve">
          <source>For example, we can configure IEx default prompt to another value. Let&amp;rsquo;s create the &lt;code&gt;config/config.exs&lt;/code&gt; file with the following content:</source>
          <target state="translated">Например, мы можем настроить приглашение по умолчанию IEx на другое значение. Давайте создадим &lt;code&gt;config/config.exs&lt;/code&gt; файл со следующим содержанием:</target>
        </trans-unit>
        <trans-unit id="65ea0a674f1ce41ff4c22e2d07ee72ff95421ac9" translate="yes" xml:space="preserve">
          <source>For example, we can map a list of integers into their squared values:</source>
          <target state="translated">Например,можно отобразить список целых чисел в их квадратные значения:</target>
        </trans-unit>
        <trans-unit id="ecebd23ebfe4f1d1acd8ff8a2d9a8722555dc40b" translate="yes" xml:space="preserve">
          <source>For example, we can use bitstring generators with the &lt;code&gt;:into&lt;/code&gt; option to easily remove all spaces in a string:</source>
          <target state="translated">Например, мы можем использовать генераторы битовых строк с параметром &lt;code&gt;:into&lt;/code&gt; , чтобы легко удалить все пробелы в строке:</target>
        </trans-unit>
        <trans-unit id="825bc9fd2268ad4ced535baaab0a761647bf3261" translate="yes" xml:space="preserve">
          <source>For example, we could implement &lt;a href=&quot;#map/2&quot;&gt;&lt;code&gt;map/2&lt;/code&gt;&lt;/a&gt; in terms of &lt;a href=&quot;#reduce/3&quot;&gt;&lt;code&gt;reduce/3&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">Например, мы могли бы реализовать &lt;a href=&quot;#map/2&quot;&gt; &lt;code&gt;map/2&lt;/code&gt; &lt;/a&gt; в терминах &lt;a href=&quot;#reduce/3&quot;&gt; &lt;code&gt;reduce/3&lt;/code&gt; &lt;/a&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="678b43ac2ccf82f31c5e6153c0e2834d16a5b6ca" translate="yes" xml:space="preserve">
          <source>For example, we could start and register our &lt;code&gt;Stack&lt;/code&gt; server locally as follows:</source>
          <target state="translated">Например, мы могли бы запустить и зарегистрировать наш сервер &lt;code&gt;Stack&lt;/code&gt; локально следующим образом:</target>
        </trans-unit>
        <trans-unit id="9a4ed3f8957553e26e0d94986089ddb6888e33a8" translate="yes" xml:space="preserve">
          <source>For example, we have used 4 counting functions so far: &lt;code&gt;byte_size/1&lt;/code&gt; (for the number of bytes in a string), &lt;code&gt;tuple_size/1&lt;/code&gt; (for tuple size), &lt;code&gt;length/1&lt;/code&gt; (for list length) and &lt;code&gt;String.length/1&lt;/code&gt; (for the number of graphemes in a string). We use &lt;code&gt;byte_size&lt;/code&gt; to get the number of bytes in a string &amp;ndash; a cheap operation. Retrieving the number of Unicode characters, on the other hand, uses &lt;code&gt;String.length&lt;/code&gt;, and may be expensive as it relies on a traversal of the entire string.</source>
          <target state="translated">Например, до сих пор мы использовали 4 функции подсчета: &lt;code&gt;byte_size/1&lt;/code&gt; (для количества байтов в строке), &lt;code&gt;tuple_size/1&lt;/code&gt; (для размера кортежа), &lt;code&gt;length/1&lt;/code&gt; (для длины списка) и &lt;code&gt;String.length/1&lt;/code&gt; ( для количества графем в строке). Мы используем &lt;code&gt;byte_size&lt;/code&gt; , чтобы получить количество байтов в строке - дешевая операция. С другой стороны, получение количества символов Юникода использует &lt;code&gt;String.length&lt;/code&gt; и может быть дорогостоящим, так как требует обхода всей строки.</target>
        </trans-unit>
        <trans-unit id="a856e5ee06c9349ef31043c8ece70cd8e13f1483" translate="yes" xml:space="preserve">
          <source>For example, we have used 4 counting functions so far: &lt;code&gt;byte_size/1&lt;/code&gt; (for the number of bytes in a string), &lt;code&gt;tuple_size/1&lt;/code&gt; (for tuple size), &lt;code&gt;length/1&lt;/code&gt; (for list length) and &lt;code&gt;String.length/1&lt;/code&gt; (for the number of graphemes in a string). We use &lt;code&gt;byte_size&lt;/code&gt; to get the number of bytes in a string &amp;ndash; a cheap operation. Retrieving the number of Unicode graphemes, on the other hand, uses &lt;code&gt;String.length&lt;/code&gt;, and may be expensive as it relies on a traversal of the entire string.</source>
          <target state="translated">Например, до сих пор мы использовали 4 функции подсчета: &lt;code&gt;byte_size/1&lt;/code&gt; (для количества байтов в строке), &lt;code&gt;tuple_size/1&lt;/code&gt; (для размера кортежа), &lt;code&gt;length/1&lt;/code&gt; (для длины списка) и &lt;code&gt;String.length/1&lt;/code&gt; ( для количества графем в строке). Мы используем &lt;code&gt;byte_size&lt;/code&gt; , чтобы получить количество байтов в строке - дешевая операция. С другой стороны, получение числа графем Unicode использует &lt;code&gt;String.length&lt;/code&gt; и может быть дорогостоящим, так как требует обхода всей строки.</target>
        </trans-unit>
        <trans-unit id="8e82002b46a7bc98e04a53b8f0787d96d507b69d" translate="yes" xml:space="preserve">
          <source>For example, we recommend developers to always start tasks under a supervisor. This provides more visibility and allows you to control how those tasks are terminated when a node shuts down. That might look something like &lt;code&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt;. This means that, although your code is the one who invokes the task, the actual ancestor of the task is the supervisor, as the supervisor is the one effectively starting it.</source>
          <target state="translated">Например, мы рекомендуем разработчикам всегда запускать задачи под руководством руководителя. Это обеспечивает большую видимость и позволяет вам контролировать, как эти задачи завершаются при завершении работы узла. Это может выглядеть примерно как &lt;code&gt;Task.Supervisor.start_child(MySupervisor, task_specification)&lt;/code&gt; . Это означает, что, хотя ваш код и является тем, кто вызывает задачу, фактическим предком задачи является супервизор, поскольку супервизор является тем, кто эффективно запускает ее.</target>
        </trans-unit>
        <trans-unit id="0dcb9a644dbae1acdb996808b23645d55e2f6941" translate="yes" xml:space="preserve">
          <source>For example, when daylight saving changes are applied by a region, the clock typically moves forward or backward by one hour. This means certain datetimes never occur or may occur more than once. Since &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; is not validated against a time zone, such errors would go unnoticed.</source>
          <target state="translated">Например, когда для региона применяется переход на летнее время, часы обычно переводятся на один час вперед или назад. Это означает, что определенные даты никогда не встречаются или могут встречаться более одного раза. Поскольку &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt; не проверяется по часовому поясу, такие ошибки останутся незамеченными.</target>
        </trans-unit>
        <trans-unit id="0134d97aaa5f44efc896482193ec373596c0207e" translate="yes" xml:space="preserve">
          <source>For example, you could specify a &lt;code&gt;URI.Parser&lt;/code&gt; behaviour as follows:</source>
          <target state="translated">Например, вы можете указать поведение &lt;code&gt;URI.Parser&lt;/code&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="80c725586e4c191211220e82dbb160afa5b6efb9" translate="yes" xml:space="preserve">
          <source>For example, you might wish to include a custom &lt;code&gt;:error_code&lt;/code&gt; metadata in your logs:</source>
          <target state="translated">Например, вы можете захотеть включить в свои журналы метаданные custom &lt;code&gt;:error_code&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="4e3a66cb565ce65f19a6ff578510f5919a4c4a12" translate="yes" xml:space="preserve">
          <source>For examples on how to use the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol and &lt;a href=&quot;#into/1&quot;&gt;&lt;code&gt;into/1&lt;/code&gt;&lt;/a&gt; see the module documentation.</source>
          <target state="translated">Примеры использования протокола &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#into/1&quot;&gt; &lt;code&gt;into/1&lt;/code&gt; &lt;/a&gt; см. В документации модуля.</target>
        </trans-unit>
        <trans-unit id="e4c21cf1cac5889764a4444020c6074013f406cd" translate="yes" xml:space="preserve">
          <source>For floats, it is 64. For floats, &lt;code&gt;size * unit&lt;/code&gt; must result in 32 or 64, corresponding to &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; binary32 and binary64, respectively.</source>
          <target state="translated">Для чисел с плавающей запятой это 64. Для чисел с плавающей запятой &lt;code&gt;size * unit&lt;/code&gt; должен иметь результат 32 или 64, что соответствует &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_floating_point&quot;&gt;IEEE 754&lt;/a&gt; binary32 и binary64, соответственно.</target>
        </trans-unit>
        <trans-unit id="e0863812afa8bda24138da4ec3b1ecff0d4ecc46" translate="yes" xml:space="preserve">
          <source>For fun, let's define a simple module in this shell too:</source>
          <target state="translated">Для развлечения,давайте определим простой модуль и в этой оболочке:</target>
        </trans-unit>
        <trans-unit id="979ac34509c51f5dab54e261eec8b56be64ab620" translate="yes" xml:space="preserve">
          <source>For further details on applications please check the documentation of the &lt;a href=&quot;http://www.erlang.org/doc/man/application.html&quot;&gt;&lt;code&gt;application&lt;/code&gt;&lt;/a&gt; Erlang module, and the &lt;a href=&quot;http://www.erlang.org/doc/design_principles/applications.html&quot;&gt;Applications&lt;/a&gt; section of the &lt;a href=&quot;http://erlang.org/doc/design_principles/users_guide.html&quot;&gt;OTP Design Principles User's Guide&lt;/a&gt;.</source>
          <target state="translated">Дополнительные сведения о приложениях см. В документации модуля Erlang для &lt;a href=&quot;http://www.erlang.org/doc/man/application.html&quot;&gt; &lt;code&gt;application&lt;/code&gt; &lt;/a&gt; и в разделе &amp;laquo; &lt;a href=&quot;http://www.erlang.org/doc/design_principles/applications.html&quot;&gt;Приложения &lt;/a&gt;&lt;a href=&quot;http://erlang.org/doc/design_principles/users_guide.html&quot;&gt;&amp;raquo; Руководства пользователя по принципам проектирования OTP&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f91858e05de05b595ba22a40c6d98a7a27a8e926" translate="yes" xml:space="preserve">
          <source>For grouping tests together, see &lt;a href=&quot;#describe/2&quot;&gt;&lt;code&gt;describe/2&lt;/code&gt;&lt;/a&gt; in this module.</source>
          <target state="translated">Чтобы сгруппировать тесты вместе, см. &lt;a href=&quot;#describe/2&quot;&gt; &lt;code&gt;describe/2&lt;/code&gt; &lt;/a&gt; в этом модуле.</target>
        </trans-unit>
        <trans-unit id="77ab7e6ee8d58a006653e5dfc1bb9f58088937ba" translate="yes" xml:space="preserve">
          <source>For instance one period could be the summer of 2018 in &quot;Europe/London&quot; where summer time / daylight saving time is in effect and lasts from spring to autumn. At autumn the &lt;code&gt;std_offset&lt;/code&gt; changes along with the &lt;code&gt;zone_abbr&lt;/code&gt; so a different period is needed during winter.</source>
          <target state="translated">Например, одним периодом может быть лето 2018 года в &amp;laquo;Европе / Лондоне&amp;raquo;, где действует летнее / летнее время и длится с весны до осени. Осенью &lt;code&gt;std_offset&lt;/code&gt; изменяется вместе с &lt;code&gt;zone_abbr&lt;/code&gt; , поэтому зимой требуется другой период.</target>
        </trans-unit>
        <trans-unit id="e51496febe42a068541cd5f1776cfef4dbdc9e31" translate="yes" xml:space="preserve">
          <source>For instance, given a user map with the &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:languages&lt;/code&gt; keys, here is how to deeply traverse the map and convert all language names to uppercase:</source>
          <target state="translated">Например, учитывая карту пользователя с ключами &lt;code&gt;:name&lt;/code&gt; и &lt;code&gt;:languages&lt;/code&gt; , вот как глубоко пройти по карте и преобразовать все имена языков в верхний регистр:</target>
        </trans-unit>
        <trans-unit id="0fa8784dfc2e01f4f7777294a47b6dd71b0ca392" translate="yes" xml:space="preserve">
          <source>For instance, releases run using short-names (&lt;code&gt;--sname&lt;/code&gt;). However, if you want to actually run a distributed key-value store in production, you will need multiple nodes and start the release with the &lt;code&gt;--name&lt;/code&gt; option. We can achieve this by setting the &lt;code&gt;RELEASE_DISTRIBUTION&lt;/code&gt; environment variable inside the &lt;code&gt;env.sh&lt;/code&gt; and &lt;code&gt;env.bat&lt;/code&gt; files. Mix already has a template for said files which we can customize, so let&amp;rsquo;s ask Mix to copy them to our application:</source>
          <target state="translated">Например, выпуски запускаются с использованием коротких имен ( &lt;code&gt;--sname&lt;/code&gt; ). Однако, если вы действительно хотите запустить распределенное хранилище ключей и значений в производственной среде, вам потребуется несколько узлов и начать выпуск с параметром &lt;code&gt;--name&lt;/code&gt; . Мы можем добиться этого, установив &lt;code&gt;RELEASE_DISTRIBUTION&lt;/code&gt; среды RELEASE_DISTRIBUTION внутри файлов &lt;code&gt;env.sh&lt;/code&gt; и &lt;code&gt;env.bat&lt;/code&gt; . У Mix уже есть шаблон для указанных файлов, который мы можем настроить, поэтому давайте попросим Mix скопировать их в наше приложение:</target>
        </trans-unit>
        <trans-unit id="098abe87bcf54674f294a660fdeca753e3973228" translate="yes" xml:space="preserve">
          <source>For instance, we can create a file called &lt;code&gt;math.exs&lt;/code&gt;:</source>
          <target state="translated">Например, мы можем создать файл с именем &lt;code&gt;math.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="915841eb2ae9437182185facdb407e9c03dade23" translate="yes" xml:space="preserve">
          <source>For intensive workloads, the registry may also be partitioned (by specifying the &lt;code&gt;:partitions&lt;/code&gt; option). If partitioning is required then a good default is to set the number of partitions to the number of schedulers available:</source>
          <target state="translated">Для интенсивных рабочих нагрузок реестр также может быть разделен на разделы (указав параметр &lt;code&gt;:partitions&lt;/code&gt; ). Если требуется разбиение на разделы, хорошим вариантом по умолчанию является установка количества разделов равным количеству доступных планировщиков:</target>
        </trans-unit>
        <trans-unit id="0be2313f13029f16466fa64d8d779bb84d194911" translate="yes" xml:space="preserve">
          <source>For maps, the first tuple element must be a &lt;code&gt;{key, value}&lt;/code&gt; tuple.</source>
          <target state="translated">Для карт первый элемент кортежа должен быть кортежем &lt;code&gt;{key, value}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ef87b3ee1067750a0799faa766ca960ddec15e8" translate="yes" xml:space="preserve">
          <source>For maps, the function expects a key-value tuple.</source>
          <target state="translated">Для карт функция ожидает кортеж с ключевым значением.</target>
        </trans-unit>
        <trans-unit id="2006fc3ed297a859555ea878c9cf50cc043d6a81" translate="yes" xml:space="preserve">
          <source>For monitoring status changes of all nodes, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-2&quot;&gt;&lt;code&gt;:net_kernel.monitor_nodes/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для отслеживания изменений статуса всех узлов см . &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-2&quot;&gt; &lt;code&gt;:net_kernel.monitor_nodes/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f65055eecdf00696b65a9b430fcafe6f22952a12" translate="yes" xml:space="preserve">
          <source>For monitoring status changes of all nodes, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-3&quot;&gt;&lt;code&gt;:net_kernel.monitor_nodes/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для отслеживания изменений статуса всех узлов см . &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#monitor_nodes-3&quot;&gt; &lt;code&gt;:net_kernel.monitor_nodes/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a50d8c364812d16e018ab6d0f72a5d0030e8481" translate="yes" xml:space="preserve">
          <source>For more advanced options available when defining custom attributes, see &lt;a href=&quot;#register_attribute/3&quot;&gt;&lt;code&gt;register_attribute/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Дополнительные параметры, доступные при определении настраиваемых атрибутов, см. В разделе &lt;a href=&quot;#register_attribute/3&quot;&gt; &lt;code&gt;register_attribute/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="095613a0c71daec41f22ebf762f9ec5144c17212" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link-1&quot;&gt;&lt;code&gt;:file.read_link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link-1&quot;&gt; &lt;code&gt;:file.read_link/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c85e5081a17eac440f3c5a413306106ced5d9c19" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link_info-2&quot;&gt;&lt;code&gt;:file.read_link_info/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Подробнее см &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#read_link_info-2&quot;&gt; &lt;code&gt;:file.read_link_info/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="40801b427f30e76ede611926a90606441dd86a7c" translate="yes" xml:space="preserve">
          <source>For more in-depth information, please read the &quot;Charlists&quot; section in the &lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Для получения более подробной информации, пожалуйста, прочтите раздел &amp;laquo;Charlists&amp;raquo; в модуле &lt;a href=&quot;https://hexdocs.pm/elixir/List.html&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c734b39d3add7d597fc3e2a0a8f87e008c1a861a" translate="yes" xml:space="preserve">
          <source>For more in-depth information, please read the &quot;Charlists&quot; section in the &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Для получения более подробной информации, пожалуйста, прочтите раздел &amp;laquo;Charlists&amp;raquo; в модуле &lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="95147adb3177256a490cdad3827bcc51779e68e4" translate="yes" xml:space="preserve">
          <source>For more information about IO data, see the &lt;a href=&quot;#module-io-data&quot;&gt;&quot;IO data&quot;&lt;/a&gt; section in the module documentation.</source>
          <target state="translated">Дополнительные сведения о данных ввода-вывода см. В разделе &lt;a href=&quot;#module-io-data&quot;&gt;&amp;laquo;Данные ввода-вывода&amp;raquo;&lt;/a&gt; документации модуля.</target>
        </trans-unit>
        <trans-unit id="1c3a9dad7c543d1c63c29b6ca8ca500c85b4a2b7" translate="yes" xml:space="preserve">
          <source>For more information about chardata, see the &lt;a href=&quot;#module-chardata&quot;&gt;&quot;Chardata&quot;&lt;/a&gt; section in the module documentation.</source>
          <target state="translated">Для получения дополнительной информации о chardata см. &lt;a href=&quot;#module-chardata&quot;&gt;Раздел &amp;laquo;Chardata&amp;raquo;&lt;/a&gt; в документации модуля.</target>
        </trans-unit>
        <trans-unit id="0541321f88f511fe94f622a2cb19777c006436cc" translate="yes" xml:space="preserve">
          <source>For more information about structs, please check &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%25/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о структурах, пожалуйста, проверьте &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%25/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="edd1a5e1d2ce7f216383d5f43648eb3d76f38089" translate="yes" xml:space="preserve">
          <source>For more information about structs, please check &lt;a href=&quot;kernel.specialforms#%2525/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительных сведений о структурах см. &lt;a href=&quot;kernel.specialforms#%2525/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.%/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="59d3cf884555506ee92cff193a1929009e874d1e" translate="yes" xml:space="preserve">
          <source>For more information about task aliasing, take a look at the &quot;Aliasing&quot; section in the docs for &lt;a href=&quot;mix&quot;&gt;&lt;code&gt;Mix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Дополнительные сведения о псевдонимах задач см. В разделе &amp;laquo;Псевдонимы&amp;raquo; в документации по &lt;a href=&quot;mix&quot;&gt; &lt;code&gt;Mix&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="78f8e40c63b458c9fad682e6d3b6666a0f62cf7b" translate="yes" xml:space="preserve">
          <source>For more information about task aliasing, take a look at the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;&quot;Aliases&quot;&lt;/a&gt; section in the docs for &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;&lt;code&gt;Mix&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Дополнительные сведения о псевдонимах задач см. В разделе &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#module-aliases&quot;&gt;&amp;laquo;Псевдонимы&amp;raquo;&lt;/a&gt; в документации по &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt; &lt;code&gt;Mix&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="da00729bbfd1619462b29a7b8fa0dab41f7868c6" translate="yes" xml:space="preserve">
          <source>For more information and the list of options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#open_port-2&quot;&gt;&lt;code&gt;:erlang.open_port/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации и списка опций см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#open_port-2&quot;&gt; &lt;code&gt;:erlang.open_port/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc7ee954ed549f3663bd8fb004277a09d86223c0" translate="yes" xml:space="preserve">
          <source>For more information and to open any module or function, see &lt;a href=&quot;#open/1&quot;&gt;&lt;code&gt;open/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации и открытия любого модуля или функции см. &lt;a href=&quot;#open/1&quot;&gt; &lt;code&gt;open/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d0b21c46bc07a705dfc9fb743eebf812b0cdc892" translate="yes" xml:space="preserve">
          <source>For more information on code paths, check the &lt;a href=&quot;code&quot;&gt;&lt;code&gt;Code&lt;/code&gt;&lt;/a&gt; module in Elixir and also Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;&lt;code&gt;:code&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о путях кода проверьте модуль &lt;a href=&quot;code&quot;&gt; &lt;code&gt;Code&lt;/code&gt; &lt;/a&gt; в Elixir, а также &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;модуль&lt;/a&gt; Erlang &lt;code&gt;:code&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bd54480aa692a8df8b981b72aa444502ecc46ce" translate="yes" xml:space="preserve">
          <source>For more information on code paths, check the &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html&quot;&gt;&lt;code&gt;Code&lt;/code&gt;&lt;/a&gt; module in Elixir and also Erlang's &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;&lt;code&gt;:code&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о путях кода проверьте модуль &lt;a href=&quot;https://hexdocs.pm/elixir/Code.html&quot;&gt; &lt;code&gt;Code&lt;/code&gt; &lt;/a&gt; в Elixir, а также &lt;a href=&quot;http://www.erlang.org/doc/man/code.html&quot;&gt;модуль&lt;/a&gt; Erlang &lt;code&gt;:code&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6bd6c86df060a9a0da50c17d815720a12995dd04" translate="yes" xml:space="preserve">
          <source>For more information on each of the possible returned values, see &lt;a href=&quot;#info/1&quot;&gt;&lt;code&gt;info/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о каждом из возможных возвращаемых значений см. &lt;a href=&quot;#info/1&quot;&gt; &lt;code&gt;info/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8a372c9bd101c94685e235eb649743902f58f48c" translate="yes" xml:space="preserve">
          <source>For more information on how the break is inserted, see &lt;a href=&quot;#break/1&quot;&gt;&lt;code&gt;break/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о том, как вставляется &lt;a href=&quot;#break/1&quot;&gt; &lt;code&gt;break/1&lt;/code&gt; &lt;/a&gt; , см. Break / 1 .</target>
        </trans-unit>
        <trans-unit id="65a28bc1907c5e0ff21b3bd1d4bbcdfcc5c5acaf" translate="yes" xml:space="preserve">
          <source>For more information on running your project, see the official &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;Mix &amp;amp; OTP guide&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;Mix documentation&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации о запуске вашего проекта см. Официальное &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html&quot;&gt;руководство Mix &amp;amp; OTP&lt;/a&gt; или &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html&quot;&gt;документацию Mix&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="eff11d18fedd9846c96b5c225d02a932e7b86b50" translate="yes" xml:space="preserve">
          <source>For more information read the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Character_groups&quot;&gt;Character groups&lt;/a&gt; section in the Wikipedia article of the &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; standard.</source>
          <target state="translated">Для получения дополнительной информации прочтите раздел &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Character_groups&quot;&gt;Группы символов&lt;/a&gt; в статье Википедии о стандарте &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5b003e6f0d5f3ad23f1b90e810d0b8f11ff3028f" translate="yes" xml:space="preserve">
          <source>For more information, check &lt;a href=&quot;https://hexdocs.pm/eex/EEx.SmartEngine.html&quot;&gt;&lt;code&gt;EEx.SmartEngine&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации проверьте &lt;a href=&quot;https://hexdocs.pm/eex/EEx.SmartEngine.html&quot;&gt; &lt;code&gt;EEx.SmartEngine&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c1311002c3a957f544a2fb2f22b854fa11815412" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#disconnect_node-1&quot;&gt;&lt;code&gt;:erlang.disconnect_node/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#disconnect_node-1&quot;&gt; &lt;code&gt;:erlang.disconnect_node/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0cd3be4a21a8ffdb5484f382332800faea93a58f" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-1&quot;&gt;&lt;code&gt;:erlang.halt/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#halt-1&quot;&gt; &lt;code&gt;:erlang.halt/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="48be8c3bec9fc07a6ce3cee60d8a8e670e70ad06" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-2&quot;&gt;&lt;code&gt;:erlang.monitor_node/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-2&quot;&gt; &lt;code&gt;:erlang.monitor_node/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cb3eefbbccd2c205683a61d85dab5af738a1f1d7" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-3&quot;&gt;&lt;code&gt;:erlang.monitor_node/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor_node-3&quot;&gt; &lt;code&gt;:erlang.monitor_node/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7c9d37564a53538860067ee2ce72a5278d51bbde" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#nodes-1&quot;&gt;&lt;code&gt;:erlang.nodes/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#nodes-1&quot;&gt; &lt;code&gt;:erlang.nodes/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2eb045622e309576ede0093587a78e27c6a80e60" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_close-1&quot;&gt;&lt;code&gt;:erlang.port_close/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_close-1&quot;&gt; &lt;code&gt;:erlang.port_close/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="74569ddc9dafdb010b29df91efd894806768f74c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_command-2&quot;&gt;&lt;code&gt;:erlang.port_command/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_command-2&quot;&gt; &lt;code&gt;:erlang.port_command/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="db0e4c8249cd1b3c3788a38e7bf3c3b9d4b6ceab" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_connect-2&quot;&gt;&lt;code&gt;:erlang.port_connect/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_connect-2&quot;&gt; &lt;code&gt;:erlang.port_connect/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3ce86a1871484a9008f73d0c702d7521b667af6c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-1&quot;&gt;&lt;code&gt;:erlang.port_info/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-1&quot;&gt; &lt;code&gt;:erlang.port_info/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="80edbd442183f322a586734d8b1f7c8a23af48b7" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-2&quot;&gt;&lt;code&gt;:erlang.port_info/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#port_info-2&quot;&gt; &lt;code&gt;:erlang.port_info/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="82424b64f3a822c3b698f3418f074d1a59050668" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#connect_node-1&quot;&gt;&lt;code&gt;:net_kernel.connect_node/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/net_kernel.html#connect_node-1&quot;&gt; &lt;code&gt;:net_kernel.connect_node/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ef58581a2fb238d3165babba36ae1b31c20add22" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#getpid-0&quot;&gt;&lt;code&gt;:os.getpid/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для получения дополнительной информации см . &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#getpid-0&quot;&gt; &lt;code&gt;:os.getpid/0&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ed8b5928b9cd599d88e9ffccabb9856023defc53" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#t:child_spec/0&quot;&gt;&lt;code&gt;Supervisor.child_spec/0&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Для получения дополнительной информации см &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; модуль, в &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt; функции и &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html#t:child_spec/0&quot;&gt; &lt;code&gt;Supervisor.child_spec/0&lt;/code&gt; &lt;/a&gt; типа.</target>
        </trans-unit>
        <trans-unit id="9ba2f8e0812ba8129e28893614e39bd76a33546b" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;supervisor#child_spec/2&quot;&gt;&lt;code&gt;Supervisor.child_spec/2&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;supervisor#t:child_spec/0&quot;&gt;&lt;code&gt;Supervisor.child_spec/0&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="translated">Для получения дополнительной информации см &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; модуль, в &lt;a href=&quot;supervisor#child_spec/2&quot;&gt; &lt;code&gt;Supervisor.child_spec/2&lt;/code&gt; &lt;/a&gt; функции и &lt;a href=&quot;supervisor#t:child_spec/0&quot;&gt; &lt;code&gt;Supervisor.child_spec/0&lt;/code&gt; &lt;/a&gt; типа.</target>
        </trans-unit>
        <trans-unit id="1c2459bba39c2a32218e800abed73a1b40251809" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;git config&lt;/code&gt; documentation: &lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&quot;&gt;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&lt;/a&gt;</source>
          <target state="translated">Для получения дополнительной информации см. Документацию по &lt;code&gt;git config&lt;/code&gt; : &lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&quot;&gt;https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d95ccf97994d2d052649c07b5320d1f38bf9f6a" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;git config&lt;/code&gt; documentation: https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf</source>
          <target state="translated">Для получения дополнительной информации см. Документацию по &lt;code&gt;git config&lt;/code&gt; : https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf</target>
        </trans-unit>
        <trans-unit id="72d636c495936af4b6f2d13c4ec5f6492712b56a" translate="yes" xml:space="preserve">
          <source>For more options, keep an eye on the documentation for single Mix tasks; good examples are the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task and all the specific compiler tasks (such as &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Erlang.html&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Для получения дополнительных опций следите за документацией для отдельных задач Mix; хорошими примерами являются задача &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt; и все конкретные задачи компилятора (такие как &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Elixir.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Compile.Erlang.html&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="1db1a5e08950211f4efaa987901db5f4cb9b8017" translate="yes" xml:space="preserve">
          <source>For more options, keep an eye on the documentation for single Mix tasks; good examples are the &lt;a href=&quot;mix.tasks.compile&quot;&gt;&lt;code&gt;Mix.Tasks.Compile&lt;/code&gt;&lt;/a&gt; task and all the specific compiler tasks (such as &lt;a href=&quot;mix.tasks.compile.elixir&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mix.tasks.compile.erlang&quot;&gt;&lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Для получения дополнительных опций следите за документацией для отдельных задач Mix; хорошими примерами являются задача &lt;a href=&quot;mix.tasks.compile&quot;&gt; &lt;code&gt;Mix.Tasks.Compile&lt;/code&gt; &lt;/a&gt; и все конкретные задачи компилятора (такие как &lt;a href=&quot;mix.tasks.compile.elixir&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Elixir&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;mix.tasks.compile.erlang&quot;&gt; &lt;code&gt;Mix.Tasks.Compile.Erlang&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ab9291211cba201b17b9f64f55072345afbd7fc8" translate="yes" xml:space="preserve">
          <source>For most cases, use &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now/2&quot;&gt;&lt;code&gt;DateTime.now/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#utc_now/1&quot;&gt;&lt;code&gt;DateTime.utc_now/1&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">В большинстве случаев используйте вместо этого &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#now/2&quot;&gt; &lt;code&gt;DateTime.now/2&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html#utc_now/1&quot;&gt; &lt;code&gt;DateTime.utc_now/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="df72e64eacb9e3850dc8419637a02be86b270033" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s move on and explore the world of I/O in Elixir.</source>
          <target state="translated">А пока давайте продолжим и исследуем мир ввода-вывода в Elixir.</target>
        </trans-unit>
        <trans-unit id="9d92d262d1937649c7dcc6aa1826ed7218a816df" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s start by running &lt;code&gt;iex&lt;/code&gt; (or &lt;code&gt;iex.bat&lt;/code&gt; if you are on Windows PowerShell, where &lt;code&gt;iex&lt;/code&gt; is a PowerShell command) which stands for Interactive Elixir. In interactive mode, we can type any Elixir expression and get its result. Let&amp;rsquo;s warm up with some basic expressions.</source>
          <target state="translated">А пока давайте начнем с запуска &lt;code&gt;iex&lt;/code&gt; (или &lt;code&gt;iex.bat&lt;/code&gt; , если вы используете Windows PowerShell, где &lt;code&gt;iex&lt;/code&gt; - это команда PowerShell), что означает &amp;laquo;Интерактивный эликсир&amp;raquo;. В интерактивном режиме мы можем набрать любое выражение Elixir и получить его результат. Давайте разберемся с некоторыми основными выражениями.</target>
        </trans-unit>
        <trans-unit id="f53fcbcb4286cbc82f5367680ea1d01a64e91602" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s start by running &lt;code&gt;iex&lt;/code&gt; (or &lt;code&gt;iex.bat&lt;/code&gt; if you are on Windows) which stands for Interactive Elixir. In interactive mode, we can type any Elixir expression and get its result. Let&amp;rsquo;s warm up with some basic expressions.</source>
          <target state="translated">А пока давайте начнем с запуска &lt;code&gt;iex&lt;/code&gt; (или &lt;code&gt;iex.bat&lt;/code&gt; , если вы работаете в Windows), что означает &amp;laquo;Интерактивный эликсир&amp;raquo;. В интерактивном режиме мы можем набрать любое выражение на Эликсире и получить его результат. Давайте разберемся с некоторыми основными выражениями.</target>
        </trans-unit>
        <trans-unit id="8f7af079e462a2a151d8084f9a25584ba5fdb2e5" translate="yes" xml:space="preserve">
          <source>For now, let&amp;rsquo;s write some tests to guarantee our GenServer works as expected.</source>
          <target state="translated">А пока давайте напишем несколько тестов, чтобы гарантировать, что наш GenServer работает должным образом.</target>
        </trans-unit>
        <trans-unit id="148e18f793d17b1f034ccd4f65b51bd7c72b46fe" translate="yes" xml:space="preserve">
          <source>For now, there is a more important bug we need to fix: what happens if our TCP acceptor crashes? Since there is no supervision, the server dies and we won&amp;rsquo;t be able to serve more requests, because it won&amp;rsquo;t be restarted. That&amp;rsquo;s why we must move our server to a supervision tree.</source>
          <target state="translated">А пока есть более важная ошибка, которую нам нужно исправить: что произойдет, если наш приемник TCP выйдет из строя? Поскольку нет контроля, сервер умирает, и мы не сможем обслуживать больше запросов, потому что он не будет перезапущен. Вот почему мы должны переместить наш сервер в дерево наблюдения.</target>
        </trans-unit>
        <trans-unit id="87f6316211bcc19e1a9eaf598a9dc404f5c35c3f" translate="yes" xml:space="preserve">
          <source>For now, we don&amp;rsquo;t have a mechanism to run tests, but we know that a function named &amp;ldquo;test hello&amp;rdquo; was defined behind the scenes. When we invoke it, it should fail:</source>
          <target state="translated">На данный момент у нас нет механизма для запуска тестов, но мы знаем, что функция с именем &amp;laquo;test hello&amp;raquo; была определена за кулисами. Когда мы вызываем его, он не должен работать:</target>
        </trans-unit>
        <trans-unit id="c1b2f8891476cbc97734acacb2637f18c16dc0b0" translate="yes" xml:space="preserve">
          <source>For now, we will write only the server callbacks for our bucket registering logic, without providing a proper API, which we will do later.</source>
          <target state="translated">Пока мы будем писать только серверные обратные вызовы для нашей логики регистрации ведра,без предоставления соответствующего API,что мы сделаем позже.</target>
        </trans-unit>
        <trans-unit id="dc972a5ae988c88cbdf8abf55ced2fc62781c361" translate="yes" xml:space="preserve">
          <source>For other nodes in the network, this is the same as the node going down. Only possible when the node was started with &lt;a href=&quot;#start/3&quot;&gt;&lt;code&gt;Node.start/3&lt;/code&gt;&lt;/a&gt;, otherwise returns &lt;code&gt;{:error, :not_allowed}&lt;/code&gt;. Returns &lt;code&gt;{:error, :not_found}&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">Для других узлов в сети это то же самое, что и узел, выходящий из строя. Возможно, только если узел был запущен с помощью &lt;a href=&quot;#start/3&quot;&gt; &lt;code&gt;Node.start/3&lt;/code&gt; &lt;/a&gt; , в противном случае возвращается &lt;code&gt;{:error, :not_allowed}&lt;/code&gt; . Возвращает &lt;code&gt;{:error, :not_found}&lt;/code&gt; если локальный узел не работает.</target>
        </trans-unit>
        <trans-unit id="cdf1e2badff2fb623eee0d15afc921e9e14a706d" translate="yes" xml:space="preserve">
          <source>For other nodes in the network, this is the same as the node going down. Only possible when the node was started with &lt;a href=&quot;node#start/3&quot;&gt;&lt;code&gt;Node.start/3&lt;/code&gt;&lt;/a&gt;, otherwise returns &lt;code&gt;{:error, :not_allowed}&lt;/code&gt;. Returns &lt;code&gt;{:error, :not_found}&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">Для других узлов в сети это то же самое, что и выход узла из строя. Возможно только тогда, когда узел был запущен с помощью &lt;a href=&quot;node#start/3&quot;&gt; &lt;code&gt;Node.start/3&lt;/code&gt; &lt;/a&gt; , в противном случае возвращает &lt;code&gt;{:error, :not_allowed}&lt;/code&gt; . Возвращает &lt;code&gt;{:error, :not_found}&lt;/code&gt; если локальный узел не работает.</target>
        </trans-unit>
        <trans-unit id="6dc55533805b090f117cb41ae2a4faf8a8f47746" translate="yes" xml:space="preserve">
          <source>For our routing layer, we are going to use tasks, but feel free to explore the other alternatives too.</source>
          <target state="translated">Для нашего уровня маршрутизации мы будем использовать задачи,но не стесняйтесь изучать и другие альтернативы.</target>
        </trans-unit>
        <trans-unit id="40e9bcfd5323b3ba76bb77edb0dbd378b076a7c8" translate="yes" xml:space="preserve">
          <source>For qualified calls, Elixir also allows the function name to be written between double- or single-quotes, allowing calls such as &lt;code&gt;Math.&quot;++add++&quot;(1, 2)&lt;/code&gt;. Operators can be used as qualified calls without a need for quote, such as &lt;code&gt;Kernel.+(1, 2)&lt;/code&gt;.</source>
          <target state="translated">Для квалифицированных вызовов Elixir также позволяет записывать имя функции между двойными или одинарными кавычками, разрешая такие вызовы, как &lt;code&gt;Math.&quot;++add++&quot;(1, 2)&lt;/code&gt; . Операторы могут использоваться как квалифицированные вызовы без кавычек, например &lt;code&gt;Kernel.+(1, 2)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42f87f4978894da77ca58ac8711d1cc43114d9dc" translate="yes" xml:space="preserve">
          <source>For reference information about operators (and ordering), check the &lt;a href=&quot;https://hexdocs.pm/elixir/operators.html&quot;&gt;reference page on operators&lt;/a&gt;.</source>
          <target state="translated">Для получения справочной информации об операторах (и порядке их выполнения) посетите &lt;a href=&quot;https://hexdocs.pm/elixir/operators.html&quot;&gt;справочную страницу по операторам&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="45c16b662757456a064165b8b1b3ab76da91cf9d" translate="yes" xml:space="preserve">
          <source>For runtime configuration, you can use the &lt;code&gt;config/runtime.exs&lt;/code&gt; file. It is executed right before applications start in both Mix and releases (assembled with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Для конфигурации во время выполнения вы можете использовать файл &lt;code&gt;config/runtime.exs&lt;/code&gt; . Он выполняется непосредственно перед запуском приложений как в Mix, так и в выпусках (собранных с &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="cf040e76c44787262309528d14284c46bf630986" translate="yes" xml:space="preserve">
          <source>For selecting a maximum value out of two consider using &lt;a href=&quot;kernel#max/2&quot;&gt;&lt;code&gt;Kernel.max/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для выбора максимального значения из двух рассмотрите возможность использования &lt;a href=&quot;kernel#max/2&quot;&gt; &lt;code&gt;Kernel.max/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1562be9dbea9e9ca6fb9c201080d343b056ee54f" translate="yes" xml:space="preserve">
          <source>For selecting a minimal value out of two consider using &lt;a href=&quot;kernel#min/2&quot;&gt;&lt;code&gt;Kernel.min/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Для выбора минимального значения из двух рассмотрите возможность использования &lt;a href=&quot;kernel#min/2&quot;&gt; &lt;code&gt;Kernel.min/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a4f8060b8066310c46625a879a6c7a04a6546c32" translate="yes" xml:space="preserve">
          <source>For simplicity, we will define a routing table that always points to the current node. That&amp;rsquo;s the table we will use for development and most of our tests. Back in &lt;code&gt;config/config.exs&lt;/code&gt;, add this line:</source>
          <target state="translated">Для простоты мы определим таблицу маршрутизации, которая всегда указывает на текущий узел. Это таблица, которую мы будем использовать для разработки и большинства наших тестов. Вернувшись в &lt;code&gt;config/config.exs&lt;/code&gt; , добавьте эту строку:</target>
        </trans-unit>
        <trans-unit id="57260814a626a0bc7ec7efb7558c4019fed8ea33" translate="yes" xml:space="preserve">
          <source>For such cases, there is a special break-trigger (&lt;code&gt;#iex:break&lt;/code&gt;) that when encountered on a line by itself will force the shell to break out of any pending expression and return to its normal state:</source>
          <target state="translated">Для таких случаев существует специальный триггер &lt;code&gt;#iex:break&lt;/code&gt; ( #iex: break ), который при обнаружении в отдельной строке заставляет оболочку выйти из любого ожидающего выражения и вернуться в нормальное состояние:</target>
        </trans-unit>
        <trans-unit id="b2bcf831b712f7880bfa8b2d774584d0dac9e8fa" translate="yes" xml:space="preserve">
          <source>For such, you can explicitly pass the current module scope as argument:</source>
          <target state="translated">Для этого можно явно передать текущую область видимости модуля в качестве аргумента:</target>
        </trans-unit>
        <trans-unit id="f5574a61794819cd12b11f08763b8c0faad5bbf7" translate="yes" xml:space="preserve">
          <source>For the actual date, time and datetime structures, see &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Фактические структуры даты, времени и datetime см. В &lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; , NaiveDateTime и &lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b01361fded820f92aa3d34dea84f82e83756a312" translate="yes" xml:space="preserve">
          <source>For the actual date, time and datetime structures, see &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Фактические структуры даты, времени и datetime см. В &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://hexdocs.pm/elixir/Date.html&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://hexdocs.pm/elixir/Time.html&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt; , NaiveDateTime и &lt;a href=&quot;https://hexdocs.pm/elixir/DateTime.html&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dd4507d56d8ae26835032192a96f8f942cf347e1" translate="yes" xml:space="preserve">
          <source>For the cases where you do expect a file to exist (and the lack of that file is truly an &lt;em&gt;error&lt;/em&gt;) you may use &lt;code&gt;File.read!/1&lt;/code&gt;:</source>
          <target state="translated">В случаях, когда вы ожидаете, что файл существует (и отсутствие этого файла действительно является &lt;em&gt;ошибкой&lt;/em&gt; ), вы можете использовать &lt;code&gt;File.read!/1&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="feff331a64ed11f441e7848a674afa89ee8071f6" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-2&quot;&gt;&lt;code&gt;:erlang.spawn/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Список доступных опций см &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-2&quot;&gt; &lt;code&gt;:erlang.spawn/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6639a98f71e3255b9d9416659477b36d9f9e63f9" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-4&quot;&gt;&lt;code&gt;:erlang.spawn/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Список доступных опций см &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-4&quot;&gt; &lt;code&gt;:erlang.spawn/4&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d102dfda15fab2a12aecfca86ecdab6b9328f4c7" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-5&quot;&gt;&lt;code&gt;:erlang.spawn/5&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Список доступных опций см &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn-5&quot;&gt; &lt;code&gt;:erlang.spawn/5&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="147c5308097c95403b6c3b710471092817aba390" translate="yes" xml:space="preserve">
          <source>For the list of available options, see &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn_opt-3&quot;&gt;&lt;code&gt;:erlang.spawn_opt/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Список доступных опций см &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#spawn_opt-3&quot;&gt; &lt;code&gt;:erlang.spawn_opt/3&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ad4e9a7fc7900bbb60654000287c4ad75fc0eadd" translate="yes" xml:space="preserve">
          <source>For the list of supported warnings, see &lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt;&lt;code&gt;:dialyzer&lt;/code&gt; module&lt;/a&gt;.</source>
          <target state="translated">Список поддерживаемых предупреждений см . &lt;a href=&quot;http://www.erlang.org/doc/man/dialyzer.html&quot;&gt; &lt;code&gt;:dialyzer&lt;/code&gt; модуль диализатора&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a293fce2f70fe18d9d7bb3411509a1883ca74c72" translate="yes" xml:space="preserve">
          <source>For this chapter, we will be using files instead of running code samples in IEx. That&amp;rsquo;s because the code samples will span multiple lines of code and typing them all in IEx can be counter-productive. You should be able to run the code samples by saving them into a &lt;code&gt;macros.exs&lt;/code&gt; file and running it with &lt;code&gt;elixir macros.exs&lt;/code&gt; or &lt;code&gt;iex macros.exs&lt;/code&gt;.</source>
          <target state="translated">В этой главе мы будем использовать файлы вместо запуска примеров кода в IEx. Это потому, что образцы кода будут охватывать несколько строк кода, и ввод их всех в IEx может быть контрпродуктивным. Вы должны иметь возможность запускать образцы кода, сохранив их в файле &lt;code&gt;macros.exs&lt;/code&gt; и запустив его с &lt;code&gt;elixir macros.exs&lt;/code&gt; или &lt;code&gt;iex macros.exs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="467f37cafc343b5dd34e43c5cc0cac653196e6ee" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; supports partitioning the test files across different Elixir instances. This is done by setting the &lt;code&gt;--partitions&lt;/code&gt; option to an integer, with the number of partitions, and setting the &lt;code&gt;MIX_TEST_PARTITION&lt;/code&gt; environment variable to control which test partition that particular instance is running. This can also be useful if you want to distribute testing across multiple machines.</source>
          <target state="translated">По этой причине &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt; поддерживает разделение тестовых файлов между разными экземплярами Elixir. Это делается путем установки &lt;code&gt;--partitions&lt;/code&gt; опции в целое число, с числом перегородок и установка &lt;code&gt;MIX_TEST_PARTITION&lt;/code&gt; переменной окружения управления , какой тестовый раздел, конкретный экземпляр работает. Это также может быть полезно, если вы хотите распределить тестирование на нескольких машинах.</target>
        </trans-unit>
        <trans-unit id="945a8597b683042909912d13ab0af0f05f4a1912" translate="yes" xml:space="preserve">
          <source>For this reason, Mix also provides an &lt;code&gt;--only&lt;/code&gt; option that excludes all tests and includes only the given ones:</source>
          <target state="translated">По этой причине Mix также предоставляет параметр &lt;code&gt;--only&lt;/code&gt; , который исключает все тесты и включает только указанные:</target>
        </trans-unit>
        <trans-unit id="5942291bf8303552448ccf23f92c1cc85a264e74" translate="yes" xml:space="preserve">
          <source>For this reason, Mix supports &amp;ldquo;umbrella projects&amp;rdquo;. Umbrella projects are used to build applications that run together in a single repository. That is exactly the style we are going to explore in the next sections.</source>
          <target state="translated">По этой причине Mix поддерживает &amp;laquo;зонтичные проекты&amp;raquo;. Проекты Umbrella используются для создания приложений, работающих вместе в едином репозитории. Именно этот стиль мы рассмотрим в следующих разделах.</target>
        </trans-unit>
        <trans-unit id="c1c939e13c6bbd8a4d4a1a8b54e616c8009ed164" translate="yes" xml:space="preserve">
          <source>For this reason, most structs provide a &quot;compare&quot; function, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt;&lt;code&gt;Date.compare/2&lt;/code&gt;&lt;/a&gt;, which receives two structs and returns &lt;code&gt;:lt&lt;/code&gt; (less-than), &lt;code&gt;:eq&lt;/code&gt; (equal to), and &lt;code&gt;:gt&lt;/code&gt; (greater-than). If you pass a module as the sorting function, Elixir will automatically use the &lt;code&gt;compare/2&lt;/code&gt; function of said module:</source>
          <target state="translated">По этой причине большинство структур предоставляют функцию &amp;laquo;сравнения&amp;raquo;, например &lt;a href=&quot;https://hexdocs.pm/elixir/Date.html#compare/2&quot;&gt; &lt;code&gt;Date.compare/2&lt;/code&gt; &lt;/a&gt; , которая принимает две структуры и возвращает &lt;code&gt;:lt&lt;/code&gt; (меньше-чем) ,: &lt;code&gt;:eq&lt;/code&gt; (равно) и &lt;code&gt;:gt&lt;/code&gt; (больше-чем). . Если вы передадите модуль в качестве функции сортировки, Elixir автоматически будет использовать функцию &lt;code&gt;compare/2&lt;/code&gt; указанного модуля:</target>
        </trans-unit>
        <trans-unit id="db439eca1a575baf9e479914a743abe4e55ae0ad" translate="yes" xml:space="preserve">
          <source>For this reason, the task touches your &lt;code&gt;:compile_path&lt;/code&gt; directory and sets the modification time to the current time and date at the end of each compilation. You can force compilation regardless of modification times by passing the &lt;code&gt;--force&lt;/code&gt; option.</source>
          <target state="translated">По этой причине задача касается вашего &lt;code&gt;:compile_path&lt;/code&gt; и устанавливает время модификации на текущее время и дату в конце каждой компиляции. Вы можете принудительно выполнить компиляцию независимо от времени модификации, передав параметр &lt;code&gt;--force&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32446efaffd01773633a5c5b128367d85e1cc28b" translate="yes" xml:space="preserve">
          <source>For those reasons, reading the application environment at runtime should be the first choice. However, if you really have to read the application environment during compilation, we recommend you to use &lt;a href=&quot;#compile_env/3&quot;&gt;&lt;code&gt;compile_env/3&lt;/code&gt;&lt;/a&gt; instead:</source>
          <target state="translated">По этим причинам чтение среды приложения во время выполнения должно быть первым выбором. Однако, если вам действительно нужно читать среду приложения во время компиляции, мы рекомендуем вместо этого использовать &lt;a href=&quot;#compile_env/3&quot;&gt; &lt;code&gt;compile_env/3&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="c4c8e038c25d83bf6d852a971892fb340f9e2eff" translate="yes" xml:space="preserve">
          <source>For those who enjoy breakpoints but are rather interested in a visual debugger, Erlang/OTP ships with a graphical debugger conveniently named &lt;code&gt;:debugger&lt;/code&gt;. Let&amp;rsquo;s define a module in a file named &lt;code&gt;example.ex&lt;/code&gt;:</source>
          <target state="translated">Для тех, кто любит точки останова, но скорее интересуется визуальным отладчиком, Erlang / OTP поставляется с графическим отладчиком с удобным названием &lt;code&gt;:debugger&lt;/code&gt; . Давайте определим модуль в файле с именем &lt;code&gt;example.ex&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cfae34045d5d895009311d2a2a010463848d8c45" translate="yes" xml:space="preserve">
          <source>For those who enjoy breakpoints but are rather interested in a visual debugger, Erlang/OTP ships with a graphical debugger conveniently named &lt;code&gt;:debugger&lt;/code&gt;. Let&amp;rsquo;s define a module:</source>
          <target state="translated">Для тех, кому нравятся точки останова, но больше интересует визуальный отладчик, Erlang / OTP поставляется с графическим отладчиком с удобным названием &lt;code&gt;:debugger&lt;/code&gt; . Определим модуль:</target>
        </trans-unit>
        <trans-unit id="bc2d3f32f1c4138eee3831b35b324f9d5504e4b5" translate="yes" xml:space="preserve">
          <source>For unique registries it can be used to conditionally unregister a key on the basis of whether or not it matches a particular value.</source>
          <target state="translated">Для уникальных реестров он может быть использован для условной отмены регистрации ключа в зависимости от того,соответствует ли он определенному значению.</target>
        </trans-unit>
        <trans-unit id="14cd0b7637eff1b0c6bd870cfbdfa9301754b7b7" translate="yes" xml:space="preserve">
          <source>For unique registries, a single partition lookup is necessary. For duplicate registries, all partitions must be looked up.</source>
          <target state="translated">Для уникальных реестров необходим единый поиск разделов.Для дублирующих реестров необходимо просмотреть все разделы.</target>
        </trans-unit>
        <trans-unit id="a33570d2441921e7831b3c41af0473896917c621" translate="yes" xml:space="preserve">
          <source>For unique registries:</source>
          <target state="translated">Для уникальных реестров:</target>
        </trans-unit>
        <trans-unit id="a494479b1595316138e63803f01b27c1d049ecb0" translate="yes" xml:space="preserve">
          <source>For variables, any identifier starting with an underscore should indicate an unused variable. For example:</source>
          <target state="translated">Для переменных любой идентификатор,начинающийся со знака подчеркивания,должен указывать на неиспользуемую переменную.Например:</target>
        </trans-unit>
        <trans-unit id="c93842334df0e58537ff9e4564650c5a06d71f1b" translate="yes" xml:space="preserve">
          <source>Forces the current group to be unfit.</source>
          <target state="translated">заставляет нынешнюю группу быть непригодной.</target>
        </trans-unit>
        <trans-unit id="c5bf5789dde7373724874c65a12c156bc9c3ab1f" translate="yes" xml:space="preserve">
          <source>Forces the disconnection of a node.</source>
          <target state="translated">Силовое отсоединение узла.</target>
        </trans-unit>
        <trans-unit id="815a28d19a43ab21cf99300b9b2fd43fa459fe43" translate="yes" xml:space="preserve">
          <source>Forces the path to be a relative path.</source>
          <target state="translated">заставляет путь быть относительным.</target>
        </trans-unit>
        <trans-unit id="0a683f099c5cd32d972be2f3a92f5a845ceb5fd5" translate="yes" xml:space="preserve">
          <source>Foreword</source>
          <target state="translated">Foreword</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="5c35ec0ad733522cc571cfec85232066d155794d" translate="yes" xml:space="preserve">
          <source>Formats a chardata-like argument by converting named ANSI sequences into actual ANSI codes.</source>
          <target state="translated">Форматирует чардатоподобный аргумент,преобразуя именованные ANSI последовательности в действительные ANSI коды.</target>
        </trans-unit>
        <trans-unit id="2207193e5d684c4dc9f415ae14757dea81eca345" translate="yes" xml:space="preserve">
          <source>Formats a file.</source>
          <target state="translated">Форматирует файл.</target>
        </trans-unit>
        <trans-unit id="cafa245a564712637537f38b69c740ea4dde1a5f" translate="yes" xml:space="preserve">
          <source>Formats a given document for a given width.</source>
          <target state="translated">Форматирует данный документ для заданной ширины.</target>
        </trans-unit>
        <trans-unit id="8dfa3afe7b66a75ca4db90cdffb1c56ec5f2cef4" translate="yes" xml:space="preserve">
          <source>Formats an exit. It returns a string.</source>
          <target state="translated">Форматирует выход.Возвращает строку.</target>
        </trans-unit>
        <trans-unit id="6efb90c18f18ca530ad6f75b186ea9a0dab0abb7" translate="yes" xml:space="preserve">
          <source>Formats and truncates messages on the client to avoid clogging &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; backends.</source>
          <target state="translated">Форматирует и обрезает сообщения на клиенте, чтобы избежать засорения серверных программ &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="56622496774bb19434d2ebee47141c996a87f22d" translate="yes" xml:space="preserve">
          <source>Formats date as chardata.</source>
          <target state="translated">Форматы датируются чардатой.</target>
        </trans-unit>
        <trans-unit id="027d7a70820717a59658836a98131d6522ec7975" translate="yes" xml:space="preserve">
          <source>Formats filters used to constrain cases to be run.</source>
          <target state="translated">Форматирует фильтры,используемые для ограничения случаев,которые должны быть запущены.</target>
        </trans-unit>
        <trans-unit id="8c5df1d8fe3d3f335538a7bdda896042d42452a8" translate="yes" xml:space="preserve">
          <source>Formats received datetime into a string.</source>
          <target state="translated">Форматирует полученное время даты в строку.</target>
        </trans-unit>
        <trans-unit id="aa53a753f568d1640d41923f79bf478cc8554997" translate="yes" xml:space="preserve">
          <source>Formats the error reason returned by &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ensure_started/2&quot;&gt;&lt;code&gt;ensure_started/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#load/1&quot;&gt;&lt;code&gt;load/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unload/1&quot;&gt;&lt;code&gt;unload/1&lt;/code&gt;&lt;/a&gt;, returns a string.</source>
          <target state="translated">Форматирует причину ошибки, возвращаемую &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#ensure_started/2&quot;&gt; &lt;code&gt;ensure_started/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#load/1&quot;&gt; &lt;code&gt;load/1&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#unload/1&quot;&gt; &lt;code&gt;unload/1&lt;/code&gt; &lt;/a&gt; , возвращает строку.</target>
        </trans-unit>
        <trans-unit id="e18bb89882580c7f86301b123f406d45a0f80a81" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt; as shown in stacktraces.</source>
          <target state="translated">Форматирует данный &lt;code&gt;file&lt;/code&gt; и &lt;code&gt;line&lt;/code&gt; как показано в трассировке стека.</target>
        </trans-unit>
        <trans-unit id="7f7ec50c392208c557864813c0cfdc9b2645d9c5" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt; as shown in stacktraces. If any of the values are &lt;code&gt;nil&lt;/code&gt;, they are omitted.</source>
          <target state="translated">Форматирует данный &lt;code&gt;file&lt;/code&gt; и &lt;code&gt;line&lt;/code&gt; как показано в трассировке стека. Если какое-либо из значений &lt;code&gt;nil&lt;/code&gt; , они опускаются.</target>
        </trans-unit>
        <trans-unit id="aa90b5e3e8aaedcbfa1f49413d30ef681c6976ab" translate="yes" xml:space="preserve">
          <source>Formats the given &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, and &lt;code&gt;column&lt;/code&gt; as shown in stacktraces.</source>
          <target state="translated">Форматирует указанный &lt;code&gt;file&lt;/code&gt; , &lt;code&gt;line&lt;/code&gt; и &lt;code&gt;column&lt;/code&gt; как показано в трассировке стека.</target>
        </trans-unit>
        <trans-unit id="43daea1857449413e5d2961950390283bfbd89a9" translate="yes" xml:space="preserve">
          <source>Formats the given code &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">Форматирует заданную &lt;code&gt;string&lt;/code&gt; кода .</target>
        </trans-unit>
        <trans-unit id="4e9ff0af2c46ca0408f0eb37c63e3365599d3452" translate="yes" xml:space="preserve">
          <source>Formats the given files and patterns.</source>
          <target state="translated">Форматирует данные файлы и шаблоны.</target>
        </trans-unit>
        <trans-unit id="60cbeba6574b12f984495c88bbbacdd53f31a94a" translate="yes" xml:space="preserve">
          <source>Formats the location for &lt;a href=&quot;#whereami/3&quot;&gt;&lt;code&gt;whereami/3&lt;/code&gt;&lt;/a&gt; prying.</source>
          <target state="translated">Форматирует локацию для &lt;a href=&quot;#whereami/3&quot;&gt; &lt;code&gt;whereami/3&lt;/code&gt; &lt;/a&gt; любопытных.</target>
        </trans-unit>
        <trans-unit id="095114a79701908ee2dfdcd7beb556b92bb7fa82" translate="yes" xml:space="preserve">
          <source>Formats the stacktrace.</source>
          <target state="translated">Форматирует стековую трассу.</target>
        </trans-unit>
        <trans-unit id="bc17a3e28e6db9da82c06d3e64dd8f9133ab1362" translate="yes" xml:space="preserve">
          <source>Formats time as chardata.</source>
          <target state="translated">Форматирует время как чардата.</target>
        </trans-unit>
        <trans-unit id="5fe0bd39dac4ab949c5775de27530dde1ae6b8b7" translate="yes" xml:space="preserve">
          <source>Formats time taken running the test suite.</source>
          <target state="translated">Форматы времени,затрачиваемого на запуск тестового набора.</target>
        </trans-unit>
        <trans-unit id="15bac6318ac5108c02b6ce4ab557e2ea1f9cdf7e" translate="yes" xml:space="preserve">
          <source>Formatted text output</source>
          <target state="translated">Форматированный текстовый вывод</target>
        </trans-unit>
        <trans-unit id="c66bee8a4119b5327ef887f4d0279de0d7aa74f7" translate="yes" xml:space="preserve">
          <source>Formatters are &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;s specified during ExUnit configuration that receive a series of events as casts.</source>
          <target state="translated">Форматирующие устройства - это &lt;a href=&quot;https://hexdocs.pm/elixir/GenServer.html&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; указанные во время настройки ExUnit, которые получают серию событий в виде приведений.</target>
        </trans-unit>
        <trans-unit id="c4eab01558e7f8dfc62c9bd7e738281bda6c0c43" translate="yes" xml:space="preserve">
          <source>Formatting options</source>
          <target state="translated">Опции форматирования</target>
        </trans-unit>
        <trans-unit id="d313dfa968201dd94ad67d87fc3344bb38c0890c" translate="yes" xml:space="preserve">
          <source>Formatting syntax</source>
          <target state="translated">Синтаксис форматирования</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="8b2cd2532672c31ff20ceae8b0d526cd937086f0" translate="yes" xml:space="preserve">
          <source>Forwards the error to the current process.</source>
          <target state="translated">Передает ошибку в текущий процесс.</target>
        </trans-unit>
        <trans-unit id="9fdf06a3445d03e7647fe9c67a18a17eb8735986" translate="yes" xml:space="preserve">
          <source>Forwards the message to the current process.</source>
          <target state="translated">Переадресация сообщения на текущий процесс.</target>
        </trans-unit>
        <trans-unit id="39a119adde6f197e8aa3e8c2dbd49285e486f01b" translate="yes" xml:space="preserve">
          <source>Fractional second precision stays the same in a similar way to &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#add/2&quot;&gt;&lt;code&gt;NaiveDateTime.add/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Точность до &lt;a href=&quot;https://hexdocs.pm/elixir/NaiveDateTime.html#add/2&quot;&gt; &lt;code&gt;NaiveDateTime.add/2&lt;/code&gt; &lt;/a&gt; секунды остается такой же, как и для NaiveDateTime.add / 2 .</target>
        </trans-unit>
        <trans-unit id="addaa186164be6af6cfe3af8285a06cb4198e95d" translate="yes" xml:space="preserve">
          <source>Fractional second precision stays the same in a similar way to &lt;a href=&quot;naivedatetime#add/2&quot;&gt;&lt;code&gt;NaiveDateTime.add/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Точность до &lt;a href=&quot;naivedatetime#add/2&quot;&gt; &lt;code&gt;NaiveDateTime.add/2&lt;/code&gt; &lt;/a&gt; секунды остается такой же, как и для NaiveDateTime.add / 2 .</target>
        </trans-unit>
        <trans-unit id="4802179f7c5db9ab1d4360e530bc8c507bf436cc" translate="yes" xml:space="preserve">
          <source>Framed.</source>
          <target state="translated">Framed.</target>
        </trans-unit>
        <trans-unit id="61df51b01c40ba0a9247aa6363331261830b3b95" translate="yes" xml:space="preserve">
          <source>From Elixir v1.10, Elixir's Logger is fully integrated with Erlang's logger. They share the same &lt;a href=&quot;#level/0&quot;&gt;&lt;code&gt;Logger.level/0&lt;/code&gt;&lt;/a&gt;, any metadata set with &lt;a href=&quot;#metadata/1&quot;&gt;&lt;code&gt;Logger.metadata/1&lt;/code&gt;&lt;/a&gt; applies to both, and so on.</source>
          <target state="translated">Начиная с версии Elixir v1.10, Elixir's Logger полностью интегрирован с регистратором Erlang. Они используют один и тот же &lt;a href=&quot;#level/0&quot;&gt; &lt;code&gt;Logger.level/0&lt;/code&gt; &lt;/a&gt; , любые метаданные, установленные с помощью &lt;a href=&quot;#metadata/1&quot;&gt; &lt;code&gt;Logger.metadata/1&lt;/code&gt; ,&lt;/a&gt; применяются к обоим и так далее.</target>
        </trans-unit>
        <trans-unit id="37cd4097eb3a24362095532952b9b30616bd33e9" translate="yes" xml:space="preserve">
          <source>From Elixir v1.2, it is possible to alias, import or require multiple modules at once. This is particularly useful once we start nesting modules, which is very common when building Elixir applications. For example, imagine you have an application where all modules are nested under &lt;code&gt;MyApp&lt;/code&gt;, you can alias the modules &lt;code&gt;MyApp.Foo&lt;/code&gt;, &lt;code&gt;MyApp.Bar&lt;/code&gt; and &lt;code&gt;MyApp.Baz&lt;/code&gt; at once as follows:</source>
          <target state="translated">Начиная с Elixir v1.2, можно создавать псевдонимы, импортировать или требовать сразу несколько модулей. Это особенно полезно, когда мы начинаем вложение модулей, что очень часто встречается при создании приложений на Эликсире. Например, представьте, что у вас есть приложение, в котором все модули вложены в &lt;code&gt;MyApp&lt;/code&gt; , вы можете &lt;code&gt;MyApp.Foo&lt;/code&gt; &lt;code&gt;MyApp.Bar&lt;/code&gt; модули MyApp.Foo , MyApp.Bar и &lt;code&gt;MyApp.Baz&lt;/code&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="5f129d8dac3eb2b485d35cfaa8fcb065c8677f2f" translate="yes" xml:space="preserve">
          <source>From Elixir v1.2, protocol consolidation happens automatically for all projects. We will build our own project in the &lt;strong&gt;&lt;em&gt;Mix and OTP guide&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="translated">Начиная с Elixir v1.2, объединение протоколов происходит автоматически для всех проектов. Мы создадим наш собственный проект в руководстве &lt;strong&gt;&lt;em&gt;Mix and OTP&lt;/em&gt;&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="a9cab3793941ece60ffc8a0b775c34f6a348677a" translate="yes" xml:space="preserve">
          <source>From Erlang/OTP 21, &lt;code&gt;:handle_sasl_reports&lt;/code&gt; only has an effect if &lt;code&gt;:handle_otp_reports&lt;/code&gt; is true.</source>
          <target state="translated">Начиная с Erlang / OTP 21 &lt;code&gt;:handle_sasl_reports&lt;/code&gt; имеет эффект, только если &lt;code&gt;:handle_otp_reports&lt;/code&gt; истинно.</target>
        </trans-unit>
        <trans-unit id="1b5ac9d2f1ffaa0f16939a6691b3606f6f5495e8" translate="yes" xml:space="preserve">
          <source>From inside &lt;code&gt;bar@computer-name&lt;/code&gt;, we can now spawn a task directly on the other node via the supervisor:</source>
          <target state="translated">Изнутри &lt;code&gt;bar@computer-name&lt;/code&gt; теперь мы можем создать задачу непосредственно на другом узле через супервизор:</target>
        </trans-unit>
        <trans-unit id="cee07fcd21c8e4081421ab00fc5d8c03d08b554f" translate="yes" xml:space="preserve">
          <source>From now on, ExUnit will not run any test that has the &lt;code&gt;:external&lt;/code&gt; option set to &lt;code&gt;true&lt;/code&gt;. This behaviour can be reversed with the &lt;code&gt;:include&lt;/code&gt; option which is usually passed through the command line:</source>
          <target state="translated">С этого момента ExUnit не будет запускать тесты, для которых для параметра &lt;code&gt;:external&lt;/code&gt; установлено значение &lt;code&gt;true&lt;/code&gt; . Это поведение можно изменить с помощью параметра &lt;code&gt;:include&lt;/code&gt; , который обычно передается через командную строку:</target>
        </trans-unit>
        <trans-unit id="3c26276a10f65beef569c18570dfcc2f42f56636" translate="yes" xml:space="preserve">
          <source>From now on, we will be using the term &quot;event handler&quot; to refer to your custom backend, as we head into implementation details.</source>
          <target state="translated">Отныне мы будем использовать термин &quot;обработчик событий&quot; для обозначения вашего пользовательского бэкэнда,по мере того,как мы погружаемся в детали реализации.</target>
        </trans-unit>
        <trans-unit id="938617f06857d43f6a085cfd6bce09c1655cac4a" translate="yes" xml:space="preserve">
          <source>From our quick exploration, we could conclude that we should use &lt;code&gt;Node.spawn_link/2&lt;/code&gt; to spawn processes on a remote node every time we need to do a distributed computation. However, we have learned throughout this guide that spawning processes outside of supervision trees should be avoided if possible, so we need to look for other options.</source>
          <target state="translated">Из нашего быстрого исследования мы могли сделать вывод, что мы должны использовать &lt;code&gt;Node.spawn_link/2&lt;/code&gt; для создания процессов на удаленном узле каждый раз, когда нам нужно выполнять распределенные вычисления. Однако из этого руководства мы узнали, что по возможности следует избегать процессов порождения вне деревьев наблюдения, поэтому нам нужно искать другие варианты.</target>
        </trans-unit>
        <trans-unit id="4db16168eb1bd7c62518bc09890c1b7ba6baa6ce" translate="yes" xml:space="preserve">
          <source>From the printed information, we can see far fewer files are generated. The generated &lt;code&gt;mix.exs&lt;/code&gt; file is different too. Let&amp;rsquo;s take a look (comments have been removed):</source>
          <target state="translated">Из напечатанной информации мы видим, что создается гораздо меньше файлов. Сгенерированный файл &lt;code&gt;mix.exs&lt;/code&gt; тоже отличается. Посмотрим (комментарии удалены):</target>
        </trans-unit>
        <trans-unit id="d86c7074fa10260d3d9ae0cadb6b7bff099b2b69" translate="yes" xml:space="preserve">
          <source>Full month name</source>
          <target state="translated">Наименование месяца</target>
        </trans-unit>
        <trans-unit id="2298064d1fda3e808dc04798e3aef0bd717a3cbf" translate="yes" xml:space="preserve">
          <source>Full name of day</source>
          <target state="translated">Полное название дня</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="8e40024a6b83dbe7056d1e4a40db12942b440d4e" translate="yes" xml:space="preserve">
          <source>Function Arguments</source>
          <target state="translated">Функциональные аргументы</target>
        </trans-unit>
        <trans-unit id="bc1254dc5150511a2a061bfd2a8e778f130ed9a6" translate="yes" xml:space="preserve">
          <source>Function and variable names</source>
          <target state="translated">Имена функций и переменных</target>
        </trans-unit>
        <trans-unit id="83ade9ad4e94b4c5006286b88e8447b8a91c444a" translate="yes" xml:space="preserve">
          <source>Function and variable names have the following syntax: A &lt;em&gt;lowercase ASCII letter&lt;/em&gt; or an &lt;em&gt;underscore&lt;/em&gt;, followed by any number of &lt;em&gt;lowercase or uppercase ASCII letters&lt;/em&gt;, &lt;em&gt;numbers&lt;/em&gt;, or &lt;em&gt;underscores&lt;/em&gt;. Optionally they can end in either an &lt;em&gt;exclamation mark&lt;/em&gt; or a &lt;em&gt;question mark&lt;/em&gt;.</source>
          <target state="translated">Имена функций и переменных имеют следующий синтаксис: &lt;em&gt;строчная буква ASCII&lt;/em&gt; или &lt;em&gt;символ подчеркивания&lt;/em&gt; , за которой следует любое количество &lt;em&gt;строчных или прописных букв ASCII&lt;/em&gt; , &lt;em&gt;чисел&lt;/em&gt; или &lt;em&gt;знаков подчеркивания&lt;/em&gt; . По желанию они могут заканчиваться &lt;em&gt;восклицательным&lt;/em&gt; или &lt;em&gt;вопросительным знаком&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="317d75f3496ca96594673f20ba1da34b938abdcd" translate="yes" xml:space="preserve">
          <source>Function bodies support &lt;code&gt;rescue&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; as &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; does (known as &quot;implicit try&quot;). For example, the following two functions are equivalent:</source>
          <target state="translated">Тела функций поддерживают &lt;code&gt;rescue&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; , &lt;code&gt;after&lt;/code&gt; и &lt;code&gt;else&lt;/code&gt; , как &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt; (известное как &amp;laquo;неявная попытка&amp;raquo;). Например, следующие две функции эквивалентны:</target>
        </trans-unit>
        <trans-unit id="23cced316c3006e2ae03dfcedc7e3c98513a344d" translate="yes" xml:space="preserve">
          <source>Function bodies support &lt;code&gt;rescue&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; as &lt;a href=&quot;kernel.specialforms#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; does. For example, the following two functions are equivalent:</source>
          <target state="translated">Функциональные органы поддерживают &lt;code&gt;rescue&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; , &lt;code&gt;after&lt;/code&gt; того, как , и &lt;code&gt;else&lt;/code&gt; , как &lt;a href=&quot;kernel.specialforms#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt; делает. Например, следующие две функции эквивалентны:</target>
        </trans-unit>
        <trans-unit id="a06abcd236c2b1c30e0ad208ebb8f15fa6b429ec" translate="yes" xml:space="preserve">
          <source>Function capturing</source>
          <target state="translated">Функция захвата</target>
        </trans-unit>
        <trans-unit id="f1329761aa64d73b0a0135229f12fe0d0ace1793" translate="yes" xml:space="preserve">
          <source>Function declarations also support guards and multiple clauses. If a function has several clauses, Elixir will try each clause until it finds one that matches. Here is an implementation of a function that checks if the given number is zero or not:</source>
          <target state="translated">Объявления о функциях также поддерживают охранников и многочисленные клаузулы.Если функция имеет несколько клаузул,Elixir будет пробовать каждый клаузул,пока не найдет подходящий.Вот реализация функции,которая проверяет,является ли заданное число нулевым или нет:</target>
        </trans-unit>
        <trans-unit id="2a8ac45592076c6753dc5eab45709c494a73fe32" translate="yes" xml:space="preserve">
          <source>Function names may also start with an underscore. Such functions are never imported by default:</source>
          <target state="translated">Имена функций могут также начинаться со знака подчеркивания.По умолчанию такие функции никогда не импортируются:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
