<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="phpunit">
    <body>
      <group id="phpunit">
        <trans-unit id="9faae7d97dd101c5c4854c8b4b608d689915ad64" translate="yes" xml:space="preserve">
          <source>&quot;Behind the scenes&quot;, PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;code&gt;createMock()&lt;/code&gt; method is used.</source>
          <target state="translated">&amp;laquo;За кулисами&amp;raquo; PHPUnit автоматически генерирует новый класс PHP, который реализует желаемое поведение при использовании &lt;code&gt;createMock()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ff50c2d9bad6a19669320fe722ccd4651d7db08" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2005&amp;ndash;2017 Sebastian Bergmann</source>
          <target state="translated">&amp;copy; 2005&amp;ndash;2017 Себастьян Бергманн</target>
        </trans-unit>
        <trans-unit id="7b4a2846afffc9e2af3f9f49a50af2a5b747529b" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2005&amp;ndash;2020 Sebastian Bergmann</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883d394cf5552b923ae438c816023f23617d64f1" translate="yes" xml:space="preserve">
          <source>&amp;hellip; TBD &amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5be81007cd25f9ae62329ce035a6fa6daf56aee" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Behind the scenes&amp;rdquo;, PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;code&gt;createStub()&lt;/code&gt; method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddc938477d0949800e53719fa87ca04c26764df" translate="yes" xml:space="preserve">
          <source>--Adrian Kuhn et. al.</source>
          <target state="translated">- Адриан Кун и др. al.</target>
        </trans-unit>
        <trans-unit id="c05df6c3d27484ddb78ca31cf80cac112e86fc79" translate="yes" xml:space="preserve">
          <source>--Benjamin Smedberg</source>
          <target state="translated">- Бенджамин Смедберг</target>
        </trans-unit>
        <trans-unit id="606dd837ef05345781226967e14e5d978286cb6f" translate="yes" xml:space="preserve">
          <source>--Erich Gamma</source>
          <target state="translated">- Эрих Гамма</target>
        </trans-unit>
        <trans-unit id="d36c6f933e5fabc86e0071e09f13e781dd9f48c4" translate="yes" xml:space="preserve">
          <source>--Gerard Meszaros</source>
          <target state="translated">- Жерар Месарош</target>
        </trans-unit>
        <trans-unit id="7e83b9998dcf9952734c55bf24eb54ccb6d1c6ad" translate="yes" xml:space="preserve">
          <source>--Martin Fowler</source>
          <target state="translated">- Мартин Фаулер</target>
        </trans-unit>
        <trans-unit id="75ce643118d3002dd6d89b954f38210766bbf796" translate="yes" xml:space="preserve">
          <source>--Wikipedia</source>
          <target state="translated">--Wikipedia</target>
        </trans-unit>
        <trans-unit id="9795c52a2fbf529d1c81e157968515d93687b947" translate="yes" xml:space="preserve">
          <source>--bootstrap</source>
          <target state="translated">--bootstrap</target>
        </trans-unit>
        <trans-unit id="be47431f312b6f6d62822dfb8821a043abd67158" translate="yes" xml:space="preserve">
          <source>--colors</source>
          <target state="translated">--colors</target>
        </trans-unit>
        <trans-unit id="5ff4b83cc328130aae35496b4ef5c28dd22f5f3c" translate="yes" xml:space="preserve">
          <source>--columns</source>
          <target state="translated">--columns</target>
        </trans-unit>
        <trans-unit id="6005ec244d89010db1549a3990b5b0f04eae838d" translate="yes" xml:space="preserve">
          <source>--configuration, -c</source>
          <target state="translated">--конфигурация, -c</target>
        </trans-unit>
        <trans-unit id="9e8124239e5a73938f915f618ba43b15d38d52e9" translate="yes" xml:space="preserve">
          <source>--coverage-clover</source>
          <target state="translated">--coverage-clover</target>
        </trans-unit>
        <trans-unit id="8bef1dbaa2586a3e3a1522d0dc291e8a396675db" translate="yes" xml:space="preserve">
          <source>--coverage-crap4j</source>
          <target state="translated">--coverage-crap4j</target>
        </trans-unit>
        <trans-unit id="924f757454550180e8c4fe6357fd4f9d97c13799" translate="yes" xml:space="preserve">
          <source>--coverage-html</source>
          <target state="translated">--coverage-html</target>
        </trans-unit>
        <trans-unit id="e70b7a859338d6330b0353d14622d5fe99d544b5" translate="yes" xml:space="preserve">
          <source>--coverage-php</source>
          <target state="translated">--coverage-php</target>
        </trans-unit>
        <trans-unit id="a47f4e9f9f1eb6ce04756c06c47410a80d4516b8" translate="yes" xml:space="preserve">
          <source>--coverage-text</source>
          <target state="translated">--coverage-text</target>
        </trans-unit>
        <trans-unit id="1dd0c962581e2b33496ec055436f8c0f509503a3" translate="yes" xml:space="preserve">
          <source>--debug</source>
          <target state="translated">--debug</target>
        </trans-unit>
        <trans-unit id="7a8e9ccc5cf17a6f91213c98b1bacb6600fbbd84" translate="yes" xml:space="preserve">
          <source>--disallow-test-output</source>
          <target state="translated">--disallow-test-output</target>
        </trans-unit>
        <trans-unit id="58b7a977f2bad3cd51906fd465295b96f6c161a8" translate="yes" xml:space="preserve">
          <source>--disallow-todo-tests</source>
          <target state="translated">--disallow-todo-tests</target>
        </trans-unit>
        <trans-unit id="fec7fae7b7753774415a18f7177ce7cc24928404" translate="yes" xml:space="preserve">
          <source>--enforce-time-limit</source>
          <target state="translated">--enforce-time-limit</target>
        </trans-unit>
        <trans-unit id="0565090c915f8071f7370df31ed6785b83124474" translate="yes" xml:space="preserve">
          <source>--exclude-group</source>
          <target state="translated">--exclude-group</target>
        </trans-unit>
        <trans-unit id="aada6fc7f15481dfefa29579baed612d0ebc6236" translate="yes" xml:space="preserve">
          <source>--filter</source>
          <target state="translated">--filter</target>
        </trans-unit>
        <trans-unit id="6f8e603ca69dbd92335a018a1d44f2b8393b8826" translate="yes" xml:space="preserve">
          <source>--group</source>
          <target state="translated">--group</target>
        </trans-unit>
        <trans-unit id="8db2d08e8ca64eb291c8c566c42da1a5bac7d84a" translate="yes" xml:space="preserve">
          <source>--include-path</source>
          <target state="translated">--include-path</target>
        </trans-unit>
        <trans-unit id="a8365d50cba7bdbab8fffc2a81ed208b7ad2b3d2" translate="yes" xml:space="preserve">
          <source>--list-groups</source>
          <target state="translated">--list-groups</target>
        </trans-unit>
        <trans-unit id="384e088dc75c5f9823bc7b36fe7c58129c3a3afa" translate="yes" xml:space="preserve">
          <source>--loader</source>
          <target state="translated">--loader</target>
        </trans-unit>
        <trans-unit id="eecad2ef381d03482545302946ef52c7c5d2be7a" translate="yes" xml:space="preserve">
          <source>--log-junit</source>
          <target state="translated">--log-junit</target>
        </trans-unit>
        <trans-unit id="5b120092ab1c8d006fff6b4280e071de987b6577" translate="yes" xml:space="preserve">
          <source>--no-configuration</source>
          <target state="translated">--no-configuration</target>
        </trans-unit>
        <trans-unit id="0217a5ed451a9d2ca8c68d01abb67407067b59f4" translate="yes" xml:space="preserve">
          <source>--no-globals-backup</source>
          <target state="translated">--no-globals-backup</target>
        </trans-unit>
        <trans-unit id="323fdcc86c16474d8f2b214619d9f785bc0addd2" translate="yes" xml:space="preserve">
          <source>--printer</source>
          <target state="translated">--printer</target>
        </trans-unit>
        <trans-unit id="fbe3a902b6c2657e7d30f346db846f9aa7f1731b" translate="yes" xml:space="preserve">
          <source>--process-isolation</source>
          <target state="translated">--process-isolation</target>
        </trans-unit>
        <trans-unit id="5013682fd37fc483a899069ddc6fb8362b53f441" translate="yes" xml:space="preserve">
          <source>--repeat</source>
          <target state="translated">--repeat</target>
        </trans-unit>
        <trans-unit id="a2d008c2bd5ffb543ea5b206d28d261e7c33061d" translate="yes" xml:space="preserve">
          <source>--report-useless-tests</source>
          <target state="translated">--report-useless-tests</target>
        </trans-unit>
        <trans-unit id="4c459633968f11521fb11493001615cfefcfd4a5" translate="yes" xml:space="preserve">
          <source>--static-backup</source>
          <target state="translated">--static-backup</target>
        </trans-unit>
        <trans-unit id="920071048f6e061bb0f343e803978da9feecc6f6" translate="yes" xml:space="preserve">
          <source>--stderr</source>
          <target state="translated">--stderr</target>
        </trans-unit>
        <trans-unit id="66d6b3c83fbf51d9a09a16e53cf6f37a619db66d" translate="yes" xml:space="preserve">
          <source>--stop-on-error</source>
          <target state="translated">--stop-on-error</target>
        </trans-unit>
        <trans-unit id="121c88513f2cc6e6d79575274450724ba4e96548" translate="yes" xml:space="preserve">
          <source>--stop-on-failure</source>
          <target state="translated">--stop-on-failure</target>
        </trans-unit>
        <trans-unit id="adf6d769537915389dd2428edff2c7f3bec1b8e3" translate="yes" xml:space="preserve">
          <source>--stop-on-incomplete</source>
          <target state="translated">--stop-on-incomplete</target>
        </trans-unit>
        <trans-unit id="5b7dcff292b08d3abf3bf96a19b04328df360c19" translate="yes" xml:space="preserve">
          <source>--stop-on-risky</source>
          <target state="translated">--stop-on-risky</target>
        </trans-unit>
        <trans-unit id="6eef24d8097a4c9b83a254b32210753e462430dd" translate="yes" xml:space="preserve">
          <source>--stop-on-skipped</source>
          <target state="translated">--stop-on-skipped</target>
        </trans-unit>
        <trans-unit id="4ac0250da2c3bdd27876bd8e80d6116f95cd208e" translate="yes" xml:space="preserve">
          <source>--strict-coverage</source>
          <target state="translated">--strict-coverage</target>
        </trans-unit>
        <trans-unit id="b1a80170653d260fc91fa199d3e2670d9fb9c864" translate="yes" xml:space="preserve">
          <source>--strict-global-state</source>
          <target state="translated">--strict-global-state</target>
        </trans-unit>
        <trans-unit id="5ee130a9f09395a4d77e950fb41695e59d31d11f" translate="yes" xml:space="preserve">
          <source>--test-suffix</source>
          <target state="translated">--test-suffix</target>
        </trans-unit>
        <trans-unit id="ffbdc1eccb9915a8437ee7cfcfcf450b1455389f" translate="yes" xml:space="preserve">
          <source>--testdox</source>
          <target state="translated">--testdox</target>
        </trans-unit>
        <trans-unit id="3d458d01117c3aba6a53b4067e812f2f588e3c61" translate="yes" xml:space="preserve">
          <source>--testdox-html and --testdox-text</source>
          <target state="translated">--testdox-html и --testdox-text</target>
        </trans-unit>
        <trans-unit id="bef553f4df8c136a10975bb7362c5b76e520bfcc" translate="yes" xml:space="preserve">
          <source>--testsuite</source>
          <target state="translated">--testsuite</target>
        </trans-unit>
        <trans-unit id="f2860556708260c3603c4f244db1aa03e85301b6" translate="yes" xml:space="preserve">
          <source>--verbose</source>
          <target state="translated">--verbose</target>
        </trans-unit>
        <trans-unit id="d5537351313df4188977a7d2a773daedb94d0b26" translate="yes" xml:space="preserve">
          <source>-d</source>
          <target state="translated">-d</target>
        </trans-unit>
        <trans-unit id="58558703177c4b63101d579b915d993032b51522" translate="yes" xml:space="preserve">
          <source>/path/to/my/test.phpt</source>
          <target state="translated">/path/to/my/test.phpt</target>
        </trans-unit>
        <trans-unit id="259873ae3ab1ee1e4856e7359643deaf94e2d23a" translate="yes" xml:space="preserve">
          <source>1. Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffce6937e131ab5346767169dd1cf44aa53c4e30" translate="yes" xml:space="preserve">
          <source>1. Clean-Up Database</source>
          <target state="translated">1.База данных очистки</target>
        </trans-unit>
        <trans-unit id="6d7a499a91b06f3cae2dd724e47148b77ccf4de6" translate="yes" xml:space="preserve">
          <source>1. Installing PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd565a8dcef074b6c92871ceb8118d58a79626f" translate="yes" xml:space="preserve">
          <source>10. Extending PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724e49e3cb4debbdc221e03a3249ee42a825332a" translate="yes" xml:space="preserve">
          <source>2. Annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba0bee3b45c15523f0f6483f69b2998f367f2a5" translate="yes" xml:space="preserve">
          <source>2. Set up fixture</source>
          <target state="translated">2.Установить крепление</target>
        </trans-unit>
        <trans-unit id="1b9deb5bd46ff8feec21226b09b67ed95e7c8d4b" translate="yes" xml:space="preserve">
          <source>2. Writing Tests for PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aad82d0481f6e0ec683b2def96e4f8730efac53" translate="yes" xml:space="preserve">
          <source>3&amp;ndash;5. Run Test, Verify outcome and Teardown</source>
          <target state="translated">3&amp;ndash;5. Запустить тест, проверить результат и разобрать</target>
        </trans-unit>
        <trans-unit id="9a646361c96ecb040615047af737eb343a62ba97" translate="yes" xml:space="preserve">
          <source>3. The Command-Line Test Runner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9eaaa976dffb46593d2ae33032b2f8e68e7cc54" translate="yes" xml:space="preserve">
          <source>3. The XML Configuration File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74d077c66f7b078ea1f7fff84b28dcaf42eb9fa" translate="yes" xml:space="preserve">
          <source>4. Bibliography</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e27ce8d4da29963b02425f33f2fb64b5f6753b" translate="yes" xml:space="preserve">
          <source>4. Fixtures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186c1361e3a40e6f5639e5bed9acf1b24602d422" translate="yes" xml:space="preserve">
          <source>5. Copyright</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd534ef855b7777cb51222230d496cd414a1995b" translate="yes" xml:space="preserve">
          <source>5. Organizing Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e9c32cee7c1418b784445c8618d2a5c4544c89" translate="yes" xml:space="preserve">
          <source>6. Risky Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183cc186495d0338c837f114c1282166b5ff3996" translate="yes" xml:space="preserve">
          <source>7. Incomplete and Skipped Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc67949e9fc9945ac84d4a85c086f136f5f09dbd" translate="yes" xml:space="preserve">
          <source>8. Test Doubles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94addc3384b009b53f3a29eb51abcc07cf6f80e" translate="yes" xml:space="preserve">
          <source>9. Code Coverage Analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a79f5ef26d25de561c06b0388ef18c588871c69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#appendixes-annotations-covers-tables-annotations&quot;&gt;Table 2.2&lt;/a&gt; shows the syntax of the &lt;code&gt;@covers&lt;/code&gt; annotation. The section &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-specifying-covered-parts&quot;&gt;Specifying Covered Code Parts&lt;/a&gt; provides longer examples for using the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67e0d547d7392565ac22a0ca83e6a5ad5747796" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#appendixes-assertions-assertthat-tables-constraints&quot;&gt;Table 1.1&lt;/a&gt; shows the available &lt;code&gt;PHPUnit\Framework\Constraint&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828993db0fdf047da72c573795d4876ab1dfe361" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-istrue-php&quot;&gt;Example 10.2&lt;/a&gt; shows how &lt;code&gt;PHPUnit\Framework\Constraint\IsTrue&lt;/code&gt; extends the abstract base class for matcher objects (or constraints), &lt;code&gt;PHPUnit\Framework\Constraint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49004f394176f5a796405d84322c62ed514152" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-testrunnerconfigurableextension&quot;&gt;Example 10.4&lt;/a&gt; shows an example how to make an extension configurable, by adding an &lt;code&gt;__constructor()&lt;/code&gt; definition to the extension class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2f7275460595bd253613dafbafc5b4db49aba6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-testrunnerextension&quot;&gt;Example 10.3&lt;/a&gt; shows an example for an extension implementing &lt;code&gt;BeforeFirstTestHook&lt;/code&gt; and &lt;code&gt;AfterLastTestHook&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40c86a27f117a57b848217807866612b4b90c6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#fixtures-sharing-fixture-examples-databasetest-php&quot;&gt;Example 4.3&lt;/a&gt; uses the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods to connect to the database before the test case class&amp;rsquo; first test and to disconnect from the database after the last test of the test case, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be504f97297382c1bb64f1e6a217f1dcb0bc5ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-incomplete-tests-examples-sampletest-php&quot;&gt;Example 7.1&lt;/a&gt; shows a test case class, &lt;code&gt;SampleTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testSomething()&lt;/code&gt;. By calling the convenience method &lt;code&gt;markTestIncomplete()&lt;/code&gt; (which automatically raises an &lt;code&gt;PHPUnit\Framework\IncompleteTestError&lt;/code&gt; exception) in the test method, we mark the test as being incomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d034164990ad20ade0be7b2ec39e7087c8e340" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-incomplete-tests-tables-api&quot;&gt;Table 7.1&lt;/a&gt; shows the API for marking tests as incomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6ddd8e37361f3e93f828da4c7b255db1b01645" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-skipped-tests-tables-api&quot;&gt;Table 7.2&lt;/a&gt; shows the API for skipping tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacd3f441046d7d4ec1a0629c52e202cfe2d4762" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-skipping-tests-examples-databasetest-php&quot;&gt;Example 7.2&lt;/a&gt; shows a test case class, &lt;code&gt;DatabaseTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testConnection()&lt;/code&gt;. In the test case class&amp;rsquo; &lt;code&gt;setUp()&lt;/code&gt; template method we check whether the MySQLi extension is available and use the &lt;code&gt;markTestSkipped()&lt;/code&gt; method to skip the test if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa1de058ff4f178a20d7beb29a15c413a1b0095" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-mock-objects-examples-subjecttest-php&quot;&gt;Example 8.12&lt;/a&gt; shows how to use a mock object to test the interaction between &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa9a3449dc4338872ad10ba22962196ab726361" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubbing-and-mocking-web-services-examples-googletest-php&quot;&gt;Example 8.20&lt;/a&gt; shows how &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used to stub, for example, the web service described in &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f43698b1218c4c5d69e6b4cfafef1d520be42c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubs-examples-stubtest-php&quot;&gt;Example 8.2&lt;/a&gt; shows how to stub method calls and set up return values. We first use the &lt;code&gt;createStub()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a stub object that looks like an object of &lt;code&gt;SomeClass&lt;/code&gt; (&lt;a href=&quot;#test-doubles-stubs-examples-someclass-php&quot;&gt;Example 8.1&lt;/a&gt;). We then use the &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface&lt;/a&gt; that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and &amp;ldquo;fluent&amp;rdquo; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583d03835d675c3fe696e9e8efae3543cc10dc49" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubs-examples-stubtest2-php&quot;&gt;Example 8.4&lt;/a&gt; shows an example of how to use the Mock Builder&amp;rsquo;s fluent interface to configure the creation of the test double. The configuration of this test double uses the same best practice defaults used by &lt;code&gt;createStub()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7b5fb0ab4d60dd2e247093c36dfff484eec505" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-examples-stacktest-php&quot;&gt;Example 2.1&lt;/a&gt; shows how we can write tests using PHPUnit that exercise PHP&amp;rsquo;s array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06eb70f0282d22016f2d9f201a56987e564a33f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-examples-stacktest2-php&quot;&gt;Example 2.2&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d2850de915e06ba48e0cb8f1b76f5c3215c9b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-exceptions-examples-exceptiontest-php&quot;&gt;Example 2.11&lt;/a&gt; shows how to use the &lt;code&gt;expectException()&lt;/code&gt; method to test whether an exception is thrown by the code under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e34fa5996f9d4f13b84f23b5f77e359a36e9a2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-output-examples-outputtest-php&quot;&gt;Example 2.14&lt;/a&gt; shows how to use the &lt;code&gt;expectOutputString()&lt;/code&gt; method to set the expected output. If this expected output is not generated, the test will be counted as a failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cefa3e906221c35de0f59ffa6d96fe374f2325c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-output-tables-api&quot;&gt;Table 2.1&lt;/a&gt; shows the methods provided for testing output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400bead44abe445625fb9e120cc82ddba25b1794" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;Table B.1&lt;/a&gt; shows the syntax of the &lt;code&gt;@covers&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;В таблице B.1&lt;/a&gt; показан синтаксис аннотации &lt;code&gt;@covers&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="96b99aea2b8f4159d96dccf7c334a91fe38bb117" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; shows the available &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; classes.</source>
          <target state="translated">&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;В таблице A.1&lt;/a&gt; показаны доступные классы &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9949a159fde58347b713cb0c24400bde07d9b99e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; shows the constraints that can be applied to method arguments and &lt;a href=&quot;test-doubles#test-doubles.mock-objects.tables.matchers&quot;&gt;Table 9.1&lt;/a&gt; shows the matchers that are available to specify the number of invocations.</source>
          <target state="translated">&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;В таблице A.1&lt;/a&gt; показаны ограничения, которые могут применяться к аргументам метода, а в &lt;a href=&quot;test-doubles#test-doubles.mock-objects.tables.matchers&quot;&gt;таблице 9.1&lt;/a&gt; показаны сопоставления, доступные для определения количества вызовов.</target>
        </trans-unit>
        <trans-unit id="01382814f3f35f633c50f93774f66908827742e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;assertions#appendixes-assertions-assertthat-tables-constraints&quot;&gt;Constraints&lt;/a&gt; shows the constraints that can be applied to method arguments and &lt;a href=&quot;#test-doubles-mock-objects-tables-matchers&quot;&gt;Table 8.1&lt;/a&gt; shows the matchers that are available to specify the number of invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5f615e429410d6139d0ac49579a7958b1432ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php&quot;&gt;Example 9.2&lt;/a&gt; shows another example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba52a5e798bbf3762fa09b4a6224533185f103e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.BaseTestListener.php&quot;&gt;Example 14.4&lt;/a&gt; shows how to subclass the &lt;code&gt;PHPUnit_Framework_BaseTestListener&lt;/code&gt; abstract class, which lets you specify only the interface methods that are interesting for your use case, while providing empty implementations for all the others.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.BaseTestListener.php&quot;&gt;В примере 14.4&lt;/a&gt; показано, как &lt;code&gt;PHPUnit_Framework_BaseTestListener&lt;/code&gt; подкласс абстрактного класса PHPUnit_Framework_BaseTestListener , который позволяет вам указывать только те методы интерфейса, которые интересны для вашего варианта использования, обеспечивая при этом пустые реализации для всех остальных.</target>
        </trans-unit>
        <trans-unit id="0df2507ee06827206bc891bcb7276bce87da0aa6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.DataDrivenTest.php&quot;&gt;Example 14.6&lt;/a&gt; shows a data-driven test case class that compares values from a file with Comma-Separated Values (CSV). Each line of such a file looks like &lt;code&gt;foo;bar&lt;/code&gt;, where the first value is the one we expect and the second value is the actual one.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.DataDrivenTest.php&quot;&gt;В примере 14.6&lt;/a&gt; показан управляемый данными класс тестового случая, который сравнивает значения из файла со значениями, разделенными запятыми (CSV). Каждая строка такого файла выглядит как &lt;code&gt;foo;bar&lt;/code&gt; , где первое значение - это то, что мы ожидаем, а второе значение - фактическое.</target>
        </trans-unit>
        <trans-unit id="1a3ad1f9bee117a90baf475798b6c4c3e2bc8629" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.IsTrue.php&quot;&gt;Example 14.2&lt;/a&gt; shows how &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; extends the abstract base class for matcher objects (or constraints), &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.IsTrue.php&quot;&gt;В примере 14.2&lt;/a&gt; показано, как &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; расширяет абстрактный базовый класс для объектов сопоставления (или ограничений) &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f9f7e9327c5ce728de8a6a032b634bd961a9686" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.RepeatedTest.php&quot;&gt;Example 14.5&lt;/a&gt; shows a cut-down version of the &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt; test decorator that illustrates how to write your own test decorators.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.RepeatedTest.php&quot;&gt;В примере 14.5&lt;/a&gt; показана урезанная версия декоратора тестов &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt; , демонстрирующая, как писать собственные декораторы тестов.</target>
        </trans-unit>
        <trans-unit id="701445c885626a9ec7f22372c6954721fa1e2093" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.SimpleTestListener.php&quot;&gt;Example 14.3&lt;/a&gt; shows a simple implementation of the &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.SimpleTestListener.php&quot;&gt;В примере 14.3&lt;/a&gt; показана простая реализация интерфейса &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1eef8f9d75c4c39951ce80221bfb0c1dcccbca89" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;fixtures#fixtures.sharing-fixture.examples.DatabaseTest.php&quot;&gt;Example 4.3&lt;/a&gt; uses the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods to connect to the database before the test case class' first test and to disconnect from the database after the last test of the test case, respectively.</source>
          <target state="translated">&lt;a href=&quot;fixtures#fixtures.sharing-fixture.examples.DatabaseTest.php&quot;&gt;В примере 4.3&lt;/a&gt; используются методы шаблона &lt;code&gt;setUpBeforeClass()&lt;/code&gt; и &lt;code&gt;tearDownAfterClass()&lt;/code&gt; для подключения к базе данных перед первым тестом класса тестового примера и для отключения от базы данных после последнего теста тестового примера, соответственно.</target>
        </trans-unit>
        <trans-unit id="ce8b529086276a39b8df23d392e07715ac6642a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;It is hard to test code that uses singletons.&lt;/a&gt; The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test&amp;rsquo;s change to a global variable might break another test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86336897eaca88febd7550b5fabd5bc39dfd8811" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;It is hard to test code that uses singletons.&lt;/a&gt; The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test's change to a global variable might break another test.</source>
          <target state="translated">&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;Код, использующий синглтоны, сложно протестировать. &lt;/a&gt;То же верно и для кода, использующего глобальные переменные. Как правило, код, который вы хотите протестировать, сильно связан с глобальной переменной, и вы не можете контролировать его создание. Дополнительная проблема заключается в том, что изменение глобальной переменной одним тестом может нарушить работу другого теста.</target>
        </trans-unit>
        <trans-unit id="9bb623e1edf9e0b385958e60c2f4efef5c9b37a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; or &lt;a href=&quot;http://www.ezcomponents.org&quot;&gt;eZ Components&lt;/a&gt; have powerful tools that allow you to create the database schema from pre-defined datastructures. However, these have to be hooked into the PHPUnit extension to allow an automatic database re-creation before the complete test-suite is run.</source>
          <target state="translated">&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ezcomponents.org&quot;&gt;Компоненты &lt;/a&gt;Doctrine 2 или eZ имеют мощные инструменты, позволяющие создавать схему базы данных из заранее определенных структур данных. Однако они должны быть подключены к расширению PHPUnit, чтобы обеспечить автоматическое воссоздание базы данных перед запуском полного набора тестов.</target>
        </trans-unit>
        <trans-unit id="2132bb8453bef97cac038b235074aef42ad6b6c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mikey179/vfsStream&quot;&gt;vfsStream&lt;/a&gt; is a &lt;a href=&quot;http://www.php.net/streams&quot;&gt;stream wrapper&lt;/a&gt; for a &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_file_system&quot;&gt;virtual filesystem&lt;/a&gt; that may be helpful in unit tests to mock the real filesystem.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mikey179/vfsStream&quot;&gt;vfsStream&lt;/a&gt; - это &lt;a href=&quot;http://www.php.net/streams&quot;&gt;оболочка потока&lt;/a&gt; для &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_file_system&quot;&gt;виртуальной файловой системы,&lt;/a&gt; которая может быть полезна в модульных тестах для имитации реальной файловой системы.</target>
        </trans-unit>
        <trans-unit id="63fbd44146f7be0cdd87a45688f44659aa82d4d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/phpspec/prophecy&quot;&gt;Prophecy&lt;/a&gt; is a &quot;highly opinionated yet very powerful and flexible PHP object mocking framework. Though initially it was created to fulfil phpspec2 needs, it is flexible enough to be used inside any testing framework out there with minimal effort&quot;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phpspec/prophecy&quot;&gt;Prophecy&lt;/a&gt; - это &amp;laquo;весьма самоуверенный, но очень мощный и гибкий фреймворк имитации объектов PHP. Хотя изначально он был создан для удовлетворения потребностей phpspec2, он достаточно гибкий, чтобы с минимальными усилиями можно было использовать его внутри любого фреймворка тестирования&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="cbabf819e43f8324f5510cd36d33d1f5bdfee065" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;It is hard to test code that uses singletons.&lt;/a&gt; The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test&amp;rsquo;s change to a global variable might break another test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d245a824da804374ae99dd6339be7c84a371074" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php&quot;&gt;Example 7.1&lt;/a&gt; shows a test case class, &lt;code&gt;SampleTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testSomething()&lt;/code&gt;. By calling the convenience method &lt;code&gt;markTestIncomplete()&lt;/code&gt; (which automatically raises an &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; exception) in the test method, we mark the test as being incomplete.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php&quot;&gt;В примере 7.1&lt;/a&gt; показан класс тестового примера &lt;code&gt;SampleTest&lt;/code&gt; , который содержит один тестовый метод &lt;code&gt;testSomething()&lt;/code&gt; . &lt;code&gt;markTestIncomplete()&lt;/code&gt; удобный метод markTestIncomplete () (который автоматически вызывает исключение &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; ) в методе тестирования, мы отмечаем тест как неполный.</target>
        </trans-unit>
        <trans-unit id="e1826ba7ad67aff343a5faebb33c2d11a0bdac0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.tables.api&quot;&gt;Table 7.1&lt;/a&gt; shows the API for marking tests as incomplete.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.tables.api&quot;&gt;В таблице 7.1&lt;/a&gt; показан API для маркировки тестов как неполных.</target>
        </trans-unit>
        <trans-unit id="7d28b22b87435b82016377e72a600e1635d51ec9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipped-tests.tables.api&quot;&gt;Table 7.2&lt;/a&gt; shows the API for skipping tests.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipped-tests.tables.api&quot;&gt;В таблице 7.2&lt;/a&gt; показан API для пропуска тестов.</target>
        </trans-unit>
        <trans-unit id="d201a110ac700dfc5f308da8a1e8ae0633a211c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php&quot;&gt;Example 7.2&lt;/a&gt; shows a test case class, &lt;code&gt;DatabaseTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testConnection()&lt;/code&gt;. In the test case class' &lt;code&gt;setUp()&lt;/code&gt; template method we check whether the MySQLi extension is available and use the &lt;code&gt;markTestSkipped()&lt;/code&gt; method to skip the test if it is not.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php&quot;&gt;В примере 7.2&lt;/a&gt; показан класс тестового примера &lt;code&gt;DatabaseTest&lt;/code&gt; , который содержит один тестовый метод &lt;code&gt;testConnection()&lt;/code&gt; . В методе шаблона &lt;code&gt;setUp()&lt;/code&gt; класса тестового примера мы проверяем, доступно ли расширение MySQLi, и используем метод &lt;code&gt;markTestSkipped()&lt;/code&gt; чтобы пропустить тест, если это не так.</target>
        </trans-unit>
        <trans-unit id="c278bd42534e6f3761c4fb83d65f18b57516d69f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;Example 9.11&lt;/a&gt; shows how to use a mock object to test the interaction between &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;В примере 9.11&lt;/a&gt; показано, как использовать фиктивный объект для проверки взаимодействия между объектами &lt;code&gt;Subject&lt;/code&gt; и &lt;code&gt;Observer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f5e6b01ac27f3606c3512b1b0134558a0afa53c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.Example.php&quot;&gt;Example 9.21&lt;/a&gt; shows a class that interacts with the filesystem.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.Example.php&quot;&gt;В примере 9.21&lt;/a&gt; показан класс, который взаимодействует с файловой системой.</target>
        </trans-unit>
        <trans-unit id="d1bd895ee7e2bd6f88fd27735788cb0161b36b4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php&quot;&gt;Example 9.23&lt;/a&gt; shows how vfsStream can be used to mock the filesystem in a test for a class that interacts with the filesystem.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php&quot;&gt;В примере 9.23&lt;/a&gt; показано, как vfsStream можно использовать для имитации файловой системы в тесте для класса, который взаимодействует с файловой системой.</target>
        </trans-unit>
        <trans-unit id="726c00627ea79327903a64f70862a4c154732aca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php&quot;&gt;Example 9.20&lt;/a&gt; shows how &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used to stub, for example, the web service described in &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php&quot;&gt;В примере 9.20&lt;/a&gt; показано, как можно использовать &lt;code&gt;getMockFromWsdl()&lt;/code&gt; для заглушки, например, веб-службы, описанной в &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fe2599f429265ec1f48e01bff9b3997f782265ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest.php&quot;&gt;Example 9.2&lt;/a&gt; shows how to stub method calls and set up return values. We first use the &lt;code&gt;createMock()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a stub object that looks like an object of &lt;code&gt;SomeClass&lt;/code&gt; (&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.SomeClass.php&quot;&gt;Example 9.1&lt;/a&gt;). We then use the &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface&lt;/a&gt; that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and &quot;fluent&quot; code.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest.php&quot;&gt;В примере 9.2&lt;/a&gt; показано, как заглушить вызовы методов и настроить возвращаемые значения. Сначала мы используем метод &lt;code&gt;createMock()&lt;/code&gt; который предоставляется классом &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; чтобы настроить объект-заглушку, который выглядит как объект &lt;code&gt;SomeClass&lt;/code&gt; ( &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.SomeClass.php&quot;&gt;Пример 9.1&lt;/a&gt; ). Затем мы используем &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface,&lt;/a&gt; который предоставляет PHPUnit, чтобы указать поведение заглушки. По сути, это означает, что вам не нужно создавать несколько временных объектов и впоследствии связывать их вместе. Вместо этого вы связываете вызовы методов, как показано в примере. Это приводит к более читаемому и &amp;laquo;плавному&amp;raquo; коду.</target>
        </trans-unit>
        <trans-unit id="fdec3d27a3fec8bb29afbc225b2b3f26d37fdad2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest2.php&quot;&gt;Example 9.3&lt;/a&gt; shows an example of how to use the Mock Builder's fluent interface to configure the creation of the test double. The configuration of this test double uses the same best practice defaults used by &lt;code&gt;createMock()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest2.php&quot;&gt;В примере 9.3&lt;/a&gt; показан пример использования свободного интерфейса Mock Builder для настройки создания тестового двойника. Конфигурация этого тестового двойника использует те же самые лучшие практики по умолчанию, которые использует &lt;code&gt;createMock()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0fdd7bb5f13f0c494d1d907e04f44612ea555be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Example 2.1&lt;/a&gt; shows how we can write tests using PHPUnit that exercise PHP's array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit:</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Пример 2.1&lt;/a&gt; показывает, как мы можем писать тесты с использованием PHPUnit, которые проверяют операции PHP с массивами. В примере представлены основные соглашения и шаги для написания тестов с помощью PHPUnit:</target>
        </trans-unit>
        <trans-unit id="359ad03cd33ea3f0237215f3237a0d28f3ed3d0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;В примере 2.2&lt;/a&gt; показано, как использовать аннотацию &lt;code&gt;@depends&lt;/code&gt; для выражения зависимостей между методами тестирования.</target>
        </trans-unit>
        <trans-unit id="4ab799e7a2b4e63b7aa3b29b7e55e0547b74eb53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; shows how to use the &lt;code&gt;@expectedException&lt;/code&gt; annotation to test whether an exception is thrown inside the tested code.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;В примере 2.10&lt;/a&gt; показано, как использовать аннотацию &lt;code&gt;@expectedException&lt;/code&gt; , чтобы проверить, возникает ли исключение внутри тестируемого кода.</target>
        </trans-unit>
        <trans-unit id="3db03ff4f91d80905689b39bb4fc989d8442106b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; shows how to use the &lt;code&gt;expectException()&lt;/code&gt; method to test whether an exception is thrown by the code under test.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;В примере 2.10&lt;/a&gt; показано, как использовать метод &lt;code&gt;expectException()&lt;/code&gt; чтобы проверить, вызвано ли исключение тестируемым кодом.</target>
        </trans-unit>
        <trans-unit id="e51cfb5b7b55d680fe69e0d95d4bfc08247a9251" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.examples.OutputTest.php&quot;&gt;Example 2.14&lt;/a&gt; shows how to use the &lt;code&gt;expectOutputString()&lt;/code&gt; method to set the expected output. If this expected output is not generated, the test will be counted as a failure.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.examples.OutputTest.php&quot;&gt;В примере 2.14&lt;/a&gt; показано, как использовать метод &lt;code&gt;expectOutputString()&lt;/code&gt; для установки ожидаемого результата. Если этот ожидаемый результат не сгенерирован, тест будет считаться неудачным.</target>
        </trans-unit>
        <trans-unit id="134bf484e4328e79b0968392690a79c166c2804d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.tables.api&quot;&gt;Table 2.1&lt;/a&gt; shows the methods provided for testing output</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.tables.api&quot;&gt;В таблице 2.1&lt;/a&gt; показаны методы, предусмотренные для тестирования выходных данных.</target>
        </trans-unit>
        <trans-unit id="eb230f1e3a75c3c7d52f3cbd795e62ab7dc807a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$isNativeType&lt;/code&gt; is a flag used to indicate whether &lt;code&gt;$type&lt;/code&gt; is a native PHP type or not.</source>
          <target state="translated">&lt;code&gt;$isNativeType&lt;/code&gt; - это флаг, который указывает, является ли &lt;code&gt;$type&lt;/code&gt; собственным типом PHP или нет.</target>
        </trans-unit>
        <trans-unit id="985752e98e8ebfa1c25bb9f1c27f0b2e2a9f7fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$strict&lt;/code&gt; is a flag used to compare the identity of objects within arrays.</source>
          <target state="translated">&lt;code&gt;$strict&lt;/code&gt; - это флаг, используемый для сравнения идентичности объектов в массивах.</target>
        </trans-unit>
        <trans-unit id="c22eaa1832553a53e81d6d0b17d6cb75beb3f912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%%&lt;/code&gt;: A literal percent character: &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7055c0e1b2e715a5c4635ee5f8d7d07eb6f964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%A&lt;/code&gt;: Zero or more of anything (character or white space) including the end of line character.</source>
          <target state="translated">&lt;code&gt;%A&lt;/code&gt; : ноль или более всего (символа или пробела), включая символ конца строки.</target>
        </trans-unit>
        <trans-unit id="e1bfb206b34ee37df38fdb749aaf435d92ce032f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%S&lt;/code&gt;: Zero or more of anything (character or white space) except the end of line character.</source>
          <target state="translated">&lt;code&gt;%S&lt;/code&gt; : ноль или более всего (символа или пробела), кроме символа конца строки.</target>
        </trans-unit>
        <trans-unit id="be3ae59d595f914251b1af954bd09e132e6903c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%a&lt;/code&gt;: One or more of anything (character or white space) including the end of line character.</source>
          <target state="translated">&lt;code&gt;%a&lt;/code&gt; : один или несколько символов (символ или пробел), включая символ конца строки.</target>
        </trans-unit>
        <trans-unit id="c206735814f18cab60142f65517a50ab64445369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%c&lt;/code&gt;: A single character of any sort.</source>
          <target state="translated">&lt;code&gt;%c&lt;/code&gt; : одиночный символ любого вида.</target>
        </trans-unit>
        <trans-unit id="3a2904925b315905ca693c6969cc8a858e26dc8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%d&lt;/code&gt;: An unsigned integer value, for example &lt;code&gt;123456&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; : целое число без знака, например &lt;code&gt;123456&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="903ddf94e3e1018a58899d7bc47e040cbdc5b4ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%e&lt;/code&gt;: Represents a directory separator, for example &lt;code&gt;/&lt;/code&gt; on Linux.</source>
          <target state="translated">&lt;code&gt;%e&lt;/code&gt; : представляет разделитель каталогов, например &lt;code&gt;/&lt;/code&gt; в Linux.</target>
        </trans-unit>
        <trans-unit id="39776cad8c4c047484fbad07339d3ca76206a327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%f&lt;/code&gt;: A floating point number, for example: &lt;code&gt;3.142&lt;/code&gt;, &lt;code&gt;-3.142&lt;/code&gt;, &lt;code&gt;3.142E-10&lt;/code&gt;, &lt;code&gt;3.142e+10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%f&lt;/code&gt; : число с плавающей запятой, например: &lt;code&gt;3.142&lt;/code&gt; , &lt;code&gt;-3.142&lt;/code&gt; , &lt;code&gt;3.142E-10&lt;/code&gt; , &lt;code&gt;3.142e+10&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="325fbfdf57e039539f65f261ea12e6f03f67e915" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%i&lt;/code&gt;: A signed integer value, for example &lt;code&gt;+3142&lt;/code&gt;, &lt;code&gt;-3142&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%i&lt;/code&gt; : целое число со &lt;code&gt;+3142&lt;/code&gt; , например +3142 , &lt;code&gt;-3142&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9a25ea68137637e4f05cba3e9b87822f1a2b9f0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%s&lt;/code&gt;: One or more of anything (character or white space) except the end of line character.</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; : один или несколько любых символов (символа или пробела), кроме символа конца строки.</target>
        </trans-unit>
        <trans-unit id="b32c295e30c2d2d5506f0da5a7b0a9556a195a0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%w&lt;/code&gt;: Zero or more white space characters.</source>
          <target state="translated">&lt;code&gt;%w&lt;/code&gt; : ноль или более пробелов.</target>
        </trans-unit>
        <trans-unit id="9a5509a69f7a8c04ca77a3a4ec92a36fc1c544e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%x&lt;/code&gt;: One or more hexadecimal character. That is, characters in the range &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-f&lt;/code&gt;, &lt;code&gt;A-F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%x&lt;/code&gt; : один или несколько шестнадцатеричных символов. То есть символы в диапазоне &lt;code&gt;0-9&lt;/code&gt; , &lt;code&gt;a-f&lt;/code&gt; , &lt;code&gt;A-F&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d31ecb27f0a60862ee1d94acc0188eaf1f6db8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt; (float)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec90394b7b372e345a30922584e00510b8daee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--configuration&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7f033cfaa2592a65485295e5079042a128669f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--testdox-html&lt;/code&gt; and &lt;code&gt;--testdox-text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10782fd661980bc9ce314f87356cde3c69b7d6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@backupStaticAttributes&lt;/code&gt; is limited by PHP internals and may cause unintended static values to persist and leak into subsequent tests in some circumstances.</source>
          <target state="translated">&lt;code&gt;@backupStaticAttributes&lt;/code&gt; ограничены внутренними функциями PHP и в некоторых случаях могут привести к сохранению непреднамеренных статических значений и утечке их в последующие тесты.</target>
        </trans-unit>
        <trans-unit id="a14bc888efd2c67db09e844b893b7308bac42a8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ::functionName&lt;/code&gt; (recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ba0de90f7169aa147537a4b318a939d3c2067e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName&amp;lt;extended&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb63d563c2aa57bf3effc552494fb9b26684a41e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!private&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198fc2dddd2256eecaf4f72a0e95f56aed808e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!protected&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120c08f2b51ba434136abd75b676e6541d1bbe42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!public&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4275424fabfbb8d57c7d82c4a94ff1b0133bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;private&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ebfead053f930254482fc631dab28c72ac6a08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;protected&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38756ced59a18678e23c8a4ebcdfc0b0566903e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;public&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac0d1e561d46acd3267948d728ed797d4170d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::methodName&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2518b7a065badbc0f2a92ddc4dbedc1bcf2da282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName&lt;/code&gt; (recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46e030ab26fc956072ba38ba2880bbfa69ed07c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ClassTest&lt;/code&gt; inherits (most of the time) from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ClassTest&lt;/code&gt; наследует (в большинстве случаев) от &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b14a7c551535274e88626822ef803f739244731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt; and &lt;code&gt;PHPUnit\Framework\Error\Warning&lt;/code&gt; represent PHP notices and warnings, respectively.</source>
          <target state="translated">&lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt; и &lt;code&gt;PHPUnit\Framework\Error\Warning&lt;/code&gt; представляют собой уведомления и предупреждения PHP соответственно.</target>
        </trans-unit>
        <trans-unit id="bdfa6831a4431c2cf93508b6b8f416e713ec7fe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnitTest&lt;/code&gt; must be either a class that inherits from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; or a class that provides a &lt;code&gt;public static suite()&lt;/code&gt; method which returns a &lt;code&gt;PHPUnit\Framework\Test&lt;/code&gt; object, for example an instance of the &lt;code&gt;PHPUnit\Framework\TestSuite&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c05893ecd2cc5c581315b0349cb385d0014ef56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnitTest&lt;/code&gt; must be either a class that inherits from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; or a class that provides a &lt;code&gt;public static suite()&lt;/code&gt; method which returns a &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; object, for example an instance of the &lt;code&gt;PHPUnit_Framework_TestSuite&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;UnitTest&lt;/code&gt; должен быть либо классом, унаследованным от &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; либо классом, который предоставляет &lt;code&gt;public static suite()&lt;/code&gt; метод suite (), который возвращает объект &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; , например, экземпляр класса &lt;code&gt;PHPUnit_Framework_TestSuite&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53fb70feb14360a663d7de962160fe7ea1f2aba3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&lt;/code&gt;: always displays colors in the output even when the current terminal doesn&amp;rsquo;t supports colors, or when the output is piped to a command or redirected to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f35cd18864425486ede52e8fbfffc78b8b5bbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&lt;/code&gt;: always displays colors in the output even when the current terminal doesn't supports colors, or when the output is piped to a command or redirected to a file.</source>
          <target state="translated">&lt;code&gt;always&lt;/code&gt; : всегда отображает цвета в выводе, даже если текущий терминал не поддерживает цвета, или когда вывод передается команде или перенаправляется в файл.</target>
        </trans-unit>
        <trans-unit id="8e10801b97ea178ffe9ebc40f83f7426b259b0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertArrayNotHasKey()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertArrayNotHasKey()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="3182610acb9ad1518997f10e1437ad08ce458865" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeContains()&lt;/code&gt; and &lt;code&gt;assertAttributeNotContains()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the haystack.</source>
          <target state="translated">&lt;code&gt;assertAttributeContains()&lt;/code&gt; и &lt;code&gt;assertAttributeNotContains()&lt;/code&gt; - это удобные оболочки, которые используют &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве стога сена.</target>
        </trans-unit>
        <trans-unit id="7cd76ed554f63a3a5ee3ef21e29e6b2999050da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeContainsOnly()&lt;/code&gt; and &lt;code&gt;assertAttributeNotContainsOnly()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the haystack.</source>
          <target state="translated">&lt;code&gt;assertAttributeContainsOnly()&lt;/code&gt; и &lt;code&gt;assertAttributeNotContainsOnly()&lt;/code&gt; - это удобные оболочки, которые используют &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве стога сена.</target>
        </trans-unit>
        <trans-unit id="e8b505c9ec62b2cf97e603bf91fe55b445c00a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeEmpty()&lt;/code&gt; and &lt;code&gt;assertAttributeNotEmpty()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeEmpty()&lt;/code&gt; и &lt;code&gt;assertAttributeNotEmpty()&lt;/code&gt; - это удобные оболочки, которые могут применяться к &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибуту класса или объекта.</target>
        </trans-unit>
        <trans-unit id="74aca865727b49024da70bd2a2a52a3743f9c0e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeEquals()&lt;/code&gt; and &lt;code&gt;assertAttributeNotEquals()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeEquals()&lt;/code&gt; и &lt;code&gt;assertAttributeNotEquals()&lt;/code&gt; - это удобные оболочки, которые используют &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="2ed7c1f1034bce8677abb3b919d7ed7951a70037" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeGreaterThan()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeGreaterThan()&lt;/code&gt; - это удобная оболочка, которая использует &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="312a7f88b9869f38933e96139da919ce30e72268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeGreaterThanOrEqual()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeGreaterThanOrEqual()&lt;/code&gt; - это удобная оболочка, которая использует &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="80e395c2fd99e40222d4731c97b34156aa074ef1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeInstanceOf()&lt;/code&gt; and &lt;code&gt;assertAttributeNotInstanceOf()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeInstanceOf()&lt;/code&gt; и &lt;code&gt;assertAttributeNotInstanceOf()&lt;/code&gt; - это удобные оболочки, которые можно применять к &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибуту класса или объекта.</target>
        </trans-unit>
        <trans-unit id="e7b1c9e2b1d75b071c01745bb535bd1cf463affd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeInternalType()&lt;/code&gt; and &lt;code&gt;assertAttributeNotInternalType()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeInternalType()&lt;/code&gt; и &lt;code&gt;assertAttributeNotInternalType()&lt;/code&gt; - это удобные оболочки, которые можно применять к &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибуту класса или объекта.</target>
        </trans-unit>
        <trans-unit id="ff2dff4c9aa55daf2999c05681cd2c84e0e00046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeLessThan()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeLessThan()&lt;/code&gt; - это удобная оболочка, которая использует &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="a5677cb688aa179877244b5f5792b3195074e83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeLessThanOrEqual()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeLessThanOrEqual()&lt;/code&gt; - это удобная оболочка, которая использует &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="d800800e24ffa93110e7f0655bccbad295e4a236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeSame()&lt;/code&gt; and &lt;code&gt;assertAttributeNotSame()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeSame()&lt;/code&gt; и &lt;code&gt;assertAttributeNotSame()&lt;/code&gt; - это удобные оболочки, которые используют &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; или &lt;code&gt;private&lt;/code&gt; атрибут класса или объекта в качестве фактического значения.</target>
        </trans-unit>
        <trans-unit id="cc05a8dfaf1f09c77579598b393c3a0e9525dabf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertClassNotHasAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertClassNotHasAttribute()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="f08ecd00f88650de2540cca34fa8551bddaaeec4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertClassNotHasStaticAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertClassNotHasStaticAttribute()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="ab8229b4672d83d56602367b6a86b66fc93d6af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryDoesNotExist()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a233626c406f1088cb17c902a24481c6ea2b5b7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db81efc60d2a4f9b8dfccb19537b68f81972f00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683074b42f8be2e6cdf1a5591d47de9ad12e3941" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotExists()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotExists()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="b96f7dfcde671122ec1d426b5302f01a53e92abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotIsReadable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="a1667a948c5776b069eef0d33e6bd61c8b91aec7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotIsWritable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="2576db4d491d8f635b69e4e05dae98e9e680d4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDoesNotMatchRegularExpression()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a141f0dd471f6396a8dfae9cf1c6082da6fa3d48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileDoesNotExist()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e1f3acd2aa277942a01fac62040296267d2e21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffe8fbba1ebb0bf7aa873308693d8243812ebee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5daaaca60778cba5a28ceab2f74d6e3b6d86848" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotEquals()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotEquals()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="24875222dcfdfac3ad56e3c8dff89f1702c3cc05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotExists()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotExists()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="8d601549d604f302c65a09e4a239d28ef68dd0c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotIsReadable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="776056cc088802e93a3c9d205377185e228a53f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotIsWritable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="00840b05dcb5f7ba398768c7028fc58f4530983c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFinite()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFinite()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="7e403617391380ff2e0cbb0b2ee8d4fbad6d7920" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotArray()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699976691508d8d712ad04f3ac684930c201b04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotBool()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb97132d07c0c0e8af6c50ebd336e7f0bb47309b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotCallable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1ff45d396dbdb817d8036411643b2bb36161e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotFloat()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc370a1441055dcb31dc15952c442b150f1bd8c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotInt()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fce0bdda942a747076517f467012f8d2047922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotIterable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97c59c3ba73b5b2c8e7b219fbc595d5f7c2f784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotNumeric()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b44162a5b29d0bee52ca67319efa67ff11a7589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotObject()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6425791931152df4d5944e1e873ba4c3a3b91d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a620cac14f856fa95973cb3370e6f5b078977212" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotResource()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972558acad02727ccdacc9ea4077cf35f5b951d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotScalar()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f124736dfa369b8bcafa691b4bae857ae7c1ef6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997793440fed28fb8cdc9ee8ed8b97fe8a5205d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6f2cfba10126e7283d47346a4576163d1e4668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotContains()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotContains()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="b538e8dadc2fcb733c1f56bcaf312d9972be5fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotContainsOnly()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotContainsOnly()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="4b084a0805ec4a43d503c426fcb21b45731682e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotCount()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotCount()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="130fbf9009b833f6a184f9d23f8105a0e8908e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEmpty()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotEmpty()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="e48a82acd387b8eb11c27c4bd413773d70d650c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEquals()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotEquals()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="5e437eafa32689de8f11e2c8b9cd2b40554bdd4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsCanonicalizing()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd338deb17fa78f4e088b2b6fed06ea31c06bf7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsIgnoringCase()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27347ed2919316cf10f8024a5cb1d7fbdd37e39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsWithDelta()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782aa3e21f2fe8d6ec668675df3367b5183a34ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotFalse()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotFalse()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="74071d81ef3376a587180f4bf10cce5927fb4b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotInstanceOf()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotInstanceOf()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="6820099b88275d81c65649d552aca3175f046abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotInternalType()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotInternalType()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="2352fe2ffa92b884d44f8c60940699effaad41aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotIsReadable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="4ebb0ad55d9290825f6d201e4153ef12cc1ec063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotIsWritable()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="e8a0a868267d654ee0a04ced68556ce3ef202d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotNull()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotNull()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="a1af83e72b05671dbd9470c9f6b966981de87fac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotRegExp()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotRegExp()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="4f6cb3f36af1c4a92d2159e602a0ad2b0a7237fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotSame()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotSame()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="ba3007c16403ff7c20e6009663895380c927d759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotTrue()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotTrue()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="e6bd1c331daecab854447e861f97f9eb5cbbc25a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertObjectNotHasAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertObjectNotHasAttribute()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="863ce03a3c24ebc46c290963c5a1bb32e7dde83d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringEndsNotWith()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringEndsNotWith()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="0bb2358246d3e073ceda4be1cc7e31f4d4b7d87e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotContainsString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304b401b01f517fbbb0637e667fd1e7ba78f4283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotContainsStringIgnoringCase()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a1fe5bc5dabfc19a7684c352191dff38d95c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotEqualsFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotEqualsFile()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="0a46b9abcdf908c4c47fc3d9f49444619e09e46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotMatchesFormat()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotMatchesFormat()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="720daa17c33654dd0b7e9172e4bf22c8f877cd74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotMatchesFormatFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotMatchesFormatFile()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="1c079ae8933bc457ca440db2e0db984d14bd4d67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringStartsNotWith()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringStartsNotWith()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="811ad5be353f51c600dc39d63a8e44a57e82924c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlFileNotEqualsXmlFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlFileNotEqualsXmlFile()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="269893af258500629fde7e2dca9ed0223505b421" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlStringNotEqualsXmlFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlStringNotEqualsXmlFile()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="00f496344b531e39ae89c39497b22124c57fe8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlStringNotEqualsXmlString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlStringNotEqualsXmlString()&lt;/code&gt; является обратным этому утверждению и принимает те же аргументы.</target>
        </trans-unit>
        <trans-unit id="65a337696d0f921935b79ef09ecdd52839ffac73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: displays colors in the output unless the current terminal doesn&amp;rsquo;t supports colors, or if the output is piped to a command or redirected to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dbea9c537e19f81e4a604cde50ce161a48fb3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: displays colors in the output unless the current terminal doesn't supports colors, or if the output is piped to a command or redirected to a file.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; : отображает цвета в выводе, если текущий терминал не поддерживает цвета, или если вывод передается команде или перенаправляется в файл.</target>
        </trans-unit>
        <trans-unit id="520035ac612091f134a660e4b438f4fa48d2db39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableAutoload()&lt;/code&gt; can be used to disable &lt;code&gt;__autoload()&lt;/code&gt; during the generation of the test double class.</source>
          <target state="translated">&lt;code&gt;disableAutoload()&lt;/code&gt; можно использовать для отключения &lt;code&gt;__autoload()&lt;/code&gt; во время генерации тестового двойного класса.</target>
        </trans-unit>
        <trans-unit id="81df9f8352bbfa45b8855925e4b8e7d875847bdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalClone()&lt;/code&gt; can be used to disable the call to the original class&amp;rsquo; clone constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd777ad903c50182fe780736b2819b6fedd1677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalClone()&lt;/code&gt; can be used to disable the call to the original class' clone constructor.</source>
          <target state="translated">&lt;code&gt;disableOriginalClone()&lt;/code&gt; можно использовать для отключения вызова конструктора клонирования исходного класса.</target>
        </trans-unit>
        <trans-unit id="62de16c0034b4343a54ae5fff3266a93b15ef7ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; can be used to disable the call to the original class&amp;rsquo; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6017cb39e51b6a2c2238978001df423dbfc182df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; can be used to disable the call to the original class' constructor.</source>
          <target state="translated">&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; можно использовать для отключения вызова конструктора исходного класса.</target>
        </trans-unit>
        <trans-unit id="b70c5eb2081f5a47a9afe5f5fa7c744b49e4846b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;highLowerBound&lt;/code&gt;: Minimum coverage percentage to be considered &quot;highly&quot; covered.</source>
          <target state="translated">&lt;code&gt;highLowerBound&lt;/code&gt; : Минимальный процент покрытия, который считается &quot;полностью&quot; покрытым.</target>
        </trans-unit>
        <trans-unit id="345de912d741ae2901125590814503e5e0128a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;false&quot;&lt;/code&gt; means that only files that have at least one line of executed code are included in the code coverage report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e09f17b37046bb6a71e520a45e22f50b7f6c75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;true&quot;&lt;/code&gt; (default) means that all files are included in the code coverage report even if not a single line of code of such a file is executed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c4775c04fddb2e4640c7a8a886b30b12fc2174" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lowUpperBound&lt;/code&gt;: Maximum coverage percentage to be considered &quot;lowly&quot; covered.</source>
          <target state="translated">&lt;code&gt;lowUpperBound&lt;/code&gt; : Максимальный процент покрытия, который считается &quot;мало&quot; покрытым.</target>
        </trans-unit>
        <trans-unit id="233810acae7da9ce813495fb1d8962756b9f84e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt;: never displays colors in the output. This is the default value when &lt;code&gt;--colors&lt;/code&gt; option is not used.</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; : никогда не отображает цвета на выходе. Это значение по умолчанию, когда опция &lt;code&gt;--colors&lt;/code&gt; не используется.</target>
        </trans-unit>
        <trans-unit id="0525a43b0eb19f944a175ef63d5865118a1c34fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processUncoveredFilesForCodeCoverageReport=&quot;false&quot;&lt;/code&gt; (default) means that a file that has no executed lines of code will be added to the code coverage report (if &lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;true&quot;&lt;/code&gt; is set) but it will not be loaded by PHPUnit and it will therefore not be analysed for correct executable lines of code information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a0f341d76c06325a8fadf1aee66b9c8676e973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processUncoveredFilesForCodeCoverageReport=&quot;true&quot;&lt;/code&gt; means that a file that has no executed lines of code will be loaded by PHPUnit so that it can be analysed for correct executable lines of code information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f779e0cae552262a203c44839f630e44c0e553b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; can be called to provide a parameter array that is passed to the original class&amp;rsquo; constructor (which is not replaced with a dummy implementation by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d6097856b759592af70fe4090fc82532271188" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; can be called to provide a parameter array that is passed to the original class' constructor (which is not replaced with a dummy implementation by default).</source>
          <target state="translated">&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; может быть вызван для предоставления массива параметров, который передается конструктору исходного класса (который по умолчанию не заменяется фиктивной реализацией).</target>
        </trans-unit>
        <trans-unit id="b72117b49da66fe44ec63a4e44e41c6973dc04aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMethods(array $methods)&lt;/code&gt; can be called on the Mock Builder object to specify the methods that are to be replaced with a configurable test double. The behavior of the other methods is not changed. If you call &lt;code&gt;setMethods(null)&lt;/code&gt;, then no methods will be replaced.</source>
          <target state="translated">&lt;code&gt;setMethods(array $methods)&lt;/code&gt; можно вызвать в объекте Mock Builder, чтобы указать методы, которые должны быть заменены настраиваемым тестовым двойником. Поведение остальных методов не изменилось. Если вы &lt;code&gt;setMethods(null)&lt;/code&gt; , то никакие методы не будут заменены.</target>
        </trans-unit>
        <trans-unit id="d5678cab86ad63bb332198d47de840564f59877e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMethodsExcept(array $methods)&lt;/code&gt; can be called on the Mock Builder object to specify the methods that will not be replaced with a configurable test double while replacing all other public methods. This works inverse to &lt;code&gt;setMethods()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c472cd19adb8f363c860c74103cf248c02c17802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMockClassName($name)&lt;/code&gt; can be used to specify a class name for the generated test double class.</source>
          <target state="translated">&lt;code&gt;setMockClassName($name)&lt;/code&gt; может использоваться для указания имени класса для созданного тестового двойного класса.</target>
        </trans-unit>
        <trans-unit id="f296ae305b8d83a60a530356f27145c14ed36f53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; are nicely symmetrical in theory but not in practice. In practice, you only need to implement &lt;code&gt;tearDown()&lt;/code&gt; if you have allocated external resources like files or sockets in &lt;code&gt;setUp()&lt;/code&gt;. If your &lt;code&gt;setUp()&lt;/code&gt; just creates plain PHP objects, you can generally ignore &lt;code&gt;tearDown()&lt;/code&gt;. However, if you create many objects in your &lt;code&gt;setUp()&lt;/code&gt;, you might want to &lt;code&gt;unset()&lt;/code&gt; the variables pointing to those objects in your &lt;code&gt;tearDown()&lt;/code&gt; so they can be garbage collected. The garbage collection of test case objects is not predictable.</source>
          <target state="translated">&lt;code&gt;setUp()&lt;/code&gt; и &lt;code&gt;tearDown()&lt;/code&gt; хорошо симметричны в теории, но не на практике. На практике вам нужно реализовать &lt;code&gt;tearDown()&lt;/code&gt; если вы выделили внешние ресурсы, такие как файлы или сокеты, в &lt;code&gt;setUp()&lt;/code&gt; . Если ваш &lt;code&gt;setUp()&lt;/code&gt; просто создает простые объекты PHP, вы обычно можете игнорировать &lt;code&gt;tearDown()&lt;/code&gt; . Однако, если вы создаете много объектов в вашем &lt;code&gt;setUp()&lt;/code&gt; , вы можете захотеть &lt;code&gt;unset()&lt;/code&gt; переменных, указывающих на эти объекты в вашем &lt;code&gt;tearDown()&lt;/code&gt; чтобы они могли быть собраны мусором. Сборка мусора объектов тестового набора непредсказуема.</target>
        </trans-unit>
        <trans-unit id="684edb995e4a9e953126870698a2ff1bc6dad159" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showOnlySummary&lt;/code&gt;: Show only the summary in &lt;code&gt;--coverage-text&lt;/code&gt; output.</source>
          <target state="translated">&lt;code&gt;showOnlySummary&lt;/code&gt; : показать только сводку в &lt;code&gt;--coverage-text&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="02ae999441e6bf7caccdafb80af40e451ac18852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showUncoveredFiles&lt;/code&gt;: Show all whitelisted files in &lt;code&gt;--coverage-text&lt;/code&gt; output not just the ones with coverage information.</source>
          <target state="translated">&lt;code&gt;showUncoveredFiles&lt;/code&gt; : Показать все файлы из белого списка в &lt;code&gt;--coverage-text&lt;/code&gt; не только те, которые содержат информацию о покрытии.</target>
        </trans-unit>
        <trans-unit id="5f21163d21b61db9729d14c904c6a41bb8e60113" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Adrian Kuhn et. al.&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ba42479616651ef75120b19ab83f0068142f44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Branch Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c5cff3b294e12e6945e01c7a6a0faefa31df4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Change Risk Anti-Patterns (CRAP) Index&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27319dd7b8472b33a05c78517bf923194864015" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Class and Trait Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1868df1cc489c784279135dd4ac83da83a8bdc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Function and Method Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0776592dbec737750a192f08668367de3d534f2a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Gerard Meszaros&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad23924e992514cdcb89dbbcd194730305a5cb8b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Line Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcb5cd8eedd46b8d9dc4eb0ff8da0666fa5e3ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Martin Fowler&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3eff5ef7de8cec28e3b2868009666414cf2abc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See &lt;a href=&quot;#appendixes-annotations-preserveglobalstate&quot;&gt;@preserveGlobalState&lt;/a&gt; for information on how to fix this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5485a8269bb7882c4acc18e873236190fa018" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Path Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabeae1899281243cdbe0ea23624047341751efa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Wikipedia&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;Wikipedia&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="537d41abe9dbf1d0b273e2a178fd342c6342b21a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.1: Using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 11.1: Использование &lt;code&gt;@codeCoverageIgnore&lt;/code&gt; , &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; и &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; аннотаций&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72cbc68e23f4a82cfeced2a240129550116dfdbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.2: Tests that specify which method they want to cover&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 11.2: Тесты, определяющие, какой метод они хотят охватить&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f7a5d070b9cbae1838d876503630249b371429c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.3: A test that specifies that no method should be covered&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 11.3: Тест, который указывает, что ни один метод не должен быть покрыт&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ad49bf718b9d6f625052daacd200b6be823f55a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.4: &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 11.4: &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2fa3ece13f1ff0d4f3e53ef837c5b73daca78f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.1: The assertTrue() and isTrue() methods of the PHPUnit_Framework_Assert class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.1: Методы assertTrue () и isTrue () класса PHPUnit_Framework_Assert&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1bef79bd75eb8052b443998707f35f0cfc26e31e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.2: The PHPUnit_Framework_Constraint_IsTrue class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.2: Класс PHPUnit_Framework_Constraint_IsTrue&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1ecb25cab9200b2fed805e9e4f613976938779a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.3: A simple test listener&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.3: Простой тестовый слушатель&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f90bea85d5817e2684d07072fe0dc81078fcf25b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.4: Using base test listener&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.4: Использование слушателя базового теста&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b107a4d8c5adf85e55d5031ecfb91b6e037c001c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.5: The RepeatedTest Decorator&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.5: Декоратор RepeatedTest&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b9dd539894f797d9470a8a989f318cb0e215012" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.6: A data-driven test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 14.6: Тест, управляемый данными&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc7de11596287f3fe1e4a799aefcb9025efbb4a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.10: Using the expectException() method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.10: Использование метода expectException ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="337afeeccc3738c06739ff4fe61a1c64aa4af129" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.11: Using the @expectedException annotation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.11: Использование аннотации @expectedException&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6bb460199f586cdb20439b27a3e98efb679efca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.12: Expecting a PHP error using @expectedException&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.12: Ожидание ошибки PHP с использованием @expectedException&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7faeb7f4d9eec3424fc00df1ac0ba48691238cbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.13: Testing return values of code that uses PHP Errors&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.13: Тестирование возвращаемых значений кода, использующего ошибки PHP&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04f43c6f50b9392fe9e946e38855de0bad3d8a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.14: Testing the output of a function or method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.14: Тестирование вывода функции или метода&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="927ff2f4752e4bbf12c6f979fefb10a0cc458eb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.15: Error output generated when an array comparison fails&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.15: Вывод ошибки генерируется, когда сравнение массивов не удается&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="394f78d7977c5f42f9e5aa7dc1bdfdf9bea25234" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.16: Error output when an array comparison of an long array fails&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.16: Вывод ошибки при неудачном сравнении длинного массива&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48ad1147fa974a907f46fc6da0507c6939eeb710" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.17: Edge case in the diff generation when using weak comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.17: Edge case в генерации diff при использовании слабого сравнения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db2c202f8a7ceafb8842395ad0f7bfdda98a82da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.1: Testing array operations with PHPUnit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.1: Тестирование операций с массивами с помощью PHPUnit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e70f647a3e8d31b38c4a3c7c77c1638e415cd2f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.2: Using the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.2: Использование аннотации &lt;code&gt;@depends&lt;/code&gt; для выражения зависимостей&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e794399369b4a28bcd673bc685cbe65b5c72241" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.3: Exploiting the dependencies between tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.3: Использование зависимостей между тестами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84b32656807bfcd79defca5658b4eec92c93e7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.4: Test with multiple dependencies&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.4: Тест с несколькими зависимостями&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="675b82b7889718bdf4851e702175fbf646548eb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.5: Using a data provider that returns an array of arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.5: Использование поставщика данных, возвращающего массив массивов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ff9014e6a8fb68ce5aa03f4b962067a3561d362" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.6: Using a data provider with named datasets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.6: Использование поставщика данных с именованными наборами данных&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0c19de488ddbcb5471fdeae5c1f131669c14956" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.7: Using a data provider that returns an Iterator object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.7: Использование поставщика данных, возвращающего объект Iterator&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29fec3696b6a3d4c91a9b064e7221978ad0b6bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.8: The CsvFileIterator class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.8: Класс CsvFileIterator&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15889b69d267da75713d32917bb01f7d025060a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.9: Combination of @depends and @dataProvider in same test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 2.9: Комбинация @depends и @dataProvider в одном тесте&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35a54136a480d5f2bd8d3ba5ae80da0abf1eb3d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.1: Named data sets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 3.1: Именованные наборы данных&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4c4712ccd3b91951deb1495104ba1fee3a6d0bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.2: Filter pattern examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 3.2: Примеры шаблонов фильтров&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2adbadc30448bb7e13412741dc21a78ff7cb5d67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.3: Filter shortcuts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 3.3: ярлыки фильтров&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28420c079c0546fe91a6c76ad2ef4edbe9aea8ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.1: Using setUp() to create the stack fixture&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 4.1: Использование setUp () для создания фикстуры стека&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66405829cf50723ce873087dc4fbfe8b4fbb2b45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.2: Example showing all template methods available&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 4.2: Пример, показывающий все доступные методы шаблона&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889e05537ca67b263a7e192829d4ade2fc3a9c39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.3: Sharing fixture between the tests of a test suite&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 4.3: Совместное использование фикстуры между тестами набора тестов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db31aaa3ce4fec73841ad205ae08eb96e683cdd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5.1: Composing a Test Suite Using XML Configuration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 5.1: Составление набора тестов с использованием конфигурации XML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="430f86c80b2a34dba9b8c9bb1bc2277674e50454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5.2: Composing a Test Suite Using XML Configuration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 5.2: Составление набора тестов с использованием конфигурации XML&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74c6ad4e58b81e34d3db0b636a83cc3e577027e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.1: Marking a test as incomplete&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 7.1: Отметка теста как неполного&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6afa59578278a136a15fd1473194207543b3058a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.2: Skipping a test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 7.2: Пропуск теста&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e50e5736235ea48077c8c73f8497e437fcd14807" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.3: Skipping test cases using @requires&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 7.3: Пропуск тестовых случаев с использованием @requires&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="085ea4c7550502ac08f2175fa82a4ee0dc514ce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.10: The Subject and Observer classes that are part of the System under Test (SUT)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.10: Классы Subject и Observer, которые являются частью тестируемой системы (SUT)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6460feaa3f38622fa91697ee7c9d2ebfe2f00d15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.11: Testing that a method gets called once and with a specified argument&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.11: Проверка того, что метод вызывается один раз и с указанным аргументом&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="353a1360153e4cf19222eeb7f8ba79844c1c3383" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.12: Testing that a method gets called with a number of arguments constrained in different ways&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.12: Проверка того, что метод вызывается с несколькими аргументами, ограниченными различными способами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12b886f498ea6d9029d077070b8ba0d69dd21bb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.13: Testing that a method gets called two times with specific arguments.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.13: Проверка того, что метод вызывается два раза с определенными аргументами.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2624606e44e41c5efe561b8f0a6458b95b7b5ab6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.14: More complex argument verification&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.14: Более сложная проверка аргумента&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0268f76a36e7955edeed8dccc135c4ac704d2a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.15: Testing that a method gets called once and with the identical object as was passed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.15: Тестирование того, что метод вызывается один раз и с тем же объектом, который был передан&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86033dafd39d155720c5b901233ecea83731e941" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.16: Create a mock object with cloning parameters enabled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.16: Создание фиктивного объекта с включенными параметрами клонирования&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca81fd8525be90f6266bcf992c75e4925d0cc223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.17: Testing that a method gets called once and with a specified argument&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.17: Проверка того, что метод вызывается один раз и с указанным аргументом&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48a15ce2f8ba0a4c99bb791fd151bd462b880706" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.18: Testing the concrete methods of a trait&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.18: Тестирование конкретных методов признака&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aae9477a5e8a50fda46adb8298db2457813e8a95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.19: Testing the concrete methods of an abstract class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.19: Тестирование конкретных методов абстрактного класса&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75479324e4f179170960ee5a3b658f5ef31808aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.1: The class we want to stub&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.1: Класс, который мы хотим заглушить&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2f0259d0cd3cb442d1c277f595880cca08f18b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.20: Stubbing a web service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.20: Заглушка веб-службы&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee81e8a22fab8689786b4a21f6320cb7b92b2ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.21: A class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.21: Класс, который взаимодействует с файловой системой&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70709b740f2581cd1ddf604c1fd89fa554b910b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.22: Testing a class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.22: Тестирование класса, взаимодействующего с файловой системой&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cde04a4be9eff8b8de163b549e58543825c3cd8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.23: Mocking the filesystem in a test for a class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.23: Мокинг файловой системы в тесте для класса, который взаимодействует с файловой системой&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0e2b766c5228e9c9d82c3fb22cd072edafe7492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.2: Stubbing a method call to return a fixed value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.2: Заглушка вызова метода для возврата фиксированного значения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b4beb20954dd0b305f33d6f4589bb0f81cac82f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.3: Using the Mock Builder API can be used to configure the generated test double class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.3: Использование Mock Builder API можно использовать для настройки сгенерированного двойного класса теста&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="966926fb83f586d3e4503b4a5e6c838b904b7ea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.4: Stubbing a method call to return one of the arguments&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.4: Заглушка вызова метода для возврата одного из аргументов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcf331f22ea094ec036a841f0511a70f753a5ecc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.5: Stubbing a method call to return a reference to the stub object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.5: Заглушка вызова метода для возврата ссылки на объект-заглушку&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d8eca1ff7f8c31190dcac901a213678ceebc9a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.6: Stubbing a method call to return the value from a map&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.6: Заглушка вызова метода для возврата значения из карты&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20b3cbf4a57b2957caa6f2aa617ccb971fe0600e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.7: Stubbing a method call to return a value from a callback&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.7: Заглушка вызова метода для возврата значения из обратного вызова&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="444e902b7a4373bb0f4d717694130a016fe448cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.8: Stubbing a method call to return a list of values in the specified order&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.8: Заглушка вызова метода для возврата списка значений в указанном порядке&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ab0ad4c5599f681eb352b9f40b734f07d3c047d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.9: Stubbing a method call to throw an exception&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример 9.9: Заглушка вызова метода для генерации исключения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e410312dcda80a29e47c9962e467c45d8ac4e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.10: Usage of assertCount()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.10: Использование assertCount ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da5c55653ca59b9463fb56677a0b1787658723b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.11: Usage of assertDirectoryExists()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.11: Использование assertDirectoryExists ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62ac7540a8ed7db60a9771f39cfd688b8b7665f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.12: Usage of assertDirectoryIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.12: Использование assertDirectoryIsReadable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4662e75e0f6a5b72cac519644eff3602bd89e385" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.13: Usage of assertDirectoryIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.13: Использование assertDirectoryIsWritable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e52b6914360e55e8f9cc18c53997a6ba66a6b15c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.14: Usage of assertEmpty()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.14: Использование assertEmpty ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f672fcbb4be1c8a30e0914a7811807054db0feb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.15: Usage of assertEqualXMLStructure()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.15: Использование assertEqualXMLStructure ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="975fe0608c6b3b281fde9d558378a80d2129ca67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.16: Usage of assertEquals()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.16: Использование assertEquals ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dde707e9204065bb47c735bc75350e22dd22cf9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.17: Usage of assertEquals() with floats&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.17: Использование assertEquals () с числами с плавающей запятой&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e64aa93d946e4b9bfca36e6bf493cba2c83914d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.18: Usage of assertEquals() with DOMDocument objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.18: Использование assertEquals () с объектами DOMDocument&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dbaf6e509c59f254971460ac393b890530bd61e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.19: Usage of assertEquals() with objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.19: Использование assertEquals () с объектами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c31bfc73aea152f8ea0c5d8eadc8e968b4789f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.1: Usage of assertArrayHasKey()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.1: Использование assertArrayHasKey ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15e7ef5c3f4f01252f938d794cabb6b6e0e328e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.20: Usage of assertEquals() with arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.20: Использование assertEquals () с массивами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b96eac1a539e742e131c6bd02ac5f1e4b2c6208" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.21: Usage of assertFalse()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.21: Использование assertFalse ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b34a0bd8428075f26f036de71389433f21410b76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.22: Usage of assertFileEquals()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.22: Использование assertFileEquals ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3906ba05593c0cdea7e0915d24e05a1608c85d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.23: Usage of assertFileExists()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.23: Использование assertFileExists ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e3c5cbe33cf28106f312197f107b9461a7fcf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.24: Usage of assertFileIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.24: Использование assertFileIsReadable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffe3f2e0d160bcbc1e3da17a32e4143f59601866" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.25: Usage of assertFileIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.25: Использование assertFileIsWritable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3813bdc3781298f6c0bd8f56f27728780b698b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.26: Usage of assertGreaterThan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.26: Использование assertGreaterThan ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="145795ec14bb262aeef168d45b1b8ca1d3d9d4b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.27: Usage of assertGreaterThanOrEqual()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.27: Использование assertGreaterThanOrEqual ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2934090b34180c1e36e6cf02de359ba026f6684d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.28: Usage of assertInfinite()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.28: Использование assertInfinite ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4cf9ad79e50a9cb2caeb17f83ad1fb2f03eb0fc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.29: Usage of assertInstanceOf()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.29: Использование assertInstanceOf ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1d4d585cc23c436cf6de8a3743f9fff09675629" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.2: Usage of assertClassHasAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.2: Использование assertClassHasAttribute ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ee4399a90f29d16e53c2599dc09ed1abb9029df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.30: Usage of assertInternalType()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.30: Использование assertInternalType ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6fe9b37a3a7649f1b3c39e5c871f511db1a69e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.31: Usage of assertIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.31: Использование assertIsReadable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5f0caa3f0c007ccda832ff2e6f901bcf24ccff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.32: Usage of assertIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.32: Использование assertIsWritable ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d9e1415c8f246cc599a9a889df744a1ea9c4afea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.33: Usage of assertJsonFileEqualsJsonFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.33: Использование assertJsonFileEqualsJsonFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f6b658745529afa0c06127da1310716a22e0e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.34: Usage of assertJsonStringEqualsJsonFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.34: Использование assertJsonStringEqualsJsonFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa0c51af090f452757ac365b8c23c2ee603dbbfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.35: Usage of assertJsonStringEqualsJsonString()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.35: Использование assertJsonStringEqualsJsonString ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0054e1ef183a9e075849472e0d4f93e968a0630c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.36: Usage of assertLessThan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.36: Использование assertLessThan ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa30fd8be5f35796399708bf5d2d7a66346c0f43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.37: Usage of assertLessThanOrEqual()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.37: Использование assertLessThanOrEqual ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3acbf10effb60d96d7eb9c4996742e7ea52d7b02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.38: Usage of assertNan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.38: Использование assertNan ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7747bc525af8da35664d51724a247c41be09b3d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.39: Usage of assertNull()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.39: Использование assertNull ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f80756c63468915680f1b50c7c12246bcb07ad9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.3: Usage of assertArraySubset()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.3: Использование assertArraySubset ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc15016a5440ea5b2743fbb1c33cec2f16270b9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.40: Usage of assertObjectHasAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.40: Использование assertObjectHasAttribute ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dff3bd64d56f30da1fdebab0131c3fd16f814ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.41: Usage of assertRegExp()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.41: Использование assertRegExp ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c7354915ab2413413e130ef0aab14fc9495a9ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.42: Usage of assertStringMatchesFormat()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.42: Использование assertStringMatchesFormat ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3a2b9c61eee627e5dc1d053e968ee3c83d4481b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.43: Usage of assertStringMatchesFormatFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.43: Использование assertStringMatchesFormatFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2820324d97d3b483b9722c7986852ebed8a1a10f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.44: Usage of assertSame()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.44: Использование assertSame ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27c830a0acc3c2414579c526195cb14e469b0613" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.45: Usage of assertSame() with objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.45: Использование assertSame () с объектами&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02a5eff84afe7d9c78bc6eb4a81936e4067d2eb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.46: Usage of assertStringEndsWith()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.46: Использование assertStringEndsWith ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0154f6a484ab546365b94b7005f98a1fdf2911ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.47: Usage of assertStringEqualsFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.47: Использование assertStringEqualsFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53275d60898fdc2c1138cbbd1cf9e3b720e447da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.48: Usage of assertStringStartsWith()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.48: Использование assertStringStartsWith ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4b1f22d0855542a9d01057914b5e2bdc86fcadc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.49: Usage of assertThat()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.49: Использование assertThat ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28a84c2171dd608bc366b9d75254dc16ff1a6b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.4: Usage of assertClassHasStaticAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.4: Использование assertClassHasStaticAttribute ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="458a3c8c4060d0316b44082fbbec69403e3b1260" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.50: Usage of assertTrue()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.50: Использование assertTrue ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a34a2d47d40eff400d4355618bd4240c3bce27f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.51: Usage of assertXmlFileEqualsXmlFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.51: Использование assertXmlFileEqualsXmlFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc33ebce62eef496820b06632463d8e2109abddc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.52: Usage of assertXmlStringEqualsXmlFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.52: Использование assertXmlStringEqualsXmlFile ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4e18e1dcbd81f0461109943b3db45c0dbd9b342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.53: Usage of assertXmlStringEqualsXmlString()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.53: Использование assertXmlStringEqualsXmlString ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af7ad99dd26e50663c62bffc7aaa3f073f8fbe67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.5: Usage of assertContains()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.5: Использование assertContains ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="596ee04219444986f41d1e415c972f4f7f506081" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.6: Usage of assertContains()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.6: Использование assertContains ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="13669e023b1824a325563fc89d66ba03f55cc6f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.7: Usage of assertContains() with $ignoreCase&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.7: Использование assertContains () с $ ignoreCase&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ac4b1d8cbfae3af57cc82b68a6a7d79e5208ef2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.8: Usage of assertContainsOnly()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.8: Использование assertContainsOnly ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80d7cb0b817f5beec307aba4c4d0236f8a21ecfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.9: Usage of assertContainsOnlyInstancesOf()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример A.9: Использование assertContainsOnlyInstancesOf ()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7650b0e8c05d5ef97fbdf23514d65ac454afb01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example B.1: Using @coversDefaultClass to shorten annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Пример B.1: Использование @coversDefaultClass для сокращения аннотаций&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="073210a00d5fa45bd9df8274c4dd2535c9be8f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you upload PHPUnit to a webserver then your deployment process is broken. On a more general note, if your&lt;/strong&gt;&lt;code&gt;vendor&lt;/code&gt;&lt;strong&gt;directory is publicly accessible on your webserver then your deployment process is also broken.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66aa927b841af8df3a63737dbc16a05e9ddd1a9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; You cannot use both exclude and include column filtering on the same table, only on different ones. Plus it is only possible to either white- or blacklist tables, not both of them.</source>
          <target state="translated">&lt;strong&gt;ПРИМЕЧАНИЕ.&lt;/strong&gt; Вы не можете использовать и исключить, и включить фильтрацию столбцов в одной и той же таблице, только в разных. Кроме того, можно только занести в белый или черный список таблицы, но не сразу.</target>
        </trans-unit>
        <trans-unit id="b87a15bfa1b58872f114180bc75b59c194920677" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See &lt;a href=&quot;appendixes.annotations#appendixes.annotations.preserveGlobalState&quot;&gt;the section called &amp;ldquo;@preserveGlobalState&amp;rdquo;&lt;/a&gt; for information on how to fix this.</source>
          <target state="translated">&lt;strong&gt;Примечание.&lt;/strong&gt; По умолчанию PHPUnit пытается сохранить глобальное состояние родительского процесса путем сериализации всех глобальных объектов в родительском процессе и десериализации их в дочернем процессе. Это может вызвать проблемы, если родительский процесс содержит глобальные объекты, которые нельзя сериализовать. См. &lt;a href=&quot;appendixes.annotations#appendixes.annotations.preserveGlobalState&quot;&gt;Раздел &amp;laquo;@preserveGlobalState&amp;raquo;&lt;/a&gt; для получения информации о том, как это исправить.</target>
        </trans-unit>
        <trans-unit id="a9d5848d35fc2622b4d7b23219382b545f9e7a06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 2.1. Methods for testing output&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица 2.1. Методы тестирования вывода&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a89720e839260a52342ef4a94f7b862594dcaf83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.1. API for Incomplete Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица 7.1. API для неполных тестов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4fb857dbab5f2ea34038ce911b3fc490dd1162e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.2. API for Skipping Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица 7.2. API для пропуска тестов&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4bbb8cad9580045ba301953f1b21d33e5f5c245" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.3. Possible @requires usages&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица 7.3. Возможное использование @requires&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c0748eb24691eb17b6ca9df3288c1a5f9b53cb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.1. Matchers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица 9.1. Матчеры&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3cbaf389f90efbe04d952bc290a7728446d8c030" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table A.1. Constraints&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица A.1. Ограничения&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d90a265485244059468af81342d0e68c2f6ed844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table B.1. Annotations for specifying which methods are covered by a test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Таблица B.1. Аннотации для указания, какие методы охватываются тестом&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2699d1c02b4ea0cbb6563ef868b78a8c8a882e12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is a Fixture?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Что такое приспособление?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51da0ac1fccf633acd01ec4e660cec7a9e944c11" translate="yes" xml:space="preserve">
          <source>@after</source>
          <target state="translated">@after</target>
        </trans-unit>
        <trans-unit id="eef9279e1a9d0164589382778d6f18b8b94a377f" translate="yes" xml:space="preserve">
          <source>@afterClass</source>
          <target state="translated">@afterClass</target>
        </trans-unit>
        <trans-unit id="b08cced4776283da785202f5e6d9dd80b243deaf" translate="yes" xml:space="preserve">
          <source>@author</source>
          <target state="translated">@author</target>
        </trans-unit>
        <trans-unit id="1ea579ab15beb61d0bcb4210f3099841f91835d3" translate="yes" xml:space="preserve">
          <source>@backupGlobals</source>
          <target state="translated">@backupGlobals</target>
        </trans-unit>
        <trans-unit id="9b117699b179c399a73fde79e709cdb114ce33cf" translate="yes" xml:space="preserve">
          <source>@backupStaticAttributes</source>
          <target state="translated">@backupStaticAttributes</target>
        </trans-unit>
        <trans-unit id="70b9df4b287ab4e833df221716fa991965d7422f" translate="yes" xml:space="preserve">
          <source>@before</source>
          <target state="translated">@before</target>
        </trans-unit>
        <trans-unit id="b36d2c154f66e9ebade5bed9bc3bb2642fa1616f" translate="yes" xml:space="preserve">
          <source>@beforeClass</source>
          <target state="translated">@beforeClass</target>
        </trans-unit>
        <trans-unit id="6c7c02caca2893e30191e36734cfead82ad3b0e6" translate="yes" xml:space="preserve">
          <source>@codeCoverageIgnore*</source>
          <target state="translated">@codeCoverageIgnore*</target>
        </trans-unit>
        <trans-unit id="eb3c1c50649fa034560002fbdf35fd6a4ac3473e" translate="yes" xml:space="preserve">
          <source>@covers</source>
          <target state="translated">@covers</target>
        </trans-unit>
        <trans-unit id="5853aba9457f169c8dd4e672c90c1d241a65ae43" translate="yes" xml:space="preserve">
          <source>@coversDefaultClass</source>
          <target state="translated">@coversDefaultClass</target>
        </trans-unit>
        <trans-unit id="9588cf2d07a92a9464729a382f542ed02b1705b3" translate="yes" xml:space="preserve">
          <source>@coversNothing</source>
          <target state="translated">@coversNothing</target>
        </trans-unit>
        <trans-unit id="839d622467804554eea76f2beb4520670fc2ca6d" translate="yes" xml:space="preserve">
          <source>@dataProvider</source>
          <target state="translated">@dataProvider</target>
        </trans-unit>
        <trans-unit id="94d8b80d80517c3257d9f20cbac36b81fedf378e" translate="yes" xml:space="preserve">
          <source>@depends</source>
          <target state="translated">@depends</target>
        </trans-unit>
        <trans-unit id="2c427dd45bd3a13a66fccedef92e49c0b8eda30b" translate="yes" xml:space="preserve">
          <source>@doesNotPerformAssertions</source>
          <target state="translated">@doesNotPerformAssertions</target>
        </trans-unit>
        <trans-unit id="2e1ff92e3578dd7901644f6db945d221b5ed1f98" translate="yes" xml:space="preserve">
          <source>@expectedException</source>
          <target state="translated">@expectedException</target>
        </trans-unit>
        <trans-unit id="21d721c654a9d3db3d6e722922ae65eeda48d566" translate="yes" xml:space="preserve">
          <source>@expectedExceptionCode</source>
          <target state="translated">@expectedExceptionCode</target>
        </trans-unit>
        <trans-unit id="ec58c45d6034e1cdfc35f781f34bb42b74f3066a" translate="yes" xml:space="preserve">
          <source>@expectedExceptionMessage</source>
          <target state="translated">@expectedExceptionMessage</target>
        </trans-unit>
        <trans-unit id="be1c50f6c30b95242acb8cbb1553e3e553daa646" translate="yes" xml:space="preserve">
          <source>@expectedExceptionMessageRegExp</source>
          <target state="translated">@expectedExceptionMessageRegExp</target>
        </trans-unit>
        <trans-unit id="c77112aa45ef7f201f2f327cfc23617979163387" translate="yes" xml:space="preserve">
          <source>@group</source>
          <target state="translated">@group</target>
        </trans-unit>
        <trans-unit id="5587692fda860004ad973f85238abc153fd6931b" translate="yes" xml:space="preserve">
          <source>@large</source>
          <target state="translated">@large</target>
        </trans-unit>
        <trans-unit id="f8feb4eb116cc7094e32370c1fefe8d96217f639" translate="yes" xml:space="preserve">
          <source>@medium</source>
          <target state="translated">@medium</target>
        </trans-unit>
        <trans-unit id="12fe6e2e9f2c461eca3144e9178b41d314d7d8c7" translate="yes" xml:space="preserve">
          <source>@preserveGlobalState</source>
          <target state="translated">@preserveGlobalState</target>
        </trans-unit>
        <trans-unit id="2eecd823a7ca0fb7891bca567711b65be2e71039" translate="yes" xml:space="preserve">
          <source>@requires</source>
          <target state="translated">@requires</target>
        </trans-unit>
        <trans-unit id="4cdb22e630ac6752cf8f0c4f0103c87c5f55ba90" translate="yes" xml:space="preserve">
          <source>@requires OS Linux</source>
          <target state="translated">@ требует ОС Linux</target>
        </trans-unit>
        <trans-unit id="bdc783d23000d16909cca6ef7e0ec861afb042c2" translate="yes" xml:space="preserve">
          <source>@requires OS WIN32|WINNT</source>
          <target state="translated">@ требует ОС WIN32 | WINNT</target>
        </trans-unit>
        <trans-unit id="2b3533527c52377b63529d3b13717f02b5ebf6dd" translate="yes" xml:space="preserve">
          <source>@requires OSFAMILY Solaris</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74c6629c86efb61875369a0bf36d5bb5ac9d0f0" translate="yes" xml:space="preserve">
          <source>@requires OSFAMILY Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1b06ac02ba337ba5da659544bc2bfb035625c" translate="yes" xml:space="preserve">
          <source>@requires PHP &amp;gt;= 7.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5eda49db975d974a65b119d4fa5ecb62d2e8569" translate="yes" xml:space="preserve">
          <source>@requires PHP 5.3.3</source>
          <target state="translated">@requires PHP 5.3.3</target>
        </trans-unit>
        <trans-unit id="84d5bc547790cdfca901bebf63549d063a2fa920" translate="yes" xml:space="preserve">
          <source>@requires PHP 7.1-dev</source>
          <target state="translated">@requires PHP 7.1-dev</target>
        </trans-unit>
        <trans-unit id="fb1774faa93f273647b365cad8726dad1182ef7f" translate="yes" xml:space="preserve">
          <source>@requires PHP 7.1.20</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e2a498540d29b74e5709f103e0f51cd111c690" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit &amp;lt; 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a84282d4fcdefa50fb2b42304164d166e76a7e" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 3.6.3</source>
          <target state="translated">@requires PHPUnit 3.6.3</target>
        </trans-unit>
        <trans-unit id="bf836d538f3f0531ef8e5874c228f034e5573cc1" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 4.6</source>
          <target state="translated">@requires PHPUnit 4.6</target>
        </trans-unit>
        <trans-unit id="a9c0a8006f235bbab4c7adef5741f8ecbebc0f72" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 7.3.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0c7b57a34438d4a040fd02c874adf2c6b4e8c0" translate="yes" xml:space="preserve">
          <source>@requires extension mysqli</source>
          <target state="translated">@requires расширение mysqli</target>
        </trans-unit>
        <trans-unit id="22ebbb8522e61c6294e6e82b0e2b7fd1b2544088" translate="yes" xml:space="preserve">
          <source>@requires extension redis &amp;gt;= 2.2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c39b916a7d2a02f4779b40538f5f2a90d35a97" translate="yes" xml:space="preserve">
          <source>@requires extension redis 2.2.0</source>
          <target state="translated">@requires расширение redis 2.2.0</target>
        </trans-unit>
        <trans-unit id="992301fe011b880b365bf0d13406d7770c8304f8" translate="yes" xml:space="preserve">
          <source>@requires function ReflectionMethod::setAccessible</source>
          <target state="translated">@requires функция ReflectionMethod :: setAccessible</target>
        </trans-unit>
        <trans-unit id="2583539f5d19f5f90413b83f0ed40c89365ef937" translate="yes" xml:space="preserve">
          <source>@requires function imap_open</source>
          <target state="translated">@requires функция imap_open</target>
        </trans-unit>
        <trans-unit id="7925a78d610d25b7a884488b7fa7c303d626375f" translate="yes" xml:space="preserve">
          <source>@runInSeparateProcess</source>
          <target state="translated">@runInSeparateProcess</target>
        </trans-unit>
        <trans-unit id="a71b3e90026751695df553604d49f5b67117db53" translate="yes" xml:space="preserve">
          <source>@runTestsInSeparateProcesses</source>
          <target state="translated">@runTestsInSeparateProcesses</target>
        </trans-unit>
        <trans-unit id="b15a3e44fa587476d9f569f614f161718d9f425b" translate="yes" xml:space="preserve">
          <source>@small</source>
          <target state="translated">@small</target>
        </trans-unit>
        <trans-unit id="bd2ccff7430fd392cf27f2c3cc394f784e2232f6" translate="yes" xml:space="preserve">
          <source>@test</source>
          <target state="translated">@test</target>
        </trans-unit>
        <trans-unit id="3758f4fc55edda2c777b77832aa789c923c19bfe" translate="yes" xml:space="preserve">
          <source>@testWith</source>
          <target state="translated">@testWith</target>
        </trans-unit>
        <trans-unit id="d757d33fb5ba9b2880a44a9bc5cc88422f37d8f2" translate="yes" xml:space="preserve">
          <source>@testdox</source>
          <target state="translated">@testdox</target>
        </trans-unit>
        <trans-unit id="c34a78ebd8571dab0d7392cee3bbf594637f2ce6" translate="yes" xml:space="preserve">
          <source>@ticket</source>
          <target state="translated">@ticket</target>
        </trans-unit>
        <trans-unit id="c8166c254ebb7f136d18982b3353e78cc615af25" translate="yes" xml:space="preserve">
          <source>@uses</source>
          <target state="translated">@uses</target>
        </trans-unit>
        <trans-unit id="bd38f8da2615fd4ce69bc44606dbb7ba4303d469" translate="yes" xml:space="preserve">
          <source>A &quot;bootstrap&quot; PHP file that is run before the tests.</source>
          <target state="translated">PHP-файл &quot;bootstrap&quot;,который запускается перед тестированием.</target>
        </trans-unit>
        <trans-unit id="b11c581ce7917127817a72c8269dcd7f99c49a52" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;bootstrap&amp;rdquo; PHP file that is run before the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d73be34f9585bdc839dda049e516f732db5334" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; element must have a &lt;code&gt;name&lt;/code&gt; attribute and may have one or more &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; child elements that configure directories and/or files, respectively, that should be searched for tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe4de63745284e6ccb7b180c62dde2b5c5529f" translate="yes" xml:space="preserve">
          <source>A PHP DataSet has obvious advantages over all the other file-based datasets:</source>
          <target state="translated">PHP DataSet имеет очевидные преимущества перед всеми остальными наборами файловых данных:</target>
        </trans-unit>
        <trans-unit id="a2cc0a4098a413d65c205891e90d2e0f34f9d949" translate="yes" xml:space="preserve">
          <source>A central concept of PHPUnit's Database Extension are DataSets and DataTables. You should try to understand this simple concept to master database testing with PHPUnit. The DataSet and DataTable are an abstraction layer around your database tables, rows and columns. A simple API hides the underlying database contents in an object structure, which can also be implemented by other non-database sources.</source>
          <target state="translated">Центральной концепцией расширения базы данных PHPUnit являются DataSet и DataTables.Вы должны попытаться понять эту простую концепцию,чтобы овладеть тестированием баз данных с помощью PHPUnit.DataSet и DataTable-это уровень абстракции вокруг таблиц,строк и столбцов вашей базы данных.Простой API скрывает содержимое баз данных в объектной структуре,которая также может быть реализована другими небазовыми источниками.</target>
        </trans-unit>
        <trans-unit id="5b9c466f16b0f5f8a7262bc98a8bd1d3f37da6bc" translate="yes" xml:space="preserve">
          <source>A common question, especially from developers new to PHPUnit, is whether using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, is &quot;the right way&quot; to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.</source>
          <target state="translated">&lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; вопрос, особенно от разработчиков, плохо знакомых с PHPUnit, заключается в том, является ли использование $ this-&amp;gt; assertTrue () или &lt;code&gt;self::assertTrue()&lt;/code&gt; , например, &amp;laquo;правильным способом&amp;raquo; для вызова утверждения. Короткий ответ: нет правильного пути. И неправильного пути тоже нет. Это вопрос личных предпочтений.</target>
        </trans-unit>
        <trans-unit id="dc0344e9f82e7d92286b2b64e1e890407936cef8" translate="yes" xml:space="preserve">
          <source>A common question, especially from developers new to PHPUnit, is whether using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, is &amp;ldquo;the right way&amp;rdquo; to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce940dc93f69307efa6648bad3ae55fc78c1b01" translate="yes" xml:space="preserve">
          <source>A complete list of possibilities and examples can be found at &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests-requires-tables-api&quot;&gt;Possible @requires usages&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881acaaeaf80f46271da9620d6c9f77b3e887eac" translate="yes" xml:space="preserve">
          <source>A complete list of possibilities and examples can be found at &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.requires.tables.api&quot;&gt;Table 7.3&lt;/a&gt;</source>
          <target state="translated">Полный список возможностей и примеров можно найти в &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.requires.tables.api&quot;&gt;Таблице 7.3.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9f5037806635c8da7cf25ff7b7b5be88d00106e" translate="yes" xml:space="preserve">
          <source>A consumer is a test method that depends on one or more producers and their return values.</source>
          <target state="translated">Потребитель-это метод тестирования,который зависит от одного или нескольких производителей и их доходности.</target>
        </trans-unit>
        <trans-unit id="87bc3e8d56e3576276d336c4a3bf6c980298be30" translate="yes" xml:space="preserve">
          <source>A data provider method must be &lt;code&gt;public&lt;/code&gt; and either return an array of arrays or an object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments.</source>
          <target state="translated">Метод поставщика данных должен быть &lt;code&gt;public&lt;/code&gt; и либо возвращать массив массивов, либо объект, который реализует интерфейс &lt;code&gt;Iterator&lt;/code&gt; и дает массив для каждого шага итерации. Для каждого массива, который является частью коллекции, будет вызываться тестовый метод с содержимым массива в качестве аргументов.</target>
        </trans-unit>
        <trans-unit id="e0d64528687f619a62dbbc84308c8f617fa79ee4" translate="yes" xml:space="preserve">
          <source>A data set consists of one or many elements. To define a data set with multiple elements, define each element in a separate line. Each element of the data set must be an array defined in JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad2307db6b9c400a642024bfb42e597e930b0ef" translate="yes" xml:space="preserve">
          <source>A doc comment in PHP must start with &lt;code&gt;/**&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;. Annotations in any other style of comment will be ignored.</source>
          <target state="translated">Комментарий документа в PHP должен начинаться с &lt;code&gt;/**&lt;/code&gt; и заканчиваться &lt;code&gt;*/&lt;/code&gt; . Аннотации в любом другом стиле комментариев игнорируются.</target>
        </trans-unit>
        <trans-unit id="fc8287b85560cce71af927479091e1fe87da5236" translate="yes" xml:space="preserve">
          <source>A drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies&quot;&gt;Test Dependencies&lt;/a&gt;. In the next section you will see how you can make the test execution order explicit by using the XML configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd541708c4fd27e803dc828564f00ecf3458d4b8" translate="yes" xml:space="preserve">
          <source>A drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;the section called &amp;ldquo;Test Dependencies&amp;rdquo;&lt;/a&gt;. In the next section you will see how you can make the test execution order explicit by using the XML configuration file.</source>
          <target state="translated">Недостатком этого подхода является то, что мы не можем контролировать порядок, в котором выполняются тесты. Это может привести к проблемам с тестовыми зависимостями, см. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;Раздел &amp;laquo;Тестовые зависимости&amp;raquo;&lt;/a&gt; . В следующем разделе вы увидите, как можно явно указать порядок выполнения теста с помощью файла конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="7809ae599295b4dd632a11320a1f45ab8ec8c88f" translate="yes" xml:space="preserve">
          <source>A fixture describes the initial state your application and database are in when you execute a test.</source>
          <target state="translated">Приспособление описывает начальное состояние вашего приложения и базы данных при выполнении теста.</target>
        </trans-unit>
        <trans-unit id="fdd2b82e21f85df0f3ae4eeab236d6f44282531f" translate="yes" xml:space="preserve">
          <source>A global variable &lt;code&gt;$foo = 'bar';&lt;/code&gt; is stored as &lt;code&gt;$GLOBALS['foo'] = 'bar';&lt;/code&gt;.</source>
          <target state="translated">Глобальная переменная &lt;code&gt;$foo = 'bar';&lt;/code&gt; хранится как &lt;code&gt;$GLOBALS['foo'] = 'bar';&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c6abca3eabc3075164e1273782032e88ce6fc58" translate="yes" xml:space="preserve">
          <source>A good example of a fixture that makes sense to share across several tests is a database connection: you log into the database once and reuse the database connection instead of creating a new connection for each test. This makes your tests run faster.</source>
          <target state="translated">Хорошим примером приспособления,которым имеет смысл поделиться с другими тестами,является подключение к базе данных:вы заходите в базу данных один раз и повторно используете подключение к базе данных вместо того,чтобы создавать новое подключение для каждого теста.Это ускоряет выполнение тестов.</target>
        </trans-unit>
        <trans-unit id="4667d071c3dac07a47cfa5cffc291f6e73e132e5" translate="yes" xml:space="preserve">
          <source>A method with name &lt;code&gt;$method&lt;/code&gt; must exist on the &lt;code&gt;$actual&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ad2bd541722a94b4a67310fdbfeba1c136d7c5" translate="yes" xml:space="preserve">
          <source>A producer is a test method that yields its unit under test as return value.</source>
          <target state="translated">Производитель-это метод тестирования,при котором единица измерения тестируется как возвращаемая величина.</target>
        </trans-unit>
        <trans-unit id="8e6f4cf7fffc73d4e7408e5c1d91cde257740414" translate="yes" xml:space="preserve">
          <source>A regexp matching &lt;a href=&quot;http://php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;PHP_OS&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;Регулярное&lt;/a&gt; выражение, соответствующее PHP_OS</target>
        </trans-unit>
        <trans-unit id="600aabf9b87f60ff54c35cb779f359c079d9842c" translate="yes" xml:space="preserve">
          <source>A regexp matching &lt;a href=&quot;https://www.php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;PHP_OS&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779505ea2e787ef60c25b732ac7ebee50d45a2d6" translate="yes" xml:space="preserve">
          <source>A simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; method. See &lt;a href=&quot;#test-doubles-stubs-examples-stubtest7-php&quot;&gt;Example 8.9&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94edd608d6f115d9df0299e3359fe07c53829de8" translate="yes" xml:space="preserve">
          <source>A simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; method. See &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest7.php&quot;&gt;Example 9.8&lt;/a&gt; for an example.</source>
          <target state="translated">Более простой альтернативой настройке метода обратного вызова может быть указание списка желаемых возвращаемых значений. Вы можете сделать это с помощью &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; . См. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest7.php&quot;&gt;Пример в примере 9.8&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8d9defe78836483213d5fcf93968970a4622e6d1" translate="yes" xml:space="preserve">
          <source>A table is also represented by the following interface:</source>
          <target state="translated">Таблица также представлена следующим интерфейсом:</target>
        </trans-unit>
        <trans-unit id="6df2a99c06dcb440a325fdd8286ea0c2a923de8b" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@large&lt;/code&gt; will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f8c420b8b61a63466acecb0a6e794694162b04" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@large&lt;/code&gt; will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Тест, &lt;code&gt;@large&lt;/code&gt; завершится неудачно, если его выполнение займет более 60 секунд. Этот тайм-аут настраивается с помощью атрибута &lt;code&gt;timeoutForLargeTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="c0dca38740172f19f41c60f049eb9804c07d8318" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@medium&lt;/code&gt; will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Тест, &lt;code&gt;@medium&lt;/code&gt; завершится неудачно, если его выполнение займет больше 10 секунд. Этот тайм-аут настраивается с помощью атрибута &lt;code&gt;timeoutForMediumTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="af849cab2e533581291de611e36dd2cdbff8aaef" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@medium&lt;/code&gt; will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the configuration &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821e7b788ee16c7a06aa9b34a401b2b2589eca6c" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@small&lt;/code&gt; will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef80ef17fc5a4b1d7abfe0e64e4fa918e225ad84" translate="yes" xml:space="preserve">
          <source>A test can be tagged as belonging to one or more groups using the &lt;code&gt;@group&lt;/code&gt; annotation like this</source>
          <target state="translated">Тест можно пометить как принадлежащий к одной или нескольким группам, используя аннотацию &lt;code&gt;@group&lt;/code&gt; , подобную этой</target>
        </trans-unit>
        <trans-unit id="9e86986342fad073dbad7d712faaab7d085f0a3f" translate="yes" xml:space="preserve">
          <source>A test may have more than one &lt;code&gt;@depends&lt;/code&gt; annotation. PHPUnit does not change the order in which tests are executed, you have to ensure that the dependencies of a test can actually be met before the test is run.</source>
          <target state="translated">В тесте может быть более одной аннотации &lt;code&gt;@depends&lt;/code&gt; . PHPUnit не изменяет порядок, в котором выполняются тесты, вы должны убедиться, что зависимости теста действительно могут быть выполнены до запуска теста.</target>
        </trans-unit>
        <trans-unit id="51e4deafef7f62319d5ddb7e9da275eecd586eed" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (&lt;code&gt;additionProvider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="translated">Тестовый метод может принимать произвольные аргументы. Эти аргументы должны быть предоставлены методом поставщика данных ( &lt;code&gt;additionProvider()&lt;/code&gt; в &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;примере 2.5&lt;/a&gt; ). Используемый метод поставщика данных указывается с &lt;code&gt;@dataProvider&lt;/code&gt; аннотации @dataProvider .</target>
        </trans-unit>
        <trans-unit id="671dba06ced306515f4a13da3ef267812d9ecc75" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (&lt;code&gt;provider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="translated">Тестовый метод может принимать произвольные аргументы. Эти аргументы должны быть предоставлены методом поставщика данных ( &lt;code&gt;provider()&lt;/code&gt; в &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;примере 2.5&lt;/a&gt; ). Используемый метод поставщика данных указывается с &lt;code&gt;@dataProvider&lt;/code&gt; аннотации @dataProvider .</target>
        </trans-unit>
        <trans-unit id="2bf3e9b493b37ef620d22203e70956a50b9d18fc" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (&lt;code&gt;additionProvider()&lt;/code&gt; in &lt;a href=&quot;#writing-tests-for-phpunit-data-providers-examples-datatest-php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c06ef0cf08328b364d68a2ec37651075f84095" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (&lt;code&gt;provider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers-examples-datatest-php&quot;&gt;Using a data provider that returns an array of arrays&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6251fd3e2668fd6fad90f7b9a7f3f187dd31a98b" translate="yes" xml:space="preserve">
          <source>A test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects count as an assertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb072bd6f310b4f9022e694353efc0c9bd55208" translate="yes" xml:space="preserve">
          <source>A test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects or annotations such as &lt;code&gt;@expectedException&lt;/code&gt; count as an assertion.</source>
          <target state="translated">Если эта проверка включена, тест, не выполняющий утверждения, будет отмечен как рискованный. Ожидания от фиктивных объектов или аннотаций, таких как &lt;code&gt;@expectedException&lt;/code&gt; , считаются утверждением.</target>
        </trans-unit>
        <trans-unit id="86ceceb320681a7883f4791702c4f6dff9b072c4" translate="yes" xml:space="preserve">
          <source>A test that emits output will fail in strict mode.</source>
          <target state="translated">Тест,излучающий выходной сигнал,не будет работать в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="31af49b1f7286bf4c1d516a41d1cadbc83ef2401" translate="yes" xml:space="preserve">
          <source>A test that emits output, for instance by invoking &lt;code&gt;print&lt;/code&gt; in either the test code or the tested code, will be marked as risky when this check is enabled.</source>
          <target state="translated">Тест, который генерирует выходные данные, например, путем вызова &lt;code&gt;print&lt;/code&gt; либо в тестовом коде, либо в тестируемом коде, будет отмечен как рискованный, если эта проверка включена.</target>
        </trans-unit>
        <trans-unit id="229a3ab640cdc06fd12e52e688b3cdd1b01636ee" translate="yes" xml:space="preserve">
          <source>A test that emits output, for instance by invoking print in either the test code or the tested code, will be marked as risky when this check is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda6dde946e10b867b2d0a93222eb709263b939e" translate="yes" xml:space="preserve">
          <source>A test that has been skipped is denoted by an &lt;code&gt;S&lt;/code&gt; in the output of the PHPUnit command-line test runner, as shown in the following example:</source>
          <target state="translated">Пропущенный тест обозначается буквой &lt;code&gt;S&lt;/code&gt; в выходных данных средства запуска тестов командной строки PHPUnit, как показано в следующем примере:</target>
        </trans-unit>
        <trans-unit id="e66a819741880101484dd8e351d7b20b57454af4" translate="yes" xml:space="preserve">
          <source>A test that has more than one &lt;code&gt;@depends&lt;/code&gt; annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See &lt;a href=&quot;#writing-tests-for-phpunit-examples-multipledependencies-php&quot;&gt;Example 2.4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1f03337962460f29f571536b5cd0bb7fe5bb92" translate="yes" xml:space="preserve">
          <source>A test that has more than one &lt;code&gt;@depends&lt;/code&gt; annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.MultipleDependencies.php&quot;&gt;Example 2.4&lt;/a&gt;</source>
          <target state="translated">Тест, имеющий более одной аннотации &lt;code&gt;@depends&lt;/code&gt; , получит фикстуру от первого производителя в качестве первого аргумента, фикстуру от второго производителя в качестве второго аргумента и так далее. См. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.MultipleDependencies.php&quot;&gt;Пример 2.4.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="59e3c0958c12eda58f6ec62c99b7cb984ce628e2" translate="yes" xml:space="preserve">
          <source>A test that is annotated with &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; and executes code that is not listed using a &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; or &lt;a href=&quot;annotations#appendixes-annotations-uses&quot;&gt;@uses&lt;/a&gt; annotation will be marked as risky when this check is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e402e1062e2da2deb0b60194c07ecce012b544fe" translate="yes" xml:space="preserve">
          <source>A test that is annotated with &lt;code&gt;@covers&lt;/code&gt; and executes code that is not listed using a &lt;code&gt;@covers&lt;/code&gt; or &lt;code&gt;@uses&lt;/code&gt; annotation will be marked as risky when this check is enabled.</source>
          <target state="translated">Тест, &lt;code&gt;@covers&lt;/code&gt; и выполняющий код, который не указан в аннотации &lt;code&gt;@covers&lt;/code&gt; или &lt;code&gt;@uses&lt;/code&gt; , будет помечен как рискованный, если эта проверка включена.</target>
        </trans-unit>
        <trans-unit id="bdebb184bcf44955f83278fe9a6f20ee4973c4b7" translate="yes" xml:space="preserve">
          <source>A test that is not annotated with &lt;code&gt;@medium&lt;/code&gt; or &lt;code&gt;@large&lt;/code&gt; will be treated as if it were annotated with &lt;code&gt;@small&lt;/code&gt;. A small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Тест, не &lt;code&gt;@medium&lt;/code&gt; или &lt;code&gt;@large&lt;/code&gt; , будет обработан так, как если бы он был аннотирован &lt;code&gt;@small&lt;/code&gt; . Небольшой тест завершится неудачно, если его выполнение займет больше 1 секунды. Этот тайм-аут настраивается с помощью атрибута &lt;code&gt;timeoutForSmallTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="b9d2246fcc3545816519ed19451da77cf6e38996" translate="yes" xml:space="preserve">
          <source>A time limit can be enforced for the execution of a test if the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and the &lt;code&gt;pcntl&lt;/code&gt; extension is available. The enforcing of this time limit can be enabled by using the &lt;code&gt;--enforce-time-limit&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;enforceTimeLimit=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92186c74c6ed2a2426731489bf9bcf1fc3984a05" translate="yes" xml:space="preserve">
          <source>A time limit can be enforced for the execution of a test if the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and the &lt;code&gt;pcntl&lt;/code&gt; extension is available. The enforcing of this time limit can be enabled by using the &lt;code&gt;--enforce-time-limit&lt;/code&gt; option on the commandline or by setting &lt;code&gt;beStrictAboutTestSize=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">Ограничение по времени может быть применено для выполнения теста, если &lt;code&gt;PHP_Invoker&lt;/code&gt; пакет PHP_Invoker и &lt;code&gt;pcntl&lt;/code&gt; расширение pcntl . Применение этого ограничения по времени можно включить с помощью параметра &lt;code&gt;--enforce-time-limit&lt;/code&gt; в командной строке или путем установки &lt;code&gt;beStrictAboutTestSize=&quot;true&quot;&lt;/code&gt; в XML-файле конфигурации PHPUnit.</target>
        </trans-unit>
        <trans-unit id="35d12a7dc46fb6451a2bb640e4a1c9f6957db27f" translate="yes" xml:space="preserve">
          <source>A utility class for invoking callables with a timeout. This package is required to enforce test timeouts in strict mode.</source>
          <target state="translated">Класс утилиты для вызова абонентов с таймаутом.Данный пакет необходим для введения таймаута тестирования в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="030bb20623fb579952c8b1090c90b671688fd022" translate="yes" xml:space="preserve">
          <source>A workflow for database assertions in your tests then consists of three simple steps:</source>
          <target state="translated">Затем рабочий процесс для утверждения базы данных в ваших тестах состоит из трех простых шагов:</target>
        </trans-unit>
        <trans-unit id="d8ffd49feb9935f7e9eb80f2c14e79dad9a0b8f7" translate="yes" xml:space="preserve">
          <source>Accepts a list of elements of types, which are then used to configure individual extensions. The arguments are passed to the extension class&amp;rsquo; &lt;code&gt;__constructor&lt;/code&gt; method in the order they are defined in the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251021416b971ab79364875e47130a9488c9d09b" translate="yes" xml:space="preserve">
          <source>Accessing the Test Connection you can automatically create a DataSet that consists of all the tables with their content in the database specified as second parameter to the Connections Factory method.</source>
          <target state="translated">Получив доступ к Test Connection,вы можете автоматически создать DataSet,состоящий из всех таблиц с их содержимым в БД,указанным в качестве второго параметра метода Connections Factory.</target>
        </trans-unit>
        <trans-unit id="85fc02247691552165f4f2cd3743c74ed11ba737" translate="yes" xml:space="preserve">
          <source>Add a (development-time) dependency on &lt;code&gt;phpunit/phpunit&lt;/code&gt; to your project&amp;rsquo;s &lt;code&gt;composer.json&lt;/code&gt; file if you use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; to manage the dependencies of your project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c808d07d2cb8ce95017587554acf4491b7bd36" translate="yes" xml:space="preserve">
          <source>Adding a table just by name is an implicit way to define the data-table with the following query:</source>
          <target state="translated">Добавление таблицы просто по имени является неявным способом определения таблицы данных со следующим запросом:</target>
        </trans-unit>
        <trans-unit id="4d705e897f0dc7e07a973b1ee2f827c351764e98" translate="yes" xml:space="preserve">
          <source>Additional options that are not available as command-line options are:</source>
          <target state="translated">Дополнительные опции,которые недоступны в качестве опций командной строки:</target>
        </trans-unit>
        <trans-unit id="b989424c2ac5f9904e7c5edb378dc2e7a030f601" translate="yes" xml:space="preserve">
          <source>Additionally you have to realize that the database is essentially a global input variable to your code. Two tests in your test suite could run against the same database, possibly reusing data multiple times. Failures in one test can easily affect the result of the following tests making your testing experience very difficult. The previously mentioned cleanup step is of major importance to solve the &amp;ldquo;database is a global input&amp;rdquo; problem.</source>
          <target state="translated">Кроме того, вы должны понимать, что база данных по сути является глобальной входной переменной для вашего кода. Два теста в вашем наборе тестов могут выполняться с одной и той же базой данных, возможно, повторно используя данные несколько раз. Сбои в одном тесте могут легко повлиять на результат следующих тестов, что очень затруднит ваше тестирование. Упомянутый ранее этап очистки очень важен для решения проблемы &amp;laquo;база данных является глобальным вводом&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="d902466810f937d060914e2d70d7ec4ada1b74f6" translate="yes" xml:space="preserve">
          <source>After the database is reset and loaded with its initial state the actual test is executed by PHPUnit. This part of the test code does not require awareness of the Database Extension at all, you can go on and test whatever you like with your code.</source>
          <target state="translated">После сброса и загрузки базы данных с ее исходным состоянием фактический тест выполняется PHPUnit'ом.Эта часть тестового кода совсем не требует знания расширения базы данных,вы можете продолжать тестировать свой код по своему усмотрению.</target>
        </trans-unit>
        <trans-unit id="0f1f3af0134958c3701dcdff53fac7c23aa6be82" translate="yes" xml:space="preserve">
          <source>Agile Documentation</source>
          <target state="translated">Быстрая документация</target>
        </trans-unit>
        <trans-unit id="8f87d2a3a2ffbd36f9ed4721a4f33588f19cbf00" translate="yes" xml:space="preserve">
          <source>Agile Documentation can be used to document the assumptions you make about the external packages that you use in your project. When you use an external package, you are exposed to the risks that the package will not behave as you expect, and that future versions of the package will change in subtle ways that will break your code, without you knowing it. You can address these risks by writing a test every time you make an assumption. If your test succeeds, your assumption is valid. If you document all your assumptions with tests, future releases of the external package will be no cause for concern: if the tests succeed, your system should continue working.</source>
          <target state="translated">Agile Документация может быть использована для документирования предположений,которые вы делаете о внешних пакетах,которые вы используете в вашем проекте.Когда вы используете внешний пакет,вы подвергаетесь риску того,что пакет не будет вести себя так,как вы ожидаете,и что будущие версии пакета будут меняться тонкими способами,которые сломают ваш код,без вашего ведома.Вы можете устранить эти риски,написав тест каждый раз,когда вы делаете предположение.Если ваш тест пройдет успешно,ваше предположение будет обоснованным.Если вы задокументируете все свои предположения с помощью тестов,будущие выпуски внешнего пакета не вызовут беспокойства:если тесты пройдут успешно,ваша система должна продолжать работать.</target>
        </trans-unit>
        <trans-unit id="4729c9a351f46bbb612df85877762615144f4a26" translate="yes" xml:space="preserve">
          <source>All data providers are executed before both the call to the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; static method and the first call to the &lt;code&gt;setUp()&lt;/code&gt; method. Because of that you can&amp;rsquo;t access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24d956ff0787e8fa46a1cbd039fd05f428f328a" translate="yes" xml:space="preserve">
          <source>All data providers are executed before both the call to the &lt;code&gt;setUpBeforeClass&lt;/code&gt; static method and the first call to the &lt;code&gt;setUp&lt;/code&gt; method. Because of that you can't access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests.</source>
          <target state="translated">Все поставщики данных выполняются перед вызовом статического метода &lt;code&gt;setUpBeforeClass&lt;/code&gt; и первым вызовом метода &lt;code&gt;setUp&lt;/code&gt; . Из-за этого вы не можете получить доступ к любым переменным, которые вы создаете там, из поставщика данных. Это необходимо для того, чтобы PHPUnit мог вычислить общее количество тестов.</target>
        </trans-unit>
        <trans-unit id="eaef68fd343a420a4c9c8b395e968d9ab2f7bc86" translate="yes" xml:space="preserve">
          <source>All official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA1 hashes are available for verification on &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;phar.phpunit.de&lt;/a&gt;.</source>
          <target state="translated">Все официальные выпуски кода, распространяемые проектом PHPUnit, подписываются менеджером выпуска для выпуска. Подписи PGP и хэши SHA1 доступны для проверки на сайте &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;phar.phpunit.de&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e1bfbb69aa2c5442a36ef06527ecc622eb138867" translate="yes" xml:space="preserve">
          <source>All official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA256 hashes are available for verification on &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;phar.phpunit.de&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa00ad560013bb6da49b999ea951e7f5a8632e5c" translate="yes" xml:space="preserve">
          <source>All unit tests run correctly.</source>
          <target state="translated">Все юнит-тесты выполняются правильно.</target>
        </trans-unit>
        <trans-unit id="90a6a03e0c094a86de1c97c71e87474bb968c195" translate="yes" xml:space="preserve">
          <source>Alternatively, the agile documentation can be generated in HTML or plain text format and written to a file using the &lt;code&gt;--testdox-html&lt;/code&gt; and &lt;code&gt;--testdox-text&lt;/code&gt; arguments.</source>
          <target state="translated">В качестве альтернативы гибкая документация может быть создана в формате HTML или в формате обычного текста и записана в файл с использованием &lt;code&gt;--testdox-html&lt;/code&gt; и &lt;code&gt;--testdox-text&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e40f26b50ad19935744e0cdc1a2de4f033096c53" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use YAML dataset for the guestbook example:</source>
          <target state="translated">В качестве альтернативы вы можете использовать набор данных YAML для примера гостевой книги:</target>
        </trans-unit>
        <trans-unit id="315af3c153b92914eadb98c57a342c67624b5cdc" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@expectedException&lt;/code&gt;, &lt;code&gt;@expectedExceptionCode&lt;/code&gt;, &lt;code&gt;@expectedExceptionMessage&lt;/code&gt;, and &lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; annotations to set up expectations for exceptions raised by the code under test. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php&quot;&gt;Example 2.11&lt;/a&gt; shows an example.</source>
          <target state="translated">В качестве альтернативы вы можете использовать &lt;code&gt;@expectedException&lt;/code&gt; , &lt;code&gt;@expectedExceptionCode&lt;/code&gt; , &lt;code&gt;@expectedExceptionMessage&lt;/code&gt; и &lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; , чтобы настроить ожидания для исключений, вызванных тестируемым кодом. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php&quot;&gt;Пример 2.11&lt;/a&gt; показывает пример.</target>
        </trans-unit>
        <trans-unit id="9b20a442c95350efe028e5aa6031a89d987a4d1d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method&amp;rsquo;s docblock to mark it as a test method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341988a6c9b5702f02140fb3bed1b4fc93feadd3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method's docblock to mark it as a test method.</source>
          <target state="translated">Кроме того, вы можете использовать аннотацию &lt;code&gt;@test&lt;/code&gt; в док-блоке метода, чтобы пометить его как тестовый метод.</target>
        </trans-unit>
        <trans-unit id="5084de858cfba2f5e49ebef591cabe71eeea0e28" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single fa&amp;ccedil;ade, so you can easily replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single &lt;code&gt;Database&lt;/code&gt; object, an implementor of the &lt;code&gt;IDatabase&lt;/code&gt; interface. Then, you can create a stub implementation of &lt;code&gt;IDatabase&lt;/code&gt; and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database.</source>
          <target state="translated">Как вариант, вы можете написать заглушку самостоятельно и попутно улучшать свой дизайн. Доступ к широко используемым ресурсам осуществляется через единый фасад, поэтому вы можете легко заменить ресурс заглушкой. Например, вместо прямых вызовов базы данных, разбросанных по всему коду, у вас есть один объект &lt;code&gt;Database&lt;/code&gt; , реализующий интерфейс &lt;code&gt;IDatabase&lt;/code&gt; . Затем вы можете создать &lt;code&gt;IDatabase&lt;/code&gt; реализацию IDatabase и использовать ее для своих тестов. Вы даже можете создать вариант для запуска тестов с тупиковой базой данных или с реальной базой данных, чтобы вы могли использовать свои тесты как для локального тестирования во время разработки, так и для интеграционного тестирования с реальной базой данных.</target>
        </trans-unit>
        <trans-unit id="0b28c8008adce1dc88665da369db4139375a5a67" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single fa&amp;ccedil;ade, so you can replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single &lt;code&gt;Database&lt;/code&gt; object, an implementor of the &lt;code&gt;IDatabase&lt;/code&gt; interface. Then, you can create a stub implementation of &lt;code&gt;IDatabase&lt;/code&gt; and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a9c3fe6e543c49b380dc2d74013a76e7a379c1" translate="yes" xml:space="preserve">
          <source>Am I required to use PDO in my application for the Database Extension to work?</source>
          <target state="translated">Должен ли я использовать PDO в своем приложении для расширения базы данных для работы?</target>
        </trans-unit>
        <trans-unit id="66a5afe4d6fe67e2daf35e73d91669871d4a61d4" translate="yes" xml:space="preserve">
          <source>An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as &lt;code&gt;@annotation arguments&lt;/code&gt; in a documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API&amp;rsquo;s &lt;code&gt;getDocComment()&lt;/code&gt; method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852c4f19f8b44b0b90fe06e8b12f22127c8dc374" translate="yes" xml:space="preserve">
          <source>An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as &lt;code&gt;@annotation arguments&lt;/code&gt; in a documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API's &lt;code&gt;getDocComment()&lt;/code&gt; method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour.</source>
          <target state="translated">Аннотации - это особая форма синтаксических метаданных, которые могут быть добавлены в исходный код некоторых языков программирования. Хотя PHP не имеет специальной языковой функции для аннотирования исходного кода, использование тегов, таких как &lt;code&gt;@annotation arguments&lt;/code&gt; в блоке документации, было установлено в сообществе PHP для аннотирования исходного кода. В документации PHP блоки являются отражающими: к ним можно получить доступ через метод &lt;code&gt;getDocComment()&lt;/code&gt; API отражения на уровне функции, класса, метода и атрибута. Такие приложения, как PHPUnit, используют эту информацию во время выполнения для настройки своего поведения.</target>
        </trans-unit>
        <trans-unit id="253fcad13584a93785c1425f5afec5813ce1edd3" translate="yes" xml:space="preserve">
          <source>An array of column-names of the table, ordered by their appearance in the result-set.</source>
          <target state="translated">Массив названий столбцов таблицы,упорядоченный по их появлению в результирующем наборе.</target>
        </trans-unit>
        <trans-unit id="1359c099ea01abfcb07df2261c8388ffa9ef100d" translate="yes" xml:space="preserve">
          <source>An array of the primary-key columns.</source>
          <target state="translated">Массив колонок с первичными ключами.</target>
        </trans-unit>
        <trans-unit id="2054754d639ef3322047c5e1e5f32d3452f886dc" translate="yes" xml:space="preserve">
          <source>An incomplete test is denoted by an &lt;code&gt;I&lt;/code&gt; in the output of the PHPUnit command-line test runner, as shown in the following example:</source>
          <target state="translated">Неполный тест обозначается буквой &lt;code&gt;I&lt;/code&gt; в выходных данных средства запуска тестов командной строки PHPUnit, как показано в следующем примере:</target>
        </trans-unit>
        <trans-unit id="1d227c9b737af7387586a8a80d5b7cd620e23406" translate="yes" xml:space="preserve">
          <source>An object representation in JSON will be converted into an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3b78b64190965365f72568ffbe049d4ba32c22" translate="yes" xml:space="preserve">
          <source>Annotation</source>
          <target state="translated">Annotation</target>
        </trans-unit>
        <trans-unit id="74dc68d72e7c6f05cb32f3c5f38a50a1624e1e2a" translate="yes" xml:space="preserve">
          <source>Annotations</source>
          <target state="translated">Annotations</target>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes" xml:space="preserve">
          <source>Another example</source>
          <target state="translated">Другой пример</target>
        </trans-unit>
        <trans-unit id="b7900e9d12a26991b8b19bfcb6a66a6070c45e8b" translate="yes" xml:space="preserve">
          <source>Another file-based dataset is based on CSV files. Each table of the dataset is represented as a single CSV file. For our guestbook example we would define a guestbook-table.csv file:</source>
          <target state="translated">Другой набор данных,основанный на файлах CSV.Каждая таблица набора данных представлена в виде одного файла CSV.Для нашего примера гостевой книги мы бы определили файл guestbook-table.csv:</target>
        </trans-unit>
        <trans-unit id="41ed47350162588d6eeb471d1f899bab61e40ae8" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;https://www.php.net/manual/en/reserved.constants.php#constant.php-os-family&quot;&gt;OS family&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8812a383fa62bd4212581ad1a6fac29d6424e14f" translate="yes" xml:space="preserve">
          <source>Any PHP version identifier</source>
          <target state="translated">Любой идентификатор версии PHP</target>
        </trans-unit>
        <trans-unit id="57196286dbc53fa8522aceeb126dd0622fb3b97e" translate="yes" xml:space="preserve">
          <source>Any PHP version identifier along with an optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f098d828b6863d6311eaee378fd646853b417d67" translate="yes" xml:space="preserve">
          <source>Any PHPUnit version identifier</source>
          <target state="translated">Любой идентификатор версии PHPUnit</target>
        </trans-unit>
        <trans-unit id="5f80153ab6887c9b3c62023afebce36ba4812d58" translate="yes" xml:space="preserve">
          <source>Any PHPUnit version identifier along with an optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8746210bd4969f739e4720404b6ce9b9ff256d" translate="yes" xml:space="preserve">
          <source>Any attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the &quot;real&quot; key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation.</source>
          <target state="translated">Любой злоумышленник может создать публичный ключ и загрузить его на серверы с публичным ключом.Затем они могут создать вредоносный выпуск,подписанный этим поддельным ключом.Тогда,если вы попытаетесь проверить подпись этого поддельного ключа,это удастся,потому что этот ключ не является &quot;настоящим&quot; ключом.Следовательно,вам нужно проверить подлинность этого ключа.Однако проверка подлинности публичного ключа выходит за рамки данной документации.</target>
        </trans-unit>
        <trans-unit id="862bc5e0bb4b4f2843d7c27030639a4862cd8d6c" translate="yes" xml:space="preserve">
          <source>Any attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the &amp;ldquo;real&amp;rdquo; key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0281036f5b2ed678588a68cc4bd8474bf98b6f0" translate="yes" xml:space="preserve">
          <source>Any defined &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; has a name and requires a definition of all the columns with their names. It can contain zero or any positive number of nested &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; elements. Defining no &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; element means the table is empty. The &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; tags have to be specified in the order of the previously given &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt; elements. The &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; tag obviously means that the value is NULL.</source>
          <target state="translated">Любая заданная &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; имеет имя и требует определения всех столбцов с их именами. Он может содержать ноль или любое положительное количество вложенных элементов &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; . Отсутствие элемента &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; означает, что таблица пуста. &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; теги должны быть определены в порядке ранее заданных &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt; элементов. &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; тег , очевидно , означает , что значение NULL.</target>
        </trans-unit>
        <trans-unit id="5b82bd9f1b3b8a177b8a674dc8cdfed69ee652d4" translate="yes" xml:space="preserve">
          <source>Any extension name along with an optional version identifier</source>
          <target state="translated">Любое имя расширения вместе с дополнительным идентификатором версии</target>
        </trans-unit>
        <trans-unit id="6b6ced9c448b1d1cec7e0ba94d3f1534feba644e" translate="yes" xml:space="preserve">
          <source>Any extension name along with an optional version identifier and optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202a521cd27996b3976f115836fdf65fe00c1518" translate="yes" xml:space="preserve">
          <source>Any valid parameter to &lt;a href=&quot;http://php.net/function_exists&quot;&gt;function_exists&lt;/a&gt;</source>
          <target state="translated">Любой допустимый параметр для &lt;a href=&quot;http://php.net/function_exists&quot;&gt;function_exists&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0c6cf8ce791072d0b4b154779d6656664a360e64" translate="yes" xml:space="preserve">
          <source>Any valid parameter to &lt;a href=&quot;https://www.php.net/function_exists&quot;&gt;function_exists&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4201332a1de6b052dff93d0d5eb4c2369d11f231" translate="yes" xml:space="preserve">
          <source>Append &lt;strong&gt;&lt;code&gt;;C:\bin&lt;/code&gt;&lt;/strong&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable (&lt;a href=&quot;http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7&quot;&gt;related help&lt;/a&gt;)</source>
          <target state="translated">Добавьте &lt;strong&gt; &lt;code&gt;;C:\bin&lt;/code&gt; &lt;/strong&gt; в &lt;code&gt;PATH&lt;/code&gt; среды PATH ( &lt;a href=&quot;http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7&quot;&gt;соответствующая справка&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes" xml:space="preserve">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="bf9447567ff6d4b18bca46071957ec2f6263d3ab" translate="yes" xml:space="preserve">
          <source>Array DataSet</source>
          <target state="translated">Array DataSet</target>
        </trans-unit>
        <trans-unit id="937321f965f4720fc6ee97de3632a48b758c09ac" translate="yes" xml:space="preserve">
          <source>As an alternative to prefixing your test method names with &lt;code&gt;test&lt;/code&gt;, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method&amp;rsquo;s DocBlock to mark it as a test method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3770b95d81f58fc6bbac36f8a809cbe7e5c34080" translate="yes" xml:space="preserve">
          <source>As an alternative to prefixing your test method names with &lt;code&gt;test&lt;/code&gt;, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method's DocBlock to mark it as a test method.</source>
          <target state="translated">В качестве альтернативы , предваряя ваши имена методов тестирования с &lt;code&gt;test&lt;/code&gt; , вы можете использовать &lt;code&gt;@test&lt;/code&gt; аннотации в DocBlock-методов , чтобы пометить его как метод тестирования.</target>
        </trans-unit>
        <trans-unit id="6eef4dd88de363a0c4fb7b0fc8a495ae6dfdd156" translate="yes" xml:space="preserve">
          <source>As mentioned in the beginning, when the defaults used by the &lt;code&gt;createMock()&lt;/code&gt; method to generate the test double do not match your needs then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder:</source>
          <target state="translated">Как упоминалось в начале, когда значения по умолчанию, используемые методом &lt;code&gt;createMock()&lt;/code&gt; для генерации тестового двойника, не соответствуют вашим потребностям, вы можете использовать метод &lt;code&gt;getMockBuilder($type)&lt;/code&gt; для настройки генерации тестового двойника с помощью свободного интерфейса. Вот список методов, предоставляемых Mock Builder:</target>
        </trans-unit>
        <trans-unit id="a276921b082a7d510448d0fb6792f16b07b6029f" translate="yes" xml:space="preserve">
          <source>As mentioned in the beginning, when the defaults used by the &lt;code&gt;createStub()&lt;/code&gt; and &lt;code&gt;createMock()&lt;/code&gt; methods to generate the test double do not match your needs then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7afc21b944effb12f3a6b0afd14387c7955a5a" translate="yes" xml:space="preserve">
          <source>As of version 6, PHPUnit does not perform this backup and restore operation for global and super-global variables by default anymore. It can be activated by using the &lt;code&gt;--globals-backup&lt;/code&gt; option or setting &lt;code&gt;backupGlobals=&quot;true&quot;&lt;/code&gt; in the XML configuration file.</source>
          <target state="translated">Начиная с версии 6, PHPUnit больше не выполняет эту операцию резервного копирования и восстановления для глобальных и суперглобальных переменных по умолчанию. Его можно активировать с помощью параметра &lt;code&gt;--globals-backup&lt;/code&gt; или установки &lt;code&gt;backupGlobals=&quot;true&quot;&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="2464c4fd85a2dbd13ef8511120a3a540d5e05729" translate="yes" xml:space="preserve">
          <source>As with any external resource, there might be intermittent problems with the filesystem. This makes tests interacting with it flaky.</source>
          <target state="translated">Как и в случае с любым внешним ресурсом,могут возникнуть периодические проблемы с файловой системой.Это делает тесты,взаимодействующие с ней,нечёткими.</target>
        </trans-unit>
        <trans-unit id="6d4fa0bca965d62ca9ed015c05c5a6528e12dba4" translate="yes" xml:space="preserve">
          <source>Assert that both dataset representations equal each other.</source>
          <target state="translated">Утвердить,что оба представления набора данных равны друг другу.</target>
        </trans-unit>
        <trans-unit id="e87ceb796f38a8355c99301397b3b789f95fc5f3" translate="yes" xml:space="preserve">
          <source>Asserting the Result of a Query</source>
          <target state="translated">Утверждение результата запроса</target>
        </trans-unit>
        <trans-unit id="e0de99efdab9879cb1fac820862ddc7437d1a5d5" translate="yes" xml:space="preserve">
          <source>Asserting the Row-Count of a Table</source>
          <target state="translated">Утверждение количества рядов в таблице</target>
        </trans-unit>
        <trans-unit id="2b03042fd9f4e1e52697c91ff9183126f4b19ec6" translate="yes" xml:space="preserve">
          <source>Asserting the State of Multiple Tables</source>
          <target state="translated">Утверждение состояния нескольких таблиц</target>
        </trans-unit>
        <trans-unit id="79d6cfb09ed036b02081a46e02d41c86cf2399a0" translate="yes" xml:space="preserve">
          <source>Asserting the State of a Table</source>
          <target state="translated">Утверждение состояния таблицы</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="f1bf366d42e0229bf6d4b3edf41db4f9538281ef" translate="yes" xml:space="preserve">
          <source>Assertions are not the only use-case for the DataSet and DataTable in PHPUnit's Database Extension. As shown in the previous section they also describe the initial contents of a database. You are forced to define a fixture dataset by the Database TestCase, which is then used to:</source>
          <target state="translated">Утверждения не являются единственным случаем использования DataSet и DataTable в расширении базы данных PHPUnit.Как было показано в предыдущем разделе,они также описывают исходное содержимое базы данных.Database TestCase вынуждает вас определить набор данных фиксации,который затем используется для этого:</target>
        </trans-unit>
        <trans-unit id="d8b22a126536a94f7271f4f919ee514eaac36010" translate="yes" xml:space="preserve">
          <source>At this point, the signature is good, but we don&amp;rsquo;t trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key &lt;code&gt;6372C20A&lt;/code&gt; was created by the real Sebastian Bergmann.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d9dceb7f7654b542fdc74944219f3914fdcb50" translate="yes" xml:space="preserve">
          <source>At this point, the signature is good, but we don't trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key &lt;code&gt;6372C20A&lt;/code&gt; was created by the real Sebastian Bergmann.</source>
          <target state="translated">На данный момент подпись хорошая, но мы не доверяем этому ключу. Хорошая подпись означает, что файл не был подделан. Однако из-за характера криптографии с открытым ключом вам необходимо дополнительно проверить, что ключ &lt;code&gt;6372C20A&lt;/code&gt; был создан настоящим Себастьяном Бергманном.</target>
        </trans-unit>
        <trans-unit id="102ab26c0b6ce1d570f35a764d3e3eae3676d7fa" translate="yes" xml:space="preserve">
          <source>Authoring testcases is a good impetus for developers to discover edge cases.</source>
          <target state="translated">Создание тестовых кейсов является хорошим стимулом для разработчиков,чтобы открыть для себя крайние кейсы.</target>
        </trans-unit>
        <trans-unit id="a00759e708ac4ff3149178d9b2c17659377bd6d7" translate="yes" xml:space="preserve">
          <source>Available Implementations</source>
          <target state="translated">Доступные внедрения</target>
        </trans-unit>
        <trans-unit id="a8cd6dfda30d7101d6cf0b9c53adfc21f1274ba4" translate="yes" xml:space="preserve">
          <source>Available types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b64917807919bbe1a2f44370b6efc51fc2644f" translate="yes" xml:space="preserve">
          <source>Backup and restore static attributes of user-defined classes. See &lt;a href=&quot;fixtures#fixtures-global-state&quot;&gt;Global State&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb9d583bbdce037700a053683db4c06c7b88d2e" translate="yes" xml:space="preserve">
          <source>Backup and restore static attributes of user-defined classes. See &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;the section called &amp;ldquo;Global State&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">Резервное копирование и восстановление статических атрибутов определяемых пользователем классов. См. &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;Раздел &amp;laquo;Глобальное состояние&amp;raquo;&lt;/a&gt; для получения более подробной информации.</target>
        </trans-unit>
        <trans-unit id="aa7b047baa705c024141336e0e92c68d670b5604" translate="yes" xml:space="preserve">
          <source>Be strict about global state manipulation. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">Будьте строги в отношении манипулирования глобальным государством. См. Подробности в &lt;a href=&quot;risky-tests&quot;&gt;главе 6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="64e42c06ade41c6cf8060f6526a0fe806d9bf5e5" translate="yes" xml:space="preserve">
          <source>Be strict about global state manipulation. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16be2cc2536c34cd2b66eb8201c73e49a5fd5304" translate="yes" xml:space="preserve">
          <source>Be strict about output during tests. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">Будьте строги во время тестов. См. Подробности в &lt;a href=&quot;risky-tests&quot;&gt;главе 6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4f51f0848252faed154544ae7f636cb8249bb290" translate="yes" xml:space="preserve">
          <source>Be strict about output during tests. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233f564bb864da6c2f4f1dcdd1c42579bd6186e1" translate="yes" xml:space="preserve">
          <source>Be strict about tests that do not test anything. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">Строго относитесь к тестам, которые ничего не проверяют. См. Подробности в &lt;a href=&quot;risky-tests&quot;&gt;главе 6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0d5175435dded13bde8e17a64afabab1658372aa" translate="yes" xml:space="preserve">
          <source>Be strict about unintentionally covered code. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">Будьте строги в отношении непреднамеренно скрытого кода. См. Подробности в &lt;a href=&quot;risky-tests&quot;&gt;главе 6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0a8bc0f40ab34962627180602075eca25a2444d" translate="yes" xml:space="preserve">
          <source>Be strict about unintentionally covered code. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe17b188c73f92a9b8e061dc5d48621c480ea26" translate="yes" xml:space="preserve">
          <source>Because many database APIs such as PDO, MySQLi or OCI8 are cumbersome to use and verbose in writing doing these steps manually is an absolute nightmare.</source>
          <target state="translated">Потому что многие API баз данных,таких как PDO,MySQLi или OCI8,громоздки в использовании,а многословное написание этих шагов вручную-это абсолютный кошмар.</target>
        </trans-unit>
        <trans-unit id="f1805d5bad6b774978606ece8d755933a9bf3f2e" translate="yes" xml:space="preserve">
          <source>Because we are interested in verifying that a method is called, and which arguments it is called with, we introduce the &lt;code&gt;expects()&lt;/code&gt; and &lt;code&gt;with()&lt;/code&gt; methods to specify how this interaction should look.</source>
          <target state="translated">Поскольку нас интересует проверка того, вызывается ли метод и с какими аргументами он вызывается, мы вводим методы &lt;code&gt;expects()&lt;/code&gt; и &lt;code&gt;with()&lt;/code&gt; чтобы указать, как должно выглядеть это взаимодействие.</target>
        </trans-unit>
        <trans-unit id="722f11d8fee150e9bf65da73c8a69a84c7c381d7" translate="yes" xml:space="preserve">
          <source>Besides global variables, static attributes of classes are also part of the global state.</source>
          <target state="translated">Кроме глобальных переменных,статические атрибуты классов также являются частью глобального состояния.</target>
        </trans-unit>
        <trans-unit id="7f37c6e32d7b2929f55a3ad3107c60a236c6a625" translate="yes" xml:space="preserve">
          <source>Beware of Foreign Keys</source>
          <target state="translated">Остерегайтесь Иностранных Ключей</target>
        </trans-unit>
        <trans-unit id="4e3bc8166f95c8cfbf9974109ef1f40875e4921e" translate="yes" xml:space="preserve">
          <source>Branch Coverage</source>
          <target state="translated">Отраслевой охват</target>
        </trans-unit>
        <trans-unit id="2509ecf6c5d5f6f1c1752c29a50c44106afb117f" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Among other benefits, this makes it possible to expect that a PHP error, warning, or notice is triggered in a test as shown in &lt;a href=&quot;#writing-tests-for-phpunit-exceptions-examples-errortest-php&quot;&gt;Example 2.12&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c161d48e04e2d5977a9e5b686b5234e12fccb49" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Using these exceptions, you can, for instance, expect a test to trigger a PHP error as shown in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php&quot;&gt;Example 2.12&lt;/a&gt;.</source>
          <target state="translated">По умолчанию PHPUnit преобразует ошибки, предупреждения и уведомления PHP, срабатывающие во время выполнения теста, в исключение. Используя эти исключения, вы можете, например, ожидать, что тест вызовет ошибку PHP, как показано в &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php&quot;&gt;Примере 2.12&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="11257faa21f16d2e72299eff79f2aa247bb84bec" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit will install an error handler that converts the following errors to exceptions:</source>
          <target state="translated">По умолчанию PHPUnit установит обработчик ошибок,который преобразует следующие ошибки в исключения:</target>
        </trans-unit>
        <trans-unit id="2c692da9c2870c9957cb7f5226bd16f28e5d17c8" translate="yes" xml:space="preserve">
          <source>By default, all methods of the original class are replaced with a dummy implementation that just returns &lt;code&gt;null&lt;/code&gt; (without calling the original method). Using the &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; method, for instance, you can configure these dummy implementations to return a value when called.</source>
          <target state="translated">По умолчанию все методы исходного класса заменяются фиктивной реализацией, которая просто возвращает значение &lt;code&gt;null&lt;/code&gt; (без вызова исходного метода). Например, используя метод &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; , вы можете настроить эти фиктивные реализации так, чтобы они возвращали значение при вызове.</target>
        </trans-unit>
        <trans-unit id="c2a5f74e5d6d0b6672d704030abe22968305b0e3" translate="yes" xml:space="preserve">
          <source>By default, all methods of the original class are replaced with a dummy implementation that returns &lt;code&gt;null&lt;/code&gt; (without calling the original method). Using the &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; method, for instance, you can configure these dummy implementations to return a value when called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd20f5ce944c3ed6fa7e581f9272ef32d1fb3d8" translate="yes" xml:space="preserve">
          <source>By default, environment variables are not overwritten if they exist already. To force overwriting existing variables, use the &lt;code&gt;force&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91528078b205c0edc4076b9f056cb2b3ee26b9e" translate="yes" xml:space="preserve">
          <source>By using stubs (see the chapter on &quot;Mock Objects&quot;, earlier in this book), you can further decouple yourself from the supplier: The job of the supplier is to make the tests run with the real implementation of the package. Your job is to make the tests run for your own code. Until such time as you have the real implementation of the supplied package, you use stub objects. Following this approach, the two teams can develop independently.</source>
          <target state="translated">Используя заглушки (см.главу &quot;Инсценировочные объекты&quot;,ранее в этой книге),вы можете в дальнейшем отсоединиться от поставщика:Задача поставщика-сделать так,чтобы тесты проходили с реальной реализацией пакета.Ваша задача-сделать так,чтобы тесты были выполнены по вашему собственному коду.До тех пор,пока у вас не появится реальная реализация поставляемого пакета,вы используете корешки.Следуя этому подходу,две команды могут развиваться независимо друг от друга.</target>
        </trans-unit>
        <trans-unit id="e4597b679075018ece70ba1999e5d15c1cd90747" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;--static-backup&lt;/code&gt; option or setting &lt;code&gt;backupStaticAttributes=&quot;true&quot;&lt;/code&gt; in the XML configuration file, this isolation can be extended to static attributes of classes.</source>
          <target state="translated">Используя параметр &lt;code&gt;--static-backup&lt;/code&gt; или задав &lt;code&gt;backupStaticAttributes=&quot;true&quot;&lt;/code&gt; в файле конфигурации XML, эту изоляцию можно расширить до статических атрибутов классов.</target>
        </trans-unit>
        <trans-unit id="c9001ab23e14040af523a496ea073d94c8e9a5e7" translate="yes" xml:space="preserve">
          <source>CSV DataSet</source>
          <target state="translated">CSV DataSet</target>
        </trans-unit>
        <trans-unit id="a20d991b9a7d2172c934a6d6553e9b1e52e6e2f0" translate="yes" xml:space="preserve">
          <source>Change Risk Anti-Patterns (CRAP) Index</source>
          <target state="translated">Индекс изменения анти-рисковых моделей (CRAP)</target>
        </trans-unit>
        <trans-unit id="9571a1b5aaa83789b8f0adcf05ec1485c335a4ae" translate="yes" xml:space="preserve">
          <source>Class and Trait Coverage</source>
          <target state="translated">Охват классов и признаков</target>
        </trans-unit>
        <trans-unit id="191da32810366886e531d88da3e30b3dd791a185" translate="yes" xml:space="preserve">
          <source>Cleanup the database for each new test</source>
          <target state="translated">Очищайте базу данных для каждого нового теста</target>
        </trans-unit>
        <trans-unit id="8e86e562959da84d3b442c12a994da14aae649ab" translate="yes" xml:space="preserve">
          <source>Code Coverage (TEXT)</source>
          <target state="translated">Покрытие кода (TEXT)</target>
        </trans-unit>
        <trans-unit id="fd0309588c48a9458645834e17a45a55c79e0814" translate="yes" xml:space="preserve">
          <source>Code Coverage (XML)</source>
          <target state="translated">Покрытие кода (XML)</target>
        </trans-unit>
        <trans-unit id="6262efd9fea7435d42691a4f59d7486a8516311a" translate="yes" xml:space="preserve">
          <source>Code Coverage Analysis</source>
          <target state="translated">Анализ покрытия кода</target>
        </trans-unit>
        <trans-unit id="109c194e8ddfc5467663fb7063689470b656f9b0" translate="yes" xml:space="preserve">
          <source>Code Coverage will only be recorded for tests that use the &lt;code&gt;@covers&lt;/code&gt; annotation documented in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers&quot;&gt;the section called &amp;ldquo;@covers&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Покрытие кода будет записано только для тестов, использующих аннотацию &lt;code&gt;@covers&lt;/code&gt; , задокументированную в &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers&quot;&gt;разделе &amp;laquo;@covers&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6992fa9278bee711bf80b67568573f9b15601d10" translate="yes" xml:space="preserve">
          <source>Command-Line Options</source>
          <target state="translated">параметры командной строки</target>
        </trans-unit>
        <trans-unit id="10c35d71ded7545a87321c94b9da10ed95f1480d" translate="yes" xml:space="preserve">
          <source>Composer</source>
          <target state="translated">Composer</target>
        </trans-unit>
        <trans-unit id="18ac7197c985ca458fec03af27692f2080276f90" translate="yes" xml:space="preserve">
          <source>Composing a Test Suite Using XML Configuration</source>
          <target state="translated">Составление тестового набора с использованием XML-конфигурации</target>
        </trans-unit>
        <trans-unit id="26dcaab39efc0af61b5a54784f29c09025599629" translate="yes" xml:space="preserve">
          <source>Composing a Test Suite Using the Filesystem</source>
          <target state="translated">Составление набора тестов с использованием файловой системы</target>
        </trans-unit>
        <trans-unit id="4ca8358ce846f9321c7815bad4e78f1a31c9e21a" translate="yes" xml:space="preserve">
          <source>Composite DataSet</source>
          <target state="translated">Composite DataSet</target>
        </trans-unit>
        <trans-unit id="c5fdb502ae4c60b4b1e6f35555661f3f185ef0ed" translate="yes" xml:space="preserve">
          <source>Configuration of a PHPUnit Database TestCase</source>
          <target state="translated">Конфигурация базы данных PHPUnit TestCase</target>
        </trans-unit>
        <trans-unit id="50070f2f57145b8351a714da1d1885af70824651" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in Clover XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d895bd23836df108105b8b10423e52be1ff4387" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in Crap4J XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456dda4f3e960bc6b73cbe1f798e1f83c315dfcb" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in HTML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e457793dbc3b6493a174d8c0503d8fa9da26a" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in PHP format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff70f9edf30ff1a5d3665bac135f8cbe7628c02f" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in PHPUnit XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eade7d55d5e35b2d31a1edc22f246e60fa5701" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91bff6aa4dd47a549a7d1ddbbe24b2555316ffb" translate="yes" xml:space="preserve">
          <source>Configures a directory and its sub-directories for inclusion in or exclusion from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bffc9592ee4afef2432f64ea77e4a38e1042db3" translate="yes" xml:space="preserve">
          <source>Configures a file for inclusion in or exclusion from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37267e7128f55ae8b2cf12e6887b2313244ae443" translate="yes" xml:space="preserve">
          <source>Configures a filter based on the version of the PHP runtime that is used to run the current PHPUnit process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63eb7fb7f9521d8ec70b7e3d22a38e05b006d8d" translate="yes" xml:space="preserve">
          <source>Configures a prefix-based filter that is applied to the names of files in the directory and its sub-directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098ae3a76a3d007b25c5d52f1837d5707bb5334c" translate="yes" xml:space="preserve">
          <source>Configures a set of files to be excluded from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0681420092a2c09635daf925a26a2369e2c4946" translate="yes" xml:space="preserve">
          <source>Configures a set of files to be included in code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14021ba7f269bf8438ca8a2761fc6566d871e33" translate="yes" xml:space="preserve">
          <source>Configures a suffix-based filter that is applied to the names of files in the directory and its sub-directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50954d932e6030aae29906a3137930287d76ff91" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in JUnit XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c6d7b23011bb95fb1a5468668198c941bd1237" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TeamCity format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f97742fbc6c6e05876e8a33880f556d5acce54" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox HTML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1c7d91b76f2924cd2182d7a2fdfbed333ee1fe" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad2fd592aab6b80277996690fa1d75ff3c0b239" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec5a9f2336fe917096ea88c90a70ab9ff81b97c" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d583aa228010f8419e92206b70f45640531e9ea" translate="yes" xml:space="preserve">
          <source>Configures the code coverage reports to be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905e13d9f63138b7badb773408fdb466ebf67f60" translate="yes" xml:space="preserve">
          <source>Configures the comparison operator to be used with &lt;code&gt;version_compare()&lt;/code&gt; for the filter based on the version of the PHP runtime that is used to run the current PHPUnit process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d223d1fdc3cf34d33c8c5aa7d57d65d52d27d9" translate="yes" xml:space="preserve">
          <source>Configuring extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="50001f9d78216a0a85921eef17995c8d318636a5" translate="yes" xml:space="preserve">
          <source>Constraint that accepts any input value.</source>
          <target state="translated">Ограничение,которое принимает любое входное значение.</target>
        </trans-unit>
        <trans-unit id="4e6210ea23254aaa526e46b20d4f1e439700cfc5" translate="yes" xml:space="preserve">
          <source>Constraint that applies another constraint to an attribute of a class or an object.</source>
          <target state="translated">Ограничение,которое применяет другое ограничение к атрибуту класса или объекта.</target>
        </trans-unit>
        <trans-unit id="7d4d530b6e26d1bc514703574b4fe44a672ef8c6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that one value is identical to another.</source>
          <target state="translated">Ограничение,которое утверждает,что одно значение идентично другому.</target>
        </trans-unit>
        <trans-unit id="cdc8c5ef1c3efc2f6d96188eaf73c9fc90fcc297" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c423c9279d9f7f46c38c5eb334dd62b2c431e8" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains only instances of a given classname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cdafeaba7f31169bf9de943c04e32ce0e1f723" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains only values of a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8489f5b8a6cf46cf41cdc94c9d60d80320a3c0dc" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains a given value.</source>
          <target state="translated">Ограничение, которое утверждает, что &lt;code&gt;array&lt;/code&gt; или объект, реализующий интерфейс &lt;code&gt;Iterator&lt;/code&gt; , для которого он оценивается, содержит заданное значение.</target>
        </trans-unit>
        <trans-unit id="a808ba53c7f5b5f7e7507aa5e2933b73b456e88f" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains only instances of a given classname.</source>
          <target state="translated">Ограничение, которое утверждает, что &lt;code&gt;array&lt;/code&gt; или объект, реализующий интерфейс &lt;code&gt;Iterator&lt;/code&gt; , для которого он оценивается, содержит только экземпляры данного имени класса.</target>
        </trans-unit>
        <trans-unit id="1b426fcce667db53f80625e45f1e0d86646360c9" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains only values of a given type.</source>
          <target state="translated">Ограничение, которое утверждает, что &lt;code&gt;array&lt;/code&gt; или объект, реализующий интерфейс &lt;code&gt;Iterator&lt;/code&gt; , для которого он оценивается, содержит только значения данного типа.</target>
        </trans-unit>
        <trans-unit id="51e8574b69ff2ab15c41d534f535e5fd1292345c" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the array has a given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf9fd455e4c3abf0665a514397dde000596a18e" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the array it is evaluated for has a given key.</source>
          <target state="translated">Ограничение,которое утверждает,что массив,для которого он вычисляется,имеет заданный ключ.</target>
        </trans-unit>
        <trans-unit id="e168c7abb687ebecf2902eb4cef589db616997dc" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class has a given attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76898f41b0ce3fd134055aa1dfffe20d555209ec" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class has a given static attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052b0facafadc0abde4f8ee97ca7fde579f68367" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class it is evaluated for has a given attribute.</source>
          <target state="translated">Ограничение,которое утверждает,что класс,для которого он вычисляется,имеет заданный атрибут.</target>
        </trans-unit>
        <trans-unit id="74e8677f3682374b6b80d897055ffa4570301653" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class it is evaluated for has a given static attribute.</source>
          <target state="translated">Ограничение,которое утверждает,что класс,для которого он вычисляется,имеет заданный статический атрибут.</target>
        </trans-unit>
        <trans-unit id="4d5aef36030547db118bb0594fdb85ac7ee78def" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object has a given attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de32a43a328f94f0947efe515a9945325efceff" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object is an instance of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9591dc696fa21696db24a5165e346bc02a5be7a6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object it is evaluated for has a given attribute.</source>
          <target state="translated">Ограничение,которое утверждает,что объект,для которого он оценивается,имеет заданный атрибут.</target>
        </trans-unit>
        <trans-unit id="bc990e0033562cfe45213748a6673bbdd08e08b6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object it is evaluated for is an instance of a given class.</source>
          <target state="translated">Ограничение,которое утверждает,что объект,для которого он вычисляется,является экземпляром данного класса.</target>
        </trans-unit>
        <trans-unit id="9354f519e9f89d0a24dd5eb820abd92c465c6e48" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string contains a given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181730831f59ecf621e638dadedb1a4bb82c5b86" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string ends with a given suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc0f38e8b7f88b4cdce062bd0dde7f98c3f2f39" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for contains a given string.</source>
          <target state="translated">Ограничение,которое утверждает,что строка,для которой она оценивается,содержит заданную строку.</target>
        </trans-unit>
        <trans-unit id="ecd7a3101d309c7a0cbc87ecf8d41e0ef6607cb8" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for ends with a given suffix.</source>
          <target state="translated">Ограничение,которое утверждает,что строка,которую он вычисляет,заканчивается с заданным суффиксом.</target>
        </trans-unit>
        <trans-unit id="8379ef8dad533bba7cd5881bd20ccb6ec8d8f2c7" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for matches a regular expression.</source>
          <target state="translated">Ограничение,которое утверждает,что строка,которую он выставляет для соответствия регулярному выражению.</target>
        </trans-unit>
        <trans-unit id="5ee3bdf51efb4aaf9e4c8df59ccbee07552935f9" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for starts with a given prefix.</source>
          <target state="translated">Ограничение,которое утверждает,что строка,для которой она вычисляется,начинается с заданного префикса.</target>
        </trans-unit>
        <trans-unit id="dc81493a96f0d15abd198f0aca59b17d092bc157" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string matches a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b7c4a9574a48c67e500732fbd4c3414077b45d" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string starts with a given prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8ded3c4d7602421be70e736df9eb20eaca4207" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e55554ddc8971d3cc4574161ba445796ee5f30" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886d3fc9c2b6f51aad3e2f060a5c095eb2bacda6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13a7aaf7488fc37e11c97fa50ed17a3856953e2" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is greater than a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b3965a5150b5917a2abce1668eda520ecfd27e" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is greater than or equal to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0311999d499b454a53afb001f7dd3d0657be16" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is of a specified type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9f80e32ec5caff3de16f3469e5c7cf27832157" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is smaller than a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007b1931e910ba4ba7894df8246c17de55a5e482" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is smaller than or equal to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde68b2b72f28b01cebe5e3f49e2960ea0d472e2" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is greater than a given value.</source>
          <target state="translated">Ограничение,которое утверждает,что значение,для которого она оценивается,больше,чем заданное значение.</target>
        </trans-unit>
        <trans-unit id="bc7a3dfb3651592ef5af091770a447209686042a" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is greater than or equal to a given value.</source>
          <target state="translated">Ограничение,которое утверждает,что значение,для которого она оценивается,больше или равно заданному значению.</target>
        </trans-unit>
        <trans-unit id="6ec99e9d6498c7b86c0088d7bbc9807445794b57" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is of a specified type.</source>
          <target state="translated">Ограничение,которое утверждает,что значение,для которого оно вычисляется,имеет определенный тип.</target>
        </trans-unit>
        <trans-unit id="856797eba2302f8840c2e2e592a74e6c26f64e35" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is smaller than a given value.</source>
          <target state="translated">Ограничение,которое утверждает,что значение,для которого она оценивается,меньше заданного значения.</target>
        </trans-unit>
        <trans-unit id="6195c587e282711b239a44ffb0377363bdc39063" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is smaller than or equal to a given value.</source>
          <target state="translated">Ограничение,которое утверждает,что значение,для которого она оценивается,меньше или равно заданному значению.</target>
        </trans-unit>
        <trans-unit id="ccf8766ba266eb797bf44971dfd17e81dfd01d65" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Ограничение, которое утверждает, что значение, которое оно оценивает, является &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bae29eedcdbb9c2c7fe9cbe4952c8e43f398d1bd" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">Ограничение, которое утверждает, что оцениваемое значение равно &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1bb1b421117f06662712afe83ea4a47af30ac641" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Ограничение, которое утверждает, что вычисленное значение &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="542e3814006c1ad2918ab57a2a6317461e8888fc" translate="yes" xml:space="preserve">
          <source>Constraint that checks if a value is equal to an attribute of a class or of an object.</source>
          <target state="translated">Ограничение,которое проверяет,равно ли значение атрибуту класса или объекта.</target>
        </trans-unit>
        <trans-unit id="d4e212c9e6f5b2f83c794ce2774061b9bed22540" translate="yes" xml:space="preserve">
          <source>Constraint that checks if one value is equal to another.</source>
          <target state="translated">Ограничение,которое проверяет,равно ли одно значение другому.</target>
        </trans-unit>
        <trans-unit id="dba210d9fcdb94b1b16c54ee8d3ee6eddad1c8f2" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the directory exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163a7e8ab37f1c587d7356e2485a5e7490ebb768" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the directory that it is evaluated for exists.</source>
          <target state="translated">Ограничение,которое проверяет,существует ли каталог,для которого он оценивается.</target>
        </trans-unit>
        <trans-unit id="4781f669062e4259978e292b1efaa10acdf764f9" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af0937e60c236c9ca28fcac0d3492eabf2067a7" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) is readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6d3492ea422313136ee8878e1afb246a142508" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) is writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcd32f6e04b798f950eba813a06c4290d62d187" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for exists.</source>
          <target state="translated">Ограничение,которое проверяет,существует ли файл (имя),для которого он оценивается.</target>
        </trans-unit>
        <trans-unit id="8add62ad08a232c6da5f779048e460f56b9b0c30" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for is readable.</source>
          <target state="translated">Ограничение,которое проверяет читабельность файла (имени),для которого он обрабатывается.</target>
        </trans-unit>
        <trans-unit id="9191db07dfcd01e4cc5309b818514ada07f3fb85" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for is writable.</source>
          <target state="translated">Ограничение,которое проверяет,доступен ли для записи файл (имя),для которого он оценивается.</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="39624edef87575d027eafcfae5eedc2c3ae43865" translate="yes" xml:space="preserve">
          <source>Create a directory for PHP binaries; e.g., &lt;code&gt;C:\bin&lt;/code&gt;</source>
          <target state="translated">Создайте каталог для двоичных файлов PHP; например, &lt;code&gt;C:\bin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="817f0806cd622cbd94df178eb512c1d433e5d609" translate="yes" xml:space="preserve">
          <source>Create a wrapping batch script (results in &lt;code&gt;C:\bin\phpunit.cmd&lt;/code&gt;):</source>
          <target state="translated">Создайте пакетный сценарий упаковки (результат будет в &lt;code&gt;C:\bin\phpunit.cmd&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="0b9fb3a610b937165a8b67771454b580d7f1fa46" translate="yes" xml:space="preserve">
          <source>Cross-Team Tests</source>
          <target state="translated">перекрёстные испытания</target>
        </trans-unit>
        <trans-unit id="00df88cb6a2b4d4554b24a2f1b7f28f318ee884a" translate="yes" xml:space="preserve">
          <source>Data Providers</source>
          <target state="translated">Поставщики данных</target>
        </trans-unit>
        <trans-unit id="2494fdba194cdad3eca4fd349fc2fa398ef6874e" translate="yes" xml:space="preserve">
          <source>DataSet Filter</source>
          <target state="translated">Фильтр DataSet Filter</target>
        </trans-unit>
        <trans-unit id="4a0db487f867f26b9f02146d10dd03702fb1dfb6" translate="yes" xml:space="preserve">
          <source>Database (DB) Dataset</source>
          <target state="translated">Набор данных базы данных (БД)</target>
        </trans-unit>
        <trans-unit id="f6f4eb236a59b4e21eeb9b7cd6bc75392515a91d" translate="yes" xml:space="preserve">
          <source>Database Assertions API</source>
          <target state="translated">API утверждения базы данных</target>
        </trans-unit>
        <trans-unit id="4db0ec9a89645d47708b06e3ba733a19aedfaff7" translate="yes" xml:space="preserve">
          <source>Database Testing</source>
          <target state="translated">Тестирование базы данных</target>
        </trans-unit>
        <trans-unit id="95a67d8c418447fa80e67876d3350cbdfb7bc894" translate="yes" xml:space="preserve">
          <source>DbUnit</source>
          <target state="translated">DbUnit</target>
        </trans-unit>
        <trans-unit id="2eacecba2b6676133b7c3099f8e05aa4c9f88632" translate="yes" xml:space="preserve">
          <source>DbUnit currently supports MySQL, PostgreSQL, Oracle and SQLite. Through &lt;a href=&quot;http://framework.zend.com&quot;&gt;Zend Framework&lt;/a&gt; or &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; integrations it has access to other database systems such as IBM DB2 or Microsoft SQL Server.</source>
          <target state="translated">DbUnit в настоящее время поддерживает MySQL, PostgreSQL, Oracle и SQLite. Благодаря интеграции &lt;a href=&quot;http://framework.zend.com&quot;&gt;Zend Framework&lt;/a&gt; или &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; он имеет доступ к другим системам баз данных, таким как IBM DB2 или Microsoft SQL Server.</target>
        </trans-unit>
        <trans-unit id="0fb4d858eb59af0cf2ac6c6bc2f21cacee80142f" translate="yes" xml:space="preserve">
          <source>DbUnit helps to simplify all these problems with database testing in an elegant way.</source>
          <target state="translated">DbUnit помогает элегантно упростить все эти проблемы при тестировании баз данных.</target>
        </trans-unit>
        <trans-unit id="41660197d49bbee961cc2ee835fc41fa87b7c176" translate="yes" xml:space="preserve">
          <source>DbUnit port for PHP/PHPUnit to support database interaction testing.</source>
          <target state="translated">DbUnit-порт для PHP/PHPUnit для поддержки тестирования взаимодействия с базой данных.</target>
        </trans-unit>
        <trans-unit id="119c0e62f44a97995bbf31f033e4d32a26b3822e" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;PHPUnit\Runner\StandardTestSuiteLoader&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa9a199d8f96898f03a3b3be1f53ae93919e5e9" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;PHPUnit\TextUI\ResultPrinter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab41c51dc772ae84d83b15e5bb89666d74ed74c" translate="yes" xml:space="preserve">
          <source>Defines the number of columns to use for progress output. If &lt;code&gt;max&lt;/code&gt; is defined as value, the number of columns will be maximum of the current terminal.</source>
          <target state="translated">Определяет количество столбцов, используемых для вывода прогресса. Если &lt;code&gt;max&lt;/code&gt; определяется как значение, количество столбцов будет максимальным для текущего терминала.</target>
        </trans-unit>
        <trans-unit id="e1f3c96de9d54f40b90ee611d510c3ee3e3a5fd4" translate="yes" xml:space="preserve">
          <source>Delete all the rows from the tables specified in the dataset.</source>
          <target state="translated">Удалить все строки из таблиц,указанных в наборе данных.</target>
        </trans-unit>
        <trans-unit id="86629ba9311cf16a077010c2c75bda057654fd46" translate="yes" xml:space="preserve">
          <source>Depending on the implementation different approaches are taken to add table instances to a dataset. For example, tables are added internally during construction from the source file in all file-based datasets such as &lt;code&gt;YamlDataSet&lt;/code&gt;, &lt;code&gt;XmlDataSet&lt;/code&gt; or &lt;code&gt;FlatXmlDataSet&lt;/code&gt;.</source>
          <target state="translated">В зависимости от реализации используются разные подходы к добавлению экземпляров таблиц в набор данных. Например, таблицы добавляются внутри во время построения из исходного файла во все файловые наборы данных, такие как &lt;code&gt;YamlDataSet&lt;/code&gt; , &lt;code&gt;XmlDataSet&lt;/code&gt; или &lt;code&gt;FlatXmlDataSet&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="700768afde1d60bbab4d98ccf8920e71757472d1" translate="yes" xml:space="preserve">
          <source>Differences in casing are ignored for the comparison of &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82ce0c7386ae1202b18632fe7001058a0c2c47e" translate="yes" xml:space="preserve">
          <source>Differences in casing are ignored when &lt;code&gt;$needle&lt;/code&gt; is searched for in &lt;code&gt;$haystack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2def23a82e4efe95d1eee254cb6840339ebe01" translate="yes" xml:space="preserve">
          <source>Difficulties in Database Testing</source>
          <target state="translated">Трудности при тестировании баз данных</target>
        </trans-unit>
        <trans-unit id="1768eb13b20e61b603bbfdc1db37cfbca982fb32" translate="yes" xml:space="preserve">
          <source>Do not backup and restore $GLOBALS. See &lt;a href=&quot;fixtures#fixtures-global-state&quot;&gt;Global State&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260139da2a03c1f22636f63c87db02afa2f82465" translate="yes" xml:space="preserve">
          <source>Do not backup and restore $GLOBALS. See &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;the section called &amp;ldquo;Global State&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">Не создавайте резервные копии и не восстанавливайте $ GLOBALS. См. &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;Раздел &amp;laquo;Глобальное состояние&amp;raquo;&lt;/a&gt; для получения более подробной информации.</target>
        </trans-unit>
        <trans-unit id="76d908c920c5c6d057c2480db4c2c6ade3a08e7d" translate="yes" xml:space="preserve">
          <source>Do not do this. Instead, you should use either the XML or the YAML DataSets.</source>
          <target state="translated">Не делай этого.Вместо этого вы должны использовать либо XML,либо YAML DataSet.</target>
        </trans-unit>
        <trans-unit id="c413ec5a88f4f3186b6f6e9984e155bcb69459cc" translate="yes" xml:space="preserve">
          <source>Do not report tests that do not test anything. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e0204699e9877d332d5922c8469d8761315998" translate="yes" xml:space="preserve">
          <source>Does not execute tests which have the &lt;code&gt;@todo&lt;/code&gt; annotation in its docblock.</source>
          <target state="translated">Не выполняет тесты, в &lt;code&gt;@todo&lt;/code&gt; которых есть аннотация @todo .</target>
        </trans-unit>
        <trans-unit id="80c843ad6252c9c4db64e6ae6724482806e582dc" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://phar.phpunit.de/phpunit-6.5.phar&quot;&gt;https://phar.phpunit.de/phpunit-6.5.phar&lt;/a&gt; and save the file as &lt;code&gt;C:\bin\phpunit.phar&lt;/code&gt;</source>
          <target state="translated">Загрузите &lt;a href=&quot;https://phar.phpunit.de/phpunit-6.5.phar&quot;&gt;https://phar.phpunit.de/phpunit-6.5.phar&lt;/a&gt; и сохраните файл как &lt;code&gt;C:\bin\phpunit.phar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9b1623968400e05a655a543ef3805a09e7117b9d" translate="yes" xml:space="preserve">
          <source>During Debugging</source>
          <target state="translated">Во время отладки</target>
        </trans-unit>
        <trans-unit id="e96f998164eb81aa2499a25cd6e6045a3c4f1d61" translate="yes" xml:space="preserve">
          <source>During Development</source>
          <target state="translated">Во время разработки</target>
        </trans-unit>
        <trans-unit id="80435cf1bd512f35f5703e0465d70245411bf663" translate="yes" xml:space="preserve">
          <source>During Fixture SetUp PHPUnit's Database Extension inserts the rows into the database in the order they are specified in your fixture. If your database schema uses foreign keys this means you have to specify the tables in an order that does not cause foreign key constraints to fail.</source>
          <target state="translated">Во время фиксации SetUp PHPUnit's Database Extension вставляет строки в базу данных в порядке,указанном в вашем фиксере.Если в схеме базы данных используются посторонние ключи,то это означает,что таблицы необходимо указывать в порядке,не вызывающем проблем с ограничениями посторонних ключей.</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="64463c26bf558b8868be567f32ae6ec7d5d9eba8" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;hook&amp;rdquo;, meaning each of the interfaces listed above, represents an event that can occur while the tests are being executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438362069101577b0546516b8b4f20896a111e6f" translate="yes" xml:space="preserve">
          <source>Edge Cases</source>
          <target state="translated">Крайние случаи</target>
        </trans-unit>
        <trans-unit id="c6733d2b92d7770bb88a12c0c1edfd4c3f203cc3" translate="yes" xml:space="preserve">
          <source>Edge cases</source>
          <target state="translated">Крайние случаи</target>
        </trans-unit>
        <trans-unit id="a8d91493e5607c6018e4dcda6c8b451499546fe4" translate="yes" xml:space="preserve">
          <source>Edition for PHPUnit 9.5. Updated on Dec 09, 2020.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f33c80bf4cce037f7ef0854890004807487e5f3" translate="yes" xml:space="preserve">
          <source>Either put the PHAR of the specific PHPUnit version you need in your project&amp;rsquo;s &lt;code&gt;tools&lt;/code&gt; directory (which should be managed by PHIVE) or depend on the specific PHPUnit version you need in your project&amp;rsquo;s &lt;code&gt;composer.json&lt;/code&gt; if you use Composer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e2d7b451c279180bac14fcac5eeee2a4ddaa0c" translate="yes" xml:space="preserve">
          <source>Enforce time limit based on test size. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">Установите ограничение по времени в зависимости от размера теста. См. Подробности в &lt;a href=&quot;risky-tests&quot;&gt;главе 6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="47f323a055a55f6479ff729491a0be397dc81cec" translate="yes" xml:space="preserve">
          <source>Enforce time limit based on test size. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c846504ac5660ebbbf0b9419ca3e1f96e04978aa" translate="yes" xml:space="preserve">
          <source>Error output</source>
          <target state="translated">вывод ошибок</target>
        </trans-unit>
        <trans-unit id="5492c1411feba23d43dd09d4a080d1d32e553a28" translate="yes" xml:space="preserve">
          <source>Example 1.1 Usage of assertArrayHasKey()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318828cda718a6605fc435ee61e9ff9e1c68e40a" translate="yes" xml:space="preserve">
          <source>Example 1.10 Usage of assertDirectoryExists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c19c7667cdc117c30aef891283da7773777262" translate="yes" xml:space="preserve">
          <source>Example 1.11 Usage of assertDirectoryIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a39efa54bb40cc668be2417a9d99e6c66abbfb" translate="yes" xml:space="preserve">
          <source>Example 1.12 Usage of assertDirectoryIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1499017477b5773c2196a0eecfe51e30079e6d" translate="yes" xml:space="preserve">
          <source>Example 1.13 Usage of assertEmpty()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30fd23e15fc60cc3707bce019c080f02214090c" translate="yes" xml:space="preserve">
          <source>Example 1.14 Usage of assertEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1edafbf74d5be5f82e9333d6e8a2139488c5710" translate="yes" xml:space="preserve">
          <source>Example 1.15 Usage of assertEquals() with DOMDocument objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3031187820b74c6642d1ad0dc96aa1b2832f145d" translate="yes" xml:space="preserve">
          <source>Example 1.16 Usage of assertEquals() with objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b912dfd6624859734660bfca2df0ebda9a22e3f" translate="yes" xml:space="preserve">
          <source>Example 1.17 Usage of assertEquals() with arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc526cfe3e0546912841197c4e486b8068ef6090" translate="yes" xml:space="preserve">
          <source>Example 1.18 Usage of assertEqualsCanonicalizing()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c1e2b67e32d5cc8f894a7611957ca8aec83c56" translate="yes" xml:space="preserve">
          <source>Example 1.19 Usage of assertEqualsIgnoringCase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb639c6ff1e5afe0c4123847902a339d85fd8d7" translate="yes" xml:space="preserve">
          <source>Example 1.2 Usage of assertClassHasAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb21a14145b9889ae46145a2d0b38505e4e09e1" translate="yes" xml:space="preserve">
          <source>Example 1.20 Usage of assertEqualsWithDelta()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d03cd56103d852e9a6123cd856f2c978f15bd8" translate="yes" xml:space="preserve">
          <source>Example 1.21 Usage of assertObjectEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654ac6abe4e393ef5d960071881b7a655d7fd1bf" translate="yes" xml:space="preserve">
          <source>Example 1.22 Email value object with equals() method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec52e1208dd269fffaf550a0dcfa5c1d435b5fc4" translate="yes" xml:space="preserve">
          <source>Example 1.23 Usage of assertFalse()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac840e7ee54a4c6b288868e88dade5390a35c067" translate="yes" xml:space="preserve">
          <source>Example 1.24 Usage of assertFileEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c90068096454a690bddc01d5fbb7d8fdcbe914d" translate="yes" xml:space="preserve">
          <source>Example 1.25 Usage of assertFileExists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ade821d58c90e84139bc606550da0f361bf4866" translate="yes" xml:space="preserve">
          <source>Example 1.26 Usage of assertFileIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec48fbd7c8f08e66d47182e17a03ea1cf76ebdd" translate="yes" xml:space="preserve">
          <source>Example 1.27 Usage of assertFileIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c771d1b15a812f33898e50de5a561e707817dd5d" translate="yes" xml:space="preserve">
          <source>Example 1.28 Usage of assertGreaterThan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b1c991568c6f4188e63d78fef985df8e7fa151" translate="yes" xml:space="preserve">
          <source>Example 1.29 Usage of assertGreaterThanOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757f05b1846c3c2796371842fb5521460c57f8c3" translate="yes" xml:space="preserve">
          <source>Example 1.3 Usage of assertClassHasStaticAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c19d6adae1f8a5b6214a10c1ded609f561165d9" translate="yes" xml:space="preserve">
          <source>Example 1.30 Usage of assertInfinite()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa321bfdb1f366db19128f3a272f999b4ee5cde" translate="yes" xml:space="preserve">
          <source>Example 1.31 Usage of assertInstanceOf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e86a4c073e598eb53e49d64ed4e3517e893393" translate="yes" xml:space="preserve">
          <source>Example 1.32 Usage of assertIsArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66716f249be6d13dcb40e8d0e6becbb569de7c20" translate="yes" xml:space="preserve">
          <source>Example 1.33 Usage of assertIsBool()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc50712fea73528f65be628a5b515d64ceefa0e8" translate="yes" xml:space="preserve">
          <source>Example 1.34 Usage of assertIsCallable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94dcaaacc78cd298a23dd287bcfb7618572ba3a" translate="yes" xml:space="preserve">
          <source>Example 1.35 Usage of assertIsFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14992960d85f5ec4955035c4bf8489f1483e08bb" translate="yes" xml:space="preserve">
          <source>Example 1.36 Usage of assertIsInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6812126c8fa267c474b770473d4c8691bf8a4e82" translate="yes" xml:space="preserve">
          <source>Example 1.37 Usage of assertIsIterable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90827a1fcdbac761000c8d2c4be2f800c51d1267" translate="yes" xml:space="preserve">
          <source>Example 1.38 Usage of assertIsNumeric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fa9d69e5c51d84e6965a1f921487697628a4bf" translate="yes" xml:space="preserve">
          <source>Example 1.39 Usage of assertIsObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbecff588af88faca4b3098d12a04270fca9efd" translate="yes" xml:space="preserve">
          <source>Example 1.4 Usage of assertContains()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae1bd22acf628833e99702e5098b050a1ab69bf" translate="yes" xml:space="preserve">
          <source>Example 1.40 Usage of assertIsResource()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f11953d897da4a72749a2b067421e896b1ea7f6" translate="yes" xml:space="preserve">
          <source>Example 1.41 Usage of assertIsScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b755536475b6652383a59ce86f5b85185fab5327" translate="yes" xml:space="preserve">
          <source>Example 1.42 Usage of assertIsString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f20d21d0c0ebbd1eb862e3dd92c7b360c503126" translate="yes" xml:space="preserve">
          <source>Example 1.43 Usage of assertIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df972e199fd726220b9cfa23822be49deca71ffb" translate="yes" xml:space="preserve">
          <source>Example 1.44 Usage of assertIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfe35ffa7cd790f1996cced89069d58731b7b49" translate="yes" xml:space="preserve">
          <source>Example 1.45 Usage of assertJsonFileEqualsJsonFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0326b076deb9d248054c494ae8f41fdc00e19f2e" translate="yes" xml:space="preserve">
          <source>Example 1.46 Usage of assertJsonStringEqualsJsonFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762d7d659f99e5bd61dd91bb9b16551f23b5be77" translate="yes" xml:space="preserve">
          <source>Example 1.47 Usage of assertJsonStringEqualsJsonString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a6e18af030da23d078b66111567a63251849fa" translate="yes" xml:space="preserve">
          <source>Example 1.48 Usage of assertLessThan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8230dc9a2970390a86cbcc8f5e58992bc27579ec" translate="yes" xml:space="preserve">
          <source>Example 1.49 Usage of assertLessThanOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567a05a667d060bc5b46f3663087c819de0e5d63" translate="yes" xml:space="preserve">
          <source>Example 1.5 Usage of assertStringContainsString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e296c3946013fbbae334d73cb54d68bb2fe889e0" translate="yes" xml:space="preserve">
          <source>Example 1.50 Usage of assertNan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed337485f76940fdb8a438b378fa5b10fe8efd59" translate="yes" xml:space="preserve">
          <source>Example 1.51 Usage of assertNull()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2508c500f4acbc69ec8b2ac79c6c077b8477f367" translate="yes" xml:space="preserve">
          <source>Example 1.52 Usage of assertObjectHasAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f8502fd6dddcb73b932add9ffe84379f2db081" translate="yes" xml:space="preserve">
          <source>Example 1.53 Usage of assertMatchesRegularExpression()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d9c2bd718f20e0f88dd1e65f914b4628d03ca1" translate="yes" xml:space="preserve">
          <source>Example 1.54 Usage of assertStringMatchesFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d994b3d50de925fec5f158dd123a02c43b4d0008" translate="yes" xml:space="preserve">
          <source>Example 1.55 Usage of assertStringMatchesFormatFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8455ee38873b8d652b169363dd47d63514a770" translate="yes" xml:space="preserve">
          <source>Example 1.56 Usage of assertSame()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5199fd30376f4d3c35fd61c4e2b616af9d05185e" translate="yes" xml:space="preserve">
          <source>Example 1.57 Usage of assertSame() with objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a81c00b1ed7fe31156625695eb748bf9fd933d8" translate="yes" xml:space="preserve">
          <source>Example 1.58 Usage of assertStringEndsWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2305a70e417e900fc2f37163fb70edf154c632" translate="yes" xml:space="preserve">
          <source>Example 1.59 Usage of assertStringEqualsFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5863eb958381b08dd851f407321c3c125e71d762" translate="yes" xml:space="preserve">
          <source>Example 1.6 Usage of assertStringContainsStringIgnoringCase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcfd248b4cd6d8645e5533086ae5a76ba2f50c2" translate="yes" xml:space="preserve">
          <source>Example 1.60 Usage of assertStringStartsWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61afc6ae3f01948b0f8861f621765760b7ebf11" translate="yes" xml:space="preserve">
          <source>Example 1.61 Usage of assertThat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306ac817fe57211331d4ca96f04a595a1e62c412" translate="yes" xml:space="preserve">
          <source>Example 1.62 Usage of assertTrue()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bd77f9b88f356878a96794d9ed891b2082a9e1" translate="yes" xml:space="preserve">
          <source>Example 1.63 Usage of assertXmlFileEqualsXmlFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd13546eff876baca50ab270667279bf249f4686" translate="yes" xml:space="preserve">
          <source>Example 1.64 Usage of assertXmlStringEqualsXmlFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf9d5a6b68b625cba591d7503f712339a98909e" translate="yes" xml:space="preserve">
          <source>Example 1.65 Usage of assertXmlStringEqualsXmlString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf909bed5e0178bdde91b9e5c42b0fe04649b0d" translate="yes" xml:space="preserve">
          <source>Example 1.7 Usage of assertContainsOnly()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6302465360b7c1944d077cfad11984a5c6fbd7f" translate="yes" xml:space="preserve">
          <source>Example 1.8 Usage of assertContainsOnlyInstancesOf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ae1fd657d7da96a4fba830bf30736639af99ce" translate="yes" xml:space="preserve">
          <source>Example 1.9 Usage of assertCount()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567c7be47dd45b7357153e9c767a5143659b15e6" translate="yes" xml:space="preserve">
          <source>Example 10.1 The assertTrue() and isTrue() methods of the PHPUnit\Framework\Assert class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987fc3834c482e631070e4af334dc3663dd70835" translate="yes" xml:space="preserve">
          <source>Example 10.2 The PHPUnit\FrameworkConstraint\IsTrue class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966abcc763f95688a8d04a79c72b56aee1c595c3" translate="yes" xml:space="preserve">
          <source>Example 10.3 TestRunner Extension Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7928e776529ee81e7f07badedd9bb7201e6db323" translate="yes" xml:space="preserve">
          <source>Example 10.4 TestRunner Extension with constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c60afbbd7e9e0d97fdaec059fba2edf963df4c8" translate="yes" xml:space="preserve">
          <source>Example 10.5 TestRunner Extension configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee07167af5a3a771aebafa986967c3045870ca0b" translate="yes" xml:space="preserve">
          <source>Example 2.1 Testing array operations with PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee0490480d82f2300ea3b44072e586ea4ef19c" translate="yes" xml:space="preserve">
          <source>Example 2.10 Using multiple data providers for a single test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b86cb2fb58314f9016ecab3d717fa5c6702950" translate="yes" xml:space="preserve">
          <source>Example 2.11 Using the expectException() method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e986a4815e66a584a92bc2186e7dfafd45df97a7" translate="yes" xml:space="preserve">
          <source>Example 2.12 Expecting PHP errors, warnings, and notices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15051b1c2ad8169c7d0d0e9e1b3598fc0de72536" translate="yes" xml:space="preserve">
          <source>Example 2.13 Testing return values of code that uses PHP Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4096a576c846919cc1592ae4d56b3b4384afe501" translate="yes" xml:space="preserve">
          <source>Example 2.14 Testing the output of a function or method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66500dca342e43629cf89d6d8339d2d6217af8df" translate="yes" xml:space="preserve">
          <source>Example 2.15 Error output generated when an array comparison fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1aab23014975f882a9b775f47afcf4295f2a32" translate="yes" xml:space="preserve">
          <source>Example 2.16 Error output when an array comparison of an long array fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fa17ef6c383c697fb7686e984c60812c4909b5" translate="yes" xml:space="preserve">
          <source>Example 2.17 Edge case in the diff generation when using weak comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52d81530a1e646bfb523ad0486a02957620c214" translate="yes" xml:space="preserve">
          <source>Example 2.18 Using @coversDefaultClass to shorten annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e79802c91d217df7aa8e80214cf89ade54d775a" translate="yes" xml:space="preserve">
          <source>Example 2.2 Using the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bd98a6fc1f930335225f0d7631d0178d77420a" translate="yes" xml:space="preserve">
          <source>Example 2.3 Exploiting the dependencies between tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8232fa5f5d295c58ac6bf94007c8cebf62e9c9" translate="yes" xml:space="preserve">
          <source>Example 2.4 Test with multiple dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624175fb83c7fe1a39f1375fa1ad591b2734721c" translate="yes" xml:space="preserve">
          <source>Example 2.5 Using a data provider that returns an array of arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d44c49e3115a20bacb266f17e5953bad3e1639" translate="yes" xml:space="preserve">
          <source>Example 2.6 Using a data provider with named datasets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbc2a06f239100677ef420058b22d3f39f9bee8" translate="yes" xml:space="preserve">
          <source>Example 2.7 Using a data provider that returns an Iterator object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64494331bfc327af8967dc5aaf94dbc47457e50" translate="yes" xml:space="preserve">
          <source>Example 2.8 The CsvFileIterator class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531a2d13925087aaa8f70054b0ec709ea3346036" translate="yes" xml:space="preserve">
          <source>Example 2.9 Combination of @depends and @dataProvider in same test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8130a6f55c653a50e1bcf43b411230ecd0845b75" translate="yes" xml:space="preserve">
          <source>Example 3.1 Named data sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d898c5394eae5b7282e419790186318efa491c" translate="yes" xml:space="preserve">
          <source>Example 3.2 Filter pattern examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9763ef3dbc83eb751512be2bcc4c7894090375bc" translate="yes" xml:space="preserve">
          <source>Example 3.3 Filter shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578f345b9e6462001c09d9562d06e27ef23d56f5" translate="yes" xml:space="preserve">
          <source>Example 4.1 Using setUp() to create the stack fixture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63796a42a089c8db7f7ffe99acc467685fd8021" translate="yes" xml:space="preserve">
          <source>Example 4.2 Example showing all template methods available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382eee522100f9f72017be67ff1d4877074188e5" translate="yes" xml:space="preserve">
          <source>Example 4.3 Sharing fixture between the tests of a test suite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395bcdf070469d1482c51dcac30f25b88c255f3b" translate="yes" xml:space="preserve">
          <source>Example 5.1 Composing a Test Suite Using XML Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8326b5008ad173cac118e51d0f4cc437cf311925" translate="yes" xml:space="preserve">
          <source>Example 5.2 Composing a Test Suite Using XML Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540780f7de5fed1f663b3bfbb89422752ea822d9" translate="yes" xml:space="preserve">
          <source>Example 7.1 Marking a test as incomplete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc9bd6ed28e73a380d4f35e1542a85abe90cee3" translate="yes" xml:space="preserve">
          <source>Example 7.2 Skipping a test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce76d1425f9fa6a6ca783ab37160286b66970be" translate="yes" xml:space="preserve">
          <source>Example 7.3 Skipping test cases using @requires</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d113fe84d4df2562cad512618b64806eff99a45" translate="yes" xml:space="preserve">
          <source>Example 8.1 The class we want to stub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66d4e1e98b8e7ee6d2e4825df42b3bb831bd71f" translate="yes" xml:space="preserve">
          <source>Example 8.10 Stubbing a method call to throw an exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f04204e320286aa1718c503e7de206f681f8e" translate="yes" xml:space="preserve">
          <source>Example 8.11 The Subject and Observer classes that are part of the System under Test (SUT)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac655ba9b6cb1d7ddbf97c84e2297b3a1148d0f1" translate="yes" xml:space="preserve">
          <source>Example 8.12 Testing that a method gets called once and with a specified argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cd08b10fa6faacbfdb65c4ca74409acd7abdee" translate="yes" xml:space="preserve">
          <source>Example 8.13 Testing that a method gets called with a number of arguments constrained in different ways</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3dbca0d8c986162c4bda6b41babea16ea09ae2" translate="yes" xml:space="preserve">
          <source>Example 8.14 Testing that a method gets called two times with specific arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0f5c3bc36338b2c035104b2d3257db1cad48ec" translate="yes" xml:space="preserve">
          <source>Example 8.15 More complex argument verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d9c668803ee63587a162a09917b0bee39a8ab4" translate="yes" xml:space="preserve">
          <source>Example 8.16 Testing that a method gets called once and with the identical object as was passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7b39b3a7a701f19a5352be0f18af47e80ad41d" translate="yes" xml:space="preserve">
          <source>Example 8.17 Create a mock object with cloning parameters enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c47b567718163b1a7e8f4799eed52bf2d978c1" translate="yes" xml:space="preserve">
          <source>Example 8.18 Testing the concrete methods of a trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa02babb08498435c1d6c04055ae3dbe8cb9acb" translate="yes" xml:space="preserve">
          <source>Example 8.19 Testing the concrete methods of an abstract class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd781c5735a01e6668f29b40f0a98e337f04334" translate="yes" xml:space="preserve">
          <source>Example 8.2 Stubbing a method call to return a fixed value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862ca92ab49efd13f35bc0690b809f9be0574ffc" translate="yes" xml:space="preserve">
          <source>Example 8.20 Stubbing a web service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4c3c6260b906b029f23cbb7b86c3a0d5326b2" translate="yes" xml:space="preserve">
          <source>Example 8.3 A method with a return type declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a616ed4d86c152bba343c033ac9ab2a047635c" translate="yes" xml:space="preserve">
          <source>Example 8.4 Using the Mock Builder API can be used to configure the generated test double class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c889e9493d9aa581ca61eae8ce74fc4e071087c6" translate="yes" xml:space="preserve">
          <source>Example 8.5 Stubbing a method call to return one of the arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68f25e03af30859ac8c7b393217ada0158bbdb0" translate="yes" xml:space="preserve">
          <source>Example 8.6 Stubbing a method call to return a reference to the stub object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8f55147001915fa14a20101a746b3288ffbde4" translate="yes" xml:space="preserve">
          <source>Example 8.7 Stubbing a method call to return the value from a map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde66ea8963a29d83097bdab7480dad4ee742016" translate="yes" xml:space="preserve">
          <source>Example 8.8 Stubbing a method call to return a value from a callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050146964dd4efc3626b4ae33b47663f177578c8" translate="yes" xml:space="preserve">
          <source>Example 8.9 Stubbing a method call to return a list of values in the specified order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ca4a601e1110695cbe601ce66a83fe65324d36" translate="yes" xml:space="preserve">
          <source>Example 9.1 Using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8304274192b51d154c4735a205200dd77c2981d" translate="yes" xml:space="preserve">
          <source>Example 9.2 Test class that specifies which class it wants to cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9cb2955c8dcabfe434647fde445fc1663ed9c6" translate="yes" xml:space="preserve">
          <source>Example 9.3 Tests that specify which method they want to cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6113a8dc86303eebd893a02a0dc8380331f29b37" translate="yes" xml:space="preserve">
          <source>Example 9.4 A test that specifies that no method should be covered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="3ea2566653ce0694e6d57d3fe04b5dbc1af61f97" translate="yes" xml:space="preserve">
          <source>Except the &lt;code&gt;getTableMetaData()&lt;/code&gt; method it is pretty self-explainatory. The used methods are all required for the different assertions of the Database Extension that are explained in the next chapter. The &lt;code&gt;getTableMetaData()&lt;/code&gt; method has to return an implementation of the &lt;code&gt;PHPUnit_Extensions_Database_DataSet_ITableMetaData&lt;/code&gt; interface, which describes the structure of the table. It holds information on:</source>
          <target state="translated">За исключением &lt;code&gt;getTableMetaData()&lt;/code&gt; он довольно понятен. Все используемые методы требуются для различных утверждений расширения базы данных, которые объясняются в следующей главе. Метод &lt;code&gt;getTableMetaData()&lt;/code&gt; должен возвращать реализацию интерфейса &lt;code&gt;PHPUnit_Extensions_Database_DataSet_ITableMetaData&lt;/code&gt; , который описывает структуру таблицы. Он содержит информацию о:</target>
        </trans-unit>
        <trans-unit id="770df1f8633dffd0edf718b42eb81db61ca30bec" translate="yes" xml:space="preserve">
          <source>Exclude tests from the specified group(s). A test can be tagged as belonging to a group using the &lt;code&gt;@group&lt;/code&gt; annotation.</source>
          <target state="translated">Исключить тесты из указанной группы (групп). Тест может быть помечен как принадлежащий к группе с &lt;code&gt;@group&lt;/code&gt; аннотации @group .</target>
        </trans-unit>
        <trans-unit id="3630ab1e31db75331ab1cf37f7073a7ecee09016" translate="yes" xml:space="preserve">
          <source>Exercise System Under Test</source>
          <target state="translated">Испытанная система упражнений</target>
        </trans-unit>
        <trans-unit id="a1858ef355e7a8449dcbbcc84f64813a7e1aff06" translate="yes" xml:space="preserve">
          <source>Extending PHPUnit</source>
          <target state="translated">Расширяющий PHPUnit</target>
        </trans-unit>
        <trans-unit id="8c99474522441d20e2b163ce9d9023c234cc714c" translate="yes" xml:space="preserve">
          <source>Extending the TestRunner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="0bbfd584fb747cbb9a272d510af4388bea096b90" translate="yes" xml:space="preserve">
          <source>File-Based DataSets and DataTables</source>
          <target state="translated">Наборы данных и таблицы данных на основе файлов</target>
        </trans-unit>
        <trans-unit id="201ca61ce9540d60ffeb8acdab6deb417ea449f6" translate="yes" xml:space="preserve">
          <source>Filter and Composition DataSets and DataTables</source>
          <target state="translated">Наборы фильтров и композиционных данных и таблицы данных</target>
        </trans-unit>
        <trans-unit id="fe2a5bdae4158b697b4e224f7e7fb6eb9b284926" translate="yes" xml:space="preserve">
          <source>Find the smallest-scale demonstration of the defect in the code. For example, if a number appears incorrectly in an output, find the object that is computing that number.</source>
          <target state="translated">Найдите наименьшую демонстрацию дефекта в коде.Например,если в выводе некорректно отображается число,найдите объект,который вычисляет это число.</target>
        </trans-unit>
        <trans-unit id="95cc26d1918cfecfdf281a35429271d7cd0d04b2" translate="yes" xml:space="preserve">
          <source>Finding the smallest reliable reproduction of the defect gives you the opportunity to really examine the cause of the defect. The test you write will improve the chances that when you fix the defect, you really fix it, because the new test reduces the likelihood of undoing the fix with future code changes. All the tests you wrote before reduce the likelihood of inadvertently causing a different problem.</source>
          <target state="translated">Поиск наименьшего надежного воспроизведения дефекта дает вам возможность реально исследовать причину дефекта.Тест,который вы напишете,повысит шансы того,что,когда вы исправите дефект,вы действительно исправите его,потому что новый тест снижает вероятность отмены исправления с последующими изменениями кода.Все тесты,которые вы написали до этого,уменьшают вероятность случайного возникновения другой проблемы.</target>
        </trans-unit>
        <trans-unit id="92485f498c9ab6631e7eab0dca46127bb1c8da76" translate="yes" xml:space="preserve">
          <source>Fix the defect.</source>
          <target state="translated">Исправьте дефект.</target>
        </trans-unit>
        <trans-unit id="93a9d4b62c49df4936d5f701755ab05d3a9187a5" translate="yes" xml:space="preserve">
          <source>Fixtures</source>
          <target state="translated">Fixtures</target>
        </trans-unit>
        <trans-unit id="3332c295f8e8f620d384fafcb9ec318fc39b426e" translate="yes" xml:space="preserve">
          <source>Flat XML DataSet</source>
          <target state="translated">Плоский XML DataSet</target>
        </trans-unit>
        <trans-unit id="64ee171d419a298fa39e6e1e0b31d1e4797bade8" translate="yes" xml:space="preserve">
          <source>For Cygwin and/or MingW32 (e.g., TortoiseGit) shell environments, you may skip step 5. above, simply save the file as &lt;code&gt;phpunit&lt;/code&gt; (without &lt;code&gt;.phar&lt;/code&gt; extension), and make it executable via &lt;strong&gt;&lt;code&gt;chmod 775 phpunit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">Для сред оболочки Cygwin и / или MingW32 (например, TortoiseGit) вы можете пропустить шаг 5. выше, просто сохраните файл как &lt;code&gt;phpunit&lt;/code&gt; (без расширения &lt;code&gt;.phar&lt;/code&gt; ) и сделайте его исполняемым через &lt;strong&gt; &lt;code&gt;chmod 775 phpunit&lt;/code&gt; &lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="70386763ab8d33e1e77b4fe208a01efdccc84a3a" translate="yes" xml:space="preserve">
          <source>For a testing tool the Database Extension surely provides some assertions that you can use to verify the current state of the database, tables and the row-count of tables. This section describes this functionality in detail:</source>
          <target state="translated">Для инструмента тестирования Database Extension несомненно предоставляет некоторые утверждения,которые вы можете использовать для проверки текущего состояния базы данных,таблиц и количества строк в таблицах.В данном разделе этот функционал подробно описан:</target>
        </trans-unit>
        <trans-unit id="358d57de4f1b6c901bf71c27de34c6c97e396562" translate="yes" xml:space="preserve">
          <source>For database assertions you do not only need the file-based datasets but also a Query/SQL based Dataset that contains the actual contents of the database. This is where the Query DataSet shines:</source>
          <target state="translated">Для работы с базами данных вам понадобятся не только наборы файловых данных,но и набор данных на основе Query/SQL,содержащий фактическое содержимое базы данных.Именно здесь сияет Query DataSet:</target>
        </trans-unit>
        <trans-unit id="bc50634a6fcbff4b5b48e340941236351620a10b" translate="yes" xml:space="preserve">
          <source>For each test run, the PHPUnit command-line tool prints one character to indicate progress:</source>
          <target state="translated">Для каждого запуска теста инструмент командной строки PHPUnit печатает один символ,указывающий на прогресс:</target>
        </trans-unit>
        <trans-unit id="d71e6fd97876b29e66fd850bb51a630c8711a082" translate="yes" xml:space="preserve">
          <source>For more fine-grained control of which tests to run we can use the &lt;code&gt;--filter&lt;/code&gt; option:</source>
          <target state="translated">Для более детального контроля над тем, какие тесты запускать, мы можем использовать параметр &lt;code&gt;--filter&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="39ddf4b1466d48ae6e5e0c73a43696a29c0a89de" translate="yes" xml:space="preserve">
          <source>For most people it just &quot;feels right&quot; to use &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; because the test method is invoked on a test object. The fact that the assertion methods are declared &lt;code&gt;static&lt;/code&gt; allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (&lt;code&gt;assertTrue()&lt;/code&gt; instead of &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;).</source>
          <target state="translated">Для большинства людей просто &amp;laquo;кажется правильным&amp;raquo; использовать &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; потому что тестовый метод вызывается на тестовом объекте. Тот факт, что методы утверждения объявлены &lt;code&gt;static&lt;/code&gt; позволяет (повторно) использовать их за пределами тестового объекта. Наконец, обертки глобальных функций позволяют разработчикам вводить меньше символов ( &lt;code&gt;assertTrue()&lt;/code&gt; вместо &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; или &lt;code&gt;self::assertTrue()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="293020854997b69b715df1a3b888fa741294054f" translate="yes" xml:space="preserve">
          <source>For most people it just &amp;ldquo;feels right&amp;rdquo; to use &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; because the test method is invoked on a test object. The fact that the assertion methods are declared static allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (&lt;code&gt;assertTrue()&lt;/code&gt; instead of &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93e1f7b0539b8bd1c147e5148e28b4aec6999dc" translate="yes" xml:space="preserve">
          <source>For sure you can assert the state of multiple tables at once and compare a query dataset against a file based dataset. There are two different ways for DataSet assertions.</source>
          <target state="translated">Конечно,вы можете утверждать состояние нескольких таблиц одновременно и сравнивать набор данных запроса с набором данных,основанным на файле.Существуют два различных способа утверждения DataSet.</target>
        </trans-unit>
        <trans-unit id="a7581ef1768b37d9a3b3d9ddbc26b072dd03f105" translate="yes" xml:space="preserve">
          <source>For the implementation we only need to know that the &lt;code&gt;getDataSet()&lt;/code&gt; method is called once during &lt;code&gt;setUp()&lt;/code&gt; to retrieve the fixture data-set and insert it into the database. In the example we are using a factory method &lt;code&gt;createFlatXMLDataSet($filename)&lt;/code&gt; that represents a data-set through an XML representation.</source>
          <target state="translated">Для реализации нам нужно только знать, что метод &lt;code&gt;getDataSet()&lt;/code&gt; вызывается один раз во время &lt;code&gt;setUp()&lt;/code&gt; чтобы получить набор данных фикстуры и вставить его в базу данных. В этом примере мы используем фабричный метод &lt;code&gt;createFlatXMLDataSet($filename)&lt;/code&gt; который представляет набор данных через представление XML.</target>
        </trans-unit>
        <trans-unit id="cbffca81d098fd870b543af78231e4f60826f736" translate="yes" xml:space="preserve">
          <source>For this dataset like the Flat XML, CSV and YAML DataSets the keys of the first specified row define the table's column names, in the previous case this would be &amp;ldquo;id&amp;rdquo;, &amp;ldquo;content&amp;rdquo;, &amp;ldquo;user&amp;rdquo; and &amp;ldquo;created&amp;rdquo;.</source>
          <target state="translated">Для этого набора данных, такого как наборы данных Flat XML, CSV и YAML, ключи первой указанной строки определяют имена столбцов таблицы, в предыдущем случае это были бы &amp;laquo;id&amp;raquo;, &amp;laquo;content&amp;raquo;, &amp;laquo;user&amp;raquo; и &amp;laquo;created&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="a5a19dc13362750c10f68df1dd834e11bf65f8cc" translate="yes" xml:space="preserve">
          <source>For this we would define a Query Table instance which derives its content from a table name and SQL query and compare it to a File/Array Based Data Set:</source>
          <target state="translated">Для этого мы бы определили экземпляр таблицы запроса,который выводит ее содержимое из имени таблицы и SQL-запроса,и сравнили бы ее с Множеством данных,основанных на файле/массиве:</target>
        </trans-unit>
        <trans-unit id="bd747da5259284d2cedb37053bd801f7b944711d" translate="yes" xml:space="preserve">
          <source>For unit tests, it is recommended to explicitly reset the values of static properties under test in your &lt;code&gt;setUp()&lt;/code&gt; code instead (and ideally also &lt;code&gt;tearDown()&lt;/code&gt;, so as to not affect subsequently executed tests).</source>
          <target state="translated">Для модульных тестов вместо этого рекомендуется явно сбросить значения тестируемых статических свойств в &lt;code&gt;setUp()&lt;/code&gt; (и в идеале также &lt;code&gt;tearDown()&lt;/code&gt; , чтобы не влиять на последующие выполняемые тесты).</target>
        </trans-unit>
        <trans-unit id="30a304b89f8f0e7a0c80d1209f819caa780f5296" translate="yes" xml:space="preserve">
          <source>For usage see &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-ignoring-code-blocks&quot;&gt;Ignoring Code Blocks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a9df4069ac400c2d109b68e5b4456b6afaab8d" translate="yes" xml:space="preserve">
          <source>For usage see &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks&quot;&gt;the section called &amp;ldquo;Ignoring Code Blocks&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Для использования см. &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks&quot;&gt;Раздел &amp;laquo;Игнорирование блоков кода&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">Часто задаваемые вопросы</target>
        </trans-unit>
        <trans-unit id="c98befcd898eff0b605321b27bb399012a9d5265" translate="yes" xml:space="preserve">
          <source>From the previous example it isn't obvious how you would specify an empty table. You can insert a tag with no attributes with the name of the empty table. A flat xml file for an empty guestbook table would then look like:</source>
          <target state="translated">Из предыдущего примера не видно,как бы вы указали пустую таблицу.Вы можете вставить тэг без атрибутов с именем пустой таблицы.Плоский xml-файл для пустой таблицы гостевой книги будет выглядеть так:</target>
        </trans-unit>
        <trans-unit id="3658f45ce7f57006c8c898d7115d875a1892a62f" translate="yes" xml:space="preserve">
          <source>From the previous implementation example you can easily see that &lt;code&gt;getConnection()&lt;/code&gt; method is pretty static and could be re-used in different database test-cases. Additionally to keep performance of your tests good and database overhead low you can refactor the code a little bit to get a generic abstract test case for your application, which still allows you to specify a different data-fixture for each test case:</source>
          <target state="translated">Из предыдущего примера реализации вы легко можете увидеть, что метод &lt;code&gt;getConnection()&lt;/code&gt; довольно статичен и может быть повторно использован в различных тестовых случаях базы данных. Кроме того, чтобы сохранить производительность ваших тестов на хорошем уровне и снизить накладные расходы на базу данных, вы можете немного реорганизовать код, чтобы получить общий абстрактный тестовый пример для вашего приложения, который по-прежнему позволяет вам указывать разные фикстуры данных для каждого тестового примера:</target>
        </trans-unit>
        <trans-unit id="7103f32996791d81c07b880df51f63fb7efbeb1e" translate="yes" xml:space="preserve">
          <source>Function and Method Coverage</source>
          <target state="translated">Покрытие функции и метода</target>
        </trans-unit>
        <trans-unit id="c7e38653a6e140e92ba1c0bf192d2218936503be" translate="yes" xml:space="preserve">
          <source>Functionality that needs to be stubbed out tends to cluster in the same object, improving cohesion. By presenting the functionality with a single, coherent interface you reduce the coupling with the rest of the system.</source>
          <target state="translated">Функциональность,которая должна быть наклеена,имеет тенденцию к скоплению в одном и том же объекте,улучшая сплоченность.Представляя функциональность с единым,когерентным интерфейсом,вы уменьшаете связь с остальной частью системы.</target>
        </trans-unit>
        <trans-unit id="c0e178550d27591dd2562c653403feba847334ca" translate="yes" xml:space="preserve">
          <source>Furthermore, by setting &lt;code&gt;forceCoversAnnotation=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;, a test can be marked as risky when it does not have a &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9631509e271525944995d61d9a9f34acf70b46" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in Crap4j format. See &lt;a href=&quot;code-coverage-analysis&quot;&gt;Chapter 11&lt;/a&gt; for more details.</source>
          <target state="translated">Формирует отчет о покрытии кода в формате Crap4j. См. &lt;a href=&quot;code-coverage-analysis&quot;&gt;Главу 11&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="9a1c70f85eb0863f9df6d218056e0515d35f8f14" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in Crap4j format. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3185a35e75c541690322766b482041aeacf100ac" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in HTML format. See &lt;a href=&quot;code-coverage-analysis&quot;&gt;Chapter 11&lt;/a&gt; for more details.</source>
          <target state="translated">Создает отчет о покрытии кода в формате HTML. См. &lt;a href=&quot;code-coverage-analysis&quot;&gt;Главу 11&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="d0cfa20936577a91d0c0cebfdd5b63b5a3db5c98" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in HTML format. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf20e0c81c75c9aac4ebaf3bdcd48974733f329" translate="yes" xml:space="preserve">
          <source>Generates a logfile in JUnit XML format for the tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e098b5ef3534ae0cb9c286aff4d09cef71267866" translate="yes" xml:space="preserve">
          <source>Generates a logfile in JUnit XML format for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">Создает файл журнала в формате JUnit XML для запуска тестов. См. &lt;a href=&quot;logging&quot;&gt;Главу 13&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="5cf7b510b41d640ab50cccaa741e5086adfc4fcc" translate="yes" xml:space="preserve">
          <source>Generates a logfile in XML format with the code coverage information for the tests run. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e6ba8aa2a04346fc25a224e65fcd01dbbf924" translate="yes" xml:space="preserve">
          <source>Generates a logfile in XML format with the code coverage information for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">Создает файл журнала в формате XML с информацией о покрытии кода для запускаемых тестов. См. &lt;a href=&quot;logging&quot;&gt;Главу 13&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="b0bb8ee15e0052f1672309322ad96d2e0bf3b0f3" translate="yes" xml:space="preserve">
          <source>Generates a logfile or command-line output in human readable format with the code coverage information for the tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120b433d53bc0a72f26c3733f540baeb400a273a" translate="yes" xml:space="preserve">
          <source>Generates a logfile or command-line output in human readable format with the code coverage information for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">Создает файл журнала или вывод командной строки в удобочитаемом формате с информацией о покрытии кода для запускаемых тестов. См. &lt;a href=&quot;logging&quot;&gt;Главу 13&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="f6839b90572decae58c2523809931ce56f4124ef" translate="yes" xml:space="preserve">
          <source>Generates a serialized PHP_CodeCoverage object with the code coverage information.</source>
          <target state="translated">Генерирует сериализованный объект PHP_CodeCoverage с информацией о покрытии кода.</target>
        </trans-unit>
        <trans-unit id="ba7694da27ff9ce350069439b3ff356b7bd7f4eb" translate="yes" xml:space="preserve">
          <source>Generates agile documentation in HTML or plain text format for the tests that are run (see &lt;a href=&quot;#textui-testdox&quot;&gt;TestDox&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a11f6ba99849cd72ef9d1e45842a5bf19ec2b2" translate="yes" xml:space="preserve">
          <source>Generates agile documentation in HTML or plain text format for the tests that are run. See &lt;a href=&quot;other-uses-for-tests&quot;&gt;Chapter 12&lt;/a&gt; for more details.</source>
          <target state="translated">Создает гибкую документацию в формате HTML или обычном текстовом формате для выполняемых тестов. См. &lt;a href=&quot;other-uses-for-tests&quot;&gt;Главу 12&lt;/a&gt; для более подробной информации.</target>
        </trans-unit>
        <trans-unit id="da88f522cd773e024da59e8948cf250b52e5ae81" translate="yes" xml:space="preserve">
          <source>Gerard Meszaros introduces the concept of Test Doubles in &lt;a href=&quot;https://phpunit.de/manual/6.5/en/appendixes.bibliography.html#Meszaros2007&quot;&gt;[&lt;abbr&gt;Meszaros2007&lt;/abbr&gt;]&lt;/a&gt; like this:</source>
          <target state="translated">Жерар Месарос представляет концепцию тестовых пар в &lt;a href=&quot;https://phpunit.de/manual/6.5/en/appendixes.bibliography.html#Meszaros2007&quot;&gt;[ &lt;abbr&gt;Meszaros2007&lt;/abbr&gt; ]&lt;/a&gt; следующим образом:</target>
        </trans-unit>
        <trans-unit id="de735362e31b44665b1951d877d3454b7b4c20fc" translate="yes" xml:space="preserve">
          <source>Gerard Meszaros introduces the concept of Test Doubles in &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/bibliography.html#appendixes-bibliography&quot;&gt;Meszaros2007&lt;/a&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79d9dd84806ecd269733dc617ebba164de3b982" translate="yes" xml:space="preserve">
          <source>Get the actual output.</source>
          <target state="translated">Получить фактическую мощность.</target>
        </trans-unit>
        <trans-unit id="2a102f27f850350772f2e44ae41ae0c25df0de90" translate="yes" xml:space="preserve">
          <source>Global Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ce8e321806dbb3b91df4ce336400b327d82b05" translate="yes" xml:space="preserve">
          <source>Global State</source>
          <target state="translated">Мировое государство</target>
        </trans-unit>
        <trans-unit id="6db8769e25f079e1b93e7ec6d9ebcb793e8faed0" translate="yes" xml:space="preserve">
          <source>Global State Manipulation</source>
          <target state="translated">Глобальная манипуляция государством</target>
        </trans-unit>
        <trans-unit id="3022594e64a661bec9c59577c103f3853fe781d6" translate="yes" xml:space="preserve">
          <source>Globally installing the PHAR involves the same procedure as manually &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#installation-windows&quot;&gt; installing Composer on Windows&lt;/a&gt;:</source>
          <target state="translated">Глобальная установка PHAR включает ту же процедуру, что и &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#installation-windows&quot;&gt;установка Composer&lt;/a&gt; вручную в Windows :</target>
        </trans-unit>
        <trans-unit id="ae9629f4ebb82c6331c0809fa9a0e54b00e578e6" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="translated">Groups</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="4a42c56ed588bcd1cb141bc3c54b1b03ddb143ef" translate="yes" xml:space="preserve">
          <source>Here is an example: suppose we want to test that the correct method, &lt;code&gt;update()&lt;/code&gt; in our example, is called on an object that observes another object. &lt;a href=&quot;#test-doubles-mock-objects-examples-sut-php&quot;&gt;Example 8.11&lt;/a&gt; shows the code for the &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; classes that are part of the System under Test (SUT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f595162ce0086d2d33baf504dce935bad604a997" translate="yes" xml:space="preserve">
          <source>Here is an example: suppose we want to test that the correct method, &lt;code&gt;update()&lt;/code&gt; in our example, is called on an object that observes another object. &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SUT.php&quot;&gt;Example 9.10&lt;/a&gt; shows the code for the &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; classes that are part of the System under Test (SUT).</source>
          <target state="translated">Вот пример: предположим, мы хотим проверить, что правильный метод &lt;code&gt;update()&lt;/code&gt; в нашем примере вызывается для объекта, который наблюдает за другим объектом. &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SUT.php&quot;&gt;В примере 9.10&lt;/a&gt; показан код для классов &lt;code&gt;Subject&lt;/code&gt; и &lt;code&gt;Observer&lt;/code&gt; , которые являются частью тестируемой системы (SUT).</target>
        </trans-unit>
        <trans-unit id="75970f5f5e8a12ff465817a52bc2d692711f3cf6" translate="yes" xml:space="preserve">
          <source>How to handle NULL with Flat XML / CSV Datasets?</source>
          <target state="translated">Как работать с NULL с Flat XML/CSV Datasets?</target>
        </trans-unit>
        <trans-unit id="a86a8e509ab919435206aa74ab6531e614525d23" translate="yes" xml:space="preserve">
          <source>However, this simplicity comes at a cost.</source>
          <target state="translated">Однако,эта простота обходится недешево.</target>
        </trans-unit>
        <trans-unit id="8598878bcc389c550580e1685122de2391b8fd19" translate="yes" xml:space="preserve">
          <source>Human readable code coverage output for the command-line or a text file. The aim of this output format is to provide a quick coverage overview while working on a small set of classes. For bigger projects this output can be useful to get an quick overview of the projects coverage or when used with the &lt;code&gt;--filter&lt;/code&gt; functionality. When used from the command-line by writing to &lt;code&gt;php://stdout&lt;/code&gt; this will honor the &lt;code&gt;--colors&lt;/code&gt; setting. Writing to standard out is the default option when used from the command-line. By default this will only show files that have at least one covered line. This can only be changed via the &lt;code&gt;showUncoveredFiles&lt;/code&gt; xml configuration option. See &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;the section called &amp;ldquo;Logging&amp;rdquo;&lt;/a&gt;. By default all files and their coverage status are shown in the detailed report. This can be changed via the &lt;code&gt;showOnlySummary&lt;/code&gt; xml configuration option.</source>
          <target state="translated">Удобочитаемый вывод покрытия кода для командной строки или текстового файла. Цель этого выходного формата - предоставить быстрый обзор покрытия при работе с небольшим набором классов. Для более крупных проектов этот вывод может быть полезен для быстрого обзора охвата проектов или при использовании с функцией &lt;code&gt;--filter&lt;/code&gt; . При использовании из командной строки путем записи в &lt;code&gt;php://stdout&lt;/code&gt; будет &lt;code&gt;--colors&lt;/code&gt; настройка --colors . Запись в стандартный формат - это опция по умолчанию при использовании из командной строки. По умолчанию будут отображаться только файлы, в которых есть хотя бы одна закрытая строка. Это можно изменить только с помощью &lt;code&gt;showUncoveredFiles&lt;/code&gt; конфигурации showUncoveredFiles xml. См. &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;Раздел &amp;laquo;Ведение журнала&amp;raquo;.&lt;/a&gt;. По умолчанию все файлы и статус их покрытия отображаются в подробном отчете. Это можно изменить с помощью &lt;code&gt;showOnlySummary&lt;/code&gt; конфигурации showOnlySummary xml.</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="7ed71515389bdb63144c64218f911e743a672670" translate="yes" xml:space="preserve">
          <source>I have been talking about NULL problems with the Flat XML and CSV DataSet, but there is a slightly complicated workaround to get both types of datasets working with NULLs.</source>
          <target state="translated">Я говорил о NULL проблемах с Flat XML и CSV DataSet,но есть несколько сложный обходной путь,чтобы заставить оба типа наборов данных работать с NULL.</target>
        </trans-unit>
        <trans-unit id="1e42d59f779165bfae84871f5d75d21fbcb5efae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ignoreCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the test will be case insensitive.</source>
          <target state="translated">Если &lt;code&gt;$ignoreCase&lt;/code&gt; это &lt;code&gt;true&lt;/code&gt; , то тест будет чувствительно к регистру.</target>
        </trans-unit>
        <trans-unit id="3d1d7fd58245c912c18b07610675b35c98651ba1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;max&lt;/code&gt; is defined as value, the number of columns will be maximum of the current terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd72b3f16a9d32f2c52191f553d8f3c9fc87ac88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;phpunit.xml&lt;/code&gt; or &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (in that order) exist in the current working directory and &lt;code&gt;--configuration&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; used, the configuration will be automatically read from that file.</source>
          <target state="translated">Если &lt;code&gt;phpunit.xml&lt;/code&gt; или &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (в таком порядке) существует в текущем рабочем каталоге и &lt;code&gt;--configuration&lt;/code&gt; это &lt;em&gt;не&lt;/em&gt; используется, конфигурация будет автоматически считываются из этого файла.</target>
        </trans-unit>
        <trans-unit id="f621727cd3d398e99068e06d884d0dd1da8c3c58" translate="yes" xml:space="preserve">
          <source>If a directory is specified and if &lt;code&gt;phpunit.xml&lt;/code&gt; or &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (in that order) exists in this directory, the configuration will be automatically read from that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46f6e7d0af7b5472168e1dc63f268f81356c79e" translate="yes" xml:space="preserve">
          <source>If a method is specificed with the &lt;code&gt;@covers&lt;/code&gt; annotation, only the referenced method will be considered as covered, but not methods called by this method. Hence, when a covered method is refactored using the &lt;em&gt;extract method&lt;/em&gt; refactoring, corresponding &lt;code&gt;@covers&lt;/code&gt; annotations need to be added. This is the reason it is recommended to use this annotation with class scope, not with method scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550243a4dac3a46bc4cdbe3e99fc05a40939e76f" translate="yes" xml:space="preserve">
          <source>If any of the aforementioned assumptions is not fulfilled or if &lt;code&gt;$actual-&amp;gt;$method($expected)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; then the assertion fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a617c8c9df3b8c8e8c129c4fab09b14a75ea97b" translate="yes" xml:space="preserve">
          <source>If provided, only the code coverage information for the specified method(s) will be considered.</source>
          <target state="translated">В случае предоставления,будет учитываться только информация о покрытии кода для указанного метода (-ов).</target>
        </trans-unit>
        <trans-unit id="16fbee1a240e265dd28348d43eb2f90ad271aeb9" translate="yes" xml:space="preserve">
          <source>If provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. This will make sure that code is only marked as covered if there are dedicated tests for it, but not if it used indirectly by the tests for a different class, thus avoiding false positives for code coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0345e64a0eaada7c41a65b899f96e3da82fe38f2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;http://suhosin.org/&quot;&gt;Suhosin&lt;/a&gt; extension is enabled, you need to allow execution of PHARs in your &lt;code&gt;php.ini&lt;/code&gt;:</source>
          <target state="translated">Если расширение &lt;a href=&quot;http://suhosin.org/&quot;&gt;Suhosin&lt;/a&gt; включено, вам необходимо разрешить выполнение PHAR в вашем &lt;code&gt;php.ini&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ac3a78e2d26a1c0ae66509db29835c500490f815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Если пакет &lt;code&gt;PHP_Invoker&lt;/code&gt; установлен и включен строгий режим, большой тест завершится неудачно, если его выполнение займет больше 60 секунд. Этот тайм-аут можно настроить с помощью атрибута &lt;code&gt;timeoutForLargeTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="b6cb2208bcb217745f45255e0078c63ac7056759" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Если пакет &lt;code&gt;PHP_Invoker&lt;/code&gt; установлен и включен строгий режим, средний тест завершится неудачно, если его выполнение займет больше 10 секунд. Этот таймаут настраивается с помощью атрибута &lt;code&gt;timeoutForMediumTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="44fbf358d83a47ca53327acca05d9da3470befaa" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">Если пакет &lt;code&gt;PHP_Invoker&lt;/code&gt; установлен и включен строгий режим, небольшой тест завершится неудачно, если его выполнение займет больше 1 секунды. Этот тайм-аут настраивается с помощью атрибута &lt;code&gt;timeoutForSmallTests&lt;/code&gt; в файле конфигурации XML.</target>
        </trans-unit>
        <trans-unit id="0609a2d5f42f47439532b5cd30ffb5a21ada8900" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;setUp()&lt;/code&gt; code differs only slightly, move the code that differs from the &lt;code&gt;setUp()&lt;/code&gt; code to the test method.</source>
          <target state="translated">Если код &lt;code&gt;setUp()&lt;/code&gt; отличается незначительно, переместите код, который отличается от &lt;code&gt;setUp()&lt;/code&gt; в метод тестирования.</target>
        </trans-unit>
        <trans-unit id="5121934d7f5c0a3adc26a221cbc43fd23d8a1c7a" translate="yes" xml:space="preserve">
          <source>If the original class does declare a method named &quot;method&quot; then &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; has to be used.</source>
          <target state="translated">Если исходный класс объявляет метод с именем &quot;method&quot;, тогда &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; должен использоваться.</target>
        </trans-unit>
        <trans-unit id="cd2ba1a32e33246b08c107d01283251a128f41fa" translate="yes" xml:space="preserve">
          <source>If the original class does declare a method named &amp;ldquo;method&amp;rdquo; then &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; has to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84d0556e2a16d0aa9825512c60fc21691883ca1" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as &lt;code&gt;@large&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">Если применяются ограничения по времени, основанные на размере теста, этот атрибут устанавливает время ожидания для всех тестов, отмеченных как &lt;code&gt;@large&lt;/code&gt; . Если тест не завершится в течение заданного тайм-аута, он завершится ошибкой.</target>
        </trans-unit>
        <trans-unit id="2e9544d555087c4c3f04a3dca6e739bcbe05444d" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as &lt;code&gt;@medium&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">Если применяются ограничения по времени, основанные на размере теста, этот атрибут устанавливает время ожидания для всех тестов, отмеченных как &lt;code&gt;@medium&lt;/code&gt; . Если тест не завершится в течение заданного тайм-аута, он завершится ошибкой.</target>
        </trans-unit>
        <trans-unit id="3c5029c91ea76171dc581bb8b0d82b4558885116" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests not marked as &lt;code&gt;@medium&lt;/code&gt; or &lt;code&gt;@large&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">Если применяются ограничения по времени, основанные на размере теста, то этот атрибут устанавливает время ожидания для всех тестов, не отмеченных как &lt;code&gt;@medium&lt;/code&gt; или &lt;code&gt;@large&lt;/code&gt; . Если тест не завершится в течение заданного тайм-аута, он завершится ошибкой.</target>
        </trans-unit>
        <trans-unit id="91913332c589f394086f4eae495d036987c318e3" translate="yes" xml:space="preserve">
          <source>If we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. &lt;code&gt;PHPUnit\Framework\IncompleteTest&lt;/code&gt; is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. &lt;code&gt;PHPUnit\Framework\IncompleteTestError&lt;/code&gt; is the standard implementation of this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40578e362327852b16f5d4e030f28f17c713a9fe" translate="yes" xml:space="preserve">
          <source>If we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. &lt;code&gt;PHPUnit_Framework_IncompleteTest&lt;/code&gt; is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; is the standard implementation of this interface.</source>
          <target state="translated">Если мы думаем об успешном тесте как о зеленом индикаторе, а об отказе теста как о красном свете, нам понадобится дополнительный желтый свет, чтобы пометить тест как незавершенный или еще не реализованный. &lt;code&gt;PHPUnit_Framework_IncompleteTest&lt;/code&gt; - это интерфейс маркера для маркировки исключения, которое вызывается методом тестирования в результате того, что тест не завершен или в настоящее время не реализован. &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; - это стандартная реализация этого интерфейса.</target>
        </trans-unit>
        <trans-unit id="0b04a7ef50b6705ad3387a4f49771792bfba8b04" translate="yes" xml:space="preserve">
          <source>If you are using a persistent database (not Sqlite Memory) you can easily setup the database once with tools such as phpMyAdmin for MySQL and re-use the database for every test-run.</source>
          <target state="translated">Если вы используете постоянную базу данных (не Sqlite Memory),вы можете легко настроить базу данных один раз с помощью таких инструментов,как phpMyAdmin для MySQL и повторно использовать базу данных для каждого теста.</target>
        </trans-unit>
        <trans-unit id="cc3988d73ceead5f5ff094949488d455a4cd3b0e" translate="yes" xml:space="preserve">
          <source>If you are using libraries such as &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; or &lt;a href=&quot;http://www.propelorm.org/&quot;&gt;Propel&lt;/a&gt; you can use their APIs to create the database schema you need once before you run the tests. You can utilize &lt;a href=&quot;textui&quot;&gt;PHPUnit's Bootstrap and Configuration&lt;/a&gt; capabilities to execute this code whenever your tests are run.</source>
          <target state="translated">Если вы используете такие библиотеки, как &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; или &lt;a href=&quot;http://www.propelorm.org/&quot;&gt;Propel,&lt;/a&gt; вы можете использовать их API-интерфейсы для создания схемы базы данных, которая вам нужна, один раз перед запуском тестов. Вы можете использовать возможности &lt;a href=&quot;textui&quot;&gt;PHPUnit Bootstrap и Configuration&lt;/a&gt; для выполнения этого кода при каждом запуске ваших тестов.</target>
        </trans-unit>
        <trans-unit id="fbd85995d88d253da9b429709df5718e51c7a7fb" translate="yes" xml:space="preserve">
          <source>If you are using syntax that doesn&amp;rsquo;t compile with a certain PHP Version look into the xml configuration for version dependent includes in &lt;a href=&quot;configuration#appendixes-configuration-testsuites&quot;&gt;The &amp;lt;testsuites&amp;gt; Element&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c6baffee6d2afcf8aad5989d826d5f98b0ba6e" translate="yes" xml:space="preserve">
          <source>If you are using syntax that doesn't compile with a certain PHP Version look into the xml configuration for version dependent includes in &lt;a href=&quot;appendixes.configuration#appendixes.configuration.testsuites&quot;&gt;the section called &amp;ldquo;Test Suites&amp;rdquo;&lt;/a&gt;</source>
          <target state="translated">Если вы используете синтаксис, который не компилируется с определенной версией PHP, просмотрите конфигурацию xml для зависимых от версии &lt;a href=&quot;appendixes.configuration#appendixes.configuration.testsuites&quot;&gt;включений в разделе &amp;laquo;Наборы тестов&amp;raquo;.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e717ed3c78962a5ce2dbe7d70c1ff5e204120cc9" translate="yes" xml:space="preserve">
          <source>If you do not cache the PDO instance that is created from the TestCase &lt;code&gt;getConnection()&lt;/code&gt; method the number of connections to the database is increasing by one or more with each database test. With default configuration MySql only allows 100 concurrent connections other vendors also have maximum connection limits.</source>
          <target state="translated">Если вы не кэшируете экземпляр PDO, созданный с помощью метода TestCase &lt;code&gt;getConnection()&lt;/code&gt; количество подключений к базе данных увеличивается на одно или несколько с каждым тестом базы данных. В конфигурации по умолчанию MySql разрешает только 100 одновременных подключений, другие поставщики также имеют максимальные ограничения на количество подключений.</target>
        </trans-unit>
        <trans-unit id="da878ab70f17adab2b85d7401b55fa3e66d4072d" translate="yes" xml:space="preserve">
          <source>If you have a large fixture file you can use the DataSet Filter for white- and blacklisting of tables and columns that should be contained in a sub-dataset. This is especially handy in combination with the DB DataSet to filter the columns of the datasets.</source>
          <target state="translated">Если у вас большой файл фиксации,вы можете использовать фильтр DataSet Filter для создания белого и черного списков таблиц и столбцов,которые должны содержаться в поднаборе данных.Это особенно удобно в сочетании с DB DataSet для фильтрации столбцов наборов данных.</target>
        </trans-unit>
        <trans-unit id="64e2b42af8dc866525a76f701d68a4d8cf78c96b" translate="yes" xml:space="preserve">
          <source>If you point the PHPUnit command-line test runner to a directory it will look for &lt;code&gt;*Test.php&lt;/code&gt; files.</source>
          <target state="translated">Если вы укажете средство запуска тестов командной строки PHPUnit в каталог, он будет искать файлы &lt;code&gt;*Test.php&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5827cbac02873879d9e8ea8099af725de1cf16d7" translate="yes" xml:space="preserve">
          <source>If you really have a different &lt;code&gt;setUp()&lt;/code&gt;, you need a different test case class. Name the class after the difference in the setup.</source>
          <target state="translated">Если у вас действительно другой &lt;code&gt;setUp()&lt;/code&gt; , вам понадобится другой класс тестового примера. Назовите класс по разнице в настройке.</target>
        </trans-unit>
        <trans-unit id="5b90716b4b0e370349e18d41ffbff134abfd1578" translate="yes" xml:space="preserve">
          <source>If you see a warning while running tests that no code coverage driver is available, it means that you are using the PHP CLI binary (&lt;code&gt;php&lt;/code&gt;) and do not have Xdebug or PCOV loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdbe429ed87d0561a5f734b7867eb47dd59f0d4" translate="yes" xml:space="preserve">
          <source>If you want to test code that works with the Database Extension the setup is a bit more complex and you have to extend a different abstract TestCase requiring you to implement two abstract methods &lt;code&gt;getConnection()&lt;/code&gt; and &lt;code&gt;getDataSet()&lt;/code&gt;:</source>
          <target state="translated">Если вы хотите протестировать код, который работает с расширением базы данных, настройка немного сложнее, и вам нужно расширить другой абстрактный TestCase, требующий реализации двух абстрактных методов &lt;code&gt;getConnection()&lt;/code&gt; и &lt;code&gt;getDataSet()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c15b85d3817c8daaaab47b428469c731db4aaf35" translate="yes" xml:space="preserve">
          <source>Ignore &lt;code&gt;phpunit.xml&lt;/code&gt; and &lt;code&gt;phpunit.xml.dist&lt;/code&gt; from the current working directory.</source>
          <target state="translated">Игнорируйте &lt;code&gt;phpunit.xml&lt;/code&gt; и &lt;code&gt;phpunit.xml.dist&lt;/code&gt; из текущего рабочего каталога.</target>
        </trans-unit>
        <trans-unit id="4e7559a55f03ec686890f2a5897c5f4df6589215" translate="yes" xml:space="preserve">
          <source>Ignoring Code Blocks</source>
          <target state="translated">Игнорирование кодовых блоков</target>
        </trans-unit>
        <trans-unit id="deb86d630d630ac5071c48d0c476de5ac4321ebb" translate="yes" xml:space="preserve">
          <source>Implement PHPUnit\Framework\TestListener</source>
          <target state="translated">Реализовать PHPUnit\Framework\TestListener</target>
        </trans-unit>
        <trans-unit id="ca47b573b6c80926ed96a90308b4003c14ec693e" translate="yes" xml:space="preserve">
          <source>Implement PHPUnit_Framework_Test</source>
          <target state="translated">Реализация PHPUnit_Framework_Test</target>
        </trans-unit>
        <trans-unit id="f5636383a86a651af0a3108cbfd54aa4831d4020" translate="yes" xml:space="preserve">
          <source>Implementing getConnection()</source>
          <target state="translated">Реализация getConnection()</target>
        </trans-unit>
        <trans-unit id="77cc9d484d61150479874ce69058d89a72be1ca4" translate="yes" xml:space="preserve">
          <source>Implementing getDataSet()</source>
          <target state="translated">Реализация getDataSet()</target>
        </trans-unit>
        <trans-unit id="ecaae61d95472fc3adc8b9f4f5398b1f333f15c8" translate="yes" xml:space="preserve">
          <source>Implementing your own DataSets/DataTables</source>
          <target state="translated">Реализация ваших собственных DataSet/DataTables</target>
        </trans-unit>
        <trans-unit id="459e887ffcfbbb00dfb17877abcff53963e09b14" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;appendixes.configuration#appendixes.configuration.test-listeners&quot;&gt;the section called &amp;ldquo;Test Listeners&amp;rdquo;&lt;/a&gt; you can see how to configure PHPUnit to attach your test listener to the test execution.</source>
          <target state="translated">В &lt;a href=&quot;appendixes.configuration#appendixes.configuration.test-listeners&quot;&gt;разделе &amp;laquo;Слушатели тестов&amp;raquo;&lt;/a&gt; вы можете увидеть, как настроить PHPUnit для присоединения вашего тестового слушателя к выполнению теста.</target>
        </trans-unit>
        <trans-unit id="6908d49e1a05d95a7f17fd675e4c97d258560dcd" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest-php&quot;&gt;Testing array operations with PHPUnit&lt;/a&gt;, the fixture was the array that is stored in the &lt;code&gt;$stack&lt;/code&gt; variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cc5e2aa9dfbd8d819d58c00f1c31314e983c48" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php&quot;&gt;Using the @depends annotation to express dependencies&lt;/a&gt; we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. &lt;a href=&quot;#fixtures-examples-stacktest-php&quot;&gt;Example 4.1&lt;/a&gt; shows how we can write the tests of the &lt;code&gt;StackTest&lt;/code&gt; in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, &lt;code&gt;$stack&lt;/code&gt;, that we are going to use instead of a method-local variable. Then we put the creation of the &lt;code&gt;array&lt;/code&gt; fixture into the &lt;code&gt;setUp()&lt;/code&gt; method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt;, instead of the method-local variable &lt;code&gt;$stack&lt;/code&gt; with the &lt;code&gt;assertSame()&lt;/code&gt; assertion method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58667d806dfe51819803613bafd29cc27fbccc15" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Example 2.1&lt;/a&gt;, the fixture was simply the array that is stored in the &lt;code&gt;$stack&lt;/code&gt; variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write.</source>
          <target state="translated">В &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;примере 2.1&lt;/a&gt; прибором был просто массив, который хранится в переменной &lt;code&gt;$stack&lt;/code&gt; . Однако в большинстве случаев прибор будет более сложным, чем простой массив, и объем кода, необходимый для его настройки, будет соответственно расти. Фактическое содержание теста теряется в шуме настройки прибора. Эта проблема усугубляется, когда вы пишете несколько тестов с похожими приборами. Без некоторой помощи со стороны среды тестирования нам пришлось бы продублировать код, который устанавливает приспособление для каждого написанного нами теста.</target>
        </trans-unit>
        <trans-unit id="14decf5c3b38532c40295f8ca2e1e20860268459" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. &lt;a href=&quot;fixtures#fixtures.examples.StackTest.php&quot;&gt;Example 4.1&lt;/a&gt; shows how we can write the tests of the &lt;code&gt;StackTest&lt;/code&gt; in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, &lt;code&gt;$stack&lt;/code&gt;, that we are going to use instead of a method-local variable. Then we put the creation of the &lt;code&gt;array&lt;/code&gt; fixture into the &lt;code&gt;setUp()&lt;/code&gt; method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt;, instead of the method-local variable &lt;code&gt;$stack&lt;/code&gt; with the &lt;code&gt;assertEquals()&lt;/code&gt; assertion method.</source>
          <target state="translated">В &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;примере 2.2&lt;/a&gt; мы использовали отношения производитель-потребитель между тестами для совместного использования фикстуры. Это не всегда желательно или даже возможно. &lt;a href=&quot;fixtures#fixtures.examples.StackTest.php&quot;&gt;В примере 4.1&lt;/a&gt; показано, как мы можем написать тесты &lt;code&gt;StackTest&lt;/code&gt; таким образом, чтобы повторно использовать не сам прибор, а код, который его создает. Сначала мы объявляем переменную экземпляра &lt;code&gt;$stack&lt;/code&gt; , которую собираемся использовать вместо локальной переменной метода. Затем мы помещаем создание &lt;code&gt;setUp()&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; в метод setUp () . Наконец, мы удаляем избыточный код из тестовых методов и используем недавно введенную переменную экземпляра &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt; вместо локальной переменной метода &lt;code&gt;$stack&lt;/code&gt; с &lt;code&gt;assertEquals()&lt;/code&gt; метод утверждения.</target>
        </trans-unit>
        <trans-unit id="53ca303e4e625f4364d66677865c67cf67682aa8" translate="yes" xml:space="preserve">
          <source>In PHP, global variables work like this:</source>
          <target state="translated">В PHP глобальные переменные работают именно так:</target>
        </trans-unit>
        <trans-unit id="0cc202b4587b64cc286a81dca083c1e300a547ed" translate="yes" xml:space="preserve">
          <source>In addition to being helpful for persons reading the code, this annotation is useful in strict coverage mode where unintentionally covered code will cause a test to fail. See &lt;a href=&quot;risky-tests#risky-tests-unintentionally-covered-code&quot;&gt;Unintentionally Covered Code&lt;/a&gt; for more information regarding strict coverage mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1a7ad9ae49b9a17a8a02e051be1c0430991d33" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;expectException()&lt;/code&gt; method the &lt;code&gt;expectExceptionCode()&lt;/code&gt;, &lt;code&gt;expectExceptionMessage()&lt;/code&gt;, and &lt;code&gt;expectExceptionMessageMatches()&lt;/code&gt; methods exist to set up expectations for exceptions raised by the code under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902150882163cc266a5339209c00c212034c0a32" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;expectException()&lt;/code&gt; method the &lt;code&gt;expectExceptionCode()&lt;/code&gt;, &lt;code&gt;expectExceptionMessage()&lt;/code&gt;, and &lt;code&gt;expectExceptionMessageRegExp()&lt;/code&gt; methods exist to set up expectations for exceptions raised by the code under test.</source>
          <target state="translated">В дополнение к &lt;code&gt;expectException()&lt;/code&gt; методы &lt;code&gt;expectExceptionCode()&lt;/code&gt; , &lt;code&gt;expectExceptionMessage()&lt;/code&gt; и &lt;code&gt;expectExceptionMessageRegExp()&lt;/code&gt; для установки ожиданий для исключений, вызванных тестируемым кодом.</target>
        </trans-unit>
        <trans-unit id="a72bf60563517809d7a57f673ba7d377c4d69933" translate="yes" xml:space="preserve">
          <source>In addition to the above methods it is also possible to use the &lt;code&gt;@requires&lt;/code&gt; annotation to express common preconditions for a test case.</source>
          <target state="translated">В дополнение к указанным выше методам также можно использовать аннотацию &lt;code&gt;@requires&lt;/code&gt; для выражения общих предварительных условий для тестового примера.</target>
        </trans-unit>
        <trans-unit id="d8668ef60f9a27aa3e62b60579dab49b9f0f5ab3" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods are called before the first test of the test case class is run and after the last test of the test case class is run, respectively.</source>
          <target state="translated">Кроме того, методы шаблона &lt;code&gt;setUpBeforeClass()&lt;/code&gt; и &lt;code&gt;tearDownAfterClass()&lt;/code&gt; вызываются перед запуском первого теста класса тестового примера и после выполнения последнего теста класса тестового примера соответственно.</target>
        </trans-unit>
        <trans-unit id="2f2cf1ecf2d71da437d5f329c42e22a00bea44cc" translate="yes" xml:space="preserve">
          <source>In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage.</source>
          <target state="translated">В информатике покрытие кода-это мера,используемая для описания степени,в которой исходный код программы тестируется определенным тестовым набором.Программа с высоким покрытием кода тестировалась более тщательно и имеет меньше шансов содержать программные ошибки,чем программа с низким покрытием кода.</target>
        </trans-unit>
        <trans-unit id="b201af5837dcdc4f4092522e3ce93c594110f1f4" translate="yes" xml:space="preserve">
          <source>In conclusion I can only advise using the Flat XML datasets if you do not need NULL values.</source>
          <target state="translated">В заключение я могу посоветовать использовать наборы данных Flat XML только в том случае,если вам не нужны NULL-значения.</target>
        </trans-unit>
        <trans-unit id="7e1e7b3fff10585a108be2959c6f038d1de47ebf" translate="yes" xml:space="preserve">
          <source>In fact, you can even use global function wrappers such as &lt;code&gt;assertTrue()&lt;/code&gt; in any context (including classes that extend &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;) when you (manually) include the &lt;code&gt;src/Framework/Assert/Functions.php&lt;/code&gt; sourcecode file that comes with PHPUnit.</source>
          <target state="translated">Фактически, вы даже можете использовать глобальные оболочки функций, такие как &lt;code&gt;assertTrue()&lt;/code&gt; в любом контексте (включая классы, расширяющие &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; ), когда вы (вручную) включаете файл исходного кода &lt;code&gt;src/Framework/Assert/Functions.php&lt;/code&gt; , который поставляется с PHPUnit.</target>
        </trans-unit>
        <trans-unit id="37df62d41354e44aa49e4f8f928a9bf608f06008" translate="yes" xml:space="preserve">
          <source>In his book on xUnit Test Patterns Gerard Meszaros lists the four stages of a unit-test:</source>
          <target state="translated">В своей книге о тестах xUnit Test Patterns Герард Мессарос перечисляет четыре этапа юнит-теста:</target>
        </trans-unit>
        <trans-unit id="71fb338773577ce2f9c8cf729c583dd2c69c27b2" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods we have to ensure that the directory does not exist before and after the test.</source>
          <target state="translated">В &lt;code&gt;setUp()&lt;/code&gt; и &lt;code&gt;tearDown()&lt;/code&gt; мы должны убедиться, что каталог не существует до и после теста.</target>
        </trans-unit>
        <trans-unit id="9f0652f424e9df01292afb2d15b61255dcc2f58f" translate="yes" xml:space="preserve">
          <source>In the example above, the first test, &lt;code&gt;testEmpty()&lt;/code&gt;, creates a new array and asserts that it is empty. The test then returns the fixture as its result. The second test, &lt;code&gt;testPush()&lt;/code&gt;, depends on &lt;code&gt;testEmpty()&lt;/code&gt; and is passed the result of that depended-upon test as its argument. Finally, &lt;code&gt;testPop()&lt;/code&gt; depends upon &lt;code&gt;testPush()&lt;/code&gt;.</source>
          <target state="translated">В приведенном выше примере первый тест &lt;code&gt;testEmpty()&lt;/code&gt; создает новый массив и утверждает, что он пуст. Затем тест возвращает прибор в качестве своего результата. Второй тест, &lt;code&gt;testPush()&lt;/code&gt; , зависит от &lt;code&gt;testEmpty()&lt;/code&gt; и в качестве аргумента ему передается результат этого зависимого теста. Наконец, &lt;code&gt;testPop()&lt;/code&gt; зависит от &lt;code&gt;testPush()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9cacc17f261dfb01db3af8321341b873020e7e15" translate="yes" xml:space="preserve">
          <source>In the example above, the tests from the &lt;code&gt;tests/unit&lt;/code&gt; directory are only added to the test suite if the PHP version is at least 8.0.0. The &lt;code&gt;phpVersionOperator&lt;/code&gt; attribute is optional and defaults to &lt;code&gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a109e63335a97e1bff05a59cbc5beb4e798419b3" translate="yes" xml:space="preserve">
          <source>In the example shown above, the &lt;code&gt;C::m()&lt;/code&gt; method has a return type declaration indicating that this method returns an object of type &lt;code&gt;D&lt;/code&gt;. When a test double for &lt;code&gt;C&lt;/code&gt; is created and no return value is configured for &lt;code&gt;m()&lt;/code&gt; using &lt;code&gt;willReturn()&lt;/code&gt; (see above), for instance, then when &lt;code&gt;m()&lt;/code&gt; is invoked PHPUnit will automatically create a test double for &lt;code&gt;D&lt;/code&gt; to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abf16e328dca5730f6d1c2465370767be498d73" translate="yes" xml:space="preserve">
          <source>In the examples so far we have been returning simple values using &lt;code&gt;willReturn($value)&lt;/code&gt;. This short syntax is the same as &lt;code&gt;will($this-&amp;gt;returnValue($value))&lt;/code&gt;. We can use variations on this longer syntax to achieve more complex stubbing behaviour.</source>
          <target state="translated">До сих пор в примерах мы возвращали простые значения с помощью &lt;code&gt;willReturn($value)&lt;/code&gt; . Этот короткий синтаксис такой же, как и &lt;code&gt;will($this-&amp;gt;returnValue($value))&lt;/code&gt; . Мы можем использовать вариации этого более длинного синтаксиса для достижения более сложного поведения заглушки.</target>
        </trans-unit>
        <trans-unit id="5244528626be773ff2f80cfc1621e8ff798d77ca" translate="yes" xml:space="preserve">
          <source>In the previous example we create an in-memory Sqlite connection and pass it to the &lt;code&gt;createDefaultDBConnection&lt;/code&gt; method which wraps the PDO instance and the second parameter (the database-name) in a very simple abstraction layer for database connections of the type &lt;code&gt;PHPUnit_Extensions_Database_DB_IDatabaseConnection&lt;/code&gt;.</source>
          <target state="translated">В предыдущем примере мы создаем соединение Sqlite в памяти и передаем его методу &lt;code&gt;createDefaultDBConnection&lt;/code&gt; , который обертывает экземпляр PDO и второй параметр (имя-базы данных) на очень простом уровне абстракции для соединений с базой данных типа &lt;code&gt;PHPUnit_Extensions_Database_DB_IDatabaseConnection&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b5250c5bfb9b04e27c80e7e691b6846638f95be" translate="yes" xml:space="preserve">
          <source>In the scope of a function or method, you may access the global variable &lt;code&gt;$foo&lt;/code&gt; by either directly accessing &lt;code&gt;$GLOBALS['foo']&lt;/code&gt; or by using &lt;code&gt;global $foo;&lt;/code&gt; to create a local variable with a reference to the global variable.</source>
          <target state="translated">В рамках функции или метода вы можете получить доступ к глобальной переменной &lt;code&gt;$foo&lt;/code&gt; , либо напрямую обращаясь к &lt;code&gt;$GLOBALS['foo']&lt;/code&gt; либо используя &lt;code&gt;global $foo;&lt;/code&gt; для создания локальной переменной со ссылкой на глобальную переменную.</target>
        </trans-unit>
        <trans-unit id="10ef912533cbdf9835d2d66bd0c9841fce5c9258" translate="yes" xml:space="preserve">
          <source>In this case the second entry is posted anonymously. However, this leads to a serious problem with column recognition. During dataset equality assertions each dataset has to specify what columns a table holds. If an attribute is NULL for all the rows of a data-table, how would the Database Extension know that the column should be part of the table?</source>
          <target state="translated">В этом случае вторая запись размещается анонимно.Однако это приводит к серьезной проблеме с распознаванием колонок.При утверждении равенства в наборе данных каждый набор данных должен указать,какие столбцы содержит таблица.Если атрибут NULL для всех строк таблицы данных,как Расширение базы данных узнает,что столбец должен быть частью таблицы?</target>
        </trans-unit>
        <trans-unit id="059342034707d18c7809b882a57ba7cdcd0d4f6d" translate="yes" xml:space="preserve">
          <source>In this chapter you will learn all about PHPUnit&amp;rsquo;s code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;php-code-coverage&lt;/a&gt; component, which in turn leverages the code coverage functionality provided by the &lt;a href=&quot;https://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; or &lt;a href=&quot;https://github.com/krakjoe/pcov&quot;&gt;PCOV&lt;/a&gt; extensions for PHP or by &lt;a href=&quot;https://www.php.net/manual/en/book.phpdbg.php&quot;&gt;PHPDBG&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06e9e6c18e73984c7902792c482ba21277c13d7" translate="yes" xml:space="preserve">
          <source>In this chapter you will learn all about PHPUnit's code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;PHP_CodeCoverage&lt;/a&gt; component, which in turn leverages the code coverage functionality provided by the &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; extension for PHP.</source>
          <target state="translated">В этой главе вы узнаете все о функциональности покрытия кода PHPUnit, которая дает представление о том, какие части производственного кода выполняются при запуске тестов. Он использует компонент &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;PHP_CodeCoverage&lt;/a&gt; , который, в свою очередь, использует функции покрытия кода, предоставляемые расширением &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; для PHP.</target>
        </trans-unit>
        <trans-unit id="1d9f3225aee3bc235926c60166a963f1a0ecc8ca" translate="yes" xml:space="preserve">
          <source>In this example only one of the array values differs and the other values are shown to provide context on where the error occurred.</source>
          <target state="translated">В данном примере различается только одно из значений массива,а остальные значения показаны для того,чтобы дать контекст,в котором произошла ошибка.</target>
        </trans-unit>
        <trans-unit id="bbc5c2aa39abe9475cebea0eb1018adc45506e0b" translate="yes" xml:space="preserve">
          <source>In this example the difference in the first index between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;'1'&lt;/code&gt; is reported even though &lt;code&gt;assertEquals()&lt;/code&gt; considers the values as a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15b4accfaa967bde7b380d158497e5eb028526d" translate="yes" xml:space="preserve">
          <source>In this example the difference in the first index between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;'1'&lt;/code&gt; is reported even though assertEquals considers the values as a match.</source>
          <target state="translated">В этом примере сообщается о разнице в первом индексе между &lt;code&gt;1&lt;/code&gt; и &lt;code&gt;'1'&lt;/code&gt; , хотя assertEquals считает значения совпадающими.</target>
        </trans-unit>
        <trans-unit id="7bbd27931ac56240ceed04ae20ef350f16f93c1f" translate="yes" xml:space="preserve">
          <source>In turn, if you specify only a subset of the table columns in the Flat XML dataset all the omitted values are set to their default values. This will lead to errors if one of the omitted columns is defined as &amp;ldquo;NOT NULL DEFAULT NULL&amp;rdquo;.</source>
          <target state="translated">В свою очередь, если вы укажете только подмножество столбцов таблицы в наборе данных Flat XML, для всех пропущенных значений будут установлены значения по умолчанию. Это приведет к ошибкам, если один из пропущенных столбцов определен как &amp;laquo;NOT NULL DEFAULT NULL&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="42e70faea283110f3781aa15c02bcf5a1401b5ba" translate="yes" xml:space="preserve">
          <source>In your test use a special assertion called &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; for verification purposes, however, this is entirely optional. This feature will be explained in the section &amp;ldquo;Database Assertions&amp;rdquo;.</source>
          <target state="translated">В вашем тесте используйте специальное утверждение &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; для целей проверки, однако это совершенно необязательно. Эта функция будет объяснена в разделе &amp;laquo;Утверждения базы данных&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="3304d1c592fa3c165cec41f7252abbeea911ace8" translate="yes" xml:space="preserve">
          <source>Including Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7d301fd25bcde01562b91d2a5806ac84e156c2" translate="yes" xml:space="preserve">
          <source>Incomplete Tests</source>
          <target state="translated">Неполные тесты</target>
        </trans-unit>
        <trans-unit id="70770c735255bb6dc6cb7565fb84de6440371c15" translate="yes" xml:space="preserve">
          <source>Incomplete and Skipped Tests</source>
          <target state="translated">Неполные и пропущенные тесты</target>
        </trans-unit>
        <trans-unit id="0df3ba3bcc5b6b38249ab44a3542a6757b785b93" translate="yes" xml:space="preserve">
          <source>Indicates that a test should be run in a separate PHP process.</source>
          <target state="translated">Указывает,что тест должен быть запущен в отдельном PHP-процессе.</target>
        </trans-unit>
        <trans-unit id="9437ffff72a85ee18d9dfa0bfb75630a99d55592" translate="yes" xml:space="preserve">
          <source>Indicates that all tests in a test class should be run in a separate PHP process.</source>
          <target state="translated">Указывает,что все тесты в тестовом классе должны быть запущены в отдельном PHP-процессе.</target>
        </trans-unit>
        <trans-unit id="80bc394d0a79d7263f0202f63a6e0e689c57c595" translate="yes" xml:space="preserve">
          <source>Inserting the rows required for the test into these tables</source>
          <target state="translated">Вставка строк,необходимых для проведения теста,в эти таблицы</target>
        </trans-unit>
        <trans-unit id="7c67da56927c1201f863fd1a29ccbd173201dd65" translate="yes" xml:space="preserve">
          <source>Inside the test methods, assertion methods such as &lt;code&gt;assertEquals()&lt;/code&gt; (see &lt;a href=&quot;appendixes.assertions&quot;&gt;Appendix A&lt;/a&gt;) are used to assert that an actual value matches an expected value.</source>
          <target state="translated">Внутри методов тестирования используются методы утверждения, такие как &lt;code&gt;assertEquals()&lt;/code&gt; (см. &lt;a href=&quot;appendixes.assertions&quot;&gt;Приложение A&lt;/a&gt; ), чтобы утверждать, что фактическое значение соответствует ожидаемому.</target>
        </trans-unit>
        <trans-unit id="42c0c6d5e7556d06ca25047a9c6cd56b4fd170d6" translate="yes" xml:space="preserve">
          <source>Inside the test methods, assertion methods such as &lt;code&gt;assertSame()&lt;/code&gt; (see &lt;a href=&quot;assertions#appendixes-assertions&quot;&gt;Assertions&lt;/a&gt;) are used to assert that an actual value matches an expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dc4e9fc83d7de94ca8bd5d1c15f633ad61c811" translate="yes" xml:space="preserve">
          <source>Installing PHPUnit</source>
          <target state="translated">Установка PHPUnit</target>
        </trans-unit>
        <trans-unit id="006fb3d6eebcc50a7aabb67b8cea8dce1f78144d" translate="yes" xml:space="preserve">
          <source>Instead of implementing a method for use with &lt;code&gt;@dataProvider&lt;/code&gt;, you can define a data set using the &lt;code&gt;@testWith&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ef3518ad2b1fd553d4352aa3348ce56ffaabfb" translate="yes" xml:space="preserve">
          <source>Instead of returning a value, a stubbed method can also raise an exception. &lt;a href=&quot;#test-doubles-stubs-examples-stubtest8-php&quot;&gt;Example 8.10&lt;/a&gt; shows how to use &lt;code&gt;throwException()&lt;/code&gt; to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337fd037cee63389be2aef1c79a8a8956a173d45" translate="yes" xml:space="preserve">
          <source>Instead of returning a value, a stubbed method can also raise an exception. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest8.php&quot;&gt;Example 9.9&lt;/a&gt; shows how to use &lt;code&gt;throwException()&lt;/code&gt; to do this.</source>
          <target state="translated">Вместо возврата значения заглушенный метод также может вызвать исключение. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest8.php&quot;&gt;В примере 9.9&lt;/a&gt; показано, как для этого использовать &lt;code&gt;throwException()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f1d12a7b7f1bf6db918d10619e94104edd44a3d" translate="yes" xml:space="preserve">
          <source>Instead, PHPUnit should be managed as a project-local dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45279b4cd769444df64537dbe9cceeddaef726b8" translate="yes" xml:space="preserve">
          <source>It cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see &lt;a href=&quot;test-doubles&quot;&gt;Chapter 9&lt;/a&gt;), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design.</source>
          <target state="translated">Нельзя не подчеркнуть, что совместное использование фикстур между тестами снижает ценность тестов. Основная проблема дизайна заключается в том, что объекты не связаны слабо. Вы добьетесь лучших результатов, решив основную проблему дизайна и затем написав тесты с использованием заглушек (см. &lt;a href=&quot;test-doubles&quot;&gt;Главу 9&lt;/a&gt; ), чем создавая зависимости между тестами во время выполнения и игнорируя возможность улучшить свой дизайн.</target>
        </trans-unit>
        <trans-unit id="9a6b069f9fb4355a738054ac663530de852e2d12" translate="yes" xml:space="preserve">
          <source>It cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see &lt;a href=&quot;test-doubles#test-doubles&quot;&gt;Test Doubles&lt;/a&gt;), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609d23c8505e45bc7e6836ff6d4c8355e4ab0679" translate="yes" xml:space="preserve">
          <source>It is a bad practice to use &lt;code&gt;assertEquals()&lt;/code&gt; (and its inverse, &lt;code&gt;assertNotEquals()&lt;/code&gt;) on objects without registering a custom comparator that customizes how objects are compared. Unfortunately, though, implementing custom comparators for each and every object you want to assert in your tests is inconvenient at best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287bab143ee6d6de8b35998c615282d36015cbef" translate="yes" xml:space="preserve">
          <source>It is a common practice to make the PHAR executable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236b7fb3a5e06343ca0a21b8a74c3a457895df0c" translate="yes" xml:space="preserve">
          <source>It is also possible to specify that a test should not cover &lt;em&gt;any&lt;/em&gt; method by using the &lt;code&gt;@coversNothing&lt;/code&gt; annotation (see &lt;a href=&quot;annotations#appendixes-annotations-coversnothing&quot;&gt;@coversNothing&lt;/a&gt;). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0045a682ab642862c8c3942ba0d4c4394807e1" translate="yes" xml:space="preserve">
          <source>It is also possible to specify that a test should not cover &lt;em&gt;any&lt;/em&gt; method by using the &lt;code&gt;@coversNothing&lt;/code&gt; annotation (see &lt;a href=&quot;appendixes.annotations#appendixes.annotations.coversNothing&quot;&gt;the section called &amp;ldquo;@coversNothing&amp;rdquo;&lt;/a&gt;). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests.</source>
          <target state="translated">Также можно указать, что тест не должен охватывать &lt;em&gt;какой-либо&lt;/em&gt; метод, используя аннотацию &lt;code&gt;@coversNothing&lt;/code&gt; (см. &lt;a href=&quot;appendixes.annotations#appendixes.annotations.coversNothing&quot;&gt;Раздел &amp;laquo;@coversNothing&amp;raquo;&lt;/a&gt; ). Это может быть полезно при написании интеграционных тестов, чтобы убедиться, что вы генерируете покрытие кода только с помощью модульных тестов.</target>
        </trans-unit>
        <trans-unit id="3313cdedfd3f8d3e23f9f66942bcfb3c63071005" translate="yes" xml:space="preserve">
          <source>It is mandatory to configure a &lt;em&gt;whitelist&lt;/em&gt; for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the &lt;code&gt;--whitelist&lt;/code&gt; commandline option or via the configuration file (see &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;the section called &amp;ldquo;Whitelisting Files for Code Coverage&amp;rdquo;&lt;/a&gt;).</source>
          <target state="translated">Обязательно настроить &lt;em&gt;белый список,&lt;/em&gt; чтобы сообщить PHPUnit, какие файлы исходного кода включать в отчет о покрытии кода. Это можно сделать либо с помощью &lt;code&gt;--whitelist&lt;/code&gt; командной строки --whitelist, либо через файл конфигурации (см. &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;Раздел &amp;laquo;Файлы &lt;/a&gt;белого списка для покрытия кода&amp;raquo; ).</target>
        </trans-unit>
        <trans-unit id="9732e0a3b70a6c05cecd69f0f5f9e1cacf1c2a83" translate="yes" xml:space="preserve">
          <source>It is mandatory to configure a filter for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the &lt;code&gt;--coverage-filter&lt;/code&gt;&lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; option or via the configuration file (see &lt;a href=&quot;configuration#appendixes-configuration-coverage-include&quot;&gt;The &amp;lt;include&amp;gt; Element&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd08a074839cd0e707325227ff3b7036784b670c" translate="yes" xml:space="preserve">
          <source>It is often helpful to check if a table contains a specific amount of rows. You can easily achieve this without additional glue code using the Connection API. Say we wanted to check that after insertion of a row into our guestbook we not only have the two initial entries that have accompanied us in all the previous examples, but a third one:</source>
          <target state="translated">Часто бывает полезно проверить,содержит ли таблица определенное количество строк.Этого можно легко добиться без дополнительного кода клея с помощью Connection API.Допустим,мы хотели проверить,что после вставки строки в гостевую книгу у нас есть не только две начальные записи,которые сопровождали нас во всех предыдущих примерах,но и третья:</target>
        </trans-unit>
        <trans-unit id="a0ba411c3c191416be02d15477cd0197e81935a0" translate="yes" xml:space="preserve">
          <source>It may be prudent to create a shell script to manage PHPUnit installation that verifies the GnuPG signature before running your test suite. For example:</source>
          <target state="translated">Возможно,было бы разумно создать скрипт оболочки для управления установкой PHPUnit,который проверяет сигнатуру GnuPG перед запуском вашего тестового набора.Например:</target>
        </trans-unit>
        <trans-unit id="4382dafeb88d92e645f4cdd85b25e0a82f82d1b4" translate="yes" xml:space="preserve">
          <source>It processes all classes that are declared at the time a test starts, not only the test class itself. It only applies to static class properties, not static variables within functions.</source>
          <target state="translated">Он обрабатывает все классы,которые объявлены при старте теста,а не только сам класс теста.Это относится только к статическим свойствам класса,а не к статическим переменным внутри функций.</target>
        </trans-unit>
        <trans-unit id="18d66eebd5fbfaf6eadbc566cff4e9e38d18f776" translate="yes" xml:space="preserve">
          <source>Let us take a look at the agile documentation generated for a &lt;code&gt;BankAccount&lt;/code&gt; class:</source>
          <target state="translated">Давайте посмотрим на гибкую документацию, созданную для класса &lt;code&gt;BankAccount&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d6c5cc8cb7edffef1145a26dba0e420dc3f5b2a2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at the command-line test runner&amp;rsquo;s options in the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269e498b8067da9bc3ff0b277d90c6a1647eb84" translate="yes" xml:space="preserve">
          <source>Let's take a look at the command-line test runner's options in the following code:</source>
          <target state="translated">Рассмотрим опции запуска теста из командной строки в следующем коде:</target>
        </trans-unit>
        <trans-unit id="23445c8041a703ab60b3722a8f0af3b2b56c11e3" translate="yes" xml:space="preserve">
          <source>Lets take a look at the test suite of the &lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann/money&lt;/a&gt; library. Looking at this project&amp;rsquo;s directory structure, we see that the test case classes in the &lt;code&gt;tests&lt;/code&gt; directory mirror the package and class structure of the System Under Test (SUT) in the &lt;code&gt;src&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9263badbd240c1f1879c25bba8d7d26d297acb3e" translate="yes" xml:space="preserve">
          <source>Lets take a look at the test suite of the &lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann/money&lt;/a&gt; library. Looking at this project's directory structure, we see that the test case classes in the &lt;code&gt;tests&lt;/code&gt; directory mirror the package and class structure of the System Under Test (SUT) in the &lt;code&gt;src&lt;/code&gt; directory:</source>
          <target state="translated">Давайте посмотрим на набор тестов библиотеки &lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann / money&lt;/a&gt; . Глядя на структуру каталогов этого проекта, мы видим, что классы тестовых примеров в каталоге &lt;code&gt;tests&lt;/code&gt; отражают структуру пакетов и классов тестируемой системы (SUT) в каталоге &lt;code&gt;src&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d3d19fc16a972e1e9efcf81b170ef1e7bca3858d" translate="yes" xml:space="preserve">
          <source>Lets take a look at the test suite of the &lt;a href=&quot;https://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann/money&lt;/a&gt; library. Looking at this project&amp;rsquo;s directory structure, we see that the test case classes in the &lt;code&gt;tests&lt;/code&gt; directory mirror the package and class structure of the System Under Test (SUT) in the &lt;code&gt;src&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f39e8b9b8efea94fecc83043ad120c1c32a555d" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 3.0 Unported License.</source>
          <target state="translated">Лицензия Creative Commons Attribution 3.0 Unported License.</target>
        </trans-unit>
        <trans-unit id="71e5533db97f794cd7929c06bdabeb78e26920ca" translate="yes" xml:space="preserve">
          <source>Limitation: Automatic verification of expectations</source>
          <target state="translated">Ограничение:Автоматическая проверка ожиданий</target>
        </trans-unit>
        <trans-unit id="a023518cefcc455d090c645033757118928f81c3" translate="yes" xml:space="preserve">
          <source>Limitation: Methods named &quot;method&quot;</source>
          <target state="translated">Ограничение:Методы с названием &quot;метод&quot;</target>
        </trans-unit>
        <trans-unit id="94e974866dd0117d5ee5dc18eceee5e01cefb020" translate="yes" xml:space="preserve">
          <source>Limitation: Methods named &amp;ldquo;method&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960be94318775d8f6e5f185a13d88c42aa39a01f" translate="yes" xml:space="preserve">
          <source>Limitation: final, private, and static methods</source>
          <target state="translated">Ограничение:окончательный,приватный и статический методы.</target>
        </trans-unit>
        <trans-unit id="620ee66f3cb761f277d81f735fde1764b8fc1a38" translate="yes" xml:space="preserve">
          <source>Line Coverage</source>
          <target state="translated">Покрытие линии</target>
        </trans-unit>
        <trans-unit id="1b2689ec5483c6e1cd2bf126e0f927a72b911c8a" translate="yes" xml:space="preserve">
          <source>List available test groups.</source>
          <target state="translated">Перечислить доступные тестовые группы.</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="109b4017ee11f0a03112a188ef1036525a53b900" translate="yes" xml:space="preserve">
          <source>Logical AND.</source>
          <target state="translated">Логический И.</target>
        </trans-unit>
        <trans-unit id="4438cc4a0ab4f5f373d93285cd0729e947339a6c" translate="yes" xml:space="preserve">
          <source>Logical NOT.</source>
          <target state="translated">Логическое ЗАМЕЧАНИЕ.</target>
        </trans-unit>
        <trans-unit id="07dfdb18def1b141fb32dd8352fb998a138625d3" translate="yes" xml:space="preserve">
          <source>Logical OR.</source>
          <target state="translated">Логическая операционная.</target>
        </trans-unit>
        <trans-unit id="19864bb51d5ab73176b5b4491f11be6e836bcdce" translate="yes" xml:space="preserve">
          <source>Logical XOR.</source>
          <target state="translated">Логический XOR.</target>
        </trans-unit>
        <trans-unit id="249fcdff9a41d923f454969935e006889e30cf2c" translate="yes" xml:space="preserve">
          <source>Make sure you have the PHP extension &lt;code&gt;pdo&lt;/code&gt; and database specific extensions such as &lt;code&gt;pdo_mysql&lt;/code&gt; installed. Otherwise the examples shown below will not work.</source>
          <target state="translated">Убедитесь, что у вас установлено расширение PHP &lt;code&gt;pdo&lt;/code&gt; и расширения для конкретной базы данных, такие как &lt;code&gt;pdo_mysql&lt;/code&gt; . В противном случае приведенные ниже примеры не будут работать.</target>
        </trans-unit>
        <trans-unit id="9d31bf2f6d625ceecd6527a9833f6c2c28f94b54" translate="yes" xml:space="preserve">
          <source>Manually verifying the authenticity and integrity of a PHPUnit PHAR using GPG is tedious. This is why PHIVE, the PHAR Installation and Verification Environment, was created. You can learn about PHIVE on its &lt;a href=&quot;https://phar.io/&quot;&gt;website&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be344718d0d1ba60ff76beb79b17414a6e8fa614" translate="yes" xml:space="preserve">
          <source>Many beginner and intermediate unit testing examples in any programming language suggest that it is perfectly easy to test your application's logic with simple tests. For database-centric applications this is far away from the reality. Start using WordPress, TYPO3 or Symfony with Doctrine or Propel, for example, and you will easily experience considerable problems with PHPUnit: just because the database is so tightly coupled to these libraries.</source>
          <target state="translated">Многие примеры тестирования начинающих и промежуточных блоков на любом языке программирования говорят о том,что с помощью простых тестов можно легко протестировать логику приложения.Для приложений,ориентированных на работу с базами данных,это далеко не реально.Начните использовать WordPress,TYPO3 или Symfony,например,с Doctrine или Propel,и вы легко столкнетесь со значительными проблемами с PHPUnit:просто потому,что база данных так тесно связана с этими библиотеками.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
