<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="javascript">
    <body>
      <group id="javascript">
        <trans-unit id="9fd706dc1d0360b94ec21dbf8552ac9d5f3e383e" translate="yes" xml:space="preserve">
          <source>If used postfix (for example, x--), then it returns the value before decrementing.</source>
          <target state="translated">Если используется постфикс (например,x--),то возвращается значение перед декрементом.</target>
        </trans-unit>
        <trans-unit id="666b24bff72e7b0ae328538333aadcca72ea53da" translate="yes" xml:space="preserve">
          <source>If used postfix, with operator after operand (for example, &lt;code&gt;&lt;var&gt;x&lt;/var&gt;++&lt;/code&gt;), the increment operator increments and returns the value before incrementing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f855a65a9af260d40b455c64310a2ba4c6b6d08e" translate="yes" xml:space="preserve">
          <source>If used postfix, with operator after operand (for example, &lt;code&gt;&lt;var&gt;x&lt;/var&gt;--&lt;/code&gt;), the decrement operator decrements and returns the value before decrementing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1231f0f16dedb361c482a319c20aff31b05c5e" translate="yes" xml:space="preserve">
          <source>If used postfix, with operator after operand (for example, x++), then it returns the value before incrementing.</source>
          <target state="translated">Если используется постфикс,с оператором после операнда (например,x++),то возвращается значение перед инкрементом.</target>
        </trans-unit>
        <trans-unit id="e6e40e35ce4cf016961cce9be2454b86125ceb4b" translate="yes" xml:space="preserve">
          <source>If used prefix (for example, --x), then it returns the value after decrementing.</source>
          <target state="translated">Если используется префикс (например,--x),то он возвращает значение после декремента.</target>
        </trans-unit>
        <trans-unit id="9df9321ebb8182da95c82368fad1cd967b2ab528" translate="yes" xml:space="preserve">
          <source>If used prefix with operator before operand (for example, ++x), then it returns the value after incrementing.</source>
          <target state="translated">Если используется префикс с оператором перед операндом (например,++x),то он возвращает значение после инкремента.</target>
        </trans-unit>
        <trans-unit id="4b6212de07c63d01cabe699415882ecbebb40109" translate="yes" xml:space="preserve">
          <source>If used prefix, with operator before operand (for example, &lt;code&gt;++&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;), the increment operator increments and returns the value after incrementing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e162f955f0a0066b38485f62cae53c79f16a7b0" translate="yes" xml:space="preserve">
          <source>If used prefix, with operator before operand (for example, &lt;code&gt;--&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;), the decrement operator decrements and returns the value after decrementing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ff4cc4432ffc5f89ff00a0952d717a8a1a68b0" translate="yes" xml:space="preserve">
          <source>If we rewrite the above using traditional function-based syntax in non&amp;ndash;strict mode, then &lt;code&gt;this&lt;/code&gt; method calls are automatically bound to the initial &lt;code&gt;this&lt;/code&gt; value, which by default is the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Global_object&quot;&gt;global object&lt;/a&gt;. In strict mode, autobinding will not happen; the value of &lt;code&gt;this&lt;/code&gt; remains as passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263dbd217b7b782c539a10e8e47d0cd7d0c685a1" translate="yes" xml:space="preserve">
          <source>If we want to calculate the height of an equalateral triangle, and we know its side length is 100, we can use the formulae &lt;em&gt;length of the adjacent multiplied by the tangent of the angle is equal to the opposite.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44416e4cb440058b3e2168092fa043d526ea6bd6" translate="yes" xml:space="preserve">
          <source>If we want to export a single value or to have a fallback value for our module, we could use a default export:</source>
          <target state="translated">Если мы хотим экспортировать одно значение или иметь запасное значение для нашего модуля,мы можем использовать экспорт по умолчанию:</target>
        </trans-unit>
        <trans-unit id="e8ced299cf7385e721622ed81fc4d2edb2bdf9e3" translate="yes" xml:space="preserve">
          <source>If we want to export a single value or to have a fallback value for your module, you could use a default export:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e42279903ed183e261f8299c80921fedf73370" translate="yes" xml:space="preserve">
          <source>If we want to export default, and star from another module (effectively creating a &quot;redirect&quot;):</source>
          <target state="translated">Если мы хотим экспортировать по умолчанию,и звезда из другого модуля (фактически,создавая &quot;перенаправление&quot;):</target>
        </trans-unit>
        <trans-unit id="d6463f6ee85e1b3683452de8f289526c45b1d166" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language (like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHP&lt;/a&gt;), it is also easy to mix up the dot operator (&lt;code&gt;.&lt;/code&gt;) and the concatenation operator (&lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">Если вы переходите с другого языка программирования (например, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHP&lt;/a&gt; ), также легко перепутать оператор точки ( &lt;code&gt;.&lt;/code&gt; ) И оператор конкатенации ( &lt;code&gt;+&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b266e11ed2f48331bcbc5cd3a2651fd6ea8db942" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language (like &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/PHP&quot;&gt;PHP&lt;/a&gt;), it is also easy to mix up the dot operator (&lt;code&gt;.&lt;/code&gt;) and the concatenation operator (&lt;code&gt;+&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb66cb61a06782782fcf8588e20af249ee21a6b0" translate="yes" xml:space="preserve">
          <source>If you are coming from another programming language, it is also easy to add keywords that don't mean the same or have no meaning at all in JavaScript.</source>
          <target state="translated">Если вы пришли с другого языка программирования,то также легко добавить ключевые слова,которые не означают то же самое или не имеют никакого значения в JavaScript.</target>
        </trans-unit>
        <trans-unit id="659845dc301670bca252df4853db8e2f3ac23b6a" translate="yes" xml:space="preserve">
          <source>If you are creating an &lt;code&gt;Array&lt;/code&gt;, using the constructor, you probably want to use the literal notation instead, as the first argument is interpreted as the length of the &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">Если вы создаете &lt;code&gt;Array&lt;/code&gt; с помощью конструктора, вы, вероятно, захотите вместо этого использовать буквальную нотацию, поскольку первый аргумент интерпретируется как длина &lt;code&gt;Array&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d24793ed02c1f52e768f26367f343405e5dd686" translate="yes" xml:space="preserve">
          <source>If you are executing a match simply to find &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, use &lt;a href=&quot;test&quot;&gt;&lt;code&gt;RegExp.prototype.test()&lt;/code&gt;&lt;/a&gt; method or &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c1a323209deeb808a2a36b6ad4684b94b02231" translate="yes" xml:space="preserve">
          <source>If you are executing a match simply to find true or false, use the &lt;a href=&quot;test&quot;&gt;&lt;code&gt;RegExp.prototype.test()&lt;/code&gt;&lt;/a&gt; method or the &lt;a href=&quot;../string/search&quot;&gt;&lt;code&gt;String.prototype.search()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Если вы выполняете сопоставление просто для того, чтобы найти истину или ложь, используйте метод &lt;a href=&quot;test&quot;&gt; &lt;code&gt;RegExp.prototype.test()&lt;/code&gt; &lt;/a&gt; или метод &lt;a href=&quot;../string/search&quot;&gt; &lt;code&gt;String.prototype.search()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="68b817fe3ff3a62bc615632f841b38339b8524eb" translate="yes" xml:space="preserve">
          <source>If you are new to JavaScript, start with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;guide&lt;/a&gt;. Once you have a firm grasp of the fundamentals, you can use the &lt;a href=&quot;index&quot;&gt;reference&lt;/a&gt; to get more details on individual objects and language constructs.</source>
          <target state="translated">Если вы новичок в JavaScript, начните с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;руководства&lt;/a&gt; . Когда у вас будет четкое представление об основах, вы можете использовать &lt;a href=&quot;index&quot;&gt;ссылку,&lt;/a&gt; чтобы получить более подробную информацию об отдельных объектах и ​​языковых конструкциях.</target>
        </trans-unit>
        <trans-unit id="a535257a688b66c7fecab217e89655ac1ba3f8dc" translate="yes" xml:space="preserve">
          <source>If you are new to JavaScript, start with the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;guide&lt;/a&gt;. Once you have a firm grasp of the fundamentals, you can use the &lt;a href=&quot;index&quot;&gt;reference&lt;/a&gt; to get more details on individual objects and language constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613a62f0a62a3e51be50183314f313d624f6bc5b" translate="yes" xml:space="preserve">
          <source>If you are using an older browser that does not yet implement &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt;, for example, you should update to a more recent browser version that does support these new language features.</source>
          <target state="translated">Например, если вы используете старый браузер, в котором еще не реализованы &lt;code&gt;&lt;a href=&quot;../statements/let&quot;&gt;let&lt;/a&gt;&lt;/code&gt; или &lt;code&gt;&lt;a href=&quot;../statements/class&quot;&gt;class&lt;/a&gt;&lt;/code&gt; , вам следует обновить его до более новой версии, которая поддерживает эти новые языковые функции.</target>
        </trans-unit>
        <trans-unit id="b2c3a9d53d40d1800d714f24dc84a4f4ba306069" translate="yes" xml:space="preserve">
          <source>If you are using function &lt;a href=&quot;../statements/label&quot;&gt;labels&lt;/a&gt;, you will still need to provide a function name after the &lt;code&gt;function&lt;/code&gt; keyword. This doesn't work:</source>
          <target state="translated">Если вы используете &lt;a href=&quot;../statements/label&quot;&gt;метки&lt;/a&gt; функций , вам все равно нужно будет указать имя функции после ключевого слова &lt;code&gt;function&lt;/code&gt; . Это не работает:</target>
        </trans-unit>
        <trans-unit id="77903e97dc13aed96b929fd6a5c838a5b3a347a1" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; in an ECMAScript 5 environment, then the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement will resolve to &lt;code&gt;obj&lt;/code&gt;. However, ECMAScript 2015 introduces a &lt;code&gt;values&lt;/code&gt; property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; (so that it will be available on every array). So, in a JavaScript environment that supports ECMAScript 2015, the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement could resolve to &lt;code&gt;[1,2,3].values&lt;/code&gt;. However, in this particular example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; has been defined with &lt;code&gt;values&lt;/code&gt; in its &lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt;&lt;code&gt;Symbol.unscopables&lt;/code&gt;&lt;/a&gt; object. If it were not, one can see how this would be a difficult issue to debug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a590cd4ce738fdd82efe0e9731e381f8954b9061" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; in an ECMAScript 5 environment, then the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement will resolve to &lt;code&gt;obj&lt;/code&gt;. However, ECMAScript 6 introduces a &lt;code&gt;values&lt;/code&gt; property on &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; (so that it will be available on every array). So, in a JavaScript environment that supports ECMAScript 6, the &lt;code&gt;values&lt;/code&gt; reference inside the &lt;code&gt;with&lt;/code&gt; statement could resolve to &lt;code&gt;[1,2,3].values&lt;/code&gt;. However, in this particular example, &lt;a href=&quot;../global_objects/array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt; has been defined with &lt;code&gt;values&lt;/code&gt; in its &lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt;&lt;code&gt;Symbol.unscopables&lt;/code&gt;&lt;/a&gt; object. If it were not, one can see how this would be a difficult issue to debug.</source>
          <target state="translated">Если вы вызываете &lt;code&gt;f([1,2,3], obj)&lt;/code&gt; в среде ECMAScript 5, тогда ссылка на &lt;code&gt;values&lt;/code&gt; внутри оператора &lt;code&gt;with&lt;/code&gt; будет преобразована в &lt;code&gt;obj&lt;/code&gt; . Однако ECMAScript 6 вводит свойство &lt;code&gt;values&lt;/code&gt; в &lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt; (так что оно будет доступно для каждого массива). Таким образом, в среде JavaScript, поддерживающей ECMAScript 6, ссылка на &lt;code&gt;values&lt;/code&gt; внутри оператора &lt;code&gt;with&lt;/code&gt; может быть &lt;code&gt;[1,2,3].values&lt;/code&gt; в [1,2,3] .values . Однако в этом конкретном примере &lt;a href=&quot;../global_objects/array/prototype&quot;&gt; &lt;code&gt;Array.prototype&lt;/code&gt; &lt;/a&gt; был определен со &lt;code&gt;values&lt;/code&gt; в его &lt;a href=&quot;../global_objects/symbol/unscopables&quot;&gt; &lt;code&gt;Symbol.unscopables&lt;/code&gt; .&lt;/a&gt;объект. Если бы это было не так, можно увидеть, насколько сложно было бы устранить эту проблему.</target>
        </trans-unit>
        <trans-unit id="5c956ed676ebd4cdf0ef2b881c4cdd44209fec2e" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;pop()&lt;/code&gt; on an empty array, it returns &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Если вы вызываете &lt;code&gt;pop()&lt;/code&gt; для пустого массива, он возвращает &lt;a href=&quot;../undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="982fa524918e289d54b948aa1c92f09ae356ee5c" translate="yes" xml:space="preserve">
          <source>If you call the &lt;code&gt;toString()&lt;/code&gt; method on this custom object, it returns the default value inherited from &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Если вы вызываете метод &lt;code&gt;toString()&lt;/code&gt; для этого настраиваемого объекта, он возвращает значение по умолчанию, унаследованное от &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="9d335486efc475b952d22569f82a62a2788b89c6" translate="yes" xml:space="preserve">
          <source>If you choose to use this partial implementation, &lt;strong&gt;you must not rely on those cases where behavior deviates from ECMA-262, 5&lt;sup&gt;th&lt;/sup&gt; edition!&lt;/strong&gt; Thankfully, these deviations from the specification rarely (if ever) come up in most coding situations. If you do not understand any of the deviations from the specification above, then it is safe in this particular case to not worry about these noncompliant deviation details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67afcf342da3e90693d7ecef744d3642516938dd" translate="yes" xml:space="preserve">
          <source>If you choose to use this partial implementation, &lt;strong&gt;you must not rely on those cases where behavior deviates from ECMA-262, 5th edition!&lt;/strong&gt; With some care, however (and perhaps with additional modification to suit specific needs), this partial implementation may be a reasonable bridge to the time when &lt;code&gt;bind()&lt;/code&gt; is widely implemented according to the specification.</source>
          <target state="translated">Если вы решите использовать эту частичную реализацию, &lt;strong&gt;вы не должны полагаться на те случаи, когда поведение отличается от ECMA-262, 5-е издание! &lt;/strong&gt;Однако при некоторой осторожности (и, возможно, с дополнительной модификацией для удовлетворения конкретных потребностей) эта частичная реализация может стать разумным мостом к тому времени, когда &lt;code&gt;bind()&lt;/code&gt; будет широко реализован в соответствии со спецификацией.</target>
        </trans-unit>
        <trans-unit id="7d8ff152a7506a8df981872cd6144a994c604418" translate="yes" xml:space="preserve">
          <source>If you come from another programming language, it is also common to use keywords that don't mean the same or have no meaning at all in javaScript:</source>
          <target state="translated">Если вы пришли с другого языка программирования,то также распространено использование ключевых слов,которые в javaScript не означают то же самое или вообще не имеют никакого значения:</target>
        </trans-unit>
        <trans-unit id="56181bd1d66f2b2ed3709ed12001807e1c6d7be4" translate="yes" xml:space="preserve">
          <source>If you construct an arithmetic expression as a string, you can use &lt;code&gt;eval()&lt;/code&gt; to evaluate it at a later time. For example, suppose you have a variable &lt;code&gt;x&lt;/code&gt;. You can postpone evaluation of an expression involving &lt;code&gt;x&lt;/code&gt; by assigning the string value of the expression, say &quot;&lt;code&gt;3 * x + 2&lt;/code&gt;&quot;, to a variable, and then calling &lt;code&gt;eval()&lt;/code&gt; at a later point in your script.</source>
          <target state="translated">Если вы создаете арифметическое выражение в виде строки, вы можете использовать &lt;code&gt;eval()&lt;/code&gt; чтобы вычислить его позже. Например, предположим, что у вас есть переменная &lt;code&gt;x&lt;/code&gt; . Вы можете отложить вычисление выражения, содержащего &lt;code&gt;x&lt;/code&gt; , присвоив строковое значение выражения, скажем, &amp;laquo; &lt;code&gt;3 * x + 2&lt;/code&gt; &amp;raquo;, переменной, а затем вызвать &lt;code&gt;eval()&lt;/code&gt; в более позднем месте вашего скрипта.</target>
        </trans-unit>
        <trans-unit id="8d68f6b9f418726c69743b66c16ac037f82b5627" translate="yes" xml:space="preserve">
          <source>If you create a property key from an expression, you need to use square brackets. Otherwise the property name can't be computed:</source>
          <target state="translated">Если вы создаете ключ свойства из выражения,необходимо использовать квадратные скобки.В противном случае имя свойства не может быть вычислено:</target>
        </trans-unit>
        <trans-unit id="be14b3ea8c1e9826f6190d19d2cab72fdf85cb50" translate="yes" xml:space="preserve">
          <source>If you define multiple values then the last value is returned.</source>
          <target state="translated">Если вы определите несколько значений,то будет возвращено последнее значение.</target>
        </trans-unit>
        <trans-unit id="f10d361ef5a163329364a3df976bc77ea83e3dc0" translate="yes" xml:space="preserve">
          <source>If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect.</source>
          <target state="translated">При удалении свойства,для которого была установлена точка наблюдения,эта точка наблюдения не исчезает.Если вы позже заново создадите это свойство,то точка наблюдения останется в силе.</target>
        </trans-unit>
        <trans-unit id="9e2bd2b895541007ef32841e0415947532555ac7" translate="yes" xml:space="preserve">
          <source>If you delete a property with the &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; operator, the &lt;code&gt;in&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt; for that property.</source>
          <target state="translated">Если вы удаляете свойство с помощью оператора &lt;code&gt;&lt;a href=&quot;delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; , оператор &lt;code&gt;in&lt;/code&gt; возвращает &lt;code&gt;false&lt;/code&gt; для этого свойства.</target>
        </trans-unit>
        <trans-unit id="5f6e1de3c0913e4cc6a427cd152ae3adbdbf83ba" translate="yes" xml:space="preserve">
          <source>If you didn't write the &lt;code&gt;new&lt;/code&gt; operator, &lt;strong&gt;the Constructor Function would be invoked like any Regular Function,&lt;/strong&gt;&lt;em&gt;without creating an Object.&lt;/em&gt; In this case, the value of &lt;code&gt;this&lt;/code&gt; is also different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddfe554f36b287490547eed85632d9e23d92c9d" translate="yes" xml:space="preserve">
          <source>If you didn't write the &lt;code&gt;new&lt;/code&gt; operator, &lt;strong&gt;the Constructor Function would be invoked like any Regular Function,&lt;/strong&gt;&lt;em&gt;without creating an Object.&lt;/em&gt;In this case, the value of &lt;code&gt;this&lt;/code&gt; is also different.</source>
          <target state="translated">Если бы вы не написали &lt;code&gt;new&lt;/code&gt; оператор, &lt;strong&gt;функция-конструктор вызывалась бы, как любая обычная функция, &lt;/strong&gt;&lt;em&gt;без создания объекта. &lt;/em&gt;В этом случае значение &lt;code&gt;this&lt;/code&gt; тоже другое.</target>
        </trans-unit>
        <trans-unit id="d5715ce7b490b3178a67fbab44e46e0895854da4" translate="yes" xml:space="preserve">
          <source>If you do not specify a constructor method, a default constructor is used.</source>
          <target state="translated">Если метод конструктора не указан,то используется конструктор по умолчанию.</target>
        </trans-unit>
        <trans-unit id="91809d53b8b015a60ef70d0dcdc8f1e75e790479" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad54b71740a03f15b390b615e6bf7ef289e62f3" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getminutes&quot;&gt;&lt;code&gt;getMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b14924a4ad8ffa7796c3bfab19bb7a60650112" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;minutesValue&lt;/var&gt;&lt;/code&gt;, &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt;, and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcminutes&quot;&gt;&lt;code&gt;getUTCMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fa69a0144131eaebaa23e3873fb3414a94568f" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;dateValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getmonth&quot;&gt;&lt;code&gt;getMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df5d83c279d0c8023216b21336a639196b7ed77" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;monthValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;dayValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcmonth&quot;&gt;&lt;code&gt;getUTCMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bc293e91c6175b64ee14299e94b76f046b77c1" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f5fcbf1f345056595a0febb2d4450e65ef680f" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9f19a7f8ab4f40f5bd17f11354e3f6271fb12c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;&lt;var&gt;secondsValue&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;msValue&lt;/var&gt;&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59226b478f68551a725b4904aa9e073fdd1245c0" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;dayValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">Если вы не укажете параметр &lt;code&gt;dayValue&lt;/code&gt; , будет использовано значение, возвращаемое методом &lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f69c9e92ce00676ee4d2916a406ce0640412ab41" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;dayValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">Если вы не укажете параметр &lt;code&gt;dayValue&lt;/code&gt; , будет использовано значение, возвращаемое &lt;a href=&quot;getutcdate&quot;&gt; &lt;code&gt;getUTCDate()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3a6e5b4b10c44b2a624b4d411895f115df5e9376" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;, &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getminutes&quot;&gt;&lt;code&gt;getMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если не указать &lt;code&gt;minutesValue&lt;/code&gt; , &lt;code&gt;secondsValue&lt;/code&gt; и &lt;code&gt;msValue&lt;/code&gt; параметры, возвращаемые значения из &lt;a href=&quot;getminutes&quot;&gt; &lt;code&gt;getMinutes()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt; , и &lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt; используются методы.</target>
        </trans-unit>
        <trans-unit id="196d20153d788622cbd58314f072ed3ac7c88814" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;minutesValue&lt;/code&gt;, &lt;code&gt;secondsValue&lt;/code&gt;, and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcminutes&quot;&gt;&lt;code&gt;getUTCMinutes()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если не указать &lt;code&gt;minutesValue&lt;/code&gt; , &lt;code&gt;secondsValue&lt;/code&gt; и &lt;code&gt;msValue&lt;/code&gt; параметры, возвращаемые значения из &lt;a href=&quot;getutcminutes&quot;&gt; &lt;code&gt;getUTCMinutes()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt; , и &lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt; используются методы.</target>
        </trans-unit>
        <trans-unit id="3e065f2df26eadd9c019745d680d610654be27e8" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and &lt;code&gt;dateValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getmonth&quot;&gt;&lt;code&gt;getMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getdate&quot;&gt;&lt;code&gt;getDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если вы не укажете параметры &lt;code&gt;monthValue&lt;/code&gt; и &lt;code&gt;dateValue&lt;/code&gt; , будут использоваться значения, возвращаемые методами &lt;a href=&quot;getmonth&quot;&gt; &lt;code&gt;getMonth()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;getdate&quot;&gt; &lt;code&gt;getDate()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8f17a4828fb9f406dde0b1835b9d908b2753f5da" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;monthValue&lt;/code&gt; and &lt;code&gt;dayValue&lt;/code&gt; parameters, the values returned from the &lt;a href=&quot;getutcmonth&quot;&gt;&lt;code&gt;getUTCMonth()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcdate&quot;&gt;&lt;code&gt;getUTCDate()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если вы не укажете параметры &lt;code&gt;monthValue&lt;/code&gt; и &lt;code&gt;dayValue&lt;/code&gt; , будут использоваться значения, возвращаемые &lt;a href=&quot;getutcmonth&quot;&gt; &lt;code&gt;getUTCMonth()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;getutcdate&quot;&gt; &lt;code&gt;getUTCDate()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d5d6a263711a564bafff20ce9a44e33aecf895b2" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;msValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">Если вы не укажете параметр &lt;code&gt;msValue&lt;/code&gt; , будет использовано значение, возвращаемое &lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="13b2fd50258a2835809a9814d00ddc68fb9b08a2" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;msValue&lt;/code&gt; parameter, the value returned from the &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; method is used.</source>
          <target state="translated">Если вы не укажете параметр &lt;code&gt;msValue&lt;/code&gt; , будет использоваться значение, возвращаемое &lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ae79f7fb255a43982f924ce9d07ff130cc8750c" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt; and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getseconds&quot;&gt;&lt;code&gt;getSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getmilliseconds&quot;&gt;&lt;code&gt;getMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если вы не задали &lt;code&gt;secondsValue&lt;/code&gt; и &lt;code&gt;msValue&lt;/code&gt; параметры, возвращаемые значения из &lt;a href=&quot;getseconds&quot;&gt; &lt;code&gt;getSeconds()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;getmilliseconds&quot;&gt; &lt;code&gt;getMilliseconds()&lt;/code&gt; &lt;/a&gt; методы используются.</target>
        </trans-unit>
        <trans-unit id="f9b9c693ad5b1943fcbb6c027381de26570f41e6" translate="yes" xml:space="preserve">
          <source>If you do not specify the &lt;code&gt;secondsValue&lt;/code&gt; and &lt;code&gt;msValue&lt;/code&gt; parameters, the values returned from &lt;a href=&quot;getutcseconds&quot;&gt;&lt;code&gt;getUTCSeconds()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getutcmilliseconds&quot;&gt;&lt;code&gt;getUTCMilliseconds()&lt;/code&gt;&lt;/a&gt; methods are used.</source>
          <target state="translated">Если вы не задали &lt;code&gt;secondsValue&lt;/code&gt; и &lt;code&gt;msValue&lt;/code&gt; параметры, возвращаемые значения из &lt;a href=&quot;getutcseconds&quot;&gt; &lt;code&gt;getUTCSeconds()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;getutcmilliseconds&quot;&gt; &lt;code&gt;getUTCMilliseconds()&lt;/code&gt; &lt;/a&gt; методы используются.</target>
        </trans-unit>
        <trans-unit id="05cb4b511b1661f5586af08ed24530681a2151ee" translate="yes" xml:space="preserve">
          <source>If you don't give any parameter and use the &lt;code&gt;match()&lt;/code&gt; method directly, you will get an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; with an empty string: &lt;code&gt;[&quot;&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af40479ee91482e63e43f4df0bb7624dbe144771" translate="yes" xml:space="preserve">
          <source>If you don't provide your own constructor, then a default constructor will be supplied for you. If your class is a base class, the default constructor is empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dd09e3fe776430cf1ff34ceed95cf4774ef642" translate="yes" xml:space="preserve">
          <source>If you don't specify this parameter, or its value is &lt;code&gt;null&lt;/code&gt;, the new &lt;code&gt;Set&lt;/code&gt; is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c32852d31c81ac10578986fc553bf83224d9e5" translate="yes" xml:space="preserve">
          <source>If you express color as a hexadecimal RGB triplet, you must use the format &lt;code&gt;rrggbb&lt;/code&gt;. For example, the hexadecimal RGB values for salmon are red=FA, green=80, and blue=72, so the RGB triplet for salmon is &lt;code&gt;&quot;FA8072&quot;&lt;/code&gt;.</source>
          <target state="translated">Если вы выражаете цвет как шестнадцатеричный триплет RGB, вы должны использовать формат &lt;code&gt;rrggbb&lt;/code&gt; . Например, шестнадцатеричные значения RGB для лосося: красный = FA, зеленый = 80 и синий = 72, поэтому триплет RGB для лосося - &lt;code&gt;&quot;FA8072&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="424cbece6047c20988ec0b925f0d69bf351d88e0" translate="yes" xml:space="preserve">
          <source>If you forget a &lt;code&gt;break&lt;/code&gt; then the script will run from the &lt;code&gt;case&lt;/code&gt; where the criterion is met and will run the cases after that &lt;strong&gt;regardless if a criterion was met&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5829843e73f7b32286683290a76dfea716fae9b0" translate="yes" xml:space="preserve">
          <source>If you forget a break then the script will run from the case where the criterion is met and will run the case after that regardless if criterion was met. See example here:</source>
          <target state="translated">Если вы забыли перерыв,то скрипт будет запущен из того случая,когда критерий был удовлетворен,а затем запустит этот случай независимо от того,был ли критерий удовлетворен.Смотрите пример здесь:</target>
        </trans-unit>
        <trans-unit id="392bc9770f3f38cbe5fa9323408292a9e2ec9a76" translate="yes" xml:space="preserve">
          <source>If you intended to create a method of an object, you will need to create an object. The following syntax without a name after the &lt;code&gt;function&lt;/code&gt; keyword is valid then.</source>
          <target state="translated">Если вы намеревались создать метод объекта, вам нужно будет создать объект. Тогда действителен следующий синтаксис без имени после ключевого слова &lt;code&gt;function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2b7602e387bd2af7647914f024cab0e3d3062237" translate="yes" xml:space="preserve">
          <source>If you meant to declare another constant, pick another name and re-name. This constant name is already taken in this scope.</source>
          <target state="translated">Если вы хотели объявить другую константу,выберите другое имя и переименуйте.Это имя константы уже взято в этой области.</target>
        </trans-unit>
        <trans-unit id="8b291683dec2952c4e31e0fe8036f8e1ee692efb" translate="yes" xml:space="preserve">
          <source>If you might want to unregister an object later, you pass a third value, which is the &lt;em&gt;unregistration token&lt;/em&gt; you'll use later when calling the registry's &lt;code&gt;unregister&lt;/code&gt; function to unregister the object. The registry only keeps a weak reference to the unregister token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1e13b196b133d23d16e2eca23049991007c75b" translate="yes" xml:space="preserve">
          <source>If you must run the code, consider running it with reduced privileges. This advice applies mainly to extensions and XUL applications, which can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Components.utils.evalInSandbox&quot;&gt;Components.utils.evalInSandbox&lt;/a&gt; for this.</source>
          <target state="translated">Если вам необходимо запустить код, подумайте о том, чтобы запустить его с ограниченными правами. Этот совет относится в основном к расширениям и XUL-приложениям, которые могут использовать для этого &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Components.utils.evalInSandbox&quot;&gt;Components.utils.evalInSandbox&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f05da75db7bf9aa79df3571a16ac371a8a1c09b8" translate="yes" xml:space="preserve">
          <source>If you need the &lt;strong&gt;index&lt;/strong&gt; of the found element in the array, use &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44577c6fc47c8a13363a3871df6144ffae8f08db" translate="yes" xml:space="preserve">
          <source>If you need the natural log of 2 or 10, use the constants &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt; . If you need a logarithm to base 2 or 10, use &lt;a href=&quot;log2&quot;&gt;&lt;code&gt;Math.log2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;log10&quot;&gt;&lt;code&gt;Math.log10()&lt;/code&gt;&lt;/a&gt; . If you need a logarithm to other bases, use Math.log(x) / Math.log(otherBase) as in the example below; you might want to precalculate 1 / Math.log(otherBase) .</source>
          <target state="translated">Если вам нужен натуральный логарифм 2 или 10, используйте константы &lt;a href=&quot;ln2&quot;&gt; &lt;code&gt;Math.LN2&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;ln10&quot;&gt; &lt;code&gt;Math.LN10&lt;/code&gt; &lt;/a&gt; . Если вам нужен логарифм с основанием 2 или 10, используйте &lt;a href=&quot;log2&quot;&gt; &lt;code&gt;Math.log2()&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;log10&quot;&gt; &lt;code&gt;Math.log10()&lt;/code&gt; &lt;/a&gt; . Если вам нужен логарифм для других оснований, используйте Math.log (x) / Math.log (otherBase), как в примере ниже; вы можете предварительно вычислить 1 / Math.log (otherBase).</target>
        </trans-unit>
        <trans-unit id="68beaac9d5aafe09513d7eccd070b1b3d71bb486" translate="yes" xml:space="preserve">
          <source>If you need the natural log of 2 or 10, use the constants &lt;a href=&quot;ln2&quot;&gt;&lt;code&gt;Math.LN2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ln10&quot;&gt;&lt;code&gt;Math.LN10&lt;/code&gt;&lt;/a&gt;. If you need a logarithm to base 2 or 10, use &lt;a href=&quot;log2&quot;&gt;&lt;code&gt;Math.log2()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;log10&quot;&gt;&lt;code&gt;Math.log10()&lt;/code&gt;&lt;/a&gt;. If you need a logarithm to other bases, use Math.log(x) / Math.log(otherBase) as in the example below; you might want to precalculate 1 / Math.log(otherBase).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9dd66eafaabe75ecf9115145d2b767ab19cb10" translate="yes" xml:space="preserve">
          <source>If you need to define a property without a value, you might use &lt;a href=&quot;../global_objects/null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt; as a value.</source>
          <target state="translated">Если вам нужно определить свойство без значения, вы можете использовать &lt;a href=&quot;../global_objects/null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; в качестве значения.</target>
        </trans-unit>
        <trans-unit id="8f2598944e0ea66e2ceaf4e11c59c0cdff9b64a0" translate="yes" xml:space="preserve">
          <source>If you need to export the default, write the following instead:</source>
          <target state="translated">Если вам нужно экспортировать данные по умолчанию,напишите вместо этого следующее:</target>
        </trans-unit>
        <trans-unit id="48354edaa3e95aef6e6a48c3e5f6b6df17eeb92b" translate="yes" xml:space="preserve">
          <source>If you need to find if a value &lt;strong&gt;exists&lt;/strong&gt; in an array, use &lt;a href=&quot;includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;. Again, it checks each element for equality with the value instead of using a testing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d63d0046baee1f832f04d68cdceccdcee365fd" translate="yes" xml:space="preserve">
          <source>If you need to find if any element satisfies the provided testing function, use &lt;a href=&quot;some&quot;&gt;&lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ed2ad090bbb7a6fac237e3660f1c52e2f3ec91" translate="yes" xml:space="preserve">
          <source>If you need to find the &lt;strong&gt;index of a value&lt;/strong&gt;, use &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;. (It&amp;rsquo;s similar to &lt;a href=&quot;findindex&quot;&gt;&lt;code&gt;findIndex()&lt;/code&gt;&lt;/a&gt;, but checks each element for equality with the value instead of using a testing function.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7b0f1b470fc3559b362594aea4dada581a211a" translate="yes" xml:space="preserve">
          <source>If you need to find the position of an element or whether an element exists in an array, use &lt;a href=&quot;indexof&quot;&gt;&lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;includes&quot;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Если вам нужно найти положение элемента или наличие элемента в массиве, используйте &lt;a href=&quot;indexof&quot;&gt; &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;includes&quot;&gt; &lt;code&gt;Array.prototype.includes()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="53ac54e6412bacc63b8624a67da085e48a736a3a" translate="yes" xml:space="preserve">
          <source>If you need to know if a string matches a regular expression &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;../regexp/test&quot;&gt;&lt;code&gt;RegExp.test()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Если вам нужно узнать, соответствует ли строка регулярному выражению &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , используйте &lt;a href=&quot;../regexp/test&quot;&gt; &lt;code&gt;RegExp.test()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9701887d047bb96bcab9229f97c6b2c436038b1d" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that do not support &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you cannot make them non-enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c814d727deb065c2a896b0632604aebd175c33" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;a href=&quot;../object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/a&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe432265bccad633d8efa5ca4d1fac0eea99e3f" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them &lt;strong&gt;non-enumerable&lt;/strong&gt;.</source>
          <target state="translated">Если вам нужно поддерживать действительно устаревшие движки JavaScript, которые не поддерживают &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt; , лучше вообще не использовать &lt;code&gt;Array.prototype&lt;/code&gt; методов Array.prototype , поскольку вы не можете сделать их &lt;strong&gt;неперечисляемыми&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b656e640c400c1887a63c15bbd8901d8a955a1f8" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="translated">Если вам нужно поддерживать действительно устаревшие движки JavaScript, которые не поддерживают &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty()&lt;/a&gt;&lt;/code&gt; , лучше вообще не использовать &lt;code&gt;Array.prototype&lt;/code&gt; методов Array.prototype , поскольку вы не можете сделать их неперечисляемыми.</target>
        </trans-unit>
        <trans-unit id="bd9f376dc29844e3f900bec4366cbbf039c586ee" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt;, it is best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; at all, as you cannot make it non-enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57168d3fef20557c94e31ea753dbe3ba115b9dc4" translate="yes" xml:space="preserve">
          <source>If you need to support truly obsolete JavaScript engines that don't support &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt;, it's best not to polyfill &lt;code&gt;Array.prototype&lt;/code&gt; methods at all, as you can't make them non-enumerable.</source>
          <target state="translated">Если вам нужно поддерживать действительно устаревшие движки JavaScript, которые не поддерживают &lt;code&gt;&lt;a href=&quot;../object/defineproperty&quot;&gt;Object.defineProperty&lt;/a&gt;&lt;/code&gt; , лучше вообще не использовать &lt;code&gt;Array.prototype&lt;/code&gt; методов Array.prototype , поскольку вы не можете сделать их неперечисляемыми.</target>
        </trans-unit>
        <trans-unit id="3edaaddf2630ab4d776484bd61b50696d946fc29" translate="yes" xml:space="preserve">
          <source>If you need to use an assignment in a conditional expression, a common practice is to put additional parentheses around the assignment. For example:</source>
          <target state="translated">Если вам нужно использовать присваивание в условном выражении,то обычной практикой является постановка дополнительных скобок вокруг присваивания.Например:</target>
        </trans-unit>
        <trans-unit id="d40d82c950e9a812cd674e6001dbf28de03af32b" translate="yes" xml:space="preserve">
          <source>If you only want the first match found, you might want to use &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Если вы хотите, чтобы было найдено только первое совпадение, вы можете вместо этого использовать &lt;a href=&quot;../regexp/exec&quot;&gt; &lt;code&gt;RegExp.exec()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c57242f318553d3f36f9cf38af0a4f7480baa928" translate="yes" xml:space="preserve">
          <source>If you only want to consider properties attached to the object itself, and not its prototypes, use &lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt;&lt;code&gt;getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt; or perform a &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; check (&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt;&lt;code&gt;propertyIsEnumerable()&lt;/code&gt;&lt;/a&gt; can also be used). Alternatively, if you know there won't be any outside code interference, you can extend built-in prototypes with a check method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735530012ac3a4439f6528b8ed499f68e90f9884" translate="yes" xml:space="preserve">
          <source>If you only want to consider properties attached to the object itself, and not its prototypes, use &lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt;&lt;code&gt;getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt; or perform a &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt; check (&lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt;&lt;code&gt;propertyIsEnumerable&lt;/code&gt;&lt;/a&gt; can also be used). Alternatively, if you know there won't be any outside code interference, you can extend built-in prototypes with a check method.</source>
          <target state="translated">Если вы хотите учитывать только свойства, прикрепленные к самому объекту, а не его прототипы, используйте &lt;a href=&quot;../global_objects/object/getownpropertynames&quot;&gt; &lt;code&gt;getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt; или выполните &lt;a href=&quot;../global_objects/object/hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt; ( также можно использовать &lt;a href=&quot;../global_objects/object/propertyisenumerable&quot;&gt; &lt;code&gt;propertyIsEnumerable&lt;/code&gt; &lt;/a&gt; ). В качестве альтернативы, если вы знаете, что никакого внешнего вмешательства кода не будет, вы можете расширить встроенные прототипы с помощью метода проверки.</target>
        </trans-unit>
        <trans-unit id="0e97d2b27233fdaf7731ef52386bfd0124047bc8" translate="yes" xml:space="preserve">
          <source>If you really want to create a &lt;code&gt;Symbol&lt;/code&gt; wrapper object, you can use the &lt;code&gt;Object()&lt;/code&gt; function:</source>
          <target state="translated">Если вы действительно хотите создать объект-оболочку &lt;code&gt;Symbol&lt;/code&gt; , вы можете использовать функцию &lt;code&gt;Object()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a1843b29c2d5c6fd4913d7563bf6437e92296a87" translate="yes" xml:space="preserve">
          <source>If you return &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; will be added to the JSON string.</source>
          <target state="translated">Если вы вернете значение &lt;code&gt;null&lt;/code&gt; , к строке JSON будет добавлено значение &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ec5df79d7c885974c5aa582c610905dc7cdac8d" translate="yes" xml:space="preserve">
          <source>If you return &lt;code&gt;undefined&lt;/code&gt;, the property is not included (i.e., filtered out) in the output JSON string.</source>
          <target state="translated">Если вы вернете значение &lt;code&gt;undefined&lt;/code&gt; , свойство не будет включено (т. Е. Отфильтровано) в выходной строке JSON.</target>
        </trans-unit>
        <trans-unit id="2c70929d7e200a5fe36f9edeb06a1b0a8c7a9d88" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, &quot;true&quot; or &quot;false&quot; is used as the property's value, as appropriate, when adding it to the JSON string.</source>
          <target state="translated">Если вы возвращаете &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; , &amp;laquo;true&amp;raquo; или &amp;laquo;false&amp;raquo; используется в качестве значения свойства, в зависимости от ситуации, при добавлении его в строку JSON.</target>
        </trans-unit>
        <trans-unit id="aebe43fc49075ca5e764acfd1f8b57b86a33df55" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, the property is not included in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba4f295774a527ffbb538fec3b29039be43a105" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, the stringified version of that value is used as the property's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb68ba0a762626c3b4353aedeeb2ffb44a69ed51" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;, the string corresponding to that number is used as the value for the property when added to the JSON string.</source>
          <target state="translated">Если вы возвращаете &lt;a href=&quot;../number&quot;&gt; &lt;code&gt;Number&lt;/code&gt; &lt;/a&gt; , строка, соответствующая этому номеру, используется в качестве значения свойства при добавлении в строку JSON.</target>
        </trans-unit>
        <trans-unit id="0b5099af9e7be5c72550fd23afd94bd55e6142b2" translate="yes" xml:space="preserve">
          <source>If you return a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, that string is used as the property's value when adding it to the JSON string.</source>
          <target state="translated">Если вы возвращаете &lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt; , эта строка используется в качестве значения свойства при добавлении ее в строку JSON.</target>
        </trans-unit>
        <trans-unit id="131cdc0db5e0530808f6767f2a2daddd0e55eba1" translate="yes" xml:space="preserve">
          <source>If you return any other object, the object is recursively stringified into the JSON string, calling the &lt;code&gt;replacer&lt;/code&gt; function on each property, unless the object is a function, in which case nothing is added to the JSON string.</source>
          <target state="translated">Если вы возвращаете любой другой объект, объект рекурсивно преобразовывается в строку JSON, вызывая функцию &lt;code&gt;replacer&lt;/code&gt; для каждого свойства, если объект не является функцией, и в этом случае к строке JSON ничего не добавляется.</target>
        </trans-unit>
        <trans-unit id="ce9a704ee385f7c72710bc2ca6fef00b73d2fb09" translate="yes" xml:space="preserve">
          <source>If you return any other object, the object is recursively stringified, calling the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function on each property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d92592decdab65c8c7d88c8b2e526399e93164" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;getBaseLog(10, 1000)&lt;/code&gt; it returns &lt;code&gt;2.9999999999999996&lt;/code&gt; due to floating-point rounding, which is very close to the actual answer of 3.</source>
          <target state="translated">Если вы запустите &lt;code&gt;getBaseLog(10, 1000)&lt;/code&gt; он вернет &lt;code&gt;2.9999999999999996&lt;/code&gt; из-за округления с плавающей запятой, что очень близко к фактическому ответу 3.</target>
        </trans-unit>
        <trans-unit id="935b1b976508db5afe6cca08176c17239b09c114" translate="yes" xml:space="preserve">
          <source>If you set a property to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt; but do not delete it, the &lt;code&gt;in&lt;/code&gt; operator returns true for that property.</source>
          <target state="translated">Если задать для свойства значение &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; ,&lt;/a&gt; но не удалить его, оператор &lt;code&gt;in&lt;/code&gt; вернет значение true для этого свойства.</target>
        </trans-unit>
        <trans-unit id="34e10440b87179c5669d287c33d08bce47b6fa19" translate="yes" xml:space="preserve">
          <source>If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call.</source>
          <target state="translated">Если вы укажете другое количество элементов для вставки,чем число,которое вы удаляете,то в конце вызова массив будет иметь другую длину.</target>
        </trans-unit>
        <trans-unit id="682d3439d2fa9871ecad9eae1652e23eb74f6221" translate="yes" xml:space="preserve">
          <source>If you specify a number outside the expected range, the date information in the &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; object is updated accordingly. For example, if you specify 1005, the number of seconds is incremented by 1, and 5 is used for the milliseconds.</source>
          <target state="translated">Если вы укажете число за пределами ожидаемого диапазона, информация о &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; объекте Date обновится соответствующим образом. Например, если вы укажете 1005, количество секунд увеличивается на 1, а 5 используется для миллисекунд.</target>
        </trans-unit>
        <trans-unit id="32c4cced0b807fb68ae6694984513b4abd3c73a9" translate="yes" xml:space="preserve">
          <source>If you specify any object, including a &lt;code&gt;Boolean&lt;/code&gt; object whose value is &lt;code&gt;false&lt;/code&gt;, as the initial value of a &lt;code&gt;Boolean&lt;/code&gt; object, the new &lt;code&gt;Boolean&lt;/code&gt; object has a value of &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">Если вы укажете какой-либо объект, включая &lt;code&gt;Boolean&lt;/code&gt; объект, значение которого равно &lt;code&gt;false&lt;/code&gt; , в качестве начального значения &lt;code&gt;Boolean&lt;/code&gt; объекта, новый &lt;code&gt;Boolean&lt;/code&gt; объект будет иметь значение &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98ae5f892e8f6de3201d6782cad351ca1383c87b" translate="yes" xml:space="preserve">
          <source>If you use a method for a numeric literal and the numeric literal has no exponent and no decimal point, leave white-space(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.</source>
          <target state="translated">Если вы используете метод для числового литерала,и числовой литерал не имеет экспоненты и десятичной точки,оставьте пробел(ы)перед точкой,предшествующей вызову метода,чтобы точка не интерпретировалась как десятичная точка.</target>
        </trans-unit>
        <trans-unit id="edd6afd92c9f7a2538aece19a2aa77da3a6f3da8" translate="yes" xml:space="preserve">
          <source>If you use a method for a numeric literal, and the numeric literal has no exponent and no decimal point, you should leave &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;white-space(s)&lt;/a&gt; before the dot preceding the method call, so that the dot is not interpreted as a decimal point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f1d9b94d0b0382335af42f55617a4070d22713" translate="yes" xml:space="preserve">
          <source>If you use an unconditional &lt;code&gt;catch&lt;/code&gt; clause with one or more conditional &lt;code&gt;catch&lt;/code&gt; clauses, the unconditional &lt;code&gt;catch&lt;/code&gt; clause must be specified last. Otherwise, the unconditional &lt;code&gt;catch&lt;/code&gt; clause will intercept all types of exception before they can reach the conditional ones.</source>
          <target state="translated">Если вы используете безусловное предложение &lt;code&gt;catch&lt;/code&gt; с одним или несколькими условными предложениями &lt;code&gt;catch&lt;/code&gt; , безусловное предложение &lt;code&gt;catch&lt;/code&gt; должно быть указано последним. В противном случае безусловное предложение &lt;code&gt;catch&lt;/code&gt; перехватит все типы исключений, прежде чем они достигнут условных.</target>
        </trans-unit>
        <trans-unit id="f7698d65a3ba0451a9068546d38d02d3c21a92ac" translate="yes" xml:space="preserve">
          <source>If you use callbacks or fetch methods from an object with &lt;a href=&quot;destructuring_assignment#Object_destructuring&quot;&gt;a destructuring assignment&lt;/a&gt;, you may have non-existent values that you cannot call as functions unless you have tested their existence. Using &lt;code&gt;?.&lt;/code&gt;, you can avoid this extra test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78afbb13097de5c8b78471387fa8f8af3bf94b11" translate="yes" xml:space="preserve">
          <source>If you use normal JavaScript floating point numbers in imul, you will experience a degrade in performance. This is because of the costly conversion from a floating point to an integer for multiplication, and then converting the multiplied integer back into a floating point. The reason imul exists is because it is faster in only one (so far) circumstance: AsmJS. AsmJS allows for JIST-optimizers to more easily implement internal integers in JavaScript. Multiplying two numbers stored internally as integers (which is only possible with AsmJS) with imul is the only potential circumstance where Math.imul may prove performant in current browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d05f89ff9b94e2efe15b7bec1cbbc6dcdeb7392" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;eval&lt;/code&gt; function &lt;em&gt;indirectly,&lt;/em&gt; by invoking it via a reference other than &lt;code&gt;eval&lt;/code&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;as of ECMAScript 5&lt;/a&gt; it works in the global scope rather than the local scope. This means, for instance, that function declarations create global functions, and that the code being evaluated doesn't have access to local variables within the scope where it's being called.</source>
          <target state="translated">Если вы используете функцию &lt;code&gt;eval&lt;/code&gt; &lt;em&gt;косвенно,&lt;/em&gt; вызывая ее через ссылку, &lt;code&gt;eval&lt;/code&gt; от eval , &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-10.4.2&quot;&gt;в ECMAScript 5&lt;/a&gt; она работает в глобальной области, а не в локальной. Это означает, например, что объявления функций создают глобальные функции и что оцениваемый код не имеет доступа к локальным переменным в той области видимости, в которой он вызывается.</target>
        </trans-unit>
        <trans-unit id="73d1c2ee0e60284da071d578e3277739538eefac" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;toExponential()&lt;/code&gt; method for a numeric literal and the numeric literal has no exponent and no decimal point, leave whitespace(s) before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point.</source>
          <target state="translated">Если вы используете метод &lt;code&gt;toExponential()&lt;/code&gt; для числового литерала, а числовой литерал не имеет экспоненты и десятичной точки, оставьте пробелы перед точкой, которая предшествует вызову метода, чтобы точка не интерпретировалась как десятичная точка.</target>
        </trans-unit>
        <trans-unit id="597a2c20eb78f0898e472f8de984f91f02ea471c" translate="yes" xml:space="preserve">
          <source>If you want &lt;em&gt;all&lt;/em&gt; properties&amp;mdash;including non-enumerables&amp;mdash;see &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d19c207f7baf216ddd324adb7472fc913a7eb3d" translate="yes" xml:space="preserve">
          <source>If you want all properties, even non-enumerables, see &lt;a href=&quot;getownpropertynames&quot;&gt;&lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Если вам нужны все свойства, даже не перечисляемые, см. &lt;a href=&quot;getownpropertynames&quot;&gt; &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2948b5beeb992bfbdd3d635cd05e062df02e23d7" translate="yes" xml:space="preserve">
          <source>If you want an array element to exist but have an undefined value, use the &lt;code&gt;undefined&lt;/code&gt; value instead of the &lt;code&gt;delete&lt;/code&gt; operator. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is assigned the value &lt;code&gt;undefined&lt;/code&gt;, but the array element still exists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b17dbe4a9978e35e0df77cda82cc871d93e5145" translate="yes" xml:space="preserve">
          <source>If you want an array element to exist but have an undefined value, use the &lt;code&gt;undefined&lt;/code&gt; value instead of the &lt;code&gt;delete&lt;/code&gt; operator. In the following example, &lt;code&gt;trees[3]&lt;/code&gt; is assigned the value undefined, but the array element still exists:</source>
          <target state="translated">Если вы хотите, чтобы элемент массива существовал, но имел неопределенное значение, используйте &lt;code&gt;undefined&lt;/code&gt; значение вместо оператора &lt;code&gt;delete&lt;/code&gt; . В следующем примере &lt;code&gt;trees[3]&lt;/code&gt; присваивается значение undefined, но элемент массива все еще существует:</target>
        </trans-unit>
        <trans-unit id="2418cdf14fe502c2af1708e66eb2202ca0a9648f" translate="yes" xml:space="preserve">
          <source>If you want only the enumerable properties, see &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or use a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (although note that this will return enumerable properties not only found directly upon that object but also along the prototype chain for the object unless the latter is filtered with &lt;a href=&quot;hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Если вам нужны только перечислимые свойства, см. &lt;a href=&quot;keys&quot;&gt; &lt;code&gt;Object.keys()&lt;/code&gt; &lt;/a&gt; или используйте цикл &lt;a href=&quot;../../statements/for...in&quot;&gt; &lt;code&gt;for...in&lt;/code&gt; &lt;/a&gt; (хотя обратите внимание, что это вернет перечислимые свойства, найденные не только непосредственно в этом объекте, но и в цепочке прототипов для объекта, если только последний фильтруется с помощью &lt;a href=&quot;hasownproperty&quot;&gt; &lt;code&gt;hasOwnProperty()&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="39e653fdc0628060fb29f300dfac7bff4e0e7b80" translate="yes" xml:space="preserve">
          <source>If you want only the enumerable properties, see &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;Object.keys()&lt;/code&gt;&lt;/a&gt; or use a &lt;a href=&quot;../../statements/for...in&quot;&gt;&lt;code&gt;for...in&lt;/code&gt;&lt;/a&gt; loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with &lt;a href=&quot;hasownproperty&quot;&gt;&lt;code&gt;hasOwnProperty()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081dc7a00575a1581dcf7b3a349ab503bed65012" translate="yes" xml:space="preserve">
          <source>If you want to change the value of &quot;arg&quot; in the function body, you can do so, but you do not need to declare the same variable again. In other words: you can omit the &lt;code&gt;let&lt;/code&gt; keyword. If you want to create a new variable, you need to rename it as conflicts with the function parameter already.</source>
          <target state="translated">Если вы хотите изменить значение &amp;laquo;arg&amp;raquo; в теле функции, вы можете это сделать, но вам не нужно снова объявлять ту же переменную. Другими словами: вы можете опустить ключевое слово &lt;code&gt;let&lt;/code&gt; . Если вы хотите создать новую переменную, вам необходимо переименовать ее, так как она уже конфликтует с параметром функции.</target>
        </trans-unit>
        <trans-unit id="c5c69934f7bf2e4d350baba14d96404b2849e4d9" translate="yes" xml:space="preserve">
          <source>If you want to create an &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; from a mask you can use this code:</source>
          <target state="translated">Если вы хотите создать &lt;code&gt;&lt;a href=&quot;../global_objects/array&quot;&gt;Array&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../global_objects/boolean&quot;&gt;Booleans&lt;/a&gt;&lt;/code&gt; значений из маски, вы можете использовать этот код:</target>
        </trans-unit>
        <trans-unit id="c34494acb146a03229822964024372e46e20d7ed" translate="yes" xml:space="preserve">
          <source>If you want to disallow setting a new prototype for your object, your handler's &lt;code&gt;setPrototypeOf()&lt;/code&gt; method can either return &lt;code&gt;false&lt;/code&gt;, or it can throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a31baeccc4d5cda15fdaad0b7733d54070608b" translate="yes" xml:space="preserve">
          <source>If you want to disallow setting a new prototype for your object, your handler's &lt;code&gt;setPrototypeOf&lt;/code&gt; method can either return &lt;code&gt;false&lt;/code&gt;, or it can throw an exception.</source>
          <target state="translated">Если вы хотите запретить установку нового прототипа для своего объекта, метод &lt;code&gt;setPrototypeOf&lt;/code&gt; вашего обработчика может либо вернуть &lt;code&gt;false&lt;/code&gt; , либо вызвать исключение.</target>
        </trans-unit>
        <trans-unit id="8f4823c44fafa3ab81be841e2d53941d57b47410" translate="yes" xml:space="preserve">
          <source>If you want to export a single value or need a fallback value for a module, a default export can be used:</source>
          <target state="translated">Если вы хотите экспортировать одно значение или вам нужно запасное значение для модуля,можно использовать экспорт по умолчанию:</target>
        </trans-unit>
        <trans-unit id="50cbe95c4ee11ee4d5865b13d455d501fdd62c86" translate="yes" xml:space="preserve">
          <source>If you want to obtain capture groups and the global flag is set, you need to use &lt;a href=&quot;../regexp/exec&quot;&gt;&lt;code&gt;RegExp.exec()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;matchall&quot;&gt;&lt;code&gt;String.prototype.matchAll()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27f9e5e25120e14455ea16bd96cef1e320218ef" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current class inside the class body, you can create a &lt;em&gt;named class expression&lt;/em&gt;. The name is only visible within the scope of the class expression itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc47424fb527730f62198aaaa25c3348ff0fba7" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current class inside the class body, you can create a named class expression. This name is only visible in the scope of the class expression itself.</source>
          <target state="translated">Если вы хотите обратиться к текущему классу внутри тела класса,вы можете создать выражение с именем класса.Это имя видно только в области видимости самого выражения класса.</target>
        </trans-unit>
        <trans-unit id="481ba14f2f65c81318d305b87a92b52bfe033114" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current function inside the function body, you need to create a named function expression. &lt;u&gt;&lt;strong&gt;This name is then local only to the function body (scope)&lt;/strong&gt;&lt;/u&gt;. This also avoids using the non-standard &lt;a href=&quot;../functions/arguments/callee&quot;&gt;&lt;code&gt;arguments.callee&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9597ad4f9e7ad14879829bc41d7ee7dd8599f31b" translate="yes" xml:space="preserve">
          <source>If you want to refer to the current function inside the function body, you need to create a named function expression. &lt;u&gt;&lt;strong&gt;This name is then local only to the function body (scope)&lt;/strong&gt;&lt;/u&gt;. This also avoids using the non-standard &lt;code&gt;&lt;a href=&quot;../functions/arguments/callee&quot;&gt;arguments.callee&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">Если вы хотите ссылаться на текущую функцию внутри тела функции, вам необходимо создать именованное выражение функции. &lt;u&gt;&lt;strong&gt;Тогда это имя будет локальным только для тела функции (области видимости)&lt;/strong&gt;&lt;/u&gt; . Это также позволяет избежать использования нестандартного свойства &lt;code&gt;&lt;a href=&quot;../functions/arguments/callee&quot;&gt;arguments.callee&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99528303e4fa98874c6d3b7da8c65a874a1f9d0b" translate="yes" xml:space="preserve">
          <source>If you want to remove the getter, you can just &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fc22c8401e0f59ce33412d5d1a62fa14a2a8f0" translate="yes" xml:space="preserve">
          <source>If you want to remove the getter, you can just &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; it:</source>
          <target state="translated">Если вы хотите удалить геттер, вы можете просто &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; его:</target>
        </trans-unit>
        <trans-unit id="e1fd57c263b80cc07ff24ec488e383d11e16fe7f" translate="yes" xml:space="preserve">
          <source>If you want to remove the setter, you can just &lt;a href=&quot;../operators/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afab6a24815f73f4c694b81bf63bd41e2e5c193b" translate="yes" xml:space="preserve">
          <source>If you want to remove the setter, you can just &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; it:</source>
          <target state="translated">Если вы хотите удалить сеттер, вы можете просто &lt;code&gt;&lt;a href=&quot;../operators/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; его:</target>
        </trans-unit>
        <trans-unit id="c7a8801610bdd961430a0f13ef356227a205175f" translate="yes" xml:space="preserve">
          <source>If you want to see how to use the &lt;code&gt;Object.defineProperty&lt;/code&gt; method with a &lt;em&gt;binary-flags-like&lt;/em&gt; syntax, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;additional examples&lt;/a&gt;.</source>
          <target state="translated">Если вы хотите узнать, как использовать метод &lt;code&gt;Object.defineProperty&lt;/code&gt; с синтаксисом, &lt;em&gt;подобным бинарным флагам&lt;/em&gt; , см. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;Дополнительные примеры&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a33a81af4ee501f0c074526b9710c19c67c2ea6e" translate="yes" xml:space="preserve">
          <source>If you want to see how to use the &lt;code&gt;Object.defineProperty&lt;/code&gt; method with a &lt;em&gt;binary-flags-like&lt;/em&gt; syntax, see &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples&quot;&gt;additional examples&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088b49e17dfc48492f7ae931aa8eea2f898fed94" translate="yes" xml:space="preserve">
          <source>If you want to use an ordered associative array in a cross-browser environment, use a &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; object if available, or simulate this structure with two separate arrays (one for the keys and the other for the values), or build an array of single-property objects, etc.</source>
          <target state="translated">Если вы хотите использовать упорядоченный ассоциативный массив в кросс-браузерной среде, используйте объект &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; ,&lt;/a&gt; если он доступен, или смоделируйте эту структуру с двумя отдельными массивами (один для ключей, а другой для значений), или создайте массив из одиночных -объекты собственности и др.</target>
        </trans-unit>
        <trans-unit id="19381b630a3a814e91674608c14a389044af178b" translate="yes" xml:space="preserve">
          <source>If you were to provide an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt; as the second argument to &lt;code&gt;reduce()&lt;/code&gt;, the result would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb5ffcd2b43a51e7c0b5d8ecc72c4f2fa812052" translate="yes" xml:space="preserve">
          <source>If you were to provide an initial value as the second argument to &lt;code&gt;reduce()&lt;/code&gt;, the result would look like this:</source>
          <target state="translated">Если бы вы указали начальное значение в качестве второго аргумента функции &lt;code&gt;reduce()&lt;/code&gt; , результат выглядел бы следующим образом:</target>
        </trans-unit>
        <trans-unit id="9641348677babae98e66baf7b0dc8fe9f67d1d9b" translate="yes" xml:space="preserve">
          <source>If you wish to await two or more promises in parallel, you must still use &lt;code&gt;Promise#then&lt;/code&gt;, as &lt;code&gt;parallel&lt;/code&gt; does in the example.</source>
          <target state="translated">Если вы хотите, чтобы два или более обещания ожидались параллельно, вы все равно должны использовать &lt;code&gt;Promise#then&lt;/code&gt; , как это делает &lt;code&gt;parallel&lt;/code&gt; в примере.</target>
        </trans-unit>
        <trans-unit id="c253c1c3b6acd6d4520eacac9b373475e00e1fb8" translate="yes" xml:space="preserve">
          <source>If you wish to inherit from multiple objects, then mixins are a possibility.</source>
          <target state="translated">Если вы хотите унаследовать от нескольких объектов,то возможно смешивание.</target>
        </trans-unit>
        <trans-unit id="b358a85c79019bc0c27a5e9a086df327f3612e47" translate="yes" xml:space="preserve">
          <source>If you wish to safely perform two or more jobs in parallel, you must await a call to &lt;code&gt;&lt;a href=&quot;../global_objects/promise/all&quot;&gt;Promise.all&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../global_objects/promise/allsettled&quot;&gt;Promise.allSettled&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d85b069cf65c1056e4db1149435fcd8a68335dc" translate="yes" xml:space="preserve">
          <source>If you wish to support the use of a bound function only using &lt;a href=&quot;../../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;, or only by calling it, the target function must enforce that restriction.</source>
          <target state="translated">Если вы хотите поддерживать использование связанной функции только с помощью &lt;a href=&quot;../../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; или только путем ее вызова, целевая функция должна обеспечить соблюдение этого ограничения.</target>
        </trans-unit>
        <trans-unit id="28b16738f775180a66d096e17e9c0fac48e31c55" translate="yes" xml:space="preserve">
          <source>If you're experimenting with code in a web browser, such as the Firefox Web Console (&lt;strong&gt;Tools &lt;/strong&gt;&amp;gt;&lt;strong&gt; Web Developer &lt;/strong&gt;&amp;gt;&lt;strong&gt; Web Console&lt;/strong&gt;) and you 'Run' a definition of a class with the same name twice, you'll get a &lt;code&gt;SyntaxError: redeclaration of let &lt;em&gt;ClassName&lt;/em&gt;;&lt;/code&gt;. (See further discussion of this issue in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1428672&quot;&gt;bug 1428672&lt;/a&gt;.) Doing something similar in Chrome Developer Tools gives you a message like &lt;code&gt;Uncaught SyntaxError: Identifier '&lt;em&gt;ClassName&lt;/em&gt;' has already been declared at &amp;lt;anonymous&amp;gt;:1:1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1718e56ab56bc63e9b5c1230d10ad98783a6bcb6" translate="yes" xml:space="preserve">
          <source>If your class is a derived class, the default constructor calls the parent constructor, passing along any arguments that were provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff747b0e98166bc150b8d30636e3f74d34a1334b" translate="yes" xml:space="preserve">
          <source>If your code has just created a &lt;code&gt;WeakRef&lt;/code&gt; for a target object, or has gotten a target object from a &lt;code&gt;WeakRef&lt;/code&gt;'s &lt;code&gt;deref&lt;/code&gt; method, that target object will not be reclaimed until the end of the current JavaScript &lt;a href=&quot;https://tc39.es/ecma262/#job&quot;&gt;job&lt;/a&gt; (including any promise reaction jobs that run at the end of a script job). That is, you can only &quot;see&quot; an object get reclaimed between turns of the event loop. This is primarily to avoid making the behavior of any given JavaScript engine's garbage collector apparent in code &amp;mdash; because if it were, people would write code relying on that behavior, which would break when the garbage collector's behavior changed. (Garbage collection is a hard problem; JavaScript engine implementers are constantly refining and improving how it works.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3ce3648420f55b4147d24cab187f467076e9ce" translate="yes" xml:space="preserve">
          <source>If your project uses packages that export ESM, you can also import them for side effects only. This will run the code in the package entry point file (and any files it imports) only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9752f0db065b6780513593f5577369639a2acaaf" translate="yes" xml:space="preserve">
          <source>If your regular expression uses the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag, you can use the &lt;code&gt;exec()&lt;/code&gt; method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of &lt;code&gt;&lt;var&gt;str&lt;/var&gt;&lt;/code&gt; specified by the regular expression's &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property (&lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property). Note that the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property will not be reset when searching a different string, it will start its search at its existing &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d04674a5af9a41b5f728b702f2b91de19a7082" translate="yes" xml:space="preserve">
          <source>If your regular expression uses the &quot;&lt;code&gt;g&lt;/code&gt;&quot; flag, you can use the &lt;code&gt;exec()&lt;/code&gt; method multiple times to find successive matches in the same string. When you do so, the search starts at the substring of &lt;code&gt;str&lt;/code&gt; specified by the regular expression's &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property (&lt;a href=&quot;test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; will also advance the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property). Note that the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property will not be reset when searching a different string it will start its search at its existing &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="translated">Если ваше регулярное выражение использует флаг &amp;laquo; &lt;code&gt;g&lt;/code&gt; &amp;raquo;, вы можете использовать метод &lt;code&gt;exec()&lt;/code&gt; несколько раз, чтобы найти последовательные совпадения в одной и той же строке. Когда вы это сделаете, поиск начнется с подстроки &lt;code&gt;str&lt;/code&gt; , указанной свойством &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; регулярного выражения ( &lt;a href=&quot;test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt; также продвинет вперед свойство &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; ). Обратите внимание, что свойство &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; не будет сброшено при поиске другой строки, оно начнет поиск с существующего &lt;a href=&quot;lastindex&quot;&gt; &lt;code&gt;lastIndex&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3a9f12b1dc332abbb2f8fc8ea3de59b0640a4c8e" translate="yes" xml:space="preserve">
          <source>If your value array might grow into the tens of thousands, use a hybrid strategy: apply your function to chunks of the array at a time:</source>
          <target state="translated">Если ваш массив значений может вырасти до десятков тысяч,используйте гибридную стратегию:применяйте функцию к кусочкам массива одновременно:</target>
        </trans-unit>
        <trans-unit id="00f07d80e0be0674f46c91673837e8b3acb3567d" translate="yes" xml:space="preserve">
          <source>Ignoring some returned values</source>
          <target state="translated">Игнорирование некоторых возвращаемых значений</target>
        </trans-unit>
        <trans-unit id="57f2c95b766adf67d35d720bd7a552837b1ff2f2" translate="yes" xml:space="preserve">
          <source>Illegal character</source>
          <target state="translated">Незаконный характер</target>
        </trans-unit>
        <trans-unit id="006c1273c557356ca8147a2c650461ccbefa1ba8" translate="yes" xml:space="preserve">
          <source>Illegal trailing commas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8a946bee9899de71266d734c579d7b3e7c14a0" translate="yes" xml:space="preserve">
          <source>Immediately Invoked Function Expressions</source>
          <target state="translated">Немедленно вызванные функциональные выражения</target>
        </trans-unit>
        <trans-unit id="0a98f9ab649d5842f0e2d4409933f707c73e764f" translate="yes" xml:space="preserve">
          <source>Implementation Progress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0280d6d574941666f9c9ec653db289388ad81c" translate="yes" xml:space="preserve">
          <source>Implementation progress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a91ab6749a390ea156750cfc17b1f94b74bf782" translate="yes" xml:space="preserve">
          <source>Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the &lt;code&gt;formatMatcher&lt;/code&gt; property: A &lt;a href=&quot;http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher&quot;&gt;fully specified &quot;&lt;code&gt;basic&lt;/code&gt;&quot; algorithm&lt;/a&gt; and an implementation-dependent &quot;&lt;code&gt;best fit&lt;/code&gt;&quot; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d77a4da59a498bc0526734d1d32ceaf44b25a12" translate="yes" xml:space="preserve">
          <source>Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the &lt;code&gt;formatMatcher&lt;/code&gt; property: A &lt;a href=&quot;http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher&quot;&gt;fully specified &lt;code&gt;&quot;basic&quot;&lt;/code&gt; algorithm&lt;/a&gt; and an implementation-dependent &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; algorithm.</source>
          <target state="translated">Реализации могут поддерживать другие подмножества, и запросы будут согласовываться со всеми доступными комбинациями подмножества-представления, чтобы найти наилучшее соответствие. Для этого согласования доступны два алгоритма, которые выбираются свойством &lt;code&gt;formatMatcher&lt;/code&gt; : &lt;a href=&quot;http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher&quot;&gt;полностью определенный &lt;code&gt;&quot;basic&quot;&lt;/code&gt; алгоритм&lt;/a&gt; и зависящий от реализации алгоритм &lt;code&gt;&quot;best fit&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9891b7f1f9d2e885ea5e7211c73846949ae5ce55" translate="yes" xml:space="preserve">
          <source>Implemented in JavaScript 1.0.</source>
          <target state="translated">Реализовано на JavaScript 1.0.</target>
        </trans-unit>
        <trans-unit id="f33ba6d0736fb021c9fc01268c7a34b22e5f56c8" translate="yes" xml:space="preserve">
          <source>Implementing a &lt;code&gt;WeakMap&lt;/code&gt;-like class with a .clear() method</source>
          <target state="translated">Реализация &lt;code&gt;WeakMap&lt;/code&gt; -подобных класса с .clear () метод</target>
        </trans-unit>
        <trans-unit id="0532eeb0dfeca745a29b54a058021727371ec22f" translate="yes" xml:space="preserve">
          <source>Implementing a WeakMap-like class with a .clear() method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c749b374aeb24624ee8aa56bb696c115d5f5e9a5" translate="yes" xml:space="preserve">
          <source>Implementing basic set operations</source>
          <target state="translated">Реализация базовых заданных операций</target>
        </trans-unit>
        <trans-unit id="b88a338120312301e3ec4ab586557d6a7e9f0f33" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;Function.prototype.toString&lt;/code&gt; revision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380f227f10005ab46ff9c7c323b946317aa5a7e7" translate="yes" xml:space="preserve">
          <source>Implicit call:</source>
          <target state="translated">Неявный вызов:</target>
        </trans-unit>
        <trans-unit id="7cf7edc6eed680f670f1903e2fa95dffe98c8491" translate="yes" xml:space="preserve">
          <source>Implicit globals and outer function scope</source>
          <target state="translated">Неявные глобусы и сфера внешних функций</target>
        </trans-unit>
        <trans-unit id="23dadb4aba4124154d197243dcf4d7ef8b8da923" translate="yes" xml:space="preserve">
          <source>Import a module for its side effects only</source>
          <target state="translated">Импорт модуля только для его побочных эффектов</target>
        </trans-unit>
        <trans-unit id="c5b568ec8548086b4de521e5d8033aec1c934aac" translate="yes" xml:space="preserve">
          <source>Import a single export from a module</source>
          <target state="translated">Импорт одного экспорта из модуля</target>
        </trans-unit>
        <trans-unit id="a221101514292b5fcf882207fe6e9cbe5953924e" translate="yes" xml:space="preserve">
          <source>Import an entire module for side effects only, without importing anything. This runs the module's global code, but doesn't actually import any values.</source>
          <target state="translated">Импортируйте весь модуль только для побочных эффектов,без импорта ничего.Это запускает глобальный код модуля,но на самом деле не импортирует никаких значений.</target>
        </trans-unit>
        <trans-unit id="6dba1b2f0c4295b30c790350d8885ab2810a087e" translate="yes" xml:space="preserve">
          <source>Import an entire module's contents</source>
          <target state="translated">Импорт всего содержимого модуля</target>
        </trans-unit>
        <trans-unit id="b51d3f221713e66532ca8daeac5ec886156d5d57" translate="yes" xml:space="preserve">
          <source>Import an export with a more convenient alias</source>
          <target state="translated">Импорт экспорта с более удобным псевдонимом</target>
        </trans-unit>
        <trans-unit id="478b4766b3a380867a3862a6ca8bdb0a668262eb" translate="yes" xml:space="preserve">
          <source>Import multiple exports from a module with convenient aliases.</source>
          <target state="translated">Импорт нескольких экспортов из модуля с удобными псевдонимами.</target>
        </trans-unit>
        <trans-unit id="bd9c8faa833f0f94f37e3eaac33816aac5e508cc" translate="yes" xml:space="preserve">
          <source>Import multiple exports from module</source>
          <target state="translated">Импорт нескольких экспортов из модуля</target>
        </trans-unit>
        <trans-unit id="2adb455832e9c0f94412f3522b3179fa5ada0ef0" translate="yes" xml:space="preserve">
          <source>Import the exported module correctly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4ecf2834d54b456e6157b4f56fd8d7bf4ecc2a" translate="yes" xml:space="preserve">
          <source>Import/Export mutable globals proposal</source>
          <target state="translated">Предложение по импорту/экспорту мутируемых глобусов</target>
        </trans-unit>
        <trans-unit id="102ff9d8f76a710f00d76cead3a7e8bba6f5cdfc" translate="yes" xml:space="preserve">
          <source>Importing defaults</source>
          <target state="translated">Импорт дефолтов</target>
        </trans-unit>
        <trans-unit id="f71dcbf6278006d50e621d3d0c3ded43630b6564" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;new.target&lt;/code&gt; is inherited from the surrounding scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a195036ba7dec4c4382e6cf6537c69752b0ed431" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt;, &lt;code&gt;this&lt;/code&gt; retains the value of the enclosing lexical context's &lt;code&gt;this&lt;/code&gt;. In global code, it will be set to the global object:</source>
          <target state="translated">В &lt;a href=&quot;../functions/arrow_functions&quot;&gt;стрелке функций&lt;/a&gt; , &lt;code&gt;this&lt;/code&gt; сохраняет значение вмещающего лексического контекста это &lt;code&gt;this&lt;/code&gt; . В глобальном коде он будет установлен на глобальный объект:</target>
        </trans-unit>
        <trans-unit id="140cefc12826afba19082ed8e5c642424d6c64fa" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;&lt;code&gt;Strict_mode&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../global_objects/typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised when attempting to create a property on &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/primitive&quot;&gt;primitive&lt;/a&gt; value such as a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/symbol&quot;&gt;symbol&lt;/a&gt;, a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/string&quot;&gt;string&lt;/a&gt;, a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/number&quot;&gt;number&lt;/a&gt; or a &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/boolean&quot;&gt;boolean&lt;/a&gt;. &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;Primitive&lt;/a&gt; values cannot hold any &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/property/JavaScript&quot;&gt;property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c73f4538311a378c8c9424d32c3f8811910d419" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; code, however, this will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Однако в коде &lt;a href=&quot;../strict_mode&quot;&gt;строгого режима&lt;/a&gt; это вызовет &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="82dc5204fd47b97a4c4e971fee4ed30a2687404c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; code, you can't use &quot;&lt;code&gt;let&lt;/code&gt;&quot; as a label name. It will throw a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; (let is a reserved identifier).</source>
          <target state="translated">В коде &lt;a href=&quot;../strict_mode&quot;&gt;строгого режима&lt;/a&gt; нельзя использовать &amp;laquo; &lt;code&gt;let&lt;/code&gt; &amp;raquo; в качестве имени метки. Он выдаст &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; (пусть это зарезервированный идентификатор).</target>
        </trans-unit>
        <trans-unit id="c6054ae0aa42f967abbaaff8c7c370a661682c9b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, attempting to add new properties to a non-extensible object throws a &lt;code&gt;TypeError&lt;/code&gt;. In sloppy mode, the addition of the &quot;x&quot; property is silently ignored.</source>
          <target state="translated">В &lt;a href=&quot;../strict_mode&quot;&gt;строгом режиме при&lt;/a&gt; попытке добавить новые свойства к нерасширяемому объекту возникает &lt;code&gt;TypeError&lt;/code&gt; . В небрежном режиме добавление свойства &amp;laquo;x&amp;raquo; игнорируется.</target>
        </trans-unit>
        <trans-unit id="af9aba5cd8d260931e6c60474eae352d67a9887b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, starting with ES2015, functions inside blocks are scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216d48a6757220d152e7f994000123b4833e4e79" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, the &lt;a href=&quot;../global_objects/function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/arguments&quot;&gt;&lt;code&gt;Function.arguments&lt;/code&gt;&lt;/a&gt; properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ea4e9343d838f1294b3b7ae8cc65f8857960e3" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt;&lt;code&gt;Function.caller&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/function/arguments&quot;&gt;&lt;code&gt;Function.arguments&lt;/code&gt;&lt;/a&gt; properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature.</source>
          <target state="translated">В &lt;a href=&quot;../strict_mode&quot;&gt;строгом режиме&lt;/a&gt; , то &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller&quot;&gt; &lt;code&gt;Function.caller&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;../global_objects/function/arguments&quot;&gt; &lt;code&gt;Function.arguments&lt;/code&gt; &lt;/a&gt; свойство используется и не должно быть. Они устарели, потому что они несут утечку вызывающей функции, являются нестандартными, трудными для оптимизации и потенциально опасными для производительности.</target>
        </trans-unit>
        <trans-unit id="9ae11f4b28ed355c17fb2cf7b60c3de003e3a4a0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, identifiers can contain only alphanumeric characters (or &quot;$&quot; or &quot;_&quot;), and may not start with a digit. An identifier differs from a &lt;strong&gt;string&lt;/strong&gt; in that a string is data, while an identifier is part of the code.</source>
          <target state="translated">В &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScript&lt;/a&gt; идентификаторы могут содержать только буквенно-цифровые символы (или &amp;laquo;$&amp;raquo; или &amp;laquo;_&amp;raquo;) и не могут начинаться с цифры. Идентификатор отличается от &lt;strong&gt;строки&lt;/strong&gt; тем, что строка - это данные, а идентификатор - часть кода.</target>
        </trans-unit>
        <trans-unit id="b1cf0c9af0f3437de670684af61db176a2e024d0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, identifiers can contain only alphanumeric characters (or &quot;$&quot; or &quot;_&quot;), and may not start with a digit. An identifier differs from a &lt;strong&gt;string&lt;/strong&gt; in that a string is data, while an identifier is part of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ceac41023ca7e64457c2a69427be9598fb1653c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, all browsers that support ES2015 handle this the same way: &lt;code&gt;zero&lt;/code&gt; is defined only if &lt;code&gt;shouldDefineZero&lt;/code&gt; is true, and only in the scope of the &lt;code&gt;if&lt;/code&gt;-block.</source>
          <target state="translated">В &lt;a href=&quot;strict_mode&quot;&gt;строгом режиме&lt;/a&gt; все браузеры, поддерживающие ES2015, обрабатывают это одинаково: &lt;code&gt;zero&lt;/code&gt; определяется только в том случае, если &lt;code&gt;shouldDefineZero&lt;/code&gt; истинно, и только в области действия &lt;code&gt;if&lt;/code&gt; -block.</target>
        </trans-unit>
        <trans-unit id="29666e4908ed732ae018d4d4721ff9754d3c167b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;strict_mode&quot;&gt;strict mode&lt;/a&gt;, starting with ES2015, functions inside blocks are now scoped to that block. Prior to ES2015, block-level functions were forbidden in strict mode.</source>
          <target state="translated">В &lt;a href=&quot;strict_mode&quot;&gt;строгом режиме&lt;/a&gt; , начиная с ES2015, функции внутри блоков теперь привязаны к этому блоку. До ES2015 функции блочного уровня были запрещены в строгом режиме.</target>
        </trans-unit>
        <trans-unit id="873415a6a8f203e4bdfe8b79a65ee0b40b608117" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentPromise,&lt;/code&gt;&lt;code&gt;Promise.all&lt;/code&gt; wires up the promise chain in one go, meaning that the operation will fail-fast regardless of the order of rejection of the promises, and the error will always occur within the configured promise chain, enabling it to be caught in the normal way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221555bbaf990eeb6c49e029c703b9faa3ef204e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, both timers are created and then &lt;code&gt;await&lt;/code&gt;ed. The timers are running concurrently but the &lt;code&gt;await&lt;/code&gt; calls are still running in series, meaning the second &lt;code&gt;await&lt;/code&gt; will wait for the first one to finish. This leads the code to finish in 2 rather than 3 seconds, which is the time the slowest timer needs. The same happens in &lt;code&gt;stillConcurrent&lt;/code&gt; using &lt;code&gt;Promise.all&lt;/code&gt; this time.</source>
          <target state="translated">В &lt;code&gt;concurrentStart&lt;/code&gt; оба таймера создаются, а затем &lt;code&gt;await&lt;/code&gt; . Таймеры работают одновременно , но &lt;code&gt;await&lt;/code&gt; вызовы все еще работают последовательно, то есть во второй &lt;code&gt;await&lt;/code&gt; будет ждать первого до конца. Это приводит к тому, что код завершается за 2, а не за 3 секунды, а это время, необходимое самому медленному таймеру. То же самое происходит в &lt;code&gt;stillConcurrent&lt;/code&gt; с использованием &lt;code&gt;Promise.all&lt;/code&gt; на этот раз.</target>
        </trans-unit>
        <trans-unit id="dca20ace845e482ba3a705f727cc3a8ad77cf9d7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, both timers are created and then &lt;code&gt;await&lt;/code&gt;ed. The timers run concurrently, which means the code finishes in 2 rather than 3 seconds, i.e. the slowest timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f97a7bbaeebe37b6849072c8d4d0a9f173528d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;concurrentStart&lt;/code&gt;, if promise &lt;code&gt;fast&lt;/code&gt; rejects before promise &lt;code&gt;slow&lt;/code&gt; is fulfilled, then an unhandled promise rejection error will be raised, regardless of whether the caller has configured a catch clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7a6fe3cf2916c84be2ef5c18d5e7128c24c00e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;for...of&lt;/code&gt; loops, abrupt iteration termination can be caused by &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;. In these cases, the iterator is closed.</source>
          <target state="translated">В циклах &lt;code&gt;for...of&lt;/code&gt; резкое завершение итерации может быть вызвано командами &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;continue&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt; или &lt;code&gt;return&lt;/code&gt; . В этих случаях итератор закрывается.</target>
        </trans-unit>
        <trans-unit id="f24173b93852ae7003f7140596ebc37c863720d7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;for...of&lt;/code&gt; loops, abrupt iteration termination can be caused by &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;. In these cases, the iterator is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6add7a612b365f8147b939f3c6f66bc22b629f" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;sequentialStart&lt;/code&gt;, execution suspends 2 seconds for the first &lt;code&gt;await&lt;/code&gt;, and then again another 1 second for the second &lt;code&gt;await&lt;/code&gt;. The second timer is not created until the first has already fired.</source>
          <target state="translated">В &lt;code&gt;sequentialStart&lt;/code&gt; выполнение приостанавливается на 2 секунды для первого &lt;code&gt;await&lt;/code&gt; , а затем еще на 1 секунду для второго &lt;code&gt;await&lt;/code&gt; . Второй таймер не создается, пока не сработает первый.</target>
        </trans-unit>
        <trans-unit id="8ffa1771a0ac6f2ae699ccfcc00a18930b4b803c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;sequentialStart&lt;/code&gt;, execution suspends 2 seconds for the first &lt;code&gt;await&lt;/code&gt;, and then another second for the second &lt;code&gt;await&lt;/code&gt;. The second timer is not created until the first has already fired, so the code finishes after 3 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176a20a11517113033606aab1e61e3d4ca20c6ad" translate="yes" xml:space="preserve">
          <source>In C, the &lt;code&gt;strcmp()&lt;/code&gt; function is used for comparing strings. In JavaScript, you just use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;less-than and greater-than operators&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309d60f8743568aecbdf811d2d351da393f4b34d" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015 There is a way to concisely define properties whose values are generator functions:</source>
          <target state="translated">В ECMAScript 2015 есть способ лаконично определить свойства,значения которых являются функциями генератора:</target>
        </trans-unit>
        <trans-unit id="a8ee30c3781491b37d2d91aa12c3f275c2e033a0" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, a shorthand notation is available, so that the keyword &quot;&lt;code&gt;function&lt;/code&gt;&quot; is no longer necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df1fd3d991e32f1320629672612245d3c92c0f7" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, a shorthand notation is available, so that the keyword &quot;function&quot; is no longer necessary.</source>
          <target state="translated">В ECMAScript 2015 имеется короткая запись,так что ключевое слово &quot;функция&quot; больше не нужно.</target>
        </trans-unit>
        <trans-unit id="fbe274850fe44af194eea5fda8294e245f5d4c8b" translate="yes" xml:space="preserve">
          <source>In ECMAScript 2015, there is a way to concisely define properties whose values are generator functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948177c7ae9848dd8e493ddbacacd75cb5473d9a" translate="yes" xml:space="preserve">
          <source>In ECMAScript 3/5, the &lt;code&gt;this&lt;/code&gt; issue was fixable by assigning the value in &lt;code&gt;this&lt;/code&gt; to a variable that could be closed over.</source>
          <target state="translated">В ECMAScript 3/5 &lt;code&gt;this&lt;/code&gt; проблему можно было исправить, присвоив значение &lt;code&gt;this&lt;/code&gt; переменной, которую можно было закрыть.</target>
        </trans-unit>
        <trans-unit id="4fd06900882a105e2510f94e9cdbf294840e46f9" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5 strict mode code, duplicate property names were considered a &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;. With the introduction of computed property names making duplication possible at runtime, ECMAScript 2015 has removed this restriction.</source>
          <target state="translated">В коде строгого режима ECMAScript 5 повторяющиеся имена свойств считались &lt;a href=&quot;../global_objects/syntaxerror&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; . С введением вычисляемых имен свойств, делающих возможным дублирование во время выполнения, ECMAScript 2015 снял это ограничение.</target>
        </trans-unit>
        <trans-unit id="02e140d416437887a7872326dba6eed9437d2415" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5, this behavior was changed for &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. Assignment to an unqualified identifier in strict mode will result in a &lt;code&gt;ReferenceError&lt;/code&gt;, to avoid the accidental creation of properties on the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82de7fe847ca3c223f7295513a60c00f3cc6f251" translate="yes" xml:space="preserve">
          <source>In ES2015 with nested template literals:</source>
          <target state="translated">В ES2015 со вложенными шаблонными литералами:</target>
        </trans-unit>
        <trans-unit id="2e28d1359b78caea73bd201eb664d9160434980d" translate="yes" xml:space="preserve">
          <source>In ES2015 with template literals and without nesting:</source>
          <target state="translated">В ES2015 с шаблонными литералами и без вложенности:</target>
        </trans-unit>
        <trans-unit id="f3672427c7965f113f3fe4cb570beacc248c8428" translate="yes" xml:space="preserve">
          <source>In ES2015, the class syntax allows for sub-classing of both built-in and user defined classes; as a result, static methods such as &lt;code&gt;Array.from&lt;/code&gt; are &quot;inherited&quot; by subclasses of &lt;code&gt;Array&lt;/code&gt; and create new instances of the subclass, not &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">В ES2015 синтаксис класса позволяет разделять как встроенные, так и определяемые пользователем классы; в результате статические методы, такие как &lt;code&gt;Array.from&lt;/code&gt; , &amp;laquo;наследуются&amp;raquo; подклассами &lt;code&gt;Array&lt;/code&gt; и создают новые экземпляры подкласса, а не &lt;code&gt;Array&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c41c52a21154ec2619b7bacc530a4f16cecd0dd3" translate="yes" xml:space="preserve">
          <source>In ES2015, the class syntax allows sub-classing of both built-in and user-defined classes. As a result, static methods such as &lt;code&gt;Array.from()&lt;/code&gt; are &quot;inherited&quot; by subclasses of &lt;code&gt;Array&lt;/code&gt;, and create new instances &lt;em&gt;of the subclass&lt;/em&gt;, not &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef0e40b46bde57de45d710a8decfe4f424e88a4" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53864ec850c8528b35459bfdb64c830661afe252" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be coerced to an object.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет приведен к объекту.</target>
        </trans-unit>
        <trans-unit id="0030a6d3d27dbe9c4a6e9e4e06ecd6adb4308138" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a frozen ordinary object, simply return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет рассматриваться как замороженный обычный объект, просто верните &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ca534830639609923b78d052142ef445d9da986" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет обрабатываться как нерасширяемый обычный объект, просто верните &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bcfc35ed6e7f198824d6e0b0dcb22d3b293ba28" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return it.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет рассматриваться, как если бы он был нерасширяемым обычным объектом, просто верните его.</target>
        </trans-unit>
        <trans-unit id="007cf956ed6956737327164237b3afece1b87b2b" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object by simply returning it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d58ae111e6808420d9135fd6bfc1e632b51c47" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object, simply return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет рассматриваться, как если бы это был запечатанный обычный объект, просто верните &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a25f137ee01cf4301c10ca6fc3d32a3d19298e37" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it was a sealed ordinary object, simply return it.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет рассматриваться, как если бы он был запечатанным обычным объектом, просто верните его.</target>
        </trans-unit>
        <trans-unit id="3d0bff99dd5b84da47050253c2c62698a5c39a02" translate="yes" xml:space="preserve">
          <source>In ES5, if the argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object argument will be treated as if it were a frozen ordinary object, and be simply returned.</source>
          <target state="translated">В ES5, если аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 аргумент, не являющийся объектом, будет обрабатываться как замороженный обычный объект и будет просто возвращен.</target>
        </trans-unit>
        <trans-unit id="8598ec4f16e006f73c4b98ace30ef3c88220ab1a" translate="yes" xml:space="preserve">
          <source>In ES5, if the first argument to this method is not an object (a primitive), then it will cause a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In ES2015, a non-object first argument will be coerced to an object at first.</source>
          <target state="translated">В ES5, если первый аргумент этого метода не является объектом (примитивом), это вызовет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; . В ES2015 первый аргумент, не являющийся объектом, сначала будет приведен к объекту.</target>
        </trans-unit>
        <trans-unit id="e2c167c36d97c1d699b099b1ec68b4a0acdf0879" translate="yes" xml:space="preserve">
          <source>In ES5, it will throw a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception if the &lt;var&gt;obj&lt;/var&gt; parameter isn't an object. In ES2015, the parameter will be coerced to an &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">В ES5, он будет бросать &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; исключение , если &lt;var&gt;obj&lt;/var&gt; параметр не является объектом. В ES2015 параметр будет приведен к &lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e6d38ce849906adde58d4d32cd183bb3cd5e181f" translate="yes" xml:space="preserve">
          <source>In ES5, you typically use the &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; method to call a function with a given &lt;code&gt;this&lt;/code&gt; value and &lt;code&gt;arguments&lt;/code&gt; provided as an array (or an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;).</source>
          <target state="translated">В ES5 вы обычно используете метод &lt;a href=&quot;../function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply()&lt;/code&gt; &lt;/a&gt; для вызова функции с данным значением &lt;code&gt;this&lt;/code&gt; и &lt;code&gt;arguments&lt;/code&gt; предоставленными в виде массива (или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;объекта, подобного массиву&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="7e6653f25dc7136aed24c5070c600b114c374f9a" translate="yes" xml:space="preserve">
          <source>In ES5, you typically use the &lt;a href=&quot;../function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; method to call a function with a given &lt;code&gt;this&lt;/code&gt; value and &lt;code&gt;arguments&lt;/code&gt; provided as an array (or an &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects&quot;&gt;array-like object&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9d84f212ebfd0b494629810bc4f123430adee3" translate="yes" xml:space="preserve">
          <source>In ES5:</source>
          <target state="translated">В ES5:</target>
        </trans-unit>
        <trans-unit id="4867ea47a940c21ea6c6af42152c706a4ec82ba3" translate="yes" xml:space="preserve">
          <source>In Edge 12 and 13, &lt;code&gt;let&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop initializer does not create a separate variable for each loop iteration as defined by ES2015. Instead, it behaves as though the loop were wrapped in a scoping block with the &lt;code&gt;let&lt;/code&gt; immediately before the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f05042b00889b690877f9c1f38bccf3790a39b" translate="yes" xml:space="preserve">
          <source>In Firefox 18 - 39, the name of this method was &lt;code&gt;contains()&lt;/code&gt;. It was renamed to &lt;code&gt;includes()&lt;/code&gt; in &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1102219&quot;&gt;bug 1102219&lt;/a&gt; due to the following reason:</source>
          <target state="translated">В Firefox 18&amp;ndash;39 этот метод назывался &lt;code&gt;contains()&lt;/code&gt; . В &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1102219&quot;&gt;ошибке 1102219&lt;/a&gt; он был переименован в include &lt;code&gt;includes()&lt;/code&gt; по следующей причине:</target>
        </trans-unit>
        <trans-unit id="b3441497965bb64df9474736353a9248115e770e" translate="yes" xml:space="preserve">
          <source>In Firefox 42, the implementation got updated to reflect the final ES2015 specification: The result is now checked if it is an array and if the array elements are either of type string or of type symbol. Enumerating duplicate own property names is not a failure anymore.</source>
          <target state="translated">В Firefox 42 реализация была обновлена с учетом окончательной спецификации ES2015:Теперь проверяется,является ли это массив и являются ли элементы массива строкой типа или символом типа.Перечисление дублирующих собственных имен свойств больше не является неудачей.</target>
        </trans-unit>
        <trans-unit id="be8d03fdcab501aecd669f36c6937ea8fde7271a" translate="yes" xml:space="preserve">
          <source>In Firefox 48, &lt;code&gt;String.prototype.contains()&lt;/code&gt; has been removed. Use &lt;code&gt;String.prototype.includes()&lt;/code&gt; only.</source>
          <target state="translated">В Firefox 48 &lt;code&gt;String.prototype.contains()&lt;/code&gt; была удалена. Используйте только &lt;code&gt;String.prototype.includes()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6eab913afe11ef8c151060fcbf4894152ade8632" translate="yes" xml:space="preserve">
          <source>In Firefox 58, when the exception is unused, the identifier can be omitted, as in the code below. This is also &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html&quot;&gt;allowed in TypeScript 2.5&lt;/a&gt; and later. However, at the time of this writing (August 2018), &lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;the proposal to support this&lt;/a&gt; has not yet been included into an ECMAScript standard, so this syntax may not work in other browsers.</source>
          <target state="translated">В Firefox 58, когда исключение не используется, идентификатор можно не указывать, как в приведенном ниже коде. Это также &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html&quot;&gt;разрешено в TypeScript 2.5&lt;/a&gt; и новее. Однако на момент написания этой статьи (август 2018 г.) &lt;a href=&quot;https://github.com/tc39/proposal-optional-catch-binding&quot;&gt;предложение о поддержке этого&lt;/a&gt; еще не было включено в стандарт ECMAScript, поэтому этот синтаксис может не работать в других браузерах.</target>
        </trans-unit>
        <trans-unit id="1730c0df30cd5ba97c5141ded4e91edebdb5d504" translate="yes" xml:space="preserve">
          <source>In Firefox, &lt;code&gt;handler&lt;/code&gt; is only called from assignments in script, not from native code. For example, &lt;code&gt;window.watch('location', myHandler)&lt;/code&gt; will not call &lt;code&gt;myHandler&lt;/code&gt; if the user clicks a link to an anchor within the current document. However, &lt;code&gt;window.location += '#myAnchor'&lt;/code&gt; will call &lt;code&gt;myHandler&lt;/code&gt;.</source>
          <target state="translated">В Firefox &lt;code&gt;handler&lt;/code&gt; вызывается только из назначений в скрипте, а не из собственного кода. Например, &lt;code&gt;window.watch('location', myHandler)&lt;/code&gt; не будет вызывать &lt;code&gt;myHandler&lt;/code&gt; , если пользователь щелкает ссылку на привязку в текущем документе. Однако &lt;code&gt;window.location += '#myAnchor'&lt;/code&gt; вызовет &lt;code&gt;myHandler&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="20427e6f530262dedd1f66d1091224f92b38be66" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20&amp;micro;s in Firefox 59; in 60 it will be 2ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af97ad69484c392ea6d2c53e11669126d6b3def" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20us in Firefox 59; in 60 it will be 2ms.</source>
          <target state="translated">В Firefox параметр &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; включен по умолчанию и по умолчанию равен 20us в Firefox 59; в 60 это будет 2мс.</target>
        </trans-unit>
        <trans-unit id="2760c20e75f06135284b55f675e6ca0ea87f3385" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enable &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;, the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="translated">В Firefox вы также можете включить &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; , точность будет составлять 100 &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt; или значение privacy.resistFingerprinting.reduceTimerPrecision.microseconds , в зависимости от того, что больше.</target>
        </trans-unit>
        <trans-unit id="9c7ba06ca4f441cd2e83c2b7bd2b5b0d766466d1" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enabled &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;, the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="translated">В Firefox вы также можете включить &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; , точность будет равна 100 мс или значение &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt; , в зависимости от того, что больше.</target>
        </trans-unit>
        <trans-unit id="5b8bed5863664df70343acda1590937b7118915f" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 11, numbers are rounded to 15 decimal digits. For example, &lt;code&gt;(1000000000000005).toLocaleString('en-US')&lt;/code&gt; returns &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa3c7d01b63aee4083af5bf6ff39193c2213851" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 11, numbers are rounded to 15 decimal digits. For example, &lt;code&gt;new Intl.NumberFormat('en-US').format(1000000000000005)&lt;/code&gt; returns &lt;code&gt;&quot;1,000,000,000,000,010&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ae8ad7d0e4ba6962d4b6f17b97388cf31cdc72" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8, this was only supported on DOM objects and with some non-standard behaviors. This was later fixed in Internet Explorer 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db24d0846e3ba3185a867d8668c69a5571ec019" translate="yes" xml:space="preserve">
          <source>In Internet Explorer, &lt;code&gt;let&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop initializer does not create a separate variable for each loop iteration as defined by ES2015. Instead, it behaves as though the loop were wrapped in a scoping block with the &lt;code&gt;let&lt;/code&gt; immediately before the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5615497b68ccaa1ea32d698e965d876cea2548f" translate="yes" xml:space="preserve">
          <source>In JSON the values can only be strings, numbers, arrays, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, or another (JSON) object.</source>
          <target state="translated">В JSON значения могут быть только строками, числами, массивами, &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; или другим (JSON) объектом.</target>
        </trans-unit>
        <trans-unit id="668b19b6452d0e28e81f530219de59631b89f0c9" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;s are not iterable unless they implement the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;. Therefore, you cannot use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;to iterate over the properties of an object.</source>
          <target state="translated">В JavaScript &lt;a href=&quot;../global_objects/object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt; s не итерация , если они не осуществлять &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;итерацию протокола&lt;/a&gt; . Следовательно, вы не можете использовать &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip; of&lt;/a&gt; для перебора свойств объекта.</target>
        </trans-unit>
        <trans-unit id="895cd1421cbf51353ea473367f38e162aabe3974" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;a href=&quot;../global_objects/object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;s are not iterable unless they implement the &lt;a href=&quot;../iteration_protocols#The_iterable_protocol&quot;&gt;iterable protocol&lt;/a&gt;. Therefore, you cannot use &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_statement&quot;&gt;for&amp;hellip;of &lt;/a&gt;to iterate over the properties of an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2855ac845af4473bd3a6be21040f1c7e0ad7b25b" translate="yes" xml:space="preserve">
          <source>In JavaScript, a setter can be used to execute a function whenever a specified property is attempted to be changed. Setters are most often used in conjunction with getters to create a type of pseudo-property. It is not possible to simultaneously have a setter on a property that holds an actual value.</source>
          <target state="translated">В JavaScript,сеттер может быть использован для выполнения функции при попытке изменить указанное свойство.Сеттеры чаще всего используются совместно с геттерами для создания типа псевдо-свойства.Невозможно одновременно иметь сеттер на свойстве,которое содержит действительное значение.</target>
        </trans-unit>
        <trans-unit id="ca543fb85472cc8f29fc43d21952496053e3fecd" translate="yes" xml:space="preserve">
          <source>In JavaScript, function parameters default to &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. However, it's often useful to set a different default value. This is where default parameters can help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19c8d5903929df29ffd31d91bc12841578c097c" translate="yes" xml:space="preserve">
          <source>In JavaScript, function parameters default to &lt;code&gt;&lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. However, it's often useful to set a different default value. This is where default parameters can help.</source>
          <target state="translated">В JavaScript параметры функции по умолчанию &lt;code&gt;&lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; . Однако часто бывает полезно установить другое значение по умолчанию. Здесь могут помочь параметры по умолчанию.</target>
        </trans-unit>
        <trans-unit id="a20f27b3f1c13809f77edbf8f97737045dcbcf21" translate="yes" xml:space="preserve">
          <source>In JavaScript, functions are first-class objects, because they can have properties and methods just like any other object. What distinguishes them from other objects is that functions can be called. In brief, they are &lt;code&gt;&lt;a href=&quot;global_objects/function&quot;&gt;Function&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">В JavaScript функции являются объектами первого класса, поскольку они могут иметь свойства и методы, как и любой другой объект. Что отличает их от других объектов, так это возможность вызова функций. Вкратце, это объекты &lt;code&gt;&lt;a href=&quot;global_objects/function&quot;&gt;Function&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c0c83ea411bdaf4088e6dd68be95506dcafee3c" translate="yes" xml:space="preserve">
          <source>In JavaScript, it is impossible to write an ambiguous exponentiation expression. That is, you cannot put a unary operator (&lt;code&gt;+/-/~/!/delete/void/typeof&lt;/code&gt;) immediately before the base number; doing so will cause a SyntaxError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0482de27c3e98ed79056a4c8e3487f1d9c7e2eb4" translate="yes" xml:space="preserve">
          <source>In JavaScript, there are several reduce functions:</source>
          <target state="translated">В JavaScript есть несколько функций сокращения:</target>
        </trans-unit>
        <trans-unit id="4e500e271dd9c768e0229c1f8cd060c64d5a885f" translate="yes" xml:space="preserve">
          <source>In JavaScript, we can do this with the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dd1e314b8d816c5d9c9ed86c33a7c3051041e8" translate="yes" xml:space="preserve">
          <source>In Promises</source>
          <target state="translated">В обещаниях</target>
        </trans-unit>
        <trans-unit id="8753023eb7cfee3b18013db421fe39f22ac9cfb7" translate="yes" xml:space="preserve">
          <source>In UTF-16, the most common characters can be represented by a single 16-bit value (i.e. a code unit). However, this set of characters, known as the Base Multilingual Plane (BMP), is only &lt;sup&gt;1&lt;/sup&gt;/&lt;sub&gt;17&lt;/sub&gt;&lt;sup&gt;th&lt;/sup&gt; of the total addressable Unicode code points. The remaining code points, in the range of &lt;code&gt;65536&lt;/code&gt; (&lt;code&gt;0x010000&lt;/code&gt;) to &lt;code&gt;1114111&lt;/code&gt; (&lt;code&gt;0x10FFFF&lt;/code&gt;) are known as supplementary characters. In UTF-16, supplementary characters are represented by two 16-bit code units, known as surrogates, that were reserved for this purpose. A valid combination of two surrogates used to represent a supplementary character is known as a surrogate pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af0213442e56d88e4f08027d4396f1d413cc06e" translate="yes" xml:space="preserve">
          <source>In Unicode, two sequences of code points are compatible if they represent the same abstract characters, and should be treated alike in some &amp;mdash; but not necessarily all &amp;mdash; applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fcf052ca7ee2994caca99f7c2a53bdfa453a22" translate="yes" xml:space="preserve">
          <source>In Unicode, two sequences of code points have canonical equivalence if they represent the same abstract characters, and should always have the same visual appearance and behavior (for example, they should always be sorted in the same way).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ccea940dd72f9de64442358a3ee98e6136515f" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; loop, it jumps to the update expression.</source>
          <target state="translated">В цикле &lt;a href=&quot;for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt; выполняется переход к выражению обновления.</target>
        </trans-unit>
        <trans-unit id="f0090629de3eb7e932efc2299ea2b0e11274be76" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; loop, it jumps back to the condition.</source>
          <target state="translated">В &lt;a href=&quot;while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; цикл, он возвращается к условию.</target>
        </trans-unit>
        <trans-unit id="802ad80650674fefbc5baab939de5d45ff49c037" translate="yes" xml:space="preserve">
          <source>In a case where you want to store an object created by your user and allowing it to be restored even after the browser has been closed, the following example is a model for the applicability of &lt;code&gt;JSON.stringify()&lt;/code&gt;:</source>
          <target state="translated">В случае, если вы хотите сохранить объект, созданный вашим пользователем, и разрешить его восстановление даже после закрытия браузера, следующий пример представляет собой модель применимости &lt;code&gt;JSON.stringify()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b974b8e0c8cc3adb8992389d2d0a1cd08b75c03c" translate="yes" xml:space="preserve">
          <source>In a circular structure like the following</source>
          <target state="translated">В круглой структуре,подобной следующей</target>
        </trans-unit>
        <trans-unit id="9a9eae68242ed66a24716ccc35563a64f014c279" translate="yes" xml:space="preserve">
          <source>In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">В кратком тексте указывается только выражение, которое становится неявным возвращаемым значением. В теле блока вы должны использовать явный оператор &lt;code&gt;return&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4f1b8f09e11f544c05027c4ef2b7cb80ca9f74d" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom array &lt;code&gt;MyArray&lt;/code&gt;), the &lt;code&gt;MyArray&lt;/code&gt; species is the &lt;code&gt;MyArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Array&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, вашем настраиваемом массиве &lt;code&gt;MyArray&lt;/code&gt; ) разновидностью &lt;code&gt;MyArray&lt;/code&gt; является конструктор &lt;code&gt;MyArray&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительские объекты &lt;code&gt;Array&lt;/code&gt; в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="cf6e2e091bde1b1e25306a26d58b0ccc4c15bee3" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom array buffer &lt;code&gt;MyArrayBuffer&lt;/code&gt;), the &lt;code&gt;MyArrayBuffer&lt;/code&gt; species is the &lt;code&gt;MyArrayBuffer&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;ArrayBuffer&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, в вашем настраиваемом буфере массива &lt;code&gt;MyArrayBuffer&lt;/code&gt; ) разновидностью &lt;code&gt;MyArrayBuffer&lt;/code&gt; является конструктор &lt;code&gt;MyArrayBuffer&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительские объекты &lt;code&gt;ArrayBuffer&lt;/code&gt; в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="8676f845dcd23c9b49f4af2f5389c64e7e8218ba" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom map &lt;code&gt;MyMap&lt;/code&gt;), the &lt;code&gt;MyMap&lt;/code&gt; species is the &lt;code&gt;MyMap&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Map&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, вашей пользовательской карте &lt;code&gt;MyMap&lt;/code&gt; ) разновидностью &lt;code&gt;MyMap&lt;/code&gt; является конструктор &lt;code&gt;MyMap&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительские объекты &lt;code&gt;Map&lt;/code&gt; в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="6a21922d4d45a039d44b74194264a3b6620d0aa9" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom regexp &lt;code&gt;MyRegExp&lt;/code&gt;), the &lt;code&gt;MyRegExp&lt;/code&gt; species is the &lt;code&gt;MyRegExp&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;RegExp&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, в вашем настраиваемом регулярном выражении &lt;code&gt;MyRegExp&lt;/code&gt; ) &lt;code&gt;MyRegExp&lt;/code&gt; является конструктором &lt;code&gt;MyRegExp&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительские объекты &lt;code&gt;RegExp&lt;/code&gt; в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="a1c37cca7fcf5c973f743b17eb0dd855d1eeaf6f" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom set &lt;code&gt;MySet&lt;/code&gt;), the &lt;code&gt;MySet&lt;/code&gt; species is the &lt;code&gt;MySet&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return parent &lt;code&gt;Set&lt;/code&gt; objects in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, в вашем пользовательском наборе &lt;code&gt;MySet&lt;/code&gt; ) разновидностью &lt;code&gt;MySet&lt;/code&gt; является конструктор &lt;code&gt;MySet&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительские объекты &lt;code&gt;Set&lt;/code&gt; в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="1133b3da65f4298a37b3e1fc081e7c925554e075" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom typed array &lt;code&gt;MyTypedArray&lt;/code&gt;), the &lt;code&gt;MyTypedArray&lt;/code&gt; species is the &lt;code&gt;MyTypedArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return a parent &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object in your derived class methods:</source>
          <target state="translated">В производном объекте коллекции (например, в вашем настраиваемом типизированном массиве &lt;code&gt;MyTypedArray&lt;/code&gt; ) вид &lt;code&gt;MyTypedArray&lt;/code&gt; является конструктором &lt;code&gt;MyTypedArray&lt;/code&gt; . Однако вы можете захотеть перезаписать это, чтобы вернуть родительский &lt;a href=&quot;../typedarray#TypedArray_objects&quot;&gt;типизированный&lt;/a&gt; объект массива в методах производного класса:</target>
        </trans-unit>
        <trans-unit id="2ce247dad140e8fba2d68c52d0b5deed3560020a" translate="yes" xml:space="preserve">
          <source>In a derived collection object (e.g. your custom typed array &lt;code&gt;MyTypedArray&lt;/code&gt;), the &lt;code&gt;MyTypedArray&lt;/code&gt; species is the &lt;code&gt;MyTypedArray&lt;/code&gt; constructor. However, you might want to overwrite this, in order to return a parent &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects&quot;&gt;typed array&lt;/a&gt; object in your derived class methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350adacc4d9e715c786318e8468e47b1e9d05e5a" translate="yes" xml:space="preserve">
          <source>In a module &lt;code&gt;my-module.js&lt;/code&gt;, we could include the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340c77fb144b30a4542ea8a0c0d5a2ac8c4b516d" translate="yes" xml:space="preserve">
          <source>In a non-constructor context (i.e., without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator), &lt;code&gt;Number&lt;/code&gt; can be used to perform a type conversion.</source>
          <target state="translated">В контексте, не являющемся конструктором (т. Е. Без оператора &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; ), &lt;code&gt;Number&lt;/code&gt; можно использовать для выполнения преобразования типа.</target>
        </trans-unit>
        <trans-unit id="e7dda02a1acb072f90af69f2907af38348fc815a" translate="yes" xml:space="preserve">
          <source>In a related circumstance, what if you actually wanted your &lt;code&gt;Date()&lt;/code&gt; function to be able to be called from the code inside &lt;code&gt;Function()&lt;/code&gt;. Should you just take the easy way out and fall back to &lt;code&gt;eval()&lt;/code&gt;? No! Never. Instead try the approach below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810fedbd7d3efd9acd82311336fa539410213dc0" translate="yes" xml:space="preserve">
          <source>In a related circumstance, what if you actually wanted your &lt;code&gt;Date&lt;/code&gt; function to be able to be called from the code inside &lt;code&gt;Function()&lt;/code&gt;. Should you just wimp out and fall back to &lt;code&gt;eval()&lt;/code&gt;? Absolutely not, never ever. Instead try the approach below.</source>
          <target state="translated">Что, если бы вы действительно хотели, чтобы ваша функция &lt;code&gt;Date&lt;/code&gt; могла вызываться из кода внутри &lt;code&gt;Function()&lt;/code&gt; . Должны ли вы просто расслабиться и вернуться к &lt;code&gt;eval()&lt;/code&gt; ? Абсолютно нет, никогда. Вместо этого попробуйте следующий подход.</target>
        </trans-unit>
        <trans-unit id="b2fc3d6faac50dc84e09287729aea3901d7164ff" translate="yes" xml:space="preserve">
          <source>In a word: Don't.</source>
          <target state="translated">Одним словом:Не надо.</target>
        </trans-unit>
        <trans-unit id="3a3bc3b6e0682977940132c5c77dc0be406db238" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Whitespace&quot;&gt;white space&lt;/a&gt; characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of &lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion&lt;/a&gt;. Line terminators are matched by the &lt;strong&gt;\s&lt;/strong&gt; class in &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45902b9c216bd387d2fe70315207b8d21f3b38a8" translate="yes" xml:space="preserve">
          <source>In addition to methods to read and alter individual components of the local date and time (such as &lt;a href=&quot;date/getday&quot;&gt;&lt;code&gt;getDay()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/sethours&quot;&gt;&lt;code&gt;setHours()&lt;/code&gt;&lt;/a&gt;), there are also versions of the same methods that read and manipulate the date and time using UTC (such as &lt;a href=&quot;date/getutcday&quot;&gt;&lt;code&gt;getUTCDay()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/setutchours&quot;&gt;&lt;code&gt;setUTCHours()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae3ca63d02d68155e6bfd686d4025760d2e921e" translate="yes" xml:space="preserve">
          <source>In addition to white space characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of &lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;automatic semicolon insertion&lt;/a&gt;. Line terminators are matched by the &lt;strong&gt;\s&lt;/strong&gt; class in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;regular expressions&lt;/a&gt;.</source>
          <target state="translated">Помимо символов пробела, используются символы конца строки для улучшения читаемости исходного текста. Однако в некоторых случаях терминаторы строки могут влиять на выполнение кода JavaScript, так как есть несколько мест, где они запрещены. Знаки конца строки также влияют на процесс &lt;a href=&quot;#Automatic_semicolon_insertion&quot;&gt;автоматической вставки точки с запятой&lt;/a&gt; . Символы конца строки соответствуют классу &lt;strong&gt;\ s&lt;/strong&gt; в &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;регулярных выражениях&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d1dbbf23ea13be77ce53036651bf06faa4f98b65" translate="yes" xml:space="preserve">
          <source>In addition to your own symbols, JavaScript has some built-in symbols which represent internal language behaviors which were not exposed to developers in ECMAScript 5 and before. These symbols can be accessed using the following properties:</source>
          <target state="translated">В дополнение к вашим собственным символам,JavaScript имеет некоторые встроенные символы,которые представляют внутреннее поведение языка,которое не было подвержено разработчикам в ECMAScript 5 и ранее.Доступ к этим символам можно получить,используя следующие свойства:</target>
        </trans-unit>
        <trans-unit id="541fce84d020f8e809b1424cc43c2d8605b35d86" translate="yes" xml:space="preserve">
          <source>In addition, since true iterables cannot be polyfilled, this implementation does not support generic iterables as defined in the 6&lt;sup&gt;th&lt;/sup&gt; Edition of ECMA-262.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772f53b7684325c70c59fb803ea949efc447df73" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;global_objects/string/raw&quot;&gt;&lt;code&gt;String.raw()&lt;/code&gt;&lt;/a&gt; method exists to create raw strings just like the default template function and string concatenation would create.</source>
          <target state="translated">Кроме того, существует метод &lt;a href=&quot;global_objects/string/raw&quot;&gt; &lt;code&gt;String.raw()&lt;/code&gt; &lt;/a&gt; для создания необработанных строк так же, как функция шаблона по умолчанию и конкатенация строк.</target>
        </trans-unit>
        <trans-unit id="afdac2e1c883f1486c41d87b72385f76020d0b90" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;global_objects/string/raw&quot;&gt;&lt;code&gt;String.raw()&lt;/code&gt;&lt;/a&gt; method exists to create raw strings&amp;mdash;just like the default template function and string concatenation would create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6c8d3bc5587fba3a2992288ddc497a933c9e1d" translate="yes" xml:space="preserve">
          <source>In addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this:</source>
          <target state="translated">Кроме того,вы можете использовать его для отключения кода,чтобы предотвратить его запуск,обернув код в комментарий,как это:</target>
        </trans-unit>
        <trans-unit id="3895a9d4c10daddb44b0baf3cea41b98e617fe5c" translate="yes" xml:space="preserve">
          <source>In all cases, the returned promise is fulfilled with an array containing &lt;strong&gt;all &lt;/strong&gt;the values of the &lt;var&gt;iterable&lt;/var&gt; passed as argument (also non-promise values).</source>
          <target state="translated">Во всех случаях возвращаемое обещание выполняется с помощью массива, содержащего &lt;strong&gt;все&lt;/strong&gt; значения &lt;var&gt;iterable&lt;/var&gt; переданной в качестве аргумента (также значения, не являющиеся обещаниями).</target>
        </trans-unit>
        <trans-unit id="c81b508fa4aa4f5e76e7a5fb07f3df97a3e6e267" translate="yes" xml:space="preserve">
          <source>In all other cases, a resolving Promise is returned. In the following example, the first &lt;code&gt;then()&lt;/code&gt; will return &lt;code&gt;42&lt;/code&gt; wrapped in a resolving Promise even though the previous Promise in the chain was rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2e12a377e763cd095116ed09fef665af7281bf" translate="yes" xml:space="preserve">
          <source>In all other cases, a resolving Promise is returned. In the following example, the first &lt;code&gt;then()&lt;/code&gt; will return &lt;code&gt;42&lt;/code&gt; wrapped resolving Promise even though the previous Promise in the chain was rejected.</source>
          <target state="translated">Во всех остальных случаях возвращается разрешающее обещание. В следующем примере первый &lt;code&gt;then()&lt;/code&gt; вернет &lt;code&gt;42&lt;/code&gt; завернутого разрешающего обещания, даже если предыдущее обещание в цепочке было отклонено.</target>
        </trans-unit>
        <trans-unit id="4f386d0fd63e7041445027553d8387adba4f48a3" translate="yes" xml:space="preserve">
          <source>In an ECMAScript 2016 environment which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does increment for an incrementing variable automatically (if the character warrants it in being a surrogate pair).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b003a314ef1e4fb418bf66b8bc466ac14403b108" translate="yes" xml:space="preserve">
          <source>In an ECMAScript 2016 environment which allows destructured assignment, the following is a more succinct and somewhat more flexible alternative in that it does incrementing for an incrementing variable automatically (if the character warrants it in being a surrogate pair).</source>
          <target state="translated">В среде ECMAScript 2016,позволяющей разрушенное присваивание,следующая альтернатива является более лаконичной и несколько более гибкой в том смысле,что она делает инкремент для инкрементирующей переменной автоматически (если символ требует,чтобы она была суррогатной парой).</target>
        </trans-unit>
        <trans-unit id="6ae1d411c5185e7a3f1b56084729d3af21f20494" translate="yes" xml:space="preserve">
          <source>In an inline event handler</source>
          <target state="translated">Обработчик событий в режиме реального времени</target>
        </trans-unit>
        <trans-unit id="15a234979acf5c85ed72ab3a44cfa7cf0c039e37" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, &lt;code&gt;DateTimeFormat&lt;/code&gt; uses the default locale and default options.</source>
          <target state="translated">При базовом использовании без указания языкового стандарта &lt;code&gt;DateTimeFormat&lt;/code&gt; использует языковой стандарт по умолчанию и параметры по умолчанию.</target>
        </trans-unit>
        <trans-unit id="6c8fca8d2d4d72fbc7ff12349b16baad5284d084" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, a formatted string in the default locale and with default options is returned.</source>
          <target state="translated">При базовом использовании без указания локали возвращается отформатированная строка в локали по умолчанию и с параметрами по умолчанию.</target>
        </trans-unit>
        <trans-unit id="e30dc2f73ac6e65084e81c106ff21218b79a2446" translate="yes" xml:space="preserve">
          <source>In basic use without specifying a locale, a formatted string in the default locale and with default options is returned. This is useful to distinguish between singular and plural forms, e.g. &quot;dog&quot; and &quot;dogs&quot;.</source>
          <target state="translated">При базовом использовании без указания локали возвращается отформатированная строка в локали по умолчанию и с параметрами по умолчанию.Это полезно для различения единственной и множественной форм,например,&quot;собака&quot; и &quot;собаки&quot;.</target>
        </trans-unit>
        <trans-unit id="4e6edcf1e99e27f4a3c003689651a55d0701af0f" translate="yes" xml:space="preserve">
          <source>In both, &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt; and sloppy mode, a call to &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt; throws when adding a new property to a non-extensible object.</source>
          <target state="translated">И в &lt;a href=&quot;../strict_mode&quot;&gt;строгом,&lt;/a&gt; и в небрежном режиме вызов &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; выдает ошибку при добавлении нового свойства к нерасширяемому объекту.</target>
        </trans-unit>
        <trans-unit id="1c5b208d6a1696deaa27e5631e305def887a5f0d" translate="yes" xml:space="preserve">
          <source>In browser versions supporting named capturing groups, will be an object whose keys are the used group names, and whose values are the matched portions (&lt;code&gt;undefined&lt;/code&gt; if not matched).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212201f4cd8f19efb2a09bdffc69dc9cf7ec33b3" translate="yes" xml:space="preserve">
          <source>In browsers which support named capturing groups, the following code captures &quot;&lt;code&gt;fox&lt;/code&gt;&quot; or &quot;&lt;code&gt;cat&lt;/code&gt;&quot; into a group named &quot;&lt;code&gt;animal&lt;/code&gt;&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fec9e70a7a8e5a0b462b870bc9aad4fb731e521" translate="yes" xml:space="preserve">
          <source>In case of an error, for example if a property is non-writable, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised, and the &lt;code&gt;&lt;var&gt;target&lt;/var&gt;&lt;/code&gt; object is changed if any properties are added before the error is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c53b39ddf5eb1e541cbcb2fd25d92feed9aab69" translate="yes" xml:space="preserve">
          <source>In case of an error, for example if a property is non-writable, a &lt;a href=&quot;../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised, and the &lt;code&gt;target&lt;/code&gt; object can be changed if any properties are added before error is raised.</source>
          <target state="translated">В случае ошибки, например, если свойство не доступно для записи, будет &lt;a href=&quot;../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; ошибка TypeError , и &lt;code&gt;target&lt;/code&gt; объект может быть изменен, если какие-либо свойства добавлены до возникновения ошибки.</target>
        </trans-unit>
        <trans-unit id="743863f600d0a0b25842692572596ef37053d3d1" translate="yes" xml:space="preserve">
          <source>In cases where the &lt;code&gt;year&lt;/code&gt; would be output, &lt;code&gt;.format()&lt;/code&gt; may commonly present these side-by-side:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2715483284a25ba548ae565967fe75b81647c6bb" translate="yes" xml:space="preserve">
          <source>In certain cases, nesting a template is the easiest (and perhaps more readable) way to have configurable strings. Within a backticked template, it is simple to allow inner backticks simply by using them inside a placeholder &lt;code&gt;${ }&lt;/code&gt; within the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185b559f3c0aaf526e6b24fa70557e54bd43808c" translate="yes" xml:space="preserve">
          <source>In certain times, nesting a template is the easiest and perhaps more readable way to have configurable strings. Within a backticked template it is simple to allow inner backticks simply by using them inside a placeholder &lt;code&gt;${ }&lt;/code&gt; within the template. For instance, if condition a is true: then return this templated literal.</source>
          <target state="translated">Иногда вложение шаблона - самый простой и, возможно, более читаемый способ иметь настраиваемые строки. В шаблоне с обратными кавычками просто разрешить внутренние обратные кавычки, просто используя их внутри заполнителя &lt;code&gt;${ }&lt;/code&gt; внутри шаблона. Например, если условие a истинно: верните этот шаблонный литерал.</target>
        </trans-unit>
        <trans-unit id="4db1a326096311ea6af1c3fb975c7c9930e3121d" translate="yes" xml:space="preserve">
          <source>In class constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor that was directly invoked by &lt;code&gt;new&lt;/code&gt;. This is also the case if the constructor is in a parent class and was delegated from a child constructor.</source>
          <target state="translated">В конструкторах классов &lt;code&gt;new.target&lt;/code&gt; относится к конструктору, который был напрямую вызван командой &lt;code&gt;new&lt;/code&gt; . Это также имеет место, если конструктор находится в родительском классе и был делегирован из дочернего конструктора.</target>
        </trans-unit>
        <trans-unit id="6bdb1b0d5feb35f9fbe77dd15e2d3235928fcdf4" translate="yes" xml:space="preserve">
          <source>In class constructors, it refers to the constructed class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94af82422eceede92c75ba324542543e93fcf1e0" translate="yes" xml:space="preserve">
          <source>In code using XPCOM &lt;code&gt;instanceof&lt;/code&gt; has special effect: &lt;code&gt;obj instanceof &lt;/code&gt;&lt;em&gt;&lt;code&gt;xpcomInterface&lt;/code&gt;&lt;/em&gt; (e.g. &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt;) calls &lt;code&gt;obj.QueryInterface(&lt;em&gt;xpcomInterface&lt;/em&gt;)&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; if QueryInterface succeeded. A side effect of such call is that you can use &lt;em&gt;&lt;code&gt;xpcomInterface&lt;/code&gt;&lt;/em&gt;'s properties on &lt;code&gt;obj&lt;/code&gt; after a successful &lt;code&gt;instanceof&lt;/code&gt; test. Unlike standard JavaScript globals, the test &lt;code&gt;obj instanceof xpcomInterface&lt;/code&gt; works as expected even if &lt;code&gt;obj&lt;/code&gt; is from a different scope.</source>
          <target state="translated">В коде, использующем XPCOM &lt;code&gt;instanceof&lt;/code&gt; , имеет специальный эффект: &lt;code&gt;obj instanceof &lt;/code&gt; &lt;em&gt; &lt;code&gt;xpcomInterface&lt;/code&gt; &lt;/em&gt; (например, &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt; ) вызывает &lt;code&gt;obj.QueryInterface(&lt;em&gt;xpcomInterface&lt;/em&gt;)&lt;/code&gt; и возвращает &lt;code&gt;true&lt;/code&gt; , если QueryInterface завершился успешно. Побочным эффектом такого вызова является то, что вы можете использовать свойства &lt;em&gt; &lt;code&gt;xpcomInterface&lt;/code&gt; &lt;/em&gt; для объекта &lt;code&gt;obj&lt;/code&gt; после успешного выполнения теста &lt;code&gt;instanceof&lt;/code&gt; . В отличие от стандартных глобальных &lt;code&gt;obj instanceof xpcomInterface&lt;/code&gt; JavaScript, тестовый объект obj instanceof xpcomInterface работает должным образом, даже если &lt;code&gt;obj&lt;/code&gt; находится в другой области.</target>
        </trans-unit>
        <trans-unit id="14cfe9e8018b79bf958a062759f1007e85f4498c" translate="yes" xml:space="preserve">
          <source>In code using XPCOM, &lt;code&gt;instanceof&lt;/code&gt; has special effect: &lt;code&gt;&lt;var&gt;obj&lt;/var&gt; instanceof &lt;var&gt;xpcomInterface&lt;/var&gt;&lt;/code&gt; (e.g. &lt;code&gt;Components.interfaces.nsIFile&lt;/code&gt;) calls &lt;code&gt;&lt;var&gt;obj&lt;/var&gt;.QueryInterface(&lt;var&gt;xpcomInterface&lt;/var&gt;)&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;QueryInterface&lt;/code&gt; succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992fc64c413d9c88cc713416bf184f970d9fbfac" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isfinite&quot;&gt;&lt;code&gt;isFinite()&lt;/code&gt;&lt;/a&gt; function, this method doesn't first convert the parameter to a number. This means only values of the type number &lt;em&gt;and&lt;/em&gt; are finite return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a613e3bd8d9172c0deeee7a9b7b65c63525ed0bb" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isfinite&quot;&gt;&lt;code&gt;isFinite()&lt;/code&gt;&lt;/a&gt; function, this method doesn't forcibly convert the parameter to a number. This means only values of the type number, that are also finite, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">По сравнению с глобальной &lt;a href=&quot;../isfinite&quot;&gt; &lt;code&gt;isFinite()&lt;/code&gt; &lt;/a&gt; , этот метод не преобразует параметр в число принудительно. Это означает, что только значения типа number, которые также являются конечными, возвращают &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d244f5107598de168b205e3c43fd027e6571c188" translate="yes" xml:space="preserve">
          <source>In comparison to the global &lt;a href=&quot;../isnan&quot;&gt;&lt;code&gt;isNaN()&lt;/code&gt;&lt;/a&gt; function, &lt;code&gt;Number.isNaN()&lt;/code&gt; doesn't suffer the problem of forcefully converting the parameter to a number. This means it is now safe to pass values that would normally convert to &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, but aren't actually the same value as &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;. This also means that only values of the type number, that are also &lt;a href=&quot;../nan&quot;&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">По сравнению с глобальной &lt;a href=&quot;../isnan&quot;&gt; &lt;code&gt;isNaN()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;Number.isNaN()&lt;/code&gt; не страдает проблемой принудительного преобразования параметра в число. Это означает, что теперь можно безопасно передавать значения, которые обычно преобразуются в &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; , но на самом деле не такие же, как &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; . Это также означает, что только значения типа number, которые также являются &lt;a href=&quot;../nan&quot;&gt; &lt;code&gt;NaN&lt;/code&gt; &lt;/a&gt; , возвращают &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b720da4b14164a69ca218bd2c91051947f21b9ad" translate="yes" xml:space="preserve">
          <source>In comparison, the Promise returned by &lt;a href=&quot;all&quot;&gt;&lt;code&gt;Promise.all()&lt;/code&gt;&lt;/a&gt; may be more appropriate if the tasks are dependent on each other / if you'd like to immediately reject upon any of them rejecting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8217e6b58b2edad9f5a6741e352a92ad99a7c0e8" translate="yes" xml:space="preserve">
          <source>In constructors, &lt;code&gt;new.target&lt;/code&gt; refers to the constructor that was invoked by &lt;a href=&quot;operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">В конструкторах &lt;code&gt;new.target&lt;/code&gt; относится к конструктору, который был вызван командой &lt;a href=&quot;operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f621dfa4be91ca91418c57854499d4ee4a81c259" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;Sets&lt;/code&gt;, &lt;code&gt;WeakSets&lt;/code&gt; are &lt;strong&gt;collections of objects only&lt;/strong&gt; and not of arbitrary values of any type.</source>
          <target state="translated">В отличие от &lt;code&gt;Sets&lt;/code&gt; , &lt;code&gt;WeakSets&lt;/code&gt; - это &lt;strong&gt;коллекции только объектов,&lt;/strong&gt; а не произвольных значений любого типа.</target>
        </trans-unit>
        <trans-unit id="29612058b2a37d96155ca6d8e8846e19f5383f8e" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;Symbol()&lt;/code&gt;, the &lt;code&gt;Symbol.for()&lt;/code&gt; function creates a symbol available in a global symbol registry list. &lt;code&gt;Symbol.for()&lt;/code&gt; does also not necessarily create a new symbol on every call, but checks first if a symbol with the given &lt;code&gt;key&lt;/code&gt; is already present in the registry. In that case, that symbol is returned. If no symbol with the given key is found, &lt;code&gt;Symbol.for()&lt;/code&gt; will create a new global symbol.</source>
          <target state="translated">В отличие от &lt;code&gt;Symbol()&lt;/code&gt; , &lt;code&gt;Symbol.for()&lt;/code&gt; создает символ, доступный в глобальном списке реестра символов. &lt;code&gt;Symbol.for()&lt;/code&gt; также не обязательно создает новый символ при каждом вызове, но сначала проверяет, присутствует ли уже символ с данным &lt;code&gt;key&lt;/code&gt; в реестре. В этом случае возвращается этот символ. Если символ с данным ключом не найден, &lt;code&gt;Symbol.for()&lt;/code&gt; создаст новый глобальный символ.</target>
        </trans-unit>
        <trans-unit id="2ff9ea516bcf681c13dab78eda856670cc61010b" translate="yes" xml:space="preserve">
          <source>In contrast to the &lt;a href=&quot;break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt; statement, &lt;code&gt;continue&lt;/code&gt; does not terminate the execution of the loop entirely: instead,</source>
          <target state="translated">В отличие от оператора &lt;a href=&quot;break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;continue&lt;/code&gt; не завершает выполнение цикла полностью: вместо этого</target>
        </trans-unit>
        <trans-unit id="abde0a67e7f66ee66240fa3ae208e8af08646767" translate="yes" xml:space="preserve">
          <source>In dealing with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Constructor&quot;&gt;constructors&lt;/a&gt; it is possible to use the &lt;code&gt;let&lt;/code&gt; bindings to share one or more private members without using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;closures&lt;/a&gt;:</source>
          <target state="translated">При работе с &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Constructor&quot;&gt;конструкторами&lt;/a&gt; можно использовать привязки &lt;code&gt;let&lt;/code&gt; для совместного использования одного или нескольких закрытых членов без использования &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;замыканий&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="add9606929e73b3d9b2d5274b0b0c6a25af99476" translate="yes" xml:space="preserve">
          <source>In depth analysis on delete</source>
          <target state="translated">Глубокий анализ при удалении</target>
        </trans-unit>
        <trans-unit id="1ee02026d6da5c79915a450ae4a367bd8161a9d5" translate="yes" xml:space="preserve">
          <source>In following code, values yielded by &lt;code&gt;g1()&lt;/code&gt; are returned from &lt;code&gt;next()&lt;/code&gt; calls just like those which are yielded by &lt;code&gt;g2()&lt;/code&gt;.</source>
          <target state="translated">В следующем коде значения, полученные с помощью &lt;code&gt;g1()&lt;/code&gt; , возвращаются из вызовов &lt;code&gt;next()&lt;/code&gt; точно так же, как и значения, полученные с помощью &lt;code&gt;g2()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a15b0c2b14bd2c1fe2943c815c7efbf0fce1279" translate="yes" xml:space="preserve">
          <source>In function calls like &lt;code&gt;f()&lt;/code&gt;, the &lt;code&gt;this&lt;/code&gt; value was the global object. In strict mode, it is now &lt;code&gt;undefined&lt;/code&gt;. When a function was called with &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt;, if the value was a primitive value, this one was boxed into an object (or the global object for &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt;). In strict mode, the value is passed directly without conversion or replacement.</source>
          <target state="translated">В вызовах функций, таких как &lt;code&gt;f()&lt;/code&gt; , значение &lt;code&gt;this&lt;/code&gt; было глобальным объектом. В строгом режиме он теперь &lt;code&gt;undefined&lt;/code&gt; . Когда функция вызывалась с помощью &lt;code&gt;&lt;a href=&quot;../global_objects/function/call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; или &lt;code&gt;&lt;a href=&quot;../global_objects/function/apply&quot;&gt;apply&lt;/a&gt;&lt;/code&gt; , если значение было примитивным значением, это было помещено в объект (или глобальный объект для &lt;code&gt;undefined&lt;/code&gt; и &lt;code&gt;null&lt;/code&gt; ). В строгом режиме значение передается напрямую без преобразования или замены.</target>
        </trans-unit>
        <trans-unit id="bcb456854f7e12a1b6d3067042522e245c1c473c" translate="yes" xml:space="preserve">
          <source>In general, it is best not to add, modify, or remove properties from the object during iteration, other than the property currently being visited. There is no guarantee whether an added property will be visited, whether a modified property (other than the current one) will be visited before or after it is modified, or whether a deleted property will be visited before it is deleted.</source>
          <target state="translated">В общем,лучше не добавлять,не изменять и не удалять свойства из объекта во время итерации,кроме свойства,которое в данный момент посещается.Нет никакой гарантии,будет ли добавленное свойство посещено,будет ли измененное свойство (отличное от текущего)посещено до или после его изменения,или же удаленное свойство будет посещено до его удаления.</target>
        </trans-unit>
        <trans-unit id="a1736f0236423f733081a8390c0b2e0a21ffb4c0" translate="yes" xml:space="preserve">
          <source>In many engines &lt;code&gt;globalThis&lt;/code&gt; will be a reference to the actual global object, but in web browsers, due to iframe and cross-window security considerations, it references a &lt;a href=&quot;proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; around the actual global object (which you can't directly access). This distinction is rarely relevant in common usage, but important to be aware of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afde6863fc1a738ab65eba09c55d6be415dfebb" translate="yes" xml:space="preserve">
          <source>In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable this formatting by setting the &lt;code&gt;currencySign&lt;/code&gt; option to &quot;&lt;code&gt;accounting&lt;/code&gt;&quot;. The default value is &quot;&lt;code&gt;standard&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469cf6b2ef6e68adf3f920541f214faf833cd651" translate="yes" xml:space="preserve">
          <source>In math, you can write 2 &amp;times; (3 + 5) as 2*(3 + 5) or just 2(3 + 5).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4e3c69a66abeb7081b617a2e513e6ed402c377" translate="yes" xml:space="preserve">
          <source>In math, you can write 2 x (3 + 5) as 2*(3 + 5) or just 2(3 + 5). Using the latter will throw an error:</source>
          <target state="translated">В математике вы можете написать 2 x (3+5)как 2*(3+5)или просто 2(3+5).Использование последнего приведет к ошибке:</target>
        </trans-unit>
        <trans-unit id="15f72587f05206c7a8bbb329e12777545b394d35" translate="yes" xml:space="preserve">
          <source>In modern browsers (JavaScript 1.8.5 / Firefox 4+), &lt;code&gt;undefined&lt;/code&gt; is a non-configurable, non-writable property per the ECMAScript 5 specification. Even when this is not the case, avoid overriding it.</source>
          <target state="translated">В современных браузерах (JavaScript 1.8.5 / Firefox 4+) &lt;code&gt;undefined&lt;/code&gt; не является настраиваемым свойством без возможности записи в соответствии со спецификацией ECMAScript 5. Даже если это не так, не игнорируйте его.</target>
        </trans-unit>
        <trans-unit id="4e0d4934fe476d8eb4009f64ddad5959ccf4aadb" translate="yes" xml:space="preserve">
          <source>In modern browsers (JavaScript 1.8.5 / Firefox 4+), &lt;code&gt;undefined&lt;/code&gt; is a non-configurable, non-writable property, per the ECMAScript 5 specification. (Even when this is not the case, avoid overriding it.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6effb59d91f10a30d514644f887cd90896f02d7" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;String.raw()&lt;/code&gt; is used with template strings. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, (just like with other &lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;tag functions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a29654e172b7c9185515aad6d728b59b008dcd2" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;code&gt;String.raw()&lt;/code&gt; is used with template strings. The first syntax mentioned above is only rarely used, because the JavaScript engine will call this with proper arguments for you, just like with other &lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;tag functions&lt;/a&gt;.</source>
          <target state="translated">В большинстве случаев &lt;code&gt;String.raw()&lt;/code&gt; используется со строками шаблона. Первый синтаксис, упомянутый выше, используется редко, потому что движок JavaScript вызовет его с соответствующими аргументами, как и с другими &lt;a href=&quot;../../template_literals#Tagged_template_literals&quot;&gt;функциями тегов&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="eb884e7d7586dde23b9e701c398786a65a36db9b" translate="yes" xml:space="preserve">
          <source>In most cases, the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called (runtime binding). It can't be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt; method to &lt;a href=&quot;this#The_bind_method&quot;&gt;set the value of a function's &lt;code&gt;this&lt;/code&gt; regardless of how it's called&lt;/a&gt;, and ES2015 introduced &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; which don't provide their own &lt;code&gt;this&lt;/code&gt; binding (it retains the &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac60cdf424b99dce62b5701d4d143d86d375a54d" translate="yes" xml:space="preserve">
          <source>In most cases, the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called. It can't be set by assignment during execution, and it may be different each time the function is called. ES5 introduced the &lt;a href=&quot;../global_objects/function/bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt; method to &lt;a href=&quot;#The_bind_method&quot;&gt;set the value of a function's &lt;code&gt;this&lt;/code&gt; regardless of how it's called&lt;/a&gt;, and ES2015 introduced &lt;a href=&quot;../functions/arrow_functions&quot;&gt;arrow functions&lt;/a&gt; which don't provide their own &lt;code&gt;this&lt;/code&gt; binding (it retains the &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical context).</source>
          <target state="translated">В большинстве случаев значение &lt;code&gt;this&lt;/code&gt; определяется тем, как вызывается функция. Его нельзя установить путем присвоения во время выполнения, и он может отличаться при каждом вызове функции. ES5 представил метод &lt;a href=&quot;../global_objects/function/bind&quot;&gt; &lt;code&gt;bind()&lt;/code&gt; &lt;/a&gt; для &lt;a href=&quot;#The_bind_method&quot;&gt;установки значения функции &lt;code&gt;this&lt;/code&gt; независимо от того, как она&lt;/a&gt; вызывается, а ES2015 представил &lt;a href=&quot;../functions/arrow_functions&quot;&gt;стрелочные функции,&lt;/a&gt; которые не предоставляют свою собственную привязку &lt;code&gt;this&lt;/code&gt; (она сохраняет значение &lt;code&gt;this&lt;/code&gt; охватывающего лексического контекста).</target>
        </trans-unit>
        <trans-unit id="6d3bbd72aff7458ac96d23ca8ea12c673fb557f5" translate="yes" xml:space="preserve">
          <source>In most cases, using &lt;a href=&quot;rest_parameters&quot;&gt;rest parameters&lt;/a&gt; is a good alternative to using an &lt;code&gt;arguments&lt;/code&gt; object.</source>
          <target state="translated">В большинстве случаев использование &lt;a href=&quot;rest_parameters&quot;&gt;остальных параметров&lt;/a&gt; является хорошей альтернативой использованию объекта &lt;code&gt;arguments&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fc6c6c77ddc6a5c73413e02d1078992067d9c03" translate="yes" xml:space="preserve">
          <source>In most languages like PHP and Python and others that have an exponentiation operator (**), the exponentiation operator is defined to have a higher precedence than unary operators such as unary + and unary -, but there are a few exceptions. For example, in Bash the ** operator is defined to have a lower precedence than unary operators. In JavaScript, it is impossible to write an ambiguous exponentiation expression, i.e. you cannot put a unary operator (&lt;code&gt;+/-/~/!/delete/void/typeof&lt;/code&gt;) immediately before the base number.</source>
          <target state="translated">В большинстве языков, таких как PHP, Python и других, которые имеют оператор возведения в степень (**), оператор возведения в степень определяется как имеющий более высокий приоритет, чем унарные операторы, такие как унарный + и унарный -, но есть несколько исключений. Например, в Bash оператор ** имеет более низкий приоритет, чем унарные операторы. В JavaScript невозможно написать неоднозначное выражение возведения в степень, то есть нельзя поставить унарный оператор ( &lt;code&gt;+/-/~/!/delete/void/typeof&lt;/code&gt; ) непосредственно перед базовым числом.</target>
        </trans-unit>
        <trans-unit id="6d5c9eb07397ac19d66c304576f166f918d4ccd9" translate="yes" xml:space="preserve">
          <source>In most languages, such as PHP, Python, and others that have an exponentiation operator (&lt;code&gt;**&lt;/code&gt;), the exponentiation operator is defined to have a higher precedence than unary operators, such as unary &lt;code&gt;+&lt;/code&gt; and unary &lt;code&gt;-&lt;/code&gt;, but there are a few exceptions. For example, in Bash, the &lt;code&gt;**&lt;/code&gt; operator is defined to have a lower precedence than unary operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a5793df1225a02f211cbab4dd35b2dfa4aa24a" translate="yes" xml:space="preserve">
          <source>In non-strict code, function declarations inside blocks behave strangely. Do not use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1874ca4c77d194ed9a187f427ff439010d26be13" translate="yes" xml:space="preserve">
          <source>In non-strict code, function declarations inside blocks behave strangely. For example:</source>
          <target state="translated">В нестрочном коде декларации функций внутри блоков ведут себя странно.Например:</target>
        </trans-unit>
        <trans-unit id="860c9839372531fc54aae6d18e28914fe55a5604" translate="yes" xml:space="preserve">
          <source>In non-strict mode, modifying a value in the &lt;code&gt;arguments&lt;/code&gt; object modifies the corresponding named argument. This made optimizations complicated for JavaScript engine and made code harder to read/understand. In strict mode, the &lt;code&gt;arguments&lt;/code&gt; object is created and initialized with the same values than the named arguments, but changes to either the &lt;code&gt;arguments&lt;/code&gt; object or the named arguments aren't reflected in one another.</source>
          <target state="translated">В нестрогом режиме изменение значения в объекте &lt;code&gt;arguments&lt;/code&gt; изменяет соответствующий именованный аргумент. Это усложняло оптимизацию для движка JavaScript и затрудняло чтение / понимание кода. В строгом режиме объект &lt;code&gt;arguments&lt;/code&gt; создается и инициализируется теми же значениями, что и именованные аргументы, но изменения объекта &lt;code&gt;arguments&lt;/code&gt; или именованных аргументов не отражаются друг в друге.</target>
        </trans-unit>
        <trans-unit id="95aa3b03b2032d638c1633fec4e82b00ad7a1890" translate="yes" xml:space="preserve">
          <source>In non-strict, this would silently fail, in contradiction with the user expectation.</source>
          <target state="translated">В неограниченном режиме это беззвучно провалится,вопреки ожиданиям пользователя.</target>
        </trans-unit>
        <trans-unit id="cb7ee7b5cd4eb0f5efd8c7fee9d564b5efb524f6" translate="yes" xml:space="preserve">
          <source>In normal function calls (as opposed to constructor function calls), &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. This lets you detect if a function was called with &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; as a constructor.</source>
          <target state="translated">При обычных вызовах функций (в отличие от вызовов функций конструктора) &lt;code&gt;new.target&lt;/code&gt; не &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; . Это позволяет определить, вызывалась ли функция с помощью &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; в качестве конструктора.</target>
        </trans-unit>
        <trans-unit id="230572d6652702c77e4d55e58d676991394f1446" translate="yes" xml:space="preserve">
          <source>In normal function calls (as opposed to constructor function calls), &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;. This lets you detect whether a function was called with &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; as a constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a271923b767ecf71d00311996c399f935078d0" translate="yes" xml:space="preserve">
          <source>In older implementations, which ignore the &lt;code&gt;&lt;var&gt;locales&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;&lt;var&gt;options&lt;/var&gt;&lt;/code&gt; arguments, the locale used and the form of the string returned are entirely implementation-dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68eef8c5fb49c60634ed1d21df3a98ae0e0f974" translate="yes" xml:space="preserve">
          <source>In order to be &lt;strong&gt;iterable&lt;/strong&gt;, an object must implement the &lt;code&gt;@@iterator&lt;/code&gt; method, meaning that the object (or one of the objects up its &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;prototype chain&lt;/a&gt;) must have a property with a &lt;code&gt;@@iterator&lt;/code&gt; key which is available via constant &lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0eefb52bc8e7160456b7047e4f143d09203972a" translate="yes" xml:space="preserve">
          <source>In order to be &lt;strong&gt;iterable&lt;/strong&gt;, an object must implement the &lt;strong&gt;@@iterator&lt;/strong&gt; method, meaning that the object (or one of the objects up its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;prototype chain&lt;/a&gt;) must have a property with a &lt;strong&gt;@@iterator &lt;/strong&gt;key which is available via constant &lt;code&gt;&lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">Чтобы быть &lt;strong&gt;итеративным&lt;/strong&gt; , объект должен реализовывать метод &lt;strong&gt;@@ iterator&lt;/strong&gt; , что означает, что объект (или один из объектов в его &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;цепочке прототипов&lt;/a&gt; ) должен иметь свойство с ключом &lt;strong&gt;@@ итератора&lt;/strong&gt; , доступным через константу &lt;code&gt;&lt;a href=&quot;global_objects/symbol/iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2f6054beeb1ffdb7a5b2ec1e645efc7c30d6fb57" translate="yes" xml:space="preserve">
          <source>In order to be a valid Unicode locale identifier, a string must start with the language subtag. The main argument to the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor must be a valid Unicode locale identifier, so whenever the constructor is used, it must be passed an identifier with a language subtag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de074ed49182f2a1dc2aec280709fa9abad4868" translate="yes" xml:space="preserve">
          <source>In order to call a static method or property within another static method of the same class, you can use the &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862bd58d82c44825625f345f8000cff5f3f26277" translate="yes" xml:space="preserve">
          <source>In order to call a static method within another static method of the same class, you can use the &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="translated">Чтобы вызвать статический метод в другом статическом методе того же класса, вы можете использовать ключевое слово &lt;code&gt;&lt;a href=&quot;../operators/this&quot;&gt;this&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e455045de218103473f428d3071d54854bd467dc" translate="yes" xml:space="preserve">
          <source>In order to create and get dates between the years 0 and 99 the &lt;a href=&quot;date/setfullyear&quot;&gt;&lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/getfullyear&quot;&gt;&lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt;&lt;/a&gt; methods should be used.</source>
          <target state="translated">Для создания и получения дат между 0 и 99 &lt;a href=&quot;date/setfullyear&quot;&gt; &lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt; &lt;/a&gt; следует использовать методы Date.prototype.setFullYear () и &lt;a href=&quot;date/getfullyear&quot;&gt; &lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b7bdbb65503f173efe6d93b336bcc3c56478167b" translate="yes" xml:space="preserve">
          <source>In order to create and get dates between the years &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;99&lt;/code&gt; the &lt;a href=&quot;date/setfullyear&quot;&gt;&lt;code&gt;Date.prototype.setFullYear()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;date/getfullyear&quot;&gt;&lt;code&gt;Date.prototype.getFullYear()&lt;/code&gt;&lt;/a&gt; methods should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06ff19557c3cd24895157a5889dec3667d90b42" translate="yes" xml:space="preserve">
          <source>In order to embed expressions within normal strings, you would use the following syntax:</source>
          <target state="translated">Для встраивания выражений в нормальные строки вы будете использовать следующий синтаксис:</target>
        </trans-unit>
        <trans-unit id="261c57c7b8631ce4358a48ec7330061dc4f99420" translate="yes" xml:space="preserve">
          <source>In ordinary functions, it refers to the function itself, assuming it was invoked via the &lt;a href=&quot;new&quot;&gt;new&lt;/a&gt; operator; otherwise &lt;code&gt;new.target&lt;/code&gt; is &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30f8199b4dd458c0968198031c49f62bc167924" translate="yes" xml:space="preserve">
          <source>In our example above, the arrow function does not have its own &lt;code&gt;this&lt;/code&gt;. The &lt;code&gt;this&lt;/code&gt; value of the enclosing lexical &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt; is used; arrow functions follow the normal variable lookup rules. So while searching for &lt;code&gt;this&lt;/code&gt; which is not present in the current &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;, an arrow function ends up finding the &lt;code&gt;this&lt;/code&gt; from its enclosing &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/Scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa11c5c2db715285eac1e1df98254200504f278" translate="yes" xml:space="preserve">
          <source>In practice, it is often desirable to catch rejected promises rather than use &lt;code&gt;then&lt;/code&gt;'s two case syntax, as demonstrated below.</source>
          <target state="translated">На практике часто бывает желательно , чтобы поймать отклоненные обещания , а не использовать , &lt;code&gt;then&lt;/code&gt; &amp;laquo;s случай синтаксис два, как показано ниже.</target>
        </trans-unit>
        <trans-unit id="b5314d4403484a0b484bf7da0c5f2397cb2f703b" translate="yes" xml:space="preserve">
          <source>In some cases, calendars use named years. Chinese and Tibetan calendars, for example, use a 60-year &lt;a href=&quot;https://en.wikipedia.org/wiki/Sexagenary_cycle&quot;&gt;sexagenary cycle&lt;/a&gt; of named years. These years are disambiguated by relationship to corresponding years on the Gregorian calendar. When this is the case, the result of &lt;code&gt;formatToParts()&lt;/code&gt; will contain an entry for &lt;code&gt;relatedYear&lt;/code&gt; when a year would normally be present, containing the 4-digit Gregorian year, instead of an entry for &lt;code&gt;year&lt;/code&gt;. Setting an entry in the bag for &lt;code&gt;year&lt;/code&gt; (with any value) will yield both the and the &lt;code&gt;yearName&lt;/code&gt; Gregorian &lt;code&gt;relatedYear&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbd7dce6756453ed26553376d0427f3b5a41799" translate="yes" xml:space="preserve">
          <source>In some respects (such as sorting) they should be treated as equivalent&amp;mdash;and in some (such as visual appearance) they should not, so they are not canonically equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bd329bf1a6fca5cc1d9f8ca14653cea85fd687" translate="yes" xml:space="preserve">
          <source>In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there are too many function calls, or a function is missing a base case, JavaScript will throw this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc3359fcfde967d3f070026eabf07f701112c4c" translate="yes" xml:space="preserve">
          <source>In strict mode code, &lt;code&gt;eval&lt;/code&gt; doesn't create a new variable in the scope from which it was called. Also, of course, in strict mode, the string is evaluated with strict mode rules. Thorough testing will need to be performed to make sure nothing breaks. Not using eval if you don't really need it may be another pragmatic solution.</source>
          <target state="translated">В коде строгого режима &lt;code&gt;eval&lt;/code&gt; не создает новую переменную в области, из которой он был вызван. Также, конечно, в строгом режиме строка оценивается по правилам строгого режима. Необходимо будет провести тщательное тестирование, чтобы убедиться, что ничего не сломалось. Не использовать eval, если он вам действительно не нужен, это может быть еще одним прагматическим решением.</target>
        </trans-unit>
        <trans-unit id="c986ac9c061545ea61f73243c079a502c902273c" translate="yes" xml:space="preserve">
          <source>In strict mode code, more identifiers are reserved.</source>
          <target state="translated">В строгом коде режима зарезервировано больше идентификаторов.</target>
        </trans-unit>
        <trans-unit id="49d079a909161f0d359caa88bbeb2a5a566ff9a8" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;defineProperty()&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0305e05ae84323bdcca0727b14cfc634f066fb00" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;defineProperty&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">В строгом режиме, &lt;code&gt;false&lt;/code&gt; значение , возвращаемое из &lt;code&gt;defineProperty&lt;/code&gt; обработчика выбросит &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; исключение.</target>
        </trans-unit>
        <trans-unit id="3c2feb1056dffcf47d947141322a5d14d785d80d" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;set()&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d09582a0bc85e38ae88283afb2b5fcbd5053155" translate="yes" xml:space="preserve">
          <source>In strict mode, a &lt;code&gt;false&lt;/code&gt; return value from the &lt;code&gt;set&lt;/code&gt; handler will throw a &lt;a href=&quot;../../typeerror&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">В строгом режиме &lt;code&gt;false&lt;/code&gt; возвращаемое значение из обработчика &lt;code&gt;set&lt;/code&gt; вызовет исключение &lt;a href=&quot;../../typeerror&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6b6d02975bb8de9c2d2b0b5332c5792b28df3140" translate="yes" xml:space="preserve">
          <source>In strict mode, however, if the value of &lt;code&gt;this&lt;/code&gt; is not set when entering an execution context, it remains as &lt;code&gt;undefined&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4bd884970a79efd62e157b542fb73cb029e026" translate="yes" xml:space="preserve">
          <source>In strict mode, however, the value of &lt;code&gt;this&lt;/code&gt; remains at whatever it was set to when entering the execution context, so, in the following case, &lt;code&gt;this&lt;/code&gt;will default to &lt;code&gt;undefined&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">В строгом режиме, однако, значение &lt;code&gt;this&lt;/code&gt; остается на то , что он был установлен при входе в контекст выполнения, поэтому, в следующем случае, &lt;code&gt;this&lt;/code&gt; будет по умолчанию &lt;code&gt;undefined&lt;/code&gt; &lt;strong&gt;:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5edd29a28bbd08562217025986be25352d683242" translate="yes" xml:space="preserve">
          <source>In strict mode, this would have raised an exception.</source>
          <target state="translated">В строгом режиме это вызвало бы исключение.</target>
        </trans-unit>
        <trans-unit id="d019380674a16813ef94c54a0d343b4618bc0042" translate="yes" xml:space="preserve">
          <source>In strict-mode code, the &lt;code&gt;arguments&lt;/code&gt; object behaves the same whether or not a function is passed rest, default, or destructured parameters. That is, assigning new values to variables in the body of the function will not affect the &lt;code&gt;arguments&lt;/code&gt; object. Nor will assigning new variables to the &lt;code&gt;arguments&lt;/code&gt; object affect the value of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ba434dcfc26a308be81afbb8f480fb122aa093" translate="yes" xml:space="preserve">
          <source>In that very line, the &lt;u&gt;if block's &quot;foo&quot;&lt;/u&gt; has already been created in the lexical environment, but has not yet reached (and &lt;strong&gt;terminated&lt;/strong&gt;) its initialization (which is part of the statement itself): it's still in the temporal dead zone.</source>
          <target state="translated">В этой самой строке &lt;u&gt;блок if &amp;laquo;foo&amp;raquo;&lt;/u&gt; уже был создан в лексической среде, но еще не достиг (и не &lt;strong&gt;завершил&lt;/strong&gt; ) свою инициализацию (которая является частью самого оператора): он все еще находится во временной мертвой зоне.</target>
        </trans-unit>
        <trans-unit id="344dc469ad2fb516272004fea64179e2bc4964ae" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey&quot;&gt;SpiderMonkey&lt;/a&gt; JavaScript engine, this string would be &quot;&lt;code&gt;[object Object]&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f01b7df0e94b2c5a699d1fecf9f8ddd43527537" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://www.unicode.org/reports/tr35/&quot;&gt;Unicode locale string spec&lt;/a&gt;, collation types are locale key &quot;extension subtags&quot;. These subtags add additional data about the locale, and are added to locale identifiers by using the &lt;code&gt;-u&lt;/code&gt; extension. Thus, the collation type can be added to the inital locale identifier string that is passed into the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor. To add the collation type, first add the &lt;code&gt;-u&lt;/code&gt; extension to the string. Next, add the &lt;code&gt;-co&lt;/code&gt; extension to indicate that you are adding a collation type. Finally, add the collation to the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d189429b0f687a4f0e5ff4660d7b92375acaac" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://www.unicode.org/reports/tr35/&quot;&gt;Unicode locale string spec&lt;/a&gt;, the hour cycle is a locale string &quot;extension subtag&quot;. These subtags add additional data about the locale, and are added to locale identifiers by using the &lt;code&gt;-u&lt;/code&gt; extension key. Thus, the hour cycle type can be added to the inital locale identifier string that is passed into the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor. To add the hour cycle type, first add the &lt;code&gt;-u&lt;/code&gt; extension key to the string. Next, add the &lt;code&gt;-hc&lt;/code&gt; extension key to indicate that you are adding an hour cycle. Finally, add the hour cycle type to the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ad45086ef7a69452ca7d46cab9920270569daf" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://www.unicode.org/reports/tr35/&quot;&gt;Unicode locale string spec&lt;/a&gt;, the values that &lt;code&gt;caseFirst&lt;/code&gt; represents correspond to the key &lt;code&gt;kf&lt;/code&gt;. &lt;code&gt;kf&lt;/code&gt; is treated as a locale string &quot;extension subtag&quot;. These subtags add additional data about the locale, and are added to locale identifiers by using the &lt;code&gt;-u&lt;/code&gt; extension key. Thus, the &lt;code&gt;caseFirst&lt;/code&gt; value can be added to the inital locale identifier string that is passed into the &lt;code&gt;Locale&lt;/code&gt; constructor. To add the &lt;code&gt;caseFirst&lt;/code&gt; value, first add the &lt;code&gt;-u&lt;/code&gt; extension key to the string. Next, add the &lt;code&gt;-kf&lt;/code&gt; extension key to indicate that you are adding a value for &lt;code&gt;caseFirst&lt;/code&gt;. Finally, add the &lt;code&gt;caseFirst&lt;/code&gt; value to the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28917499e1bb33c1d7b116bc6054d0eaaf2e651" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://www.unicode.org/reports/tr35/&quot;&gt;Unicode locale string spec&lt;/a&gt;, the values that &lt;code&gt;numberingSystem&lt;/code&gt; represents correspond to the key &lt;code&gt;nu&lt;/code&gt;. &lt;code&gt;nu&lt;/code&gt; is considered a locale string &quot;extension subtag&quot;. These subtags add additional data about the locale, and are added to locale identifiers by first adding the &lt;code&gt;-u&lt;/code&gt; key. To set the &lt;code&gt;numberingSystem&lt;/code&gt; value via the string argument to the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor, first add the &lt;code&gt;-u&lt;/code&gt; extension key. Next, add the &lt;code&gt;-nu&lt;/code&gt; extension key to indicate that you are adding a value for &lt;code&gt;numberingSystem&lt;/code&gt;. Finally, add the &lt;code&gt;numberingSystem&lt;/code&gt; value to the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ebc2cb79884d71926e58bf751c5b3a9b2f83c" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://www.unicode.org/reports/tr35/&quot;&gt;Unicode locale string spec&lt;/a&gt;, the values that &lt;code&gt;numeric&lt;/code&gt; represents correspond to the key &lt;code&gt;kn&lt;/code&gt;. &lt;code&gt;kn&lt;/code&gt; is considered a locale string &quot;extension subtag&quot;. These subtags add additional data about the locale, and are added to locale identifiers by using the &lt;code&gt;-u&lt;/code&gt; extension key. Thus, the &lt;code&gt;numeric&lt;/code&gt; value can be added to the inital locale identifier string that is passed into the &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; constructor. To set the &lt;code&gt;numeric&lt;/code&gt; value, first add the &lt;code&gt;-u&lt;/code&gt; extension key to the string. Next, add the &lt;code&gt;-kn&lt;/code&gt; extension key to indicate that you are adding a value for &lt;code&gt;numeric&lt;/code&gt;. Finally, add the &lt;code&gt;numeric&lt;/code&gt; value to the string. If you want to set &lt;code&gt;numeric&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, simply adding the &lt;code&gt;kn&lt;/code&gt; key will suffice. To set the value to &lt;code&gt;false&lt;/code&gt;, you must specify in by adding &quot;&lt;code&gt;false&lt;/code&gt;&quot; after the &lt;code&gt;kn&lt;/code&gt; key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc766e1776bb917de6591132669602b3df9697de" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;3d&lt;/code&gt; example, &lt;code&gt;'3d'&lt;/code&gt;&lt;em&gt;had &lt;/em&gt;to be quoted (because it begins with a digit). But it's also possible to quote the array indexes as well (e.g., &lt;code&gt;years['2']&lt;/code&gt; instead of &lt;code&gt;years[2]&lt;/code&gt;), although it's not necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb123889f9c99fb835bcc26628fcbd3f7f67f01" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;&lt;var&gt;object.property&lt;/var&gt;&lt;/code&gt; syntax, the &lt;code&gt;property&lt;/code&gt; must be a valid JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/identifier&quot;&gt;identifier&lt;/a&gt;. (In the ECMAScript standard, the names of properties are technically &quot;IdentifierNames&quot;, not &quot;Identifiers&quot;, so reserved words can be used but are not recommended). For example, &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.$1&lt;/code&gt; is valid, while &lt;code&gt;&lt;var&gt;object&lt;/var&gt;.1&lt;/code&gt; is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc2a210be3838d3448081d22f4b72f5712e5f4a" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;if&lt;/code&gt; statement, you want to use a comparison operator (&quot;==&quot;), and for the string concatenation, the plus (&quot;+&quot;) operator is needed.</source>
          <target state="translated">В операторе &lt;code&gt;if&lt;/code&gt; вы хотите использовать оператор сравнения (&quot;==&quot;), а для конкатенации строк необходим оператор плюс (&quot;+&quot;).</target>
        </trans-unit>
        <trans-unit id="bc49181d6c445c536525c61ec569330429a69827" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;object[property_name]&lt;/code&gt; syntax, the &lt;code&gt;&lt;var&gt;property_name&lt;/var&gt;&lt;/code&gt; is just a string or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Symbol&quot;&gt;Symbol&lt;/a&gt;. So, it can be any string, including &lt;code&gt;'1foo'&lt;/code&gt;, &lt;code&gt;'!bar!'&lt;/code&gt;, or even &lt;code&gt;' '&lt;/code&gt; (a space).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504e2effa4c01ce2afda7c35aaa16e32fcaa9400" translate="yes" xml:space="preserve">
          <source>In the JavaScript reference you can find the following chapters:</source>
          <target state="translated">Ссылка на JavaScript приведена в следующих главах:</target>
        </trans-unit>
        <trans-unit id="f9ebab3674334dea74506ab92354e81bf49a5348" translate="yes" xml:space="preserve">
          <source>In the above example, notice there is no &lt;code&gt;await&lt;/code&gt; statement after the &lt;code&gt;return&lt;/code&gt; keyword, although that would be valid too: The return value of an &lt;code&gt;async function&lt;/code&gt; is implicitly wrapped in &lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;&lt;code&gt;Promise.resolve&lt;/code&gt;&lt;/a&gt; - if it's not already a promise itself (as in this example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b25d369879120965a73c97bd3bb3c4bc0dcba2" translate="yes" xml:space="preserve">
          <source>In the above example, the spread syntax does not work as one might expect: it spreads an &lt;em&gt;array&lt;/em&gt; of arguments into the object literal, due to the rest parameter.</source>
          <target state="translated">В приведенном выше примере синтаксис распространения не работает так, как можно было бы ожидать: он распространяет &lt;em&gt;массив&lt;/em&gt; аргументов в литерал объекта из-за параметра rest.</target>
        </trans-unit>
        <trans-unit id="639bc8814e61c3ad66222c2a753077d09d6095ed" translate="yes" xml:space="preserve">
          <source>In the above polyfill, no extra type-coercing is needed to make &lt;code&gt;(x &amp;gt; 0) or&amp;nbsp;(x &amp;lt; 0)&lt;/code&gt; numbers because subtracting them from each other forces a type conversion from boolean to numbers.</source>
          <target state="translated">В приведенном выше полифилле не требуется дополнительного приведения типов для создания чисел &lt;code&gt;(x &amp;gt; 0) or&amp;nbsp;(x &amp;lt; 0)&lt;/code&gt; потому что вычитание их друг из друга приводит к преобразованию типа из логического в числа.</target>
        </trans-unit>
        <trans-unit id="97c92f0acdf5c43d4bf308a9791b1d873616af45" translate="yes" xml:space="preserve">
          <source>In the above polyfill, no extra type-coercing is needed to make &lt;code&gt;(x &amp;gt; 0)&lt;/code&gt; or &lt;code&gt;(x &amp;lt; 0)&lt;/code&gt; numbers because subtracting them from each other forces a type conversion from booleans to numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3320efd6ed4bd76923685057972479f17a63057a" translate="yes" xml:space="preserve">
          <source>In the above, the function (call it anonymous function A) assigned to &lt;code&gt;obj.bar&lt;/code&gt; returns another function (call it anonymous function B) that is created as an arrow function. As a result, function B's &lt;code&gt;this&lt;/code&gt; is permanently set to the &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;obj.bar&lt;/code&gt; (function A) when called. When the returned function (function B) is called, its &lt;code&gt;this&lt;/code&gt; will always be what it was set to initially. In the above code example, function B's &lt;code&gt;this&lt;/code&gt; is set to function A's &lt;code&gt;this&lt;/code&gt; which is &lt;code&gt;obj&lt;/code&gt;, so it remains set to &lt;code&gt;obj&lt;/code&gt; even when called in a manner that would normally set its &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; or the global object (or any other method as in the previous example in the global execution context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62bdda2e0a21fb28a7f5675957c393b044577a67" translate="yes" xml:space="preserve">
          <source>In the above, the function(call it anonymous function A) assigned to &lt;code&gt;obj.bar&lt;/code&gt; returns another function(call it anonymous function B) that is created as an arrow function. As a result, function B's &lt;code&gt;this&lt;/code&gt; is permanently set to the &lt;code&gt;this&lt;/code&gt; of &lt;code&gt;obj.bar&lt;/code&gt; (function A)when called. When the returned function(function B) is called, its &lt;code&gt;this&lt;/code&gt; will always be what it was set to initially. In the above code example, function B's &lt;code&gt;this&lt;/code&gt; is set to function A's &lt;code&gt;this&lt;/code&gt; which is obj, so it remains set to &lt;code&gt;obj&lt;/code&gt; even when called in a manner that would normally set its &lt;code&gt;this&lt;/code&gt; to &lt;code&gt;undefined&lt;/code&gt; or the global object (or any other method as in the previous example in the global execution context).</source>
          <target state="translated">В приведенном выше &lt;code&gt;obj.bar&lt;/code&gt; функция (назовите ее анонимной функцией A), назначенная obj.bar, возвращает другую функцию (назовите ее анонимной функцией B), которая создается как функция стрелки. В результате, функция В этом &lt;code&gt;this&lt;/code&gt; постоянно установлено на &lt;code&gt;this&lt;/code&gt; из &lt;code&gt;obj.bar&lt;/code&gt; (функция A) при вызове. Когда вызывается возвращенная функция (функция B), &lt;code&gt;this&lt;/code&gt; всегда будет то, что было установлено изначально. В приведенном выше примере кода функция B &lt;code&gt;this&lt;/code&gt; установлена ​​на функцию A &lt;code&gt;this&lt;/code&gt; , которая является obj, поэтому она остается установленной на &lt;code&gt;obj&lt;/code&gt; даже при вызове способом, который обычно устанавливает для &lt;code&gt;this&lt;/code&gt; значение &lt;code&gt;undefined&lt;/code&gt; или глобальный объект (или любой другой метод, как в предыдущем примере в глобальном контексте выполнения).</target>
        </trans-unit>
        <trans-unit id="42d2f894ef11d503ede81ebcedd96f07d7f0fab6" translate="yes" xml:space="preserve">
          <source>In the case of recursion, i.e. if function &lt;code&gt;f&lt;/code&gt; appears several times on the call stack, the value of &lt;code&gt;f.arguments&lt;/code&gt; represents the arguments corresponding to the most recent invocation of the function.</source>
          <target state="translated">В случае рекурсии, т. &lt;code&gt;f.arguments&lt;/code&gt; Если функция &lt;code&gt;f&lt;/code&gt; появляется несколько раз в стеке вызовов, значение f.arguments представляет аргументы, соответствующие самому последнему вызову функции.</target>
        </trans-unit>
        <trans-unit id="661fd464b4a2050134037311daed90c57e20fd0a" translate="yes" xml:space="preserve">
          <source>In the current ECMAScript specification, &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are considered equal, although this was not so in earlier drafts. See &lt;em&gt;&quot;Value equality for -0 and 0&quot;&lt;/em&gt; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;Browser compatibility&lt;/a&gt; table for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de188306b04f104700fac924cdd1e9567febef02" translate="yes" xml:space="preserve">
          <source>In the example above the exception will be shown since constructor links to Parent.</source>
          <target state="translated">В приведенном выше примере будет показано исключение,так как конструктор ссылается на Parent.</target>
        </trans-unit>
        <trans-unit id="acef3bf46acb0ba10cb256e32b5f0d0bb458c455" translate="yes" xml:space="preserve">
          <source>In the example above the exception will be shown since the constructor links to Parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8390434acf6607f1bb47c24b30e5f18f5b3f46" translate="yes" xml:space="preserve">
          <source>In the example below, we invoke the &lt;code&gt;display&lt;/code&gt; function without passing the first argument. If the first argument is not passed, the value of &lt;code&gt;this&lt;/code&gt; is bound to the global object.</source>
          <target state="translated">В приведенном ниже примере мы вызываем функцию &lt;code&gt;display&lt;/code&gt; без передачи первого аргумента. Если первый аргумент не передан, значение &lt;code&gt;this&lt;/code&gt; привязывается к глобальному объекту.</target>
        </trans-unit>
        <trans-unit id="0c4da435fcb2e56dfca1fdbb66425c53d9f93888" translate="yes" xml:space="preserve">
          <source>In the example below, when we call &lt;code&gt;greet&lt;/code&gt;, the value of &lt;code&gt;this&lt;/code&gt; will be bound to object &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">В приведенном ниже примере, когда мы вызываем &lt;code&gt;greet&lt;/code&gt; , значение &lt;code&gt;this&lt;/code&gt; будет привязано к объекту &lt;code&gt;obj&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c878dda71bd4d57212f4760d1a5d6612fffe1a77" translate="yes" xml:space="preserve">
          <source>In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was 0. &lt;code&gt;null&lt;/code&gt; was represented as the NULL pointer (0x00 in most platforms). Consequently, null had 0 as type tag, hence the bogus &lt;code&gt;typeof&lt;/code&gt; return value. (&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;reference&lt;/a&gt;)</source>
          <target state="translated">В первой реализации JavaScript значения JavaScript были представлены как тег типа и значение. Тег типа для объектов был 0. &lt;code&gt;null&lt;/code&gt; был представлен как указатель NULL (0x00 на большинстве платформ). Следовательно, у null был 0 как тег типа, отсюда и возвращаемое значение фиктивного &lt;code&gt;typeof&lt;/code&gt; . ( &lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;ссылка&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="857eee85d465027bf36c77ed510b6ca131138764" translate="yes" xml:space="preserve">
          <source>In the first implementation of JavaScript, JavaScript values were represented as a type tag and a value. The type tag for objects was &lt;code&gt;0&lt;/code&gt;. &lt;code&gt;null&lt;/code&gt; was represented as the NULL pointer (&lt;code&gt;0x00&lt;/code&gt; in most platforms). Consequently, &lt;code&gt;null&lt;/code&gt; had &lt;code&gt;0&lt;/code&gt; as type tag, hence the &lt;code&gt;&quot;object&quot;&lt;/code&gt;&lt;code&gt;typeof&lt;/code&gt; return value. (&lt;a href=&quot;http://www.2ality.com/2013/10/typeof-null.html&quot;&gt;reference&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c1b2e168bd2c3f0960e008564fab4afcfb0149" translate="yes" xml:space="preserve">
          <source>In the following code, &lt;code&gt;flag.toString()&lt;/code&gt; returns &quot;&lt;code&gt;true&lt;/code&gt;&quot;:</source>
          <target state="translated">В следующем коде &lt;code&gt;flag.toString()&lt;/code&gt; возвращает &amp;laquo; &lt;code&gt;true&lt;/code&gt; &amp;raquo;:</target>
        </trans-unit>
        <trans-unit id="326dc4a22d6e5d66e05e913ed076ab8871545c67" translate="yes" xml:space="preserve">
          <source>In the following code, both of the statements containing &lt;code&gt;eval()&lt;/code&gt; return 42. The first evaluates the string &quot;&lt;code&gt;x + y + 1&lt;/code&gt;&quot;; the second evaluates the string &quot;&lt;code&gt;42&lt;/code&gt;&quot;.</source>
          <target state="translated">В следующем коде оба оператора, содержащие &lt;code&gt;eval()&lt;/code&gt; возвращают 42. Первый вычисляет строку &amp;laquo; &lt;code&gt;x + y + 1&lt;/code&gt; &amp;raquo;; второй оценивает строку &amp;laquo; &lt;code&gt;42&lt;/code&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="7227f231dba8b388ff90697deb637f835c642754" translate="yes" xml:space="preserve">
          <source>In the following example we will create a global &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; method called &lt;code&gt;construct&lt;/code&gt;, which will enable you to use an array-like object with a constructor instead of an arguments list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccaa53cc09c2b150a701f3de632d7c64e3076c6" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;match()&lt;/code&gt; is used to find '&lt;code&gt;Chapter&lt;/code&gt;' followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551908074dab38737ca378f22dc2a0152b483db4" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;match()&lt;/code&gt; is used to find &lt;code&gt;'Chapter'&lt;/code&gt; followed by 1 or more numeric characters followed by a decimal point and numeric character 0 or more times. The regular expression includes the &lt;code&gt;i&lt;/code&gt; flag so that upper/lower case differences will be ignored.</source>
          <target state="translated">В следующем примере &lt;code&gt;match()&lt;/code&gt; используется для поиска &lt;code&gt;'Chapter'&lt;/code&gt; за которой следует 1 или несколько числовых символов, за которыми следует десятичная точка и числовой символ 0 или более раз. Регулярное выражение включает флаг &lt;code&gt;i&lt;/code&gt; , поэтому различия в верхнем и нижнем регистре игнорируются.</target>
        </trans-unit>
        <trans-unit id="3a1da1e1b8bfab54b105a4ada0152c93b74660c6" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;slice&lt;/code&gt; creates a new array, &lt;code&gt;newCar&lt;/code&gt;, from &lt;code&gt;myCar&lt;/code&gt;. Both include a reference to the object &lt;code&gt;myHonda&lt;/code&gt;. When the color of &lt;code&gt;myHonda&lt;/code&gt; is changed to purple, both arrays reflect the change.</source>
          <target state="translated">В следующем примере &lt;code&gt;slice&lt;/code&gt; создает новый массив &lt;code&gt;newCar&lt;/code&gt; из &lt;code&gt;myCar&lt;/code&gt; . Оба содержат ссылку на объект &lt;code&gt;myHonda&lt;/code&gt; . Когда цвет &lt;code&gt;myHonda&lt;/code&gt; изменяется на фиолетовый, оба массива отражают это изменение.</target>
        </trans-unit>
        <trans-unit id="b027578ad80c9e8c2b2c3dd35b71ae535a33dd33" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for 0 or more spaces followed by a semicolon followed by 0 or more spaces and, when found, removes the spaces and the semicolon from the string. &lt;code&gt;nameList&lt;/code&gt; is the array returned as a result of &lt;code&gt;split()&lt;/code&gt;.</source>
          <target state="translated">В следующем примере &lt;code&gt;split()&lt;/code&gt; ищет 0 или более пробелов, за которыми следует точка с запятой, за которой следует 0 или более пробелов, и при обнаружении удаляет пробелы и точку с запятой из строки. &lt;code&gt;nameList&lt;/code&gt; - это массив, возвращаемый в результате &lt;code&gt;split()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5c2e6d8d45fd169d7a77ecae81e085840f806133" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for spaces in a string and returns the first 3 splits that it finds.</source>
          <target state="translated">В следующем примере &lt;code&gt;split()&lt;/code&gt; ищет пробелы в строке и возвращает первые 3 найденных разбиения.</target>
        </trans-unit>
        <trans-unit id="2489eb3658fe2037e9cdda5effddf0b3a84f250d" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;split()&lt;/code&gt; looks for zero or more spaces, followed by a semicolon, followed by zero or more spaces&amp;mdash;and, when found, removes the spaces and the semicolon from the string. &lt;code&gt;nameList&lt;/code&gt; is the array returned as a result of &lt;code&gt;split()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb536da7c5287e832a975ca6e887bf6be2e7026" translate="yes" xml:space="preserve">
          <source>In the following example, a statement labeled &lt;code&gt;checkiandj&lt;/code&gt; contains a statement labeled &lt;code&gt;checkj&lt;/code&gt;. If &lt;code&gt;continue&lt;/code&gt; is encountered, the program continues at the top of the &lt;code&gt;checkj&lt;/code&gt; statement. Each time &lt;code&gt;continue&lt;/code&gt; is encountered, &lt;code&gt;checkj&lt;/code&gt; reiterates until its condition returns false. When false is returned, the remainder of the &lt;code&gt;checkiandj&lt;/code&gt; statement is completed.</source>
          <target state="translated">В следующем примере оператор с меткой &lt;code&gt;checkiandj&lt;/code&gt; содержит оператор с меткой &lt;code&gt;checkj&lt;/code&gt; . Если встречается &lt;code&gt;continue&lt;/code&gt; , программа продолжается с начала оператора &lt;code&gt;checkj&lt;/code&gt; . Каждый раз , по- &lt;code&gt;continue&lt;/code&gt; не встречается, &lt;code&gt;checkj&lt;/code&gt; повторяет , пока его состояние возвращает ложь. Когда возвращается false, завершается оставшаяся часть оператора &lt;code&gt;checkiandj&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0b489dc35a2ac4c8c478d127272578dceb8f8cdb" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &quot;Bananas&quot;, the program matches the value with case &quot;Bananas&quot; and executes the associated statement. When &lt;code&gt;break&lt;/code&gt; is encountered, the program breaks out of &lt;code&gt;switch&lt;/code&gt; and executes the statement following &lt;code&gt;switch&lt;/code&gt;. If &lt;code&gt;break&lt;/code&gt; were omitted, the statement for case &quot;Cherries&quot; would also be executed.</source>
          <target state="translated">В следующем примере, если &lt;code&gt;expr&lt;/code&gt; оценивается как &amp;laquo;Bananas&amp;raquo;, программа сопоставляет значение с case &amp;laquo;Bananas&amp;raquo; и выполняет связанный оператор. Когда встречается &lt;code&gt;break&lt;/code&gt; , программа прерывается из &lt;code&gt;switch&lt;/code&gt; и выполняет оператор, следующий за &lt;code&gt;switch&lt;/code&gt; . Если бы &lt;code&gt;break&lt;/code&gt; был опущен, оператор для case &quot;Cherries&quot; также был бы выполнен.</target>
        </trans-unit>
        <trans-unit id="96f6335874bf336b7e951fdce7655cff74fd7933" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &quot;Oranges&quot; or &quot;Apples&quot;, the program matches the values with either the case &quot;Oranges&quot; or &quot;Apples&quot; and executes the corresponding statement. The &lt;code&gt;default&lt;/code&gt; keyword will help in any other case and executes the associated statement.</source>
          <target state="translated">В следующем примере, если &lt;code&gt;expr&lt;/code&gt; оценивается как &amp;laquo;Апельсины&amp;raquo; или &amp;laquo;Яблоки&amp;raquo;, программа сопоставляет значения с регистром &amp;laquo;Апельсины&amp;raquo; или &amp;laquo;Яблоки&amp;raquo; и выполняет соответствующий оператор. &lt;code&gt;default&lt;/code&gt; ключевое слово будет помогать в любом другом случае , и выполняет связанный с ним оператор.</target>
        </trans-unit>
        <trans-unit id="8237fe8e3542597e9f1b9aab949f95c7735fe5b9" translate="yes" xml:space="preserve">
          <source>In the following example, if &lt;code&gt;expr&lt;/code&gt; evaluates to &lt;code&gt;Bananas&lt;/code&gt;, the program matches the value with case &lt;code&gt;case 'Bananas'&lt;/code&gt; and executes the associated statement. When &lt;code&gt;break&lt;/code&gt; is encountered, the program breaks out of &lt;code&gt;switch&lt;/code&gt; and executes the statement following &lt;code&gt;switch&lt;/code&gt;. If &lt;code&gt;break&lt;/code&gt; were omitted, the statement for the &lt;code&gt;case 'Cherries'&lt;/code&gt; would also be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f90002f54cb6c6ac4fe50fef20e7a2668d7f3de" translate="yes" xml:space="preserve">
          <source>In the following example, if no value is provided for &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; when &lt;code&gt;multiply&lt;/code&gt; is called, &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt;'s value would be &lt;code&gt;undefined&lt;/code&gt; when evaluating &lt;code&gt;&lt;var&gt;a&lt;/var&gt; * &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; would return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ddded5321b57a0d866951feace6e4cea99bc3c" translate="yes" xml:space="preserve">
          <source>In the following example, if no value is provided for &lt;code&gt;b&lt;/code&gt; when &lt;code&gt;multiply&lt;/code&gt; is called, &lt;code&gt;b&lt;/code&gt;&amp;rsquo;s value would be &lt;code&gt;undefined&lt;/code&gt; when evaluating &lt;code&gt;a * b&lt;/code&gt; and &lt;code&gt;multiply&lt;/code&gt; would return &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">В следующем примере, если значение не предусмотрено &lt;code&gt;b&lt;/code&gt; , когда &lt;code&gt;multiply&lt;/code&gt; вызывается, &lt;code&gt;b&lt;/code&gt; значение &amp;laquo;s будет &lt;code&gt;undefined&lt;/code&gt; при оценке &lt;code&gt;a * b&lt;/code&gt; и &lt;code&gt;multiply&lt;/code&gt; вернется &lt;code&gt;NaN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9742f1b1d9915daea9f896ab1adc27f1b391e232" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;do...while&lt;/code&gt; loop iterates at least once and reiterates until &lt;code&gt;i&lt;/code&gt; is no longer less than 5.</source>
          <target state="translated">В следующем примере цикл &lt;code&gt;do...while&lt;/code&gt; while повторяется как минимум один раз и повторяется до тех пор, пока &lt;code&gt;i&lt;/code&gt; не станет меньше 5.</target>
        </trans-unit>
        <trans-unit id="290da318e59120487518c92d769cd84cc341a64b" translate="yes" xml:space="preserve">
          <source>In the following example, the array &lt;code&gt;numbers&lt;/code&gt; is iterated through by looking at the &lt;code&gt;length&lt;/code&gt; property. The value in each element is then doubled.</source>
          <target state="translated">В следующем примере &lt;code&gt;numbers&lt;/code&gt; массива перебираются путем просмотра свойства &lt;code&gt;length&lt;/code&gt; . Затем значение каждого элемента удваивается.</target>
        </trans-unit>
        <trans-unit id="3e970986a7e8da7faf5f169eb8ef1a860c621631" translate="yes" xml:space="preserve">
          <source>In the following example, the constructor for the &lt;code&gt;Product&lt;/code&gt; object is defined with two parameters: &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c716507b55f4e7d36a7bf5bbf5705d645b4cfbd" translate="yes" xml:space="preserve">
          <source>In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally the value gets returned.</source>
          <target state="translated">В следующем примере объект имеет в качестве собственного свойства геттер.При получении свойства,оно удаляется из объекта и добавляется заново,но на этот раз неявно как свойство данных.Наконец,возвращается значение.</target>
        </trans-unit>
        <trans-unit id="948e31f9a2ae361570277883f29ebf342acf68b5" translate="yes" xml:space="preserve">
          <source>In the following example, the object has a getter as its own property. On getting the property, the property is removed from the object and re-added, but implicitly as a data property this time. Finally, the value gets returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63491fcad57234202d5746abce8c2f912c702dac" translate="yes" xml:space="preserve">
          <source>In the following example, the regular expression is defined in &lt;code&gt;replace()&lt;/code&gt; and includes the ignore case flag.</source>
          <target state="translated">В следующем примере регулярное выражение определяется в &lt;code&gt;replace()&lt;/code&gt; и включает флаг игнорирования регистра.</target>
        </trans-unit>
        <trans-unit id="e10c0f043f02b2123d978ede8da98693e4584598" translate="yes" xml:space="preserve">
          <source>In the following example, the usage is probably not intentional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3a594f9a72b0094faccc4763da19747b8d1679" translate="yes" xml:space="preserve">
          <source>In the following example, the variable &lt;code&gt;bigNumber&lt;/code&gt; is assigned a value that is larger than the maximum value. When the &lt;a href=&quot;../../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement executes, &lt;code&gt;bigNumber&lt;/code&gt; has the value &lt;code&gt;Infinity&lt;/code&gt;, so &lt;code&gt;bigNumber&lt;/code&gt; is set to a more manageable value before continuing.</source>
          <target state="translated">В следующем примере переменной &lt;code&gt;bigNumber&lt;/code&gt; присваивается значение, превышающее максимальное значение. Когда выполняется инструкция &lt;a href=&quot;../../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;bigNumber&lt;/code&gt; имеет значение &lt;code&gt;Infinity&lt;/code&gt; , поэтому для &lt;code&gt;bigNumber&lt;/code&gt; устанавливается более управляемое значение перед продолжением.</target>
        </trans-unit>
        <trans-unit id="a0d991c308ff8ad2345c76fb15afab7a3798cf66" translate="yes" xml:space="preserve">
          <source>In the following example, the variable &lt;code&gt;smallNumber&lt;/code&gt; is assigned a value that is smaller than the minimum value. When the &lt;a href=&quot;../../statements/if...else&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; statement executes, &lt;code&gt;smallNumber&lt;/code&gt; has the value &lt;code&gt;-Infinity&lt;/code&gt;, so &lt;code&gt;smallNumber&lt;/code&gt; is set to a more manageable value before continuing.</source>
          <target state="translated">В следующем примере переменной &lt;code&gt;smallNumber&lt;/code&gt; присваивается значение, меньшее минимального значения. Когда выполняется инструкция &lt;a href=&quot;../../statements/if...else&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;smallNumber&lt;/code&gt; имеет значение &lt;code&gt;-Infinity&lt;/code&gt; , поэтому для &lt;code&gt;smallNumber&lt;/code&gt; устанавливается более управляемое значение перед продолжением.</target>
        </trans-unit>
        <trans-unit id="d0bdf3814229a99d3d55903e9dbbccafa691e79d" translate="yes" xml:space="preserve">
          <source>In the following example, we delete an own property of an object while a property with the same name is available on the prototype chain:</source>
          <target state="translated">В следующем примере мы удаляем собственное свойство объекта,в то время как одноименное свойство доступно в цепочке прототипов:</target>
        </trans-unit>
        <trans-unit id="d1688dd1bc4311871facdb22d215ac29f4cfd269" translate="yes" xml:space="preserve">
          <source>In the following example, we first define a class named &lt;code&gt;Polygon&lt;/code&gt;, then extend it to create a class named &lt;code&gt;Square&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3915fb85a203c34c4701029950bb8a9c14f92f1b" translate="yes" xml:space="preserve">
          <source>In the following example, we first define a class named Polygon, then extend it to create a class named Square. Note that super(), used in the constructor, can only be used in constructors and must be called before the &lt;code&gt;this&lt;/code&gt; keyword can be used.</source>
          <target state="translated">В следующем примере мы сначала определяем класс с именем Polygon, а затем расширяем его, чтобы создать класс с именем Square. Обратите внимание, что super (), используемый в конструкторе, может использоваться только в конструкторах и должен быть вызван перед использованием ключевого слова &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="382dd03774580bb2f9d04acd67e5dab59c412528" translate="yes" xml:space="preserve">
          <source>In the following example, we successively await two promises. Progress moves through function &lt;code&gt;foo&lt;/code&gt; in three stages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec0333973c02fd58485ca1aa0e462c7548eff95" translate="yes" xml:space="preserve">
          <source>In the following example, when &lt;code&gt;o.f()&lt;/code&gt; is invoked, inside the function &lt;code&gt;this&lt;/code&gt; is bound to the &lt;code&gt;o&lt;/code&gt; object.</source>
          <target state="translated">В следующем примере, когда вызывается &lt;code&gt;o.f()&lt;/code&gt; , внутри функции &lt;code&gt;this&lt;/code&gt; привязывается к объекту &lt;code&gt;o&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04bcd5d96a4ccd8139ff398132b2d5a23f10fbfa" translate="yes" xml:space="preserve">
          <source>In the following piece of code, &lt;code&gt;slice()&lt;/code&gt; is a bound function to the &lt;a href=&quot;apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function.prototype&lt;/code&gt;&lt;/a&gt;, with the &lt;code&gt;this&lt;/code&gt; value set to the &lt;a href=&quot;../array/slice&quot;&gt;&lt;code&gt;slice()&lt;/code&gt;&lt;/a&gt; function of &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype&quot;&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/a&gt;. This means that additional &lt;code&gt;apply()&lt;/code&gt; calls can be eliminated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910701d472ecd5b702fc4b46aec86e952f4bac39" translate="yes" xml:space="preserve">
          <source>In the former instance, JS seems to find an empty string just after the specified index value. In the latter instance, JS seems to be finding an empty string at the end of the searched string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95ef1758d9879398c7d717728553d776121d64a" translate="yes" xml:space="preserve">
          <source>In the function signature for &lt;code&gt;drawChart&lt;/code&gt; above, the destructured left-hand side is assigned to an empty object literal on the right-hand side: &lt;code&gt;{size = 'big', coords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt;. You could have also written the function without the right-hand side assignment. However, if you leave out the right-hand side assignment, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can simply call &lt;code&gt;&lt;strong&gt;drawChart()&lt;/strong&gt;&lt;/code&gt; without supplying any parameters. The current design is useful if you want to be able to call the function without supplying any parameters, the other can be useful when you want to ensure an object is passed to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320ac0eafa6debb7dcd8b9758ef8cfe6b6f8db61" translate="yes" xml:space="preserve">
          <source>In the function signature for &lt;code&gt;drawES2015Chart&lt;/code&gt; above, the destructured left-hand side is assigned to an empty object literal on the right-hand side: &lt;code&gt;{size = 'big', cords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt;. You could have also written the function without the right-hand side assignment. However, if you leave out the right-hand side assignment, the function will look for at least one argument to be supplied when invoked, whereas in its current form, you can simply call &lt;code&gt;&lt;strong&gt;drawES2015Chart()&lt;/strong&gt;&lt;/code&gt; without supplying any parameters. The current design is useful if you want to be able to call the function without supplying any parameters, the other can be useful when you want to ensure an object is passed to the function.</source>
          <target state="translated">В сигнатуре функции для &lt;code&gt;drawES2015Chart&lt;/code&gt; выше деструктурированная левая часть назначена пустому литералу объекта с правой стороны: &lt;code&gt;{size = 'big', cords = {x: 0, y: 0}, radius = 25} = {}&lt;/code&gt; . Вы также могли бы написать функцию без назначения в правой части. Однако, если вы не укажете правое назначение, функция будет искать по крайней мере один аргумент, который должен быть предоставлен при вызове, тогда как в ее текущей форме вы можете просто вызвать &lt;code&gt;&lt;strong&gt;drawES2015Chart()&lt;/strong&gt;&lt;/code&gt; без &lt;strong&gt;указания&lt;/strong&gt; каких-либо параметров. Текущий дизайн полезен, если вы хотите иметь возможность вызывать функцию без предоставления каких-либо параметров, другой может быть полезен, когда вы хотите гарантировать, что объект передается в функцию.</target>
        </trans-unit>
        <trans-unit id="384cd9fe2f63891e05c6315f490a0fe09b2696a0" translate="yes" xml:space="preserve">
          <source>In the global context, a variable declared using &lt;code&gt;var&lt;/code&gt; is added as a non-configurable property of the global object. This means its property descriptor cannot be changed and it cannot be deleted using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/delete&quot;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt;. The corresponding name is also added to a list on the internal &lt;code&gt;[[VarNames]]&lt;/code&gt; slot on the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/10.0/index.html#sec-global-environment-records&quot;&gt;global environment record&lt;/a&gt; (which forms part of the global lexical environment). The list of names in &lt;code&gt;[[VarNames]]&lt;/code&gt; enables the runtime to distinguish between global variables and straightforward properties on the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec2ed1a49c59897eb318170d9b6bd3065461b6d" translate="yes" xml:space="preserve">
          <source>In the global execution context (outside of any function), &lt;code&gt;this&lt;/code&gt; refers to the global object whether in strict mode or not.</source>
          <target state="translated">В глобальном контексте выполнения (вне какой-либо функции) &lt;code&gt;this&lt;/code&gt; относится к глобальному объекту, независимо от того, находится он в строгом режиме или нет.</target>
        </trans-unit>
        <trans-unit id="4323cb3e94dbb71c6dea4adf5e31307a360729a9" translate="yes" xml:space="preserve">
          <source>In the last example (&lt;code&gt;C2&lt;/code&gt;), because an object was returned during construction, the new object that &lt;code&gt;this&lt;/code&gt; was bound to simply gets discarded. (This essentially makes the statement &quot;&lt;code&gt;this.a = 37;&lt;/code&gt;&quot; dead code. It's not exactly dead because it gets executed, but it can be eliminated with no outside effects.)</source>
          <target state="translated">В последнем примере ( &lt;code&gt;C2&lt;/code&gt; ), поскольку объект был возвращен во время построения, новый объект, к которому &lt;code&gt;this&lt;/code&gt; был привязан, просто отбрасывается. (По сути, это делает оператор &lt;code&gt;this.a = 37;&lt;/code&gt; мертвым кодом. Он не совсем мертв, потому что выполняется, но его можно устранить без каких-либо внешних эффектов.)</target>
        </trans-unit>
        <trans-unit id="00e90f9a8f3cbcb6e3ee4661127d9871d59bd623" translate="yes" xml:space="preserve">
          <source>In the module, we could use the following code:</source>
          <target state="translated">В модуле мы могли бы использовать следующий код:</target>
        </trans-unit>
        <trans-unit id="f8a9e58aa43466c9b9026972ff36cb4dd102c297" translate="yes" xml:space="preserve">
          <source>In the next example, a rest parameter is used to collect all arguments after the first one in an array. Each one of them is then multiplied by the first parameter and the array is returned:</source>
          <target state="translated">В следующем примере параметр rest используется для сбора всех аргументов после первого в массиве.Каждый из них затем умножается на первый параметр,и массив возвращается:</target>
        </trans-unit>
        <trans-unit id="a1d0de29c2467a1bcda0bcf6cead5586e0aa1d34" translate="yes" xml:space="preserve">
          <source>In the next example, a rest parameter is used to collect all parameters after the first into an array. Each one of them is then multiplied by the first parameter, and the array is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb91bb9b2b1254cf0c448c27969519e3a92034" translate="yes" xml:space="preserve">
          <source>In the next example, an &lt;a href=&quot;if...else&quot;&gt;&lt;code&gt;if...else&lt;/code&gt;&lt;/a&gt; statement without curly braces (&lt;code&gt;{}&lt;/code&gt;) is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e204d4b72625c73764da0600a44e35ab5711b4a" translate="yes" xml:space="preserve">
          <source>In the past, the general strategy for setting defaults was to test parameter values in the function body and assign a value if they are &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">В прошлом общая стратегия установки значений по умолчанию заключалась в проверке значений параметров в теле функции и присвоении значения, если они не &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="118743fe11f8aa51b1246d6b929e4cf6c2a3a3c4" translate="yes" xml:space="preserve">
          <source>In the replacement text, the script uses &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt; to indicate the results of the corresponding matching parentheses in the regular expression pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18901524c393bd6c9d4140d7173cf206ad8f759d" translate="yes" xml:space="preserve">
          <source>In the same line, the &lt;code&gt;if&lt;/code&gt; block's &lt;code&gt;foo&lt;/code&gt; has already been created in the lexical environment, but has not yet reached (and terminated) its initialization (which is part of the statement itself).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f67384bff317df6dc3f3c5721272dbec196a342" translate="yes" xml:space="preserve">
          <source>In the second call in this example, even if the first argument is set explicitly to &lt;code&gt;undefined&lt;/code&gt; (though not &lt;code&gt;null&lt;/code&gt; or other &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt; values), the value of the &lt;code&gt;&lt;var&gt;num&lt;/var&gt;&lt;/code&gt; argument is still the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b8cef8365495d74b0b650d8145880b109b506c" translate="yes" xml:space="preserve">
          <source>In the second call in this example, even if the first argument is set explicitly to &lt;code&gt;undefined&lt;/code&gt; (though not &lt;code&gt;null&lt;/code&gt; or other &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;falsy&lt;/a&gt; values&lt;/em&gt;), the value of the &lt;code&gt;num&lt;/code&gt; argument is still the default.</source>
          <target state="translated">Во втором вызове в этом примере, даже если для первого аргумента явно задано значение &lt;code&gt;undefined&lt;/code&gt; (но не &lt;code&gt;null&lt;/code&gt; или другие &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Falsy&quot;&gt;ложные&lt;/a&gt; значения&lt;/em&gt; ), значение аргумента &lt;code&gt;num&lt;/code&gt; по-прежнему остается значением по умолчанию.</target>
        </trans-unit>
        <trans-unit id="7b79ff68d3fff0dd724c0e66e2c8369970388f4e" translate="yes" xml:space="preserve">
          <source>In the second example, &lt;code&gt;this&lt;/code&gt; should be &lt;a href=&quot;../global_objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, because &lt;code&gt;f2&lt;/code&gt; was called directly and not as a method or property of an object (e.g. &lt;code&gt;window.f2()&lt;/code&gt;). This feature wasn't implemented in some browsers when they first started to support &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;. As a result, they incorrectly returned the &lt;code&gt;window&lt;/code&gt; object.</source>
          <target state="translated">Во втором примере &lt;code&gt;this&lt;/code&gt; должно быть &lt;a href=&quot;../global_objects/undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; , потому что &lt;code&gt;f2&lt;/code&gt; был вызван напрямую, а не как метод или свойство объекта (например, &lt;code&gt;window.f2()&lt;/code&gt; ). Эта функция не была реализована в некоторых браузерах, когда они впервые начали поддерживать &lt;a href=&quot;../strict_mode&quot;&gt;строгий режим&lt;/a&gt; . В результате они неправильно вернули объект &lt;code&gt;window&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cd33ef758331369d99dcee31aeb7e6ca215fa7f" translate="yes" xml:space="preserve">
          <source>In the syntax, the text string represents the literal text that you want the user to see. The &lt;code&gt;name&lt;/code&gt; parameter string represents the &lt;code&gt;name&lt;/code&gt; attribute of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">В синтаксисе текстовая строка представляет собой буквальный текст, который вы хотите, чтобы пользователь увидел. &lt;code&gt;name&lt;/code&gt; строка параметра представляет &lt;code&gt;name&lt;/code&gt; атрибута &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt; элемента.</target>
        </trans-unit>
        <trans-unit id="eae556c3be7f945436b5d6044a42766b280d5e47" translate="yes" xml:space="preserve">
          <source>In the table below, &lt;strong&gt;Grouping&lt;/strong&gt; is listed as having the highest precedence. However, that does not always mean the expression within the grouping symbols &lt;code&gt;( &amp;hellip; )&lt;/code&gt; is evaluated first, especially when it comes to short-circuiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bb1c4268b088f014ea5a9a7d9ea551816d49cc" translate="yes" xml:space="preserve">
          <source>In the uncompressed version, the program runs into the truthy-branch and logs &quot;&lt;code&gt;'foo' is an instance of 'Foo'&lt;/code&gt;&quot;. Whereas, in the compressed version it behaves differently, and runs into the else-branch. If you rely on &lt;code&gt;Function.name&lt;/code&gt;, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function to have a particular name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bb87933d62241b361f74acb67f3e98a281c829" translate="yes" xml:space="preserve">
          <source>In the uncompressed version, the program runs into the truthy-branch and logs &lt;em&gt;'foo' is an instance of 'Foo'&lt;/em&gt;. Whereas, in the compressed version it behaves differently, and runs into the else-branch. If you rely on &lt;code&gt;Function.name&lt;/code&gt;, like in the example above, make sure your build pipeline doesn't change function names, or don't assume a function to have a particular name.</source>
          <target state="translated">В несжатой версии программа запускается в правдивую ветку, и в журналах &lt;em&gt;&amp;laquo;foo&amp;raquo; является экземпляром &amp;laquo;Foo&amp;raquo;&lt;/em&gt; . В то время как в сжатой версии он ведет себя иначе и переходит в ветку else. Если вы полагаетесь на &lt;code&gt;Function.name&lt;/code&gt; , как в приведенном выше примере, убедитесь, что конвейер сборки не изменяет имена функций или не предполагает, что функция имеет определенное имя.</target>
        </trans-unit>
        <trans-unit id="a6045774c4491fab11ca343b8a71fe9f28294720" translate="yes" xml:space="preserve">
          <source>In the worker (see &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt;) we define an import object for the module to use, then set up an event handler to receive the module from the main thread. When the module is received, we create an instance from it using the &lt;a href=&quot;instantiate&quot;&gt;&lt;code&gt;WebAssembly.instantiate()&lt;/code&gt;&lt;/a&gt; method and invoke an exported function from inside it.</source>
          <target state="translated">В worker (см. &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt; ) мы определяем объект импорта для используемого модуля, затем настраиваем обработчик событий для получения модуля из основного потока. Когда модуль получен, мы создаем из него экземпляр, используя метод &lt;a href=&quot;instantiate&quot;&gt; &lt;code&gt;WebAssembly.instantiate()&lt;/code&gt; &lt;/a&gt; и вызываем из него экспортированную функцию.</target>
        </trans-unit>
        <trans-unit id="012ee32c213d819cb9d3fb7476f49f1095628ce9" translate="yes" xml:space="preserve">
          <source>In the worker (see &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt;) we define an import object for the module to use, then set up an event handler to receive the module from the main thread. when the module is received, we create an instance from it using the &lt;a href=&quot;../instantiate&quot;&gt;&lt;code&gt;WebAssembly.Instantiate()&lt;/code&gt;&lt;/a&gt; method, invoke an exported function from inside it, then show how we can return information on the available exports on a module using &lt;code&gt;WebAssembly.Module.exports&lt;/code&gt;.</source>
          <target state="translated">В worker (см. &lt;code&gt;&lt;a href=&quot;https://github.com/mdn/webassembly-examples/blob/master/js-api-examples/wasm_worker.js&quot;&gt;wasm_worker.js&lt;/a&gt;&lt;/code&gt; ) мы определяем объект импорта для используемого модуля, затем настраиваем обработчик событий для получения модуля из основного потока. когда модуль получен, мы создаем из него экземпляр с помощью метода &lt;a href=&quot;../instantiate&quot;&gt; &lt;code&gt;WebAssembly.Instantiate()&lt;/code&gt; &lt;/a&gt; , вызываем из него экспортированную функцию, а затем показываем, как мы можем вернуть информацию о доступных экспортах в модуле с помощью &lt;code&gt;WebAssembly.Module.exports&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="70bec1ed815f54f78684ae17e4732e9e7306cdd6" translate="yes" xml:space="preserve">
          <source>In this case it's important to return only an integer (so a simple division won't do), and also to only return actually elapsed seconds (that's why this code uses &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt; and not &lt;a href=&quot;math/round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">В этом случае важно возвращать только целое число (поэтому простое деление не годится), а также возвращать только фактически прошедшие секунды (поэтому этот код использует &lt;a href=&quot;math/floor&quot;&gt; &lt;code&gt;Math.floor()&lt;/code&gt; &lt;/a&gt; а не &lt;a href=&quot;math/round&quot;&gt; &lt;code&gt;Math.round()&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8c9f7d01af5e1fce725fc980e3a1487d78434b0a" translate="yes" xml:space="preserve">
          <source>In this case, it's important to return only an integer&amp;mdash;so a simple division won't do. It's also important to only return actually elapsed seconds. (That's why this code uses &lt;a href=&quot;math/floor&quot;&gt;&lt;code&gt;Math.floor()&lt;/code&gt;&lt;/a&gt;, and &lt;em&gt;not&lt;/em&gt;&lt;a href=&quot;math/round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186a0d96b6bdd1c3792c513064740ed74358e3ab" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;console.log()&lt;/code&gt; call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way.</source>
          <target state="translated">В этом случае вызов &lt;code&gt;console.log()&lt;/code&gt; никогда не выполняется, поскольку он находится внутри комментария. Таким образом можно отключить любое количество строк кода.</target>
        </trans-unit>
        <trans-unit id="03c6fb8b542b497eb35334ab759b3e7f836b4e4a" translate="yes" xml:space="preserve">
          <source>In this case, the function &lt;code&gt;sum&lt;/code&gt; has default parameters &lt;code&gt;a=1&lt;/code&gt; and &lt;code&gt;b=2&lt;/code&gt;:</source>
          <target state="translated">В этом случае функция &lt;code&gt;sum&lt;/code&gt; имеет параметры по умолчанию &lt;code&gt;a=1&lt;/code&gt; и &lt;code&gt;b=2&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="83c25e00d5dc533083c80281b6cb39e68fc1bfd2" translate="yes" xml:space="preserve">
          <source>In this case, the inner function's &lt;code&gt;this&lt;/code&gt; isn't set so it returns the global/window object (i.e. the default object in non&amp;ndash;strict mode where &lt;code&gt;this&lt;/code&gt; isn't set by the call).</source>
          <target state="translated">В этом случае внутренняя функция &lt;code&gt;this&lt;/code&gt; не установлена, поэтому она возвращает объект global / window (т. Е. Объект по умолчанию в нестрогом режиме, где &lt;code&gt;this&lt;/code&gt; не устанавливается при вызове).</target>
        </trans-unit>
        <trans-unit id="ee090e37a02dcb4f76244ca9578ebc7366ff2c73" translate="yes" xml:space="preserve">
          <source>In this case, the property &lt;code&gt;bar&lt;/code&gt; is an undefined property, so a &lt;code&gt;ReferenceError&lt;/code&gt; will occur.</source>
          <target state="translated">В этом случае &lt;code&gt;bar&lt;/code&gt; свойств является неопределенным свойством, поэтому произойдет ошибка &lt;code&gt;ReferenceError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ba12f762c8080d1368efbc5da9ff771dc86bdae" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;arg&quot; redeclares the argument.</source>
          <target state="translated">В этом случае переменная &quot;arg&quot; заново объявляет аргумент.</target>
        </trans-unit>
        <trans-unit id="37c152d2215becaac46c7389493a06f938d3439c" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;bar&quot; is an undeclared variable.</source>
          <target state="translated">В данном случае,переменная &quot;bar&quot; является необъявленной переменной.</target>
        </trans-unit>
        <trans-unit id="1089c3880315f3e567e584d5eccf757d257bcc7e" translate="yes" xml:space="preserve">
          <source>In this case, the variable &quot;foo&quot; is redeclared in the block statement using &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">В этом случае переменная &amp;laquo;foo&amp;raquo; повторно объявляется в операторе блока с помощью &lt;code&gt;let&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="607fad50d33fb3b355e7cc4cdeae47a48846941f" translate="yes" xml:space="preserve">
          <source>In this case, we return all the selected &lt;code&gt;option&lt;/code&gt;s' values on the screen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5233ec322e51b52c87cb640dd6c9fe7a2b2a7d5" translate="yes" xml:space="preserve">
          <source>In this case, which happens way too often, there is a typo in the method name:</source>
          <target state="translated">В этом случае,что случается слишком часто,в названии метода присутствует опечатка:</target>
        </trans-unit>
        <trans-unit id="ce98cc8bdab5c6d18ec608646a8a392ecc6990dc" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;property&lt;/code&gt; must be a valid JavaScript identifier, i.e. a sequence of alphanumerical characters, also including the underscore (&quot;&lt;code&gt;_&lt;/code&gt;&quot;) and dollar sign (&quot;&lt;code&gt;$&lt;/code&gt;&quot;), that cannot start with a number. For example, &lt;code&gt;object.$1&lt;/code&gt; is valid, while &lt;code&gt;object.1&lt;/code&gt; is not.</source>
          <target state="translated">В этом коде &lt;code&gt;property&lt;/code&gt; должно быть допустимым идентификатором JavaScript, т. Е. Последовательностью буквенно-цифровых символов, включая подчеркивание (&amp;laquo; &lt;code&gt;_&lt;/code&gt; &amp;raquo;) и знак доллара (&amp;laquo; &lt;code&gt;$&lt;/code&gt; &amp;raquo;), которые не могут начинаться с числа. Например, &lt;code&gt;object.$1&lt;/code&gt; допустим, а &lt;code&gt;object.1&lt;/code&gt; - нет.</target>
        </trans-unit>
        <trans-unit id="2c8360a647a18e7467e5241af714ffdf2ee3543e" translate="yes" xml:space="preserve">
          <source>In this example the target has two properties, &lt;code&gt;notProxied&lt;/code&gt; and &lt;code&gt;proxied&lt;/code&gt;. We define a handler that returns a different value for &lt;code&gt;proxied&lt;/code&gt;, and lets any other accesses through to the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcac0f21dd62d88cc1fc1d7c5edc9c0b7b37a5fd" translate="yes" xml:space="preserve">
          <source>In this example we define a function that can add two or more numbers together.</source>
          <target state="translated">В данном примере мы определяем функцию,которая может складывать два и более числа вместе.</target>
        </trans-unit>
        <trans-unit id="44ecc52fcc1dd532a59d37d9c27852cb4e6632c6" translate="yes" xml:space="preserve">
          <source>In this example when the setter is triggered, it is told to do the same thing again: &lt;em&gt;to set the same property that it is meant to handle.&lt;/em&gt; This causes the function to call itself, again and again, making it infinitely recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfda2fb9a04305f886bcd0e49716e0ef48179b89" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;f()&lt;/code&gt; returns the values &lt;code&gt;[1, 2]&lt;/code&gt; as its output, which can be parsed in a single line with destructuring.</source>
          <target state="translated">В этом примере &lt;code&gt;f()&lt;/code&gt; возвращает значения &lt;code&gt;[1, 2]&lt;/code&gt; качестве вывода, которые могут быть проанализированы в одной строке с помощью деструктуризации.</target>
        </trans-unit>
        <trans-unit id="4ec37b22188853fa195e1eb0a40dd6fc5647d4b0" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;next&lt;/code&gt; is called with a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a73078322457f6e2a4f76866f7f2bd2d296423" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;next&lt;/code&gt; is called with a value. Note that the first call did not log anything, because the generator was not yielding anything initially.</source>
          <target state="translated">В этом примере &lt;code&gt;next&lt;/code&gt; вызывается со значением. Обратите внимание, что первый вызов ничего не зарегистрировал, потому что генератор изначально ничего не выдавал.</target>
        </trans-unit>
        <trans-unit id="563d6171046b28102d99d569274b89bdabeb1e27" translate="yes" xml:space="preserve">
          <source>In this example, a getter always returns the same value.</source>
          <target state="translated">В данном примере геттер всегда возвращает одно и то же значение.</target>
        </trans-unit>
        <trans-unit id="2d925e67a635ae1e3d2c5b8950ddc3283286c2d1" translate="yes" xml:space="preserve">
          <source>In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement.</source>
          <target state="translated">В этом примере все вхождения заглавных букв в строку преобразуются в строчный регистр,а дефис вставляется непосредственно перед местоположением совпадения.Здесь важно то,что перед возвращением в качестве замены над совпадающим элементом необходимо выполнить дополнительные операции.</target>
        </trans-unit>
        <trans-unit id="759ee36c2266471d3c6cb72f53c573291607c4d8" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;toGMTString()&lt;/code&gt; method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33012959cef3631ac1b179a71cdf251a2d34c8f" translate="yes" xml:space="preserve">
          <source>In this example, the first argument is mapped to &lt;code&gt;&quot;a&quot;&lt;/code&gt; and the second to &lt;code&gt;&quot;b&quot;&lt;/code&gt;, so these named arguments are used like normal. However the third argument &lt;code&gt;&quot;manyMoreArgs&quot;&lt;/code&gt; will be an array that contains the 3rd, 4th, 5th, 6th ... nth -- as many arguments that the user includes.</source>
          <target state="translated">В этом примере первый аргумент отображается на &lt;code&gt;&quot;a&quot;&lt;/code&gt; а второй на &lt;code&gt;&quot;b&quot;&lt;/code&gt; , поэтому эти именованные аргументы используются как обычно. Однако третий аргумент &lt;code&gt;&quot;manyMoreArgs&quot;&lt;/code&gt; будет массивом, содержащим 3-й, 4-й, 5-й, 6-й ... n-й - столько аргументов, сколько включает пользователь.</target>
        </trans-unit>
        <trans-unit id="b5ba9ccc89fc1604d1696a6f06c45a0e15818a82" translate="yes" xml:space="preserve">
          <source>In this example, the first argument is mapped to &lt;code&gt;a&lt;/code&gt; and the second to &lt;code&gt;b&lt;/code&gt;, so these named arguments are used as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="694ce76b4ee53e67741df07c604b0136305f4feb" translate="yes" xml:space="preserve">
          <source>In this example, the object assigned to the variable &lt;code&gt;p&lt;/code&gt; doesn't have its own &lt;code&gt;f&lt;/code&gt; property, it inherits it from its prototype. But it doesn't matter that the lookup for &lt;code&gt;f&lt;/code&gt; eventually finds a member with that name on &lt;code&gt;o&lt;/code&gt;; the lookup began as a reference to &lt;code&gt;p.f&lt;/code&gt;, so &lt;code&gt;this&lt;/code&gt; inside the function takes the value of the object referred to as &lt;code&gt;p&lt;/code&gt;. That is, since &lt;code&gt;f&lt;/code&gt; is called as a method of &lt;code&gt;p&lt;/code&gt;, its &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;p&lt;/code&gt;. This is an interesting feature of JavaScript's prototype inheritance.</source>
          <target state="translated">В этом примере объект, присвоенный переменной &lt;code&gt;p&lt;/code&gt; , не имеет собственного свойства &lt;code&gt;f&lt;/code&gt; , он наследует его от своего прототипа. Но не имеет значения, что поиск &lt;code&gt;f&lt;/code&gt; в конечном итоге находит член с таким именем на &lt;code&gt;o&lt;/code&gt; ; поиск начался как ссылка на &lt;code&gt;p.f&lt;/code&gt; , поэтому &lt;code&gt;this&lt;/code&gt; внутри функции принимает значение объекта, указанного как &lt;code&gt;p&lt;/code&gt; . То есть, поскольку &lt;code&gt;f&lt;/code&gt; вызывается как метод &lt;code&gt;p&lt;/code&gt; , &lt;code&gt;this&lt;/code&gt; относится к &lt;code&gt;p&lt;/code&gt; . Это интересная особенность наследования прототипов в JavaScript.</target>
        </trans-unit>
        <trans-unit id="66ff041dbef1cfc7f06522a5a35ef052cd6ff39d" translate="yes" xml:space="preserve">
          <source>In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.</source>
          <target state="translated">В данном примере мы используем нативный объект JavaScript,к которому наш прокси будет перенаправлять все операции,которые к нему применяются.</target>
        </trans-unit>
        <trans-unit id="b4d44b171c423b36c9ffde273c548d0bbfbac36f" translate="yes" xml:space="preserve">
          <source>In this example, we create a 8-byte buffer with a &lt;a href=&quot;../int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; view referring to the buffer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f8bcdd4576e052baef77d87b035aec5006ad25" translate="yes" xml:space="preserve">
          <source>In this example, we create a 8-byte buffer with a &lt;a href=&quot;int32array&quot;&gt;&lt;code&gt;Int32Array&lt;/code&gt;&lt;/a&gt; view referring to the buffer:</source>
          <target state="translated">В этом примере мы создаем 8-байтовый буфер с представлением &lt;a href=&quot;int32array&quot;&gt; &lt;code&gt;Int32Array&lt;/code&gt; ,&lt;/a&gt; ссылающимся на буфер:</target>
        </trans-unit>
        <trans-unit id="87a870c20fd5c4ac21e8e1fefbf9420b0799bf46" translate="yes" xml:space="preserve">
          <source>In this example, we create an anonymous function and use &lt;code&gt;call&lt;/code&gt; to invoke it on every object in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d622e8d0d99304a0a0a4b1c302b418fb7d05cf" translate="yes" xml:space="preserve">
          <source>In this example, we create an anonymous function and use &lt;code&gt;call&lt;/code&gt; to invoke it on every object in an array. The main purpose of the anonymous function here is to add a print function to every object, which is able to print the right index of the object in the array. Passing the object as &lt;code&gt;this&lt;/code&gt; value was not strictly necessary, but is done for explanatory purpose.</source>
          <target state="translated">В этом примере мы создаем анонимную функцию и используем &lt;code&gt;call&lt;/code&gt; для ее вызова для каждого объекта в массиве. Основная цель анонимной функции здесь - добавить функцию печати к каждому объекту, которая может печатать правильный индекс объекта в массиве. Передача объекта в качестве &lt;code&gt;this&lt;/code&gt; значения не была строго обязательной, но сделана в пояснительных целях.</target>
        </trans-unit>
        <trans-unit id="6f672f93e1db2c6bc3b7a46e652d5ed693037774" translate="yes" xml:space="preserve">
          <source>In this example, we have a function that fetches an image and returns a blob. We use &lt;code&gt;Promise.any()&lt;/code&gt; to fetch a couple of images and display the first one available (i.e. whose promise has resolved).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d1a734c2b7c768d448203122432bbe776e5b05" translate="yes" xml:space="preserve">
          <source>In this example, we will provide default values but keep values other than &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35974a3e7587dcc087e5970b5717fe14b1ffcde" translate="yes" xml:space="preserve">
          <source>In this list, each page is listed by name (the type of error) and message (a more detailed human-readable error message). Together, these two properties provide a starting point toward understanding and resolving the error. For more information, follow the links below!</source>
          <target state="translated">В этом списке каждая страница перечислена по имени (тип ошибки)и сообщению (более подробное сообщение об ошибке,которое может быть прочитано человеком).Вместе эти два свойства являются отправной точкой для понимания и разрешения ошибки.Для получения дополнительной информации перейдите по ссылкам ниже!</target>
        </trans-unit>
        <trans-unit id="84cc35eeca38031ad4f482983b4a69f835b760cf" translate="yes" xml:space="preserve">
          <source>In this simple example the number &lt;code&gt;37&lt;/code&gt; gets returned as the default value when the property name is not in the object. It is using the &lt;a href=&quot;proxy/handler/get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="translated">В этом простом примере число &lt;code&gt;37&lt;/code&gt; возвращается как значение по умолчанию, если имя свойства отсутствует в объекте. Он использует обработчик &lt;a href=&quot;proxy/handler/get&quot;&gt; &lt;code&gt;get&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c9f63da3eb0045c2357f1cdb851b284fdcaffc13" translate="yes" xml:space="preserve">
          <source>In this simple example, the number &lt;code&gt;37&lt;/code&gt; gets returned as the default value when the property name is not in the object. It is using the &lt;a href=&quot;proxy/proxy/get&quot;&gt;&lt;code&gt;get&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590403612835e59c245f0cdab1e404168d22e494" translate="yes" xml:space="preserve">
          <source>In unusual situations, the assignment operator (e.g.&lt;code&gt; x += y&lt;/code&gt;) is not identical to the meaning expression (here &lt;code&gt;x = x + y&lt;/code&gt;). When the left operand of an assignment operator itself contains an assignment operator, the left operand is evaluated only once. For example:</source>
          <target state="translated">В необычных ситуациях оператор присваивания (например, &lt;code&gt; x += y&lt;/code&gt; ) не идентичен значению выражения (здесь &lt;code&gt;x = x + y&lt;/code&gt; ). Когда левый операнд самого оператора присваивания содержит оператор присваивания, левый операнд оценивается только один раз. Например:</target>
        </trans-unit>
        <trans-unit id="a131dacbe54fb64553702d39cdf6558030b34fb8" translate="yes" xml:space="preserve">
          <source>Included in the (normative) annex for additional ECMAScript legacy features for Web browsers (note that the specification codifies what is already in implementations).</source>
          <target state="translated">Входит в (нормативное)приложение для дополнительных наследственных ECMAScript-функций для Web-браузеров (обратите внимание,что спецификация кодирует то,что уже находится в реализации).</target>
        </trans-unit>
        <trans-unit id="4041f4126b0351dfe2e79c79a3f6557e3c70b29b" translate="yes" xml:space="preserve">
          <source>Incomplete array initializer</source>
          <target state="translated">Незавершенный инициализатор массива</target>
        </trans-unit>
        <trans-unit id="4c69aeda2103b6e78518bbb410b414f8da34036f" translate="yes" xml:space="preserve">
          <source>Increases the size of the Table instance by a specified number of elements.</source>
          <target state="translated">Увеличивает размер экземпляра таблицы на заданное количество элементов.</target>
        </trans-unit>
        <trans-unit id="1ad7f4e9bdfd8b6afc5185d816fa7e2287a97748" translate="yes" xml:space="preserve">
          <source>Increases the size of the Table instance by a specified number of references.</source>
          <target state="translated">Увеличивает размер экземпляра таблицы на указанное количество ссылок.</target>
        </trans-unit>
        <trans-unit id="c99f880b72799cc04c963d4317c186789a75c6d6" translate="yes" xml:space="preserve">
          <source>Increases the size of the memory instance by a specified number of WebAssembly pages (each one is 64KB in size).</source>
          <target state="translated">Увеличивает размер экземпляра памяти на указанное количество страниц WebAssembly (каждая из которых имеет размер 64 КБ).</target>
        </trans-unit>
        <trans-unit id="401d8f49917326f6d322f2dadc2fa0c24677d373" translate="yes" xml:space="preserve">
          <source>Increasing the &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Увеличение &lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d12f1fabbb58a9af82666365bdf1d6e784f1a197" translate="yes" xml:space="preserve">
          <source>Increment</source>
          <target state="translated">Increment</target>
        </trans-unit>
        <trans-unit id="65bc9ccd743dd3dce9047eb75c52a48c168f2c7a" translate="yes" xml:space="preserve">
          <source>Increment &amp;amp; decrement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6baea39d0ecb0d64a9c1b43f7ae26c1991070ca" translate="yes" xml:space="preserve">
          <source>Increment (++)</source>
          <target state="translated">Инкремент (++)</target>
        </trans-unit>
        <trans-unit id="7137b97519cd5a3352b194f1a47ef7b8d00c0803" translate="yes" xml:space="preserve">
          <source>Increment (&lt;code&gt;++&lt;/code&gt;)</source>
          <target state="translated">Приращение ( &lt;code&gt;++&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="7e427ab8b4862191565a1a29a01d981f9c08b30f" translate="yes" xml:space="preserve">
          <source>Increment and decrement</source>
          <target state="translated">Инкремент и декремент</target>
        </trans-unit>
        <trans-unit id="0a8e6a5dfdc997a2260400369cf30f33da622e5c" translate="yes" xml:space="preserve">
          <source>Increment operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffb5e37a0de256063704a907edfe0ba275b1cf7" translate="yes" xml:space="preserve">
          <source>Indeterminate form (e.g. &lt;code&gt;0 * Infinity&lt;/code&gt;, or &lt;code&gt;undefined + undefined&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37f91419162687bd95af5bf7c6d8af3c0b436e1" translate="yes" xml:space="preserve">
          <source>Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.</source>
          <target state="translated">Индекс,с которого начинать изменение массива (с начала 0).Если длина массива больше длины массива,то реальный стартовый индекс будет установлен на длину массива.Если отрицательное значение,то начнется отсчет с конца массива (с начала -1)и будет установлено значение 0,если абсолютное значение больше длины массива.</target>
        </trans-unit>
        <trans-unit id="45e917d5246c9f80b81acc22465ce7ef8dada20f" translate="yes" xml:space="preserve">
          <source>Indexed Collections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5a3ab920950c8b210b9bac77077845cb8eefef" translate="yes" xml:space="preserve">
          <source>Indexed collections</source>
          <target state="translated">Индексированные коллекции</target>
        </trans-unit>
        <trans-unit id="ad269f38c4b63f8bfa0ecb35d25d42a1aaead76a" translate="yes" xml:space="preserve">
          <source>Indexed properties not consulting prototype</source>
          <target state="translated">Индексированные свойства не консалтинговый прототип</target>
        </trans-unit>
        <trans-unit id="718a228559e4b8042e0e85d2b6d3589cc237d81b" translate="yes" xml:space="preserve">
          <source>Indian calendar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7600e0fb90c939a2d9f2134c598b9b3ebcc27ac1" translate="yes" xml:space="preserve">
          <source>Indicates an error during WebAssembly decoding or validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018b8e5d38f9e27fad5f584feea16ea2dc658705" translate="yes" xml:space="preserve">
          <source>Indicates an error during module instantiation (besides &lt;a href=&quot;http://webassembly.org/docs/semantics/#traps&quot;&gt;traps&lt;/a&gt; from the start function).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c0a83d7993f36b5134ae07826c8ecfe2d53d68" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;g&lt;/code&gt; flag was used for a global match.</source>
          <target state="translated">Указывает, использовался ли флаг &lt;code&gt;g&lt;/code&gt; для глобального совпадения.</target>
        </trans-unit>
        <trans-unit id="7dceb2034a666f7087defcc0f1f7e6314d0528af" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;i&lt;/code&gt; flag was used to ignore case.</source>
          <target state="translated">Указывает, использовался ли флаг &lt;code&gt;i&lt;/code&gt; для игнорирования регистра.</target>
        </trans-unit>
        <trans-unit id="8b87a4dc659a01a5ec6a2bb79eda040056bd8bfe" translate="yes" xml:space="preserve">
          <source>Indicates if the &lt;code&gt;m&lt;/code&gt; flag was used to search across multiple lines.</source>
          <target state="translated">Указывает, использовался ли флаг &lt;code&gt;m&lt;/code&gt; для поиска по нескольким строкам.</target>
        </trans-unit>
        <trans-unit id="92e93f5013ae6f94626f480539fb519f721cf52a" translate="yes" xml:space="preserve">
          <source>Individual date and time component values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3c699849bd9690ce57a8e4f7dfc1232fdafc22" translate="yes" xml:space="preserve">
          <source>Individual flag values can be extracted by ANDing them with a bitmask, where each bit with the value of one will &quot;extract&quot; the corresponding flag. The bitmask &lt;em&gt;masks&lt;/em&gt; out the non-relevant flags by ANDing with zeroes (hence the term &quot;bitmask&quot;). For example, the bitmask 0100 can be used to see if flag C is set:</source>
          <target state="translated">Отдельные значения флага могут быть извлечены операцией AND с битовой маской, где каждый бит со значением единицы будет &amp;laquo;извлекать&amp;raquo; соответствующий флаг. Битовая &lt;em&gt;маска маскирует&lt;/em&gt; нерелевантные флаги операцией AND с нулями (отсюда и термин &amp;laquo;битовая маска&amp;raquo;). Например, битовая маска 0100 может использоваться, чтобы увидеть, установлен ли флаг C:</target>
        </trans-unit>
        <trans-unit id="a9e2bf39c1e2a07161681d68dede8a4a0984febe" translate="yes" xml:space="preserve">
          <source>Individual operators</source>
          <target state="translated">Индивидуальные операторы</target>
        </trans-unit>
        <trans-unit id="8d4cadd23dc0f47618e0017475e1b69c0cbc8e21" translate="yes" xml:space="preserve">
          <source>Inequality</source>
          <target state="translated">Inequality</target>
        </trans-unit>
        <trans-unit id="e6cec31e8a65681ae7ec444c7f456b4cab73fee8" translate="yes" xml:space="preserve">
          <source>Inequality (!=)</source>
          <target state="translated">Неравенство (!=)</target>
        </trans-unit>
        <trans-unit id="68eb52167d8b6624a0b93dc5831d7c86c5135093" translate="yes" xml:space="preserve">
          <source>Inequality (&lt;code&gt;a != b&lt;/code&gt;)</source>
          <target state="translated">Неравенство ( &lt;code&gt;a != b&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="075d57d117ce1bc9282861df11d51f4826ba829b" translate="yes" xml:space="preserve">
          <source>Inequality operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d488f35d25db0196ffb7b0d1ffbbaed095958c24" translate="yes" xml:space="preserve">
          <source>Inequality operator.</source>
          <target state="translated">Некачественный оператор.</target>
        </trans-unit>
        <trans-unit id="a79dc3d005cf68005384e3b181f0842a749aefcd" translate="yes" xml:space="preserve">
          <source>Inferred function names</source>
          <target state="translated">Предполагаемые имена функций</target>
        </trans-unit>
        <trans-unit id="ae29dd030af2c6013a342baa4496df5423ffebe1" translate="yes" xml:space="preserve">
          <source>Inferred names on anonymous functions</source>
          <target state="translated">Предполагаемые имена на анонимных функциях</target>
        </trans-unit>
        <trans-unit id="f6c883b54018ef7a4cdbcff87341648a7e230e30" translate="yes" xml:space="preserve">
          <source>Infinite iterator</source>
          <target state="translated">Бесконечный итератор</target>
        </trans-unit>
        <trans-unit id="0219fd54bd5841008b18c414a5b2dea331bad1c5" translate="yes" xml:space="preserve">
          <source>Infinity</source>
          <target state="translated">Infinity</target>
        </trans-unit>
        <trans-unit id="59e354f06c04e0eb393e460ca726f509ae4ece3e" translate="yes" xml:space="preserve">
          <source>Inheritance of properties</source>
          <target state="translated">Наследование свойств</target>
        </trans-unit>
        <trans-unit id="7951150c36a5b0078509be63ec158d0a10f3f90a" translate="yes" xml:space="preserve">
          <source>Inherited properties</source>
          <target state="translated">Унаследованные свойства</target>
        </trans-unit>
        <trans-unit id="401219b9a38e6944e96008d3d9469f2296a8f5b9" translate="yes" xml:space="preserve">
          <source>Inherited property access: &lt;code&gt;Object.create(&lt;var&gt;proxy&lt;/var&gt;)[&lt;var&gt;foo&lt;/var&gt;]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df616f44e2c500bdaf1406df4828fd9ed5d52f72" translate="yes" xml:space="preserve">
          <source>Inherited property access: &lt;code&gt;Object.create(proxy)[foo]&lt;/code&gt;</source>
          <target state="translated">Доступ к &lt;code&gt;Object.create(proxy)[foo]&lt;/code&gt; свойству: Object.create (прокси) [foo]</target>
        </trans-unit>
        <trans-unit id="e80bf283b45a2a89da1dbc94e786f5f0ba62b400" translate="yes" xml:space="preserve">
          <source>Inherited property assignment: &lt;code&gt;Object.create(&lt;var&gt;proxy&lt;/var&gt;)[&lt;var&gt;foo&lt;/var&gt;] = &lt;var&gt;bar&lt;/var&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2150882f012dfc772b92621683506749d96ecd3" translate="yes" xml:space="preserve">
          <source>Inherited property assignment: &lt;code&gt;Object.create(proxy)[foo] = bar&lt;/code&gt;</source>
          <target state="translated">Назначение &lt;code&gt;Object.create(proxy)[foo] = bar&lt;/code&gt; свойства: Object.create (proxy) [foo] = bar</target>
        </trans-unit>
        <trans-unit id="36d1cfc052e5b58eb7c5741cab4b785cb23dd45a" translate="yes" xml:space="preserve">
          <source>Inherited property query: &lt;code&gt;foo in Object.create(&lt;var&gt;proxy&lt;/var&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75868d63eb79c862251acc96e281c4c93b846e2" translate="yes" xml:space="preserve">
          <source>Inherited property query: &lt;code&gt;foo in Object.create(proxy)&lt;/code&gt;</source>
          <target state="translated">Запрос унаследованного свойства: &lt;code&gt;foo in Object.create(proxy)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="78bf1f0ee0b483d322b97ba37fe2a667145f86c8" translate="yes" xml:space="preserve">
          <source>Initial ECMAScript proposal: &lt;a href=&quot;https://github.com/tc39/proposal-trailing-function-commas&quot;&gt;trailing function commas&lt;/a&gt; by Jeff Morrison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd7f16fa284794d2ca981389668e28d3cd48524" translate="yes" xml:space="preserve">
          <source>Initial WebAssembly draft definition.</source>
          <target state="translated">Первоначальный проект определения WebAssembly.</target>
        </trans-unit>
        <trans-unit id="9e915d7086e42ba7ad8fb470ce6fd37be732353b" translate="yes" xml:space="preserve">
          <source>Initial definition</source>
          <target state="translated">Первоначальное определение</target>
        </trans-unit>
        <trans-unit id="a37acae44fb32c850ce995533205c3c2eb69f53c" translate="yes" xml:space="preserve">
          <source>Initial definition in ECMA standard.</source>
          <target state="translated">Первоначальное определение в стандарте ECMA.</target>
        </trans-unit>
        <trans-unit id="35e9e36e8328392208cdb962c3a79bddae0d63a2" translate="yes" xml:space="preserve">
          <source>Initial definition in ECMAScript 2017.</source>
          <target state="translated">Первоначальное определение в ECMAScript 2017.</target>
        </trans-unit>
        <trans-unit id="f7d55f8d05c9e8c07926850628936b042dbed3d6" translate="yes" xml:space="preserve">
          <source>Initial definition in ES2017.</source>
          <target state="translated">Первоначальное определение в ES2017.</target>
        </trans-unit>
        <trans-unit id="6b379dfab4923f85c6fe72c56d94f6fd30cd942c" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard</source>
          <target state="translated">Первоначальное определение в стандарте ECMA</target>
        </trans-unit>
        <trans-unit id="bee4945b5c9770ada5b145f4f6bd2f1332eb9f3f" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard.</source>
          <target state="translated">Первоначальное определение в стандарте ECMA.</target>
        </trans-unit>
        <trans-unit id="e29784b04e2a292b41764fd796f01398698302ab" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard. Specified behaviour for indexed and named properties. Specified that &lt;code&gt;new&lt;/code&gt; is required.</source>
          <target state="translated">Первоначальное определение в стандарте ECMA. Указанное поведение для индексированных и именованных свойств. Уточнил, что требуется &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82c35f70e5937c8e4260b39081fd9fc366d7bedb" translate="yes" xml:space="preserve">
          <source>Initial definition in an ECMA standard. Specified that &lt;code&gt;new&lt;/code&gt; is required.</source>
          <target state="translated">Первоначальное определение в стандарте ECMA. Уточнил, что требуется &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="804103ada9286a91818a9c6f943e1357a3cee5f3" translate="yes" xml:space="preserve">
          <source>Initial definition was in ECMAScript 3.</source>
          <target state="translated">Первоначальное определение было в ECMAScript 3.</target>
        </trans-unit>
        <trans-unit id="1996078361460df53a1d2f9e9930c7c26d7f873c" translate="yes" xml:space="preserve">
          <source>Initial definition.</source>
          <target state="translated">Первоначальное определение.</target>
        </trans-unit>
        <trans-unit id="c74d3aa9086119cde5be85b65c88465515b8ab05" translate="yes" xml:space="preserve">
          <source>Initial definition. Defined in several section of the specification: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literals&quot;&gt;Template Literals&lt;/a&gt;, &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tagged-templates&quot;&gt;Tagged Templates&lt;/a&gt;</source>
          <target state="translated">Первоначальное определение. Определяется в нескольких разделах спецификации: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-template-literals&quot;&gt;литералы шаблонов&lt;/a&gt; , &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/#sec-tagged-templates&quot;&gt;шаблоны с тегами.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3d8b74490582a852fffa70f4fc964c8e54beb501" translate="yes" xml:space="preserve">
          <source>Initial definition. Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="translated">Первоначальное определение.Определено в (нормативном)приложении В для дополнительных функций ECMAScript для веб-браузеров.</target>
        </trans-unit>
        <trans-unit id="cf63efa5c0322f19ea7d903fb16ba743a12e456d" translate="yes" xml:space="preserve">
          <source>Initial definition. Does not specify let expressions or let blocks.</source>
          <target state="translated">Первоначальное определение.Не указывает пустые выражения или пустые блоки.</target>
        </trans-unit>
        <trans-unit id="40263062f582b9167e63d837c485ac319158cdd4" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.0.</target>
        </trans-unit>
        <trans-unit id="4ce05f6ce50ee64e9b4ab5c56bb413d0aef9cda2" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.0.</target>
        </trans-unit>
        <trans-unit id="ef9ece1071525c79ebc962c49979dc6140499d8b" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0. Defined in the (normative) Annex B for Additional ECMAScript Features for Web Browsers.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.0.Определено в (нормативном)приложении В для дополнительных функций ECMAScript для веб-браузеров.</target>
        </trans-unit>
        <trans-unit id="a3477ed16aca83fcc6cb881f80d7e09ec7c62282" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.0. Deprecated in favor of &lt;a href=&quot;../../functions/arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; in ES3.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.0. Устарело в пользу &lt;a href=&quot;../../functions/arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; в ES3.</target>
        </trans-unit>
        <trans-unit id="9ed464ab05f4b7a4db1b22334a85ff353174c997" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.1</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.1.</target>
        </trans-unit>
        <trans-unit id="ac3e55bf74a2e48b37e9ce44c0f80517a3bec394" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.1.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.1.</target>
        </trans-unit>
        <trans-unit id="bb8e116565952c369a0e33d04e78e8cfdb7d6847" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.2.</target>
        </trans-unit>
        <trans-unit id="941a5c7ff7cd2d2d4aa695b24556fd6f3bfb1a20" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.2.</target>
        </trans-unit>
        <trans-unit id="dc7ad3d394c062cdaa8069fe5fd888ffa41f60f1" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;global&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.2. JavaScript 1.5: &lt;code&gt;global&lt;/code&gt; - это свойство экземпляра &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , а не объекта &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c66c9736512070345f9e9afd89f67fb870b37654" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;ignoreCase&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.2. JavaScript 1.5: &lt;code&gt;ignoreCase&lt;/code&gt; - это свойство экземпляра &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , а не объекта &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bbd4b92992b6ccec49a23065c54399ff4c99f8d4" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;lastIndex&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.2. JavaScript 1.5: &lt;code&gt;lastIndex&lt;/code&gt; - это свойство экземпляра &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , а не объект &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fad0be06a8ade79e3f7b0862a68a4d8db5a2420c" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;multiline&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.2. JavaScript 1.5: &lt;code&gt;multiline&lt;/code&gt; - это свойство экземпляра &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , а не объекта &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cbac5462a80516b70d45fe45a2fbbd5e4d6ceb8d" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.2. JavaScript 1.5: &lt;code&gt;source&lt;/code&gt; is a property of a &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; instance, not the &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">Первоначальное определение. Реализовано в JavaScript 1.2. JavaScript 1.5: &lt;code&gt;source&lt;/code&gt; - это свойство экземпляра &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; , а не объект &lt;a href=&quot;../regexp&quot;&gt; &lt;code&gt;RegExp&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a85f7a92d71856d124832fd97d098db448fd811d" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.3.</target>
        </trans-unit>
        <trans-unit id="b38e7ce9b5cf83a8b1f0b1490a6268e2b973a0a3" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.3.</target>
        </trans-unit>
        <trans-unit id="ae0b462c8892ec0161d3febb8a3272c7c02d863f" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.3. Format is implementation dependent.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.3.Формат зависит от реализации.</target>
        </trans-unit>
        <trans-unit id="059285ca9aa0072aad8a001d0290031512394a78" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.4</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.4.</target>
        </trans-unit>
        <trans-unit id="c1808274911cabdf7ca684c1f1735365f7772fde" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.4.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.4.</target>
        </trans-unit>
        <trans-unit id="a40791e2d6b8b660293bab3f511003e62d469c50" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.5.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.5.</target>
        </trans-unit>
        <trans-unit id="b912d0e0846319e918d16802811ba094f6f47499" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.6.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.6.</target>
        </trans-unit>
        <trans-unit id="26a478c8236e6faa48a87a57bc5275286f41b4d7" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.7.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.7.</target>
        </trans-unit>
        <trans-unit id="078ca5ed2fd128eff8b0b9a2d46b4238264e128c" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.8.</target>
        </trans-unit>
        <trans-unit id="8a4d24fd7dd67bd64acdeb068c2c167ada819f10" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.1.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.8.1.</target>
        </trans-unit>
        <trans-unit id="58d49a89bac6a7dedf8b042873e15e72e65f0ebb" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.5</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.8.5.</target>
        </trans-unit>
        <trans-unit id="cad1ad3e2afcf629593f6eb50d4bac93cd34486b" translate="yes" xml:space="preserve">
          <source>Initial definition. Implemented in JavaScript 1.8.5.</source>
          <target state="translated">Первоначальное определение.Реализовано на JavaScript 1.8.5.</target>
        </trans-unit>
        <trans-unit id="2018c675b7f3b4f89b1656e50a4ae4c9277685f2" translate="yes" xml:space="preserve">
          <source>Initial definition. JavaScript 1.0 (UNIX Only) / JavaScript 1.1 (All platforms).</source>
          <target state="translated">Первоначальное определение.JavaScript 1.0 (только для UNIX)/JavaScript 1.1 (для всех платформ).</target>
        </trans-unit>
        <trans-unit id="7173bef762ccdf92ab23687cfc1d5be4a9ad804d" translate="yes" xml:space="preserve">
          <source>Initial definition. See also: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-C&quot;&gt;Strict mode restriction and exceptions&lt;/a&gt;</source>
          <target state="translated">Первоначальное определение. См. Также: &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-C&quot;&gt;Ограничение строгого режима и исключения&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57325d451f55171c368ce61331d89e6d3d0aeaf6" translate="yes" xml:space="preserve">
          <source>Initial definition. Unlabeled version.</source>
          <target state="translated">Первоначальное определение.Безымянная версия.</target>
        </trans-unit>
        <trans-unit id="022515f406a57864f40cd1203eb4dcb41febf436" translate="yes" xml:space="preserve">
          <source>Initial defintion.</source>
          <target state="translated">Первоначальное определение.</target>
        </trans-unit>
        <trans-unit id="69a9e0de842d8ae55591da42504603cd7e7262df" translate="yes" xml:space="preserve">
          <source>Initial draft definition.</source>
          <target state="translated">Первоначальный проект определения.</target>
        </trans-unit>
        <trans-unit id="b975dbb1192b113cadea247a55fa22b519dfca4d" translate="yes" xml:space="preserve">
          <source>Initial publication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02800d28cb9343126029438b218e44c2370a6a7" translate="yes" xml:space="preserve">
          <source>Initial value of the variable. It can be any legal expression. Default value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1b224617736038fb54e6a25aa285ec6283eba9" translate="yes" xml:space="preserve">
          <source>Initial value of the variable. It can be any legal expression. Default value is &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="translated">Начальное значение переменной. Это может быть любое юридическое выражение. Значение по умолчанию не &lt;em&gt;определено&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8c5eae6e8ad5c7eff82b70392594bd4874c1a340" translate="yes" xml:space="preserve">
          <source>Initialization of several variables</source>
          <target state="translated">Инициализация нескольких переменных</target>
        </trans-unit>
        <trans-unit id="9f8693a57ce3d9a432b19813a82043b25a29e309" translate="yes" xml:space="preserve">
          <source>Initially, the &lt;code&gt;&lt;var&gt;replacer&lt;/var&gt;&lt;/code&gt; function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d858124bcdda6ccdc66224e0325d22439387781d" translate="yes" xml:space="preserve">
          <source>Initially, the &lt;code&gt;replacer&lt;/code&gt; function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified.</source>
          <target state="translated">Первоначально функция &lt;code&gt;replacer&lt;/code&gt; вызывается с пустой строкой в ​​качестве ключа, представляющего строковый объект. Затем он вызывается для каждого свойства объекта или массива, для которого выполняется преобразование в строку.</target>
        </trans-unit>
        <trans-unit id="08711e711134e579523d56126b09874d8022e4b2" translate="yes" xml:space="preserve">
          <source>Inserts</source>
          <target state="translated">Inserts</target>
        </trans-unit>
        <trans-unit id="2b48e8876ecb78ba7e1968f36e0fd6a0717b2571" translate="yes" xml:space="preserve">
          <source>Inserts a &quot;$&quot;.</source>
          <target state="translated">Вставляет &quot;$&quot;.</target>
        </trans-unit>
        <trans-unit id="40864899bf9e01467baa3d38448be2a7cdcbcb11" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;code&gt;&quot;$&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce7b5d4c8da12992edd7415b06c863f63baa582" translate="yes" xml:space="preserve">
          <source>Inserts the matched substring.</source>
          <target state="translated">Вставляет подходящую подложку.</target>
        </trans-unit>
        <trans-unit id="e58f47bb0ef2776a10dd15f573a06a8e5d0afde5" translate="yes" xml:space="preserve">
          <source>Inserts the portion of the string that follows the matched substring.</source>
          <target state="translated">Вставляет ту часть строки,которая следует за соответствующей подстрокой.</target>
        </trans-unit>
        <trans-unit id="4fed5693b7d1971ffd7cacdb16b81e94032e1511" translate="yes" xml:space="preserve">
          <source>Inserts the portion of the string that precedes the matched substring.</source>
          <target state="translated">Вставляет ту часть строки,которая предшествует подходящей подстроке.</target>
        </trans-unit>
        <trans-unit id="ca5c1c3094ae7abe52cdce1ab07a6ed84f2ed2aa" translate="yes" xml:space="preserve">
          <source>Inside a character set, the dot loses its special meaning and matches a literal dot.</source>
          <target state="translated">Внутри набора символов точка теряет свое особое значение и совпадает с буквальной точкой.</target>
        </trans-unit>
        <trans-unit id="362024d61ebb70536bd9394b65dd78d5aad24d05" translate="yes" xml:space="preserve">
          <source>Inside a function, the value of &lt;code&gt;this&lt;/code&gt; depends on how the function is called.</source>
          <target state="translated">Внутри функции значение &lt;code&gt;this&lt;/code&gt; зависит от того, как функция вызывается.</target>
        </trans-unit>
        <trans-unit id="d0721f17dea6dcfcdf19c0b198b3112c883bdb01" translate="yes" xml:space="preserve">
          <source>Inside array comprehensions, these two kinds of components are allowed:</source>
          <target state="translated">Внутреннее понимание массива,эти два вида компонентов разрешены:</target>
        </trans-unit>
        <trans-unit id="8fe9bbfb9b980fa6c2f05256bb9bacf12e9bebf9" translate="yes" xml:space="preserve">
          <source>Inside instance methods, &lt;code&gt;this&lt;/code&gt; refers to the instance itself. In subclasses, &lt;code&gt;super&lt;/code&gt; lets you access the superclass prototype, allowing you to call methods from the superclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e60640aa891200ac53331b0be76d088bf2cff8" translate="yes" xml:space="preserve">
          <source>Insignificant &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/whitespace&quot;&gt;whitespace&lt;/a&gt; may be present anywhere except within a &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; (numbers must contain no whitespace) or &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U+0009&lt;/a&gt;), carriage return (&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U+000D&lt;/a&gt;), line feed (&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U+000A&lt;/a&gt;), and space (&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U+0020&lt;/a&gt;) characters are the only valid whitespace characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3b9e6560de73eb8bc85eb42a04c1141865b37d" translate="yes" xml:space="preserve">
          <source>Insignificant whitespace may be present anywhere except within a &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; (numbers must contain no whitespace) or &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; (where it is interpreted as the corresponding character in the string, or would cause an error). The tab character (&lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U+0009&lt;/a&gt;), carriage return (&lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U+000D&lt;/a&gt;), line feed (&lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U+000A&lt;/a&gt;), and space (&lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U+0020&lt;/a&gt;) characters are the only valid whitespace characters.</source>
          <target state="translated">Незначительные пробелы могут присутствовать где угодно, кроме &lt;code&gt;&lt;var&gt;JSONNumber&lt;/var&gt;&lt;/code&gt; (числа не должны содержать пробелов) или &lt;code&gt;&lt;var&gt;JSONString&lt;/var&gt;&lt;/code&gt; (где он интерпретируется как соответствующий символ в строке или может вызвать ошибку). Символ табуляции ( &lt;a href=&quot;http://unicode-table.com/en/0009/&quot;&gt;U + 0009&lt;/a&gt; ), возврат каретки ( &lt;a href=&quot;http://unicode-table.com/en/000D/&quot;&gt;U + 000D&lt;/a&gt; ), линия подачи ( &lt;a href=&quot;http://unicode-table.com/en/000A/&quot;&gt;U + 000A&lt;/a&gt; ) и пространство ( &lt;a href=&quot;http://unicode-table.com/en/0020/&quot;&gt;U + 0020&lt;/a&gt; ) символов являются единственными допустимыми символами пробела.</target>
        </trans-unit>
        <trans-unit id="6ab7d1d49dd26afc2c53ee28fa81799fd390b0a3" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
          <target state="translated">Методы инстанций</target>
        </trans-unit>
        <trans-unit id="c1f424042c7e8bee2655a6672ddd3752109cc8d7" translate="yes" xml:space="preserve">
          <source>Instance properties</source>
          <target state="translated">Экстраординарные свойства</target>
        </trans-unit>
        <trans-unit id="755387148de4cd392d1630cb598a8c5176cd9afc" translate="yes" xml:space="preserve">
          <source>Instance properties must be defined inside of class methods:</source>
          <target state="translated">Свойства экземпляра должны быть определены внутри методов класса:</target>
        </trans-unit>
        <trans-unit id="86d67413e7f102d37a19a41e92518fd07b196a5a" translate="yes" xml:space="preserve">
          <source>Instances</source>
          <target state="translated">Instances</target>
        </trans-unit>
        <trans-unit id="f3a70c71d702bb70b2b487042ba6e7c30d331112" translate="yes" xml:space="preserve">
          <source>Instantiating streaming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581ba3673a3337b2762fb544acd4152c49002ae6" translate="yes" xml:space="preserve">
          <source>Instead of passing a literal string or integer value when creating the new objects, the above statements pass the objects &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;ken&lt;/code&gt; as the parameters for the owners. To find out the name of the owner of &lt;code&gt;car2&lt;/code&gt;, you can access the following property:</source>
          <target state="translated">Вместо передачи буквальной строки или целочисленного значения при создании новых объектов приведенные выше операторы передают объекты &lt;code&gt;rand&lt;/code&gt; и &lt;code&gt;ken&lt;/code&gt; в качестве параметров для владельцев. Чтобы узнать имя владельца &lt;code&gt;car2&lt;/code&gt; , вы можете получить доступ к следующему свойству:</target>
        </trans-unit>
        <trans-unit id="cd76677e2d8a3bd5f8a89f1a1eada212b419dfdf" translate="yes" xml:space="preserve">
          <source>Instead of throwing, &lt;code&gt;JSON.stringify&lt;/code&gt; now produces a string like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75193ab1f417d6c56a3655429671908b8e061a5" translate="yes" xml:space="preserve">
          <source>Instead of using regular expressions for parsing URLs, it is usually better to use the browsers built-in URL parser by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URL_API&quot;&gt;URL API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e05bde158595118d55e0ce91c002d27d730c1f" translate="yes" xml:space="preserve">
          <source>Instead write &quot;foo&quot;:</source>
          <target state="translated">Вместо этого напишите &quot;фу&quot;:</target>
        </trans-unit>
        <trans-unit id="c2466dca884b77085cade35f77be32e5976572af" translate="yes" xml:space="preserve">
          <source>Instead write just 1 without a zero and use at least one digit after a decimal point:</source>
          <target state="translated">Вместо этого запишите только 1 без нуля и используйте по крайней мере одну цифру после запятой:</target>
        </trans-unit>
        <trans-unit id="5b2d66e7682b0dcb605d4bd8661e57ecd97726ab" translate="yes" xml:space="preserve">
          <source>Instead you have to use &lt;a href=&quot;../global_objects/object/keys&quot;&gt;&lt;code&gt;Object.keys&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../global_objects/object/entries&quot;&gt;&lt;code&gt;Object.entries&lt;/code&gt;&lt;/a&gt;, to iterate over the properties or entries of an object.</source>
          <target state="translated">Вместо этого вы должны использовать &lt;a href=&quot;../global_objects/object/keys&quot;&gt; &lt;code&gt;Object.keys&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;../global_objects/object/entries&quot;&gt; &lt;code&gt;Object.entries&lt;/code&gt; &lt;/a&gt; , чтобы перебирать свойства или записи объекта.</target>
        </trans-unit>
        <trans-unit id="e0dc4bb2296425f8a0793107a400c064a277518e" translate="yes" xml:space="preserve">
          <source>Instead you need to use a correct &lt;a href=&quot;../operators/comparison_operators&quot;&gt;comparison operator&lt;/a&gt;. For example:</source>
          <target state="translated">Вместо этого вам нужно использовать правильный &lt;a href=&quot;../operators/comparison_operators&quot;&gt;оператор сравнения&lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="7532357558d58b8bad52cc03601e93e8920a39f9" translate="yes" xml:space="preserve">
          <source>Instead you need to use a correct &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;comparison operator&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ecae46cb3e3f193194f48e69fb49562b84b075" translate="yes" xml:space="preserve">
          <source>Instead you need to use a plus sign for concatenation:</source>
          <target state="translated">Вместо этого нужно использовать знак &quot;плюс&quot; для конкатенирования:</target>
        </trans-unit>
        <trans-unit id="76292350e40ad23d7d412256c27e38fdaf0dd3a1" translate="yes" xml:space="preserve">
          <source>Instead you will need to use &lt;a href=&quot;../global_objects/string/indexof&quot;&gt;&lt;code&gt;String.prototype.indexOf()&lt;/code&gt;&lt;/a&gt;, for example.</source>
          <target state="translated">Вместо этого вам нужно , например, использовать &lt;a href=&quot;../global_objects/string/indexof&quot;&gt; &lt;code&gt;String.prototype.indexOf()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="44e2680b0a0c17af639aaffa8f68cf146a07b0f5" translate="yes" xml:space="preserve">
          <source>Instead, by using &lt;code&gt;matchAll&lt;/code&gt;, you get an iterator to use with the more convenient &lt;a href=&quot;../../statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../operators/spread_syntax&quot;&gt;&lt;code&gt;array spread&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../array/from&quot;&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; constructs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e718841d850e49aba103de513cdaa93d90232f63" translate="yes" xml:space="preserve">
          <source>Instead, omit the &lt;code&gt;var&lt;/code&gt; keyword:</source>
          <target state="translated">Вместо этого опустите ключевое слово &lt;code&gt;var&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1757078b656e7c52f58307e98a78b7315354f37c" translate="yes" xml:space="preserve">
          <source>Instead, use &lt;code&gt;function&lt;/code&gt; instead of &lt;code&gt;def&lt;/code&gt;:</source>
          <target state="translated">Вместо этого используйте &lt;code&gt;function&lt;/code&gt; вместо &lt;code&gt;def&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="599aca68c4dc962e7acfb73fd721311eb7302ad6" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;a href=&quot;../operators/arithmetic_operators#Addition&quot;&gt;+ operator&lt;/a&gt;, a backslash, or &lt;a href=&quot;../template_literals&quot;&gt;template literals&lt;/a&gt;. The &lt;code&gt;+&lt;/code&gt; operator variant looks like this:</source>
          <target state="translated">Вместо этого используйте &lt;a href=&quot;../operators/arithmetic_operators#Addition&quot;&gt;оператор +&lt;/a&gt; , обратную косую черту или &lt;a href=&quot;../template_literals&quot;&gt;литералы шаблона&lt;/a&gt; . Вариант оператора &lt;code&gt;+&lt;/code&gt; выглядит так:</target>
        </trans-unit>
        <trans-unit id="4feb09025f8ee92644b05f5d28aa4adb7bc126b7" translate="yes" xml:space="preserve">
          <source>Instead, use the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#Addition&quot;&gt;+ operator&lt;/a&gt;, a backslash, or &lt;a href=&quot;../template_literals&quot;&gt;template literals&lt;/a&gt;. The &lt;code&gt;+&lt;/code&gt; operator variant looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbc895f8d9aa2582102b700c1698001202a6907" translate="yes" xml:space="preserve">
          <source>Instead, use the&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt; Promise.resolve()&lt;/a&gt; or &lt;a href=&quot;../global_objects/promise/reject&quot;&gt;Promise.reject()&lt;/a&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Method_(computer_programming)#Static_methods&quot;&gt;static methods&lt;/a&gt;:</source>
          <target state="translated">Вместо этого используйте &lt;a href=&quot;https://en.wikipedia.org/wiki/Method_(computer_programming)#Static_methods&quot;&gt;статические методы &lt;/a&gt;&lt;a href=&quot;../global_objects/promise/resolve&quot;&gt;Promise.resolve ()&lt;/a&gt; или &lt;a href=&quot;../global_objects/promise/reject&quot;&gt;Promise.reject ()&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="691e0102b6c4ff1f7d6b4b79971b501f00d71a45" translate="yes" xml:space="preserve">
          <source>Int16Array</source>
          <target state="translated">Int16Array</target>
        </trans-unit>
        <trans-unit id="74dd3902502e084a4df1e4b02b2810f3e797cd06" translate="yes" xml:space="preserve">
          <source>Int16Array.int16Array</source>
          <target state="translated">Int16Array.int16Array</target>
        </trans-unit>
        <trans-unit id="0c9c8691e93fc3ce025dc71a355d7393d4850061" translate="yes" xml:space="preserve">
          <source>Int16Array.length</source>
          <target state="translated">Int16Array.length</target>
        </trans-unit>
        <trans-unit id="5c193dd46f10dac764d5258087bf039ad767fbce" translate="yes" xml:space="preserve">
          <source>Int32Array</source>
          <target state="translated">Int32Array</target>
        </trans-unit>
        <trans-unit id="b53556ea6ca360f680ca700a1230dca12e610dab" translate="yes" xml:space="preserve">
          <source>Int32Array.int32Array</source>
          <target state="translated">Int32Array.int32Array</target>
        </trans-unit>
        <trans-unit id="f26c93914721585282e868e1c2ebee5732099508" translate="yes" xml:space="preserve">
          <source>Int32Array.length</source>
          <target state="translated">Int32Array.length</target>
        </trans-unit>
        <trans-unit id="e088a2144c05ba06fd761a7dbefbb84d2fc79069" translate="yes" xml:space="preserve">
          <source>Int8Array</source>
          <target state="translated">Int8Array</target>
        </trans-unit>
        <trans-unit id="ba334a0153c1765c52a5ebf35e29734b709f62d5" translate="yes" xml:space="preserve">
          <source>Int8Array.int8Array</source>
          <target state="translated">Int8Array.int8Array</target>
        </trans-unit>
        <trans-unit id="10b20c86b339c682e7d8ffa6aba23f3f2f096672" translate="yes" xml:space="preserve">
          <source>Int8Array.length</source>
          <target state="translated">Int8Array.length</target>
        </trans-unit>
        <trans-unit id="1105090c6c0a2edf92fa65478c36a65f5ad15cbc" translate="yes" xml:space="preserve">
          <source>Integer range for &lt;code&gt;Number&lt;/code&gt;</source>
          <target state="translated">Целочисленный диапазон для &lt;code&gt;Number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d12bfc6efb01cb013ad7062520bad116239a06a" translate="yes" xml:space="preserve">
          <source>Integer range for Number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73bb4b5b8345a476d2718ae49ba14176bceb702" translate="yes" xml:space="preserve">
          <source>Integer specifying a limit on the number of splits to be found. The &lt;code&gt;[@@split]()&lt;/code&gt; method still splits on every match of &lt;code&gt;this&lt;/code&gt; RegExp pattern (or, in the Syntax above, &lt;code&gt;&lt;var&gt;regexp&lt;/var&gt;&lt;/code&gt;), until the number of split items match the &lt;code&gt;&lt;var&gt;limit&lt;/var&gt;&lt;/code&gt; or the string falls short of &lt;code&gt;this&lt;/code&gt; pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c58c51c392fd6e958ce0e7867611f13bdeb40ff" translate="yes" xml:space="preserve">
          <source>Integer specifying a limit on the number of splits to be found. When this parameter is provided, the &lt;code&gt;split()&lt;/code&gt; method splits the string at each occurrence of the specified &lt;code&gt;separator&lt;/code&gt; but stops when &lt;code&gt;limit&lt;/code&gt; entries have been placed into the array. It may still contain fewer entries than &lt;code&gt;limit&lt;/code&gt; if the end of the string is reached before the specified limit is reached. The left-over text is not returned in the new array.</source>
          <target state="translated">Целое число, указывающее ограничение на количество найденных разбиений. Если указан этот параметр, метод &lt;code&gt;split()&lt;/code&gt; разбивает строку при каждом вхождении указанного &lt;code&gt;separator&lt;/code&gt; но останавливается, когда в массив помещены элементы &lt;code&gt;limit&lt;/code&gt; . Он может по-прежнему содержать меньше записей, чем &lt;code&gt;limit&lt;/code&gt; если конец строки достигается раньше указанного лимита. Оставшийся текст не возвращается в новом массиве.</target>
        </trans-unit>
        <trans-unit id="40f9b7d1768a1e02150ecacea6dc02e42357f890" translate="yes" xml:space="preserve">
          <source>Integer value representing the day of the month.</source>
          <target state="translated">Целочисленное значение,представляющее день месяца.</target>
        </trans-unit>
        <trans-unit id="2a6db6285e2f46e28c696a0f07cb580eee07e0b6" translate="yes" xml:space="preserve">
          <source>Integer value representing the day of the month. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcbe074de1314a8090bd96f91252df74c70b0e7" translate="yes" xml:space="preserve">
          <source>Integer value representing the hour of the day.</source>
          <target state="translated">Целочисленное значение,представляющее час дня.</target>
        </trans-unit>
        <trans-unit id="6a92ec5d33817f2d3eb3f1246ff89042bc00c1f4" translate="yes" xml:space="preserve">
          <source>Integer value representing the hour of the day. The default is &lt;code&gt;0&lt;/code&gt; (midnight).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cf13846246cef5d1c62df7a0b15451169bda90" translate="yes" xml:space="preserve">
          <source>Integer value representing the millisecond segment of a time.</source>
          <target state="translated">Целочисленное значение,представляющее миллисекундный отрезок времени.</target>
        </trans-unit>
        <trans-unit id="ca334588231b02151923da985b15d0517f7044d8" translate="yes" xml:space="preserve">
          <source>Integer value representing the millisecond segment of a time. The default is &lt;code&gt;0&lt;/code&gt; milliseconds past the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241a7a4eb2efe8cc61b6dd45dbfef2428df56460" translate="yes" xml:space="preserve">
          <source>Integer value representing the minute segment of a time.</source>
          <target state="translated">Целочисленное значение,представляющее минутный сегмент времени.</target>
        </trans-unit>
        <trans-unit id="c55b1b23638822b002f872ef1399c1dce7c43bce" translate="yes" xml:space="preserve">
          <source>Integer value representing the minute segment of a time. The default is &lt;code&gt;0&lt;/code&gt; minutes past the hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be02731127495b3b13396f2468f942ddd732796e" translate="yes" xml:space="preserve">
          <source>Integer value representing the month, beginning with 0 for January to 11 for December.</source>
          <target state="translated">Целочисленное значение,представляющее месяц,начиная с 0 за январь и заканчивая 11 за декабрь.</target>
        </trans-unit>
        <trans-unit id="ec6061d76ffe3bdd32f9a9b9467335359184763f" translate="yes" xml:space="preserve">
          <source>Integer value representing the month, beginning with &lt;code&gt;0&lt;/code&gt; for January to &lt;code&gt;11&lt;/code&gt; for December.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbce99ca6771dbb1b8cb6588d10e62f7b1e9d10d" translate="yes" xml:space="preserve">
          <source>Integer value representing the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored (Unix Epoch; but consider that most Unix timestamp functions count in seconds).</source>
          <target state="translated">Целочисленное значение,представляющее количество миллисекунд,начиная с 1 января 1970 года,00:00:00 UTC,с игнорированием високосных секунд (Unix Epoch;но учтите,что большинство Unix-функций временных меток подсчитываются в секундах).</target>
        </trans-unit>
        <trans-unit id="83e39e42a0a037d33ecb1c8a3c5eea08f0b99cf3" translate="yes" xml:space="preserve">
          <source>Integer value representing the second segment of a time.</source>
          <target state="translated">Целочисленное значение,представляющее второй отрезок времени.</target>
        </trans-unit>
        <trans-unit id="990d07e9428e4e06b28d65c12610c0be2bea1de5" translate="yes" xml:space="preserve">
          <source>Integer value representing the second segment of a time. The default is &lt;code&gt;0&lt;/code&gt; seconds past the minute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32cf3539f6dcc069f8ad832c4717fc44eb3a7ac" translate="yes" xml:space="preserve">
          <source>Integer value representing the year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db4d14c7dc17afe340582090d55b7545c1b3eb0" translate="yes" xml:space="preserve">
          <source>Integer value representing the year. Values from 0 to 99 map to the years 1900 to 1999. See the &lt;a href=&quot;#Two_digit_years_map_to_1900_-_1999&quot;&gt;example below&lt;/a&gt;.</source>
          <target state="translated">Целочисленное значение, представляющее год. Значения от 0 до 99 соответствуют периодам с 1900 по 1999 годы. См. &lt;a href=&quot;#Two_digit_years_map_to_1900_-_1999&quot;&gt;Пример ниже&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="58d19aea53b7c71a47e68c4a4db3ee1abb16b291" translate="yes" xml:space="preserve">
          <source>Integers with arbitrary precision: &lt;a href=&quot;../bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71c075259752a2939bdd6faa004b91f60e192a1" translate="yes" xml:space="preserve">
          <source>Integers with arbitrary precision: &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04591ed8cd35a609e53970d909ddd65bdd9925c" translate="yes" xml:space="preserve">
          <source>Interceptions</source>
          <target state="translated">Interceptions</target>
        </trans-unit>
        <trans-unit id="d68324d2f9cb7da0deed981cf558925381f4aba7" translate="yes" xml:space="preserve">
          <source>InternalError: too much recursion</source>
          <target state="translated">InternalError:слишком много рекурсии</target>
        </trans-unit>
        <trans-unit id="6e5a8eb19bb596773f3a9570412498f21d3b1c30" translate="yes" xml:space="preserve">
          <source>Internally calls &lt;code&gt;Promise.prototype.then&lt;/code&gt; on the object upon which is called, passing the parameters &lt;code&gt;undefined&lt;/code&gt; and the &lt;code&gt;onRejected&lt;/code&gt; handler received; then returns the value of that call (which is a &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Внутренне вызывает &lt;code&gt;Promise.prototype.then&lt;/code&gt; для объекта, для которого вызывается, передавая параметры &lt;code&gt;undefined&lt;/code&gt; и &lt;code&gt;onRejected&lt;/code&gt; обработчик onRejected ; затем возвращает значение этого вызова (которое является &lt;a href=&quot;../promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="a01e8a33df41e96537ebd6e4fa7dbce634312754" translate="yes" xml:space="preserve">
          <source>Internally calls &lt;code&gt;Promise.prototype.then&lt;/code&gt; on the object upon which it was called, passing the parameters &lt;code&gt;undefined&lt;/code&gt; and the received &lt;code&gt;&lt;var&gt;onRejected&lt;/var&gt;&lt;/code&gt; handler. Returns the value of that call, which is a &lt;a href=&quot;../promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="translated">Internet Explorer</target>
        </trans-unit>
        <trans-unit id="28e5441a7bdfedada4425bf69cae741f24bb602b" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8 implemented a &lt;code&gt;Object.defineProperty()&lt;/code&gt; method that could &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd229916%28VS.85%29.aspx&quot;&gt;only be used on DOM objects&lt;/a&gt;. A few things need to be noted:</source>
          <target state="translated">В Internet Explorer 8 реализован метод &lt;code&gt;Object.defineProperty()&lt;/code&gt; который можно использовать &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd229916%28VS.85%29.aspx&quot;&gt;только для объектов DOM&lt;/a&gt; . Следует отметить несколько моментов:</target>
        </trans-unit>
        <trans-unit id="5790aa85105b2f707aa89140c69ddea48c4d6e3e" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8 specific notes</source>
          <target state="translated">Internet Explorer 8 специфических примечаний</target>
        </trans-unit>
        <trans-unit id="4138084098c5ad0c43aa900db4e2093e03cbf674" translate="yes" xml:space="preserve">
          <source>Interrupt a function</source>
          <target state="translated">Прерывание функции</target>
        </trans-unit>
        <trans-unit id="148008a6c97111d9a4baac98fac041378bd84ebd" translate="yes" xml:space="preserve">
          <source>Intl</source>
          <target state="translated">Intl</target>
        </trans-unit>
        <trans-unit id="9fec477cb4348073d98179a98fcd20fd16c1b51a" translate="yes" xml:space="preserve">
          <source>Intl Plural Rules Draft</source>
          <target state="translated">Проект правил внутреннего распорядка</target>
        </trans-unit>
        <trans-unit id="691a439705b6454b10075bcadfd1eba82e0809bf" translate="yes" xml:space="preserve">
          <source>Intl.Collator</source>
          <target state="translated">Intl.Collator</target>
        </trans-unit>
        <trans-unit id="94effe562809ae6b476c47a05969b7d808a1b064" translate="yes" xml:space="preserve">
          <source>Intl.Collator.prototype</source>
          <target state="translated">Intl.Collator.prototype</target>
        </trans-unit>
        <trans-unit id="0b377b74eeb9851f1e25bb146f28a1f051d72446" translate="yes" xml:space="preserve">
          <source>Intl.Collator.supportedLocalesOf</source>
          <target state="translated">Intl.Collator.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="91770c02e353a04997b7e8198eb99e13c00635b2" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat</source>
          <target state="translated">Intl.DateTimeFormat</target>
        </trans-unit>
        <trans-unit id="53b8e3b29a45365d097c861e02a57b921194fd5a" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.formatRange&lt;br/&gt;&lt;small&gt;The definition of 'formatRange()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a480f494bd8bc90d0c95105b3580be8e208e1c" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.formatRange&lt;br/&gt;&lt;small&gt;The definition of 'formatRangeToParts()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f720195e10d50c2f6666c80ded510eb7e91ee56" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.prototype</source>
          <target state="translated">Intl.DateTimeFormat.prototype</target>
        </trans-unit>
        <trans-unit id="8c35054313946594df544a441084c18f481dc900" translate="yes" xml:space="preserve">
          <source>Intl.DateTimeFormat.supportedLocalesOf</source>
          <target state="translated">Intl.DateTimeFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="9b7d88b2642ca09451d39add3790c1cc14a36aa2" translate="yes" xml:space="preserve">
          <source>Intl.DisplayNames&lt;br/&gt;&lt;small&gt;The definition of 'DisplayNames' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94b5310b4384eb20295eeaf505395a6d991d83f" translate="yes" xml:space="preserve">
          <source>Intl.DisplayNames&lt;br/&gt;&lt;small&gt;The definition of 'of()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662f14f46884aa95834a1588d40549e8d3ef42f3" translate="yes" xml:space="preserve">
          <source>Intl.DisplayNames&lt;br/&gt;&lt;small&gt;The definition of 'resolvedOptions()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce74ef0e2026bcb703e439098d39a9c66944cfe" translate="yes" xml:space="preserve">
          <source>Intl.DisplayNames&lt;br/&gt;&lt;small&gt;The definition of 'supportedLocalesOf()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7d60aefef8890739b8a0d5560eb4be9242f7aa" translate="yes" xml:space="preserve">
          <source>Intl.DisplayNames&lt;br/&gt;&lt;small&gt;The definition of 'the Intl.DisplayNames constructor' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10690905177146e152defb42870864c9ae82485e" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'ListFormat' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3415ade088a57e89a79047d0290559751e61d1e1" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'ListFormat()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15efe36f8e2851508049e320d433a7b34a9ff35" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'format()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fb80ad846ab7bc465f233a69fbf968aea0e12e" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'formatToParts()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6831e2799cb40587c25cec0c3ee885ef3a1521df" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'resolvedOptions()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2f955c3652989863016f35127b98b5b16cf423" translate="yes" xml:space="preserve">
          <source>Intl.ListFormat&lt;br/&gt;&lt;small&gt;The definition of 'supportedLocalesOf()' in that specification.&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7267adddab78d6c517f39c7fbcf74e8abc940038" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat</source>
          <target state="translated">Intl.NumberFormat</target>
        </trans-unit>
        <trans-unit id="3d26a08d98ebcd5d28de6ddf3c2bd9cb829194a0" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat.prototype</source>
          <target state="translated">Intl.NumberFormat.prototype</target>
        </trans-unit>
        <trans-unit id="607ba4bc780b223d3fd5127334576ba2f8e0667c" translate="yes" xml:space="preserve">
          <source>Intl.NumberFormat.supportedLocalesOf</source>
          <target state="translated">Intl.NumberFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="2ae330bc0409789151c5dbe293103be5c2738356" translate="yes" xml:space="preserve">
          <source>Intl.collator</source>
          <target state="translated">Intl.collator</target>
        </trans-unit>
        <trans-unit id="37a2147bca7a81e445be254639695b2d36e9dab4" translate="yes" xml:space="preserve">
          <source>Intl.collator.Collator</source>
          <target state="translated">Intl.collator.Collator</target>
        </trans-unit>
        <trans-unit id="66c7f57d39868752ebca01af0acb783a59f9ca74" translate="yes" xml:space="preserve">
          <source>Intl.collator.compare</source>
          <target state="translated">Intl.collator.compare</target>
        </trans-unit>
        <trans-unit id="9236ad9d72ffabd8ab8b1fdd93b3ae2fe0889b2d" translate="yes" xml:space="preserve">
          <source>Intl.collator.resolvedOptions</source>
          <target state="translated">Intl.collator.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="2eff65bc6ac8aa78a77d1e6eac11169f6ab1c433" translate="yes" xml:space="preserve">
          <source>Intl.collator.supportedLocalesOf</source>
          <target state="translated">Intl.collator.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="9caee312952f9b273482708a3e2762010e2777b1" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat</source>
          <target state="translated">Intl.dateTimeFormat</target>
        </trans-unit>
        <trans-unit id="af147f1d60eb72b1058536312710d721d237f528" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.DateTimeFormat</source>
          <target state="translated">Intl.dateTimeFormat.DateTimeFormat</target>
        </trans-unit>
        <trans-unit id="ac6e598b10bdd85f1d5e69697d5f02158893d3a3" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.format</source>
          <target state="translated">Intl.dateTimeFormat.format</target>
        </trans-unit>
        <trans-unit id="14060908061e54d402820099ffd049487afb6f1d" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.formatRange</source>
          <target state="translated">Intl.dateTimeFormat.formatRange</target>
        </trans-unit>
        <trans-unit id="460f3dc6b35b7da8c7a513f341e23ca5ff9bf3ff" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.formatRangeToParts</source>
          <target state="translated">Intl.dateTimeFormat.formatRangeToParts</target>
        </trans-unit>
        <trans-unit id="79234597f72df02f1a94d543bde865a99bd7d684" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.formatToParts</source>
          <target state="translated">Intl.dateTimeFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="904c6383f067aec078a7b1768309a99adb54dfca" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.resolvedOptions</source>
          <target state="translated">Intl.dateTimeFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="f8a740d0eafa0ee07ba2e7c434f454b6b8bc7428" translate="yes" xml:space="preserve">
          <source>Intl.dateTimeFormat.supportedLocalesOf</source>
          <target state="translated">Intl.dateTimeFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="6d237b991b0c3257a2fbaef02e081940bc0aae9a" translate="yes" xml:space="preserve">
          <source>Intl.displayNames</source>
          <target state="translated">Intl.displayNames</target>
        </trans-unit>
        <trans-unit id="69700f39c952d99d6ae7f02241c9f9cb5140a715" translate="yes" xml:space="preserve">
          <source>Intl.displayNames.DisplayNames</source>
          <target state="translated">Intl.displayNames.DisplayNames</target>
        </trans-unit>
        <trans-unit id="32b575e92ce4f4812cf3fb180702341bc4da9ee1" translate="yes" xml:space="preserve">
          <source>Intl.displayNames.of</source>
          <target state="translated">Intl.displayNames.of</target>
        </trans-unit>
        <trans-unit id="b86091119aaf39a52f1f0f5a0d2c3f547864c1ad" translate="yes" xml:space="preserve">
          <source>Intl.displayNames.resolvedOptions</source>
          <target state="translated">Intl.displayNames.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="69727f4fd19fd0407728cc227a1aeb300024545c" translate="yes" xml:space="preserve">
          <source>Intl.displayNames.supportedLocalesOf</source>
          <target state="translated">Intl.displayNames.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="091fff844313d48a74de1aab92c22d59e6263ad4" translate="yes" xml:space="preserve">
          <source>Intl.getCanonicalLocales</source>
          <target state="translated">Intl.getCanonicalLocales</target>
        </trans-unit>
        <trans-unit id="a906112163b80fea73f2be42d39dcead37da1403" translate="yes" xml:space="preserve">
          <source>Intl.listFormat</source>
          <target state="translated">Intl.listFormat</target>
        </trans-unit>
        <trans-unit id="6c15036de402e442ffa3a29ae9b2ab02496ee004" translate="yes" xml:space="preserve">
          <source>Intl.listFormat.ListFormat</source>
          <target state="translated">Intl.listFormat.ListFormat</target>
        </trans-unit>
        <trans-unit id="8ce65e2c1e95e19ecaed09979db016b070b04a26" translate="yes" xml:space="preserve">
          <source>Intl.listFormat.format</source>
          <target state="translated">Intl.listFormat.format</target>
        </trans-unit>
        <trans-unit id="da88e49fb21512b04845c41bab7e09b1b7d195fa" translate="yes" xml:space="preserve">
          <source>Intl.listFormat.formatToParts</source>
          <target state="translated">Intl.listFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="f62ffd3d29eb39589268510804510a36bcd55905" translate="yes" xml:space="preserve">
          <source>Intl.listFormat.resolvedOptions</source>
          <target state="translated">Intl.listFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="e4e0224dd7998a9842e6edd21a4692a79b929faf" translate="yes" xml:space="preserve">
          <source>Intl.listFormat.supportedLocalesOf</source>
          <target state="translated">Intl.listFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="08561a48a489f4f7f6ee56c9a6f187e074ffdb79" translate="yes" xml:space="preserve">
          <source>Intl.locale</source>
          <target state="translated">Intl.locale</target>
        </trans-unit>
        <trans-unit id="fa032c5ea1238cadc23a1168dfd04e1a043db3fe" translate="yes" xml:space="preserve">
          <source>Intl.locale.Locale</source>
          <target state="translated">Intl.locale.Locale</target>
        </trans-unit>
        <trans-unit id="1a875d1e6fb3e5f5a46a514d4470577e00c67940" translate="yes" xml:space="preserve">
          <source>Intl.locale.baseName</source>
          <target state="translated">Intl.locale.baseName</target>
        </trans-unit>
        <trans-unit id="1aa888bea57baaf2a37d6236dfb67c007b8f6634" translate="yes" xml:space="preserve">
          <source>Intl.locale.calendar</source>
          <target state="translated">Intl.locale.calendar</target>
        </trans-unit>
        <trans-unit id="29e6d2d488eedec82f01fea961b9c9590f0d4073" translate="yes" xml:space="preserve">
          <source>Intl.locale.caseFirst</source>
          <target state="translated">Intl.locale.caseFirst</target>
        </trans-unit>
        <trans-unit id="308af03ef6a3583cd5cccfa55381094ce4e3c3c2" translate="yes" xml:space="preserve">
          <source>Intl.locale.collation</source>
          <target state="translated">Intl.locale.collation</target>
        </trans-unit>
        <trans-unit id="87e8ae3048ca020c3e4413b58b69ffda90271325" translate="yes" xml:space="preserve">
          <source>Intl.locale.hourCycle</source>
          <target state="translated">Intl.locale.hourCycle</target>
        </trans-unit>
        <trans-unit id="07e3a47c0986027f4022247f753d1582a33fb61a" translate="yes" xml:space="preserve">
          <source>Intl.locale.language</source>
          <target state="translated">Intl.locale.language</target>
        </trans-unit>
        <trans-unit id="6038b6b47b5bbbcf2c4c4278eca304afd2fa5932" translate="yes" xml:space="preserve">
          <source>Intl.locale.maximize</source>
          <target state="translated">Intl.locale.maximize</target>
        </trans-unit>
        <trans-unit id="8a57daabe28cd8ee22749029bac37f3bf8428d98" translate="yes" xml:space="preserve">
          <source>Intl.locale.minimize</source>
          <target state="translated">Intl.locale.minimize</target>
        </trans-unit>
        <trans-unit id="56416fbb3e0021a60979a3602afede3388c7a0fc" translate="yes" xml:space="preserve">
          <source>Intl.locale.numberingSystem</source>
          <target state="translated">Intl.locale.numberingSystem</target>
        </trans-unit>
        <trans-unit id="4d3b740a61e1ac7474a9cd43de223a5ace0261f8" translate="yes" xml:space="preserve">
          <source>Intl.locale.numeric</source>
          <target state="translated">Intl.locale.numeric</target>
        </trans-unit>
        <trans-unit id="f61448222f4cca64b198d65e7d6ae5292c46ed08" translate="yes" xml:space="preserve">
          <source>Intl.locale.region</source>
          <target state="translated">Intl.locale.region</target>
        </trans-unit>
        <trans-unit id="2020f57e6cf55934e1c82125e12e990823c866a0" translate="yes" xml:space="preserve">
          <source>Intl.locale.script</source>
          <target state="translated">Intl.locale.script</target>
        </trans-unit>
        <trans-unit id="1365bbc7432f7b058db80e95fbd6cc1fae7b7260" translate="yes" xml:space="preserve">
          <source>Intl.locale.toString</source>
          <target state="translated">Intl.locale.toString</target>
        </trans-unit>
        <trans-unit id="00c49a3f60c71eb0652e150e70eda353d6e3d28f" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat</source>
          <target state="translated">Intl.numberFormat</target>
        </trans-unit>
        <trans-unit id="fac7fc610981ccf14fdd96f89dc96b9c670b6546" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.NumberFormat</source>
          <target state="translated">Intl.numberFormat.NumberFormat</target>
        </trans-unit>
        <trans-unit id="461a6cbec9e5f4d76bf0dcce35f41b5fae08133d" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.format</source>
          <target state="translated">Intl.numberFormat.format</target>
        </trans-unit>
        <trans-unit id="0244be6b0c3a6a82ba4428fb87fd56189351f3d2" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.formatToParts</source>
          <target state="translated">Intl.numberFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="e2d465b50d59450e9d5c5b8344aa05c1fd17b8ed" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.resolvedOptions</source>
          <target state="translated">Intl.numberFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="21062d29d6112b3f7f85af6fb38e12691e3f11a1" translate="yes" xml:space="preserve">
          <source>Intl.numberFormat.supportedLocalesOf</source>
          <target state="translated">Intl.numberFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="430b53d7d14202a263350cdd04ff07e88211d747" translate="yes" xml:space="preserve">
          <source>Intl.pluralRules</source>
          <target state="translated">Intl.pluralRules</target>
        </trans-unit>
        <trans-unit id="fd2f22fa4c29c3c36614cdf023556b97cd569b4d" translate="yes" xml:space="preserve">
          <source>Intl.pluralRules.PluralRules</source>
          <target state="translated">Intl.pluralRules.PluralRules</target>
        </trans-unit>
        <trans-unit id="4f59f59b29c8388f6de17e37ec0528ba37e2cff6" translate="yes" xml:space="preserve">
          <source>Intl.pluralRules.resolvedOptions</source>
          <target state="translated">Intl.pluralRules.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="41db67d9ea99fc95bedc6d9e5b890fe25d8909d9" translate="yes" xml:space="preserve">
          <source>Intl.pluralRules.select</source>
          <target state="translated">Intl.pluralRules.select</target>
        </trans-unit>
        <trans-unit id="c4a92c0c0d272b10504443d2fd4f5325c08e376a" translate="yes" xml:space="preserve">
          <source>Intl.pluralRules.supportedLocalesOf</source>
          <target state="translated">Intl.pluralRules.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="7fd24315668dbf01040e1a9bb075a97317179a27" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat</source>
          <target state="translated">Intl.relativeTimeFormat</target>
        </trans-unit>
        <trans-unit id="d9d49968b9259489052d18289280b6822771b019" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat.RelativeTimeFormat</source>
          <target state="translated">Intl.relativeTimeFormat.RelativeTimeFormat</target>
        </trans-unit>
        <trans-unit id="ac75dc9aba67385a4289991c18f95c80f8dab62b" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat.format</source>
          <target state="translated">Intl.relativeTimeFormat.format</target>
        </trans-unit>
        <trans-unit id="6a31de526e47ad783339c29abd1107d416f82ce0" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat.formatToParts</source>
          <target state="translated">Intl.relativeTimeFormat.formatToParts</target>
        </trans-unit>
        <trans-unit id="e6f9c5f560ca141d9484c53dffaa38190f162775" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat.resolvedOptions</source>
          <target state="translated">Intl.relativeTimeFormat.resolvedOptions</target>
        </trans-unit>
        <trans-unit id="66e80d0cf0bf911556166f07120b2b030cb869c6" translate="yes" xml:space="preserve">
          <source>Intl.relativeTimeFormat.supportedLocalesOf</source>
          <target state="translated">Intl.relativeTimeFormat.supportedLocalesOf</target>
        </trans-unit>
        <trans-unit id="0f821397d0f52bfe785a3b5ae0994d5665808b0d" translate="yes" xml:space="preserve">
          <source>Introduced in Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30). Functions declared in the function body cannot be referred to inside the outer function]s default parameters. If attempted, a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; is thrown. Default parameters are always executed first, so function declarations inside the function body evaluate afterwards.</source>
          <target state="translated">Представлено в Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30). На функции, объявленные в теле функции, нельзя ссылаться внутри параметров по умолчанию внешней функции. При попытке &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; ошибка ReferenceError . Параметры по умолчанию всегда выполняются первыми, поэтому объявления функций внутри тела функции оцениваются позже.</target>
        </trans-unit>
        <trans-unit id="3c3fbd2398c4e535f509ed566c2214525cbf5078" translate="yes" xml:space="preserve">
          <source>Introduction to Object-Oriented JavaScript</source>
          <target state="translated">Введение в объектно-ориентированный JavaScript</target>
        </trans-unit>
        <trans-unit id="8e006f5d6c51e5f500e63738a7a4e5ab708ef28b" translate="yes" xml:space="preserve">
          <source>Introduction to source maps &amp;ndash; HTML5 rocks</source>
          <target state="translated">Введение в исходные карты - HTML5 Rock</target>
        </trans-unit>
        <trans-unit id="685d8b8a451d5c25429cf00e02a70396ec23ea94" translate="yes" xml:space="preserve">
          <source>Introduction: &lt;a href=&quot;http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;The ECMAScript Internationalization API&lt;/a&gt;</source>
          <target state="translated">Введение: &lt;a href=&quot;http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;API интернационализации ECMAScript&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43c9754a8861b7fd0f8dd51ab243bdb722045151" translate="yes" xml:space="preserve">
          <source>Introduction: &lt;a href=&quot;https://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html&quot;&gt;The ECMAScript Internationalization API&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94a1b20a86da8d8ef52d86140d5faa7244a1b37" translate="yes" xml:space="preserve">
          <source>Invalid &lt;code&gt;for-of&lt;/code&gt; loop</source>
          <target state="translated">Недействительный цикл &lt;code&gt;for-of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="660272f83ac71948bccc6b24478abcb5e8309a01" translate="yes" xml:space="preserve">
          <source>Invalid JavaScript identifier as a property name</source>
          <target state="translated">Недействительный идентификатор JavaScript как имя свойства</target>
        </trans-unit>
        <trans-unit id="6cb64cdbd8ca48ac355e5ba934792e50b7b643a3" translate="yes" xml:space="preserve">
          <source>Invalid array length</source>
          <target state="translated">Недействительная длина массива</target>
        </trans-unit>
        <trans-unit id="2bb5db0093030ed959d9e116d255a162895d06b8" translate="yes" xml:space="preserve">
          <source>Invalid assignment left-hand side</source>
          <target state="translated">Недействительное задание слева</target>
        </trans-unit>
        <trans-unit id="b7aa12cebc342348149a588c562fbe64f3283163" translate="yes" xml:space="preserve">
          <source>Invalid cases</source>
          <target state="translated">Недействительные случаи</target>
        </trans-unit>
        <trans-unit id="9e0f593040b832479d554e779693995956176e29" translate="yes" xml:space="preserve">
          <source>Invalid const assignment</source>
          <target state="translated">Недействительное назначение</target>
        </trans-unit>
        <trans-unit id="3f45d8ccffe75e10e46696189989b5121bdc235b" translate="yes" xml:space="preserve">
          <source>Invalid date</source>
          <target state="translated">Недействительная дата</target>
        </trans-unit>
        <trans-unit id="1ee4d92944915ed61af938fd4b4fb38eb5ca730a" translate="yes" xml:space="preserve">
          <source>Invalid for-in initializer</source>
          <target state="translated">Недействительный инициализатор</target>
        </trans-unit>
        <trans-unit id="a1afb0a15ce516af40f158e64da36cf6e02266c4" translate="yes" xml:space="preserve">
          <source>Invalid for-of initializer</source>
          <target state="translated">Недействительный для инициализатора</target>
        </trans-unit>
        <trans-unit id="a0a196b58c85a10ea9cf485d0b56fe28ac2f61a4" translate="yes" xml:space="preserve">
          <source>Invalid input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4b82ac678593606aa369204a68abe42e54f0ff" translate="yes" xml:space="preserve">
          <source>Invalid octal numbers</source>
          <target state="translated">недействительные восьмеричные числа</target>
        </trans-unit>
        <trans-unit id="d6e64d0ec42180ad42843b3147e19fa8b02da721" translate="yes" xml:space="preserve">
          <source>Invalid redeclaration</source>
          <target state="translated">Недействительная редекларация</target>
        </trans-unit>
        <trans-unit id="3390616cafac7ff314d6aadaf20e48034cbb3314" translate="yes" xml:space="preserve">
          <source>Invariants</source>
          <target state="translated">Invariants</target>
        </trans-unit>
        <trans-unit id="4e1321c7e45e4c40761381b9b683387d488bf32f" translate="yes" xml:space="preserve">
          <source>Inverts the bits of its operand.</source>
          <target state="translated">Инвертирует кусочки его оперы.</target>
        </trans-unit>
        <trans-unit id="5fd458722c8cfcbb53c39ea1f3c5645c09338076" translate="yes" xml:space="preserve">
          <source>Invoked through call or apply</source>
          <target state="translated">Вызов по телефону или заявка</target>
        </trans-unit>
        <trans-unit id="32a22853078d6023f226d27e51d0b2a6e5b9ae81" translate="yes" xml:space="preserve">
          <source>Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.</source>
          <target state="translated">Ссылается на любую доступную отладочную функциональность.Если функциональность отладки недоступна,данное утверждение не имеет никакого эффекта.</target>
        </trans-unit>
        <trans-unit id="546fbb50ff089e3855d79b13d86e4a369e5a842d" translate="yes" xml:space="preserve">
          <source>Invoking JavaScript &lt;code&gt;Date&lt;/code&gt; as a function (i.e., without the &lt;a href=&quot;../operators/new&quot;&gt;&lt;code&gt;new&lt;/code&gt;&lt;/a&gt; operator) will return a string representing the current date and time.</source>
          <target state="translated">Вызов JavaScript &lt;code&gt;Date&lt;/code&gt; как функции (т. Е. Без оператора &lt;a href=&quot;../operators/new&quot;&gt; &lt;code&gt;new&lt;/code&gt; &lt;/a&gt; ) вернет строку, представляющую текущую дату и время.</target>
        </trans-unit>
        <trans-unit id="7bc5e46ab780fcbc7794152fa6c4870b7d727aa2" translate="yes" xml:space="preserve">
          <source>Invoking strict mode</source>
          <target state="translated">Призыв к строгому режиму</target>
        </trans-unit>
        <trans-unit id="208ae9750e5d18010716a63f7a64c8864b8720b3" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;AsyncFunction&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">Вызов конструктора &lt;code&gt;AsyncFunction&lt;/code&gt; как функции (без использования оператора &lt;code&gt;new&lt;/code&gt; ) имеет тот же эффект, что и его вызов как конструктор.</target>
        </trans-unit>
        <trans-unit id="1f49636aa3cddb53862e739e488ae9fb9c6c0139" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;Function&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">Вызов конструктора &lt;code&gt;Function&lt;/code&gt; как функции (без использования оператора &lt;code&gt;new&lt;/code&gt; ) имеет тот же эффект, что и его вызов как конструктор.</target>
        </trans-unit>
        <trans-unit id="a09fdf87d82db4d13b9fdd5d76e4b7e7f19d7fac" translate="yes" xml:space="preserve">
          <source>Invoking the &lt;code&gt;GeneratorFunction&lt;/code&gt; constructor as a function (without using the &lt;code&gt;new&lt;/code&gt; operator) has the same effect as invoking it as a constructor.</source>
          <target state="translated">Вызов конструктора &lt;code&gt;GeneratorFunction&lt;/code&gt; как функции (без использования оператора &lt;code&gt;new&lt;/code&gt; ) имеет тот же эффект, что и его вызов как конструктор.</target>
        </trans-unit>
        <trans-unit id="b4cd7f60b4d184101c2a6bf4b757b7b2b30bac77" translate="yes" xml:space="preserve">
          <source>Is a generator object an iterator or an iterable?</source>
          <target state="translated">Объект генератора-итератор или итерабельный?</target>
        </trans-unit>
        <trans-unit id="0b0d56ef77469a2f756007c6a62fa7926b600b31" translate="yes" xml:space="preserve">
          <source>Is a stateful, executable instance of a &lt;a href=&quot;webassembly/module&quot;&gt;WebAssembly.Module&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690a13704ccda7c99a1f2a9585cf62a8ecc1ef9e" translate="yes" xml:space="preserve">
          <source>Is the same function as the &lt;code&gt;values()&lt;/code&gt; function and returns a new &lt;code&gt;Iterator&lt;/code&gt; object that contains the values for each element in the &lt;code&gt;Set&lt;/code&gt; object in insertion order.</source>
          <target state="translated">Является той же функцией, что и функция &lt;code&gt;values()&lt;/code&gt; и возвращает новый объект &lt;code&gt;Iterator&lt;/code&gt; , который содержит значения для каждого элемента в объекте &lt;code&gt;Set&lt;/code&gt; в порядке вставки.</target>
        </trans-unit>
        <trans-unit id="85e72c54a7bd7b359f951ce0cec2a49a4cc1a1e9" translate="yes" xml:space="preserve">
          <source>Islamic calendar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6c9b7721983d028dd6b6835424ec02386ee0ea" translate="yes" xml:space="preserve">
          <source>Islamic calendar, Saudi Arabia sighting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5234d4e22a68028d391c6d5b36a0c601c53b1db" translate="yes" xml:space="preserve">
          <source>Islamic calendar, Umm al-Qura</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b677d93215863df058f74ef8e8d0b7e1ea5cd" translate="yes" xml:space="preserve">
          <source>Islamic calendar, tabular (intercalary years [2,5,7,10,13,16,18,21,24,26,29] - astronomical epoch)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21fcea05d1e7a967786aa80619b946ca2d58671" translate="yes" xml:space="preserve">
          <source>Islamic calendar, tabular (intercalary years [2,5,7,10,13,16,18,21,24,26,29] - civil epoch)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237c366b14d4ac2c7ac8dcc981e25cf07610f224" translate="yes" xml:space="preserve">
          <source>Issue with &lt;code&gt;JSON.stringify()&lt;/code&gt; when serializing circular references</source>
          <target state="translated">Проблема с &lt;code&gt;JSON.stringify()&lt;/code&gt; при сериализации циклических ссылок</target>
        </trans-unit>
        <trans-unit id="0fe883a4a2cebd3337cac0b6f63f321bc9cfbcf4" translate="yes" xml:space="preserve">
          <source>Issue with JSON.stringify() when serializing circular references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5600fcf5422fc9dfe3b3d78fa586442113fe282e" translate="yes" xml:space="preserve">
          <source>Issue with plain &lt;code&gt;JSON.stringify&lt;/code&gt; for use as JavaScript</source>
          <target state="translated">Проблема с простым &lt;code&gt;JSON.stringify&lt;/code&gt; для использования в качестве JavaScript</target>
        </trans-unit>
        <trans-unit id="cfecb0665bc38a3d23f86eec2febbf45d4496177" translate="yes" xml:space="preserve">
          <source>Issue with plain JSON.stringify for use as JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f064f8234fa60048c058abe8b49b99a3a6d87a" translate="yes" xml:space="preserve">
          <source>It accepts three arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41203c0da0da22d05561ac067143a1455ee0fac2" translate="yes" xml:space="preserve">
          <source>It allows the code in the string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; to be minified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00081e6a2ee8da25b0c2fa487f2293a0e3a9300f" translate="yes" xml:space="preserve">
          <source>It also avoids a problem if the magnitude of your numbers is huge. The largest number you can represent in JS's double floats is &lt;code&gt;Number.MAX_VALUE =&amp;nbsp;1.797...e+308&lt;/code&gt; . If your numbers are larger than about 1e154, taking the square of them will result in Infinity, demolishing your results. For example, &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) =&amp;nbsp;Infinity&lt;/code&gt; . If you use &lt;code&gt;hypot()&lt;/code&gt; instead, you get a good answer &lt;code&gt;Math.hypot(1e200, 1e200) =&amp;nbsp;1.4142...e+200&lt;/code&gt; . This is also true with very small numbers. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) =&amp;nbsp;0&lt;/code&gt;, but &lt;code&gt;Math.hypot(1e-200, 1e-200) =&lt;/code&gt;&lt;code&gt;1.4142...e-200&lt;/code&gt;, a good answer.</source>
          <target state="translated">Это также позволяет избежать проблем, если размер ваших чисел огромен. Наибольшее число, которое вы можете представить в двойных &lt;code&gt;Number.MAX_VALUE =&amp;nbsp;1.797...e+308&lt;/code&gt; плавающей запятой в JS, - Number.MAX_VALUE = 1,797 ... e + 308 . Если ваши числа больше, чем примерно 1e154, их возведение в квадрат приведет к бесконечности, уничтожая ваши результаты. Например, &lt;code&gt;Math.sqrt(1e200*1e200 + 1e200*1e200) =&amp;nbsp;Infinity&lt;/code&gt; . Если вы вместо этого используете &lt;code&gt;hypot()&lt;/code&gt; , вы получите хороший ответ &lt;code&gt;Math.hypot(1e200, 1e200) =&amp;nbsp;1.4142...e+200&lt;/code&gt; . То же самое и с очень маленькими числами. &lt;code&gt;Math.sqrt(1e-200*1e-200 + 1e-200*1e-200) =&amp;nbsp;0&lt;/code&gt; , но &lt;code&gt;Math.hypot(1e-200, 1e-200) =&lt;/code&gt; &lt;code&gt;1.4142...e-200&lt;/code&gt; , хороший ответ.</target>
        </trans-unit>
        <trans-unit id="e475453a8d4616b44db70ed2898a74507d1d08d9" translate="yes" xml:space="preserve">
          <source>It also means that variables declared inside the function body using &lt;code&gt;var&lt;/code&gt; will mask parameters of the same name, instead of the usual behavior of duplicate &lt;code&gt;var&lt;/code&gt; declarations having no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046a89c09b8e69d7519433ee5f4799dde2a0f2f5" translate="yes" xml:space="preserve">
          <source>It also works when you put &lt;code&gt;default&lt;/code&gt; before all other &lt;code&gt;case&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1ebb7ab8937cf2664e8c849a22e22823d62684" translate="yes" xml:space="preserve">
          <source>It also works when you put default before all other cases.</source>
          <target state="translated">Это также работает,когда вы ставите по умолчанию перед всеми остальными случаями.</target>
        </trans-unit>
        <trans-unit id="898d6cff7f0d4ac02e7c8c72fea0f382f5f1a39e" translate="yes" xml:space="preserve">
          <source>It attempted to call a value from a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen.</source>
          <target state="translated">Она пыталась вызвать значение из функции,но на самом деле значение не является функцией.Какой-то код ожидает,что вы предоставите функцию,но этого не произошло.</target>
        </trans-unit>
        <trans-unit id="b2adb77288fe8601577f558b0c9e3989d99e0757" translate="yes" xml:space="preserve">
          <source>It can be a Function or other non-primitive value.</source>
          <target state="translated">Это может быть Функция или другое непримитивное значение.</target>
        </trans-unit>
        <trans-unit id="c48068ce741966c4d12a0279fea298e01c807447" translate="yes" xml:space="preserve">
          <source>It can be more obscure when using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt;, or other constructs that use a lot of different parenthesis and curly brackets, for example.</source>
          <target state="translated">Это может быть более затемнить при использовании &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt; или другие конструкции , которые используют много различных скобка и фигурные скобки, например.</target>
        </trans-unit>
        <trans-unit id="aaf4352228b453b336e8eafbf659e9e48282c4b5" translate="yes" xml:space="preserve">
          <source>It can be more obscure when using &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;, &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&quot;&gt;Closures&lt;/a&gt;, or other constructs that use a lot of different parenthesis and curly brackets, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637735e5f525f257cdcfa7d7c573a1134e3b31c0" translate="yes" xml:space="preserve">
          <source>It can have an identifier which is either a number or a string;</source>
          <target state="translated">Он может иметь идентификатор,который является либо числом,либо строкой;</target>
        </trans-unit>
        <trans-unit id="9fc2307e6eaf1fcf0e38e3e61b5ed2ac365de539" translate="yes" xml:space="preserve">
          <source>It doesn't have to be the same object, though; it can be a different one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee2b94ebdffc711d03534a6c9c32859543eb863" translate="yes" xml:space="preserve">
          <source>It doesn't work if the string contains grapheme clusters, even when using a unicode aware split (use for example &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; instead).</source>
          <target state="translated">Это не работает, если строка содержит кластеры графемы, даже при использовании разделения с поддержкой Unicode ( вместо этого используйте, например, &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="f947e606472d4347ad32397429bfe2112731e5ac" translate="yes" xml:space="preserve">
          <source>It doesn't work if the string contains grapheme clusters, even when using a unicode-aware split. (Use, for example, &lt;a href=&quot;https://github.com/mathiasbynens/esrever&quot;&gt;esrever&lt;/a&gt; instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fafc92e6281926700d4d162cec8f063e6ae134" translate="yes" xml:space="preserve">
          <source>It is &lt;em&gt;not&lt;/em&gt; called for missing elements of the array; that is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adef4106e76e6addc70a8d2ae997c1248d91d94f" translate="yes" xml:space="preserve">
          <source>It is a good idea to comment &lt;em&gt;intentional&lt;/em&gt; use of the empty statement, as it is not really obvious to distinguish from a normal semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10eb0a5f9478db379a0c234799a056177e982243" translate="yes" xml:space="preserve">
          <source>It is advisable to not use simple assignments in a conditional expression (such as &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt;), because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</source>
          <target state="translated">Не рекомендуется использовать простые присваивания в условном выражении (например, &lt;code&gt;&lt;a href=&quot;../statements/if...else&quot;&gt;if...else&lt;/a&gt;&lt;/code&gt; ), потому что при просмотре кода присвоение можно спутать с равенством. Например, не используйте следующий код:</target>
        </trans-unit>
        <trans-unit id="b1f5b1660aed98af62b5049d964d12af0b3a267c" translate="yes" xml:space="preserve">
          <source>It is advisable to not use simple assignments in a conditional expression, because the assignment can be confused with equality when glancing over the code. For example, do not use the following code:</source>
          <target state="translated">Простые присваивания в условном выражении желательно не использовать,так как при взгляде на код присваивание можно перепутать с равенством.Например,не используйте следующий код:</target>
        </trans-unit>
        <trans-unit id="24d3facbde01a9ba1b0055ecd1c1d62977eb59f1" translate="yes" xml:space="preserve">
          <source>It is almost always safer to provide an &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, because there can be up to &lt;em&gt;four&lt;/em&gt; possible output types without &lt;code&gt;&lt;var&gt;initialValue&lt;/var&gt;&lt;/code&gt;, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0b595c50396c3cdbc92c5f6b750e905ed42003" translate="yes" xml:space="preserve">
          <source>It is also possible to &quot;import/export&quot; from different modules in a parent module so that they are available to import from that module. In other words, one can create a single module concentrating various exports from various modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4cc67af098b1db09d7c4c8d6064bf4903ec064" translate="yes" xml:space="preserve">
          <source>It is also possible to provide a name inside the definition in order to create a &lt;strong&gt;named&lt;/strong&gt; function expression:</source>
          <target state="translated">Также можно указать имя внутри определения для создания &lt;strong&gt;именованного&lt;/strong&gt; выражения функции:</target>
        </trans-unit>
        <trans-unit id="d15511bc331dcf794b253aed11d5d6bc426cf771" translate="yes" xml:space="preserve">
          <source>It is also possible to use the default syntax with the ones seen above (namespace imports or named imports). In such cases, the default import will have to be declared first. For instance:</source>
          <target state="translated">Также можно использовать синтаксис по умолчанию с теми,которые видны выше (импорт пространства имен или импорт с именами).В таких случаях импорт по умолчанию должен быть объявлен первым.Например:</target>
        </trans-unit>
        <trans-unit id="af4edb990c5fdf727cafe82fdb0540d797482226" translate="yes" xml:space="preserve">
          <source>It is an array of bytes, often referred to in other languages as a &quot;byte array&quot;.You cannot directly manipulate the contents of an &lt;code&gt;ArrayBuffer&lt;/code&gt;; instead, you create one of the &lt;a href=&quot;typedarray&quot;&gt;typed array objects&lt;/a&gt; or a &lt;a href=&quot;dataview&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e582cadd5e2af8a250319887c5b15dd0b445e4ca" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply()&lt;/code&gt;&lt;/a&gt; in cases where you want to use the elements of an array as arguments to a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb9df029f10f1c4b5a120be3422d4cce76c0172" translate="yes" xml:space="preserve">
          <source>It is common to use &lt;a href=&quot;../global_objects/function/apply&quot;&gt;&lt;code&gt;Function.prototype.apply&lt;/code&gt;&lt;/a&gt; in cases where you want to use the elements of an array as arguments to a function.</source>
          <target state="translated">Обычно используется &lt;a href=&quot;../global_objects/function/apply&quot;&gt; &lt;code&gt;Function.prototype.apply&lt;/code&gt; &lt;/a&gt; в случаях, когда вы хотите использовать элементы массива в качестве аргументов функции.</target>
        </trans-unit>
        <trans-unit id="e47762cbcbb8539a041b86f5911c627bfe43782a" translate="yes" xml:space="preserve">
          <source>It is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors.</source>
          <target state="translated">Обычно используется обратный вызов с одним аргументом (проходящий элемент).Некоторые функции также обычно используются с одним аргументом,даже если они принимают дополнительные необязательные аргументы.Эти привычки могут привести к запутанному поведению.</target>
        </trans-unit>
        <trans-unit id="85416cea4b3eddb14fb95e0c0cb8577b27c9847a" translate="yes" xml:space="preserve">
          <source>It is important to consider the way default values of attributes are applied. There is often a difference between simply using dot notation to assign a value and using &lt;code&gt;Object.defineProperty()&lt;/code&gt;, as shown in the example below.</source>
          <target state="translated">Важно учитывать способ применения значений атрибутов по умолчанию. Часто существует разница между простым использованием точечной нотации для присвоения значения и использованием &lt;code&gt;Object.defineProperty()&lt;/code&gt; , как показано в примере ниже.</target>
        </trans-unit>
        <trans-unit id="c1db1351f7a897a851f490253a603fa473ce35df" translate="yes" xml:space="preserve">
          <source>It is important to note the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e840f3b9350f6801d0ff3e924eb8f373bbcc7491" translate="yes" xml:space="preserve">
          <source>It is not possible to combine both the AND (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;) and OR operators (&lt;code&gt;||&lt;/code&gt;) directly with &lt;code&gt;??&lt;/code&gt;. A &lt;code&gt;&lt;a href=&quot;../global_objects/syntaxerror&quot;&gt;SyntaxError&lt;/a&gt;&lt;/code&gt; will be thrown in such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8dda9f554abc422ea39aabc120a7ac0d13f88f6" translate="yes" xml:space="preserve">
          <source>It is not possible to know reflectively whether a particular object implements the iterator protocol, however it is easy to create an object that satisfies both the iterator and iterable protocols (as shown in the example below). Doing so allows an iterator to be consumed by the various syntaxes expecting iterables. Thus it is rarely desireable to implement the iterator protocol without also implementing iterable.</source>
          <target state="translated">Невозможно узнать рефлективно,реализует ли конкретный объект протокол итератора,однако легко создать объект,удовлетворяющий как итератору,так и итерационным протоколам (как показано в примере,приведённом ниже).Это позволяет использовать итератор для различных синтаксисов,ожидающих итерабельных протоколов.Таким образом,редко бывает желательно реализовать протокол итератора без реализации итерабельного.</target>
        </trans-unit>
        <trans-unit id="bbba11b1cf2f60a0f1e56080fd83cc82be1fb642" translate="yes" xml:space="preserve">
          <source>It is not possible to simultaneously have a getter bound to a property and have that property actually hold a value, although it &lt;em&gt;is&lt;/em&gt; possible to use a getter and a setter in conjunction to create a type of pseudo-property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34110370fd48f5a59887b0bd5220e344fd6f9b8c" translate="yes" xml:space="preserve">
          <source>It is not recommended to use &lt;code&gt;Date.parse&lt;/code&gt; as until ES5, parsing of strings was entirely implementation dependent. There are still many differences in how different hosts parse date strings, therefore date strings should be manually parsed (a library can help if many different formats are to be accommodated).</source>
          <target state="translated">Не рекомендуется использовать &lt;code&gt;Date.parse&lt;/code&gt; , поскольку до ES5 синтаксический анализ строк полностью зависел от реализации. По-прежнему существует много различий в том, как разные хосты анализируют строки даты, поэтому строки даты следует анализировать вручную (библиотека может помочь, если нужно разместить много разных форматов).</target>
        </trans-unit>
        <trans-unit id="677b2c5760aff019715d68bc654186d7dc6c4634" translate="yes" xml:space="preserve">
          <source>It is now possible to do this in a standardized way using &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;getprototypeof&quot;&gt;&lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7bb09bbffe2c1b00845a3a7df51c721c3f4425" translate="yes" xml:space="preserve">
          <source>It is now possible to do this in a standardized way using &lt;a href=&quot;getownpropertydescriptor&quot;&gt;&lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dcdfa951545bec950ab075835e1130523dd188" translate="yes" xml:space="preserve">
          <source>It is possible to change this behaviour by handling possible rejections:</source>
          <target state="translated">Изменить такое поведение можно,обратившись с возможными отклонениями:</target>
        </trans-unit>
        <trans-unit id="1dc88e3e25b3ab537eecc21b53f748a8be78bdb7" translate="yes" xml:space="preserve">
          <source>It is possible to have a default &lt;a href=&quot;export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; (whether it is an object, a function, a class, etc.). The &lt;code&gt;import&lt;/code&gt; statement may then be used to import such defaults.</source>
          <target state="translated">Возможен &lt;a href=&quot;export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; умолчанию (будь то объект, функция, класс и т. Д.). &lt;code&gt;import&lt;/code&gt; оператор может затем использоваться для импорта таких значений по умолчанию.</target>
        </trans-unit>
        <trans-unit id="b5bd6a46ab029adb771c2868831032b213e42613" translate="yes" xml:space="preserve">
          <source>It is possible to redefine the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property of arrays, subject to the usual redefinition restrictions. (The &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property is initially non-configurable, non-enumerable, and writable. Thus on an unaltered array, it's possible to change the &lt;a href=&quot;../array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property's value or to make it non-writable. It is not allowed to change its enumerability or configurability, or if it is non-writable to change its value or writability.) However, not all browsers permit this redefinition.</source>
          <target state="translated">Можно переопределить свойство &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; массивов с учетом обычных ограничений переопределения. (Свойство &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; изначально не настраивается, не перечисляется и доступно для записи. Таким образом, в неизмененном массиве можно изменить значение свойства &lt;a href=&quot;../array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; или сделать его недоступным для записи. Не разрешается изменять его перечисляемость или настраиваемость, или если он недоступен для записи, чтобы изменить его значение или возможность записи.) Однако не все браузеры разрешают это переопределение.</target>
        </trans-unit>
        <trans-unit id="17363cb0eabd22f47d17a9988c7026669edaebf7" translate="yes" xml:space="preserve">
          <source>It is possible to use a couple of NOT operators in series to explicitly force the conversion of any value to the corresponding &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;boolean primitive&lt;/a&gt;. The conversion is based on the &quot;truthyness&quot; or &quot;falsyness&quot; of the value (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/truthy&quot;&gt;truthy&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/falsy&quot;&gt;falsy&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba7c66856ef3424f32c864a39cb61a9c7d5f9b7" translate="yes" xml:space="preserve">
          <source>It is rather rare to use &lt;code&gt;NaN&lt;/code&gt; in a program. It is the returned value when &lt;a href=&quot;math&quot;&gt;&lt;code&gt;Math&lt;/code&gt;&lt;/a&gt; functions fail (&lt;code&gt;Math.sqrt(-1)&lt;/code&gt;) or when a function trying to parse a number fails (&lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt;).</source>
          <target state="translated">Использование &lt;code&gt;NaN&lt;/code&gt; в программе довольно редко . Это возвращаемое значение, когда &lt;a href=&quot;math&quot;&gt; &lt;code&gt;Math&lt;/code&gt; &lt;/a&gt; функции терпят неудачу ( &lt;code&gt;Math.sqrt(-1)&lt;/code&gt; ) или когда функция, пытающаяся проанализировать число, терпит неудачу ( &lt;code&gt;parseInt(&quot;blabla&quot;)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8d807a334bdce03af9753e48784800ecd42f96a6" translate="yes" xml:space="preserve">
          <source>It is sometime useful to have a stricter way to parse float values, regular expressions can help :</source>
          <target state="translated">Иногда полезно иметь более строгий способ разбора плавающих значений,регулярные выражения могут помочь:</target>
        </trans-unit>
        <trans-unit id="a9028e6cb1ea88953f0056159fb43c778bc96771" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have a stricter way to parse int values. Regular expressions can help:</source>
          <target state="translated">Иногда полезно иметь более строгий способ разбора значений int.В этом могут помочь регулярные выражения:</target>
        </trans-unit>
        <trans-unit id="dbdea303761b144c9595974be207942a85ce77f9" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to have a stricter way to parse integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788331654327003b9a3e20533f1dd22dd0adf40e" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;assignment operators&lt;/a&gt; (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are used instead of the &lt;code&gt;concat()&lt;/code&gt; method.</source>
          <target state="translated">Настоятельно рекомендуется использовать &lt;a href=&quot;../../operators/assignment_operators&quot;&gt;операторы присваивания&lt;/a&gt; ( &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; ) вместо метода &lt;code&gt;concat()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8a1c18ba9110166bc671d87e12d9f825477f805" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators&quot;&gt;assignment operators&lt;/a&gt; (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are used instead of the &lt;code&gt;concat()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2458b39f289fa23472c88198103bb696bbdb21" translate="yes" xml:space="preserve">
          <source>It is typically used when you have multiple asynchronous tasks that are not dependent on one another to complete successfully, or you'd always like to know the result of each promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64ce9678fde9b6ccb870d85fc1f1595c83b8450" translate="yes" xml:space="preserve">
          <source>It is usually safer to provide an initial value because there are three possible outputs without &lt;code&gt;initialValue&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">Обычно безопаснее &lt;code&gt;initialValue&lt;/code&gt; начальное значение, поскольку есть три возможных выхода без initialValue , как показано в следующем примере.</target>
        </trans-unit>
        <trans-unit id="f39e377b324a5c9f08b33569e89ef7d1ecc19a5e" translate="yes" xml:space="preserve">
          <source>It may be most practically used for debugging purposes, being an easy way to check the properties of an object (by outputting to the console or otherwise). Although arrays are often more practical for storing data, in situations where a key-value pair is preferred for working with data (with properties acting as the &quot;key&quot;), there may be instances where you want to check if any of those keys hold a particular value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae584578a863d7bff34ff1b67e5fef9249f60d6" translate="yes" xml:space="preserve">
          <source>It may seem strange to have a special exception-related clause that executes &lt;strong&gt;regardless&lt;/strong&gt; of whether there is an exception, but this construct actually does serve a purpose. The important point is not that the &lt;code&gt;finally&lt;/code&gt;-clause always executes, but rather that ordinary code following a &lt;code&gt;try..catch&lt;/code&gt; does not.</source>
          <target state="translated">Может показаться странным наличие специального предложения, связанного с исключениями, которое выполняется &lt;strong&gt;независимо&lt;/strong&gt; от того, существует ли исключение, но эта конструкция действительно служит цели. Важный момент заключается не в том, что предложение &lt;code&gt;finally&lt;/code&gt; выполняется всегда, а в том, что обычный код, следующий за &lt;code&gt;try..catch&lt;/code&gt; , не выполняется.</target>
        </trans-unit>
        <trans-unit id="641a1f1bfb9cdea9572c9f6c64ca77cd267d097a" translate="yes" xml:space="preserve">
          <source>It might be tempting to use &lt;code&gt;Math.round()&lt;/code&gt; to accomplish that, but doing so would cause your random numbers to follow a non-uniform distribution, which may not be acceptable for your needs.</source>
          <target state="translated">Может возникнуть соблазн использовать для этого &lt;code&gt;Math.round()&lt;/code&gt; , но это приведет к тому, что ваши случайные числа будут следовать неравномерному распределению, что может быть неприемлемо для ваших нужд.</target>
        </trans-unit>
        <trans-unit id="e9d68bf98ccf8c0937c95ad24485ddb23a78f60f" translate="yes" xml:space="preserve">
          <source>It might just be an oversight, carefully check all you parenthesis in your code.</source>
          <target state="translated">Это может быть просто оплошность,тщательно проверьте все скобки в вашем коде.</target>
        </trans-unit>
        <trans-unit id="09d6a7960d6344daf110a07aa0f46e23fd7619dd" translate="yes" xml:space="preserve">
          <source>It must have exactly one parameter (see &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Incompatible &lt;abbr&gt;ES5&lt;/abbr&gt; change: literal getter and setter functions must now have exactly zero or one arguments&lt;/a&gt; for more information);</source>
          <target state="translated">У него должен быть ровно один параметр (см. &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Несовместимое изменение &lt;abbr&gt;ES5&lt;/abbr&gt; : буквальные функции получения и установки теперь должны иметь ровно ноль или один аргумент&lt;/a&gt; для получения дополнительной информации);</target>
        </trans-unit>
        <trans-unit id="e0d34231d840869638e3aa9002ecd024ffbeb1d0" translate="yes" xml:space="preserve">
          <source>It must have exactly zero parameters (see &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Incompatible &lt;abbr&gt;ES5&lt;/abbr&gt; change: literal getter and setter functions must now have exactly zero or one arguments&lt;/a&gt; for more information);</source>
          <target state="translated">У него должно быть ровно ноль параметров (см. &lt;a href=&quot;http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/&quot;&gt;Несовместимое изменение &lt;abbr&gt;ES5&lt;/abbr&gt; : буквальные функции получения и установки теперь должны иметь ровно ноль или один аргумент&lt;/a&gt; для получения дополнительной информации);</target>
        </trans-unit>
        <trans-unit id="657ebce6cc38bce8085a97e3ff70384ec64422e5" translate="yes" xml:space="preserve">
          <source>It must not appear in an object literal with another &lt;code&gt;get&lt;/code&gt; or with a data entry for the same property (&lt;code&gt;{ get x() { }, get x() { } }&lt;/code&gt; and &lt;code&gt;{ x: ..., get x() { } }&lt;/code&gt; are forbidden).</source>
          <target state="translated">Он не должен появляться в литерале объекта с другим &lt;code&gt;get&lt;/code&gt; или с записью данных для того же свойства ( &lt;code&gt;{ get x() { }, get x() { } }&lt;/code&gt; и &lt;code&gt;{ x: ..., get x() { } }&lt;/code&gt; запрещены).</target>
        </trans-unit>
        <trans-unit id="05463fbb4aaf21f08a3ab5f26554235003d67ae9" translate="yes" xml:space="preserve">
          <source>It must not appear in an object literal with another &lt;code&gt;set&lt;/code&gt; or with a data entry for the same property.</source>
          <target state="translated">Он не должен появляться в литерале объекта с другим &lt;code&gt;set&lt;/code&gt; или с записью данных для того же свойства.</target>
        </trans-unit>
        <trans-unit id="de37cc0fc3c6bed823b6d0ee0f3b91c3251ed188" translate="yes" xml:space="preserve">
          <source>It returns an object with a &lt;code&gt;url&lt;/code&gt; property indicating the base URL of the module. This will either be the URL from which the script was obtained, for external scripts, or the document base URL of the containing document, for inline scripts.</source>
          <target state="translated">Он возвращает объект со свойством &lt;code&gt;url&lt;/code&gt; , указывающим базовый URL-адрес модуля. Это будет либо URL-адрес, из которого был получен сценарий, для внешних сценариев, либо базовый URL-адрес документа, содержащего документ, для встроенных сценариев.</target>
        </trans-unit>
        <trans-unit id="bb2fc09f8688c1fd395eb3e9195d969486229a89" translate="yes" xml:space="preserve">
          <source>It should be noted that &lt;a href=&quot;operator_precedence&quot;&gt;the precedence&lt;/a&gt; of the &lt;code&gt;void&lt;/code&gt; operator should be taken into account and that parentheses can help clarify the resolution of the expression following the &lt;code&gt;void&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea4eb774c6833ffc646efd58e60903a08815e06" translate="yes" xml:space="preserve">
          <source>It should be noted that the maximum &lt;code&gt;Date&lt;/code&gt; is not of the same value as the maximum safe integer (&lt;code&gt;Number.MAX_SAFE_INTEGER&lt;/code&gt; is 9,007,199,254,740,991). Instead, it is defined in ECMA-262 that a maximum of &amp;plusmn;100,000,000 (one hundred million) days relative to January 1, 1970 UTC (that is, April 20, 271821 BCE ~ September 13, 275760 CE) can be represented by the standard &lt;code&gt;Date&lt;/code&gt; object (equivalent to &amp;plusmn;8,640,000,000,000,000 milliseconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954e387ac20208cc03c4f242e0c768abc0226976" translate="yes" xml:space="preserve">
          <source>It should be noted, however, that function expressions and function declarations nested within the function generated by parsing a &lt;code&gt;Function constructor&lt;/code&gt; 's string aren't parsed repeatedly. For example:</source>
          <target state="translated">Однако следует отметить, что выражения функций и объявления функций, вложенные в функцию, сгенерированную путем синтаксического анализа строки &lt;code&gt;Function constructor&lt;/code&gt; , не анализируются повторно. Например:</target>
        </trans-unit>
        <trans-unit id="5add076469b11cb8d7fb6364d8cdde585210a41c" translate="yes" xml:space="preserve">
          <source>It should return the value that should be added to the JSON string, as follows:</source>
          <target state="translated">Оно должно возвращать значение,которое должно быть добавлено в JSON строку,следующим образом:</target>
        </trans-unit>
        <trans-unit id="f8133026fa0d9fb510eaf9a781595de1b0f3fe04" translate="yes" xml:space="preserve">
          <source>It takes four arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1dcd4bfabeba9ef57034858eb07de6c007a236" translate="yes" xml:space="preserve">
          <source>It takes three arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a4eb485bbd793345a88879a66885954804a585" translate="yes" xml:space="preserve">
          <source>It was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.</source>
          <target state="translated">Была предпринята попытка &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;сократить длину&lt;/a&gt; массива, но один из элементов массива &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;не настраивается&lt;/a&gt; . При сокращении массива элементы, превышающие длину нового массива, будут удалены, что в данной ситуации не удалось.</target>
        </trans-unit>
        <trans-unit id="02e2c9120f5b81da0f3dc90fab1cb8d051a5e07e" translate="yes" xml:space="preserve">
          <source>It was attempted to &lt;a href=&quot;../global_objects/array/length#Shortening_an_array&quot;&gt;shorten the length&lt;/a&gt; of an array, but one of the array's elements is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. When shortening an array, the elements beyond the new array length will be deleted, which failed in this situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b01aa32def2c0fe928809ced8d9324a50887fe5" translate="yes" xml:space="preserve">
          <source>It was attempted to delete a property, but that property is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="translated">Была предпринята попытка удалить свойство, но это свойство &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;нельзя настроить&lt;/a&gt; . В &lt;code&gt;configurable&lt;/code&gt; элементах управление атрибутом ли свойство может быть удалено из объекта и является ли его атрибутов (кроме &lt;code&gt;writable&lt;/code&gt; ) могут быть изменены.</target>
        </trans-unit>
        <trans-unit id="cef26e246ba549e7961e66ec8bd877f8126498a0" translate="yes" xml:space="preserve">
          <source>It was attempted to delete a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccad8caf638b4903b95cc599d522675b3d9021ba" translate="yes" xml:space="preserve">
          <source>It was attempted to redefine a property, but that property is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed. Usually, properties in an object created by an &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="translated">Была предпринята попытка переопределить свойство, но это свойство &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;нельзя настроить&lt;/a&gt; . В &lt;code&gt;configurable&lt;/code&gt; элементах управление атрибутом ли свойство может быть удалено из объекта и является ли его атрибутов (кроме &lt;code&gt;writable&lt;/code&gt; ) могут быть изменены. Обычно свойства объекта, созданного &lt;a href=&quot;../operators/object_initializer&quot;&gt;инициализатором объекта,&lt;/a&gt; можно настраивать. Однако, например, при использовании &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt; &lt;code&gt;Object.defineProperty()&lt;/code&gt; &lt;/a&gt; это свойство не настраивается по умолчанию.</target>
        </trans-unit>
        <trans-unit id="ec1f1b3574980048baf67633369823cce4b51a22" translate="yes" xml:space="preserve">
          <source>It was attempted to redefine a property, but that property is &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Properties&quot;&gt;non-configurable&lt;/a&gt;. The &lt;code&gt;configurable&lt;/code&gt; attribute controls whether the property can be deleted from the object and whether its attributes (other than &lt;code&gt;writable&lt;/code&gt;) can be changed. Usually, properties in an object created by an &lt;a href=&quot;../operators/object_initializer&quot;&gt;object initializer&lt;/a&gt; are configurable. However, for example, when using &lt;a href=&quot;../global_objects/object/defineproperty&quot;&gt;&lt;code&gt;Object.defineProperty()&lt;/code&gt;&lt;/a&gt;, the property isn't configurable by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab397dbab28fef0eebb4b36ff8f4cad76612d87" translate="yes" xml:space="preserve">
          <source>It will create an infinite loop if there is a match, due to the &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; property being reset upon each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d60210731c923bbd8d426ee1b331915626a35b0" translate="yes" xml:space="preserve">
          <source>It will return &lt;code&gt;0&lt;/code&gt; on non-shared &lt;code&gt;ArrayBuffer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6ba868b0d358d7be2e94d5d913452de49af160" translate="yes" xml:space="preserve">
          <source>It's also possible to explicitly get the string representation of a function using the &lt;code&gt;+&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ae4f0160efc5dbbcb8104a8d363de06b4efe61" translate="yes" xml:space="preserve">
          <source>It's always been possible to return an array from a function. Destructuring can make working with an array return value more concise.</source>
          <target state="translated">Всегда было возможно вернуть массив из функции.Деструктуризация может сделать работу с возвращаемым массивом более лаконичной.</target>
        </trans-unit>
        <trans-unit id="cab096b013facf5171fb20f7a5008433704a6c33" translate="yes" xml:space="preserve">
          <source>It's an error to reference private fields from outside of the class; they can only be read or written within the class body. By defining things which are not visible outside of the class, you ensure that your classes' users can't depend on internals, which may change version to version.</source>
          <target state="translated">Ошибкой является ссылка на приватные поля извне класса;они могут быть прочитаны или записаны только внутри тела класса.Определяя вещи,которые не видны вне класса,вы гарантируете,что пользователи ваших классов не могут зависеть от внутренних элементов,которые могут изменить версию на версию.</target>
        </trans-unit>
        <trans-unit id="03716457a38dd613fb146f492439c6694b559017" translate="yes" xml:space="preserve">
          <source>It's been &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036&quot;&gt;reported&lt;/a&gt; that some websites using MooTools 1.2 broke on Firefox 17. This version of MooTools checks whether &lt;code&gt;String.prototype.contains()&lt;/code&gt; exists and, if it doesn't, MooTools adds its own function. With the introduction of this function in Firefox 17, the behavior of that check changed in a way that causes code based on MooTools' &lt;code&gt;String.prototype.contains()&lt;/code&gt; implementation to break. As a result, the implementation was &lt;a href=&quot;https://hg.mozilla.org/releases/mozilla-aurora/rev/086db97198a8&quot;&gt;disabled&lt;/a&gt; in Firefox 17 and &lt;code&gt;String.prototype.contains()&lt;/code&gt; was available one version later, in Firefox 18, when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036#c32&quot;&gt;outreach to MooTools &lt;/a&gt;was leading to the &lt;a href=&quot;http://mootools.net/blog/2013/02/19/mootools-1-2-6-released&quot;&gt;release of MooTools version 1.2.6&lt;/a&gt;.</source>
          <target state="translated">Это было &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036&quot;&gt;сообщалось&lt;/a&gt; , что некоторые веб - сайты с помощью MooTools 1.2 сломала на Firefox 17. Данная версия MooTools проверяет , находится ли &lt;code&gt;String.prototype.contains()&lt;/code&gt; существует и, если нет, то MooTools добавляет свою собственную функцию. С появлением этой функции в Firefox 17 поведение этой проверки изменилось таким образом, что код, основанный на реализации &lt;code&gt;String.prototype.contains()&lt;/code&gt; от MooTools, не работает . В результате реализация была &lt;a href=&quot;https://hg.mozilla.org/releases/mozilla-aurora/rev/086db97198a8&quot;&gt;отключена&lt;/a&gt; в Firefox 17, а &lt;code&gt;String.prototype.contains()&lt;/code&gt; был доступен на одну версию позже, в Firefox 18, когда &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=789036#c32&quot;&gt;распространение MooTools&lt;/a&gt; привело к &lt;a href=&quot;http://mootools.net/blog/2013/02/19/mootools-1-2-6-released&quot;&gt;выпуску MooTools версии 1.2.6&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c19fe72e04edd33a42aaf0c6b73b631cf5819eb" translate="yes" xml:space="preserve">
          <source>It's common to use the object itself as the unregister token, which is just fine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad42705853bcc5b13365e9dd36fbcbb6ceb6b2bb" translate="yes" xml:space="preserve">
          <source>It's easy to forget a character here or there.</source>
          <target state="translated">Легко забыть персонажа здесь или там.</target>
        </trans-unit>
        <trans-unit id="aa341c3ae049b775c45f18a031d679d3313fdb7e" translate="yes" xml:space="preserve">
          <source>It's important to note the nature of block scoping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e9905f65f341e990222d4ff317bc808ce28e95" translate="yes" xml:space="preserve">
          <source>It's important to point out that the hoisting will affect the variable declaration, but not its value's initialization. The value will be indeed assigned when the assignment statement is reached:</source>
          <target state="translated">Важно отметить,что подъем повлияет на объявление переменной,но не на инициализацию ее значения.Значение действительно будет присвоено при достижении оператором присваивания:</target>
        </trans-unit>
        <trans-unit id="9e5a0154d078b534157bccc5cebf69bbf141a3ea" translate="yes" xml:space="preserve">
          <source>It's likely that major implementations will call cleanup callbacks at some point during execution, but those calls may be substantially after the related object was reclaimed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bec33562b92cfeb84dad9aaca2fd74a7fdf2830" translate="yes" xml:space="preserve">
          <source>It's possible to use &lt;code&gt;String&lt;/code&gt; as a more reliable &lt;a href=&quot;string/tostring&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; alternative, as it works when used on &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;, and on &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;symbols&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">Можно использовать &lt;code&gt;String&lt;/code&gt; в качестве более надежной альтернативы &lt;a href=&quot;string/tostring&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt; , поскольку она работает при использовании с &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;undefined&quot;&gt; &lt;code&gt;undefined&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;symbols&lt;/code&gt; &lt;/a&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="8b848ab2fb08e43e529543c6e2fab3e9726bc663" translate="yes" xml:space="preserve">
          <source>It's tough coming up with good variable names. We all have been there.</source>
          <target state="translated">Трудно придумать хорошие переменные имена.Мы все там были.</target>
        </trans-unit>
        <trans-unit id="9386f043281c3ea26d3f1bdde2724658066699bc" translate="yes" xml:space="preserve">
          <source>It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called (for example, if it has a reference to a &lt;a href=&quot;../global_objects/function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; instance as its value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5feb4718af1649655101d14d39d1577ed4fe6db2" translate="yes" xml:space="preserve">
          <source>Items on the prototype chain are not listed:</source>
          <target state="translated">Пункты в цепи прототипов не указаны:</target>
        </trans-unit>
        <trans-unit id="a3b526c83f0fbd860687a229f7de46226cbf3f2a" translate="yes" xml:space="preserve">
          <source>Iterable examples</source>
          <target state="translated">бесспорные примеры</target>
        </trans-unit>
        <trans-unit id="303add622a0aab032fae6819c4ebe6b995c08abd" translate="yes" xml:space="preserve">
          <source>Iterable in constructor</source>
          <target state="translated">неотъемлемый конструктор</target>
        </trans-unit>
        <trans-unit id="12279667aeedad166b3a644b34522ec0663e7e6b" translate="yes" xml:space="preserve">
          <source>Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). Each key-value pair will be added to the new WeakMap. null is treated as undefined.</source>
          <target state="translated">Итерабельный-это массив или другой итерабельный объект,элементами которого являются пары ключ-значение (2-элементные массивы).Каждая пара &quot;ключ-значение&quot; будет добавлена в новую карту WeakMap.Нуль считается неопределенным.</target>
        </trans-unit>
        <trans-unit id="2b023afbe3bb8465459d650343ef64c1ac087ed9" translate="yes" xml:space="preserve">
          <source>Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.</source>
          <target state="translated">Итерирует указанную переменную над всеми значениями свойств объекта.Для каждого отдельного свойства выполняется указанное выражение.</target>
        </trans-unit>
        <trans-unit id="21fbe6e5ed65189e6f03abfbf39cf77716f2b19a" translate="yes" xml:space="preserve">
          <source>Iterates over async iterable objects, array-like objects, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterators and generators&lt;/a&gt;, invoking a custom iteration hook with statements to be executed for the value of each distinct property.</source>
          <target state="translated">Итерации над асинхронной итерацией объектов, массив типа объектов, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;итераторами и генераторов&lt;/a&gt; , ссылающихся на заказ итерацию крюк с заявлениями , которые будут выполняться для значения каждого свойства.</target>
        </trans-unit>
        <trans-unit id="7fee0e8392755185b42e899080e03939cef85638" translate="yes" xml:space="preserve">
          <source>Iterates over iterable objects (including &lt;a href=&quot;global_objects/array&quot;&gt;arrays&lt;/a&gt;, array-like objects, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;iterators and generators&lt;/a&gt;), invoking a custom iteration hook with statements to be executed for the value of each distinct property.</source>
          <target state="translated">Обходит итерационные объекты (включая &lt;a href=&quot;global_objects/array&quot;&gt;массивы&lt;/a&gt; , объекты, подобные массивам , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators&quot;&gt;итераторы и генераторы&lt;/a&gt; ), вызывая настраиваемый обработчик итерации с операторами, которые должны выполняться для значения каждого отдельного свойства.</target>
        </trans-unit>
        <trans-unit id="1b94f212c1058f85e4abf17b4fe48c9e33edefdc" translate="yes" xml:space="preserve">
          <source>Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.</source>
          <target state="translated">Итерации по бесчисленным свойствам объекта,в произвольном порядке.Для каждого отдельного свойства могут быть выполнены утверждения.</target>
        </trans-unit>
        <trans-unit id="56d3a70287785e5fa4e941a07061cdd1478f560f" translate="yes" xml:space="preserve">
          <source>Iterating &lt;code&gt;Maps&lt;/code&gt; with &lt;code&gt;for..of&lt;/code&gt;</source>
          <target state="translated">Итерация &lt;code&gt;Maps&lt;/code&gt; с помощью &lt;code&gt;for..of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="496362b32a792f687bc6cb94d683922c1b2faeb0" translate="yes" xml:space="preserve">
          <source>Iterating &lt;code&gt;Maps&lt;/code&gt; with &lt;code&gt;forEach()&lt;/code&gt;</source>
          <target state="translated">Итерация &lt;code&gt;Maps&lt;/code&gt; с помощью &lt;code&gt;forEach()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40ab9f00419e3d7a971bf12b9e6bdeb7069a3374" translate="yes" xml:space="preserve">
          <source>Iterating Map with for..of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b13732009253de3c0e616d1484eb8249d06df9d" translate="yes" xml:space="preserve">
          <source>Iterating Map with forEach()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27439a31a816c4d2a55814b1d2a74e6be2b97e8" translate="yes" xml:space="preserve">
          <source>Iterating Sets</source>
          <target state="translated">наборы для вставки</target>
        </trans-unit>
        <trans-unit id="4d045ad50ff36df18ffc24df4519d293570d9402" translate="yes" xml:space="preserve">
          <source>Iterating generators asynchronously</source>
          <target state="translated">Итерационные генераторы асинхронно</target>
        </trans-unit>
        <trans-unit id="4ca2c07db7642120f42b8ddc127bd59d4545455f" translate="yes" xml:space="preserve">
          <source>Iterating over DOM collections like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;&lt;/a&gt;: the following example adds a &lt;code&gt;read&lt;/code&gt; class to paragraphs that are direct descendants of an article:</source>
          <target state="translated">Итерация по коллекциям DOM, таким как &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt; &lt;code&gt;NodeList&lt;/code&gt; &lt;/a&gt; : следующий пример добавляет класс &lt;code&gt;read&lt;/code&gt; к абзацам, которые являются прямыми потомками статьи:</target>
        </trans-unit>
        <trans-unit id="15eb37b3d4eaeab4e4041b1203c12a7e51a06e97" translate="yes" xml:space="preserve">
          <source>Iterating over Object properties</source>
          <target state="translated">Изменение свойств объекта</target>
        </trans-unit>
        <trans-unit id="5785379b283506426da37af2daac50321c939cf1" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Итерация по &lt;a href=&quot;../global_objects/map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="faf9e7e150ab3aadac7b42beae071f087812406b" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Итерации над &lt;a href=&quot;../global_objects/set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67435ad9c2794513dba566d0fd08bbd265b7e9af" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Итерации по &lt;a href=&quot;../global_objects/string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee7063025fae3e507f8e9ddcbd6728d7df3e3817" translate="yes" xml:space="preserve">
          <source>Iterating over a &lt;a href=&quot;../global_objects/typedarray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../global_objects/typedarray&quot;&gt; &lt;code&gt;TypedArray&lt;/code&gt; &lt;/a&gt; по TypedArray</target>
        </trans-unit>
        <trans-unit id="fc7709ac59619dbe62326f750cb2e5dbe03c2089" translate="yes" xml:space="preserve">
          <source>Iterating over a DOM collection</source>
          <target state="translated">Итерация над коллекцией МДМ</target>
        </trans-unit>
        <trans-unit id="f0dd8cb2fd3f7d0a7d9ad1e2575ac2d8bef1fc81" translate="yes" xml:space="preserve">
          <source>Iterating over a custom iterable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dc9daac57270ee67396bd5364644ae68886b7b" translate="yes" xml:space="preserve">
          <source>Iterating over a generator</source>
          <target state="translated">перемалывание через генератор</target>
        </trans-unit>
        <trans-unit id="a0dc6e73ee2e37d38beb08f50a02dc45573ef71c" translate="yes" xml:space="preserve">
          <source>Iterating over a null-able array</source>
          <target state="translated">Итерация по нулевому массиву</target>
        </trans-unit>
        <trans-unit id="94e4424cf8cedd9015568a70cb7d3b5ee4affdcc" translate="yes" xml:space="preserve">
          <source>Iterating over an &lt;a href=&quot;../global_objects/array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Итерация по &lt;a href=&quot;../global_objects/array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e60e562508b0ed60988554d07223e7b2d99da86" translate="yes" xml:space="preserve">
          <source>Iterating over an &lt;code&gt;Object&lt;/code&gt; requires obtaining its keys in some fashion and iterating over them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68897b9a5f552a14700497db5885c704c7ef951" translate="yes" xml:space="preserve">
          <source>Iterating over an array</source>
          <target state="translated">изменяющийся по массиву</target>
        </trans-unit>
        <trans-unit id="4cc7ed0da156acec2c68ed9bf0a521a98d8d6e0b" translate="yes" xml:space="preserve">
          <source>Iterating over an object's key-value pair</source>
          <target state="translated">Переключение по паре ключ-значение объекта</target>
        </trans-unit>
        <trans-unit id="88bb9e15d633e1057b3bc67f5bceb61e9de30cc6" translate="yes" xml:space="preserve">
          <source>Iterating over async generators</source>
          <target state="translated">итерация через асинхронные генераторы</target>
        </trans-unit>
        <trans-unit id="2de9ec73e2d0f138fa633c55f04c2ed679f286c5" translate="yes" xml:space="preserve">
          <source>Iterating over async iterables</source>
          <target state="translated">прерывание по асинхронным итерабелям</target>
        </trans-unit>
        <trans-unit id="8261b2bba8471445708c79a32892c6c29ef1a417" translate="yes" xml:space="preserve">
          <source>Iterating over generators</source>
          <target state="translated">прерывание работы генераторов</target>
        </trans-unit>
        <trans-unit id="455adf44859e7fb0cfd2c5e7ab19ab8ee204fe91" translate="yes" xml:space="preserve">
          <source>Iterating over other iterable objects</source>
          <target state="translated">накладывающиеся на другие итерационные объекты</target>
        </trans-unit>
        <trans-unit id="d2b2115ccf256747d8672ffc5d69d7406c205ab8" translate="yes" xml:space="preserve">
          <source>Iterating over own properties only</source>
          <target state="translated">Итерация только по отношению к собственной собственности</target>
        </trans-unit>
        <trans-unit id="b706b05db27d81be7980fff650e1efd676429131" translate="yes" xml:space="preserve">
          <source>Iterating over sync iterables and generators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197fe49a2a1c4d237370fea18854987d4402b9d6" translate="yes" xml:space="preserve">
          <source>Iterating over the arguments object</source>
          <target state="translated">Итерация объекта аргументов</target>
        </trans-unit>
        <trans-unit id="a0c9b1100058d497cbedce594920f40748a99b04" translate="yes" xml:space="preserve">
          <source>Iterating over the properties of an object</source>
          <target state="translated">Итерация свойств объекта</target>
        </trans-unit>
        <trans-unit id="f00d02193dcc47913c30580455567325cb2dfc7d" translate="yes" xml:space="preserve">
          <source>Iterating own properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcc61476205d976879fe5c5834ef09fdec97d05" translate="yes" xml:space="preserve">
          <source>Iterating through an &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">Итерации по &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b729f2bb4ecffd58ba4c201a1207816bbea198ab" translate="yes" xml:space="preserve">
          <source>Iterating with index and element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="e57f738f4cf22de41d9639f210cde2805b2f793b" translate="yes" xml:space="preserve">
          <source>Iteration methods</source>
          <target state="translated">методы итерации</target>
        </trans-unit>
        <trans-unit id="cb861e59baf33cf5ef305c875f90f2d688e7c3a8" translate="yes" xml:space="preserve">
          <source>Iteration protocols</source>
          <target state="translated">протоколы итераций</target>
        </trans-unit>
        <trans-unit id="87fc3eb7786823f67bfe4af13f35f991a544dbc4" translate="yes" xml:space="preserve">
          <source>Iteration symbols</source>
          <target state="translated">итерационные символы</target>
        </trans-unit>
        <trans-unit id="5424022050225204cf8727255495e6b24e82ff2f" translate="yes" xml:space="preserve">
          <source>Iteration using .next()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb79f142ae3daf3d1b99a2963dd0297f477bdb9c" translate="yes" xml:space="preserve">
          <source>Iteration using &lt;code&gt;&lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt;&lt;/code&gt; loop</source>
          <target state="translated">Итерация с использованием цикла &lt;code&gt;&lt;a href=&quot;../../statements/for...of&quot;&gt;for...of&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab213d9f3b72f0094031342e450e11230c30ff03" translate="yes" xml:space="preserve">
          <source>Iteration using &lt;code&gt;for...of&lt;/code&gt; loop</source>
          <target state="translated">Итерация с использованием цикла &lt;code&gt;for...of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="caa6a77d6122fb34e678cfd0ceac3f71a3842492" translate="yes" xml:space="preserve">
          <source>Iteration using for...of loop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c34a82a6cb315de14486f56ef52965c9d62447" translate="yes" xml:space="preserve">
          <source>Iterations</source>
          <target state="translated">Iterations</target>
        </trans-unit>
        <trans-unit id="56c3f198d3a131f50b3aedf9e825651f8c11a967" translate="yes" xml:space="preserve">
          <source>Iterator examples</source>
          <target state="translated">примеры итераторов</target>
        </trans-unit>
        <trans-unit id="0685bbcbd8ed67f28143ac80d8c20ee967c3be97" translate="yes" xml:space="preserve">
          <source>Iterators and generators</source>
          <target state="translated">итераторы и генераторы</target>
        </trans-unit>
        <trans-unit id="a5fff14a8fe4cf0ab4b7206119ff5ade05d8866a" translate="yes" xml:space="preserve">
          <source>JS Guide: Defining Getters and Setters</source>
          <target state="translated">JS Guide:Определение геттеров и наладчиков</target>
        </trans-unit>
        <trans-unit id="9680a1e52ba14f160bd036f4c6ffa903b1428b1a" translate="yes" xml:space="preserve">
          <source>JS1.7/JS1.8 comprehensions are removed from Gecko starting with version 46 (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1220564&quot;&gt;bug 1220564&lt;/a&gt;).</source>
          <target state="translated">Компоненты JS1.7 / JS1.8 удалены из Gecko, начиная с версии 46 ( &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1220564&quot;&gt;ошибка 1220564&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="c0ad391892841c8ebe22bd1fcdd0679b25d24c17" translate="yes" xml:space="preserve">
          <source>JSON Beautifier/editor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100ffe778ac7ccdc31372ac8a52b744ce3cda1c0" translate="yes" xml:space="preserve">
          <source>JSON Parser</source>
          <target state="translated">JSON Parser</target>
        </trans-unit>
        <trans-unit id="1c79289ed03d4e908f749949854866b01446c023" translate="yes" xml:space="preserve">
          <source>JSON Validator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37128db436e358a875a4420cb7e2d8bdc28ad9e" translate="yes" xml:space="preserve">
          <source>JSON bad parse</source>
          <target state="translated">плохой анализ</target>
        </trans-unit>
        <trans-unit id="811285db50f8a8eb83d950550317fb65834a9157" translate="yes" xml:space="preserve">
          <source>JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. It is based upon JavaScript syntax but is distinct from it: some JavaScript is &lt;em&gt;not&lt;/em&gt; JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf54a2760253e5523dd126645682e6342ba96377" translate="yes" xml:space="preserve">
          <source>JSON is a syntax for serializing objects, arrays, numbers, strings, booleans, and &lt;a href=&quot;null&quot;&gt;&lt;code&gt;null&lt;/code&gt;&lt;/a&gt;. It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON.</source>
          <target state="translated">JSON - это синтаксис для сериализации объектов, массивов, чисел, строк, логических значений и &lt;a href=&quot;null&quot;&gt; &lt;code&gt;null&lt;/code&gt; &lt;/a&gt; . Он основан на синтаксисе JavaScript, но отличается от него: некоторые JavaScript не являются JSON.</target>
        </trans-unit>
        <trans-unit id="4f2a89c61c86c35467830a85aa4b232738cf254f" translate="yes" xml:space="preserve">
          <source>JSON permits &lt;em&gt;only&lt;/em&gt; property definition using &lt;code&gt;&quot;property&quot;: value&lt;/code&gt; syntax. The property name must be double-quoted, and the definition cannot be a shorthand.</source>
          <target state="translated">JSON разрешает &lt;em&gt;только&lt;/em&gt; определение свойства с использованием синтаксиса &lt;code&gt;&quot;property&quot;: value&lt;/code&gt; . Имя свойства должно быть заключено в двойные кавычки, а определение не может быть сокращением.</target>
        </trans-unit>
        <trans-unit id="64b5375f0360e9044ba38df47f55f6d563d59252" translate="yes" xml:space="preserve">
          <source>JSON.parse</source>
          <target state="translated">JSON.parse</target>
        </trans-unit>
        <trans-unit id="9644748ebd63f29d453cce2a8979bae8f40c9f10" translate="yes" xml:space="preserve">
          <source>JSON.parse() does not allow single quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd48627b99656cef31788a0ab301f29b0738042" translate="yes" xml:space="preserve">
          <source>JSON.parse() does not allow trailing commas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3898286ce044bc87123989a97e0cdf2ef51669ae" translate="yes" xml:space="preserve">
          <source>JSON.stringify</source>
          <target state="translated">JSON.stringify</target>
        </trans-unit>
        <trans-unit id="74e384b6b5577955a3669ecd037932490c489e66" translate="yes" xml:space="preserve">
          <source>Jake Archibald: JavaScript Promises: There and Back Again</source>
          <target state="translated">Джейк Арчибальд:JavaScript обещает:Туда и обратно</target>
        </trans-unit>
        <trans-unit id="0942e78f8a190da08261f8ccef3d6a376c82e4b5" translate="yes" xml:space="preserve">
          <source>Japanese Imperial calendar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ef979301f791d1b453aaf533e873600b238f94" translate="yes" xml:space="preserve">
          <source>Japanese financial numerals &amp;mdash; algorithmic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0eb594e5ab66b21d34ef73b600b41237b029ed" translate="yes" xml:space="preserve">
          <source>Japanese first-year Gannen numbering for Japanese calendar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703ff01d4fd7d32c94d0671cfc5a4dce09dc56ad" translate="yes" xml:space="preserve">
          <source>Japanese numerals &amp;mdash; algorithmic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="cf9f0b7d11604683e3cd3536c286c1fbb6a1a234" translate="yes" xml:space="preserve">
          <source>JavaScript &quot;use strict&quot; tutorial for beginners.</source>
          <target state="translated">JavaScript &quot;использовать строгий&quot; учебник для начинающих.</target>
        </trans-unit>
        <trans-unit id="95f38db69c9860d4c53e8e685654bf16597668ff" translate="yes" xml:space="preserve">
          <source>JavaScript 1.6's &lt;a href=&quot;../statements/for_each...in&quot;&gt;&lt;code&gt;for each (variable in obj)&lt;/code&gt;&lt;/a&gt; statement is deprecated, and will be removed in the near future.</source>
          <target state="translated">JavaScript 1.6 &lt;a href=&quot;../statements/for_each...in&quot;&gt; &lt;code&gt;for each (variable in obj)&lt;/code&gt; &lt;/a&gt; оператора (переменная в obj) устарел и будет удален в ближайшем будущем.</target>
        </trans-unit>
        <trans-unit id="b11fcfb5e6c4095c390cc74243bf136eff9202ee" translate="yes" xml:space="preserve">
          <source>JavaScript 1.6's &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in&quot;&gt;&lt;code&gt;for each (variable in obj)&lt;/code&gt;&lt;/a&gt; statement is deprecated, and will be removed in the near future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7b87afcbfa3966fea708fd6422311e4516f203" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances inherit from &lt;code&gt;Date.prototype&lt;/code&gt;. You can modify the constructor's prototype object to affect properties and methods inherited by JavaScript &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">Экземпляры &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; в&lt;/a&gt; JavaScript наследуются от &lt;code&gt;Date.prototype&lt;/code&gt; . Вы можете изменить объект-прототип конструктора, чтобы повлиять на свойства и методы, унаследованные экземплярами JavaScript &lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1bfd90e7c2dbb27dce27ca27bdac42e0dcc0f232" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;../regexp&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; objects are &lt;strong&gt;stateful&lt;/strong&gt; when they have the &lt;a href=&quot;global&quot;&gt;&lt;code&gt;global&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;sticky&quot;&gt;&lt;code&gt;sticky&lt;/code&gt;&lt;/a&gt; flags set (e.g. &lt;code&gt;/foo/g&lt;/code&gt; or &lt;code&gt;/foo/y&lt;/code&gt;). They store a &lt;a href=&quot;lastindex&quot;&gt;&lt;code&gt;lastIndex&lt;/code&gt;&lt;/a&gt; from the previous match. Using this internally, &lt;code&gt;exec()&lt;/code&gt; can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with &lt;a href=&quot;../string/match&quot;&gt;&lt;code&gt;String.prototype.match()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e185614f6000d0678a516450668693294c69226e" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; instances</source>
          <target state="translated">Экземпляры &lt;code&gt;Date&lt;/code&gt; JavaScript</target>
        </trans-unit>
        <trans-unit id="0c24fd7a6e89387c4f243f44598ae892c1180321" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; objects represent a single moment in time in a platform-independent format. &lt;code&gt;Date&lt;/code&gt; objects contain a &lt;code&gt;Number&lt;/code&gt; that represents milliseconds since 1 January 1970 UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a87f819f80e77daa36501c55d2c2194b0cf3fe2" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;String.length&lt;/code&gt; and Internationalizing Web Applications</source>
          <target state="translated">JavaScript &lt;code&gt;String.length&lt;/code&gt; и интернационализация веб-приложений</target>
        </trans-unit>
        <trans-unit id="e3e1e7a0cc811b106bfef783b0416af73ca33679" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: &amp;ldquo;Indexing object properties&amp;rdquo;</source>
          <target state="translated">Руководство по JavaScript: &amp;laquo;Индексирование свойств объекта&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="6a82cb7626330736e6c599c3af57e1f82e2ef675" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: &amp;ldquo;Predefined Core Objects: &lt;code&gt;Array&lt;/code&gt; Object&amp;rdquo;</source>
          <target state="translated">Руководство по JavaScript: &amp;laquo;Предопределенные основные объекты: объект- &lt;code&gt;Array&lt;/code&gt; &amp;raquo;</target>
        </trans-unit>
        <trans-unit id="f586882c868e8d1ea5952465445447e739fcd864" translate="yes" xml:space="preserve">
          <source>JavaScript Guide: Inheritance revisited</source>
          <target state="translated">Руководство по JavaScript:пересмотренное наследство</target>
        </trans-unit>
        <trans-unit id="8a9eb27e2d92ebadf6635ebf472954fddd2b2da1" translate="yes" xml:space="preserve">
          <source>JavaScript URIs</source>
          <target state="translated">JavaScript URI</target>
        </trans-unit>
        <trans-unit id="54e3077631b43981930a15403a3d80fa000df5fe" translate="yes" xml:space="preserve">
          <source>JavaScript and JSON differences</source>
          <target state="translated">JavaScript и JSON различия</target>
        </trans-unit>
        <trans-unit id="e296c3871618d551c3deb57435cdb708b2ce43ec" translate="yes" xml:space="preserve">
          <source>JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.</source>
          <target state="translated">JavaScript-приложения состоят из операторов с соответствующим синтаксисом.Один оператор может состоять из нескольких строк.Несколько операторов могут возникать на одной строке,если каждый оператор разделен точкой с запятой.Это не ключевое слово,а группа ключевых слов.</target>
        </trans-unit>
        <trans-unit id="4c6223ca18121abcd5886040798a9233e0f4edd4" translate="yes" xml:space="preserve">
          <source>JavaScript arguments object and beyond</source>
          <target state="translated">Объекты аргументов JavaScript и далее</target>
        </trans-unit>
        <trans-unit id="d99bc0de4948386c462dba4ba7e8077b8ebf7e66" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are zero-indexed. The first element of an array is at index &lt;code&gt;0&lt;/code&gt;, and the last element is at the index value equal to the value of the array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property minus &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f21e4eca6175c2b188c4fef15f8f69d8441431c" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are zero-indexed: the first element of an array is at index &lt;code&gt;0&lt;/code&gt;, and the last element is at the index equal to the value of the array's &lt;a href=&quot;array/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; property minus 1. Using an invalid index number returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Массивы JavaScript имеют нулевой индекс: первый элемент массива имеет индекс &lt;code&gt;0&lt;/code&gt; , а последний элемент имеет индекс, равный значению свойства &lt;a href=&quot;array/length&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt; массива минус 1. Использование недопустимого номера индекса возвращает значение &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f140eaf1bc562f42183779bed82bd97513bcc4c" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method to convert an object to a primitive value. You rarely need to invoke the &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; для преобразования объекта в примитивное значение. Вам редко нужно вызывать метод &lt;code&gt;[@@toPrimitive]()&lt;/code&gt; самостоятельно; JavaScript автоматически вызывает его при обнаружении объекта, в котором ожидается примитивное значение.</target>
        </trans-unit>
        <trans-unit id="50294983ecbb0dfe18825d0151cd8d983a64aa0d" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString()&lt;/code&gt; method automatically when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is to be represented as a text value or when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is referred to in a string concatenation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5066082528c32a0346c3e4a351fbb930d1b3fa37" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is to be represented as a text value or when a &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt; is referred to in a string concatenation.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;toString&lt;/code&gt; автоматически, когда &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; должно быть представлено как текстовое значение или когда &lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt; упоминается в конкатенации строк.</target>
        </trans-unit>
        <trans-unit id="4c3f5e361a1003614ebc1a7ce6eeb53269aa5790" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;Function&lt;/code&gt;&lt;/a&gt; is to be represented as a text value, e.g. when a function is concatenated with a string.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;toString&lt;/code&gt; автоматически, когда &lt;a href=&quot;../function&quot;&gt; &lt;code&gt;Function&lt;/code&gt; &lt;/a&gt; должна быть представлена ​​как текстовое значение, например, когда функция объединяется со строкой.</target>
        </trans-unit>
        <trans-unit id="393f0b6efbb93056c0b250145a8ea958adf4262a" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when a typed array is to be represented as a text value or when an array is referred to in a string concatenation.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;toString&lt;/code&gt; автоматически, когда типизированный массив должен быть представлен как текстовое значение или когда массив упоминается в конкатенации строк.</target>
        </trans-unit>
        <trans-unit id="683fa5acf0e0743489be2182726e924b6e304505" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;toString&lt;/code&gt; method automatically when an array is to be represented as a text value or when an array is referred to in a string concatenation.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;toString&lt;/code&gt; автоматически, когда массив должен быть представлен как текстовое значение или когда массив упоминается в конкатенации строк.</target>
        </trans-unit>
        <trans-unit id="184b276782b0e1581363d9931664ae6bc740c6f7" translate="yes" xml:space="preserve">
          <source>JavaScript calls the &lt;code&gt;valueOf&lt;/code&gt; method to convert an object to a primitive value. You rarely need to invoke the &lt;code&gt;valueOf&lt;/code&gt; method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected.</source>
          <target state="translated">JavaScript вызывает метод &lt;code&gt;valueOf&lt;/code&gt; для преобразования объекта в примитивное значение. Вам редко нужно вызывать метод &lt;code&gt;valueOf&lt;/code&gt; самостоятельно; JavaScript автоматически вызывает его при обнаружении объекта, в котором ожидается примитивное значение.</target>
        </trans-unit>
        <trans-unit id="a577236e04190d40c6076c0d7d543e39819cea97" translate="yes" xml:space="preserve">
          <source>JavaScript classes use prototype-based inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931f30ff332619933e36eefb2c8dedc78c4d337" translate="yes" xml:space="preserve">
          <source>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax &lt;em&gt;does not&lt;/em&gt; introduce a new object-oriented inheritance model to JavaScript.</source>
          <target state="translated">Классы JavaScript, представленные в ECMAScript 2015, в первую очередь являются синтаксическим сахаром по сравнению с существующим наследованием на основе прототипов JavaScript. Синтаксис класса &lt;em&gt;не&lt;/em&gt; вводит новую объектно-ориентированную модель наследования в JavaScript.</target>
        </trans-unit>
        <trans-unit id="f90b832f4be39c9624e04c4d939b964593b45fbc" translate="yes" xml:space="preserve">
          <source>JavaScript compressors and minifiers</source>
          <target state="translated">компрессоры и миниатюры JavaScript</target>
        </trans-unit>
        <trans-unit id="0a62b40b41ce0d42df8ba4b0874263a7aa928401" translate="yes" xml:space="preserve">
          <source>JavaScript content</source>
          <target state="translated">JavaScript-контент</target>
        </trans-unit>
        <trans-unit id="1e969f4dea65068f57af2163d858ddfb54949632" translate="yes" xml:space="preserve">
          <source>JavaScript documentation of core language features (pure &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;, for the most part) includes the following:</source>
          <target state="translated">Документация JavaScript по функциям основного языка ( по большей части чистый &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt; ) включает следующее:</target>
        </trans-unit>
        <trans-unit id="1762e80126b8c04f9760ca489f7c178ef60a0f3e" translate="yes" xml:space="preserve">
          <source>JavaScript documentation of core language features (pure &lt;a href=&quot;https://wiki.developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources&quot;&gt;ECMAScript&lt;/a&gt;, for the most part) includes the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93db76fbe081ca564a2858e45a41eafa11ee556" translate="yes" xml:space="preserve">
          <source>JavaScript does not protect the property name &lt;code&gt;hasOwnProperty&lt;/code&gt;; thus, if the possibility exists that an object might have a property with this name, it is necessary to use an &lt;em&gt;external&lt;/em&gt;&lt;code&gt;hasOwnProperty&lt;/code&gt; to get correct results:</source>
          <target state="translated">JavaScript не защищает имя свойства &lt;code&gt;hasOwnProperty&lt;/code&gt; ; таким образом, если существует вероятность того, что объект может иметь свойство с таким именем, необходимо использовать &lt;em&gt;внешний &lt;/em&gt; &lt;code&gt;hasOwnProperty&lt;/code&gt; для получения правильных результатов:</target>
        </trans-unit>
        <trans-unit id="744ac18ff13febca682b94a53d3b047df2f4abee" translate="yes" xml:space="preserve">
          <source>JavaScript has &lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_function&quot;&gt;first-class functions&lt;/a&gt;, which means you can pass functions as arguments to other APIs, store them in variables and objects' properties, and so on. Many DOM APIs are designed with this in mind, so you can (and should) write:</source>
          <target state="translated">В JavaScript есть &lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_function&quot;&gt;первоклассные функции&lt;/a&gt; , что означает, что вы можете передавать функции в качестве аргументов другим API, сохранять их в переменных и свойствах объектов и т. Д. Многие API-интерфейсы DOM разработаны с учетом этого, поэтому вы можете (и должны) написать:</target>
        </trans-unit>
        <trans-unit id="b0f73fb099b33ee3d477b6e6ec4117cca801b107" translate="yes" xml:space="preserve">
          <source>JavaScript has a Unicode problem &amp;ndash; Mathias Bynens</source>
          <target state="translated">В JavaScript есть проблема с Unicode - Матиас Биненс</target>
        </trans-unit>
        <trans-unit id="fe987f3f1de727bc1d26668a4b26b5bf03d1bef6" translate="yes" xml:space="preserve">
          <source>JavaScript has allowed trailing commas in array literals since the beginning, and later added them to object literals (ECMAScript 5) and most recently (ECMAScript 2017) to function parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56309979b027f223f5f71cfacdefde8dd70b7b0d" translate="yes" xml:space="preserve">
          <source>JavaScript has both strict and type&amp;ndash;converting comparisons. A strict comparison (e.g., &lt;code&gt;===&lt;/code&gt;) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. &lt;code&gt;==&lt;/code&gt;) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., &lt;code&gt;&amp;lt;=&lt;/code&gt;), the operands are first converted to primitives, then to the same type, before comparison.</source>
          <target state="translated">В JavaScript есть как строгие сравнения, так и сравнения с преобразованием типов. Строгое сравнение (например, &lt;code&gt;===&lt;/code&gt; ) верно только в том случае, если операнды одного типа и совпадают по содержимому. Более часто используемое абстрактное сравнение (например, &lt;code&gt;==&lt;/code&gt; ) преобразует операнды в один и тот же тип перед выполнением сравнения. Для реляционных абстрактных сравнений (например, &lt;code&gt;&amp;lt;=&lt;/code&gt; ) операнды сначала преобразуются в примитивы, а затем в тот же тип перед сравнением.</target>
        </trans-unit>
        <trans-unit id="e1bdbb8ec850c38a8026b2608b3250a593c52c81" translate="yes" xml:space="preserve">
          <source>JavaScript has two long-standing ways to add comments to code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d451ffb310870083fd5a49cb2b8ef66dfdfe1f3c" translate="yes" xml:space="preserve">
          <source>JavaScript has two ways of assigning comments in its code.</source>
          <target state="translated">JavaScript имеет два способа назначения комментариев в своем коде.</target>
        </trans-unit>
        <trans-unit id="77ec0e823a61940b27a5f542f56623c76135407d" translate="yes" xml:space="preserve">
          <source>JavaScript ignores trailing commas in arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa5fe2946ae7adfe543cac944c95cd7b341ce22" translate="yes" xml:space="preserve">
          <source>JavaScript is a superset of JSON</source>
          <target state="translated">JavaScript-это суперсет из JSON.</target>
        </trans-unit>
        <trans-unit id="b4076ff618dfacee58cdf4a93cbdfdfe84945b25" translate="yes" xml:space="preserve">
          <source>JavaScript looks up an unqualified name by searching a scope chain associated with the execution context of the script or function containing that unqualified name. The 'with' statement adds the given object to the head of this scope chain during the evaluation of its statement body. If an unqualified name used in the body matches a property in the scope chain, then the name is bound to the property and the object containing the property. Otherwise a &lt;a href=&quot;../global_objects/referenceerror&quot;&gt;&lt;code&gt;ReferenceError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="translated">JavaScript ищет неполное имя путем поиска в цепочке областей видимости, связанной с контекстом выполнения сценария или функции, содержащей это неполное имя. Оператор with добавляет данный объект в начало этой цепочки областей видимости во время оценки тела оператора. Если неквалифицированное имя, используемое в теле, соответствует свойству в цепочке областей видимости, то имя привязывается к свойству и объекту, содержащему свойство. В противном случае &lt;a href=&quot;../global_objects/referenceerror&quot;&gt; &lt;code&gt;ReferenceError&lt;/code&gt; &lt;/a&gt; ошибка ReferenceError .</target>
        </trans-unit>
        <trans-unit id="ed0db572e5996fee5b434deb324bc5076fbb6fd1" translate="yes" xml:space="preserve">
          <source>JavaScript novices often make the mistake of using &lt;a href=&quot;../global_objects/eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; where the bracket notation can be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500d283647b665226bc80b83e62ac36d1f5c187d" translate="yes" xml:space="preserve">
          <source>JavaScript novices often make the mistake of using &lt;a href=&quot;../global_objects/eval&quot;&gt;eval&lt;/a&gt; where the bracket notation can be used instead. For example, the following syntax is often seen in many scripts.</source>
          <target state="translated">Новички в JavaScript часто делают ошибку, используя &lt;a href=&quot;../global_objects/eval&quot;&gt;eval&lt;/a&gt; вместо скобок. Например, следующий синтаксис часто встречается во многих скриптах.</target>
        </trans-unit>
        <trans-unit id="e21dab6f4cb682e4bba5a78456152ff1d779abee" translate="yes" xml:space="preserve">
          <source>JavaScript sources are often combined and minified to make delivering them from the server more efficient. With &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;, the debugger can map the code being executed to the original source files.</source>
          <target state="translated">Исходные коды JavaScript часто объединяются и уменьшаются, чтобы сделать их доставку с сервера более эффективной. С &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;исходными картами&lt;/a&gt; отладчик может сопоставить выполняемый код с исходными исходными файлами.</target>
        </trans-unit>
        <trans-unit id="ad8cd050ac71fdbacf40f64310ee52ea5ed02597" translate="yes" xml:space="preserve">
          <source>JavaScript sources are often combined and minified to make delivering them from the server more efficient. With &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt;, the debugger can map the code being executed to the original source files. There are two ways to assign a source map, either by using a comment or by setting a header to the JavaScript file.</source>
          <target state="translated">Исходные коды JavaScript часто объединяются и уменьшаются, чтобы сделать их доставку с сервера более эффективной. С &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;исходными картами&lt;/a&gt; отладчик может сопоставить выполняемый код с исходными исходными файлами. Есть два способа назначить исходную карту: с помощью комментария или путем установки заголовка для файла JavaScript.</target>
        </trans-unit>
        <trans-unit id="9181d1be8221d2a98ab781830924aa6d7f552254" translate="yes" xml:space="preserve">
          <source>JavaScript statements</source>
          <target state="translated">JavaScript-выражения</target>
        </trans-unit>
        <trans-unit id="259994f4d52f71d4fbed52e072b9ba70b6557f01" translate="yes" xml:space="preserve">
          <source>JavaScript statements and declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b17512d10a675de7d71fd732c55ebc7a3b9f99" translate="yes" xml:space="preserve">
          <source>JavaScript typed arrays</source>
          <target state="translated">массивы ввода JavaScript</target>
        </trans-unit>
        <trans-unit id="d9f300a88147dae849b96edf9997d43decbfc431" translate="yes" xml:space="preserve">
          <source>JavaScript used to silently fail in contexts where what was done was an error. Strict mode throws in such cases. If your code base contains such cases, testing will be necessary to be sure nothing is broken. Once again, it can happen at the function granularity level.</source>
          <target state="translated">JavaScript использовался для молчаливого провала в контекстах,где то,что было сделано,было ошибкой.В таких случаях выбрасывается строгий режим.Если в вашей кодовой базе есть такие случаи,то потребуется тестирование,чтобы убедиться,что ничего не сломано.Опять же,это может произойти на уровне гранулярности функции.</target>
        </trans-unit>
        <trans-unit id="a77ef21cb7721ec6f8aebd2995c230f5309fb642" translate="yes" xml:space="preserve">
          <source>JavaScript uses 64-bit double floating-point numbers internally, which offer a very high precision. However, sometimes you may be working with 32-bit floating-point numbers, for example if you are reading values from a &lt;a href=&quot;../float32array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;. This can create confusion: Checking a 64-bit float and a 32-bit float for equality may fail even though the numbers are seemingly identical.</source>
          <target state="translated">JavaScript внутренне использует 64-битные числа с двойной плавающей запятой, которые обеспечивают очень высокую точность. Однако иногда вы можете работать с 32-битными числами с плавающей запятой, например, если вы читаете значения из &lt;a href=&quot;../float32array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt; . Это может создать путаницу: проверка 64-битного числа с плавающей запятой и 32-битного числа с плавающей запятой на равенство может завершиться ошибкой, даже если числа кажутся идентичными.</target>
        </trans-unit>
        <trans-unit id="fc81a73fdcb27f667ca60560af29085d17998baf" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;primitive types&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7518d19c0a8ea33bde8476c80bb0232ba1ac7e0b" translate="yes" xml:space="preserve">
          <source>JavaScript's strict mode, introduced in ECMAScript 5, is a way to &lt;em&gt;opt in&lt;/em&gt; to a restricted variant of JavaScript, thereby implicitly opting-out of &quot;&lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Sloppy_mode&quot;&gt;sloppy mode&lt;/a&gt;&quot;. Strict mode isn't just a subset: it &lt;em&gt;intentionally&lt;/em&gt; has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.</source>
          <target state="translated">Строгий режим JavaScript, представленный в ECMAScript 5, - это способ &lt;em&gt;выбрать&lt;/em&gt; ограниченный вариант JavaScript, тем самым неявно отказавшись от &amp;laquo; &lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Sloppy_mode&quot;&gt;небрежного режима&lt;/a&gt; &amp;raquo;. Строгий режим - это не просто подмножество: он &lt;em&gt;намеренно&lt;/em&gt; имеет семантику, отличную от обычного кода. Браузеры, не поддерживающие строгий режим, будут запускать код строгого режима с другим поведением, чем браузеры, которые это делают, поэтому не полагайтесь на строгий режим без тестирования функций для поддержки соответствующих аспектов строгого режима. Код строгого режима и код нестрогого режима могут сосуществовать, поэтому скрипты могут переходить в строгий режим постепенно.</target>
        </trans-unit>
        <trans-unit id="55db58b59d8be8a78f6efed8c161a77bb356a376" translate="yes" xml:space="preserve">
          <source>Javanese digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e32ab2db9b079eda92fa09b2355bca2f171c5d" translate="yes" xml:space="preserve">
          <source>Jeff Walden: Binary and octal numbers</source>
          <target state="translated">Джефф Уолден:Двоичные и восьмеричные числа</target>
        </trans-unit>
        <trans-unit id="b658a93f5080a188c9235ee53c6be002c9eab5c1" translate="yes" xml:space="preserve">
          <source>John Resig - ECMAScript 5 Strict Mode, JSON, and More</source>
          <target state="translated">Джон Резиг-ECMAScript 5 Строгий режим,JSON,и больше</target>
        </trans-unit>
        <trans-unit id="e109b48140a2c26bae797c244c9bfbe125064793" translate="yes" xml:space="preserve">
          <source>John Resig's post on &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf()&lt;/a&gt;</source>
          <target state="translated">Сообщение Джона &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;Ресига&lt;/a&gt; о getPrototypeOf ()</target>
        </trans-unit>
        <trans-unit id="1cb2dd32eeadac5ce1b22baa719abf0989f79767" translate="yes" xml:space="preserve">
          <source>John Resig's post on &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;getPrototypeOf&lt;/a&gt;</source>
          <target state="translated">Сообщение Джона &lt;a href=&quot;http://ejohn.org/blog/objectgetprototypeof/&quot;&gt;Ресига&lt;/a&gt; на getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="ce7fefe555466a8ed76878d9ad48a19e9f5ed947" translate="yes" xml:space="preserve">
          <source>Joining an array four different ways</source>
          <target state="translated">Соединение массива четырьмя различными способами</target>
        </trans-unit>
        <trans-unit id="ca75637a97b45df264928724e8c930f8f2374d29" translate="yes" xml:space="preserve">
          <source>Joining an array-like object</source>
          <target state="translated">Присоединение к массиву объектов</target>
        </trans-unit>
        <trans-unit id="58cf6e8e2b4250d2ee6acd3e6658db4bca072f47" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string.</source>
          <target state="translated">Соединяет все элементы массива в строку.</target>
        </trans-unit>
        <trans-unit id="c5cf3b0b8befbf9cb5a1bdb4c752da3d1915e294" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string. See also &lt;a href=&quot;../array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Объединяет все элементы массива в строку. См. Также &lt;a href=&quot;../array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="562ca02600cc3d32d6d31461ceb9523ce4867295" translate="yes" xml:space="preserve">
          <source>Joins all elements of an array into a string. See also &lt;a href=&quot;array/join&quot;&gt;&lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Объединяет все элементы массива в строку. См. Также &lt;a href=&quot;array/join&quot;&gt; &lt;code&gt;Array.prototype.join()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="42a137bec040460e475257375a4cce301ea33e78" translate="yes" xml:space="preserve">
          <source>Just in the same manner at which you can check if an object is an instance of a class using the &lt;code&gt;instanceof&lt;/code&gt; keyword, we can also use &lt;code&gt;Symbol.hasInstance&lt;/code&gt; for such checks also.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4fda55212e685f6922b9ab18069589fa05df90" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;../statements/const#Description&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;let&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; create properties of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object when declared globally (in the top-most scope).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31908c57894e69aa4075c11a7827e02a40c3d02e" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;Array&lt;/code&gt;s, &lt;code&gt;Map&lt;/code&gt;s can be cloned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3171f5f59eaafdb8bfb35802f80f8d75b1cb8d82" translate="yes" xml:space="preserve">
          <source>Just like Arrays, Maps can be cloned:</source>
          <target state="translated">Как и Массивы,Карты можно клонировать:</target>
        </trans-unit>
        <trans-unit id="97172eff647c6d5219091962ca2611beb32eeb98" translate="yes" xml:space="preserve">
          <source>Just like spread for argument lists, &lt;code&gt;...&lt;/code&gt; can be used anywhere in the array literal and it can be used multiple times.</source>
          <target state="translated">Так же, как spread для списков аргументов, &lt;code&gt;...&lt;/code&gt; можно использовать в любом месте литерала массива, и его можно использовать несколько раз.</target>
        </trans-unit>
        <trans-unit id="448cce5867e24f2c805aa405815a60c7e121ab75" translate="yes" xml:space="preserve">
          <source>Just like spread for argument lists, &lt;code&gt;...&lt;/code&gt; can be used anywhere in the array literal, and may be used more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc13bdbc40dbbf16930c00359072c0a20a24037" translate="yes" xml:space="preserve">
          <source>Just like with class statements, the class body of class expressions is executed in &lt;a href=&quot;../strict_mode&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="translated">Как и в случае с операторами класса, тело класса выражений класса выполняется в &lt;a href=&quot;../strict_mode&quot;&gt;строгом режиме&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="334d0e27a60ef5578e3f70a25c79218f4fe82068" translate="yes" xml:space="preserve">
          <source>Just like with regular functions, the value of &lt;code&gt;this&lt;/code&gt; within methods depends on how they are called. Sometimes it is useful to override this behavior so that &lt;code&gt;this&lt;/code&gt; within classes always refers to the class instance. To achieve this, bind the class methods in the constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8d5d9dd5e3281acced50c00b1bc4da4fe58b29" translate="yes" xml:space="preserve">
          <source>Kannada digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac24ed589bbf9e00c5b7a9a247ae0c9a606ebae" translate="yes" xml:space="preserve">
          <source>Kayah Li digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d426e0b0b4de27b15660b01fc62946e5938d84" translate="yes" xml:space="preserve">
          <source>Keep in mind that returning object literals using the concise body syntax &lt;code&gt;params =&amp;gt; {object:literal}&lt;/code&gt; will not work as expected.</source>
          <target state="translated">Имейте в виду, что возвращение объектных литералов с использованием краткого синтаксиса основного текста &lt;code&gt;params =&amp;gt; {object:literal}&lt;/code&gt; не будет работать должным образом.</target>
        </trans-unit>
        <trans-unit id="45641e7e3979cd965842335c014475cef41a87fc" translate="yes" xml:space="preserve">
          <source>Keep in mind that the &lt;em&gt;data&lt;/em&gt; itself is not cloned</source>
          <target state="translated">Помните, что сами &lt;em&gt;данные&lt;/em&gt; не клонируются</target>
        </trans-unit>
        <trans-unit id="2c4957a169b89c153b565ae42b9ef3901c360eac" translate="yes" xml:space="preserve">
          <source>Key Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fda7e7073ab6e066cc5fdfad0bb7200902f96f" translate="yes" xml:space="preserve">
          <source>Key Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58858bc70a5dcc03fe17b9c1101d84c397faeb12" translate="yes" xml:space="preserve">
          <source>Key equality</source>
          <target state="translated">Ключевое равенство</target>
        </trans-unit>
        <trans-unit id="418428fa68e56676339f9e99c7d969243f4dcf32" translate="yes" xml:space="preserve">
          <source>Key equality for -0 and 0</source>
          <target state="translated">Ключевое равенство для -0 и 0</target>
        </trans-unit>
        <trans-unit id="6563e14e4c7f853e64030f302a776db20d4f7014" translate="yes" xml:space="preserve">
          <source>Key equality is based on the &quot;SameValueZero&quot; algorithm: &lt;code&gt;NaN&lt;/code&gt; is considered the same as &lt;code&gt;NaN&lt;/code&gt; (even though &lt;code&gt;NaN !== NaN&lt;/code&gt;) and all other values are considered equal according to the semantics of the &lt;code&gt;===&lt;/code&gt; operator. In the current ECMAScript specification &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;+0&lt;/code&gt; are considered equal, although this was not so in earlier drafts. See &quot;Value equality for -0 and 0&quot; in the &lt;a href=&quot;#Browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; table for details.</source>
          <target state="translated">Равенство ключей основано на алгоритме &amp;laquo;SameValueZero&amp;raquo;: &lt;code&gt;NaN&lt;/code&gt; считается тем же, что и &lt;code&gt;NaN&lt;/code&gt; (даже если &lt;code&gt;NaN !== NaN&lt;/code&gt; ), а все другие значения считаются равными в соответствии с семантикой оператора &lt;code&gt;===&lt;/code&gt; . В текущей спецификации ECMAScript &lt;code&gt;-0&lt;/code&gt; и &lt;code&gt;+0&lt;/code&gt; считаются равными, хотя в более ранних версиях этого не было. См. &amp;laquo;Равенство значений для -0 и 0&amp;raquo; в таблице &lt;a href=&quot;#Browser_compatibility&quot;&gt;совместимости браузеров&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="560f7deb9fbd3419ef9f86474562f05574fd62b6" translate="yes" xml:space="preserve">
          <source>Key equality is based on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality&quot;&gt;&lt;code&gt;sameValueZero&lt;/code&gt;&lt;/a&gt; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e058bd41ac73e100088d83fe4389c6bbf1edf666" translate="yes" xml:space="preserve">
          <source>Key iterator doesn't ignore holes</source>
          <target state="translated">Итератор ключей не игнорирует дыры</target>
        </trans-unit>
        <trans-unit id="c4b1e3d15db5cb909c8e5c3bc50d9848da8a66a6" translate="yes" xml:space="preserve">
          <source>Key of each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bcd8b61da1a79642efef50ec42b117725cfd0b" translate="yes" xml:space="preserve">
          <source>Keyed collections</source>
          <target state="translated">Ключевые коллекции</target>
        </trans-unit>
        <trans-unit id="e858ac0582f24507144f71eb06b9663abeb13fe9" translate="yes" xml:space="preserve">
          <source>Keys of WeakMaps are of the type &lt;code&gt;Object&lt;/code&gt; only. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;Primitive data types&lt;/a&gt; as keys are not allowed (e.g. a &lt;a href=&quot;symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; can't be a &lt;code&gt;WeakMap&lt;/code&gt; key).</source>
          <target state="translated">Ключи WeakMaps относятся только к типу &lt;code&gt;Object&lt;/code&gt; . &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot;&gt;Примитивные типы данных в&lt;/a&gt; качестве ключей не допускаются (например, &lt;a href=&quot;symbol&quot;&gt; &lt;code&gt;Symbol&lt;/code&gt; &lt;/a&gt; не может быть ключом &lt;code&gt;WeakMap&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="a3cf5eac597b4cdb5c1551ce55da00eed7f5f487" translate="yes" xml:space="preserve">
          <source>Khmer digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ecf2e0d44300af965f346ef743f1e9c72a537a" translate="yes" xml:space="preserve">
          <source>Khudawadi digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325af73483fcf5c08a91b8eb3976b4d6df09fb26" translate="yes" xml:space="preserve">
          <source>Labeled function declarations</source>
          <target state="translated">Маркированные функциональные объявления</target>
        </trans-unit>
        <trans-unit id="b410fe2d42fb15e228b8ae7a8709673d13e20776" translate="yes" xml:space="preserve">
          <source>Labeled functions</source>
          <target state="translated">Функции маркировки</target>
        </trans-unit>
        <trans-unit id="fbfac8f52cada2e823dffb384cec8f92ee566cc1" translate="yes" xml:space="preserve">
          <source>Labeled version added.</source>
          <target state="translated">Добавлена помеченная версия.</target>
        </trans-unit>
        <trans-unit id="18ec3a98210aeff5bfef56e8e71a0e2c6e2d980e" translate="yes" xml:space="preserve">
          <source>Labelled Block Statement</source>
          <target state="translated">Блок-схема с маркировкой</target>
        </trans-unit>
        <trans-unit id="50550ca3f3e20c021daaadbf48051f0b1c9e3492" translate="yes" xml:space="preserve">
          <source>Language Display Names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fff668f8644ef34b4e4c1bbce33e800d4528eeb" translate="yes" xml:space="preserve">
          <source>Language is one of the core features of a locale. The Unicode specification treats the language identifier of a locale as the language and the region together (to make a distiction between dialects and variations, e.g. British English vs. American English). The &lt;code&gt;language&lt;/code&gt; property of a &lt;a href=&quot;../locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; returns strictly the locale's language subtag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7104e2c25aa070a91e885d5ff1817c33ae1079" translate="yes" xml:space="preserve">
          <source>Lao digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41fcf1417b00add077b976c546098d3e0536e21" translate="yes" xml:space="preserve">
          <source>Larger numbers can be represented using the &lt;a href=&quot;bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d22d5671692704cf9c12c2f01bc613043ef602" translate="yes" xml:space="preserve">
          <source>Last expression is evaluated</source>
          <target state="translated">Оценивается последнее выражение</target>
        </trans-unit>
        <trans-unit id="7071422e0583b8e4fb6b9167f225e466e2e38239" translate="yes" xml:space="preserve">
          <source>Lastly, let's examine minification. With using &lt;code&gt;Function()&lt;/code&gt; as shown above, you can minify the code string passed to &lt;code&gt;runCodeWithDateFunction()&lt;/code&gt; far more efficiently because the function arguments names can be minified too as seen in the minified code below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330564a59eaa49b0ee4ffeca30a4dbf5c461f71d" translate="yes" xml:space="preserve">
          <source>Lastly, let's examine minification. With using &lt;code&gt;Function()&lt;/code&gt; as shown above, you can minify the code string passed to &lt;code&gt;runCodeWithDateFunction&lt;/code&gt; far more efficiently because the function arguments names can be minified too as seen in the minified code below.</source>
          <target state="translated">Наконец, давайте рассмотрим минификацию. С помощью &lt;code&gt;Function()&lt;/code&gt; как показано выше, вы можете значительно более эффективно &lt;code&gt;runCodeWithDateFunction&lt;/code&gt; строку кода, переданную в runCodeWithDateFunction, поскольку имена аргументов функции также могут быть минимизированы, как показано в минимизированном коде ниже.</target>
        </trans-unit>
        <trans-unit id="8aa4aab1a73079a7a03a21d601b44b620c94346c" translate="yes" xml:space="preserve">
          <source>Latin digits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38df12cc2e08bdc92e4c234437ee9953901f40b0" translate="yes" xml:space="preserve">
          <source>Leading and trailing spaces in the argument are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2e9e2a0d6f7444c85a01dfc9c3452d30b19c69" translate="yes" xml:space="preserve">
          <source>Leading zeros and decimal points</source>
          <target state="translated">Ведущие нули и десятичные знаки</target>
        </trans-unit>
        <trans-unit id="839d8fec4eaf98bd81c386bc951d0be390bc6b7d" translate="yes" xml:space="preserve">
          <source>Leading zeros are prohibited. A decimal point must be followed by at least one digit. &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3550917d985bcf43d7da8e759629c3801030e94d" translate="yes" xml:space="preserve">
          <source>Left bracket, i.e. &quot;(&quot;</source>
          <target state="translated">Левая скобка,т.е.&quot;(&quot;</target>
        </trans-unit>
        <trans-unit id="4e329848308f51ed814ae607db0d48ff6b12bc29" translate="yes" xml:space="preserve">
          <source>Left operand with another assignment operator</source>
          <target state="translated">Левый операнд с другим оператором задания</target>
        </trans-unit>
        <trans-unit id="5ab1c2256c381beee948a90f36638f4339d1df90" translate="yes" xml:space="preserve">
          <source>Left shift</source>
          <target state="translated">левая смена</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
