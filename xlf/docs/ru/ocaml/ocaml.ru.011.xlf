<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="ocaml">
    <body>
      <group id="ocaml">
        <trans-unit id="81468c7ebab1c5a01e13d71f20b9d3f79ab019c7" translate="yes" xml:space="preserve">
          <source>Print a string on standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239e667539d760b95fb67e7af2b14556bf1672e4" translate="yes" xml:space="preserve">
          <source>Print a string, followed by a newline character on standard error and flush standard error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8454715c8134bb32c9d0b6d5fbc4e1e14a1d87c" translate="yes" xml:space="preserve">
          <source>Print a string, followed by a newline character, on standard output and flush standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea61c3ac5c7b0566ed5cae1ecfdd4c2c861ba39" translate="yes" xml:space="preserve">
          <source>Print all external commands before they are executed, Useful to debug C library problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a899efa55e1195ca5fc1dec39f5ecdae93ca337" translate="yes" xml:space="preserve">
          <source>Print all external commands before they are executed, in particular invocations of the C compiler and linker in -custom mode. Useful to debug C library problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba058a59bfe6821df26150e86333708758eaa075" translate="yes" xml:space="preserve">
          <source>Print all external commands before they are executed, in particular invocations of the assembler, C compiler, and linker. Useful to debug C library problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f2c30cc981864c89d951572dd7385b78870825" translate="yes" xml:space="preserve">
          <source>Print an integer in the current pretty-printing box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7301d26fde81fa8ebca08848cc545bc293615fb7" translate="yes" xml:space="preserve">
          <source>Print an integer, in decimal, on standard error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65bdad25891620217c526a1bfe2956ce94697a0" translate="yes" xml:space="preserve">
          <source>Print an integer, in decimal, on standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd336c14b87ef3c0b1b68245b3a09479680e247" translate="yes" xml:space="preserve">
          <source>Print short version number and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d0598affdc572bce9de228afda6b8df92c487b" translate="yes" xml:space="preserve">
          <source>Print the call stack. This is useful to see which sequence of function calls led to the currently executing frame. With a positive argument, print only the innermost count frames. With a negative argument, print only the outermost -count frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc9d9bde218642565c4a6b872c662229c0a649a" translate="yes" xml:space="preserve">
          <source>Print the current values of the memory management counters (in human-readable form) into the channel argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc013ee29b9caea327ae49687d5fe8992469fe80" translate="yes" xml:space="preserve">
          <source>Print the list of all breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6309cbc48bcf93fb84c3b2d1628070ff67c985" translate="yes" xml:space="preserve">
          <source>Print the list of commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605058b80e7766b1d24469032cba6edad61bd169" translate="yes" xml:space="preserve">
          <source>Print the list of events in the given module (the current module, by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77e8c1c85630588cf87f0de278c43bd22bba915" translate="yes" xml:space="preserve">
          <source>Print the location of the standard library, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a63cdf9922cb9019770831699ca2ec88440cd9f" translate="yes" xml:space="preserve">
          <source>Print the magic number expected by this version of the runtime and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3ef87917612025838d457d0180249b2e9da839" translate="yes" xml:space="preserve">
          <source>Print the magic number of the bytecode executable given as argument and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72d9d8cbad237171877aaaf4f221e80c28b652a" translate="yes" xml:space="preserve">
          <source>Print the names of the primitives known to this version of ocamlrun and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451ad6ffbbc59e311404fa1ba33469fe44332e2f" translate="yes" xml:space="preserve">
          <source>Print the signature of the corresponding component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac80a952e8e6f2080883594473fea6bc18893d21" translate="yes" xml:space="preserve">
          <source>Print the signatures of components with name ident in all the above categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5306c346b09fa982bbe727b7d468447dd3c8b02" translate="yes" xml:space="preserve">
          <source>Print the value of a specific configuration variable from the -config output, then exit. If the variable does not exist, the exit code is non-zero. This option is only available since OCaml 4.08, so script authors should have a fallback for older versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07a93c8767c3a47dc5d7c8df32e7ea1d844894b" translate="yes" xml:space="preserve">
          <source>Print the value of the debugger variable variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95223754157223c4209b46470cc23e01254d61f" translate="yes" xml:space="preserve">
          <source>Print the values of the given variables. print can be abbreviated as p.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeec5e23ff4ea21114a2bb9f163e9c3c32699c18" translate="yes" xml:space="preserve">
          <source>Print the version number of ocamlc and a detailed summary of its configuration, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f991152ef21a1e26c709ecfc065e65ac98aa7ae9" translate="yes" xml:space="preserve">
          <source>Print the version number of ocamlopt and a detailed summary of its configuration, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debb51048032a6428ea36a4a0ee08b746d4a77db" translate="yes" xml:space="preserve">
          <source>Print the version number of the compiler and the location of the standard library directory, then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe4aaf2f5e45563655a656455ed20e66a1462f4" translate="yes" xml:space="preserve">
          <source>Print the version number of the compiler in short form (e.g. 3.11.0), then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f76b94e10000b8d214946bc7f1bda961d7f3c84" translate="yes" xml:space="preserve">
          <source>Print the working directory for ocamldebug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9213c853b1c42118f3c94b86c97afa5e9fd9869" translate="yes" xml:space="preserve">
          <source>Print version string and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e959478171465cf9e996cbfb9a74d21f6548b19" translate="yes" xml:space="preserve">
          <source>Printexc</source>
          <target state="translated">Printexc</target>
        </trans-unit>
        <trans-unit id="49c6710eb43a270c0d99f60d369594f6b1f09d42" translate="yes" xml:space="preserve">
          <source>Printf</source>
          <target state="translated">Printf</target>
        </trans-unit>
        <trans-unit id="2d9a110ab864d8027d59b85870bd7507b21f2b32" translate="yes" xml:space="preserve">
          <source>Prints a list of all available directives, with corresponding argument type if appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0169f16c8bbedbeb3705f057d992b36bb4c783" translate="yes" xml:space="preserve">
          <source>Prior to OCaml 4.06, there were a number of restrictions: one could only remove types and modules at the outermost level (not inside submodules), and in the case of with type the definition had to be another type constructor with the same type parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994eb8f645a2e271bf1f8673e4483c670cc953a0" translate="yes" xml:space="preserve">
          <source>Private method made public implicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165156bef8f5f2f887c0fff1c8cc018aec48829d" translate="yes" xml:space="preserve">
          <source>Private methods are inherited (they are by default visible in subclasses), unless they are hidden by signature matching, as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9361563af3076dde9f52a56836232ccfd3da4f" translate="yes" xml:space="preserve">
          <source>Private methods are methods that do not appear in object interfaces. They can only be invoked from other methods of the same object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e7b644834b86be6fc64d7be1a52e0d85f180ab" translate="yes" xml:space="preserve">
          <source>Private methods can be made public in a subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c59d88954e8cc2ecd75753618fa9214f76b159d" translate="yes" xml:space="preserve">
          <source>Private row types are type abbreviations where part of the structure of the type is left abstract. Concretely &lt;a href=&quot;types#typexpr&quot;&gt;typexpr&lt;/a&gt; in the above should denote either an object type or a polymorphic variant type, with some possibility of refinement left. If the private declaration is used in an interface, the corresponding implementation may either provide a ground instance, or a refined private type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacf321bc5cb3799371afb25b83ff3a18b40297f" translate="yes" xml:space="preserve">
          <source>Private type declarations in module signatures, of the form type t = private ..., enable libraries to reveal some, but not all aspects of the implementation of a type to clients of the library. In this respect, they strike a middle ground between abstract type declarations, where no information is revealed on the type implementation, and data type definitions and type abbreviations, where all aspects of the type implementation are publicized. Private type declarations come in three flavors: for variant and record types (section &amp;zwj;&lt;a href=&quot;#ss%3Aprivate-types-variant&quot;&gt;8.3.1&lt;/a&gt;), for type abbreviations (section &amp;zwj;&lt;a href=&quot;#ss%3Aprivate-types-abbrev&quot;&gt;8.3.2&lt;/a&gt;), and for row types (section &amp;zwj;&lt;a href=&quot;#ss%3Aprivate-rows&quot;&gt;8.3.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb686dcfd0b69cd31f6a449daa606192aede292e" translate="yes" xml:space="preserve">
          <source>Private type declarations in module signatures, of the form type t = private ..., enable libraries to reveal some, but not all aspects of the implementation of a type to clients of the library. In this respect, they strike a middle ground between abstract type declarations, where no information is revealed on the type implementation, and data type definitions and type abbreviations, where all aspects of the type implementation are publicized. Private type declarations come in three flavors: for variant and record types (section &lt;a href=&quot;#ss%3Aprivate-types-variant&quot;&gt;8.3.1&lt;/a&gt;), for type abbreviations (section &lt;a href=&quot;#ss%3Aprivate-types-abbrev&quot;&gt;8.3.2&lt;/a&gt;), and for row types (section &lt;a href=&quot;#ss%3Aprivate-rows&quot;&gt;8.3.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b94c84bf3c7510e8be0728f720ae8fe7ce120f" translate="yes" xml:space="preserve">
          <source>Process file as a .ml file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2522d3db6f5a48e899f57863a3c7250dfc54b325" translate="yes" xml:space="preserve">
          <source>Process file as a .mli file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473f55eac53bc8ce93f412c1c946aa28996d5086" translate="yes" xml:space="preserve">
          <source>Process file as a file name, even if it starts with a dash (-) character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5dbcb4f5b812065ae1369a8e3dde027c4b2109" translate="yes" xml:space="preserve">
          <source>Process file as the grammar specification, even if its name starts with a dash (-) character. This option must be the last on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0588b71974aef4ab5b2e1fdf75767f0460174967" translate="yes" xml:space="preserve">
          <source>Process handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7450c7a1b38c58c319dbbe91b6f643f07f53490" translate="yes" xml:space="preserve">
          <source>Process the file filename as a text file, even if its extension is not .txt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15640d84a678dcf20fe0f7b4064e40aca256536e" translate="yes" xml:space="preserve">
          <source>Process the file filename as an implementation file, even if its extension is not .ml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a335c98c4d1d8038830a8a0365142ca983d65b" translate="yes" xml:space="preserve">
          <source>Process the file filename as an interface file, even if its extension is not .mli.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968e872ce419fcfe72f51852dada13fcf08024c1" translate="yes" xml:space="preserve">
          <source>Processor-native integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4186ada56824b293fd62da84a86d8573ac62f45" translate="yes" xml:space="preserve">
          <source>Profiling interrupt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ea8abb2d5aee6b3ffd36cd9d01f1bea2305efb" translate="yes" xml:space="preserve">
          <source>Profiling of a program's space behaviour over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef3f3bc4c4c8078545ca3c591413a9d5b343787" translate="yes" xml:space="preserve">
          <source>Profiling of a program's space behaviour over time. Currently only supported on x86-64 platforms running 64-bit code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723b0e2b1580f96f4e037bd5029db086fd9ab217" translate="yes" xml:space="preserve">
          <source>Profiling with ocamlprof only records execution counts, not the actual time spent within each function. There is currently no way to perform time profiling on bytecode programs generated by ocamlc. For time profiling of native code, users are recommended to use standard tools such as perf (on Linux), Instruments (on macOS) and DTrace. Profiling with gprof is no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d68007b0763cb230f9034ec96f52b39d03ad630" translate="yes" xml:space="preserve">
          <source>Program</source>
          <target state="translated">Program</target>
        </trans-unit>
        <trans-unit id="bd74641b834d4b980ea6b99d6f71d4205f5d04af" translate="yes" xml:space="preserve">
          <source>Program termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2d4e1f190973fd4686a60486cb7a38ca6a26aa" translate="yes" xml:space="preserve">
          <source>Programmers which come to rely on the internal API for a use-case which they find realistic and useful are encouraged to open a request for improvement on the bug tracker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b712ae7d0703efbf3d9ee4609e41b3f3cd65989" translate="yes" xml:space="preserve">
          <source>Programs built with Spacetime instrumentation have a dependency on the libunwind library unless that was unavailable at configure time or the -disable-libunwind option was specified (see section &lt;a href=&quot;#s%3Aspacetime-runtimeoverhead&quot;&gt;22.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa08ed45d5cab3757f6b4a975eb9165de6f9e78" translate="yes" xml:space="preserve">
          <source>Programs running with Spacetime instrumentation consume significantly more memory than their non-instrumented counterparts. It is expected that this memory overhead will also be reduced in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63eb6a78b9751a02e1fca63835a2dcf55273437c" translate="yes" xml:space="preserve">
          <source>Programs that use system threads must be linked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0718dd6f86f5aa1f5dc9d3d0b3619bb6a1c50300" translate="yes" xml:space="preserve">
          <source>Programs that use the dynlink library simply need to link dynlink.cma or dynlink.cmxa with their object files and other libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0463620b1afee3e694aec11b31b76a4b1f96ef6a" translate="yes" xml:space="preserve">
          <source>Programs that use the str library must be linked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a42d2cc2a8eda80048327543bb9aaaac9921c36" translate="yes" xml:space="preserve">
          <source>Programs that use the unix library must be linked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec3615614646193710ff39b8632eb35820bdb84" translate="yes" xml:space="preserve">
          <source>Programs that use threads must be linked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9639408739caea934aae30d0b4689565093312fd" translate="yes" xml:space="preserve">
          <source>Propose the same interface as usual hash table. However since the bindings are weak, even if &lt;code&gt;mem&amp;nbsp;h&amp;nbsp;k&lt;/code&gt; is true, a subsequent &lt;code&gt;find&amp;nbsp;h&amp;nbsp;k&lt;/code&gt; may raise &lt;code&gt;Not_found&lt;/code&gt; because the garbage collector can run between the two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677789471bfc26b9baa2dcb7bdc1e90f13c9beac" translate="yes" xml:space="preserve">
          <source>Protocol family not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bb2975367cf35f9a618efe163f6de98389a1c2" translate="yes" xml:space="preserve">
          <source>Protocol not available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ba63ff22fffa946a6c1e3e8b9d184a5a911e55" translate="yes" xml:space="preserve">
          <source>Protocol not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff5f085a157b60cb28dba0860f39cd3e12b11e1" translate="yes" xml:space="preserve">
          <source>Protocol wrong type for socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d4ebfdd03b691f619d61cbe366c6ce68fc905a" translate="yes" xml:space="preserve">
          <source>Provides</source>
          <target state="translated">Provides</target>
        </trans-unit>
        <trans-unit id="2c6c2f6ed5db6aa314135e5ee7ea36dd719021ca" translate="yes" xml:space="preserve">
          <source>Pseudo-random number generators (PRNG).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0ee00b6267b2378862d1f872c21158ec230b1a" translate="yes" xml:space="preserve">
          <source>Put f and g in the same module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938d4423167ad6f26c3a678405b921c5056207ce" translate="yes" xml:space="preserve">
          <source>Put the calling process in a new session and detach it from its controlling terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="d325fcd919384f395c02751e03d2cd0288b98cca" translate="yes" xml:space="preserve">
          <source>Queue</source>
          <target state="translated">Queue</target>
        </trans-unit>
        <trans-unit id="caf4b4627b80a9efca6390b0b35ddb954aa1057f" translate="yes" xml:space="preserve">
          <source>Quiet mode. ocamllex normally outputs informational messages to standard output. They are suppressed if option -q is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ac50a5c5471cd48d6cd7a69a966ff47405312e" translate="yes" xml:space="preserve">
          <source>Quit character (usually ctrl-\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb98a3a6f1365300e275eadb0e82fb6a60fe00cb" translate="yes" xml:space="preserve">
          <source>Quite often, this happens when defining function using higher order function. To avoid this problem, a solution is to add an explicit argument to the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c053941a8974103fdf9adc10b4e10c54a97ef236" translate="yes" xml:space="preserve">
          <source>Quoted string literals provide an alternative lexical syntax for string literals. They are useful to represent strings of arbitrary content without escaping. Quoted strings are delimited by a matching pair of {&lt;a href=&quot;#quoted-string-id&quot;&gt;quoted-string-id&lt;/a&gt;| and |&lt;a href=&quot;#quoted-string-id&quot;&gt;quoted-string-id&lt;/a&gt;} with the same &lt;a href=&quot;#quoted-string-id&quot;&gt;quoted-string-id&lt;/a&gt; on both sides. Quoted strings do not interpret any character in a special way but requires that the sequence |&lt;a href=&quot;#quoted-string-id&quot;&gt;quoted-string-id&lt;/a&gt;} does not occur in the string itself. The identifier &lt;a href=&quot;#quoted-string-id&quot;&gt;quoted-string-id&lt;/a&gt; is a (possibly empty) sequence of lowercase letters and underscores that can be freely chosen to avoid such issue (e.g. {|hello|}, {ext|hello {|world|}|ext}, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="e2bea001712992baa23e8c78c49863e0902c0ce2" translate="yes" xml:space="preserve">
          <source>Radix</source>
          <target state="translated">Radix</target>
        </trans-unit>
        <trans-unit id="7f36ea5d3de965c70c84ceca6f79a298f9099835" translate="yes" xml:space="preserve">
          <source>Raise &lt;a href=&quot;scanf#EXCEPTIONScan_failure&quot;&gt;&lt;code&gt;Scanf.Scan_failure&lt;/code&gt;&lt;/a&gt; if the input does not match the format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36954e0616fd4ab6826cea4b2073a23dd8a2d4f9" translate="yes" xml:space="preserve">
          <source>Raise &lt;code&gt;End_of_file&lt;/code&gt; if the end of input is encountered while some more characters are needed to read the current conversion specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b72d1aa196f806e25d927281ae1551701421c8" translate="yes" xml:space="preserve">
          <source>Raise &lt;code&gt;Failure&lt;/code&gt; if a conversion to a number is not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4636335a7fccd892fe73a73b7c56c21ea55d250f" translate="yes" xml:space="preserve">
          <source>Raise &lt;code&gt;Invalid_argument&lt;/code&gt; if the format string is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216738342707122846d4fd6eb0c45706f7b73de1" translate="yes" xml:space="preserve">
          <source>Raise exception &lt;code&gt;Failure&lt;/code&gt; with the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491cba7a17e27d1b41d46ea369641a1550e51813" translate="yes" xml:space="preserve">
          <source>Raise exception &lt;code&gt;Invalid_argument&lt;/code&gt; with the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="501ee443ddbcf53091ea1067a9ae3f57f6ebfd33" translate="yes" xml:space="preserve">
          <source>Raise the given exception value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60f8969db97c2bb35b2563ab6ed6e4f03404bad" translate="yes" xml:space="preserve">
          <source>Raised by &lt;code&gt;Arg.parse_argv&lt;/code&gt; when the user asks for help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f983f5e162cd924b236f06287a0bff869f30db" translate="yes" xml:space="preserve">
          <source>Raised by parsers when none of the first components of the stream patterns is accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952a898b7a6fd8d0bc9671d84982b32bf6b9fe77" translate="yes" xml:space="preserve">
          <source>Raised by parsers when the first component of a stream pattern is accepted, but one of the following components is rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fda7c1c7cec524ae01e28e6f47d5fde4832cac" translate="yes" xml:space="preserve">
          <source>Raised by the system calls below when an error is encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87f07092a3a001bf1b834aa708db58b4b2fc5a9" translate="yes" xml:space="preserve">
          <source>Raised by the system calls below when an error is encountered. The first component is the error code; the second component is the function name; the third component is the string parameter to the function, if it has one, or the empty string otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194b55d81062da090b368377d76b9a43588fb263" translate="yes" xml:space="preserve">
          <source>Raised when &lt;a href=&quot;queue#VALtake&quot;&gt;&lt;code&gt;Queue.take&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;queue#VALpeek&quot;&gt;&lt;code&gt;Queue.peek&lt;/code&gt;&lt;/a&gt; is applied to an empty queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c7459e6d2df687f73674d472326ed2008cb773" translate="yes" xml:space="preserve">
          <source>Raised when &lt;a href=&quot;stack#VALpop&quot;&gt;&lt;code&gt;Stack.pop&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stack#VALtop&quot;&gt;&lt;code&gt;Stack.top&lt;/code&gt;&lt;/a&gt; is applied to an empty stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d24598ec09335bef9be1ec042a3cc6569685ca" translate="yes" xml:space="preserve">
          <source>Raised when a parser encounters a syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f202fef5cc0e634106d4608a58d1831f7472ff13" translate="yes" xml:space="preserve">
          <source>Raised when a parser encounters a syntax error. Can also be raised from the action part of a grammar rule, to initiate error recovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae11633db0e7da3516b2e0225f22dfb074f61b7" translate="yes" xml:space="preserve">
          <source>Raises an invalid argument exception if the returned geometry does not satisfy &lt;a href=&quot;format#VALcheck_geometry&quot;&gt;&lt;code&gt;Format.check_geometry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6a01b3c7c2087180a932709746f61a2199b793" translate="yes" xml:space="preserve">
          <source>Raising arbitrary exceptions from C is more delicate: the exception identifier is dynamically allocated by the OCaml program, and therefore must be communicated to the C function using the registration facility described below in section &amp;zwj;&lt;a href=&quot;#ss%3Ac-register-exn&quot;&gt;18.7.3&lt;/a&gt;. Once the exception identifier is recovered in C, the following functions actually raise the exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41f4a95b91b1b7d3f518258afac3a6e567857f5" translate="yes" xml:space="preserve">
          <source>Raising arbitrary exceptions from C is more delicate: the exception identifier is dynamically allocated by the OCaml program, and therefore must be communicated to the C function using the registration facility described below in section &lt;a href=&quot;#ss%3Ac-register-exn&quot;&gt;20.7.3&lt;/a&gt;. Once the exception identifier is recovered in C, the following functions actually raise the exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d888c08aa561f370e38cee976121532a883d71" translate="yes" xml:space="preserve">
          <source>Random</source>
          <target state="translated">Random</target>
        </trans-unit>
        <trans-unit id="d00e5de923d2fb499cc63830a172dced4874a46e" translate="yes" xml:space="preserve">
          <source>Raw backtrace slots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ce60b8828e956013eeab15d66339b705f8bbb9" translate="yes" xml:space="preserve">
          <source>Raw backtraces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b8cb76a84d201ebabeaff1f6e3a3a5860bdc27" translate="yes" xml:space="preserve">
          <source>Raw backtraces cannot be marshalled. If you need marshalling, you should use the array returned by the &lt;code&gt;backtrace_slots&lt;/code&gt; function of the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a377c099adff515091e70dcb22c7db7203b2316a" translate="yes" xml:space="preserve">
          <source>Raw socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb7c0865348e2999ad6f51a8b71faa68d7a22f8" translate="yes" xml:space="preserve">
          <source>Re-exported variant type or record type: an equation, a representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dfcf3ac85b42a4d5f54acc3201c4eef3261f89" translate="yes" xml:space="preserve">
          <source>Re-schedule the calling thread without suspending it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2512ca26766e71583adc6edd50373f5839822c3" translate="yes" xml:space="preserve">
          <source>Re-schedule the calling thread without suspending it. This function can be used to give scheduling hints, telling the scheduler that now is a good time to switch to other threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b32003b07368691f1f80f28b6e5008499f9ee7" translate="yes" xml:space="preserve">
          <source>Re-shaping Bigarrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc014cfb02135583355873ad00c0361f061abe4" translate="yes" xml:space="preserve">
          <source>Read a 4-byte float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce591d11020ba17c35a7b7213eb3d8a7f2e7397" translate="yes" xml:space="preserve">
          <source>Read a digest from the given input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abf4e7e7c125c3e76e1801fe87fa4883e72f6b5" translate="yes" xml:space="preserve">
          <source>Read a signed 1-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fe81b04c2829d569497cb34072d498c20d57df" translate="yes" xml:space="preserve">
          <source>Read a signed 2-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16c938fdffeee8bd1dbcd5043af23124f4907c3" translate="yes" xml:space="preserve">
          <source>Read a signed 4-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded1b67059cacac26764983c31cbd02b0e0cac19" translate="yes" xml:space="preserve">
          <source>Read a signed 8-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30e01e9ef051947cd7c2401618bc8954386d497" translate="yes" xml:space="preserve">
          <source>Read additional newline-terminated command line arguments from filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60d751c7d878040cce554ef4627185c7b2d3920" translate="yes" xml:space="preserve">
          <source>Read additional newline-terminated command line arguments from filename. It is not possible to pass a scriptfile via file to the toplevel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76835ba4a31ac07483f46f43fa6c985ae1bff9b6" translate="yes" xml:space="preserve">
          <source>Read additional null character terminated command line arguments from filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2122d0c469288519c91629a369aa2bba0ff43acd" translate="yes" xml:space="preserve">
          <source>Read additional null character terminated command line arguments from filename. It is not possible to pass a scriptfile via file to the toplevel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a26fe31a2c0a8c7224fa3039d8cfb00b78512e3" translate="yes" xml:space="preserve">
          <source>Read an 8-byte float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d6329ef4b06a86875dd2b3a89bd475040195a4" translate="yes" xml:space="preserve">
          <source>Read an array of 1-byte quantities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f8cf88f9bcfee42eab62d3bcc4e91f216fbcbe" translate="yes" xml:space="preserve">
          <source>Read an array of 2-byte quantities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629ec05ac2ba9fa5ed43a7da5945c4794a87ff25" translate="yes" xml:space="preserve">
          <source>Read an array of 4-byte quantities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4271deb4d0b3a7e8812b99d0449d3e1b0240445d" translate="yes" xml:space="preserve">
          <source>Read an array of 8-byte quantities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac825a1f3b1937d32ea50c327b0ba22a748ffda1" translate="yes" xml:space="preserve">
          <source>Read an element of a generic Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c41d1ccd2cf647c34256b9f1a313fa0d3f1bcd9" translate="yes" xml:space="preserve">
          <source>Read an element of a generic Bigarray. &lt;code&gt;Genarray.get&amp;nbsp;a&amp;nbsp;[|i1;&amp;nbsp;...;&amp;nbsp;iN|]&lt;/code&gt; returns the element of &lt;code&gt;a&lt;/code&gt; whose coordinates are &lt;code&gt;i1&lt;/code&gt; in the first dimension, &lt;code&gt;i2&lt;/code&gt; in the second dimension, ..., &lt;code&gt;iN&lt;/code&gt; in the &lt;code&gt;N&lt;/code&gt;-th dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67349a86f7563898607682268ae95a1f61056dc9" translate="yes" xml:space="preserve">
          <source>Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e9c74f4180396e136f31afbdcec851f5f66b00" translate="yes" xml:space="preserve">
          <source>Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. See &lt;a href=&quot;stdlib#VALoutput_binary_int&quot;&gt;&lt;code&gt;output_binary_int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac938561144649bc1155f569e56036f2fdfd2c7" translate="yes" xml:space="preserve">
          <source>Read an propagate the delayed dependencies for module aliases in file, so that the following files will depend on the exported aliased modules if they use them. See the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886ea27c8bec585df975149a00402cd79c637ee6" translate="yes" xml:space="preserve">
          <source>Read an unsigned 1-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c70c66a803617f07522cf4c684939542a5fba7" translate="yes" xml:space="preserve">
          <source>Read an unsigned 2-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bbf9a0280a7ce2b8bbbe0030193ddd1a363831" translate="yes" xml:space="preserve">
          <source>Read an unsigned 4-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316d26280ca41288433d99fb399411a2cc1faadb" translate="yes" xml:space="preserve">
          <source>Read an unsigned 8-byte integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf48991ebc90755e4b1f7f3d1e72135c6757443" translate="yes" xml:space="preserve">
          <source>Read and propagate the delayed dependencies for module aliases in file, so that the following files will depend on the exported aliased modules if they use them. See the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86508915a0d56a2f11022c831d9f04464b83ca9" translate="yes" xml:space="preserve">
          <source>Read characters from the given input channel, until a newline character is encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73846446201ce3c7e60e58af2642dc5ece7a008d" translate="yes" xml:space="preserve">
          <source>Read characters from the given input channel, until a newline character is encountered. Return the string of all characters read, without the newline character at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f467b17b835e6d668da3cfd0cd0dff2106036b" translate="yes" xml:space="preserve">
          <source>Read debugger commands from the script filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f666d340bc1a11b2f16b993b989b8d17ce60207" translate="yes" xml:space="preserve">
          <source>Read one character from the given input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9131dce42813e8ec41b39beb9e3ff10f19dc602b" translate="yes" xml:space="preserve">
          <source>Read permission</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0313b5eab47220b914011434d8a7cc69c1dfa7" translate="yes" xml:space="preserve">
          <source>Read the contents of a link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1101c25e2994338c1c2eb973a4f3f47e5e391381" translate="yes" xml:space="preserve">
          <source>Read the contents of a symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a359da53b69b3ea6b092a55c310d55d6ebea95" translate="yes" xml:space="preserve">
          <source>Read the grammar specification from standard input. The default output file names are stdin.ml and stdin.mli.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b8434ffb8be92faae1a806cd108694f763b2b0" translate="yes" xml:space="preserve">
          <source>Read the representation of a structured value, as produced by &lt;a href=&quot;stdlib#VALoutput_value&quot;&gt;&lt;code&gt;output_value&lt;/code&gt;&lt;/a&gt;, and return the corresponding value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b341d52843a5bf78cfe433947040df998396cbe" translate="yes" xml:space="preserve">
          <source>Read the representation of a structured value, as produced by &lt;a href=&quot;stdlib#VALoutput_value&quot;&gt;&lt;code&gt;output_value&lt;/code&gt;&lt;/a&gt;, and return the corresponding value. This function is identical to &lt;a href=&quot;marshal#VALfrom_channel&quot;&gt;&lt;code&gt;Marshal.from_channel&lt;/code&gt;&lt;/a&gt;; see the description of module &lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt; for more information, in particular concerning the lack of type safety.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9627fd30596032c688ad807a751d4e103b2c13d" translate="yes" xml:space="preserve">
          <source>Read the standard input as a script file rather than starting an interactive session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0827111eae7b98567c87474f4b43f73cf9df084" translate="yes" xml:space="preserve">
          <source>Read, compile and execute source phrases from the given file. This is textual inclusion: phrases are processed just as if they were typed on standard input. The reading of the file stops at the first error encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7967994dfc943a9d75a158de2c9b6edcab50b2" translate="yes" xml:space="preserve">
          <source>Read-only file system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e251a56e473195fc043435e63c0bd44f25861fa8" translate="yes" xml:space="preserve">
          <source>Reading format strings from input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f40594d4332209f624490fba4a21a0d8f2420fc" translate="yes" xml:space="preserve">
          <source>Reads complete as writes (depending on O_SYNC/O_DSYNC)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d761e12b94d1da8094c742a6a4c7e7ebc3906f" translate="yes" xml:space="preserve">
          <source>Reasonable defaults for functions &lt;code&gt;out_spaces&lt;/code&gt; and &lt;code&gt;out_newline&lt;/code&gt; are respectively &lt;code&gt;out_funs.out_string&amp;nbsp;(String.make&amp;nbsp;n&amp;nbsp;'&amp;nbsp;')&amp;nbsp;0&amp;nbsp;n&lt;/code&gt; and &lt;code&gt;out_funs.out_string&amp;nbsp;&quot;\n&quot;&amp;nbsp;0&amp;nbsp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3342b2d0538c1531ee9aae57b07f20c9dab43f" translate="yes" xml:space="preserve">
          <source>Receive data from a connected socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495d38b61f84619813658e11cf80eb64bc551bc0" translate="yes" xml:space="preserve">
          <source>Receive data from an unconnected socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a799052460df4566a7952caba304831fe0a14ce" translate="yes" xml:space="preserve">
          <source>Reception is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95acc15fad87944379696aedcca3bee2d5c818f5" translate="yes" xml:space="preserve">
          <source>Recognize XON/XOFF characters on input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61eee862a5e72ab7ea8fe95e4746a73711431897" translate="yes" xml:space="preserve">
          <source>Recognize file names ending with string as interface files (instead of the default .mli).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347a8e34dcdfe0c261bbae1b232251ad673cf4a9" translate="yes" xml:space="preserve">
          <source>Record debugging information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910f4030ea52bda376b5aa3aca46c5ba6aa007f1" translate="yes" xml:space="preserve">
          <source>Record fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab31373329ebda7a9ecee39f6fc1d37f1ce7c824" translate="yes" xml:space="preserve">
          <source>Record fields can also be accessed through pattern-matching:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cf7c53e7cf560426af957246ab1c5b36c8505f" translate="yes" xml:space="preserve">
          <source>Record fields can also be modified by assignment, provided they are declared mutable in the definition of the record type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b2a5b6fdc37fc99da7b0607b037ff3a884f246" translate="yes" xml:space="preserve">
          <source>Record values are labeled tuples of values. The record value written {&lt;a href=&quot;names#field&quot;&gt;field&lt;/a&gt;&lt;sub&gt;1&lt;/sub&gt;=v&lt;sub&gt;1&lt;/sub&gt;; &amp;hellip;;&lt;a href=&quot;names#field&quot;&gt;field&lt;/a&gt;&lt;sub&gt;n&lt;/sub&gt;=v&lt;sub&gt;n&lt;/sub&gt;} associates the value v&lt;sub&gt;i&lt;/sub&gt; to the record field &lt;a href=&quot;names#field&quot;&gt;field&lt;/a&gt;&lt;sub&gt;i&lt;/sub&gt;, for i = 1 &amp;hellip; n. The current implementation supports records with up to 2&lt;sup&gt;22&lt;/sup&gt; &amp;minus; 1 fields (4194303 fields).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e7afbf124d5133dc81cb55c7c5f24278d6fb67" translate="yes" xml:space="preserve">
          <source>Records are also represented by zero-tagged blocks. The ordering of labels in the record type declaration determines the layout of the record fields: the value associated to the label declared first is stored in field &amp;zwj;0 of the block, the value associated to the second label goes in field &amp;zwj;1, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02fbaf92ab6f668ba8c58db00c88fa0b033da16" translate="yes" xml:space="preserve">
          <source>Records are also represented by zero-tagged blocks. The ordering of labels in the record type declaration determines the layout of the record fields: the value associated to the label declared first is stored in field 0 of the block, the value associated to the second label goes in field 1, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a39f91dc419f213f3f430557f69794fa4719cc" translate="yes" xml:space="preserve">
          <source>Recursive classes can be used to define objects whose types are mutually recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f808596bec53448916381d4754315ccc18b74d" translate="yes" xml:space="preserve">
          <source>Recursive definitions of names are introduced by letrec:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4779850ffe8cff34ad7d948ec38d13e841f8164" translate="yes" xml:space="preserve">
          <source>Recursive functions are defined with the let rec binding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d353d1981023ac46b358959ff73a6f6b4d85dd9" translate="yes" xml:space="preserve">
          <source>Recursive module definitions, introduced by the module rec &amp;hellip;and &amp;hellip; construction, generalize regular module definitions module&lt;a href=&quot;names#module-name&quot;&gt;module-name&lt;/a&gt;=&lt;a href=&quot;modules#module-expr&quot;&gt;module-expr&lt;/a&gt; and module specifications module&lt;a href=&quot;names#module-name&quot;&gt;module-name&lt;/a&gt;:&lt;a href=&quot;modtypes#module-type&quot;&gt;module-type&lt;/a&gt; by allowing the defining &lt;a href=&quot;modules#module-expr&quot;&gt;module-expr&lt;/a&gt; and the &lt;a href=&quot;modtypes#module-type&quot;&gt;module-type&lt;/a&gt; to refer recursively to the module identifiers being defined. A typical example of a recursive module definition is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8e04bf713983ca46edb8008396708aa79152e5" translate="yes" xml:space="preserve">
          <source>Redefining formatter output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e482b78115537fa1c38984758e5cd15f5753d32" translate="yes" xml:space="preserve">
          <source>Redefining output functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a791fb89307dba01bce8608462fad99f40b16f5" translate="yes" xml:space="preserve">
          <source>Redefining semantic tag operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0501a0bef34fc88116df27f2efa64b96b25ae6" translate="yes" xml:space="preserve">
          <source>Redirect the standard pretty-printer output to the given channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f536bf9044d5654bf01fe4a0d29f6dd1268674" translate="yes" xml:space="preserve">
          <source>Redirect the standard pretty-printer output to the given channel. (All the output functions of the standard formatter are set to the default output functions printing to the given channel.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5c411817f17db821dafb6a6686007ee18c9713" translate="yes" xml:space="preserve">
          <source>Redirecting the standard formatter output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f6909a6a6e1cc00213c91c99a81a703a9ee676" translate="yes" xml:space="preserve">
          <source>Redundant case in a pattern matching (unused match case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238fe5d52f17b0fe9911a63bfec331920e535cc6" translate="yes" xml:space="preserve">
          <source>Redundant sub-pattern in a pattern-matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37aba70e342850096daafd45baa804ba09bbd307" translate="yes" xml:space="preserve">
          <source>Refer to documentation on yacc for more details and guidance in how to use error recovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49711308b42a4846bba12eba8a7e15f9e53d5624" translate="yes" xml:space="preserve">
          <source>Reference assignment (update the reference given as first argument with the value of the second argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122a8c607714911f9c55a95520ba352930d18102" translate="yes" xml:space="preserve">
          <source>Reference cells can be implemented as objects. The naive definition fails to typecheck:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de79c805af623bf5ca8641671f754beff12d79f" translate="yes" xml:space="preserve">
          <source>Reference the regular expression bound to &lt;a href=&quot;lex#ident&quot;&gt;ident&lt;/a&gt; by an earlier let&lt;a href=&quot;lex#ident&quot;&gt;ident&lt;/a&gt;=&lt;a href=&quot;#regexp&quot;&gt;regexp&lt;/a&gt; definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a091fe7db1bf4411fef339d55d431e81767afbcb" translate="yes" xml:space="preserve">
          <source>Reference to undefined global mod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="4694bd4be677ce4663069cbb84ca82da59029a24" translate="yes" xml:space="preserve">
          <source>References are also useful to write functions that maintain a current state between two calls to the function. For instance, the following pseudo-random number generator keeps the last returned number in a reference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c40265663cd45f477fa62031b5121020b1d4ff" translate="yes" xml:space="preserve">
          <source>Refill handlers are a recent (optional) feature introduced in 4.02, documented below in subsection &amp;zwj;&lt;a href=&quot;#ss%3Arefill-handlers&quot;&gt;13.2.7&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1a98eb8bda259c5e6b53f5f44a52d8c3f772c6" translate="yes" xml:space="preserve">
          <source>Refill handlers are a recent (optional) feature introduced in 4.02, documented below in subsection &lt;a href=&quot;#ss%3Arefill-handlers&quot;&gt;13.2.7&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6e9c6e085af786bdc00af692163b916a0cfeee" translate="yes" xml:space="preserve">
          <source>Regarding the atomicity guarantees given by &lt;code&gt;~cloexec:true&lt;/code&gt; or by the use of the &lt;code&gt;O_CLOEXEC&lt;/code&gt; flag: on all platforms it is guaranteed that a concurrently-executing Caml thread cannot leak the descriptor by starting a new process. On Linux, this guarantee extends to concurrently-executing C threads. As of Feb 2017, other operating systems lack the necessary system calls and still expose a window of vulnerability during which a C thread can see the newly-created file descriptor in ``keep-on-exec'' mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d7183b5b67f0148ca5d09be4416ccc6e902609" translate="yes" xml:space="preserve">
          <source>Register the function named printer-name (a value path) as a printer for objects whose types match the argument type of the function. That is, the debugger will call printer-name when it has such an object to print. The printing function printer-name must use the Format library module to produce its output, otherwise its output will not be correctly located in the values printed by the toplevel loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7abeab29a5ab9bb4cd5dff7b62e29222042952f" translate="yes" xml:space="preserve">
          <source>Register the given function to be called at program termination time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46539f816e7562760cc9adc223f7359c10aad574" translate="yes" xml:space="preserve">
          <source>Register the given function to be called at program termination time. The functions registered with &lt;code&gt;at_exit&lt;/code&gt; will be called when the program does any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca874b55b0f92111a93cd652711639493fdbfb06" translate="yes" xml:space="preserve">
          <source>Registering OCaml values with the C runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee478efa11b298959e74cf6618239180535fbb82" translate="yes" xml:space="preserve">
          <source>Registration of a global variable v is achieved by calling caml_register_global_root(&amp;amp;v) just before or just after a valid value is stored in v for the first time; likewise, registration of an arbitrary location p is achieved by calling caml_register_global_root(p).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c96cb6f219058eabf8872d9c4a4d120512db91e" translate="yes" xml:space="preserve">
          <source>Regular expressions and high-level string processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a073b89aebe0e05ff91f4dd2316f67e5c58000" translate="yes" xml:space="preserve">
          <source>Regular file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f7c403fe69451818e2b0ac1a8669a89a95d11b" translate="yes" xml:space="preserve">
          <source>Reject invalid formats that were accepted in legacy format implementations. You should use this flag to detect and fix such invalid formats, as they will be rejected by future OCaml versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d017d689a1b5a76f0fc05ac1a94a6933ae9c60" translate="yes" xml:space="preserve">
          <source>Remark that the type inferred for empty is 'a list and not '_weak5 list that should have occurred with the value restriction since f () is a function application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7230db168d899f594b95cb697d95bc8534a0e07f" translate="yes" xml:space="preserve">
          <source>Remove all elements from the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f662b3f3ba722f6f477ef995251656740bd0a589" translate="yes" xml:space="preserve">
          <source>Remove an empty directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2426d9587ba25986a9d9a8464f4cf28f49b4e2a" translate="yes" xml:space="preserve">
          <source>Remove blank characters until the first asterisk (&amp;rsquo;*&amp;rsquo;) in each line of comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a90aad5043757c8a9c09d20150830c67e086bfe" translate="yes" xml:space="preserve">
          <source>Remove from the sequence the elements that do not satisfy the given predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246687551a774323a453e92a24c7aeb3ca4bfd55" translate="yes" xml:space="preserve">
          <source>Remove from the sequence the elements that do not satisfy the given predicate. This transformation is lazy, it only applies when the result is traversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154733fd338d63aa2d2c057d675c182891618bf4" translate="yes" xml:space="preserve">
          <source>Remove the first element of the stream, possibly unfreezing it before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7086cf1b363660ebe16e430065ac77061a13da5" translate="yes" xml:space="preserve">
          <source>Remove the given directory from the list of directories searched for source and compiled files. Do nothing if the list does not contain the given directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75cdb70394e3076742148661a4f0d138cc86e65" translate="yes" xml:space="preserve">
          <source>Remove the given file name from the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262409bb33e2295bb03d4481acb2bd31bdd6a400" translate="yes" xml:space="preserve">
          <source>Remove the named function from the table of toplevel printers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b422e6336e9a1f5c8e7676d4cec59ce1f3784507" translate="yes" xml:space="preserve">
          <source>Remove the named function from the table of value printers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a99b3f3d1cdfe4894b853c1352923f24807d02" translate="yes" xml:space="preserve">
          <source>Remove unused function arguments even when the argument is not specialised. This may have a small performance penalty. See section &lt;a href=&quot;#ss%3Aflambda-remove-unused-args&quot;&gt;19.10.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee176e699b353c43f07d0d5894fb3b5591faa05" translate="yes" xml:space="preserve">
          <source>Remove unused function arguments even when the argument is not specialised. This may have a small performance penalty. See section &lt;a href=&quot;#ss%3Aflambda-remove-unused-args&quot;&gt;21.10.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65afa3a5b7a241b9b346985f5c59de2a52cab400" translate="yes" xml:space="preserve">
          <source>Removes the named file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604bf9f212cb4c463abdb6d2939a2df34df83931" translate="yes" xml:space="preserve">
          <source>Removes the named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8b3ff4a64a143b656296bc695d5afd78e79aa5" translate="yes" xml:space="preserve">
          <source>Rename a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7720bbeaac7a5506aba04ac2c6b2a56b722aedef" translate="yes" xml:space="preserve">
          <source>Rename a file. &lt;code&gt;rename&amp;nbsp;oldpath&amp;nbsp;newpath&lt;/code&gt; renames the file called &lt;code&gt;oldpath&lt;/code&gt;, giving it &lt;code&gt;newpath&lt;/code&gt; as its new name, moving it between directories if needed. If &lt;code&gt;newpath&lt;/code&gt; already exists, its contents will be replaced with those of &lt;code&gt;oldpath&lt;/code&gt;. Depending on the operating system, the metadata (permissions, owner, etc) of &lt;code&gt;newpath&lt;/code&gt; can either be preserved or be replaced by those of &lt;code&gt;oldpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5cc2bb555df30d0e6eb7d5f83b5d27a1ab09a6" translate="yes" xml:space="preserve">
          <source>Rename the files containing A and B to Mylib__A and Mylib__B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c385e347b2af0a4d67c9b1c9902c4b0b140d1abd" translate="yes" xml:space="preserve">
          <source>Replacement</source>
          <target state="translated">Replacement</target>
        </trans-unit>
        <trans-unit id="4af5403b14a97b367235b42df07a20480e0e8dc8" translate="yes" xml:space="preserve">
          <source>Report also the children that receive stop signals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31955c1eb0a065ad822d3b3d4ad5258e4de34617" translate="yes" xml:space="preserve">
          <source>Report the socket type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b995b5804e4a58ffb2ca58aa3da67303300eebb1" translate="yes" xml:space="preserve">
          <source>Report whether socket listening is enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f3137f7768beda858520d1ea23501430d993b1" translate="yes" xml:space="preserve">
          <source>Reposition the descriptor to the beginning of the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360bc539904b3901915f57b0aead8cb40373f0de" translate="yes" xml:space="preserve">
          <source>Representation</source>
          <target state="translated">Representation</target>
        </trans-unit>
        <trans-unit id="355b1015abcd18678f55cad9402d887e0ca4b33c" translate="yes" xml:space="preserve">
          <source>Reraise the exception using the given raw_backtrace for the origin of the exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296dc2dc7b2de91362fa32e69066f2f832ae36c7" translate="yes" xml:space="preserve">
          <source>Reset the search path. This requires confirmation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295d138411ff2d3558e23677e76f1c926ca63f6d" translate="yes" xml:space="preserve">
          <source>Resizing of stacks and memory manager tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2b9449646a0ee5d5e77b1f7dfdbd7898f4fbf0" translate="yes" xml:space="preserve">
          <source>Resource deadlock would occur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449bb9231a38851e27ffef4f8fb9c50338c502b0" translate="yes" xml:space="preserve">
          <source>Resource temporarily unavailable; try again</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec49ae807f32a58e971b5d6d176e30540b9c5004" translate="yes" xml:space="preserve">
          <source>Resource unavailable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e3e7a7da9b9395cec89d34d65a1a1b2f7fa2d8" translate="yes" xml:space="preserve">
          <source>Restricting the PrioQueue structure by this signature results in another view of the PrioQueue structure where the remove_top function is not accessible and the actual representation of priority queues is hidden:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="299a15e6a23badee14ff1ded59c353807a27199b" translate="yes" xml:space="preserve">
          <source>Result too large</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3209d576f81c84414e8e8f7fb17ec71753c4c605" translate="yes" xml:space="preserve">
          <source>Result type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff426904f949a5bd0420c1f1a0fa5c365e9b7cf" translate="yes" xml:space="preserve">
          <source>Result values handle computation results and errors in an explicit and declarative manner without resorting to exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e52a78448e1694bad44e829c624deb768c1a7b" translate="yes" xml:space="preserve">
          <source>Result values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e12d29278b5519294bc25cdaddffec6d0f1c6" translate="yes" xml:space="preserve">
          <source>Results</source>
          <target state="translated">Results</target>
        </trans-unit>
        <trans-unit id="d79bd092e077fc09c2c60f3a10064d1ff431ce29" translate="yes" xml:space="preserve">
          <source>Return 30 random bits in a nonnegative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa095160436e3371f86a43a981b3849b81bf640" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;()&lt;/code&gt; if the stream is empty, else raise &lt;a href=&quot;stream#EXCEPTIONFailure&quot;&gt;&lt;code&gt;Stream.Failure&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593f7c342701e8ec458be23245e66f430d3e4385" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;(minor_words,&amp;nbsp;promoted_words,&amp;nbsp;major_words)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550faf169ef998eb1fa031a11f506f86d397328c" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;(minor_words,&amp;nbsp;promoted_words,&amp;nbsp;major_words)&lt;/code&gt;. This function is as fast as &lt;code&gt;quick_stat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0b04958e3d5768c711ed65e736e75e41370385" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if the given string is not a valid representation of a float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c545d6d7e7201b009d3907cdeef8a3094f6baaaf" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7031cc3ae71e32dda9f527b40a39b784155601" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if the line read is not a valid representation of a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb750c7d172d1acc02da983e44f7470133e58fa7" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if the line read is not a valid representation of an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c08ab7d1ba46fbe58475fb0109d0a5d45d82a5b" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;None&lt;/code&gt; if the string is not &lt;code&gt;&quot;true&quot;&lt;/code&gt; or &lt;code&gt;&quot;false&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9bf0c2b04774eefa1cb998fa96e21caf677aa9" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;Some&lt;/code&gt; of &quot;the first element&quot; of the stream, or &lt;code&gt;None&lt;/code&gt; if the stream is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5292c8ae26a2eae7733924ca1310706bedf5f1b" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the file name is relative and does not start with an explicit reference to the current directory (&lt;code&gt;./&lt;/code&gt; or &lt;code&gt;../&lt;/code&gt; in Unix), &lt;code&gt;false&lt;/code&gt; if it starts with an explicit reference to the root directory or the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030a8f8301c3d1e7373bffe5d869f33138c7c3d8" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the file name is relative to the current directory, &lt;code&gt;false&lt;/code&gt; if it is absolute (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0417d3670b3192288bd57b2b9590c65ba93693" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the file name is relative to the current directory, &lt;code&gt;false&lt;/code&gt; if it is absolute (i.e. in Unix, starts with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a015b737ab1e9eb668c2cceaf398634872781ae2" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the given file descriptor refers to a terminal or console window, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f3b056b45d4d28af4aaf0cff1c1765dbae49af" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the given queue is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d192ae098f93a15f44ef685976f769d2b43da8a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the given stack is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3caaf71c60868a87c08cbb3748317d779a78a48" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;true&lt;/code&gt; if the tables are currently created in randomized mode by default, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f1622b98a145c2db6db8c2f9d7a5e025a1042e" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127b47230d0d9b183fb460c794103afb437a3f74" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with all lowercase letters translated to uppercase, using the US-ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44df7d1f4660ce15440564ef6140d488f89e8817" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003998c9bfbb3770499527204f4346a8d1868e5a" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with all uppercase letters translated to lowercase, using the US-ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3d642112c3a92152f04255363b1ba2fa9a2589" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4a332a5b94aa334390f511abb510b3ddb62618" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. All characters outside the ASCII printable range (32..126) are escaped, as well as backslash and double-quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f41a484dc0ff3d58c57c1442a5f726ce61570b" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. If there is no special character in the argument, return the original string itself, not a copy. Its inverse function is Scanf.unescaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0d56519da22ac9b7ab844dcb662b6b5e3ca7a6" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69572fdafff64426a35c582a448aa44913d1d625" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to lowercase, using the ISO Latin-1 (8859-1) character set..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2d2d82cb94ada562d6a342e526b209b60b887f" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to lowercase, using the US-ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163c9fa4940b1bcc5a96724d596d976b5db2e9c3" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdec61eece118da7a683a1371f3a01fee398774" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to uppercase, using the ISO Latin-1 (8859-1) character set..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864a8ca7c0f4e575f15013bf4127c071a3cb479f" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, with the first character set to uppercase, using the US-ASCII character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b16f76788b251356e4d1d6761232482d9e6cfe" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, without leading and trailing whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23827dffec2b473204f6248d962a6ed70248d91" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, without leading and trailing whitespace. The bytes regarded as whitespace are the ASCII characters &lt;code&gt;'&amp;nbsp;'&lt;/code&gt;, &lt;code&gt;'\012'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;, and &lt;code&gt;'\t'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60901456f742a0ed9dbc830f83569b7759f1d0ef" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: &lt;code&gt;'&amp;nbsp;'&lt;/code&gt;, &lt;code&gt;'\012'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;, and &lt;code&gt;'\t'&lt;/code&gt;. If there is neither leading nor trailing whitespace character in the argument, return the original string itself, not a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f5b339b958187225951bea4339edf97319b51f" translate="yes" xml:space="preserve">
          <source>Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: &lt;code&gt;'&amp;nbsp;'&lt;/code&gt;, &lt;code&gt;'\012'&lt;/code&gt;, &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;, and &lt;code&gt;'\t'&lt;/code&gt;. If there is no leading nor trailing whitespace character in the argument, return the original string itself, not a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0d1f1cd1efa4cd387335c99c184eb54c9a2799" translate="yes" xml:space="preserve">
          <source>Return a copy of the current contents of the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd80ca31570862a4af03aabff797ab0adc0d40f" translate="yes" xml:space="preserve">
          <source>Return a copy of the current contents of the buffer. The buffer itself is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2c49b318ff8a7310eff42bce315e30f2c05660" translate="yes" xml:space="preserve">
          <source>Return a copy of the given hashtable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2712ecdc330dd268b5b032ac37bcd2f8ca0c8a" translate="yes" xml:space="preserve">
          <source>Return a copy of the given hashtable. Unlike &lt;a href=&quot;hashtbl#VALcopy&quot;&gt;&lt;code&gt;Hashtbl.copy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;hashtbl#VALrebuild&quot;&gt;&lt;code&gt;Hashtbl.rebuild&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;h&lt;/code&gt; re-hashes all the (key, value) entries of the original table &lt;code&gt;h&lt;/code&gt;. The returned hash table is randomized if &lt;code&gt;h&lt;/code&gt; was randomized, or the optional &lt;code&gt;random&lt;/code&gt; parameter is true, or if the default is to create randomized hash tables; see &lt;a href=&quot;hashtbl#VALcreate&quot;&gt;&lt;code&gt;Hashtbl.create&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a918730be0455a78abef21489503163b933da8" translate="yes" xml:space="preserve">
          <source>Return a copy of the given hashtable. Unlike &lt;a href=&quot;morelabels.hashtbl#VALcopy&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.copy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;morelabels.hashtbl#VALrebuild&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.rebuild&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;nbsp;h&lt;/code&gt; re-hashes all the (key, value) entries of the original table &lt;code&gt;h&lt;/code&gt;. The returned hash table is randomized if &lt;code&gt;h&lt;/code&gt; was randomized, or the optional &lt;code&gt;random&lt;/code&gt; parameter is true, or if the default is to create randomized hash tables; see &lt;a href=&quot;morelabels.hashtbl#VALcreate&quot;&gt;&lt;code&gt;MoreLabels.Hashtbl.create&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fb9371aa6a43be6ab72a21320b2f310a5cd11cb" translate="yes" xml:space="preserve">
          <source>Return a copy of the given queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e995de1b77c7933088c28dae39cec90133db31" translate="yes" xml:space="preserve">
          <source>Return a copy of the given stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bf205a4b71edb1af1ca3b4635ed7d07eb9abaa" translate="yes" xml:space="preserve">
          <source>Return a copy of the given state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db994c18b13ca47f2460850e0609a5cda1c1ad0" translate="yes" xml:space="preserve">
          <source>Return a copy of the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb890add67386c423d7d9d793c6fd6e71086858" translate="yes" xml:space="preserve">
          <source>Return a fresh reference containing the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6e164b350620b04bdde9dfe7361263308ce8c1" translate="yes" xml:space="preserve">
          <source>Return a new byte sequence that contains the same bytes as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3288df26f3728e4af6621ea5a70e0e92d0691d62" translate="yes" xml:space="preserve">
          <source>Return a new byte sequence that contains the same bytes as the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35d88ad5aec4e0bee772d3ccb669d6e610bda6f" translate="yes" xml:space="preserve">
          <source>Return a new channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc8680a0f4820443679c4ca33bffc768d3a4af2" translate="yes" xml:space="preserve">
          <source>Return a new condition variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73e3fd5045de7f968d83b57ce77ff2e244d6d94" translate="yes" xml:space="preserve">
          <source>Return a new file descriptor referencing the same file as the given descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022bd62ac3f4fef8b66c421752d380647a257c3e" translate="yes" xml:space="preserve">
          <source>Return a new file descriptor referencing the same file as the given descriptor. See &lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt;&lt;code&gt;Unix.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for documentation on the &lt;code&gt;cloexec&lt;/code&gt; optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0274251e8306648bf043fd39d1b2d929f92144" translate="yes" xml:space="preserve">
          <source>Return a new file descriptor referencing the same file as the given descriptor. See &lt;a href=&quot;unixlabels#VALset_close_on_exec&quot;&gt;&lt;code&gt;UnixLabels.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for documentation on the &lt;code&gt;cloexec&lt;/code&gt; optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc741461c44e92671a1d3e08ce17aef58d13652" translate="yes" xml:space="preserve">
          <source>Return a new mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a250463867298e9eaf9678c8350c6716043386cc" translate="yes" xml:space="preserve">
          <source>Return a new queue, initially empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29293bb0256d01cced68ba9adcdef7067e73cc71" translate="yes" xml:space="preserve">
          <source>Return a new stack, initially empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b632b9591eab85fbc96a1c3fd08f92e29ab6f5bc" translate="yes" xml:space="preserve">
          <source>Return a new string that contains the same bytes as the given byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa2ddecfab0e29c2e8e9bbf8c5bc2d1ac627095" translate="yes" xml:space="preserve">
          <source>Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb33ef2fdd22ebcc2818d5a53e55762ccaf36484" translate="yes" xml:space="preserve">
          <source>Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. Warning: under Windows, the output is only suitable for use with programs that follow the standard Windows quoting conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008c82eb7a3488f2068808aaf085122455ce86c2" translate="yes" xml:space="preserve">
          <source>Return a string describing the given error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6308615f291e3990cb87826cb856a820e487ae9b" translate="yes" xml:space="preserve">
          <source>Return a string from a raw backtrace, in the same format &lt;code&gt;Printexc.get_backtrace&lt;/code&gt; uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12151c7c9dff07c2f242a2cf5034d277c5760738" translate="yes" xml:space="preserve">
          <source>Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae4c08f96ad04052340d504c28314a0c07f4294" translate="yes" xml:space="preserve">
          <source>Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml. All characters outside the ASCII printable range (32..126) are escaped, as well as backslash, double-quote, and single-quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8e3e80004732f400a60500d80e26ba6bb55cfe" translate="yes" xml:space="preserve">
          <source>Return an OCaml Bigarray wrapping the data pointed to by p. kind is the kind of array elements (one of the CAML_BA_ kind constants above). layout is CAML_BA_C_LAYOUT for an array with C layout and CAML_BA_FORTRAN_LAYOUT for an array with Fortran layout. numdims is the number of dimensions in the array. dims is an array of numdims long integers, giving the sizes of the array in each dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c740844be0e075a677fcb6369986cf1020d7188" translate="yes" xml:space="preserve">
          <source>Return an integer identifying this object, unique for the current execution of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f248c7dff46b33a22350ddd81e8c58ed82286f" translate="yes" xml:space="preserve">
          <source>Return an integer identifying this object, unique for the current execution of the program. The generic comparison and hashing functions are based on this integer. When an object is obtained by unmarshaling, the id is refreshed, and thus different from the original object. As a consequence, the internal invariants of data structures such as hash table or sets containing objects are broken after unmarshaling the data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804397fe4360a7b93b1321b1e8d68c91a432d7e1" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or &lt;code&gt;None&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7bb0cd7be56d08766ada3849b3bc9cf97fa116" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or &lt;code&gt;None&lt;/code&gt; if the map is empty. Which binding is chosen is unspecified, but equal bindings will be chosen for equal maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230572b81a15aeef6cca691ef685c7861b2c3403" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124a277abe9168405efebc5229d58eb1ce179fff" translate="yes" xml:space="preserve">
          <source>Return one binding of the given map, or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty. Which binding is chosen is unspecified, but equal bindings will be chosen for equal maps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebf20277e5047adf3133b397b741b144bdd0bde" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or &lt;code&gt;None&lt;/code&gt; if the set is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c4448d26f33d8f4ec291a782cfccb39dca2a6be" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or &lt;code&gt;None&lt;/code&gt; if the set is empty. Which element is chosen is unspecified, but equal elements will be chosen for equal sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50b9d9e24aa0f6fb2f8db6ce9e9c79af9f3eba9" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24191c024f2ae60011ab6b0eaa33a89e12e8bc5" translate="yes" xml:space="preserve">
          <source>Return one element of the given set, or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty. Which element is chosen is unspecified, but equal elements will be chosen for equal sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2668767821e82c723e2b93b0851a6112d9b6d7c" translate="yes" xml:space="preserve">
          <source>Return statistics on the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c19f3fe502749c27276fc6e62020dc173d3ed4" translate="yes" xml:space="preserve">
          <source>Return statistics on the table. The numbers are, in order: table length, number of entries, sum of bucket lengths, smallest bucket length, median bucket length, biggest bucket length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b14bc9c2b106d546f0f2fd2df64962aa24dc4cb" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26efcbf81d6b8b4c2e871a9a53668bd5e1a815fe" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list. The first element (head of the list) is at position 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439f68fc82739159c89fa8bd3a099b303fff11d0" translate="yes" xml:space="preserve">
          <source>Return the &lt;code&gt;n&lt;/code&gt;-th element of the given list. The first element (head of the list) is at position 0. Return &lt;code&gt;None&lt;/code&gt; if the list is too short.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880749007a41766d110001af9265fa1871ef60e1" translate="yes" xml:space="preserve">
          <source>Return the ASCII code of the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62309110a8b557ea8cae3a1d13024ea105ebe175" translate="yes" xml:space="preserve">
          <source>Return the absolute position in the input text of the beginning of the matched string (i.e. the offset of the first character of the matched string). The first character read from the input text has offset 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38456990b8f53a5e41580437c2b772f29fbbcd5" translate="yes" xml:space="preserve">
          <source>Return the absolute position in the input text of the end of the matched string (i.e. the offset of the first character after the matched string). The first character read from the input text has offset 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6cef13623598e5301ce130fae4c314144a19cd" translate="yes" xml:space="preserve">
          <source>Return the absolute value of its argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4af466676d95e077ec7d0c0eb365f94b3b64d5" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ea151ac7470057db09f6562f8d1f70a4d6035e" translate="yes" xml:space="preserve">
          <source>Return the absolute value of the argument. Note that this may be negative if the argument is &lt;code&gt;min_int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a4944787a25989444442aa9e3a355615036d44" translate="yes" xml:space="preserve">
          <source>Return the address of the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d88b6381fa842d1f4f6342c5da6ca29e60697e5" translate="yes" xml:space="preserve">
          <source>Return the address of the host connected to the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23d1b53534dc72170ae7e7df22ce7e3b6e63a0b" translate="yes" xml:space="preserve">
          <source>Return the binding with the smallest key in a given map (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or raise &lt;code&gt;Not_found&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bcb73b7fd699f6c85a0c103b4b8b010b19a5fd" translate="yes" xml:space="preserve">
          <source>Return the binding with the smallest key in the given map (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or &lt;code&gt;None&lt;/code&gt; if the map is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6becf53316957bcff27455506fc07eb7ab5f5b3" translate="yes" xml:space="preserve">
          <source>Return the character with the given ASCII code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4730bd2de886423d30f0d19b51f0a1b9479a1640" translate="yes" xml:space="preserve">
          <source>Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297faae34a2f7b1feb5518dd123e21cb6367aaf9" translate="yes" xml:space="preserve">
          <source>Return the current count of the stream elements, i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1000e714fb7aea64ea12d37a444505d73c718ac" translate="yes" xml:space="preserve">
          <source>Return the current count of the stream elements, i.e. the number of the stream elements discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf89807c32bb79e188d60fe9f5c2ecba00abf545" translate="yes" xml:space="preserve">
          <source>Return the current geometry of the formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca644d1cd0b6c0e16996557a51ed8ab650ed7de" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the pretty-printer, including line splitting and indentation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b2c9e70475a936059f7c3930230d44b092c2c3" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the pretty-printer, including line splitting and indentation functions. Useful to record the current setting and restore it afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b794103dee584cdb1d544ad3755a731469d7fb13" translate="yes" xml:space="preserve">
          <source>Return the current output functions of the standard pretty-printer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff9b824a0e019fcb1034af9bd056ef1df654d9b" translate="yes" xml:space="preserve">
          <source>Return the current reading position for the given channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9811ca7ba1c7bf57b6ac860a2e6725043378e7" translate="yes" xml:space="preserve">
          <source>Return the current reading position for the given channel. For files opened in text mode under Windows, the returned position is approximate (owing to end-of-line conversion); in particular, saving the current position with &lt;code&gt;pos_in&lt;/code&gt;, then going back to this position using &lt;code&gt;seek_in&lt;/code&gt; will not work. For this programming idiom to work reliably and portably, the file must be opened in binary mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe223ce43f4b699ad9d10edf014aa134257db24" translate="yes" xml:space="preserve">
          <source>Return the current semantic tag operation functions of the standard pretty-printer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd7128a788ba19d6246c464eeb82cab7819d195" translate="yes" xml:space="preserve">
          <source>Return the current size of the free space inside the minor heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c243dd17b2c9d8d725b1a348f37d36f5f593f9a" translate="yes" xml:space="preserve">
          <source>Return the current state of the generator used by the basic functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943c6a72d4cef970955cf8a0baf23383f000fbb7" translate="yes" xml:space="preserve">
          <source>Return the current status of a boolean-valued option in the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88480a696e89616baae30b34bdb2d51b04386c45" translate="yes" xml:space="preserve">
          <source>Return the current status of tag-marking operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb446fa637b6b8d3341bc3ef1f6743acef08ad0" translate="yes" xml:space="preserve">
          <source>Return the current status of tag-printing operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bd3c1db63c0329eef857a80c044eca2802fdb7" translate="yes" xml:space="preserve">
          <source>Return the current status of the given interval timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e82fae89baddf835782503fb6225d243eabc1f" translate="yes" xml:space="preserve">
          <source>Return the current time since 00:00:00 GMT, Jan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a38919a96af9027370dc236253891b359d8cae5" translate="yes" xml:space="preserve">
          <source>Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6196ac3aa3eec6746fc840473651108f002d8ef" translate="yes" xml:space="preserve">
          <source>Return the current values of the GC parameters in a &lt;code&gt;control&lt;/code&gt; record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44719d7e8bb31855760dce4861d3c60c50d390cf" translate="yes" xml:space="preserve">
          <source>Return the current values of the memory management counters in a &lt;code&gt;stat&lt;/code&gt; record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b116d8325e3d4fc3b7bbb805c51a92a5e4ca950" translate="yes" xml:space="preserve">
          <source>Return the current values of the memory management counters in a &lt;code&gt;stat&lt;/code&gt; record. This function examines every heap block to get the statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51f594db2ca91923182a8a03e87942bbdf3dd65" translate="yes" xml:space="preserve">
          <source>Return the current working directory of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fdf5ba7864c712d65c10e01b2df194f8c4798a" translate="yes" xml:space="preserve">
          <source>Return the current writing position for the given channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a1bd4616f338e6148dd3304b4f698e1f7dfc7e" translate="yes" xml:space="preserve">
          <source>Return the current writing position for the given channel. Does not work on channels opened with the &lt;code&gt;Open_append&lt;/code&gt; flag (returns unspecified results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2507ebd183ba9a5454be02b7b8d30cfb412e78" translate="yes" xml:space="preserve">
          <source>Return the current writing position for the given channel. Does not work on channels opened with the &lt;code&gt;Open_append&lt;/code&gt; flag (returns unspecified results). For files opened in text mode under Windows, the returned position is approximate (owing to end-of-line conversion); in particular, saving the current position with &lt;code&gt;pos_out&lt;/code&gt;, then going back to this position using &lt;code&gt;seek_out&lt;/code&gt; will not work. For this programming idiom to work reliably and portably, the file must be opened in binary mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2343a41b996d55a8d25ecddc78423dc6b799a99f" translate="yes" xml:space="preserve">
          <source>Return the descriptor corresponding to an input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8911533c9b1c801a828b9754a01fdb4faa39a9bf" translate="yes" xml:space="preserve">
          <source>Return the descriptor corresponding to an output channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e02fc3737cd0829b6678335c27fbe932f631180" translate="yes" xml:space="preserve">
          <source>Return the digest of the file whose name is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b515b9e20b23a0a3279dcddb264ee7e4e625794c" translate="yes" xml:space="preserve">
          <source>Return the digest of the given byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9443c254d54b0479884ecc92745eee7fbc192c" translate="yes" xml:space="preserve">
          <source>Return the digest of the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91e50e6edb1482d99464ee157aeb985e2039702" translate="yes" xml:space="preserve">
          <source>Return the effective group id under which the process runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119bac2074c3825d2b1c5479ab32d82aea1ad7a6" translate="yes" xml:space="preserve">
          <source>Return the effective group id under which the process runs. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe498ef01b9bf595af9e3d24374ea71398f98f1" translate="yes" xml:space="preserve">
          <source>Return the effective user id under which the process runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f897629460b4a3a8c93f1dc57b0ec69c8498278" translate="yes" xml:space="preserve">
          <source>Return the effective user id under which the process runs. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68010ab93fd161a3fbf3c3cb740b170262747251" translate="yes" xml:space="preserve">
          <source>Return the error condition associated with the given socket, and clear it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e4079fcd2deec8751ab333613cb019236f602f" translate="yes" xml:space="preserve">
          <source>Return the execution times of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361c27e98de822a527a95a05249324e1c20ba145" translate="yes" xml:space="preserve">
          <source>Return the execution times of the process. On Windows, it is partially implemented, will not report timings for child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f74d0d37d740c194c05fdbe3ea6ce00b232066" translate="yes" xml:space="preserve">
          <source>Return the first component of a pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c835e8304c5686221cc688117adb8f1cb010c68" translate="yes" xml:space="preserve">
          <source>Return the first dimension of the given three-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061442e7ed48f7ee1e9d425b6ff921b12a846bca" translate="yes" xml:space="preserve">
          <source>Return the first dimension of the given two-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536a414181a39a9345425eff5341faaa394d3b1b" translate="yes" xml:space="preserve">
          <source>Return the first element of the given list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8fffadcb1b4ea149990ff4a30172b6ca997a6a" translate="yes" xml:space="preserve">
          <source>Return the first element of the stream and remove it from the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ffa9e9d4748719dcf1e8a5b7e7590761c6fbf4" translate="yes" xml:space="preserve">
          <source>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'double format' bit layout, is the given &lt;code&gt;int64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0255e8862323a496e08690b4bf401e80e550ddc1" translate="yes" xml:space="preserve">
          <source>Return the floating-point number whose internal representation, according to the IEEE 754 floating-point 'single format' bit layout, is the given &lt;code&gt;int32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c4c901a6eb1a0977dadc6e69d61a34194fc8ba" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given one-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280989a968e0d4678c5045e97ddbadc039ff9b3c" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given three-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88ffd32401e861a73d7457bdcce4cdadb2fb158" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given two-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c478846fce1e2099ff024506834a919a61d55151" translate="yes" xml:space="preserve">
          <source>Return the generic Bigarray corresponding to the given zero-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9490bf41cb044a767d8ecda3e6d8e764af360c" translate="yes" xml:space="preserve">
          <source>Return the given file name without its extension, as defined in &lt;a href=&quot;filename#VALextension&quot;&gt;&lt;code&gt;Filename.extension&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbeb5a95f618b68d571b483955e1a67b0f5d9cd7" translate="yes" xml:space="preserve">
          <source>Return the given file name without its extension, as defined in &lt;a href=&quot;filename#VALextension&quot;&gt;&lt;code&gt;Filename.extension&lt;/code&gt;&lt;/a&gt;. If the extension is empty, the function returns the given file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c4fc04ba0210ef8155903de749f6f7f8e5fdc1" translate="yes" xml:space="preserve">
          <source>Return the given list without its first element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8379eddac2088338789ec888081d219b0da1fe" translate="yes" xml:space="preserve">
          <source>Return the greater of the two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f018fb98f8c4b680128d0c14134a0a9a3aaac43" translate="yes" xml:space="preserve">
          <source>Return the greater of the two arguments. The result is unspecified if one of the arguments contains the float value &lt;code&gt;nan&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ec2343573237cf912dc10bb02e5eb00f995cca" translate="yes" xml:space="preserve">
          <source>Return the group id of the user executing the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ec1b3e6c12c625146f2658f42ac0c2f03a9ea6" translate="yes" xml:space="preserve">
          <source>Return the group id of the user executing the process. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44526a1dca486fa8148a2885c02b37538caba9e3" translate="yes" xml:space="preserve">
          <source>Return the handle for the thread currently executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d4df811b30db7cbb3591895b60fd73a1f6e9be" translate="yes" xml:space="preserve">
          <source>Return the identifier of the given thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8437064a240279d144b769a630d31ad04d45b176" translate="yes" xml:space="preserve">
          <source>Return the identifier of the given thread. A thread identifier is an integer that identifies uniquely the thread. It can be used to build data structures indexed by threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53986db338c1e46f958b3889beea87e4b36619a7" translate="yes" xml:space="preserve">
          <source>Return the information for the file associated with the given descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89a7e4971dc8dcc70684378487c7e7b89e6ad2b" translate="yes" xml:space="preserve">
          <source>Return the information for the named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4475177546721efc569c34552e395c02ed640a3a" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93502737e716d9f9757a61699777755986f72a0e" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'double format' bit layout. Bit 63 of the result represents the sign of the float; bits 62 to 52 represent the (biased) exponent; bits 51 to 0 represent the mantissa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacbef4f17d22fba8858dbc5349f881670a4c0ab" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa42e30351ddbdb81bb4073e644aadc8ef7a5bb" translate="yes" xml:space="preserve">
          <source>Return the internal representation of the given float according to the IEEE 754 floating-point 'single format' bit layout. Bit 31 of the result represents the sign of the float; bits 30 to 23 represent the (biased) exponent; bits 22 to 0 represent the mantissa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2dc311581df1a1868e9b032519df8c89f6f55c" translate="yes" xml:space="preserve">
          <source>Return the kind of the given Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55b427355dfe2cbb97cc49a217e5f7072008653" translate="yes" xml:space="preserve">
          <source>Return the layout of the given Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0349c494e937b3174164e1099b097cf8bd380e34" translate="yes" xml:space="preserve">
          <source>Return the length (number of bytes) of the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e555b83a9a4fca65f457cd4b9ea918071e72f4" translate="yes" xml:space="preserve">
          <source>Return the length (number of characters) of the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca8f2d37620459f1a9a11d79e584a46d5e19f17" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89723d06bf13b4a9eed201fbc2ea988b3af71eb" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given floatarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dec03523e932f78284e510187eaa01cf693885e" translate="yes" xml:space="preserve">
          <source>Return the length (number of elements) of the given list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48676ed71ee6c65819552a6e630eea359c21817a" translate="yes" xml:space="preserve">
          <source>Return the list of all bindings of the given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059abc0a91c72aae1c317f8f630ca2bc69a23869" translate="yes" xml:space="preserve">
          <source>Return the list of all bindings of the given map. The returned list is sorted in increasing order of keys with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;map.make&quot;&gt;&lt;code&gt;Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbb466af421189a10ff0835c00bcaa90938bcae" translate="yes" xml:space="preserve">
          <source>Return the list of all bindings of the given map. The returned list is sorted in increasing order of keys with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;morelabels.map.make&quot;&gt;&lt;code&gt;MoreLabels.Map.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c129d57ead162de7fc3aadfccf44081331889f" translate="yes" xml:space="preserve">
          <source>Return the list of all elements of the given set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d281e2191bde538fc75fe8d33640935983cae0c7" translate="yes" xml:space="preserve">
          <source>Return the list of all elements of the given set. The returned list is sorted in increasing order with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;morelabels.set.make&quot;&gt;&lt;code&gt;MoreLabels.Set.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532b8441cf3070f6987728e45ca3989a31cae74b" translate="yes" xml:space="preserve">
          <source>Return the list of all elements of the given set. The returned list is sorted in increasing order with respect to the ordering &lt;code&gt;Ord.compare&lt;/code&gt;, where &lt;code&gt;Ord&lt;/code&gt; is the argument given to &lt;a href=&quot;set.make&quot;&gt;&lt;code&gt;Set.Make&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7165c129eabb85b52248e1854cabbc7dc158870" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ac56bfe9bb0dd951530aefcb02722ef531c1e1" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program (i.e. are not dynamically linked).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5c84e5aab94485a3b9e83f3977f1e9404351c9" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that form the main program together with those that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147b9884b8f49168a597ea2ac2e755dd8393f845" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b5e5afca199c0c51e4aadc57d91a2bb554477f" translate="yes" xml:space="preserve">
          <source>Return the list of compilation units that have been dynamically loaded via &lt;code&gt;loadfile&lt;/code&gt; (and not via &lt;code&gt;loadfile_private&lt;/code&gt;). Note that compilation units loaded dynamically cannot be unloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a791391dcfd868f76e569d8bb9810a70ac2dd6fb" translate="yes" xml:space="preserve">
          <source>Return the list of groups to which the user executing the process belongs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd25d8674e41c2053e759649badd76e8f1c2b56a" translate="yes" xml:space="preserve">
          <source>Return the list of groups to which the user executing the process belongs. On Windows, always return &lt;code&gt;[|1|]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432b0e6150bdec0e0f47512d9349f84a5540dcb4" translate="yes" xml:space="preserve">
          <source>Return the login name of the user executing the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c523ab0b7ce7c47b28f213568fdcbceb94fe2f9d" translate="yes" xml:space="preserve">
          <source>Return the matched string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3209accfd9532d56fc6c3df89e2932af224337e1" translate="yes" xml:space="preserve">
          <source>Return the maximum indentation limit (in characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36d286f55e4acb1d562548251be082a2f530a40" translate="yes" xml:space="preserve">
          <source>Return the n&lt;sup&gt;th&lt;/sup&gt; character in the matched string. The first character corresponds to n = 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d060a450eacfd8908f0d0e1ea8bdaf949864d47e" translate="yes" xml:space="preserve">
          <source>Return the name of the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3c277db7014cd8ef6cc35588b182fc8b12e5a8" translate="yes" xml:space="preserve">
          <source>Return the name of the local host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a57bbe820f575de0130805b1e3013f7326c56f0" translate="yes" xml:space="preserve">
          <source>Return the name of the runtime variant the program is running on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2452bf5ae2acb0f47220b39949c4f5c1dc7be9" translate="yes" xml:space="preserve">
          <source>Return the name of the runtime variant the program is running on. This is normally the argument given to &lt;code&gt;-runtime-variant&lt;/code&gt; at compile time, but for byte-code it can be changed after compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f847d1780107205b367596c4ccb4550703388531" translate="yes" xml:space="preserve">
          <source>Return the names of all files present in the given directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0d068f9a289d9154e8c9134aeea8bb89c3307d" translate="yes" xml:space="preserve">
          <source>Return the names of all files present in the given directory. Names denoting the current directory and the parent directory (&lt;code&gt;&quot;.&quot;&lt;/code&gt; and &lt;code&gt;&quot;..&quot;&lt;/code&gt; in Unix) are not returned. Each string in the result is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3312ceffd4d08b82e00804a61715b59bdfe025ba" translate="yes" xml:space="preserve">
          <source>Return the next entry in a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed62118703f31eabe09b7dcc079392d9d8d8d55a" translate="yes" xml:space="preserve">
          <source>Return the number of bindings of a map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ac0ea6114557ed8db7487d9cd7054d24bd7426" translate="yes" xml:space="preserve">
          <source>Return the number of characters currently contained in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639f930e9c3e7929b330d084069f913aab704216" translate="yes" xml:space="preserve">
          <source>Return the number of dimensions of the given Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f26ed6dbbeca49055e192d75d80831d107ea2ad" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594a0db2d4c39d5eb0f40f63644d0784043c13b2" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8a90637291878f581313af8ced21884e6238a9" translate="yes" xml:space="preserve">
          <source>Return the number of elements in a stack. Time complexity O(1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b060333d4e41f0edefda15da4347ecf299979957" translate="yes" xml:space="preserve">
          <source>Return the number of elements of a set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f97404a7718cfbd5bf704eec36cf800dd5480d" translate="yes" xml:space="preserve">
          <source>Return the number of times we tried to map huge pages and had to fall back to small pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4890281d997ebb5b7c0eade0ae65a3c189fb318" translate="yes" xml:space="preserve">
          <source>Return the number of times we tried to map huge pages and had to fall back to small pages. This is always 0 if &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; contains &lt;code&gt;H=1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5b2c94610054b78ee29a7cd3806b95350ccd75" translate="yes" xml:space="preserve">
          <source>Return the one-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb97945a3219f3314034bc592a66c7579d2c816" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5205e52283f91c20c83e59223daba0e11d4478" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_full&quot;&gt;&lt;code&gt;Unix.open_process_full&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt;&lt;code&gt;Unix.open_process_args_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac5c9764c3e03d14bf34e52a526c179d070e483" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787ebf8ffca7b6ff030134e3fe40bcc62566b004" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f875776682a19ad8f2129990a272d6a383894b5" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unixlabels#VALopen_process_args&quot;&gt;&lt;code&gt;UnixLabels.open_process_args&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a951dc3d24e59b305649c041478641e48b2a33" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unixlabels#VALopen_process_full&quot;&gt;&lt;code&gt;UnixLabels.open_process_full&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unixlabels#VALopen_process_args_full&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccc092efc92a5fe83d1c6bc7a32207944ac3c8f" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unixlabels#VALopen_process_args_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7710bc5500b271a318405dfc06709755bf5da00" translate="yes" xml:space="preserve">
          <source>Return the pid of a process opened via &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;unixlabels#VALopen_process_args_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066d5df069b8686294fade3cbf497b782421071e" translate="yes" xml:space="preserve">
          <source>Return the pid of the parent process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bede9cb911c8dfcb4a6e2ecbcb8ce5e755123f26" translate="yes" xml:space="preserve">
          <source>Return the pid of the parent process. On Windows: not implemented (because it is meaningless).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95add63bcee088049f2068e23dac1999a30e09b8" translate="yes" xml:space="preserve">
          <source>Return the pid of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8b1b7080f9a9afc56d8385fe26c87879c9a10f" translate="yes" xml:space="preserve">
          <source>Return the printable hexadecimal representation of the given digest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3b93e99f769c3e84bd27ac8a6981dd6d6dc951" translate="yes" xml:space="preserve">
          <source>Return the printable representation of the given Internet address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667620674c47d750eff43fe29b99fe07851842bc" translate="yes" xml:space="preserve">
          <source>Return the printable representation of the given Internet address. See &lt;a href=&quot;unix#VALinet_addr_of_string&quot;&gt;&lt;code&gt;Unix.inet_addr_of_string&lt;/code&gt;&lt;/a&gt; for a description of the printable representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483b6216135c060350ba1e0b157f2cbd1e0f0d39" translate="yes" xml:space="preserve">
          <source>Return the printable representation of the given Internet address. See &lt;a href=&quot;unixlabels#VALinet_addr_of_string&quot;&gt;&lt;code&gt;UnixLabels.inet_addr_of_string&lt;/code&gt;&lt;/a&gt; for a description of the printable representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e8c2e9bdb415dc67f1776111054bc46b48b196" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb812b6a69643735c6f91806d12aa7f6598130de" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''. The returned array is empty if the process has special privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dc2a363c825786f643ce61f53ad0bd7a2b71eb" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''. Unlike &lt;a href=&quot;unix#VALenvironment&quot;&gt;&lt;code&gt;Unix.environment&lt;/code&gt;&lt;/a&gt;, this function returns a populated array even if the process has special privileges. See the documentation for &lt;a href=&quot;unix#VALunsafe_getenv&quot;&gt;&lt;code&gt;Unix.unsafe_getenv&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6780a36b73c6dccb02cf42004cb5b4212a053e13" translate="yes" xml:space="preserve">
          <source>Return the process environment, as an array of strings with the format ``variable=value''. Unlike &lt;a href=&quot;unixlabels#VALenvironment&quot;&gt;&lt;code&gt;UnixLabels.environment&lt;/code&gt;&lt;/a&gt;, this function returns a populated array even if the process has special privileges. See the documentation for &lt;a href=&quot;unixlabels#VALunsafe_getenv&quot;&gt;&lt;code&gt;UnixLabels.unsafe_getenv&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4ff511c6533314bfb899ed62cdf5d01d0264f9" translate="yes" xml:space="preserve">
          <source>Return the processor time, in seconds, used by the program since the beginning of execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe6f782cc73d7991c0b16d399258b87ea7d7955" translate="yes" xml:space="preserve">
          <source>Return the second component of a pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33e3510a3756dde4637fb6206310d406ce2cfc7" translate="yes" xml:space="preserve">
          <source>Return the second dimension of the given three-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7386d51069db87a0d398116b234ebf88cb0b9f8" translate="yes" xml:space="preserve">
          <source>Return the second dimension of the given two-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a8ffb964a264b8ead464a4a5f3e109f45cf335" translate="yes" xml:space="preserve">
          <source>Return the set of blocked signals that are currently pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446e78f1f8342de1d12c809b390dda818f81383e" translate="yes" xml:space="preserve">
          <source>Return the size (dimension) of the given one-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152f80d1b4cac00a75ef58117b5c1fc5fb5de070" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934f0833c834fdbff755694a296f32142833ff9f" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d3e2ad1363d51312c94d1ab2c440f4434cdb5a" translate="yes" xml:space="preserve">
          <source>Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless. The returned size does not take into account the end-of-line translations that can be performed when reading from a channel opened in text mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc1426e6a49e14a68f242752b5549ab528f4a47" translate="yes" xml:space="preserve">
          <source>Return the smaller of the two arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25854eb1dc4fc26311440442b6bf7d8025a9e571" translate="yes" xml:space="preserve">
          <source>Return the smaller of the two arguments. The result is unspecified if one of the arguments contains the float value &lt;code&gt;nan&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03d77470c1acc851a09cd269fa127fba2de50aa" translate="yes" xml:space="preserve">
          <source>Return the smallest element of the given set (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or &lt;code&gt;None&lt;/code&gt; if the set is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017dac5bead542d5017ba0e9fa30c30a01c06cbe" translate="yes" xml:space="preserve">
          <source>Return the smallest element of the given set (with respect to the &lt;code&gt;Ord.compare&lt;/code&gt; ordering), or raise &lt;code&gt;Not_found&lt;/code&gt; if the set is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9537b164e407090d6db868adb40dbd03a0792a42" translate="yes" xml:space="preserve">
          <source>Return the socket domain adequate for the given socket address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7a8bb7b9eeb7b6627344301bf648aa4daaa779" translate="yes" xml:space="preserve">
          <source>Return the status of the terminal referred to by the given file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5626ec7d4ca2da5a8d3bb9ed2c527c644e4678e9" translate="yes" xml:space="preserve">
          <source>Return the status of the terminal referred to by the given file descriptor. On Windows, not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9cdfde85589c923cd4ca02542d13d0cca96b93" translate="yes" xml:space="preserve">
          <source>Return the stream holding the elements of the list in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05fa5b07eb6ebbdf933bdfc2d40f15060722ade" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters of the bytes parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf78826f68b6e198d276cec474aaeeb8f27d184" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters of the string parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2468af7842aa35af943ca1d47042c1d86e8d6c47" translate="yes" xml:space="preserve">
          <source>Return the stream of the characters read from the input channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1b7572b59c2595ba97bfeecd0a7e61e9a67f8b" translate="yes" xml:space="preserve">
          <source>Return the string representation of a boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15835b97f4ff7af238cdc0ad3af680b29be0eed3" translate="yes" xml:space="preserve">
          <source>Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0425121ad48174987f6ebd15d09075898ff670" translate="yes" xml:space="preserve">
          <source>Return the string representation of a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fdc654647800e5ec41090dcf080e361a49adc8" translate="yes" xml:space="preserve">
          <source>Return the string representation of an integer, in decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9638e46d453c3b7eed3f92aba7fd9fb4a69f06" translate="yes" xml:space="preserve">
          <source>Return the string representation of its argument, in decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5993a8566afc49eebb9d190077edf1da30dc40c4" translate="yes" xml:space="preserve">
          <source>Return the string representation of its argument, in signed decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee061fa1ce7e36f10472aaebc71d041f385f79a" translate="yes" xml:space="preserve">
          <source>Return the text of the ellipsis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1687fb65b0b5dee545f3581d2861e0adb08cf5" translate="yes" xml:space="preserve">
          <source>Return the third dimension of the given three-dimensional Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fded3ea1551782765551c15274e9f9e22ce90b1c" translate="yes" xml:space="preserve">
          <source>Return the thread currently executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f82693ea095e57e92edc69fb4af99e6e665c6b3" translate="yes" xml:space="preserve">
          <source>Return the three-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaba934f777d3a28c03ff2df1af97dba235b90b0" translate="yes" xml:space="preserve">
          <source>Return the total number of bytes allocated since the program was started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6b924475ae21a46972a34b8a9f1d42c3ca1337" translate="yes" xml:space="preserve">
          <source>Return the total number of bytes allocated since the program was started. It is returned as a &lt;code&gt;float&lt;/code&gt; to avoid overflow problems with &lt;code&gt;int&lt;/code&gt; on 32-bit machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40589a863b0d64e0c0727552da1b9334eb57468" translate="yes" xml:space="preserve">
          <source>Return the two-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49064cf0b703a2346a564495d95c297ee09b80dc" translate="yes" xml:space="preserve">
          <source>Return the user id of the user executing the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fc68a13982d232eda790fc2a50a0dcaffa9cf0" translate="yes" xml:space="preserve">
          <source>Return the user id of the user executing the process. On Windows, always return &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c49ef3e833d46240486c64f87be23c5629ea57" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment or &lt;code&gt;None&lt;/code&gt; if the variable is unbound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85057500b567df16b19c1cf118645b5d304c6b1b" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment, unless the process has special privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f395b0f40289db78c2fd037a9a9f2b7eab458192" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eeaed60e457f15050fb8745c16d9d0615537f1" translate="yes" xml:space="preserve">
          <source>Return the value associated to a variable in the process environment. Raise &lt;code&gt;Not_found&lt;/code&gt; if the variable is unbound. (This function is identical to &lt;code&gt;Sys.getenv&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654f9530e978b351bceb2513786137bd29a6568c" translate="yes" xml:space="preserve">
          <source>Return the value of the runtime parameters, in the same format as the contents of the &lt;code&gt;OCAMLRUNPARAM&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81893980ccabfca942d3ed99ddbb558ef05ef17b" translate="yes" xml:space="preserve">
          <source>Return the zero-dimensional Bigarray corresponding to the given generic Bigarray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a34743b7fda569f680af55a3f32d4e6549551c" translate="yes" xml:space="preserve">
          <source>Return whether runtime warnings are currently enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="07671ae050d7c23c0f7e43b9f1b20ad161743db2" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the given name refers to a directory, &lt;code&gt;false&lt;/code&gt; if it refers to another kind of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f876cd5c30fd695157f74860c4acccf9ffdf71" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the user is able to create symbolic links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c642c27c99cf713605f23dbe275499f37af0259" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the user is able to create symbolic links. On Windows, this indicates that the user not only has the SeCreateSymbolicLinkPrivilege but is also running elevated, if necessary. On other platforms, this is simply indicates that the symlink system call is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c425a222194f2017b152701d584dd760b71e0ec4" translate="yes" xml:space="preserve">
          <source>Returns the material printed with &lt;code&gt;str_formatter&lt;/code&gt;, flushes the formatter and resets the corresponding buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b58b0830c1aefdead60d25be62cc605ba270db" translate="yes" xml:space="preserve">
          <source>Returns the maximum number of pretty-printing boxes allowed before ellipsis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae6bb2e3dfb5a16b6f5f0913a95eab503656ba7" translate="yes" xml:space="preserve">
          <source>Returns the message that would have been printed by &lt;a href=&quot;arg#VALusage&quot;&gt;&lt;code&gt;Arg.usage&lt;/code&gt;&lt;/a&gt;, if provided with the same parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f47eb1d3f9355ea817a9a85f7df9a2a66db5b79" translate="yes" xml:space="preserve">
          <source>Returns the position of the right margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24b11724f17e6b30a567867f73a1d47f577b8b9" translate="yes" xml:space="preserve">
          <source>Returns the slots of a raw backtrace, or &lt;code&gt;None&lt;/code&gt; if none of them contain useful information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0019dd17334bff6585b6980155df695ff5d452e6" translate="yes" xml:space="preserve">
          <source>Returns the slots of a single raw backtrace entry, or &lt;code&gt;None&lt;/code&gt; if this entry lacks debug information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d63c3284627826c87cf50ba1ac7bc94e7935ec0" translate="yes" xml:space="preserve">
          <source>Reverse the precedence of implementations and interfaces when merging. All elements in implementation files are kept, and the -m option indicates which parts of the comments in interface files are merged with the comments in implementation files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4862f22e5984f9029900ba9255ea8df3a380fd39" translate="yes" xml:space="preserve">
          <source>Reverse-application operator: &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; is exactly equivalent to &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26319486b216ea03bb91a3ce9cccb058c2d9c39f" translate="yes" xml:space="preserve">
          <source>Reverse-application operator: &lt;code&gt;x&amp;nbsp;|&amp;gt;&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;g&lt;/code&gt; is exactly equivalent to &lt;code&gt;g&amp;nbsp;(f&amp;nbsp;(x))&lt;/code&gt;. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7419326f5a02dc9021eb6c48a2476ea7739f629e" translate="yes" xml:space="preserve">
          <source>Roughly speaking, tag-marking is commonly used to get a better rendering of texts in the rendering device, while tag-printing allows fine tuning of printing routines to print the same entity differently according to the semantic tags (i.e. print additional material or even omit parts of the output).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25f7e55ae525e900e70fdb2687e2204e7652e5b" translate="yes" xml:space="preserve">
          <source>Round above to an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb35ef8469a6766094f0b5b1f62d7fce93f0c4c" translate="yes" xml:space="preserve">
          <source>Round above to an integer value. &lt;code&gt;ceil&amp;nbsp;f&lt;/code&gt; returns the least integer value greater than or equal to &lt;code&gt;f&lt;/code&gt;. The result is returned as a float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f6d1f314177a003e8063dc1372e721bbd39e9b" translate="yes" xml:space="preserve">
          <source>Round below to an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0377b4336ea34b53e0e7d18d7b1fd4710116ee" translate="yes" xml:space="preserve">
          <source>Round below to an integer value. &lt;code&gt;floor&amp;nbsp;f&lt;/code&gt; returns the greatest integer value less than or equal to &lt;code&gt;f&lt;/code&gt;. The result is returned as a float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e25a1f3631925180ed399cb791180ed6094248e" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;1&lt;em&gt; A function that has parameters or local variables of type value must begin with a call to one of the CAMLparam macros and return with CAMLreturn, CAMLreturn0, or CAMLreturnT. In particular, CAMLlocal and CAMLxparam can only be called &lt;/em&gt;after &lt;em&gt;CAMLparam. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c62e6ab47f408810c095cb117f82648b3ea4a96" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;2&lt;em&gt; Local variables of type value must be declared with one of the CAMLlocal macros. Arrays of values are declared with CAMLlocalN. These macros must be used at the beginning of the function, not in a nested block. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4fe6f88e69a3f3a1dde0394f713fd5c3d65967" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;3&lt;em&gt; Assignments to the fields of structured blocks must be done with the Store_field macro (for normal blocks) or Store_double_field macro (for arrays and records of floating-point numbers). Other assignments must not use Store_field nor Store_double_field. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d04973937822050ca5c9de7e5d1a938ad249aa5" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;4&lt;em&gt; Global variables containing values must be registered with the garbage collector using the caml_register_global_root function, save that global variables and locations that will only ever contain OCaml integers (and never pointers) do not have to be registered.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ea4bb1ec104d6103cfd08402a27d5cf0d751af" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;5&lt;em&gt; After a structured block (a block with tag less than No_scan_tag) is allocated with the low-level functions, all fields of this block must be filled with well-formed values before the next allocation operation. If the block has been allocated with caml_alloc_small, filling is performed by direct assignment to the fields of the block: &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb842a0214f6e1cb1694cf46f11c6f8390e9cb79" translate="yes" xml:space="preserve">
          <source>Rule &amp;zwj;6&lt;em&gt; Direct assignment to a field of a block, as in &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9abff6d1f85e9545c3432b7c0c7e71077e6b73" translate="yes" xml:space="preserve">
          <source>Rule 1&lt;em&gt; A function that has parameters or local variables of type value must begin with a call to one of the CAMLparam macros and return with CAMLreturn, CAMLreturn0, or CAMLreturnT. In particular, CAMLlocal and CAMLxparam can only be called &lt;/em&gt;after &lt;em&gt;CAMLparam. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21947935e72c0abfbdf1506eabae74ecf389254" translate="yes" xml:space="preserve">
          <source>Rule 2&lt;em&gt; Local variables of type value must be declared with one of the CAMLlocal macros. Arrays of values are declared with CAMLlocalN. These macros must be used at the beginning of the function, not in a nested block. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cbf47c8b79ed4302114b968f1a67cd223a2fcb" translate="yes" xml:space="preserve">
          <source>Rule 3&lt;em&gt; Assignments to the fields of structured blocks must be done with the Store_field macro (for normal blocks) or Store_double_field macro (for arrays and records of floating-point numbers). Other assignments must not use Store_field nor Store_double_field. &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f845dabc56cc41449c2f14e79e50b3ff0cb4238" translate="yes" xml:space="preserve">
          <source>Rule 4&lt;em&gt; Global variables containing values must be registered with the garbage collector using the caml_register_global_root function, save that global variables and locations that will only ever contain OCaml integers (and never pointers) do not have to be registered.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194be911fcb6f65c97a5b034bbe99f8ab89e30d8" translate="yes" xml:space="preserve">
          <source>Rule 5&lt;em&gt; After a structured block (a block with tag less than No_scan_tag) is allocated with the low-level functions, all fields of this block must be filled with well-formed values before the next allocation operation. If the block has been allocated with caml_alloc_small, filling is performed by direct assignment to the fields of the block: &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b47bc84b25954ee1bf67cab8c46516531760e13" translate="yes" xml:space="preserve">
          <source>Rule 6&lt;em&gt; Direct assignment to a field of a block, as in &lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18f6921eef2446f5828775de5f17f14a495f57f" translate="yes" xml:space="preserve">
          <source>Rule of thumb for casual users of this library:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08ad5ff7b0faaf640cdcfb91593e99a8405a091" translate="yes" xml:space="preserve">
          <source>Rules can also contain the &lt;code&gt;%prec &lt;/code&gt;symbol directive in the right-hand side part, to override the default precedence and associativity of the rule with the precedence and associativity of the given symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee103b7d23d4ebd84acdfdab56301124f798767f" translate="yes" xml:space="preserve">
          <source>Run the debugger program from the working directory dir, instead of the current directory. (See also the cd command.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33d046f2f0d6b65906192102d14ad40ae93db06" translate="yes" xml:space="preserve">
          <source>Run the program and stop at the next event, skipping over function calls. With an argument, do it count times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa6e0df32a74c39740ce1a2b36cd7a7922138e2" translate="yes" xml:space="preserve">
          <source>Run the program and stop at the next event. With an argument, do it count times. If count is 0, run until the program terminates or a breakpoint is hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d820af83a79aac98fd79a203da3f7b31ae9108" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the first event before the current function invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3574794cee2b6fb669e40f9d67c17ce96c3066dc" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the previous event, skipping over function calls. With an argument, do it count times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6a7ba4e2430e332885d3303baa5a56f52adbb0" translate="yes" xml:space="preserve">
          <source>Run the program backward and stop at the previous event. With an argument, do it count times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdbe39fb34c974e9361059c25a583544867c5da" translate="yes" xml:space="preserve">
          <source>Run the program until a breakpoint is hit, or the program terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa7f2c2df34a908be406227638b3c40e639a4fe" translate="yes" xml:space="preserve">
          <source>Run the program until the current function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb5264557e071871ebff30ddc1c06100adcbe29" translate="yes" xml:space="preserve">
          <source>Run-time support for lazy values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cb34a03309c89d171d482ce75481aa7e18e73f" translate="yes" xml:space="preserve">
          <source>Run-time support for lazy values. All functions in this module are for system use only, not for the casual user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa46548db63e22eae023361f073ead35c19731b" translate="yes" xml:space="preserve">
          <source>Run-time support for objects and classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc459881e396679e8f3b89e53ed6d439ad46f0e" translate="yes" xml:space="preserve">
          <source>Run-time support for objects and classes. All functions in this module are for system use only, not for the casual user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e81fa9c83d38e3ac1edd3552a0eb335aae424d" translate="yes" xml:space="preserve">
          <source>Run-time support for recursive modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6822b33e0e8a0dd70c1220928d28080e57dc226" translate="yes" xml:space="preserve">
          <source>Run-time support for recursive modules. All functions in this module are for system use only, not for the casual user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8e0528452ff03ac8c5f5bd6d0cbc5d3759ad9b" translate="yes" xml:space="preserve">
          <source>Running an executable that has been compiled with ocamlcp or ocamloptp records the execution counts for the specified parts of the program and saves them in a file called ocamlprof.dump in the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10f6c4c510f606cd3d403871fcca1878d1a0557" translate="yes" xml:space="preserve">
          <source>Running the functions that were registered with Stdlib.at_exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b12e58b1b71d75c02b19aa32a3b1b980fda40c2" translate="yes" xml:space="preserve">
          <source>Running the program provided earlier with OCAML_EVENTLOG_ENABLED=p will for example yield the following result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="efc4d12ca6df051f4b726e278e83476d7e281d35" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;Expand&lt;/code&gt; arguments are allowed and the &lt;a href=&quot;arg#VALcurrent&quot;&gt;&lt;code&gt;Arg.current&lt;/code&gt;&lt;/a&gt; reference is not updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c759642e5b9ae84c517018cf93477f18794403c8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5d41ff5725e6195edce3879692f86e84de9daf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse&quot;&gt;&lt;code&gt;Arg.parse&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing. A typical use for this feature is to parse command lines of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce272610bebb178f81b99ce34d02c3bea9037e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv&quot;&gt;&lt;code&gt;Arg.parse_argv&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb57f9a251755a25bd673901e8c89fce7f7e000" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv&quot;&gt;&lt;code&gt;Arg.parse_argv&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;speclist&lt;/code&gt; argument is a reference and may be updated during the parsing. See &lt;a href=&quot;arg#VALparse_dynamic&quot;&gt;&lt;code&gt;Arg.parse_dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06f407f48f537e3bf9f0aab3c0fd9ae569fd10f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;argv&lt;/code&gt; argument is a reference and may be updated during the parsing of &lt;code&gt;Expand&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30daa2e8eb7a5fafb2e2f378489fb8c36d77c2f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;, except that the &lt;code&gt;argv&lt;/code&gt; argument is a reference and may be updated during the parsing of &lt;code&gt;Expand&lt;/code&gt; arguments. See &lt;a href=&quot;arg#VALparse_argv_dynamic&quot;&gt;&lt;code&gt;Arg.parse_argv_dynamic&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919867a5682adf2b806f5aafe9260ca926982189" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALappend&quot;&gt;&lt;code&gt;Array.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2f1fe85367029b3e28f1054ca7d3c59e03c6d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALexists&quot;&gt;&lt;code&gt;Array.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b242815a316810b7ec12598a3e1e5ec439a88f1c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALfor_all&quot;&gt;&lt;code&gt;Array.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b18c0d2d44b258eb22156d14028803337b8f9b4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALiter&quot;&gt;&lt;code&gt;Array.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcf223688ef7e3edd57527f52f13eb8a194f9d1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALiter&quot;&gt;&lt;code&gt;Array.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied with the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0d694b677271f60d7455685d0d21ae0dcfd8c2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALmap&quot;&gt;&lt;code&gt;Array.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27264073342409963f6b45f54dae3a7263c03cf1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALmem&quot;&gt;&lt;code&gt;Array.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e907d0e035f613d9d66fb4ba5ccbb4e4f687e36" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALmem&quot;&gt;&lt;code&gt;Array.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc576d9ed15b363a6f59f930c00c545f126a56e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;array#VALstable_sort&quot;&gt;&lt;code&gt;Array.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6244692cedb700735cc510ac2331f20dd448794a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97405025fa431a41a3706696600e09871c75f655" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;array#VALsort&quot;&gt;&lt;code&gt;Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86be45b6d8f2d1d0b25368390b70d922ded97a7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALappend&quot;&gt;&lt;code&gt;ArrayLabels.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb78a6f8069873a797a227f4767a378fba78ed5" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALexists&quot;&gt;&lt;code&gt;ArrayLabels.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6f80792c25a21550e4d43edda9eaa91e95d6ad" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALfor_all&quot;&gt;&lt;code&gt;ArrayLabels.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5323fc47789f794fe72351563f0e1fa65f473f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALiter&quot;&gt;&lt;code&gt;ArrayLabels.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5393f82003c7eb52395c936d7585a0e877ed2b95" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALmap&quot;&gt;&lt;code&gt;ArrayLabels.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb3b59a0eaa483463885c9027782941f2d161cb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALmem&quot;&gt;&lt;code&gt;ArrayLabels.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be4945b92031a35d5f612f1af651ac5977e8264" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;arraylabels#VALstable_sort&quot;&gt;&lt;code&gt;ArrayLabels.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfe25a44867f93bc1075f276a30db7fc5848089" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cd5d947233a03e68947c4e597c0ed72f23130f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;arraylabels#VALsort&quot;&gt;&lt;code&gt;ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45265fb607f4846e899fbf60e6e85fa49d1982dc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;bytes#VALblit_string&quot;&gt;&lt;code&gt;Bytes.blit_string&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98a5b698c78e1cbbe8ea64b1623654ceb4caee8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;bytes#VALiter&quot;&gt;&lt;code&gt;Bytes.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the byte as first argument and the byte itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6cdad60bdb48370f69b1d70e014e9b72d92c9f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;bytes#VALsub&quot;&gt;&lt;code&gt;Bytes.sub&lt;/code&gt;&lt;/a&gt; but return a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0f0eae36c6579809a645114cc786ddde5a8757" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;byteslabels#VALiter&quot;&gt;&lt;code&gt;BytesLabels.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the byte as first argument and the byte itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e2c418032d5c4fc49baceba6d412fe4a870576" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;byteslabels#VALsub&quot;&gt;&lt;code&gt;BytesLabels.sub&lt;/code&gt;&lt;/a&gt; but return a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76ea0dfff831d30c32dc2ea7243f0184a031e06" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALblit_data&quot;&gt;&lt;code&gt;Ephemeron.K1.blit_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d4c6a33a99707fe445670f42fa9cb9e5b60c0e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALblit_key&quot;&gt;&lt;code&gt;Ephemeron.K1.blit_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3cb019318b41aa1ccd210ba658180378e9a151" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcheck_data&quot;&gt;&lt;code&gt;Ephemeron.K1.check_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbd2ee1680f6517ff228f585758f02f4374dd14" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcheck_key&quot;&gt;&lt;code&gt;Ephemeron.K1.check_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2042d70e36b40ca89faeb0b202f4b5ab4fff165" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALcreate&quot;&gt;&lt;code&gt;Ephemeron.K1.create&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e209f2bfc77ca97fd02c7ce069d28edc6165de7e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_data&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="568c761efffb54b66e93649175fc779f688d1b3d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_data_copy&quot;&gt;&lt;code&gt;Ephemeron.K1.get_data_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2ab2cc6cc01aa7278b7d4280b1f56854a8b988" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_key&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b72029dfa1493b874920908ebbd9e791e5c4d0c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALget_key_copy&quot;&gt;&lt;code&gt;Ephemeron.K1.get_key_copy&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f84cc672a834fb988ea1c9c659545484fa7398e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.set_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b9609b57f58f8d58ea6c8c2a0440f09557a2f6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.set_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96eb276bc3d191c4e9ab0cea3c2305d4a1ea719" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALunset_data&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_data&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeb86f3b4637cf4b5ba1a3b6ffc60b8913fc62e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;ephemeron.k1#VALunset_key&quot;&gt;&lt;code&gt;Ephemeron.K1.unset_key&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b786bfda5e45a89cfc3b00c5b661d97ebd87018b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALremove_extension&quot;&gt;&lt;code&gt;Filename.remove_extension&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Invalid_argument&lt;/code&gt; if the given name has an empty extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ed289cc37a407068da0e36ad9ed957eca24a83" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALtemp_file&quot;&gt;&lt;code&gt;Filename.temp_file&lt;/code&gt;&lt;/a&gt;, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e82ce81e07c7c9bac6ea7fcdb7f2faea5c40461" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;filename#VALtemp_file&quot;&gt;&lt;code&gt;Filename.temp_file&lt;/code&gt;&lt;/a&gt;, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. This function is more secure than &lt;code&gt;temp_file&lt;/code&gt;: there is no risk that the temporary file will be modified (e.g. replaced by a symbolic link) before the program opens it. The optional argument &lt;code&gt;mode&lt;/code&gt; is a list of additional flags to control the opening of the file. It can contain one or several of &lt;code&gt;Open_append&lt;/code&gt;, &lt;code&gt;Open_binary&lt;/code&gt;, and &lt;code&gt;Open_text&lt;/code&gt;. The default is &lt;code&gt;[Open_text]&lt;/code&gt; (open in text mode). The file is created with permissions &lt;code&gt;perms&lt;/code&gt; (defaults to readable and writable only by the file owner, &lt;code&gt;0o600&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b303c6d712e6976b4e45797412d70eb55774196" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALappend&quot;&gt;&lt;code&gt;Float.Array.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of floatarrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41416d7a8b7b0adf79c3afce58707991794941ab" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALiter&quot;&gt;&lt;code&gt;Float.Array.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied with the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22ed5bf79a3a77efc5132d1cbf4fd101f23251e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALmap&quot;&gt;&lt;code&gt;Float.Array.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c1f693de3156b9c1f1b88f26bf9a4022236c7c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALmem&quot;&gt;&lt;code&gt;Float.Array.mem&lt;/code&gt;&lt;/a&gt;, but uses IEEE equality instead of structural equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014312ce8b144c294f55b09e82f32dec292be133" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;float.array#VALstable_sort&quot;&gt;&lt;code&gt;Float.Array.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11082ec4b9195ccb2340ff67467acf4a9e5f254" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731672c2481f05624bc863ac9f33958c6862957f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.array#VALsort&quot;&gt;&lt;code&gt;Float.Array.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae626ef1072f62d83cd5953b918608d4863f5a96" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALappend&quot;&gt;&lt;code&gt;Float.ArrayLabels.append&lt;/code&gt;&lt;/a&gt;, but concatenates a list of floatarrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5c3a8985f6bdebae1f89fc1877013c24225a6d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALiter&quot;&gt;&lt;code&gt;Float.ArrayLabels.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied with the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ae8bd6e691e48ed58c1dcc7f522ce95cba3a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALmap&quot;&gt;&lt;code&gt;Float.ArrayLabels.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument, and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533e4b9d5b9ccbd3cbc4f895305701f64e1a7da8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALmem&quot;&gt;&lt;code&gt;Float.ArrayLabels.mem&lt;/code&gt;&lt;/a&gt;, but uses IEEE equality instead of structural equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c24c61bb2da56219f91de1ed68baab0b8046e7e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALsort&quot;&gt;&lt;code&gt;Float.ArrayLabels.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;float.arraylabels#VALstable_sort&quot;&gt;&lt;code&gt;Float.ArrayLabels.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983a8d74d6347e74ee0d0f47e3c4c6a0bdbfd61e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALsort&quot;&gt;&lt;code&gt;Float.ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba948834a2acdc33a40f46a5161a65e223e6aeb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;float.arraylabels#VALsort&quot;&gt;&lt;code&gt;Float.ArrayLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3076ad9c1b68cc0dc33d09e4995af18afdaec8ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALdprintf&quot;&gt;&lt;code&gt;Format.dprintf&lt;/code&gt;&lt;/a&gt; above, but instead of returning immediately, passes the suspended printer to its first argument at the end of printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94faa50d6e3570c70190979e67a4200ea73ab2f8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALfprintf&quot;&gt;&lt;code&gt;Format.fprintf&lt;/code&gt;&lt;/a&gt;, except the formatter is the last argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d45c0db0bff5a17e8e45a96a8c25c3c5132671" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;format#VALfprintf&quot;&gt;&lt;code&gt;Format.fprintf&lt;/code&gt;&lt;/a&gt;, except the formatter is the last argument. &lt;code&gt;dprintf&amp;nbsp;&quot;...&quot;&amp;nbsp;a&amp;nbsp;b&amp;nbsp;c&lt;/code&gt; is a function of type &lt;code&gt;formatter&amp;nbsp;-&amp;gt;&amp;nbsp;unit&lt;/code&gt; which can be given to a format specifier &lt;code&gt;%t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f274669a2e20f92f9badea13b7f97452af6fa67" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALcompare&quot;&gt;&lt;code&gt;Int32.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff9bfcc5a9e17755dfb27df27fbc91a079014e6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALdiv&quot;&gt;&lt;code&gt;Int32.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84d92bbd30a74d2b88c12316cd188e476d6d8bc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALrem&quot;&gt;&lt;code&gt;Int32.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 32-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea26c69ce64b1fa8ceb8dd688190e7834b14e26" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALto_int&quot;&gt;&lt;code&gt;Int32.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9995f0b680b006745f18fbeb910b9c619f12ee1d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int32#VALto_int&quot;&gt;&lt;code&gt;Int32.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcdb7e538aa6eb0d824f0648197ea429fdf7b20b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALcompare&quot;&gt;&lt;code&gt;Int64.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a769851b36b207e29beabede1916d10e5c4663ee" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALdiv&quot;&gt;&lt;code&gt;Int64.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf11ed7dcb0af4f5f3813d836d90f0a4c77a9d9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALrem&quot;&gt;&lt;code&gt;Int64.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; 64-bit integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cde4a302ee1c248d1a0b7fed8e51d321db14da" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALto_int&quot;&gt;&lt;code&gt;Int64.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3d3062b85da8155cb99e06e6571f9a806ca7f9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;int64#VALto_int&quot;&gt;&lt;code&gt;Int64.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579a8e59718911ec265141240b557abce6e2e65b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc&quot;&gt;&lt;code&gt;List.assoc&lt;/code&gt;&lt;/a&gt;, but simply return &lt;code&gt;true&lt;/code&gt; if a binding exists, and &lt;code&gt;false&lt;/code&gt; if no bindings exist for the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7fd8d6590c8efe475a70a0aedf69e8db28e06a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc&quot;&gt;&lt;code&gt;List.assoc&lt;/code&gt;&lt;/a&gt;, but simply return true if a binding exists, and false if no bindings exist for the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb04a099455e95ba278f304b686fa96ad60f397" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc&quot;&gt;&lt;code&gt;List.assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5274f117aa288d7ee172f3d75b9197ab989714b8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALassoc_opt&quot;&gt;&lt;code&gt;List.assoc_opt&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b34c8af376dae9c18b26a538ed561023e664a84" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7a6ac14c421e6af4f65b07af2338c761f9dfc2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALconcat&quot;&gt;&lt;code&gt;List.concat&lt;/code&gt;&lt;/a&gt;. Not tail-recursive (length of the argument + length of the longest sub-list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff8e1dee5a0d14caeb4eba5ade8bf2472f7f586" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALexists&quot;&gt;&lt;code&gt;List.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dfeb9bef3c640ac9c0a770511436bfd14bde4f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALfilter&quot;&gt;&lt;code&gt;List.filter&lt;/code&gt;&lt;/a&gt;, but the predicate is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20aa8c2058bf36d3e8b459ad3395b6b300c531e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALfor_all&quot;&gt;&lt;code&gt;List.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29d1bfe23107ab0449213a9cd11570013035e69" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALiter&quot;&gt;&lt;code&gt;List.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc684def61a91898b8e700c661c25c45499194c9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e5da54b3e58cffce5dcf975ee537ee0049f347" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmap&quot;&gt;&lt;code&gt;List.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f278f01b75f84339a95f02cf174f13fe98b87140" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmem&quot;&gt;&lt;code&gt;List.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc597dd383c32c2fe212eea61ec88c51a1c705b7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALmem_assoc&quot;&gt;&lt;code&gt;List.mem_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5648092d04fe28c8f412cb5f697baca8b54584a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALremove_assoc&quot;&gt;&lt;code&gt;List.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb15cbdfe0a952963566629782ecdca0c3663773" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALremove_assoc&quot;&gt;&lt;code&gt;List.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2bcc43ad0b1cf93273485e22b4686193cf40bf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;list#VALstable_sort&quot;&gt;&lt;code&gt;List.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01e9ec044e06917acbacbf12f225663c50f555b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but also remove duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccf422348eea44e7c9498d76b6ec57751e6a10f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a12065f1cedfb3082a4e7c5cd09a36bb8788703" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb322f1aef1467abd7c4f23c07c805d4c956d76" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;list#VALsort&quot;&gt;&lt;code&gt;List.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3f0800a47947b28c7b351cff43aab031220333" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALassoc&quot;&gt;&lt;code&gt;ListLabels.assoc&lt;/code&gt;&lt;/a&gt;, but simply return &lt;code&gt;true&lt;/code&gt; if a binding exists, and &lt;code&gt;false&lt;/code&gt; if no bindings exist for the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5712f2c83ad8c90041a6f335d1c926d193ceb41" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALassoc&quot;&gt;&lt;code&gt;ListLabels.assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad40352fcb3de91675a8e2046a1fa7f8cf72a2c7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALassoc_opt&quot;&gt;&lt;code&gt;ListLabels.assoc_opt&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90adac10c8b23f1785fd0fe4ede3038954913008" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALconcat&quot;&gt;&lt;code&gt;ListLabels.concat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab2fe6ef35539588e9e3a7daf56fec63abc0e6f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALconcat&quot;&gt;&lt;code&gt;ListLabels.concat&lt;/code&gt;&lt;/a&gt;. Not tail-recursive (length of the argument + length of the longest sub-list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e202e92c123961341cd7650f5e98403ba6b4a66" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALexists&quot;&gt;&lt;code&gt;ListLabels.exists&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374bcaa087fa49a6ae2228d83f908d900d2d5ef3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALfilter&quot;&gt;&lt;code&gt;ListLabels.filter&lt;/code&gt;&lt;/a&gt;, but the predicate is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a955989bed40b85049974ec73edac5c0cf75af9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALfor_all&quot;&gt;&lt;code&gt;ListLabels.for_all&lt;/code&gt;&lt;/a&gt;, but for a two-argument predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a96b5d872c13b6dcf8c1c147939c577126d51ce" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALiter&quot;&gt;&lt;code&gt;ListLabels.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98e0990e681078a0046bed4d263d77accf8610f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALmap&quot;&gt;&lt;code&gt;ListLabels.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b945b5df6871fecd64efc5961ef596c2bd735f2d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALmap&quot;&gt;&lt;code&gt;ListLabels.map&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1282fccd63476b4d6ba84c7408d2e48ca14c714b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALmem&quot;&gt;&lt;code&gt;ListLabels.mem&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare list elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da793b8a2691ccc2f3e193498f69a85fc166f358" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALmem_assoc&quot;&gt;&lt;code&gt;ListLabels.mem_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5a41db8a6f735b17f12841425b2103ec684cf7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALremove_assoc&quot;&gt;&lt;code&gt;ListLabels.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47380f83490202de079e64b1d104456b14312f4e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALremove_assoc&quot;&gt;&lt;code&gt;ListLabels.remove_assoc&lt;/code&gt;&lt;/a&gt;, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c379c0489fc5a403ff7dab76ec800fbdb6641fc2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALsort&quot;&gt;&lt;code&gt;ListLabels.sort&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;listlabels#VALstable_sort&quot;&gt;&lt;code&gt;ListLabels.stable_sort&lt;/code&gt;&lt;/a&gt;, whichever is faster on typical input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66697099a2f70e90e8b7b04b3eb3a91fa4988ef2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALsort&quot;&gt;&lt;code&gt;ListLabels.sort&lt;/code&gt;&lt;/a&gt;, but also remove duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcdb0ca7d61872598ad301541c614b49bf81321" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALsort&quot;&gt;&lt;code&gt;ListLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c662544abfddde1cdb52cb450fce7487f4d9c489" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;listlabels#VALsort&quot;&gt;&lt;code&gt;ListLabels.sort&lt;/code&gt;&lt;/a&gt;, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e41d8e08e07b0a5dc42e6f1c646ca9a18b1229d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmap&quot;&gt;&lt;code&gt;Map.S.map&lt;/code&gt;&lt;/a&gt;, but the function receives as arguments both the key and the associated value for each binding of the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84610c6c6e340ae9eca648775ba33b1d58392e90" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmin_binding&quot;&gt;&lt;code&gt;Map.S.min_binding&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b97dc9f28ec2f18b7151b69bf9322fca370e94" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;map.s#VALmin_binding_opt&quot;&gt;&lt;code&gt;Map.S.min_binding_opt&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80693e43f9f0d3146e14da876f2911f734e113b9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;morelabels.map.s#VALmap&quot;&gt;&lt;code&gt;MoreLabels.Map.S.map&lt;/code&gt;&lt;/a&gt;, but the function receives as arguments both the key and the associated value for each binding of the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f469448261374c360c3563a9762a6211511eed3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;morelabels.map.s#VALmin_binding&quot;&gt;&lt;code&gt;MoreLabels.Map.S.min_binding&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecd1bc5469c7b703a60da073dc04447c38e9169" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;morelabels.map.s#VALmin_binding_opt&quot;&gt;&lt;code&gt;MoreLabels.Map.S.min_binding_opt&lt;/code&gt;&lt;/a&gt;, but returns the binding with the largest key in the given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e7859bc124a86abb1e1166372f9e1da4b53c98" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;morelabels.set.s#VALmin_elt&quot;&gt;&lt;code&gt;MoreLabels.Set.S.min_elt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a60cc35a9bb04eddd6c119d96888ef9ed064b9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;morelabels.set.s#VALmin_elt_opt&quot;&gt;&lt;code&gt;MoreLabels.Set.S.min_elt_opt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c2489468e9f3f979019c6d86283fa45eaaad05" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;mutex#VALlock&quot;&gt;&lt;code&gt;Mutex.lock&lt;/code&gt;&lt;/a&gt;, but does not suspend the calling thread if the mutex is already locked: just return &lt;code&gt;false&lt;/code&gt; immediately in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf9f1cc52702f4bf949ebd2de44c29ddce8d82d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;mutex#VALlock&quot;&gt;&lt;code&gt;Mutex.lock&lt;/code&gt;&lt;/a&gt;, but does not suspend the calling thread if the mutex is already locked: just return &lt;code&gt;false&lt;/code&gt; immediately in that case. If the mutex is unlocked, lock it and return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bb30b08c76e9218330938ed5acf4b7bd43235f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALcompare&quot;&gt;&lt;code&gt;Nativeint.compare&lt;/code&gt;&lt;/a&gt;, except that arguments are interpreted as &lt;em&gt;unsigned&lt;/em&gt; native integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac5f2fa99301d1533783bef4faf9022ba510be2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALdiv&quot;&gt;&lt;code&gt;Nativeint.div&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; native integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ed9d59b23177b4aeda7c57295a325c64d73dfb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALrem&quot;&gt;&lt;code&gt;Nativeint.rem&lt;/code&gt;&lt;/a&gt;, except that arguments and result are interpreted as &lt;em&gt; unsigned&lt;/em&gt; native integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6979a20df1226ab09dd0bba9c80d7b3a5fd8d882" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALto_int&quot;&gt;&lt;code&gt;Nativeint.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee21bd32ca71f640d563ef90f2b892055a57a73" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;nativeint#VALto_int&quot;&gt;&lt;code&gt;Nativeint.to_int&lt;/code&gt;&lt;/a&gt;, but interprets the argument as an &lt;em&gt;unsigned&lt;/em&gt; integer. Returns &lt;code&gt;None&lt;/code&gt; if the unsigned value of the argument cannot fit into an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93f6e6d4ceb9e25ff2460d13da6de6e961e6619" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;parsing#VALsymbol_end&quot;&gt;&lt;code&gt;Parsing.symbol_end&lt;/code&gt;&lt;/a&gt;, but return the offset of the string matching the &lt;code&gt;n&lt;/code&gt;th item on the right-hand side of the rule, where &lt;code&gt;n&lt;/code&gt; is the integer parameter to &lt;code&gt;rhs_start&lt;/code&gt; and &lt;code&gt;rhs_end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e44ea14896b49d8694c81026509f0a4272d72a4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;parsing#VALsymbol_end&quot;&gt;&lt;code&gt;Parsing.symbol_end&lt;/code&gt;&lt;/a&gt;, but return the offset of the string matching the &lt;code&gt;n&lt;/code&gt;th item on the right-hand side of the rule, where &lt;code&gt;n&lt;/code&gt; is the integer parameter to &lt;code&gt;rhs_start&lt;/code&gt; and &lt;code&gt;rhs_end&lt;/code&gt;. &lt;code&gt;n&lt;/code&gt; is 1 for the leftmost item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb7ceb07c3d1a6b6d400da25ad838125aa3c850" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALbprintf&quot;&gt;&lt;code&gt;Printf.bprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597d77ddd034f823f008ceac00b46c902306198d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALbprintf&quot;&gt;&lt;code&gt;Printf.bprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2091c4119f6172112c2ac5717acc5da8f9018" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116d3974ff88722606a899c2f2d0e80529debebf" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bf747b8baf691783a29088f7de04889b8227d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbd5088eeeb6897ec892724ea0d0eb339118411" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but instead of printing on an output channel, return a string containing the result of formatting the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903835fc5ab41ecba837a51ccab77d4ddaf2f12f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but output on &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0627b2dfc136353cfa912810f662e028607e49e1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;printf#VALfprintf&quot;&gt;&lt;code&gt;Printf.fprintf&lt;/code&gt;&lt;/a&gt;, but output on &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605fd49a2fc5b49e6640ac52ec79127278757dd6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;random#VALinit&quot;&gt;&lt;code&gt;Random.init&lt;/code&gt;&lt;/a&gt; but takes more data as seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c97b0749b6e2e68c84c9c4c1d523339f996017" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but reads from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a9aa3ce5444c788f6bafbb53a27b4625a5fdac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but reads from the predefined formatted input channel &lt;a href=&quot;scanf.scanning#VALstdin&quot;&gt;&lt;code&gt;Scanf.Scanning.stdin&lt;/code&gt;&lt;/a&gt; that is connected to &lt;a href=&quot;stdlib#VALstdin&quot;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e275ae24fb70616c1c93959eab119121e5bc039" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf&quot;&gt;&lt;code&gt;Scanf.bscanf&lt;/code&gt;&lt;/a&gt;, but takes an additional function argument &lt;code&gt;ef&lt;/code&gt; that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function &lt;code&gt;ef&lt;/code&gt; with the formatted input channel and the exception that aborted the scanning process as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f65fb6c848e411824e9128a096ea90d81db9af" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALbscanf_format&quot;&gt;&lt;code&gt;Scanf.bscanf_format&lt;/code&gt;&lt;/a&gt;, but reads from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5309bcd41583f28972ebfef8e49e8bce448e4527" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;scanf#VALkscanf&quot;&gt;&lt;code&gt;Scanf.kscanf&lt;/code&gt;&lt;/a&gt; but reads from the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323e86ec70bd89677346a6583a829ebbe2ae7330" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;set.s#VALmin_elt&quot;&gt;&lt;code&gt;Set.S.min_elt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d87d14d0afc47f407599cb66efa429712c223dc" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;set.s#VALmin_elt_opt&quot;&gt;&lt;code&gt;Set.S.min_elt_opt&lt;/code&gt;&lt;/a&gt;, but returns the largest element of the given set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9f5003c9600b6a1f306994666e30bcb5ce7c91" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALbool_of_string_opt&quot;&gt;&lt;code&gt;bool_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Invalid_argument&amp;nbsp;&quot;bool_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411b9f76037f4296364868efdfde037a2156c23a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALfloat_of_int&quot;&gt;&lt;code&gt;float_of_int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce8917bfbdaf74dd0dc77a9bc97edf18aa8cf85" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALfloat_of_string_opt&quot;&gt;&lt;code&gt;float_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe6d67d833098b31b91689dfff0d8e1d7c7eef0" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALinput_char&quot;&gt;&lt;code&gt;input_char&lt;/code&gt;&lt;/a&gt;, but return the 8-bit integer representing the character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9247863ad3361094f638c21625cd94974860a2e1" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALint_of_float&quot;&gt;&lt;code&gt;int_of_float&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05f7c8c1bc41d854474c20c8ad2e9d8bb05f930" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALint_of_string_opt&quot;&gt;&lt;code&gt;int_of_string_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c53cd139a31694470cf050f422d3a0265b9112a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during reads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ecc123ad0cb37869733b8983aa4916c8f93d14" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during reads. On operating systems that do not distinguish between text mode and binary mode, this function behaves like &lt;a href=&quot;stdlib#VALopen_in&quot;&gt;&lt;code&gt;open_in&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323f16be34977b08ef0742f0a4d6244d3ca7c57e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93234224074545ee7a9e2b9a86554a2981b69e2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;, but the file is opened in binary mode, so that no translation takes place during writes. On operating systems that do not distinguish between text mode and binary mode, this function behaves like &lt;a href=&quot;stdlib#VALopen_out&quot;&gt;&lt;code&gt;open_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24481b089af2657000809001c238b6f9b0f4e0af" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALread_float_opt&quot;&gt;&lt;code&gt;read_float_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;float_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c74b7de295eba63ba5f3a919e8f2c6adbd8a33" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;stdlib#VALread_int_opt&quot;&gt;&lt;code&gt;read_int_opt&lt;/code&gt;&lt;/a&gt;, but raise &lt;code&gt;Failure&amp;nbsp;&quot;int_of_string&quot;&lt;/code&gt; instead of returning &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddba8b73df312e3bb8a4a4dd00d3f77a1490c51" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split&quot;&gt;&lt;code&gt;Str.bounded_split&lt;/code&gt;&lt;/a&gt;, but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6982fa0eb06337a7c3dae1ced9283df7661e381e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split_delim&quot;&gt;&lt;code&gt;Str.bounded_split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64952e02cabe857b0729cf1e9340753ed51e7ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALbounded_split_delim&quot;&gt;&lt;code&gt;Str.bounded_split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters. The former are tagged &lt;code&gt;Delim&lt;/code&gt; in the result list; the latter are tagged &lt;code&gt;Text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1609c94404d88fc9d53b1da97ce9d20515d7246" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALglobal_replace&quot;&gt;&lt;code&gt;Str.global_replace&lt;/code&gt;&lt;/a&gt;, except that only the first substring matching the regular expression is replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9b2a60d8afcf0ca57919fb33a2a161d8146a3c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALglobal_substitute&quot;&gt;&lt;code&gt;Str.global_substitute&lt;/code&gt;&lt;/a&gt;, except that only the first substring matching the regular expression is replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645dbfce7f97a3c08c8bb5134f87363d3ea98801" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt; but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69b2ab41a3851df0e07eb8f0456bd4d76cffc716" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt; but occurrences of the delimiter at the beginning and at the end of the string are recognized and returned as empty strings in the result. For instance, &lt;code&gt;split_delim&amp;nbsp;(regexp&amp;nbsp;&quot;&amp;nbsp;&quot;)&amp;nbsp;&quot;&amp;nbsp;abc&amp;nbsp;&quot;&lt;/code&gt; returns &lt;code&gt;[&quot;&quot;;&amp;nbsp;&quot;abc&quot;;&amp;nbsp;&quot;&quot;]&lt;/code&gt;, while &lt;code&gt;split&lt;/code&gt; with the same arguments returns &lt;code&gt;[&quot;abc&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0b8ef7d1667633a23a5a4ee7b93a1e32d8b88d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit&quot;&gt;&lt;code&gt;Str.split&lt;/code&gt;&lt;/a&gt;, but splits into at most &lt;code&gt;n&lt;/code&gt; substrings, where &lt;code&gt;n&lt;/code&gt; is the extra integer parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b72a1f0b7788615dc64f6f1c8fbca31f272f622" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit_delim&quot;&gt;&lt;code&gt;Str.split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f877265312f461d1096d92069bf7f458372831" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;str#VALsplit_delim&quot;&gt;&lt;code&gt;Str.split_delim&lt;/code&gt;&lt;/a&gt;, but returns the delimiters as well as the substrings contained between delimiters. The former are tagged &lt;code&gt;Delim&lt;/code&gt; in the result list; the latter are tagged &lt;code&gt;Text&lt;/code&gt;. For instance, &lt;code&gt;full_split&amp;nbsp;(regexp&amp;nbsp;&quot;[{}]&quot;)&amp;nbsp;&quot;{ab}&quot;&lt;/code&gt; returns &lt;code&gt;[Delim&amp;nbsp;&quot;{&quot;;&amp;nbsp;Text&amp;nbsp;&quot;ab&quot;;&amp;nbsp;Delim&amp;nbsp;&quot;}&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0692f3a3cee00e3b8603778a4c7712906ec4621" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;string#VALiter&quot;&gt;&lt;code&gt;String.iter&lt;/code&gt;&lt;/a&gt;, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7968ed5b081149c89f1e0fa86bf0d5f30d7c69e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;sys#VALsignal&quot;&gt;&lt;code&gt;Sys.signal&lt;/code&gt;&lt;/a&gt; but return value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5daa4aa669d6140b1f11939508bb7452da79a67c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecv&quot;&gt;&lt;code&gt;Unix.execv&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a708d9cd30d9bcb873a2bbdec55ad092a2283c6" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecv&quot;&gt;&lt;code&gt;Unix.execv&lt;/code&gt;&lt;/a&gt;, except that the third argument provides the environment to the program executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b893cf728ed7c290ea4d8de6a765228904e7e9cd" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALexecve&quot;&gt;&lt;code&gt;Unix.execve&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c6b3275127e4a2b0e15806210c78557a90a641" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0552634335a6244379f872d5afcf9b8ff17abac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccd2775d37b244d589570b5a83bf1fff470f930" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALgetsockopt&quot;&gt;&lt;code&gt;Unix.getsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0de5100000461ea91875aa316785dbb2c728a71" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a6dbb90158d0d77adf57f026936d0c57220866" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_in&quot;&gt;&lt;code&gt;Unix.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca74917dcbeb57f2b329b75e10bb25b503b0a8f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6730908a84b3cb3f1a13eccdf0036a5d8fb4fe3f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4f33fc262e197a9c5c5faa35e1af02e51522fb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4432b186980b65050b14ebe524d6ccb0effe1cbe" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_in&quot;&gt;&lt;code&gt;Unix.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args_out&quot;&gt;&lt;code&gt;Unix.open_process_args_out&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400f201b658e10b1fb5d5ee1a5edd0d521281cc3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd93e8c46769e4a63980a0df1c06c4705ad215f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALopen_process_out&quot;&gt;&lt;code&gt;Unix.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6543a4be336cd7a10bc2562d9d658e2168377e8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5b76333b4e99e6a9ab705b4249e48d9dd668ad" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed90d80a7d1a730063ec7a3b8b32ff6edc3351e" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsetsockopt&quot;&gt;&lt;code&gt;Unix.setsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0353ba5507baca1f74e86d9f0ea1d825bcf0fa97" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALsingle_write&quot;&gt;&lt;code&gt;Unix.single_write&lt;/code&gt;&lt;/a&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c98f0bea8300ac91fb9f63d0fd4a61c14dd081b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALstat&quot;&gt;&lt;code&gt;Unix.stat&lt;/code&gt;&lt;/a&gt;, but in case the file is a symbolic link, return the information for the link itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f0bbf3af3fd498bd73c1b249f8494b3b0d662b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALtime&quot;&gt;&lt;code&gt;Unix.time&lt;/code&gt;&lt;/a&gt;, but with resolution better than 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21154fa6f6e436f37ee974e7f6836eda29d4db4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwait&quot;&gt;&lt;code&gt;Unix.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608298b1f57c96bf9fc4424262d4f324a7df0264" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwait&quot;&gt;&lt;code&gt;Unix.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given. A pid of &lt;code&gt;-1&lt;/code&gt; means wait for any child. A pid of &lt;code&gt;0&lt;/code&gt; means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether &lt;code&gt;waitpid&lt;/code&gt; should return immediately without waiting, and whether it should report stopped children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f00a8063dd308d2948027f109939f83e2d8bb7c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwrite&quot;&gt;&lt;code&gt;Unix.write&lt;/code&gt;&lt;/a&gt;, but attempts to write only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3ba28bf4cea121380f2197e87c5de885823bd7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwrite&quot;&gt;&lt;code&gt;Unix.write&lt;/code&gt;&lt;/a&gt;, but attempts to write only once. Thus, if an error occurs, &lt;code&gt;single_write&lt;/code&gt; guarantees that no data has been written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59b8cd741cca931b3a02e7175cc3554bc750a56" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unix#VALwrite&quot;&gt;&lt;code&gt;Unix.write&lt;/code&gt;&lt;/a&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf47a2e07a1307ccaa0e16933dbac1c3da8ff4a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecv&quot;&gt;&lt;code&gt;UnixLabels.execv&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17608b7ce230e91245ac7189baaf4b5d7c629aae" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecv&quot;&gt;&lt;code&gt;UnixLabels.execv&lt;/code&gt;&lt;/a&gt;, except that the third argument provides the environment to the program executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab31c3ea08cf5e6e296addd6e070d481600d65ca" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALexecve&quot;&gt;&lt;code&gt;UnixLabels.execve&lt;/code&gt;&lt;/a&gt;, except that the program is searched in the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef19970154bd791724987049302f8c18cabd66cd" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALgetsockopt&quot;&gt;&lt;code&gt;UnixLabels.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a265efe259c02254f0579481a89c45f435ace2ac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALgetsockopt&quot;&gt;&lt;code&gt;UnixLabels.getsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fceae8b8bd011efd719196e81c7dda15f2fd41bb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALgetsockopt&quot;&gt;&lt;code&gt;UnixLabels.getsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9632ea5c571c12812caf14c37d3c28494df42839" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_args_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3369dcd62f37ad743a6dd6f642cc2ae4e2a1dd4c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_args_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b523752137e4b4b29314ecd46d45872486e061" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_args_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addbbef03b6a1e711a02292f2854769153abbaa2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_args_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98a38c1ab8a2c589f6d8614fd139b40081fdbef" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dd9b0f8e60849f5e1ccd200832c2368f0a5c6d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e44bf96615c01c52c8a86dad9d31d9d7b94356b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_in&quot;&gt;&lt;code&gt;UnixLabels.open_process_in&lt;/code&gt;&lt;/a&gt;, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call &lt;a href=&quot;stdlib#VALflush&quot;&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/a&gt; at the right times to ensure correct synchronization. If the command does not need to be run through the shell, &lt;a href=&quot;unixlabels#VALopen_process_args_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_out&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53f3ebb5a3a3ec8212e53346d9dfbc917d46153" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff2be04cc4a4f2bd8a41d7809f3c42b1b3fd623" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48d927bbfb71dfd4ecff888255a90545960db92" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALopen_process_out&quot;&gt;&lt;code&gt;UnixLabels.open_process_out&lt;/code&gt;&lt;/a&gt;, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unixlabels#VALopen_process_args&quot;&gt;&lt;code&gt;UnixLabels.open_process_args&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e5612fce87e59859b223eebbe7471bb9565a07" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALsetsockopt&quot;&gt;&lt;code&gt;UnixLabels.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is a floating-point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a462ef68d90823fe1b5ea9fad96cb2e310338ac" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALsetsockopt&quot;&gt;&lt;code&gt;UnixLabels.setsockopt&lt;/code&gt;&lt;/a&gt; for a socket option whose value is an &lt;code&gt;int&amp;nbsp;option&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0466c1081eb3421bdd9531efc771e16ebed0119" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALsetsockopt&quot;&gt;&lt;code&gt;UnixLabels.setsockopt&lt;/code&gt;&lt;/a&gt; for an integer-valued socket option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456ccbb48df9124504c68f52c6d09e34e68f06c2" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALsingle_write&quot;&gt;&lt;code&gt;UnixLabels.single_write&lt;/code&gt;&lt;/a&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c640a353eb6c65832957f63f4a41545d98822" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALstat&quot;&gt;&lt;code&gt;UnixLabels.stat&lt;/code&gt;&lt;/a&gt;, but in case the file is a symbolic link, return the information for the link itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b718023cdbaf7a0d1781215e8a8748920d9f2df" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALtime&quot;&gt;&lt;code&gt;UnixLabels.time&lt;/code&gt;&lt;/a&gt;, but with resolution better than 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407561584b38a5960b1bf7c185b210603368a748" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwait&quot;&gt;&lt;code&gt;UnixLabels.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a8aac5bc42541dcc49e3576708e0e59cd71f93" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwait&quot;&gt;&lt;code&gt;UnixLabels.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given. A pid of &lt;code&gt;-1&lt;/code&gt; means wait for any child. A pid of &lt;code&gt;0&lt;/code&gt; means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether &lt;code&gt;waitpid&lt;/code&gt; should return immediately without waiting, and whether it should report stopped children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6c5594c06859b6b1695bad3261a2a664f2a4fb" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwait&quot;&gt;&lt;code&gt;UnixLabels.wait&lt;/code&gt;&lt;/a&gt;, but waits for the child process whose pid is given. A pid of &lt;code&gt;-1&lt;/code&gt; means wait for any child. A pid of &lt;code&gt;0&lt;/code&gt; means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether &lt;code&gt;waitpid&lt;/code&gt; should return immediately without waiting, or also report stopped children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a17d24f2e70ea63a2ea0e085d169a861e479c8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwrite&quot;&gt;&lt;code&gt;UnixLabels.write&lt;/code&gt;&lt;/a&gt;, but attempts to write only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7df7edb44a82dd80dcc196f573ef8cf9fafd1d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwrite&quot;&gt;&lt;code&gt;UnixLabels.write&lt;/code&gt;&lt;/a&gt;, but attempts to write only once. Thus, if an error occurs, &lt;code&gt;single_write&lt;/code&gt; guarantees that no data has been written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a2de7bc0d2fb49dfba82cc7b039d86133cb0de" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;unixlabels#VALwrite&quot;&gt;&lt;code&gt;UnixLabels.write&lt;/code&gt;&lt;/a&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8bd99c7460ce991b1f76d7dcf77ff141574343" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;Seq.map&amp;nbsp;fst&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef87ad5fdb766aea3427cbbe06977d8fb00c341" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;Seq.map&amp;nbsp;snd&amp;nbsp;(to_seq&amp;nbsp;m)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7756dac8c5684d7502c839de58fd561337b099e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;asprintf&lt;/code&gt; above, but instead of returning the string, passes it to the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de1149116241df59ce72d742b17cc08c1f28ba3" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;bprintf&lt;/code&gt;, but instead of returning immediately, passes the buffer to its first argument at the end of printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61229c95603a206567541d2bae31c03be44a6ab5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;close_in&lt;/code&gt;, but ignore all errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d80a1452822a59937e135872716a381c7e03182" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;close_out&lt;/code&gt;, but ignore all errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6ca41e5568da892b2762ee089046bff8ba2459" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;concat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fa7f17194e3019021ddf61c6f46e34ecaa33b8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;concat&lt;/code&gt;. Not tail-recursive (length of the argument + length of the longest sub-list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4c33c9d65f70c9d7ee1af0731dc7e8afd8c5c1" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165e8a97fa41eb82e0c8c1d8cfb0b30aab69602d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09958f5b48b2b309b5ea3a63488376b83e2afe60" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but instead of returning immediately, passes the formatter to its first argument at the end of printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32e61b52c71a7c9fd70e10a78dcb52a61a03a27" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but output on &lt;code&gt;err_formatter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b5d440509fc53579868ce26db55574dadde8f3" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt; above, but output on &lt;code&gt;std_formatter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca0121f9ecc3f9eea36751ece9717cff6b5ca08" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;fprintf&lt;/code&gt;, but instead of returning immediately, passes the out channel to its first argument at the end of printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85477ad9607910645a4cae463af0194fcbcbbd82" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;from_bytes&lt;/code&gt; but take a string as argument instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f902a890b4677fdb53fb593b92d348fd89e4ecad" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kbprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323e7c74b03ec833b5f658d968f462e2f00a6fde" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kbprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b9b887c852a909f173f4fe9d2c194966481272" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kfprintf&lt;/code&gt; above, but does not print anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a0812a679830e5f1a73eded5030020c526bfe4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;kfprintf&lt;/code&gt; above, but does not print anything. Useful to ignore some material when conditionally printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee6fff015990c50ecc5fe249480a12a9634bf27" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;loadfile&lt;/code&gt;, except that the compilation units just loaded are hidden (cannot be referenced) from other modules dynamically loaded afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48345963e7cc4adb3c40b2554f5eb535743ade0b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;of_string&lt;/code&gt;, but return &lt;code&gt;None&lt;/code&gt; instead of raising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c361c25057b9bffccefbf7a19e0a3b5f29828cbb" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;of_string&lt;/code&gt;, but returns &lt;code&gt;None&lt;/code&gt; instead of raising.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86057e6fc58542ce6470d1356aa453ddd23f0003" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;output&lt;/code&gt; but take a string as argument instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a365765c385649c35170a1d62d4e139abc842c29" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b219cd221033e5561185d56137b7eea562e4b09" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. Note that the pretty-printer queue is flushed at the end of &lt;em&gt;each call&lt;/em&gt; to &lt;code&gt;sprintf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81d9086ebf44148891816f93a6e76c592f3978e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;printf&lt;/code&gt; above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. The type of &lt;code&gt;asprintf&lt;/code&gt; is general enough to interact nicely with &lt;code&gt;%a&lt;/code&gt; conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7b48bd5c2197002483acb223b697bff0e3eba4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;regexp&lt;/code&gt;, but the compiled expression will match text in a case-insensitive way: uppercase and lowercase letters will be considered equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457184985758494e7a293224dbb7a5261a63aa7d" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;rhs_end&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72b7e9c224a9ccb1f2f53e778523b27aac6ffab" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;rhs_start&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b335828744b489e53f0f480711956e971ada67e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;send&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb3a73795775f6f04310a222acafcac613122f8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sendto&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54b43ff13273c160359917038aac331c82c04f9" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;single_write&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e509318a36aae9745538e3cff924b7f09940dcbc" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sprintf&lt;/code&gt; above, but instead of returning the string, passes it to the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c369585a4d9e703310e60740d96bc801e60e3b" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;stat&lt;/code&gt; except that &lt;code&gt;live_words&lt;/code&gt;, &lt;code&gt;live_blocks&lt;/code&gt;, &lt;code&gt;free_words&lt;/code&gt;, &lt;code&gt;free_blocks&lt;/code&gt;, &lt;code&gt;largest_free&lt;/code&gt;, and &lt;code&gt;fragments&lt;/code&gt; are set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c121c44f363a196365879e856b71cfa44216b1ff" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;stat&lt;/code&gt; except that &lt;code&gt;live_words&lt;/code&gt;, &lt;code&gt;live_blocks&lt;/code&gt;, &lt;code&gt;free_words&lt;/code&gt;, &lt;code&gt;free_blocks&lt;/code&gt;, &lt;code&gt;largest_free&lt;/code&gt;, and &lt;code&gt;fragments&lt;/code&gt; are set to 0. This function is much faster than &lt;code&gt;stat&lt;/code&gt; because it does not need to go through the heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ea64a04e25d166c8d8eaf4749b7ca5ff5d5f50" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;sub&lt;/code&gt; but return a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09ed6459a018a79cfc1bc66f1086cb01ca523d5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;symbol_end&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fccc465944f04367da0ead152881f9e04a7e81" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;symbol_start&lt;/code&gt;, but return a &lt;code&gt;position&lt;/code&gt; instead of an offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af62a4434a21011f6e9180e3a60ca8d8125a6b26" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;to_bytes&lt;/code&gt; but return the result as a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e369a07c4ea8f7e07ae61d5585560d651b9a9707" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but attempts to write only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ab15da80e429ebe8aeea44dd2d827709e48e38" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but attempts to write only once. Thus, if an error occurs, &lt;code&gt;single_write&lt;/code&gt; guarantees that no data has been written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3594c2736ae1bcbba2b97c88636073c3f47a55c4" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;write&lt;/code&gt;, but take the data from a string instead of a byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8481cdaf533433ae0c1f1fd3a549797cd49b6c98" translate="yes" xml:space="preserve">
          <source>Same as caml_ba_alloc, but the sizes of the array in each dimension are listed as extra arguments in the function call, rather than being passed as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4326414e7d274f430f0f5afb1025c66fad82b993" translate="yes" xml:space="preserve">
          <source>Same as default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81635e2b4b2d81e962ad3462eb815e2981abd3a4" translate="yes" xml:space="preserve">
          <source>Same as directorydirectorynames, but the given directories will be searched only when looking for the source file of a module that has been packed into modulename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e403a04412363e40f5f3e5fb7a9e63d1be63e7e" translate="yes" xml:space="preserve">
          <source>Same as print, but limit the depth of printing to 1. Useful to browse large data structures without printing them in full. display can be abbreviated as d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb33d6e35e6ed5f1fc43353763eadd64f7f5b78a" translate="yes" xml:space="preserve">
          <source>Same function as &lt;a href=&quot;unix#VALselect&quot;&gt;&lt;code&gt;Unix.select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246dd049dd0817ad3312138b39cc1780ca44c01f" translate="yes" xml:space="preserve">
          <source>Same function as &lt;a href=&quot;unix#VALselect&quot;&gt;&lt;code&gt;Unix.select&lt;/code&gt;&lt;/a&gt;. Suspend the execution of the calling thread until input/output becomes possible on the given Unix file descriptors. The arguments and results have the same meaning as for &lt;a href=&quot;unix#VALselect&quot;&gt;&lt;code&gt;Unix.select&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c8cae9d50ed5279000a4cdd85b0d85e07f8990" translate="yes" xml:space="preserve">
          <source>Same function as &lt;a href=&quot;unix#VALwaitpid&quot;&gt;&lt;code&gt;Unix.waitpid&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71caf32a1f4629983fcd4a38578604341f4241f7" translate="yes" xml:space="preserve">
          <source>Same function as &lt;a href=&quot;unix#VALwaitpid&quot;&gt;&lt;code&gt;Unix.waitpid&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;wait_pid&amp;nbsp;p&lt;/code&gt; suspends the execution of the calling thread until the process specified by the process identifier &lt;code&gt;p&lt;/code&gt; terminates. Returns the pid of the child caught and its termination status, as per &lt;a href=&quot;unix#VALwait&quot;&gt;&lt;code&gt;Unix.wait&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9d79a0d11d38c43744740db91d64cdcd33c2d1" translate="yes" xml:space="preserve">
          <source>Same usage as in ocamlrun (see section &amp;zwj;&lt;a href=&quot;runtime#s%3Aocamlrun-options&quot;&gt;11.2&lt;/a&gt;), except that option l is ignored (the operating system&amp;rsquo;s stack size limit is used instead).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a664314bf8d6048fecd76f5fdce508da73f1f80" translate="yes" xml:space="preserve">
          <source>Same usage as in ocamlrun (see section &lt;a href=&quot;runtime#s%3Aocamlrun-options&quot;&gt;11.2&lt;/a&gt;), except that option l is ignored (the operating system&amp;rsquo;s stack size limit is used instead).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe8cbf2f2b94ce111ab0ab7f35a6d6e6c42c8e6" translate="yes" xml:space="preserve">
          <source>Sample code to iterate over all frames (inlined and non-inlined):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d19ba68e601a46a8d59c6b7460749eb42d77ceb" translate="yes" xml:space="preserve">
          <source>Sampling is temporarily disabled when calling a callback for the current thread. So they do not need to be re-entrant if the program is single-threaded. However, if threads are used, it is possible that a context switch occurs during a callback, in this case the callback functions must be re-entrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd442e4ab9396a11176172c091d7cee7add08639" translate="yes" xml:space="preserve">
          <source>Sampling is temporarily disabled when calling a callback for the current thread. So they do not need to be reentrant if the program is single-threaded. However, if threads are used, it is possible that a context switch occurs during a callback, in this case the callback functions must be reentrant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67eef2f2715b31ebf03d63082200f8e7cae3f82" translate="yes" xml:space="preserve">
          <source>Scaling factor for benefit calculation when using -unbox-closures. See section &lt;a href=&quot;#ss%3Aflambda-unbox-closures&quot;&gt;19.9.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f0ff259c8112bb799c30c20ec70580cdb5253a" translate="yes" xml:space="preserve">
          <source>Scaling factor for benefit calculation when using -unbox-closures. See section &lt;a href=&quot;#ss%3Aflambda-unbox-closures&quot;&gt;21.9.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cb15f1110ec48e7f98551a0ec23abfd0c1e5f1" translate="yes" xml:space="preserve">
          <source>Scanf</source>
          <target state="translated">Scanf</target>
        </trans-unit>
        <trans-unit id="6d3fbf50e39a89b9875d7e6bb1a322a49865ba47" translate="yes" xml:space="preserve">
          <source>Scanners may raise the following exceptions when the input cannot be read according to the format string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a70efc0f7828c46836202c2d47457d38736373e" translate="yes" xml:space="preserve">
          <source>Scanning indications appear just after the string conversions &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%[&amp;nbsp;range&amp;nbsp;]&lt;/code&gt; to delimit the end of the token. A scanning indication is introduced by a &lt;code&gt;@&lt;/code&gt; character, followed by some plain character &lt;code&gt;c&lt;/code&gt;. It means that the string token should end just before the next matching &lt;code&gt;c&lt;/code&gt; (which is skipped). If no &lt;code&gt;c&lt;/code&gt; character is encountered, the string token spreads as much as possible. For instance, &lt;code&gt;&quot;%s@\t&quot;&lt;/code&gt; reads a string up to the next tab character or to the end of input. If a &lt;code&gt;@&lt;/code&gt; character appears anywhere else in the format string, it is treated as a plain character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ed0e6d3bf4c13f8f5fbff20a20ce2709295670" translate="yes" xml:space="preserve">
          <source>Scanning indications in format strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e2d37f170896ea7062b0ad6f0fcdfff1d85f14" translate="yes" xml:space="preserve">
          <source>Schedule a &lt;code&gt;SIGALRM&lt;/code&gt; signal after the given number of seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba44822959cb826bebc9df32aa4ef5c005d8276" translate="yes" xml:space="preserve">
          <source>Search the directory dir for dynamically-loaded libraries, in addition to the standard search path (see section &amp;zwj;&lt;a href=&quot;#s%3Aocamlrun-dllpath&quot;&gt;11.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e7e26f280f080d905292f0c4d79db8e6aa9dd3" translate="yes" xml:space="preserve">
          <source>Search the directory dir for dynamically-loaded libraries, in addition to the standard search path (see section &lt;a href=&quot;#s%3Aocamlrun-dllpath&quot;&gt;11.3&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc363c0119e35d1c8070755fc4d4c2387aad71" translate="yes" xml:space="preserve">
          <source>Searching</source>
          <target state="translated">Searching</target>
        </trans-unit>
        <trans-unit id="fc6f32a5a536661bf7b4474da8fc1cec8ffabad4" translate="yes" xml:space="preserve">
          <source>Second, it also notifies the type checker that the type of the function should be polymorphic. Indeed, without explicit polymorphic type annotation, the following type annotation is perfectly valid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d57ad8155ed417cf280a7c6ed005bbd68271208" translate="yes" xml:space="preserve">
          <source>Secondly, for records, OCaml can also deduce the right record type by looking at the whole set of fields used in a expression or pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e7f0bb110fb501e896f97abb678f94792aa78c" translate="yes" xml:space="preserve">
          <source>Seconds 0..60</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac86401d783cffa201b981e085f799bf8498d263" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bigarray#VALchar&quot;&gt;&lt;code&gt;Bigarray.char&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da4f758e9da516c2485f9f68d993993d7fc8cc5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;bigarray#VALfortran_layout&quot;&gt;&lt;code&gt;Bigarray.fortran_layout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41ef46129783d44de423e15dd183806b44f6399" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;filename#VALbasename&quot;&gt;&lt;code&gt;Filename.basename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71122fe0c946308ef4312bedb5d901dde6d2e503" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;filename#VALbasename&quot;&gt;&lt;code&gt;Filename.basename&lt;/code&gt;&lt;/a&gt;. This function conforms to the specification of POSIX.1-2008 for the &lt;code&gt;dirname&lt;/code&gt; utility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2191c81cd8e40179143cee672778664dc62022d6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;marshal#VALheader_size&quot;&gt;&lt;code&gt;Marshal.header_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a0e158d5b4d4995559ddcada00f718a47ed6ab" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parsing#VALrhs_start&quot;&gt;&lt;code&gt;Parsing.rhs_start&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd68a9cd836e826e538692b0f518ceb6d95b1f3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;parsing#VALsymbol_start&quot;&gt;&lt;code&gt;Parsing.symbol_start&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7473460fb55093a88c939ddf07bf5b97080d85d7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread#VALwait_timed_write&quot;&gt;&lt;code&gt;Thread.wait_timed_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d4bf83db9715a2cdd0b54cccc0eccada72d457" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;thread#VALwait_write&quot;&gt;&lt;code&gt;Thread.wait_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="117ae8697e149c8b10ba9fb72213dc70d8413f0c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;threadunix#VALtimed_write&quot;&gt;&lt;code&gt;ThreadUnix.timed_write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062b9eb85ac4f6537585317c419c75e1ead04a8b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALftruncate&quot;&gt;&lt;code&gt;Unix.ftruncate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267f5d6d48db716a4209f785b2802c68df998040" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALlseek&quot;&gt;&lt;code&gt;Unix.lseek&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7983bce1c7f5e7fb1e1f7b1727f347d34f1b4769" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;unix#VALtruncate&quot;&gt;&lt;code&gt;Unix.truncate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934e88396276c0c2240b775ffe7d702c1fad214e" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;(&amp;gt;=)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbdc53c2a856487304d86079f81868501dce464" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;(&amp;gt;=)&lt;/code&gt;. Left-associative operator, see &lt;a href=&quot;ocaml_operators&quot;&gt;&lt;code&gt;Ocaml_operators&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7974f57d8c0e860eaebe783f2a71c8524cb34091" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ftruncate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172bb6759e338f974815d3fc3898b3af508ab018" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;lseek&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b2425f151fa75d18f6cff5ce52350ff12b15d6" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;truncate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf550f11a6d457559150bea06847214db84bceb9" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;direct call site&lt;/em&gt; and &lt;em&gt;indirect call site&lt;/em&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b4ebf3df5f1933706bd49f1f810739f86769b9" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;format#VALpp_set_geometry&quot;&gt;&lt;code&gt;Format.pp_set_geometry&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bada19b24002891e2127f82d655fb232612c4165" translate="yes" xml:space="preserve">
          <source>See also the following language extension: &lt;a href=&quot;extensionsyntax#ss%3Aextension-literals&quot;&gt;extension literals&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ee9c6eaaebba14087cba6c7dccbeafb26f9f20" translate="yes" xml:space="preserve">
          <source>See also the following language extension: &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7bc7936690111208cf1b4540a43bfc4e86d021b" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0da72a16b2577a45cfe9897b6e643bb9e2ca8f" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;extensionsyntax#s%3Aext-ops&quot;&gt;extension operators&lt;/a&gt;, &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;, and &lt;a href=&quot;bindingops#s%3Abinding-operators&quot;&gt;binding operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c73179224e83424f2b6565f0815572a59180a7" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f6e72f671a03b0649dd1686771098f16fd87b2" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;overriding in open statements&lt;/a&gt;, &lt;a href=&quot;bigarray#s%3Abigarray-access&quot;&gt;syntax for Bigarray access&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;indexops#s%3Aindex-operators&quot;&gt;extended indexing operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51afb98b828bb552a973a63ab8dfb1e7968deae7" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;locallyabstract#s%3Alocally-abstract&quot;&gt;locally abstract types&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt; and &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d964850f6cd04102cc69cbd15792541865759d3e" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;manual024#s%3Arecursive-modules&quot;&gt;recursive modules&lt;/a&gt;, &lt;a href=&quot;firstclassmodules#s%3Afirst-class-modules&quot;&gt;first-class modules&lt;/a&gt;, &lt;a href=&quot;overridingopen#s%3Aexplicit-overriding-open&quot;&gt;overriding in open statements&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;generative functors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a720c82ecb5b1fb607f1b4d9f4172063164c829c" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;moduletypeof#s%3Amodule-type-of&quot;&gt;recovering the type of a module&lt;/a&gt;, &lt;a href=&quot;signaturesubstitution#s%3Asignature-substitution&quot;&gt;substitution inside a signature&lt;/a&gt;, &lt;a href=&quot;modulealias#s%3Amodule-alias&quot;&gt;type-level module aliases&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt; and &lt;a href=&quot;generativefunctors#s%3Agenerative-functors&quot;&gt;generative functors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29a84ccf334151d915afcb3f2e6e7537d68cd15" translate="yes" xml:space="preserve">
          <source>See also the following language extensions: &lt;a href=&quot;privatetypes#s%3Aprivate-types&quot;&gt;private types&lt;/a&gt;, &lt;a href=&quot;gadts#s%3Agadts&quot;&gt;generalized algebraic datatypes&lt;/a&gt;, &lt;a href=&quot;attributes#s%3Aattributes&quot;&gt;attributes&lt;/a&gt;, &lt;a href=&quot;extensionnodes#s%3Aextension-nodes&quot;&gt;extension nodes&lt;/a&gt;, &lt;a href=&quot;extensiblevariants#s%3Aextensible-variants&quot;&gt;extensible variant types&lt;/a&gt; and &lt;a href=&quot;inlinerecords#s%3Ainline-records&quot;&gt;inline records&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5446f012e259558685648a5f00bc2cc8024d26a0" translate="yes" xml:space="preserve">
          <source>See chapter &amp;zwj;&lt;a href=&quot;comp#c%3Acamlc&quot;&gt;9&lt;/a&gt; and chapter &amp;zwj;&lt;a href=&quot;runtime#c%3Aruntime&quot;&gt;11&lt;/a&gt; for more information about ocamlc and ocamlrun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e968b9a4f8cf9c493b7f7b75dc2169f869275ef3" translate="yes" xml:space="preserve">
          <source>See chapter &lt;a href=&quot;comp#c%3Acamlc&quot;&gt;9&lt;/a&gt; and chapter &lt;a href=&quot;runtime#c%3Aruntime&quot;&gt;11&lt;/a&gt; for more information about ocamlc and ocamlrun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcccc261b9612e2f14b7e419031fa265dba4cb6" translate="yes" xml:space="preserve">
          <source>See definition of type &lt;a href=&quot;format#TYPEformatter_out_functions&quot;&gt;&lt;code&gt;Format.formatter_out_functions&lt;/code&gt;&lt;/a&gt; for the meaning of argument &lt;code&gt;out_funs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2cf7d7720b666988505780cd4f51b98ec12e04" translate="yes" xml:space="preserve">
          <source>See section &amp;zwj;&lt;a href=&quot;comp#s%3Acomp-errors&quot;&gt;9.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d3c6c1254d43caf08c4fc9fb0f0446b516d896" translate="yes" xml:space="preserve">
          <source>See section &lt;a href=&quot;comp#s%3Acomp-errors&quot;&gt;9.4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f192eddf70c2ef4aad319edd7fbd3100374bc82" translate="yes" xml:space="preserve">
          <source>See the documentation of type &lt;code&gt;lexbuf&lt;/code&gt; for information about how the lexing engine will manage positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078de8e8cb0a0be314bfef55ec6a63ca5273d8c4" translate="yes" xml:space="preserve">
          <source>Seeking and truncating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d35cbfc8ed9fd20bcc34424eb4686772749654" translate="yes" xml:space="preserve">
          <source>Select a stack frame by number and describe it. The frame currently executing when the program stopped has number 0; its caller has number 1; and so on up the call stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8452dd0699a1a23b96c5aa8df33d39a7e9dbaf" translate="yes" xml:space="preserve">
          <source>Select and display the stack frame just &amp;ldquo;above&amp;rdquo; the selected frame, that is, the frame that called the selected frame. An argument says how many frames to go up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04958a6b748a73393b1c5f640955358c4f8954c" translate="yes" xml:space="preserve">
          <source>Select and display the stack frame just &amp;ldquo;below&amp;rdquo; the selected frame, that is, the frame that was called by the selected frame. An argument says how many frames to go down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8141835065ce052c6a2b2ffe055e3f74e2c9cb62" translate="yes" xml:space="preserve">
          <source>Select whether the debugger makes checkpoints or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee6fc3a6c80dc0fdd9a0fa5a8d6a3e707e73481" translate="yes" xml:space="preserve">
          <source>Select whether to follow the child or the parent in case of a call to fork.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9951163a39424a7abbbc84b6339ca822c1c0c3ff" translate="yes" xml:space="preserve">
          <source>Select whether to stop after loading new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18235832d8dac1ddcfbe78e75d7c4f1ed339c2fa" translate="yes" xml:space="preserve">
          <source>Self type cannot be a closed object type, so that the class remains extensible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5113dee834dec087ca084bd3afde0c50a62cefa1" translate="yes" xml:space="preserve">
          <source>Semantic actions are arbitrary OCaml expressions, that are evaluated to produce the semantic attribute attached to the defined nonterminal. The semantic actions can access the semantic attributes of the symbols in the right-hand side of the rule with the &lt;code&gt;$&lt;/code&gt; notation: &lt;code&gt;$1&lt;/code&gt; is the attribute for the first (leftmost) symbol, &lt;code&gt;$2&lt;/code&gt; is the attribute for the second symbol, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1392c344896296c101306a21e132080b369fb8" translate="yes" xml:space="preserve">
          <source>Semantic tag operations may be set on or off with &lt;a href=&quot;format#VALset_tags&quot;&gt;&lt;code&gt;Format.set_tags&lt;/code&gt;&lt;/a&gt;. Tag-marking operations may be set on or off with &lt;a href=&quot;format#VALset_mark_tags&quot;&gt;&lt;code&gt;Format.set_mark_tags&lt;/code&gt;&lt;/a&gt;. Tag-printing operations may be set on or off with &lt;a href=&quot;format#VALset_print_tags&quot;&gt;&lt;code&gt;Format.set_print_tags&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1190d7996932cb0ed68afaf24a43b49448d1e5f" translate="yes" xml:space="preserve">
          <source>Semantic tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb881ab1cd188ae66aa99c3dc8228baeb938bc3" translate="yes" xml:space="preserve">
          <source>Semaphore</source>
          <target state="translated">Semaphore</target>
        </trans-unit>
        <trans-unit id="f1cd21e669f85300b2be2b19e4e5045736de983f" translate="yes" xml:space="preserve">
          <source>Semaphores</source>
          <target state="translated">Semaphores</target>
        </trans-unit>
        <trans-unit id="794f749100510e2d53794fd5fc728f8ca18cb7c3" translate="yes" xml:space="preserve">
          <source>Send a break condition on the given file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d09c8723edfdef0a4a50d0f35d4d918ef4e469" translate="yes" xml:space="preserve">
          <source>Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c756d9c6312c8e89151799f61dfa59089e8683c" translate="yes" xml:space="preserve">
          <source>Send data over a connected socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1fd933b74ca801a025dc26097da110a2f1aad5" translate="yes" xml:space="preserve">
          <source>Send data over an unconnected socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4346390f1e8fcea53c881ce751b35f83eab1e2" translate="yes" xml:space="preserve">
          <source>Send function closures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa328f49b32e6dbe61c90ab9a659303e1d388d15" translate="yes" xml:space="preserve">
          <source>Seq</source>
          <target state="translated">Seq</target>
        </trans-unit>
        <trans-unit id="5c8f4e0e1a2281faf562976c2410f76c3d8fbc95" translate="yes" xml:space="preserve">
          <source>Sequence</source>
          <target state="translated">Sequence</target>
        </trans-unit>
        <trans-unit id="df4c406a13049baa1ab0e76a8f8df17494a4f5fc" translate="yes" xml:space="preserve">
          <source>Sequenced packets socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbd522eaa45c773d474dd7812f92e43182cca64" translate="yes" xml:space="preserve">
          <source>Sequences of &amp;ldquo;operator characters&amp;rdquo;, such as &amp;lt;=&amp;gt; or !!, are read as a single token from the &lt;a href=&quot;#infix-symbol&quot;&gt;infix-symbol&lt;/a&gt; or &lt;a href=&quot;#prefix-symbol&quot;&gt;prefix-symbol&lt;/a&gt; class. These symbols are parsed as prefix and infix operators inside expressions, but otherwise behave like normal identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b199937d4e88abb4b12f2d98e271f5e0b4e49d03" translate="yes" xml:space="preserve">
          <source>Serialization functions are attached to the custom blocks to which they apply. Obviously, deserialization functions cannot be attached this way, since the custom block does not exist yet when deserialization begins! Thus, the struct custom_operations that contain deserialization functions must be registered with the deserializer in advance, using the register_custom_operations function declared in &amp;lt;caml/custom.h&amp;gt;. Deserialization proceeds by reading the identifier off the input stream, allocating a custom block of the size specified in the input stream, searching the registered struct custom_operation blocks for one with the same identifier, and calling its deserialize function to fill the data part of the custom block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="5f794630188a70bb0410585f48c66ba173e50bf0" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at code address frag:pc. The integer frag is the identifier of a code fragment, a set of modules that have been loaded at once, either initially or with the Dynlink module. The integer pc is the instruction counter within this code fragment. If frag is omitted, it defaults to 0, which is the code fragment of the program loaded initially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67fd0c07eb651e26b3507b50bb26fc61d911351" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the beginning of function. This works only when the functional value of the identifier function has been computed and assigned to the identifier. Hence this command cannot be used at the very beginning of the program execution, when all identifiers are still undefined; use gototime to advance execution until the functional value is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc5e402aac9a8ffa33b3c043b2fbbddc6771b37" translate="yes" xml:space="preserve">
          <source>Set a breakpoint at the current position in the program execution. The current position must be on an event (i.e., neither at the beginning, nor at the end of the program).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4aa9eedb69d42da9d6668e8997f4aad5c09196" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module (or in the current module if module is not given), at the event closest to line line, column column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4310fb9d3477018a1c35b651ff34434bb6935cce" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module (or in the current module if module is not given), at the first event of line line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e277ccf247de560e48662efb52ccdfd1595175a9" translate="yes" xml:space="preserve">
          <source>Set a breakpoint in module module at the event closest to character number character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6026063039bb27d5bd5bee38225a37e46c85c50a" translate="yes" xml:space="preserve">
          <source>Set a new value for the atomic reference, and return the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4522457d3f16cb6408ba92806aa8d50850cfba" translate="yes" xml:space="preserve">
          <source>Set a new value for the atomic reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41542810756d3748a80cb8b0e04eaa0f786f07fc" translate="yes" xml:space="preserve">
          <source>Set address to ``any'' address for use with &lt;a href=&quot;unix#VALbind&quot;&gt;&lt;code&gt;Unix.bind&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e2314a3e1ad059f717dccc4a3ef68ea89c0fea" translate="yes" xml:space="preserve">
          <source>Set address to ``any'' address for use with &lt;a href=&quot;unixlabels#VALbind&quot;&gt;&lt;code&gt;UnixLabels.bind&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4768fb4642e9409d9ee6be09ebc15a97d8bef70" translate="yes" xml:space="preserve">
          <source>Set aggressiveness of inlining to n, where n is a positive integer. Specifying -inline 0 prevents all functions from being inlined, except those whose body is smaller than the call site. Thus, inlining causes no expansion in code size. The default aggressiveness, -inline 1, allows slightly larger functions to be inlined, resulting in a slight expansion in code size. Higher values for the -inline option cause larger and larger functions to become candidate for inlining, but can result in a serious increase in code size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d700f315433099cdc0af2bac288d1f008cfe4955" translate="yes" xml:space="preserve">
          <source>Set all elements of a Bigarray to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c906b1b0c5c8936b5e14c8bc5cc977d6cb17aa" translate="yes" xml:space="preserve">
          <source>Set all elements of a Bigarray to a given value. &lt;code&gt;Genarray.fill&amp;nbsp;a&amp;nbsp;v&lt;/code&gt; stores the value &lt;code&gt;v&lt;/code&gt; in all elements of the Bigarray &lt;code&gt;a&lt;/code&gt;. Setting only some elements of &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;v&lt;/code&gt; can be achieved by applying &lt;code&gt;Genarray.fill&lt;/code&gt; to a sub-array or a slice of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d867b8f186c18471e57de3ac1801d69260d1c58e" translate="yes" xml:space="preserve">
          <source>Set difference: &lt;code&gt;diff&amp;nbsp;s1&amp;nbsp;s2&lt;/code&gt; contains the elements of &lt;code&gt;s1&lt;/code&gt; that are not in &lt;code&gt;s2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d01c4f837c63566e016e072eadb650b0fec4af" translate="yes" xml:space="preserve">
          <source>Set filename in the initial tracked position to &lt;code&gt;file&lt;/code&gt; in &lt;code&gt;lexbuf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5595845e5f6e6fe2aeae20fa1474b57ec66014" translate="yes" xml:space="preserve">
          <source>Set intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b352005cac28824fa150d78f1cbfd0124f0743" translate="yes" xml:space="preserve">
          <source>Set or clear a boolean-valued option in the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559666fe411d68ab6d59bfe3e574adcc245f6007" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6db1debac2e11f674310c3d33dc2aa64f573ad" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the &lt;code&gt;exec&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be7a3e35944da3c67cba65625d93fe03af274e4" translate="yes" xml:space="preserve">
          <source>Set the ``close-on-exec'' flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;create_process&lt;/code&gt; and &lt;code&gt;open_process&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ffc9d4f7d54313e28aea022cdafcbd43fe7d38b" translate="yes" xml:space="preserve">
          <source>Set the ``non-blocking'' flag on the given descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a81fdf519c1d5d613550e22c6593e795e28ca60" translate="yes" xml:space="preserve">
          <source>Set the ``non-blocking'' flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the &lt;code&gt;EAGAIN&lt;/code&gt; or &lt;code&gt;EWOULDBLOCK&lt;/code&gt; error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises &lt;code&gt;EAGAIN&lt;/code&gt; or &lt;code&gt;EWOULDBLOCK&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a189281e8ddbee43149f8636d4156e072b23d1e" translate="yes" xml:space="preserve">
          <source>Set the behavior of the system on receipt of a given signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7401aa97a51a58a6184a906cd8b63d767fe0cfb2" translate="yes" xml:space="preserve">
          <source>Set the behavior of the system on receipt of a given signal. The first argument is the signal number. Return the behavior previously associated with the signal. If the signal number is invalid (or not available on your system), an &lt;code&gt;Invalid_argument&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28cff793cc4c826a5938c2cae37dba2b6187746" translate="yes" xml:space="preserve">
          <source>Set the close-on-exec flag on the descriptor returned by &lt;a href=&quot;unix#VALopenfile&quot;&gt;&lt;code&gt;Unix.openfile&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;unix#VALset_close_on_exec&quot;&gt;&lt;code&gt;Unix.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923fd2bd40692f311e28beeef94b004d48a2ef9a" translate="yes" xml:space="preserve">
          <source>Set the close-on-exec flag on the descriptor returned by &lt;a href=&quot;unixlabels#VALopenfile&quot;&gt;&lt;code&gt;UnixLabels.openfile&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2138fc09ea786b4c43edb2acbf2cc1c43d3f1c9b" translate="yes" xml:space="preserve">
          <source>Set the close-on-exec flag on the descriptor returned by &lt;a href=&quot;unixlabels#VALopenfile&quot;&gt;&lt;code&gt;UnixLabels.openfile&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;unixlabels#VALset_close_on_exec&quot;&gt;&lt;code&gt;UnixLabels.set_close_on_exec&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577e0abb1a0491dac220bc63e2e1bf990b7b538e" translate="yes" xml:space="preserve">
          <source>Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b69e933a718d8f6ef580a6e4c89ad941663652b" translate="yes" xml:space="preserve">
          <source>Set the debugger variable variable to the value value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8dfbcd023f476a67f43c27904c2b7ceb6809b74" translate="yes" xml:space="preserve">
          <source>Set the initial tracked input position for &lt;code&gt;lexbuf&lt;/code&gt; to a custom value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6edebbdfc394070896b55f61daf11e0964398b" translate="yes" xml:space="preserve">
          <source>Set the initial tracked input position for &lt;code&gt;lexbuf&lt;/code&gt; to a custom value. Ignores &lt;code&gt;pos_fname&lt;/code&gt;. See &lt;a href=&quot;lexing#VALset_filename&quot;&gt;&lt;code&gt;Lexing.set_filename&lt;/code&gt;&lt;/a&gt; for changing this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e946e49b39fb11e9ad3eafab1ed3bf7031c2fc" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0801471051311b2e948d922eed12bfac0800e655" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of &lt;code&gt;0.0&lt;/code&gt; is interpreted as the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a91c50ce8269242fb58be1767c73a683dd0d047" translate="yes" xml:space="preserve">
          <source>Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. If both times are &lt;code&gt;0.0&lt;/code&gt;, the access and last modification times are both set to the current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185eb91284ecd22b41ba674e1219388c6b167ef9" translate="yes" xml:space="preserve">
          <source>Set the list of compilation units that may be referenced from units that are dynamically loaded in the future to be exactly the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4b8d871e2b2886d073bd654f1c86fb95bdb9d2" translate="yes" xml:space="preserve">
          <source>Set the maximum number of checkpoints to count. More checkpoints facilitate going far back in time, but use more memory and create more Unix processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f77a1c0b85caa6a763950d3c33aa375b7e0fdc" translate="yes" xml:space="preserve">
          <source>Set the maximum number of simultaneously live checkpoints to count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09edd36e6c8e0e32ae3c9fce19236b50da00ff16" translate="yes" xml:space="preserve">
          <source>Set the name of the generated C library. ocamlmklib will generate liboutputc.so (if shared libraries are supported) and liboutputc.a. If not specified, defaults to the output name given with -o.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7c54f201f52beadb4a8e3dc1e5a3b45dafc3f9" translate="yes" xml:space="preserve">
          <source>Set the name of the generated OCaml library. ocamlmklib will generate output.cma and/or output.cmxa. If not specified, defaults to a.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd5bc4c54a4ee7b1ef577814ca237667f216b5c" translate="yes" xml:space="preserve">
          <source>Set the number of events between two checkpoints for long displacements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3c679e454f616c096ddd2e445f6a7e9b0614f8" translate="yes" xml:space="preserve">
          <source>Set the number of events between two checkpoints for small displacements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4312ad660e95018ad6202f57a1580edad689397c" translate="yes" xml:space="preserve">
          <source>Set the number of rows of context used for optimization during pattern matching compilation. The default value is 32. Lower values cause faster compilation, but less optimized code. This advanced option is meant for use in the event that a pattern-match-heavy program leads to significant increases in compilation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd4f19f7ee20639e18918f2bb65174f4e6a5c29" translate="yes" xml:space="preserve">
          <source>Set the process's file mode creation mask, and return the previous mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04957e74200149a3abc2c9909388498556010333" translate="yes" xml:space="preserve">
          <source>Set the process's file mode creation mask, and return the previous mask. On Windows: not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3890f58a5c4bd5d20e9bc02f64aca7a889291317" translate="yes" xml:space="preserve">
          <source>Set the program name to file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdb3db725a2dc949ffdc1b6bda172d217346214" translate="yes" xml:space="preserve">
          <source>Set the real group id and effective group id for the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625d0b4d8c96326f0e509da591b26c3ed252acb9" translate="yes" xml:space="preserve">
          <source>Set the real group id and effective group id for the process. On Windows: not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eb017dd2fc17259e2110f32f4e6e52fa4c3a21" translate="yes" xml:space="preserve">
          <source>Set the real user id and effective user id for the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f429b536c18c7b528cbf990829dea199587106c" translate="yes" xml:space="preserve">
          <source>Set the real user id and effective user id for the process. On Windows: not implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d67a2d91d8163aa7eb4ac3fe77fae83d83888a" translate="yes" xml:space="preserve">
          <source>Set the reference to false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a999238e1f043ca2e3b51b9e405f032f3de38d77" translate="yes" xml:space="preserve">
          <source>Set the reference to the float argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba5bb4a58f5debb26e8458f918a62172e0560b8" translate="yes" xml:space="preserve">
          <source>Set the reference to the int argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2fa91e83dd3e8725c6474fe2f0be917da3ce21" translate="yes" xml:space="preserve">
          <source>Set the reference to the string argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9462a23157a2b8632f223d537a23034f8765868" translate="yes" xml:space="preserve">
          <source>Set the reference to true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17571cb3b69669ab030fc74c006854d56dbb61ea" translate="yes" xml:space="preserve">
          <source>Set the runtime system options and garbage collection parameters. (If OCAMLRUNPARAM is not set, CAMLRUNPARAM will be used instead.) This variable must be a sequence of parameter specifications separated by commas. A parameter specification is an option letter followed by an = sign, a decimal number (or an hexadecimal number prefixed by 0x), and an optional multiplier. The options are documented below; the last six correspond to the fields of the control record documented in &lt;a href=&quot;libref/gc&quot;&gt;Module Gc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cc6bede162a922ea9cf076349a08b373a6d259" translate="yes" xml:space="preserve">
          <source>Set the runtime system options and garbage collection parameters. (If OCAMLRUNPARAM is not set, CAMLRUNPARAM will be used instead.) This variable must be a sequence of parameter specifications separated by commas. For convenience, commas at the beginning of the variable are ignored, and multiple runs of commas are interpreted as a single one. A parameter specification is an option letter followed by an = sign, a decimal number (or an hexadecimal number prefixed by 0x), and an optional multiplier. The options are documented below; the last six correspond to the fields of the control record documented in &lt;a href=&quot;libref/gc&quot;&gt;Module Gc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e70a362a30dc32ec5295b3216ee79d934141efa" translate="yes" xml:space="preserve">
          <source>Set the section number used for generated man filenames. Default is &amp;rsquo;3&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c0bbe1c7f126d62252bc8aeeea0afb769c2016" translate="yes" xml:space="preserve">
          <source>Set the size of the execution history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7116e6d97ed745df00bb2d437dbdaa0874a881" translate="yes" xml:space="preserve">
          <source>Set the state of the generator used by the basic functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9735d601f636e8000a577f96f90a54dec7a9320" translate="yes" xml:space="preserve">
          <source>Set the status of the terminal referred to by the given file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef0ceaca247026faede9fe880785cde60d386d3" translate="yes" xml:space="preserve">
          <source>Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (&lt;code&gt;TCSANOW&lt;/code&gt;), when all pending output has been transmitted (&lt;code&gt;TCSADRAIN&lt;/code&gt;), or after flushing all input that has been received but not read (&lt;code&gt;TCSAFLUSH&lt;/code&gt;). &lt;code&gt;TCSADRAIN&lt;/code&gt; is recommended when changing the output parameters; &lt;code&gt;TCSAFLUSH&lt;/code&gt;, when changing the input parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f19583658e227b08c0063b0ee48f99dc946e688" translate="yes" xml:space="preserve">
          <source>Set the suffix used for generated man filenames. Default is &amp;rsquo;3o&amp;rsquo;, as in List.3o.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3de3c8737b8c685ff7d7d5183a0ae5a23b5a07" translate="yes" xml:space="preserve">
          <source>Set the text of the ellipsis printed when too many pretty-printing boxes are open (a single dot, &lt;code&gt;.&lt;/code&gt;, by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f21a3553861b0bc4c154c47440c25cf06db10d" translate="yes" xml:space="preserve">
          <source>Set the working directory for ocamldebug to directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8640d7d98c95569c8a27941f1cceb667e63daf27" translate="yes" xml:space="preserve">
          <source>Set union.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015294ab9557093ab8ef3f4758adf636f86f2699" translate="yes" xml:space="preserve">
          <source>Set up a socket for receiving connection requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126c2a22413412e2612fe5d80353e96755c171d4" translate="yes" xml:space="preserve">
          <source>Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e061c96cfcc2740e44edf97c61308d74477a19" translate="yes" xml:space="preserve">
          <source>Sets a tabulation marker at current insertion point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba802095863c730620b6e522ab417b749d4c61a" translate="yes" xml:space="preserve">
          <source>Sets over ordered types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb449f71834cd30ec14d00c9d50ba85c232186d3" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="translated">Setting</target>
        </trans-unit>
        <trans-unit id="b8f0cdd8935e519ffb7f3404fbd0cd7cd5f6ab79" translate="yes" xml:space="preserve">
          <source>Setting the OCAML_SPACETIME_INTERVAL environment variable to an integer representing a number of milliseconds before running a program built with Spacetime will cause memory profiling to be in operation when the program is started. The contents of the OCaml heap will be sampled each time the number of milliseconds that the program has spent executing since the last sample exceeds the given number. (Note that the time base is combined user plus system time&amp;mdash;&lt;em&gt;not&lt;/em&gt; wall clock time. This peculiarity may be changed in future.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d67b0d686985163b75cc6f60585023872675c7a" translate="yes" xml:space="preserve">
          <source>Several variables enables to fine-tune the debugger. Reasonable defaults are provided, and you should normally not have to change them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7da9bae4232e30381e9ccc7d82a3d3dff0749c5" translate="yes" xml:space="preserve">
          <source>Shared ownership: the data has several owners, that may only access it, not mutate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc300b3858ae9ce2ba85a4fe2dd0789623bd15b" translate="yes" xml:space="preserve">
          <source>Should the inliner prove recalcitrant and refuse to inline a particular function, or if the observed inlining decisions are not to the programmer&amp;rsquo;s satisfaction for some other reason, inlining behaviour can be dictated by the programmer directly in the source code. One example where this might be appropriate is when the programmer, but not the compiler, knows that a particular function call is on a cold code path. It might be desirable to prevent inlining of the function so that the code size along the hot path is kept smaller, so as to increase locality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d5c1d2533d4a222462ad94a689b7cce34101e0" translate="yes" xml:space="preserve">
          <source>Show absolute filenames in error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7362c779f885975ff09e3a25bc5897262fab3f" translate="yes" xml:space="preserve">
          <source>Show the description of all available warning numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ca6694d54dd6489a83d8b39f9d9cd98963cbec" translate="yes" xml:space="preserve">
          <source>Shutdown a socket connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8a4815f67ac9a7d69bff16d4ed5655a6b6b3be" translate="yes" xml:space="preserve">
          <source>Shutdown a socket connection. &lt;code&gt;SHUTDOWN_SEND&lt;/code&gt; as second argument causes reads on the other end of the connection to return an end-of-file condition. &lt;code&gt;SHUTDOWN_RECEIVE&lt;/code&gt; causes writes on the other end of the connection to return a closed pipe condition (&lt;code&gt;SIGPIPE&lt;/code&gt; signal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d6f2a50d9070ba8af0bf2249d46f60014587a0" translate="yes" xml:space="preserve">
          <source>Signal an error during deserialization; input_value or Marshal.from_... raise a Failure exception after cleaning up their internal data structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda1c34f3e7ae5e716370d772211709548003ec4" translate="yes" xml:space="preserve">
          <source>Signal handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e415b59d5f90a505f7744e1ba6f59f0f4039873" translate="yes" xml:space="preserve">
          <source>Signal handling follows the POSIX thread model: signals generated by a thread are delivered to that thread; signals generated externally are delivered to one of the threads that does not block it. Each thread possesses a set of blocked signals, which can be modified using &lt;a href=&quot;thread#VALsigmask&quot;&gt;&lt;code&gt;Thread.sigmask&lt;/code&gt;&lt;/a&gt;. This set is inherited at thread creation time. Per-thread signal masks are supported only by the system thread library under Unix, but not under Win32, nor by the VM thread library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9311ddf008a50fe257c90a1196997c277af9ab4" translate="yes" xml:space="preserve">
          <source>Signal interrupt on break condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f0164440d5b6c728963e4c5496d15ee0199c98" translate="yes" xml:space="preserve">
          <source>Signal numbers for the standard POSIX signals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="11de8e6e96acdf7704df5910480a4dcc8fe36151" translate="yes" xml:space="preserve">
          <source>Signals are detected only when the program performs an allocation in the heap. That is, if a signal is delivered while in a piece of code that does not allocate, its handler will not be called until the next heap allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7b79c51a7108560360ba735396db85158b3113" translate="yes" xml:space="preserve">
          <source>Signatures are interfaces for structures. A signature specifies which components of a structure are accessible from the outside, and with which type. It can be used to hide some components of a structure (e.g. local function definitions) or export some components with a restricted type. For instance, the signature below specifies the three priority queue operations empty, insert and extract, but not the auxiliary function remove_top. Similarly, it makes the queue type abstract (by not providing its actual representation as a concrete type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0799b1c5b5c705ede3db466efc79912f2251c444" translate="yes" xml:space="preserve">
          <source>Signatures are type specifications for structures. Signatures sig &amp;hellip; end are collections of type specifications for value names, type names, exceptions, module names and module type names. A structure will match a signature if the structure provides definitions (implementations) for all the names specified in the signature (and possibly more), and these definitions meet the type requirements given in the signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fcf14805d5bb21d1394f6f62f3947836ae1ca6" translate="yes" xml:space="preserve">
          <source>Similar to #use but also wrap the code into a top-level module of the same name as capitalized file name without extensions, following semantics of the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76cbdc21e4b3567672c60ec1215127342f83044" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;str#VALstring_match&quot;&gt;&lt;code&gt;Str.string_match&lt;/code&gt;&lt;/a&gt;, but also returns true if the argument string is a prefix of a string that matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06853b76b05e43df457ddfb2bcae3f857c0d6a4e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;str#VALstring_match&quot;&gt;&lt;code&gt;Str.string_match&lt;/code&gt;&lt;/a&gt;, but also returns true if the argument string is a prefix of a string that matches. This includes the case of a true complete match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f29146c0b592c6ffbd18d22abb6283b786360f" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0e701577791f5cf187fc0edb8e1fe8be2ec0ba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process&quot;&gt;&lt;code&gt;Unix.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unix#VALopen_process_args_full&quot;&gt;&lt;code&gt;Unix.open_process_args_full&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unix#VALopen_process_full&quot;&gt;&lt;code&gt;Unix.open_process_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0b98907bce96d78dfe42a3e18fe2e7ca3ebcb5" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677334462e1ae82342d0dcb52850960bd974932a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unix#VALopen_process_args&quot;&gt;&lt;code&gt;Unix.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1514fb8d353a5c12e6c485587d3a8cc11982c9e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41eff9ce6b4d4a58a474810a3cf22b40cb6b7bde" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20f41583aca1aa9450dbb3c13de399ec43453c1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process&quot;&gt;&lt;code&gt;UnixLabels.open_process&lt;/code&gt;&lt;/a&gt;, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command. If the command does not need to be run through the shell, &lt;a href=&quot;unixlabels#VALopen_process_args_full&quot;&gt;&lt;code&gt;UnixLabels.open_process_args_full&lt;/code&gt;&lt;/a&gt; can be used instead of &lt;a href=&quot;unixlabels#VALopen_process_full&quot;&gt;&lt;code&gt;UnixLabels.open_process_full&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152894b258fc6f1a607a6ef3c52d9f336881f854" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process_args&quot;&gt;&lt;code&gt;UnixLabels.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea046ad156c9a72bea1ad6fbd1b87a92f71223c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;unixlabels#VALopen_process_args&quot;&gt;&lt;code&gt;UnixLabels.open_process_args&lt;/code&gt;&lt;/a&gt;, but the third argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d313b8e52b393d5cf6147ba4249f7eca53294df8" translate="yes" xml:space="preserve">
          <source>Similarly to abstract types, the variance of type parameters is not inferred, and must be given explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ce25462976ce5eb1ef837e2ed0739d90ee5d4e" translate="yes" xml:space="preserve">
          <source>Similarly, if we have a value of type x list, we can convert it to a value of type xy list, since we could convert each element one by one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d313ab9b0494c745db6b22c28b2cff11a10b496d" translate="yes" xml:space="preserve">
          <source>Similarly, it is possible to pass untagged OCaml integers between OCaml and C. This is done by annotating the arguments and/or result with [@untagged]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92741dcb5f21be8a2e70d1205e848fdf0320b01" translate="yes" xml:space="preserve">
          <source>Similarly, it may be necessary to use more than one explicitly polymorphic type variables, like for computing the nested list of list lengths of the nested list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2c5d03b5b9c8dd6ba0678a65d5351c8cd98413" translate="yes" xml:space="preserve">
          <source>Similarly, the type money2 below is not a subtype of type money.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c869e53520a631cc815df7228f90ac1d103f73c0" translate="yes" xml:space="preserve">
          <source>Simple break hints are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbdf297ad58c249eb6a884743adad5ebf58ec52" translate="yes" xml:space="preserve">
          <source>Simplification, which is run in conjunction with inlining, propagates information (known as &lt;em&gt;approximations&lt;/em&gt;) about which variables hold what values at runtime. Certain relationships between variables and symbols are also tracked: for example, some variable may be known to always hold the same value as some other variable; or perhaps some variable may be known to always hold the value pointed to by some symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ea8cc7a44b0c2bd5856cb347cbbb1643e7f85f" translate="yes" xml:space="preserve">
          <source>Since 4.03 it raises the more helpful message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ade97bea138f3fb9efb25ef0d7f126ecd46f02" translate="yes" xml:space="preserve">
          <source>Since 4.05, caml_shutdown function can be used to shut the runtime down gracefully, which equals the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ba141f2bfeface334c39bbfdb23f3bb8205301" translate="yes" xml:space="preserve">
          <source>Since 4.10, allocation functions are guaranteed not to call any OCaml callbacks from C, including finalisers and signal handlers, and delay their execution instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82b13aad43c297f1863ddbcfef759a67cc30d99" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.01, it is an error if the same method or instance variable name is defined several times in the same class body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0f0ea20cac38b243eaa241996cd121a3a25b22" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.01, open statements shadowing an existing identifier (which is later used) trigger the warning 44. Adding a ! character after the open keyword indicates that such a shadowing is intentional and should not trigger the warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c19851dc798d0e9efd68333f02e9775f883e6a8" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.02, it is possible to specify a refill-handler, a function that will be called when refill happens. It is passed the continuation of the lexing, on which it has total control. The OCaml expression used as refill action should have a type that is an instance of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703a6e0ead56321fd4ccc207048572bfb9890b37" translate="yes" xml:space="preserve">
          <source>Since OCaml 4.04, it is possible to get access to every part of the internal runtime API by defining the CAML_INTERNALS macro before loading caml header files. If this macro is not defined, parts of the internal runtime API are hidden.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
