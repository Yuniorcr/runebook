<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="rust">
    <body>
      <group id="rust">
        <trans-unit id="0aaca4d42181f37288aa7e21316d709a6ff71f49" translate="yes" xml:space="preserve">
          <source>BinaryHeap::extend</source>
          <target state="translated">BinaryHeap::extend</target>
        </trans-unit>
        <trans-unit id="f4c67172d6c1cdb39c6636230b079c173cf83f2c" translate="yes" xml:space="preserve">
          <source>BinaryHeap::fmt</source>
          <target state="translated">BinaryHeap::fmt</target>
        </trans-unit>
        <trans-unit id="871dac7b5ceedfbec71447a6d6ed9de357acd044" translate="yes" xml:space="preserve">
          <source>BinaryHeap::from</source>
          <target state="translated">BinaryHeap::from</target>
        </trans-unit>
        <trans-unit id="f175a9eb33f99d6629fe67f65984c4a890519755" translate="yes" xml:space="preserve">
          <source>BinaryHeap::from_iter</source>
          <target state="translated">BinaryHeap::from_iter</target>
        </trans-unit>
        <trans-unit id="abdea679542fd107e906ae5d58ce503cb54c014d" translate="yes" xml:space="preserve">
          <source>BinaryHeap::into</source>
          <target state="translated">BinaryHeap::into</target>
        </trans-unit>
        <trans-unit id="45541a8cf8b33e80b63d4c7b7d8a3acfe03252c0" translate="yes" xml:space="preserve">
          <source>BinaryHeap::into_iter</source>
          <target state="translated">BinaryHeap::into_iter</target>
        </trans-unit>
        <trans-unit id="a4f3a26fa362623ceae23603112262e72024f7b9" translate="yes" xml:space="preserve">
          <source>BinaryHeap::into_sorted_vec</source>
          <target state="translated">BinaryHeap::into_sorted_vec</target>
        </trans-unit>
        <trans-unit id="1db086875600549522e8a9e52684ebd526b5b129" translate="yes" xml:space="preserve">
          <source>BinaryHeap::into_vec</source>
          <target state="translated">BinaryHeap::into_vec</target>
        </trans-unit>
        <trans-unit id="a112ebac833a70561b615451c2e74f51b6f19a74" translate="yes" xml:space="preserve">
          <source>BinaryHeap::is_empty</source>
          <target state="translated">BinaryHeap::is_empty</target>
        </trans-unit>
        <trans-unit id="0ee572360922722532c0921740eb1f614a7ab7ce" translate="yes" xml:space="preserve">
          <source>BinaryHeap::iter</source>
          <target state="translated">BinaryHeap::iter</target>
        </trans-unit>
        <trans-unit id="119b277a11fb08dfc4b80fb6b74bafd3221914e4" translate="yes" xml:space="preserve">
          <source>BinaryHeap::len</source>
          <target state="translated">BinaryHeap::len</target>
        </trans-unit>
        <trans-unit id="227d527ad8e44dcb2418c2e7e8e075d2359fb772" translate="yes" xml:space="preserve">
          <source>BinaryHeap::new</source>
          <target state="translated">BinaryHeap::new</target>
        </trans-unit>
        <trans-unit id="1fed1ee8afbb235ea1f87d7947786969b3a00687" translate="yes" xml:space="preserve">
          <source>BinaryHeap::peek</source>
          <target state="translated">BinaryHeap::peek</target>
        </trans-unit>
        <trans-unit id="23133fcfda988b66f1b73cca51b41c4297acc6b5" translate="yes" xml:space="preserve">
          <source>BinaryHeap::peek_mut</source>
          <target state="translated">BinaryHeap::peek_mut</target>
        </trans-unit>
        <trans-unit id="d6e00b82d35a37cd32b1907ca0812180a4fe6813" translate="yes" xml:space="preserve">
          <source>BinaryHeap::pop</source>
          <target state="translated">BinaryHeap::pop</target>
        </trans-unit>
        <trans-unit id="9d087a89ba80a46d773a7b420f9c4e221911780c" translate="yes" xml:space="preserve">
          <source>BinaryHeap::push</source>
          <target state="translated">BinaryHeap::push</target>
        </trans-unit>
        <trans-unit id="f989d57cf0e0868e0ab3e99ccd663f3feb35ed09" translate="yes" xml:space="preserve">
          <source>BinaryHeap::reserve</source>
          <target state="translated">BinaryHeap::reserve</target>
        </trans-unit>
        <trans-unit id="2c3a34b08e6d7927826662441c85562fbe689c5c" translate="yes" xml:space="preserve">
          <source>BinaryHeap::reserve_exact</source>
          <target state="translated">BinaryHeap::reserve_exact</target>
        </trans-unit>
        <trans-unit id="7748954939d681e885fda180afed19fde978c11a" translate="yes" xml:space="preserve">
          <source>BinaryHeap::shrink_to</source>
          <target state="translated">BinaryHeap::shrink_to</target>
        </trans-unit>
        <trans-unit id="a6cb12e1cadaa03dc4bd1cee0a924e07fbf651bc" translate="yes" xml:space="preserve">
          <source>BinaryHeap::shrink_to_fit</source>
          <target state="translated">BinaryHeap::shrink_to_fit</target>
        </trans-unit>
        <trans-unit id="3173fa304efc6acd170d96dcfc16d265f0d5bb04" translate="yes" xml:space="preserve">
          <source>BinaryHeap::to_owned</source>
          <target state="translated">BinaryHeap::to_owned</target>
        </trans-unit>
        <trans-unit id="545a06b62d55dcf95e6aed766f34093361650315" translate="yes" xml:space="preserve">
          <source>BinaryHeap::try_from</source>
          <target state="translated">BinaryHeap::try_from</target>
        </trans-unit>
        <trans-unit id="9ff50e94eaf55b6f7a7c5638416c4db484934500" translate="yes" xml:space="preserve">
          <source>BinaryHeap::try_into</source>
          <target state="translated">BinaryHeap::try_into</target>
        </trans-unit>
        <trans-unit id="337697412c6fd50a3b2ba815044c47d165af3cd6" translate="yes" xml:space="preserve">
          <source>BinaryHeap::type_id</source>
          <target state="translated">BinaryHeap::type_id</target>
        </trans-unit>
        <trans-unit id="8acc5ae886b9efd0dc8fb7d4fc82df425c356c37" translate="yes" xml:space="preserve">
          <source>BinaryHeap::with_capacity</source>
          <target state="translated">BinaryHeap::with_capacity</target>
        </trans-unit>
        <trans-unit id="c33a043d5763d9b3ea7f89a9ac614fa68ca83bc4" translate="yes" xml:space="preserve">
          <source>Bind a TCP listener to an address, listen for connections, and read bytes in nonblocking mode:</source>
          <target state="translated">Привязывайте TCP-прослушиватель к адресу,прослушивайте соединения и читайте байты в неблокирующем режиме:</target>
        </trans-unit>
        <trans-unit id="359dde3378dea26f13c20bf3ab1abd7d31ba2c01" translate="yes" xml:space="preserve">
          <source>Bind a value to a variable.</source>
          <target state="translated">Привязать значение к переменной.</target>
        </trans-unit>
        <trans-unit id="d22542d4de6d5029b1ac0ccd7c008fc51102ba8b" translate="yes" xml:space="preserve">
          <source>Bind by reference during pattern matching.</source>
          <target state="translated">Привязывание по ссылке во время совмещения образцов.</target>
        </trans-unit>
        <trans-unit id="069dbd36e80b491e8ea0d0898b003375a28c5f42" translate="yes" xml:space="preserve">
          <source>Binding all paths matching a given prefix, using the asterisk wildcard syntax &lt;code&gt;use a::b::*;&lt;/code&gt;.</source>
          <target state="translated">Связывание всех путей, соответствующих заданному префиксу, с использованием синтаксиса подстановочного знака звездочки &lt;code&gt;use a::b::*;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="edac8dc0f66a2e81b54912d09ade5eca329f5dcd" translate="yes" xml:space="preserve">
          <source>Binding modes</source>
          <target state="translated">Режимы привязки</target>
        </trans-unit>
        <trans-unit id="30c9ed787b1702852e9d605cfb98fe4532008152" translate="yes" xml:space="preserve">
          <source>Binding with a port number of 0 will request that the OS assigns a port to this listener. The port allocated can be queried via the &lt;a href=&quot;#method.local_addr&quot;&gt;&lt;code&gt;local_addr&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">При связывании с номером порта 0 ОС будет запрашивать назначение порта этому прослушивателю. &lt;a href=&quot;#method.local_addr&quot;&gt; &lt;code&gt;local_addr&lt;/code&gt; &lt;/a&gt; порт можно запросить с помощью метода local_addr .</target>
        </trans-unit>
        <trans-unit id="ace7ad2d8af42b873b8f9c931c9515626c9ccb54" translate="yes" xml:space="preserve">
          <source>Binding with a port number of 0 will request that the OS assigns a port to this listener. The port allocated can be queried via the &lt;a href=&quot;struct.tcplistener#method.local_addr&quot;&gt;&lt;code&gt;TcpListener::local_addr&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4806bd148356225d8f9e9c34e40c18cd70837a" translate="yes" xml:space="preserve">
          <source>Binds a reference to the &lt;code&gt;name&lt;/code&gt; field to the variable &lt;code&gt;person_name&lt;/code&gt;.</source>
          <target state="translated">Привязывает ссылку на поле &lt;code&gt;name&lt;/code&gt; к переменной &lt;code&gt;person_name&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="309af9e25956170a810f78e3c71afc45e9766ccf" translate="yes" xml:space="preserve">
          <source>BitAnd</source>
          <target state="translated">BitAnd</target>
        </trans-unit>
        <trans-unit id="597ad73fbf9aa40cebae5f999cfe7db4afecce4e" translate="yes" xml:space="preserve">
          <source>BitAnd::bitand</source>
          <target state="translated">BitAnd::bitand</target>
        </trans-unit>
        <trans-unit id="943b337ab11ab98e677d691725140875e5b353e9" translate="yes" xml:space="preserve">
          <source>BitAndAssign</source>
          <target state="translated">BitAndAssign</target>
        </trans-unit>
        <trans-unit id="f5e3873189453b3d2f6432bcad61a66bb4d9501b" translate="yes" xml:space="preserve">
          <source>BitAndAssign::bitand_assign</source>
          <target state="translated">BitAndAssign::bitand_assign</target>
        </trans-unit>
        <trans-unit id="f64578ede789cb16c75f551e17bc358c839da2a7" translate="yes" xml:space="preserve">
          <source>BitOr</source>
          <target state="translated">BitOr</target>
        </trans-unit>
        <trans-unit id="44191b5eea700acecf61cce1d97b9be216180188" translate="yes" xml:space="preserve">
          <source>BitOr::bitor</source>
          <target state="translated">BitOr::bitor</target>
        </trans-unit>
        <trans-unit id="960e956c7d9aabe97b11d326569299236d4948a9" translate="yes" xml:space="preserve">
          <source>BitOrAssign</source>
          <target state="translated">BitOrAssign</target>
        </trans-unit>
        <trans-unit id="3034c1fbe2a99f07e023c8c2cb9d42ee22ccc4c1" translate="yes" xml:space="preserve">
          <source>BitOrAssign::bitor_assign</source>
          <target state="translated">BitOrAssign::bitor_assign</target>
        </trans-unit>
        <trans-unit id="427e64f1c1cbca75038d127034792de35e048e3d" translate="yes" xml:space="preserve">
          <source>BitXor</source>
          <target state="translated">BitXor</target>
        </trans-unit>
        <trans-unit id="2e397bf0da401d643f9083e54c584225e131c7ca" translate="yes" xml:space="preserve">
          <source>BitXor::bitxor</source>
          <target state="translated">BitXor::bitxor</target>
        </trans-unit>
        <trans-unit id="6a826e6c5b73b200c07a57a2aec1b711ff40e1d4" translate="yes" xml:space="preserve">
          <source>BitXorAssign</source>
          <target state="translated">BitXorAssign</target>
        </trans-unit>
        <trans-unit id="cbbbcfd713c363f58df6976ea8f22e15d59645d6" translate="yes" xml:space="preserve">
          <source>BitXorAssign::bitxor_assign</source>
          <target state="translated">BitXorAssign::bitxor_assign</target>
        </trans-unit>
        <trans-unit id="77e08df74f0783fd374c97b42304776b3399af7d" translate="yes" xml:space="preserve">
          <source>Bitwise &quot;and&quot; with the current value.</source>
          <target state="translated">Побитовое &quot;и&quot; с текущим значением.</target>
        </trans-unit>
        <trans-unit id="2c404667875b6822ca47e4a6888c165e459b533c" translate="yes" xml:space="preserve">
          <source>Bitwise &quot;nand&quot; with the current value.</source>
          <target state="translated">Побитовое &quot;nand&quot; с текущим значением.</target>
        </trans-unit>
        <trans-unit id="1f35aa22f6cd34a5220faabf04cbbb20527ee643" translate="yes" xml:space="preserve">
          <source>Bitwise &quot;or&quot; with the current value.</source>
          <target state="translated">Побитовое &quot;или&quot; с текущим значением.</target>
        </trans-unit>
        <trans-unit id="5c076254fac7febb41ccccf46680d5e14a161fa4" translate="yes" xml:space="preserve">
          <source>Bitwise &quot;xor&quot; with the current value.</source>
          <target state="translated">Побитовое &quot;xor&quot; с текущим значением.</target>
        </trans-unit>
        <trans-unit id="17e80e5f71e9b85954b350f117d4dfeb3c5cf70a" translate="yes" xml:space="preserve">
          <source>Bitwise AND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9a6c94eeeaf50fe1cbac8c1cdc883b234d3b2b" translate="yes" xml:space="preserve">
          <source>Bitwise AND and assignment</source>
          <target state="translated">Прямо пропорционально И и задание</target>
        </trans-unit>
        <trans-unit id="714d6d47971ffbb15128b6a55a03723a5c596cc3" translate="yes" xml:space="preserve">
          <source>Bitwise And assignment</source>
          <target state="translated">Понятно.И задание.</target>
        </trans-unit>
        <trans-unit id="136c3a93310929e09124297eaf66ab9f3782d009" translate="yes" xml:space="preserve">
          <source>Bitwise NOT</source>
          <target state="translated">Побочно НЕ</target>
        </trans-unit>
        <trans-unit id="f4be0adcfa81c37e1e7bbf2e23630f30974d164f" translate="yes" xml:space="preserve">
          <source>Bitwise OR</source>
          <target state="translated">Побочно ИЛИ</target>
        </trans-unit>
        <trans-unit id="ea162d3eb732111137dc7e851592f946afbda822" translate="yes" xml:space="preserve">
          <source>Bitwise OR and assignment</source>
          <target state="translated">Побитовое ИЛИ и назначение</target>
        </trans-unit>
        <trans-unit id="efa8078cf56f653efb920477181cc2fe85068270" translate="yes" xml:space="preserve">
          <source>Bitwise Or assignment</source>
          <target state="translated">Прямо пропорционально или по назначению</target>
        </trans-unit>
        <trans-unit id="74269e9a4eb117ac43a93ed74bc3c8cd96fd4ff4" translate="yes" xml:space="preserve">
          <source>Bitwise XOR</source>
          <target state="translated">битумный XOR</target>
        </trans-unit>
        <trans-unit id="e3e1709ce290a67ec5f21e03a6b6317c9f304436" translate="yes" xml:space="preserve">
          <source>Bitwise XOR assignment</source>
          <target state="translated">битовое XOR-присвоение</target>
        </trans-unit>
        <trans-unit id="1f5eabb7a575f79f20f4d75b3fa1ac6c470a8bf6" translate="yes" xml:space="preserve">
          <source>Bitwise and Logical XOR</source>
          <target state="translated">Побитовый и логический XOR</target>
        </trans-unit>
        <trans-unit id="f5a1528826bb49fb0b14c31ab4934d10465ebdc5" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad214175503cf05c10c463c5f6a4d2dbb82dbf24" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Поразрядно и с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_and&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="52dda2454098469eb02e841cfd17da11a1a8b11c" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Поразрядно и с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_and&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c63ecd3d802b04a4e0e8dfab8248d912515dec0" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Поразрядно и с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_and&lt;/code&gt; путем передачи &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b6a21a8674eebce391a665fc4970562e774c483" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Поразрядно и с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_and&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="63f47ad2a1e6e1fb335c5dc45db81e8017584432" translate="yes" xml:space="preserve">
          <source>Bitwise and with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_and&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt;&lt;code&gt;AtomicBool::fetch_and&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Поразрядно и с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_and&lt;/code&gt; путем передачи &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_and&quot;&gt; &lt;code&gt;AtomicBool::fetch_and&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3ba80ac4bf1c4bbad0f4a7d6ddfd25841835e177" translate="yes" xml:space="preserve">
          <source>Bitwise exclusive OR</source>
          <target state="translated">Битвайз эксклюзив ИЛИ</target>
        </trans-unit>
        <trans-unit id="87474ce9659a0e1b133611bb2ae41c7ede6c0a5d" translate="yes" xml:space="preserve">
          <source>Bitwise exclusive OR and assignment</source>
          <target state="translated">Побитовое эксклюзивное ИЛИ и задание</target>
        </trans-unit>
        <trans-unit id="868d075a0dad8cd3d8fb9f9f26964659d2c6164a" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544da95df04807eeb86f0e070273fd4dd28cb7cf" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое nand с текущим значением, возвращающее предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типа &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; через метод &lt;code&gt;fetch_nand&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d773083e9bfa18a72e7f0b0ab1c138c37ef42288" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое nand с текущим значением, возвращающее предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типа &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; через метод &lt;code&gt;fetch_nand&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="203338bb702fd121bec1c0bf9d6a954aecd4347e" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое nand с текущим значением, возвращающее предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типа &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; через метод &lt;code&gt;fetch_nand&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6134a1fe2a25d4dbb615e6688200dbe8e85fe9f6" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое nand с текущим значением, возвращающее предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типа &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; через метод &lt;code&gt;fetch_nand&lt;/code&gt; путем передачи &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f8ddb011394cb17fb806f98da48b371ebbb0870e" translate="yes" xml:space="preserve">
          <source>Bitwise nand with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; type via the &lt;code&gt;fetch_nand&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt;&lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое nand с текущим значением, возвращающее предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типа &lt;code&gt;std::sync::atomic::AtomicBool&lt;/code&gt; через метод &lt;code&gt;fetch_nand&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_nand&quot;&gt; &lt;code&gt;AtomicBool::fetch_nand&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60a4df2d9448161e88049fa61b8cadfe600ad676" translate="yes" xml:space="preserve">
          <source>Bitwise or logical complement</source>
          <target state="translated">Побочное или логическое дополнение</target>
        </trans-unit>
        <trans-unit id="7b4a22d8edc7cc62ea1716050e10c7737c8c1e1f" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535640642d3aa1c0482deebda0463eaa8ec0186f" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое или с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_or&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5bd0c7ff8a606308243e5fe0283ace8408191438" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое или с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_or&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1d6bccdc0a09c0e78855aa36b6446bb0697edc37" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое или с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_or&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7457b18d65f2f07bafb68e32e88a446590597ffd" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое или с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_or&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a1e96dd5049ad694cd97688db2eb461734bf5e6" translate="yes" xml:space="preserve">
          <source>Bitwise or with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_or&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt;&lt;code&gt;AtomicBool::fetch_or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовое или с текущим значением, возвращая предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_or&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_or&quot;&gt; &lt;code&gt;AtomicBool::fetch_or&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="181decb693bb642be494fbe5c52383467e0c228c" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1d7bc97bda02349e1fee1efbf8d66b5e91fc88" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::AcqRel&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовый xor с текущим значением, возвращающий предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_xor&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::AcqRel&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3805cb63a3c1121fa142484c3b378fcb265aa95c" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Acquire&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовый xor с текущим значением, возвращающий предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_xor&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Acquire&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c5ce9f030ae16f9b2b741aab2abe9cb20f55a4eb" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Relaxed&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовый xor с текущим значением, возвращающий предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_xor&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Relaxed&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="15836191977a94f34a9eedc80d403307d7b6d4ed" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::Release&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовый xor с текущим значением, возвращающий предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_xor&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::Release&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ffe95ab6a76bb352e681774fae150809af8a6615" translate="yes" xml:space="preserve">
          <source>Bitwise xor with the current value, returning the previous value. The stabilized version of this intrinsic is available on the &lt;code&gt;std::sync::atomic&lt;/code&gt; types via the &lt;code&gt;fetch_xor&lt;/code&gt; method by passing &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt;&lt;code&gt;Ordering::SeqCst&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;order&lt;/code&gt;. For example, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt;&lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Побитовый xor с текущим значением, возвращающий предыдущее значение. Стабилизированная версия этой встроенной функции доступна для типов &lt;code&gt;std::sync::atomic&lt;/code&gt; через метод &lt;code&gt;fetch_xor&lt;/code&gt; , передав &lt;a href=&quot;../sync/atomic/enum.ordering&quot;&gt; &lt;code&gt;Ordering::SeqCst&lt;/code&gt; &lt;/a&gt; в качестве &lt;code&gt;order&lt;/code&gt; . Например, &lt;a href=&quot;../sync/atomic/struct.atomicbool#method.fetch_xor&quot;&gt; &lt;code&gt;AtomicBool::fetch_xor&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="88de087af89700f4c1004e0042a100c96cfad709" translate="yes" xml:space="preserve">
          <source>Blanket Implementations</source>
          <target state="translated">Охватывающие имплементации</target>
        </trans-unit>
        <trans-unit id="7ebf10e8c63d15dc33875a65edf15f33311b088f" translate="yes" xml:space="preserve">
          <source>Blanket implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62ea629ea517115ba87dea634c655ff0a340dd4" translate="yes" xml:space="preserve">
          <source>Blanket implementations appear in the documentation for the trait in the &amp;ldquo;Implementors&amp;rdquo; section.</source>
          <target state="translated">Общие реализации появляются в документации для трейта в разделе &amp;laquo;Разработчики&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="a06bbda0eab9ea08dbe94577274cbb7b473571d4" translate="yes" xml:space="preserve">
          <source>Block comment</source>
          <target state="translated">Блок-комментарий</target>
        </trans-unit>
        <trans-unit id="684096ae991ba36b90c5953d624c41ac5080dfdf" translate="yes" xml:space="preserve">
          <source>Block expression</source>
          <target state="translated">Блок-выражение</target>
        </trans-unit>
        <trans-unit id="8b403969dc1821977a4545f2dd574d603b1654fd" translate="yes" xml:space="preserve">
          <source>Block expressions</source>
          <target state="translated">Блочные выражения</target>
        </trans-unit>
        <trans-unit id="7805c38c778b7b8d59aebeff2b37473f6e635d86" translate="yes" xml:space="preserve">
          <source>Block expressions as elements of &lt;a href=&quot;array-expr&quot;&gt;array expressions&lt;/a&gt;, &lt;a href=&quot;tuple-expr&quot;&gt;tuple expressions&lt;/a&gt;, &lt;a href=&quot;call-expr&quot;&gt;call expressions&lt;/a&gt;, and tuple-style &lt;a href=&quot;struct-expr&quot;&gt;struct&lt;/a&gt; and &lt;a href=&quot;enum-variant-expr&quot;&gt;enum variant&lt;/a&gt; expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e069137567cf4c22756c0a181e015e273f3b097" translate="yes" xml:space="preserve">
          <source>Block expressions as elements of &lt;a href=&quot;array-expr&quot;&gt;array expressions&lt;/a&gt;, &lt;a href=&quot;tuple-expr&quot;&gt;tuple expressions&lt;/a&gt;, &lt;a href=&quot;call-expr&quot;&gt;call expressions&lt;/a&gt;, tuple-style &lt;a href=&quot;struct-expr&quot;&gt;struct&lt;/a&gt; and &lt;a href=&quot;enum-variant-expr&quot;&gt;enum variant&lt;/a&gt; expressions.</source>
          <target state="translated">Блок выражение в качестве элементов &lt;a href=&quot;array-expr&quot;&gt;выражений массива&lt;/a&gt; , &lt;a href=&quot;tuple-expr&quot;&gt;кортеж выражений&lt;/a&gt; , &lt;a href=&quot;call-expr&quot;&gt;выражений вызова&lt;/a&gt; , кортеж стиля &lt;a href=&quot;struct-expr&quot;&gt;структуры&lt;/a&gt; и &lt;a href=&quot;enum-variant-expr&quot;&gt;перечисление вариантных&lt;/a&gt; выражений.</target>
        </trans-unit>
        <trans-unit id="502282ec9c201c5e6057f4beae39b5897d6f29ed" translate="yes" xml:space="preserve">
          <source>Block expressions used as a &lt;a href=&quot;../statements&quot;&gt;statement&lt;/a&gt;.</source>
          <target state="translated">Блочные выражения, используемые как &lt;a href=&quot;../statements&quot;&gt;оператор&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d83a4ba900681b1d6bb448e76ababb6b95a22052" translate="yes" xml:space="preserve">
          <source>Blocks are always &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;value expressions&lt;/a&gt; and evaluate the last expression in value expression context. This can be used to force moving a value if really needed. For example, the following example fails on the call to &lt;code&gt;consume_self&lt;/code&gt; because the struct was moved out of &lt;code&gt;s&lt;/code&gt; in the block expression.</source>
          <target state="translated">Блоки всегда являются &lt;a href=&quot;../expressions#place-expressions-and-value-expressions&quot;&gt;выражениями значений&lt;/a&gt; и оценивают последнее выражение в контексте выражения значения. Это можно использовать для принудительного перемещения значения, если это действительно необходимо. Например, в следующем примере &lt;code&gt;consume_self&lt;/code&gt; сбой при вызове consumer_self, потому что структура была перемещена из &lt;code&gt;s&lt;/code&gt; в выражении блока.</target>
        </trans-unit>
        <trans-unit id="c18efbe7496c8880dfb8b33f1bb639d10ba9c80d" translate="yes" xml:space="preserve">
          <source>Blocks are written as &lt;code&gt;{&lt;/code&gt;, then any &lt;a href=&quot;../attributes&quot;&gt;inner attributes&lt;/a&gt;, then &lt;a href=&quot;../statements&quot;&gt;statements&lt;/a&gt;, then an optional expression, and finally a &lt;code&gt;}&lt;/code&gt;. Statements are usually required to be followed a semicolon, with two exceptions. Item declaration statements do not need to be followed by a semicolon. Expression statements usually require a following semicolon except if its outer expression is a flow control expression. Furthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.</source>
          <target state="translated">Блоки записываются как &lt;code&gt;{&lt;/code&gt; , затем любые &lt;a href=&quot;../attributes&quot;&gt;внутренние атрибуты&lt;/a&gt; , затем &lt;a href=&quot;../statements&quot;&gt;операторы&lt;/a&gt; , затем необязательное выражение и, наконец, a &lt;code&gt;}&lt;/code&gt; . Заявления обычно ставятся после точки с запятой, за двумя исключениями. В объявлениях элементов не обязательно ставить точку с запятой. Для операторов выражения обычно требуется следующая точка с запятой, за исключением случаев, когда его внешнее выражение является выражением управления потоком. Кроме того, между операторами разрешены дополнительные точки с запятой, но эти точки с запятой не влияют на семантику.</target>
        </trans-unit>
        <trans-unit id="ae067769ea09e9988dc3c94bd840ffd9a2112129" translate="yes" xml:space="preserve">
          <source>Blocks are written as &lt;code&gt;{&lt;/code&gt;, then any &lt;a href=&quot;../attributes&quot;&gt;inner attributes&lt;/a&gt;, then &lt;a href=&quot;../statements&quot;&gt;statements&lt;/a&gt;, then an optional expression, and finally a &lt;code&gt;}&lt;/code&gt;. Statements are usually required to be followed by a semicolon, with two exceptions. Item declaration statements do not need to be followed by a semicolon. Expression statements usually require a following semicolon except if its outer expression is a flow control expression. Furthermore, extra semicolons between statements are allowed, but these semicolons do not affect semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b5253f4cf51bfc8b7e410d8b0b217d0e9c0335" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until all threads have rendezvoused here.</source>
          <target state="translated">Блокирует текущий поток до тех пор,пока все потоки не встретились здесь.</target>
        </trans-unit>
        <trans-unit id="d45aaa4f52bf36a05dbf87c3a8418aac5e1ca210" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until this condition variable receives a notification and the provided condition is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa33f5cb6fe4954947bbb580e0c51b7b87a1d8c" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until this condition variable receives a notification and the required condition is met. Spurious wakeups are ignored and this function will only return once the condition has been met.</source>
          <target state="translated">Блокирует текущий поток до тех пор,пока эта переменная условия не получит уведомление и необходимое условие не будет выполнено.Поддельные пробуждения игнорируются,и эта функция вернется только после выполнения условия.</target>
        </trans-unit>
        <trans-unit id="80e976210b81b30997de305efb4640d505e6cf39" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until this condition variable receives a notification.</source>
          <target state="translated">Блокирует текущий поток до тех пор,пока данная переменная условия не получит уведомление.</target>
        </trans-unit>
        <trans-unit id="410a3ef0dd4f7761ff571ad2f23d0ad96832450b" translate="yes" xml:space="preserve">
          <source>Blocks unless or until the current thread's token is made available or the specified duration has been reached (may wake spuriously).</source>
          <target state="translated">Блокирует до тех пор,пока не станет доступен токен текущей нити или пока не будет достигнута указанная продолжительность (может пробудиться ложно).</target>
        </trans-unit>
        <trans-unit id="7e4f7a13eb5259dea6da862f685681bb73f6e91b" translate="yes" xml:space="preserve">
          <source>Blocks unless or until the current thread's token is made available.</source>
          <target state="translated">Блокирует до тех пор,пока не станет доступен токен текущей резьбы или пока он не станет доступен.</target>
        </trans-unit>
        <trans-unit id="e81a87a7fdc340ba3287800ef9018a00b1adc455" translate="yes" xml:space="preserve">
          <source>Blocks: if a block has type &lt;code&gt;U&lt;/code&gt;, then the last expression in the block (if it is not semicolon-terminated) is a coercion site to &lt;code&gt;U&lt;/code&gt;. This includes blocks which are part of control flow statements, such as &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;, if the block has a known type.</source>
          <target state="translated">Блоки: если блок имеет типа &lt;code&gt;U&lt;/code&gt; , то последнее выражение в блоке (если он не точка с запятой концевым) является принуждение сайта &lt;code&gt;U&lt;/code&gt; . Сюда входят блоки, которые являются частью операторов потока управления, например &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; , если блок имеет известный тип.</target>
        </trans-unit>
        <trans-unit id="104329f4432c8b8b5d3c19fc3d250dfe2ab027d2" translate="yes" xml:space="preserve">
          <source>Bodies of unsafe functions are effectively &lt;code&gt;unsafe&lt;/code&gt; blocks, so to perform other unsafe operations within an unsafe function, we don&amp;rsquo;t need to add another &lt;code&gt;unsafe&lt;/code&gt; block.</source>
          <target state="translated">Тела небезопасных функций фактически являются &lt;code&gt;unsafe&lt;/code&gt; блоками, поэтому для выполнения других небезопасных операций внутри небезопасной функции нам не нужно добавлять еще один &lt;code&gt;unsafe&lt;/code&gt; блок.</target>
        </trans-unit>
        <trans-unit id="c9a26dc7a812c76d486afec462ae9a205a68b3e6" translate="yes" xml:space="preserve">
          <source>Boolean literals</source>
          <target state="translated">булевские буквы</target>
        </trans-unit>
        <trans-unit id="49f29c844f200eead7503c6d10737135d242ba2b" translate="yes" xml:space="preserve">
          <source>Boolean type</source>
          <target state="translated">булевский тип</target>
        </trans-unit>
        <trans-unit id="cb4702d3f3cd69e09a0563d0dcdc4d54d0023693" translate="yes" xml:space="preserve">
          <source>Borrow</source>
          <target state="translated">Borrow</target>
        </trans-unit>
        <trans-unit id="1fd0a944ea8cfb257b2b56f1afcd67ff9e3b25e2" translate="yes" xml:space="preserve">
          <source>Borrow operators</source>
          <target state="translated">Заёмщики</target>
        </trans-unit>
        <trans-unit id="08ef91a49ea57c4babbbcf16cff803659fb46ac3" translate="yes" xml:space="preserve">
          <source>Borrow::borrow</source>
          <target state="translated">Borrow::borrow</target>
        </trans-unit>
        <trans-unit id="2928c5f6ce470ed45869ce9bc666a02f1b276c3c" translate="yes" xml:space="preserve">
          <source>BorrowError</source>
          <target state="translated">BorrowError</target>
        </trans-unit>
        <trans-unit id="cd83210bbc26f6a86f78acc2c5aab6cb300d7a3f" translate="yes" xml:space="preserve">
          <source>BorrowError::borrow</source>
          <target state="translated">BorrowError::borrow</target>
        </trans-unit>
        <trans-unit id="522f3d26a1b9c184b1451ca62d5ed845e00d0b54" translate="yes" xml:space="preserve">
          <source>BorrowError::borrow_mut</source>
          <target state="translated">BorrowError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="7a951e76d02cd0d1326baee884b3df884ef7505b" translate="yes" xml:space="preserve">
          <source>BorrowError::cause</source>
          <target state="translated">BorrowError::cause</target>
        </trans-unit>
        <trans-unit id="9346d595a8c0688d171353745aeb9cb098c34080" translate="yes" xml:space="preserve">
          <source>BorrowError::description</source>
          <target state="translated">BorrowError::description</target>
        </trans-unit>
        <trans-unit id="89396ee3db16dbcc29597b262afc46558ed2366f" translate="yes" xml:space="preserve">
          <source>BorrowError::fmt</source>
          <target state="translated">BorrowError::fmt</target>
        </trans-unit>
        <trans-unit id="f021a214bcd178a0ea344c71db12231f4f31c50f" translate="yes" xml:space="preserve">
          <source>BorrowError::from</source>
          <target state="translated">BorrowError::from</target>
        </trans-unit>
        <trans-unit id="886751874954c88f3e019db825f51742642c3fcc" translate="yes" xml:space="preserve">
          <source>BorrowError::into</source>
          <target state="translated">BorrowError::into</target>
        </trans-unit>
        <trans-unit id="26e12b28f77d9243f30385a8268af2b47555aa7c" translate="yes" xml:space="preserve">
          <source>BorrowError::source</source>
          <target state="translated">BorrowError::source</target>
        </trans-unit>
        <trans-unit id="13b09f10b5e2154e8e5ae8b9b7bc53371a685504" translate="yes" xml:space="preserve">
          <source>BorrowError::to_string</source>
          <target state="translated">BorrowError::to_string</target>
        </trans-unit>
        <trans-unit id="2ce8439dd5781fe13a435aac312be62b63c7c5be" translate="yes" xml:space="preserve">
          <source>BorrowError::try_from</source>
          <target state="translated">BorrowError::try_from</target>
        </trans-unit>
        <trans-unit id="433ecad73e66b8dc9a31fe37870bbe334a572245" translate="yes" xml:space="preserve">
          <source>BorrowError::try_into</source>
          <target state="translated">BorrowError::try_into</target>
        </trans-unit>
        <trans-unit id="65acd86f1a255edf5a9bf5a76b81126963ed5e13" translate="yes" xml:space="preserve">
          <source>BorrowError::type_id</source>
          <target state="translated">BorrowError::type_id</target>
        </trans-unit>
        <trans-unit id="7ecce6e07f46ad690e4097354d0bc6aaa0f99008" translate="yes" xml:space="preserve">
          <source>BorrowMut</source>
          <target state="translated">BorrowMut</target>
        </trans-unit>
        <trans-unit id="d9285d895ed643451254273bc8c4bbd62b0abca2" translate="yes" xml:space="preserve">
          <source>BorrowMut::borrow_mut</source>
          <target state="translated">BorrowMut::borrow_mut</target>
        </trans-unit>
        <trans-unit id="05ef9e71b85c91963a382e2cbdd7ebb51b1ef2c3" translate="yes" xml:space="preserve">
          <source>BorrowMutError</source>
          <target state="translated">BorrowMutError</target>
        </trans-unit>
        <trans-unit id="6c84f92cc03620eeb60a2a75a6198806e41c99cf" translate="yes" xml:space="preserve">
          <source>BorrowMutError::borrow</source>
          <target state="translated">BorrowMutError::borrow</target>
        </trans-unit>
        <trans-unit id="c9194e522b34f7f0397b113f83851e0a0750ebff" translate="yes" xml:space="preserve">
          <source>BorrowMutError::borrow_mut</source>
          <target state="translated">BorrowMutError::borrow_mut</target>
        </trans-unit>
        <trans-unit id="320189f255d75bf0531f1d4da80752757ad88765" translate="yes" xml:space="preserve">
          <source>BorrowMutError::cause</source>
          <target state="translated">BorrowMutError::cause</target>
        </trans-unit>
        <trans-unit id="5d91335b7a43a382a81f901fb2092637fc2b1b30" translate="yes" xml:space="preserve">
          <source>BorrowMutError::description</source>
          <target state="translated">BorrowMutError::description</target>
        </trans-unit>
        <trans-unit id="de7386f3e6ce0f0541da576e92b462815d327aa2" translate="yes" xml:space="preserve">
          <source>BorrowMutError::fmt</source>
          <target state="translated">BorrowMutError::fmt</target>
        </trans-unit>
        <trans-unit id="0eaaabb7614aee38df98b183695570760d2a3bd8" translate="yes" xml:space="preserve">
          <source>BorrowMutError::from</source>
          <target state="translated">BorrowMutError::from</target>
        </trans-unit>
        <trans-unit id="f361017eeaa59fd5af6e66dc8387dd7623505766" translate="yes" xml:space="preserve">
          <source>BorrowMutError::into</source>
          <target state="translated">BorrowMutError::into</target>
        </trans-unit>
        <trans-unit id="4c422d071ef6d2a11942aa38c90bd2712b395f0a" translate="yes" xml:space="preserve">
          <source>BorrowMutError::source</source>
          <target state="translated">BorrowMutError::source</target>
        </trans-unit>
        <trans-unit id="2eb0e23a66aa4d528bf24f44d0b10d6fbb428403" translate="yes" xml:space="preserve">
          <source>BorrowMutError::to_string</source>
          <target state="translated">BorrowMutError::to_string</target>
        </trans-unit>
        <trans-unit id="b02bd0326962794fede5f5e186f12a2fd926a13b" translate="yes" xml:space="preserve">
          <source>BorrowMutError::try_from</source>
          <target state="translated">BorrowMutError::try_from</target>
        </trans-unit>
        <trans-unit id="6719140c2e78bc9c851d093ca84a7d95a4fe42cf" translate="yes" xml:space="preserve">
          <source>BorrowMutError::try_into</source>
          <target state="translated">BorrowMutError::try_into</target>
        </trans-unit>
        <trans-unit id="aed34dec1357c0aa84876bb9c79b00511d803df2" translate="yes" xml:space="preserve">
          <source>BorrowMutError::type_id</source>
          <target state="translated">BorrowMutError::type_id</target>
        </trans-unit>
        <trans-unit id="5868e9faf108a7771c407ab907889934dd63b50a" translate="yes" xml:space="preserve">
          <source>Borrowed data.</source>
          <target state="translated">Заимствованные данные.</target>
        </trans-unit>
        <trans-unit id="c7098078c609573d3fe94c28cfeb29c10812c3db" translate="yes" xml:space="preserve">
          <source>Borrowed pointer type</source>
          <target state="translated">Заимствованный тип указателя</target>
        </trans-unit>
        <trans-unit id="74d965d163933b4d9c245330d676a9a3a774550a" translate="yes" xml:space="preserve">
          <source>Borrowed reference to an OS string (see &lt;a href=&quot;struct.osstring&quot;&gt;&lt;code&gt;OsString&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Заимствованная ссылка на строку ОС (см. &lt;a href=&quot;struct.osstring&quot;&gt; &lt;code&gt;OsString&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="885dff407470f8d8cfa69af65835344b4ec2492e" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it.</source>
          <target state="translated">Зарывает итератор,вместо того,чтобы потреблять его.</target>
        </trans-unit>
        <trans-unit id="e4b68387bd9a788e153fefb151f2e36c5cc3e492" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it. &lt;a href=&quot;../../../iter/trait.iterator#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Заимствует итератор, а не использует его. &lt;a href=&quot;../../../iter/trait.iterator#method.by_ref&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4c2a592fe9d3573696dcb4e01f0c58c8f29d9729" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it. &lt;a href=&quot;../../iter/trait.iterator#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Заимствует итератор, а не использует его. &lt;a href=&quot;../../iter/trait.iterator#method.by_ref&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc9f6098309a428e4660e57ac0d7a128a57eb4f3" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it. &lt;a href=&quot;../iter/trait.iterator#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Заимствует итератор, а не использует его. &lt;a href=&quot;../iter/trait.iterator#method.by_ref&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b4d7aa1610c7d0263c276944863186c7f5b54aca" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it. &lt;a href=&quot;iter/trait.iterator#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Заимствует итератор, а не использует его. &lt;a href=&quot;iter/trait.iterator#method.by_ref&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0448c3473f95cd23244ee44dd3147a10fd3dd487" translate="yes" xml:space="preserve">
          <source>Borrows an iterator, rather than consuming it. &lt;a href=&quot;trait.iterator#method.by_ref&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Заимствует итератор, а не использует его. &lt;a href=&quot;trait.iterator#method.by_ref&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f99b7e6b9280152eedd396f475e3d3c1511ee27c" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;book/ch17-02-trait-objects#using-trait-objects-that-allow-for-values-of-different-types&quot;&gt;&lt;code&gt;dyn Trait&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;book/ch10-02-traits#returning-types-that-implement-traits&quot;&gt;&lt;code&gt;impl Trait&lt;/code&gt;&lt;/a&gt; in return types have a an implicit &lt;code&gt;'static&lt;/code&gt; requirement, meaning that the value implementing them that is being returned has to be either a &lt;code&gt;'static&lt;/code&gt; borrow or an owned value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f521714f9167c57599a72f6be51da170e80a3dd" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;items/constant-items&quot;&gt;constant&lt;/a&gt; and &lt;a href=&quot;items/static-items&quot;&gt;static&lt;/a&gt; declarations of reference types have &lt;em&gt;implicit&lt;/em&gt;&lt;code&gt;'static&lt;/code&gt; lifetimes unless an explicit lifetime is specified. As such, the constant declarations involving &lt;code&gt;'static&lt;/code&gt; above may be written without the lifetimes.</source>
          <target state="translated">И &lt;a href=&quot;items/constant-items&quot;&gt;постоянные,&lt;/a&gt; и &lt;a href=&quot;items/static-items&quot;&gt;статические&lt;/a&gt; объявления ссылочных типов имеют &lt;em&gt;неявное &lt;/em&gt; &lt;code&gt;'static&lt;/code&gt; время жизни&amp;raquo;, если не указано явное время жизни. Таким образом, объявления констант, включающие &lt;code&gt;'static&lt;/code&gt; выше, могут быть написаны без времени жизни.</target>
        </trans-unit>
        <trans-unit id="05a5142bb4165da20e62a15a12a49d69f51e7d7c" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;struct.mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;es and &lt;a href=&quot;struct.rwlock&quot;&gt;&lt;code&gt;RwLock&lt;/code&gt;&lt;/a&gt;s are poisoned whenever a thread fails while the lock is held. The precise semantics for when a lock is poisoned is documented on each lock, but once a lock is poisoned then all future acquisitions will return this error.</source>
          <target state="translated">Оба &lt;a href=&quot;struct.mutex&quot;&gt; &lt;code&gt;Mutex&lt;/code&gt; &lt;/a&gt; эс и &lt;a href=&quot;struct.rwlock&quot;&gt; &lt;code&gt;RwLock&lt;/code&gt; &lt;/a&gt; s отравлены , когда поток не удается , пока блокировка удерживается. Точная семантика того, когда блокировка отравлена, задокументирована для каждой блокировки, но как только блокировка отравлена, все будущие приобретения будут возвращать эту ошибку.</target>
        </trans-unit>
        <trans-unit id="92f3e1242e71f216f2553ecade5c0b56c112c46f" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dst&lt;/code&gt; must be properly aligned.</source>
          <target state="translated">Оба &lt;code&gt;src&lt;/code&gt; и &lt;code&gt;dst&lt;/code&gt; должны быть правильно выровнены.</target>
        </trans-unit>
        <trans-unit id="c1a304706d4634a69f512f48a553ca6de0a57224" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for both reads and writes of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b58df899df91147ad1851a44f1534537b8baae" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for both reads and writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af274f82063aea319dd50db89daaff81dd41c5b" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes of &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes.</source>
          <target state="translated">И &lt;code&gt;x&lt;/code&gt; , и &lt;code&gt;y&lt;/code&gt; должны быть &lt;a href=&quot;index#safety&quot;&gt;допустимыми&lt;/a&gt; для чтения и записи &lt;code&gt;count * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6aa81faf4ff06762f89afa21d147f447e5913ea" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be &lt;a href=&quot;index#safety&quot;&gt;valid&lt;/a&gt; for reads and writes.</source>
          <target state="translated">И &lt;code&gt;x&lt;/code&gt; , и &lt;code&gt;y&lt;/code&gt; должны быть &lt;a href=&quot;index#safety&quot;&gt;допустимыми&lt;/a&gt; для чтения и записи.</target>
        </trans-unit>
        <trans-unit id="ab994fd6a56d4038a2b10fa7688bd17375033138" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; must be properly aligned.</source>
          <target state="translated">Оба &lt;code&gt;x&lt;/code&gt; и &lt;code&gt;y&lt;/code&gt; должны быть правильно выровнены.</target>
        </trans-unit>
        <trans-unit id="c79da800bdef51dcfa75d10a65ea136a827d95b9" translate="yes" xml:space="preserve">
          <source>Both absolute and relative paths are followed by one or more identifiers separated by double colons (&lt;code&gt;::&lt;/code&gt;).</source>
          <target state="translated">За абсолютным и относительным путями следует один или несколько идентификаторов, разделенных двойным двоеточием ( &lt;code&gt;::&lt;/code&gt; :) .</target>
        </trans-unit>
        <trans-unit id="c285e2e79ff8d2abdbcbfce35a32a0f639fd60af" translate="yes" xml:space="preserve">
          <source>Both are equivalent to:</source>
          <target state="translated">Оба эквивалентны:</target>
        </trans-unit>
        <trans-unit id="d969a72eda5767cc021898e028fbe0fc071270ae" translate="yes" xml:space="preserve">
          <source>Both attributes can be used on &lt;a href=&quot;../items/functions&quot;&gt;functions&lt;/a&gt;. When applied to a function in a &lt;a href=&quot;../items/traits&quot;&gt;trait&lt;/a&gt;, they apply only to that function when used as a default function for a trait implementation and not to all trait implementations. The attributes have no effect on a trait function without a body.</source>
          <target state="translated">Оба атрибута можно использовать в &lt;a href=&quot;../items/functions&quot;&gt;функциях&lt;/a&gt; . Когда они применяются к функции в &lt;a href=&quot;../items/traits&quot;&gt;признаке&lt;/a&gt; , они применяются только к этой функции при использовании в качестве функции по умолчанию для реализации признака, а не ко всем реализациям признака. Атрибуты не влияют на функцию трейта без тела.</target>
        </trans-unit>
        <trans-unit id="969434c27ab08daa9144a7ddff09f258b6b015fd" translate="yes" xml:space="preserve">
          <source>Both match arms must produce values of type &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u32.html&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;, but since &lt;code&gt;break&lt;/code&gt; never produces a value at all we know it can never produce a value which isn't a &lt;a href=&quot;https://doc.rust-lang.org/nightly/std/primitive.u32.html&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;. This illustrates another behaviour of the &lt;code&gt;!&lt;/code&gt; type - expressions with type &lt;code&gt;!&lt;/code&gt; will coerce into any other type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f415dc3d7d35015fcd0e7c895d9cc2c978758324" translate="yes" xml:space="preserve">
          <source>Both match arms must produce values of type &lt;a href=&quot;primitive.str&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;, but since &lt;code&gt;break&lt;/code&gt; never produces a value at all we know it can never produce a value which isn't a &lt;a href=&quot;primitive.str&quot;&gt;&lt;code&gt;u32&lt;/code&gt;&lt;/a&gt;. This illustrates another behaviour of the &lt;code&gt;!&lt;/code&gt; type - expressions with type &lt;code&gt;!&lt;/code&gt; will coerce into any other type.</source>
          <target state="translated">Оба &lt;a href=&quot;primitive.str&quot;&gt; &lt;code&gt;u32&lt;/code&gt; &lt;/a&gt; должны выдавать значения типа u32 , но, поскольку &lt;code&gt;break&lt;/code&gt; никогда не дает значения, мы знаем, что он никогда не может произвести значение, &lt;a href=&quot;primitive.str&quot;&gt; &lt;code&gt;u32&lt;/code&gt; &lt;/a&gt; от u32 . Это иллюстрирует другое поведение &lt;code&gt;!&lt;/code&gt; type - выражения с типом &lt;code&gt;!&lt;/code&gt; будет принуждать к любому другому типу.</target>
        </trans-unit>
        <trans-unit id="cc4e0abfff334b57590e92cdeed48cb0b5815f3f" translate="yes" xml:space="preserve">
          <source>Both of the following must be true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8047c2fba1b8345d0b2a7bfe41d16519cea0cd82" translate="yes" xml:space="preserve">
          <source>Both pointers must be &lt;em&gt;derived from&lt;/em&gt; a pointer to the same object. (See below for an example.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf778379c09be3c08a3e90c46c05409146c7bf5" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;DraftPost&lt;/code&gt; structs have a private &lt;code&gt;content&lt;/code&gt; field that stores the blog post text. The structs no longer have the &lt;code&gt;state&lt;/code&gt; field because we&amp;rsquo;re moving the encoding of the state to the types of the structs. The &lt;code&gt;Post&lt;/code&gt; struct will represent a published post, and it has a &lt;code&gt;content&lt;/code&gt; method that returns the &lt;code&gt;content&lt;/code&gt;.</source>
          <target state="translated">И в структурах &lt;code&gt;Post&lt;/code&gt; , и в &lt;code&gt;DraftPost&lt;/code&gt; есть личное поле &lt;code&gt;content&lt;/code&gt; котором хранится текст сообщения в блоге. У структур больше нет поля &lt;code&gt;state&lt;/code&gt; потому что мы перемещаем кодировку состояния в типы структур. Структура &lt;code&gt;Post&lt;/code&gt; будет представлять опубликованную запись и имеет метод &lt;code&gt;content&lt;/code&gt; который возвращает &lt;code&gt;content&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="15171a122c9ce22a8b1a51961d40b1161cecfb6b" translate="yes" xml:space="preserve">
          <source>Both the lower- and upper-bounds (&lt;code&gt;l&lt;/code&gt; and &lt;code&gt;u&lt;/code&gt; respectively) are provided, because an allocator based on size classes could misbehave if one attempts to deallocate a block without providing a correct value for its size (i.e., one within the range &lt;code&gt;[l, u]&lt;/code&gt;).</source>
          <target state="translated">Предоставляются как нижняя, так и верхняя границы ( &lt;code&gt;l&lt;/code&gt; и &lt;code&gt;u&lt;/code&gt; соответственно), потому что распределитель, основанный на классах размера, может вести себя неправильно, если кто-то пытается освободить блок, не предоставив правильного значения для его размера (т. Е. Одного в диапазоне &lt;code&gt;[l, u]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="98967fc7894aa4615d5bff073afe78f05a767908" translate="yes" xml:space="preserve">
          <source>Both the reading and the writing portions of the &lt;a href=&quot;struct.tcpstream&quot;&gt;&lt;code&gt;TcpStream&lt;/code&gt;&lt;/a&gt; should be shut down.</source>
          <target state="translated">Как чтение, так и запись &lt;a href=&quot;struct.tcpstream&quot;&gt; &lt;code&gt;TcpStream&lt;/code&gt; &lt;/a&gt; должны быть отключены.</target>
        </trans-unit>
        <trans-unit id="c7bb49751d5e5b9335e672e163e91914b0f06be3" translate="yes" xml:space="preserve">
          <source>Both the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as &lt;em&gt;last in, first out&lt;/em&gt;. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn&amp;rsquo;t work as well! Adding data is called &lt;em&gt;pushing onto the stack&lt;/em&gt;, and removing data is called &lt;em&gt;popping off the stack&lt;/em&gt;.</source>
          <target state="translated">И стек, и куча являются частями памяти, доступными вашему коду для использования во время выполнения, но они структурированы по-разному. Стек хранит значения в том порядке, в котором он их получает, и удаляет значения в обратном порядке. Это называется &amp;laquo; &lt;em&gt;последним пришел - первым ушел&amp;raquo;&lt;/em&gt; . Представьте себе стопку тарелок: когда вы добавляете больше тарелок, вы кладете их поверх стопки, а когда вам нужна тарелка, вы снимаете одну сверху. Добавление или удаление пластин посередине или снизу тоже не сработает! Добавление данных называется помещением &lt;em&gt;в стек&lt;/em&gt; , а удаление данных - извлечением &lt;em&gt;из стека&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0d50912827dc83752805291122efdab8614525af" translate="yes" xml:space="preserve">
          <source>Both the starting and other pointer must be either in bounds or one byte past the end of the same allocated object.</source>
          <target state="translated">Как стартовый,так и другой указатель должен быть либо в границах,либо в один байт мимо конца одного и того же выделенного объекта.</target>
        </trans-unit>
        <trans-unit id="d01b29b32d289e0c8b9a18df5a84772808d7bfc2" translate="yes" xml:space="preserve">
          <source>Both the starting and other pointer must be either in bounds or one byte past the end of the same allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72784f6c1c0665f0bf4dbcd1fd7585be3cfa702f" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of an allocated object. If either pointer is out of bounds or arithmetic overflow occurs then any further use of the returned value will result in undefined behavior.</source>
          <target state="translated">И начальный,и конечный указатель должны быть либо в границах,либо в один байт мимо конца выделенного объекта.Если либо указатель окажется вне границ,либо произойдет арифметическое переполнение,то любое дальнейшее использование возвращаемого значения приведет к неопределенному поведению.</target>
        </trans-unit>
        <trans-unit id="ab5604b532321bee04b244b342d737f8189eea86" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object.</source>
          <target state="translated">И начальный,и конечный указатель должны быть либо в границах,либо в один байт мимо конца одного и того же выделенного объекта.</target>
        </trans-unit>
        <trans-unit id="b2aa47636e98a60617bcdd3e67a5924dfb004f66" translate="yes" xml:space="preserve">
          <source>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fee1cf29e97c8fc0875ae5e9908b627fd1605d" translate="yes" xml:space="preserve">
          <source>Both types must have the same size. Neither the original, nor the result, may be an &lt;a href=&quot;https://doc.rust-lang.org/nomicon/what-unsafe-does.html&quot;&gt;invalid value&lt;/a&gt;.</source>
          <target state="translated">Оба типа должны иметь одинаковый размер. Ни исходное значение, ни результат не могут быть &lt;a href=&quot;https://doc.rust-lang.org/nomicon/what-unsafe-does.html&quot;&gt;недопустимыми&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2c346acf685cb1f6817015d7708b959e84444f26" translate="yes" xml:space="preserve">
          <source>Bound</source>
          <target state="translated">Bound</target>
        </trans-unit>
        <trans-unit id="6b7a8fef068d73e848dac8523afae549fc821d96" translate="yes" xml:space="preserve">
          <source>Bound::borrow</source>
          <target state="translated">Bound::borrow</target>
        </trans-unit>
        <trans-unit id="18bb2e890d75080b556aef676184c5919be5992a" translate="yes" xml:space="preserve">
          <source>Bound::borrow_mut</source>
          <target state="translated">Bound::borrow_mut</target>
        </trans-unit>
        <trans-unit id="377e882cd7fc9a872bb54ce900229dd706dfc18e" translate="yes" xml:space="preserve">
          <source>Bound::clone</source>
          <target state="translated">Bound::clone</target>
        </trans-unit>
        <trans-unit id="27441f23a3225df9857b23126eebcbeaa6dcfa57" translate="yes" xml:space="preserve">
          <source>Bound::clone_from</source>
          <target state="translated">Bound::clone_from</target>
        </trans-unit>
        <trans-unit id="d4f69fa455be1a2d7f74f09dcf28628a95d81806" translate="yes" xml:space="preserve">
          <source>Bound::clone_into</source>
          <target state="translated">Bound::clone_into</target>
        </trans-unit>
        <trans-unit id="252db2d859de80913734f1d7a97d46b455067071" translate="yes" xml:space="preserve">
          <source>Bound::cloned</source>
          <target state="translated">Bound::cloned</target>
        </trans-unit>
        <trans-unit id="46c76647f9ac933b457df321f87cbafee078c04b" translate="yes" xml:space="preserve">
          <source>Bound::eq</source>
          <target state="translated">Bound::eq</target>
        </trans-unit>
        <trans-unit id="109b368628394a6771e9026bb249cb9a770aa495" translate="yes" xml:space="preserve">
          <source>Bound::fmt</source>
          <target state="translated">Bound::fmt</target>
        </trans-unit>
        <trans-unit id="d2a47e1914c25c25b3e40fc39fb12d33547d7e82" translate="yes" xml:space="preserve">
          <source>Bound::from</source>
          <target state="translated">Bound::from</target>
        </trans-unit>
        <trans-unit id="ba919ff9d1df1744fb627fa7855b8f05cc2b77ed" translate="yes" xml:space="preserve">
          <source>Bound::hash</source>
          <target state="translated">Bound::hash</target>
        </trans-unit>
        <trans-unit id="5a473f87e1bb852dc398c279b415db545cd4b24e" translate="yes" xml:space="preserve">
          <source>Bound::hash_slice</source>
          <target state="translated">Bound::hash_slice</target>
        </trans-unit>
        <trans-unit id="54778a9e486243aa16573515109523bbf492d0d1" translate="yes" xml:space="preserve">
          <source>Bound::into</source>
          <target state="translated">Bound::into</target>
        </trans-unit>
        <trans-unit id="dedfd5e96791c9889a42b174f98bd419bce5e68f" translate="yes" xml:space="preserve">
          <source>Bound::ne</source>
          <target state="translated">Bound::ne</target>
        </trans-unit>
        <trans-unit id="ab242a98c5b08c66ef7dc6a8a0cb34b4b2961e44" translate="yes" xml:space="preserve">
          <source>Bound::to_owned</source>
          <target state="translated">Bound::to_owned</target>
        </trans-unit>
        <trans-unit id="9a69c2090e4312fb09b145cc8cc6bd670302d586" translate="yes" xml:space="preserve">
          <source>Bound::try_from</source>
          <target state="translated">Bound::try_from</target>
        </trans-unit>
        <trans-unit id="763620a7caa5bb18601b6f9a97d64ddf732e2329" translate="yes" xml:space="preserve">
          <source>Bound::try_into</source>
          <target state="translated">Bound::try_into</target>
        </trans-unit>
        <trans-unit id="f370fdaa52e7ec335a260ab2d97b2ca401271f1b" translate="yes" xml:space="preserve">
          <source>Bound::type_id</source>
          <target state="translated">Bound::type_id</target>
        </trans-unit>
        <trans-unit id="c5964dba854ca10e309192dd054d46319ddd1bae" translate="yes" xml:space="preserve">
          <source>Bounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.</source>
          <target state="translated">Связи-это ограничения по типу или признакам.Например,если ограничение установлено на аргумент,принимаемый функцией,то типы,передаваемые в эту функцию,должны соответствовать этому ограничению.</target>
        </trans-unit>
        <trans-unit id="ca6bc4b3d93728fa4fe8f6d78ae36c82b188ed72" translate="yes" xml:space="preserve">
          <source>Bounds on an item must be satisfied when using the item. When type checking and borrow checking a generic item, the bounds can be used to determine that a trait is implemented for a type. For example, given &lt;code&gt;Ty: Trait&lt;/code&gt;</source>
          <target state="translated">При использовании предмета должны быть соблюдены границы предмета. При проверке типа и проверке заимствования универсального элемента границы могут использоваться для определения того, что свойство реализовано для типа. Например, учитывая &lt;code&gt;Ty: Trait&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8db62bb4eebb31a7863a25492026fe5ef94ccb8d" translate="yes" xml:space="preserve">
          <source>Bounds that don't use the item's parameters or higher-ranked lifetimes are checked when the item is defined. It is an error for such a bound to be false.</source>
          <target state="translated">При определении элементов проверяются границы,не использующие параметры элемента или срок его службы вышестоящего уровня.Ошибкой является то,что такая привязка является ложной.</target>
        </trans-unit>
        <trans-unit id="4b064da5fe9593f583b40c21207783b175e1ebf2" translate="yes" xml:space="preserve">
          <source>Bounds written after declaring a &lt;a href=&quot;items/generics&quot;&gt;generic parameter&lt;/a&gt;: &lt;code&gt;fn f&amp;lt;A: Copy&amp;gt;() {}&lt;/code&gt; is the same as &lt;code&gt;fn f&amp;lt;A&amp;gt; where A: Copy () {}&lt;/code&gt;.</source>
          <target state="translated">Границы, записанные после объявления &lt;a href=&quot;items/generics&quot;&gt;универсального параметра&lt;/a&gt; : &lt;code&gt;fn f&amp;lt;A: Copy&amp;gt;() {}&lt;/code&gt; совпадает с &lt;code&gt;fn f&amp;lt;A&amp;gt; where A: Copy () {}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="239ca5767afac9641593464ce02bc454d6ac07a9" translate="yes" xml:space="preserve">
          <source>Box</source>
          <target state="translated">Box</target>
        </trans-unit>
        <trans-unit id="98f85596ae7b9b42504e10a1325d441abcd2486d" translate="yes" xml:space="preserve">
          <source>Box::all</source>
          <target state="translated">Box::all</target>
        </trans-unit>
        <trans-unit id="b639107f3271721c720775da7e802911f662b1b1" translate="yes" xml:space="preserve">
          <source>Box::any</source>
          <target state="translated">Box::any</target>
        </trans-unit>
        <trans-unit id="7c64d4849917073ddc48c9ebb00f360df4c9d7a4" translate="yes" xml:space="preserve">
          <source>Box::as_mut</source>
          <target state="translated">Box::as_mut</target>
        </trans-unit>
        <trans-unit id="6848e42541571d900c21f082d7585fb9168d4af7" translate="yes" xml:space="preserve">
          <source>Box::as_ref</source>
          <target state="translated">Box::as_ref</target>
        </trans-unit>
        <trans-unit id="6d56f42ac2a542e91194b361d21189ab4bd414b3" translate="yes" xml:space="preserve">
          <source>Box::borrow</source>
          <target state="translated">Box::borrow</target>
        </trans-unit>
        <trans-unit id="c99f2a149a7bc2bb960eba8eda77967bcecf0e8d" translate="yes" xml:space="preserve">
          <source>Box::borrow_mut</source>
          <target state="translated">Box::borrow_mut</target>
        </trans-unit>
        <trans-unit id="17f5075e3006cf9d119c727bb0e54e46c7eebaa6" translate="yes" xml:space="preserve">
          <source>Box::by_ref</source>
          <target state="translated">Box::by_ref</target>
        </trans-unit>
        <trans-unit id="61d60a2dfd95d2edba019ae7a505a5a8b6bad430" translate="yes" xml:space="preserve">
          <source>Box::bytes</source>
          <target state="translated">Box::bytes</target>
        </trans-unit>
        <trans-unit id="46fe884decfe5370e5c5fe2408915b53963bbffb" translate="yes" xml:space="preserve">
          <source>Box::call</source>
          <target state="translated">Box::call</target>
        </trans-unit>
        <trans-unit id="374988426e0ba138e6f583dbe0ce037ce343561c" translate="yes" xml:space="preserve">
          <source>Box::call_mut</source>
          <target state="translated">Box::call_mut</target>
        </trans-unit>
        <trans-unit id="221be09338afb54138c6ba69b6155871dd1f1604" translate="yes" xml:space="preserve">
          <source>Box::call_once</source>
          <target state="translated">Box::call_once</target>
        </trans-unit>
        <trans-unit id="212e1a3fbba385ceea9d2d039d37d904ae132bdd" translate="yes" xml:space="preserve">
          <source>Box::cause</source>
          <target state="translated">Box::cause</target>
        </trans-unit>
        <trans-unit id="1eb80191936cdac28f33c70fb0561232cbe1a0ce" translate="yes" xml:space="preserve">
          <source>Box::chain</source>
          <target state="translated">Box::chain</target>
        </trans-unit>
        <trans-unit id="9a890655e788211db3d21c5daf10e4fa6bedbf64" translate="yes" xml:space="preserve">
          <source>Box::clamp</source>
          <target state="translated">Box::clamp</target>
        </trans-unit>
        <trans-unit id="332b16f27092792c1ac7aba3b13ed4a2b647f865" translate="yes" xml:space="preserve">
          <source>Box::clone</source>
          <target state="translated">Box::clone</target>
        </trans-unit>
        <trans-unit id="0511825945441353f0c46a388bf94987ad6afb32" translate="yes" xml:space="preserve">
          <source>Box::clone_from</source>
          <target state="translated">Box::clone_from</target>
        </trans-unit>
        <trans-unit id="df3fac12d073e919e309cdc2ac6374e292180e78" translate="yes" xml:space="preserve">
          <source>Box::clone_into</source>
          <target state="translated">Box::clone_into</target>
        </trans-unit>
        <trans-unit id="6e363e6d0300a78f70074a806f60975e864accad" translate="yes" xml:space="preserve">
          <source>Box::cloned</source>
          <target state="translated">Box::cloned</target>
        </trans-unit>
        <trans-unit id="6c96b7576d584aee2f26ba1a32a3f04121f43e20" translate="yes" xml:space="preserve">
          <source>Box::cmp</source>
          <target state="translated">Box::cmp</target>
        </trans-unit>
        <trans-unit id="eeef833143ebcf0bc697aec2eefdc455624f9e0d" translate="yes" xml:space="preserve">
          <source>Box::collect</source>
          <target state="translated">Box::collect</target>
        </trans-unit>
        <trans-unit id="3d0f23afd6563472c47a167b48b8410fc559e492" translate="yes" xml:space="preserve">
          <source>Box::consume</source>
          <target state="translated">Box::consume</target>
        </trans-unit>
        <trans-unit id="44105eeec746662536d53672c3fb78098daee296" translate="yes" xml:space="preserve">
          <source>Box::copied</source>
          <target state="translated">Box::copied</target>
        </trans-unit>
        <trans-unit id="7ad1e95ce02daa64c1eaef18f06b9d8a7b568791" translate="yes" xml:space="preserve">
          <source>Box::count</source>
          <target state="translated">Box::count</target>
        </trans-unit>
        <trans-unit id="63ba5f4100a0be0c367e10e279bbb76a90044076" translate="yes" xml:space="preserve">
          <source>Box::cycle</source>
          <target state="translated">Box::cycle</target>
        </trans-unit>
        <trans-unit id="3100809b3c22540251ee4d32f870f0ab5d85f812" translate="yes" xml:space="preserve">
          <source>Box::default</source>
          <target state="translated">Box::default</target>
        </trans-unit>
        <trans-unit id="d2afb24813ad916ee3f3c876745772187d20e4b6" translate="yes" xml:space="preserve">
          <source>Box::deref</source>
          <target state="translated">Box::deref</target>
        </trans-unit>
        <trans-unit id="c38310d47b15e572611b4edc0c34463c00ac8351" translate="yes" xml:space="preserve">
          <source>Box::deref_mut</source>
          <target state="translated">Box::deref_mut</target>
        </trans-unit>
        <trans-unit id="4407e689e2360934dc281ec09f440aa221be5ae6" translate="yes" xml:space="preserve">
          <source>Box::description</source>
          <target state="translated">Box::description</target>
        </trans-unit>
        <trans-unit id="3166dd8642b65175a3bd7c7a52199fb715fe0594" translate="yes" xml:space="preserve">
          <source>Box::downcast</source>
          <target state="translated">Box::downcast</target>
        </trans-unit>
        <trans-unit id="daa5d80c59542cc920cd455f7d64b23c983bc609" translate="yes" xml:space="preserve">
          <source>Box::drop</source>
          <target state="translated">Box::drop</target>
        </trans-unit>
        <trans-unit id="1ce09716c9c1deae7f81c32dcf52fa616b12ca02" translate="yes" xml:space="preserve">
          <source>Box::enumerate</source>
          <target state="translated">Box::enumerate</target>
        </trans-unit>
        <trans-unit id="6cf03ef281bd05acc9e8788a558b01545153452e" translate="yes" xml:space="preserve">
          <source>Box::eq</source>
          <target state="translated">Box::eq</target>
        </trans-unit>
        <trans-unit id="4d3c429c86bcb5b6eb5c6bb097bc1d76c3b6d725" translate="yes" xml:space="preserve">
          <source>Box::fill_buf</source>
          <target state="translated">Box::fill_buf</target>
        </trans-unit>
        <trans-unit id="e0cfe090654acd2813dda2cadb04ff611bd40f8c" translate="yes" xml:space="preserve">
          <source>Box::filter</source>
          <target state="translated">Box::filter</target>
        </trans-unit>
        <trans-unit id="883f1c107d0f7a023ce3ace96cd45f32b3a24f77" translate="yes" xml:space="preserve">
          <source>Box::filter_map</source>
          <target state="translated">Box::filter_map</target>
        </trans-unit>
        <trans-unit id="8dba1be2d1b661c2a19ed51cf35f61687ebb811c" translate="yes" xml:space="preserve">
          <source>Box::find</source>
          <target state="translated">Box::find</target>
        </trans-unit>
        <trans-unit id="f1e4c766b00488cdb2e145cf4a27a074f88b9608" translate="yes" xml:space="preserve">
          <source>Box::find_map</source>
          <target state="translated">Box::find_map</target>
        </trans-unit>
        <trans-unit id="c5e9fddfd660282ca666cc6d744b46cd9a98281c" translate="yes" xml:space="preserve">
          <source>Box::finish</source>
          <target state="translated">Box::finish</target>
        </trans-unit>
        <trans-unit id="7698c71e0db1c73d3407ac25452c69edf519bc43" translate="yes" xml:space="preserve">
          <source>Box::flat_map</source>
          <target state="translated">Box::flat_map</target>
        </trans-unit>
        <trans-unit id="59e78e2254012fa056fb63d3af090ff23d9caa18" translate="yes" xml:space="preserve">
          <source>Box::flatten</source>
          <target state="translated">Box::flatten</target>
        </trans-unit>
        <trans-unit id="a6f7e58af02021c1636cef25915365d21c74a8a2" translate="yes" xml:space="preserve">
          <source>Box::flush</source>
          <target state="translated">Box::flush</target>
        </trans-unit>
        <trans-unit id="c6784df312e8ae8f90011ca22e8d36adb66a847a" translate="yes" xml:space="preserve">
          <source>Box::fmt</source>
          <target state="translated">Box::fmt</target>
        </trans-unit>
        <trans-unit id="fddbdef17bce1a8df59157b8fd1db42560d5f3ee" translate="yes" xml:space="preserve">
          <source>Box::fold</source>
          <target state="translated">Box::fold</target>
        </trans-unit>
        <trans-unit id="0a52ad01f142af48e3794dd7e59fc9bc3c7aa5d4" translate="yes" xml:space="preserve">
          <source>Box::for_each</source>
          <target state="translated">Box::for_each</target>
        </trans-unit>
        <trans-unit id="ed62e9121c4c62c0d5ce944ae44d5048012950db" translate="yes" xml:space="preserve">
          <source>Box::from</source>
          <target state="translated">Box::from</target>
        </trans-unit>
        <trans-unit id="91aab981ee80cfea73883f72f3f4a7df87328afd" translate="yes" xml:space="preserve">
          <source>Box::from_iter</source>
          <target state="translated">Box::from_iter</target>
        </trans-unit>
        <trans-unit id="99a56fd56f3eda7092816760238ede7c3fa6109f" translate="yes" xml:space="preserve">
          <source>Box::from_raw</source>
          <target state="translated">Box::from_raw</target>
        </trans-unit>
        <trans-unit id="10348aa1512f4c519b5613b846a2d8d6cfc47b88" translate="yes" xml:space="preserve">
          <source>Box::fuse</source>
          <target state="translated">Box::fuse</target>
        </trans-unit>
        <trans-unit id="530d37fa415cfa7c32ec4b55571698e45da6f959" translate="yes" xml:space="preserve">
          <source>Box::ge</source>
          <target state="translated">Box::ge</target>
        </trans-unit>
        <trans-unit id="4b72a4352f4fe91f47f069cdabc6e6ad95f13b44" translate="yes" xml:space="preserve">
          <source>Box::gt</source>
          <target state="translated">Box::gt</target>
        </trans-unit>
        <trans-unit id="16c6635f4bb22fdb3cea4763415a3155c214ed75" translate="yes" xml:space="preserve">
          <source>Box::hash</source>
          <target state="translated">Box::hash</target>
        </trans-unit>
        <trans-unit id="4c2a4b460b5d8fc9bdda66cc71714fbab479852a" translate="yes" xml:space="preserve">
          <source>Box::hash_slice</source>
          <target state="translated">Box::hash_slice</target>
        </trans-unit>
        <trans-unit id="343ef75a47ac9840e34ddf7a2da0d02c25787582" translate="yes" xml:space="preserve">
          <source>Box::initializer</source>
          <target state="translated">Box::initializer</target>
        </trans-unit>
        <trans-unit id="63ff0ff3838d20603f1ee804508fc3e64e303af2" translate="yes" xml:space="preserve">
          <source>Box::inspect</source>
          <target state="translated">Box::inspect</target>
        </trans-unit>
        <trans-unit id="85607e14d6de81746b803858c2540ca8c6b44bdb" translate="yes" xml:space="preserve">
          <source>Box::into</source>
          <target state="translated">Box::into</target>
        </trans-unit>
        <trans-unit id="f6b1af13daabe54761e736d7c80500ab6b9a1674" translate="yes" xml:space="preserve">
          <source>Box::into_iter</source>
          <target state="translated">Box::into_iter</target>
        </trans-unit>
        <trans-unit id="acbaecb1989ceef80f562e795d009f33656980ca" translate="yes" xml:space="preserve">
          <source>Box::into_pin</source>
          <target state="translated">Box::into_pin</target>
        </trans-unit>
        <trans-unit id="4842429f228dc17504f648e08a5f4f16e0e2062a" translate="yes" xml:space="preserve">
          <source>Box::into_raw</source>
          <target state="translated">Box::into_raw</target>
        </trans-unit>
        <trans-unit id="3f79bc4ecb72c296f646e58c0e20ae529797f781" translate="yes" xml:space="preserve">
          <source>Box::into_raw_non_null</source>
          <target state="translated">Box::into_raw_non_null</target>
        </trans-unit>
        <trans-unit id="3614510072231db3137f0d7aeb928f934f1c493d" translate="yes" xml:space="preserve">
          <source>Box::into_searcher</source>
          <target state="translated">Box::into_searcher</target>
        </trans-unit>
        <trans-unit id="2a8c6b52f333bc0cef92fffa23a800dc8255b691" translate="yes" xml:space="preserve">
          <source>Box::is_contained_in</source>
          <target state="translated">Box::is_contained_in</target>
        </trans-unit>
        <trans-unit id="6f2c2c3465fb0d25bc14172b3cdf438dd8946893" translate="yes" xml:space="preserve">
          <source>Box::is_empty</source>
          <target state="translated">Box::is_empty</target>
        </trans-unit>
        <trans-unit id="5ce85dca8b5589117e52c9eb46ed6631b186778a" translate="yes" xml:space="preserve">
          <source>Box::is_prefix_of</source>
          <target state="translated">Box::is_prefix_of</target>
        </trans-unit>
        <trans-unit id="b2d0a3538bcce4d4341580322555cb175af9e055" translate="yes" xml:space="preserve">
          <source>Box::is_sorted</source>
          <target state="translated">Box::is_sorted</target>
        </trans-unit>
        <trans-unit id="e8bc76461809058c2bf78bd03616e55f959cee1e" translate="yes" xml:space="preserve">
          <source>Box::is_sorted_by</source>
          <target state="translated">Box::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="0a88b0e90b45af6841206b9222039635add3e64f" translate="yes" xml:space="preserve">
          <source>Box::is_sorted_by_key</source>
          <target state="translated">Box::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="a72dc555efdbfa80a6b0d5c0b4f285602f05c856" translate="yes" xml:space="preserve">
          <source>Box::is_suffix_of</source>
          <target state="translated">Box::is_suffix_of</target>
        </trans-unit>
        <trans-unit id="e5727693a6c4cd3248cc40c999eef24607bc94c4" translate="yes" xml:space="preserve">
          <source>Box::last</source>
          <target state="translated">Box::last</target>
        </trans-unit>
        <trans-unit id="d894e0ab37daa6ed36ffcb6dc6f6ae6feafe4d29" translate="yes" xml:space="preserve">
          <source>Box::le</source>
          <target state="translated">Box::le</target>
        </trans-unit>
        <trans-unit id="bb0f72b159e3eafd1c056e394655cd200d490416" translate="yes" xml:space="preserve">
          <source>Box::leak</source>
          <target state="translated">Box::leak</target>
        </trans-unit>
        <trans-unit id="d677d8cc4fbf16dda95f7cc9f6f227fc9bf5458e" translate="yes" xml:space="preserve">
          <source>Box::len</source>
          <target state="translated">Box::len</target>
        </trans-unit>
        <trans-unit id="45bad95b762a8b026bd24017358dab88a4d6860e" translate="yes" xml:space="preserve">
          <source>Box::lines</source>
          <target state="translated">Box::lines</target>
        </trans-unit>
        <trans-unit id="72b25c9787fb55646beeb56c75cec4a153ebed4b" translate="yes" xml:space="preserve">
          <source>Box::lt</source>
          <target state="translated">Box::lt</target>
        </trans-unit>
        <trans-unit id="f2618ca0d7141ef535495cca35bfb5aa17708bc5" translate="yes" xml:space="preserve">
          <source>Box::map</source>
          <target state="translated">Box::map</target>
        </trans-unit>
        <trans-unit id="0bc41a6cab2d616f4a773cadf7a4a0287ec2ab6e" translate="yes" xml:space="preserve">
          <source>Box::max</source>
          <target state="translated">Box::max</target>
        </trans-unit>
        <trans-unit id="b5a62311ec4389dcea655a4a653acc770ae70df8" translate="yes" xml:space="preserve">
          <source>Box::max_by</source>
          <target state="translated">Box::max_by</target>
        </trans-unit>
        <trans-unit id="d0583d8c8a9191551534a635b566f913b18db0e0" translate="yes" xml:space="preserve">
          <source>Box::max_by_key</source>
          <target state="translated">Box::max_by_key</target>
        </trans-unit>
        <trans-unit id="5516ccddf3095fdf20b85d48497a76f13db9f3ab" translate="yes" xml:space="preserve">
          <source>Box::min</source>
          <target state="translated">Box::min</target>
        </trans-unit>
        <trans-unit id="57731c7eaf53528b46c94a8f5b04067977541b8e" translate="yes" xml:space="preserve">
          <source>Box::min_by</source>
          <target state="translated">Box::min_by</target>
        </trans-unit>
        <trans-unit id="5e6b2f4822e5c3d83d1318a14c7f1a3668b8120b" translate="yes" xml:space="preserve">
          <source>Box::min_by_key</source>
          <target state="translated">Box::min_by_key</target>
        </trans-unit>
        <trans-unit id="4df5d8b53f02075451eb004c4d2840a8ab301c06" translate="yes" xml:space="preserve">
          <source>Box::ne</source>
          <target state="translated">Box::ne</target>
        </trans-unit>
        <trans-unit id="1cb94d98d7b75dacb7e7e360644f9c7e2642829f" translate="yes" xml:space="preserve">
          <source>Box::new</source>
          <target state="translated">Box::new</target>
        </trans-unit>
        <trans-unit id="773581cb76ebc7fffb4b726bb7032d772321f18e" translate="yes" xml:space="preserve">
          <source>Box::next</source>
          <target state="translated">Box::next</target>
        </trans-unit>
        <trans-unit id="39a9d8e0d1ae73478ca6c4fc28570233d4f2d14d" translate="yes" xml:space="preserve">
          <source>Box::next_back</source>
          <target state="translated">Box::next_back</target>
        </trans-unit>
        <trans-unit id="ca8b4b8a75b7ab2fc6b63b0e3e0d3d3ac349fcbc" translate="yes" xml:space="preserve">
          <source>Box::nth</source>
          <target state="translated">Box::nth</target>
        </trans-unit>
        <trans-unit id="be1768702f171a2bca631f2dada36573e66e8f4c" translate="yes" xml:space="preserve">
          <source>Box::nth_back</source>
          <target state="translated">Box::nth_back</target>
        </trans-unit>
        <trans-unit id="33b92276543ebbb381ab00cfcca61326250e018b" translate="yes" xml:space="preserve">
          <source>Box::partial_cmp</source>
          <target state="translated">Box::partial_cmp</target>
        </trans-unit>
        <trans-unit id="5b3f3a9486d3aeafde57fba826b8530482d99578" translate="yes" xml:space="preserve">
          <source>Box::partition</source>
          <target state="translated">Box::partition</target>
        </trans-unit>
        <trans-unit id="25aab183ce8da5ce9aed71f8d43b59e269353ccd" translate="yes" xml:space="preserve">
          <source>Box::peekable</source>
          <target state="translated">Box::peekable</target>
        </trans-unit>
        <trans-unit id="7019628ce869ea317ecd4415266260c422269408" translate="yes" xml:space="preserve">
          <source>Box::pin</source>
          <target state="translated">Box::pin</target>
        </trans-unit>
        <trans-unit id="a64f04fc6eed8dea5f38347397b9cc737e345f6e" translate="yes" xml:space="preserve">
          <source>Box::poll</source>
          <target state="translated">Box::poll</target>
        </trans-unit>
        <trans-unit id="66f2f092e4949c0626ea7b22dc1d4ebcf3d8b35e" translate="yes" xml:space="preserve">
          <source>Box::position</source>
          <target state="translated">Box::position</target>
        </trans-unit>
        <trans-unit id="57081d934e6bca1d6c19e21b481ef88439c1ee29" translate="yes" xml:space="preserve">
          <source>Box::product</source>
          <target state="translated">Box::product</target>
        </trans-unit>
        <trans-unit id="ea6a41b1734b82596faa66a349b6d33c1eda5c8d" translate="yes" xml:space="preserve">
          <source>Box::read</source>
          <target state="translated">Box::read</target>
        </trans-unit>
        <trans-unit id="69cd72a2d8a6222800a925198c4edf4f739e25b2" translate="yes" xml:space="preserve">
          <source>Box::read_exact</source>
          <target state="translated">Box::read_exact</target>
        </trans-unit>
        <trans-unit id="59c4bf761ac478484370f960e729c2e181694f6b" translate="yes" xml:space="preserve">
          <source>Box::read_line</source>
          <target state="translated">Box::read_line</target>
        </trans-unit>
        <trans-unit id="225ac79c4a0e4ea7979de019038d83deebd58806" translate="yes" xml:space="preserve">
          <source>Box::read_to_end</source>
          <target state="translated">Box::read_to_end</target>
        </trans-unit>
        <trans-unit id="205cd1994c8e50578c7806614a239f1080cfe645" translate="yes" xml:space="preserve">
          <source>Box::read_to_string</source>
          <target state="translated">Box::read_to_string</target>
        </trans-unit>
        <trans-unit id="4c38943094e12187cb5a7db1759bb984e9e47e21" translate="yes" xml:space="preserve">
          <source>Box::read_until</source>
          <target state="translated">Box::read_until</target>
        </trans-unit>
        <trans-unit id="16e2f9a63976d963a9dadcb35033a821c2fd7839" translate="yes" xml:space="preserve">
          <source>Box::read_vectored</source>
          <target state="translated">Box::read_vectored</target>
        </trans-unit>
        <trans-unit id="be7cce92911dcff76ffbac8e0427e42b77defdcf" translate="yes" xml:space="preserve">
          <source>Box::resume</source>
          <target state="translated">Box::resume</target>
        </trans-unit>
        <trans-unit id="ba5e0dd2c587258859a5333578ab5d32da0e967a" translate="yes" xml:space="preserve">
          <source>Box::rev</source>
          <target state="translated">Box::rev</target>
        </trans-unit>
        <trans-unit id="481e8d3053595c86bd37ed7ee98159dd62804d15" translate="yes" xml:space="preserve">
          <source>Box::rfind</source>
          <target state="translated">Box::rfind</target>
        </trans-unit>
        <trans-unit id="54e7ee564e103a781122b5dcc4e5a645a42b47bd" translate="yes" xml:space="preserve">
          <source>Box::rfold</source>
          <target state="translated">Box::rfold</target>
        </trans-unit>
        <trans-unit id="3a8d8f3503f8d9c26ee23ddbea5e59c9d42ec95c" translate="yes" xml:space="preserve">
          <source>Box::rposition</source>
          <target state="translated">Box::rposition</target>
        </trans-unit>
        <trans-unit id="9ac7a2e2ffe1a294d38f090349bc38f76aec74fc" translate="yes" xml:space="preserve">
          <source>Box::scan</source>
          <target state="translated">Box::scan</target>
        </trans-unit>
        <trans-unit id="96b0a5023a90b5ef63be3a93fee81259968341fc" translate="yes" xml:space="preserve">
          <source>Box::seek</source>
          <target state="translated">Box::seek</target>
        </trans-unit>
        <trans-unit id="74f4a9a8cd31d8cee51b7c80648f8274c91f190c" translate="yes" xml:space="preserve">
          <source>Box::size_hint</source>
          <target state="translated">Box::size_hint</target>
        </trans-unit>
        <trans-unit id="d72a34eac3284a3b3a67c2581cf2c305c16367ed" translate="yes" xml:space="preserve">
          <source>Box::skip</source>
          <target state="translated">Box::skip</target>
        </trans-unit>
        <trans-unit id="ba0e0743f07d0bf5ee26ccb3b8bb456ca5c70a56" translate="yes" xml:space="preserve">
          <source>Box::skip_while</source>
          <target state="translated">Box::skip_while</target>
        </trans-unit>
        <trans-unit id="b4722d8b75a76a5d774eca59914b8e1f4a48cca6" translate="yes" xml:space="preserve">
          <source>Box::source</source>
          <target state="translated">Box::source</target>
        </trans-unit>
        <trans-unit id="6e2bc46519fb279c9f87dbfe9d290154772983d7" translate="yes" xml:space="preserve">
          <source>Box::split</source>
          <target state="translated">Box::split</target>
        </trans-unit>
        <trans-unit id="225ff95675533f61ead8e887a7efbf592dd8a88f" translate="yes" xml:space="preserve">
          <source>Box::step_by</source>
          <target state="translated">Box::step_by</target>
        </trans-unit>
        <trans-unit id="33aa1522a0173cb9f96a98672c2ecf9a96e294c9" translate="yes" xml:space="preserve">
          <source>Box::stream_len</source>
          <target state="translated">Box::stream_len</target>
        </trans-unit>
        <trans-unit id="8371eaea74f952c9831c9ca9261a497c2c38eef9" translate="yes" xml:space="preserve">
          <source>Box::stream_position</source>
          <target state="translated">Box::stream_position</target>
        </trans-unit>
        <trans-unit id="6a478949bfaddf9def7439c2f20d3359d537230c" translate="yes" xml:space="preserve">
          <source>Box::sum</source>
          <target state="translated">Box::sum</target>
        </trans-unit>
        <trans-unit id="3c2abaa93fcb6bfd17a1261c06f7ff566f12ec7e" translate="yes" xml:space="preserve">
          <source>Box::take</source>
          <target state="translated">Box::take</target>
        </trans-unit>
        <trans-unit id="83963a222e9c0ad7e60f41957e4013159d79d919" translate="yes" xml:space="preserve">
          <source>Box::take_while</source>
          <target state="translated">Box::take_while</target>
        </trans-unit>
        <trans-unit id="97ebc881815c3d1efcf8d9cc64f80490df826bb5" translate="yes" xml:space="preserve">
          <source>Box::to_owned</source>
          <target state="translated">Box::to_owned</target>
        </trans-unit>
        <trans-unit id="e508f4dc0d39c5987210d26aebaa3c2b4fce966c" translate="yes" xml:space="preserve">
          <source>Box::to_string</source>
          <target state="translated">Box::to_string</target>
        </trans-unit>
        <trans-unit id="34d3b2ca86670782e3636c41900e981e1db73054" translate="yes" xml:space="preserve">
          <source>Box::try_fold</source>
          <target state="translated">Box::try_fold</target>
        </trans-unit>
        <trans-unit id="4db298c22768eb776696c78cedb8c0ae9382c043" translate="yes" xml:space="preserve">
          <source>Box::try_for_each</source>
          <target state="translated">Box::try_for_each</target>
        </trans-unit>
        <trans-unit id="7ac87b84f99e12af4f84963a001dac862d957033" translate="yes" xml:space="preserve">
          <source>Box::try_from</source>
          <target state="translated">Box::try_from</target>
        </trans-unit>
        <trans-unit id="1190ad3065eb03769687c99bebeafccd52070617" translate="yes" xml:space="preserve">
          <source>Box::try_into</source>
          <target state="translated">Box::try_into</target>
        </trans-unit>
        <trans-unit id="190b967a40f310701525c6f92772eaa4b9d2bd91" translate="yes" xml:space="preserve">
          <source>Box::try_rfold</source>
          <target state="translated">Box::try_rfold</target>
        </trans-unit>
        <trans-unit id="e36c00466fad6adf381b361fedd323c0c0614989" translate="yes" xml:space="preserve">
          <source>Box::type_id</source>
          <target state="translated">Box::type_id</target>
        </trans-unit>
        <trans-unit id="04ea83b7ee01a03b421cd55b0df6992834e06afd" translate="yes" xml:space="preserve">
          <source>Box::unzip</source>
          <target state="translated">Box::unzip</target>
        </trans-unit>
        <trans-unit id="f72865295b955292507dfb70d5c51051dce354f9" translate="yes" xml:space="preserve">
          <source>Box::write</source>
          <target state="translated">Box::write</target>
        </trans-unit>
        <trans-unit id="a94c15e5cef594b7628ec618df5db798a9a567ec" translate="yes" xml:space="preserve">
          <source>Box::write_all</source>
          <target state="translated">Box::write_all</target>
        </trans-unit>
        <trans-unit id="d6fe1ce7bcfe4c269caf62f37074c2cd561a9897" translate="yes" xml:space="preserve">
          <source>Box::write_fmt</source>
          <target state="translated">Box::write_fmt</target>
        </trans-unit>
        <trans-unit id="56912c1495209bdea8854c66cc01bcdf4719afb0" translate="yes" xml:space="preserve">
          <source>Box::write_i128</source>
          <target state="translated">Box::write_i128</target>
        </trans-unit>
        <trans-unit id="d8e0c426cff723fe078d8e082d1a63933f6fa573" translate="yes" xml:space="preserve">
          <source>Box::write_i16</source>
          <target state="translated">Box::write_i16</target>
        </trans-unit>
        <trans-unit id="b68b48a66507e48ff6196e7556e4456e2d325cec" translate="yes" xml:space="preserve">
          <source>Box::write_i32</source>
          <target state="translated">Box::write_i32</target>
        </trans-unit>
        <trans-unit id="1e11f9892c3582d233d19c49b718f4eb56d5716f" translate="yes" xml:space="preserve">
          <source>Box::write_i64</source>
          <target state="translated">Box::write_i64</target>
        </trans-unit>
        <trans-unit id="2c4fbd1565526cebde3d781e65ee574490c3d5c4" translate="yes" xml:space="preserve">
          <source>Box::write_i8</source>
          <target state="translated">Box::write_i8</target>
        </trans-unit>
        <trans-unit id="be62022bb4b9817d94a1db6940ba1ef163a6bd39" translate="yes" xml:space="preserve">
          <source>Box::write_isize</source>
          <target state="translated">Box::write_isize</target>
        </trans-unit>
        <trans-unit id="2096d69d1a029ab28f266f5d6155819f93d05482" translate="yes" xml:space="preserve">
          <source>Box::write_u128</source>
          <target state="translated">Box::write_u128</target>
        </trans-unit>
        <trans-unit id="4bae89c6a373e3f8634ed54d131ceda19618fee5" translate="yes" xml:space="preserve">
          <source>Box::write_u16</source>
          <target state="translated">Box::write_u16</target>
        </trans-unit>
        <trans-unit id="71e4bac27351110d97b5fef0556d35917fbefb90" translate="yes" xml:space="preserve">
          <source>Box::write_u32</source>
          <target state="translated">Box::write_u32</target>
        </trans-unit>
        <trans-unit id="5abd678e805a3ff64f5524701426655948efcbfa" translate="yes" xml:space="preserve">
          <source>Box::write_u64</source>
          <target state="translated">Box::write_u64</target>
        </trans-unit>
        <trans-unit id="cf853a1d87ba811daf4dddf980c6bca3ee9f7551" translate="yes" xml:space="preserve">
          <source>Box::write_u8</source>
          <target state="translated">Box::write_u8</target>
        </trans-unit>
        <trans-unit id="570c96fc9a4d7852a96d0f8be3123d2af8641252" translate="yes" xml:space="preserve">
          <source>Box::write_usize</source>
          <target state="translated">Box::write_usize</target>
        </trans-unit>
        <trans-unit id="8c5f38686db9dd2e3d3338655cf9aa7453b4beec" translate="yes" xml:space="preserve">
          <source>Box::write_vectored</source>
          <target state="translated">Box::write_vectored</target>
        </trans-unit>
        <trans-unit id="58b9235154ec59648f9006bdb375b1a70414fdbc" translate="yes" xml:space="preserve">
          <source>Box::zip</source>
          <target state="translated">Box::zip</target>
        </trans-unit>
        <trans-unit id="1f1c95cf9dbdc5a10d4adddb4bd7ed9693d03299" translate="yes" xml:space="preserve">
          <source>Boxes don&amp;rsquo;t have performance overhead, other than storing their data on the heap instead of on the stack. But they don&amp;rsquo;t have many extra capabilities either. You&amp;rsquo;ll use them most often in these situations:</source>
          <target state="translated">Ящики не имеют накладных расходов на производительность, кроме хранения их данных в куче, а не в стеке. Но и у них не так много дополнительных возможностей. Вы будете использовать их чаще всего в следующих ситуациях:</target>
        </trans-unit>
        <trans-unit id="aae55045560cd96320cd77d712fdc24ac8ab83dc" translate="yes" xml:space="preserve">
          <source>Boxes provide only the indirection and heap allocation; they don&amp;rsquo;t have any other special capabilities, like those we&amp;rsquo;ll see with the other smart pointer types. They also don&amp;rsquo;t have any performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We&amp;rsquo;ll look at more use cases for boxes in Chapter 17, too.</source>
          <target state="translated">Ящики обеспечивают только косвенное обращение и размещение в куче; у них нет других специальных возможностей, подобных тем, которые мы увидим с другими типами интеллектуальных указателей. У них также нет никаких накладных расходов на производительность, связанных с этими специальными возможностями, поэтому они могут быть полезны в таких случаях, как список cons, когда косвенное обращение - единственная функция, которая нам нужна. Мы также рассмотрим другие варианты использования ящиков в главе 17.</target>
        </trans-unit>
        <trans-unit id="e42a1e70b4003a66462fd8b1b6f1d551425eedd6" translate="yes" xml:space="preserve">
          <source>Bracket</source>
          <target state="translated">Bracket</target>
        </trans-unit>
        <trans-unit id="acb83a12e9c51df23e23f19306bba0bcb0739442" translate="yes" xml:space="preserve">
          <source>Bracket punctuation is used in various parts of the grammar. An open bracket must always be paired with a close bracket. Brackets and the tokens within them are referred to as &quot;token trees&quot; in &lt;a href=&quot;macros-by-example&quot;&gt;macros&lt;/a&gt;. The three types of brackets are:</source>
          <target state="translated">Знаки пунктуации в скобках используются в различных частях грамматики. Открытая скобка всегда должна сочетаться с закрытой скобкой. Скобки и содержащиеся в них токены в &lt;a href=&quot;macros-by-example&quot;&gt;макросах&lt;/a&gt; называются &amp;laquo;деревьями токенов&amp;raquo; . Кронштейны трех типов:</target>
        </trans-unit>
        <trans-unit id="4a3ba41cdc1bb875b6f34a0f7504f134b4c82482" translate="yes" xml:space="preserve">
          <source>Breaking cycles with &lt;code&gt;Weak&lt;/code&gt;</source>
          <target state="translated">Разрыв циклов с помощью &lt;code&gt;Weak&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3dfd81f5eef2bda69d2fe0e0bb117502ea1d295" translate="yes" xml:space="preserve">
          <source>Breaking the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;pointer aliasing rules&lt;/a&gt; on accesses through raw pointers; a subset of the rules used by C.</source>
          <target state="translated">Нарушение &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;правил псевдонима указателя&lt;/a&gt; при доступе через необработанные указатели; подмножество правил, используемых C.</target>
        </trans-unit>
        <trans-unit id="f28978f6dd2c2e9099f5d850ca4e0176d065b5c7" translate="yes" xml:space="preserve">
          <source>Breaking the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#pointer-aliasing-rules&quot;&gt;pointer aliasing rules&lt;/a&gt;. &lt;code&gt;&amp;amp;mut T&lt;/code&gt; and &lt;code&gt;&amp;amp;T&lt;/code&gt; follow LLVM&amp;rsquo;s scoped &lt;a href=&quot;http://llvm.org/docs/LangRef.html#noalias&quot;&gt;noalias&lt;/a&gt; model, except if the &lt;code&gt;&amp;amp;T&lt;/code&gt; contains an &lt;a href=&quot;../std/cell/struct.unsafecell&quot;&gt;&lt;code&gt;UnsafeCell&amp;lt;U&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a02e7efbe4ea860996a720e8eb0268c763977ce" translate="yes" xml:space="preserve">
          <source>Bringing Paths into Scope with the &lt;code id=&quot;bringing-paths-into-scope-with-the-use-keyword&quot;&gt;use&lt;/code&gt; Keyword</source>
          <target state="translated">Введение путей в область видимости с &lt;code id=&quot;bringing-paths-into-scope-with-the-use-keyword&quot;&gt;use&lt;/code&gt; ключевого слова</target>
        </trans-unit>
        <trans-unit id="de407e52f1ad71f30175ca74f0b3e4d7802969ce" translate="yes" xml:space="preserve">
          <source>BufRead</source>
          <target state="translated">BufRead</target>
        </trans-unit>
        <trans-unit id="8b3cd1796576fb8d47f83bdc75d05d245fd7a0c8" translate="yes" xml:space="preserve">
          <source>BufRead::consume</source>
          <target state="translated">BufRead::consume</target>
        </trans-unit>
        <trans-unit id="4d60e62622ce6e5b2975982fde7166d4b99157d4" translate="yes" xml:space="preserve">
          <source>BufRead::fill_buf</source>
          <target state="translated">BufRead::fill_buf</target>
        </trans-unit>
        <trans-unit id="6454a42afc6b7f969ba1e20a170de8e3b928a4de" translate="yes" xml:space="preserve">
          <source>BufRead::lines</source>
          <target state="translated">BufRead::lines</target>
        </trans-unit>
        <trans-unit id="a22b5e33039f43dd9be253a22ba693c7821fc40d" translate="yes" xml:space="preserve">
          <source>BufRead::read_line</source>
          <target state="translated">BufRead::read_line</target>
        </trans-unit>
        <trans-unit id="138f0ef5dd5df09e1375e2687113f694b0a114b9" translate="yes" xml:space="preserve">
          <source>BufRead::read_until</source>
          <target state="translated">BufRead::read_until</target>
        </trans-unit>
        <trans-unit id="afb4634d5bb2cfba4eca69e0cbaed77038a91269" translate="yes" xml:space="preserve">
          <source>BufRead::split</source>
          <target state="translated">BufRead::split</target>
        </trans-unit>
        <trans-unit id="232d94f57b3293280b5ad36975b73111f3c6dfa0" translate="yes" xml:space="preserve">
          <source>BufReader</source>
          <target state="translated">BufReader</target>
        </trans-unit>
        <trans-unit id="cb39e958e39ef179b2597f4ef6e19c98ca4fc4d5" translate="yes" xml:space="preserve">
          <source>BufReader and BufWriter</source>
          <target state="translated">BufReader и BufWriter</target>
        </trans-unit>
        <trans-unit id="30498daca312f601d5026a239b4f9877ca9ee7af" translate="yes" xml:space="preserve">
          <source>BufReader::borrow</source>
          <target state="translated">BufReader::borrow</target>
        </trans-unit>
        <trans-unit id="46b667a41b30eb52818f00950425d6b07af15300" translate="yes" xml:space="preserve">
          <source>BufReader::borrow_mut</source>
          <target state="translated">BufReader::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6abdb3c76752714b4a06017a9219fa1f25214580" translate="yes" xml:space="preserve">
          <source>BufReader::buffer</source>
          <target state="translated">BufReader::buffer</target>
        </trans-unit>
        <trans-unit id="8a5b395c3f2044900bdcdf2f9ebf60ebd12d7819" translate="yes" xml:space="preserve">
          <source>BufReader::by_ref</source>
          <target state="translated">BufReader::by_ref</target>
        </trans-unit>
        <trans-unit id="6e8f568e8d439bbf991a8a007e038953a8f83b25" translate="yes" xml:space="preserve">
          <source>BufReader::bytes</source>
          <target state="translated">BufReader::bytes</target>
        </trans-unit>
        <trans-unit id="111bdc9e9c0fa8f11edaf0bb19720dadd4d441c2" translate="yes" xml:space="preserve">
          <source>BufReader::chain</source>
          <target state="translated">BufReader::chain</target>
        </trans-unit>
        <trans-unit id="698d6344bd09525535c43a69fdbd270c56fe0314" translate="yes" xml:space="preserve">
          <source>BufReader::consume</source>
          <target state="translated">BufReader::consume</target>
        </trans-unit>
        <trans-unit id="d753e03e42fea9b39b03754697893d50f45f25ac" translate="yes" xml:space="preserve">
          <source>BufReader::fill_buf</source>
          <target state="translated">BufReader::fill_buf</target>
        </trans-unit>
        <trans-unit id="4002c8a4271852b7c3dc4a005ad07b6218b6d9be" translate="yes" xml:space="preserve">
          <source>BufReader::fmt</source>
          <target state="translated">BufReader::fmt</target>
        </trans-unit>
        <trans-unit id="588a32e3d887d2adc2a42cbd852909e916738169" translate="yes" xml:space="preserve">
          <source>BufReader::from</source>
          <target state="translated">BufReader::from</target>
        </trans-unit>
        <trans-unit id="a565473360a69fedb15e98a54613f95fb3b56dfd" translate="yes" xml:space="preserve">
          <source>BufReader::get_mut</source>
          <target state="translated">BufReader::get_mut</target>
        </trans-unit>
        <trans-unit id="5594c6c6ae64375a5d272ff27f83db1d85077211" translate="yes" xml:space="preserve">
          <source>BufReader::get_ref</source>
          <target state="translated">BufReader::get_ref</target>
        </trans-unit>
        <trans-unit id="1e90aba1df228b628f7c7f3e2ab8e5bae2aa2919" translate="yes" xml:space="preserve">
          <source>BufReader::initializer</source>
          <target state="translated">BufReader::initializer</target>
        </trans-unit>
        <trans-unit id="9dfefe7d50b25c323182190a7738d15409036741" translate="yes" xml:space="preserve">
          <source>BufReader::into</source>
          <target state="translated">BufReader::into</target>
        </trans-unit>
        <trans-unit id="7af433e3bd4af270fc73a60a513c7c29c50b1691" translate="yes" xml:space="preserve">
          <source>BufReader::into_inner</source>
          <target state="translated">BufReader::into_inner</target>
        </trans-unit>
        <trans-unit id="015fca5819c404e186e79049e56378d531c3a868" translate="yes" xml:space="preserve">
          <source>BufReader::lines</source>
          <target state="translated">BufReader::lines</target>
        </trans-unit>
        <trans-unit id="261dc9dd5d56c7bd6b24e8c4987e0bacc36d731b" translate="yes" xml:space="preserve">
          <source>BufReader::new</source>
          <target state="translated">BufReader::new</target>
        </trans-unit>
        <trans-unit id="474a9aceabea88ca192dfa1182137bb4a5716f95" translate="yes" xml:space="preserve">
          <source>BufReader::read</source>
          <target state="translated">BufReader::read</target>
        </trans-unit>
        <trans-unit id="8fb011a69fd96b7a252fae27bab3618d9916ea15" translate="yes" xml:space="preserve">
          <source>BufReader::read_exact</source>
          <target state="translated">BufReader::read_exact</target>
        </trans-unit>
        <trans-unit id="043d1ca9b3f16093053e017427e6b59fce891b84" translate="yes" xml:space="preserve">
          <source>BufReader::read_line</source>
          <target state="translated">BufReader::read_line</target>
        </trans-unit>
        <trans-unit id="0cf3db2b85b3a36c4fe27bb356f920ec381e6a39" translate="yes" xml:space="preserve">
          <source>BufReader::read_to_end</source>
          <target state="translated">BufReader::read_to_end</target>
        </trans-unit>
        <trans-unit id="c014e4bd71ac8b1202507174a0590c77d72041f7" translate="yes" xml:space="preserve">
          <source>BufReader::read_to_string</source>
          <target state="translated">BufReader::read_to_string</target>
        </trans-unit>
        <trans-unit id="bf7f4de24e9cecff5fc9e9886289abdb93482e12" translate="yes" xml:space="preserve">
          <source>BufReader::read_until</source>
          <target state="translated">BufReader::read_until</target>
        </trans-unit>
        <trans-unit id="f1ac9fb503b6a30e103494d5ed7e213639e7e66d" translate="yes" xml:space="preserve">
          <source>BufReader::read_vectored</source>
          <target state="translated">BufReader::read_vectored</target>
        </trans-unit>
        <trans-unit id="b8518cd0ac9ab115738a223331f69d244e196ae1" translate="yes" xml:space="preserve">
          <source>BufReader::seek</source>
          <target state="translated">BufReader::seek</target>
        </trans-unit>
        <trans-unit id="99a5d03be61779b43803bbfee3dbfdce8a113d6d" translate="yes" xml:space="preserve">
          <source>BufReader::seek_relative</source>
          <target state="translated">BufReader::seek_relative</target>
        </trans-unit>
        <trans-unit id="43d93e963620260620093d161241006ece71cae8" translate="yes" xml:space="preserve">
          <source>BufReader::split</source>
          <target state="translated">BufReader::split</target>
        </trans-unit>
        <trans-unit id="e0ac1010e5c4fb0756b34d4592bffff3a410e86d" translate="yes" xml:space="preserve">
          <source>BufReader::stream_len</source>
          <target state="translated">BufReader::stream_len</target>
        </trans-unit>
        <trans-unit id="ca5bf56485cb95f3a60dbe8260139b54147feee2" translate="yes" xml:space="preserve">
          <source>BufReader::stream_position</source>
          <target state="translated">BufReader::stream_position</target>
        </trans-unit>
        <trans-unit id="70fc9c931ae2fc7872314fb275a9549018b33695" translate="yes" xml:space="preserve">
          <source>BufReader::take</source>
          <target state="translated">BufReader::take</target>
        </trans-unit>
        <trans-unit id="4d06dc939cd79e29aeb98db83609f9129bc27937" translate="yes" xml:space="preserve">
          <source>BufReader::try_from</source>
          <target state="translated">BufReader::try_from</target>
        </trans-unit>
        <trans-unit id="9cf0b40fa99c93bde7e68af3011e8e90b8e27ca1" translate="yes" xml:space="preserve">
          <source>BufReader::try_into</source>
          <target state="translated">BufReader::try_into</target>
        </trans-unit>
        <trans-unit id="c0358cb609681901098856ec216b94cf80a87fed" translate="yes" xml:space="preserve">
          <source>BufReader::type_id</source>
          <target state="translated">BufReader::type_id</target>
        </trans-unit>
        <trans-unit id="76a07371464a5bc5c675c8a1103f1bfcdcb90928" translate="yes" xml:space="preserve">
          <source>BufReader::with_capacity</source>
          <target state="translated">BufReader::with_capacity</target>
        </trans-unit>
        <trans-unit id="eb547b03e4fb9da19636fe86aa475ec275f26aea" translate="yes" xml:space="preserve">
          <source>BufWriter</source>
          <target state="translated">BufWriter</target>
        </trans-unit>
        <trans-unit id="c0fe0ec21d292209b8751b7b3bbc325ff8c3dfdd" translate="yes" xml:space="preserve">
          <source>BufWriter::borrow</source>
          <target state="translated">BufWriter::borrow</target>
        </trans-unit>
        <trans-unit id="2adb49e625ca6186b4c41c7d1737d0e2634f05fb" translate="yes" xml:space="preserve">
          <source>BufWriter::borrow_mut</source>
          <target state="translated">BufWriter::borrow_mut</target>
        </trans-unit>
        <trans-unit id="c3ac09907f785459d01129cbdf9eb5797fc53c72" translate="yes" xml:space="preserve">
          <source>BufWriter::buffer</source>
          <target state="translated">BufWriter::buffer</target>
        </trans-unit>
        <trans-unit id="a82155a82c33131bd98d9e864c9f25f36481894a" translate="yes" xml:space="preserve">
          <source>BufWriter::by_ref</source>
          <target state="translated">BufWriter::by_ref</target>
        </trans-unit>
        <trans-unit id="31f24b83e544c2b05b1fbfd0a2b99edbc784d128" translate="yes" xml:space="preserve">
          <source>BufWriter::drop</source>
          <target state="translated">BufWriter::drop</target>
        </trans-unit>
        <trans-unit id="70ed6813c46c4821d4c3ceb922ec9e68c5b46a68" translate="yes" xml:space="preserve">
          <source>BufWriter::flush</source>
          <target state="translated">BufWriter::flush</target>
        </trans-unit>
        <trans-unit id="e322ea4bb3c530e22344a65d6d425dbe30797f57" translate="yes" xml:space="preserve">
          <source>BufWriter::fmt</source>
          <target state="translated">BufWriter::fmt</target>
        </trans-unit>
        <trans-unit id="ae28528b6704424a2fa6c25aacbe28d13e5e2328" translate="yes" xml:space="preserve">
          <source>BufWriter::from</source>
          <target state="translated">BufWriter::from</target>
        </trans-unit>
        <trans-unit id="8f2da80a85c436ae0e170c960857685d65f2c7fa" translate="yes" xml:space="preserve">
          <source>BufWriter::get_mut</source>
          <target state="translated">BufWriter::get_mut</target>
        </trans-unit>
        <trans-unit id="ae8ffbf65314cc80e578ef8e21fd9216b111a598" translate="yes" xml:space="preserve">
          <source>BufWriter::get_ref</source>
          <target state="translated">BufWriter::get_ref</target>
        </trans-unit>
        <trans-unit id="c2bb0d2480650e2a139a3ac97642b7fac7000daf" translate="yes" xml:space="preserve">
          <source>BufWriter::into</source>
          <target state="translated">BufWriter::into</target>
        </trans-unit>
        <trans-unit id="a254cafb67eb39c14e0dd9b99733426aaca0cce1" translate="yes" xml:space="preserve">
          <source>BufWriter::into_inner</source>
          <target state="translated">BufWriter::into_inner</target>
        </trans-unit>
        <trans-unit id="0d50fa17068770487074b33532e6632cdc747a7d" translate="yes" xml:space="preserve">
          <source>BufWriter::new</source>
          <target state="translated">BufWriter::new</target>
        </trans-unit>
        <trans-unit id="8acb320f731050f7faa230a67adf20edf2a91802" translate="yes" xml:space="preserve">
          <source>BufWriter::seek</source>
          <target state="translated">BufWriter::seek</target>
        </trans-unit>
        <trans-unit id="0bc901a9b97e04338c295bff32fc59abb34658a0" translate="yes" xml:space="preserve">
          <source>BufWriter::stream_len</source>
          <target state="translated">BufWriter::stream_len</target>
        </trans-unit>
        <trans-unit id="aef24c4f9e117e8540e0bceb74c3c1079dca3c4a" translate="yes" xml:space="preserve">
          <source>BufWriter::stream_position</source>
          <target state="translated">BufWriter::stream_position</target>
        </trans-unit>
        <trans-unit id="c3a46f518f714d6be6bad831bd9935498f844ddb" translate="yes" xml:space="preserve">
          <source>BufWriter::try_from</source>
          <target state="translated">BufWriter::try_from</target>
        </trans-unit>
        <trans-unit id="d12f6fca054766123bb42142de217202212ff449" translate="yes" xml:space="preserve">
          <source>BufWriter::try_into</source>
          <target state="translated">BufWriter::try_into</target>
        </trans-unit>
        <trans-unit id="8af6d7318c0dbf54915f72f0993742b25781c289" translate="yes" xml:space="preserve">
          <source>BufWriter::type_id</source>
          <target state="translated">BufWriter::type_id</target>
        </trans-unit>
        <trans-unit id="7f3e3e6e70dd67251f7be13ef8952baade49da92" translate="yes" xml:space="preserve">
          <source>BufWriter::with_capacity</source>
          <target state="translated">BufWriter::with_capacity</target>
        </trans-unit>
        <trans-unit id="04509abb12d543e33b20e9a92d6a3a9ce8f7becf" translate="yes" xml:space="preserve">
          <source>BufWriter::write</source>
          <target state="translated">BufWriter::write</target>
        </trans-unit>
        <trans-unit id="7904c0be7d3caaf53c1b1cdb84256218cdaa0206" translate="yes" xml:space="preserve">
          <source>BufWriter::write_all</source>
          <target state="translated">BufWriter::write_all</target>
        </trans-unit>
        <trans-unit id="1656f0c433aa13f34246f1c4269f0f93dd7be7a2" translate="yes" xml:space="preserve">
          <source>BufWriter::write_fmt</source>
          <target state="translated">BufWriter::write_fmt</target>
        </trans-unit>
        <trans-unit id="34b5f10d3b6a9f9a1dbde260a02e2b2206afca57" translate="yes" xml:space="preserve">
          <source>BufWriter::write_vectored</source>
          <target state="translated">BufWriter::write_vectored</target>
        </trans-unit>
        <trans-unit id="930e02964f6bea5730ba5c65d98e4f502a26535a" translate="yes" xml:space="preserve">
          <source>Buffering behavior:</source>
          <target state="translated">Буферное поведение:</target>
        </trans-unit>
        <trans-unit id="c236b467cd75457e8973d308434bf8606946e8b7" translate="yes" xml:space="preserve">
          <source>Bugs that happen only in certain situations and are hard to reproduce and fix reliably</source>
          <target state="translated">Ошибки,которые случаются только в определенных ситуациях и которые трудно воспроизвести и надежно исправить.</target>
        </trans-unit>
        <trans-unit id="c123195418c1603314c7d0aac5cbca5fe90623f5" translate="yes" xml:space="preserve">
          <source>Build the thread with &lt;a href=&quot;struct.builder&quot;&gt;&lt;code&gt;Builder&lt;/code&gt;&lt;/a&gt; and pass the desired stack size to &lt;a href=&quot;struct.builder#method.stack_size&quot;&gt;&lt;code&gt;Builder::stack_size&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Создайте поток с помощью &lt;a href=&quot;struct.builder&quot;&gt; &lt;code&gt;Builder&lt;/code&gt; &lt;/a&gt; и передайте желаемый размер стека в &lt;a href=&quot;struct.builder#method.stack_size&quot;&gt; &lt;code&gt;Builder::stack_size&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="97ac06ac37241fed7f3a8298db93e9bbc2d242b6" translate="yes" xml:space="preserve">
          <source>BuildHasher</source>
          <target state="translated">BuildHasher</target>
        </trans-unit>
        <trans-unit id="aaba5ed0cc289313d5a04c86f6c4f1a124a0ff97" translate="yes" xml:space="preserve">
          <source>BuildHasher::build_hasher</source>
          <target state="translated">BuildHasher::build_hasher</target>
        </trans-unit>
        <trans-unit id="6972ec88ec81efc886ecfcc5774a514315adaba3" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault</source>
          <target state="translated">BuildHasherDefault</target>
        </trans-unit>
        <trans-unit id="3b3934e3550748f2a7b58e6593d8d16993a3f234" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::borrow</source>
          <target state="translated">BuildHasherDefault::borrow</target>
        </trans-unit>
        <trans-unit id="f55eee0b0d59698190e3d541df7887945783f03c" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::borrow_mut</source>
          <target state="translated">BuildHasherDefault::borrow_mut</target>
        </trans-unit>
        <trans-unit id="9a17d9b6eba5bdb1a3199b04f87f79fe486b4427" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::build_hasher</source>
          <target state="translated">BuildHasherDefault::build_hasher</target>
        </trans-unit>
        <trans-unit id="3378e7d2427ed05874269a577e08932c432618d4" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone</source>
          <target state="translated">BuildHasherDefault::clone</target>
        </trans-unit>
        <trans-unit id="010bd4789bebb3ef5a2996e2b1be4fdb5f283ea4" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone_from</source>
          <target state="translated">BuildHasherDefault::clone_from</target>
        </trans-unit>
        <trans-unit id="e746cdbc6b12a8b851323bb7c641b3af90edca43" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::clone_into</source>
          <target state="translated">BuildHasherDefault::clone_into</target>
        </trans-unit>
        <trans-unit id="52e1f05a4973d5628107a410168778a062f1bf48" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::default</source>
          <target state="translated">BuildHasherDefault::default</target>
        </trans-unit>
        <trans-unit id="805858a4f2f04c612c4359d30c11b771cbbf2670" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::eq</source>
          <target state="translated">BuildHasherDefault::eq</target>
        </trans-unit>
        <trans-unit id="a489341b69637e6985483361e2ba9bd4e930658e" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::fmt</source>
          <target state="translated">BuildHasherDefault::fmt</target>
        </trans-unit>
        <trans-unit id="7dc7ccadfebe0f90b3109993492f2510fdea1e97" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::from</source>
          <target state="translated">BuildHasherDefault::from</target>
        </trans-unit>
        <trans-unit id="b214b1f4540f86833e16b1674e570a06864bb810" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::into</source>
          <target state="translated">BuildHasherDefault::into</target>
        </trans-unit>
        <trans-unit id="3124ec3e2cb6d3f2d095ae07854f9d9f327708f0" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::ne</source>
          <target state="translated">BuildHasherDefault::ne</target>
        </trans-unit>
        <trans-unit id="3e47f2f0c29a4813a680f3068d5450f9f31a9f4d" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::to_owned</source>
          <target state="translated">BuildHasherDefault::to_owned</target>
        </trans-unit>
        <trans-unit id="36b39c1513469044cd761bd64a80f0c4a9902c0a" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::try_from</source>
          <target state="translated">BuildHasherDefault::try_from</target>
        </trans-unit>
        <trans-unit id="6b3bf2bc5c2ef00504b85f45d8356c19b7018273" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::try_into</source>
          <target state="translated">BuildHasherDefault::try_into</target>
        </trans-unit>
        <trans-unit id="c27d762f5384033048f5c3b6349a62aa6d74a8ff" translate="yes" xml:space="preserve">
          <source>BuildHasherDefault::type_id</source>
          <target state="translated">BuildHasherDefault::type_id</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="004d20f8006198411988eea17651cdf655cc4482" translate="yes" xml:space="preserve">
          <source>Builder methods are provided to change these defaults and otherwise configure the process.</source>
          <target state="translated">Для изменения этих настроек по умолчанию и другой конфигурации процесса предусмотрены методы конструктора.</target>
        </trans-unit>
        <trans-unit id="e817e9752d05edc9cdf54971d106867fe037888c" translate="yes" xml:space="preserve">
          <source>Builder::borrow</source>
          <target state="translated">Builder::borrow</target>
        </trans-unit>
        <trans-unit id="94bb1918ddf68bff15586c79a231491744cc5934" translate="yes" xml:space="preserve">
          <source>Builder::borrow_mut</source>
          <target state="translated">Builder::borrow_mut</target>
        </trans-unit>
        <trans-unit id="f7d73832b38ead1d7c82f9bab9bcef56bfdd3661" translate="yes" xml:space="preserve">
          <source>Builder::fmt</source>
          <target state="translated">Builder::fmt</target>
        </trans-unit>
        <trans-unit id="e7b6a7ffdb6a96182506cdb6f845b1b5f8083113" translate="yes" xml:space="preserve">
          <source>Builder::from</source>
          <target state="translated">Builder::from</target>
        </trans-unit>
        <trans-unit id="c646de2596ac054c72581071ffd5afa499f6b38e" translate="yes" xml:space="preserve">
          <source>Builder::into</source>
          <target state="translated">Builder::into</target>
        </trans-unit>
        <trans-unit id="25158ae2faf4770ff3631697763e4f649748735c" translate="yes" xml:space="preserve">
          <source>Builder::name</source>
          <target state="translated">Builder::name</target>
        </trans-unit>
        <trans-unit id="a2fdc90cb0342f15602e461493244bbda8d11380" translate="yes" xml:space="preserve">
          <source>Builder::new</source>
          <target state="translated">Builder::new</target>
        </trans-unit>
        <trans-unit id="a5c0502ee99c0af55e1f1a9757c75ceb61f0e365" translate="yes" xml:space="preserve">
          <source>Builder::spawn</source>
          <target state="translated">Builder::spawn</target>
        </trans-unit>
        <trans-unit id="d28e4127e494164e81f16f028a028d507078db82" translate="yes" xml:space="preserve">
          <source>Builder::spawn_unchecked</source>
          <target state="translated">Builder::spawn_unchecked</target>
        </trans-unit>
        <trans-unit id="79550b63f469160e0886e9b4b6fb46be05f50a29" translate="yes" xml:space="preserve">
          <source>Builder::stack_size</source>
          <target state="translated">Builder::stack_size</target>
        </trans-unit>
        <trans-unit id="96b55ab18feea8a44f0d0d096d39f3af52a2e131" translate="yes" xml:space="preserve">
          <source>Builder::try_from</source>
          <target state="translated">Builder::try_from</target>
        </trans-unit>
        <trans-unit id="77877ce5fde9f3242e4b6af9ede23afdcb23f7db" translate="yes" xml:space="preserve">
          <source>Builder::try_into</source>
          <target state="translated">Builder::try_into</target>
        </trans-unit>
        <trans-unit id="6247790fc07eec46462f144d1ed4dedc1cb780eb" translate="yes" xml:space="preserve">
          <source>Builder::type_id</source>
          <target state="translated">Builder::type_id</target>
        </trans-unit>
        <trans-unit id="3bf882813c900c304e2632ba4dffda0948193670" translate="yes" xml:space="preserve">
          <source>Building a Single-Threaded Web Server</source>
          <target state="translated">Создание однопоточного веб-сервера</target>
        </trans-unit>
        <trans-unit id="253443e211e899460868732743aa41ea5e5f944a" translate="yes" xml:space="preserve">
          <source>Building and Running a Cargo Project</source>
          <target state="translated">Строительство и управление проектом по перевозке грузов</target>
        </trans-unit>
        <trans-unit id="1916501f700c410fd7bea37cffb5b95a293dc381" translate="yes" xml:space="preserve">
          <source>Building for Release</source>
          <target state="translated">Здание для сдачи в аренду</target>
        </trans-unit>
        <trans-unit id="0ad2d2fb6e92d2b6c89500bfdd36e70bf53d31d2" translate="yes" xml:space="preserve">
          <source>Building the &lt;code id=&quot;building-the-threadpool-struct-using-compiler-driven-development&quot;&gt;ThreadPool&lt;/code&gt; Struct Using Compiler Driven Development</source>
          <target state="translated">Создание структуры &lt;code id=&quot;building-the-threadpool-struct-using-compiler-driven-development&quot;&gt;ThreadPool&lt;/code&gt; с использованием разработки, управляемой компилятором</target>
        </trans-unit>
        <trans-unit id="20da59d3c16c7bbc43ecdc04a9ed654b4ef329d2" translate="yes" xml:space="preserve">
          <source>Built in &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;negation&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;arithmetic, logical&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;comparison&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean&lt;/a&gt; operators used on integer and floating point types, &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="translated">Встроенные операторы &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;отрицания&lt;/a&gt; , &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;арифметические, логические&lt;/a&gt; , &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;сравнения&lt;/a&gt; или &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;ленивые логические&lt;/a&gt; операторы, используемые для целочисленных типов и типов с плавающей запятой, &lt;code&gt;bool&lt;/code&gt; и &lt;code&gt;char&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="89e36b16f75fb9635eac3a25e8d8d0058e587b9c" translate="yes" xml:space="preserve">
          <source>Built-in &lt;a href=&quot;expressions/operator-expr#negation-operators&quot;&gt;negation&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;arithmetic&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#arithmetic-and-logical-binary-operators&quot;&gt;logical&lt;/a&gt;, &lt;a href=&quot;expressions/operator-expr#comparison-operators&quot;&gt;comparison&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#lazy-boolean-operators&quot;&gt;lazy boolean&lt;/a&gt; operators used on integer and floating point types, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;char&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0f66ac77e682a233d8ddb635dd00b67a90ab76" translate="yes" xml:space="preserve">
          <source>Built-in attributes</source>
          <target state="translated">Встроенные атрибуты</target>
        </trans-unit>
        <trans-unit id="1dac87263c85b5a8f82799db9805041e3360af6d" translate="yes" xml:space="preserve">
          <source>Built-in attributes index</source>
          <target state="translated">Встроенный индекс атрибутов</target>
        </trans-unit>
        <trans-unit id="3b55724056edf0c168a344b916c46cc4f550e2f6" translate="yes" xml:space="preserve">
          <source>Built-in types are tightly integrated into the language, in nontrivial ways that are not possible to emulate in user-defined types. User-defined types have limited capabilities.</source>
          <target state="translated">Встроенные типы плотно интегрированы в язык,нетривиальными способами,которые невозможно эмулировать пользовательскими типами.Пользовательские типы имеют ограниченные возможности.</target>
        </trans-unit>
        <trans-unit id="6c6bb0e181beb9458279ac502a39fa01da91b8fe" translate="yes" xml:space="preserve">
          <source>But &lt;code&gt;drain_filter&lt;/code&gt; is easier to use. &lt;code&gt;drain_filter&lt;/code&gt; is also more efficient, because it can backshift the elements of the array in bulk.</source>
          <target state="translated">Но &lt;code&gt;drain_filter&lt;/code&gt; проще в использовании. &lt;code&gt;drain_filter&lt;/code&gt; также более эффективен, потому что он может перемещать элементы массива в обратном направлении.</target>
        </trans-unit>
        <trans-unit id="ab56537680f4a94c82e8bdfe87270e033203a404" translate="yes" xml:space="preserve">
          <source>But Rust isn&amp;rsquo;t limited to low-level systems programming. It&amp;rsquo;s expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write &amp;mdash; you&amp;rsquo;ll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.</source>
          <target state="translated">Но Rust не ограничивается системным программированием низкого уровня. Он достаточно выразителен и эргономичен, чтобы делать приложения CLI, веб-серверы и многие другие типы кода довольно приятными для написания - простые примеры того и другого вы найдете позже в книге. Работа с Rust позволяет вам развивать навыки, которые переносятся из одного домена в другой; вы можете изучить Rust, написав веб-приложение, а затем применить те же навыки для нацеливания на свой Raspberry Pi.</target>
        </trans-unit>
        <trans-unit id="c9bc5d1aa2362cf2e31f1ee01e7de1ef4e0a2d19" translate="yes" xml:space="preserve">
          <source>But again, the compiler gives us a helpful note:</source>
          <target state="translated">Но опять же,компилятор дает нам полезную заметку:</target>
        </trans-unit>
        <trans-unit id="b5737faee592fa19b426fe0f0898f071a967af3e" translate="yes" xml:space="preserve">
          <source>But are the two implementations truly equivalent? The intuitive assumption might be that the more low-level loop will be faster. Let&amp;rsquo;s talk about performance.</source>
          <target state="translated">Но действительно ли эти две реализации эквивалентны? Интуитивное предположение может заключаться в том, что более низкоуровневый цикл будет быстрее. Поговорим о производительности.</target>
        </trans-unit>
        <trans-unit id="d5233374bc70817ae86cada9a53675c9bf92e0c7" translate="yes" xml:space="preserve">
          <source>But be sure to remember that valid Unicode scalar values may be made up of more than 1 byte.</source>
          <target state="translated">Но помните,что действительные значения скаляра в Юникоде могут состоять более чем из 1 байта.</target>
        </trans-unit>
        <trans-unit id="0f72ae39afec7a59586e27c05c7b3e5e6adecf93" translate="yes" xml:space="preserve">
          <source>But before we get started, we should mention one detail: the method we&amp;rsquo;ll use won&amp;rsquo;t be the best way to build a web server with Rust. A number of production-ready crates are available on &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; that provide more complete web server and thread pool implementations than we&amp;rsquo;ll build.</source>
          <target state="translated">Но прежде чем мы начнем, мы должны упомянуть одну деталь: метод, который мы будем использовать, не будет лучшим способом создания веб-сервера с Rust. На &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; доступно несколько готовых к эксплуатации ящиков, которые предоставляют более полные реализации веб-сервера и пула потоков, чем мы построим.</target>
        </trans-unit>
        <trans-unit id="2b053f01b33d2a55c1c75c2c507abf7135d9a246" translate="yes" xml:space="preserve">
          <source>But by default, Cargo will only look for versions greater than &lt;code&gt;0.3.0&lt;/code&gt; and less than &lt;code&gt;0.4.0&lt;/code&gt;. If the &lt;code&gt;rand&lt;/code&gt; crate has released two new versions, &lt;code&gt;0.3.15&lt;/code&gt; and &lt;code&gt;0.4.0&lt;/code&gt;, you would see the following if you ran &lt;code&gt;cargo update&lt;/code&gt;:</source>
          <target state="translated">Но по умолчанию Cargo будет искать только версии выше &lt;code&gt;0.3.0&lt;/code&gt; и ниже &lt;code&gt;0.4.0&lt;/code&gt; . Если для &lt;code&gt;rand&lt;/code&gt; crate выпущены две новые версии, &lt;code&gt;0.3.15&lt;/code&gt; и &lt;code&gt;0.4.0&lt;/code&gt; , вы увидите следующее, если запустите Cargo &lt;code&gt;cargo update&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="041215ad4156f8d52d141c6b1d6e0db864c4a8a2" translate="yes" xml:space="preserve">
          <source>But by default, Cargo will only look for versions greater than &lt;code&gt;0.5.5&lt;/code&gt; and less than &lt;code&gt;0.6.0&lt;/code&gt;. If the &lt;code&gt;rand&lt;/code&gt; crate has released two new versions, &lt;code&gt;0.5.6&lt;/code&gt; and &lt;code&gt;0.6.0&lt;/code&gt;, you would see the following if you ran &lt;code&gt;cargo update&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48958431e414a42071536586c915fe4c3022be36" translate="yes" xml:space="preserve">
          <source>But for now, let&amp;rsquo;s work around this problem using a handy trick. We can tell Rust explicitly that in this case we can take ownership of the value inside the &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; using &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt;; then, once we have ownership of the closure, we can call it. This involves defining a new trait &lt;code&gt;FnBox&lt;/code&gt; with the method &lt;code&gt;call_box&lt;/code&gt; that will use &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; in its signature, defining &lt;code&gt;FnBox&lt;/code&gt; for any type that implements &lt;code&gt;FnOnce()&lt;/code&gt;, changing our type alias to use the new trait, and changing &lt;code&gt;Worker&lt;/code&gt; to use the &lt;code&gt;call_box&lt;/code&gt; method. These changes are shown in Listing 20-21.</source>
          <target state="translated">Но пока давайте обойдем эту проблему с помощью удобного трюка. Мы можем явно указать Rust, что в этом случае мы можем стать владельцем значения внутри &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; используя &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; ; затем, когда мы владеем закрытием, мы можем его назвать. Это включает определение нового признака &lt;code&gt;FnBox&lt;/code&gt; с помощью метода &lt;code&gt;call_box&lt;/code&gt; , который будет использовать &lt;code&gt;self: Box&amp;lt;Self&amp;gt;&lt;/code&gt; в своей сигнатуре, определение &lt;code&gt;FnBox&lt;/code&gt; для любого типа, реализующего &lt;code&gt;FnOnce()&lt;/code&gt; , изменение псевдонима нашего типа для использования нового признака и изменение &lt;code&gt;Worker&lt;/code&gt; для использования &lt;code&gt;call_box&lt;/code&gt; метод. Эти изменения показаны в Листинге 20-21.</target>
        </trans-unit>
        <trans-unit id="0be702d32a09b655da72a7b7225dc839aaba10a3" translate="yes" xml:space="preserve">
          <source>But for the following two exceptions, this function is semantically equivalent to &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">Но для следующих двух исключений эта функция семантически эквивалентна &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="470268269eb0c32844b8d1e2e02e3f2f66584bd8" translate="yes" xml:space="preserve">
          <source>But if we used the different structs, which each have their own type, we couldn&amp;rsquo;t as easily define a function to take any of these kinds of messages as we could with the &lt;code&gt;Message&lt;/code&gt; enum defined in Listing 6-2, which is a single type.</source>
          <target state="translated">Но если бы мы использовали разные структуры, каждая из которых имеет свой собственный тип, мы не смогли бы так легко определить функцию для приема любого из этих типов сообщений, как мы могли бы с перечислением &lt;code&gt;Message&lt;/code&gt; , определенным в листинге 6-2, которое представляет собой единый тип.</target>
        </trans-unit>
        <trans-unit id="79200d10e04d305f55f7036bcbaaafae7d4d999b" translate="yes" xml:space="preserve">
          <source>But if your closure has state, iterating backwards may act in a way you do not expect. Let's go through an example. First, in the forward direction:</source>
          <target state="translated">Но если ваше закрытие имеет состояние,итерация в обратном направлении может действовать так,как вы не ожидаете.Давайте рассмотрим пример.Во-первых,в прямом направлении:</target>
        </trans-unit>
        <trans-unit id="42768b6451354f549c20c5936efbed0901a61a1c" translate="yes" xml:space="preserve">
          <source>But let&amp;rsquo;s see what happens when we instead move &lt;code&gt;handle.join()&lt;/code&gt; before the &lt;code&gt;for&lt;/code&gt; loop in &lt;code&gt;main&lt;/code&gt;, like this:</source>
          <target state="translated">Но давайте посмотрим, что произойдет, если вместо этого мы переместим &lt;code&gt;handle.join()&lt;/code&gt; перед циклом &lt;code&gt;for&lt;/code&gt; в &lt;code&gt;main&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="1fbf462a87fb38288cb0e833c1357211d81cfbfe" translate="yes" xml:space="preserve">
          <source>But mutability can be very useful. Variables are immutable only by default; as you did in Chapter 2, you can make them mutable by adding &lt;code&gt;mut&lt;/code&gt; in front of the variable name. In addition to allowing this value to change, &lt;code&gt;mut&lt;/code&gt; conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.</source>
          <target state="translated">Но изменчивость может быть очень полезной. Переменные неизменяемы только по умолчанию; как и в главе 2, вы можете сделать их изменяемыми, добавив &lt;code&gt;mut&lt;/code&gt; перед именем переменной. В дополнение к разрешению изменения этого значения, &lt;code&gt;mut&lt;/code&gt; передает намерение будущим читателям кода, указывая, что другие части кода будут изменять это значение переменной.</target>
        </trans-unit>
        <trans-unit id="e1df74418ef370eb96db59d017c1ab1ddf4aab63" translate="yes" xml:space="preserve">
          <source>But mutability can be very useful. Variables are immutable only by default; as you did in Chapter 2, you can make them mutable by adding &lt;code&gt;mut&lt;/code&gt; in front of the variable name. In addition to allowing this value to change, &lt;code&gt;mut&lt;/code&gt; conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable&amp;rsquo;s value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca01c2ad1998dcba761dee195dffb89226d07502" translate="yes" xml:space="preserve">
          <source>But mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:</source>
          <target state="translated">Но у мутирующих ссылок есть одно большое ограничение:можно иметь только одну мутирующую ссылку на определенный участок данных в определенном диапазоне.Этот код не будет работать:</target>
        </trans-unit>
        <trans-unit id="c6250d5ccc2a1416a071df325ba8b22edb3b1273" translate="yes" xml:space="preserve">
          <source>But structs aren&amp;rsquo;t the only way you can create custom types: let&amp;rsquo;s turn to Rust&amp;rsquo;s enum feature to add another tool to your toolbox.</source>
          <target state="translated">Но структуры - не единственный способ создания пользовательских типов: давайте обратимся к функции enum в Rust, чтобы добавить еще один инструмент в ваш набор инструментов.</target>
        </trans-unit>
        <trans-unit id="e46bfa80d370a9ed637759cea72a8f30b0485064" translate="yes" xml:space="preserve">
          <source>But this approach is error prone; we could cause the program to panic if the index length is incorrect. It&amp;rsquo;s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.</source>
          <target state="translated">Но этот подход подвержен ошибкам; мы можем вызвать панику программы, если длина индекса неверна. Это также медленно, потому что компилятор добавляет код времени выполнения для выполнения условной проверки каждого элемента на каждой итерации цикла.</target>
        </trans-unit>
        <trans-unit id="de89e89b70a2e3c19b2a830c292d1b9e969da48e" translate="yes" xml:space="preserve">
          <source>But this code does:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cdbd656052ab3ea671f0d02157a3b7b3a6c824" translate="yes" xml:space="preserve">
          <source>But this code seems to contradict what we just learned: we don&amp;rsquo;t have a call to &lt;code&gt;clone&lt;/code&gt;, but &lt;code&gt;x&lt;/code&gt; is still valid and wasn&amp;rsquo;t moved into &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">Но этот код, кажется, противоречит тому, что мы только что узнали: у нас нет вызова &lt;code&gt;clone&lt;/code&gt; , но &lt;code&gt;x&lt;/code&gt; все еще действителен и не был перемещен в &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f041deb6530f49ecfbaae593b78e17efac482d38" translate="yes" xml:space="preserve">
          <source>But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called &lt;em&gt;references&lt;/em&gt;.</source>
          <target state="translated">Но это слишком много церемоний и много работы для общей концепции. К счастью для нас, в Rust есть функция для этой концепции, называемая &lt;em&gt;ссылками&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2ad53668e46657588df9ef2114136e4f4dac0e42" translate="yes" xml:space="preserve">
          <source>But we also have to make some small changes to &lt;code&gt;main&lt;/code&gt;. The &lt;code&gt;request_review&lt;/code&gt; and &lt;code&gt;approve&lt;/code&gt; methods return new instances rather than modifying the struct they&amp;rsquo;re called on, so we need to add more &lt;code&gt;let post =&lt;/code&gt; shadowing assignments to save the returned instances. We also can&amp;rsquo;t have the assertions about the draft and pending review post&amp;rsquo;s contents be empty strings, nor do we need them: we can&amp;rsquo;t compile code that tries to use the content of posts in those states any longer. The updated code in &lt;code&gt;main&lt;/code&gt; is shown in Listing 17-21:</source>
          <target state="translated">Но мы также должны внести небольшие изменения в &lt;code&gt;main&lt;/code&gt; . &lt;code&gt;request_review&lt;/code&gt; и &lt;code&gt;approve&lt;/code&gt; методы возвращают новые экземпляры , а не модифицируя - структуру они называются, так что нам нужно добавить еще &lt;code&gt;let post =&lt;/code&gt; затенения задания для сохранения возвращаемых экземпляров. У нас также не может быть утверждений о содержании черновика и ожидающего рассмотрения сообщения в виде пустых строк, и они нам не нужны: мы больше не можем компилировать код, который пытается использовать содержимое сообщений в этих состояниях. Обновленный код в &lt;code&gt;main&lt;/code&gt; показан в Листинге 17-21:</target>
        </trans-unit>
        <trans-unit id="08cb86c283fbceae016dfe9e91e73ec38c2b76a7" translate="yes" xml:space="preserve">
          <source>But we can&amp;rsquo;t implement external traits on external types. For example, we can&amp;rsquo;t implement the &lt;code&gt;Display&lt;/code&gt; trait on &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; within our &lt;code&gt;aggregator&lt;/code&gt; crate, because &lt;code&gt;Display&lt;/code&gt; and &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; are defined in the standard library and aren&amp;rsquo;t local to our &lt;code&gt;aggregator&lt;/code&gt; crate. This restriction is part of a property of programs called &lt;em&gt;coherence&lt;/em&gt;, and more specifically the &lt;em&gt;orphan rule&lt;/em&gt;, so named because the parent type is not present. This rule ensures that other people&amp;rsquo;s code can&amp;rsquo;t break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn&amp;rsquo;t know which implementation to use.</source>
          <target state="translated">Но мы не можем реализовать внешние черты для внешних типов. Например, мы не можем реализовать свойство &lt;code&gt;Display&lt;/code&gt; на &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; в нашем крейте &lt;code&gt;aggregator&lt;/code&gt; , потому что &lt;code&gt;Display&lt;/code&gt; и &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; определены в стандартной библиотеке и не являются локальными для нашего крейта &lt;code&gt;aggregator&lt;/code&gt; . Это ограничение является частью свойства программ, называемого &lt;em&gt;согласованностью&lt;/em&gt; , а точнее &lt;em&gt;правила сиротства&lt;/em&gt; , названного так потому, что родительский тип отсутствует. Это правило гарантирует, что код других людей не сможет взломать ваш код, и наоборот. Без правила два ящика могли бы реализовать одну и ту же черту для одного и того же типа, и Rust не знал бы, какую реализацию использовать.</target>
        </trans-unit>
        <trans-unit id="e2def28f767ccc15567e67d96a674194d2cda727" translate="yes" xml:space="preserve">
          <source>But we&amp;rsquo;re not quite done yet! In the worker, our closure being passed to &lt;code&gt;thread::spawn&lt;/code&gt; still only &lt;em&gt;references&lt;/em&gt; the receiving end of the channel. Instead, we need the closure to loop forever, asking the receiving end of the channel for a job and running the job when it gets one. Let&amp;rsquo;s make the change shown in Listing 20-20 to &lt;code&gt;Worker::new&lt;/code&gt;.</source>
          <target state="translated">Но мы еще не закончили! В воркере наше закрытие, передаваемое в &lt;code&gt;thread::spawn&lt;/code&gt; прежнему &lt;em&gt;ссылается&lt;/em&gt; только на принимающий конец канала. Вместо этого нам нужно, чтобы замыкание выполнялось бесконечно, запрашивая задание у принимающей стороны канала и выполняя задание, когда оно его получает. Давайте внесем изменения, показанные в листинге 20-20, в &lt;code&gt;Worker::new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="91d9b7bfa8f54bae2ca712d22c222ac19da54446" translate="yes" xml:space="preserve">
          <source>But what use is a type you can never create values for? Recall the code from Listing 2-5; we&amp;rsquo;ve reproduced part of it here in Listing 19-26.</source>
          <target state="translated">Но какая польза от типа, для которого никогда нельзя создавать ценности? Вспомните код из листинга 2-5; мы воспроизвели часть этого здесь, в Листинге 19-26.</target>
        </trans-unit>
        <trans-unit id="f5817afbaa27eca7b4e5b48d721c41770590cf6f" translate="yes" xml:space="preserve">
          <source>But when it comes to supporting this in traits, there are &lt;a href=&quot;https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-hard/&quot;&gt;a few implementation issues&lt;/a&gt;. One of them is returning &lt;code&gt;impl Trait&lt;/code&gt; in traits is not supported, as it would require &lt;a href=&quot;https://github.com/rust-lang/rust/issues/44265&quot;&gt;Generic Associated Types&lt;/a&gt; to be supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1144e8d867db6585bb0fed6af4e27df37f58b6" translate="yes" xml:space="preserve">
          <source>But you&amp;rsquo;ll more often see them used in this format, with the comment on a separate line above the code it&amp;rsquo;s annotating:</source>
          <target state="translated">Но чаще вы увидите, что они используются в этом формате, с комментарием в отдельной строке над аннотируемым кодом:</target>
        </trans-unit>
        <trans-unit id="14c5580ac9c2810afbb01f7bb2cceb390e04edb0" translate="yes" xml:space="preserve">
          <source>By adding &lt;code&gt;--undo&lt;/code&gt; to the command, you can also undo a yank and allow projects to start depending on a version again:</source>
          <target state="translated">Добавив &lt;code&gt;--undo&lt;/code&gt; к команде, вы также можете отменить восстановление и снова разрешить запуск проектов в зависимости от версии:</target>
        </trans-unit>
        <trans-unit id="57268469c25c87f6ad4c099c6346794a32838869" translate="yes" xml:space="preserve">
          <source>By adding the &lt;code&gt;move&lt;/code&gt; keyword before the closure, we force the closure to take ownership of the values it&amp;rsquo;s using rather than allowing Rust to infer that it should borrow the values. The modification to Listing 16-3 shown in Listing 16-5 will compile and run as we intend:</source>
          <target state="translated">Добавляя ключевое слово &lt;code&gt;move&lt;/code&gt; перед закрытием, мы заставляем закрытие владеть используемыми значениями, вместо того, чтобы позволить Rust сделать вывод, что он должен заимствовать значения. Модификация листинга 16-3, показанная в листинге 16-5, будет компилироваться и работать так, как мы предполагали:</target>
        </trans-unit>
        <trans-unit id="24cf831e0672b0a0d0cb2aabe568cf79d0a637c3" translate="yes" xml:space="preserve">
          <source>By changing &lt;code&gt;impl PartialEq for Book&lt;/code&gt; to &lt;code&gt;impl PartialEq&amp;lt;BookFormat&amp;gt; for Book&lt;/code&gt;, we allow &lt;code&gt;BookFormat&lt;/code&gt;s to be compared with &lt;code&gt;Book&lt;/code&gt;s.</source>
          <target state="translated">Изменяя &lt;code&gt;impl PartialEq for Book&lt;/code&gt; на &lt;code&gt;impl PartialEq&amp;lt;BookFormat&amp;gt; for Book&lt;/code&gt; , мы позволяем &lt;code&gt;BookFormat&lt;/code&gt; с &lt;code&gt;Book&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="376ca023c76f3036478e22fdb169869008d8aa9e" translate="yes" xml:space="preserve">
          <source>By controlling which tests run, you can make sure your &lt;code&gt;cargo test&lt;/code&gt; results will be fast. When you&amp;rsquo;re at a point where it makes sense to check the results of the &lt;code&gt;ignored&lt;/code&gt; tests and you have time to wait for the results, you can run &lt;code&gt;cargo test -- --ignored&lt;/code&gt; instead.</source>
          <target state="translated">Контролируя, какие тесты запускаются, вы можете быть уверены, что результаты ваших &lt;code&gt;cargo test&lt;/code&gt; будут быстрыми. Когда вы находитесь в точке, где имеет смысл проверить результаты &lt;code&gt;ignored&lt;/code&gt; тестов, и у вас есть время дождаться результатов, вы можете вместо этого запустить &lt;code&gt;cargo test -- --ignored&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a2bb1d27a87d404cc9474290490c53d74fd41c0" translate="yes" xml:space="preserve">
          <source>By convention, &lt;code&gt;self.cmp(&amp;amp;other)&lt;/code&gt; returns the ordering matching the expression &lt;code&gt;self &amp;lt;operator&amp;gt; other&lt;/code&gt; if true.</source>
          <target state="translated">По соглашению, &lt;code&gt;self.cmp(&amp;amp;other)&lt;/code&gt; возвращает порядок, соответствующий выражению &lt;code&gt;self &amp;lt;operator&amp;gt; other&lt;/code&gt; если оно истинно.</target>
        </trans-unit>
        <trans-unit id="de8a1d92f6dd3bd8db18180b7b2a50fb4ed9f5aa" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;security_qos_flags&lt;/code&gt; is not set. It should be specified when opening a named pipe, to control to which degree a server process can act on behalf of a client process (security impersonation level).</source>
          <target state="translated">По умолчанию &lt;code&gt;security_qos_flags&lt;/code&gt; не установлен. Его следует указать при открытии именованного канала, чтобы контролировать, в какой степени серверный процесс может действовать от имени клиентского процесса (уровень безопасности олицетворения).</target>
        </trans-unit>
        <trans-unit id="6095051ff401d433de5d730cac4f12b5941e6537" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;share_mode&lt;/code&gt; is set to &lt;code&gt;FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE&lt;/code&gt;. This allows other processes to read, write, and delete/rename the same file while it is open. Removing any of the flags will prevent other processes from performing the corresponding operation until the file handle is closed.</source>
          <target state="translated">По умолчанию &lt;code&gt;share_mode&lt;/code&gt; установлен в &lt;code&gt;FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE&lt;/code&gt; . Это позволяет другим процессам читать, писать и удалять / переименовывать тот же файл, пока он открыт. Удаление любого из флагов не позволит другим процессам выполнить соответствующую операцию, пока дескриптор файла не будет закрыт.</target>
        </trans-unit>
        <trans-unit id="45de1662a54cdc16cef2847d72223197060768f7" translate="yes" xml:space="preserve">
          <source>By default external blocks assume that the library they are calling uses the standard C ABI on the specific platform. Other ABIs may be specified using an &lt;code&gt;abi&lt;/code&gt; string, as shown here:</source>
          <target state="translated">По умолчанию внешние блоки предполагают, что вызываемая ими библиотека использует стандартный C ABI на конкретной платформе. Другие ABI могут быть указаны с помощью строки &lt;code&gt;abi&lt;/code&gt; , как показано здесь:</target>
        </trans-unit>
        <trans-unit id="fc473c24bd4f443ffeef08b0cf6f41ff8de8d915" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;keyword.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt; statements consume all they can, which can sometimes be a problem, when you don't really need the value to be moved and owned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad11d86076f62fa9cc433e025f374e132c103f7a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;HashMap&lt;/code&gt; uses a &amp;ldquo;cryptographically strong&amp;rdquo;&lt;sup&gt;&lt;a href=&quot;#siphash&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; hashing function that can provide resistance to Denial of Service (DoS) attacks. This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different &lt;em&gt;hasher&lt;/em&gt;. A hasher is a type that implements the &lt;code&gt;BuildHasher&lt;/code&gt; trait. We&amp;rsquo;ll talk about traits and how to implement them in Chapter 10. You don&amp;rsquo;t necessarily have to implement your own hasher from scratch; &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.</source>
          <target state="translated">По умолчанию &lt;code&gt;HashMap&lt;/code&gt; использует &amp;laquo;криптографически стойкую &amp;raquo; &lt;sup&gt;&lt;a href=&quot;#siphash&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; хэш-функцию, которая может обеспечить устойчивость к атакам типа &amp;laquo;отказ в обслуживании&amp;raquo; (DoS). Это не самый быстрый из доступных алгоритмов хеширования, но компромисс для повышения безопасности, связанный с падением производительности, того стоит. Если вы профилируете свой код и обнаружите, что хеш-функция по умолчанию слишком медленная для ваших целей, вы можете переключиться на другую функцию, указав другой &lt;em&gt;хеш-код&lt;/em&gt; . Хешер - это тип, реализующий черту &lt;code&gt;BuildHasher&lt;/code&gt; . Мы поговорим о чертах и ​​о том, как их реализовать в главе 10. Вам не обязательно создавать собственный хешер с нуля; &lt;a href=&quot;https://crates.io/&quot;&gt;crates.io&lt;/a&gt; имеет библиотеки, которыми пользуются другие пользователи Rust, которые предоставляют хешеры, реализующие множество распространенных алгоритмов хеширования.</target>
        </trans-unit>
        <trans-unit id="da46918183f148a703a5dca98e668e41fe0f6742" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;HashMap&lt;/code&gt; uses a hashing algorithm selected to provide resistance against HashDoS attacks. The algorithm is randomly seeded, and a reasonable best-effort is made to generate this seed from a high quality, secure source of randomness provided by the host without blocking the program. Because of this, the randomness of the seed depends on the output quality of the system's random number generator when the seed is created. In particular, seeds generated when the system's entropy pool is abnormally low such as during system boot may be of a lower quality.</source>
          <target state="translated">По умолчанию &lt;code&gt;HashMap&lt;/code&gt; использует алгоритм хеширования, выбранный для обеспечения устойчивости к атакам HashDoS. Алгоритм выбирается случайным образом, и прилагаются все разумные усилия для генерации этого начального числа из высококачественного безопасного источника случайности, предоставляемого хостом, без блокировки программы. Из-за этого случайность начального числа зависит от качества вывода генератора случайных чисел системы при его создании. В частности, начальные числа, генерируемые при аномально низком пуле энтропии системы, например, во время загрузки системы, могут иметь более низкое качество.</target>
        </trans-unit>
        <trans-unit id="d651c937af4d96b8135fb3517b9d184e89c5453c" translate="yes" xml:space="preserve">
          <source>By default, Rust brings only a few types into the scope of every program in &lt;a href=&quot;../std/prelude/index&quot;&gt;the &lt;em&gt;prelude&lt;/em&gt;&lt;/a&gt;. If a type you want to use isn&amp;rsquo;t in the prelude, you have to bring that type into scope explicitly with a &lt;code&gt;use&lt;/code&gt; statement. Using the &lt;code&gt;std::io&lt;/code&gt; library provides you with a number of useful features, including the ability to accept user input.</source>
          <target state="translated">По умолчанию Rust приносит только несколько типов в рамках каждой программы в &lt;a href=&quot;../std/prelude/index&quot;&gt;к &lt;em&gt;прелюдии&lt;/em&gt;&lt;/a&gt; . Если типа, который вы хотите использовать, нет в прелюдии, вы должны явно добавить этот тип в область видимости с &lt;code&gt;use&lt;/code&gt; оператора use . Использование библиотеки &lt;code&gt;std::io&lt;/code&gt; предоставляет вам ряд полезных функций, включая возможность принимать ввод пользователя.</target>
        </trans-unit>
        <trans-unit id="0c4c1f7def0235335f03f717a82baeaf139f3d6d" translate="yes" xml:space="preserve">
          <source>By default, a macro has no path-based scope. However, if it has the &lt;code&gt;#[macro_export]&lt;/code&gt; attribute, then it is declared in the crate root scope and can be referred to normally as such:</source>
          <target state="translated">По умолчанию макрос не имеет области на основе пути. Однако, если он имеет атрибут &lt;code&gt;#[macro_export]&lt;/code&gt; , то он объявляется в корневой области ящика и может называться обычным образом:</target>
        </trans-unit>
        <trans-unit id="0cbf310ab8fadfa7c76780733e623179e3214d1c" translate="yes" xml:space="preserve">
          <source>By default, all identifiers referred to in a macro are expanded as-is, and are looked up at the macro's invocation site. This can lead to issues if a macro refers to an item or macro which isn't in scope at the invocation site. To alleviate this, the &lt;code&gt;$crate&lt;/code&gt; metavariable can be used at the start of a path to force lookup to occur inside the crate defining the macro.</source>
          <target state="translated">По умолчанию все идентификаторы, упоминаемые в макросе, раскрываются как есть и просматриваются на сайте вызова макроса. Это может привести к проблемам, если макрос ссылается на элемент или макрос, который не входит в область действия на сайте вызова. Чтобы облегчить это, метапеременная &lt;code&gt;$crate&lt;/code&gt; может использоваться в начале пути, чтобы поиск происходил внутри ящика, определяющего макрос.</target>
        </trans-unit>
        <trans-unit id="642089d05c107d61f37af46fec5f28d39e938fae" translate="yes" xml:space="preserve">
          <source>By default, all types in Rust are movable. Rust allows passing all types by-value, and common smart-pointer types such as &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; allow replacing and moving the values they contain: you can move out of a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;, or you can use &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; wraps a pointer type &lt;code&gt;P&lt;/code&gt;, so &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; functions much like a regular &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt;: when a &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; gets dropped, so do its contents, and the memory gets deallocated. Similarly, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; is a lot like &lt;code&gt;&amp;amp;mut T&lt;/code&gt;. However, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does not let clients actually obtain a &lt;a href=&quot;../boxed/struct.box&quot;&gt;&lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to pinned data, which implies that you cannot use operations such as &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f73f88e9b11f78d793846432896a45a47d865c" translate="yes" xml:space="preserve">
          <source>By default, all types in Rust are movable. Rust allows passing all types by-value, and common smart-pointer types such as &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;amp;mut T&lt;/code&gt; allow replacing and moving the values they contain: you can move out of a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;, or you can use &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; wraps a pointer type &lt;code&gt;P&lt;/code&gt;, so &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; functions much like a regular &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt;: when a &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; gets dropped, so do its contents, and the memory gets deallocated. Similarly, &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; is a lot like &lt;code&gt;&amp;amp;mut T&lt;/code&gt;. However, &lt;a href=&quot;struct.pin&quot;&gt;&lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt;&lt;/a&gt; does not let clients actually obtain a &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;mut T&lt;/code&gt; to pinned data, which implies that you cannot use operations such as &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">По умолчанию все типы в Rust подвижны. Rust позволяет передавать все типы по значению, а распространенные типы интеллектуальных указателей, такие как &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; и &lt;code&gt;&amp;amp;mut T&lt;/code&gt; позволяют заменять и перемещать содержащиеся в них значения: вы можете выйти из &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; или использовать &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt; . &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt; оборачивает указатель типа &lt;code&gt;P&lt;/code&gt; , поэтому &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; работает так же, как обычный &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; : когда &lt;code&gt;Pin&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; падает, то же самое происходит с его содержимым, и память освобождается . Аналогичным образом , &lt;code&gt;Pin&amp;lt;&amp;amp;mut T&amp;gt;&lt;/code&gt; очень много , как &lt;code&gt;&amp;amp;mut T&lt;/code&gt; . Однако &lt;a href=&quot;struct.pin&quot;&gt; &lt;code&gt;Pin&amp;lt;P&amp;gt;&lt;/code&gt; &lt;/a&gt;не позволяет клиентам фактически получить &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; или &lt;code&gt;&amp;amp;mut T&lt;/code&gt; для закрепленных данных, что означает, что вы не можете использовать такие операции, как &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="df4968e3432ef000f1bcc3fb95cf2b7eb0f19a6b" translate="yes" xml:space="preserve">
          <source>By default, everything in Rust is &lt;em&gt;private&lt;/em&gt;, with two exceptions: Associated items in a &lt;code&gt;pub&lt;/code&gt; Trait are public by default; Enum variants in a &lt;code&gt;pub&lt;/code&gt; enum are also public by default. When an item is declared as &lt;code&gt;pub&lt;/code&gt;, it can be thought of as being accessible to the outside world. For example:</source>
          <target state="translated">По умолчанию все в Rust является &lt;em&gt;приватным&lt;/em&gt; , за двумя исключениями: связанные элементы в &lt;code&gt;pub&lt;/code&gt; Trait по умолчанию являются общедоступными; Варианты перечисления в перечислении &lt;code&gt;pub&lt;/code&gt; также по умолчанию являются общедоступными. Когда объект объявлен как &lt;code&gt;pub&lt;/code&gt; , он может рассматриваться как доступный для внешнего мира. Например:</target>
        </trans-unit>
        <trans-unit id="e8c258fdae97b1ecf4c355834b8cc2789a53356b" translate="yes" xml:space="preserve">
          <source>By default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:</source>
          <target state="translated">По умолчанию,общие функции будут работать только на тех типах,которые на момент компиляции имеют известный размер.Однако,вы можете использовать следующий специальный синтаксис,чтобы ослабить это ограничение:</target>
        </trans-unit>
        <trans-unit id="a9c4cd7fe13c5d5855eca814505fcc712b580495" translate="yes" xml:space="preserve">
          <source>By default, identifier patterns bind a variable to a copy of or move from the matched value depending on whether the matched value implements &lt;a href=&quot;special-types-and-traits#copy&quot;&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt;. This can be changed to bind to a reference by using the &lt;code&gt;ref&lt;/code&gt; keyword, or to a mutable reference using &lt;code&gt;ref mut&lt;/code&gt;. For example:</source>
          <target state="translated">По умолчанию шаблоны идентификаторов связывают переменную с копией сопоставленного значения или перемещаются от него в зависимости от того, реализует ли сопоставленное значение &lt;a href=&quot;special-types-and-traits#copy&quot;&gt; &lt;code&gt;Copy&lt;/code&gt; &lt;/a&gt; . Это можно изменить для привязки к ссылке с помощью ключевого слова &lt;code&gt;ref&lt;/code&gt; или к изменяемой ссылке с помощью &lt;code&gt;ref mut&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="972aa10d3aec7b320258dca3f2fe0bcadcd844ff" translate="yes" xml:space="preserve">
          <source>By default, if a test passes, Rust&amp;rsquo;s test library captures anything printed to standard output. For example, if we call &lt;code&gt;println!&lt;/code&gt; in a test and the test passes, we won&amp;rsquo;t see the &lt;code&gt;println!&lt;/code&gt; output in the terminal; we&amp;rsquo;ll see only the line that indicates the test passed. If a test fails, we&amp;rsquo;ll see whatever was printed to standard output with the rest of the failure message.</source>
          <target state="translated">По умолчанию, если тест проходит успешно, тестовая библиотека Rust записывает все, что выводится на стандартный вывод. Например, если мы вызовем &lt;code&gt;println!&lt;/code&gt; в тесте и тест пройден, мы не увидим &lt;code&gt;println!&lt;/code&gt; вывод в терминал; мы увидим только строку, указывающую, что тест пройден. Если тест не прошел, мы увидим все, что было напечатано на стандартный вывод, вместе с остальной частью сообщения об ошибке.</target>
        </trans-unit>
        <trans-unit id="d95184642912361a38b12a6b5acfd4cc05172698" translate="yes" xml:space="preserve">
          <source>By default, stdin, stdout and stderr are inherited from the parent.</source>
          <target state="translated">По умолчанию,stdin,stdout и stderr унаследованы от родителя.</target>
        </trans-unit>
        <trans-unit id="f620f1067d553e3bfb80fd71b1c203148dc846fc" translate="yes" xml:space="preserve">
          <source>By default, stdin, stdout and stderr are inherited from the parent. In order to capture the output into this &lt;code&gt;Result&amp;lt;Output&amp;gt;&lt;/code&gt; it is necessary to create new pipes between parent and child. Use &lt;code&gt;stdout(Stdio::piped())&lt;/code&gt; or &lt;code&gt;stderr(Stdio::piped())&lt;/code&gt;, respectively.</source>
          <target state="translated">По умолчанию stdin, stdout и stderr наследуются от родителя. Чтобы записать вывод в этот &lt;code&gt;Result&amp;lt;Output&amp;gt;&lt;/code&gt; необходимо создать новые каналы между родительским и дочерним. Используйте &lt;code&gt;stdout(Stdio::piped())&lt;/code&gt; или &lt;code&gt;stderr(Stdio::piped())&lt;/code&gt; соответственно.</target>
        </trans-unit>
        <trans-unit id="1a3d2a96946537e440c011c1b793bac6cb6bf93c" translate="yes" xml:space="preserve">
          <source>By default, stdout and stderr are captured (and used to provide the resulting output). Stdin is not inherited from the parent and any attempt by the child process to read from the stdin stream will result in the stream immediately closing.</source>
          <target state="translated">По умолчанию перехватываются stdout и stderr (и используются для получения результирующего вывода).Stdin не унаследован от родителя,и любая попытка дочернего процесса прочитать из потока stdin приведет к немедленному закрытию потока.</target>
        </trans-unit>
        <trans-unit id="ef6b7759d538ef3f99e9eadac17fdfe2aa668d92" translate="yes" xml:space="preserve">
          <source>By default, variable bindings have 'move semantics.' In other words:</source>
          <target state="translated">По умолчанию,переменные связки имеют 'семантику перемещения'.Другими словами:</target>
        </trans-unit>
        <trans-unit id="07d2d74e176689aec98a3f3118957a0424dbbe81" translate="yes" xml:space="preserve">
          <source>By default, variables in Rust are immutable. To fix this error, add the keyword &lt;code&gt;mut&lt;/code&gt; after the keyword &lt;code&gt;let&lt;/code&gt; when declaring the variable. For example:</source>
          <target state="translated">По умолчанию переменные в Rust неизменяемы. Чтобы исправить эту ошибку, добавьте ключевое слово &lt;code&gt;mut&lt;/code&gt; после ключевого слова &lt;code&gt;let&lt;/code&gt; при объявлении переменной. Например:</target>
        </trans-unit>
        <trans-unit id="878411518946b9f6ea5793ecae83ce111ee3e9e7" translate="yes" xml:space="preserve">
          <source>By default, when a panic occurs, the program starts &lt;em&gt;unwinding&lt;/em&gt;, which means Rust walks back up the stack and cleans up the data from each function it encounters. But this walking back and cleanup is a lot of work. The alternative is to immediately &lt;em&gt;abort&lt;/em&gt;, which ends the program without cleaning up. Memory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding &lt;code&gt;panic = 'abort'&lt;/code&gt; to the appropriate &lt;code&gt;[profile]&lt;/code&gt; sections in your &lt;em&gt;Cargo.toml&lt;/em&gt; file. For example, if you want to abort on panic in release mode, add this:</source>
          <target state="translated">По умолчанию, когда возникает паника, программа начинает &lt;em&gt;раскручиваться&lt;/em&gt; , что означает, что Rust возвращается вверх по стеку и очищает данные каждой функции, с которой сталкивается. Но это возвращение и уборка - это большая работа. Альтернативой является немедленное &lt;em&gt;прерывание&lt;/em&gt; , при котором программа завершается без очистки. Память, которую использовала программа, затем должна быть очищена операционной системой. Если в вашем проекте вам нужно сделать результирующий двоичный файл как можно меньше, вы можете переключиться с восстановления на прерывание в случае паники, добавив &lt;code&gt;panic = 'abort'&lt;/code&gt; в соответствующие разделы &lt;code&gt;[profile]&lt;/code&gt; в вашем файле &lt;em&gt;Cargo.toml&lt;/em&gt; . Например, если вы хотите прервать панику в режиме выпуска, добавьте это:</target>
        </trans-unit>
        <trans-unit id="70961236b49c3241db36d35bd68586bfb070a6d8" translate="yes" xml:space="preserve">
          <source>By implementing &lt;code&gt;FromIterator&lt;/code&gt; for a type, you define how it will be created from an iterator. This is common for types which describe a collection of some kind.</source>
          <target state="translated">Реализуя &lt;code&gt;FromIterator&lt;/code&gt; для типа, можно определить , как он будет создан из итератора. Это типично для типов, описывающих какую-либо коллекцию.</target>
        </trans-unit>
        <trans-unit id="8fe6d2f7538ddf4711df03e9fa6aac2aec872193" translate="yes" xml:space="preserve">
          <source>By implementing &lt;code&gt;IntoIterator&lt;/code&gt; for a type, you define how it will be converted to an iterator. This is common for types which describe a collection of some kind.</source>
          <target state="translated">Реализуя &lt;code&gt;IntoIterator&lt;/code&gt; для типа, можно определить , как он будет преобразован в итератор. Это типично для типов, описывающих какую-либо коллекцию.</target>
        </trans-unit>
        <trans-unit id="a0afc41378ee2d3e0b24873888e49fe44ab2bb88" translate="yes" xml:space="preserve">
          <source>By implementing the state pattern exactly as it&amp;rsquo;s defined for object-oriented languages, we&amp;rsquo;re not taking as full advantage of Rust&amp;rsquo;s strengths as we could. Let&amp;rsquo;s look at some changes we can make to the &lt;code&gt;blog&lt;/code&gt; crate that can make invalid states and transitions into compile time errors.</source>
          <target state="translated">Реализуя паттерн состояния точно так, как он определен для объектно-ориентированных языков, мы не используем в полной мере сильные стороны Rust, как могли бы. Давайте посмотрим на некоторые изменения, которые мы можем внести в ящик &lt;code&gt;blog&lt;/code&gt; которые могут привести к недопустимым состояниям и переходам в ошибки времени компиляции.</target>
        </trans-unit>
        <trans-unit id="46180f00b512e17d9f64273f452da441a283a2bb" translate="yes" xml:space="preserve">
          <source>By inserting the &lt;code&gt;unsafe&lt;/code&gt; block around our call to &lt;code&gt;dangerous&lt;/code&gt;, we&amp;rsquo;re asserting to Rust that we&amp;rsquo;ve read the function&amp;rsquo;s documentation, we understand how to use it properly, and we&amp;rsquo;ve verified that we&amp;rsquo;re fulfilling the contract of the function.</source>
          <target state="translated">Вставляя &lt;code&gt;unsafe&lt;/code&gt; блок вокруг нашего вызова к &lt;code&gt;dangerous&lt;/code&gt; , мы заявляем Rust, что мы прочитали документацию по функции, мы понимаем, как ее правильно использовать, и мы проверили, что мы выполняем контракт функции.</target>
        </trans-unit>
        <trans-unit id="ebd43141acc082c32de2ba198e30637d83a5941d" translate="yes" xml:space="preserve">
          <source>By introducing the explicit &lt;code&gt;let value&lt;/code&gt;, we allocate storage that will last until the end of the enclosing block (when &lt;code&gt;value&lt;/code&gt; goes out of scope). When we borrow &lt;code&gt;&amp;amp;value&lt;/code&gt;, we are borrowing a local variable that already exists, and hence no temporary is created.</source>
          <target state="translated">Вводя явное &lt;code&gt;let value&lt;/code&gt; , мы выделяем память, которой хватит до конца включающего блока (когда &lt;code&gt;value&lt;/code&gt; выходит за пределы области видимости). Когда мы заимствуем &lt;code&gt;&amp;amp;value&lt;/code&gt; , мы заимствуем локальную переменную, которая уже существует, и, следовательно, временная не создается.</target>
        </trans-unit>
        <trans-unit id="69e12568cda798dc4c41d36b6782b17be36886bc" translate="yes" xml:space="preserve">
          <source>By now, you&amp;rsquo;ve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter 20, we&amp;rsquo;ll look at a few aspects of the language you might run into every once in a while. You can use this chapter as a reference for when you encounter any unknowns when using Rust. The features you&amp;rsquo;ll learn to use in this chapter are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.</source>
          <target state="translated">К настоящему времени вы изучили наиболее часто используемые части языка программирования Rust. Прежде чем мы займемся еще одним проектом в главе 20, мы рассмотрим несколько аспектов языка, с которыми вы можете время от времени сталкиваться. Вы можете использовать эту главу как справочник, когда столкнетесь с какими-либо неизвестными при использовании Rust. Функции, которые вы научитесь использовать в этой главе, полезны в очень специфических ситуациях. Хотя вы можете не часто обращаться к ним, мы хотим убедиться, что вы понимаете все функции, которые может предложить Rust.</target>
        </trans-unit>
        <trans-unit id="3b8d2c5ef438bc901d43221175865fde334c590c" translate="yes" xml:space="preserve">
          <source>By opting out of having Rust enforce these guarantees, you can give up guaranteed safety in exchange for greater performance or the ability to interface with another language or hardware where Rust&amp;rsquo;s guarantees don&amp;rsquo;t apply.</source>
          <target state="translated">Отказавшись от применения этих гарантий в Rust, вы можете отказаться от гарантированной безопасности в обмен на более высокую производительность или возможность взаимодействия с другим языком или оборудованием, на которое гарантии Rust не распространяются.</target>
        </trans-unit>
        <trans-unit id="27764f2a26f0e207cc2fb6a676294f8c54a5721a" translate="yes" xml:space="preserve">
          <source>By requesting the current thread, using the &lt;a href=&quot;fn.current&quot;&gt;&lt;code&gt;thread::current&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Запрашивая текущий поток, используя функцию &lt;a href=&quot;fn.current&quot;&gt; &lt;code&gt;thread::current&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cbc7153ee55504f6099241a26bcc3f7667184521" translate="yes" xml:space="preserve">
          <source>By spawning a new thread, e.g., using the &lt;a href=&quot;fn.spawn&quot;&gt;&lt;code&gt;thread::spawn&lt;/code&gt;&lt;/a&gt; function, and calling &lt;a href=&quot;struct.joinhandle#method.thread&quot;&gt;&lt;code&gt;thread&lt;/code&gt;&lt;/a&gt; on the &lt;a href=&quot;struct.joinhandle&quot;&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Создавая новый поток, например, используя функцию &lt;a href=&quot;fn.spawn&quot;&gt; &lt;code&gt;thread::spawn&lt;/code&gt; &lt;/a&gt; и вызывая &lt;a href=&quot;struct.joinhandle#method.thread&quot;&gt; &lt;code&gt;thread&lt;/code&gt; &lt;/a&gt; в &lt;a href=&quot;struct.joinhandle&quot;&gt; &lt;code&gt;JoinHandle&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="12606d21fd7d24ec782af86e2fc775ab3b2a1534" translate="yes" xml:space="preserve">
          <source>By the same token, if your slice includes the last byte of the &lt;code&gt;String&lt;/code&gt;, you can drop the trailing number. That means these are equal:</source>
          <target state="translated">Точно так же, если ваш фрагмент включает последний байт &lt;code&gt;String&lt;/code&gt; , вы можете отбросить конечный номер. Это означает, что они равны:</target>
        </trans-unit>
        <trans-unit id="eed2e06fae66dfdcb759c3aa75071abdbcec3d30" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;impl Summary&lt;/code&gt; for the return type, we specify that the &lt;code&gt;returns_summarizable&lt;/code&gt; function returns some type that implements the &lt;code&gt;Summary&lt;/code&gt; trait without naming the concrete type. In this case, &lt;code&gt;returns_summarizable&lt;/code&gt; returns a &lt;code&gt;Tweet&lt;/code&gt;, but the code calling this function doesn&amp;rsquo;t know that.</source>
          <target state="translated">Используя &lt;code&gt;impl Summary&lt;/code&gt; для типа возвращаемого значения, мы указываем, что функция &lt;code&gt;returns_summarizable&lt;/code&gt; возвращает некоторый тип, который реализует черту &lt;code&gt;Summary&lt;/code&gt; без указания конкретного типа. В этом случае &lt;code&gt;returns_summarizable&lt;/code&gt; возвращает &lt;code&gt;Tweet&lt;/code&gt; , но код, вызывающий эту функцию, этого не знает.</target>
        </trans-unit>
        <trans-unit id="e9aacb122cfae0a7a0d083ca40090e9b5f6410c8" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;loop&lt;/code&gt; instead and acquiring the lock and a job within the block rather than outside it, the &lt;code&gt;MutexGuard&lt;/code&gt; returned from the &lt;code&gt;lock&lt;/code&gt; method is dropped as soon as the &lt;code&gt;let job&lt;/code&gt; statement ends. This ensures that the lock is held during the call to &lt;code&gt;recv&lt;/code&gt;, but it is released before the call to &lt;code&gt;job.call_box()&lt;/code&gt;, allowing multiple requests to be serviced concurrently.</source>
          <target state="translated">Если вместо этого использовать &lt;code&gt;loop&lt;/code&gt; и получить блокировку и задание внутри блока, а не за его пределами, &lt;code&gt;MutexGuard&lt;/code&gt; , возвращенный из метода &lt;code&gt;lock&lt;/code&gt; отбрасывается, как только завершается оператор &lt;code&gt;let job&lt;/code&gt; . Это гарантирует, что блокировка удерживается во время вызова &lt;code&gt;recv&lt;/code&gt; , но &lt;code&gt;job.call_box()&lt;/code&gt; перед вызовом job.call_box () , что позволяет одновременно обслуживать несколько запросов.</target>
        </trans-unit>
        <trans-unit id="a1dc62ff68dd92e2b08c605e1735e02b6fb42d3d" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;loop&lt;/code&gt; instead and acquiring the lock without assigning to a variable, the temporary &lt;code&gt;MutexGuard&lt;/code&gt; returned from the &lt;code&gt;lock&lt;/code&gt; method is dropped as soon as the &lt;code&gt;let job&lt;/code&gt; statement ends. This ensures that the lock is held during the call to &lt;code&gt;recv&lt;/code&gt;, but it is released before the call to &lt;code&gt;job()&lt;/code&gt;, allowing multiple requests to be serviced concurrently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a33cddb0085e977a7cbf3fab6625f1af56ae11" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;pub use&lt;/code&gt;, external code can now call the &lt;code&gt;add_to_waitlist&lt;/code&gt; function using &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt;. If we hadn&amp;rsquo;t specified &lt;code&gt;pub use&lt;/code&gt;, the &lt;code&gt;eat_at_restaurant&lt;/code&gt; function could call &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; in its scope, but external code couldn&amp;rsquo;t take advantage of this new path.</source>
          <target state="translated">Используя использование &lt;code&gt;pub use&lt;/code&gt; , внешний код теперь может вызывать функцию &lt;code&gt;add_to_waitlist&lt;/code&gt; с помощью &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; . Если бы мы не указали &lt;code&gt;pub use&lt;/code&gt; , функция &lt;code&gt;eat_at_restaurant&lt;/code&gt; могла бы вызвать &lt;code&gt;hosting::add_to_waitlist&lt;/code&gt; в своей области, но внешний код не смог бы воспользоваться этим новым путем.</target>
        </trans-unit>
        <trans-unit id="433cfee29840720f9bbafd30efe0a38d5e74bfb2" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;unsafe impl&lt;/code&gt;, we&amp;rsquo;re promising that we&amp;rsquo;ll uphold the invariants that the compiler can&amp;rsquo;t verify.</source>
          <target state="translated">Используя &lt;code&gt;unsafe impl&lt;/code&gt; , мы обещаем , что будем поддерживать инварианты, которые компилятор не может проверить.</target>
        </trans-unit>
        <trans-unit id="9f1a9fce35b987ffd7d1760b4240dc3939988c2c" translate="yes" xml:space="preserve">
          <source>By using a trait bound with an &lt;code&gt;impl&lt;/code&gt; block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits. For example, the type &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; in Listing 10-16 always implements the &lt;code&gt;new&lt;/code&gt; function. But &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; only implements the &lt;code&gt;cmp_display&lt;/code&gt; method if its inner type &lt;code&gt;T&lt;/code&gt; implements the &lt;code&gt;PartialOrd&lt;/code&gt; trait that enables comparison &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;Display&lt;/code&gt; trait that enables printing.</source>
          <target state="translated">Используя признак, связанный с блоком &lt;code&gt;impl&lt;/code&gt; , который использует параметры универсального типа, мы можем реализовать методы условно для типов, которые реализуют указанные признаки. Например, тип &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; в листинге 10-16 всегда реализует &lt;code&gt;new&lt;/code&gt; функцию. Но &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;/code&gt; только реализует &lt;code&gt;cmp_display&lt;/code&gt; метод , если его внутренний тип &lt;code&gt;T&lt;/code&gt; реализует &lt;code&gt;PartialOrd&lt;/code&gt; черта , которая позволяет сравнивать &lt;em&gt;и&lt;/em&gt; с &lt;code&gt;Display&lt;/code&gt; черта , которая позволяет печатать.</target>
        </trans-unit>
        <trans-unit id="e575a61c7bb4198f04719172d2b19e840714927a" translate="yes" xml:space="preserve">
          <source>By using modules, we can group related definitions together and name why they&amp;rsquo;re related. Programmers using this code would have an easier time finding the definitions they wanted to use because they could navigate the code based on the groups rather than having to read through all the definitions. Programmers adding new functionality to this code would know where to place the code to keep the program organized.</source>
          <target state="translated">Используя модули, мы можем сгруппировать связанные определения вместе и назвать, почему они связаны. Программистам, использующим этот код, было бы легче найти определения, которые они хотели бы использовать, потому что они могли бы перемещаться по коду на основе групп, вместо того, чтобы читать все определения. Программисты, добавляющие в этот код новые функции, будут знать, где разместить код, чтобы программа оставалась организованной.</target>
        </trans-unit>
        <trans-unit id="0b9231ce9a42a6d6d2c8f8b26aa846a1ea4f8ea3" translate="yes" xml:space="preserve">
          <source>By using these and other tools in the Rust ecosystem, developers can be productive while writing systems-level code.</source>
          <target state="translated">Используя эти и другие инструменты в экосистеме Rust,разработчики могут быть продуктивными при написании кода на системном уровне.</target>
        </trans-unit>
        <trans-unit id="2b10818a6a4d9d5c0ec3347fc6c8f03ab8bee8b6" translate="yes" xml:space="preserve">
          <source>By using this method, you are making a promise about the &lt;code&gt;P::Deref&lt;/code&gt; and &lt;code&gt;P::DerefMut&lt;/code&gt; implementations, if they exist. Most importantly, they must not move out of their &lt;code&gt;self&lt;/code&gt; arguments: &lt;code&gt;Pin::as_mut&lt;/code&gt; and &lt;code&gt;Pin::as_ref&lt;/code&gt; will call &lt;code&gt;DerefMut::deref_mut&lt;/code&gt; and &lt;code&gt;Deref::deref&lt;/code&gt;&lt;em&gt;on the pinned pointer&lt;/em&gt; and expect these methods to uphold the pinning invariants. Moreover, by calling this method you promise that the reference &lt;code&gt;P&lt;/code&gt; dereferences to will not be moved out of again; in particular, it must not be possible to obtain a &lt;code&gt;&amp;amp;mut P::Target&lt;/code&gt; and then move out of that reference (using, for example &lt;a href=&quot;../mem/fn.swap&quot;&gt;&lt;code&gt;mem::swap&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Используя этот метод, вы &lt;code&gt;P::DerefMut&lt;/code&gt; реализовать &lt;code&gt;P::Deref&lt;/code&gt; и P :: DerefMut , если они существуют. Самое главное, они не должны выходить за пределы своих аргументов &lt;code&gt;self&lt;/code&gt; : &lt;code&gt;Pin::as_mut&lt;/code&gt; и &lt;code&gt;Pin::as_ref&lt;/code&gt; будут вызывать &lt;code&gt;DerefMut::deref_mut&lt;/code&gt; и &lt;code&gt;Deref::deref&lt;/code&gt; &lt;em&gt;на закрепленном указателе&lt;/em&gt; и ожидать, что эти методы будут поддерживать инварианты закрепления. Более того, вызывая этот метод, вы обещаете, что ссылка &lt;code&gt;P&lt;/code&gt; ,на которую разыменованы, не будет снова удалена; в частности, не должно быть возможности получить &lt;code&gt;&amp;amp;mut P::Target&lt;/code&gt; и затем выйти за пределы этой ссылки (например, используя &lt;a href=&quot;../mem/fn.swap&quot;&gt; &lt;code&gt;mem::swap&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="bcdb56a053eed7c5213a43f696d9db1ac84162fc" translate="yes" xml:space="preserve">
          <source>By using trait bounds we can accept arguments of different types as long as they can be converted to the specified type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">Используя свойство ограничивающих мы можем принять аргументы различных типов до тех пор , как они могут быть преобразованы в указанном типе &lt;code&gt;T&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="301603101f50fc1a91e6b20fad60e030ba9789b8" translate="yes" xml:space="preserve">
          <source>By wrapping the stream with a &lt;code&gt;BufWriter&amp;lt;W&amp;gt;&lt;/code&gt;, these ten writes are all grouped together by the buffer and will all be written out in one system call when the &lt;code&gt;stream&lt;/code&gt; is flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dae0e28ac851e86945ef16395330c4f51fd0970" translate="yes" xml:space="preserve">
          <source>By wrapping the stream with a &lt;code&gt;BufWriter&lt;/code&gt;, these ten writes are all grouped together by the buffer, and will all be written out in one system call when the &lt;code&gt;stream&lt;/code&gt; is dropped.</source>
          <target state="translated">Если обернуть поток &lt;code&gt;BufWriter&lt;/code&gt; , все эти десять операций записи группируются вместе с помощью буфера, и все они будут записаны одним системным вызовом при отбрасывании &lt;code&gt;stream&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1548ce31fadb001aea0a12a579d52d9306c7253a" translate="yes" xml:space="preserve">
          <source>Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type &lt;code&gt;T&lt;/code&gt;, while doing nothing at all.</source>
          <target state="translated">Обходит обычные проверки инициализации памяти в Rust, делая вид, что выдает значение типа &lt;code&gt;T&lt;/code&gt; , при этом ничего не делая.</target>
        </trans-unit>
        <trans-unit id="7803ee252527503b67d1eeb0deb252622746cebd" translate="yes" xml:space="preserve">
          <source>Byte</source>
          <target state="translated">Byte</target>
        </trans-unit>
        <trans-unit id="afdbaede89ef0f8a02124c499ef64ef1f0406d22" translate="yes" xml:space="preserve">
          <source>Byte (&lt;code&gt;u8&lt;/code&gt; only)</source>
          <target state="translated">Байт ( только &lt;code&gt;u8&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="e461b64db66675f3379c1e15d16c6c99827a8b32" translate="yes" xml:space="preserve">
          <source>Byte and byte string literals</source>
          <target state="translated">Байтовые и байтовые строковые литералы</target>
        </trans-unit>
        <trans-unit id="bed6860ca009a5f59b4930b17f9fae2513fd51cb" translate="yes" xml:space="preserve">
          <source>Byte escapes</source>
          <target state="translated">Байтовые побеги</target>
        </trans-unit>
        <trans-unit id="2bf9a238164dde110e7112a731c7b6d180525024" translate="yes" xml:space="preserve">
          <source>Byte literals</source>
          <target state="translated">Байтовые литералы</target>
        </trans-unit>
        <trans-unit id="65c69de6b60d275943eb0b345c38a4da863d03c4" translate="yes" xml:space="preserve">
          <source>Byte order mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7860363275fd51d964677e4db11dc87fb2b83e0" translate="yes" xml:space="preserve">
          <source>Byte string</source>
          <target state="translated">Байтовая строка</target>
        </trans-unit>
        <trans-unit id="7510135fa5665d61b3d40af81c44ebe6703847a9" translate="yes" xml:space="preserve">
          <source>Byte string literal; constructs a &lt;code&gt;[u8]&lt;/code&gt; instead of a string</source>
          <target state="translated">Литерал байтовой строки; создает &lt;code&gt;[u8]&lt;/code&gt; вместо строки</target>
        </trans-unit>
        <trans-unit id="d5501080013d3dce57e266b31385c7ea19dd9672" translate="yes" xml:space="preserve">
          <source>Byte string literals</source>
          <target state="translated">Байтовые строки литералы</target>
        </trans-unit>
        <trans-unit id="013842b4ad25a64e13616ea1267e8fb94bd63a6f" translate="yes" xml:space="preserve">
          <source>Byte-based interfaces are unwieldy and can be inefficient, as we'd need to be making near-constant calls to the operating system. To help with this, &lt;code&gt;std::io&lt;/code&gt; comes with two structs, &lt;a href=&quot;struct.bufreader&quot;&gt;&lt;code&gt;BufReader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;struct.bufwriter&quot;&gt;&lt;code&gt;BufWriter&lt;/code&gt;&lt;/a&gt;, which wrap readers and writers. The wrapper uses a buffer, reducing the number of calls and providing nicer methods for accessing exactly what you want.</source>
          <target state="translated">Интерфейсы на основе байтов громоздки и могут быть неэффективными, поскольку нам нужно будет делать почти постоянные вызовы операционной системы. Чтобы помочь с этим, &lt;code&gt;std::io&lt;/code&gt; поставляется с двумя структурами, &lt;a href=&quot;struct.bufreader&quot;&gt; &lt;code&gt;BufReader&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;struct.bufwriter&quot;&gt; &lt;code&gt;BufWriter&lt;/code&gt; &lt;/a&gt; , которые обертывают читателей и писателей. Оболочка использует буфер, уменьшая количество вызовов и предоставляя более удобные методы для доступа именно к тому, что вы хотите.</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="f4b810da1a34c6717e9522d90aa84dd16327cb38" translate="yes" xml:space="preserve">
          <source>Bytes &lt;code&gt;0..old_layout.size()&lt;/code&gt; are preserved from the original allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b74d3f6f2a9ba3378b8d5ad47f1a4ae59fcd37" translate="yes" xml:space="preserve">
          <source>Bytes &lt;code&gt;old_layout.size()..old_size&lt;/code&gt; will either be preserved or zeroed, depending on the allocator implementation. &lt;code&gt;old_size&lt;/code&gt; refers to the size of the memory block prior to the &lt;code&gt;grow_zeroed&lt;/code&gt; call, which may be larger than the size that was originally requested when it was allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5598f7ac23eed1d65ff56a4e36412084f03533d" translate="yes" xml:space="preserve">
          <source>Bytes &lt;code&gt;old_size..new_size&lt;/code&gt; are zeroed. &lt;code&gt;new_size&lt;/code&gt; refers to the size of the memory block returned by the &lt;code&gt;grow_zeroed&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac774cda628eb294788ac5a8af4246ebdb046c2e" translate="yes" xml:space="preserve">
          <source>Bytes and Scalar Values and Grapheme Clusters! Oh My!</source>
          <target state="translated">Байты и Скалярные Значения и Кластеры Графем! О боже!</target>
        </trans-unit>
        <trans-unit id="63a26fef0a88c04dcaa35220a18f6ec6efa06bb9" translate="yes" xml:space="preserve">
          <source>Bytes::all</source>
          <target state="translated">Bytes::all</target>
        </trans-unit>
        <trans-unit id="ce7f0f3ceb8a803663be41eda4062efc6e909fc1" translate="yes" xml:space="preserve">
          <source>Bytes::any</source>
          <target state="translated">Bytes::any</target>
        </trans-unit>
        <trans-unit id="979369045d5514f553522214d3aeb625b48dd8a9" translate="yes" xml:space="preserve">
          <source>Bytes::borrow</source>
          <target state="translated">Bytes::borrow</target>
        </trans-unit>
        <trans-unit id="113f2dc7029b7c717fa9381d4e2943d9b1b2fc76" translate="yes" xml:space="preserve">
          <source>Bytes::borrow_mut</source>
          <target state="translated">Bytes::borrow_mut</target>
        </trans-unit>
        <trans-unit id="34427e43eec5e510b45622026cd37a560d9c2986" translate="yes" xml:space="preserve">
          <source>Bytes::by_ref</source>
          <target state="translated">Bytes::by_ref</target>
        </trans-unit>
        <trans-unit id="f07eec0f48fad142ac4fee1d3559e7e8d852d460" translate="yes" xml:space="preserve">
          <source>Bytes::chain</source>
          <target state="translated">Bytes::chain</target>
        </trans-unit>
        <trans-unit id="e0bf1210a39ee968daf6f1af8bf1ba9b5fc128dd" translate="yes" xml:space="preserve">
          <source>Bytes::clone</source>
          <target state="translated">Bytes::clone</target>
        </trans-unit>
        <trans-unit id="d328e30cabdbfda128a510cf1e8c0e446be3fec8" translate="yes" xml:space="preserve">
          <source>Bytes::clone_from</source>
          <target state="translated">Bytes::clone_from</target>
        </trans-unit>
        <trans-unit id="297e685afff3be463f3a3c3239b3251c10cb9c58" translate="yes" xml:space="preserve">
          <source>Bytes::clone_into</source>
          <target state="translated">Bytes::clone_into</target>
        </trans-unit>
        <trans-unit id="df2a47344e3e5b26dba12c9f96d298455119f06c" translate="yes" xml:space="preserve">
          <source>Bytes::cloned</source>
          <target state="translated">Bytes::cloned</target>
        </trans-unit>
        <trans-unit id="8c02ce01cfc4f2e89b9e4d7eed3369aa07faf8c3" translate="yes" xml:space="preserve">
          <source>Bytes::cmp</source>
          <target state="translated">Bytes::cmp</target>
        </trans-unit>
        <trans-unit id="299642d3a1e23a4fa629457b5fe1a7d7023f1ab5" translate="yes" xml:space="preserve">
          <source>Bytes::collect</source>
          <target state="translated">Bytes::collect</target>
        </trans-unit>
        <trans-unit id="6f693335f9495019383b9eadbf3b449bcfc675f9" translate="yes" xml:space="preserve">
          <source>Bytes::copied</source>
          <target state="translated">Bytes::copied</target>
        </trans-unit>
        <trans-unit id="93d1e678c86a68151617f0b02af7cadb48251558" translate="yes" xml:space="preserve">
          <source>Bytes::count</source>
          <target state="translated">Bytes::count</target>
        </trans-unit>
        <trans-unit id="1e5c00a470b7fc4f8da25723aad0fc52e134f397" translate="yes" xml:space="preserve">
          <source>Bytes::cycle</source>
          <target state="translated">Bytes::cycle</target>
        </trans-unit>
        <trans-unit id="9d81621cbab864e41b9591bee2a211c1e6fb3870" translate="yes" xml:space="preserve">
          <source>Bytes::enumerate</source>
          <target state="translated">Bytes::enumerate</target>
        </trans-unit>
        <trans-unit id="ea17a535e18dd3c17944b57230746af970ccf214" translate="yes" xml:space="preserve">
          <source>Bytes::eq</source>
          <target state="translated">Bytes::eq</target>
        </trans-unit>
        <trans-unit id="491e10ca5d759167723a7ee86c3ca2eea1265ab7" translate="yes" xml:space="preserve">
          <source>Bytes::filter</source>
          <target state="translated">Bytes::filter</target>
        </trans-unit>
        <trans-unit id="9742812b0b1477fbb5396ffff48eb2034a65761d" translate="yes" xml:space="preserve">
          <source>Bytes::filter_map</source>
          <target state="translated">Bytes::filter_map</target>
        </trans-unit>
        <trans-unit id="63e7f3cfad0e9eae54402838e01bfca54ca3afa5" translate="yes" xml:space="preserve">
          <source>Bytes::find</source>
          <target state="translated">Bytes::find</target>
        </trans-unit>
        <trans-unit id="290c24197673b5bfcbef8c08eea1c3d3b80c4622" translate="yes" xml:space="preserve">
          <source>Bytes::find_map</source>
          <target state="translated">Bytes::find_map</target>
        </trans-unit>
        <trans-unit id="9f757e2b209fe7676c23fb7de2d9a9666f266a57" translate="yes" xml:space="preserve">
          <source>Bytes::flat_map</source>
          <target state="translated">Bytes::flat_map</target>
        </trans-unit>
        <trans-unit id="ebffc4bee04033b63ddade2d5c137b7551135bbd" translate="yes" xml:space="preserve">
          <source>Bytes::flatten</source>
          <target state="translated">Bytes::flatten</target>
        </trans-unit>
        <trans-unit id="59f9148fe24ec4969d305fc0671cc3b707da545a" translate="yes" xml:space="preserve">
          <source>Bytes::fmt</source>
          <target state="translated">Bytes::fmt</target>
        </trans-unit>
        <trans-unit id="a8078f4655b1978965a5909b5351cb14c6583a92" translate="yes" xml:space="preserve">
          <source>Bytes::fold</source>
          <target state="translated">Bytes::fold</target>
        </trans-unit>
        <trans-unit id="7f2d08f4da0fc0d0fb55752871e004cb4680946d" translate="yes" xml:space="preserve">
          <source>Bytes::for_each</source>
          <target state="translated">Bytes::for_each</target>
        </trans-unit>
        <trans-unit id="62699a9360bcc212fa6c249680ba5b7f48e3fb42" translate="yes" xml:space="preserve">
          <source>Bytes::from</source>
          <target state="translated">Bytes::from</target>
        </trans-unit>
        <trans-unit id="603aaacbdc014366acd2253fbfbd1087387d3bd3" translate="yes" xml:space="preserve">
          <source>Bytes::fuse</source>
          <target state="translated">Bytes::fuse</target>
        </trans-unit>
        <trans-unit id="ef1515771c9b976e1008ae36cc109565b4569ae9" translate="yes" xml:space="preserve">
          <source>Bytes::ge</source>
          <target state="translated">Bytes::ge</target>
        </trans-unit>
        <trans-unit id="445e8b743c0007a524c7e482f8c83e4f69760410" translate="yes" xml:space="preserve">
          <source>Bytes::gt</source>
          <target state="translated">Bytes::gt</target>
        </trans-unit>
        <trans-unit id="24ede3c149e7de7883c58aaa99ee5d5463be74e6" translate="yes" xml:space="preserve">
          <source>Bytes::inspect</source>
          <target state="translated">Bytes::inspect</target>
        </trans-unit>
        <trans-unit id="8cfa8a5aca1d21185175b454e814b3c9674137dc" translate="yes" xml:space="preserve">
          <source>Bytes::into</source>
          <target state="translated">Bytes::into</target>
        </trans-unit>
        <trans-unit id="28993249bc6a265b1f1403816b2a9c4d5624ad5b" translate="yes" xml:space="preserve">
          <source>Bytes::into_iter</source>
          <target state="translated">Bytes::into_iter</target>
        </trans-unit>
        <trans-unit id="290c12fce35e73f7ad4e780c36b8daeaf1f6eaf9" translate="yes" xml:space="preserve">
          <source>Bytes::is_empty</source>
          <target state="translated">Bytes::is_empty</target>
        </trans-unit>
        <trans-unit id="37772f76db83eabf7ef6ed6382f4a6562ec04eaa" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted</source>
          <target state="translated">Bytes::is_sorted</target>
        </trans-unit>
        <trans-unit id="63f09c7e5213825da442ff7939106416cc2db665" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted_by</source>
          <target state="translated">Bytes::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="b26f21acb6f08d8c9a5ac1405c3ead0d4c9a6b00" translate="yes" xml:space="preserve">
          <source>Bytes::is_sorted_by_key</source>
          <target state="translated">Bytes::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="f50aedc8dbbe9f4f7c0a8193c92f7fe881b11817" translate="yes" xml:space="preserve">
          <source>Bytes::last</source>
          <target state="translated">Bytes::last</target>
        </trans-unit>
        <trans-unit id="725cf533de1247b9f7939a230859f03c71c3a394" translate="yes" xml:space="preserve">
          <source>Bytes::le</source>
          <target state="translated">Bytes::le</target>
        </trans-unit>
        <trans-unit id="ae500d3c2531704059d772fbff739f3873572e45" translate="yes" xml:space="preserve">
          <source>Bytes::len</source>
          <target state="translated">Bytes::len</target>
        </trans-unit>
        <trans-unit id="b194acd634d0bc66745521f9549d62c66e9a152e" translate="yes" xml:space="preserve">
          <source>Bytes::lt</source>
          <target state="translated">Bytes::lt</target>
        </trans-unit>
        <trans-unit id="61ba21505c7ffe82b863e8bcbc73617c7e13b85c" translate="yes" xml:space="preserve">
          <source>Bytes::map</source>
          <target state="translated">Bytes::map</target>
        </trans-unit>
        <trans-unit id="fe2bc9537a5830454b8a500254016c0d67be2211" translate="yes" xml:space="preserve">
          <source>Bytes::max</source>
          <target state="translated">Bytes::max</target>
        </trans-unit>
        <trans-unit id="43d95dea33020faf006b7b4de468897537052a42" translate="yes" xml:space="preserve">
          <source>Bytes::max_by</source>
          <target state="translated">Bytes::max_by</target>
        </trans-unit>
        <trans-unit id="f7973f4371d6448647f6bb7f82a3cd4cc0be52b8" translate="yes" xml:space="preserve">
          <source>Bytes::max_by_key</source>
          <target state="translated">Bytes::max_by_key</target>
        </trans-unit>
        <trans-unit id="c3d094313a068051eedc54593c00089e5d5e0eaa" translate="yes" xml:space="preserve">
          <source>Bytes::min</source>
          <target state="translated">Bytes::min</target>
        </trans-unit>
        <trans-unit id="a26247387b6acf6339ec71745edbdff81c2ade56" translate="yes" xml:space="preserve">
          <source>Bytes::min_by</source>
          <target state="translated">Bytes::min_by</target>
        </trans-unit>
        <trans-unit id="f5a98f7f6167a1b442d3efa2009d49ad462460d2" translate="yes" xml:space="preserve">
          <source>Bytes::min_by_key</source>
          <target state="translated">Bytes::min_by_key</target>
        </trans-unit>
        <trans-unit id="be90f56db4ada597b587d016fd327003ea0bc760" translate="yes" xml:space="preserve">
          <source>Bytes::ne</source>
          <target state="translated">Bytes::ne</target>
        </trans-unit>
        <trans-unit id="d23038a4910063cad42deff4ad9cf09d48b283fc" translate="yes" xml:space="preserve">
          <source>Bytes::next</source>
          <target state="translated">Bytes::next</target>
        </trans-unit>
        <trans-unit id="8748f7bca019be483c7116e17eaefea91e8337c8" translate="yes" xml:space="preserve">
          <source>Bytes::next_back</source>
          <target state="translated">Bytes::next_back</target>
        </trans-unit>
        <trans-unit id="1a968f4f100322f4def3905de036617309b7b5ca" translate="yes" xml:space="preserve">
          <source>Bytes::nth</source>
          <target state="translated">Bytes::nth</target>
        </trans-unit>
        <trans-unit id="7015bc5abccea19494e4724bb7c18d8ce992e0ad" translate="yes" xml:space="preserve">
          <source>Bytes::nth_back</source>
          <target state="translated">Bytes::nth_back</target>
        </trans-unit>
        <trans-unit id="984cab5be49f32fc6d25120ded4daae67af8fff5" translate="yes" xml:space="preserve">
          <source>Bytes::partial_cmp</source>
          <target state="translated">Bytes::partial_cmp</target>
        </trans-unit>
        <trans-unit id="c5a60b3f92a5a9558e9901c7ea8df4400c6ec0e1" translate="yes" xml:space="preserve">
          <source>Bytes::partition</source>
          <target state="translated">Bytes::partition</target>
        </trans-unit>
        <trans-unit id="fd964e1b6678d8175a0f6d2defa63df03aeae2a2" translate="yes" xml:space="preserve">
          <source>Bytes::peekable</source>
          <target state="translated">Bytes::peekable</target>
        </trans-unit>
        <trans-unit id="7a779a538f4d43ba65ab857aaed4f38c84785133" translate="yes" xml:space="preserve">
          <source>Bytes::position</source>
          <target state="translated">Bytes::position</target>
        </trans-unit>
        <trans-unit id="e26b896020a4dd543d300e63cedf53c6c693b23f" translate="yes" xml:space="preserve">
          <source>Bytes::product</source>
          <target state="translated">Bytes::product</target>
        </trans-unit>
        <trans-unit id="9520a4396d3dd25e6d144b70f3b61774361a54c7" translate="yes" xml:space="preserve">
          <source>Bytes::rev</source>
          <target state="translated">Bytes::rev</target>
        </trans-unit>
        <trans-unit id="c91ff74ba08c7c6ea28c25fc12b5996c8b1497a4" translate="yes" xml:space="preserve">
          <source>Bytes::rfind</source>
          <target state="translated">Bytes::rfind</target>
        </trans-unit>
        <trans-unit id="6d8c28436a470bc527732d151cc6081f1ba37f43" translate="yes" xml:space="preserve">
          <source>Bytes::rfold</source>
          <target state="translated">Bytes::rfold</target>
        </trans-unit>
        <trans-unit id="952ea423fc26cfa8babe6fc58fba9d219ed14f15" translate="yes" xml:space="preserve">
          <source>Bytes::rposition</source>
          <target state="translated">Bytes::rposition</target>
        </trans-unit>
        <trans-unit id="5ca3ed55d60687599d621bf21650f4ef1969fe93" translate="yes" xml:space="preserve">
          <source>Bytes::scan</source>
          <target state="translated">Bytes::scan</target>
        </trans-unit>
        <trans-unit id="ab036dbdadf0542cb3bddc197d995e0027d66c95" translate="yes" xml:space="preserve">
          <source>Bytes::size_hint</source>
          <target state="translated">Bytes::size_hint</target>
        </trans-unit>
        <trans-unit id="7aea93693f858b30cc323b010a39049b5066d25e" translate="yes" xml:space="preserve">
          <source>Bytes::skip</source>
          <target state="translated">Bytes::skip</target>
        </trans-unit>
        <trans-unit id="1238ebec8be4b2a081cb75d76acedcc89efe036e" translate="yes" xml:space="preserve">
          <source>Bytes::skip_while</source>
          <target state="translated">Bytes::skip_while</target>
        </trans-unit>
        <trans-unit id="9c76a1cf5e4f9d6e469d340364ab845f02735723" translate="yes" xml:space="preserve">
          <source>Bytes::step_by</source>
          <target state="translated">Bytes::step_by</target>
        </trans-unit>
        <trans-unit id="79350f102ae506e77c2e1822a20d032e242e08cf" translate="yes" xml:space="preserve">
          <source>Bytes::sum</source>
          <target state="translated">Bytes::sum</target>
        </trans-unit>
        <trans-unit id="4668fe7f8a3335637251054d9c9c06434224fd9e" translate="yes" xml:space="preserve">
          <source>Bytes::take</source>
          <target state="translated">Bytes::take</target>
        </trans-unit>
        <trans-unit id="8188c9f2c65727da6ad6418e7435a0a4d4ae1b63" translate="yes" xml:space="preserve">
          <source>Bytes::take_while</source>
          <target state="translated">Bytes::take_while</target>
        </trans-unit>
        <trans-unit id="1e3d429d72ab5a83b39ca62419e469d95fab4a82" translate="yes" xml:space="preserve">
          <source>Bytes::to_owned</source>
          <target state="translated">Bytes::to_owned</target>
        </trans-unit>
        <trans-unit id="557ed7e76c591066179253aea6bd6a17cfa01f82" translate="yes" xml:space="preserve">
          <source>Bytes::try_fold</source>
          <target state="translated">Bytes::try_fold</target>
        </trans-unit>
        <trans-unit id="3a174ee7598d8449eeadbf2f070bb9163bfdbeef" translate="yes" xml:space="preserve">
          <source>Bytes::try_for_each</source>
          <target state="translated">Bytes::try_for_each</target>
        </trans-unit>
        <trans-unit id="35ddd98f9595299a1b8243f3586e6b1c8d7fa048" translate="yes" xml:space="preserve">
          <source>Bytes::try_from</source>
          <target state="translated">Bytes::try_from</target>
        </trans-unit>
        <trans-unit id="fdf97aa086611d5f965642e0fa40ebed09455a54" translate="yes" xml:space="preserve">
          <source>Bytes::try_into</source>
          <target state="translated">Bytes::try_into</target>
        </trans-unit>
        <trans-unit id="e81eae2ced7b712e89d1325cb3b29c2687db0961" translate="yes" xml:space="preserve">
          <source>Bytes::try_rfold</source>
          <target state="translated">Bytes::try_rfold</target>
        </trans-unit>
        <trans-unit id="93ac1e902ab13110128cd8b40340c9498d027d14" translate="yes" xml:space="preserve">
          <source>Bytes::type_id</source>
          <target state="translated">Bytes::type_id</target>
        </trans-unit>
        <trans-unit id="b8daa236d91d2a612c5d7612ed9d46cc96bcda6a" translate="yes" xml:space="preserve">
          <source>Bytes::unzip</source>
          <target state="translated">Bytes::unzip</target>
        </trans-unit>
        <trans-unit id="47375bdc573035dbf1f0a151a6ddce0a88145906" translate="yes" xml:space="preserve">
          <source>Bytes::zip</source>
          <target state="translated">Bytes::zip</target>
        </trans-unit>
        <trans-unit id="10de289426da74ae5996820227d1ae99ba3ca1bf" translate="yes" xml:space="preserve">
          <source>C chars are most commonly used to make C strings. Unlike Rust, where the length of a string is included alongside the string, C strings mark the end of a string with the character &lt;code&gt;'\0'&lt;/code&gt;. See &lt;a href=&quot;../../ffi/struct.cstr&quot;&gt;&lt;code&gt;CStr&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">Символы C обычно используются для создания строк C. В отличие от Rust, где длина строки указывается вместе со строкой, строки C отмечают конец строки с помощью символа &lt;code&gt;'\0'&lt;/code&gt; . См. &lt;a href=&quot;../../ffi/struct.cstr&quot;&gt; &lt;code&gt;CStr&lt;/code&gt; &lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="ec4ff1ee46ab9f978c49b43b23216a55c335e53d" translate="yes" xml:space="preserve">
          <source>C strings are different from Rust strings:</source>
          <target state="translated">С-образные струны отличаются от ржавых:</target>
        </trans-unit>
        <trans-unit id="4d0a3cd3d0843046e9dc208601e2f872fffb7682" translate="yes" xml:space="preserve">
          <source>C#: attributes</source>
          <target state="translated">C#:атрибуты</target>
        </trans-unit>
        <trans-unit id="8f7e71dd73911b35b0704326383804842772d25d" translate="yes" xml:space="preserve">
          <source>C++: references, RAII, smart pointers, move semantics, monomorphization, memory model</source>
          <target state="translated">C++:ссылки,RAII,интеллектуальные указатели,семантика перемещения,мономорфизация,модель памяти</target>
        </trans-unit>
        <trans-unit id="d6f809f9a8c2683f3d057fe632dca0828c0f7e4a" translate="yes" xml:space="preserve">
          <source>C-like enum</source>
          <target state="translated">C-подобная перепонка</target>
        </trans-unit>
        <trans-unit id="ce41a223396980a3e03634cbe778c52da0c75b6e" translate="yes" xml:space="preserve">
          <source>CAPITAL</source>
          <target state="translated">CAPITAL</target>
        </trans-unit>
        <trans-unit id="ee6b489f0289728c3819dc331f1663c96ca0785c" translate="yes" xml:space="preserve">
          <source>CHAR_LITERAL</source>
          <target state="translated">CHAR_LITERAL</target>
        </trans-unit>
        <trans-unit id="69b56ccff3a6c4424734f57c05d156739380a264" translate="yes" xml:space="preserve">
          <source>CHAR_LITERAL :</source>
          <target state="translated">CHAR_LITERAL :</target>
        </trans-unit>
        <trans-unit id="c855bb9cac705e9e3b723e75b21f4d07cd808dc4" translate="yes" xml:space="preserve">
          <source>CStr</source>
          <target state="translated">CStr</target>
        </trans-unit>
        <trans-unit id="6d8a542fd21b3338ea60a85ae47f0c199d520fae" translate="yes" xml:space="preserve">
          <source>CStr::as_ptr</source>
          <target state="translated">CStr::as_ptr</target>
        </trans-unit>
        <trans-unit id="1f95e3e4ec8be2f019c66897e9c3b6624d851e96" translate="yes" xml:space="preserve">
          <source>CStr::as_ref</source>
          <target state="translated">CStr::as_ref</target>
        </trans-unit>
        <trans-unit id="d700139dd31629deaacc42e4bc9a9d4d45caef0d" translate="yes" xml:space="preserve">
          <source>CStr::borrow</source>
          <target state="translated">CStr::borrow</target>
        </trans-unit>
        <trans-unit id="cc55b0f7e0eedd59a730a23f4f91745521f7abe7" translate="yes" xml:space="preserve">
          <source>CStr::borrow_mut</source>
          <target state="translated">CStr::borrow_mut</target>
        </trans-unit>
        <trans-unit id="fcca1c0586380cf9ec8aaa4478ef4dea99e9db80" translate="yes" xml:space="preserve">
          <source>CStr::clamp</source>
          <target state="translated">CStr::clamp</target>
        </trans-unit>
        <trans-unit id="95ad44c6acf49d720b284daa7324a4c4e8ee9b77" translate="yes" xml:space="preserve">
          <source>CStr::clone_into</source>
          <target state="translated">CStr::clone_into</target>
        </trans-unit>
        <trans-unit id="17ee9041b05f19b08c9a207a0b264abb06217788" translate="yes" xml:space="preserve">
          <source>CStr::cmp</source>
          <target state="translated">CStr::cmp</target>
        </trans-unit>
        <trans-unit id="ef2eafc91f57240446e72aeaeeb2a32e68e97a8b" translate="yes" xml:space="preserve">
          <source>CStr::default</source>
          <target state="translated">CStr::default</target>
        </trans-unit>
        <trans-unit id="54ffaa14459cec5f2273ff104ef1742c78574036" translate="yes" xml:space="preserve">
          <source>CStr::eq</source>
          <target state="translated">CStr::eq</target>
        </trans-unit>
        <trans-unit id="0c4c69764320e8a42e866e61f90c9ac980102de3" translate="yes" xml:space="preserve">
          <source>CStr::fmt</source>
          <target state="translated">CStr::fmt</target>
        </trans-unit>
        <trans-unit id="e9fd5cc915fb0074a2adb82bcea1b9cf07e8ac22" translate="yes" xml:space="preserve">
          <source>CStr::from</source>
          <target state="translated">CStr::from</target>
        </trans-unit>
        <trans-unit id="fef3690a19e427664444d03dfffa43ae3fa6be59" translate="yes" xml:space="preserve">
          <source>CStr::from_bytes_with_nul</source>
          <target state="translated">CStr::from_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="75111e68b3cace6dc1f25160989a55c75672d185" translate="yes" xml:space="preserve">
          <source>CStr::from_bytes_with_nul_unchecked</source>
          <target state="translated">CStr::from_bytes_with_nul_unchecked</target>
        </trans-unit>
        <trans-unit id="137aefe4f0efa206a17e644e536709f7164f7036" translate="yes" xml:space="preserve">
          <source>CStr::from_ptr</source>
          <target state="translated">CStr::from_ptr</target>
        </trans-unit>
        <trans-unit id="3445b2e9c6d30848e46a0c458e92c18f5478648a" translate="yes" xml:space="preserve">
          <source>CStr::ge</source>
          <target state="translated">CStr::ge</target>
        </trans-unit>
        <trans-unit id="728fbce40efc66cebd46be16b8f1cf779090113f" translate="yes" xml:space="preserve">
          <source>CStr::gt</source>
          <target state="translated">CStr::gt</target>
        </trans-unit>
        <trans-unit id="be0afeee394794477755e07edeb627b53d61bdf3" translate="yes" xml:space="preserve">
          <source>CStr::hash</source>
          <target state="translated">CStr::hash</target>
        </trans-unit>
        <trans-unit id="bb72c84064e334eba596cbe9844aa70e70ee849a" translate="yes" xml:space="preserve">
          <source>CStr::hash_slice</source>
          <target state="translated">CStr::hash_slice</target>
        </trans-unit>
        <trans-unit id="c6bf567f09e2b2bd042059269552397aad871cae" translate="yes" xml:space="preserve">
          <source>CStr::into_c_string</source>
          <target state="translated">CStr::into_c_string</target>
        </trans-unit>
        <trans-unit id="69ab262092debd4569770196660f4febe98420dc" translate="yes" xml:space="preserve">
          <source>CStr::le</source>
          <target state="translated">CStr::le</target>
        </trans-unit>
        <trans-unit id="f1e9e41f63590d10b51a2a294c025ee665034901" translate="yes" xml:space="preserve">
          <source>CStr::lt</source>
          <target state="translated">CStr::lt</target>
        </trans-unit>
        <trans-unit id="348c458cc35acb0213f545d380dceae16ee7b792" translate="yes" xml:space="preserve">
          <source>CStr::max</source>
          <target state="translated">CStr::max</target>
        </trans-unit>
        <trans-unit id="000883cbb32a65bd5d06415a6ea2b885840b8dea" translate="yes" xml:space="preserve">
          <source>CStr::min</source>
          <target state="translated">CStr::min</target>
        </trans-unit>
        <trans-unit id="9f6acbf3ad450fc26ec407cb9b07020457f45140" translate="yes" xml:space="preserve">
          <source>CStr::ne</source>
          <target state="translated">CStr::ne</target>
        </trans-unit>
        <trans-unit id="7abb5f8b92e7fded6ba1d77d76970093cc652367" translate="yes" xml:space="preserve">
          <source>CStr::partial_cmp</source>
          <target state="translated">CStr::partial_cmp</target>
        </trans-unit>
        <trans-unit id="65caa5cdc2514ebded75efc52eddee11acbc1be0" translate="yes" xml:space="preserve">
          <source>CStr::to_bytes</source>
          <target state="translated">CStr::to_bytes</target>
        </trans-unit>
        <trans-unit id="e4257d44ce77a2f26ac5c252e77fb8c42eef081a" translate="yes" xml:space="preserve">
          <source>CStr::to_bytes_with_nul</source>
          <target state="translated">CStr::to_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="44ead7aea7dc02cf1786c76006d27afcf9a480c8" translate="yes" xml:space="preserve">
          <source>CStr::to_owned</source>
          <target state="translated">CStr::to_owned</target>
        </trans-unit>
        <trans-unit id="ad62220819d69a73a1b88d26957191be23aa8128" translate="yes" xml:space="preserve">
          <source>CStr::to_str</source>
          <target state="translated">CStr::to_str</target>
        </trans-unit>
        <trans-unit id="f8b6323ef660a7621fafb52f71e3630988494495" translate="yes" xml:space="preserve">
          <source>CStr::to_string_lossy</source>
          <target state="translated">CStr::to_string_lossy</target>
        </trans-unit>
        <trans-unit id="1cc3da01043c1b71efdad57e85215058364b7064" translate="yes" xml:space="preserve">
          <source>CStr::type_id</source>
          <target state="translated">CStr::type_id</target>
        </trans-unit>
        <trans-unit id="10fdabde5da32be8abb7d3568067d963d8ef529e" translate="yes" xml:space="preserve">
          <source>CString</source>
          <target state="translated">CString</target>
        </trans-unit>
        <trans-unit id="52e001b95a1b9cf3308a26a6e981035005eab758" translate="yes" xml:space="preserve">
          <source>CString::as_bytes</source>
          <target state="translated">CString::as_bytes</target>
        </trans-unit>
        <trans-unit id="13cab1dddf5c51f1e61f9eee6b49a5636b9bd814" translate="yes" xml:space="preserve">
          <source>CString::as_bytes_with_nul</source>
          <target state="translated">CString::as_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="797335508475be49326111108ab36a086a72caa3" translate="yes" xml:space="preserve">
          <source>CString::as_c_str</source>
          <target state="translated">CString::as_c_str</target>
        </trans-unit>
        <trans-unit id="7de000d37b9a976d4527e4c70754ba8afd0351c7" translate="yes" xml:space="preserve">
          <source>CString::as_ptr</source>
          <target state="translated">CString::as_ptr</target>
        </trans-unit>
        <trans-unit id="bc0fb3daa028d7ff58f6946c49b2f5b96bc9d602" translate="yes" xml:space="preserve">
          <source>CString::as_ref</source>
          <target state="translated">CString::as_ref</target>
        </trans-unit>
        <trans-unit id="36a33aa7aa5aa4d2d81432af9a988f0f942736ad" translate="yes" xml:space="preserve">
          <source>CString::borrow</source>
          <target state="translated">CString::borrow</target>
        </trans-unit>
        <trans-unit id="8528461b0edd762ff495176944d805d1dde0f8ec" translate="yes" xml:space="preserve">
          <source>CString::borrow_mut</source>
          <target state="translated">CString::borrow_mut</target>
        </trans-unit>
        <trans-unit id="2a50234e42cd54310e4916caa569a9a5aa96a13c" translate="yes" xml:space="preserve">
          <source>CString::clamp</source>
          <target state="translated">CString::clamp</target>
        </trans-unit>
        <trans-unit id="24f213d2e0d20a811ae38f00f41648ad4c89ab8e" translate="yes" xml:space="preserve">
          <source>CString::clone</source>
          <target state="translated">CString::clone</target>
        </trans-unit>
        <trans-unit id="7f0df7e2af8f0985cf2add0b160cbcac287070e5" translate="yes" xml:space="preserve">
          <source>CString::clone_from</source>
          <target state="translated">CString::clone_from</target>
        </trans-unit>
        <trans-unit id="3cabdc5e34bb6bea49169d33f360d4ee04f6ed25" translate="yes" xml:space="preserve">
          <source>CString::clone_into</source>
          <target state="translated">CString::clone_into</target>
        </trans-unit>
        <trans-unit id="d7277d1a271df4865a6f33570de006450712f4a0" translate="yes" xml:space="preserve">
          <source>CString::cmp</source>
          <target state="translated">CString::cmp</target>
        </trans-unit>
        <trans-unit id="baa89c11dc8118d826240007d81976bd7413a3b6" translate="yes" xml:space="preserve">
          <source>CString::default</source>
          <target state="translated">CString::default</target>
        </trans-unit>
        <trans-unit id="347d98047b56cd9966454be82309f4e8529682ff" translate="yes" xml:space="preserve">
          <source>CString::deref</source>
          <target state="translated">CString::deref</target>
        </trans-unit>
        <trans-unit id="ab34938730f49553f7aecab1bb2c2843aa651704" translate="yes" xml:space="preserve">
          <source>CString::drop</source>
          <target state="translated">CString::drop</target>
        </trans-unit>
        <trans-unit id="60996dc07ecd992dd60d5ceec16cc375ea67d6b9" translate="yes" xml:space="preserve">
          <source>CString::eq</source>
          <target state="translated">CString::eq</target>
        </trans-unit>
        <trans-unit id="e70be0cad84fe664f3a9891f184d6d6a7283a582" translate="yes" xml:space="preserve">
          <source>CString::fmt</source>
          <target state="translated">CString::fmt</target>
        </trans-unit>
        <trans-unit id="cbf381ece793251aee2eeadc010afe3c0f4a86e0" translate="yes" xml:space="preserve">
          <source>CString::from</source>
          <target state="translated">CString::from</target>
        </trans-unit>
        <trans-unit id="a143620acced132aa78acde78ce1bd6ab7b63f7e" translate="yes" xml:space="preserve">
          <source>CString::from_raw</source>
          <target state="translated">CString::from_raw</target>
        </trans-unit>
        <trans-unit id="dc9b49de9e2271c2ed3506615af6e6d8c4861395" translate="yes" xml:space="preserve">
          <source>CString::from_vec_unchecked</source>
          <target state="translated">CString::from_vec_unchecked</target>
        </trans-unit>
        <trans-unit id="1a539736b4bb0e500f677893082fd23c664398df" translate="yes" xml:space="preserve">
          <source>CString::ge</source>
          <target state="translated">CString::ge</target>
        </trans-unit>
        <trans-unit id="668f249df3f7a2e1e7a9e166dd065bd8ea489b01" translate="yes" xml:space="preserve">
          <source>CString::gt</source>
          <target state="translated">CString::gt</target>
        </trans-unit>
        <trans-unit id="e46cf065cca5e3cd1f01cce699aa22189f1cb26b" translate="yes" xml:space="preserve">
          <source>CString::hash</source>
          <target state="translated">CString::hash</target>
        </trans-unit>
        <trans-unit id="0833d863637dfd6ed73ce7a7ea13d011f707f04d" translate="yes" xml:space="preserve">
          <source>CString::hash_slice</source>
          <target state="translated">CString::hash_slice</target>
        </trans-unit>
        <trans-unit id="432d0b1932bbe3eb2d6ef0fa7ec29b9397259ae9" translate="yes" xml:space="preserve">
          <source>CString::index</source>
          <target state="translated">CString::index</target>
        </trans-unit>
        <trans-unit id="cd0ce393340efaa8f18ad5cb50aad07f3d2eeea4" translate="yes" xml:space="preserve">
          <source>CString::into</source>
          <target state="translated">CString::into</target>
        </trans-unit>
        <trans-unit id="59bfaa59d401f415773f033626b7896ccc5c6f79" translate="yes" xml:space="preserve">
          <source>CString::into_boxed_c_str</source>
          <target state="translated">CString::into_boxed_c_str</target>
        </trans-unit>
        <trans-unit id="96b480440e4b607a24895b6512350ea1afafd31c" translate="yes" xml:space="preserve">
          <source>CString::into_bytes</source>
          <target state="translated">CString::into_bytes</target>
        </trans-unit>
        <trans-unit id="cc5eefdedab1063685f507370a9d8ab88c34cbda" translate="yes" xml:space="preserve">
          <source>CString::into_bytes_with_nul</source>
          <target state="translated">CString::into_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="aefcc1dc128b6b5cd3742344d58563aafb746370" translate="yes" xml:space="preserve">
          <source>CString::into_raw</source>
          <target state="translated">CString::into_raw</target>
        </trans-unit>
        <trans-unit id="f2693a15445d228f3db30100d51e43c8372af6e2" translate="yes" xml:space="preserve">
          <source>CString::into_string</source>
          <target state="translated">CString::into_string</target>
        </trans-unit>
        <trans-unit id="8bee9b3af5aa7e5de7c21a5ebc17b1acccf5ee8e" translate="yes" xml:space="preserve">
          <source>CString::le</source>
          <target state="translated">CString::le</target>
        </trans-unit>
        <trans-unit id="a139512687d9e3c6e3a92b9473958b2f7df1eb47" translate="yes" xml:space="preserve">
          <source>CString::lt</source>
          <target state="translated">CString::lt</target>
        </trans-unit>
        <trans-unit id="eaaa87d3cf20a5d0e070b569e586340d5ecb604f" translate="yes" xml:space="preserve">
          <source>CString::max</source>
          <target state="translated">CString::max</target>
        </trans-unit>
        <trans-unit id="72b7071a2efa7b6ad66daf332571bc9f191bed64" translate="yes" xml:space="preserve">
          <source>CString::min</source>
          <target state="translated">CString::min</target>
        </trans-unit>
        <trans-unit id="2516dc9b57566e8c9c5ced5df9a3f6886f48ed5c" translate="yes" xml:space="preserve">
          <source>CString::ne</source>
          <target state="translated">CString::ne</target>
        </trans-unit>
        <trans-unit id="057c250d247622d3e7250ede8d66d4f4fe5f006a" translate="yes" xml:space="preserve">
          <source>CString::new</source>
          <target state="translated">CString::new</target>
        </trans-unit>
        <trans-unit id="eff1b495447d52f2ff92fe44126c3e0f7e62bd18" translate="yes" xml:space="preserve">
          <source>CString::partial_cmp</source>
          <target state="translated">CString::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ba7cc72bb439ffacb3c246cdf7d4ea38bf7c37ba" translate="yes" xml:space="preserve">
          <source>CString::to_bytes</source>
          <target state="translated">CString::to_bytes</target>
        </trans-unit>
        <trans-unit id="52c93cc3f089d3ead1daed54786cb1adefbefc0e" translate="yes" xml:space="preserve">
          <source>CString::to_bytes_with_nul</source>
          <target state="translated">CString::to_bytes_with_nul</target>
        </trans-unit>
        <trans-unit id="d066a96cc2aeab0a52ff35a69bfade1ebb5b679e" translate="yes" xml:space="preserve">
          <source>CString::to_owned</source>
          <target state="translated">CString::to_owned</target>
        </trans-unit>
        <trans-unit id="2511594a074122956a7b9aac6c3b45531240e7fc" translate="yes" xml:space="preserve">
          <source>CString::to_str</source>
          <target state="translated">CString::to_str</target>
        </trans-unit>
        <trans-unit id="b9d046be15dc8b7b1d4ad0b19b0da5323bf450ae" translate="yes" xml:space="preserve">
          <source>CString::to_string_lossy</source>
          <target state="translated">CString::to_string_lossy</target>
        </trans-unit>
        <trans-unit id="9d84fa601d6e1d36b0d57472ca64c553b64dab03" translate="yes" xml:space="preserve">
          <source>CString::try_from</source>
          <target state="translated">CString::try_from</target>
        </trans-unit>
        <trans-unit id="f11ef73d8e97b738c053ffd9938664b3d2273bd5" translate="yes" xml:space="preserve">
          <source>CString::try_into</source>
          <target state="translated">CString::try_into</target>
        </trans-unit>
        <trans-unit id="1a51fb95b46c52bf3add938b9cfe7d50ef6bacbf" translate="yes" xml:space="preserve">
          <source>CString::type_id</source>
          <target state="translated">CString::type_id</target>
        </trans-unit>
        <trans-unit id="ec9fe493034beaebc0e01624240518933e14a78a" translate="yes" xml:space="preserve">
          <source>Caching values is a generally useful behavior that we might want to use in other parts of our code with different closures. However, there are two problems with the current implementation of &lt;code&gt;Cacher&lt;/code&gt; that would make reusing it in different contexts difficult.</source>
          <target state="translated">Кеширование значений - это обычно полезное поведение, которое мы могли бы использовать в других частях нашего кода с другими закрытием. Однако в текущей реализации &lt;code&gt;Cacher&lt;/code&gt; есть две проблемы , которые затрудняют его повторное использование в разных контекстах.</target>
        </trans-unit>
        <trans-unit id="ca70ff3bbc1574ec864e13a85775af1c9fd2dc54" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;self&lt;/code&gt; + &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">Рассчитывает &lt;code&gt;self&lt;/code&gt; + &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c60cc01325d6ae275f88e47a24f1234f7eab35f7" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;self&lt;/code&gt; - &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="translated">Рассчитывает &lt;code&gt;self&lt;/code&gt; - &lt;code&gt;rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2ce2b6e7049ed5ebef3ea78f7f49e41b51d70f5" translate="yes" xml:space="preserve">
          <source>Calculates Euclidean division, the matching method for &lt;code&gt;rem_euclid&lt;/code&gt;.</source>
          <target state="translated">Вычисляет евклидово деление, метод сопоставления для &lt;code&gt;rem_euclid&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f1a1acd0979000f557bd9fe260b8e844069c43f" translate="yes" xml:space="preserve">
          <source>Calculates the distance between two pointers. The returned value is in units of T: the distance in bytes is divided by &lt;code&gt;mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt;.</source>
          <target state="translated">Вычисляет расстояние между двумя указателями. Возвращаемое значение выражается в единицах T: расстояние в байтах делится на &lt;code&gt;mem::size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5127f08bc025120d1faa493287d1d0eee0006108" translate="yes" xml:space="preserve">
          <source>Calculates the divisor when &lt;code&gt;self&lt;/code&gt; is divided by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">Вычисляет делитель при делении &lt;code&gt;self&lt;/code&gt; на &lt;code&gt;rhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc217ee649e4f99c72864fd7fe451c173d18439f" translate="yes" xml:space="preserve">
          <source>Calculates the least nonnegative remainder of &lt;code&gt;self (mod rhs)&lt;/code&gt;.</source>
          <target state="translated">Вычисляет наименьший неотрицательный остаток от &lt;code&gt;self (mod rhs)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aa698abba4132e7de76a90696509e57b698e9680" translate="yes" xml:space="preserve">
          <source>Calculates the least remainder of &lt;code&gt;self (mod rhs)&lt;/code&gt;.</source>
          <target state="translated">Вычисляет наименьший остаток от &lt;code&gt;self (mod rhs)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7ea3c4efe85a6701802881e07221808f6b72f10" translate="yes" xml:space="preserve">
          <source>Calculates the length of the hypotenuse of a right-angle triangle given legs of length &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">Вычисляет длину гипотенузы прямоугольного треугольника для катетов длиной &lt;code&gt;x&lt;/code&gt; и &lt;code&gt;y&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2204ea9d183af2eb3c958e206adf62733fcb72b8" translate="yes" xml:space="preserve">
          <source>Calculates the multiplication of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">Вычисляет умножение &lt;code&gt;self&lt;/code&gt; и &lt;code&gt;rhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1f0a45d6193bb4f48999acaf0e6da752bd21197" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer (convenience for &lt;code&gt;.offset((count as isize).wrapping_neg())&lt;/code&gt;).</source>
          <target state="translated">Вычисляет смещение от указателя (удобно для &lt;code&gt;.offset((count as isize).wrapping_neg())&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2cdd04036e314797a2d49a1129ff94310c799250" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer (convenience for &lt;code&gt;.offset(count as isize)&lt;/code&gt;).</source>
          <target state="translated">Вычисляет смещение от указателя (удобно для &lt;code&gt;.offset(count as isize)&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5c58135d353fa0b65d9d7d232ccec38157ca294b" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic.</source>
          <target state="translated">Вычисляет смещение от указателя с помощью арифметики обертки.</target>
        </trans-unit>
        <trans-unit id="3a96ac2990d9d6aa59d405db07b7ab3697d51ab5" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. (convenience for &lt;code&gt;.wrapping_offset((count as isize).wrapping_sub())&lt;/code&gt;)</source>
          <target state="translated">Вычисляет смещение от указателя с использованием арифметики переноса. (удобство для &lt;code&gt;.wrapping_offset((count as isize).wrapping_sub())&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4437f7540901d3da485cf44951a321623f5d54ea" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. (convenience for &lt;code&gt;.wrapping_offset(count as isize)&lt;/code&gt;)</source>
          <target state="translated">Вычисляет смещение от указателя с использованием арифметики переноса. (удобство для &lt;code&gt;.wrapping_offset(count as isize)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="fced3b907bf59a9a00c1e327030e6d3af8cc26ee" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer using wrapping arithmetic. &lt;code&gt;count&lt;/code&gt; is in units of T; e.g., a &lt;code&gt;count&lt;/code&gt; of 3 represents a pointer offset of &lt;code&gt;3 * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; bytes.</source>
          <target state="translated">Вычисляет смещение от указателя с использованием арифметики переноса. &lt;code&gt;count&lt;/code&gt; в единицах Т; например, &lt;code&gt;count&lt;/code&gt; 3 представляет смещение указателя на &lt;code&gt;3 * size_of::&amp;lt;T&amp;gt;()&lt;/code&gt; байтов.</target>
        </trans-unit>
        <trans-unit id="bb349c3d2b61d501336bb2fe8cf2ff557d376135" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer, potentially wrapping.</source>
          <target state="translated">Вычисляет смещение от указателя,потенциально обернутого.</target>
        </trans-unit>
        <trans-unit id="bceae705a5fda0d95a2adc01d7e85d8d0a2f7b90" translate="yes" xml:space="preserve">
          <source>Calculates the offset from a pointer.</source>
          <target state="translated">Вычисляет смещение от указателя.</target>
        </trans-unit>
        <trans-unit id="20e05ec484d26186b0ee114ebaa6c93c15ef1c02" translate="yes" xml:space="preserve">
          <source>Calculates the quotient of Euclidean division &lt;code&gt;self.div_euclid(rhs)&lt;/code&gt;.</source>
          <target state="translated">Вычисляет частное евклидова деления &lt;code&gt;self.div_euclid(rhs)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39720ba2c3f54664835e5cfd429b8dbb6ddb3ddb" translate="yes" xml:space="preserve">
          <source>Calculates the quotient of Euclidean division of &lt;code&gt;self&lt;/code&gt; by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">Вычисляет частное евклидова деления &lt;code&gt;self&lt;/code&gt; на &lt;code&gt;rhs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5a8c64bc432948fb8acbf8240c8594765e8fa48" translate="yes" xml:space="preserve">
          <source>Calculates the remainder &lt;code&gt;self.rem_euclid(rhs)&lt;/code&gt; as if by Euclidean division.</source>
          <target state="translated">Вычисляет остаток &lt;code&gt;self.rem_euclid(rhs)&lt;/code&gt; как если бы это было евклидово деление.</target>
        </trans-unit>
        <trans-unit id="dd73ba699034056b9c5150298e8d456b025d264b" translate="yes" xml:space="preserve">
          <source>Calculates the remainder when &lt;code&gt;self&lt;/code&gt; is divided by &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">Вычисляет остаток от &lt;code&gt;rhs&lt;/code&gt; &lt;code&gt;self&lt;/code&gt; на rhs .</target>
        </trans-unit>
        <trans-unit id="beb148e8941aab843a69c5323a4e82bfc27fae30" translate="yes" xml:space="preserve">
          <source>Calculations in applications like audio decoders often prioritize performance most highly. Here, we&amp;rsquo;re creating an iterator, using two adaptors, and then consuming the value. What assembly code would this Rust code compile to? Well, as of this writing, it compiles down to the same assembly you&amp;rsquo;d write by hand. There&amp;rsquo;s no loop at all corresponding to the iteration over the values in &lt;code&gt;coefficients&lt;/code&gt;: Rust knows that there are 12 iterations, so it &amp;ldquo;unrolls&amp;rdquo; the loop. &lt;em&gt;Unrolling&lt;/em&gt; is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.</source>
          <target state="translated">Расчеты в таких приложениях, как аудиодекодеры, часто ставят производительность в первую очередь. Здесь мы создаем итератор, используя два адаптера, а затем потребляем значение. В какой ассемблерный код будет скомпилирован этот код Rust? Что ж, на момент написания этой статьи он компилируется до той же сборки, которую вы бы написали вручную. Нет никакого цикла, соответствующего итерации по значениям &lt;code&gt;coefficients&lt;/code&gt; : Rust знает, что существует 12 итераций, поэтому он &amp;laquo;разворачивает&amp;raquo; цикл. &lt;em&gt;Развертывание&lt;/em&gt; - это оптимизация, которая устраняет накладные расходы на код управления циклом и вместо этого генерирует повторяющийся код для каждой итерации цикла.</target>
        </trans-unit>
        <trans-unit id="f8b36fa1c392c82310456798302780289916c221" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;unsafe&lt;/code&gt; functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f282ae75f0466a6ba7a1e840066c459209e8a0" translate="yes" xml:space="preserve">
          <source>Call an unsafe function or method</source>
          <target state="translated">Вызвать небезопасную функцию или метод</target>
        </trans-unit>
        <trans-unit id="0298ffd4d4d74b375411d1b2e3969f0f3205473d" translate="yes" xml:space="preserve">
          <source>Call expressions</source>
          <target state="translated">Формулировки вызова</target>
        </trans-unit>
        <trans-unit id="6249f8a9ffd810d4ed69b84e3c802196af864e8b" translate="yes" xml:space="preserve">
          <source>Call traits and coercions</source>
          <target state="translated">Черты вызова и принуждения</target>
        </trans-unit>
        <trans-unit id="0c2ff20766f3c9231511aafd553b6c2bff815c3d" translate="yes" xml:space="preserve">
          <source>Callers in turn must expect the source to be in any state that is consistent with its public API since adapters sitting between it and the source have the same access. In particular an adapter may have consumed more elements than strictly necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c586bbc683322c086eef8701f61479b8313e2e3" translate="yes" xml:space="preserve">
          <source>Callers of memory allocation APIs wishing to abort computation in response to an allocation error are encouraged to call this function, rather than directly invoking &lt;code&gt;panic!&lt;/code&gt; or similar.</source>
          <target state="translated">Вызывающим API выделения памяти, желающим прервать вычисление в ответ на ошибку выделения, рекомендуется вызывать эту функцию, а не напрямую вызывать &lt;code&gt;panic!&lt;/code&gt; или похожие.</target>
        </trans-unit>
        <trans-unit id="0a1fed80ce769e9299beec7ef90b5a7b9c915af1" translate="yes" xml:space="preserve">
          <source>Callers of this function are responsible that these preconditions are satisfied:</source>
          <target state="translated">Звонящие на эту функцию несут ответственность за выполнение этих предварительных условий:</target>
        </trans-unit>
        <trans-unit id="d1c291d9a0fdcacf48fd819bb42d20e5d81ebaea" translate="yes" xml:space="preserve">
          <source>Callers of this function are responsible that three preconditions are satisfied:</source>
          <target state="translated">Звонящие на эту функцию несут ответственность за выполнение трех предварительных условий:</target>
        </trans-unit>
        <trans-unit id="7d8639a217f023f0e5aaf72760a98b8b29436661" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.</source>
          <target state="translated">Вызов &lt;a href=&quot;#method.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt; (или другие функции, которые его оборачивают) заставит родительский процесс дождаться, пока дочерний процесс не выйдет, прежде чем продолжить.</target>
        </trans-unit>
        <trans-unit id="481d687176f898ccda26367fc40f1ddb55f0bae7" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;struct.child#method.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; (or other functions that wrap around it) will make the parent process wait until the child has actually exited before continuing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5deeaea616be877d309408666a16c136418ff8a" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; guarantees that at least one value of the iterator's underlying source has been moved out and the result of the iterator chain could be inserted in its place, assuming structural constraints of the source allow such an insertion. In other words this trait indicates that an iterator pipeline can be collected in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7c98d8910ba30f7a29fe334c3bdf59a65f7d25" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; this way gets repetitive. Rust has a construct which can call &lt;a href=&quot;trait.iterator#tymethod.next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; on your iterator, until it reaches &lt;code&gt;None&lt;/code&gt;. Let's go over that next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062a68bd5946d6865cea7336de4cb67da3dd476e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code id=&quot;calling-confignew-and-handling-errors&quot;&gt;Config::new&lt;/code&gt; and Handling Errors</source>
          <target state="translated">Вызов &lt;code id=&quot;calling-confignew-and-handling-errors&quot;&gt;Config::new&lt;/code&gt; и обработка ошибок</target>
        </trans-unit>
        <trans-unit id="05271cdf6db26718c2abf90da7409799d4703173" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_back_by(0)&lt;/code&gt; does not consume any elements and always returns &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(())&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2db88eb30c547ef9dcc31ceb834f1125361cdd6" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_back_by(0)&lt;/code&gt; does not consume any elements and always returns [&lt;code&gt;Ok(())&lt;/code&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6f9e29581ee3a7fb3292d54be3a75552132038" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_by(0)&lt;/code&gt; does not consume any elements and always returns &lt;a href=&quot;../result/enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok(())&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29810a8b26f09a3007bc1a15cd51bd68ab82979c" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;advance_by(0)&lt;/code&gt; does not consume any elements and always returns [&lt;code&gt;Ok(())&lt;/code&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40c65454f5635fc0b10e5666dc4831c6b5a85ea" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;into_owned&lt;/code&gt; on a &lt;code&gt;Cow::Borrowed&lt;/code&gt; clones the underlying data and becomes a &lt;code&gt;Cow::Owned&lt;/code&gt;:</source>
          <target state="translated">Вызов &lt;code&gt;into_owned&lt;/code&gt; для &lt;code&gt;Cow::Borrowed&lt;/code&gt; клонирует базовые данные и становится &lt;code&gt;Cow::Owned&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d45f4417b85022c3db61725f3af3e2cc322eb41e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;into_owned&lt;/code&gt; on a &lt;code&gt;Cow::Owned&lt;/code&gt; is a no-op:</source>
          <target state="translated">Вызов &lt;code&gt;into_owned&lt;/code&gt; на &lt;code&gt;Cow::Owned&lt;/code&gt; не работает:</target>
        </trans-unit>
        <trans-unit id="695c031ebd8b1d35a483a10782e7c17d879fd0d1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;join&lt;/code&gt; on the handle blocks the thread currently running until the thread represented by the handle terminates. &lt;em&gt;Blocking&lt;/em&gt; a thread means that thread is prevented from performing work or exiting. Because we&amp;rsquo;ve put the call to &lt;code&gt;join&lt;/code&gt; after the main thread&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; loop, running Listing 16-2 should produce output similar to this:</source>
          <target state="translated">Вызов &lt;code&gt;join&lt;/code&gt; на дескрипторе блокирует текущий поток, пока поток, представленный дескриптором, не завершится. &lt;em&gt;Блокировка&lt;/em&gt; потока означает, что потоку запрещено выполнять работу или завершаться. Поскольку мы поместили вызов &lt;code&gt;join&lt;/code&gt; после цикла &lt;code&gt;for&lt;/code&gt; основного потока , запуск Листинга 16-2 должен привести к выводу, подобному этому:</target>
        </trans-unit>
        <trans-unit id="bba53e5336fa9eed56530a5c7e1f4d704c60b408" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;next()&lt;/code&gt; this way gets repetitive. Rust has a construct which can call &lt;code&gt;next()&lt;/code&gt; on your iterator, until it reaches &lt;code&gt;None&lt;/code&gt;. Let's go over that next.</source>
          <target state="translated">Вызов &lt;code&gt;next()&lt;/code&gt; таким образом становится повторяющимся. В Rust есть конструкция, которая может вызывать &lt;code&gt;next()&lt;/code&gt; на вашем итераторе, пока не достигнет &lt;code&gt;None&lt;/code&gt; . Давайте рассмотрим это дальше.</target>
        </trans-unit>
        <trans-unit id="52eefc013b01e5d9adae0a652dc16672febe75fe" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;nth()&lt;/code&gt; multiple times doesn't rewind the iterator:</source>
          <target state="translated">Многократный вызов &lt;code&gt;nth()&lt;/code&gt; не приводит к перемотке итератора:</target>
        </trans-unit>
        <trans-unit id="162f7cd67f7da63727e6f1ac3373291fc6afc8f1" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;nth_back()&lt;/code&gt; multiple times doesn't rewind the iterator:</source>
          <target state="translated">&lt;code&gt;nth_back()&lt;/code&gt; вызов nth_back () не приводит к перемотке итератора:</target>
        </trans-unit>
        <trans-unit id="c598d6b0bb84ae897f110d0577b80a5562b3ffe9" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;CStr&lt;/code&gt; containing invalid UTF-8:</source>
          <target state="translated">Вызов &lt;code&gt;to_string_lossy&lt;/code&gt; для &lt;code&gt;CStr&lt;/code&gt; , содержащего недопустимый UTF-8:</target>
        </trans-unit>
        <trans-unit id="7e6835821e80fa4f9f034eef42e8cd6c55d7f554" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;CStr&lt;/code&gt; containing valid UTF-8:</source>
          <target state="translated">Вызов &lt;code&gt;to_string_lossy&lt;/code&gt; в &lt;code&gt;CStr&lt;/code&gt; , содержащем действительный UTF-8:</target>
        </trans-unit>
        <trans-unit id="7c7011eb1a41a55a7c56907e801179e9dea5b3cf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on a &lt;code&gt;Path&lt;/code&gt; with valid unicode:</source>
          <target state="translated">Вызов &lt;code&gt;to_string_lossy&lt;/code&gt; на &lt;code&gt;Path&lt;/code&gt; с допустимым юникодом:</target>
        </trans-unit>
        <trans-unit id="f31c7c45b0c7aeef2d4d0ffc68da4406c29790a0" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_string_lossy&lt;/code&gt; on an &lt;code&gt;OsStr&lt;/code&gt; with invalid unicode:</source>
          <target state="translated">Вызов &lt;code&gt;to_string_lossy&lt;/code&gt; на &lt;code&gt;OsStr&lt;/code&gt; с недопустимым юникодом :</target>
        </trans-unit>
        <trans-unit id="9de067b738f05e2c853ce62bda78f70da2c52df0" translate="yes" xml:space="preserve">
          <source>Calling Rust Functions from Other Languages</source>
          <target state="translated">Вызов функций ржавчины из других языков</target>
        </trans-unit>
        <trans-unit id="469b5b1db440c09f5ea9cbc0b01c11c197598149" translate="yes" xml:space="preserve">
          <source>Calling a &lt;code&gt;run&lt;/code&gt; function in &lt;em&gt;lib.rs&lt;/em&gt;</source>
          <target state="translated">Вызов функции &lt;code&gt;run&lt;/code&gt; в &lt;em&gt;lib.rs&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c98cab239f2466bb3a3bef081514cf79b241c2da" translate="yes" xml:space="preserve">
          <source>Calling a by-value closure</source>
          <target state="translated">Закрытие по цене</target>
        </trans-unit>
        <trans-unit id="c225172ba8dd6c241a62db17923fd52257ec1ecf" translate="yes" xml:space="preserve">
          <source>Calling a closure</source>
          <target state="translated">Призыв к закрытию</target>
        </trans-unit>
        <trans-unit id="3000ca5cbcd1109b15d9b1fea7a62a08e027beeb" translate="yes" xml:space="preserve">
          <source>Calling a function with the wrong call ABI or unwinding from a function with the wrong unwind ABI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430899e63ff06c11168e52a7ad1cd9798d9e810e" translate="yes" xml:space="preserve">
          <source>Calling a mutably capturing closure</source>
          <target state="translated">Захват мутантской затворки</target>
        </trans-unit>
        <trans-unit id="eeeb342591bb15dc955bacb8ca5d948735ea0a0e" translate="yes" xml:space="preserve">
          <source>Calling an Unsafe Function or Method</source>
          <target state="translated">Вызов небезопасной функции или метода</target>
        </trans-unit>
        <trans-unit id="dd4cba3cdf6aee25a0708da105b4aa73ef9194d2" translate="yes" xml:space="preserve">
          <source>Calling an unsafe function (including an intrinsic or foreign function).</source>
          <target state="translated">Вызов небезопасной функции (включая внутреннюю или внешнюю функцию).</target>
        </trans-unit>
        <trans-unit id="b8ce24087e4cce4c1779eadefe24214064c78c10" translate="yes" xml:space="preserve">
          <source>Calling functions marked unsafe</source>
          <target state="translated">Функции вызова,отмеченные как небезопасные</target>
        </trans-unit>
        <trans-unit id="92b8d2a38649974749bb36dd214a74950b90f29a" translate="yes" xml:space="preserve">
          <source>Calling functions via FFI</source>
          <target state="translated">Функция вызова через FFI</target>
        </trans-unit>
        <trans-unit id="b8dfbd67e3bce8053bc02fac21adfe30570f8667" translate="yes" xml:space="preserve">
          <source>Calling its &lt;a href=&quot;../std/ops/trait.drop&quot;&gt;&lt;code&gt;std::ops::Drop::drop&lt;/code&gt;&lt;/a&gt; method, if it has one.</source>
          <target state="translated">Вызов его метода &lt;a href=&quot;../std/ops/trait.drop&quot;&gt; &lt;code&gt;std::ops::Drop::drop&lt;/code&gt; &lt;/a&gt; , если он есть.</target>
        </trans-unit>
        <trans-unit id="4a9d183dccc32e902a934e57b39dbf24776d3a36" translate="yes" xml:space="preserve">
          <source>Calling next on a fused iterator that has returned &lt;code&gt;None&lt;/code&gt; once is guaranteed to return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; again. This trait should be implemented by all iterators that behave this way because it allows optimizing &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbee1e3dfc8c33deb1f76b5bfd498db4ce5ef9a" translate="yes" xml:space="preserve">
          <source>Calling next on a fused iterator that has returned &lt;code&gt;None&lt;/code&gt; once is guaranteed to return &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; again. This trait should be implemented by all iterators that behave this way because it allows optimizing &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt;&lt;code&gt;Iterator::fuse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Вызов next для объединенного итератора, который &lt;code&gt;None&lt;/code&gt; раз вернул None, гарантированно вернет &lt;a href=&quot;../option/enum.option#variant.None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; снова. Этот трейт должен быть реализован всеми итераторами, которые ведут себя таким образом, потому что он позволяет оптимизировать &lt;a href=&quot;trait.iterator#method.fuse&quot;&gt; &lt;code&gt;Iterator::fuse&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="48b70cef98bea7c46d62ecdc6c6d6c2fb2f1a678" translate="yes" xml:space="preserve">
          <source>Calling the command line parsing logic with the argument values</source>
          <target state="translated">Вызов логики разбора командной строки со значениями аргументов</target>
        </trans-unit>
        <trans-unit id="b17f2dea9d34711d4634fe61d5262d4b3a7e4949" translate="yes" xml:space="preserve">
          <source>Calling this function multiple times may result in different behavior, depending on the operating system. On Linux, the second call will return &lt;code&gt;Ok(())&lt;/code&gt;, but on macOS, it will return &lt;code&gt;ErrorKind::NotConnected&lt;/code&gt;. This may change in the future.</source>
          <target state="translated">Многократный вызов этой функции может привести к различному поведению в зависимости от операционной системы. В Linux второй вызов вернет &lt;code&gt;Ok(())&lt;/code&gt; , но в macOS он вернет &lt;code&gt;ErrorKind::NotConnected&lt;/code&gt; . Это может измениться в будущем.</target>
        </trans-unit>
        <trans-unit id="4cea1097671638adc27e477a5119485fa2aecc7d" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84369d3cd0fd24226e8475363ef8bafba6016b8" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting reference is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de5835c634ba536357a78df4d3dca323f88d417" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a6314df9e5901bb23d3392581da8969bc4be97" translate="yes" xml:space="preserve">
          <source>Calling this method with an out-of-bounds index or when &lt;code&gt;self&lt;/code&gt; is not dereferencable is &lt;em&gt;&lt;a href=&quot;../reference/behavior-considered-undefined&quot;&gt;undefined behavior&lt;/a&gt;&lt;/em&gt; even if the resulting pointer is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a432cbdab953f751c07835790f0e4fa2e1cbdcd7" translate="yes" xml:space="preserve">
          <source>Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc0b986c27dcc0ae97794ee7ef1d48ffcfe2925" translate="yes" xml:space="preserve">
          <source>Calling this when the content is not yet fully initialized causes undefined behavior: it is up to the caller to guarantee that the &lt;code&gt;MaybeUninit&amp;lt;T&amp;gt;&lt;/code&gt; really is in an initialized state. For instance, &lt;code&gt;.assume_init_mut()&lt;/code&gt; cannot be used to initialize a &lt;code&gt;MaybeUninit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575e1c052b421159bac0ed88e5f50e064494a831" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;op&lt;/code&gt; if the result is &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt;, otherwise returns the &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">Вызывает &lt;code&gt;op&lt;/code&gt; , если результатом является &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; , в противном случае возвращает значение &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; для &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f961f899a2cfefa64e10f259f8eb29aaf36dad04" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;op&lt;/code&gt; if the result is &lt;a href=&quot;enum.result#variant.Ok&quot;&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/a&gt;, otherwise returns the &lt;a href=&quot;enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">Вызывает &lt;code&gt;op&lt;/code&gt; , если результат &lt;a href=&quot;enum.result#variant.Ok&quot;&gt; &lt;code&gt;Ok&lt;/code&gt; &lt;/a&gt; , в противном случае возвращает значение &lt;a href=&quot;enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; для &lt;code&gt;self&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e95d263a4a075ff123b003c74cd1a9d0ca465605" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator.</source>
          <target state="translated">Вызывает закрытие каждого элемента итератора.</target>
        </trans-unit>
        <trans-unit id="396c20d59d986fb07a8fb04d5022a6446eb8eff0" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../../../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Вызывает замыкание для каждого элемента итератора. &lt;a href=&quot;../../../iter/trait.iterator#method.for_each&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6cfce5b305846828d89983a5f01e9f39ff3f593f" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Вызывает замыкание для каждого элемента итератора. &lt;a href=&quot;../../iter/trait.iterator#method.for_each&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="53b452c2ba01d8ad9acc0876cf64e78699e18a45" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;../iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Вызывает замыкание для каждого элемента итератора. &lt;a href=&quot;../iter/trait.iterator#method.for_each&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f2da9126523f32597a07db6c54ee2184d55ce5c2" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;iter/trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Вызывает замыкание для каждого элемента итератора. &lt;a href=&quot;iter/trait.iterator#method.for_each&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="39a1d0073e96739a4a7cf3debb043e2bb44d2b46" translate="yes" xml:space="preserve">
          <source>Calls a closure on each element of an iterator. &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;Read more&lt;/a&gt;</source>
          <target state="translated">Вызывает замыкание для каждого элемента итератора. &lt;a href=&quot;trait.iterator#method.for_each&quot;&gt;Читать далее&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa7a44819ff5dd8ef777e95d162b39eea9940e2a" translate="yes" xml:space="preserve">
          <source>Calls of &lt;a href=&quot;items/functions#const-functions&quot;&gt;const functions&lt;/a&gt; and const methods.</source>
          <target state="translated">Вызов &lt;a href=&quot;items/functions#const-functions&quot;&gt;константных функций&lt;/a&gt; и константных методов.</target>
        </trans-unit>
        <trans-unit id="677169912cc36864d10f29e6c2b2cb3ca7cc5a6e" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;write&lt;/code&gt; are not guaranteed to block waiting for data to be written, and a write which would otherwise block can be indicated through an &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/a&gt; variant.</source>
          <target state="translated">Вызовы &lt;code&gt;write&lt;/code&gt; не гарантируют блокировку ожидания записи данных, а запись, которая в противном случае блокировалась бы, может быть указана с помощью варианта &lt;a href=&quot;../result/enum.result#variant.Err&quot;&gt; &lt;code&gt;Err&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="30fc82876340b5cd98aa5e28dc1e1ded678cb8bb" translate="yes" xml:space="preserve">
          <source>Calls to other &lt;em&gt;safe&lt;/em&gt; const functions (whether by function call or method call)</source>
          <target state="translated">Вызов других &lt;em&gt;безопасных&lt;/em&gt; константных функций (будь то вызов функции или вызов метода)</target>
        </trans-unit>
        <trans-unit id="c1fad511b779575835db0e2fe05a2f679a24bff7" translate="yes" xml:space="preserve">
          <source>Can &lt;code&gt;CaseInsensitiveString&lt;/code&gt; implement &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt;? It certainly can provide a reference to a string slice via its contained owned string. But because its &lt;code&gt;Hash&lt;/code&gt; implementation differs, it behaves differently from &lt;code&gt;str&lt;/code&gt; and therefore must not, in fact, implement &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt;. If it wants to allow others access to the underlying &lt;code&gt;str&lt;/code&gt;, it can do that via &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; which doesn&amp;rsquo;t carry any extra requirements.</source>
          <target state="translated">Может ли &lt;code&gt;CaseInsensitiveString&lt;/code&gt; реализовать &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; ? Он, безусловно, может предоставить ссылку на фрагмент строки через содержащуюся в нем строку. Но поскольку его реализация &lt;code&gt;Hash&lt;/code&gt; отличается, она ведет себя иначе, чем &lt;code&gt;str&lt;/code&gt; , и поэтому фактически не должна реализовывать &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; . Если он хочет разрешить другим доступ к базовой &lt;code&gt;str&lt;/code&gt; , он может сделать это через &lt;code&gt;AsRef&amp;lt;str&amp;gt;&lt;/code&gt; который не несет никаких дополнительных требований.</target>
        </trans-unit>
        <trans-unit id="bbee583b112c61027e995c9cbc6b83f64f2c6016" translate="yes" xml:space="preserve">
          <source>Can I turn these warnings into errors by denying a lint?</source>
          <target state="translated">Могу ли я превратить эти предупреждения в ошибки,отрицая ворс?</target>
        </trans-unit>
        <trans-unit id="ffedd5c94247b98253125279c378517d376f585f" translate="yes" xml:space="preserve">
          <source>Cannot convert inline assembly operand to a single LLVM value.</source>
          <target state="translated">Не может преобразовать операнд встроенной сборки в одно значение LLVM.</target>
        </trans-unit>
        <trans-unit id="064d19e691ce5c4c741753adfe6009671077b524" translate="yes" xml:space="preserve">
          <source>Cannot mutate place in this match guard.</source>
          <target state="translated">Не могу мутировать в этом матчевом охраннике.</target>
        </trans-unit>
        <trans-unit id="b5e1a76747d8e8f7e23797139376312ac515519f" translate="yes" xml:space="preserve">
          <source>Cannot return value that references local variable</source>
          <target state="translated">Не может вернуть значение,которое ссылается на локальную переменную</target>
        </trans-unit>
        <trans-unit id="18946a7345ea25ae184b2fa7fd09696f851660ca" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace</source>
          <target state="translated">CannotReallocInPlace</target>
        </trans-unit>
        <trans-unit id="db708338b8108bceb02a5ab38088ad773c7a38f5" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::borrow</source>
          <target state="translated">CannotReallocInPlace::borrow</target>
        </trans-unit>
        <trans-unit id="fbb3b1ed781e98b772cd25d7177cc80bcc94e34d" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::borrow_mut</source>
          <target state="translated">CannotReallocInPlace::borrow_mut</target>
        </trans-unit>
        <trans-unit id="6a68da32986df1cc594041b4ac0f8b52b907e956" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::cause</source>
          <target state="translated">CannotReallocInPlace::cause</target>
        </trans-unit>
        <trans-unit id="0db277ddb0842c8a035d8720f8ee7ca44be8a600" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone</source>
          <target state="translated">CannotReallocInPlace::clone</target>
        </trans-unit>
        <trans-unit id="c0b3d6b832bf50e8f5f2e1a868329bf3eb6b5e6a" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone_from</source>
          <target state="translated">CannotReallocInPlace::clone_from</target>
        </trans-unit>
        <trans-unit id="e22e1c5bc5858fa8d7ecb67f7ca21dd0bfd35fe4" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::clone_into</source>
          <target state="translated">CannotReallocInPlace::clone_into</target>
        </trans-unit>
        <trans-unit id="3f38ff0fdbbf2f703ff8e60b4973e01fb2a3bf31" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::description</source>
          <target state="translated">CannotReallocInPlace::description</target>
        </trans-unit>
        <trans-unit id="8d3358893adcc87c82c15d615a64fca665ba176c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::eq</source>
          <target state="translated">CannotReallocInPlace::eq</target>
        </trans-unit>
        <trans-unit id="c436414dc0b3a3215eaec90aedd27a561b91d920" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::fmt</source>
          <target state="translated">CannotReallocInPlace::fmt</target>
        </trans-unit>
        <trans-unit id="f3df1a70f83c9e629b222262e235b2194c9feea5" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::from</source>
          <target state="translated">CannotReallocInPlace::from</target>
        </trans-unit>
        <trans-unit id="f38c26641404735febdd63d9ebbcb95632c7fc10" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::into</source>
          <target state="translated">CannotReallocInPlace::into</target>
        </trans-unit>
        <trans-unit id="677b61d26186f5001fbbb338b1eb39badeb9035c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::ne</source>
          <target state="translated">CannotReallocInPlace::ne</target>
        </trans-unit>
        <trans-unit id="3aba62335d5c79a8d639fce91781f21d828e3d6c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::source</source>
          <target state="translated">CannotReallocInPlace::source</target>
        </trans-unit>
        <trans-unit id="4de309649814b9340379f621201577de2e665add" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::to_owned</source>
          <target state="translated">CannotReallocInPlace::to_owned</target>
        </trans-unit>
        <trans-unit id="ab6f21ac0212ee889c5ddb86f6b0fa133ac082b4" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::to_string</source>
          <target state="translated">CannotReallocInPlace::to_string</target>
        </trans-unit>
        <trans-unit id="f3203a2632d9e1d1c1b0b63fb1fc421d48f9d3fa" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::try_from</source>
          <target state="translated">CannotReallocInPlace::try_from</target>
        </trans-unit>
        <trans-unit id="1fd1104d18cfb0e5a2e789df04e4a5b40e046d7c" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::try_into</source>
          <target state="translated">CannotReallocInPlace::try_into</target>
        </trans-unit>
        <trans-unit id="0844df8570619a7f92b1ec959e1e9f9855538d7f" translate="yes" xml:space="preserve">
          <source>CannotReallocInPlace::type_id</source>
          <target state="translated">CannotReallocInPlace::type_id</target>
        </trans-unit>
        <trans-unit id="77c5882354fe35c06ec86f582037bab9711670ae" translate="yes" xml:space="preserve">
          <source>Canonical paths</source>
          <target state="translated">канонические пути</target>
        </trans-unit>
        <trans-unit id="3a333c720c89e44e8e70bacda4bf0073f227911d" translate="yes" xml:space="preserve">
          <source>Capacity Management</source>
          <target state="translated">Управление потенциалом</target>
        </trans-unit>
        <trans-unit id="7a9b6deb8b492b7b6bc5256cd674c23336f610fb" translate="yes" xml:space="preserve">
          <source>Capacity and reallocation</source>
          <target state="translated">Потенциал и перераспределение</target>
        </trans-unit>
        <trans-unit id="8907e14a9398ea113a7bc411fe35367c56410c78" translate="yes" xml:space="preserve">
          <source>Capture a &lt;a href=&quot;../book/ch13-01-closures&quot;&gt;closure&lt;/a&gt;'s environment by value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0cdb20337630c37884981fdf257c3959384c63" translate="yes" xml:space="preserve">
          <source>Capture a &lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html&quot;&gt;closure&lt;/a&gt;'s environment by value.</source>
          <target state="translated">Захватите среду &lt;a href=&quot;https://doc.rust-lang.org/book/second-edition/ch13-01-closures.html&quot;&gt;закрытия&lt;/a&gt; по значению.</target>
        </trans-unit>
        <trans-unit id="375eaf4d2b2f8ebb6bda9e59de89c9b49bac83a7" translate="yes" xml:space="preserve">
          <source>Capture a stack backtrace of the current thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20f3daba48c455aa890155202bd389442a301f5" translate="yes" xml:space="preserve">
          <source>Capture modes</source>
          <target state="translated">Режимы съемки</target>
        </trans-unit>
        <trans-unit id="6d71da6e52376ced7bee988e2638d4f0306eaeb0" translate="yes" xml:space="preserve">
          <source>Captures a common usage pattern for allocators.</source>
          <target state="translated">Захватывает общую схему использования аллокаторов.</target>
        </trans-unit>
        <trans-unit id="db0cd8f7115682a21391fe6952f165764529474e" translate="yes" xml:space="preserve">
          <source>Captures can occur by a special kind of borrow called a &lt;em&gt;unique immutable borrow&lt;/em&gt;, which cannot be used anywhere else in the language and cannot be written out explicitly. It occurs when modifying the referent of a mutable reference, as in the following example:</source>
          <target state="translated">Захваты могут происходить с помощью особого вида заимствования, называемого &lt;em&gt;уникальным неизменяемым заимствованием&lt;/em&gt; , которое нельзя использовать где-либо еще в языке и не может быть записано явно. Это происходит при изменении референта изменяемой ссылки, как в следующем примере:</target>
        </trans-unit>
        <trans-unit id="7a64063da85f402b7afcadb2d30cde255760b1dd" translate="yes" xml:space="preserve">
          <source>Capturing a backtrace can be a quite expensive runtime operation, so the environment variables allow either forcibly disabling this runtime performance hit or allow selectively enabling it in some programs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc66dbea7125509b84c9c9e75d0c23291251ad11" translate="yes" xml:space="preserve">
          <source>Capturing a backtrace has been disabled through either the &lt;code&gt;RUST_LIB_BACKTRACE&lt;/code&gt; or &lt;code&gt;RUST_BACKTRACE&lt;/code&gt; environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd430212c522f62f2cea99b684b6010c1dd05346" translate="yes" xml:space="preserve">
          <source>Capturing a backtrace is not supported, likely because it's not implemented for the current platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1a539db9fcfa734a9bb87c16648df26afa2363" translate="yes" xml:space="preserve">
          <source>Capturing the Environment with Closures</source>
          <target state="translated">Захват окружающей среды с закрытием</target>
        </trans-unit>
        <trans-unit id="936f4787c691ca05a5fc9bd5ef003981d0fd23ea" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying reader as doing so may corrupt the internal limit of this &lt;code&gt;Take&lt;/code&gt;.</source>
          <target state="translated">Следует проявлять осторожность, чтобы не изменять внутреннее состояние ввода-вывода базового считывателя, так как это может повредить внутренний предел этого &lt;code&gt;Take&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fe82bd2dff83026c3424e65f908960ac659e90f7" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying readers as doing so may corrupt the internal state of this &lt;code&gt;Chain&lt;/code&gt;.</source>
          <target state="translated">Следует проявлять осторожность, чтобы избежать изменения внутреннего состояния ввода-вывода нижележащих считывателей, поскольку это может привести к повреждению внутреннего состояния этой &lt;code&gt;Chain&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a94b5eb8a1b561609332355ea058ca164007f39" translate="yes" xml:space="preserve">
          <source>Care should be taken to avoid modifying the internal I/O state of the underlying value as it may corrupt this cursor's position.</source>
          <target state="translated">Следует позаботиться о том,чтобы не изменить внутреннее состояние ввода/вывода базовой величины,так как это может привести к повреждению позиции курсора.</target>
        </trans-unit>
        <trans-unit id="9daf6bef99f447bfc89398170bddc979a688326f" translate="yes" xml:space="preserve">
          <source>Caret</source>
          <target state="translated">Caret</target>
        </trans-unit>
        <trans-unit id="4b543686834ff9c96b5aa004bf03e54b07ab8c7f" translate="yes" xml:space="preserve">
          <source>CaretEq</source>
          <target state="translated">CaretEq</target>
        </trans-unit>
        <trans-unit id="9b4b64d79f6456643db96cea75e7d608d9b3ccf0" translate="yes" xml:space="preserve">
          <source>Cargo Workspaces</source>
          <target state="translated">Рабочие места для грузовых перевозок</target>
        </trans-unit>
        <trans-unit id="6130a368f6b496bf7db8ed44dbce227dd6638c23" translate="yes" xml:space="preserve">
          <source>Cargo also provides a command called &lt;code&gt;cargo check&lt;/code&gt;. This command quickly checks your code to make sure it compiles but doesn&amp;rsquo;t produce an executable:</source>
          <target state="translated">Cargo также предоставляет команду, называемую &lt;code&gt;cargo check&lt;/code&gt; . Эта команда быстро проверяет ваш код, чтобы убедиться, что он компилируется, но не создает исполняемый файл:</target>
        </trans-unit>
        <trans-unit id="fae03eebb0a7d0738a55960ac298edd80e989e03" translate="yes" xml:space="preserve">
          <source>Cargo as Convention</source>
          <target state="translated">Грузы как Конвенция</target>
        </trans-unit>
        <trans-unit id="6cab0b08bd02b6050df842408e982af9a890db09" translate="yes" xml:space="preserve">
          <source>Cargo can do even more than what we cover in this chapter, so for a full explanation of all its features, see &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="translated">Cargo может даже больше, чем мы рассмотрим в этой главе, поэтому полное объяснение всех его функций см. В &lt;a href=&quot;https://doc.rust-lang.org/cargo/index.html&quot;&gt;документации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fe0ae1f402f8c118952421638bbda4a0245c7148" translate="yes" xml:space="preserve">
          <source>Cargo compiled and ran the test. After the &lt;code&gt;Compiling&lt;/code&gt;, &lt;code&gt;Finished&lt;/code&gt;, and &lt;code&gt;Running&lt;/code&gt; lines is the line &lt;code&gt;running 1 test&lt;/code&gt;. The next line shows the name of the generated test function, called &lt;code&gt;it_works&lt;/code&gt;, and the result of running that test, &lt;code&gt;ok&lt;/code&gt;. The overall summary of running the tests appears next. The text &lt;code&gt;test result: ok.&lt;/code&gt; means that all the tests passed, and the portion that reads &lt;code&gt;1 passed; 0 failed&lt;/code&gt; totals the number of tests that passed or failed.</source>
          <target state="translated">Cargo скомпилировал и запустил тест. После строк &lt;code&gt;Compiling&lt;/code&gt; , &lt;code&gt;Finished&lt;/code&gt; и &lt;code&gt;Running&lt;/code&gt; идет строка, в которой &lt;code&gt;running 1 test&lt;/code&gt; . Следующая строка показывает имя создаваемой функции тестирования, называемых &lt;code&gt;it_works&lt;/code&gt; , и результат выполнения этого теста, &lt;code&gt;ok&lt;/code&gt; . Далее отображается общий отчет о выполнении тестов. Результат текстового &lt;code&gt;test result: ok.&lt;/code&gt; означает, что все тесты пройдены, а часть со значением &lt;code&gt;1 passed; 0 failed&lt;/code&gt; общее количество пройденных или неудачных тестов.</target>
        </trans-unit>
        <trans-unit id="c4eb5dc5401a6eb645def4ec38a6872d478358c8" translate="yes" xml:space="preserve">
          <source>Cargo doesn&amp;rsquo;t assume that crates in a workspace will depend on each other, so we need to be explicit about the dependency relationships between the crates.</source>
          <target state="translated">Cargo не предполагает, что ящики в рабочей области будут зависеть друг от друга, поэтому нам нужно четко указать отношения зависимости между ящиками.</target>
        </trans-unit>
        <trans-unit id="52522f7f0d2d3ffaca1376b83b97f819f079abb5" translate="yes" xml:space="preserve">
          <source>Cargo expects your source files to live inside the &lt;em&gt;src&lt;/em&gt; directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. Using Cargo helps you organize your projects. There&amp;rsquo;s a place for everything, and everything is in its place.</source>
          <target state="translated">Cargo ожидает, что ваши исходные файлы будут &lt;em&gt;находиться в&lt;/em&gt; каталоге &lt;em&gt;src&lt;/em&gt; . Каталог проекта верхнего уровня предназначен только для файлов README, информации о лицензии, файлов конфигурации и всего остального, не связанного с вашим кодом. Использование Cargo помогает вам организовать свои проекты. Для всего есть место, и все на своих местах.</target>
        </trans-unit>
        <trans-unit id="d57f99fa82a3139814f0281a8d7db9f6bec5efb4" translate="yes" xml:space="preserve">
          <source>Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.3.15 of the &lt;code&gt;rand&lt;/code&gt; crate comes out and contains an important bug fix but also contains a regression that will break your code?</source>
          <target state="translated">У Cargo есть механизм, который гарантирует, что вы можете перестраивать один и тот же артефакт каждый раз, когда вы или кто-то другой строит свой код: Cargo будет использовать только указанные вами версии зависимостей, пока вы не укажете иное. Например, что произойдет, если на следующей неделе выйдет версия ящика &lt;code&gt;rand&lt;/code&gt; 0.3.15 , содержащая важное исправление ошибки, но также содержащее регрессию, которая нарушит ваш код?</target>
        </trans-unit>
        <trans-unit id="5fecba2ec115df22ddce40ef5e4003254a79f411" translate="yes" xml:space="preserve">
          <source>Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, what happens if next week version 0.5.6 of the &lt;code&gt;rand&lt;/code&gt; crate comes out and contains an important bug fix but also contains a regression that will break your code?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0760997d436c57df9967acadb1f0cd394905b7" translate="yes" xml:space="preserve">
          <source>Cargo has default settings for each of the profiles that apply when there aren&amp;rsquo;t any &lt;code&gt;[profile.*]&lt;/code&gt; sections in the project&amp;rsquo;s &lt;em&gt;Cargo.toml&lt;/em&gt; file. By adding &lt;code&gt;[profile.*]&lt;/code&gt; sections for any profile you want to customize, you can override any subset of the default settings. For example, here are the default values for the &lt;code&gt;opt-level&lt;/code&gt; setting for the &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt; profiles:</source>
          <target state="translated">Cargo имеет настройки по умолчанию для каждого из профилей, которые применяются, когда в файле &lt;em&gt;Cargo.toml&lt;/em&gt; проекта нет &lt;em&gt;разделов &lt;/em&gt; &lt;code&gt;[profile.*]&lt;/code&gt; . Добавляя разделы &lt;code&gt;[profile.*]&lt;/code&gt; Для любого профиля, который вы хотите настроить, вы можете переопределить любое подмножество настроек по умолчанию. Например, вот значения по умолчанию для параметра &lt;code&gt;opt-level&lt;/code&gt; для профилей &lt;code&gt;dev&lt;/code&gt; и &lt;code&gt;release&lt;/code&gt; :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="76600e94499958e17fb67485a1e7c2de5c580fda" translate="yes" xml:space="preserve">
          <source>Cargo has generated a &amp;ldquo;Hello, world!&amp;rdquo; program for you, just like the one we wrote in Listing 1-1! So far, the differences between our previous project and the project Cargo generates are that Cargo placed the code in the &lt;em&gt;src&lt;/em&gt; directory, and we have a &lt;em&gt;Cargo.toml&lt;/em&gt; configuration file in the top directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825feaa769cfa687d8ced1e2139c1216c1d12d6b" translate="yes" xml:space="preserve">
          <source>Cargo has generated a Hello, world! program for you, just like the one we wrote in Listing 1-1! So far, the differences between our previous project and the project Cargo generates are that Cargo placed the code in the &lt;em&gt;src&lt;/em&gt; directory, and we have a &lt;em&gt;Cargo.toml&lt;/em&gt; configuration file in the top directory.</source>
          <target state="translated">Cargo создал привет, мир! программа для вас, точно такая же, как в листинге 1-1! Пока что разница между нашим предыдущим проектом и проектом, созданным Cargo, &lt;em&gt;заключается&lt;/em&gt; в том , что Cargo поместил код в каталог &lt;em&gt;src&lt;/em&gt; , а у нас есть &lt;em&gt;файл&lt;/em&gt; конфигурации &lt;em&gt;Cargo.toml&lt;/em&gt; в верхнем каталоге.</target>
        </trans-unit>
        <trans-unit id="0a83870f62c314f3acba94fea811002e0cc3ce2e" translate="yes" xml:space="preserve">
          <source>Cargo has two main profiles: the &lt;code&gt;dev&lt;/code&gt; profile Cargo uses when you run &lt;code&gt;cargo build&lt;/code&gt; and the &lt;code&gt;release&lt;/code&gt; profile Cargo uses when you run &lt;code&gt;cargo build --release&lt;/code&gt;. The &lt;code&gt;dev&lt;/code&gt; profile is defined with good defaults for development, and the &lt;code&gt;release&lt;/code&gt; profile has good defaults for release builds.</source>
          <target state="translated">Cargo имеет два основных профиля: профиль &lt;code&gt;dev&lt;/code&gt; Cargo использует при запуске &lt;code&gt;cargo build&lt;/code&gt; Cargo, и профиль &lt;code&gt;release&lt;/code&gt; Cargo использует при запуске &lt;code&gt;cargo build --release&lt;/code&gt; . &lt;code&gt;dev&lt;/code&gt; профиль определяются с хорошим по умолчанию для развития, а &lt;code&gt;release&lt;/code&gt; профиль имеет хорошие значения по умолчанию для версии релиза.</target>
        </trans-unit>
        <trans-unit id="c5de1c8d0a6943cf5337f673e50bc6b42acba179" translate="yes" xml:space="preserve">
          <source>Cargo is Rust&amp;rsquo;s build system and package manager. Most Rustaceans use this tool to manage their Rust projects because Cargo handles a lot of tasks for you, such as building your code, downloading the libraries your code depends on, and building those libraries. (We call libraries your code needs &lt;em&gt;dependencies&lt;/em&gt;.)</source>
          <target state="translated">Cargo - это система сборки и менеджер пакетов Rust. Большинство разработчиков Rustace используют этот инструмент для управления своими проектами на Rust, потому что Cargo выполняет за вас множество задач, таких как создание кода, загрузка библиотек, от которых зависит ваш код, и создание этих библиотек. (Мы называем библиотеки &lt;em&gt;зависимостями&lt;/em&gt; вашего кода .)</target>
        </trans-unit>
        <trans-unit id="859dcf5d594c277f177bb6ea8aa8d8cbd67df76f" translate="yes" xml:space="preserve">
          <source>Cargo is designed so you can extend it with new subcommands without having to modify Cargo. If a binary in your &lt;code&gt;$PATH&lt;/code&gt; is named &lt;code&gt;cargo-something&lt;/code&gt;, you can run it as if it was a Cargo subcommand by running &lt;code&gt;cargo something&lt;/code&gt;. Custom commands like this are also listed when you run &lt;code&gt;cargo --list&lt;/code&gt;. Being able to use &lt;code&gt;cargo install&lt;/code&gt; to install extensions and then run them just like the built-in Cargo tools is a super convenient benefit of Cargo&amp;rsquo;s design!</source>
          <target state="translated">Cargo спроектирован таким образом, что вы можете расширять его с помощью новых подкоманд без необходимости изменять Cargo. Если двоичный файл в вашем &lt;code&gt;$PATH&lt;/code&gt; называется &lt;code&gt;cargo-something&lt;/code&gt; , вы можете запустить его, как если бы это была подкоманда Cargo, запустив &lt;code&gt;cargo something&lt;/code&gt; . Пользовательские команды, подобные этой, также отображаются при запуске &lt;code&gt;cargo --list&lt;/code&gt; . Возможность использовать Cargo &lt;code&gt;cargo install&lt;/code&gt; для установки расширений, а затем запускать их так же, как встроенные инструменты Cargo, - это супер удобное преимущество дизайна Cargo!</target>
        </trans-unit>
        <trans-unit id="e6dcbd31bafff88f294fdfd94f11ce85c6af9ea9" translate="yes" xml:space="preserve">
          <source>Cargo&amp;rsquo;s use of external crates is where it really shines. Before we can write code that uses &lt;code&gt;rand&lt;/code&gt;, we need to modify the &lt;em&gt;Cargo.toml&lt;/em&gt; file to include the &lt;code&gt;rand&lt;/code&gt; crate as a dependency. Open that file now and add the following line to the bottom beneath the &lt;code&gt;[dependencies]&lt;/code&gt; section header that Cargo created for you:</source>
          <target state="translated">Использование внешних ящиков Cargo - вот где это действительно важно. Прежде чем мы сможем написать код, использующий &lt;code&gt;rand&lt;/code&gt; , нам нужно изменить файл &lt;em&gt;Cargo.toml,&lt;/em&gt; чтобы включить ящик &lt;code&gt;rand&lt;/code&gt; в качестве зависимости. Откройте этот файл и добавьте следующую строку внизу под заголовком раздела &lt;code&gt;[dependencies]&lt;/code&gt; , который Cargo создал для вас:</target>
        </trans-unit>
        <trans-unit id="d0e5d0ec3b6fcc84bd7ceec5061561ddfbd803d9" translate="yes" xml:space="preserve">
          <source>Cargo, the included dependency manager and build tool, makes adding, compiling, and managing dependencies painless and consistent across the Rust ecosystem.</source>
          <target state="translated">Cargo,включающий в себя менеджер по зависимостям и инструмент построения,делает добавление,компилирование и управление зависимостями безболезненным и последовательным во всей экосистеме Rust.</target>
        </trans-unit>
        <trans-unit id="df10067f5a8780a3c7f1ce6b060b8d78df100b22" translate="yes" xml:space="preserve">
          <source>Carriage return</source>
          <target state="translated">Возврат вагона</target>
        </trans-unit>
        <trans-unit id="62cdd8dfae78019369c43aae3726f0b8b375ee76" translate="yes" xml:space="preserve">
          <source>Carriage return is escaped as &lt;code&gt;\r&lt;/code&gt;.</source>
          <target state="translated">Возврат каретки экранируется как &lt;code&gt;\r&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10268b4d95e1b2cce7aee0339d945b9ae2dd41ba" translate="yes" xml:space="preserve">
          <source>Cases in Which You Have More Information Than the Compiler</source>
          <target state="translated">Дела,в которых у вас есть больше информации,чем в компиляторе.</target>
        </trans-unit>
        <trans-unit id="86bc837d3c31c98372bd6f6083018ac62b4368fc" translate="yes" xml:space="preserve">
          <source>Cast between types, or rename an import.</source>
          <target state="translated">Переименование между типами или переименование импорта.</target>
        </trans-unit>
        <trans-unit id="2ae2166389b335b7f4c25092cf9112650b632f71" translate="yes" xml:space="preserve">
          <source>Cast performed by &lt;code&gt;e as U&lt;/code&gt;</source>
          <target state="translated">Актерский состав в исполнении &lt;code&gt;e as U&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3358afde0c287145e4ea20d608fde5fdae224bed" translate="yes" xml:space="preserve">
          <source>Cast to a pointer of another type</source>
          <target state="translated">Литой на указатель другого типа</target>
        </trans-unit>
        <trans-unit id="3715fdbfdabbfd0fce470cbc5beac1754055c03c" translate="yes" xml:space="preserve">
          <source>Cast to a pointer to a different type</source>
          <target state="translated">Литой указатель на другой тип.</target>
        </trans-unit>
        <trans-unit id="fd26704362b0bfabb9ec158f63b5957d241e0e29" translate="yes" xml:space="preserve">
          <source>Casting between two integers of the same size (e.g. i32 -&amp;gt; u32) is a no-op</source>
          <target state="translated">Преобразование между двумя целыми числами одинакового размера (например, i32 -&amp;gt; u32) не выполняется.</target>
        </trans-unit>
        <trans-unit id="e37fbb5d946c7608992e6aba78d6bf55abfc7d5c" translate="yes" xml:space="preserve">
          <source>Casting from a float to an integer will round the float towards zero</source>
          <target state="translated">Классификация из плавающих чисел в целые числа округляет плавающий в ноль.</target>
        </trans-unit>
        <trans-unit id="db8b986e848c7678ba68608a3994cebe157b8911" translate="yes" xml:space="preserve">
          <source>Casting from a larger integer to a smaller integer (e.g. u32 -&amp;gt; u8) will truncate</source>
          <target state="translated">Преобразование большего целого числа в меньшее (например, u32 -&amp;gt; u8) приведет к усечению</target>
        </trans-unit>
        <trans-unit id="aabb7e74250ea015819c09fc6010251eaf517a1c" translate="yes" xml:space="preserve">
          <source>Casting from a smaller integer to a larger integer (e.g. u8 -&amp;gt; u32) will</source>
          <target state="translated">Преобразование меньшего целого числа в большее целое (например, u8 -&amp;gt; u32) приведет к</target>
        </trans-unit>
        <trans-unit id="3e946cacf40515335c912e63718fe396339aa25c" translate="yes" xml:space="preserve">
          <source>Casting from an f32 to an f64 is perfect and lossless</source>
          <target state="translated">Отливка от f32 до f64 идеальна и без потерь.</target>
        </trans-unit>
        <trans-unit id="703c3d839ce0b8e7fe06292713cd7bf5349f0d64" translate="yes" xml:space="preserve">
          <source>Casting from an f64 to an f32 will produce the closest possible f32 **</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8773bd2412eced3bdfc907d8954e78f0fc6e8712" translate="yes" xml:space="preserve">
          <source>Casting from an f64 to an f32 will produce the closest possible value (rounding strategy unspecified)</source>
          <target state="translated">Отливка от f64 до f32 даст максимально близкое значение (стратегия округления не определена)</target>
        </trans-unit>
        <trans-unit id="5d63cac748495a7362211aabb1bd9ee08e8b3242" translate="yes" xml:space="preserve">
          <source>Casting from an integer to float will produce the closest possible float *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016b641972acb57a73a2395438ad1440988a4af3" translate="yes" xml:space="preserve">
          <source>Casting from an integer to float will produce the floating point representation of the integer, rounded if necessary (rounding strategy unspecified)</source>
          <target state="translated">При приведении от целого к плавающей точке получается представление целого с плавающей точкой,округленное при необходимости (стратегия округления не определена)</target>
        </trans-unit>
        <trans-unit id="1bcada0b290d8b570562bc205de2195379961144" translate="yes" xml:space="preserve">
          <source>Casts an enum to its discriminant, then uses a numeric cast if needed.</source>
          <target state="translated">Бросает перечисление в дискриминант,а затем,при необходимости,использует числовую шкалу.</target>
        </trans-unit>
        <trans-unit id="f3850d4f598526710f234a54fe262c8ed7f03567" translate="yes" xml:space="preserve">
          <source>Casts except for raw pointer to integer casts</source>
          <target state="translated">Отбрасывает,за исключением необработанного указателя на целочисленные отбрасывания</target>
        </trans-unit>
        <trans-unit id="c665bff72d39db95c0a4402b35ce70577e30fc64" translate="yes" xml:space="preserve">
          <source>Casts to a pointer of another type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab077cb44c56758a71fdc95b6ef923bd1476afd" translate="yes" xml:space="preserve">
          <source>Casts to the &lt;code&gt;char&lt;/code&gt; with the corresponding code point.</source>
          <target state="translated">Преобразуется в &lt;code&gt;char&lt;/code&gt; с соответствующей кодовой точкой.</target>
        </trans-unit>
        <trans-unit id="1f98b96088984f58d6f43126796ba7cd87115a78" translate="yes" xml:space="preserve">
          <source>Catching borrowing errors at runtime rather than compile time means that you would find a mistake in your code later in the development process and possibly not until your code was deployed to production. Also, your code would incur a small runtime performance penalty as a result of keeping track of the borrows at runtime rather than compile time. However, using &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; makes it possible to write a mock object that can modify itself to keep track of the messages it has seen while you&amp;rsquo;re using it in a context where only immutable values are allowed. You can use &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; despite its trade-offs to get more functionality than regular references provide.</source>
          <target state="translated">Выявление ошибок заимствования во время выполнения, а не во время компиляции означает, что вы обнаружите ошибку в своем коде позже в процессе разработки и, возможно, только после того, как ваш код будет развернут в производственной среде. Кроме того, ваш код будет иметь небольшое снижение производительности во время выполнения в результате отслеживания заимствований во время выполнения, а не во время компиляции. Однако использование &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; позволяет написать фиктивный объект, который может изменять себя, чтобы отслеживать сообщения, которые он видел, пока вы используете его в контексте, где разрешены только неизменяемые значения. Вы можете использовать &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; несмотря на его компромиссы, чтобы получить больше функциональности, чем предоставляют обычные ссылки.</target>
        </trans-unit>
        <trans-unit id="92542e5399f55f2d0ff6cb71cde0c802734b5a29" translate="yes" xml:space="preserve">
          <source>Causes compilation to fail with the given error message when encountered.</source>
          <target state="translated">Приводит к сбою компиляции с выданным сообщением об ошибке.</target>
        </trans-unit>
        <trans-unit id="e2c83c0817f92378b4d75b2046644ebe16e4eed6" translate="yes" xml:space="preserve">
          <source>Caution must be taken when calling methods on the mutable reference returned as extra writes could corrupt the output stream.</source>
          <target state="translated">Следует соблюдать осторожность при вызове методов по возвращаемой мутируемой ссылке,так как дополнительная запись может привести к повреждению выходного потока.</target>
        </trans-unit>
        <trans-unit id="09dbd187de708ee21b01806ae5b0ca883102654a" translate="yes" xml:space="preserve">
          <source>Caveat</source>
          <target state="translated">Caveat</target>
        </trans-unit>
        <trans-unit id="56c856e04a702792ee7494e4d85443fbf5d92c9a" translate="yes" xml:space="preserve">
          <source>Cebuano</source>
          <target state="translated">Cebuano</target>
        </trans-unit>
        <trans-unit id="4607bc7c42ac8db29bfc2cd922416f6e854c18d1" translate="yes" xml:space="preserve">
          <source>Cell</source>
          <target state="translated">Cell</target>
        </trans-unit>
        <trans-unit id="4df4ed628351791829257d94ad0813e5e3d83b52" translate="yes" xml:space="preserve">
          <source>Cell types come in two flavors: &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt;. &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; implements interior mutability by moving values in and out of the &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt;. To use references instead of values, one must use the &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; type, acquiring a write lock before mutating. &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; provides methods to retrieve and change the current interior value:</source>
          <target state="translated">Типы ячеек бывают двух видов: &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; и &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; . &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; реализует внутреннюю изменчивость, перемещая значения в &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; . Чтобы использовать ссылки вместо значений, необходимо использовать &lt;code&gt;RefCell&amp;lt;T&amp;gt;&lt;/code&gt; , получив блокировку записи перед изменением. &lt;code&gt;Cell&amp;lt;T&amp;gt;&lt;/code&gt; предоставляет методы для получения и изменения текущего внутреннего значения:</target>
        </trans-unit>
        <trans-unit id="48dd4ef834e56adfbb68416a64e0663d8599a054" translate="yes" xml:space="preserve">
          <source>Cell::as_ptr</source>
          <target state="translated">Cell::as_ptr</target>
        </trans-unit>
        <trans-unit id="0d7e0163576e426d7859658d7cb27a5203e3e1ef" translate="yes" xml:space="preserve">
          <source>Cell::as_slice_of_cells</source>
          <target state="translated">Cell::as_slice_of_cells</target>
        </trans-unit>
        <trans-unit id="24ea70ddb05e0524feb5fd3207ac5f711dc6f0d6" translate="yes" xml:space="preserve">
          <source>Cell::borrow</source>
          <target state="translated">Cell::borrow</target>
        </trans-unit>
        <trans-unit id="0754f341aa2db7bbcf581590e062562f757b06c3" translate="yes" xml:space="preserve">
          <source>Cell::borrow_mut</source>
          <target state="translated">Cell::borrow_mut</target>
        </trans-unit>
        <trans-unit id="362ecb62fffb738daa64db7bf594fa17d89fa6cc" translate="yes" xml:space="preserve">
          <source>Cell::clamp</source>
          <target state="translated">Cell::clamp</target>
        </trans-unit>
        <trans-unit id="2d8b5d709a30aef00b0eb5b270932a33cefb07ed" translate="yes" xml:space="preserve">
          <source>Cell::clone</source>
          <target state="translated">Cell::clone</target>
        </trans-unit>
        <trans-unit id="e6e4ff9e5189a293d64401b67d88a8b34b3d688c" translate="yes" xml:space="preserve">
          <source>Cell::clone_from</source>
          <target state="translated">Cell::clone_from</target>
        </trans-unit>
        <trans-unit id="0067c8e07b34f5ca3bc31fe68cde3b73dd65c529" translate="yes" xml:space="preserve">
          <source>Cell::clone_into</source>
          <target state="translated">Cell::clone_into</target>
        </trans-unit>
        <trans-unit id="ac7c1813db60d3ceae267c09f1b49dd2d8b060bf" translate="yes" xml:space="preserve">
          <source>Cell::cmp</source>
          <target state="translated">Cell::cmp</target>
        </trans-unit>
        <trans-unit id="eda50fe388574d7abf640a426001e3d03601f41d" translate="yes" xml:space="preserve">
          <source>Cell::default</source>
          <target state="translated">Cell::default</target>
        </trans-unit>
        <trans-unit id="95e6d856a58cc93ea0ac0610c4cc4543b9fb6e6f" translate="yes" xml:space="preserve">
          <source>Cell::eq</source>
          <target state="translated">Cell::eq</target>
        </trans-unit>
        <trans-unit id="9e7be83b56c4210f928f8dbe23259025f457cf04" translate="yes" xml:space="preserve">
          <source>Cell::fmt</source>
          <target state="translated">Cell::fmt</target>
        </trans-unit>
        <trans-unit id="c5b19e87999d71a90010f9265c756a8dbae96476" translate="yes" xml:space="preserve">
          <source>Cell::from</source>
          <target state="translated">Cell::from</target>
        </trans-unit>
        <trans-unit id="80f18e414981b02746f88eace0ca9b124176cf67" translate="yes" xml:space="preserve">
          <source>Cell::from_mut</source>
          <target state="translated">Cell::from_mut</target>
        </trans-unit>
        <trans-unit id="d960fa542df3050b294ac84f74b949e7219ccb2b" translate="yes" xml:space="preserve">
          <source>Cell::ge</source>
          <target state="translated">Cell::ge</target>
        </trans-unit>
        <trans-unit id="b7460c43994cefee91fee8367e5b8ceb32898981" translate="yes" xml:space="preserve">
          <source>Cell::get</source>
          <target state="translated">Cell::get</target>
        </trans-unit>
        <trans-unit id="b45695950f375e64c97d0c097280c9717dbbc048" translate="yes" xml:space="preserve">
          <source>Cell::get_mut</source>
          <target state="translated">Cell::get_mut</target>
        </trans-unit>
        <trans-unit id="2d53cbf1d324ee13bc81c24edf43bb1ebb73c3ca" translate="yes" xml:space="preserve">
          <source>Cell::gt</source>
          <target state="translated">Cell::gt</target>
        </trans-unit>
        <trans-unit id="0bb6531752a904a7583ca649d5e49945b5da74a4" translate="yes" xml:space="preserve">
          <source>Cell::into</source>
          <target state="translated">Cell::into</target>
        </trans-unit>
        <trans-unit id="3ca0cfbf64ef6f411b4414cb205a6820ee159299" translate="yes" xml:space="preserve">
          <source>Cell::into_inner</source>
          <target state="translated">Cell::into_inner</target>
        </trans-unit>
        <trans-unit id="b53a5cf7d6e0b073abf65f1f5a2d742cc7522472" translate="yes" xml:space="preserve">
          <source>Cell::le</source>
          <target state="translated">Cell::le</target>
        </trans-unit>
        <trans-unit id="33e386853917e76a71dd993958193c136cc535c9" translate="yes" xml:space="preserve">
          <source>Cell::lt</source>
          <target state="translated">Cell::lt</target>
        </trans-unit>
        <trans-unit id="8f7d30714f46b5a562336654aa520be3afba7aea" translate="yes" xml:space="preserve">
          <source>Cell::max</source>
          <target state="translated">Cell::max</target>
        </trans-unit>
        <trans-unit id="ffce3ad84e2d0d3e65f16e561d54bf22f4f1273a" translate="yes" xml:space="preserve">
          <source>Cell::min</source>
          <target state="translated">Cell::min</target>
        </trans-unit>
        <trans-unit id="9e0082129811243cbfc2e92dd13a3da5a42c314f" translate="yes" xml:space="preserve">
          <source>Cell::ne</source>
          <target state="translated">Cell::ne</target>
        </trans-unit>
        <trans-unit id="7e0a9ead4a41cc5e68f27e5e44c6fd1cf21a7ebe" translate="yes" xml:space="preserve">
          <source>Cell::new</source>
          <target state="translated">Cell::new</target>
        </trans-unit>
        <trans-unit id="8169ff33cea54836ab5cb49e7aebdf6899f013c5" translate="yes" xml:space="preserve">
          <source>Cell::partial_cmp</source>
          <target state="translated">Cell::partial_cmp</target>
        </trans-unit>
        <trans-unit id="ce0f79c05450d6fd3fbaab2d277d00a9d025cc01" translate="yes" xml:space="preserve">
          <source>Cell::replace</source>
          <target state="translated">Cell::replace</target>
        </trans-unit>
        <trans-unit id="2217e7f92e883073d7cd8a327243f5598967f99a" translate="yes" xml:space="preserve">
          <source>Cell::set</source>
          <target state="translated">Cell::set</target>
        </trans-unit>
        <trans-unit id="ccb759e5d08ce2fe208250b4867c08119a5f9b1e" translate="yes" xml:space="preserve">
          <source>Cell::swap</source>
          <target state="translated">Cell::swap</target>
        </trans-unit>
        <trans-unit id="5b19592aa92ab3f1f864127a10aae71791a3475e" translate="yes" xml:space="preserve">
          <source>Cell::take</source>
          <target state="translated">Cell::take</target>
        </trans-unit>
        <trans-unit id="c24f65d0f1a9ef301e7874629928ae9b3a3db01e" translate="yes" xml:space="preserve">
          <source>Cell::to_owned</source>
          <target state="translated">Cell::to_owned</target>
        </trans-unit>
        <trans-unit id="135b1795234ded619836f1cb107c7715ee162c78" translate="yes" xml:space="preserve">
          <source>Cell::try_from</source>
          <target state="translated">Cell::try_from</target>
        </trans-unit>
        <trans-unit id="de09b934b071519838a8f1b2a0f0ea9fae735031" translate="yes" xml:space="preserve">
          <source>Cell::try_into</source>
          <target state="translated">Cell::try_into</target>
        </trans-unit>
        <trans-unit id="c35faebeed3694a09badc3c9d596e308d9fbf61d" translate="yes" xml:space="preserve">
          <source>Cell::type_id</source>
          <target state="translated">Cell::type_id</target>
        </trans-unit>
        <trans-unit id="a3a81a1cdc01f1b4e938ea98d168e1fbd18dc16a" translate="yes" xml:space="preserve">
          <source>Cell::update</source>
          <target state="translated">Cell::update</target>
        </trans-unit>
        <trans-unit id="b1a3416d2077c8bfcafca7b0ecd3f0cecbe10e55" translate="yes" xml:space="preserve">
          <source>Certain Rust types must be cast before passing them to a variadic function, because of arcane ABI rules dictated by the C standard. To fix the error, cast the value to the type specified by the error message (which you may need to import from &lt;code&gt;std::os::raw&lt;/code&gt;).</source>
          <target state="translated">Некоторые типы Rust необходимо преобразовать перед передачей их в функцию с переменным числом аргументов из-за сложных правил ABI, продиктованных стандартом C. Чтобы исправить ошибку, приведите значение к типу, указанному в сообщении об ошибке (которое может потребоваться импортировать из &lt;code&gt;std::os::raw&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a045057bcf496c5138b4f260127b9c2a7520aaf9" translate="yes" xml:space="preserve">
          <source>Certain expressions will treat an expression as a place expression by implicitly borrowing it. For example, it is possible to compare two unsized &lt;a href=&quot;types/slice&quot;&gt;slices&lt;/a&gt; for equality directly, because the &lt;code&gt;==&lt;/code&gt; operator implicitly borrows it's operands:</source>
          <target state="translated">Некоторые выражения будут рассматривать выражение как выражение места, неявно заимствуя его. Например, можно сравнить два несортированные &lt;a href=&quot;types/slice&quot;&gt;ломтики&lt;/a&gt; для равенства непосредственно, потому что &lt;code&gt;==&lt;/code&gt; оператор неявно заимствует это операнды:</target>
        </trans-unit>
        <trans-unit id="7841bd461cdefa1cb80a5325de5c95118882e295" translate="yes" xml:space="preserve">
          <source>Certain forms of expressions, called constant expressions, can be evaluated at compile time. In &lt;a href=&quot;#const-context&quot;&gt;const contexts&lt;/a&gt;, these are the only allowed expressions, and are always evaluated at compile time. In other places, such as &lt;a href=&quot;statements#let-statements&quot;&gt;let statements&lt;/a&gt;, constant expressions &lt;em&gt;may&lt;/em&gt; be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;overflow&lt;/a&gt; are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484b1c57d9aa3f200c281c83b5670a8b7511fe9c" translate="yes" xml:space="preserve">
          <source>Certain forms of expressions, called constant expressions, can be evaluated at compile time. In &lt;a href=&quot;const_eval#const-context&quot;&gt;const contexts&lt;/a&gt;, these are the only allowed expressions, and are always evaluated at compile time. In other places, such as &lt;a href=&quot;statements#let-statements&quot;&gt;let statements&lt;/a&gt;, constant expressions &lt;em&gt;may&lt;/em&gt; be, but are not guaranteed to be, evaluated at compile time. Behaviors such as out of bounds &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;array indexing&lt;/a&gt; or &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;overflow&lt;/a&gt; are compiler errors if the value must be evaluated at compile time (i.e. in const contexts). Otherwise, these behaviors are warnings, but will likely panic at run-time.</source>
          <target state="translated">Некоторые формы выражений, называемые константными выражениями, могут быть вычислены во время компиляции. В &lt;a href=&quot;const_eval#const-context&quot;&gt;константных контекстах&lt;/a&gt; это единственные разрешенные выражения, которые всегда вычисляются во время компиляции. В других местах, таких как &lt;a href=&quot;statements#let-statements&quot;&gt;операторы let&lt;/a&gt; , константные выражения &lt;em&gt;могут&lt;/em&gt; , но не обязательно, оцениваться во время компиляции. Поведение, такое как &lt;a href=&quot;expressions/array-expr#array-and-slice-indexing-expressions&quot;&gt;индексирование массива&lt;/a&gt; за пределами или &lt;a href=&quot;expressions/operator-expr#overflow&quot;&gt;переполнение,&lt;/a&gt; является ошибкой компилятора, если значение должно быть оценено во время компиляции (то есть в константном контексте). В противном случае такое поведение является предупреждением, но, скорее всего, вызовет панику во время выполнения.</target>
        </trans-unit>
        <trans-unit id="4dfaa173bc2e54f4ea58a5a9aa47c2ef8348db1c" translate="yes" xml:space="preserve">
          <source>Certain types and traits that exist in &lt;a href=&quot;../std/index&quot;&gt;the standard library&lt;/a&gt; are known to the Rust compiler. This chapter documents the special features of these types and traits.</source>
          <target state="translated">Компилятору Rust известны некоторые типы и свойства, существующие в &lt;a href=&quot;../std/index&quot;&gt;стандартной библиотеке&lt;/a&gt; . В этой главе описаны особенности этих типов и черт.</target>
        </trans-unit>
        <trans-unit id="d81f3692d7cd234a9b91ed4f4582f15dd8290d89" translate="yes" xml:space="preserve">
          <source>Chain</source>
          <target state="translated">Chain</target>
        </trans-unit>
        <trans-unit id="1b82733f53155096fec9474c1ad8b318eda77f63" translate="yes" xml:space="preserve">
          <source>Chain::all</source>
          <target state="translated">Chain::all</target>
        </trans-unit>
        <trans-unit id="0213f0f3adde0927755a07f9788d3767a617008c" translate="yes" xml:space="preserve">
          <source>Chain::any</source>
          <target state="translated">Chain::any</target>
        </trans-unit>
        <trans-unit id="a37736f1183001064655ade18bb4f291f9bbc05f" translate="yes" xml:space="preserve">
          <source>Chain::borrow</source>
          <target state="translated">Chain::borrow</target>
        </trans-unit>
        <trans-unit id="30c74a10cbbb5860a6b1cc3fa07c6fae420cf772" translate="yes" xml:space="preserve">
          <source>Chain::borrow_mut</source>
          <target state="translated">Chain::borrow_mut</target>
        </trans-unit>
        <trans-unit id="98e80c0b0285eb5bed8081d7f4a2398e62e01164" translate="yes" xml:space="preserve">
          <source>Chain::by_ref</source>
          <target state="translated">Chain::by_ref</target>
        </trans-unit>
        <trans-unit id="014ba9f7ea2696f1d027c3b7edf3d3b4bfba780c" translate="yes" xml:space="preserve">
          <source>Chain::bytes</source>
          <target state="translated">Chain::bytes</target>
        </trans-unit>
        <trans-unit id="cb46642887ca107ccf47c86b009ac98c44fe1bb1" translate="yes" xml:space="preserve">
          <source>Chain::chain</source>
          <target state="translated">Chain::chain</target>
        </trans-unit>
        <trans-unit id="d649190519616be1098b4aaeedda898a20320409" translate="yes" xml:space="preserve">
          <source>Chain::clone</source>
          <target state="translated">Chain::clone</target>
        </trans-unit>
        <trans-unit id="1edc2ab6752846cd09954833abda07944f777091" translate="yes" xml:space="preserve">
          <source>Chain::clone_from</source>
          <target state="translated">Chain::clone_from</target>
        </trans-unit>
        <trans-unit id="91a283e7d90d1f8517c5fe0a616ffb63680c78dd" translate="yes" xml:space="preserve">
          <source>Chain::clone_into</source>
          <target state="translated">Chain::clone_into</target>
        </trans-unit>
        <trans-unit id="af3f639894e154771839a93b9eeb510892478d1d" translate="yes" xml:space="preserve">
          <source>Chain::cloned</source>
          <target state="translated">Chain::cloned</target>
        </trans-unit>
        <trans-unit id="e342d90f23a25722769803a71a3c7a41d7020d33" translate="yes" xml:space="preserve">
          <source>Chain::cmp</source>
          <target state="translated">Chain::cmp</target>
        </trans-unit>
        <trans-unit id="c40b71074beb3107222b57dd476d516685d9a814" translate="yes" xml:space="preserve">
          <source>Chain::collect</source>
          <target state="translated">Chain::collect</target>
        </trans-unit>
        <trans-unit id="ae59ce32fd7a895e6b358fc458a00de9bf286b94" translate="yes" xml:space="preserve">
          <source>Chain::consume</source>
          <target state="translated">Chain::consume</target>
        </trans-unit>
        <trans-unit id="b8e50ea8c9d017524df39290d83c69e9e2a51a4d" translate="yes" xml:space="preserve">
          <source>Chain::copied</source>
          <target state="translated">Chain::copied</target>
        </trans-unit>
        <trans-unit id="cd9311b802ad0325536aab1fd6cd80192eb46215" translate="yes" xml:space="preserve">
          <source>Chain::count</source>
          <target state="translated">Chain::count</target>
        </trans-unit>
        <trans-unit id="5ad362d803d4944ded3c4d762c17bbccb5b943d8" translate="yes" xml:space="preserve">
          <source>Chain::cycle</source>
          <target state="translated">Chain::cycle</target>
        </trans-unit>
        <trans-unit id="89b9fc633b4d9bad4ad9994e23fa6537d31a9bfe" translate="yes" xml:space="preserve">
          <source>Chain::enumerate</source>
          <target state="translated">Chain::enumerate</target>
        </trans-unit>
        <trans-unit id="180e0de0dc8eec2a7bdc65d124b4deaa9621dade" translate="yes" xml:space="preserve">
          <source>Chain::eq</source>
          <target state="translated">Chain::eq</target>
        </trans-unit>
        <trans-unit id="90fb1f503dc000cbeb702ddc9542d66d6f27b40a" translate="yes" xml:space="preserve">
          <source>Chain::fill_buf</source>
          <target state="translated">Chain::fill_buf</target>
        </trans-unit>
        <trans-unit id="7cd6e3916588ab5c5727bc3d3a336590d1072aa4" translate="yes" xml:space="preserve">
          <source>Chain::filter</source>
          <target state="translated">Chain::filter</target>
        </trans-unit>
        <trans-unit id="38214e980122efd0fe5c791b190cd4619909a035" translate="yes" xml:space="preserve">
          <source>Chain::filter_map</source>
          <target state="translated">Chain::filter_map</target>
        </trans-unit>
        <trans-unit id="81cbfc51ad38c6db54cfad1ff517d45952b9b3d0" translate="yes" xml:space="preserve">
          <source>Chain::find</source>
          <target state="translated">Chain::find</target>
        </trans-unit>
        <trans-unit id="05112babeaddc2aab7fea187237423466d3bda92" translate="yes" xml:space="preserve">
          <source>Chain::find_map</source>
          <target state="translated">Chain::find_map</target>
        </trans-unit>
        <trans-unit id="cb89312f759b77745bd448b460dfea67edf57dc9" translate="yes" xml:space="preserve">
          <source>Chain::flat_map</source>
          <target state="translated">Chain::flat_map</target>
        </trans-unit>
        <trans-unit id="5b5166df3a4c1a9c567f1e50cab2ccb06cfc6059" translate="yes" xml:space="preserve">
          <source>Chain::flatten</source>
          <target state="translated">Chain::flatten</target>
        </trans-unit>
        <trans-unit id="dc468132a5dbaa36bf7ee409bee6fb579af3b60a" translate="yes" xml:space="preserve">
          <source>Chain::fmt</source>
          <target state="translated">Chain::fmt</target>
        </trans-unit>
        <trans-unit id="66eb326b5ed011659ff56b1d9808851a76bf9c24" translate="yes" xml:space="preserve">
          <source>Chain::fold</source>
          <target state="translated">Chain::fold</target>
        </trans-unit>
        <trans-unit id="13981f9c65901acd06a7055e10c4721967d02a55" translate="yes" xml:space="preserve">
          <source>Chain::for_each</source>
          <target state="translated">Chain::for_each</target>
        </trans-unit>
        <trans-unit id="f89896ffb04c61d14f4d8e32078eb5ba456abd1e" translate="yes" xml:space="preserve">
          <source>Chain::from</source>
          <target state="translated">Chain::from</target>
        </trans-unit>
        <trans-unit id="33fbc1e11907581323cf04fff2c01ec64f9dbbf7" translate="yes" xml:space="preserve">
          <source>Chain::fuse</source>
          <target state="translated">Chain::fuse</target>
        </trans-unit>
        <trans-unit id="0f64597461d1060870a5357d58955c23fb1f9117" translate="yes" xml:space="preserve">
          <source>Chain::ge</source>
          <target state="translated">Chain::ge</target>
        </trans-unit>
        <trans-unit id="665bf2eeb76a66698512864c346032a25f289ba5" translate="yes" xml:space="preserve">
          <source>Chain::get_mut</source>
          <target state="translated">Chain::get_mut</target>
        </trans-unit>
        <trans-unit id="4febd13e77ca8221618081266a9f088e0d5d3995" translate="yes" xml:space="preserve">
          <source>Chain::get_ref</source>
          <target state="translated">Chain::get_ref</target>
        </trans-unit>
        <trans-unit id="615dcf373549546bb720132ec1e9a4902588cca2" translate="yes" xml:space="preserve">
          <source>Chain::gt</source>
          <target state="translated">Chain::gt</target>
        </trans-unit>
        <trans-unit id="69fc66220e86b279145edc65e175ea2d6980c57c" translate="yes" xml:space="preserve">
          <source>Chain::initializer</source>
          <target state="translated">Chain::initializer</target>
        </trans-unit>
        <trans-unit id="0a1e0d24c6b6afc911808b40fdff23263748e294" translate="yes" xml:space="preserve">
          <source>Chain::inspect</source>
          <target state="translated">Chain::inspect</target>
        </trans-unit>
        <trans-unit id="d4a576504ea88f9480b480179ad285d5e1e00385" translate="yes" xml:space="preserve">
          <source>Chain::into</source>
          <target state="translated">Chain::into</target>
        </trans-unit>
        <trans-unit id="92065c6bef39f1ef48972714ba0f3e5cd126ba1b" translate="yes" xml:space="preserve">
          <source>Chain::into_inner</source>
          <target state="translated">Chain::into_inner</target>
        </trans-unit>
        <trans-unit id="bf6ab9275f6118b08a7f5a91653d3dcbaf3ed5ba" translate="yes" xml:space="preserve">
          <source>Chain::into_iter</source>
          <target state="translated">Chain::into_iter</target>
        </trans-unit>
        <trans-unit id="c62c114b95762caa21916b3f015139588c68e999" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted</source>
          <target state="translated">Chain::is_sorted</target>
        </trans-unit>
        <trans-unit id="c23e7b865b9e334142fa9cd78cf3ef1645f1d616" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted_by</source>
          <target state="translated">Chain::is_sorted_by</target>
        </trans-unit>
        <trans-unit id="3c86fbc00842bab5b2512cc85760975526d63a19" translate="yes" xml:space="preserve">
          <source>Chain::is_sorted_by_key</source>
          <target state="translated">Chain::is_sorted_by_key</target>
        </trans-unit>
        <trans-unit id="3f3ae826a531d9687e1ed33e30f7c927bf648e82" translate="yes" xml:space="preserve">
          <source>Chain::last</source>
          <target state="translated">Chain::last</target>
        </trans-unit>
        <trans-unit id="fd920cdbfdd6ca73353eabfbc8f44c55b1ed7d89" translate="yes" xml:space="preserve">
          <source>Chain::le</source>
          <target state="translated">Chain::le</target>
        </trans-unit>
        <trans-unit id="ed5fe64d8040fd6d1d7884275a33a1b1afc69c38" translate="yes" xml:space="preserve">
          <source>Chain::lines</source>
          <target state="translated">Chain::lines</target>
        </trans-unit>
        <trans-unit id="5d6129cf51f59250b00a299b799af8d9c3f313ff" translate="yes" xml:space="preserve">
          <source>Chain::lt</source>
          <target state="translated">Chain::lt</target>
        </trans-unit>
        <trans-unit id="e6a0ebd53d317e00fc62638391c26e09349c8adc" translate="yes" xml:space="preserve">
          <source>Chain::map</source>
          <target state="translated">Chain::map</target>
        </trans-unit>
        <trans-unit id="68cb6ab3b8776fb82ba6fc36db0271f891cd86ff" translate="yes" xml:space="preserve">
          <source>Chain::max</source>
          <target state="translated">Chain::max</target>
        </trans-unit>
        <trans-unit id="8ad354b6c1e4d2915371673d235e079a10b255fa" translate="yes" xml:space="preserve">
          <source>Chain::max_by</source>
          <target state="translated">Chain::max_by</target>
        </trans-unit>
        <trans-unit id="4771cb53ae25e84c2b3fbdedaf3f7a7d8792cf84" translate="yes" xml:space="preserve">
          <source>Chain::max_by_key</source>
          <target state="translated">Chain::max_by_key</target>
        </trans-unit>
        <trans-unit id="381a44c7dfda059ee3af86d3f2ce67ce9fc3cc0a" translate="yes" xml:space="preserve">
          <source>Chain::min</source>
          <target state="translated">Chain::min</target>
        </trans-unit>
        <trans-unit id="224e48329264cff5ddb9bba2916e4044938563dd" translate="yes" xml:space="preserve">
          <source>Chain::min_by</source>
          <target state="translated">Chain::min_by</target>
        </trans-unit>
        <trans-unit id="8e519b741138a48996b12aa0bef340998d65a166" translate="yes" xml:space="preserve">
          <source>Chain::min_by_key</source>
          <target state="translated">Chain::min_by_key</target>
        </trans-unit>
        <trans-unit id="0f1e85e6bf4b824117a13dab3714072f0d07e383" translate="yes" xml:space="preserve">
          <source>Chain::ne</source>
          <target state="translated">Chain::ne</target>
        </trans-unit>
        <trans-unit id="61c3b1c7122626db5a0c62d2538b897315b62c9a" translate="yes" xml:space="preserve">
          <source>Chain::next</source>
          <target state="translated">Chain::next</target>
        </trans-unit>
        <trans-unit id="6b874bd0ff0b41d0ca43e6437dc52d64d6ebcb8e" translate="yes" xml:space="preserve">
          <source>Chain::next_back</source>
          <target state="translated">Chain::next_back</target>
        </trans-unit>
        <trans-unit id="038918f8a551b65fa1d179fcb6e1caf401927515" translate="yes" xml:space="preserve">
          <source>Chain::nth</source>
          <target state="translated">Chain::nth</target>
        </trans-unit>
        <trans-unit id="32b2c491901513f373fc2b64bd481227fca6c6e3" translate="yes" xml:space="preserve">
          <source>Chain::nth_back</source>
          <target state="translated">Chain::nth_back</target>
        </trans-unit>
        <trans-unit id="c50e4fa9ce495c6c72d03dd2358f5d8c97f2f631" translate="yes" xml:space="preserve">
          <source>Chain::partial_cmp</source>
          <target state="translated">Chain::partial_cmp</target>
        </trans-unit>
        <trans-unit id="57d8a7e321cdc85718596c418d6dca1a4d09ef4e" translate="yes" xml:space="preserve">
          <source>Chain::partition</source>
          <target state="translated">Chain::partition</target>
        </trans-unit>
        <trans-unit id="594658cc41013289c194b90ad67aa99e032546ce" translate="yes" xml:space="preserve">
          <source>Chain::peekable</source>
          <target state="translated">Chain::peekable</target>
        </trans-unit>
        <trans-unit id="0bf900c2572e63f7c84fd0e43ae4a4e0e18d63a0" translate="yes" xml:space="preserve">
          <source>Chain::position</source>
          <target state="translated">Chain::position</target>
        </trans-unit>
        <trans-unit id="b102c811470d874773804b4d51dc3351bca7f303" translate="yes" xml:space="preserve">
          <source>Chain::product</source>
          <target state="translated">Chain::product</target>
        </trans-unit>
        <trans-unit id="14506f04af639fa99d54aa64b5fcfe4d211942a1" translate="yes" xml:space="preserve">
          <source>Chain::read</source>
          <target state="translated">Chain::read</target>
        </trans-unit>
        <trans-unit id="7b52a243a141d4a7496a1af726d77d750537c080" translate="yes" xml:space="preserve">
          <source>Chain::read_exact</source>
          <target state="translated">Chain::read_exact</target>
        </trans-unit>
        <trans-unit id="302184a4fd8efd550f088331cc949e7e2f34e06b" translate="yes" xml:space="preserve">
          <source>Chain::read_line</source>
          <target state="translated">Chain::read_line</target>
        </trans-unit>
        <trans-unit id="65733d73e4097dcc3afdbb937efed9028ed269cd" translate="yes" xml:space="preserve">
          <source>Chain::read_to_end</source>
          <target state="translated">Chain::read_to_end</target>
        </trans-unit>
        <trans-unit id="ff966f9b9dc533871f0548dbe9f4da1d008289c5" translate="yes" xml:space="preserve">
          <source>Chain::read_to_string</source>
          <target state="translated">Chain::read_to_string</target>
        </trans-unit>
        <trans-unit id="1a7df76576c52d8842f4ee97a42bdfa2ae2c9dc8" translate="yes" xml:space="preserve">
          <source>Chain::read_until</source>
          <target state="translated">Chain::read_until</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
