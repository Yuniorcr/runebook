<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="dd47d3d9defb9d0e06bd3e10365751c8e663406f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt;, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67052930f5ba11262dce6b9369319b549f57f918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa06ced14a3385987b86c9e9788919b13ad4eba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by the &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; печатает текущий стек каталогов, созданный командой &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="960d1e17f7b9ecf2dc9f4146dd86d90f7a66c6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; from the job list without terminating them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e9e94ab8f86bdeefa011d87a89eb714e2e975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all jobs from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; удаляет все задания из списка заданий, не прерывая их.</target>
        </trans-unit>
        <trans-unit id="96ed64c4a46b71c7f378a79bc509571c57d254f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a033e91a71f36b0fee3effb2f84125242340bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; удаляет указанное &lt;a href=&quot;index#syntax-job-control&quot;&gt;задание&lt;/a&gt; из списка заданий. Сама работа продолжает существовать, но рыба ее больше не отслеживает.</target>
        </trans-unit>
        <trans-unit id="9c723a54d18efe8d350eb3bbea07e3d214e66566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; возвращает 0, если все указанные задания были успешно отклонены, и 1, если возникли какие-либо проблемы.</target>
        </trans-unit>
        <trans-unit id="1ecb4eb0616062c503a5f344f1a05890c949fe35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;down-line&lt;/code&gt;, move down one line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b690e3c2f3c4d26267990ca1121e08803e26790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downcase-word&lt;/code&gt;, make the current word lowercase</source>
          <target state="translated">&lt;code&gt;downcase-word&lt;/code&gt; , сделать текущее слово строчным</target>
        </trans-unit>
        <trans-unit id="c8ce83fdd366a12c3214fbb25e2354db22918e72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; - Euler's number.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; - число Эйлера.</target>
        </trans-unit>
        <trans-unit id="b60b17e75641cc38e1c4124096a48c500b5a0905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo $flounder &amp;gt;&amp;amp;2 | less&lt;/code&gt; is the first job, &lt;code&gt;and echo $catfish&lt;/code&gt; the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db82cff03deb4d0edad47e48c508110149601fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo&lt;/code&gt; displays a string of text.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; отображает строку текста.</target>
        </trans-unit>
        <trans-unit id="197832f8ace5133971e0d466b344b70886d4b7fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt;. The arguments are passed to the event handlers as function arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ab97d4f9361c5405fbd1cb8b1c830e462276d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; испускает или запускает событие. События доставляются или перехватываются специальными функциями, называемыми обработчиками событий. Аргументы передаются обработчикам событий как аргументы функции.</target>
        </trans-unit>
        <trans-unit id="4d522681c2d73791cceab1025800721dd4d39780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-buffer&lt;/code&gt;, moves to the end of the buffer, i.e. the end of the first line</source>
          <target state="translated">&lt;code&gt;end-of-buffer&lt;/code&gt; , перемещается в конец буфера, то есть в конец первой строки</target>
        </trans-unit>
        <trans-unit id="b0b2f9cdb44af1315c1e9e593723762d03d3fe51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-history&lt;/code&gt;, move to the end of the history</source>
          <target state="translated">&lt;code&gt;end-of-history&lt;/code&gt; , перейти к концу истории</target>
        </trans-unit>
        <trans-unit id="7707e2618c27c9ed8346db38dfd79af1c381cb7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-line&lt;/code&gt;, move to the end of the line</source>
          <target state="translated">&lt;code&gt;end-of-line&lt;/code&gt; , перейти в конец строки</target>
        </trans-unit>
        <trans-unit id="af8e60a2a7ae6dc063d3b5432c2478d27ef3c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-selection&lt;/code&gt;, end selecting text</source>
          <target state="translated">&lt;code&gt;end-selection&lt;/code&gt; , конец выделения текста</target>
        </trans-unit>
        <trans-unit id="e80d6bfedde793f5f7c0f4d9d3d5e295a6d21cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands started by one of the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262f87c81f23dff1f7f93a5b6044595d7948ad4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; завершает блок команд.</target>
        </trans-unit>
        <trans-unit id="50137453d16688a498916282a2c1c45a4f3bcc6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; оценивает указанные параметры как команду. Если указано более одного параметра, все параметры будут объединены с использованием символа пробела в качестве разделителя.</target>
        </trans-unit>
        <trans-unit id="54915828756074f95f7a1e549b17591d5bbbc7f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec emacs&lt;/code&gt; starts up the emacs text editor, and exits &lt;code&gt;fish&lt;/code&gt;. When emacs exits, the session will terminate.</source>
          <target state="translated">&lt;code&gt;exec emacs&lt;/code&gt; запускает текстовый редактор emacs и закрывает &lt;code&gt;fish&lt;/code&gt; . Когда emacs завершится, сессия завершится.</target>
        </trans-unit>
        <trans-unit id="dc50b22031778292cfda48a3d988ca690c6c2412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec&lt;/code&gt; replaces the currently running shell with a new command. On successful completion, &lt;code&gt;exec&lt;/code&gt; never returns. &lt;code&gt;exec&lt;/code&gt; cannot be used inside a pipeline.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; заменяет текущую запущенную оболочку новой командой. При успешном завершении &lt;code&gt;exec&lt;/code&gt; никогда не возвращается. &lt;code&gt;exec&lt;/code&gt; нельзя использовать внутри конвейера.</target>
        </trans-unit>
        <trans-unit id="9f9d21c01c5295004a45a90f29ee49703808f517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt; run the current commandline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a098fbbbc0f4e241457fac3357173a899382b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt;, run the current commandline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b4c92277d3c3b535fdab93f22262c655be96df1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit code. Otherwise, the exit code will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; заставляет рыбу выходить. Если указан &lt;code&gt;STATUS&lt;/code&gt; , он будет преобразован в целое число и использован как код выхода. В противном случае код выхода будет кодом последней выполненной команды.</target>
        </trans-unit>
        <trans-unit id="d6ae4ec9fd08b1761aca796efb020b9925ac0927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6efbe4d59f1b07df60218af12c18782d648132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt;, exit the shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e29309373a74a1b16ddfa0609041f77380dff25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp&lt;/code&gt; - the base-e exponential function</source>
          <target state="translated">&lt;code&gt;exp&lt;/code&gt; - экспоненциальная функция с основанием e</target>
        </trans-unit>
        <trans-unit id="4d6b69f792298e243e4d6849a74e1f6939dd5c74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt; expands any abbreviation currently under the cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a0547f40f5e7cbc43f2d88ccf484a458a7b2e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt;, expands any abbreviation currently under the cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ec88c5f26ffd60440d3112086d3f1c16e73ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fac&lt;/code&gt; - factorial</source>
          <target state="translated">&lt;code&gt;fac&lt;/code&gt; - факториал</target>
        </trans-unit>
        <trans-unit id="7bd010b23a35ff01964bb2a67cb5239733c4271d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; sets the exit status to 1.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; устанавливает статус выхода на 1.</target>
        </trans-unit>
        <trans-unit id="0ca1e464b704300c81bf4a662e655838605e064f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt; lists all available feature flags.</source>
          <target state="translated">&lt;code&gt;features&lt;/code&gt; перечисляет все доступные флаги функций.</target>
        </trans-unit>
        <trans-unit id="616eeb15e25e0733aa1a4c65bae40d8e08b73a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg %3&lt;/code&gt; will put job 3 into the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415ac7210f05f5e605584e4764ac5505f5a0a831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If &lt;code&gt;PID&lt;/code&gt; is specified, the job containing a process with the specified process ID is put in the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba254c3859c0271dd6d51a7fa26986d0843a3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7a1110af9305bc1cfb185b18660b97a03ee068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; выводит указанное &lt;a href=&quot;index#syntax-job-control&quot;&gt;задание&lt;/a&gt; на передний план, возобновляя его, если оно остановлено. Пока выполняется задание переднего плана, рыба приостанавливается. Если задание не указано, на передний план выводится последнее используемое задание. Если указан PID, на передний план выводится задание с указанным идентификатором группы.</target>
        </trans-unit>
        <trans-unit id="2aa0e0e8cf8a0bba6d31683fafcc730149fe3080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; will put the last job in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; поместит последнее задание на передний план.</target>
        </trans-unit>
        <trans-unit id="f59d3cc746010fada2bbe7590bb1f716dca37ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; печатает имя файла текущего запущенного скрипта. Также &lt;code&gt;current-filename&lt;/code&gt; , &lt;code&gt;-f&lt;/code&gt; или &lt;code&gt;--current-filename&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b055c8f73612d13a371ff0e797dc3bdb9dc4c0ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;. This depends on how the script was called - if it was called via a symlink, the symlink will be returned, and if the current script was received via &lt;code&gt;source&lt;/code&gt; it will be &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cb67ef43537c65789f446737251042e346c8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.</source>
          <target state="translated">&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; запустит веб-браузер Firefox в фоновом режиме и удалит его из списка заданий, то есть он не будет закрыт при закрытии процесса Fish.</target>
        </trans-unit>
        <trans-unit id="b79f46ab70d3df2b244e8bc8b2fd59aefcebc9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish-path&lt;/code&gt; prints the absolute path to the currently executing instance of fish.</source>
          <target state="translated">&lt;code&gt;fish-path&lt;/code&gt; печатает абсолютный путь к исполняющемуся в данный момент экземпляру fish.</target>
        </trans-unit>
        <trans-unit id="d3c1add6b5f641c5abbdbd7961e2d0d5e497b5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also has man pages for its commands. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; также имеет справочные страницы для своих команд. Например, &lt;code&gt;man set&lt;/code&gt; покажет документацию для &lt;code&gt;set&lt;/code&gt; в виде справочной страницы.</target>
        </trans-unit>
        <trans-unit id="055cf18d69e0e1c45eaf95982b74b7ac7158e0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also sends additional information to the user through the values of certain environment variables. The user cannot change the values of most of these variables.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; также отправляет дополнительную информацию пользователю через значения определенных переменных среды. Пользователь не может изменить значения большинства этих переменных.</target>
        </trans-unit>
        <trans-unit id="9c00223ef2e28efafb5de62e61373ec8694c8272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates arrays from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; автоматически создает массивы из всех переменных среды, имена которых заканчиваются на PATH, разделяя их двоеточиями. Другие переменные не разделяются автоматически.</target>
        </trans-unit>
        <trans-unit id="0015b01676196bbfa856dc3993196f600126666f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates lists from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9c60f74c31afa12603c403c8cb2df121109c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can also complete many commands, like git branches:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; также может выполнять множество команд, например ветки git:</target>
        </trans-unit>
        <trans-unit id="793e1a6244dde2eb4f7f379dc7e8580b680ffd66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable. To access one element of a list, use the index of the element inside of square brackets, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e0afc27485f7f758e91f83d0782e508a6c6b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list of multiple strings inside of a variable. To access one element of an array, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; может хранить список из нескольких строк внутри переменной. Чтобы получить доступ к одному элементу массива, используйте индекс элемента внутри квадратных скобок, например:</target>
        </trans-unit>
        <trans-unit id="e5066e9e10becfb9012a96c88f59108b874b77ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; comes with a rich set of tab completions, that work &quot;out of the box.&quot;</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поставляется с богатым набором вкладок, которые работают &amp;laquo;из коробки&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="59bdeaf3ad58016c3bbb3a77baf3160d076a45b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as '&lt;code&gt;--color&lt;/code&gt;') and an old-style long switch (like '&lt;code&gt;-shuffle&lt;/code&gt;'), respectively. If the command 'myprog' has an option '-o' which can also be written as '&lt;code&gt;--output&lt;/code&gt;', and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; имеет специальный синтаксис для поддержки указания переключателей, принимаемых командой. Переключатели &lt;code&gt;-s&lt;/code&gt; , &lt;code&gt;-l&lt;/code&gt; и &lt;code&gt;-o&lt;/code&gt; используются для указания короткого переключателя (одиночный символ, например &lt;code&gt;-l&lt;/code&gt; ), длинного переключателя стиля GNU (такого как ' &lt;code&gt;--color&lt;/code&gt; ') и длинного переключателя старого стиля (например, ' &lt;code&gt;-shuffle&lt;/code&gt; ') соответственно. Если в команде myprog есть опция -o, которую можно также записать как &lt;code&gt;--output&lt;/code&gt; , и которая может принимать дополнительное значение &amp;laquo;да&amp;raquo; или &amp;laquo;нет&amp;raquo;, это можно указать, написав:</target>
        </trans-unit>
        <trans-unit id="41f19a29132a5adfb147fa540bd9b6a1c6c80fb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as &lt;code&gt;--color&lt;/code&gt;) and an old-style long switch (like &lt;code&gt;-shuffle&lt;/code&gt;), respectively. If the command 'myprog' has an option '-o' which can also be written as &lt;code&gt;--output&lt;/code&gt;, and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883ae059c343a505686874682744dfcbd510e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777f76e48b998a0f0dd3ad01a18ccbbc0bcab718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;commands#help&quot;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; имеет обширную справочную систему. Используйте команду &lt;a href=&quot;commands#help&quot;&gt; &lt;code&gt;help&lt;/code&gt; &lt;/a&gt; для получения справки по определенной теме или команде. Например, написание &lt;code&gt;help syntax&lt;/code&gt; отображает &lt;a href=&quot;#syntax&quot;&gt;синтаксический раздел&lt;/a&gt; этой документации.</target>
        </trans-unit>
        <trans-unit id="46c33eab942b519e7667b927731bb7a993f50301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; имеет отличную справку и справочные страницы. Запустите &lt;code&gt;help&lt;/code&gt; , чтобы открыть справку в веб-браузере, и &lt;code&gt;man&lt;/code&gt; , чтобы открыть ее на странице руководства. Вы также можете попросить о помощи с определенной командой, например, с &lt;code&gt;help set&lt;/code&gt; открытия в веб-браузере или с &lt;code&gt;man set&lt;/code&gt; чтобы увидеть ее в терминале.</target>
        </trans-unit>
        <trans-unit id="df0088c6d7eab9031f3479af26efcea62bffcb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; interprets the command line as it is typed and uses syntax highlighting to provide feedback to the user. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; интерпретирует командную строку по мере ее ввода и использует подсветку синтаксиса, чтобы предоставить пользователю обратную связь. Самая важная обратная связь - это обнаружение потенциальных ошибок. По умолчанию ошибки отмечены красным.</target>
        </trans-unit>
        <trans-unit id="da8c01eaaa46f89b4d5f309ef717ebd0dcf5f70a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. The full manual is available &lt;a href=&quot;index&quot;&gt;in HTML&lt;/a&gt; by using the &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; command from inside fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; - это оболочка командной строки, написанная в основном для интерактивного использования. Полное руководство доступно &lt;a href=&quot;index&quot;&gt;в HTML&lt;/a&gt; с помощью команды &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; внутри fish.</target>
        </trans-unit>
        <trans-unit id="44cd2530e9b46d3f729547fd73d82a1108033fd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The &lt;a href=&quot;../index#intro&quot;&gt;full manual&lt;/a&gt; is available in HTML by using the &lt;a href=&quot;help#cmd-help&quot;&gt;help&lt;/a&gt; command from inside fish, and in the &lt;code&gt;fish-doc(1)&lt;/code&gt; man page. The &lt;a href=&quot;../tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt; is available as HTML via &lt;code&gt;help tutorial&lt;/code&gt; or in &lt;code&gt;fish-tutorial(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fca2b4c4ec083073cb841e35a4f9e49e66357a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. &lt;code&gt;fish&lt;/code&gt; supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; - это полностью оборудованная оболочка командной строки (например, bash или zsh), которая удобна и удобна для пользователя. &lt;code&gt;fish&lt;/code&gt; поддерживает такие мощные функции, как подсветка синтаксиса, автоподсказки и завершение табуляции, которые просто работают, не требуя изучения или настройки.</target>
        </trans-unit>
        <trans-unit id="5b0b5a9ecbb138c52d5af59c69a665ea6bf3807c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; marks functions that have been created by &lt;code&gt;alias&lt;/code&gt; by including the command used to create them in the function description. You can list &lt;code&gt;alias&lt;/code&gt;-created functions by running &lt;code&gt;alias&lt;/code&gt; without arguments. They must be erased using &lt;code&gt;functions -e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; отмечает функции, которые были созданы &lt;code&gt;alias&lt;/code&gt; путем включения команды, использованной для их создания, в описание функции. Вы можете указать &lt;code&gt;alias&lt;/code&gt; -created функции, запустив &lt;code&gt;alias&lt;/code&gt; без аргументов. Их нужно стереть с помощью &lt;code&gt;functions -e&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b322552368e11dea3fda5d3f95dfd4c97001414f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; provides a large number of program specific completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. The latter include:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; предоставляет большое количество доработок для конкретных программ. Большинство из этих дополнений представляют собой простые параметры, такие как параметр &lt;code&gt;-l&lt;/code&gt; для &lt;code&gt;ls&lt;/code&gt; , но некоторые из них более продвинутые. К последним относятся:</target>
        </trans-unit>
        <trans-unit id="092c5ff9b15fe33669b2dd44c28e0b29ef6d3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; запускает команды, как и другие оболочки: вы вводите команду, а затем ее аргументы. Пробелы - это разделители:</target>
        </trans-unit>
        <trans-unit id="53af98c8dc19ee66b69f397cd23abb202d994001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a default version of this function that displays the function name and line number of the current execution context.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поставляется с версией этой функции по умолчанию, которая отображает имя функции и номер строки текущего контекста выполнения.</target>
        </trans-unit>
        <trans-unit id="ad47759ce8e74a9a1a71d60b65c5fa5bebbae7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a large number of builtin commands, shellscript functions and external commands. These are all described below.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поставляется с большим количеством встроенных команд, shellscript функций и внешних команд. Все это описано ниже.</target>
        </trans-unit>
        <trans-unit id="0a90fcc43cdc3c81feca88b4008c851ae0986302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a number of example prompts that can be chosen with the &lt;code&gt;fish_config&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поставляется с рядом примеров запросов , которые могут быть выбраны с помощью &lt;code&gt;fish_config&lt;/code&gt; команды.</target>
        </trans-unit>
        <trans-unit id="cf5c6397e1462cac24e466bcb172b4245c8ec087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string '&lt;code&gt;__fish_&lt;/code&gt;'. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поставляется с несколькими функциями, которые очень полезны при написании завершений для конкретных команд. Имя большинства этих функций начинается со строки &amp;laquo; &lt;code&gt;__fish_&lt;/code&gt; &amp;raquo;. Такие функции являются внутренними для &lt;code&gt;fish&lt;/code&gt; и их название и интерфейс могут измениться в будущих версиях Fish. Тем не менее, некоторые из них могут быть очень полезны при написании доработок. Здесь описаны некоторые из этих функций. Имейте в виду, что они могут быть удалены или изменены в будущих версиях fish.</target>
        </trans-unit>
        <trans-unit id="91dadf4819fbfd8332e32282b1b319153f74d4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string &lt;code&gt;__fish_&lt;/code&gt;. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4667f5ebd401acef191ebf9acbeffe48080df4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; начинается с выполнения команд в &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; . Вы можете создать его, если он не существует.</target>
        </trans-unit>
        <trans-unit id="a3f7baca4cc4c811bf03a172d5443fd82b130b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d041cb58f21e5038ba1dd64df8fd389a7bcc1973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; предлагает команды по мере ввода и показывает предложение серым цветом справа от курсора. Например:</target>
        </trans-unit>
        <trans-unit id="ca9e9797a19941a7503fe9bfd4d9f99d4b5506fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; поддерживает знакомый подстановочный знак &lt;code&gt;*&lt;/code&gt; . Чтобы перечислить все файлы JPEG:</target>
        </trans-unit>
        <trans-unit id="c25f03f75074f13b43a3d6e3ec17960348bf4ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs style kill ring for copy and paste functionality. Use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed) is inserted into a linked list of kills, called the kill ring. To paste the latest value from the kill ring use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt;. After pasting, use &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt; to rotate to the previous kill.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; использует список уничтожения в стиле Emacs для функций копирования и вставки. Используйте &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K,&lt;/b&gt; чтобы обрезать от текущей позиции курсора до конца строки. Обрезанная строка (также известная как &amp;laquo;убитый&amp;raquo;) вставляется в связанный список убийств, называемый списком убийств. Чтобы вставить последнее значение из уничтожений использования кольца &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Y&lt;/b&gt; . После вставки используйте &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Y,&lt;/b&gt; чтобы повернуть к предыдущему убийству.</target>
        </trans-unit>
        <trans-unit id="b96dcac69316f2c77694b9271a53c0a5debdac38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f38463145211dc9331425ead2c2f55cef58e9aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses parentheses for subcommands. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; использует круглые скобки для подкоманд. Например:</target>
        </trans-unit>
        <trans-unit id="e39a660626f0dd1f456661f39a8be78d661fa1b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bd535d149860f389ddcd2747d2dd0ba1abb31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; будет подчеркивать допустимые пути к файлам по мере их ввода:</target>
        </trans-unit>
        <trans-unit id="90884bdb446dcf5a31d48611b27f62aa1e8991c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_add_path&lt;/code&gt; is a simple way to add more components to fish's $PATH. It does this by adding the components either to $fish_user_paths or directly to $PATH (if the &lt;code&gt;--path&lt;/code&gt; switch is given).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bb18741f901028c968a22fdbfdd38f9d5a2449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous East Asian characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; контролирует вычисленную ширину неоднозначных восточноазиатских символов. Это должно быть установлено в 1, если ваш эмулятор терминала отображает эти символы как одинарные (обычно), или 2, если они имеют двойную ширину.</target>
        </trans-unit>
        <trans-unit id="f78339b85758f15675a7444a6144fa421dbe6de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b607e6a436caa90fd2ac6f9303607f5ef5f327e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6427ffb69bb59b5e71303f4c042483c528d8c57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; is the prompt function when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c58022e2a675960181a411a289466c6f46cff39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_cancel&lt;/code&gt;, which is emitted when a commandline is cleared (used for terminal-shell integration).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4f27241087cb9a6d563e249660ba24a88243da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_autosuggestion&lt;/code&gt;, the color used for autosuggestions</source>
          <target state="translated">&lt;code&gt;fish_color_autosuggestion&lt;/code&gt; , цвет, используемый для самовнушений</target>
        </trans-unit>
        <trans-unit id="6aab75facde4fc6df798358344a9433f5e66bc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cancel&lt;/code&gt;, the color for the '^C' indicator on a canceled command</source>
          <target state="translated">&lt;code&gt;fish_color_cancel&lt;/code&gt; , цвет индикатора '^ C' в отмененной команде</target>
        </trans-unit>
        <trans-unit id="733b6c1f54d7b6d136bd7e04221c88502c82f59d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_command&lt;/code&gt;, the color for commands</source>
          <target state="translated">&lt;code&gt;fish_color_command&lt;/code&gt; , цвет команд</target>
        </trans-unit>
        <trans-unit id="01d519230d52778f1d20dccecc138d7caa67f264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_comment&lt;/code&gt;, the color used for code comments</source>
          <target state="translated">&lt;code&gt;fish_color_comment&lt;/code&gt; , цвет, используемый для комментариев кода</target>
        </trans-unit>
        <trans-unit id="dc90b5b2767b7d545e27c7e6096d114342de7bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cwd&lt;/code&gt;, the color used for the current working directory in the default prompt</source>
          <target state="translated">&lt;code&gt;fish_color_cwd&lt;/code&gt; , цвет, используемый для текущего рабочего каталога в приглашении по умолчанию</target>
        </trans-unit>
        <trans-unit id="eb987595157776e67d6a5797f3e433f9cc57d537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_end&lt;/code&gt;, the color for process separators like ';' and '&amp;amp;'</source>
          <target state="translated">&lt;code&gt;fish_color_end&lt;/code&gt; , цвет разделителей процессов, таких как ';' и '&amp;amp;'</target>
        </trans-unit>
        <trans-unit id="422b7f08d142d5b33c0430e85d9d7ec90209dee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_error&lt;/code&gt;, the color used to highlight potential errors</source>
          <target state="translated">&lt;code&gt;fish_color_error&lt;/code&gt; , цвет, используемый для выделения потенциальных ошибок</target>
        </trans-unit>
        <trans-unit id="4bb611c7ae46b00d5c7c4cac298882c1cef474d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_escape&lt;/code&gt;, the color used to highlight character escapes like '\n' and '\x70'</source>
          <target state="translated">&lt;code&gt;fish_color_escape&lt;/code&gt; , цвет, используемый для выделения экранированных символов, таких как '\ n' и '\ x70'</target>
        </trans-unit>
        <trans-unit id="aa1b2c546ddbc908168ffebb47d0c6d45f0c4edd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host&lt;/code&gt;, the color used to print the current host system in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_host&lt;/code&gt; , цвет, используемый для печати текущей хост-системы в некоторых подсказках по умолчанию для рыб.</target>
        </trans-unit>
        <trans-unit id="7e3328634fc97f1a8a761faa67ea54c39d6ba5a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host_remote&lt;/code&gt;, the color used to print the current host system in some of fish default prompts, if fish is running remotely (via ssh or similar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8da305ccb3f8313b18d70a489b64856bf5cfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_match&lt;/code&gt;, the color used to highlight matching parenthesis</source>
          <target state="translated">&lt;code&gt;fish_color_match&lt;/code&gt; , цвет, используемый для выделения подходящей круглой скобки</target>
        </trans-unit>
        <trans-unit id="33482fa503efab0519dba81d1dd5ad6b84e139c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_normal&lt;/code&gt;, the default color</source>
          <target state="translated">&lt;code&gt;fish_color_normal&lt;/code&gt; , цвет по умолчанию</target>
        </trans-unit>
        <trans-unit id="899c29bf9a5dc62025dfd8ee621041575ce62bbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_operator&lt;/code&gt;, the color for parameter expansion operators like '*' and '~'</source>
          <target state="translated">&lt;code&gt;fish_color_operator&lt;/code&gt; , цвет для операторов расширения параметров, таких как '*' и '~'</target>
        </trans-unit>
        <trans-unit id="ef5f8193323e367ca260a5737dce24ecac03bf9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_param&lt;/code&gt;, the color for regular command parameters</source>
          <target state="translated">&lt;code&gt;fish_color_param&lt;/code&gt; , цвет для обычных параметров команды</target>
        </trans-unit>
        <trans-unit id="49c4274e0b503cf22abea61dd7205cd045ea1a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_quote&lt;/code&gt;, the color for quoted blocks of text</source>
          <target state="translated">&lt;code&gt;fish_color_quote&lt;/code&gt; , цвет цитируемых блоков текста</target>
        </trans-unit>
        <trans-unit id="5b792112bcb5515788014934301442436baf4df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_redirection&lt;/code&gt;, the color for IO redirections</source>
          <target state="translated">&lt;code&gt;fish_color_redirection&lt;/code&gt; , цвет для перенаправления ввода-вывода</target>
        </trans-unit>
        <trans-unit id="c607feb13af13865862aa0d14304c945c83f6955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_search_match&lt;/code&gt;, used to highlight history search matches and the selected pager item (must be a background)</source>
          <target state="translated">&lt;code&gt;fish_color_search_match&lt;/code&gt; , используется для выделения совпадений поиска в истории и выбранного элемента пейджера (должен быть фоном)</target>
        </trans-unit>
        <trans-unit id="e803fbe16df6b0f3458dfc67b45c89270b33c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_selection&lt;/code&gt;, the color used when selecting text (in vi visual mode)</source>
          <target state="translated">&lt;code&gt;fish_color_selection&lt;/code&gt; , цвет, используемый при выделении текста (в визуальном режиме vi)</target>
        </trans-unit>
        <trans-unit id="c1295a7fe31f87f51d695457ac2170aa53f10fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_user&lt;/code&gt;, the color used to print the current username in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_user&lt;/code&gt; , цвет, используемый для печати текущего имени пользователя в некоторых подсказках по умолчанию для рыб.</target>
        </trans-unit>
        <trans-unit id="04bb96ac3bb736d6ac808f4395018348bc676e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_command_not_found&lt;/code&gt;, which is emitted whenever a command lookup failed.</source>
          <target state="translated">&lt;code&gt;fish_command_not_found&lt;/code&gt; , который выдается всякий раз, когда поиск команды не удался.</target>
        </trans-unit>
        <trans-unit id="a4033f2f2afffa86c138e812a0b0602cdea0f3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; opens a new web browser window and allows you to configure certain fish settings.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; открывает новое окно веб-браузера и позволяет настроить определенные параметры рыбы.</target>
        </trans-unit>
        <trans-unit id="51703c7e04cc8ef77397ffa5049c1e93750bc0ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; optionally accepts name of the initial configuration tab. For e.g. &lt;code&gt;fish_config history&lt;/code&gt; will start configuration interface with history tab.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; опционально принимает имя вкладки начальной конфигурации. Например, &lt;code&gt;fish_config history&lt;/code&gt; запустит интерфейс конфигурации с вкладкой истории.</target>
        </trans-unit>
        <trans-unit id="fecc048a3ad3bcf34e0113164e5621e9895f65b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts a local web server and then opens a web browser window; when you have finished, close the browser window and then press the Enter key to terminate the configuration session.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; запускает локальный веб-сервер, а затем открывает окно веб-браузера; когда вы закончите, закройте окно браузера и нажмите клавишу Enter, чтобы завершить сеанс настройки.</target>
        </trans-unit>
        <trans-unit id="c38cd9193bd0838148316ebdf3e342f199d9c0d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts the web-based configuration interface.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; запускает веб-интерфейс конфигурации.</target>
        </trans-unit>
        <trans-unit id="0f8b7427dfa06c8387aec4fe9f06c58afa2139fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width changed in Unicode 9 and hence varies across terminal emulators. This should be set to 2 if your terminal emulator supports Unicode &amp;gt;= 9 and renders them double-width, and 1 otherwise. Set this only if you see graphical glitching when printing emoji, typically it will be automatically detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93a2f3f04ef4585de8550e51c988b2551888eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width varies across terminal emulators. This should be set to 1 if your terminal emulator renders emoji single-width, or 2 if double-width. Set this only if you see graphical glitching when printing emoji.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; контролирует вычисленную ширину определенных символов, в частности эмодзи, отображаемая ширина которых зависит от эмуляторов терминала. Это должно быть установлено в 1, если ваш эмулятор терминала отображает эмодзи с одинарной шириной, или 2, если с двойной шириной. Установите это значение, только если вы видите графические сбои при печати эмодзи.</target>
        </trans-unit>
        <trans-unit id="658d6acfbde2cce8a8dc5974c41c89458b9f6570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls whether fish assumes emoji render as 2 cells or 1 cell wide. This is necessary because the correct value changed from 1 to 2 in Unicode 9, and some terminals may not be aware. Set this if you see graphical glitching related to emoji (or other &quot;special&quot; characters). It should usually be auto-detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e742affac41a44f02e9aa3052491a61e53ff7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 300ms (default key bindings) or 10ms (vi key bindings) after seeing an escape character before giving up on matching a key binding. See the documentation for the &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; переопределяет тайм-аут по умолчанию в 300 мс (привязки клавиш по умолчанию) или 10 мс (привязки клавиш vi) после просмотра escape-символа, прежде чем отказаться от сопоставления привязки клавиш. См. Документацию по встроенной команде &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; . Эта задержка облегчает использование escape в качестве мета-ключа.</target>
        </trans-unit>
        <trans-unit id="6687ff316b55ebc50103870c10d95896af5a7bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 30ms after seeing an escape character before giving up on matching a key binding. This is explained in the documentation for the &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d32b632e49ad91dd99c41c68242eeb273e1c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; sets how long fish waits for another key after seeing an escape, to distinguish pressing the escape key from the start of an escape sequence. The default is 30ms. Increasing it increases the latency but allows pressing escape instead of alt for alt+character bindings. For more information, see &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;the chapter in the bind documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b2a1e44ef7bb47d05aa2cecfce06fa5f350598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_exit&lt;/code&gt; is emitted right before fish exits.</source>
          <target state="translated">&lt;code&gt;fish_exit&lt;/code&gt; испускается прямо перед выходом рыбы.</target>
        </trans-unit>
        <trans-unit id="2d94ec8ed4f5ca2e247001593671084bcb2b63cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; , приветственное сообщение, печатаемое при запуске.</target>
        </trans-unit>
        <trans-unit id="fa2f7a53cca901d04e34c6a842e9dbc1bee3380f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup. This is printed by a function of the same name that can be overridden for more complicated changes (see &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf1452e5d429f1daf103ffd9546b372df2ab72b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_handle_reflow&lt;/code&gt;, determines whether fish should try to repaint the commandline when the terminal resizes. In terminals that reflow text this should be disabled. Set it to 1 to enable, anything else to disable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04aed8775880cd3b6a1f6c024e3c890b3d8d1ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_history&lt;/code&gt;, the current history session name. If set, all subsequent commands within an interactive fish session will be logged to a separate file identified by the value of the variable. If unset, or set to &lt;code&gt;default&lt;/code&gt;, the default session name &quot;fish&quot; is used. If set to an empty string, history is not saved to disk (but is still available within the interactive session).</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; , имя текущего сеанса истории. Если установлено, все последующие команды в интерактивном сеансе рыбной ловли будут регистрироваться в отдельном файле, определяемом значением переменной. Если не установлено или установлено &lt;code&gt;default&lt;/code&gt; по умолчанию , используется имя сеанса по умолчанию &quot;fish&quot;. Если задана пустая строка, история не сохраняется на диск (но по-прежнему доступна в интерактивном сеансе).</target>
        </trans-unit>
        <trans-unit id="104755c189b715d5c9c42e2652c1cdf288c6ca28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input and outputs them to standard output or a specified file.</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; используется для создания отступа в коде рыбы. &lt;code&gt;fish_indent&lt;/code&gt; читает команды со стандартного ввода и выводит их в стандартный вывод или указанный файл.</target>
        </trans-unit>
        <trans-unit id="a7bb256bcfc22368152a4ebc452df8b7662f2582" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if &lt;code&gt;-w&lt;/code&gt; is given).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da73e2f1a512f02d7584672a40785204c598441f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_is_root_user&lt;/code&gt; will check if the current user is root. It can be useful for the prompt to display something different if the user is root, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f505af424d327895b4f62f9482da2a8a3e1b470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; intentionally disables handling of many signals. To terminate &lt;code&gt;fish_key_reader&lt;/code&gt; in &lt;code&gt;--continuous&lt;/code&gt; mode do:</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; намеренно отключает обработку многих сигналов. Чтобы завершить работу &lt;code&gt;fish_key_reader&lt;/code&gt; в режиме &lt;code&gt;--continuous&lt;/code&gt; , выполните:</target>
        </trans-unit>
        <trans-unit id="9969f810562210b29ac153862ce8488fd46d7c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; используется для изучения ввода, полученного от терминала, и может помочь с привязкой клавиш. Программа интерактивна и работает на стандартном вводе. Отображаются сами отдельные символы и их шестнадцатеричные значения.</target>
        </trans-unit>
        <trans-unit id="0422482679a5ecd7a3ca2c35dcd4c26c9e83bad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_kill_signal&lt;/code&gt;, the signal that terminated the last foreground job, or 0 if the job exited normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c622c6b5bee30a6726d542cdf2ab2250db87a11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_mode_prompt&lt;/code&gt; will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (&lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; and &lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;) will be executed as well in case they contain a mode display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1955a06dd635c9c957ee769ce1eb3ce76b0fc4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_background&lt;/code&gt;, the background color of a line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c684f0faf6861363a50ef125b672ee5e7f8960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_completion&lt;/code&gt;, the color of the completion itself</source>
          <target state="translated">&lt;code&gt;fish_pager_color_completion&lt;/code&gt; , цвет самого завершения</target>
        </trans-unit>
        <trans-unit id="02c2b5b4b67a9ed2516d817126320b97d559bb5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_description&lt;/code&gt;, the color of the completion description</source>
          <target state="translated">&lt;code&gt;fish_pager_color_description&lt;/code&gt; , цвет описания завершения</target>
        </trans-unit>
        <trans-unit id="dad9d641492b848dfa36404193130b01877d7c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_prefix&lt;/code&gt;, the color of the prefix string, i.e. the string that is to be completed</source>
          <target state="translated">&lt;code&gt;fish_pager_color_prefix&lt;/code&gt; , цвет строки префикса, то есть строки, которая должна быть заполнена</target>
        </trans-unit>
        <trans-unit id="72288186d5b0c5276c2df6d25ce7182ce13c409a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_progress&lt;/code&gt;, the color of the progress bar at the bottom left corner</source>
          <target state="translated">&lt;code&gt;fish_pager_color_progress&lt;/code&gt; , цвет индикатора выполнения в нижнем левом углу</target>
        </trans-unit>
        <trans-unit id="3e8830576bae489fb92cd5bed56314729ae1656f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary&lt;/code&gt;, the background color of the every second completion</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary&lt;/code&gt; , цвет фона каждого второго завершения</target>
        </trans-unit>
        <trans-unit id="76b568ec21a4e8263642a51936672636ba928b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_ prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55357f10cdf512a13586ee62429348b3cfb24b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_background&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e90de1da46106fee8091bb2c2c23a8f188da196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe74e5ee8b566305db424020cbb8da10395dc96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71624fb1af940a83195f3c310d4d969188349ff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_color_search_match&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b13f87fd7fc9be4af86e634debc017be760470c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971e4b956c3476c803e3fa66d23fad3bee6ffaf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65d30196128ffbb2928911e278d6c63930c436b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb5135deccd77d2904f64e51b0cbb65213cfaf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pid&lt;/code&gt;, the process ID (PID) of the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b7261dfd9477ae59353955d1fded2e7e867175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_posterror&lt;/code&gt;, which is emitted right after executing a command with syntax errors. The commandline is passed as the first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39301e68719d8270e6ba63e0324f010136d1f361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_postexec&lt;/code&gt; , которая генерируется сразу после выполнения интерактивной команды. Командная строка передается как первый параметр.</target>
        </trans-unit>
        <trans-unit id="ac28456f56bd590fac994b5010e0b38ff99544eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5e5b54faf281985c7c7df11e2b068f2d1b1dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_preexec&lt;/code&gt; , который генерируется прямо перед выполнением интерактивной команды. Командная строка передается как первый параметр.</target>
        </trans-unit>
        <trans-unit id="d49c52bb6343f148a6e7cb6f488824707a022cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d253511a520fed2df4efaa70d38a4aa9455ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_prompt&lt;/code&gt;, which is emitted whenever a new fish prompt is about to be displayed.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; , которая выдается всякий раз, когда должно отображаться новое приглашение рыбы.</target>
        </trans-unit>
        <trans-unit id="8e763b7a1c9e69d8e49402ca1bd27768dc523a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_right_prompt&lt;/code&gt; is similar to &lt;code&gt;fish_prompt&lt;/code&gt;, except that it appears on the right side of the terminal window.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; похожа на &lt;code&gt;fish_prompt&lt;/code&gt; , за исключением того, что отображается в правой части окна терминала.</target>
        </trans-unit>
        <trans-unit id="c4a7d6ba8e4a0d2492df3ec01d90736e88080917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_status_to_signal&lt;/code&gt; converts exit codes to their corresponding human-friendly signals if one exists. This is likely to be useful for prompts in conjunction with the &lt;code&gt;$status&lt;/code&gt; and &lt;code&gt;$pipestatus&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9b15df475152cdd93c34d86fe528d79814755f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_trace&lt;/code&gt;, if set and not empty, will cause fish to print commands before they execute, similar to &lt;code&gt;set -x&lt;/code&gt; in bash. The trace is printed to the path given by the &lt;a href=&quot;cmds/fish#cmd-fish&quot;&gt;--debug-output&lt;/a&gt; option to fish (stderr by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25375052dde19cad27653f4c1752d8ab6f280d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_update_completions&lt;/code&gt; parses manual pages installed on the system, and attempts to create completion files in the &lt;code&gt;fish&lt;/code&gt; configuration directory.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; анализирует справочные страницы, установленные в системе, и пытается создать файлы завершения в каталоге конфигурации &lt;code&gt;fish&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="200d59f939eaa8758fc4a1a196859ca8fd5fc9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, a list of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1258f51252838f9ffb3287c339e857307bfe13f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, an array of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; , массив каталогов, которые добавляются к &lt;code&gt;PATH&lt;/code&gt; . Это может быть универсальная переменная.</target>
        </trans-unit>
        <trans-unit id="2d20e70fb52c2b89d39d9ee9f9a3364cf899bbf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_vi_mode&lt;/code&gt; enters a vi-like command editing mode. To always start in vi mode, add &lt;code&gt;fish_vi_mode&lt;/code&gt; to your &lt;code&gt;config.fish&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;fish_vi_mode&lt;/code&gt; переходит в режим редактирования команд, подобный vi. Чтобы всегда запускать в режиме vi, добавьте &lt;code&gt;fish_vi_mode&lt;/code&gt; в файл &lt;code&gt;config.fish&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a67771d1afbe49fb95a1eb353ddb3304ef83900c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; is a loop construct. It will perform the commands specified by &lt;code&gt;COMMANDS&lt;/code&gt; multiple times. On each iteration, the local variable specified by &lt;code&gt;VARNAME&lt;/code&gt; is assigned a new value from &lt;code&gt;VALUES&lt;/code&gt;. If &lt;code&gt;VALUES&lt;/code&gt; is empty, &lt;code&gt;COMMANDS&lt;/code&gt; will not be executed at all. The &lt;code&gt;VARNAME&lt;/code&gt; is visible when the loop terminates and will contain the last value assigned to it. If &lt;code&gt;VARNAME&lt;/code&gt; does not already exist it will be set in the local scope. For our purposes if the &lt;code&gt;for&lt;/code&gt; block is inside a function there must be a local variable with the same name. If the &lt;code&gt;for&lt;/code&gt; block is not nested inside a function then global and universal variables of the same name will be used if they exist.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; - это конструкция цикла. Он будет выполнять команды, указанные в &lt;code&gt;COMMANDS&lt;/code&gt; , несколько раз. На каждой итерации локальной переменной, указанной в &lt;code&gt;VARNAME&lt;/code&gt; , присваивается новое значение из &lt;code&gt;VALUES&lt;/code&gt; . Если &lt;code&gt;VALUES&lt;/code&gt; пусто, &lt;code&gt;COMMANDS&lt;/code&gt; не будет выполняться вообще. &lt;code&gt;VARNAME&lt;/code&gt; видна , когда цикл завершается , и будет содержать последнее значение , присвоенное ему. Если &lt;code&gt;VARNAME&lt;/code&gt; еще не существует, он будет установлен в локальной области. Для наших целей, если блок &lt;code&gt;for&lt;/code&gt; находится внутри функции, должна быть локальная переменная с тем же именем. Если &lt;code&gt;for&lt;/code&gt; блок не вложен в функцию, тогда будут использоваться глобальные и универсальные переменные с тем же именем, если они существуют.</target>
        </trans-unit>
        <trans-unit id="30ea19b645de71a6c9405b507051c6bb2520a9ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops work like in other shells, which is more like python's for-loops than e.g. C's:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9273933eb345e0f31ce06627439b843043841d19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force-repaint&lt;/code&gt; reexecute the prompt functions without coalescing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dba540ac348539070f2bf73fd7b4971a05d3926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-bigword&lt;/code&gt;, move one whitespace-delimited word to the right</source>
          <target state="translated">&lt;code&gt;forward-bigword&lt;/code&gt; , переместите одно слово, разделенное пробелами , вправо</target>
        </trans-unit>
        <trans-unit id="96ac7c933e1aa7b4c77c93b351f34c644f3edfc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-char&lt;/code&gt;, move one character to the right</source>
          <target state="translated">&lt;code&gt;forward-char&lt;/code&gt; , переместить на один символ вправо</target>
        </trans-unit>
        <trans-unit id="69c7f329fabcefeb785a251cd64e7edfe1324e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump-till&lt;/code&gt; and &lt;code&gt;backward-jump-till&lt;/code&gt;, jump to right &lt;em&gt;before&lt;/em&gt; the next occurence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1830d65a1d0ae99be014807fe9ee4611ae5c7cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump&lt;/code&gt; and &lt;code&gt;backward-jump&lt;/code&gt;, read another character and jump to its next occurence after/before the cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7b1c0d2627b35f7922d0a527ca0016ff5c36b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-single-char&lt;/code&gt;, move one character to the right; if an autosuggestion is available, only take a single char from it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9dad2890372c362f50dea055adac7600258931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-word&lt;/code&gt;, move one word to the right</source>
          <target state="translated">&lt;code&gt;forward-word&lt;/code&gt; , переместите одно слово вправо</target>
        </trans-unit>
        <trans-unit id="e6e8eeb61d099e8de1c9e468dbd0faedeaeeb31c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funced&lt;/code&gt; provides an interface to edit the definition of the function &lt;code&gt;NAME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;funced&lt;/code&gt; предоставляет интерфейс для редактирования определения функции &lt;code&gt;NAME&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2753ba5c4bae0b9b373b407ccc8299866187e0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3625cbdd272f6420b828620eec5563a06bbc58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves the current definition of a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="translated">&lt;code&gt;funcsave&lt;/code&gt; сохраняет текущее определение функции в файл в каталоге конфигурации fish. Эта функция будет автоматически загружена текущими и будущими рыбными сессиями. Это может быть полезно, если вы в интерактивном режиме создали новую функцию и хотите сохранить ее для дальнейшего использования.</target>
        </trans-unit>
        <trans-unit id="ecc3a042e9241b89ce0f3da16336d2bde1174bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; creates a new function &lt;code&gt;NAME&lt;/code&gt; with the body &lt;code&gt;BODY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; создает новую функцию &lt;code&gt;NAME&lt;/code&gt; с телом &lt;code&gt;BODY&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3af7bb7223f77891e90adffabdb2080b3a0a2ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; prints the name of the currently called function if able, when missing displays &quot;Not a function&quot; (or equivalent translated string). Also &lt;code&gt;current-function&lt;/code&gt;, &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--current-function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; выводит имя вызываемой в данный момент функции, если возможно, при отсутствии отображает &amp;laquo;Не функция&amp;raquo; (или эквивалентную переведенную строку). Также &lt;code&gt;current-function&lt;/code&gt; , &lt;code&gt;-u&lt;/code&gt; или &lt;code&gt;--current-function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4643812feed737eb3baee29ce5d615a668b85b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;functions&lt;/code&gt; prints or erases functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; печатает или стирает функции.</target>
        </trans-unit>
        <trans-unit id="896e9b70a76e025cb7a4fc6ddc0df0cb4a106204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h-help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If the long flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen.</source>
          <target state="translated">&lt;code&gt;h-help&lt;/code&gt; означает, что действителен только &lt;code&gt;--help&lt;/code&gt; . Флаг является логическим и может использоваться более одного раза. Если используется длинный флаг, тогда &lt;code&gt;_flag_h&lt;/code&gt; и &lt;code&gt;_flag_help&lt;/code&gt; будут установлены на счетчик того, сколько раз был виден длинный флаг.</target>
        </trans-unit>
        <trans-unit id="09288aed8a22be9a82fb278b641f44ba69a35f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h/help&lt;/code&gt; means that both &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; are valid. The flag is a boolean and can be used more than once. If either flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times either flag was seen.</source>
          <target state="translated">&lt;code&gt;h/help&lt;/code&gt; означает, что допустимы и &lt;code&gt;-h&lt;/code&gt; , и &lt;code&gt;--help&lt;/code&gt; . Флаг является логическим и может использоваться более одного раза. Если используется любой из флагов, тогда &lt;code&gt;_flag_h&lt;/code&gt; и &lt;code&gt;_flag_help&lt;/code&gt; будут установлены на счетчик того, сколько раз был замечен любой флаг.</target>
        </trans-unit>
        <trans-unit id="16feba045a44f5217f42fc2759259d9b95307ba7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746970369d18737059fb60a2ece7fe48509ad8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;code&gt;fg&lt;/code&gt; builtin.</source>
          <target state="translated">&lt;code&gt;help fg&lt;/code&gt; показывает документацию для встроенного &lt;code&gt;fg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5797714920f9421847912fe9d670163d439ec8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; displays the fish help documentation.</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; отображает справочную документацию по рыбам.</target>
        </trans-unit>
        <trans-unit id="370aef9fc7360bdd9af1206f300ec0481103e650" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If it is used then &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen. Also &lt;code&gt;h-help&lt;/code&gt; (with an arbitrary short letter) for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a867c4092fd3023f46dabcddec1b035654dccb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-backward&lt;/code&gt;, search the history for the previous prefix match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4724121cac1f31f0e4ab7853049507f1ab9329b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-forward&lt;/code&gt;, search the history for the next prefix match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9a134be7d6c3fd7b46f7c9447ed9fd9db9b116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-backward&lt;/code&gt;, search the history for the previous match</source>
          <target state="translated">&lt;code&gt;history-search-backward&lt;/code&gt; , поиск в истории предыдущего совпадения</target>
        </trans-unit>
        <trans-unit id="b12f1af53ca24866df742e9eba7ada28f4d9ae75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-forward&lt;/code&gt;, search the history for the next match</source>
          <target state="translated">&lt;code&gt;history-search-forward&lt;/code&gt; , поиск следующего совпадения в истории</target>
        </trans-unit>
        <trans-unit id="6632dfe436b7488d60a30d70d61df7ca03bbf956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-backward&lt;/code&gt;, search the history for the previous matching argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a609239143f411c48386cad2e73aaf20c665ae92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-forward&lt;/code&gt;, search the history for the next matching argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb02a60247ad0d09f6ecb95a60dc44a1e6fd4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the &lt;a href=&quot;../index#history-search&quot;&gt;history of interactive commands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6bf6d133c84804bb8d0f2ee0748027119c8584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the history of interactive commands.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; используется для поиска, удаления и иного управления историей интерактивных команд.</target>
        </trans-unit>
        <trans-unit id="953cae57649fdf5634381c21501202219d9f2172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, a list containing the last commands that were entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe57c545655dee290e05e5b32cfb6ad7a4cf5bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, an array containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; - массив, содержащий последние введенные команды.</target>
        </trans-unit>
        <trans-unit id="cd50886aee211e8ad669224737d342b173c7d958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname&lt;/code&gt;, the machine's hostname.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; , имя хоста машины.</target>
        </trans-unit>
        <trans-unit id="c23d9464a94cb5382adac437601bfc6e6de40d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If it is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; выполнит команду &lt;code&gt;CONDITION&lt;/code&gt; . Если статус выхода условия равен 0, команды &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; будут выполняться. Если он не равен 0 и задано &lt;code&gt;else&lt;/code&gt; , будет выполнена &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a417c9d192be18b8f6d0caa81a906f977b250fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;a href=&quot;else#cmd-else&quot;&gt;else&lt;/a&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c81c3c5812c0d8ce75bdcf435cb169e91e2f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; выполнит команду &lt;code&gt;CONDITION&lt;/code&gt; . Если статус выхода условия равен 0, команды &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; будут выполняться. Если статус выхода не равен 0 и задано &lt;code&gt;else&lt;/code&gt; , будет выполнена &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7092cd3e6a7baf145a554329a261b1c6df95980e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-over&lt;/code&gt;, add a new line over the current line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3931ae309cf7c6df83b400fd274bc85ae3af60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-under&lt;/code&gt;, add a new line under the current line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0719c8ef39d5ba9cdb52b9b6994b0a76cb2e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-block&lt;/code&gt; returns 0 if fish is currently executing a block of code. Also &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--is-block&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-block&lt;/code&gt; возвращает 0, если fish в настоящее время выполняет блок кода. Также &lt;code&gt;-b&lt;/code&gt; или &lt;code&gt;--is-block&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="574f1b55820e05845c504b6752312ab9f0763f46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-breakpoint&lt;/code&gt; returns 0 if fish is currently showing a prompt in the context of a &lt;code&gt;breakpoint&lt;/code&gt; command. See also the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;is-breakpoint&lt;/code&gt; возвращает 0, если fish в настоящее время показывает подсказку в контексте команды &lt;code&gt;breakpoint&lt;/code&gt; . См. Также функцию &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c8b553e625d0552ce09454c632813c4ee0f7a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-sub&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-sub&lt;/code&gt; возвращает 0, если рыба в данный момент выполняет подстановку команды. Также &lt;code&gt;-c&lt;/code&gt; или &lt;code&gt;--is-command-substitution&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2c76516a8daa42dfc18cf477ffe1c800183d9d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-substitution&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b12fafe48ecfbcc3d29be11195b0e55d3a15ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-full-job-control&lt;/code&gt; returns 0 if full job control is enabled. Also &lt;code&gt;--is-full-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-full-job-control&lt;/code&gt; возвращает 0, если включен полный контроль заданий. Также &lt;code&gt;--is-full-job-control&lt;/code&gt; (без короткого флага).</target>
        </trans-unit>
        <trans-unit id="b8f912dce380e13a37aefd2b619ed5f570f5dd6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive-job-control&lt;/code&gt; returns 0 if interactive job control is enabled. Also, &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-interactive-job-control&lt;/code&gt; возвращает 0, если включено интерактивное управление заданиями. Также &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (без короткого флага).</target>
        </trans-unit>
        <trans-unit id="29a242bbb960281ffd4abd84bdab87e608102fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive&lt;/code&gt; returns 0 if fish is interactive - that is, connected to a keyboard. Also &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--is-interactive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-interactive&lt;/code&gt; возвращает 0, если рыба интерактивна, то есть подключена к клавиатуре. Также &lt;code&gt;-i&lt;/code&gt; или &lt;code&gt;--is-interactive&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="290a3fec35084c58a9babdadcf87d2dba57950ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-login&lt;/code&gt; returns 0 if fish is a login shell - that is, if fish should perform login tasks such as setting up the PATH. Also &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--is-login&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-login&lt;/code&gt; возвращает 0, если fish является оболочкой входа в систему, то есть если fish должна выполнять задачи входа в систему, такие как установка PATH. Также &lt;code&gt;-l&lt;/code&gt; или &lt;code&gt;--is-login&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3247c5bb3c8c50669f128e0bae4bc2a69626afe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-no-job-control&lt;/code&gt; returns 0 if no job control is enabled. Also &lt;code&gt;--is-no-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-no-job-control&lt;/code&gt; возвращает 0, если управление заданиями не включено. Также &lt;code&gt;--is-no-job-control&lt;/code&gt; (без короткого флага).</target>
        </trans-unit>
        <trans-unit id="60d313a6d40fe77110c134273ac3e2a7b8ae317a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a terminal (as opposed to a file). The name is derived from the system call of the same name, which for historical reasons refers to a teletypewriter (TTY).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796eccea3c2925946b9056d5cc879303408c0681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a tty.</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; проверяет, является ли дескриптор файла tty.</target>
        </trans-unit>
        <trans-unit id="c0df263f2b948bac739292c3ddc9acf8416ae56f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; or &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; устанавливает тип управления заданиями, который может быть &lt;code&gt;none&lt;/code&gt; , &lt;code&gt;full&lt;/code&gt; или &lt;code&gt;interactive&lt;/code&gt; . Также &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; или &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7cde8ad0981c8e48203c6c5e456a35911d99f8f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL_TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL_TYPE&lt;/code&gt; or &lt;code&gt;--job-control CONTROL_TYPE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00800eab0dd8c8e4c813ebe5f0223f5a88122834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs, such as two long-running tasks in this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3951c97a9117fe33e430b00bd1987c8981de1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; выводит сводку текущих заданий.</target>
        </trans-unit>
        <trans-unit id="7ac566c92429f7bac43b9a995fa6646aa67505b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;../index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6add538256d52216f5d1b768f00171f403ab1b47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; распечатывает список текущих &lt;a href=&quot;index#syntax-job-control&quot;&gt;работ&lt;/a&gt; и их статус.</target>
        </trans-unit>
        <trans-unit id="8351e11b5536a97176c78f4c39a337502e837f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-bigword&lt;/code&gt;, move the next whitespace-delimited word to the killring</source>
          <target state="translated">&lt;code&gt;kill-bigword&lt;/code&gt; , переместить следующее слово, разделенное пробелами, на строку убийства</target>
        </trans-unit>
        <trans-unit id="72618006835f7c9941204bbb5b3a9305d43c8849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-line&lt;/code&gt;, move everything from the cursor to the end of the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-line&lt;/code&gt; , переместите все от курсора до конца строки до killring</target>
        </trans-unit>
        <trans-unit id="f2a174739861bddd91263d6062b0ac3b9c38035c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-selection&lt;/code&gt;, move the selected text to the killring</source>
          <target state="translated">&lt;code&gt;kill-selection&lt;/code&gt; , переместить выделенный текст в killring</target>
        </trans-unit>
        <trans-unit id="42a3bfd3618e3b8e8ffa8030316a091858f2dc8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-whole-line&lt;/code&gt;, move the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-whole-line&lt;/code&gt; all -line , переместить строку в убийство</target>
        </trans-unit>
        <trans-unit id="46c753278748bac6dfa1653ee040432fb7997faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-word&lt;/code&gt;, move the next word to the killring</source>
          <target state="translated">&lt;code&gt;kill-word&lt;/code&gt; , переместить следующее слово в killring</target>
        </trans-unit>
        <trans-unit id="a1cd0e574da2f2e8f9dd802ac5736368dfe3f74a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_pid&lt;/code&gt;, the process ID (PID) of the last background process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb54e31a64cc891898da48f1a74d6a789921adb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;, list the contents of files</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; , перечислить содержимое файлов</target>
        </trans-unit>
        <trans-unit id="bcd91589f24923a18eda34bea169fdaf9603e834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;: Display the contents of files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ebe7417be893ffc0ac02b73f221d6578651ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-number&lt;/code&gt; prints the line number of the currently running script. Also &lt;code&gt;current-line-number&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--current-line-number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line-number&lt;/code&gt; -строки печатает номер строки текущего выполняемого скрипта. Также &lt;code&gt;current-line-number&lt;/code&gt; , &lt;code&gt;-n&lt;/code&gt; или &lt;code&gt;--current-line-number&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="625138e35c6aaa85c8f70ae1da66865bc83ab095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln&lt;/code&gt; - the base-e logarithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81061764e65e9ab42280021deb6358105970c12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; or &lt;code&gt;log10&lt;/code&gt; - the base-10 logarithm</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; или &lt;code&gt;log10&lt;/code&gt; - десятичный логарифм</target>
        </trans-unit>
        <trans-unit id="a270a94b7f3cd45c0e4d9eb079912b43ced5cdfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longonly=&lt;/code&gt; is a flag &lt;code&gt;--longonly&lt;/code&gt; that requires an option, there is no short flag or even short flag variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e7cc4141c2d5dd36d802d642e50b97c6b1ca17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;, list files and directories</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; , список файлов и каталогов</target>
        </trans-unit>
        <trans-unit id="f6ec97c1f90ccc0acdd23329e5cb6f86daf22bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;: List files and directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4830c6e74e8614fb12f3dce5192a1ccc76ff965d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt; is a command for displaying a manual page on a given topic. The man command takes the name of the manual page to display as an argument. There are manual pages for almost every command on most computers. There are also manual pages for many other things, such as system libraries and important files.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; - это команда для отображения справочной страницы по заданной теме. Команда man принимает в качестве аргумента имя отображаемой справочной страницы. На большинстве компьютеров есть справочные страницы почти для каждой команды. Также есть справочные страницы для многих других вещей, таких как системные библиотеки и важные файлы.</target>
        </trans-unit>
        <trans-unit id="73e693d589ad85a4f595f45bc7f491c73bb44d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;, display a manual page on the screen</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; , отобразите страницу руководства на экране</target>
        </trans-unit>
        <trans-unit id="126de4425a9fbfa3f5f5dfcf628ffcbaf0e84bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;: Display a manual page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0603c78171a3df042e3459a2196946ed1def38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitand(0xFE, 0x2e)&quot;&lt;/code&gt; outputs 46.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b537ae94331bd6ceb9a4fb22fc4f3ab749e1ba6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitor(9,2)&quot;&lt;/code&gt; outputs 11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ed3595a2a67bb3282ae1360db0e30794213ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; outputs &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; выводит &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; выводит числовой статус выхода последней команды минус 128.</target>
        </trans-unit>
        <trans-unit id="63d0eef54b2a08f3abd9069e44380075ea7790a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math --base=hex 192&lt;/code&gt; prints &lt;code&gt;0xc0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; выводит &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; выводит &lt;code&gt;1.666&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2afd4d22ab4aec5b0acabaa13fdb5dab928d4b72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 0xFF&lt;/code&gt; outputs 255, &lt;code&gt;math 0 x 3&lt;/code&gt; outputs 0 (because it computes 0 multiplied by 3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; выводит 2.</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; выводит 1.666667 .</target>
        </trans-unit>
        <trans-unit id="0506f0b9975fb7a5dac75392d203b4e4d03c48aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 5 \* 2&lt;/code&gt; or &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; or &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; all output &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; игнорирует пробелы между аргументами и принимает свой ввод как несколько аргументов (внутренне соединенных пробелом), поэтому &lt;code&gt;math 2 +2&lt;/code&gt; и &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; работают одинаково. &lt;code&gt;math 2 2&lt;/code&gt; - ошибка.</target>
        </trans-unit>
        <trans-unit id="5cfe1d0b897a4b186b164463b5e374849fe22e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; используется для выполнения математических вычислений. Он поддерживает все обычные операции, такие как сложение, вычитание и т. Д., А также такие функции, как &lt;code&gt;abs()&lt;/code&gt; , &lt;code&gt;sqrt()&lt;/code&gt; и &lt;code&gt;log2()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; знает некоторые операторы, константы, функции и может (очевидно) читать числа.</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; известны следующие константы:</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; известны следующие операторы:</target>
        </trans-unit>
        <trans-unit id="734e34f77e8861566c9e5dae95fca705b2d393da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; performs mathematical calculations. It supports simple operations such as addition, subtraction, and so on, as well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;ln()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; поддерживает следующие функции:</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; немедленно включает изменения истории из других сеансов. Обычно &lt;code&gt;fish&lt;/code&gt; игнорирует изменения истории из сессий, начатых после текущей. Эта команда немедленно применяет эти изменения.</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; , переместить (переименовать) файлы</target>
        </trans-unit>
        <trans-unit id="70cb953c3ea6ee6baf32a061563438714f7b7872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;: Move (rename) files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5896fb9d9983a25b4acb8859bdc3aef24d4b75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5068ef44383529da8a297fad4521ff3def0b93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; означает, что допустимо только &lt;code&gt;--name&lt;/code&gt; . Он требует значения и может использоваться более одного раза. Если флаг виден, тогда &lt;code&gt;_flag_n&lt;/code&gt; и &lt;code&gt;_flag_name&lt;/code&gt; будут установлены со значениями, связанными с каждым появлением флага.</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; означает, что допустимы и &lt;code&gt;-n&lt;/code&gt; , и &lt;code&gt;--name&lt;/code&gt; . Он требует значения и может использоваться не более одного раза. Если флаг виден, тогда &lt;code&gt;_flag_n&lt;/code&gt; и &lt;code&gt;_flag_name&lt;/code&gt; будут установлены с единственным обязательным значением, связанным с флагом.</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; означает, что допустимы и &lt;code&gt;-n&lt;/code&gt; , и &lt;code&gt;--name&lt;/code&gt; . Он принимает необязательное значение и может использоваться не более одного раза. Если флаг виден, тогда &lt;code&gt;_flag_n&lt;/code&gt; и &lt;code&gt;_flag_name&lt;/code&gt; будут установлены со значением, связанным с флагом, если он был предоставлен, иначе он будет установлен без значений.</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; означает, что флаги, соответствующие регулярному выражению &amp;laquo;^ -? \ d + $&amp;raquo;, действительны. При просмотре они назначаются переменным &lt;code&gt;_flag_n&lt;/code&gt; и &lt;code&gt;_flag_max&lt;/code&gt; . Это позволяет указать любое допустимое положительное или отрицательное целое число, поставив перед ним один знак &amp;laquo;-&amp;raquo;. Многие команды поддерживают эту идиому. Например, &lt;code&gt;head -3 /a/file&lt;/code&gt; выводит только первые три строки / a / file. Вы также можете указать значение с помощью флага: &lt;code&gt;-n NNN&lt;/code&gt; или &lt;code&gt;--max NNN&lt;/code&gt; в этом примере.</target>
        </trans-unit>
        <trans-unit id="1974cd27b936ab7a9712f59ff231a57829df2f50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dde85ee198e14272ca271cfb23d628296344a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the end of the history has been hit, a warning is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; перемещает вперед позиции &lt;code&gt;POS&lt;/code&gt; в истории посещенных каталогов; если достигнут конец истории, выводится предупреждение.</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; отменяет статус выхода другой команды. Если статус выхода равен нулю, &lt;code&gt;not&lt;/code&gt; возвращает 1. В противном случае &lt;code&gt;not&lt;/code&gt; возвращает 0.</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; открывает все текстовые файлы в текущем каталоге, используя текстовый редактор вашей системы по умолчанию.</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; открывает файл в приложении по умолчанию, используя соответствующий инструмент для операционной системы. В GNU / Linux для этого требуется обычная, но необязательная утилита &lt;code&gt;xdg-open&lt;/code&gt; из пакета &lt;code&gt;xdg-utils&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; , открывать файлы с помощью приложения по умолчанию, связанного с каждым типом файла</target>
        </trans-unit>
        <trans-unit id="6f86ac0554f4a4cf4f28495788244852b2e6599f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; не изменяет сам текущий статус выхода, но команда, которую он запускает, скорее всего, изменит. Статус выхода последней команды переднего плана для выхода всегда можно получить с помощью переменной &lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; используется для выполнения команды, если предыдущая команда не была успешной (вернул статус, отличный от 0).</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; Операторы or могут использоваться как часть условия в блоке &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt; или &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; . См. Документацию для &lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt; для примеров.</target>
        </trans-unit>
        <trans-unit id="3c73d73d5ebdf318201e26c0530d1eeb58fc2ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4d75478e5e579c27aec58655a02ee30fe78ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt;, only execute the next function if the previous succeeded (note: only some functions report success)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; , переключает поле поиска, если пейджер завершений виден.</target>
        </trans-unit>
        <trans-unit id="94b3685be3c69fedec8ad15d840b332000b7cadb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - &amp;pi;. You know this one. Half of Tau.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; - Вы знаете это. Половина Тау. (Тау не реализован)</target>
        </trans-unit>
        <trans-unit id="0f446d5ed35eb5048e4c7f001b1f27dc9402116e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipestatus&lt;/code&gt;, a list of exit statuses of all processes that made up the last executed pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd4c5f41b27739101b5f4355562dc72dc6236d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt; and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; удаляет верхний каталог из стека каталогов и меняет рабочий каталог на новый верхний каталог. Используйте &lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt; для добавления каталогов в стек.</target>
        </trans-unit>
        <trans-unit id="67a047b7a48542b870bd5211e515649aee68917e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack or &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; возвращает x в y (и может быть записано как &lt;code&gt;x ^ y&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1ebf7e7d53234ae4fb48ce662e1d9ab1a7b3ca59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; перемещает назад позиции &lt;code&gt;POS&lt;/code&gt; в истории посещенных каталогов; при попадании в начало истории выводится предупреждение.</target>
        </trans-unit>
        <trans-unit id="758894fa9ac3dcdc16edfc52096829dc60931b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prompt_pwd&lt;/code&gt; is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; вращает стек против часовой стрелки, т.е. снизу вверх</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; вращается по часовой стрелке, т.е. сверху вниз.</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; выводит (печатает) текущий рабочий каталог.</target>
        </trans-unit>
        <trans-unit id="4222bac83e593bcc8b83125f0cac99a87ea7f79f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;random&lt;/code&gt; generates a pseudo-random integer from a uniform distribution. The range (inclusive) depends on the arguments. No arguments indicate a range of 0 to 32767 (inclusive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; читает из стандартного ввода и либо записывает результат обратно в стандартный вывод (для использования при подстановке команд), либо сохраняет результат в одной или нескольких переменных оболочки. По умолчанию &lt;code&gt;read&lt;/code&gt; считывает одну строку и разбивает ее на переменные по пробелам или табуляциям. В качестве альтернативы можно использовать нулевой символ или максимальное количество символов для завершения ввода, а также можно указать другие разделители. В отличие от других оболочек, здесь нет переменной по умолчанию (такой как &lt;code&gt;REPLY&lt;/code&gt; ) для хранения результата - вместо этого он выводится на стандартный вывод.</target>
        </trans-unit>
        <trans-unit id="581f42e718d0bcfbf0164027aaefb2e2e09daff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;realpath&lt;/code&gt; resolves a path to its absolute path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bd00f382e8670d7d44d2b40cf3fca33494e874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt; reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi-mode. If no fish_mode_prompt exists, it acts like a normal repaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9598a01950bf1278cfe9bf8ae5167278ce094d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt;, reexecutes the &lt;a href=&quot;fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; and redraws the prompt. This is useful for vi-mode. If no &lt;code&gt;fish_mode_prompt&lt;/code&gt; exists or it prints nothing, it acts like a normal repaint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af37077a702119f1289199205be5c8570e1f654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt; reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee747f75ea57d78f580575bca29b030acd1155b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt;, reexecutes the prompt functions and redraws the prompt (also &lt;code&gt;force-repaint&lt;/code&gt; for backwards-compatibility)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff49b83e64396ed910787499c3a6a700a00c3e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat-jump&lt;/code&gt; and &lt;code&gt;repeat-jump-reverse&lt;/code&gt;, redo the last jump in the same/opposite direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; останавливает текущую выполняемую функцию. Статус выхода устанавливается на &lt;code&gt;STATUS&lt;/code&gt; , если он задан.</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; - округление до ближайшего целого числа, от 0</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; немедленно записывает все изменения в файл истории. Оболочка автоматически сохраняет файл истории; эта опция предназначена для внутреннего использования и обычно не должна использоваться пользователем.</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; , если функция затеняет переменные в вызывающей функции (нормальный случай, если он не был определен с помощью &lt;code&gt;--no-scope-shadowing&lt;/code&gt; ), иначе &lt;code&gt;no-scope-shadowing&lt;/code&gt; или &lt;code&gt;n/a&lt;/code&gt; если функция не определено,</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; возвращает элементы истории, соответствующие строке поиска. Если строка поиска не указана, он возвращает все элементы истории. Это операция по умолчанию, если не указана другая операция. Вам нужно только явно указать &lt;code&gt;history search&lt;/code&gt; если вы хотите выполнить поиск по одной из подкоманд. &lt;code&gt;--contains&lt;/code&gt; вариант поиска будет использоваться , если вы не указали другой вариант поиска. Записи отсортированы от самых новых до самых старых, если вы не используете флаг &lt;code&gt;--reverse&lt;/code&gt; . Если к tty подключен стандартный вывод, вывод будет передаваться через ваш пейджер функцией истории. Встроенная история просто записывает результаты в стандартный вывод.</target>
        </trans-unit>
        <trans-unit id="f3f96766ba4c2b74ccc38f1a311d22fc52bcedcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert-notfirst&lt;/code&gt;, inserts the matching sequence into the command line, unless the cursor is at the beginning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47994204741d29e8fba63c4defd897209f0ef532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert&lt;/code&gt;, inserts the matching sequence into the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7412bb3c267d60c210b7f29f1dcceac204bd2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq(1)&lt;/code&gt; can be used as a replacement for &lt;code&gt;{1..10}&lt;/code&gt; range expansion. If your OS doesn't ship a &lt;code&gt;seq&lt;/code&gt; fish includes a replacement function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c102ee1c01aee7c5234def07fe9f1921b397a6f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set -q&lt;/code&gt; can be used to determine if a variable exists or has a certain number of elements (&lt;code&gt;set -q foo[2]&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc81f408553d427ee9413652a2f976a6b4c6dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;../index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; управляет &lt;a href=&quot;index#variables&quot;&gt;переменными оболочки&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; требует, чтобы все параметры были перед любыми другими аргументами. Например, &lt;code&gt;set flags -l&lt;/code&gt; приведет к установке значения переменной &lt;code&gt;flags&lt;/code&gt; на '-l', не делая переменную локальной.</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; используется для управления цветом и стилем текста в терминале. &lt;code&gt;VALUE&lt;/code&gt; соответствует зарезервированному названию цвета, например &lt;em&gt;красному&lt;/em&gt; или значению цвета RGB, заданному в виде 3 или 6 шестнадцатеричных цифр. &lt;em&gt;Ш&lt;/em&gt; -, как и в &amp;laquo;светлых&amp;raquo;, формы варианты полной яркости 8 цветов стандартной яркости на многих терминалах. &lt;em&gt;brblack&lt;/em&gt; имеет большую яркость, чем &lt;em&gt;черный&lt;/em&gt; - в сторону серого. Специальное ключевое слово &lt;em&gt;normal&lt;/em&gt; сбрасывает форматирование текста до значений по умолчанию для терминала.</target>
        </trans-unit>
        <trans-unit id="9a61b97a3a96f79739663fe1e066e0c4c4c00523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; describes that styling. It's a reserved color name like &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits (&quot;F27&quot; or &quot;FF2277&quot;). A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; работает, печатая последовательности символов в стандартный &lt;em&gt;вывод&lt;/em&gt; . Если используется в подстановке команд или в канале, эти символы также будут захвачены. Это может быть, а может и не быть желательным. Проверка кода выхода &lt;code&gt;isatty stdout&lt;/code&gt; перед использованием &lt;code&gt;set_color&lt;/code&gt; может быть полезной, чтобы решить не раскрашивать вывод в скрипте.</target>
        </trans-unit>
        <trans-unit id="0edcbbfc0660173d1858fb94dc65feaa1949db9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8f7bb400593234e096f28a62980d44f3d7595d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; creates a new &lt;a href=&quot;../index#variables-scope&quot;&gt;local scope&lt;/a&gt;; &lt;code&gt;set --local&lt;/code&gt; within a sourced block will not affect variables in the enclosing scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bd12edd43e43a291874a613bddb397393e4363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; оценивает команды указанного файла в текущей оболочке. Это отличается от запуска нового процесса для выполнения команд (т.е. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ), поскольку команды будут оцениваться текущей оболочкой, а это означает, что изменения в переменных оболочки повлияют на текущую оболочку. Если после имени файла указаны дополнительные аргументы, они будут вставлены в переменную &lt;code&gt;$argv&lt;/code&gt; . &lt;code&gt;$argv&lt;/code&gt; переменная не будет включать в себя имя считанного файла.</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; имеет важное свойство, заключающееся в том, что его вывод не разделяется далее при использовании в подстановке команд, что позволяет подстановке команд создавать элементы, содержащие символы новой строки. Это наиболее полезно при использовании с инструментами Unix, которые производят нулевые байты, такими как &lt;code&gt;find -print0&lt;/code&gt; или &lt;code&gt;sort -z&lt;/code&gt; . См. Примеры split0 ниже.</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; печатает трассировку стека всех вызовов функций в стеке вызовов. Также &lt;code&gt;print-stack-trace&lt;/code&gt; , &lt;code&gt;-t&lt;/code&gt; или &lt;code&gt;--print-stack-trace&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; , &lt;a href=&quot;#variables-status&quot;&gt;статус&lt;/a&gt; завершения последнего задания переднего плана. Если задание было прервано сигналом, статус выхода будет 128 плюс номер сигнала.</target>
        </trans-unit>
        <trans-unit id="c516a3058e8b540cff793a7d265b4f62a8c6e479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status_generation&lt;/code&gt;, the &quot;generation&quot; count of &lt;code&gt;$status&lt;/code&gt;. This will be incremented only when the previous command produced an explicit status. (For example, background jobs will not increment this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f1259baf47f016edcc07c02ff8cac3eb36ec8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string collect&lt;/code&gt; collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non-empty, or 1 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; экранировать каждую строку STRING одним из трех способов. Первый &lt;code&gt;--style=script&lt;/code&gt; . Это значение по умолчанию. Он изменяет строку таким образом, чтобы ее можно было передать обратно в &lt;code&gt;eval&lt;/code&gt; , чтобы снова создать исходный аргумент. По умолчанию все специальные символы экранируются, а кавычки используются для упрощения вывода, когда это возможно. Если &lt;code&gt;--no-quoted&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; или --no-quote , упрощенный формат кавычек не используется. Статус выхода: 0, если была экранирована хотя бы одна строка, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="b4c7444a524aa0a5c6e14a9e5a8c764cdc56c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join0&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; объединяет аргументы STRING в одну строку, разделенную SEP, которая может быть пустой строкой. Статус выхода: 0, если было выполнено хотя бы одно соединение, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; объединяет аргументы STRING в одну строку, разделенную нулевым байтом (NUL), и добавляет конечный NUL. Это наиболее полезно в сочетании с инструментами, которые принимают ввод с разделителями NUL, такими как &lt;code&gt;sort -z&lt;/code&gt; . Статус выхода: 0, если было выполнено хотя бы одно соединение, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; сообщает длину каждого строкового аргумента в символах. Статус выхода: 0, если задана хотя бы одна непустая строка STRING, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; преобразует каждый строковый аргумент в нижний регистр. Статус выхода: 0, если хотя бы одна строка была преобразована в нижний регистр, иначе 1. Это означает, что в сочетании с флагом &lt;code&gt;-q&lt;/code&gt; вы можете легко проверить, является ли строка уже строчной.</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; проверяет каждую СТРОКУ на соответствие ШАБЛОНУ и печатает соответствующие подстроки. Сообщается только первое совпадение для каждой STRING, если не указано &lt;code&gt;-a&lt;/code&gt; или &lt;code&gt;--all&lt;/code&gt; , и в этом случае сообщаются все совпадения.</target>
        </trans-unit>
        <trans-unit id="a40e5293c1ed33089c8c9998d925a7c5a922a64b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string pad&lt;/code&gt; extends each STRING to the given width by adding CHAR to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; повторяет STRING &lt;code&gt;-n&lt;/code&gt; или &lt;code&gt;--count&lt;/code&gt; раз. Параметр &lt;code&gt;-m&lt;/code&gt; или &lt;code&gt;--max&lt;/code&gt; ограничивает количество выводимых символов (исключая новую строку). Этот параметр можно использовать &lt;code&gt;--count&lt;/code&gt; или вместе с --count . Если присутствуют оба параметра &lt;code&gt;--count&lt;/code&gt; и &lt;code&gt;--max&lt;/code&gt; , будет выведен max char, если только окончательный размер повторяющейся строки меньше max, в этом случае строка будет повторяться до тех пор, пока не будет достигнуто count. И &lt;code&gt;--count&lt;/code&gt; , и &lt;code&gt;--max&lt;/code&gt; будут принимать число больше или равное нулю, в случае нуля ничего не будет вычислено. Если &lt;code&gt;-N&lt;/code&gt; или &lt;code&gt;--no-newline&lt;/code&gt; дано, вывод не будет содержать символа новой строки в конце. Статус выхода: 0, если полученная строка не пуста, 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; похожа на &lt;code&gt;string match&lt;/code&gt; , но заменяет неперекрывающиеся соответствия подстроки с замещаемой строкой и печатает результат. По умолчанию PATTERN обрабатывается как буквальная подстрока для сопоставления.</target>
        </trans-unit>
        <trans-unit id="b0a1126fe21f179855ec4e248020911f83cdef8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7a2e7f64d2c2e08b4a820caeac0aba91bed9eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; разбивает каждую СТРОКУ на нулевой байт (NUL). Параметры такие же, как и для &lt;code&gt;string split&lt;/code&gt; за исключением того, что разделитель не задан.</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; разделяет каждую СТРОКУ на разделитель SEP, который может быть пустой строкой. Если указано &lt;code&gt;-m&lt;/code&gt; или &lt;code&gt;--max&lt;/code&gt; ,для каждой СТРОКИ выполняется не более MAX разделений. Если задано &lt;code&gt;-r&lt;/code&gt; или &lt;code&gt;--right&lt;/code&gt; , разделение выполняется справа налево. Это полезно в сочетании с &lt;code&gt;-m&lt;/code&gt; или &lt;code&gt;--max&lt;/code&gt; . При использовании &lt;code&gt;-n&lt;/code&gt; или &lt;code&gt;--no-empty&lt;/code&gt; пустые результаты исключаются из рассмотрения (например, &lt;code&gt;hello\n\nworld&lt;/code&gt; расширяется до двух строк, а не до трех). Статус выхода: 0, если было выполнено хотя бы одно разделение, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; печатает подстроку каждого строкового аргумента. Начало подстроки можно указать с помощью &lt;code&gt;-s&lt;/code&gt; или &lt;code&gt;--start&lt;/code&gt; , за которым следует значение индекса, отсчитываемое от 1. Положительные значения индекса относятся к началу строки, а отрицательные значения индекса относятся к концу строки. &lt;code&gt;--length&lt;/code&gt; значение по умолчанию - 1. Длина подстроки может быть указана с помощью &lt;code&gt;-l&lt;/code&gt; или --length . Если длина не указана, подстрока продолжается до конца каждой СТРОКИ. Статус выхода: 0, если была выполнена хотя бы одна операция с подстрокой, 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="779848ad4cb6502c1351bd5022020a27a2991193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start/end of the substring can be specified with &lt;code&gt;-s&lt;/code&gt;/&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt;/&lt;code&gt;--end&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length or end is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise. &lt;code&gt;--length&lt;/code&gt; is mutually exclusive with &lt;code&gt;--end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; удаляет начальные и конечные пробелы из каждой строки. Если задано &lt;code&gt;-l&lt;/code&gt; или &lt;code&gt;--left&lt;/code&gt; ,удаляются только ведущие пробелы. Если задано &lt;code&gt;-r&lt;/code&gt; или &lt;code&gt;--right&lt;/code&gt; ,обрезаются только конечные пробелы. &lt;code&gt;-c&lt;/code&gt; или &lt;code&gt;--chars&lt;/code&gt; переключатель вызывает символы в CHARS быть удалены вместо пробелов. Статус выхода: 0, если был обрезан хотя бы один символ, или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; выполняет обратную команду &lt;code&gt;string escape&lt;/code&gt; . Если строка, которую нужно неэкранировать, неправильно отформатирована, она игнорируется. Например, выполнение &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; вернет исходную строку. Не поддерживается отключение &lt;code&gt;--style=regex&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; преобразует каждый строковый аргумент в верхний регистр. Статус выхода: 0, если хотя бы одна строка была преобразована в верхний регистр, иначе 1. Это означает, что в сочетании с флагом &lt;code&gt;-q&lt;/code&gt; вы можете легко проверить, является ли строка уже прописной.</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; выполняет операции со строками.</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; , удалить текущее самовнушение</target>
        </trans-unit>
        <trans-unit id="3b65f5f109409d7aa183d4b719928e15f341ce89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion. Returns true if there was a suggestion to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; приостанавливает выполнение текущей оболочки, отправляя ей сигнал SIGTSTP, возвращаясь к контролирующему процессу. Позже его можно будет возобновить, отправив ему SIGCONT. Чтобы предотвратить приостановку оболочки, у которой нет управляющего процесса, она не будет приостанавливать работу оболочки, если это оболочка входа в систему. Это требование игнорируется, если задана опция &lt;code&gt;--force&lt;/code&gt; или оболочка не интерактивна.</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; , перейти к другому концу выделенного текста, не меняя выделения</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; выполняет один из нескольких блоков команд в зависимости от того, соответствует ли указанное значение одному из нескольких значений. &lt;code&gt;case&lt;/code&gt; используется вместе с оператором &lt;code&gt;switch&lt;/code&gt; для определения того, какой блок следует выполнить.</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; выполняет один из нескольких блоков команд в зависимости от того, равно ли указанное значение одному из нескольких значений с подстановочными знаками. &lt;code&gt;case&lt;/code&gt; используется вместе с оператором &lt;code&gt;switch&lt;/code&gt; для определения того, какой блок следует выполнить.</target>
        </trans-unit>
        <trans-unit id="434769b221b1b48ce5d15511a2fa7c4591850c79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tau&lt;/code&gt;. Equivalent to 2&amp;pi;, or the number of radians in a circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; возвращает 0, если функция FEATURE включена, 1, если она отключена, и 2, если она не распознается.</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; реализует подмножество &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;стандарта IEEE Std 1003.1-2008 (POSIX.1)&lt;/a&gt; . Применяются следующие исключения:</target>
        </trans-unit>
        <trans-unit id="2b8c506bfcfd28dcdc9217de6bf1cde91ed842ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a920b6047086d1231c7f5d7fa31e31bfaec3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; , транспонировать два символа слева от курсора</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; , транспонировать два слова слева от курсора</target>
        </trans-unit>
        <trans-unit id="373dbc4e9fdbf8eb3bea04bfb57dda742ec7cfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;../index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; - это оболочка для фреймворка доставки рыбных событий. Он существует для обратной совместимости с оболочками POSIX. Для других целей рекомендуется определить &lt;a href=&quot;index#event&quot;&gt;обработчик событий&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; устанавливает статус выхода в 0.</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; устанавливает ограничение на размер жесткого стека в 64 КБ.</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; также принимает следующие переключатели, которые определяют, какой тип ограничения установить:</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; команда ulimit устанавливает или выводит ограничения использования ресурсов оболочки и любых порожденных ею процессов. Если новое значение лимита опущено, печатается текущее значение лимита ресурса; в противном случае для указанного предела устанавливается новое значение.</target>
        </trans-unit>
        <trans-unit id="ba994fe9b705196c9308e7d1e704c2484c6530d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; или &lt;code&gt;umask u=rw&lt;/code&gt; устанавливает маску создания файла на чтение и запись для владельца и отсутствие разрешений для других пользователей.</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; отображает и управляет &quot;umask&quot; или маской режима создания файлов, которая используется для ограничения доступа по умолчанию к файлам.</target>
        </trans-unit>
        <trans-unit id="d5b91d0960d8706ccf917682f946da0ed42fef50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; function. An attempt to set umask to an invalid value will always fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; , текущая маска создания файла. Предпочтительный способ изменить переменную umask - использовать &lt;a href=&quot;commands#umask&quot;&gt;функцию umask&lt;/a&gt; . Попытка установить для umask недопустимое значение всегда будет неудачной.</target>
        </trans-unit>
        <trans-unit id="5a44b3a0a2ea21d060782d7de0252f821b01cdde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undo&lt;/code&gt; and &lt;code&gt;redo&lt;/code&gt;, revert or redo the most recent edits on the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11ddb9d62a747071c14ddc0257484f36e4d0db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-line&lt;/code&gt;, move up one line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; , сделать текущее слово заглавным</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; редактирует третий элемент массива PATH</target>
        </trans-unit>
        <trans-unit id="65486428e36108a03da6e3498a15ce370423fc29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; используется для интерактивного редактирования значения переменной среды. Переменные массива в целом нельзя редактировать с помощью &lt;code&gt;vared&lt;/code&gt; , но отдельные элементы массива могут.</target>
        </trans-unit>
        <trans-unit id="a2ed2d545022b6b47095d8582bee9cbd898c7fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual list elements can.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; , версия текущей запущенной рыбы (также доступна как &lt;code&gt;FISH_VERSION&lt;/code&gt; для обратной совместимости).</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; ждет завершения дочерних заданий.</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; повторно выполняет &lt;code&gt;CONDITION&lt;/code&gt; , а если статус выхода равен 0, то выполняет &lt;code&gt;COMMANDS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b917ba7af9605ab4fb8f9df237fdcbdd49966d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; works like a repeated &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; недопустим, так как нет длинного имени флага, и поэтому должен быть использован короткий флаг &lt;code&gt;-x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; означает, что допустим только &lt;code&gt;-x&lt;/code&gt; . Это логическое значение может использоваться более одного раза. Если он виден, тогда &lt;code&gt;_flag_x&lt;/code&gt; будет установлен на счетчик того, сколько раз был виден флаг.</target>
        </trans-unit>
        <trans-unit id="3ee9d686d28ba49895201840c47e53da39de4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean that can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; , &lt;code&gt;x=?&lt;/code&gt; , и &lt;code&gt;x=+&lt;/code&gt; аналогичны примерам n / name выше, но нет альтернативы длинному флагу короткому флагу &lt;code&gt;-x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; , перейти к предыдущей записи убийцы</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; , вставить последнюю запись убийства в буфер</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; не менее n, не более m.</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n или более</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; ровно до n (где n - число)</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; это &amp;laquo;чередование&amp;raquo;, то есть &amp;laquo;или&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="ceaacb2435257875de28974f5bc3261889295996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.*&lt;/code&gt; matches all hidden files (also known as &quot;dotfiles&quot;) and directories in your home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; выдает ошибку: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt; и &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; перемещает курсор на одно слово влево или вправо или перемещает вперед / назад в истории каталогов, если командная строка пуста. Если курсор уже находится в конце строки и доступно автоматическое предложение, &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt; (или &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt; ) принимает первое слово в предложении.</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; и &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; поиск в истории команд предыдущего / следующего токена, содержащего токен под курсором, до начала поиска. Если при запуске поиска командная строка не была на токене, все токены совпадают. См. Раздел &lt;a href=&quot;#history&quot;&gt;истории&lt;/a&gt; для получения дополнительной информации о поиске в истории.</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; вызывает отдельные аргументы, начиная с последнего аргумента в последней выполненной строке. Одно нажатие заменяет &quot;! $&quot;, Последующие нажатия заменяют &quot;!!: 4&quot; и тому подобное.</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt; делает текущее слово заглавной.</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt; перемещает следующее слово в список &lt;a href=&quot;#killring&quot;&gt;убийств&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; редактировать текущую командную строку во внешнем редакторе. Редактор выбирается из первой доступной из переменных &lt;code&gt;$VISUAL&lt;/code&gt; или &lt;code&gt;$EDITOR&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt; (или &lt;b&gt;F1&lt;/b&gt; ) показывает страницу руководства для текущей команды, если таковая существует.</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt; выводит список содержимого текущего каталога, если курсор не находится над аргументом каталога, и в этом случае будет перечислено содержимое этого каталога.</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt; добавляет строку ' &lt;code&gt;| less;&lt;/code&gt; 'до конца задания под курсором. В результате вывод команды будет разбит на страницы.</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt; переставляет последние два слова</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt; переводит текущее слово в верхний регистр.</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v&lt;/b&gt; То же, что &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt; печатает краткое описание команды под курсором.</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt; отменяет всю строку.</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; удалить один символ справа от курсора. Если командная строка пуста, &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; выйдет из рыбы.</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt; перемещает содержимое от курсора до конца строки до &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;L&lt;/b&gt; очищает и перерисовывает экран.</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt; перемещает содержимое из начала строки к курсору в &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt; перемещает предыдущий компонент пути (все до предыдущего &quot;/&quot;) в &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; копирует текущий буфер в системный буфер обмена, &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt; вставляет содержимое буфера обмена.</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt; меняет местами последние два символа</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt; входит в &lt;a href=&quot;#vi-mode-insert&quot;&gt;режим вставки&lt;/a&gt; в конце строки.</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; удаляет текст после текущей позиции курсора и перемещает его в список &lt;a href=&quot;#killring&quot;&gt;убийств&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;черный&lt;/em&gt; , &lt;em&gt;красный&lt;/em&gt; , &lt;em&gt;зеленый&lt;/em&gt; , &lt;em&gt;желтый&lt;/em&gt; , &lt;em&gt;синий&lt;/em&gt; , &lt;em&gt;пурпурный&lt;/em&gt; , &lt;em&gt;голубой&lt;/em&gt; , &lt;em&gt;белый&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt; , &lt;em&gt;brred&lt;/em&gt; , &lt;em&gt;brgreen&lt;/em&gt; , &lt;em&gt;bryellow&lt;/em&gt; , &lt;em&gt;brblue&lt;/em&gt; , &lt;em&gt;brmagenta&lt;/em&gt; , &lt;em&gt;brcyan&lt;/em&gt; , &lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e34719714f70ac8df5dca2fb1e4e47f8250675d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; newline (&lt;code&gt;n&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a866bff90464a4a66a94586a7ec2c25faa202e9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; tab,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2c76dd8c90b325c080eb4473c2d0c686420569" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argument&lt;/strong&gt;: A parameter given to a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a113d0ba1dd61b1680e975a9d0eeac43f4de2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Builtin&lt;/strong&gt;: A command that is implemented by the shell. Builtins are so closely tied to the operation of the shell that it is impossible to implement them as external commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ac51490e0f1b9926221a2d40ba9111daed635b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Command&lt;/strong&gt;: A program that the shell can run, or more specifically an external program that the shell runs in another process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883f71de63b1afbf7927d4eb85ae362d31832e7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: New &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaf073a1b8f279587c77fcd145e5e12a28d0f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: new &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99577a424c592bdc94d7b46a5517ada89ca7d5b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df60123802c7d8d13f9b6713ff515d5434a37f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a439bd1261a1ef67f3816a2ff0acb25eab61784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Function&lt;/strong&gt;: A block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple simple commands into one more advanced command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cafc45a94f4662a9df10981e932963cc6ad8531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Job&lt;/strong&gt;: A running pipeline or command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4735f2bc1b1f6cc44fc36a9270fa8d0bebad687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No configuration needed&lt;/strong&gt;: fish is designed to be ready to use immediately, without requiring extensive configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f7db0c5b5b21f6ffe9301ae126e17d9aef2f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pipeline&lt;/strong&gt;: A set of commands strung together so that the output of one command is the input of the next command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ece3509a17de7f5358483bc8c57d591c77a8d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redirection&lt;/strong&gt;: An operation that changes one of the input or output streams associated with a job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e72de08626d94c9beab15c6c8ae1dae05b4cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Switch&lt;/strong&gt; or &lt;strong&gt;Option&lt;/strong&gt;: A special kind of argument that alters the behavior of a command. A switch almost always begins with one or two hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1761f0b1ba5b43d7b93024d944cddd83977bbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argument&lt;/strong&gt; a parameter given to a command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9abc342512c31331a993f0014b546a67fa5db37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;builtin&lt;/strong&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f166fa76e55d41c05140d9c66e33482752388e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt; a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757809536a26ee5fe7cf05aa97874be3e9ec7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a92d1d7691db21d94fa52b5efe10f9c00a98a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;job&lt;/strong&gt; a running pipeline or command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e34e3f380b965910f59129f13ec1cc926b1a27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pipeline&lt;/strong&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d28d2c07c14f9f63ac8b103318575395a8d8f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirection&lt;/strong&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e94007d359708c28c1c1effb3bd68983f4f0862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch&lt;/strong&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ef9d5fc414a372d364bba5d463086a74cd1e79" translate="yes" xml:space="preserve">
          <source>=&amp;gt; /private/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="a6662c1906a30b4e8bf82f57ab26a17bb6d95ee1" translate="yes" xml:space="preserve">
          <source>A &quot;pager&quot; here is a program that takes output and &quot;paginates&quot; it. &lt;code&gt;less&lt;/code&gt; doesn't just do pages, it allows arbitrary scrolling (even back!).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;/&lt;/code&gt; если короткий флаг может использоваться кем-то, вызывающим вашу команду, иначе &lt;code&gt;-&lt;/code&gt; если он не должен отображаться как действительный короткий флаг. Если нет длинного имени флага, эти символы следует опустить. Вы также можете указать '#', чтобы указать, что можно использовать короткие и длинные имена флагов, а значение можно указать как неявное int; т.е. флаг вида &lt;code&gt;-NNN&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">Функция &lt;code&gt;fish&lt;/code&gt; - это список команд, которые могут принимать аргументы. В отличие от других оболочек, аргументы передаются не в &amp;laquo;нумерованных переменных&amp;raquo;, таких как &lt;code&gt;$1&lt;/code&gt; , а вместо этого передаются в единственном списке &lt;code&gt;$argv&lt;/code&gt; . Чтобы создать функцию, используйте встроенную &lt;code&gt;function&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3acb795caddb65d05651f6b5aacfc87a8acfa50a" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If &lt;code&gt;PID&lt;/code&gt; is specified, the jobs containing the specified process IDs are put in the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">Задание фона выполняется одновременно с рыбой и не имеет доступа к клавиатуре.Если задание не указано,то последнее задание помещается в фон.Если указан PID,то задания с указанными идентификаторами групп процессов помещаются в фоновом режиме.</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">Имя режима связывания (например, &lt;code&gt;bind -m abc ...&lt;/code&gt; ) ограничено правилами для допустимых имен переменных.</target>
        </trans-unit>
        <trans-unit id="c4f32c51c430035cac728bdf7bc9ad4c0f17d608" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) must be a valid variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">Блок позволяет ввести новую область видимости переменных, перенаправить ввод или вывод набора команд как группы или указать приоритет при использовании условных команд, таких как &lt;code&gt;and&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">Разделенный запятыми список символов,заключенный в фигурные скобки,будет расширен таким образом,чтобы каждый элемент списка стал новым параметром.</target>
        </trans-unit>
        <trans-unit id="b1251b9c7f3a0ecfe4cfcd8762e368b829d54d22" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">Команда выполняется путем записи имени команды с последующим указанием любых аргументов.</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">Команда может быть недействительной,потому что ее не существует,или относится к файлу,который вы не можете выполнить.Когда команда становится действительной,она отображается другим цветом:</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">Обычное сравнение-со статусом $:</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">Общая идиома состоит в том,чтобы захватить вывод команды в переменной:</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">Каталог, в котором конечные пользователи могут хранить свои собственные дополнения, обычно &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (управляется переменной окружения &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; );</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">Каталог, в котором конечные пользователи могут хранить свои собственные функции, обычно &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (управляется переменной окружения &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">Каталог, в который системные администраторы могут устанавливать доработки для всех пользователей системы, обычно &lt;code&gt;/etc/fish/completions&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="108785695c3e86a9a6e52e8824798deb67cc4081" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">Каталог, в который системные администраторы могут устанавливать функции для всех пользователей системы, обычно &lt;code&gt;/etc/fish/functions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">Каталог, в котором сторонние поставщики программного обеспечения могут отправлять свои собственные доработки для своего программного обеспечения, обычно &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">Каталог, в котором сторонние поставщики программного обеспечения могут поставлять свои собственные функции для своего программного обеспечения, обычно &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">Знак доллара, за которым следует строка символов, заменяется значением переменной оболочки с тем же именем. Чтобы познакомиться с концепцией переменных оболочки, прочтите раздел &amp;laquo; &lt;a href=&quot;#variables&quot;&gt;Переменные оболочки&lt;/a&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="ca6eed9ce238df03667fd3003cea2a936f38aa05" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99436ba2e5d329112af2b584fd421fbf3f42c7d" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">Более быстрый способ - изменить &lt;a href=&quot;#tut_universal&quot;&gt;универсальную переменную &lt;/a&gt; &lt;code&gt;$fish_user_paths&lt;/code&gt; , которая автоматически добавляется к &lt;code&gt;$PATH&lt;/code&gt; . Например, чтобы навсегда добавить &lt;code&gt;/usr/local/bin&lt;/code&gt; в ваш &lt;code&gt;$PATH&lt;/code&gt; , вы можете написать:</target>
        </trans-unit>
        <trans-unit id="b85f90d83e9a1056a1b7da7455ba1c119e13b404" translate="yes" xml:space="preserve">
          <source>A faster way is to use the &lt;a href=&quot;cmds/fish_add_path#cmd-fish-add-path&quot;&gt;fish_add_path&lt;/a&gt; function, which adds given directories to the path if they aren't already included. It does this by modifying the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">Фамилия.Вывод будет записан в указанный файл.</target>
        </trans-unit>
        <trans-unit id="bac36bb2563051c8106b324a3b458e2a8ae8b7bc" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file. Often &lt;code&gt;&amp;gt;/dev/null&lt;/code&gt; to silence output by writing it to the special &quot;sinkhole&quot; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a90ec79fdc93eb88a032045db8f08f69739be0" translate="yes" xml:space="preserve">
          <source>A fish function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">Функция-это список команд,которые будут выполняться,когда имя функции дается в виде команды.</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">Имя функции не может быть пустым.Оно не может начинаться с дефиса (&quot;-&quot;)и не может содержать косой черты (&quot;/&quot;).Все остальные символы,включая пробел,являются действительными.</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">Глобальная переменная с таким же именем уже существует.</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">Жесткий предел может быть только уменьшен.После его установки он не может быть увеличен;мягкий предел может быть увеличен до значения жесткого предела.Если не указано ни -H,ни -S,то при назначении нового предельного значения обновляются как мягкий,так и жесткий лимит,а мягкий лимит используется при сообщении текущего значения.</target>
        </trans-unit>
        <trans-unit id="b23a7c576473abf4f67fa752f0d58982d9b4994d" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither &lt;code&gt;-H&lt;/code&gt; nor &lt;code&gt;-S&lt;/code&gt; is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">Большое количество переменных, начинающихся с префиксов &lt;code&gt;fish_color&lt;/code&gt; и &lt;code&gt;fish_pager_color.&lt;/code&gt; Дополнительную информацию см. В разделе &amp;laquo; &lt;a href=&quot;#variables-color&quot;&gt;Переменные для изменения цвета выделения&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4b6b5c0631c6ec4d7569772ecd93c5f2a9ad8e07" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">Буквальное &quot;{}&quot; не будет использоваться в качестве расширения скобки:</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">Длинное имя флага,которое не является обязательным.Если его нет,то можно использовать только короткую букву флага.</target>
        </trans-unit>
        <trans-unit id="17f47cd5794289ad514522518e0de593fc52cf83" translate="yes" xml:space="preserve">
          <source>A missing starting index in a range defaults to 1. This is allowed if the range is the first index expression of the sequence. Similarly, a missing ending index, defaulting to -1 is allowed for the last index range in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df45d8597da7e771240bccd744a5834f0680a0b5" translate="yes" xml:space="preserve">
          <source>A more robust approach to argument handling is &lt;a href=&quot;cmds/argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt;, which checks the defined options and puts them into various variables, leaving only the positional arguments in $argv. Here's a simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98778ce415c46f223a5f19597a261565905b28a5" translate="yes" xml:space="preserve">
          <source>A nice thing about lists is that they are passed to commands one element as one argument, so once you've set your list, you can just pass it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35ae38b3dc7e3d0d8e3c2e5485ce36d974931c5" translate="yes" xml:space="preserve">
          <source>A number between the &lt;code&gt;%&lt;/code&gt; and the format letter specifies the width. The result will be left-padded with spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fb125f22d63e95feaa1b16b3d8c7381230797c" translate="yes" xml:space="preserve">
          <source>A number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c289b8e2f3ba875ebca3ca04379eb21ac58c6d06" translate="yes" xml:space="preserve">
          <source>A number of variables control the symbol (&quot;display&quot;) and color (&quot;color&quot;) for the different status indicators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7eb886434c2d98d1f604c3752317380a9843e6c" translate="yes" xml:space="preserve">
          <source>A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">Можно указать диапазон индексов, подробности см. В разделе &lt;a href=&quot;#expand-index-range&quot;&gt;Расширение диапазона индексов&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b9b9c424a1693d0e726bcbd3ebbcf95acc9865f6" translate="yes" xml:space="preserve">
          <source>A rich set of tab completions work &quot;out of the box&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f78ea4e9ef795d6303b8e958efabed0828ac69c" translate="yes" xml:space="preserve">
          <source>A script written in &lt;code&gt;bash&lt;/code&gt; would need a first line like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e298a31256356ac86c6d29914100defedf5fffe" translate="yes" xml:space="preserve">
          <source>A scripts written in &lt;code&gt;bash&lt;/code&gt; it would need a first line like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a0a6b90c1f5bc360ed70d0dd93ffe55365da5" translate="yes" xml:space="preserve">
          <source>A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212 brblue&lt;/code&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a74286acaf35ddfed9ca54f393e47cdb77fcfa" translate="yes" xml:space="preserve">
          <source>A shell is a program that helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcf13b497d0506afff3d618c0c36dfe5e1a068c" translate="yes" xml:space="preserve">
          <source>A shell is a program which helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">Короткое флаговое письмо (обязательно). Это должно быть буквенно-цифровое обозначение или &quot;#&quot;. Символ &amp;laquo;#&amp;raquo; является специальным и означает, что флаг формы &lt;code&gt;-123&lt;/code&gt; действителен. За коротким флагом &amp;laquo;#&amp;raquo; должен следовать &amp;laquo;-&amp;raquo; (поскольку короткое имя в противном случае &lt;code&gt;_flag_#&lt;/code&gt; поскольку _flag_ # не является допустимым именем переменной ) и должно сопровождаться длинным именем флага без модификаторов.</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb9db4c52835afcbee666aae50d387e24cb3af2" translate="yes" xml:space="preserve">
          <source>A simple greeting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03cb577b66142cb2e46d23d5c55c8cdf70b3657" translate="yes" xml:space="preserve">
          <source>A simple handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e585b4919dc0904a5ac8ff639290a7da0168ce72" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays all known VCS info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44605d7cf5f66a5d454bc7f8b72acac0713b1cf" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays git info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981d3d4dab4f4f8c0ceaf4c8bcfaaee7cef2a27b" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays hg info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87603fcaef9b30ff09e50b24e5fda2ce2fcd654c" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays svn info:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">Простая подсказка,представляющая собой упрощенную версию отладочной подсказки по умолчанию:</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">Простая подсказка:</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">Простая правильная подсказка:</target>
        </trans-unit>
        <trans-unit id="1185aac09aa8fc678b91d059d32d2cfc59419da0" translate="yes" xml:space="preserve">
          <source>A simple title:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">Переключатель - очень распространенный особый тип аргумента. Переключатели почти всегда начинаются с одного или нескольких дефисов &amp;laquo; &lt;code&gt;-&lt;/code&gt; &amp;raquo; и изменяют способ работы команды. Например, команда ' &lt;code&gt;ls&lt;/code&gt; ' обычно перечисляет все файлы и каталоги в текущем рабочем каталоге, но при использовании переключателя ' &lt;code&gt;-l&lt;/code&gt; ' поведение ' &lt;code&gt;ls&lt;/code&gt; ' изменяется так, чтобы отображалось не только имя файла, но и размер. , разрешения, владелец и время изменения каждого файла.</target>
        </trans-unit>
        <trans-unit id="5bdeb5e86a31772c1e5672fd704d86afc086f067" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens &lt;code&gt;-&lt;/code&gt; and alter the way a command operates. For example, the &lt;code&gt;ls&lt;/code&gt; command usually lists the names of all files and directories in the current working directory. By using the &lt;code&gt;-l&lt;/code&gt; switch, the behavior of &lt;code&gt;ls&lt;/code&gt; is changed to not only display the filename, but also the size, permissions, owner, and modification time of each file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">Универсальная переменная - это переменная, значение которой является общим для всех экземпляров &lt;code&gt;fish&lt;/code&gt; , сейчас и в будущем - даже после перезагрузки. Вы можете сделать переменную универсальной с помощью &lt;code&gt;set -U&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a3b9e4c443fb1972ce4de5e58116d2a5d4a465de" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of fish, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">Имя переменной не может быть пустым.Оно может содержать только буквы,цифры и подчеркивания.Оно может начинаться и заканчиваться любым из этих символов.</target>
        </trans-unit>
        <trans-unit id="a90aba13b6feb8ff1a5141d94cb1fc2fe96e9477" translate="yes" xml:space="preserve">
          <source>Abbreviations</source>
          <target state="translated">Abbreviations</target>
        </trans-unit>
        <trans-unit id="a39ab99e2ea47c8c0e9d74827d866ecbba2cbde0" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod(1)&lt;/code&gt; program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">Права доступа объясняются на странице руководства для программы &lt;code&gt;chmod&lt;/code&gt; (1).</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">Добавьте новое сокращение, где &lt;code&gt;gco&lt;/code&gt; будет заменено на &lt;code&gt;git checkout&lt;/code&gt; global в текущую оболочку. Это сокращение не будет автоматически видно другим оболочкам, если та же команда не будет запущена в этих оболочках (например, при выполнении команд в config.fish).</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">Добавьте новую аббревиатуру, где &lt;code&gt;l&lt;/code&gt; будет заменено на &lt;code&gt;less&lt;/code&gt; универсальное, так что все оболочки. Обратите внимание, что вы опускаете &lt;code&gt;-U&lt;/code&gt; , так как это значение по умолчанию.</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">Добавьте раковину рыбы &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; в &lt;code&gt;/etc/shells&lt;/code&gt; с помощью:</target>
        </trans-unit>
        <trans-unit id="5653e8b2a5b4e506d45221882faa5a4ef5e578ef" translate="yes" xml:space="preserve">
          <source>Add the line &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2218c2ad08a2c4abdfb2b24cb656a2bed5878772" translate="yes" xml:space="preserve">
          <source>Add the shell to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f235c11a925e7b3330abed437c370548fb56ecc" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;blink&lt;/code&gt; can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">Кроме того,для изменения подсветки на пейджере завершения доступны следующие переменные:</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">После ввода команды она вставляется в конец списка истории.Любые дубликаты истории автоматически удаляются.Нажатием клавиш вверх и вниз пользователь может осуществлять поиск в истории вперед и назад.Если при запуске поиска по истории текущая командная строка не пуста,то отображаются только команды,содержащие введенную в командную строку строку.</target>
        </trans-unit>
        <trans-unit id="1c0f395d3d36fe65276a4d5db63528962c286e62" translate="yes" xml:space="preserve">
          <source>After a command has been executed, it is remembered in the history list. Any duplicate history items are automatically removed. By pressing the up and down keys, you can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">После того, как переменная была установлена, вы можете использовать значение переменной в оболочке через &lt;a href=&quot;#expand-variable&quot;&gt;расширение переменной&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="93f9aedd05ed2f309f5e444d2d5404bfd9df4031" translate="yes" xml:space="preserve">
          <source>After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">После анализа аргументов &lt;code&gt;argv&lt;/code&gt; var устанавливается с локальной областью видимости на любые значения, еще не использованные во время обработки флага. Если нет несвязанных значений, переменная устанавливается, но &lt;code&gt;count $argv&lt;/code&gt; будет равен нулю.</target>
        </trans-unit>
        <trans-unit id="cadc853d6ecb84da57af597335f5dd5f920f4fad" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; variable is set with local scope to any values not already consumed during flag processing. If there are no unbound values the variable is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">Все массивы одномерные и не могут содержать другие массивы, хотя можно подделать вложенные массивы, используя правила разыменования &lt;a href=&quot;#expand-variable&quot;&gt;расширения переменных&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="56e6acc061961e38bd117d2ddb2648c69dcb4126" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and can't contain other lists, although it is possible to fake nested lists using dereferencing - see &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c98653dd35db2f0582bbcfb13f9d49a14d5a55" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">Все вышеперечисленные расширения могут быть объединены.Если в результате нескольких расширений получается более одного параметра,то создаются все возможные комбинации.</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">Все тригонометрические функции используют радиан.</target>
        </trans-unit>
        <trans-unit id="26ebe75843a58a3dac290ff4f09ca89edc661094" translate="yes" xml:space="preserve">
          <source>All statements in initialization files that output to the terminal should be guarded with something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaf99fa509b066c368ae766f5fd326fe0a501f8" translate="yes" xml:space="preserve">
          <source>All variables are &quot;arrays&quot; (we use the term &quot;lists&quot;), and expanding a variable expands to all its elements, with each element as its own argument (like bash's &lt;code&gt;&quot;${var[@]}&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">Почти все команды fish реагируют на параметры &lt;code&gt;-h&lt;/code&gt; или &lt;code&gt;--help&lt;/code&gt; для отображения соответствующей справки, также доступной с &lt;code&gt;help&lt;/code&gt; команд help и &lt;code&gt;man&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="bda1d0385b54eba22fc83053a714334995ee2583" translate="yes" xml:space="preserve">
          <source>Also shortened as &quot;I/O&quot; or &quot;IO&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37eb49280470e438e7e699ff631a3f84af89ba2" translate="yes" xml:space="preserve">
          <source>Also,</source>
          <target state="translated">Also,</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="517f3a2c8b9272ee95d59b7f36af89264fa4dbf8" translate="yes" xml:space="preserve">
          <source>Alt+&amp;darr;,Down</source>
          <target state="translated">Alt+&amp;darr;,Down</target>
        </trans-unit>
        <trans-unit id="5e9023ab706bd62faa0520004f30bc2ed999ef8c" translate="yes" xml:space="preserve">
          <source>Alt+&amp;larr;,Left</source>
          <target state="translated">Alt+&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="36866486669ffcdfbef93f70b2122585d0689c65" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;</source>
          <target state="translated">Alt+&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b89c31e566539bfe03d67119b891ccbd78608fd" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;,Right</source>
          <target state="translated">Alt+&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="9a9d40973db0c2622dc620880dd806a2a7b074af" translate="yes" xml:space="preserve">
          <source>Alt+&amp;uarr;,Up</source>
          <target state="translated">Alt+&amp;uarr;,Up</target>
        </trans-unit>
        <trans-unit id="bfc455c2b3ba6cee557bc6d5bddcaae8ab6cd71e" translate="yes" xml:space="preserve">
          <source>Alt+.</source>
          <target state="translated">Alt+.</target>
        </trans-unit>
        <trans-unit id="3f1d49e2c9f7278fd80b98a77041a0c748cbc877" translate="yes" xml:space="preserve">
          <source>Alt+Backspace</source>
          <target state="translated">Alt+Backspace</target>
        </trans-unit>
        <trans-unit id="e03e0d826ab2903a1d279112bf254a834058b27f" translate="yes" xml:space="preserve">
          <source>Alt+D</source>
          <target state="translated">Alt+D</target>
        </trans-unit>
        <trans-unit id="abed54704141f2d3e51473ad15ab778fff8ad229" translate="yes" xml:space="preserve">
          <source>Alt+Enter</source>
          <target state="translated">Alt+Enter</target>
        </trans-unit>
        <trans-unit id="f71a3b249f291f22237bbbed38b8c6c692ef50ea" translate="yes" xml:space="preserve">
          <source>Alt+F</source>
          <target state="translated">Alt+F</target>
        </trans-unit>
        <trans-unit id="ef42947ea26232a62f96bc3b77c5d9938c972a74" translate="yes" xml:space="preserve">
          <source>Alt+Y</source>
          <target state="translated">Alt+Y</target>
        </trans-unit>
        <trans-unit id="42067d9d74bbc067847a30164e23954aca55ff0a" translate="yes" xml:space="preserve">
          <source>Alt+c</source>
          <target state="translated">Alt+c</target>
        </trans-unit>
        <trans-unit id="d73eff91bc5add0567a63c189cfc6a840240cc3a" translate="yes" xml:space="preserve">
          <source>Alt+d</source>
          <target state="translated">Alt+d</target>
        </trans-unit>
        <trans-unit id="356f2928c7cc628dc148ace42aaa5347a9043a00" translate="yes" xml:space="preserve">
          <source>Alt+e</source>
          <target state="translated">Alt+e</target>
        </trans-unit>
        <trans-unit id="a2008eaab718a2cbdba9a5b56cc0388211241a00" translate="yes" xml:space="preserve">
          <source>Alt+h</source>
          <target state="translated">Alt+h</target>
        </trans-unit>
        <trans-unit id="63b063c0b910fdda5527dc17ae1126ec12f233f4" translate="yes" xml:space="preserve">
          <source>Alt+l</source>
          <target state="translated">Alt+l</target>
        </trans-unit>
        <trans-unit id="412b6a19e71a5431a4a033717193f98cc5ab36f2" translate="yes" xml:space="preserve">
          <source>Alt+p</source>
          <target state="translated">Alt+p</target>
        </trans-unit>
        <trans-unit id="3f12597f24de2438c063ec57e52f94359d4653a6" translate="yes" xml:space="preserve">
          <source>Alt+s</source>
          <target state="translated">Alt+s</target>
        </trans-unit>
        <trans-unit id="7c8aea22d76a0fc0d599dcc9667d21c686685110" translate="yes" xml:space="preserve">
          <source>Alt+t</source>
          <target state="translated">Alt+t</target>
        </trans-unit>
        <trans-unit id="8d028f59d024b2c7c1586395af72b9b1deb565e4" translate="yes" xml:space="preserve">
          <source>Alt+u</source>
          <target state="translated">Alt+u</target>
        </trans-unit>
        <trans-unit id="cb3eeeb8ea5fb25aecee7d1b619b3e3d542195e4" translate="yes" xml:space="preserve">
          <source>Alt+v</source>
          <target state="translated">Alt+v</target>
        </trans-unit>
        <trans-unit id="f7d4868bcba598a1dee143a75725317cae61d6b2" translate="yes" xml:space="preserve">
          <source>Alt+w</source>
          <target state="translated">Alt+w</target>
        </trans-unit>
        <trans-unit id="91cf5d208f71238a675c3bfa07523a3c0bae8a90" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt;, but remember that &lt;strong&gt;the variable must be double-quoted&lt;/strong&gt;. For example, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt;. The &lt;code&gt;test&lt;/code&gt; command provides its own and (-a) and or (-o):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3300770ceceb008dbc00aa7addb545afcdd538" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;a href=&quot;#variables-argv&quot;&gt;$argv&lt;/a&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">Всегда старайтесь добавлять переменную &lt;code&gt;$argv&lt;/code&gt; в список параметров завернутой команды. Это гарантирует, что если пользователь укажет какие-либо дополнительные параметры функции, они будут переданы базовой команде.</target>
        </trans-unit>
        <trans-unit id="f9ad26606a8f0efef47019531f3d0c942aac7413" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">Можно использовать значение RGB с тремя или шестью шестнадцатеричными цифрами, например A0FF33 или f2f. &lt;code&gt;fish&lt;/code&gt; выберет ближайший поддерживаемый цвет. Трехзначное значение эквивалентно указанию каждой цифры дважды; например, &lt;code&gt;set_color 2BC&lt;/code&gt; совпадает с &lt;code&gt;set_color 22BBCC&lt;/code&gt; . Шестнадцатеричные значения RGB могут быть в нижнем или верхнем регистре. В зависимости от возможностей вашего терминала (и уровня поддержки, &lt;code&gt;set_color&lt;/code&gt; имеет set_color ) фактический цвет может быть приблизительно равен ближайшему совпадающему зарезервированному имени цвета, или &lt;code&gt;set_color&lt;/code&gt; может не влиять на цвет. Второй цвет может быть задан как желаемый резервный цвет. например, &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt; проинструктирует set_color использовать &lt;em&gt;brblue&lt;/em&gt;если терминал не поддерживает желаемый оттенок серого. Это очень полезно, когда терминал с 8 или 16 цветами иначе может не использовать цвет.</target>
        </trans-unit>
        <trans-unit id="f74c42c499aeba63a8ea3607dd7f2066d74d726b" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor like &lt;code&gt;&amp;amp;2&lt;/code&gt; for standard error. The output will be written to the destination descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">Амперсанд ( &lt;code&gt;&amp;amp;&lt;/code&gt; ), за которым следует номер другого дескриптора файла. Вместо этого вывод будет записан в этот файловый дескриптор.</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">Амперсанд со знаком минус ( &lt;code&gt;&amp;amp;-&lt;/code&gt; ). Дескриптор файла будет закрыт.</target>
        </trans-unit>
        <trans-unit id="71cc88334bb3e92319c03d6549b247d60c760b50" translate="yes" xml:space="preserve">
          <source>An autoloaded function becomes available automatically to all running shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">Примером перенаправления файла является &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; , который направляет вывод команды echo в файл output.txt.</target>
        </trans-unit>
        <trans-unit id="70622abf0d999c9b30ccee1d90ca01c58b366577" translate="yes" xml:space="preserve">
          <source>An important list is &lt;code&gt;$argv&lt;/code&gt;, which contains the arguments to a function or script. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8ae932f676e1b49a92ae134701eb47d262917c" translate="yes" xml:space="preserve">
          <source>An option defined with &lt;code&gt;=?&lt;/code&gt; can take optional arguments. Optional arguments have to be &lt;em&gt;directly attached&lt;/em&gt; to the option they belong to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba78d35401b6a1c6c93697efea477dcd3252c20" translate="yes" xml:space="preserve">
          <source>An optional alphanumeric short flag letter, followed by a &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command or, for backwards compatibility, a &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag (in which case it will also not be exposed as a flag variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6f6d9342a43e58638f4532c5f5bd8a68457e20" translate="yes" xml:space="preserve">
          <source>An optional long flag name. If not present then only the short flag letter can be used, and if that is not present either it's an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679ec7a7b8cdd5d99093574be9564bebec8796e1" translate="yes" xml:space="preserve">
          <source>And here is fish:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69522f56e3535db80624669c313a99567b23650" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">И история тоже.Введите команду один раз,и вы сможете заново напечатать ее,набрав всего несколько букв:</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">И еще кое-что:</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">И они выйдут ненулевыми:</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">И это откроет случайную картинку из любой из подкаталогов:</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8412cc61dadd4c0591948f966c2cb2fcaae73906" translate="yes" xml:space="preserve">
          <source>Another set of commands, usually also available in other shells like bash, deal with the directory stack. Stack handling is not automatic and needs explicit calls of the following commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acd5f5d27392753de0db7aa6703caa605cc318d" translate="yes" xml:space="preserve">
          <source>Another way to redirect streams is a &lt;em&gt;pipe&lt;/em&gt;. A pipe connects streams with each other. Usually the standard output of one command is connected with the standard input of another. This is done by separating commands with the pipe character &lt;code&gt;|&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871f0eca83b698ab5e09430c495bdbf2531c9722" translate="yes" xml:space="preserve">
          <source>Any arbitrary file descriptor can used in a redirection by prefixing the redirection with the FD number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362b56d716d77e953ca245a04fefe6fa04496b74" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">Любой файловый дескриптор может быть направлен на вывод,отличный от заданного по умолчанию,с помощью простого механизма,называемого перенаправлением.</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">Любой файловый дескриптор может быть перенаправлен произвольным образом,префиксом перенаправления с файловым дескриптором.</target>
        </trans-unit>
        <trans-unit id="cd5f97ddaa069aad021c1d2a9c338e699d7fb280" translate="yes" xml:space="preserve">
          <source>Any trailing newlines on the input are trimmed, just as with &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; substitution in sh. &lt;code&gt;--no-trim-newlines&lt;/code&gt; can be used to disable this behavior, which may be useful when running a command such as &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf5f1f8373d2b080130881f50fad45711fb3b29" translate="yes" xml:space="preserve">
          <source>Anything after a &lt;code&gt;#&lt;/code&gt; until the end of the line is a comment. That means it's purely for the reader's benefit, fish ignores it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dd47e0001555dbec5775dfb849b9ead7487cd5" translate="yes" xml:space="preserve">
          <source>Argument Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">Аргументы, начинающиеся с &lt;code&gt;-&lt;/code&gt; обычно интерпретируются как переключатели; &lt;code&gt;--&lt;/code&gt; приводит к тому, что следующие аргументы не рассматриваются как переключатели, даже если они начинаются с &lt;code&gt;-&lt;/code&gt; . Переключатели и обязательные аргументы распознаются только в командной строке.</target>
        </trans-unit>
        <trans-unit id="c271567e584d16588ed2e67dbff2bcfabb548be6" translate="yes" xml:space="preserve">
          <source>Arguments of the form &lt;code&gt;PID&lt;/code&gt; or &lt;code&gt;%JOBID&lt;/code&gt; restrict the output to jobs with the selected process identifiers or job numbers respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb75a7744b90e1d41f52f6bfdc6641917e4fac3" translate="yes" xml:space="preserve">
          <source>Arithmetic Expansion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="043257e881ac5312780335efc43840ed60123921" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ae8c713f35540f776adc6fe2105492bc43a12d" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; redirects both stdout and stderr to the same process. Note that this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb74a4614fe1bdd5c15afb4396e8a04b015ea06" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same destination. For example, &lt;code&gt;echo hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt; redirects both stdout and stderr to the file &lt;code&gt;all_output.txt&lt;/code&gt;. This is equivalent to &lt;code&gt;echo hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d7ac6db0a68a35b045c043f69d790c7693b8ae" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e3ff1cb1d7c006c42b55ac24b776d0f7cba3be" translate="yes" xml:space="preserve">
          <source>As a convention, an uppercase name is usually used for exported variables, while lowercase variables are not exported. (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3e5f4a2209f9a0c0df95a3cff184e572efda6a" translate="yes" xml:space="preserve">
          <source>As a more comprehensive example, here's a commented excerpt of the completions for systemd's &lt;code&gt;timedatectl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5f5d858c5cb06f89afc2d8f5a2724a03bbce58" translate="yes" xml:space="preserve">
          <source>As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">В качестве особого случая &lt;code&gt;cd .&lt;/code&gt; эквивалентно &lt;code&gt;cd $PWD&lt;/code&gt; , что полезно в случаях, когда точка монтирования была повторно использована или каталог был удален и воссоздан заново.</target>
        </trans-unit>
        <trans-unit id="8a76b3ccd2a02e439e9d0d634760228379ade658" translate="yes" xml:space="preserve">
          <source>As a special case, most of the time history substitution is used as &lt;code&gt;sudo !!&lt;/code&gt;. In that case just press</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cca9051e4bad2090a097b384b44922e2c0a707" translate="yes" xml:space="preserve">
          <source>As a special case, when no scope is given and no variable has been defined the variable will belong to the scope of the currently executing &lt;em&gt;function&lt;/em&gt;. Note that this is different from the &lt;code&gt;--local&lt;/code&gt; flag, which would make the variable local to the current &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75218cdcc8abd1bc9e317919f08dbf1d9535b37e" translate="yes" xml:space="preserve">
          <source>As an example, here's a relatively simple bash prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473fe2640f48f2c3e356480b21727c05fe2a883f" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">Как и в любой современной оболочке, стрелка вверх, &lt;b&gt;&amp;uarr;&lt;/b&gt; вызывает целые строки, начиная с последней выполненной строки. Однократное нажатие заменяет &amp;laquo;!!&amp;raquo;, последующие нажатия заменяют &amp;laquo;! -3&amp;raquo; и т.п.</target>
        </trans-unit>
        <trans-unit id="0aef70ec4e5a6bb50c1b6265dc481e6984473182" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut-semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">Как упоминалось в &lt;a href=&quot;#tut_semicolon&quot;&gt;разделе о точке с запятой&lt;/a&gt; , это также можно записать в несколько строк, например:</target>
        </trans-unit>
        <trans-unit id="4d0c80cc72f9bf8f12ec6bdcb82cf280e4cc33e4" translate="yes" xml:space="preserve">
          <source>As you see, you can use a range of indices, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f44aeed0b615ca47a0ff22e32c1de761aa65f7" translate="yes" xml:space="preserve">
          <source>As you type fish will suggest commands to the right of the cursor, in gray. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">Функции автозагрузки</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">Автозагрузка также не будет работать для &lt;a href=&quot;#event&quot;&gt;обработчиков событий&lt;/a&gt; , поскольку fish не может знать, что функция должна выполняться, когда происходит событие, когда она еще не загрузила функцию. См. Раздел &lt;a href=&quot;#event&quot;&gt;обработчиков событий&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">Функции автозагрузки</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">Автозагрузка не применима к функциям, созданным командой &lt;code&gt;alias&lt;/code&gt; . Для достаточно простых функций, которые вы предпочитаете использовать команду &lt;code&gt;alias&lt;/code&gt; для их определения, вам необходимо поместить эти команды в ваш сценарий &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; или какой-либо другой сценарий, запускаемый при запуске оболочки.</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">Автозагрузка не применима к псевдонимам.Так как,по определению,функция создается в момент выполнения команды псевдонима.Автозагрузка псевдонимов невозможна.</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">Автоматически загруженные функции нельзя удалить с помощью &lt;code&gt;functions -e&lt;/code&gt; . Либо удалите файл определения, либо измените переменную $ fish_function_path, чтобы удалить автоматически загружаемые функции.</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">Autosuggestions-это мощный способ быстрого вызова часто вводимых команд путем ввода первых нескольких символов.Они также являются эффективной техникой для навигации по иерархии каталогов.</target>
        </trans-unit>
        <trans-unit id="b803480401e4c7ecbb2689fc9dd0c41c3a693dad" translate="yes" xml:space="preserve">
          <source>Available categories are listed by &lt;code&gt;fish --print-debug-categories&lt;/code&gt;. The &lt;code&gt;--debug&lt;/code&gt; option accepts a comma-separated list of categories, and supports glob syntax. The following command turns on debugging for &lt;em&gt;complete&lt;/em&gt;, &lt;em&gt;history&lt;/em&gt;, &lt;em&gt;history-file&lt;/em&gt;, and &lt;em&gt;profile-history&lt;/em&gt;, as well as the default categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">Вернуться к &lt;a href=&quot;index#toc-commands&quot;&gt;указателю команд&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">Предыдущие вакансии</target>
        </trans-unit>
        <trans-unit id="7eddf2e692bbe2944055253e903e03f92dc85c03" translate="yes" xml:space="preserve">
          <source>Backslash Escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898df0585456830b3e2596ce9c727b397a79ef3c" translate="yes" xml:space="preserve">
          <source>Bash and Zsh at least, though it is a POSIX extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">Будьте осторожны, когда пытаетесь использовать фигурные скобки для отделения имен переменных от текста. Показанной выше проблемы можно избежать, заключив переменную в двойные кавычки вместо фигурных скобок ( &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8135bc2e0facd903fae79ced79c0c26d6ddbce1f" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#path&quot;&gt;$PATH&lt;/a&gt; is a list, this expands to all the files in all the directories in it. And if there are no directories in $PATH, the right answer here is to expand to no files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">Потому что подстановка истории-это неудобный интерфейс,который был изобретен еще до того,как стало возможным интерактивное редактирование строк.Рыба бросает его в пользу усовершенствования интерфейса вызова интерактивной истории.Переключение требует небольшого изменения привычек:если вы хотите изменить старую строку/слово,сначала вспомните его,а затем отредактируйте.Например,не набирайте &quot;sudo !&quot;!-сначала нажмите &quot;Up&quot;,затем &quot;Home&quot;,затем введите &quot;sudo&quot;.</target>
        </trans-unit>
        <trans-unit id="e48c07a2bec43ce33a721c00e3bf3a0e514f9626" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Instead of adding this pseudo-syntax, fish opts for nice history searching and recall features. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a6ddbaf25b0a2b366ca16189c773aaebd9954" translate="yes" xml:space="preserve">
          <source>Because shell scripts are written in many different languages, they need to carry information about which interpreter should be used to execute them. For this, they are expected to have a first line, the shebang line, which names the interpreter executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">Поскольку этот тест является встроенной оболочкой, а не отдельной утилитой, использование флага -c для специальных файловых дескрипторов, таких как стандартный ввод и вывод, может не возвращать тот же результат при вызове изнутри канала, как можно было бы ожидать при вызове &lt;code&gt;test&lt;/code&gt; утилиты в другой снаряд.</target>
        </trans-unit>
        <trans-unit id="9a3113248a139d6a914ae9cdb2ef995428b80e8e" translate="yes" xml:space="preserve">
          <source>Blocks and loops</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">Как подстановка команд, так и расширение переменных оболочки поддерживают доступ только к определенным элементам путем предоставления набора индексов в квадратных скобках. Часто требуется доступ к последовательности элементов. Для этого используйте для этого оператор диапазона &quot; &lt;code&gt;..&lt;/code&gt; &quot;. Диапазон ' &lt;code&gt;a..b&lt;/code&gt; ', где пределы диапазона 'a' и 'b' являются целыми числами, расширяется до последовательности индексов ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; ' или ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; &amp;raquo;в зависимости от того, какое из&amp;laquo; a &amp;raquo;или&amp;laquo; b &amp;raquo;выше. Пределы отрицательного диапазона рассчитываются от конца массива или подстановки команды. Обратите внимание, что недопустимые индексы для любого конца молча ограничиваются одним или размером массива в зависимости от ситуации.</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">Поддерживаются как целые числа,так и числа с плавающей точкой.</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">Оба &lt;code&gt;match&lt;/code&gt; и &lt;code&gt;replace&lt;/code&gt; опорную субкоманду регулярных выражений при использовании с &lt;code&gt;-r&lt;/code&gt; или &lt;code&gt;--regex&lt;/code&gt; вариантом. Это диалект PCRE2.</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">Расширение скобки</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">Кронштейн расширения</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">Команды сборки</target>
        </trans-unit>
        <trans-unit id="b2f835b51cbf37c812c8d492c4e61154843f12f9" translate="yes" xml:space="preserve">
          <source>Builtins and other commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f005fce61fdfc30668117115e325f0f651ccd7" translate="yes" xml:space="preserve">
          <source>Builtins for dealing with data, like &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; for strings and &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt; for numbers, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; for counting lines or arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6540e446642ea1f845cd9ba7c9976290616eef0" translate="yes" xml:space="preserve">
          <source>Builtins that manipulate the shell state - &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; changes directory, &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; sets variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298ae00ce8eb2f8d976a8abd3f5e489822080a54" translate="yes" xml:space="preserve">
          <source>But it also means that these commands can stop working at any moment once a matching file is encountered (because it has been created or the command is executed in a different working directory), and to deal with that bash needs workarounds like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">Но это не так:</target>
        </trans-unit>
        <trans-unit id="cde26bb231339705624e1a2606178650cfe6ce34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;$fish_function_path&lt;/code&gt; contains the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">По умолчанию интерактивные команды записываются в &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (обычно &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">По умолчанию,Рыба ищет завершающие файлы,используя первый доступный файл,который она находит:</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">По умолчанию Рыба ищет следующие функции,используя первый доступный файл,который она находит:</target>
        </trans-unit>
        <trans-unit id="061406f8d7e8bc7fa59a3f0158d04f4856dfa72b" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can be slow on a large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59136d65df69881397a99de96dfa18d804e65129" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can take be slow on large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="394744edd93f9e7227797e7c6f44f8314ec9d0c5" translate="yes" xml:space="preserve">
          <source>By default, the output is a floating-point number with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">По умолчанию вывод является плавающим с обрезанными конечными нулями. Чтобы получить фиксированное представление, можно использовать параметр &lt;code&gt;--scale&lt;/code&gt; , включая &lt;code&gt;--scale=0&lt;/code&gt; для целочисленного вывода.</target>
        </trans-unit>
        <trans-unit id="72523c77472ad7835198f8fcd9e09a5badc11af9" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">Определив функцию &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; , пользователь может выбрать настраиваемую подсказку при запросе ввода в ответ на команду &lt;code&gt;breakpoint&lt;/code&gt; . Функция &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; выполняется, когда должна отображаться подсказка, а вывод используется как подсказка.</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">Определив функцию &lt;code&gt;fish_prompt&lt;/code&gt; , пользователь может выбрать настраиваемую подсказку. Функция &lt;code&gt;fish_prompt&lt;/code&gt; выполняется, когда должно быть показано приглашение, а вывод используется как приглашение.</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">Завершая команду символом &lt;code&gt;&amp;amp;&lt;/code&gt; (амперсанд), пользователь говорит &lt;code&gt;fish&lt;/code&gt; поместить указанную команду в фоновый режим. Фоновый процесс будет запущен одновременно с &lt;code&gt;fish&lt;/code&gt; . &lt;code&gt;fish&lt;/code&gt; сохранит контроль над терминалом, поэтому программа не сможет читать с клавиатуры.</target>
        </trans-unit>
        <trans-unit id="3923f5578037b3542b2b19d15f49bde3629ec275" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">Вставив символ обратной косой черты ( &lt;code&gt;\&lt;/code&gt; ) перед нажатием клавиши &lt;b&gt;Enter&lt;/b&gt; , чтобы избежать новой строки.</target>
        </trans-unit>
        <trans-unit id="c0242c0009de5a2873925ea6318eae2fc79708ca" translate="yes" xml:space="preserve">
          <source>By now it has become apparent that fish puts much more of a focus on its builtins and external commands rather than its syntax. So here are some helpful builtins and their rough equivalent in bash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a4b7b090d106c959549d48fe03da459c91c544" translate="yes" xml:space="preserve">
          <source>By pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">При нажатии &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt; и &lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt; также выполняется поиск в истории, но вместо поиска полной командной строки каждая командная строка разбивается на отдельные элементы, как это было бы перед выполнением, и в истории ищется элемент, соответствующий что под курсором.</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">Нажимая &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt; , пользователь останавливает текущую программу переднего плана и возвращает управление &lt;code&gt;fish&lt;/code&gt; . Некоторые программы не поддерживают эту функцию или переназначают ее на другую клавишу. GNU Emacs использует &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt; для остановки работы.</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">Используя один из переключателей обработчика событий, можно заставить функцию запускаться автоматически при определенных событиях. Пользователь может генерировать новые события, используя встроенную &lt;a href=&quot;#emit&quot;&gt;функцию&lt;/a&gt; emit. Fish генерирует следующие именованные события:</target>
        </trans-unit>
        <trans-unit id="6a5c8721be6b4633186b4214510f8a5ef8c0f497" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702f8fce2752414a6a80cd6a6df6d1f2e4852509" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">Используя встроенные команды &lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt; , пользователь может отправить любое текущее задание на передний или задний план.</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="329b39a4c29ca43f574809cc765406388620adc4" translate="yes" xml:space="preserve">
          <source>Calling this as &lt;code&gt;ll /tmp/&lt;/code&gt; will end up running &lt;code&gt;ls -l /tmp/&lt;/code&gt;, which will list the contents of /tmp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">Картезианские продукты</target>
        </trans-unit>
        <trans-unit id="fcb3f81706967bbcb598dd0c3292965cf75b975f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">Причины &lt;code&gt;fish&lt;/code&gt; на выход , когда &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt; нажат.</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">Измените значение переменной &lt;code&gt;fish_greeting&lt;/code&gt; или создайте функцию &lt;code&gt;fish_greeting&lt;/code&gt; . Например, чтобы удалить приветствие, используйте:</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">Измените ракушку по умолчанию на рыбу:</target>
        </trans-unit>
        <trans-unit id="5cf7dee78ee2192a9db50762b383926cd57dfe78" translate="yes" xml:space="preserve">
          <source>Change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ccc8e5afbb6617c107acbf3edf4c8bba5e695e" translate="yes" xml:space="preserve">
          <source>Change your default shell with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">Занятия по персонажам,некоторые из наиболее важных:</target>
        </trans-unit>
        <trans-unit id="837815e7e725405b61d99f890160135ef054c4ec" translate="yes" xml:space="preserve">
          <source>Colors used with &lt;code&gt;showcolorhints&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">Комбинеры (И,или,нет)</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">Сочетание различных расширений</target>
        </trans-unit>
        <trans-unit id="c3a7f8983f08bac31de202a0e80b371926256ff1" translate="yes" xml:space="preserve">
          <source>Combining lists (Cartesian Product)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">Командные замены</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">Редактор командной строки</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">Командный режим</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">Режим команд также известен как обычный режим.</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">Ссылка на команду</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">Завершение табуляции для конкретных команд в &lt;code&gt;fish&lt;/code&gt; основано на опциях и аргументах. Опция - это параметр, который начинается с дефиса, например &amp;laquo; &lt;code&gt;-h&lt;/code&gt; &amp;raquo;, &amp;laquo; &lt;code&gt;-help&lt;/code&gt; &amp;raquo; или &amp;laquo; &lt;code&gt;--help&lt;/code&gt; &amp;raquo;. Аргументы - это параметры, которые не начинаются с дефиса. Fish распознает три стиля опций, те же стили, что и GNU-версия библиотеки getopt. Эти стили:</target>
        </trans-unit>
        <trans-unit id="305df9d243137d0ee7e5e7886662ca35cd3a1c64" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;-help&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU getopt library. These styles are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">Замена команды</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">Командные замены</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">Замены команд не расширяются в кавычках.Вместо этого вы можете временно закрыть кавычки,добавить подстановку команд и открыть их заново,все в одном аргументе:</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">Подстановки команд, найденные в &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; , не должны возвращать список аргументов, разделенных пробелами. Вместо этого они должны возвращать список аргументов, разделенных новой строкой, и каждый аргумент может дополнительно иметь символ табуляции, за которым следует описание аргумента. Любое описание, предоставленное таким образом, переопределяет описание, указанное с помощью &lt;code&gt;-d&lt;/code&gt; или &lt;code&gt;--description&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6f15bcd26685a9b5f35fff05d5697406b9d9926f" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; should return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Description given this way override a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">При подстановке команд выходные данные одной команды используются в качестве аргумента для другой. В отличие от других оболочек, &lt;code&gt;fish&lt;/code&gt; не использует обратные кавычки `для подстановки команд. Вместо этого используются круглые скобки:</target>
        </trans-unit>
        <trans-unit id="a3571f5f1d40b027e13d061d92b54680b29bb7f2" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6142617fc62ee1c8c0e5ce873248043d9ae29fc4" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, fish does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fad1978dd0d2383a4d0467b58d1445598b7f62" translate="yes" xml:space="preserve">
          <source>Commandline tools often get various options and flags and positional arguments, and $argv would contain all of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="6e27986b922e889f25fa48d9ab585b90ad5fe736" translate="yes" xml:space="preserve">
          <source>Commands (builtins, functions and regular programs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c716505f166951624f983b8be1c9941b96ea7b" translate="yes" xml:space="preserve">
          <source>Commands and arguments are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (by pressing the return key) or a semicolon &lt;code&gt;;&lt;/code&gt;. Multiple commands can be written on the same line by separating them with semicolons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">Команды и параметры разделяются пробелом &quot;&quot;. Каждая команда заканчивается либо новой строкой (т.е. нажатием клавиши возврата), либо точкой с запятой ' &lt;code&gt;;&lt;/code&gt; &amp;raquo;. В одной строке можно записать несколько команд, разделив их точкой с запятой.</target>
        </trans-unit>
        <trans-unit id="83546b9b7e63e4645609121c2d50d70ab2f8f27d" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">Команды могут быть прикованы точкой с запятой.</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="fb795ce7c94e011a1ecc0669bc2c232894415e28" translate="yes" xml:space="preserve">
          <source>Comments can also appear after a line like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7fc896ec27369aa3d8b46ed7bef7ce121078ca5" translate="yes" xml:space="preserve">
          <source>Comparison to other tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">Примечания по совместимости</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">Выполнение команд (сборки,функции и обычные программы).</target>
        </trans-unit>
        <trans-unit id="e251e522a2899f0695ad97b7e9306c9baaf077df" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;**&lt;/code&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">Завершение имен файлов даже в строках с подстановочными знаками, такими как ' &lt;code&gt;*&lt;/code&gt; ', ' &lt;code&gt;**&lt;/code&gt; ' и ' &lt;code&gt;?&lt;/code&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">Завершение имен переменных оболочки.</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">Завершение имен пользователей для расширения тильды.</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">Автозавершения, автоматически генерируемые из руководства операционной системы, обычно хранящиеся в &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e2bb22e8c63c3bc4092f861769d982ce94a1df7" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manuals, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Завершение можно определить в командной строке или в файле конфигурации, но они также могут быть загружены автоматически. Fish автоматически просматривает любые каталоги в переменной массива &lt;code&gt;$fish_complete_path&lt;/code&gt; , и любые определенные завершения автоматически загружаются при необходимости. Файл завершения должен иметь имя, состоящее из имени завершаемой команды и суффикса &amp;laquo; &lt;code&gt;.fish&lt;/code&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="e197b8e42b1affde93333b42e719ef94bc91d71d" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a855e8bb312b045ab9c60f2a7d91c8ec5c6d57c7" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix &lt;code&gt;.fish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283dc81713d44871439c5c3d6ee0f195f29f3639" translate="yes" xml:space="preserve">
          <source>Components are added in the order they are given, and they are prepended to the path unless &lt;code&gt;--append&lt;/code&gt; is given (if $fish_user_paths is used, that means they are last in $fish_user_paths, which is itself prepended to $PATH, so they still stay ahead of the system paths).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9decbb377f6c4dd4591226893998f380a233f4f" translate="yes" xml:space="preserve">
          <source>Components are normalized by &lt;a href=&quot;realpath#cmd-realpath&quot;&gt;realpath&lt;/a&gt;. This means that trailing slashes are ignored and relative paths are made absolute (but symlinks are not resolved). If a component already exists, it is not added again and stays in the same place unless the &lt;code&gt;--move&lt;/code&gt; switch is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">Условное выполнение кода и управление потоком</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">Условия (Если,Эльза,Выключатель)</target>
        </trans-unit>
        <trans-unit id="5506eb6161a07356d96e91770d25d5a0f22200ef" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="translated">Conditions</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">Настраиваемое приветствие</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">Конфигурационные файлы обрабатываются в следующем порядке:</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">Конфигурация, поставляемая с рыбой, которую не следует редактировать, находится в &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (обычно &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">&lt;code&gt;.fish&lt;/code&gt; конфигурации в файлах с расширением .fish в каталогах:</target>
        </trans-unit>
        <trans-unit id="d916ac2852cd35aba927b6e5183496dfbb68f253" translate="yes" xml:space="preserve">
          <source>Consider, that &lt;code&gt;bash&lt;/code&gt; is also a command. With &lt;code&gt;man bash&lt;/code&gt; you can see that there are two ways to do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="0cc02a08eefa55c45a56e32d67506c46e7a700b3" translate="yes" xml:space="preserve">
          <source>Control and shift don't work simultaneously</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff899dcd6f7ebd6a861299e03974633bfd5ad6eb" translate="yes" xml:space="preserve">
          <source>Control+A</source>
          <target state="translated">Control+A</target>
        </trans-unit>
        <trans-unit id="c9e55fac4bb2f73b8827737eba3f6fedb7f63ad3" translate="yes" xml:space="preserve">
          <source>Control+B</source>
          <target state="translated">Control+B</target>
        </trans-unit>
        <trans-unit id="e1e40212e505bb255ad247fb75a7c69252c1147c" translate="yes" xml:space="preserve">
          <source>Control+C</source>
          <target state="translated">Control+C</target>
        </trans-unit>
        <trans-unit id="7fad1011a56dea667e4e890b0f054b35b096ceac" translate="yes" xml:space="preserve">
          <source>Control+D</source>
          <target state="translated">Control+D</target>
        </trans-unit>
        <trans-unit id="8a337ce2c51c129c9e8bc692ea6dd78eba4574de" translate="yes" xml:space="preserve">
          <source>Control+E</source>
          <target state="translated">Control+E</target>
        </trans-unit>
        <trans-unit id="19d71b4677f714637e6947b67f44a1239e3ad114" translate="yes" xml:space="preserve">
          <source>Control+F</source>
          <target state="translated">Control+F</target>
        </trans-unit>
        <trans-unit id="de4ae039698d198c307859fcbedac2883a1d1f6c" translate="yes" xml:space="preserve">
          <source>Control+K</source>
          <target state="translated">Control+K</target>
        </trans-unit>
        <trans-unit id="b263435b368ba4e5650bd91db945e54b75f37e4b" translate="yes" xml:space="preserve">
          <source>Control+L</source>
          <target state="translated">Control+L</target>
        </trans-unit>
        <trans-unit id="d930468655a2e8de99ecf073632706dc9fd790c0" translate="yes" xml:space="preserve">
          <source>Control+N</source>
          <target state="translated">Control+N</target>
        </trans-unit>
        <trans-unit id="6f5e6052e453bf4cbc730651ad83bd4c9bf16d04" translate="yes" xml:space="preserve">
          <source>Control+P</source>
          <target state="translated">Control+P</target>
        </trans-unit>
        <trans-unit id="5d54970f5eafb4a1a71ec49ea17c31b605d918b7" translate="yes" xml:space="preserve">
          <source>Control+U</source>
          <target state="translated">Control+U</target>
        </trans-unit>
        <trans-unit id="f5ce6985615ea22bf239b5f5712adbd6c7392c11" translate="yes" xml:space="preserve">
          <source>Control+V</source>
          <target state="translated">Control+V</target>
        </trans-unit>
        <trans-unit id="1c73dbe8cbdd8b0d4324b844077a83d8b67ad535" translate="yes" xml:space="preserve">
          <source>Control+W</source>
          <target state="translated">Control+W</target>
        </trans-unit>
        <trans-unit id="c312ad573f898197b4f8b8123f1e8f824522fab2" translate="yes" xml:space="preserve">
          <source>Control+X</source>
          <target state="translated">Control+X</target>
        </trans-unit>
        <trans-unit id="232d7346f91b802a342b5f2452c2d1f067dcf48a" translate="yes" xml:space="preserve">
          <source>Control+Y</source>
          <target state="translated">Control+Y</target>
        </trans-unit>
        <trans-unit id="723f6bbc308bdf50335b19533e6f0eef28ea6810" translate="yes" xml:space="preserve">
          <source>Control+Z</source>
          <target state="translated">Control+Z</target>
        </trans-unit>
        <trans-unit id="6e141812a128e9ade7d8324a0d80b50782c0a03d" translate="yes" xml:space="preserve">
          <source>Control+t</source>
          <target state="translated">Control+t</target>
        </trans-unit>
        <trans-unit id="a15e8d4f58e7f1095da1dbbfdaef24ce49ca88bd" translate="yes" xml:space="preserve">
          <source>Conversion can fail, e.g. &quot;102.234&quot; can't losslessly convert to an integer, causing printf to print an error. If you are okay with losing information, silence errors with &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">Скопируйте и вставьте (Kill Ring)</target>
        </trans-unit>
        <trans-unit id="af4e866be52de67a1c27087ff82b1fd31d26bf20" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">Копирование и вставка извне также поддерживаются как через привязки &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V, так&lt;/b&gt; и через функцию вставки терминала, для которой fish включает &amp;laquo;Режим вставки в скобках&amp;raquo;. При вставке внутри одинарных кавычек вставленные одинарные кавычки и обратная косая черта автоматически экранируются, так что результат можно использовать как одиночный токен, просто закрыв кавычку после.</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">Копирование функции с использованием &lt;code&gt;-c&lt;/code&gt; копирует только тело функции и не прикрепляет никаких уведомлений о событиях из исходной функции.</target>
        </trans-unit>
        <trans-unit id="8af724f142e3bcf63776dbe6537c41e40e58d534" translate="yes" xml:space="preserve">
          <source>Curly braces can be used to write comma-separated lists. They will be expanded with each element becoming a new parameter, with the surrounding string attached. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb539e2cde83f162d3671d028d8f300a026106c8" translate="yes" xml:space="preserve">
          <source>Custom bindings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">Настройка имени файла истории</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="db41123e84c0902793147f63b13aabdfd4079b62" translate="yes" xml:space="preserve">
          <source>Debug messages output to stderr by default. Note that if &lt;code&gt;fish_trace&lt;/code&gt; is set, execution tracing also outputs to stderr by default. You can output to a file using the &lt;code&gt;--debug-output&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">Отладка рыбных сценариев</target>
        </trans-unit>
        <trans-unit id="315274f3206d01a86dd78cefa7038f1b4d10af82" translate="yes" xml:space="preserve">
          <source>Default Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">Определите единственную спецификацию опции для булевого флага справки:</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">Определение псевдонимов</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">Определение аббревиатуры с глобальной областью действия немного быстрее, чем с универсальной областью видимости (которая используется по умолчанию). Но в целом вы захотите использовать глобальную область видимости только при определении сокращений в сценарии запуска, например &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="866bd39fb03e1e2606544d3942b36910500aff65" translate="yes" xml:space="preserve">
          <source>Detect support for italics, dim, reverse and other modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">Обнаруженные ошибки включают в себя:</target>
        </trans-unit>
        <trans-unit id="482b5faaf6627c970511f89ada3a0b3e4024b41b" translate="yes" xml:space="preserve">
          <source>Different widths for multiple ambiguous width characters - there is no way for fish to know which width you assign to each character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74fb557e8c3a95044774ebcdfc7cc89899fe824" translate="yes" xml:space="preserve">
          <source>Directories for other software to put their own functions. These are in the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable, in a subdirectory called &lt;code&gt;fish/vendor_functions.d&lt;/code&gt;. The default is usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6988a4d06cb28f2b88589d324d9330152ae8f40" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec9d653d04f24c3ef71638a5da336dde6f29983" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75fce19d8009441f1839be94513635b011e4443" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2a9982635d2409c02f5b95d11ee21f5379209a" translate="yes" xml:space="preserve">
          <source>Directory history</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48664135580ccdc839fc4a742e0c82de087aaf2d" translate="yes" xml:space="preserve">
          <source>Directory stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9fcf2c0d627af5418ba7f9c21ee7f737ced69d" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">Не &lt;a href=&quot;index#initialization&quot;&gt;добавляйте&lt;/a&gt; к универсальным переменным в config.fish , потому что эти переменные будут становиться длиннее с каждым новым экземпляром оболочки. Вместо этого просто установите их один раз в командной строке.</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">Каждой команде &lt;code&gt;case&lt;/code&gt; дается один или несколько параметров. Будет оценена первая команда &lt;code&gt;case&lt;/code&gt; с параметром, который соответствует строке, указанной в команде switch. Параметры &lt;code&gt;case&lt;/code&gt; могут содержать подстановочные знаки. Их нужно экранировать или заключать в кавычки, чтобы избежать регулярного расширения подстановочных знаков с использованием имен файлов.</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">Каждый OPTION_SPEC может быть написан на языке предметной области, &lt;a href=&quot;#argparse-option-specs&quot;&gt;описанном ниже,&lt;/a&gt; или создан с помощью сопутствующей команды &lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt; . Все OPTION_SPEC должны появляться после любых флагов argparse и перед &lt;code&gt;--&lt;/code&gt; , отделяющим их от аргументов, которые нужно проанализировать.</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">Каждое сокращение хранится в собственной глобальной или универсальной переменной. Имя состоит из префикса &lt;code&gt;_fish_abbr_&lt;/code&gt; , за которым следует СЛОВО после преобразования в &lt;code&gt;string escape style=var&lt;/code&gt; . СЛОВО не может содержать пробел, но все остальные символы допустимы.</target>
        </trans-unit>
        <trans-unit id="d74989fad97472ddc89cce17da864871ef77470f" translate="yes" xml:space="preserve">
          <source>Each option specification (&lt;code&gt;OPTION_SPEC&lt;/code&gt;) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b889c20fc68e023be13868891975e0e722a60b35" translate="yes" xml:space="preserve">
          <source>Each option specification consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">Каждая спецификация опции представляет собой строку,состоящую из</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">Каждая опция, которая &lt;code&gt;_flag_X&lt;/code&gt; в списке ARG, приведет к имени переменной в форме _flag_X , где &lt;code&gt;X&lt;/code&gt; - короткая буква флага и длинное имя флага. OPTION_SPEC всегда требует короткого флага, даже если его нельзя использовать. Таким образом, всегда будет &lt;code&gt;_flag_X&lt;/code&gt; var, установленный с использованием короткой буквы флага, если виден соответствующий короткий или длинный флаг. Длинное имя флага var (например, &lt;code&gt;_flag_help&lt;/code&gt; ) будет определено, только если OPTION_SPEC включает длинное имя флага.</target>
        </trans-unit>
        <trans-unit id="e997907e65d29076dbe60a2d558dae9423186b1d" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in variables named &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name (if they are defined). For example a &lt;code&gt;--help&lt;/code&gt; option could cause argparse to define one variable called &lt;code&gt;_flag_h&lt;/code&gt; and another called &lt;code&gt;_flag_help&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4021549f9ebbee6b0f5cef8bdf2b7b2e3f048df2" translate="yes" xml:space="preserve">
          <source>Each stream has a number called the file descriptor (FD): 0 for stdin, 1 for stdout, and 2 for stderr.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">Отредактируйте файл &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; , создав его, если он не существует (обратите внимание на начальную точку).</target>
        </trans-unit>
        <trans-unit id="8e616be3dc7c9321e6c185eefc4e5da9e20b8fc2" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">команды режима Emacs</target>
        </trans-unit>
        <trans-unit id="e37e0760e90e51eeb2c376daa6dc4d1540039d7b" translate="yes" xml:space="preserve">
          <source>Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e2f09ac368b8dd74db605df791dbefe19bfe80" translate="yes" xml:space="preserve">
          <source>Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="ec051ec1637eae870268ca59dd86fdb39e8d550c" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9220e6e7b88faa6f56901c8353dec4b3544958" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">Переменные среды, такие как &lt;code&gt;EDITOR&lt;/code&gt; или &lt;code&gt;TZ&lt;/code&gt; , могут быть установлены универсально с помощью &lt;code&gt;set -Ux&lt;/code&gt; . Однако, если переменная среды уже установлена ​​до запуска Fish (например, сценариями входа или системными администраторами), она импортируется в fish как глобальная переменная. В &lt;a href=&quot;index#variables-scope&quot;&gt;переменных прицелах&lt;/a&gt; ищутся от &amp;laquo;наизнанку&amp;raquo;, что означает , что локальный переменные проверяются первым, а затем глобальными переменными, и , наконец , универсальными переменными.</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">Сотрите аббревиатуру &lt;code&gt;gco&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff52c78ae7ffcce10c7f75782c08e760a3858c53" translate="yes" xml:space="preserve">
          <source>Errors and Return Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">Побеговые последовательности</target>
        </trans-unit>
        <trans-unit id="5ac5583d5304bf1f408cc93a0ac0fc2d52da7d9c" translate="yes" xml:space="preserve">
          <source>Escaping Characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">скрывающиеся символы</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">Особенно мощным является рекурсивный спецсимвол **,который ищет каталоги рекурсивно:</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">Блоки событий не следует путать с блоками кода, которые создаются с помощью &lt;code&gt;begin&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; или &lt;code&gt;for&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">Организаторы мероприятий</target>
        </trans-unit>
        <trans-unit id="f4b281b637c899622427e67191026015a7018908" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">Любую программу на вашем компьютере можно использовать как команду в &lt;code&gt;fish&lt;/code&gt; . Если файл программы находится в одном из каталогов в &lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; &lt;/a&gt; , достаточно ввести имя программы, чтобы использовать его. В противном случае необходимо использовать полное имя файла, включая каталог (например, &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; или &lt;code&gt;../checkers&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ca694a88f2f320884bc7af703160d9d5522d343e" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in fish. If the program file is located in one of the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt; directories, you can just type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">Пример OPTION_SPECs</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">Пример: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; записывает стандартную ошибку (файловый дескриптор 2) целевой программы в &lt;code&gt;output.stderr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45afd0568e44bc9d77a4c3ab231be29073066140" translate="yes" xml:space="preserve">
          <source>Example: to make errors highlighted and red, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8770639e419bc5c21b3a05bddb1461adbeb1b131" translate="yes" xml:space="preserve">
          <source>Example: to set the background of each pager row, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">Примеры: название &lt;code&gt;fish&lt;/code&gt; умолчанию :</target>
        </trans-unit>
        <trans-unit id="c5e62bdf9f1ee420f1e3180e55a6897fe87ce1fa" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0211625a1607d6cd68d7625617e001d28ef4c84" translate="yes" xml:space="preserve">
          <source>Examples: The default fish title is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdd412ed55970d8c42f39658c01cd285bb57d07" translate="yes" xml:space="preserve">
          <source>Executing Bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">Статус выхода</target>
        </trans-unit>
        <trans-unit id="105ec316e78b2e21f4200658aebb690c6bfce1c8" translate="yes" xml:space="preserve">
          <source>Exit status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">Состояние выхода:0,если найдено хотя бы одно совпадение,или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">Состояние выхода:0,если была произведена хотя бы одна замена,или 1 в противном случае.</target>
        </trans-unit>
        <trans-unit id="f23237bf8e5fbb7b5a8d2f6f925a293f6614802a" translate="yes" xml:space="preserve">
          <source>Exit the shell when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">Расширения выполняются справа налево,вложенные расширения кронштейнов выполняются изнутри и снаружи.</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">Переменные экспорта</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">Экспорт (Переменные оболочки)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">Выражения могут быть сгруппированы с помощью круглых скобок.</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">Выражения можно инвертировать с помощью &lt;code&gt;!&lt;/code&gt; оператор:</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">Флаги особенностей-это то,как меняются рыбные стадии,которые могут нарушить сценарии.Нарушительные изменения вносятся в качестве опции,в нескольких релизах они становятся опцией,и в конце концов старое поведение удаляется.</target>
        </trans-unit>
        <trans-unit id="91eda957829d54470152a860d403a0c2ec63f6ad" translate="yes" xml:space="preserve">
          <source>Features will only be set on startup, so this variable will only take effect if it is universal or exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">Имена файлов,начинающиеся с точки,не учитываются при расстановке подстановочных знаков,если только в качестве первого символа имени файла не указана точка.</target>
        </trans-unit>
        <trans-unit id="63d32dc2be5e5b0e93902df6ada5b09685606563" translate="yes" xml:space="preserve">
          <source>Filenames, even on strings with wildcards such as &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0ad57826714745555d33e260f6c852d7a62f1f" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt;, which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">В выпусках Fish 1.x и 2.x для обработки &lt;code&gt;math&lt;/code&gt; выражений использовалась команда &lt;code&gt;bc&lt;/code&gt; . Начиная с fish 3.0.0, fish использует библиотеку tinyexpr и вычисляет выражение без участия каких-либо внешних команд.</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; не поддерживает получение или установку нескольких ограничений с помощью одной команды, за исключением сообщения всех значений с помощью переключателя -a.</target>
        </trans-unit>
        <trans-unit id="e6c6518383d134aea4779743a6d5eae0eb949f57" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; не поддерживает параметр &lt;code&gt;-p&lt;/code&gt; для получения размера трубы. Реализация bash состоит из проверки во время компиляции, которая эмпирически угадывает это число, записывая в канал и ожидая SIGPIPE. Fish не делает этого, потому что этот метод определения размера трубы ненадежен. В зависимости от версии bash, в bash могут быть установлены дополнительные ограничения, которых нет в fish.</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; поддерживает длинные параметры в стиле GNU для всех переключателей</target>
        </trans-unit>
        <trans-unit id="dd62e7bf2c72d7767d7af909be8af4efa9d56381" translate="yes" xml:space="preserve">
          <source>Fish also has man pages for its commands, and translates the help pages to man pages. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4f0935c1ca660f68579120131a23c1b6b545dd" translate="yes" xml:space="preserve">
          <source>Fish also provides additional information through the values of certain environment variables. Most of these variables are read-only and their value can't be changed with &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">Fish также поставляет функцию-оболочку для встроенного &lt;code&gt;cd&lt;/code&gt; , которая понимает &lt;code&gt;cd -&lt;/code&gt; как переход к предыдущему каталогу. См. Также &lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt; . Эта функция-оболочка хранит историю 25 последних посещенных каталогов в глобальных переменных &lt;code&gt;$dirprev&lt;/code&gt; и &lt;code&gt;$dirnext&lt;/code&gt; . Если вы сделаете эти универсальные переменные, ваша история &lt;code&gt;cd&lt;/code&gt; дисков будет доступна всем экземплярам fish.</target>
        </trans-unit>
        <trans-unit id="12b0ee984ffaac831e52ed6b850d4b525b13beed" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d708ac7f75ef4aed9f294c38306635239b6e0016" translate="yes" xml:space="preserve">
          <source>Fish also uses some variables internally, their name usually starting with &lt;code&gt;__fish&lt;/code&gt;. These are internal and should not typically be modified directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1810b6253f7da17afb43c730d2dea89558ba5d" translate="yes" xml:space="preserve">
          <source>Fish automatically creates lists from all environment variables whose name ends in PATH (like $PATH, $CDPATH or $MANPATH), by splitting them on colons. Other variables are not automatically split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2158f1f30f53a03dcaff373de0fa264fdeee9983" translate="yes" xml:space="preserve">
          <source>Fish automatically keeps a trail of the recent visited directories with &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; by storing this history in the &lt;code&gt;dirprev&lt;/code&gt; and &lt;code&gt;dirnext&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fish автоматически просматривает любые каталоги в переменной массива &lt;code&gt;$fish_function_path&lt;/code&gt; , и любые определенные функции автоматически загружаются при необходимости. Файл определения функции должен иметь имя, состоящее из имени функции и суффикса &amp;laquo; &lt;code&gt;.fish&lt;/code&gt; &amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="14acc6521b8498718555129c48f9cc0520e674d9" translate="yes" xml:space="preserve">
          <source>Fish can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a11880aac72a771f284563ca821b5ab539ac0d0" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$((i+1))&lt;/code&gt; arithmetic expansion, computation is handled by &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34eaa963aa4c594bb96d5142cd9391d2aff32e3f" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$PS2&lt;/code&gt; for continuation lines, instead it leaves the lines indented to show that the commandline isn't complete yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af408a104a7bf773c3973df28295c5c6c6112974" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;${foo%bar}&lt;/code&gt;, &lt;code&gt;${foo#bar}&lt;/code&gt; and &lt;code&gt;${foo/bar/baz}&lt;/code&gt;. Instead string manipulation is done by the &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3969d49f21ae83cda0789d6465ee8e0a7ad2fdf" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; &quot;heredocs&quot;. Instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec9ec1c8e1eb15698a215b050efbec2fa7deeaf" translate="yes" xml:space="preserve">
          <source>Fish does not have an &lt;code&gt;until&lt;/code&gt;. Use &lt;code&gt;while not&lt;/code&gt; or &lt;code&gt;while !&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d24bd87151694d0ca50963aa385dd8ca9d5aac" translate="yes" xml:space="preserve">
          <source>Fish does not perform word splitting. Once a variable has been set to a value, that value stays as it is, so double-quoting variable expansions isn't the necessity it is in bash. &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e371bf2587cc0aa603186467640ee09a27cfc578" translate="yes" xml:space="preserve">
          <source>Fish does not use the &lt;code&gt;$PS1&lt;/code&gt;, &lt;code&gt;$PS2&lt;/code&gt; and so on variables. Instead the prompt is the output of the &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; function, plus the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; function if vi-mode is enabled and the &lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; function for the right prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bfab662c91b6d4613873ccccc4860ce50cab34" translate="yes" xml:space="preserve">
          <source>Fish for bash users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac9f111aab6f00958aa0e5a149d28e81b9201eb" translate="yes" xml:space="preserve">
          <source>Fish has a POSIX-compatible &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[&lt;/code&gt; builtin. There is no &lt;code&gt;[[&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; does not accept &lt;code&gt;==&lt;/code&gt; as a synonym for &lt;code&gt;=&lt;/code&gt;. It can compare floating point numbers, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">По умолчанию Fish имеет ограничение в 10 МБ на объем данных, которые может выводить подстановка команды. Если предел превышен, вся команда, а не только подстановка, &lt;code&gt;fish_read_limit&lt;/code&gt; неудачу, и &lt;code&gt;$status&lt;/code&gt; устанавливается на 122. Вы можете изменить ограничение, установив переменную fish_read_limit в любое время, в том числе в среде, до того, как рыба начнет работать. Если вы установите его на ноль, то никаких ограничений не будет. Это защитный механизм, позволяющий оболочке не использовать слишком много памяти, если команда выводит чрезмерный объем данных. Обратите внимание, что этот предел также влияет на то, сколько данных будет обрабатывать команда &lt;code&gt;read&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="54736c0f7b81ae71b6647b4c6a7582c080363c9c" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fcf2748c6c7ec3c56f884af7b7a4a880c76a0b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the data it will read in a command sustitution. If that limit is reached the command (all of it, not just the command substitution - the outer command won't be executed at all) fails and &lt;code&gt;$status&lt;/code&gt; is set to 122. This is so command substitutions can't cause the system to go out of memory, because typically your operating system has a much lower limit, so reading more than that would be useless and harmful. This limit can be adjusted with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable (&lt;code&gt;0&lt;/code&gt; meaning no limit). This limit also affects the &lt;a href=&quot;cmds/read#cmd-read&quot;&gt;read&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92465782e7d433b454835166d572d7b25eed9c05" translate="yes" xml:space="preserve">
          <source>Fish has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480cd3ddb5d2b4cf914df3f7d9030b1d93daeba1" translate="yes" xml:space="preserve">
          <source>Fish has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3498e43826faa1f1235c392cbeb3a373eae6c988" translate="yes" xml:space="preserve">
          <source>Fish has some builtins that let you execute commands only if a specific criterion is met: &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;, and also the familiar &lt;a href=&quot;tutorial#tut-combiners&quot;&gt;&amp;amp;&amp;amp;/||&lt;/a&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48afbfed372bf23a743b82ed8ed7dc65e521110" translate="yes" xml:space="preserve">
          <source>Fish has two quoting styles: &lt;code&gt;&quot;&quot;&lt;/code&gt; and &lt;code&gt;''&lt;/code&gt;. Variables are expanded in double-quotes, nothing is expanded in single-quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">Вспомнить историю рыб очень просто,но эффективно:</target>
        </trans-unit>
        <trans-unit id="386c69dec203efd3304dc1ee54bc1e55a151b084" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;a href=&quot;cmds/printf#cmd-printf&quot;&gt;printf&lt;/a&gt; and &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;. As another example, you can run &lt;a href=&quot;cmds/status#cmd-status&quot;&gt;status print-stack-trace&lt;/a&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;a href=&quot;cmds/exit#cmd-exit&quot;&gt;exit&lt;/a&gt; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fish включает встроенное средство отладки. Отладчик позволяет остановить выполнение скрипта в произвольной точке. Когда это произойдет, вам будет представлена ​​интерактивная подсказка. В этом приглашении вы можете выполнить любую команду fish (как таковых команд отладки нет). Например, вы можете проверить или изменить значение любых переменных с помощью &lt;code&gt;printf&lt;/code&gt; и &lt;code&gt;set&lt;/code&gt; . В качестве другого примера вы можете запустить &lt;code&gt;status print-stack-trace&lt;/code&gt; , чтобы увидеть, как была достигнута эта точка останова. Чтобы возобновить нормальное выполнение сценария, просто введите &lt;code&gt;exit&lt;/code&gt; или [ctrl-D].</target>
        </trans-unit>
        <trans-unit id="c79ad61efadd871e671682ebb2b3cfdcaa4e03d8" translate="yes" xml:space="preserve">
          <source>Fish includes a number of commands in the shell directly. We call these &quot;builtins&quot;. These include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e21bd33e2135df6af48b4d34c944ac0b41c9111" translate="yes" xml:space="preserve">
          <source>Fish interprets the command line as it is typed and uses syntax highlighting to provide feedback. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dccb47038b031ed2f8ee7e5ab4c502f7e2ab8e" translate="yes" xml:space="preserve">
          <source>Fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. Fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Рыба пытается установить сообщение в строке заголовка вашего терминала.В то время как сам экран поддерживает эту функцию,ваш терминал ее не поддерживает.К сожалению,когда основной терминал не поддерживает установку заголовка,экран просто передает экранированные коды и текст в основной терминал,вместо того,чтобы их игнорировать.Невозможно обнаружить и решить эту проблему изнутри рыбы,так как рыба не может знать,что такое базовый тип терминала.Пока единственный способ это исправить-это снять заголовок с заголовка,как предлагалось выше.</target>
        </trans-unit>
        <trans-unit id="544b7dbf162f628eb35bbf3928f5320adff77942" translate="yes" xml:space="preserve">
          <source>Fish offers helper functions for adding things to the prompt, like &lt;a href=&quot;cmds/fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt; for adding a display for common version control systems (git, mercurial, svn) and &lt;a href=&quot;cmds/prompt_pwd#cmd-prompt-pwd&quot;&gt;prompt_pwd&lt;/a&gt; for showing a shortened $PWD (the user's home directory becomes &lt;code&gt;~&lt;/code&gt; and any path component is shortened).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e6a12d999aea5233bf9d1a7a5e0a296e1d2b7f" translate="yes" xml:space="preserve">
          <source>Fish only supports the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; glob (and the deprecated &lt;code&gt;?&lt;/code&gt; glob). If a glob doesn't match it fails the command (like with bash's &lt;code&gt;failglob&lt;/code&gt;) unless the command is &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; or the glob is used with an environment override (&lt;code&gt;VAR=* command&lt;/code&gt;), in which case it expands to nothing (like with bash's &lt;code&gt;nullglob&lt;/code&gt; option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf1d8c7a431f94fa6e399e223914820c86f6dd7" translate="yes" xml:space="preserve">
          <source>Fish or your terminal might not know about the character or handle it wrong - in this case fish or your terminal needs to be fixed, or you need to update to a fixed version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48abc65b03d1fc064fb747f8eca57f5ceb3027c8" translate="yes" xml:space="preserve">
          <source>Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a848c7dac788ef4acd0d27d4c6b9e1143029b352" translate="yes" xml:space="preserve">
          <source>Fish provides &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; to color text. It can use the 16 named colors and also RGB sequences (so you could also use &lt;code&gt;set_color 5555FF&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5a91794bf004e1dafb18322516a8e73fc2d28e" translate="yes" xml:space="preserve">
          <source>Fish provides some general purpose completions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fish резервирует диапазон &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;символов Unicode для частного использования&lt;/a&gt; от U + F600 до U + F73F для внутреннего использования. Любая попытка скармливать рыбу символы из этого диапазона приведет к их замене на &amp;laquo;замещающий символ&amp;raquo; Unicode U + FFFD. Это включает как интерактивный ввод, так и любой файл, прочитанный рыбой (но не программы, запущенные рыбой).</target>
        </trans-unit>
        <trans-unit id="3ccecc562dc02936776effee162f8bf7248708e3" translate="yes" xml:space="preserve">
          <source>Fish runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f7375aec4a1c6d25c6ebf2e2810dfadfa3c68e" translate="yes" xml:space="preserve">
          <source>Fish sets and erases variables with &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; instead of &lt;code&gt;VAR=VAL&lt;/code&gt; and &lt;code&gt;declare&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;. &lt;code&gt;set&lt;/code&gt; takes options to determine the scope and exportedness of a variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf8ef652bc4e1c42cf4f4f13b7882971ade7681" translate="yes" xml:space="preserve">
          <source>Fish ships multiple handlers for various operating systems and chooses from them when this function is loaded, or you can define your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fish поставляется с функцией &lt;code&gt;_validate_int&lt;/code&gt; , которая принимает флаг &lt;code&gt;--min&lt;/code&gt; и &lt;code&gt;--max&lt;/code&gt; . Предположим, ваша команда принимает флаг &lt;code&gt;-m&lt;/code&gt; или &lt;code&gt;--max&lt;/code&gt; , а минимальное допустимое значение равно нулю, а максимальное - 5. Вы должны определить параметр следующим образом: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; . По умолчанию, если вы просто вызываете &lt;code&gt;_validate_int&lt;/code&gt; без этих флагов, просто проверяете, является ли значение допустимым целым числом без ограничений на минимальное или максимальное допустимое значение.</target>
        </trans-unit>
        <trans-unit id="4e44f3813fcf10547ba75c4619e5c3c9fc240a0b" translate="yes" xml:space="preserve">
          <source>Fish spells command substitutions as &lt;code&gt;(command)&lt;/code&gt; instead of &lt;code&gt;$(command)&lt;/code&gt; (or &lt;code&gt;`command`&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c158ed4288c5b9a225e67660cd944a1293223aaa" translate="yes" xml:space="preserve">
          <source>Fish starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fish сохраняет статус выхода последнего процесса в последнем завершающемся задании в переменной &lt;code&gt;status&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f95b058d09a46d96591ae1aaa42e6d354388a3f" translate="yes" xml:space="preserve">
          <source>Fish supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5414d1f83db8858d6238609a5ff3c4b99998e031" translate="yes" xml:space="preserve">
          <source>Fish takes care to set &lt;code&gt;$PATH&lt;/code&gt; to a default, but typically it is just inherited from fish's parent process and is set to a value that makes sense for the system - see &lt;a href=&quot;#tut-exports&quot;&gt;Exports&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fish использует эвристику, чтобы решить, поддерживает ли терминал 256-цветовую палитру, в отличие от более ограниченной 16-цветовой палитры старых терминалов. Поддержка может быть &lt;code&gt;fish_term256&lt;/code&gt; установив для fish_term256 значение &lt;em&gt;1&lt;/em&gt; . Если &lt;code&gt;$TERM&lt;/code&gt; содержит &amp;laquo;256 цветов&amp;raquo; (например, &lt;em&gt;xterm-256color&lt;/em&gt; ), поддержка 256 цветов включена. Если &lt;code&gt;$TERM&lt;/code&gt; содержит &lt;em&gt;xterm&lt;/em&gt; , включена поддержка 256 цветов (кроме MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; и &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; используются для обнаружения Terminal.app из MacOS 10.6; поддержка здесь отключена, потому что известно, что он сообщает &lt;code&gt;xterm&lt;/code&gt; и поддерживает только 16 цветов. ,</target>
        </trans-unit>
        <trans-unit id="ad58efd756a349f3d5ec4b128631d278954160c8" translate="yes" xml:space="preserve">
          <source>Fish uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a7c4e0f6011c5a6723f630fd3d21a3dda63de9" translate="yes" xml:space="preserve">
          <source>Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">Версии Fish до 3.0 поддерживали &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; синтаксиса PATH [1] PATH [4] / bin / sbin , который работал как &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; . Этот синтаксис не получил широкого распространения, был неоднозначным и непоследовательным.</target>
        </trans-unit>
        <trans-unit id="cb678b9dd371f15bc7e0c8da8984dbcf75ca0c04" translate="yes" xml:space="preserve">
          <source>Fish's blocking constructs look a little different. They all start with a word, end in &lt;code&gt;end&lt;/code&gt; and don't have a second starting word:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aac7574777ac1ebe5c853e91269d48b4c8d770" translate="yes" xml:space="preserve">
          <source>Fish's prompt is also defined in a function, called &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;. It is run when the prompt is about to be displayed and its output forms the prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d57bd5497ca26a92593094bf3e21c5097192fa3" translate="yes" xml:space="preserve">
          <source>Fisher</source>
          <target state="translated">Fisher</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">Проверка стоимости флага</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">Список всех встроенных функций, функций и команд, поставляемых с fish, см. В &lt;a href=&quot;#toc-commands&quot;&gt;оглавлении&lt;/a&gt; . Документация также доступна с помощью переключателя &lt;code&gt;--help&lt;/code&gt; команды.</target>
        </trans-unit>
        <trans-unit id="c63866684d9fe05a145e078581ff82103fa3b1f9" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;commands#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a673697effebecadd2ef2ada0c2ba216bf82e8c" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5d720df058950fb2b501ff363c8a58b90811ca" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, use &lt;code&gt;builtin -n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a243468998c4b3855b0c9284af3f0bfedea9592e" translate="yes" xml:space="preserve">
          <source>For a script written in another language, just replace &lt;code&gt;/bin/bash&lt;/code&gt; with the interpreter for that language (for example: &lt;code&gt;/usr/bin/python&lt;/code&gt; for a python script, or &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; for a fish script).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9801e7760d7e9e8e7b2ff4da2f4e2bbcb3cd8d9c" translate="yes" xml:space="preserve">
          <source>For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9cfc7c030fc52d944ae76e3a90d11f9ae7a834" translate="yes" xml:space="preserve">
          <source>For an alternative, try &lt;a href=&quot;#abbreviations&quot;&gt;abbreviations&lt;/a&gt;. These are words that are expanded while you type, instead of being actual functions inside the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1ee97cd1a141aa861292be516e6d2fafba3b56" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">Для введения в определение завершений см. &lt;a href=&quot;index#completion-own&quot;&gt;Написание собственных завершений&lt;/a&gt; в руководстве по рыбалке.</target>
        </trans-unit>
        <trans-unit id="3c8170d85d1c1d6151789bb01cb1ad1b3028cc35" translate="yes" xml:space="preserve">
          <source>For an introduction to writing your own completions, see &lt;a href=&quot;../completions#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">Для обратной совместимости каждая подкоманда также может быть указана как длинная или короткая опция. Например, вместо &lt;code&gt;status is-login&lt;/code&gt; вы можете ввести &lt;code&gt;status --is-login&lt;/code&gt; . Формы флагов устарели и могут быть удалены в будущем выпуске (но не ранее Fish 3.0).</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">Для базовой совместимости с POSIX &lt;code&gt;command&lt;/code&gt; , то &lt;code&gt;-v&lt;/code&gt; флаг признан в качестве псевдонима для &lt;code&gt;-s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b73ea6d75946436551604661ce1b9a165a45dd07" translate="yes" xml:space="preserve">
          <source>For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40b055eb7098645342eba3f6a6c092eb71628f1" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3dc5a73a1b6e033a2111e39aaa9007c3480fd4" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;bg&lt;/code&gt;. A PID of the format &lt;code&gt;%1&lt;/code&gt; will be interpreted as the PID of job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3079979f2c8bb4a076f55ed59e3bc9962976c8b3" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;fg&lt;/code&gt;. A &lt;code&gt;PID&lt;/code&gt; of the format &lt;code&gt;%1&lt;/code&gt; will foreground job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d46702cca75cc827bf0e644a96033460077001e" translate="yes" xml:space="preserve">
          <source>For detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e13e8fad991f0105b6652520dfd2beeef44ad94" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt; and &lt;a href=&quot;cmds/end#cmd-end&quot;&gt;end&lt;/a&gt; to group parts of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">Для еще более сложных условий используйте &lt;code&gt;begin&lt;/code&gt; и &lt;code&gt;end&lt;/code&gt; , чтобы сгруппировать их части.</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">Например, &lt;code&gt;_flag_h&lt;/code&gt; и &lt;code&gt;_flag_help&lt;/code&gt; , если видны &lt;code&gt;-h&lt;/code&gt; или &lt;code&gt;--help&lt;/code&gt; . Переменная будет установлена ​​с локальной областью видимости (т.е., как если бы сценарий &lt;code&gt;set -l _flag_X&lt;/code&gt; ). Если флаг является логическим (т. Е. Не имеет связанного значения), то значениями являются видимые короткие и длинные флаги. Если опция не является логическим флагом, значения будут равны нулю или более, что соответствует значениям, собранным при обработке списка ARG. Если флаг не был замечен, флаг var не будет установлен.</target>
        </trans-unit>
        <trans-unit id="88a5cf27ff84d1f00030e64d1e499179b84cb53e" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fa66a3b27e0366609127209cba01f178b1e3f9" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;echo hello 2&amp;gt; output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d44921b4e5cc1e46472871323748ab262c51c" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">Например, часто используемую команду, такую ​​как &lt;code&gt;git checkout&lt;/code&gt; , можно &lt;code&gt;gco&lt;/code&gt; до gco . После ввода &lt;code&gt;gco&lt;/code&gt; и нажав &lt;b&gt;пробел&lt;/b&gt; или &lt;b&gt;Enter&lt;/b&gt; , полный текст &lt;code&gt;git checkout&lt;/code&gt; будет отображаться в командной строке.</target>
        </trans-unit>
        <trans-unit id="3748b656b4d49fc21ce880c084187a5150ce4ea9" translate="yes" xml:space="preserve">
          <source>For example, here's a simple function to list directories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">Например, если вы хотите иметь функцию &lt;code&gt;ll&lt;/code&gt; , вы должны добавить текстовый файл &lt;code&gt;ll.fish&lt;/code&gt; в &lt;code&gt;~/.config/fish/functions&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">Например, ниже приводится определение функции, которая вызывает команду &lt;code&gt;ls&lt;/code&gt; с аргументом ' &lt;code&gt;-l&lt;/code&gt; ' для вывода подробного списка содержимого текущего каталога:</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">Примеры написания собственных сложных завершений см. В каталоге &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; . (Точный путь зависит от выбранного вами префикса установки и может немного отличаться)</target>
        </trans-unit>
        <trans-unit id="29752c666ae89d90fd5950e78bb8db877998c7de" translate="yes" xml:space="preserve">
          <source>For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103fc968431a4b50b3ca123cef46a14d1fc51393" translate="yes" xml:space="preserve">
          <source>For instance, here's bash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f56ee2c62f9812ead36bdfeb6ba25bf621c0f9" translate="yes" xml:space="preserve">
          <source>For instance, the control key modifies a character by setting the top three bits to 0. This means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">Для циклов можно использовать итерацию по списку.Например,список файлов:</target>
        </trans-unit>
        <trans-unit id="fb55b2efd75666ff0e0f22ca6189e759ca99212d" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">Для получения более подробной информации см &lt;a href=&quot;index#debugging&quot;&gt;Debugging рыбы сценариев&lt;/a&gt; в &lt;code&gt;fish&lt;/code&gt; руководстве.</target>
        </trans-unit>
        <trans-unit id="fbf3695085a563c32cadec00042c527ca7e1f7bc" translate="yes" xml:space="preserve">
          <source>For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20842f282aec1c4b50e206a47ffcf066ea5ca7ed" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">Для получения дополнительной информации о том, как определять новые обработчики событий, см. Документацию по команде &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">Для получения дополнительной информации прочтите документацию по блочным конструкциям, например &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; и &lt;code&gt;while&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="964a42e4fd350b97fcf46d3e0c75ca51851aa82c" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for each of the functions above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcf4ba8c872fe3f9f1941442b568f4cbb24effc" translate="yes" xml:space="preserve">
          <source>For more, see &lt;a href=&quot;funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5f6b77a3db0cc9e9b6b6808dc5c105059f2d18" translate="yes" xml:space="preserve">
          <source>For more, see the documentation for the builtins or the &lt;a href=&quot;tutorial#tut-conditionals&quot;&gt;Conditionals&lt;/a&gt; section of the tutorial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27424edc0e90c3adb0df5bb5c53e73754fc6371d" translate="yes" xml:space="preserve">
          <source>For most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is like what bash does with &lt;code&gt;shopt -s failglob&lt;/code&gt;. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs will instead expand to zero arguments (so the command won't see them at all), like with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106e9122c8b5a8bbb7b662818bf4ea1ef6ed2679" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) and hexadecimal (&lt;code&gt;0xFF&lt;/code&gt;) are also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">Для чисел &lt;code&gt;.&lt;/code&gt; всегда является символом системы счисления независимо от языкового стандарта - &lt;code&gt;2.5&lt;/code&gt; , а не &lt;code&gt;2,5&lt;/code&gt; . Также доступна научная нотация ( &lt;code&gt;10e5&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="58daf2766341890bda462e187ee4716941297918" translate="yes" xml:space="preserve">
          <source>For these reasons, fish does not do this, and instead expects asterisks to be quoted or escaped if they aren't supposed to be expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e25112d09d08d00c25b607d90cd81a9a425781e" translate="yes" xml:space="preserve">
          <source>For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd7f4b35527e8bd36dce665102b57e97e70e363" translate="yes" xml:space="preserve">
          <source>Format Specifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">Часто задаваемые вопросы</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">Из интерактивной оболочки команды,расположенные ниже,выходят с возвращаемым значением нуля:</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">С этого момента мы будем делать вид, что ваша подсказка - это просто &quot; &lt;code&gt;&amp;gt;&lt;/code&gt; &quot; для экономии места.</target>
        </trans-unit>
        <trans-unit id="30d17302061ced704b6b34a3749f31c19ef26d8f" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a &lt;code&gt;&amp;gt;&lt;/code&gt; to save space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">Функции-это программы,написанные в синтаксисе рыб.Они группируют одну или несколько команд и их аргументы,используя одно имя.Она также может быть использована для запуска конкретной команды с дополнительными аргументами.</target>
        </trans-unit>
        <trans-unit id="d38037291d36ba014bf585647c762ae13fe7c883" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together various commands and their arguments using a single name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">Функции, начинающиеся со строки &lt;code&gt;__fish_print_&lt;/code&gt; , печатают список строк, разделенных новой строкой . Например, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; выводит список всех известных файловых систем. Функции, начинающиеся с &lt;code&gt;__fish_complete_&lt;/code&gt; , распечатывают список завершений с описанием, разделенный новой строкой . Описание отделяется от завершения символом табуляции.</target>
        </trans-unit>
        <trans-unit id="db0f72339f2340e5e8b351628b140fc4b4a5095c" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">Функции могут быть определены в командной строке или в конфигурационном файле,но они также могут быть автоматически загружены.Такой способ определения функций имеет ряд преимуществ.Функция с автозагрузкой становится доступной автоматически для всех запущенных оболочек.Если определение функции изменено,все запущенные оболочки автоматически перезагрузят измененную версию.Улучшается время запуска и использование памяти и т.д.</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">Дальнейшая помощь и развитие</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">Будущие флаги</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">Длинные параметры в стиле GNU, например &lt;code&gt;--colors&lt;/code&gt; . Параметры long в стиле GNU могут содержать более одного символа, им предшествуют два дефиса, и их нельзя группировать вместе. Аргументы опции могут быть указаны в следующем параметре (' &lt;code&gt;--quoting-style shell&lt;/code&gt; ') или путем добавления опции с ' &lt;code&gt;=&lt;/code&gt; ' и значением (' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '). Длинные параметры в стиле GNU могут быть сокращены до тех пор, пока сокращение уникально (' &lt;code&gt;--h&lt;/code&gt; ') эквивалентно ' &lt;code&gt;--help&lt;/code&gt; ', если справка - единственный длинный вариант, начинающийся с 'h').</target>
        </trans-unit>
        <trans-unit id="6756fc7d063fb985ac7207a33ec481f9efb07765" translate="yes" xml:space="preserve">
          <source>GNU style long options, like &lt;code&gt;--colors&lt;/code&gt;. GNU style long options can be more than one character long, are preceded by two hyphens, and can't be grouped together. Option arguments may be specified in the following parameter (&lt;code&gt;--quoting-style shell&lt;/code&gt;) or after a &lt;code&gt;=&lt;/code&gt; (&lt;code&gt;--quoting-style=shell&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">Получите длину списка с помощью &lt;code&gt;count&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">Получить помощь</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="8eaa4a571cfa23b1046936adad07606e523f576d" translate="yes" xml:space="preserve">
          <source>Global variables are accessible to functions whether they are exported or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb6bdf312d84d0e5db0e8ce8296e247a865a4cf" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, and will never be erased unless explicitly requested by using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e54a9b9a49fb183045e69571e35c245eada9b8" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f01947c75f2d491048e400dc98a7697d09c297" translate="yes" xml:space="preserve">
          <source>Globbing doesn't happen on expanded variables, so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="8b4ff52ac09d0794b0b2790069c175e0e201849a" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">Справку по конкретным встроенным функциям также можно получить с помощью параметра &lt;code&gt;-h&lt;/code&gt; . Например, чтобы получить справку по встроенной функции &lt;code&gt;fg&lt;/code&gt; , введите &lt;code&gt;fg -h&lt;/code&gt; или &lt;code&gt;help fg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">Вот список некоторых полезных команд:</target>
        </trans-unit>
        <trans-unit id="bed5ac3a7c90f81a97fb1af26263e4e9bc837a2c" translate="yes" xml:space="preserve">
          <source>Here we define some of the terms used on this page and throughout the rest of the fish documentation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a0fbf9a4b62e6e15f7e7d04099ec292404a8c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4068759fb02ece3b9b7f59cd6a0574aa4fe6fb1" translate="yes" xml:space="preserve">
          <source>Heredocs</source>
          <target state="translated">Heredocs</target>
        </trans-unit>
        <trans-unit id="3475b4cb946f794b7047a56966e51dd30d3be916" translate="yes" xml:space="preserve">
          <source>Hidden files (where the name begins with a dot) are not considered when wildcarding unless the wildcard string has a dot in that place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bfaa88d4d6e9d2a3eb77e15fdf1e42b45ec633c" translate="yes" xml:space="preserve">
          <source>History searches are case-insensitive unless the search string contains an uppercase character, and they can be aborted by pressing the escape key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">Поиск по истории можно прервать,нажав на клавишу аварийного отключения.</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">Перейдите на вкладку еще раз,чтобы просмотреть возможности.</target>
        </trans-unit>
        <trans-unit id="8562520c74923aa47973021bf5a615a9d18fdbc2" translate="yes" xml:space="preserve">
          <source>Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">Расширение домашней директории</target>
        </trans-unit>
        <trans-unit id="c5e4aaa97cc3ad7f579464354a2507b9c63dac85" translate="yes" xml:space="preserve">
          <source>How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">Как я могу использовать `-` в качестве ярлыка для `cd -`?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">Как изменить приветственное сообщение?</target>
        </trans-unit>
        <trans-unit id="54e6d1ecb8003f23585cb7559d5800b568cc815b" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is defined?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d87fc5a8041267fdcd98e9deafc888b91c5523" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is not empty?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">Как настроить цвета подсветки синтаксиса?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">Как получить статус выхода команды?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">Как мне сделать рыбу своей стандартной оболочкой?</target>
        </trans-unit>
        <trans-unit id="402503e9f12a7c687d2a8e25d61d5d4c873e5c42" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">Как запустить команду при каждом входе в систему? Что такое рыба,эквивалентная .bashrc?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">Как мне запустить команду из истории?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">Как мне управлять подкомандованием? Задний ход не работает!</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">Как установить переменную окружения только для одной команды?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">Как мне настроить подсказку?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">Как установить или очистить переменную окружения?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">Как обновить страницы man?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">Однако иногда, особенно с помощью &lt;code&gt;pkg-config&lt;/code&gt; и связанных с ним инструментов, требуется разделение на пробелы.</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">Однако использование переменных в качестве индексов для подстановки команд в настоящее время не поддерживается,поэтому</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
