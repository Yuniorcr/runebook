<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="f496cfd31d76f7f40049ae8703adf9d61bc43e96" translate="yes" xml:space="preserve">
          <source>std::rewind</source>
          <target state="translated">std::rewind</target>
        </trans-unit>
        <trans-unit id="a29572cd2479e33b728e436a492ce1d8a1ead3b0" translate="yes" xml:space="preserve">
          <source>std::riemann_zeta, std::riemann_zetaf, std::riemann_zetal</source>
          <target state="translated">std::riemann_zeta,std::riemann_zetal</target>
        </trans-unit>
        <trans-unit id="2a76268dfb984a1715a018131f96bcc462406a55" translate="yes" xml:space="preserve">
          <source>std::riemann_zetal</source>
          <target state="translated">std::riemann_zetal</target>
        </trans-unit>
        <trans-unit id="f37d7e3445151c678fe009e3170ba59cc5677ed1" translate="yes" xml:space="preserve">
          <source>std::right</source>
          <target state="translated">std::right</target>
        </trans-unit>
        <trans-unit id="65a9a7ee623d6a9d3b5b8d070dab0b03492ab7f0" translate="yes" xml:space="preserve">
          <source>std::rint, std::rintf, std::rintl, std::lrint, std::lrintf, std::lrintl, std::llrint, std::llrintf</source>
          <target state="translated">std::rint,std::rintf,std::rintl,std::lrint,std::lrintf,std::lrintl,std::llrint,std::llrintf</target>
        </trans-unit>
        <trans-unit id="6883dfbc4835e15eb60d4aeffc0fe99dc98f54c1" translate="yes" xml:space="preserve">
          <source>std::rintl</source>
          <target state="translated">std::rintl</target>
        </trans-unit>
        <trans-unit id="63b0177516af60a8b573a95a333e9d3e4864a0c9" translate="yes" xml:space="preserve">
          <source>std::rotate</source>
          <target state="translated">std::rotate</target>
        </trans-unit>
        <trans-unit id="b1fb02cc80afdce77c85c998870d8b1884eed8de" translate="yes" xml:space="preserve">
          <source>std::rotate_copy</source>
          <target state="translated">std::rotate_copy</target>
        </trans-unit>
        <trans-unit id="f56d904e22a0ff3ab5ac5b82d6a9404a2af61ab3" translate="yes" xml:space="preserve">
          <source>std::round, std::roundf, std::roundl, std::lround, std::lroundf, std::lroundl, std::llround, std::llroundf</source>
          <target state="translated">std::round,std::roundf,std::roundl,std::lroundf,std::lroundf,std::lroundl,std:llround,std:'llroundf</target>
        </trans-unit>
        <trans-unit id="c2fbb22aadc65fc1cd1a641657c7f6d839f64f16" translate="yes" xml:space="preserve">
          <source>std::roundl</source>
          <target state="translated">std::roundl</target>
        </trans-unit>
        <trans-unit id="e47e6702dfa636191c426f9ba14a342beb6e75a3" translate="yes" xml:space="preserve">
          <source>std::runtime_error</source>
          <target state="translated">std::runtime_error</target>
        </trans-unit>
        <trans-unit id="7d286defe3424c7a9a4c50b1c9dcf4556c108f1b" translate="yes" xml:space="preserve">
          <source>std::runtime_error::runtime_error</source>
          <target state="translated">std::runtime_error::runtime_error</target>
        </trans-unit>
        <trans-unit id="e6115f2c320437e197c945b51b523e18d7f9b64a" translate="yes" xml:space="preserve">
          <source>std::sample</source>
          <target state="translated">std::sample</target>
        </trans-unit>
        <trans-unit id="016f5a8ba38fbe42d71de3c99a0d5232620075b3" translate="yes" xml:space="preserve">
          <source>std::scalbn, std::scalbnf, std::scalbnl, std::scalbln, std::scalblnf, std::scalblnl</source>
          <target state="translated">std::скальбн,std::скальбнф,std::скальбн,std::скальбн,std::скальбн,std::скальблн</target>
        </trans-unit>
        <trans-unit id="1e5eab725e4994f573746ad8339252d858f0bfbf" translate="yes" xml:space="preserve">
          <source>std::scalbnl</source>
          <target state="translated">std::scalbnl</target>
        </trans-unit>
        <trans-unit id="1034dc47f9a4cc1ed0b8f66f76d5d0464dce6940" translate="yes" xml:space="preserve">
          <source>std::scanf, std::fscanf, std::sscanf</source>
          <target state="translated">std::scanf,std::fscanf,std::sscanf</target>
        </trans-unit>
        <trans-unit id="b9feaf231eecfb6183bd0ed0a2e9b43ace36421b" translate="yes" xml:space="preserve">
          <source>std::scientific</source>
          <target state="translated">std::scientific</target>
        </trans-unit>
        <trans-unit id="435107f24bb16c276007a5c9f6a597845f3db348" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor</source>
          <target state="translated">std::scoped_allocator_adaptor</target>
        </trans-unit>
        <trans-unit id="8edc724cdb5d019275cf09ee90a1afc2148f33ce" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::allocate</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::allocate</target>
        </trans-unit>
        <trans-unit id="f24d34a69493562235196a01681b53a3e5071025" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::construct</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::construct</target>
        </trans-unit>
        <trans-unit id="12fc9a08fbf80d38195490a1ec1c429baffccb07" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::deallocate</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::deallocate</target>
        </trans-unit>
        <trans-unit id="fa63f3359360fd548adfbe9899e76d0a87f5dc96" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::destroy</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::destroy</target>
        </trans-unit>
        <trans-unit id="af4e8b60208266d89091aadd18bba84601ca8bb4" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::inner_allocator</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::inner_allocator</target>
        </trans-unit>
        <trans-unit id="6c1c8d5ca067841094eb98fe1ce462a760ed9588" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::max_size</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::max_size</target>
        </trans-unit>
        <trans-unit id="dc78eed7391471835c78fecd4f5433e4f900463e" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::operator=</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="299fbc40a803cdc86cc47eac3f3fbf766ec6f7a0" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::outer_allocator</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::outer_allocator</target>
        </trans-unit>
        <trans-unit id="7527ca11be4cc9e542c664f93a8d6ac77820deb0" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::scoped_allocator_adaptor</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::scoped_allocator_adaptor</target>
        </trans-unit>
        <trans-unit id="ddb8d13b53308489041bf0b2b38ce726ca173bcb" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::select_on_container_copy_construction</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::select_on_container_copy_construction</target>
        </trans-unit>
        <trans-unit id="e61d0d4586e2a69787b368f61a320a7700aaed24" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::~scoped_allocator_adaptor</source>
          <target state="translated">std::scoped_allocator_adaptor&amp;lt;OuterAlloc,InnerAlloc...&amp;gt;::~scoped_allocator_adaptor</target>
        </trans-unit>
        <trans-unit id="10b9370e5f4852f711771b385e13d16b850346f1" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::allocate</source>
          <target state="translated">std::scoped_allocator_adaptor::allocate</target>
        </trans-unit>
        <trans-unit id="6100ceda028a2c3a9f9f8875ddf50219ac109eaa" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::construct</source>
          <target state="translated">std::scoped_allocator_adaptor::construct</target>
        </trans-unit>
        <trans-unit id="9ba6b98210f6c7c53aea7c423607b3434084496d" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::deallocate</source>
          <target state="translated">std::scoped_allocator_adaptor::deallocate</target>
        </trans-unit>
        <trans-unit id="49d0c90f00835ca53ce465fda790f837d81aa32b" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::destroy</source>
          <target state="translated">std::scoped_allocator_adaptor::destroy</target>
        </trans-unit>
        <trans-unit id="f3deb28a34c912bf063c01e61c471c062131b866" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::inner_allocator</source>
          <target state="translated">std::scoped_allocator_adaptor::inner_allocator</target>
        </trans-unit>
        <trans-unit id="72778519f712762dbfe6309d103dd0de369f9f06" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::max_size</source>
          <target state="translated">std::scoped_allocator_adaptor::max_size</target>
        </trans-unit>
        <trans-unit id="55a8696abaa87557fb5e9c466f0cd8380e7462da" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::operator=</source>
          <target state="translated">std::scoped_allocator_adaptor::operator=</target>
        </trans-unit>
        <trans-unit id="76713caea9544e79245c77b173ad325449f033a7" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::outer_allocator</source>
          <target state="translated">std::scoped_allocator_adaptor::outer_allocator</target>
        </trans-unit>
        <trans-unit id="ee82a2568daf8a55079a983333c2161e4252d3f0" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::scoped_allocator_adaptor</source>
          <target state="translated">std::scoped_allocator_adaptor::scoped_allocator_adaptor</target>
        </trans-unit>
        <trans-unit id="45e64a4418081111f0fc791f2c85a010e2daf8b6" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::select_on_container_copy_construction</source>
          <target state="translated">std::scoped_allocator_adaptor::select_on_container_copy_construction</target>
        </trans-unit>
        <trans-unit id="ded011c831dca7655a2406999392c83da166d2d9" translate="yes" xml:space="preserve">
          <source>std::scoped_allocator_adaptor::~scoped_allocator_adaptor</source>
          <target state="translated">std::scoped_allocator_adaptor::~scoped_allocator_adaptor</target>
        </trans-unit>
        <trans-unit id="2e2b40b3b43b42b01e867df7def16321e5037945" translate="yes" xml:space="preserve">
          <source>std::scoped_lock</source>
          <target state="translated">std::scoped_lock</target>
        </trans-unit>
        <trans-unit id="3e04922d9c6c6f71c62fa07fc9c6c8174e556dc8" translate="yes" xml:space="preserve">
          <source>std::scoped_lock&amp;lt;MutexTypes...&amp;gt;::scoped_lock</source>
          <target state="translated">std::scoped_lock&amp;lt;MutexTypes...&amp;gt;::scoped_lock</target>
        </trans-unit>
        <trans-unit id="8931e9077906bcb23c988443dadea9b3ac61a095" translate="yes" xml:space="preserve">
          <source>std::scoped_lock&amp;lt;MutexTypes...&amp;gt;::~scoped_lock</source>
          <target state="translated">std::scoped_lock&amp;lt;MutexTypes...&amp;gt;::~scoped_lock</target>
        </trans-unit>
        <trans-unit id="dcd35fa98b4a0f0fceedfccd4eec0e612b9951b7" translate="yes" xml:space="preserve">
          <source>std::scoped_lock::scoped_lock</source>
          <target state="translated">std::scoped_lock::scoped_lock</target>
        </trans-unit>
        <trans-unit id="231c0cdca8fd04a63191cc6f641e004dacb903c6" translate="yes" xml:space="preserve">
          <source>std::scoped_lock::~scoped_lock</source>
          <target state="translated">std::scoped_lock::~scoped_lock</target>
        </trans-unit>
        <trans-unit id="28e7bb95a58b9b1f23da0db803a849960f3ca595" translate="yes" xml:space="preserve">
          <source>std::search</source>
          <target state="translated">std::search</target>
        </trans-unit>
        <trans-unit id="a1aa5ebc2fa50b1d852a56bda1a63cd14b44ef9c" translate="yes" xml:space="preserve">
          <source>std::search_n</source>
          <target state="translated">std::search_n</target>
        </trans-unit>
        <trans-unit id="c036ab0aca7300a5337cbf37226440159ad2d4be" translate="yes" xml:space="preserve">
          <source>std::seed_seq</source>
          <target state="translated">std::seed_seq</target>
        </trans-unit>
        <trans-unit id="4ee2fedcbd7fb7982e2a9eee7f1c9e76631760a8" translate="yes" xml:space="preserve">
          <source>std::seed_seq::generate</source>
          <target state="translated">std::seed_seq::generate</target>
        </trans-unit>
        <trans-unit id="62046e7c28c565da5a39fb16c542d4c80624845c" translate="yes" xml:space="preserve">
          <source>std::seed_seq::param</source>
          <target state="translated">std::seed_seq::param</target>
        </trans-unit>
        <trans-unit id="6ea26285229b142cc74e1ff2c27ab80e68f1cf0b" translate="yes" xml:space="preserve">
          <source>std::seed_seq::seed_seq</source>
          <target state="translated">std::seed_seq::seed_seq</target>
        </trans-unit>
        <trans-unit id="3c78bbee12fa183494816ecbe3cd05b8a01af5ca" translate="yes" xml:space="preserve">
          <source>std::seed_seq::size</source>
          <target state="translated">std::seed_seq::size</target>
        </trans-unit>
        <trans-unit id="68cc81526294d13d1b61932bef49f82888de6892" translate="yes" xml:space="preserve">
          <source>std::set</source>
          <target state="translated">std::set</target>
        </trans-unit>
        <trans-unit id="89a99947cbfff44e18f320d107000e00456ac23e" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::begin, std::set&amp;lt;Key,Compare,Allocator&amp;gt;::cbegin</source>
          <target state="translated">std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: begin, std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="54899e6ddbb4c9e558be4cd2add11d518ecc5ba7" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::clear</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::clear</target>
        </trans-unit>
        <trans-unit id="2caa33ceb10651123cce94d41594de0267008706" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::contains</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::contains</target>
        </trans-unit>
        <trans-unit id="c4f6dca5c59f34d9015b76338818b39229cbee29" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::count</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::count</target>
        </trans-unit>
        <trans-unit id="0ed568d1f642a8d1803e7b62e8c55b484171b7fc" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::emplace</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::emplace</target>
        </trans-unit>
        <trans-unit id="09161fe2ea83773b97bea775e756719a460e50f4" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::emplace_hint</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::emplace_hint</target>
        </trans-unit>
        <trans-unit id="ea5df04faaf271b1d8fc99c0e67c4ab445d17739" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::empty</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="eabddcba6438d5e5fa75963d7587d2ee36695317" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::end, std::set&amp;lt;Key,Compare,Allocator&amp;gt;::cend</source>
          <target state="translated">std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: end, std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: cend</target>
        </trans-unit>
        <trans-unit id="bc4db262c2b32feae9ed790a14fd172f1e1c9d29" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::equal_range</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::equal_range</target>
        </trans-unit>
        <trans-unit id="62199a833d4a7fe281afae39ae5314521b7501a6" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::erase</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::erase</target>
        </trans-unit>
        <trans-unit id="7875804c018fc64a7b7ad2bd42daf1d5691eccfc" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::extract</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::extract</target>
        </trans-unit>
        <trans-unit id="5e1ccc294ce476fa75471af6436a1f94f5d374e4" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::find</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::find</target>
        </trans-unit>
        <trans-unit id="226785713386b4ca8d3f339d3a2547b6b4fe497b" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::get_allocator</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::get_allocator</target>
        </trans-unit>
        <trans-unit id="fd87befa2b943f9add9ddb59ce57eb9ae29291bd" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::insert</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::insert</target>
        </trans-unit>
        <trans-unit id="aebce2a7ec5bce7bcac8ae98c3d621f0eb5b61ae" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::key_comp</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::key_comp</target>
        </trans-unit>
        <trans-unit id="eec6c80c143b004dd301d895e224e0c87d42ef73" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::lower_bound</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::lower_bound</target>
        </trans-unit>
        <trans-unit id="9c63a33934dde83ca7732f60ee842e697dbd0253" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::max_size</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::max_size</target>
        </trans-unit>
        <trans-unit id="497d87bd9a0e004b326bd3d9398590f187f6beb9" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::merge</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::merge</target>
        </trans-unit>
        <trans-unit id="f194118e545bb8ae2e829f6d2bb4cba0d9f9e17b" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::operator=</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="5861186f4c6d3ee3dd9d0dfed2c9b739ce1dea4d" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::rbegin, std::set&amp;lt;Key,Compare,Allocator&amp;gt;::crbegin</source>
          <target state="translated">std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: rbegin, std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: crbegin</target>
        </trans-unit>
        <trans-unit id="2295f3c8a36f5cb9704663eb57613dd27a7ac3f2" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::rend, std::set&amp;lt;Key,Compare,Allocator&amp;gt;::crend</source>
          <target state="translated">std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: rend, std :: set &amp;lt;Key, Compare, Allocator&amp;gt; :: crend</target>
        </trans-unit>
        <trans-unit id="2a7a535771841b6f30e78a55d4d232da15102d57" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::set</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::set</target>
        </trans-unit>
        <trans-unit id="977656e4bf0f53670235935666e2cb82637cd827" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::size</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="333de11c28145587e0369b3462f5d8e22a3bf794" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::swap</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="e2a972d8b5ad1c262afcdfe6175bea94643f4982" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::upper_bound</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::upper_bound</target>
        </trans-unit>
        <trans-unit id="64fbb3eb2ae0a79f2c2bdfd8ecf932154a5a17db" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::value_comp</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::value_comp</target>
        </trans-unit>
        <trans-unit id="090a7920ce723d6a47e046d78c55acc8857760ee" translate="yes" xml:space="preserve">
          <source>std::set&amp;lt;Key,Compare,Allocator&amp;gt;::~set</source>
          <target state="translated">std::set&amp;lt;Key,Compare,Allocator&amp;gt;::~set</target>
        </trans-unit>
        <trans-unit id="3c3c7af0d65490cf694548b8f43eed78824704ec" translate="yes" xml:space="preserve">
          <source>std::set::cbegin</source>
          <target state="translated">std::set::cbegin</target>
        </trans-unit>
        <trans-unit id="d13b8ce6b5a91517c6a889034ac5bb3d0897bf22" translate="yes" xml:space="preserve">
          <source>std::set::clear</source>
          <target state="translated">std::set::clear</target>
        </trans-unit>
        <trans-unit id="12506bf14c788dad572d548af1c5039d75d4612f" translate="yes" xml:space="preserve">
          <source>std::set::contains</source>
          <target state="translated">std::set::contains</target>
        </trans-unit>
        <trans-unit id="e102332e8aa8364784aabc60724bda4909cc9704" translate="yes" xml:space="preserve">
          <source>std::set::count</source>
          <target state="translated">std::set::count</target>
        </trans-unit>
        <trans-unit id="f8c1b97d5e1ed327eaed6f7c414070fc7277669f" translate="yes" xml:space="preserve">
          <source>std::set::emplace</source>
          <target state="translated">std::set::emplace</target>
        </trans-unit>
        <trans-unit id="d6c8713f36055446bdab97246464dfd7fe0f8f2f" translate="yes" xml:space="preserve">
          <source>std::set::emplace_hint</source>
          <target state="translated">std::set::emplace_hint</target>
        </trans-unit>
        <trans-unit id="b6d016c8f8739cc2df57268e3000cb3c90e6e846" translate="yes" xml:space="preserve">
          <source>std::set::empty</source>
          <target state="translated">std::set::empty</target>
        </trans-unit>
        <trans-unit id="718d1f090925f1344e5e69941f106a2b72f5f6c5" translate="yes" xml:space="preserve">
          <source>std::set::end</source>
          <target state="translated">std::set::end</target>
        </trans-unit>
        <trans-unit id="24eb90710cccb246ecc20ae22498bd17864569b8" translate="yes" xml:space="preserve">
          <source>std::set::equal_range</source>
          <target state="translated">std::set::equal_range</target>
        </trans-unit>
        <trans-unit id="e1e4a3c1db53a94b8ca1f3ff04b32d1b6f187f63" translate="yes" xml:space="preserve">
          <source>std::set::erase</source>
          <target state="translated">std::set::erase</target>
        </trans-unit>
        <trans-unit id="f76c0c8a483e321baf8c9eb8b6fcacaa1909db7b" translate="yes" xml:space="preserve">
          <source>std::set::extract</source>
          <target state="translated">std::set::extract</target>
        </trans-unit>
        <trans-unit id="58a6959f179d433e5e9715cdfc1272bae49b67a2" translate="yes" xml:space="preserve">
          <source>std::set::find</source>
          <target state="translated">std::set::find</target>
        </trans-unit>
        <trans-unit id="82ae5dcc6f418ecc36c9ebc8923176672949a921" translate="yes" xml:space="preserve">
          <source>std::set::get_allocator</source>
          <target state="translated">std::set::get_allocator</target>
        </trans-unit>
        <trans-unit id="9821f95275a5913ab53d33ceac378b895eeaf0bf" translate="yes" xml:space="preserve">
          <source>std::set::insert</source>
          <target state="translated">std::set::insert</target>
        </trans-unit>
        <trans-unit id="e0c90df6b2c7c21e4f4a5dc7c61944ac391f7788" translate="yes" xml:space="preserve">
          <source>std::set::key_comp</source>
          <target state="translated">std::set::key_comp</target>
        </trans-unit>
        <trans-unit id="df5db3ec2ba95c93c607f4978e2a81aa6f7217cb" translate="yes" xml:space="preserve">
          <source>std::set::lower_bound</source>
          <target state="translated">std::set::lower_bound</target>
        </trans-unit>
        <trans-unit id="2162639e4bba1053327ac952d8624733bdf9ae07" translate="yes" xml:space="preserve">
          <source>std::set::max_size</source>
          <target state="translated">std::set::max_size</target>
        </trans-unit>
        <trans-unit id="bc7c0f7845c947634a89dded4ef1bd6f2de656b7" translate="yes" xml:space="preserve">
          <source>std::set::merge</source>
          <target state="translated">std::set::merge</target>
        </trans-unit>
        <trans-unit id="ca03bda9bb486aa9914be7c145609f5cab0c1ea8" translate="yes" xml:space="preserve">
          <source>std::set::operator=</source>
          <target state="translated">std::set::operator=</target>
        </trans-unit>
        <trans-unit id="baeb9b712d26db2c951be39fa16c11158e3ed8d4" translate="yes" xml:space="preserve">
          <source>std::set::rbegin</source>
          <target state="translated">std::set::rbegin</target>
        </trans-unit>
        <trans-unit id="71c5613a5d53ad4cc4349da09ff57c37adab0dc2" translate="yes" xml:space="preserve">
          <source>std::set::rend</source>
          <target state="translated">std::set::rend</target>
        </trans-unit>
        <trans-unit id="70a0cf62c31c08c415f9ac7773d6375dd3bb9760" translate="yes" xml:space="preserve">
          <source>std::set::set</source>
          <target state="translated">std::set::set</target>
        </trans-unit>
        <trans-unit id="a80278e34ce6a1a59a352046d2b69ca1787ec55e" translate="yes" xml:space="preserve">
          <source>std::set::size</source>
          <target state="translated">std::set::size</target>
        </trans-unit>
        <trans-unit id="6b6b991c6bf67ea22b2f6f7be924097b8f5d240d" translate="yes" xml:space="preserve">
          <source>std::set::swap</source>
          <target state="translated">std::set::swap</target>
        </trans-unit>
        <trans-unit id="8eb95b17c8b21ed869e50ce2c570f99c64dbc140" translate="yes" xml:space="preserve">
          <source>std::set::upper_bound</source>
          <target state="translated">std::set::upper_bound</target>
        </trans-unit>
        <trans-unit id="97fa4c3c0ed3c0e5e649319e43b0394b17b3f2ea" translate="yes" xml:space="preserve">
          <source>std::set::value_comp</source>
          <target state="translated">std::set::value_comp</target>
        </trans-unit>
        <trans-unit id="7cf6b51ccc68c3fedb5664984245cbe8b1778ad2" translate="yes" xml:space="preserve">
          <source>std::set::~set</source>
          <target state="translated">std::set::~set</target>
        </trans-unit>
        <trans-unit id="2ab3218fc2b883e4079bb14941feae7c237267a8" translate="yes" xml:space="preserve">
          <source>std::set_difference</source>
          <target state="translated">std::set_difference</target>
        </trans-unit>
        <trans-unit id="6352723d84d37f6c30e265f1ad338342baa3a9e0" translate="yes" xml:space="preserve">
          <source>std::set_intersection</source>
          <target state="translated">std::set_intersection</target>
        </trans-unit>
        <trans-unit id="8aa518e7f090d0326aa403b853c5b653e1249418" translate="yes" xml:space="preserve">
          <source>std::set_new_handler</source>
          <target state="translated">std::set_new_handler</target>
        </trans-unit>
        <trans-unit id="fdf1a537eeaa3a26dafdeec67c165e209d87a6ca" translate="yes" xml:space="preserve">
          <source>std::set_symmetric_difference</source>
          <target state="translated">std::set_symmetric_difference</target>
        </trans-unit>
        <trans-unit id="bea6da450a9ba32ef56b9deabd82211248ce623e" translate="yes" xml:space="preserve">
          <source>std::set_terminate</source>
          <target state="translated">std::set_terminate</target>
        </trans-unit>
        <trans-unit id="b43eb78c942c378dbe4a63c8e9704d1fc0ec2559" translate="yes" xml:space="preserve">
          <source>std::set_unexpected</source>
          <target state="translated">std::set_unexpected</target>
        </trans-unit>
        <trans-unit id="d54feeb50b1ebef5480141ff87b2836a3af9654e" translate="yes" xml:space="preserve">
          <source>std::set_union</source>
          <target state="translated">std::set_union</target>
        </trans-unit>
        <trans-unit id="fc8e6cf98962b9df2e5afd2db05f5fa9f25dfe11" translate="yes" xml:space="preserve">
          <source>std::setbase</source>
          <target state="translated">std::setbase</target>
        </trans-unit>
        <trans-unit id="82dcae7524b299df3155bff478c8a574d7af4b8b" translate="yes" xml:space="preserve">
          <source>std::setbuf</source>
          <target state="translated">std::setbuf</target>
        </trans-unit>
        <trans-unit id="8bda955abe039f21827f856a4791b0be25849339" translate="yes" xml:space="preserve">
          <source>std::setfill</source>
          <target state="translated">std::setfill</target>
        </trans-unit>
        <trans-unit id="d54bf0fedd0a9b3e1a5222b795564e0cfdb356a4" translate="yes" xml:space="preserve">
          <source>std::setiosflags</source>
          <target state="translated">std::setiosflags</target>
        </trans-unit>
        <trans-unit id="37eda7131ebf3130dab0f07011c82401ca20f1c7" translate="yes" xml:space="preserve">
          <source>std::setlocale</source>
          <target state="translated">std::setlocale</target>
        </trans-unit>
        <trans-unit id="53889afa45e08ca55a03cb36d8da8d8ef1d6f063" translate="yes" xml:space="preserve">
          <source>std::setprecision</source>
          <target state="translated">std::setprecision</target>
        </trans-unit>
        <trans-unit id="15822fa582428e2e897bde775f28eb8bbf370741" translate="yes" xml:space="preserve">
          <source>std::setvbuf</source>
          <target state="translated">std::setvbuf</target>
        </trans-unit>
        <trans-unit id="1b41c3dd57cf87350b2f75b798529494a77e0610" translate="yes" xml:space="preserve">
          <source>std::setw</source>
          <target state="translated">std::setw</target>
        </trans-unit>
        <trans-unit id="1f6ca9614915b0fafdd62c24dcb41290306b1d78" translate="yes" xml:space="preserve">
          <source>std::shared_future</source>
          <target state="translated">std::shared_future</target>
        </trans-unit>
        <trans-unit id="8a40d32d92375ba0146a53e896cd85088669e79b" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::get</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::get</target>
        </trans-unit>
        <trans-unit id="5e2ec5ef0bae494fe77da8c684432cd1ce8c68f0" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::operator=</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="f89963950ea4816fff8f364fc96abeef826a410d" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::shared_future</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::shared_future</target>
        </trans-unit>
        <trans-unit id="51d6ea8efff1fefa3acd251e84819788871ba7ed" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::valid</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::valid</target>
        </trans-unit>
        <trans-unit id="82c68fbf962c3be42e3ad2b1a4e2465ea394085d" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::wait</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::wait</target>
        </trans-unit>
        <trans-unit id="955b2b3d6d43cc9940cff9376eccb50e658f41e7" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::wait_for</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::wait_for</target>
        </trans-unit>
        <trans-unit id="735f76e204a047a7b6003c2cdb6af652c22ac0bc" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::wait_until</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::wait_until</target>
        </trans-unit>
        <trans-unit id="9d9a67b74089e2524e2c1e93f434e029b22c6924" translate="yes" xml:space="preserve">
          <source>std::shared_future&amp;lt;T&amp;gt;::~shared_future</source>
          <target state="translated">std::shared_future&amp;lt;T&amp;gt;::~shared_future</target>
        </trans-unit>
        <trans-unit id="3c793e148bf382b727d75932a64b660a7f962ba6" translate="yes" xml:space="preserve">
          <source>std::shared_future::get</source>
          <target state="translated">std::shared_future::get</target>
        </trans-unit>
        <trans-unit id="8031c42e851fdc7f567897f653c2c804c015cb8d" translate="yes" xml:space="preserve">
          <source>std::shared_future::operator=</source>
          <target state="translated">std::shared_future::operator=</target>
        </trans-unit>
        <trans-unit id="afdc1f0340a3ac550855fd88c379bc2e3d222623" translate="yes" xml:space="preserve">
          <source>std::shared_future::shared_future</source>
          <target state="translated">std::shared_future::shared_future</target>
        </trans-unit>
        <trans-unit id="c640e76bcc8cedc9a725e7afedb3be8f03c1507e" translate="yes" xml:space="preserve">
          <source>std::shared_future::valid</source>
          <target state="translated">std::shared_future::valid</target>
        </trans-unit>
        <trans-unit id="8ca89452bc98ed9c8d8c84e40f722d3028dd437b" translate="yes" xml:space="preserve">
          <source>std::shared_future::wait</source>
          <target state="translated">std::shared_future::wait</target>
        </trans-unit>
        <trans-unit id="bb4988a6866a59a60f8feb34590ebf3b48c7f777" translate="yes" xml:space="preserve">
          <source>std::shared_future::wait_for</source>
          <target state="translated">std::shared_future::wait_for</target>
        </trans-unit>
        <trans-unit id="6f005bc3a9c7abac65a41bf1b4de76147ff9fb94" translate="yes" xml:space="preserve">
          <source>std::shared_future::wait_until</source>
          <target state="translated">std::shared_future::wait_until</target>
        </trans-unit>
        <trans-unit id="dae3bc251a18d5f5b082eed01d591d7ca3179d68" translate="yes" xml:space="preserve">
          <source>std::shared_future::~shared_future</source>
          <target state="translated">std::shared_future::~shared_future</target>
        </trans-unit>
        <trans-unit id="58781bad951e60677a386635074e359d4b475c32" translate="yes" xml:space="preserve">
          <source>std::shared_lock</source>
          <target state="translated">std::shared_lock</target>
        </trans-unit>
        <trans-unit id="d2b6ecb37d58d0eed84a06204476b6c1d1d49ede" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::lock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::lock</target>
        </trans-unit>
        <trans-unit id="973ecaa20e4e5a0d9807ffdb1653bfb40b319712" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::mutex</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::mutex</target>
        </trans-unit>
        <trans-unit id="70b5903ce1d547342faf9b4ebb66d902e1cee90d" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::operator bool</source>
          <target state="translated">std :: shared_lock &amp;lt;Mutex&amp;gt; :: оператор bool</target>
        </trans-unit>
        <trans-unit id="51575b59b2c1ac6bcc96c5d31cadad2cf61bcda4" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::operator=</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="e05e9acb5ceb78a40679f7325f61d959e61e32ed" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::owns_lock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::owns_lock</target>
        </trans-unit>
        <trans-unit id="51087d00b177ac94bccc965c7624982e2838bbbe" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::release</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::release</target>
        </trans-unit>
        <trans-unit id="3388b3a3f29ab189fdb4adf7a046947ebf430ba9" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::shared_lock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::shared_lock</target>
        </trans-unit>
        <trans-unit id="a026e1b4de0b40203572b1d8b769ac6ba5b42b07" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::swap</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="f11e53b3a3c9aeeff58f49ac614aab3b626481e7" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock</target>
        </trans-unit>
        <trans-unit id="b36b4aa8bf50e39c06fd87b1a7561b95175e03ea" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock_for</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock_for</target>
        </trans-unit>
        <trans-unit id="50108b36b990b43e36a4e48525c913fd97cf0481" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock_until</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::try_lock_until</target>
        </trans-unit>
        <trans-unit id="3d6f78fd8f26e8ab017dc37d71402394dc39a91e" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::unlock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::unlock</target>
        </trans-unit>
        <trans-unit id="21a86bb3d3f285e62323879940d7047ab7a58fe0" translate="yes" xml:space="preserve">
          <source>std::shared_lock&amp;lt;Mutex&amp;gt;::~shared_lock</source>
          <target state="translated">std::shared_lock&amp;lt;Mutex&amp;gt;::~shared_lock</target>
        </trans-unit>
        <trans-unit id="063e97e155e53a284105a5596fdb1e7c2116a1e9" translate="yes" xml:space="preserve">
          <source>std::shared_lock::lock</source>
          <target state="translated">std::shared_lock::lock</target>
        </trans-unit>
        <trans-unit id="8dd616ecba2fa896958bcf4e7ad6f6957789affc" translate="yes" xml:space="preserve">
          <source>std::shared_lock::mutex</source>
          <target state="translated">std::shared_lock::mutex</target>
        </trans-unit>
        <trans-unit id="7c4ababd30f48855e434c46818dffae1b9b8b7b3" translate="yes" xml:space="preserve">
          <source>std::shared_lock::operator bool</source>
          <target state="translated">std::shared_lock::operator bool</target>
        </trans-unit>
        <trans-unit id="4c23e00e58019ba47d914576cd704cd2c68268ba" translate="yes" xml:space="preserve">
          <source>std::shared_lock::operator=</source>
          <target state="translated">std::shared_lock::operator=</target>
        </trans-unit>
        <trans-unit id="13ccc1585d8509aec1055aeaf960bd6798c764c9" translate="yes" xml:space="preserve">
          <source>std::shared_lock::owns_lock</source>
          <target state="translated">std::shared_lock::owns_lock</target>
        </trans-unit>
        <trans-unit id="1fbb4039122ec6636f4358c3e3af7e4933596410" translate="yes" xml:space="preserve">
          <source>std::shared_lock::release</source>
          <target state="translated">std::shared_lock::release</target>
        </trans-unit>
        <trans-unit id="2e0fde524858ef930e1d2253d110cfea1fe386dc" translate="yes" xml:space="preserve">
          <source>std::shared_lock::shared_lock</source>
          <target state="translated">std::shared_lock::shared_lock</target>
        </trans-unit>
        <trans-unit id="c434c1b5b3f510dd36453ca2073d3a2abc68f335" translate="yes" xml:space="preserve">
          <source>std::shared_lock::swap</source>
          <target state="translated">std::shared_lock::swap</target>
        </trans-unit>
        <trans-unit id="9595c6d7a4b619a58d4c5b4eac0a2ed5d013928b" translate="yes" xml:space="preserve">
          <source>std::shared_lock::try_lock</source>
          <target state="translated">std::shared_lock::try_lock</target>
        </trans-unit>
        <trans-unit id="d2f0aa5bbb6bd7cf796fc5353c8eefec1b81e0e7" translate="yes" xml:space="preserve">
          <source>std::shared_lock::try_lock_for</source>
          <target state="translated">std::shared_lock::try_lock_for</target>
        </trans-unit>
        <trans-unit id="994e0e2258ed33e3fa4b4e4c396ac25b51ab2f50" translate="yes" xml:space="preserve">
          <source>std::shared_lock::try_lock_until</source>
          <target state="translated">std::shared_lock::try_lock_until</target>
        </trans-unit>
        <trans-unit id="498ac883548fbff9aeed832f9d5398edaf36e888" translate="yes" xml:space="preserve">
          <source>std::shared_lock::unlock</source>
          <target state="translated">std::shared_lock::unlock</target>
        </trans-unit>
        <trans-unit id="8002c60ccdc8f0293c69b19024db1c5f06d0b642" translate="yes" xml:space="preserve">
          <source>std::shared_lock::~shared_lock</source>
          <target state="translated">std::shared_lock::~shared_lock</target>
        </trans-unit>
        <trans-unit id="659f583082871212f6875ae3f5771dc4d5aa3446" translate="yes" xml:space="preserve">
          <source>std::shared_mutex</source>
          <target state="translated">std::shared_mutex</target>
        </trans-unit>
        <trans-unit id="94d2eae00e7041b5d2199dd9f605d7cc65a02651" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::lock</source>
          <target state="translated">std::shared_mutex::lock</target>
        </trans-unit>
        <trans-unit id="eae5208d9c57dba347032982906d459760f9fd37" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::lock_shared</source>
          <target state="translated">std::shared_mutex::lock_shared</target>
        </trans-unit>
        <trans-unit id="e59bc982b9ded2698b8975decae55c1c498cbc18" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::native_handle</source>
          <target state="translated">std::shared_mutex::native_handle</target>
        </trans-unit>
        <trans-unit id="8c457b7405a0f072cb2a89582093a4e5fbf0f870" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::shared_mutex</source>
          <target state="translated">std::shared_mutex::shared_mutex</target>
        </trans-unit>
        <trans-unit id="754beba0eea14c6db9e4760f5afc93fa024d837c" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::try_lock</source>
          <target state="translated">std::shared_mutex::try_lock</target>
        </trans-unit>
        <trans-unit id="7a1d13a87f5409f0fad647293b6337dd0609aafd" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::try_lock_shared</source>
          <target state="translated">std::shared_mutex::try_lock_shared</target>
        </trans-unit>
        <trans-unit id="fee3165e5cc49758bf691a6d77cf67b52f472339" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::unlock</source>
          <target state="translated">std::shared_mutex::unlock</target>
        </trans-unit>
        <trans-unit id="1c53a44754a269371e69e893f9994734356ac921" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::unlock_shared</source>
          <target state="translated">std::shared_mutex::unlock_shared</target>
        </trans-unit>
        <trans-unit id="fca1d0eee90e412fd7b244a0efb6e6a407a80d51" translate="yes" xml:space="preserve">
          <source>std::shared_mutex::~shared_mutex</source>
          <target state="translated">std::shared_mutex::~shared_mutex</target>
        </trans-unit>
        <trans-unit id="737a38481b62f9f58398415532da401dbdc39703" translate="yes" xml:space="preserve">
          <source>std::shared_ptr</source>
          <target state="translated">std::shared_ptr</target>
        </trans-unit>
        <trans-unit id="2c480836c35ab5522ce466883934982a3d7f123b" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::get</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::get</target>
        </trans-unit>
        <trans-unit id="0a4dc965accd1051d427a54347a9bbc58f983b5a" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator bool</source>
          <target state="translated">std :: shared_ptr &amp;lt;T&amp;gt; :: оператор bool</target>
        </trans-unit>
        <trans-unit id="6920e5924f9e6235baac8d8ec87cdca461d1735f" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator&amp;lt;&amp;lt;</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::operator&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c288a1a3b353ee50618e86c97c74c796086ea7a4" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator*, std::shared_ptr&amp;lt;T&amp;gt;::operator-&amp;gt;</source>
          <target state="translated">std :: shared_ptr &amp;lt;T&amp;gt; :: operator *, std :: shared_ptr &amp;lt;T&amp;gt; :: operator-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="fa8975f4f711a37f244663a4d3e266213ec9e263" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator=</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="db6007df28548d5a662ca5c770713f9314e8dee9" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator==, !=, &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=</source>
          <target state="translated">std :: shared_ptr &amp;lt;T&amp;gt; :: operator ==,! =, &amp;lt;, &amp;lt;=,&amp;gt;,&amp;gt; =</target>
        </trans-unit>
        <trans-unit id="9943f6b8d6cef9a152f111d00518139e133f256b" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::operator[]</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::operator[]</target>
        </trans-unit>
        <trans-unit id="b17268835bfa508df8d8ea187fc46c9e380b6dd4" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::owner_before</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::owner_before</target>
        </trans-unit>
        <trans-unit id="a494e0ce7887900fd13f7f71ff6da22068032fc0" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::reset</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="d70e09d02f756e9c903b35bd0c5cf6c79ed9dba2" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::shared_ptr</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::shared_ptr</target>
        </trans-unit>
        <trans-unit id="490ad99e8eb031e489763de16118e8e8a9df0127" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::swap</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="c397e2037451fc52025bee2a3f628f9aacba0311" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::unique</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::unique</target>
        </trans-unit>
        <trans-unit id="eb2e9285ef1ce37e103f1a5f9b6625c1b198eec4" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::use_count</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::use_count</target>
        </trans-unit>
        <trans-unit id="3d20262da83d43947420776f8e208e474dd2f6b1" translate="yes" xml:space="preserve">
          <source>std::shared_ptr&amp;lt;T&amp;gt;::~shared_ptr</source>
          <target state="translated">std::shared_ptr&amp;lt;T&amp;gt;::~shared_ptr</target>
        </trans-unit>
        <trans-unit id="96ee62f2acccce38595b2c1da1b3df30a95fbc39" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::get</source>
          <target state="translated">std::shared_ptr::get</target>
        </trans-unit>
        <trans-unit id="864eedb366e56c77f69dca7f486f7da41c1f829d" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operator bool</source>
          <target state="translated">std::shared_ptr::оператор bool</target>
        </trans-unit>
        <trans-unit id="592ce9ce7ff3da438f41bccc49819afbcad35de7" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operator&amp;lt;&amp;lt;</source>
          <target state="translated">std::shared_ptr::operator&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="927038ba36ce20ee2fcdf0a0138d0e2165fdde86" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operator=</source>
          <target state="translated">std::shared_ptr::operator=</target>
        </trans-unit>
        <trans-unit id="dba9aaeea9fcf06a3fc76d4281f442b5cc8f15ff" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operator[]</source>
          <target state="translated">std::shared_ptr::operator[]</target>
        </trans-unit>
        <trans-unit id="ea5df2275aaf6649f3f4107ac377d1017537ba8c" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operators</source>
          <target state="translated">std::shared_ptr::operators</target>
        </trans-unit>
        <trans-unit id="081fcaa0e27a5ea9a7109b9ce950bee1a07447af" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::operators (&amp;gt;=)</source>
          <target state="translated">std :: shared_ptr :: operator (&amp;gt; =)</target>
        </trans-unit>
        <trans-unit id="d1357cd9ccace0db5ac7ba7a09eabe53cf3b07ad" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::owner_before</source>
          <target state="translated">std::shared_ptr::owner_before</target>
        </trans-unit>
        <trans-unit id="16f452a06ed9c4e5cb82ee7983d46b89b2d199c0" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::reset</source>
          <target state="translated">std::shared_ptr::reset</target>
        </trans-unit>
        <trans-unit id="c79243e56704fa34b906dc63ad980d7239b39c3b" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::shared_ptr</source>
          <target state="translated">std::shared_ptr::shared_ptr</target>
        </trans-unit>
        <trans-unit id="6da5124a924b4cc0782237e280dea0f76f7491c8" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::swap</source>
          <target state="translated">std::shared_ptr::swap</target>
        </trans-unit>
        <trans-unit id="bf9eae85e0993ccfdc145b092f064d74a84d4e02" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::unique</source>
          <target state="translated">std::shared_ptr::unique</target>
        </trans-unit>
        <trans-unit id="0888918985037cb67c6646f160d18986fecbe7b1" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::use_count</source>
          <target state="translated">std::shared_ptr::use_count</target>
        </trans-unit>
        <trans-unit id="4f8922460390cd64ec4a5b334359a1641da807bc" translate="yes" xml:space="preserve">
          <source>std::shared_ptr::~shared_ptr</source>
          <target state="translated">std::shared_ptr::~shared_ptr</target>
        </trans-unit>
        <trans-unit id="8a567651a1b3ea5907c6aa7bfbb933c0ee4f2a7e" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex</source>
          <target state="translated">std::shared_timed_mutex</target>
        </trans-unit>
        <trans-unit id="6104dd52a0f55d92e6e80a436f33350ebdd04bfe" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::lock</source>
          <target state="translated">std::shared_timed_mutex::lock</target>
        </trans-unit>
        <trans-unit id="e4855deb50bbafdc9eab06def5e4f8a7df0cdafb" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::lock_shared</source>
          <target state="translated">std::shared_timed_mutex::lock_shared</target>
        </trans-unit>
        <trans-unit id="f5ed33daed437e9d1c8144e75ca40af760ea5f3f" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::shared_timed_mutex</source>
          <target state="translated">std::shared_timed_mutex::shared_timed_mutex</target>
        </trans-unit>
        <trans-unit id="ca6e205d64f75ed85882c868945cdfeda70de8e2" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock</source>
          <target state="translated">std::shared_timed_mutex::try_lock</target>
        </trans-unit>
        <trans-unit id="7c08f79d2df12044c3b792f3d8493891bee7fd8c" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock_for</source>
          <target state="translated">std::shared_timed_mutex::try_lock_for</target>
        </trans-unit>
        <trans-unit id="101679d6b4ab88cd8551c2bcf314c151aa4a239b" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock_shared</source>
          <target state="translated">std::shared_timed_mutex::try_lock_shared</target>
        </trans-unit>
        <trans-unit id="7eb71eeee1b7bafccadcf76757ff426dec3e999b" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock_shared_for</source>
          <target state="translated">std::shared_timed_mutex::try_lock_shared_for</target>
        </trans-unit>
        <trans-unit id="271c9e60b360a5abe147538ba01e529d2271cabc" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock_shared_until</source>
          <target state="translated">std::shared_timed_mutex::try_lock_shared_until</target>
        </trans-unit>
        <trans-unit id="9a5380f668ffc5619d155af8f64d51bca07f47a7" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::try_lock_until</source>
          <target state="translated">std::shared_timed_mutex::try_lock_until</target>
        </trans-unit>
        <trans-unit id="ef1ff115579b91755e1e084b11eb4c8f5dab1917" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::unlock</source>
          <target state="translated">std::shared_timed_mutex::unlock</target>
        </trans-unit>
        <trans-unit id="46fc7026a5f741949097278a3052cb4632ccb167" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::unlock_shared</source>
          <target state="translated">std::shared_timed_mutex::unlock_shared</target>
        </trans-unit>
        <trans-unit id="d8a7e69678103e480f0cad8a28135cec676733a7" translate="yes" xml:space="preserve">
          <source>std::shared_timed_mutex::~shared_timed_mutex</source>
          <target state="translated">std::shared_timed_mutex::~shared_timed_mutex</target>
        </trans-unit>
        <trans-unit id="d7cd8be842ee0f91320f82b42dd6a69bd7dcddea" translate="yes" xml:space="preserve">
          <source>std::shift_left, std::shift_right</source>
          <target state="translated">std::shift_left,std::shift_right</target>
        </trans-unit>
        <trans-unit id="491013c4a0c15efaf310fb86f2052b5dd4c1a7ec" translate="yes" xml:space="preserve">
          <source>std::shift_right</source>
          <target state="translated">std::shift_right</target>
        </trans-unit>
        <trans-unit id="4d3e6a4e368042ef237d48ad5023167c243f9995" translate="yes" xml:space="preserve">
          <source>std::showbase</source>
          <target state="translated">std::showbase</target>
        </trans-unit>
        <trans-unit id="ea9f6cf00f62e8c41e86813f4f6ceb54448ff612" translate="yes" xml:space="preserve">
          <source>std::showbase, std::noshowbase</source>
          <target state="translated">std::showbase,std::noshowbase</target>
        </trans-unit>
        <trans-unit id="56f2a287ccf50eecd57c20cef8fcbecdb2599a99" translate="yes" xml:space="preserve">
          <source>std::showpoint</source>
          <target state="translated">std::showpoint</target>
        </trans-unit>
        <trans-unit id="a5aab95601361c6a214939f0c8d01542e7b48ab7" translate="yes" xml:space="preserve">
          <source>std::showpoint, std::noshowpoint</source>
          <target state="translated">std::showpoint,std::noshowpoint</target>
        </trans-unit>
        <trans-unit id="8c19887b2490c5275ecd2244e6d80ae62ed5b451" translate="yes" xml:space="preserve">
          <source>std::showpos</source>
          <target state="translated">std::showpos</target>
        </trans-unit>
        <trans-unit id="4a643a5ef04d698601a6272e6772419cc6835eec" translate="yes" xml:space="preserve">
          <source>std::showpos, std::noshowpos</source>
          <target state="translated">СТД::шоу-пост,СТД:ношау-пост</target>
        </trans-unit>
        <trans-unit id="1476a8fc85e7f2d88eeb7c34bac6210b4775631c" translate="yes" xml:space="preserve">
          <source>std::shuffle</source>
          <target state="translated">std::shuffle</target>
        </trans-unit>
        <trans-unit id="1e464d5b8a8c277adcbed2b22be03785a3538461" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine</source>
          <target state="translated">std::shuffle_order_engine</target>
        </trans-unit>
        <trans-unit id="1ebcf930f36b641ab541a20f476efd9f25f62019" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::base</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::base</target>
        </trans-unit>
        <trans-unit id="c117c6218861272cf110399db5273ec29a3d805c" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::discard</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::discard</target>
        </trans-unit>
        <trans-unit id="529dc823a45d08cf8da9e7170aaaddae38fc66ae" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::max</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="22507f6561dddd15f2bf838ba5cd2b42b54cdf16" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::min</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="edca92f2a5b5496173c946d42ae054492f89a30c" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::operator()</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="bf9f3b1f792e12e81130b850043bc7771a0a5dd7" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::seed</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::seed</target>
        </trans-unit>
        <trans-unit id="3f6f8a4371c6529df67da0a8630a75be12a41921" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::shuffle_order_engine</source>
          <target state="translated">std::shuffle_order_engine&amp;lt;Engine,K&amp;gt;::shuffle_order_engine</target>
        </trans-unit>
        <trans-unit id="aaf482bf2314fcaed7de1c7a9c04a3855da744aa" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::base</source>
          <target state="translated">std::shuffle_order_engine::base</target>
        </trans-unit>
        <trans-unit id="f263c7494cff95fe72483601bc35baee8a476228" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::discard</source>
          <target state="translated">std::shuffle_order_engine::discard</target>
        </trans-unit>
        <trans-unit id="c775149bd408a7bcfc703ff2152ebe70ddfb7a6a" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::max</source>
          <target state="translated">std::shuffle_order_engine::max</target>
        </trans-unit>
        <trans-unit id="99d55602ce2c256efeaa0dff707e36f9003578d5" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::min</source>
          <target state="translated">std::shuffle_order_engine::min</target>
        </trans-unit>
        <trans-unit id="809325088cf1d065ed2d5f1b6705b44572b73973" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::operator()</source>
          <target state="translated">std::shuffle_order_engine::operator()</target>
        </trans-unit>
        <trans-unit id="ecbcc2806acf4a42da969d8505bcd5b231f1e6f8" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::seed</source>
          <target state="translated">std::shuffle_order_engine::seed</target>
        </trans-unit>
        <trans-unit id="df5f7b919ea71582f1a68261aa077d9283cf9bca" translate="yes" xml:space="preserve">
          <source>std::shuffle_order_engine::shuffle_order_engine</source>
          <target state="translated">std::shuffle_order_engine::shuffle_order_engine</target>
        </trans-unit>
        <trans-unit id="d7b355061c5e5deca35bfc0e095888d1fedd7b7a" translate="yes" xml:space="preserve">
          <source>std::sig_atomic_t</source>
          <target state="translated">std::sig_atomic_t</target>
        </trans-unit>
        <trans-unit id="4e0314101a235de86d4cda286d3c33f38e4b0c1f" translate="yes" xml:space="preserve">
          <source>std::signal</source>
          <target state="translated">std::signal</target>
        </trans-unit>
        <trans-unit id="76ae361f4b47eb3de84c50e40d74c7a0c31eba12" translate="yes" xml:space="preserve">
          <source>std::signbit</source>
          <target state="translated">std::signbit</target>
        </trans-unit>
        <trans-unit id="f4ca82f4be21028685c210f0e7a4d2fcb29ed9cf" translate="yes" xml:space="preserve">
          <source>std::sin(std::complex)</source>
          <target state="translated">std::sin(std::complex)</target>
        </trans-unit>
        <trans-unit id="90767d0b35680463e8c71cc7fcf33b23323fb796" translate="yes" xml:space="preserve">
          <source>std::sin(std::valarray)</source>
          <target state="translated">std::sin(std::valarray)</target>
        </trans-unit>
        <trans-unit id="9190e72a93a389fb22d3cc2f264a7250ed394526" translate="yes" xml:space="preserve">
          <source>std::sin, std::sinf, std::sinl</source>
          <target state="translated">std::грех,std:грех,std:грех...</target>
        </trans-unit>
        <trans-unit id="71bd480b8b6dbca59837b3fa977f01493d981681" translate="yes" xml:space="preserve">
          <source>std::sinh(std::complex)</source>
          <target state="translated">std::sinh(std::complex)</target>
        </trans-unit>
        <trans-unit id="594754a960d9dc43f0e363d06dadc0e61850feda" translate="yes" xml:space="preserve">
          <source>std::sinh(std::valarray)</source>
          <target state="translated">std::sinh(std::valarray)</target>
        </trans-unit>
        <trans-unit id="6fc20b6c7b50792b46e541980851790d728d8300" translate="yes" xml:space="preserve">
          <source>std::sinh, std::sinhf, std::sinhl</source>
          <target state="translated">std::sinh,std:sinhf,std:sinhl</target>
        </trans-unit>
        <trans-unit id="62b6f2c4a8939b2c7a176f81c8e2e3b86f5fad14" translate="yes" xml:space="preserve">
          <source>std::sinhl</source>
          <target state="translated">std::sinhl</target>
        </trans-unit>
        <trans-unit id="9e511f7ceb0a2c3b038e7a603abc1c85993350e4" translate="yes" xml:space="preserve">
          <source>std::sinl</source>
          <target state="translated">std::sinl</target>
        </trans-unit>
        <trans-unit id="a7ef4fed15b9c5e0013a1cd21e3a8e790b9555c3" translate="yes" xml:space="preserve">
          <source>std::size, std::ssize</source>
          <target state="translated">std::размер,std:размер</target>
        </trans-unit>
        <trans-unit id="69ff7e6eb193d1f4e0b944c46a92bc8427626ecb" translate="yes" xml:space="preserve">
          <source>std::size_t</source>
          <target state="translated">std::size_t</target>
        </trans-unit>
        <trans-unit id="266c0770091500c63211f3c0f046e6f9c560b416" translate="yes" xml:space="preserve">
          <source>std::skipws</source>
          <target state="translated">std::skipws</target>
        </trans-unit>
        <trans-unit id="7d69ecb1ec6914d53f13c6173f6e4fae8cbec3cb" translate="yes" xml:space="preserve">
          <source>std::skipws, std::noskipws</source>
          <target state="translated">std::skipws,std::noskipws</target>
        </trans-unit>
        <trans-unit id="7334d4b1899708d91c836fb601f1a194b174a3e3" translate="yes" xml:space="preserve">
          <source>std::slice</source>
          <target state="translated">std::slice</target>
        </trans-unit>
        <trans-unit id="2f22da2fe2339ebc59ba6cb148c74b12dea64b9a" translate="yes" xml:space="preserve">
          <source>std::slice::slice</source>
          <target state="translated">std::slice::slice</target>
        </trans-unit>
        <trans-unit id="d2c7f43551651494e47ba38d8b883cf8f796869e" translate="yes" xml:space="preserve">
          <source>std::slice::start, size, stride</source>
          <target state="translated">std::slice:start,size,stride</target>
        </trans-unit>
        <trans-unit id="f194d07b291faeac8cbf73dfe10c197b52e87059" translate="yes" xml:space="preserve">
          <source>std::slice_array</source>
          <target state="translated">std::slice_array</target>
        </trans-unit>
        <trans-unit id="89fa9fa138b348cbb5523d1a50f43e851af35ede" translate="yes" xml:space="preserve">
          <source>std::slice_array&amp;lt;T&amp;gt;::operator+=,-=,*=,/=,%=,&amp;amp;=,|=,^=,&amp;lt;&amp;lt;=,&amp;gt;&amp;gt;=</source>
          <target state="translated">std::slice_array&amp;lt;T&amp;gt;::operator+=,-=,*=,/=,%=,&amp;amp;=,|=,^=,&amp;lt;&amp;lt;=,&amp;gt;&amp;gt;=</target>
        </trans-unit>
        <trans-unit id="5e84decbab2047ba1e363b8bf474ef67ddfffeba" translate="yes" xml:space="preserve">
          <source>std::slice_array&amp;lt;T&amp;gt;::operator=</source>
          <target state="translated">std::slice_array&amp;lt;T&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="8bfe321a52da0d38dd6aba33a446b289dad632d0" translate="yes" xml:space="preserve">
          <source>std::slice_array&amp;lt;T&amp;gt;::slice_array</source>
          <target state="translated">std::slice_array&amp;lt;T&amp;gt;::slice_array</target>
        </trans-unit>
        <trans-unit id="b1b2d16fdb6b3753f30adf401f8fdf91973be6ba" translate="yes" xml:space="preserve">
          <source>std::slice_array&amp;lt;T&amp;gt;::~slice_array</source>
          <target state="translated">std::slice_array&amp;lt;T&amp;gt;::~slice_array</target>
        </trans-unit>
        <trans-unit id="54cc352517b220f1ae82396ac4f94b356202305a" translate="yes" xml:space="preserve">
          <source>std::slice_array::operator=</source>
          <target state="translated">std::slice_array::operator=</target>
        </trans-unit>
        <trans-unit id="2805da2997905a31059d2bb253fc95b75a6d8882" translate="yes" xml:space="preserve">
          <source>std::slice_array::operators</source>
          <target state="translated">std::slice_array::operators</target>
        </trans-unit>
        <trans-unit id="e0f6b69564f767618b755798a69e3291ed540704" translate="yes" xml:space="preserve">
          <source>std::slice_array::slice_array</source>
          <target state="translated">std::slice_array::slice_array</target>
        </trans-unit>
        <trans-unit id="4600e21523bb0d0ec2b32ee23a3f869e44f62e19" translate="yes" xml:space="preserve">
          <source>std::slice_array::~slice_array</source>
          <target state="translated">std::slice_array::~slice_array</target>
        </trans-unit>
        <trans-unit id="f11c75abe890e50ed8a8b24cf4655e8a1c81b263" translate="yes" xml:space="preserve">
          <source>std::sort</source>
          <target state="translated">std::sort</target>
        </trans-unit>
        <trans-unit id="47ab9568c8fe9843b722d52e5a62969d2711570e" translate="yes" xml:space="preserve">
          <source>std::sort_heap</source>
          <target state="translated">std::sort_heap</target>
        </trans-unit>
        <trans-unit id="76b550e00e5a0cfff6d5becd19f4099604e66aef" translate="yes" xml:space="preserve">
          <source>std::span</source>
          <target state="translated">std::span</target>
        </trans-unit>
        <trans-unit id="8ce59820e10d626174d03fd46f6171b39ead1895" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::back</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::back</target>
        </trans-unit>
        <trans-unit id="5018f071f33e872b204d6be175c755e325769b77" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::begin, std::span&amp;lt;T,Extent&amp;gt;::cbegin</source>
          <target state="translated">std :: span &amp;lt;T, экстент&amp;gt; :: begin, std :: span &amp;lt;T, экстент&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="e803b9acefd0fda8f570163f7fcf9b56a4fc9dbe" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::data</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::data</target>
        </trans-unit>
        <trans-unit id="790eff8cf2b9fc0521338a92a7ae8253db5fc9f9" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::empty</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="664d198f1d1ada8471212369a810191b29fb84ff" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::end, std::span&amp;lt;T,Extent&amp;gt;::cend</source>
          <target state="translated">std :: span &amp;lt;T, экстент&amp;gt; :: end, std :: span &amp;lt;T, экстент&amp;gt; :: cend</target>
        </trans-unit>
        <trans-unit id="93b6bde43b9dbf5426ab37cbe89a76484c6ef137" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::first</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::first</target>
        </trans-unit>
        <trans-unit id="06756633c25580a3fa6d593fbdc2ddceabae616c" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::front</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::front</target>
        </trans-unit>
        <trans-unit id="32a2676664b045dd589a561f52e9de144680bbd7" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::last</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::last</target>
        </trans-unit>
        <trans-unit id="53c5664602aa03805052db3b1e98f112a06bf431" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::operator=</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="ac1eba3f352cf66f29235a3357c5772444230e97" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::operator[]</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::operator[]</target>
        </trans-unit>
        <trans-unit id="25dc2118377dad81dcdd2e4f6ff3be355c5d7db5" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::rbegin, std::span&amp;lt;T,Extent&amp;gt;::crbegin</source>
          <target state="translated">std :: span &amp;lt;T, экстент&amp;gt; :: rbegin, std :: span &amp;lt;T, экстент&amp;gt; :: crbegin</target>
        </trans-unit>
        <trans-unit id="29492876f5de7c5eb8e9aa19a610e3ef420532d6" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::rend, std::span&amp;lt;T,Extent&amp;gt;::crend</source>
          <target state="translated">std :: span &amp;lt;T, экстент&amp;gt; :: rend, std :: span &amp;lt;T, экстент&amp;gt; :: crend</target>
        </trans-unit>
        <trans-unit id="52579b48cdef14d7f3c592f6b0662e7e0c7daedd" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::size</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="ad2573c1376bf700dd2341672f7775d3b52ec6c9" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::size_bytes</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::size_bytes</target>
        </trans-unit>
        <trans-unit id="7c34073c90707b70904dee5cc531c0f17074577b" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::span</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::span</target>
        </trans-unit>
        <trans-unit id="5126cf36d9954dd4999f1a7b6185bf803bcb44d3" translate="yes" xml:space="preserve">
          <source>std::span&amp;lt;T,Extent&amp;gt;::subspan</source>
          <target state="translated">std::span&amp;lt;T,Extent&amp;gt;::subspan</target>
        </trans-unit>
        <trans-unit id="8141146cd047bf177fbf8f258383f7b628e9bb7a" translate="yes" xml:space="preserve">
          <source>std::span::back</source>
          <target state="translated">std::span::back</target>
        </trans-unit>
        <trans-unit id="fbee6387b7906014c3f776a61156a410be0264a2" translate="yes" xml:space="preserve">
          <source>std::span::cbegin</source>
          <target state="translated">std::span::cbegin</target>
        </trans-unit>
        <trans-unit id="6977de2bf081a05e6d5d808477a429d9ef94b62c" translate="yes" xml:space="preserve">
          <source>std::span::data</source>
          <target state="translated">std::span::data</target>
        </trans-unit>
        <trans-unit id="f6909271d5c64c7a1dfaf97cf91fe2d35161201f" translate="yes" xml:space="preserve">
          <source>std::span::empty</source>
          <target state="translated">std::span::empty</target>
        </trans-unit>
        <trans-unit id="76f4c4b6533dd5b1b998a94818de3501a4756303" translate="yes" xml:space="preserve">
          <source>std::span::end</source>
          <target state="translated">std::span::end</target>
        </trans-unit>
        <trans-unit id="bef1019604c87c60099366ae704ad9a13ddf2717" translate="yes" xml:space="preserve">
          <source>std::span::first</source>
          <target state="translated">std::span::first</target>
        </trans-unit>
        <trans-unit id="2d9d7d2f8da57e836120b78513cc54baf77cc306" translate="yes" xml:space="preserve">
          <source>std::span::front</source>
          <target state="translated">std::span::front</target>
        </trans-unit>
        <trans-unit id="92efe394d6bf155dd45f61a83b9e3c3c7779f275" translate="yes" xml:space="preserve">
          <source>std::span::last</source>
          <target state="translated">std::span::last</target>
        </trans-unit>
        <trans-unit id="e4388f16303ef7e4170d18a91797124a1af2aca2" translate="yes" xml:space="preserve">
          <source>std::span::operator=</source>
          <target state="translated">std::span::operator=</target>
        </trans-unit>
        <trans-unit id="682cf30f6dddd767bcb66360a8adccd6bc0b8376" translate="yes" xml:space="preserve">
          <source>std::span::operator[]</source>
          <target state="translated">std::span::operator[]</target>
        </trans-unit>
        <trans-unit id="4e8bf904e3ee2e4d83d7902de4d6eec274fd83cf" translate="yes" xml:space="preserve">
          <source>std::span::rbegin</source>
          <target state="translated">std::span::rbegin</target>
        </trans-unit>
        <trans-unit id="77e0a519f10a1f3e5fd50f31eec63d8b1de5ee1e" translate="yes" xml:space="preserve">
          <source>std::span::rend</source>
          <target state="translated">std::span::rend</target>
        </trans-unit>
        <trans-unit id="60bdfe0be7eb2261145069e29340de13d3826021" translate="yes" xml:space="preserve">
          <source>std::span::size</source>
          <target state="translated">std::span::size</target>
        </trans-unit>
        <trans-unit id="236497146e1327de38407e43b91aa23b6b94c717" translate="yes" xml:space="preserve">
          <source>std::span::size_bytes</source>
          <target state="translated">std::span::size_bytes</target>
        </trans-unit>
        <trans-unit id="8a339093872e442de0b6a83bf7ac9751ae4251bf" translate="yes" xml:space="preserve">
          <source>std::span::span</source>
          <target state="translated">std::span::span</target>
        </trans-unit>
        <trans-unit id="a0910959e24ae0e211e3ac80a2d1e3bde66c4baf" translate="yes" xml:space="preserve">
          <source>std::span::subspan</source>
          <target state="translated">std::span::subspan</target>
        </trans-unit>
        <trans-unit id="789a7aa39136a78f1b56cd929b8255e61c1a826f" translate="yes" xml:space="preserve">
          <source>std::sph_bessel, std::sph_besself, std::sph_bessell</source>
          <target state="translated">std::sph_bessel,std::sph_besself,std::sph_bessell</target>
        </trans-unit>
        <trans-unit id="7799187155e7789eb58e7a8e4d79847d8b080bc6" translate="yes" xml:space="preserve">
          <source>std::sph_bessell</source>
          <target state="translated">std::sph_bessell</target>
        </trans-unit>
        <trans-unit id="065b5c4eaa04e60ac4bd104fb2400ee44a565457" translate="yes" xml:space="preserve">
          <source>std::sph_legendre, std::sph_legendref, std::sph_legendrel</source>
          <target state="translated">std::sph_legendre,std::sph_legendref,std::sph_legendrel</target>
        </trans-unit>
        <trans-unit id="7c69e43b02b33ef61405e8c6bcab8f7ff4182c49" translate="yes" xml:space="preserve">
          <source>std::sph_legendrel</source>
          <target state="translated">std::sph_legendrel</target>
        </trans-unit>
        <trans-unit id="7fb7107bfb67c425a680f32424e1cd2bc68d5bb6" translate="yes" xml:space="preserve">
          <source>std::sph_neumann, std::sph_neumannf, std::sph_neumannl</source>
          <target state="translated">std::sph_neumann,std::sph_neumannf,std::sph_neumannl</target>
        </trans-unit>
        <trans-unit id="159469b42b026af769ab5b326fdd779cfa51c16d" translate="yes" xml:space="preserve">
          <source>std::sph_neumannl</source>
          <target state="translated">std::sph_neumannl</target>
        </trans-unit>
        <trans-unit id="b43a2c3622af4d62c6287d7fd715564d15c155ea" translate="yes" xml:space="preserve">
          <source>std::sprintf</source>
          <target state="translated">std::sprintf</target>
        </trans-unit>
        <trans-unit id="ebe30f5439411eb12a8f5ccdbc6eb0eea1272f98" translate="yes" xml:space="preserve">
          <source>std::sqrt(std::complex)</source>
          <target state="translated">std::sqrt(std::complex)</target>
        </trans-unit>
        <trans-unit id="b44a58e30ffb61875a764d3618d080edb6ce7dd3" translate="yes" xml:space="preserve">
          <source>std::sqrt(std::valarray)</source>
          <target state="translated">std::sqrt(std::valarray)</target>
        </trans-unit>
        <trans-unit id="1ddbd689b3c1f9b128d2794242f1de9819a53104" translate="yes" xml:space="preserve">
          <source>std::sqrt, std::sqrtf, std::sqrtl</source>
          <target state="translated">стд::кврт,стд::квртф,стд::квртль</target>
        </trans-unit>
        <trans-unit id="fddfa79b5465f307655cd9c10b88e5640a5ad7f9" translate="yes" xml:space="preserve">
          <source>std::sqrtl</source>
          <target state="translated">std::sqrtl</target>
        </trans-unit>
        <trans-unit id="591918b82e3cdfd504062113a6c25c62deb9e055" translate="yes" xml:space="preserve">
          <source>std::srand</source>
          <target state="translated">std::srand</target>
        </trans-unit>
        <trans-unit id="809eaec72333499e1c6517b8193f7bc588b2388e" translate="yes" xml:space="preserve">
          <source>std::sscanf</source>
          <target state="translated">std::sscanf</target>
        </trans-unit>
        <trans-unit id="156d18a9ba99bfb4f250441a98926fbde80e4f86" translate="yes" xml:space="preserve">
          <source>std::ssize</source>
          <target state="translated">std::ssize</target>
        </trans-unit>
        <trans-unit id="c0faf1149a549c61a414b031443b55f0c9ba5836" translate="yes" xml:space="preserve">
          <source>std::stable_partition</source>
          <target state="translated">std::stable_partition</target>
        </trans-unit>
        <trans-unit id="0bff2b671ca1e5c41520c5d7d6e27b034549ab7f" translate="yes" xml:space="preserve">
          <source>std::stable_sort</source>
          <target state="translated">std::stable_sort</target>
        </trans-unit>
        <trans-unit id="9d5f2fa9620d5b1f1701c011a24ebac5335c7e39" translate="yes" xml:space="preserve">
          <source>std::stack</source>
          <target state="translated">std::stack</target>
        </trans-unit>
        <trans-unit id="f1f0e4906e744ec44f9ee59ec4ff7df128381ecc" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::emplace</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::emplace</target>
        </trans-unit>
        <trans-unit id="699dc151d87181332921914fa31ebe2d73dec786" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::empty</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="9987c82202321421dc56fe1dd44e04f0768858b4" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::operator=</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="8a036c905d6cf36d68e920b6284f64e2dfa12208" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::pop</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::pop</target>
        </trans-unit>
        <trans-unit id="a5f69ae19a7f9268e3da4fc2b376d6f95bc943ef" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::push</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::push</target>
        </trans-unit>
        <trans-unit id="ab25a75de64bc1fdce956a88ea109c803b781126" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::size</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="cdf6677ac4c8a1615ce3bc543ea974898d743860" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::stack</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::stack</target>
        </trans-unit>
        <trans-unit id="ea72163f438368927568fdf510e403db3e99c6f6" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::swap</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="c4f74a8382ef115faf0aeb91ddd86888d5b61ec6" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::top</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::top</target>
        </trans-unit>
        <trans-unit id="9cf7b56b14f2cdfe521af4f4d99c0622b4df60d7" translate="yes" xml:space="preserve">
          <source>std::stack&amp;lt;T,Container&amp;gt;::~stack</source>
          <target state="translated">std::stack&amp;lt;T,Container&amp;gt;::~stack</target>
        </trans-unit>
        <trans-unit id="eb40773f02ee321a75d2483489f8eb42d0bced32" translate="yes" xml:space="preserve">
          <source>std::stack::emplace</source>
          <target state="translated">std::stack::emplace</target>
        </trans-unit>
        <trans-unit id="4a81075ff258a4e12fd9077d48b334c45bf10e55" translate="yes" xml:space="preserve">
          <source>std::stack::empty</source>
          <target state="translated">std::stack::empty</target>
        </trans-unit>
        <trans-unit id="13e619166457c91b9f10e7b0d65a9f90bf853db4" translate="yes" xml:space="preserve">
          <source>std::stack::operator=</source>
          <target state="translated">std::stack::operator=</target>
        </trans-unit>
        <trans-unit id="150316fb12d0c1588627fed6b6475666e4fcf04b" translate="yes" xml:space="preserve">
          <source>std::stack::pop</source>
          <target state="translated">std::stack::pop</target>
        </trans-unit>
        <trans-unit id="26c1784ff189366e60427986dc1a4de1345cb30d" translate="yes" xml:space="preserve">
          <source>std::stack::push</source>
          <target state="translated">std::stack::push</target>
        </trans-unit>
        <trans-unit id="d6c83672fc8e5919fcfa19c40ac9c74056aa9c01" translate="yes" xml:space="preserve">
          <source>std::stack::size</source>
          <target state="translated">std::stack::size</target>
        </trans-unit>
        <trans-unit id="0a5e13ef970d6e2e84c343c5eabf91bdd6dd8ec6" translate="yes" xml:space="preserve">
          <source>std::stack::stack</source>
          <target state="translated">std::stack::stack</target>
        </trans-unit>
        <trans-unit id="516eac3ab5ca1191400aba4d5e570696ff5851ea" translate="yes" xml:space="preserve">
          <source>std::stack::swap</source>
          <target state="translated">std::stack::swap</target>
        </trans-unit>
        <trans-unit id="41745e38ebd774d3a91965c07f7378e608a4db07" translate="yes" xml:space="preserve">
          <source>std::stack::top</source>
          <target state="translated">std::stack::top</target>
        </trans-unit>
        <trans-unit id="b214cf9d1d539adc9ecd2713b059d4cef3e501a9" translate="yes" xml:space="preserve">
          <source>std::stack::~stack</source>
          <target state="translated">std::stack::~stack</target>
        </trans-unit>
        <trans-unit id="67fa2222090c5325bf01f234853c503b41a2bdd6" translate="yes" xml:space="preserve">
          <source>std::static_pointer_cast</source>
          <target state="translated">std::static_pointer_cast</target>
        </trans-unit>
        <trans-unit id="16b680e4f5c3463056d3f9dccbae37c56f708ea5" translate="yes" xml:space="preserve">
          <source>std::static_pointer_cast, std::dynamic_pointer_cast, std::const_pointer_cast, std::reinterpret_pointer_cast</source>
          <target state="translated">std::static_pointer_cast,std::dynamic_pointer_cast,std::const_pointer_cast,std::reinterpret_pointer_cast</target>
        </trans-unit>
        <trans-unit id="44e9c656f9de3117a0b0de0d4292ba583aad2a90" translate="yes" xml:space="preserve">
          <source>std::stof, std::stod, std::stold</source>
          <target state="translated">Стд:стоп,стд:стоп,стд:стоп,стд:стоп.</target>
        </trans-unit>
        <trans-unit id="f66653ded9b1225a4206e511b38d51677cdc0afe" translate="yes" xml:space="preserve">
          <source>std::stoi, std::stol, std::stoll</source>
          <target state="translated">СТД:стул,СТД:стол,СТД:столл.</target>
        </trans-unit>
        <trans-unit id="eef3306d71dbfe986176bd05f756ca6213f0af7f" translate="yes" xml:space="preserve">
          <source>std::stold</source>
          <target state="translated">std::stold</target>
        </trans-unit>
        <trans-unit id="8123dc4665beaf85cc5d254230ffc7f5827d57d9" translate="yes" xml:space="preserve">
          <source>std::stoll</source>
          <target state="translated">std::stoll</target>
        </trans-unit>
        <trans-unit id="77eba820ef7071ca1f61e913e840a73ff0cbbb83" translate="yes" xml:space="preserve">
          <source>std::stoul, std::stoull</source>
          <target state="translated">std::stoul,std:stoull</target>
        </trans-unit>
        <trans-unit id="eb81a8c7ba93e4d7e49021d634ee9b483cc9e38c" translate="yes" xml:space="preserve">
          <source>std::stoull</source>
          <target state="translated">std::stoull</target>
        </trans-unit>
        <trans-unit id="e39b934f7bb8d9879058b554459fe3d7acadd622" translate="yes" xml:space="preserve">
          <source>std::strcat</source>
          <target state="translated">std::strcat</target>
        </trans-unit>
        <trans-unit id="731037eced534f27b33b167dd8aaf164edac6c93" translate="yes" xml:space="preserve">
          <source>std::strchr</source>
          <target state="translated">std::strchr</target>
        </trans-unit>
        <trans-unit id="bf94c33cd522840fd4c960b8342169c1cd5d449c" translate="yes" xml:space="preserve">
          <source>std::strcmp</source>
          <target state="translated">std::strcmp</target>
        </trans-unit>
        <trans-unit id="c0abf3df31de30aad6b478f51fa1c32548909cbc" translate="yes" xml:space="preserve">
          <source>std::strcoll</source>
          <target state="translated">std::strcoll</target>
        </trans-unit>
        <trans-unit id="4cb3a2aea068ffc84aac70df29aa5c604f751b9d" translate="yes" xml:space="preserve">
          <source>std::strcpy</source>
          <target state="translated">std::strcpy</target>
        </trans-unit>
        <trans-unit id="c074d7729ffa4b2b739453f1ab1e7a9763317f95" translate="yes" xml:space="preserve">
          <source>std::strcspn</source>
          <target state="translated">std::strcspn</target>
        </trans-unit>
        <trans-unit id="5472b29429bc46478784f9f24fb14291d8329100" translate="yes" xml:space="preserve">
          <source>std::streamoff</source>
          <target state="translated">std::streamoff</target>
        </trans-unit>
        <trans-unit id="0d7cdfd2a380a26f4573dfe450899a1e01562544" translate="yes" xml:space="preserve">
          <source>std::streamsize</source>
          <target state="translated">std::streamsize</target>
        </trans-unit>
        <trans-unit id="2889176c8465e986075f275aa5eec8d2e9cc93cc" translate="yes" xml:space="preserve">
          <source>std::strerror</source>
          <target state="translated">std::strerror</target>
        </trans-unit>
        <trans-unit id="6252375b154f24557b654dfa801045b80fe872c2" translate="yes" xml:space="preserve">
          <source>std::strftime</source>
          <target state="translated">std::strftime</target>
        </trans-unit>
        <trans-unit id="5cbb166ec9885e1a99c9f83a2d29cb46d762b728" translate="yes" xml:space="preserve">
          <source>std::strlen</source>
          <target state="translated">std::strlen</target>
        </trans-unit>
        <trans-unit id="fbcc28c7defe7deb043d33671d5ded94a5adcba8" translate="yes" xml:space="preserve">
          <source>std::strncat</source>
          <target state="translated">std::strncat</target>
        </trans-unit>
        <trans-unit id="38b7bc7610609e001cf4f8087a2ad4c27c0482d1" translate="yes" xml:space="preserve">
          <source>std::strncmp</source>
          <target state="translated">std::strncmp</target>
        </trans-unit>
        <trans-unit id="1803a680cf60da45bda75cb1a7491a927535d928" translate="yes" xml:space="preserve">
          <source>std::strncpy</source>
          <target state="translated">std::strncpy</target>
        </trans-unit>
        <trans-unit id="b683cf1668ca53fdac90b374c6fe929e2ca7c742" translate="yes" xml:space="preserve">
          <source>std::strong_equal</source>
          <target state="translated">std::strong_equal</target>
        </trans-unit>
        <trans-unit id="f53c7f272b504b253707d99f420740dad0f1992d" translate="yes" xml:space="preserve">
          <source>std::strong_equality</source>
          <target state="translated">std::strong_equality</target>
        </trans-unit>
        <trans-unit id="f3095d66446e4cc4bfca3c376e2a862c20d21678" translate="yes" xml:space="preserve">
          <source>std::strong_equality::operator weak_equality</source>
          <target state="translated">std::strong_equality::operator weak_equality</target>
        </trans-unit>
        <trans-unit id="94c7219063bdf2c59a21258757f3034ca66f2493" translate="yes" xml:space="preserve">
          <source>std::strong_order</source>
          <target state="translated">std::strong_order</target>
        </trans-unit>
        <trans-unit id="573f24601c8e21f3295e2d5167e73b305abdcc4f" translate="yes" xml:space="preserve">
          <source>std::strong_ordering</source>
          <target state="translated">std::strong_ordering</target>
        </trans-unit>
        <trans-unit id="c8e221f5c20da7d018378aadc97422ddd6750479" translate="yes" xml:space="preserve">
          <source>std::strong_ordering::operator partial_ordering</source>
          <target state="translated">std::strong_ordering::operator partial_ordering</target>
        </trans-unit>
        <trans-unit id="03c54ee4f8b6f8bb1cfe14c2a3d5493a46f37b14" translate="yes" xml:space="preserve">
          <source>std::strong_ordering::operator strong_equality</source>
          <target state="translated">std::strong_ordering::operator strong_equality</target>
        </trans-unit>
        <trans-unit id="1550187c13b85c0ef93078aefc5a3489629004e4" translate="yes" xml:space="preserve">
          <source>std::strong_ordering::operator weak_equality</source>
          <target state="translated">std::strong_ordering::operator weak_equality</target>
        </trans-unit>
        <trans-unit id="12bed79663691be2b11e0431c269c4be3569bfb5" translate="yes" xml:space="preserve">
          <source>std::strong_ordering::operator weak_ordering</source>
          <target state="translated">std::strong_ordering::operator weak_ordering</target>
        </trans-unit>
        <trans-unit id="d33bedfc84bba8851106a5fe91a781082629d7a8" translate="yes" xml:space="preserve">
          <source>std::strpbrk</source>
          <target state="translated">std::strpbrk</target>
        </trans-unit>
        <trans-unit id="e96b6961b2dee260654d016c79f85ff4601f08e8" translate="yes" xml:space="preserve">
          <source>std::strrchr</source>
          <target state="translated">std::strrchr</target>
        </trans-unit>
        <trans-unit id="25f115de19a988f87bc2cf5ad83fb35f6862b12d" translate="yes" xml:space="preserve">
          <source>std::strspn</source>
          <target state="translated">std::strspn</target>
        </trans-unit>
        <trans-unit id="0f3309c31ca9a566caad804bfbb6373f04bde14d" translate="yes" xml:space="preserve">
          <source>std::strstr</source>
          <target state="translated">std::strstr</target>
        </trans-unit>
        <trans-unit id="b357d5719127f177734f98ca7f5163c06a415d40" translate="yes" xml:space="preserve">
          <source>std::strstream</source>
          <target state="translated">std::strstream</target>
        </trans-unit>
        <trans-unit id="5b1bbb0c76b64dc55be6e3e18e12fcba44276c98" translate="yes" xml:space="preserve">
          <source>std::strstream::freeze</source>
          <target state="translated">std::strstream::freeze</target>
        </trans-unit>
        <trans-unit id="1e16eb8f42c37d831ad998d543d8fd493633817e" translate="yes" xml:space="preserve">
          <source>std::strstream::pcount</source>
          <target state="translated">std::strstream::pcount</target>
        </trans-unit>
        <trans-unit id="767866b163c5823d8cc9993d9286ec51b4b50281" translate="yes" xml:space="preserve">
          <source>std::strstream::rdbuf</source>
          <target state="translated">std::strstream::rdbuf</target>
        </trans-unit>
        <trans-unit id="0b81f4c52c0d226bb37ff51bd83f117d10c879d8" translate="yes" xml:space="preserve">
          <source>std::strstream::str</source>
          <target state="translated">std::strstream::str</target>
        </trans-unit>
        <trans-unit id="68f732f03e23b364b7ef35c9b17717383f886925" translate="yes" xml:space="preserve">
          <source>std::strstream::strstream</source>
          <target state="translated">std::strstream::strstream</target>
        </trans-unit>
        <trans-unit id="4fff0851c99a8e2d4095fd807faf459596ca91a7" translate="yes" xml:space="preserve">
          <source>std::strstream::~strstream</source>
          <target state="translated">std::strstream::~strstream</target>
        </trans-unit>
        <trans-unit id="189739ce5df34f70845d99a79f5ce6ebec5afdd7" translate="yes" xml:space="preserve">
          <source>std::strstreambuf</source>
          <target state="translated">std::strstreambuf</target>
        </trans-unit>
        <trans-unit id="d282c0eabd4f9e81f328fc0ce9f50d551bd2dca9" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::freeze</source>
          <target state="translated">std::strstreambuf::freeze</target>
        </trans-unit>
        <trans-unit id="36dd89a6e579f85a289c5db01b38a447ace488a6" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::overflow</source>
          <target state="translated">std::strstreambuf::overflow</target>
        </trans-unit>
        <trans-unit id="99bfc40397eb99a49b6e663c53a2dac87b4703a8" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::pbackfail</source>
          <target state="translated">std::strstreambuf::pbackfail</target>
        </trans-unit>
        <trans-unit id="d4af76c74366702c5827857301a5982b6b616462" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::pcount</source>
          <target state="translated">std::strstreambuf::pcount</target>
        </trans-unit>
        <trans-unit id="492de5c2e694acbe74097c843ff8a1d51bd6866f" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::seekoff</source>
          <target state="translated">std::strstreambuf::seekoff</target>
        </trans-unit>
        <trans-unit id="653ddf2227b85a09f8e5417696bb33750903d1e5" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::seekpos</source>
          <target state="translated">std::strstreambuf::seekpos</target>
        </trans-unit>
        <trans-unit id="3d742992cfa8ca79520aa2ec919e09a1fc2c810b" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::setbuf</source>
          <target state="translated">std::strstreambuf::setbuf</target>
        </trans-unit>
        <trans-unit id="3447d3587f922ef307feca033b7ed7f7880aec06" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::str</source>
          <target state="translated">std::strstreambuf::str</target>
        </trans-unit>
        <trans-unit id="522ee50e61a06df23afd8fe349d77ed3fd813c0f" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::strstreambuf</source>
          <target state="translated">std::strstreambuf::strstreambuf</target>
        </trans-unit>
        <trans-unit id="3b72794af724709616b323186a736f9970faea55" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::underflow</source>
          <target state="translated">std::strstreambuf::underflow</target>
        </trans-unit>
        <trans-unit id="c6679fd14feeaf67d3e452dae21be6f2635e5d84" translate="yes" xml:space="preserve">
          <source>std::strstreambuf::~strstreambuf</source>
          <target state="translated">std::strstreambuf::~strstreambuf</target>
        </trans-unit>
        <trans-unit id="1a77effcbe394d5f206e321d95341b5c3b314978" translate="yes" xml:space="preserve">
          <source>std::strtof, std::strtod, std::strtold</source>
          <target state="translated">&quot;strtof,strtod,strtold</target>
        </trans-unit>
        <trans-unit id="0c622ab0c6e8271d3069889f23e814592cc996d0" translate="yes" xml:space="preserve">
          <source>std::strtoimax, std::strtoumax</source>
          <target state="translated">std::strtoimax,std::strtoumax</target>
        </trans-unit>
        <trans-unit id="c2662ba636705ae9b4c67790f560c72c3345017c" translate="yes" xml:space="preserve">
          <source>std::strtok</source>
          <target state="translated">std::strtok</target>
        </trans-unit>
        <trans-unit id="22c5cc5c35112af282cef72f3a42b7614ea4580c" translate="yes" xml:space="preserve">
          <source>std::strtol, std::strtoll</source>
          <target state="translated">std::strtol,std:strtoll</target>
        </trans-unit>
        <trans-unit id="8915b6889f8e4c643c8d6b1a8a0a3fca7c53fff6" translate="yes" xml:space="preserve">
          <source>std::strtold</source>
          <target state="translated">std::strtold</target>
        </trans-unit>
        <trans-unit id="664af48de98dcca135f92f80f32a47db726057af" translate="yes" xml:space="preserve">
          <source>std::strtoll</source>
          <target state="translated">std::strtoll</target>
        </trans-unit>
        <trans-unit id="0fa6ae035753d4cc076b474801ec2a79c396de29" translate="yes" xml:space="preserve">
          <source>std::strtoul, std::strtoull</source>
          <target state="translated">std::strtoul,std:strtoull</target>
        </trans-unit>
        <trans-unit id="7a3ed7451de58d39f77084039186e27fbce55e56" translate="yes" xml:space="preserve">
          <source>std::strtoull</source>
          <target state="translated">std::strtoull</target>
        </trans-unit>
        <trans-unit id="efdabee2beedbe6d5f2e07a8fde1c47ef3cc65f5" translate="yes" xml:space="preserve">
          <source>std::strtoumax</source>
          <target state="translated">std::strtoumax</target>
        </trans-unit>
        <trans-unit id="a75b1453fc2c35ee54a8925a1c96f0d506753d83" translate="yes" xml:space="preserve">
          <source>std::strxfrm</source>
          <target state="translated">std::strxfrm</target>
        </trans-unit>
        <trans-unit id="c4efd8fa544ed3267aa618216824ddd9b586b519" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution</source>
          <target state="translated">std::student_t_distribution</target>
        </trans-unit>
        <trans-unit id="120c26fb98f3a0158c72247849f05b90ed6dbac2" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::max</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="42d7cc357ec1bc93b95775fc729b0f3b8c68b579" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::min</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="c381303a59e3b0c823119940f20ca61fc6edd764" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::n</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::n</target>
        </trans-unit>
        <trans-unit id="62042c470ae89fd04b09049f5cc6f367eee69fc6" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::operator()</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="b8ebdb12b66176d8115dd5d5294e9239ac975bbd" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::param</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::param</target>
        </trans-unit>
        <trans-unit id="86d2b2bb987ab5b1dddc268a33087376c4e892b4" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::reset</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="47dbc4dc0c6bcbfd5cfa16b0179904ef91b9e78b" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution&amp;lt;RealType&amp;gt;::student_t_distribution</source>
          <target state="translated">std::student_t_distribution&amp;lt;RealType&amp;gt;::student_t_distribution</target>
        </trans-unit>
        <trans-unit id="472bc16801425e4d4007da0bc253bc8477617f63" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::max</source>
          <target state="translated">std::student_t_distribution::max</target>
        </trans-unit>
        <trans-unit id="f27fb8df045cb9774442e56ee1149d242c98909c" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::min</source>
          <target state="translated">std::student_t_distribution::min</target>
        </trans-unit>
        <trans-unit id="ecf5e926d286e1e5179f43f5a1391ea151d771cb" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::n</source>
          <target state="translated">std::student_t_distribution::n</target>
        </trans-unit>
        <trans-unit id="80b70a61c2bb244f6262705a29890748899cc458" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::operator()</source>
          <target state="translated">std::student_t_distribution::operator()</target>
        </trans-unit>
        <trans-unit id="ca76eb951d0762678025676ad382c57fbaadd6ee" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::param</source>
          <target state="translated">std::student_t_distribution::param</target>
        </trans-unit>
        <trans-unit id="f9e1367c146aae527a32600665c7bce34b30a655" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::reset</source>
          <target state="translated">std::student_t_distribution::reset</target>
        </trans-unit>
        <trans-unit id="7312b46b2355f96dd2a5bb0c309b47ff7bdc9fcf" translate="yes" xml:space="preserve">
          <source>std::student_t_distribution::student_t_distribution</source>
          <target state="translated">std::student_t_distribution::student_t_distribution</target>
        </trans-unit>
        <trans-unit id="5efe3d90fd562cc9ea054605f342e8f0cc4d3917" translate="yes" xml:space="preserve">
          <source>std::sub_match</source>
          <target state="translated">std::sub_match</target>
        </trans-unit>
        <trans-unit id="50e647fbb34bbd4926c61e90950c2cb5f9d324eb" translate="yes" xml:space="preserve">
          <source>std::sub_match&amp;lt;BidirIt&amp;gt;::compare</source>
          <target state="translated">std::sub_match&amp;lt;BidirIt&amp;gt;::compare</target>
        </trans-unit>
        <trans-unit id="b43e4ae4ddb4a3e246d4789ab1687f9856fab761" translate="yes" xml:space="preserve">
          <source>std::sub_match&amp;lt;BidirIt&amp;gt;::length</source>
          <target state="translated">std::sub_match&amp;lt;BidirIt&amp;gt;::length</target>
        </trans-unit>
        <trans-unit id="c89b4ad8307c8b1fe4b910f33f0d9760972ef06b" translate="yes" xml:space="preserve">
          <source>std::sub_match&amp;lt;BidirIt&amp;gt;::operator string_type, std::sub_match&amp;lt;BidirIt&amp;gt;::str</source>
          <target state="translated">std :: sub_match &amp;lt;BidirIt&amp;gt; :: оператор string_type, std :: sub_match &amp;lt;BidirIt&amp;gt; :: str</target>
        </trans-unit>
        <trans-unit id="1b3b3acaea5e989e74abe6b073c2b336869bfb98" translate="yes" xml:space="preserve">
          <source>std::sub_match&amp;lt;BidirIt&amp;gt;::sub_match</source>
          <target state="translated">std::sub_match&amp;lt;BidirIt&amp;gt;::sub_match</target>
        </trans-unit>
        <trans-unit id="f8182882ecae703c2751af8c5f041579d45aee47" translate="yes" xml:space="preserve">
          <source>std::sub_match::compare</source>
          <target state="translated">std::sub_match::compare</target>
        </trans-unit>
        <trans-unit id="4a1d115685288dea8fa779f976a6ea566286f84a" translate="yes" xml:space="preserve">
          <source>std::sub_match::length</source>
          <target state="translated">std::sub_match::length</target>
        </trans-unit>
        <trans-unit id="163b4ae587dcba80232d9a4ef70b2e49f8ff2c67" translate="yes" xml:space="preserve">
          <source>std::sub_match::str</source>
          <target state="translated">std::sub_match::str</target>
        </trans-unit>
        <trans-unit id="665ccaa8f3cab1b67ff86b4b2f9e089f13719686" translate="yes" xml:space="preserve">
          <source>std::sub_match::sub_match</source>
          <target state="translated">std::sub_match::sub_match</target>
        </trans-unit>
        <trans-unit id="be2472a325fb70f77f5fd6297300a1a01d8eb9c9" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine</source>
          <target state="translated">std::subtract_with_carry_engine</target>
        </trans-unit>
        <trans-unit id="bf3e7bc4ea7f0c2ee37aefe87fe4d41cd3216924" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::discard</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::discard</target>
        </trans-unit>
        <trans-unit id="75d3e04c5f64b0bcb90224599aad3caf6d0f2dd0" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::max</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="c2b76fbb47a72aee01df7f1651bf41c720f4fdb6" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::min</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="62a3797d0b160f84cce32e9a4f3c52cb5dc26dd8" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::operator()</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="0e5da6ac62ab5e5c213271744c55ec520524e12e" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::seed</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::seed</target>
        </trans-unit>
        <trans-unit id="1a95636c6cf09aba4e673aefee4e37ae28a91b81" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::subtract_with_carry_engine</source>
          <target state="translated">std::subtract_with_carry_engine&amp;lt;UIntType,w,s,r&amp;gt;::subtract_with_carry_engine</target>
        </trans-unit>
        <trans-unit id="ed825b02a84ffe045333972cb86bdb5249336dba" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::discard</source>
          <target state="translated">std::subtract_with_carry_engine::discard</target>
        </trans-unit>
        <trans-unit id="6baf01503e7659e44ea901fbe6db6d40fa2cc7c6" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::max</source>
          <target state="translated">std::subtract_with_carry_engine::max</target>
        </trans-unit>
        <trans-unit id="7d0a3049f4c9d6a429bfdb323cacae4ac1038878" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::min</source>
          <target state="translated">std::subtract_with_carry_engine::min</target>
        </trans-unit>
        <trans-unit id="4dbb91c15d49ecc555e1f0028b098d0c1b80b2f2" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::operator()</source>
          <target state="translated">std::subtract_with_carry_engine::operator()</target>
        </trans-unit>
        <trans-unit id="3c58e062f0764077e9e4fb0e51ba324fa3038070" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::seed</source>
          <target state="translated">std::subtract_with_carry_engine::seed</target>
        </trans-unit>
        <trans-unit id="4d3ec8c3f7dd0dffbee45b00820b86d79d14a4d6" translate="yes" xml:space="preserve">
          <source>std::subtract_with_carry_engine::subtract_with_carry_engine</source>
          <target state="translated">std::subtract_with_carry_engine::subtract_with_carry_engine</target>
        </trans-unit>
        <trans-unit id="09456e01ce124c1b7ee5b90f34ab99a71705bdd2" translate="yes" xml:space="preserve">
          <source>std::swap</source>
          <target state="translated">std::swap</target>
        </trans-unit>
        <trans-unit id="c44dac8892ad8c40aa28da84a67a9395fd4d87ae" translate="yes" xml:space="preserve">
          <source>std::swap(std::any)</source>
          <target state="translated">std::swap(std::any)</target>
        </trans-unit>
        <trans-unit id="7582efd19678004e54cf522843a9025fa079a9a8" translate="yes" xml:space="preserve">
          <source>std::swap(std::array)</source>
          <target state="translated">std::swap(std::array)</target>
        </trans-unit>
        <trans-unit id="309a405171404510fddc1a7b84c7de7aa94c5343" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_filebuf)</source>
          <target state="translated">std::swap(std::basic_filebuf)</target>
        </trans-unit>
        <trans-unit id="57b35662a86166a376bb23182bc2c7385a423d8d" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_fstream)</source>
          <target state="translated">std::swap(std::basic_fstream)</target>
        </trans-unit>
        <trans-unit id="75d257e72dc23d7f9b122ce1b15be1a7d9490181" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_ifstream)</source>
          <target state="translated">std::swap(std::basic_ifstream)</target>
        </trans-unit>
        <trans-unit id="852b7d96a771ab24c9499c907425260e7a511b33" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_istringstream)</source>
          <target state="translated">std::swap(std::basic_istringstream)</target>
        </trans-unit>
        <trans-unit id="af6e4ab87c7bbc2544eb7d724db8d8e31150e229" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_ofstream)</source>
          <target state="translated">std::swap(std::basic_ofstream)</target>
        </trans-unit>
        <trans-unit id="afc06bf6850dbf2364966f60e48c30ec59b2cd46" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_ostringstream)</source>
          <target state="translated">std::swap(std::basic_ostringstream)</target>
        </trans-unit>
        <trans-unit id="49b45c1480262d3299e44d68d888aac8a48b1334" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_regex)</source>
          <target state="translated">std::swap(std::basic_regex)</target>
        </trans-unit>
        <trans-unit id="01ffac651eea70b7d575bc853bc098010f438023" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_string)</source>
          <target state="translated">std::swap(std::basic_string)</target>
        </trans-unit>
        <trans-unit id="1d8b1b326cbc12971554c923758b495bbd43b4bf" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_stringbuf)</source>
          <target state="translated">std::swap(std::basic_stringbuf)</target>
        </trans-unit>
        <trans-unit id="49c755a16d2ae6ff443f42ddd4b617d3ef873de6" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_stringstream)</source>
          <target state="translated">std::swap(std::basic_stringstream)</target>
        </trans-unit>
        <trans-unit id="e635078c9f616c924a72427f5cde29ba1cd90822" translate="yes" xml:space="preserve">
          <source>std::swap(std::basic_syncbuf)</source>
          <target state="translated">std::swap(std::basic_syncbuf)</target>
        </trans-unit>
        <trans-unit id="2a31f64394770b48a6c56133c5afb72d1bcb4ed6" translate="yes" xml:space="preserve">
          <source>std::swap(std::deque)</source>
          <target state="translated">std::swap(std::deque)</target>
        </trans-unit>
        <trans-unit id="5b93f1857e62cf148a4b0c9cb4a43126fa2aabc7" translate="yes" xml:space="preserve">
          <source>std::swap(std::forward_list)</source>
          <target state="translated">std::swap(std::forward_list)</target>
        </trans-unit>
        <trans-unit id="c4ccef2d4c5503df7717c6fae400b7ae9114f270" translate="yes" xml:space="preserve">
          <source>std::swap(std::function)</source>
          <target state="translated">std::swap(std::function)</target>
        </trans-unit>
        <trans-unit id="2aa2202fe5e652a4bb5504f58c163f28a2e6eb33" translate="yes" xml:space="preserve">
          <source>std::swap(std::list)</source>
          <target state="translated">std::swap(std::list)</target>
        </trans-unit>
        <trans-unit id="6a2a7a0532e41ffe5fc649f01dc2fc0345095372" translate="yes" xml:space="preserve">
          <source>std::swap(std::map)</source>
          <target state="translated">std::swap(std::map)</target>
        </trans-unit>
        <trans-unit id="0f26ba29b7c5d92cf613803815c6263ca424136a" translate="yes" xml:space="preserve">
          <source>std::swap(std::match_results)</source>
          <target state="translated">std::swap(std::match_results)</target>
        </trans-unit>
        <trans-unit id="c25e27ee0dd088050cb1499c2ff4ff8acd69c838" translate="yes" xml:space="preserve">
          <source>std::swap(std::multimap)</source>
          <target state="translated">std::swap(std::multimap)</target>
        </trans-unit>
        <trans-unit id="8f3117180a4db4ea15cda3f40c54527333db7763" translate="yes" xml:space="preserve">
          <source>std::swap(std::multiset)</source>
          <target state="translated">std::swap(std::multiset)</target>
        </trans-unit>
        <trans-unit id="1497a17658f71d18b0ce36ca049e7743d299f6a8" translate="yes" xml:space="preserve">
          <source>std::swap(std::optional)</source>
          <target state="translated">std::swap(std::optional)</target>
        </trans-unit>
        <trans-unit id="4cb32da1267a54cf76bbc9ea32ebba0410ad29fc" translate="yes" xml:space="preserve">
          <source>std::swap(std::packaged_task)</source>
          <target state="translated">std::swap(std::packaged_task)</target>
        </trans-unit>
        <trans-unit id="7139d9c9d062197f9a03436ed6edeab5ddb9120d" translate="yes" xml:space="preserve">
          <source>std::swap(std::pair)</source>
          <target state="translated">std::swap(std::pair)</target>
        </trans-unit>
        <trans-unit id="daf09a221da7a68cd80e8daef8bdd3d55addc220" translate="yes" xml:space="preserve">
          <source>std::swap(std::priority_queue)</source>
          <target state="translated">std::swap(std::priority_queue)</target>
        </trans-unit>
        <trans-unit id="75152e6018cab63afd0318251cee028e9167cb2a" translate="yes" xml:space="preserve">
          <source>std::swap(std::promise)</source>
          <target state="translated">std::swap(std::promise)</target>
        </trans-unit>
        <trans-unit id="6978fe3a874431e320136e07b3e8f512d2b516ae" translate="yes" xml:space="preserve">
          <source>std::swap(std::queue)</source>
          <target state="translated">std::swap(std::queue)</target>
        </trans-unit>
        <trans-unit id="86c090893429a5013c90fa6c0ae9924c920db7b3" translate="yes" xml:space="preserve">
          <source>std::swap(std::set)</source>
          <target state="translated">std::swap(std::set)</target>
        </trans-unit>
        <trans-unit id="9dea95c36f0baae74c439e05ccd16c277de150b9" translate="yes" xml:space="preserve">
          <source>std::swap(std::shared_lock)</source>
          <target state="translated">std::swap(std::shared_lock)</target>
        </trans-unit>
        <trans-unit id="e44e4db4431eea9b1e11d2a931ad7bb026bfa12a" translate="yes" xml:space="preserve">
          <source>std::swap(std::shared_ptr)</source>
          <target state="translated">std::swap(std::shared_ptr)</target>
        </trans-unit>
        <trans-unit id="a506914df894fdd8b7f97807cd2e8a4b3edef73b" translate="yes" xml:space="preserve">
          <source>std::swap(std::stack)</source>
          <target state="translated">std::swap(std::stack)</target>
        </trans-unit>
        <trans-unit id="7a8b99b735c534c3ad7ecb51f35ac934d2ba670a" translate="yes" xml:space="preserve">
          <source>std::swap(std::thread)</source>
          <target state="translated">std::swap(std::thread)</target>
        </trans-unit>
        <trans-unit id="817c8a0a09d04ec7f27d6ac1beefac56245dbf1c" translate="yes" xml:space="preserve">
          <source>std::swap(std::tuple)</source>
          <target state="translated">std::swap(std::tuple)</target>
        </trans-unit>
        <trans-unit id="e418c24c3cc531f5b00c83f8b8dfe0ea3006ec18" translate="yes" xml:space="preserve">
          <source>std::swap(std::unique_lock)</source>
          <target state="translated">std::swap(std::unique_lock)</target>
        </trans-unit>
        <trans-unit id="32aac1d936fb6e7287bfd384d59273252a6cf4af" translate="yes" xml:space="preserve">
          <source>std::swap(std::unique_ptr)</source>
          <target state="translated">std::swap(std::unique_ptr)</target>
        </trans-unit>
        <trans-unit id="beb3af4a5ea1196037fc6c8ab6b1eb356cd5529d" translate="yes" xml:space="preserve">
          <source>std::swap(std::unordered_map)</source>
          <target state="translated">std::swap(std::unordered_map)</target>
        </trans-unit>
        <trans-unit id="d00b9c20092d9e253e7e7ef86da868ac035689dc" translate="yes" xml:space="preserve">
          <source>std::swap(std::unordered_multimap)</source>
          <target state="translated">std::swap(std::unordered_multimap)</target>
        </trans-unit>
        <trans-unit id="671827ef6b7d355b4fd8f65b0d0fd5119468aec5" translate="yes" xml:space="preserve">
          <source>std::swap(std::unordered_multiset)</source>
          <target state="translated">std::swap(std::unordered_multiset)</target>
        </trans-unit>
        <trans-unit id="c7815236fe48bed79551721c21aa4de4adc05886" translate="yes" xml:space="preserve">
          <source>std::swap(std::unordered_set)</source>
          <target state="translated">std::swap(std::unordered_set)</target>
        </trans-unit>
        <trans-unit id="a4fe7e8b584fdda5426a8921231ecd871aa2d845" translate="yes" xml:space="preserve">
          <source>std::swap(std::valarray)</source>
          <target state="translated">std::swap(std::valarray)</target>
        </trans-unit>
        <trans-unit id="029ef115a2b3be41d58dfee9832a4622eddb49f2" translate="yes" xml:space="preserve">
          <source>std::swap(std::variant)</source>
          <target state="translated">std::swap(std::variant)</target>
        </trans-unit>
        <trans-unit id="6e4ba96125fd045e9a2d2741d5a35d3f49b46264" translate="yes" xml:space="preserve">
          <source>std::swap(std::vector)</source>
          <target state="translated">std::swap(std::vector)</target>
        </trans-unit>
        <trans-unit id="68352f604ef3fcec0e5b6401b32de514ccb97bad" translate="yes" xml:space="preserve">
          <source>std::swap(std::weak_ptr)</source>
          <target state="translated">std::swap(std::weak_ptr)</target>
        </trans-unit>
        <trans-unit id="d3d6deb6b7862ed04707928713daa023f483324c" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::array)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::array)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="11dc05689c333ef5cf4a668e521a67fe8f2ba85f" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_filebuf)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_filebuf)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4dcf8cea9a1d972d7656890dd7334f928f7fd98a" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_fstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_fstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98777689e833848c1fc18c5e5c14c040a2d3721e" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_ifstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_ifstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a4d22b9d7ee2ee71fe3ec73d8178996adf146707" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_istringstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_istringstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7503135b5938b699642e3ca54becf66ebd1df451" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_ofstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_ofstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b0ea56df2fad5b84de2eb6a41a072526614958ee" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_ostringstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_ostringstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8baa45b0fe205e9b47be3cd18f36542c4c0eb160" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_regex)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_regex)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="27a4a0bb2452fcd693820803797bb01568b11f3b" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_string)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_string)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a2443c4c53f186e6248c98c466055606deccd803" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_stringbuf)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_stringbuf)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="68d35fd53cfae22ea116c9cc604b7c2346bd8c0a" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_stringstream)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_stringstream)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8dc5fb309abee0dd44895da0c7aeffc268d58e0b" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::basic_syncbuf)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::basic_syncbuf)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="58cc9046f13d19a7b16ec6627c37a3213cb1ed3a" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::deque)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::deque)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0a3e0384c23d45b5b93a3ba4aad926869956ea3e" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::forward_list)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::forward_list)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0bab515d6d78a590440a0b3728cdabec72484d01" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::function)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::function)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bff8ef5347889692b4c8f5d4ff961f34acc87e8e" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::list)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::list)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0b40f159e0f2d770447a23adad5bad54cac4c327" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::map)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::map)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="86748040fe8b39e87d409fb4365c45a0080dba00" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::multimap)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::multimap)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ada53a301bbc55c5148019a2f06bd43ccc19ea9a" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::multiset)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::multiset)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="dacdc390e89af6e4c44c69d3c42874925ccd07d0" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::packaged_task)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::packaged_task)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f147807456e20ab28faeefbdeab323a8852fd45f" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::pair)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::pair)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d85d13cfa5b36b792bf8ab44af7aa15106f26fb5" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::priority_queue)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::priority_queue)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f8cc8c4e03c288726803adbe59a773f894ba477c" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::promise)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::promise)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6bda0e7bff99d2f363ebe76e52fec113ba9e1caf" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::queue)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::queue)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="858b4cd001d43fccace79ec245786bb4f7add4bc" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::set)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::set)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3aea6a9054582ac87e38f72b2c07989ee49124ab" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::shared_lock)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::shared_lock)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f79bbe5bbd273c3e96b9dc3524d441520d972e13" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::shared_ptr)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::shared_ptr)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2a49d056b7994c220368c86fc004023dae2c8433" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::stack)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::stack)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fa9b055651c8f0291c4a50b23b38bc4af232caa5" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::tuple)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::tuple)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="893e5d5076b186aea5dddfc0da126c749d3a07ce" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unique_lock)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unique_lock)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d258f56a03c3184f379b8c090b647de69e0d6a35" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unique_ptr)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unique_ptr)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ba9943e554830f8c7bbac68cb899c36cc0f1b9dd" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unordered_map)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unordered_map)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0f6ca1777c5e6b8498741697b597b8e5cf052275" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unordered_multimap)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unordered_multimap)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="30b2da4b8845645451d3ee1194bc0e4cff0a1661" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unordered_multiset)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unordered_multiset)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ffba749be03d735d13c67c2449c675769735a91f" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::unordered_set)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::unordered_set)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6801282f3703cb3a1633d3db0488481f93f714c7" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::valarray)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::valarray)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9dd3bfe085191b50a96ff7a7afdc480099023c79" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::vector)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::vector)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5bbc66ea374a12ed83219996c6259c70e1a835ba" translate="yes" xml:space="preserve">
          <source>std::swap&lt;small&gt;(std::weak_ptr)&lt;/small&gt;</source>
          <target state="translated">std::swap&lt;small&gt;(std::weak_ptr)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7a3720b05ade0cfcc14470c2220c4a6864f1705a" translate="yes" xml:space="preserve">
          <source>std::swap_ranges</source>
          <target state="translated">std::swap_ranges</target>
        </trans-unit>
        <trans-unit id="fd768ec4474181b2db06338f54ae6e54cc916c27" translate="yes" xml:space="preserve">
          <source>std::system</source>
          <target state="translated">std::system</target>
        </trans-unit>
        <trans-unit id="26a4f5f97439fc5950b08e60def6661790636975" translate="yes" xml:space="preserve">
          <source>std::system_category</source>
          <target state="translated">std::system_category</target>
        </trans-unit>
        <trans-unit id="ae8396c2b109d0fcaff1b57e369252fdb6bf7b45" translate="yes" xml:space="preserve">
          <source>std::system_error</source>
          <target state="translated">std::system_error</target>
        </trans-unit>
        <trans-unit id="6c424d3a14a72f74bad85441f8cfaacc5ddfa654" translate="yes" xml:space="preserve">
          <source>std::system_error::code</source>
          <target state="translated">std::system_error::code</target>
        </trans-unit>
        <trans-unit id="2d48dc663f7f35c5ab388acaecf42390796c12eb" translate="yes" xml:space="preserve">
          <source>std::system_error::system_error</source>
          <target state="translated">std::system_error::system_error</target>
        </trans-unit>
        <trans-unit id="379d66c2001d83c62e957c043e7f3a1fbe07268c" translate="yes" xml:space="preserve">
          <source>std::system_error::what</source>
          <target state="translated">std::system_error::what</target>
        </trans-unit>
        <trans-unit id="e05f13bc966309b7afb9e9171218b171d59894b5" translate="yes" xml:space="preserve">
          <source>std::tan(std::complex)</source>
          <target state="translated">std::tan(std::complex)</target>
        </trans-unit>
        <trans-unit id="4d75f333990c1787b9eae99dd8b0bf8a3e6b86f4" translate="yes" xml:space="preserve">
          <source>std::tan(std::valarray)</source>
          <target state="translated">std::tan(std::valarray)</target>
        </trans-unit>
        <trans-unit id="50dbacd2033fcd5c558048b02b1104e1d536215b" translate="yes" xml:space="preserve">
          <source>std::tan, std::tanf, std::tanl</source>
          <target state="translated">std::tan,std:tanf,std:tanl</target>
        </trans-unit>
        <trans-unit id="3777bcbca6d88eb84ec25815c767037f5b7ced92" translate="yes" xml:space="preserve">
          <source>std::tanh(std::complex)</source>
          <target state="translated">std::tanh(std::complex)</target>
        </trans-unit>
        <trans-unit id="86cd54f6bc4b171a4046af884c68b18c55765443" translate="yes" xml:space="preserve">
          <source>std::tanh(std::valarray)</source>
          <target state="translated">std::tanh(std::valarray)</target>
        </trans-unit>
        <trans-unit id="c2d7c8290b53414b51b44610883ec92a886214c7" translate="yes" xml:space="preserve">
          <source>std::tanh, std::tanhf, std::tanhl</source>
          <target state="translated">std::tanh,std:tanhf,std:tanhl</target>
        </trans-unit>
        <trans-unit id="93748b3785b5b27062ffdd8c0505493bf714bfb2" translate="yes" xml:space="preserve">
          <source>std::tanhl</source>
          <target state="translated">std::tanhl</target>
        </trans-unit>
        <trans-unit id="751d100336b5cef4d9d3b8fc36da035f6f31a51b" translate="yes" xml:space="preserve">
          <source>std::tanl</source>
          <target state="translated">std::tanl</target>
        </trans-unit>
        <trans-unit id="5b580ca0acc4a6ff7751687401c0c30f47d462fb" translate="yes" xml:space="preserve">
          <source>std::terminate</source>
          <target state="translated">std::terminate</target>
        </trans-unit>
        <trans-unit id="9d3385eb0e6fb3734b9e216779edd7e26e6ab302" translate="yes" xml:space="preserve">
          <source>std::terminate_handler</source>
          <target state="translated">std::terminate_handler</target>
        </trans-unit>
        <trans-unit id="a1f4d97d410df2646564b5ee95f17120acd55ae3" translate="yes" xml:space="preserve">
          <source>std::tgamma, std::tgammaf, std::tgammal</source>
          <target state="translated">std::tgamma,std::tgammaf,std::tgammal</target>
        </trans-unit>
        <trans-unit id="a2c4fc9d186b667ad74239a0915b662944ab998f" translate="yes" xml:space="preserve">
          <source>std::tgammal</source>
          <target state="translated">std::tgammal</target>
        </trans-unit>
        <trans-unit id="9115a3e35dc0e5df54a57e74eae346fe3536ebe7" translate="yes" xml:space="preserve">
          <source>std::this_thread::get_id</source>
          <target state="translated">std::this_thread::get_id</target>
        </trans-unit>
        <trans-unit id="cf38ededd90956783433e255081ceb3fd004f30a" translate="yes" xml:space="preserve">
          <source>std::this_thread::sleep_for</source>
          <target state="translated">std::this_thread::sleep_for</target>
        </trans-unit>
        <trans-unit id="03a7ace3c86b365b6fdbce6891e1217d59d5d80f" translate="yes" xml:space="preserve">
          <source>std::this_thread::sleep_until</source>
          <target state="translated">std::this_thread::sleep_until</target>
        </trans-unit>
        <trans-unit id="9adfa5502019957f6ee7e9bfeb8c2309134fe8a3" translate="yes" xml:space="preserve">
          <source>std::this_thread::yield</source>
          <target state="translated">std::this_thread::yield</target>
        </trans-unit>
        <trans-unit id="025354ad97de5aa10bf19325068d82ad5c16d66f" translate="yes" xml:space="preserve">
          <source>std::thread</source>
          <target state="translated">std::thread</target>
        </trans-unit>
        <trans-unit id="8e464c5c39d21320df10924e210e591170ae60b0" translate="yes" xml:space="preserve">
          <source>std::thread::detach</source>
          <target state="translated">std::thread::detach</target>
        </trans-unit>
        <trans-unit id="62cd4eb40ea05affbb093906541e98d20cb3be9d" translate="yes" xml:space="preserve">
          <source>std::thread::get_id</source>
          <target state="translated">std::thread::get_id</target>
        </trans-unit>
        <trans-unit id="e03ed3f8415b617247bd43f391ef1c3eba1855a5" translate="yes" xml:space="preserve">
          <source>std::thread::hardware_concurrency</source>
          <target state="translated">std::thread::hardware_concurrency</target>
        </trans-unit>
        <trans-unit id="91355743ec940f040fe30668410da6e0d5d6bfc0" translate="yes" xml:space="preserve">
          <source>std::thread::id</source>
          <target state="translated">std::thread::id</target>
        </trans-unit>
        <trans-unit id="13075abca0a0474a23b8bd64758d007e02a2a28b" translate="yes" xml:space="preserve">
          <source>std::thread::id::id</source>
          <target state="translated">std::thread::id::id</target>
        </trans-unit>
        <trans-unit id="e329d2551d982c59c8899018727c36eb2b93e8f0" translate="yes" xml:space="preserve">
          <source>std::thread::join</source>
          <target state="translated">std::thread::join</target>
        </trans-unit>
        <trans-unit id="a9851b8ec26318f70bb8fc5b44c608af1948aaeb" translate="yes" xml:space="preserve">
          <source>std::thread::joinable</source>
          <target state="translated">std::thread::joinable</target>
        </trans-unit>
        <trans-unit id="d589e67e8e2ec2eb589d94b973fa3e9f041695e8" translate="yes" xml:space="preserve">
          <source>std::thread::native_handle</source>
          <target state="translated">std::thread::native_handle</target>
        </trans-unit>
        <trans-unit id="ec4a834e390b51bb538ca2b6e09af48ad2e804c8" translate="yes" xml:space="preserve">
          <source>std::thread::operator=</source>
          <target state="translated">std::thread::operator=</target>
        </trans-unit>
        <trans-unit id="d2810f17deeba65b4bc8f2510c3af28fa75c8570" translate="yes" xml:space="preserve">
          <source>std::thread::swap</source>
          <target state="translated">std::thread::swap</target>
        </trans-unit>
        <trans-unit id="d776580e46e1313068b6de170a6433d87a277a4b" translate="yes" xml:space="preserve">
          <source>std::thread::thread</source>
          <target state="translated">std::thread::thread</target>
        </trans-unit>
        <trans-unit id="5e40ceb1bf96d936155a29f701648a24a047ce01" translate="yes" xml:space="preserve">
          <source>std::thread::~thread</source>
          <target state="translated">std::thread::~thread</target>
        </trans-unit>
        <trans-unit id="01fed6df188a6d09145ba6c4f3a8c66a44bcd0dc" translate="yes" xml:space="preserve">
          <source>std::throw_with_nested</source>
          <target state="translated">std::throw_with_nested</target>
        </trans-unit>
        <trans-unit id="5262cc213ae292a48d370c843735a33fd45a3ee3" translate="yes" xml:space="preserve">
          <source>std::tie</source>
          <target state="translated">std::tie</target>
        </trans-unit>
        <trans-unit id="4a1c13e9d503b60d02a4138124431df301603359" translate="yes" xml:space="preserve">
          <source>std::time</source>
          <target state="translated">std::time</target>
        </trans-unit>
        <trans-unit id="b64932a8d6de9ddd20fa6138ae3ea5ead6936cec" translate="yes" xml:space="preserve">
          <source>std::time_base</source>
          <target state="translated">std::time_base</target>
        </trans-unit>
        <trans-unit id="91eb984fb72a081c4b84a33f8f58086d93cf4e93" translate="yes" xml:space="preserve">
          <source>std::time_get</source>
          <target state="translated">std::time_get</target>
        </trans-unit>
        <trans-unit id="58480e49bba6ab30ad787df87e2f1f856996543a" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::date_order, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_date_order</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: date_order, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_date_order</target>
        </trans-unit>
        <trans-unit id="ef2b5f66eda219d1e16561366f549f921fba81dd" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get</target>
        </trans-unit>
        <trans-unit id="3e3639b3d61d8549c0c9975632c048349ecc7217" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get_date, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get_date</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get_date, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get_date</target>
        </trans-unit>
        <trans-unit id="6fe9d53b545fae2398687acea8bc260c73e00eea" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get_monthname, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get_monthname</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get_monthname, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get_monthname</target>
        </trans-unit>
        <trans-unit id="86186387362baf029263b4c03e49fbd419661fec" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get_time, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get_time</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get_time, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get_time</target>
        </trans-unit>
        <trans-unit id="e2d0306cfa4c88aa935eedac21362b571e28f6ce" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get_weekday, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get_weekday</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get_weekday, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get_weekday</target>
        </trans-unit>
        <trans-unit id="6a9b916a4264c487fed69a3b4a321a3e684b436a" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::get_year, std::time_get&amp;lt;CharT,InputIt&amp;gt;::do_get_year</source>
          <target state="translated">std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: get_year, std :: time_get &amp;lt;CharT, InputIt&amp;gt; :: do_get_year</target>
        </trans-unit>
        <trans-unit id="10d40ee0872fe5e4fd3c814f6fc53d734a602e5d" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::time_get</source>
          <target state="translated">std::time_get&amp;lt;CharT,InputIt&amp;gt;::time_get</target>
        </trans-unit>
        <trans-unit id="6d4bc120c9fb7a363c96dbc35518619105c54a44" translate="yes" xml:space="preserve">
          <source>std::time_get&amp;lt;CharT,InputIt&amp;gt;::~time_get</source>
          <target state="translated">std::time_get&amp;lt;CharT,InputIt&amp;gt;::~time_get</target>
        </trans-unit>
        <trans-unit id="bd3ecbdd8cf5b7fd80b910674382bf4ae08887f6" translate="yes" xml:space="preserve">
          <source>std::time_get::do_date_order</source>
          <target state="translated">std::time_get::do_date_order</target>
        </trans-unit>
        <trans-unit id="a1aedadf29d837abc0afd9021b1f517cfcf38a88" translate="yes" xml:space="preserve">
          <source>std::time_get::get</source>
          <target state="translated">std::time_get::get</target>
        </trans-unit>
        <trans-unit id="3ec6034efa54ee09cc9ca41959e4cbab2dbce949" translate="yes" xml:space="preserve">
          <source>std::time_get::get_date</source>
          <target state="translated">std::time_get::get_date</target>
        </trans-unit>
        <trans-unit id="2fd27b51a647ce2489fdad3f2e8fd1e45392a6f1" translate="yes" xml:space="preserve">
          <source>std::time_get::get_monthname</source>
          <target state="translated">std::time_get::get_monthname</target>
        </trans-unit>
        <trans-unit id="8906f0c52ece136304eb72d98222372728295119" translate="yes" xml:space="preserve">
          <source>std::time_get::get_time</source>
          <target state="translated">std::time_get::get_time</target>
        </trans-unit>
        <trans-unit id="08ca48a841b877e966961ab76d7350da84620e75" translate="yes" xml:space="preserve">
          <source>std::time_get::get_weekday</source>
          <target state="translated">std::time_get::get_weekday</target>
        </trans-unit>
        <trans-unit id="11f84a964aae1c7b2c10cb0406b8a9ab995c3f4e" translate="yes" xml:space="preserve">
          <source>std::time_get::get_year</source>
          <target state="translated">std::time_get::get_year</target>
        </trans-unit>
        <trans-unit id="01f94ca3b9ea3343c8160df331e8c3ac49515698" translate="yes" xml:space="preserve">
          <source>std::time_get::time_get</source>
          <target state="translated">std::time_get::time_get</target>
        </trans-unit>
        <trans-unit id="92797b96fafc89e0ae86a169d00a8c287612892f" translate="yes" xml:space="preserve">
          <source>std::time_get::~time_get</source>
          <target state="translated">std::time_get::~time_get</target>
        </trans-unit>
        <trans-unit id="0471c8754ca49d36ef7e72fa3a332f7ad355363e" translate="yes" xml:space="preserve">
          <source>std::time_get_byname</source>
          <target state="translated">std::time_get_byname</target>
        </trans-unit>
        <trans-unit id="202f83eecaabdc8ff487a883dc347f8a2901a509" translate="yes" xml:space="preserve">
          <source>std::time_get_byname::time_get_byname</source>
          <target state="translated">std::time_get_byname::time_get_byname</target>
        </trans-unit>
        <trans-unit id="16d683e3fe870b473f0426abc55e1c7608c876fd" translate="yes" xml:space="preserve">
          <source>std::time_get_byname::~time_get_byname</source>
          <target state="translated">std::time_get_byname::~time_get_byname</target>
        </trans-unit>
        <trans-unit id="2fea219ece5dcd53913c780defce15f070bfa24a" translate="yes" xml:space="preserve">
          <source>std::time_put</source>
          <target state="translated">std::time_put</target>
        </trans-unit>
        <trans-unit id="d6bde5ad11d55dce365833c722872039f3c5d8bc" translate="yes" xml:space="preserve">
          <source>std::time_put&amp;lt;CharT,OutputIt&amp;gt;::put, std::time_put&amp;lt;CharT,OutputIt&amp;gt;::do_put</source>
          <target state="translated">std :: time_put &amp;lt;CharT, OutputIt&amp;gt; :: put, std :: time_put &amp;lt;CharT, OutputIt&amp;gt; :: do_put</target>
        </trans-unit>
        <trans-unit id="444a3fd85fe64c890b42819d8d36156270dbfa2e" translate="yes" xml:space="preserve">
          <source>std::time_put&amp;lt;CharT,OutputIt&amp;gt;::time_put</source>
          <target state="translated">std::time_put&amp;lt;CharT,OutputIt&amp;gt;::time_put</target>
        </trans-unit>
        <trans-unit id="50e6f57578cc6b5a13401aa1fc260e0e40b6b2b9" translate="yes" xml:space="preserve">
          <source>std::time_put&amp;lt;CharT,OutputIt&amp;gt;::~time_put</source>
          <target state="translated">std::time_put&amp;lt;CharT,OutputIt&amp;gt;::~time_put</target>
        </trans-unit>
        <trans-unit id="202f4cb89880906c5c6bbb9562bb33f636c36945" translate="yes" xml:space="preserve">
          <source>std::time_put::put</source>
          <target state="translated">std::time_put::put</target>
        </trans-unit>
        <trans-unit id="8599fd6c3e25c23bbeb56e2052a632e77afbf86e" translate="yes" xml:space="preserve">
          <source>std::time_put::time_put</source>
          <target state="translated">std::time_put::time_put</target>
        </trans-unit>
        <trans-unit id="d078b4ff5364d12b05241d9b2038c1117f0f2af5" translate="yes" xml:space="preserve">
          <source>std::time_put::~time_put</source>
          <target state="translated">std::time_put::~time_put</target>
        </trans-unit>
        <trans-unit id="5f869d3404b3bd58b6ac6937d34dff7a63155933" translate="yes" xml:space="preserve">
          <source>std::time_put_byname</source>
          <target state="translated">std::time_put_byname</target>
        </trans-unit>
        <trans-unit id="061890b3b345161a65c89441224f44d04bc29631" translate="yes" xml:space="preserve">
          <source>std::time_put_byname::time_put_byname</source>
          <target state="translated">std::time_put_byname::time_put_byname</target>
        </trans-unit>
        <trans-unit id="52a9d2b0ace240bfc163973721350d47b526f314" translate="yes" xml:space="preserve">
          <source>std::time_put_byname::~time_put_byname</source>
          <target state="translated">std::time_put_byname::~time_put_byname</target>
        </trans-unit>
        <trans-unit id="e26258d664f72f268dcc0e23b77c7d95dae5d1d0" translate="yes" xml:space="preserve">
          <source>std::time_t</source>
          <target state="translated">std::time_t</target>
        </trans-unit>
        <trans-unit id="da8535de78de632a39dafeb8b49aa87d0975227a" translate="yes" xml:space="preserve">
          <source>std::time_t tv_sec</source>
          <target state="translated">std::time_t tv_sec</target>
        </trans-unit>
        <trans-unit id="33afad3f5c9be5e590b37e9c883e123c468f8e28" translate="yes" xml:space="preserve">
          <source>std::timed_mutex</source>
          <target state="translated">std::timed_mutex</target>
        </trans-unit>
        <trans-unit id="caa5f8b11c3ba2d19be66232787229f4ca5a87d5" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::lock</source>
          <target state="translated">std::timed_mutex::lock</target>
        </trans-unit>
        <trans-unit id="81586416a047e5f11a3920fe6eddf2d650554a2b" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::native_handle</source>
          <target state="translated">std::timed_mutex::native_handle</target>
        </trans-unit>
        <trans-unit id="5df5f0fa6cfd136570498343be3adb7dcd26ef6d" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::timed_mutex</source>
          <target state="translated">std::timed_mutex::timed_mutex</target>
        </trans-unit>
        <trans-unit id="96628695ff531a6e52961480c420a9f5455f481c" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::try_lock</source>
          <target state="translated">std::timed_mutex::try_lock</target>
        </trans-unit>
        <trans-unit id="640ef98f9f4fc855c42f99bf97b1cdf03fe3f516" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::try_lock_for</source>
          <target state="translated">std::timed_mutex::try_lock_for</target>
        </trans-unit>
        <trans-unit id="bc9fcbd52418c8d3bc362085a7a55867e9dac4e0" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::try_lock_until</source>
          <target state="translated">std::timed_mutex::try_lock_until</target>
        </trans-unit>
        <trans-unit id="886b2e0f85a1e403c1fff33d3c56763c4d94df19" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::unlock</source>
          <target state="translated">std::timed_mutex::unlock</target>
        </trans-unit>
        <trans-unit id="dd50800e5b0e3746dc03668b38b8c17f4dcbceab" translate="yes" xml:space="preserve">
          <source>std::timed_mutex::~timed_mutex</source>
          <target state="translated">std::timed_mutex::~timed_mutex</target>
        </trans-unit>
        <trans-unit id="359e5939f5f7b3fe989ced50a0ae7e43c9647853" translate="yes" xml:space="preserve">
          <source>std::timespec</source>
          <target state="translated">std::timespec</target>
        </trans-unit>
        <trans-unit id="02e0781bc1e6813c85c4ecd48f25fb5e624cc225" translate="yes" xml:space="preserve">
          <source>std::timespec_get</source>
          <target state="translated">std::timespec_get</target>
        </trans-unit>
        <trans-unit id="640734af05dff90979402696d84dea0e4fb4e50f" translate="yes" xml:space="preserve">
          <source>std::tm</source>
          <target state="translated">std::tm</target>
        </trans-unit>
        <trans-unit id="ca2e24ac1f575a3adf524db9e1dac1bff0c66855" translate="yes" xml:space="preserve">
          <source>std::tmpfile</source>
          <target state="translated">std::tmpfile</target>
        </trans-unit>
        <trans-unit id="0ceb01e0488c4d12b929fff07cbe03a8ea4e1be0" translate="yes" xml:space="preserve">
          <source>std::tmpnam</source>
          <target state="translated">std::tmpnam</target>
        </trans-unit>
        <trans-unit id="5a98204362b2548c38d6fe257181783b816c208c" translate="yes" xml:space="preserve">
          <source>std::to_address</source>
          <target state="translated">std::to_address</target>
        </trans-unit>
        <trans-unit id="66040488199d1085cb8a9ca9bc432be2f3bd29ba" translate="yes" xml:space="preserve">
          <source>std::to_chars</source>
          <target state="translated">std::to_chars</target>
        </trans-unit>
        <trans-unit id="28aaa7807e36c2d5c990214da132769ddc7681bc" translate="yes" xml:space="preserve">
          <source>std::to_integer</source>
          <target state="translated">std::to_integer</target>
        </trans-unit>
        <trans-unit id="92d23c2b81918b2c6a4ccc4931f4b36f330849a9" translate="yes" xml:space="preserve">
          <source>std::to_string</source>
          <target state="translated">std::to_string</target>
        </trans-unit>
        <trans-unit id="0f53886cfb83d6f81a8b8d5d63ad7904fdc0e4bb" translate="yes" xml:space="preserve">
          <source>std::to_wstring</source>
          <target state="translated">std::to_wstring</target>
        </trans-unit>
        <trans-unit id="44c5ae7bea22efa8bfcd05726ee0cd15a0c4a221" translate="yes" xml:space="preserve">
          <source>std::tolower</source>
          <target state="translated">std::tolower</target>
        </trans-unit>
        <trans-unit id="99aa856628b1691caff6974b9f06d11ae25d21e6" translate="yes" xml:space="preserve">
          <source>std::tolower(std::locale)</source>
          <target state="translated">std::tolower(std::locale)</target>
        </trans-unit>
        <trans-unit id="c76761586a65e38ec717f4490d62ff603ba140a2" translate="yes" xml:space="preserve">
          <source>std::toupper</source>
          <target state="translated">std::toupper</target>
        </trans-unit>
        <trans-unit id="cc8c3d606a23ed03546dd8f4a18230aebf72e8ba" translate="yes" xml:space="preserve">
          <source>std::toupper(std::locale)</source>
          <target state="translated">std::toupper(std::locale)</target>
        </trans-unit>
        <trans-unit id="4052facf72f8b48d50d0a2a93c4d8920be53733b" translate="yes" xml:space="preserve">
          <source>std::towctrans</source>
          <target state="translated">std::towctrans</target>
        </trans-unit>
        <trans-unit id="d0c5528c8086266764194dacdc09217fda98a48e" translate="yes" xml:space="preserve">
          <source>std::towlower</source>
          <target state="translated">std::towlower</target>
        </trans-unit>
        <trans-unit id="061ae1fba85b804347ece9b97a4ee3fe1d7648a8" translate="yes" xml:space="preserve">
          <source>std::towupper</source>
          <target state="translated">std::towupper</target>
        </trans-unit>
        <trans-unit id="32efca4121174597bae9e1574585f5b1188b378f" translate="yes" xml:space="preserve">
          <source>std::transform</source>
          <target state="translated">std::transform</target>
        </trans-unit>
        <trans-unit id="104105116934415230cdd66061629711646b6138" translate="yes" xml:space="preserve">
          <source>std::transform_exclusive_scan</source>
          <target state="translated">std::transform_exclusive_scan</target>
        </trans-unit>
        <trans-unit id="56c5cf286d3822fe92fdf2d653f16e5879b2e63a" translate="yes" xml:space="preserve">
          <source>std::transform_inclusive_scan</source>
          <target state="translated">std::transform_inclusive_scan</target>
        </trans-unit>
        <trans-unit id="fd9abd778c437fb0c9b83f88a3a7d0be9ea15c1e" translate="yes" xml:space="preserve">
          <source>std::transform_reduce</source>
          <target state="translated">std::transform_reduce</target>
        </trans-unit>
        <trans-unit id="a1a39f88f8bab219f0221c6c39f540d485348580" translate="yes" xml:space="preserve">
          <source>std::trunc, std::truncf, std::truncl</source>
          <target state="translated">СТД:Транкф,СТД:Транкф,СТД:Транкф...</target>
        </trans-unit>
        <trans-unit id="aeb786623283377d173af311b23e5d8b6fafff0e" translate="yes" xml:space="preserve">
          <source>std::truncl</source>
          <target state="translated">std::truncl</target>
        </trans-unit>
        <trans-unit id="1f8f66ca298c261c6c2921b10bbafacf624cdc2b" translate="yes" xml:space="preserve">
          <source>std::try_lock</source>
          <target state="translated">std::try_lock</target>
        </trans-unit>
        <trans-unit id="f681c0f9a5a0a47c014680fce7317976f918c4e9" translate="yes" xml:space="preserve">
          <source>std::try_to_lock</source>
          <target state="translated">std::try_to_lock</target>
        </trans-unit>
        <trans-unit id="b856f532362b7d15c049a4986478b1c1c649675d" translate="yes" xml:space="preserve">
          <source>std::try_to_lock_t</source>
          <target state="translated">std::try_to_lock_t</target>
        </trans-unit>
        <trans-unit id="c184193701ca838da6cb4fea481648936dae69b1" translate="yes" xml:space="preserve">
          <source>std::tuple</source>
          <target state="translated">std::tuple</target>
        </trans-unit>
        <trans-unit id="0e8b345106637639ef59f685381f7a4b9ed5367d" translate="yes" xml:space="preserve">
          <source>std::tuple&amp;lt;Types...&amp;gt;::operator=</source>
          <target state="translated">std::tuple&amp;lt;Types...&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="3d705a0b7b5e2d3dcbdf51fe74c0f980faf8eecc" translate="yes" xml:space="preserve">
          <source>std::tuple&amp;lt;Types...&amp;gt;::swap</source>
          <target state="translated">std::tuple&amp;lt;Types...&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="63530360f82755154c14feadcecea131b3cfe6ae" translate="yes" xml:space="preserve">
          <source>std::tuple&amp;lt;Types...&amp;gt;::tuple</source>
          <target state="translated">std::tuple&amp;lt;Types...&amp;gt;::tuple</target>
        </trans-unit>
        <trans-unit id="85d8b2ae4530e802b81092e6775644904863d9c5" translate="yes" xml:space="preserve">
          <source>std::tuple::operator=</source>
          <target state="translated">std::tuple::operator=</target>
        </trans-unit>
        <trans-unit id="b91a8ad6f03b6b4a89bee133e94a483bf79b5337" translate="yes" xml:space="preserve">
          <source>std::tuple::swap</source>
          <target state="translated">std::tuple::swap</target>
        </trans-unit>
        <trans-unit id="7b07f71e3d9d9a8070670d1f09ea3c513ecc698a" translate="yes" xml:space="preserve">
          <source>std::tuple::tuple</source>
          <target state="translated">std::tuple::tuple</target>
        </trans-unit>
        <trans-unit id="b8505a1b4d72fd7eae2a055d55453267d6d18087" translate="yes" xml:space="preserve">
          <source>std::tuple_cat</source>
          <target state="translated">std::tuple_cat</target>
        </trans-unit>
        <trans-unit id="ac4b3ae04e13297242e748f3b37f2fe0b1db4af6" translate="yes" xml:space="preserve">
          <source>std::tuple_element</source>
          <target state="translated">std::tuple_element</target>
        </trans-unit>
        <trans-unit id="672d7d42e7da622da3645549456335c343762a64" translate="yes" xml:space="preserve">
          <source>std::tuple_element&amp;lt;std::array&amp;gt;</source>
          <target state="translated">std::tuple_element&amp;lt;std::array&amp;gt;</target>
        </trans-unit>
        <trans-unit id="db9155e91b059cccdd68ff90951172702abe2f00" translate="yes" xml:space="preserve">
          <source>std::tuple_element&amp;lt;std::pair&amp;gt;</source>
          <target state="translated">std::tuple_element&amp;lt;std::pair&amp;gt;</target>
        </trans-unit>
        <trans-unit id="35d674948e59e56620245f24607bcee63764d092" translate="yes" xml:space="preserve">
          <source>std::tuple_element&amp;lt;std::span&amp;gt;</source>
          <target state="translated">std::tuple_element&amp;lt;std::span&amp;gt;</target>
        </trans-unit>
        <trans-unit id="12745b2e3565225f8ceb73bacf7117bbd925dfd6" translate="yes" xml:space="preserve">
          <source>std::tuple_element&amp;lt;std::tuple&amp;gt;</source>
          <target state="translated">std::tuple_element&amp;lt;std::tuple&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1fdd22e14fa59d41ae169dd12500144968a46361" translate="yes" xml:space="preserve">
          <source>std::tuple_element&lt;small&gt;&amp;lt;std::pair&amp;gt;&lt;/small&gt;</source>
          <target state="translated">std::tuple_element&lt;small&gt;&amp;lt;std::pair&amp;gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0a026089e6689b69af52064f187df1486194314c" translate="yes" xml:space="preserve">
          <source>std::tuple_size</source>
          <target state="translated">std::tuple_size</target>
        </trans-unit>
        <trans-unit id="9fcb6cdf0a58e3b80629687f2949036254636c02" translate="yes" xml:space="preserve">
          <source>std::tuple_size&amp;lt;std::array&amp;gt;</source>
          <target state="translated">std::tuple_size&amp;lt;std::array&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d688bf4ecdcd09b114373ca7aa0df47d5676dda9" translate="yes" xml:space="preserve">
          <source>std::tuple_size&amp;lt;std::pair&amp;gt;</source>
          <target state="translated">std::tuple_size&amp;lt;std::pair&amp;gt;</target>
        </trans-unit>
        <trans-unit id="b21878f8854ed1e535127c6692d7ee8d20d90b10" translate="yes" xml:space="preserve">
          <source>std::tuple_size&amp;lt;std::span&amp;gt;</source>
          <target state="translated">std::tuple_size&amp;lt;std::span&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a8427e311eeb5a837e2e9b693f47916154da8593" translate="yes" xml:space="preserve">
          <source>std::tuple_size(std::array)</source>
          <target state="translated">std::tuple_size(std::array)</target>
        </trans-unit>
        <trans-unit id="58b70ed52233dd49abb76ccb24edf7259b2094ae" translate="yes" xml:space="preserve">
          <source>std::tuple_size(std::span)</source>
          <target state="translated">std::tuple_size(std::span)</target>
        </trans-unit>
        <trans-unit id="1f2c5193b058f48c4c2995e3b8dcd9bda535377e" translate="yes" xml:space="preserve">
          <source>std::tuple_size&lt;small&gt;&amp;lt;std::pair&amp;gt;&lt;/small&gt;</source>
          <target state="translated">std::tuple_size&lt;small&gt;&amp;lt;std::pair&amp;gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f51296d29037dd8d20f3549a901c30e859a37f35" translate="yes" xml:space="preserve">
          <source>std::tuple_size&lt;small&gt;&amp;lt;std::tuple&amp;gt;&lt;/small&gt;</source>
          <target state="translated">std::tuple_size&lt;small&gt;&amp;lt;std::tuple&amp;gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="49dbc21e887498966a89d79d33a387d794fbb56c" translate="yes" xml:space="preserve">
          <source>std::tuple_size&lt;small&gt;(std::array)&lt;/small&gt;</source>
          <target state="translated">std::tuple_size&lt;small&gt;(std::array)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a5969c2747f60cd5bab131e42731b18451cfb617" translate="yes" xml:space="preserve">
          <source>std::tuple_size&lt;small&gt;(std::span)&lt;/small&gt;</source>
          <target state="translated">std::tuple_size&lt;small&gt;(std::span)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="112f10e8ecc6e62fd5a4499cadb082c7e7ae10ec" translate="yes" xml:space="preserve">
          <source>std::tx_exception</source>
          <target state="translated">std::tx_exception</target>
        </trans-unit>
        <trans-unit id="9f32d4233570fe7982949be36df674e4c743d265" translate="yes" xml:space="preserve">
          <source>std::tx_exception::get</source>
          <target state="translated">std::tx_exception::get</target>
        </trans-unit>
        <trans-unit id="deec092c813f9b4579bdaa1a159d4d01e3b78856" translate="yes" xml:space="preserve">
          <source>std::tx_exception::tx_exception</source>
          <target state="translated">std::tx_exception::tx_exception</target>
        </trans-unit>
        <trans-unit id="e70a384d131e7f25091f10ca370df620c3922446" translate="yes" xml:space="preserve">
          <source>std::type_identity</source>
          <target state="translated">std::type_identity</target>
        </trans-unit>
        <trans-unit id="d1a90d0b19024143630407cbfcd762f785492c1a" translate="yes" xml:space="preserve">
          <source>std::type_index</source>
          <target state="translated">std::type_index</target>
        </trans-unit>
        <trans-unit id="36997d13d6f77a13ba26111d47b654fe2f2f8fcd" translate="yes" xml:space="preserve">
          <source>std::type_index::hash_code</source>
          <target state="translated">std::type_index::hash_code</target>
        </trans-unit>
        <trans-unit id="f8dcf7247231029b31ab0146823e247e6d9b7970" translate="yes" xml:space="preserve">
          <source>std::type_index::name</source>
          <target state="translated">std::type_index::name</target>
        </trans-unit>
        <trans-unit id="6ca4d081703472398743e1c6393fe63b7920d8f0" translate="yes" xml:space="preserve">
          <source>std::type_index::operator==,!=,&amp;lt;,&amp;lt;=,&amp;gt;,&amp;gt;=</source>
          <target state="translated">std::type_index::operator==,!=,&amp;lt;,&amp;lt;=,&amp;gt;,&amp;gt;=</target>
        </trans-unit>
        <trans-unit id="aa9a5a32ebd8259417fdb09d7d91eb782b38d6da" translate="yes" xml:space="preserve">
          <source>std::type_index::operators</source>
          <target state="translated">std::type_index::operators</target>
        </trans-unit>
        <trans-unit id="3e7fc53d1fbd8d5b89d81392fee4f5ffb46f5fa7" translate="yes" xml:space="preserve">
          <source>std::type_index::type_index</source>
          <target state="translated">std::type_index::type_index</target>
        </trans-unit>
        <trans-unit id="d0547dd7716774139473e23634891be17b53816c" translate="yes" xml:space="preserve">
          <source>std::type_info</source>
          <target state="translated">std::type_info</target>
        </trans-unit>
        <trans-unit id="5e5040db9d7172dc12452c219101e7e1f2874740" translate="yes" xml:space="preserve">
          <source>std::type_info::before</source>
          <target state="translated">std::type_info::before</target>
        </trans-unit>
        <trans-unit id="8b17afa74f4ee12cf6d82412c2dc54d91e27a30f" translate="yes" xml:space="preserve">
          <source>std::type_info::hash_code</source>
          <target state="translated">std::type_info::hash_code</target>
        </trans-unit>
        <trans-unit id="cafaa142e4d84ce343dba9e8d071260ec7fd4419" translate="yes" xml:space="preserve">
          <source>std::type_info::name</source>
          <target state="translated">std::type_info::name</target>
        </trans-unit>
        <trans-unit id="e3f35e0fac5cfac10a46c041d1899337790c8e61" translate="yes" xml:space="preserve">
          <source>std::type_info::operator==, std::type_info::operator!=</source>
          <target state="translated">std::type_info::operator==,std::type_info::operator!=</target>
        </trans-unit>
        <trans-unit id="b3bfa23978e3e82c2b1d63e9b2651abe42253515" translate="yes" xml:space="preserve">
          <source>std::type_info::operators</source>
          <target state="translated">std::type_info::operators</target>
        </trans-unit>
        <trans-unit id="45167d0f4ca64d9be72ce1599c901060d0af1c58" translate="yes" xml:space="preserve">
          <source>std::type_info::~type_info</source>
          <target state="translated">std::type_info::~type_info</target>
        </trans-unit>
        <trans-unit id="f581faab62cf848b78112fbeb140e34ef7b1c331" translate="yes" xml:space="preserve">
          <source>std::unary_function</source>
          <target state="translated">std::unary_function</target>
        </trans-unit>
        <trans-unit id="d7b0f46a22d92f3321efdf2f19d57e6288c1ede3" translate="yes" xml:space="preserve">
          <source>std::unary_negate</source>
          <target state="translated">std::unary_negate</target>
        </trans-unit>
        <trans-unit id="7894c750ef203ff0e3dfa7fc724abac1a3148be3" translate="yes" xml:space="preserve">
          <source>std::unary_negate::operator()</source>
          <target state="translated">std::unary_negate::operator()</target>
        </trans-unit>
        <trans-unit id="a57f3d79781f0ca4f9fbe083b5a45957d8e8efaa" translate="yes" xml:space="preserve">
          <source>std::unary_negate::unary_negate</source>
          <target state="translated">std::unary_negate::unary_negate</target>
        </trans-unit>
        <trans-unit id="30dd011179e55897c59c387d559a68e4b0d343e6" translate="yes" xml:space="preserve">
          <source>std::uncaught_exception, std::uncaught_exceptions</source>
          <target state="translated">std::uncaught_exception,std::uncaught_ex исключения</target>
        </trans-unit>
        <trans-unit id="d2f44f1a32cba343a325a1596f042254b094ae72" translate="yes" xml:space="preserve">
          <source>std::uncaught_exceptions</source>
          <target state="translated">std::uncaught_exceptions</target>
        </trans-unit>
        <trans-unit id="1190cd2a8d57c0822881018c4f70efaf5d155faf" translate="yes" xml:space="preserve">
          <source>std::undeclare_no_pointers</source>
          <target state="translated">std::undeclare_no_pointers</target>
        </trans-unit>
        <trans-unit id="2215411790e45e5db0a90c8ffd5790d83b82890a" translate="yes" xml:space="preserve">
          <source>std::undeclare_reachable</source>
          <target state="translated">std::undeclare_reachable</target>
        </trans-unit>
        <trans-unit id="e3a888fde5bd0cf512ca071d143db40246183281" translate="yes" xml:space="preserve">
          <source>std::underflow_error</source>
          <target state="translated">std::underflow_error</target>
        </trans-unit>
        <trans-unit id="d50d414ebe16f781030092420b692978c57375a4" translate="yes" xml:space="preserve">
          <source>std::underflow_error::underflow_error</source>
          <target state="translated">std::underflow_error::underflow_error</target>
        </trans-unit>
        <trans-unit id="c57d3a3dea90a5148e05394073c431e984258592" translate="yes" xml:space="preserve">
          <source>std::underlying_type</source>
          <target state="translated">std::underlying_type</target>
        </trans-unit>
        <trans-unit id="8aa7b63c48d55d72648cc64951a6b02f2589eb52" translate="yes" xml:space="preserve">
          <source>std::unexpected</source>
          <target state="translated">std::unexpected</target>
        </trans-unit>
        <trans-unit id="fc8ef25b5248507c925b51024254ecfc11d1d6a9" translate="yes" xml:space="preserve">
          <source>std::unexpected_handler</source>
          <target state="translated">std::unexpected_handler</target>
        </trans-unit>
        <trans-unit id="4b83c8f11f3a7b2f7a9494630bffc2b3f8805c57" translate="yes" xml:space="preserve">
          <source>std::ungetc</source>
          <target state="translated">std::ungetc</target>
        </trans-unit>
        <trans-unit id="97887a5613050b324ee4ab26d39fa3a4bf3053cf" translate="yes" xml:space="preserve">
          <source>std::ungetwc</source>
          <target state="translated">std::ungetwc</target>
        </trans-unit>
        <trans-unit id="be291e8406532a08aaebc8d1b3b8011f35a4892c" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution</source>
          <target state="translated">std::uniform_int_distribution</target>
        </trans-unit>
        <trans-unit id="fb56654ba82acf8fc9cd016953cdbf35952cda65" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::a, b</source>
          <target state="translated">std ::iform_int_distribution &amp;lt;IntType&amp;gt; :: a, b</target>
        </trans-unit>
        <trans-unit id="ca59bd1e8d423a7c346ef594675b3159ba1b30fc" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::max</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="87be58eec4431136195be8190c1240338cd6af59" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::min</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="5cb851239e10926e5f9d0d7de4782a7b1ea572de" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::operator()</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="a8e3e840f5e610009be999d459d81f1c06635a12" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::param</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::param</target>
        </trans-unit>
        <trans-unit id="82e6a21b574df4b1583b9f7c9e32a5f495e30de8" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::reset</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="1ee6e7d7b145cd3cc564b2918aebff72b0e58465" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution&amp;lt;IntType&amp;gt;::uniform_int_distribution</source>
          <target state="translated">std::uniform_int_distribution&amp;lt;IntType&amp;gt;::uniform_int_distribution</target>
        </trans-unit>
        <trans-unit id="5f3b7fee46252bb9a78755c38090029fd3b5e97b" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::a</source>
          <target state="translated">std::uniform_int_distribution::a</target>
        </trans-unit>
        <trans-unit id="582cd2ce4ca02736b86e996b72d50de53a5b9f11" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::max</source>
          <target state="translated">std::uniform_int_distribution::max</target>
        </trans-unit>
        <trans-unit id="2f4d51ff54efeb797aee393776bf15670bbaa230" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::min</source>
          <target state="translated">std::uniform_int_distribution::min</target>
        </trans-unit>
        <trans-unit id="522f8a22d22dc39366673107e3c9d06f3023787e" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::operator()</source>
          <target state="translated">std::uniform_int_distribution::operator()</target>
        </trans-unit>
        <trans-unit id="6dadbd2458a98f2a94584f7a17dca5a1dd3d0fa8" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::param</source>
          <target state="translated">std::uniform_int_distribution::param</target>
        </trans-unit>
        <trans-unit id="4df283caa279ede6d26a44928add61cff377551b" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::reset</source>
          <target state="translated">std::uniform_int_distribution::reset</target>
        </trans-unit>
        <trans-unit id="cb538ee9cc7cb6ffed38ba46709b795dfe0c5bab" translate="yes" xml:space="preserve">
          <source>std::uniform_int_distribution::uniform_int_distribution</source>
          <target state="translated">std::uniform_int_distribution::uniform_int_distribution</target>
        </trans-unit>
        <trans-unit id="05147754f9242367c71cb94e5080a0d2fca26a6c" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution</source>
          <target state="translated">std::uniform_real_distribution</target>
        </trans-unit>
        <trans-unit id="1ab27488cf1dc595632d2ebb74af7fdcc402ae4f" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::a, b</source>
          <target state="translated">std ::iform_real_distribution &amp;lt;RealType&amp;gt; :: a, b</target>
        </trans-unit>
        <trans-unit id="f84694fb42d7318769160f1fcbdff1cbd7118f66" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::max</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::max</target>
        </trans-unit>
        <trans-unit id="f3f9ae5f7b5ffb87c6c5ef00460a36b9b2731f41" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::min</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::min</target>
        </trans-unit>
        <trans-unit id="b25a3b5086e61c48debdc90cfdd8872b80c9f6fd" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::operator()</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::operator()</target>
        </trans-unit>
        <trans-unit id="882e4f244fd473f49d512ba7165a2ae36c946b6a" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::param</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::param</target>
        </trans-unit>
        <trans-unit id="51a5f9dfbd0c4525bc28a5a4bbae7c69aa784c04" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::reset</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="d2cd3a7e6e23cae5ae7b2c72c1aff3e1838e87ac" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution&amp;lt;RealType&amp;gt;::uniform_real_distribution</source>
          <target state="translated">std::uniform_real_distribution&amp;lt;RealType&amp;gt;::uniform_real_distribution</target>
        </trans-unit>
        <trans-unit id="201cbfe5f4b586cf9b4b020b13e7980f74067dc8" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::a</source>
          <target state="translated">std::uniform_real_distribution::a</target>
        </trans-unit>
        <trans-unit id="56b586a0a696eca642232a8206d1d22f01a74517" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::max</source>
          <target state="translated">std::uniform_real_distribution::max</target>
        </trans-unit>
        <trans-unit id="541a1ccf753cc8318e151b4a974a3cc50d754770" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::min</source>
          <target state="translated">std::uniform_real_distribution::min</target>
        </trans-unit>
        <trans-unit id="e2b529a613dcc777f913462b8b0ae2bdd80c9f7e" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::operator()</source>
          <target state="translated">std::uniform_real_distribution::operator()</target>
        </trans-unit>
        <trans-unit id="9c1addb90977160cca774eb119a75c026e5366eb" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::param</source>
          <target state="translated">std::uniform_real_distribution::param</target>
        </trans-unit>
        <trans-unit id="d12675db5a763770285e9ac668b7d5760b8b9143" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::reset</source>
          <target state="translated">std::uniform_real_distribution::reset</target>
        </trans-unit>
        <trans-unit id="40f1ad39b1139263d2bcd57cfce90df72719d1e8" translate="yes" xml:space="preserve">
          <source>std::uniform_real_distribution::uniform_real_distribution</source>
          <target state="translated">std::uniform_real_distribution::uniform_real_distribution</target>
        </trans-unit>
        <trans-unit id="6af972e3dd7f4e3176d36aefaa4835fa7d5ee368" translate="yes" xml:space="preserve">
          <source>std::uninitialized_construct_using_allocator</source>
          <target state="translated">std::uninitialized_construct_using_allocator</target>
        </trans-unit>
        <trans-unit id="e9efb527b2144c068f968a797651c6934ec91768" translate="yes" xml:space="preserve">
          <source>std::uninitialized_copy</source>
          <target state="translated">std::uninitialized_copy</target>
        </trans-unit>
        <trans-unit id="8d7253f32592eb254dbddb54446b48a8e35e9371" translate="yes" xml:space="preserve">
          <source>std::uninitialized_copy_n</source>
          <target state="translated">std::uninitialized_copy_n</target>
        </trans-unit>
        <trans-unit id="1c9db4f145207fe8af4f76b8c2cb8a0ed3de21d7" translate="yes" xml:space="preserve">
          <source>std::uninitialized_default_construct</source>
          <target state="translated">std::uninitialized_default_construct</target>
        </trans-unit>
        <trans-unit id="18364034856a978b76a78ef4faa503a2f3f266e0" translate="yes" xml:space="preserve">
          <source>std::uninitialized_default_construct_n</source>
          <target state="translated">std::uninitialized_default_construct_n</target>
        </trans-unit>
        <trans-unit id="5e3db048aa59d85505e3570f8e8689b180b75e7c" translate="yes" xml:space="preserve">
          <source>std::uninitialized_fill</source>
          <target state="translated">std::uninitialized_fill</target>
        </trans-unit>
        <trans-unit id="2c7f325cb2b12d165254c198779af7e02c25bf97" translate="yes" xml:space="preserve">
          <source>std::uninitialized_fill_n</source>
          <target state="translated">std::uninitialized_fill_n</target>
        </trans-unit>
        <trans-unit id="d7c39aeca886a727ff265fcd0182f2f84aaa090d" translate="yes" xml:space="preserve">
          <source>std::uninitialized_move</source>
          <target state="translated">std::uninitialized_move</target>
        </trans-unit>
        <trans-unit id="46fc9f6bedf1789108937f1065c8ffa834feb198" translate="yes" xml:space="preserve">
          <source>std::uninitialized_move_n</source>
          <target state="translated">std::uninitialized_move_n</target>
        </trans-unit>
        <trans-unit id="e7cde6916f5de23c1cda8d41ff7f7e87ac16abf7" translate="yes" xml:space="preserve">
          <source>std::uninitialized_value_construct</source>
          <target state="translated">std::uninitialized_value_construct</target>
        </trans-unit>
        <trans-unit id="1864ca6174d4f05d9a0066006ff7700625b99e27" translate="yes" xml:space="preserve">
          <source>std::uninitialized_value_construct_n</source>
          <target state="translated">std::uninitialized_value_construct_n</target>
        </trans-unit>
        <trans-unit id="3273784e633c22809d255f01cc17e87f297b6a68" translate="yes" xml:space="preserve">
          <source>std::unique</source>
          <target state="translated">std::unique</target>
        </trans-unit>
        <trans-unit id="e3f4b03a17432ecb47d1203229e4207eac1e2d8e" translate="yes" xml:space="preserve">
          <source>std::unique_copy</source>
          <target state="translated">std::unique_copy</target>
        </trans-unit>
        <trans-unit id="91158c01b7da51411d5662c7cd83c4a9362eee49" translate="yes" xml:space="preserve">
          <source>std::unique_lock</source>
          <target state="translated">std::unique_lock</target>
        </trans-unit>
        <trans-unit id="33b61b3a4e764d824b4bd058da91c6dc9feb1732" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::lock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::lock</target>
        </trans-unit>
        <trans-unit id="35de08de2993e9b5a2525c9cded89feb18fb45a1" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::mutex</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::mutex</target>
        </trans-unit>
        <trans-unit id="0e609e273640bb2049a6be63ed7593d878d70808" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::operator bool</source>
          <target state="translated">std :: unique_lock &amp;lt;Mutex&amp;gt; :: оператор bool</target>
        </trans-unit>
        <trans-unit id="c57685fb9c9e1d98966ff7595aeb8941374fa076" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::operator=</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="3502ec339e3d384a8b87f1d8ba63355a6ab8b846" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::owns_lock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::owns_lock</target>
        </trans-unit>
        <trans-unit id="0f369bc7a367684ea657f6eb573e9e18c8964d7f" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::release</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::release</target>
        </trans-unit>
        <trans-unit id="421ad874ac956651d157a2b43cf106a3b5a9034e" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::swap</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="6fc848addd008feb05deae69ad0c57f005cf85a1" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock</target>
        </trans-unit>
        <trans-unit id="d06f5fe589071eddfc775ad514a635c401c1b996" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock_for</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock_for</target>
        </trans-unit>
        <trans-unit id="93027ad7fb5be7a2a6ef1fc26910df77636e8dad" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock_until</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::try_lock_until</target>
        </trans-unit>
        <trans-unit id="e5e2cef8c991ec7e8a08fe0ed01fb886f3edc7f2" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::unique_lock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::unique_lock</target>
        </trans-unit>
        <trans-unit id="1ac27aba93192b2e8efd1c542d88807cf9f1f9a6" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::unlock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::unlock</target>
        </trans-unit>
        <trans-unit id="b9cee034eb9508ce44a198214a7a1b211c4f58d0" translate="yes" xml:space="preserve">
          <source>std::unique_lock&amp;lt;Mutex&amp;gt;::~unique_lock</source>
          <target state="translated">std::unique_lock&amp;lt;Mutex&amp;gt;::~unique_lock</target>
        </trans-unit>
        <trans-unit id="ad41ba1ec2d525d7db6ce1c395b0f5d2ce99de04" translate="yes" xml:space="preserve">
          <source>std::unique_lock::lock</source>
          <target state="translated">std::unique_lock::lock</target>
        </trans-unit>
        <trans-unit id="9da021f1b5d82eb7a126800cd51629e2e698e3f5" translate="yes" xml:space="preserve">
          <source>std::unique_lock::mutex</source>
          <target state="translated">std::unique_lock::mutex</target>
        </trans-unit>
        <trans-unit id="b88b1fd0c27d5df2cd151f4ce77773d096777ce9" translate="yes" xml:space="preserve">
          <source>std::unique_lock::operator bool</source>
          <target state="translated">std::unique_lock::operator bool</target>
        </trans-unit>
        <trans-unit id="877b952cd23c8c3e5c054d0f38921fbadf77e16d" translate="yes" xml:space="preserve">
          <source>std::unique_lock::operator=</source>
          <target state="translated">std::unique_lock::operator=</target>
        </trans-unit>
        <trans-unit id="7aed2d402d443ba6f4c2220dcfbb589f24379be1" translate="yes" xml:space="preserve">
          <source>std::unique_lock::owns_lock</source>
          <target state="translated">std::unique_lock::owns_lock</target>
        </trans-unit>
        <trans-unit id="44334f1f942c429097d3bf994de8f3a5d8370475" translate="yes" xml:space="preserve">
          <source>std::unique_lock::release</source>
          <target state="translated">std::unique_lock::release</target>
        </trans-unit>
        <trans-unit id="b9509721ea37d7a81e2a45a8cef11f8c2e39f803" translate="yes" xml:space="preserve">
          <source>std::unique_lock::swap</source>
          <target state="translated">std::unique_lock::swap</target>
        </trans-unit>
        <trans-unit id="201b767cedd3915fc739eb7f0e477f96274f8466" translate="yes" xml:space="preserve">
          <source>std::unique_lock::try_lock</source>
          <target state="translated">std::unique_lock::try_lock</target>
        </trans-unit>
        <trans-unit id="c58da2001108ff00c084c1930a00183be5b4e9f6" translate="yes" xml:space="preserve">
          <source>std::unique_lock::try_lock_for</source>
          <target state="translated">std::unique_lock::try_lock_for</target>
        </trans-unit>
        <trans-unit id="31ad3bea5ac74678ce48228d1465d5149d4fb7ef" translate="yes" xml:space="preserve">
          <source>std::unique_lock::try_lock_until</source>
          <target state="translated">std::unique_lock::try_lock_until</target>
        </trans-unit>
        <trans-unit id="2ca36a2a9c476557ac2f156b4fc01c5d6d9e5c91" translate="yes" xml:space="preserve">
          <source>std::unique_lock::unique_lock</source>
          <target state="translated">std::unique_lock::unique_lock</target>
        </trans-unit>
        <trans-unit id="eefe9e31f8e3421da087211aeddf2fa159ce5bee" translate="yes" xml:space="preserve">
          <source>std::unique_lock::unlock</source>
          <target state="translated">std::unique_lock::unlock</target>
        </trans-unit>
        <trans-unit id="e78b18aaf9fc45ae54640ffbf942551ac2963c55" translate="yes" xml:space="preserve">
          <source>std::unique_lock::~unique_lock</source>
          <target state="translated">std::unique_lock::~unique_lock</target>
        </trans-unit>
        <trans-unit id="453218f5d5be6b81d5ed263381a7c01652dbabd1" translate="yes" xml:space="preserve">
          <source>std::unique_ptr</source>
          <target state="translated">std::unique_ptr</target>
        </trans-unit>
        <trans-unit id="c61824cd0bd8f6e98b01a8a2c5e71fa9a0472bdd" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::get</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::get</target>
        </trans-unit>
        <trans-unit id="a959d94eb31af93e08d6acf9b0db3978cbf91fbc" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::get_deleter</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::get_deleter</target>
        </trans-unit>
        <trans-unit id="4ccaa534263dcc14484d0c3b357328630455969c" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator bool</source>
          <target state="translated">std :: unique_ptr &amp;lt;T, Deleter&amp;gt; :: оператор bool</target>
        </trans-unit>
        <trans-unit id="8584bdac1262fa8e80529a2b2ff45f4c686de2ad" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator&amp;lt;&amp;lt;</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c1050bf52f08b285d063562bdfd3a4528abbbe5b" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator*</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator*</target>
        </trans-unit>
        <trans-unit id="7a640f993fe66db58e311f177a1b590093eaa727" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator=</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="60fef7e1f5461e6fe0dedc0d2bf1fabdf719b9a6" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator[]</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::operator[]</target>
        </trans-unit>
        <trans-unit id="d1e04cfce8615e0451eadaa8750b1c1d965e6b87" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::release</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::release</target>
        </trans-unit>
        <trans-unit id="b7621c2dd4c16fd8e52bea1800b8aec528f6db62" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::reset</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::reset</target>
        </trans-unit>
        <trans-unit id="0718b086fe58c18484c430a68039605d5dbe0edc" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::swap</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="09bbc07c6f3e4c886b430f8ab192fa61dca12017" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::unique_ptr</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::unique_ptr</target>
        </trans-unit>
        <trans-unit id="23f8c3598908c2f4292af2fc23cd5c4c6c04ebec" translate="yes" xml:space="preserve">
          <source>std::unique_ptr&amp;lt;T,Deleter&amp;gt;::~unique_ptr</source>
          <target state="translated">std::unique_ptr&amp;lt;T,Deleter&amp;gt;::~unique_ptr</target>
        </trans-unit>
        <trans-unit id="17e1386fd83ce3a3e6d6b6115d96f3790713366d" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::get</source>
          <target state="translated">std::unique_ptr::get</target>
        </trans-unit>
        <trans-unit id="5911652a6b3970ee3c9ab6917f8955350f5c6528" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::get_deleter</source>
          <target state="translated">std::unique_ptr::get_deleter</target>
        </trans-unit>
        <trans-unit id="d1dbb2e9b9723d142974f6ba2b94b90ee2d560b0" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::operator bool</source>
          <target state="translated">std::unique_ptr::operator bool</target>
        </trans-unit>
        <trans-unit id="16dcfd9e5ac039d7688c4b3791c6051087068a85" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::operator&amp;lt;&amp;lt;</source>
          <target state="translated">std::unique_ptr::operator&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="28036e635468819da12ef27437ea112830d8c8e5" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::operator*</source>
          <target state="translated">std::unique_ptr::operator*</target>
        </trans-unit>
        <trans-unit id="f254a20d2cd246c45d9ba867d0330cd04b9dde62" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::operator=</source>
          <target state="translated">std::unique_ptr::operator=</target>
        </trans-unit>
        <trans-unit id="2cecdb7256b4aad06f50d2874cbcd04f533b190b" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::operator[]</source>
          <target state="translated">std::unique_ptr::operator[]</target>
        </trans-unit>
        <trans-unit id="0e2486088c41472e9b66f9ceac7db6060860dcfe" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::release</source>
          <target state="translated">std::unique_ptr::release</target>
        </trans-unit>
        <trans-unit id="c81132377399cd9d6f5e8dd78b0426744e9838c5" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::reset</source>
          <target state="translated">std::unique_ptr::reset</target>
        </trans-unit>
        <trans-unit id="ae2ee220befdb196647f454561460eba776ce10e" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::swap</source>
          <target state="translated">std::unique_ptr::swap</target>
        </trans-unit>
        <trans-unit id="8c234d6d792fc95ad7c583d66cc53ce9da1aec6f" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::unique_ptr</source>
          <target state="translated">std::unique_ptr::unique_ptr</target>
        </trans-unit>
        <trans-unit id="904ed6616e788868549b805b6da957d7a06f2de7" translate="yes" xml:space="preserve">
          <source>std::unique_ptr::~unique_ptr</source>
          <target state="translated">std::unique_ptr::~unique_ptr</target>
        </trans-unit>
        <trans-unit id="8d8c351614954cece45b9612c17053d5612f3818" translate="yes" xml:space="preserve">
          <source>std::unitbuf</source>
          <target state="translated">std::unitbuf</target>
        </trans-unit>
        <trans-unit id="75bcd2615b1d93e5f93552abb269dd8c67335970" translate="yes" xml:space="preserve">
          <source>std::unitbuf, std::nounitbuf</source>
          <target state="translated">std::unitbuf,std::nounitbuf</target>
        </trans-unit>
        <trans-unit id="46523dc862dcc682175d823df6bcaf64b8235759" translate="yes" xml:space="preserve">
          <source>std::unordered_map</source>
          <target state="translated">std::unordered_map</target>
        </trans-unit>
        <trans-unit id="caf242abc0dda6d8db5f4ab1fdcb553fb209d293" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::at</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::at</target>
        </trans-unit>
        <trans-unit id="6a33869a1289da006c3e727708f293312650181a" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::begin(size_type), std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cbegin(size_type)</source>
          <target state="translated">std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: begin (size_type), std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cbegin (size_type)</target>
        </trans-unit>
        <trans-unit id="499369de33a8dd9bd61682f2254fa59aa464c53b" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::begin, std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cbegin</source>
          <target state="translated">std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: begin, std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="6a49f6477927e7fada7042a2d0711fc95037b09f" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket</target>
        </trans-unit>
        <trans-unit id="0a3f96d8012c74d034c5482ff180002ee3426d07" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</target>
        </trans-unit>
        <trans-unit id="dcd48ed4402f68dee342d1c5723af028e1105d69" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</target>
        </trans-unit>
        <trans-unit id="dda46667db6d0b276f11ac5835df4ca244e0ddc8" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::clear</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::clear</target>
        </trans-unit>
        <trans-unit id="0d182e5d547c6d3e7f3fc23953657e1be5a11c88" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::contains</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::contains</target>
        </trans-unit>
        <trans-unit id="c6e31adfeb64d363bb367e828aec9bdea10ba889" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::count</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::count</target>
        </trans-unit>
        <trans-unit id="25658d6d9ac026e5a3da4e6a762e1319b4fc202e" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace</target>
        </trans-unit>
        <trans-unit id="064834ec900ac7179c493089cb5e4f9a630946b7" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</target>
        </trans-unit>
        <trans-unit id="5793a2ba047c25ef7378a418139f01d28d1a8b65" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::empty</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="98c128e5374217615f16f822e853289f202ca738" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::end(size_type), std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cend(size_type)</source>
          <target state="translated">std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: end (size_type), std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cend (size_type)</target>
        </trans-unit>
        <trans-unit id="9b3d65d8d1c307ecf8af0efcc90ae041769167f6" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::end, std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cend</source>
          <target state="translated">std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: end, std :: unordered_map &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cend</target>
        </trans-unit>
        <trans-unit id="073164a126f6fc3814a3dd479f2ba417e4234ab6" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::equal_range</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::equal_range</target>
        </trans-unit>
        <trans-unit id="4382478e6c5e098daa3071734c6dd7d0f8fc0ce2" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::erase</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::erase</target>
        </trans-unit>
        <trans-unit id="2af5bf42309fc7c53002abcb3e401737ac73bf11" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::extract</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::extract</target>
        </trans-unit>
        <trans-unit id="7f67f66510aa13a1fe751e26faa4c26ad213125d" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::find</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::find</target>
        </trans-unit>
        <trans-unit id="bd5794876ccf7bb1c1f261ec64f903f4a2066029" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</target>
        </trans-unit>
        <trans-unit id="37d1c63599cc001318e0cf87098be164768bc743" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::hash_function</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::hash_function</target>
        </trans-unit>
        <trans-unit id="7340fad731ae2732b4e4c8ab18a769751b8357a8" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert</target>
        </trans-unit>
        <trans-unit id="ca1052dee29228ed1bf1155fdb5096a95d7f2614" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert_or_assign</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert_or_assign</target>
        </trans-unit>
        <trans-unit id="0c1c1b9446d7263f9ebe776a640dc2b33b285738" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::key_eq</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::key_eq</target>
        </trans-unit>
        <trans-unit id="846319fe401b649444e8b81bcb156afef0741296" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::load_factor</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::load_factor</target>
        </trans-unit>
        <trans-unit id="3649b3eb6aee7a158ec981c1af1a106a1bdfc329" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="6fe99b8b6df37e53efe3f84401448797623385d4" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</target>
        </trans-unit>
        <trans-unit id="4f963804e154fa6098c008311584dd28d2a43682" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_size</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_size</target>
        </trans-unit>
        <trans-unit id="2bde27f8a6a30ff7646ee1a7b8d091eb3974c268" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::merge</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::merge</target>
        </trans-unit>
        <trans-unit id="72d3c6775035101386c1538a4e35d7a6b2b7fe66" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator=</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="60eea7b1b31d7fcd6843eae5dd288a460f865077" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator[]</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator[]</target>
        </trans-unit>
        <trans-unit id="dd3968958dc4c521851bba5af917a3d1145e649c" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::rehash</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::rehash</target>
        </trans-unit>
        <trans-unit id="67d3ba5a54a62cafe1e13176cd65d9aaa581e9dd" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::reserve</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::reserve</target>
        </trans-unit>
        <trans-unit id="e789ebb553d76a54c4903ea06c635ebfc598a50a" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::size</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="96235f501f06c4c27cd10d71fba28bc917a99ec5" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::swap</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="45f3b2cf6736fdbbd3f114c2dd48da7c925f625f" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::try_emplace</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::try_emplace</target>
        </trans-unit>
        <trans-unit id="46512568bac5f9b609bb1281b37b8cddcf16f460" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::unordered_map</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::unordered_map</target>
        </trans-unit>
        <trans-unit id="53b25b517fecebc403c51b14850022cc38e37472" translate="yes" xml:space="preserve">
          <source>std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::~unordered_map</source>
          <target state="translated">std::unordered_map&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::~unordered_map</target>
        </trans-unit>
        <trans-unit id="92467a0cdae4114554b3f7834529617b1d796e45" translate="yes" xml:space="preserve">
          <source>std::unordered_map::at</source>
          <target state="translated">std::unordered_map::at</target>
        </trans-unit>
        <trans-unit id="4ea19b354489b32380da1b17c1d46190d4f97792" translate="yes" xml:space="preserve">
          <source>std::unordered_map::bucket</source>
          <target state="translated">std::unordered_map::bucket</target>
        </trans-unit>
        <trans-unit id="49aadb46e7ca2dcf5bc46fe63e2900d8cf349c0d" translate="yes" xml:space="preserve">
          <source>std::unordered_map::bucket_count</source>
          <target state="translated">std::unordered_map::bucket_count</target>
        </trans-unit>
        <trans-unit id="f3045ed9dd6a5474bb31d58c8102a15cc7e0663b" translate="yes" xml:space="preserve">
          <source>std::unordered_map::bucket_size</source>
          <target state="translated">std::unordered_map::bucket_size</target>
        </trans-unit>
        <trans-unit id="75cabfa58b0d67186cbacbd03a75f861479c9d1c" translate="yes" xml:space="preserve">
          <source>std::unordered_map::cbegin</source>
          <target state="translated">std::unordered_map::cbegin</target>
        </trans-unit>
        <trans-unit id="8db364ed083f6fa6bb399981907d8078b41a6d74" translate="yes" xml:space="preserve">
          <source>std::unordered_map::clear</source>
          <target state="translated">std::unordered_map::clear</target>
        </trans-unit>
        <trans-unit id="e066618be8be722f31fa4f44dfd699f76dbc83e0" translate="yes" xml:space="preserve">
          <source>std::unordered_map::contains</source>
          <target state="translated">std::unordered_map::contains</target>
        </trans-unit>
        <trans-unit id="f918ae003332ae9a40b3311ff31940ce3303f718" translate="yes" xml:space="preserve">
          <source>std::unordered_map::count</source>
          <target state="translated">std::unordered_map::count</target>
        </trans-unit>
        <trans-unit id="6128165c5842de192487d40a7a1db4286c485b73" translate="yes" xml:space="preserve">
          <source>std::unordered_map::emplace</source>
          <target state="translated">std::unordered_map::emplace</target>
        </trans-unit>
        <trans-unit id="96d32045d936b859471db5253e4d2c21a9fd9afa" translate="yes" xml:space="preserve">
          <source>std::unordered_map::emplace_hint</source>
          <target state="translated">std::unordered_map::emplace_hint</target>
        </trans-unit>
        <trans-unit id="f782448a931da9486e9016b646565dc0a5697cf1" translate="yes" xml:space="preserve">
          <source>std::unordered_map::empty</source>
          <target state="translated">std::unordered_map::empty</target>
        </trans-unit>
        <trans-unit id="df5d39c0cfff8f7e4273c17059c8b966a76035f0" translate="yes" xml:space="preserve">
          <source>std::unordered_map::end</source>
          <target state="translated">std::unordered_map::end</target>
        </trans-unit>
        <trans-unit id="f62dcd25b62dbe9542c2eb932582788d899e5d8a" translate="yes" xml:space="preserve">
          <source>std::unordered_map::end(size_type)</source>
          <target state="translated">std::unordered_map::end(size_type)</target>
        </trans-unit>
        <trans-unit id="310be3fee8d11e91e0ca5d61d7956a3686535381" translate="yes" xml:space="preserve">
          <source>std::unordered_map::equal_range</source>
          <target state="translated">std::unordered_map::equal_range</target>
        </trans-unit>
        <trans-unit id="ca3c93b448ae46a96f31f1373ad688b69c0f01e3" translate="yes" xml:space="preserve">
          <source>std::unordered_map::erase</source>
          <target state="translated">std::unordered_map::erase</target>
        </trans-unit>
        <trans-unit id="0ef088159690359982fb2f59f52a59c9bdd833cd" translate="yes" xml:space="preserve">
          <source>std::unordered_map::extract</source>
          <target state="translated">std::unordered_map::extract</target>
        </trans-unit>
        <trans-unit id="0a1eb47de280381a78c2a3d32ecd487934faa7ec" translate="yes" xml:space="preserve">
          <source>std::unordered_map::find</source>
          <target state="translated">std::unordered_map::find</target>
        </trans-unit>
        <trans-unit id="822cf6744030ef8f434b00abb1b9bc8c798348e1" translate="yes" xml:space="preserve">
          <source>std::unordered_map::get_allocator</source>
          <target state="translated">std::unordered_map::get_allocator</target>
        </trans-unit>
        <trans-unit id="ac1156d63d1ac41913036d7f9076bebdf05733e6" translate="yes" xml:space="preserve">
          <source>std::unordered_map::hash_function</source>
          <target state="translated">std::unordered_map::hash_function</target>
        </trans-unit>
        <trans-unit id="068b2c6355ae2ed135739bcf857bc352fd2e8b31" translate="yes" xml:space="preserve">
          <source>std::unordered_map::insert</source>
          <target state="translated">std::unordered_map::insert</target>
        </trans-unit>
        <trans-unit id="d85d51b1b17312be2ef2b9f785c9ac2d2df5b815" translate="yes" xml:space="preserve">
          <source>std::unordered_map::insert_or_assign</source>
          <target state="translated">std::unordered_map::insert_or_assign</target>
        </trans-unit>
        <trans-unit id="c7dc4d66185d98ac2ba0abb85e215b11163ca52d" translate="yes" xml:space="preserve">
          <source>std::unordered_map::key_eq</source>
          <target state="translated">std::unordered_map::key_eq</target>
        </trans-unit>
        <trans-unit id="ac01815fcb8131ac68d97f59f745ef19025c47c3" translate="yes" xml:space="preserve">
          <source>std::unordered_map::load_factor</source>
          <target state="translated">std::unordered_map::load_factor</target>
        </trans-unit>
        <trans-unit id="fe0753f66e1cfdd8a0f6fb07a3a2df0cc04928b2" translate="yes" xml:space="preserve">
          <source>std::unordered_map::max_bucket_count</source>
          <target state="translated">std::unordered_map::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="3fcf7035b4468fbb050d3fcdd98892602fddcd3a" translate="yes" xml:space="preserve">
          <source>std::unordered_map::max_load_factor</source>
          <target state="translated">std::unordered_map::max_load_factor</target>
        </trans-unit>
        <trans-unit id="df85ca161873655be404dd4cf984f64eba7415ca" translate="yes" xml:space="preserve">
          <source>std::unordered_map::max_size</source>
          <target state="translated">std::unordered_map::max_size</target>
        </trans-unit>
        <trans-unit id="bb8c7fa821a3856a9368cf79a9a7494ef336bbda" translate="yes" xml:space="preserve">
          <source>std::unordered_map::merge</source>
          <target state="translated">std::unordered_map::merge</target>
        </trans-unit>
        <trans-unit id="071ff074928f56dec6ee259662add1561ef98438" translate="yes" xml:space="preserve">
          <source>std::unordered_map::operator=</source>
          <target state="translated">std::unordered_map::operator=</target>
        </trans-unit>
        <trans-unit id="26b6e989a02af72dc17051fb8517ee554cb6f4dc" translate="yes" xml:space="preserve">
          <source>std::unordered_map::operator[]</source>
          <target state="translated">std::unordered_map::operator[]</target>
        </trans-unit>
        <trans-unit id="657b42d9247e8693f9dd684c156de10f09386389" translate="yes" xml:space="preserve">
          <source>std::unordered_map::rehash</source>
          <target state="translated">std::unordered_map::rehash</target>
        </trans-unit>
        <trans-unit id="4b0ec903ce3472923d816a6afcc8282486ebb55c" translate="yes" xml:space="preserve">
          <source>std::unordered_map::reserve</source>
          <target state="translated">std::unordered_map::reserve</target>
        </trans-unit>
        <trans-unit id="76bd1836845e745bfd56a5ccc5dfc34b6fd7a63a" translate="yes" xml:space="preserve">
          <source>std::unordered_map::size</source>
          <target state="translated">std::unordered_map::size</target>
        </trans-unit>
        <trans-unit id="35d17923d5e67fe793ddcd3e14ccc354aad4554f" translate="yes" xml:space="preserve">
          <source>std::unordered_map::swap</source>
          <target state="translated">std::unordered_map::swap</target>
        </trans-unit>
        <trans-unit id="f8ec5450073b6897408e9e9decbdd17ac40122d1" translate="yes" xml:space="preserve">
          <source>std::unordered_map::try_emplace</source>
          <target state="translated">std::unordered_map::try_emplace</target>
        </trans-unit>
        <trans-unit id="fa571ecf04f7bb4b5f2ae6d83938db3a5583f028" translate="yes" xml:space="preserve">
          <source>std::unordered_map::unordered_map</source>
          <target state="translated">std::unordered_map::unordered_map</target>
        </trans-unit>
        <trans-unit id="5a0cbc601c8ac78342852af62e715c30b3ba9e3a" translate="yes" xml:space="preserve">
          <source>std::unordered_map::~unordered_map</source>
          <target state="translated">std::unordered_map::~unordered_map</target>
        </trans-unit>
        <trans-unit id="0565ec762696c6854d6c6af6c62ce0eea4fd99c3" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap</source>
          <target state="translated">std::unordered_multimap</target>
        </trans-unit>
        <trans-unit id="67079f72e52c19edeb42e8d2dbad9b3e46a6d925" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::begin(size_type), std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cbegin(size_type)</source>
          <target state="translated">std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: begin (size_type), std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cbegin (size_type)</target>
        </trans-unit>
        <trans-unit id="f4a3ba866251b16878cfeaa1afa6426c61dd79be" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::begin, std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cbegin</source>
          <target state="translated">std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: begin, std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="ca813c39327a57016909909e1616de0ee2da99f1" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket</target>
        </trans-unit>
        <trans-unit id="a947f0859b3343f7a023b3bfe98986c379edc5e4" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</target>
        </trans-unit>
        <trans-unit id="dcccc9660c1c0d54a9c2bfc653e143e2c497c8c9" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</target>
        </trans-unit>
        <trans-unit id="14a28674c126abf2b29c2359064cb145a85a14a4" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::clear</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::clear</target>
        </trans-unit>
        <trans-unit id="22029e4c6b01adf74ca471d2296ce401b8de5eaf" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::contains</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::contains</target>
        </trans-unit>
        <trans-unit id="1458ae29f24d5decb9e8e783130e640de068c59f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::count</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::count</target>
        </trans-unit>
        <trans-unit id="74f50245ace4ae60bd0ce2a138d77afb0444824f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace</target>
        </trans-unit>
        <trans-unit id="7470cbb3c6d8e651b902903db9d94e9fa74daaf5" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</target>
        </trans-unit>
        <trans-unit id="5c33a86deaed9355bc3d50a96948e798d281dadb" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::empty</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="6714ba01cbc5e2518b551344a73070659d35866d" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::end(size_type), std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cend(size_type)</source>
          <target state="translated">std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: end (size_type), std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cend (size_type)</target>
        </trans-unit>
        <trans-unit id="d83de573e6edde396a3df180f444481bb5db291a" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::end, std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::cend</source>
          <target state="translated">std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: end, std :: unordered_multimap &amp;lt;Key, T, Hash, KeyEqual, Allocator&amp;gt; :: cend</target>
        </trans-unit>
        <trans-unit id="9ee47093bb38036c8d3667b3ce2c2bab2a6635ba" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::equal_range</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::equal_range</target>
        </trans-unit>
        <trans-unit id="fb1dcadcd28743e2372dfb07b6c1de17583be98c" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::erase</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::erase</target>
        </trans-unit>
        <trans-unit id="76b81359a38f9d27f98d763fb4e26c645d5057a6" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::extract</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::extract</target>
        </trans-unit>
        <trans-unit id="cb959a4d8dad0a9a0206d8ac7a3760979fd25d7e" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::find</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::find</target>
        </trans-unit>
        <trans-unit id="04be4582ae56e7fe8d4877482886ccdff2e1f46f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</target>
        </trans-unit>
        <trans-unit id="fcc419b8aa0244c2761421e21755399fd950cd14" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::hash_function</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::hash_function</target>
        </trans-unit>
        <trans-unit id="51a5a6254110fdbcf92de18b5fb3d5f580443f25" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::insert</target>
        </trans-unit>
        <trans-unit id="3e30e551af5d933453b78ac427d321c3c0f97c3c" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::key_eq</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::key_eq</target>
        </trans-unit>
        <trans-unit id="3527ee60395f6607e329a887adbaed3b3f87d952" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::load_factor</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::load_factor</target>
        </trans-unit>
        <trans-unit id="664294bc5bad87de8bca4aeff4b3ff40136d6b89" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="cb495f170208b2f77c1ee3301fdea015930905bd" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</target>
        </trans-unit>
        <trans-unit id="39b03f04119e5ca2c0b0a6932b94de3b0a942e13" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_size</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::max_size</target>
        </trans-unit>
        <trans-unit id="9ff30ffe1e949a957943dfb0a916a4fc5e3ed672" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::merge</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::merge</target>
        </trans-unit>
        <trans-unit id="4e6adea272273ce268b38fc797bcf28bcfd25d25" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator=</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="15601a1b22f0171809f08d8f580f21c5d1ed112a" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::rehash</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::rehash</target>
        </trans-unit>
        <trans-unit id="fa63f682123191667f2ffc193fe2bdaaf0e053e1" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::reserve</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::reserve</target>
        </trans-unit>
        <trans-unit id="3bf62bc06d201760a421989c5fc5485cf91a368e" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::size</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="2ec3b428dd0b280d5ea6c408dad31af8fd71cf14" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::swap</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="58417b022e88467264ab377b50a80d7bf7caf4f8" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::unordered_multimap</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::unordered_multimap</target>
        </trans-unit>
        <trans-unit id="e38502b91d63044962790c8f45ff8c6cac76fbf8" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::~unordered_multimap</source>
          <target state="translated">std::unordered_multimap&amp;lt;Key,T,Hash,KeyEqual,Allocator&amp;gt;::~unordered_multimap</target>
        </trans-unit>
        <trans-unit id="16e19f0fe9f2f0fac8233a6d34e80c1eabcf5b87" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::bucket</source>
          <target state="translated">std::unordered_multimap::bucket</target>
        </trans-unit>
        <trans-unit id="7bcd82c28bda607e7defdb3fc3c7c6fbaa3a3947" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::bucket_count</source>
          <target state="translated">std::unordered_multimap::bucket_count</target>
        </trans-unit>
        <trans-unit id="f56c20f2e0a64887bef2c1db9a39d059009c734a" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::bucket_size</source>
          <target state="translated">std::unordered_multimap::bucket_size</target>
        </trans-unit>
        <trans-unit id="1a4e64d4103d697d436c4f53df8af12287d961ac" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::cbegin</source>
          <target state="translated">std::unordered_multimap::cbegin</target>
        </trans-unit>
        <trans-unit id="73e6d7f9d19afe50762885d1dc017474729ef4fd" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::clear</source>
          <target state="translated">std::unordered_multimap::clear</target>
        </trans-unit>
        <trans-unit id="76376e44660fed7097d8ed8b954039da173bbf09" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::contains</source>
          <target state="translated">std::unordered_multimap::contains</target>
        </trans-unit>
        <trans-unit id="c180dee4be8839db11558b18697c3bd625789a64" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::count</source>
          <target state="translated">std::unordered_multimap::count</target>
        </trans-unit>
        <trans-unit id="638e81aab2a142bb76a4622bbb44d73335a7d23c" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::emplace</source>
          <target state="translated">std::unordered_multimap::emplace</target>
        </trans-unit>
        <trans-unit id="8fcf62f560ddaf4fe75582d0da8347b2ea1512e6" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::emplace_hint</source>
          <target state="translated">std::unordered_multimap::emplace_hint</target>
        </trans-unit>
        <trans-unit id="eb2a1b04684a0e0abbf7b8a8007ff32661db17ef" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::empty</source>
          <target state="translated">std::unordered_multimap::empty</target>
        </trans-unit>
        <trans-unit id="c81213b1413f84e27bdd469595d5df6fd7e79c75" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::end</source>
          <target state="translated">std::unordered_multimap::end</target>
        </trans-unit>
        <trans-unit id="589ce9dcde0c92cd131ac114eecec2f0a1357a67" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::end(size_type)</source>
          <target state="translated">std::unordered_multimap::end(size_type)</target>
        </trans-unit>
        <trans-unit id="e66eb4ea1a6d7aaa90350c2db6a72350a6fa802f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::equal_range</source>
          <target state="translated">std::unordered_multimap::equal_range</target>
        </trans-unit>
        <trans-unit id="f725225424c4981fdd2fb163fe5f23466fe285f9" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::erase</source>
          <target state="translated">std::unordered_multimap::erase</target>
        </trans-unit>
        <trans-unit id="2e1d7b388fcd49d4d996371ef654b71d87e0f59f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::extract</source>
          <target state="translated">std::unordered_multimap::extract</target>
        </trans-unit>
        <trans-unit id="e7ba9db3a4ed163b7a4e0c18cedaad7377350018" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::find</source>
          <target state="translated">std::unordered_multimap::find</target>
        </trans-unit>
        <trans-unit id="cc32382d08440ea4579395020435e8ac8da80e25" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::get_allocator</source>
          <target state="translated">std::unordered_multimap::get_allocator</target>
        </trans-unit>
        <trans-unit id="05e7331c854ce8b2ff69c98b6163affa32e8e7a6" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::hash_function</source>
          <target state="translated">std::unordered_multimap::hash_function</target>
        </trans-unit>
        <trans-unit id="f151ad4c2eaa6c1bda9f44d715b5fc0cbc2668c7" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::insert</source>
          <target state="translated">std::unordered_multimap::insert</target>
        </trans-unit>
        <trans-unit id="45ac0a28b45885320b8c6fd925031bf652d3ec3a" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::key_eq</source>
          <target state="translated">std::unordered_multimap::key_eq</target>
        </trans-unit>
        <trans-unit id="6c06f6612d3a708f3010fa2add2fdb199e357ad2" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::load_factor</source>
          <target state="translated">std::unordered_multimap::load_factor</target>
        </trans-unit>
        <trans-unit id="2321debc6b59dc7d6ddd4ecf64b9dcf8de00e8a2" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::max_bucket_count</source>
          <target state="translated">std::unordered_multimap::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="1473f37a21e9ce4b50d51af946bc969c2cbe5c88" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::max_load_factor</source>
          <target state="translated">std::unordered_multimap::max_load_factor</target>
        </trans-unit>
        <trans-unit id="9aa4f04ed563556c4aced71dae4bd6104479049f" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::max_size</source>
          <target state="translated">std::unordered_multimap::max_size</target>
        </trans-unit>
        <trans-unit id="ae6c610a64b3344dd4ff3f1364ba11516cbc3a38" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::merge</source>
          <target state="translated">std::unordered_multimap::merge</target>
        </trans-unit>
        <trans-unit id="17057640ee210164ce0a7cb17cf816767b766f78" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::operator=</source>
          <target state="translated">std::unordered_multimap::operator=</target>
        </trans-unit>
        <trans-unit id="8c355a8d6ba2a7a7c080afdec6e22b841bb57b49" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::rehash</source>
          <target state="translated">std::unordered_multimap::rehash</target>
        </trans-unit>
        <trans-unit id="f26d03c4794721d0d74d8e5476be94f84f1226f1" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::reserve</source>
          <target state="translated">std::unordered_multimap::reserve</target>
        </trans-unit>
        <trans-unit id="01c68080756c3125eab3dff9d8306b371630bb80" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::size</source>
          <target state="translated">std::unordered_multimap::size</target>
        </trans-unit>
        <trans-unit id="59ef499c7f7f6f89ec45a5a4e52ed0f225d85df5" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::swap</source>
          <target state="translated">std::unordered_multimap::swap</target>
        </trans-unit>
        <trans-unit id="35fd367f5256cd39f8a2eb9ae079f27bf13a59cc" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::unordered_multimap</source>
          <target state="translated">std::unordered_multimap::unordered_multimap</target>
        </trans-unit>
        <trans-unit id="5890ae39533a749b2b6ca6a07e3c9c58308f3af2" translate="yes" xml:space="preserve">
          <source>std::unordered_multimap::~unordered_multimap</source>
          <target state="translated">std::unordered_multimap::~unordered_multimap</target>
        </trans-unit>
        <trans-unit id="ee2aa3970aacc5fb937fddccf22af36371220431" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset</source>
          <target state="translated">std::unordered_multiset</target>
        </trans-unit>
        <trans-unit id="324265948b1f645a9c018b47cdf7198660a6bb7e" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::begin(size_type), std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cbegin(size_type)</source>
          <target state="translated">std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: begin (size_type), std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cbegin (size_type)</target>
        </trans-unit>
        <trans-unit id="dd6e5367b5e7a2f0c979688cc51d73c2909c1746" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::begin, std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cbegin</source>
          <target state="translated">std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: begin, std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="966979d9d38eb76ebd4b46c3d5fde0fd9c149592" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket</target>
        </trans-unit>
        <trans-unit id="2a3c23a139f878c36df4f30287172e298bfc7458" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</target>
        </trans-unit>
        <trans-unit id="e340b107ffc99a64e680875d6544b040c7df63a8" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</target>
        </trans-unit>
        <trans-unit id="2030590a180b3fbe9458fe8f7b5b186bcbaa5db4" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::clear</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::clear</target>
        </trans-unit>
        <trans-unit id="6371f173486b70bc6392f8925eb16ac489cc2c29" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::contains</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::contains</target>
        </trans-unit>
        <trans-unit id="4fdae22d2062f76d43fc4f1ab84888b3dd6784d3" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::count</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::count</target>
        </trans-unit>
        <trans-unit id="335e42f355e05ada366feb2be71834d1794c6871" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::emplace</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::emplace</target>
        </trans-unit>
        <trans-unit id="0b2ace0c66d3bdf03b9fee078f5a0139172fb2a6" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::emplace_hint</target>
        </trans-unit>
        <trans-unit id="97dd81eb75cf09356f4e144a8485e116d43098ed" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::empty</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::empty</target>
        </trans-unit>
        <trans-unit id="47aa8d096f4f02ca4fcf95fdb6941c2d0ffe0506" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::end(size_type), std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cend(size_type)</source>
          <target state="translated">std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: end (size_type), std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cend (size_type)</target>
        </trans-unit>
        <trans-unit id="c545cf7f3785d7b67cf7b118e7cb3d1188ebe99c" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::end, std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cend</source>
          <target state="translated">std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: end, std :: unordered_multiset &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cend</target>
        </trans-unit>
        <trans-unit id="4a5bb761a1adf086f5cff5ce3840159bc660ff0c" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::equal_range</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::equal_range</target>
        </trans-unit>
        <trans-unit id="eb560afe6226d75c38dded15ad000ab27fe25a46" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::erase</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::erase</target>
        </trans-unit>
        <trans-unit id="cbcbc6b88f7ead3f8da6f4136f4796b4e379ddd8" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::extract</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::extract</target>
        </trans-unit>
        <trans-unit id="0c67ee683ccc05c606a906ddd15d325dcdd18970" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::find</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::find</target>
        </trans-unit>
        <trans-unit id="8470d21a2a5b4c78fe1478041b0107a7ecbd6265" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::get_allocator</target>
        </trans-unit>
        <trans-unit id="33a1471fb71d920896b3da97bc49bbe44097acc0" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::hash_function</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::hash_function</target>
        </trans-unit>
        <trans-unit id="8752e603b25cabb7d99be15dbbb76c956ab58970" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::insert</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::insert</target>
        </trans-unit>
        <trans-unit id="8b8b2695cbb79c3ce4f2c03f6015db712848d9f6" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::key_eq</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::key_eq</target>
        </trans-unit>
        <trans-unit id="295dbf38f157e743d2767245ff71ccd4e6aab90c" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::load_factor</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::load_factor</target>
        </trans-unit>
        <trans-unit id="b0b15069334de535f0ad0afa4ef0dc19d98092f9" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="535a6ad12bece1f71b4f155c7b9d5991a9632add" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_load_factor</target>
        </trans-unit>
        <trans-unit id="a6846cf34e8b2d4397520dc262e4c4d7f0428ce8" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_size</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::max_size</target>
        </trans-unit>
        <trans-unit id="1c5837417fc66c1e4f4cc76698d6ec79deb2816c" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::merge</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::merge</target>
        </trans-unit>
        <trans-unit id="d99ba1d05f9137b11a5c94657db0196b9e6cf637" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::operator=</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::operator=</target>
        </trans-unit>
        <trans-unit id="1868de38304311f891c5cf2a0c997dd7457a82f5" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::rehash</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::rehash</target>
        </trans-unit>
        <trans-unit id="699a17c5e0832c4413bd7b9efa36fef2f3ff6bfc" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::reserve</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::reserve</target>
        </trans-unit>
        <trans-unit id="548a7599c152c0d44705524ffafd9013c19118e7" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::size</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::size</target>
        </trans-unit>
        <trans-unit id="4fbffc64e0f7707278c4a216ce63c5a06fbfd2d4" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::swap</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::swap</target>
        </trans-unit>
        <trans-unit id="c4fc1b06a450482a21195ead72e9a07b5f89df04" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::unordered_multiset</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::unordered_multiset</target>
        </trans-unit>
        <trans-unit id="f7676bcdcde0ee3c151abd235dd86430b9b9c028" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::~unordered_multiset</source>
          <target state="translated">std::unordered_multiset&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::~unordered_multiset</target>
        </trans-unit>
        <trans-unit id="2a5c468bb342ed06251c61863d67646355cf7190" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::bucket</source>
          <target state="translated">std::unordered_multiset::bucket</target>
        </trans-unit>
        <trans-unit id="c12caa9608c2cc3f59ecb3e65225ac37bb8f0d95" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::bucket_count</source>
          <target state="translated">std::unordered_multiset::bucket_count</target>
        </trans-unit>
        <trans-unit id="1972ddcdacc18cdf7a14ab0e26155fbab7efc907" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::bucket_size</source>
          <target state="translated">std::unordered_multiset::bucket_size</target>
        </trans-unit>
        <trans-unit id="e493ee074b6147889e3c8be51b2db17b3f906a04" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::cbegin</source>
          <target state="translated">std::unordered_multiset::cbegin</target>
        </trans-unit>
        <trans-unit id="717c9975db0b0869232460e955bc1121a9051696" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::clear</source>
          <target state="translated">std::unordered_multiset::clear</target>
        </trans-unit>
        <trans-unit id="f9fad05b496f2ac033ad57190ebd905e9a64d68f" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::contains</source>
          <target state="translated">std::unordered_multiset::contains</target>
        </trans-unit>
        <trans-unit id="e693d1ff3e4e64ee67c86df38c6df03adc1360e3" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::count</source>
          <target state="translated">std::unordered_multiset::count</target>
        </trans-unit>
        <trans-unit id="afa72c7d5dfd262b2e46f96b1beab120ac4f9b86" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::emplace</source>
          <target state="translated">std::unordered_multiset::emplace</target>
        </trans-unit>
        <trans-unit id="5bec68d90c053ceea85d49ac53072e0553a6dea7" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::emplace_hint</source>
          <target state="translated">std::unordered_multiset::emplace_hint</target>
        </trans-unit>
        <trans-unit id="2d7e09dce7662f164119e5acee5169524486b350" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::empty</source>
          <target state="translated">std::unordered_multiset::empty</target>
        </trans-unit>
        <trans-unit id="06dc575b62aea5927240692d2c66c29e835d91a1" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::end</source>
          <target state="translated">std::unordered_multiset::end</target>
        </trans-unit>
        <trans-unit id="121d0785216d7e6fa580d398eaa09c19c0982a3a" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::end(size_type)</source>
          <target state="translated">std::unordered_multiset::end(size_type)</target>
        </trans-unit>
        <trans-unit id="0ce1464bead6950f8c07a39daa22a35f9a23f439" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::equal_range</source>
          <target state="translated">std::unordered_multiset::equal_range</target>
        </trans-unit>
        <trans-unit id="8b596a9cdabfa62076ec7cfd48f042bb9fa5a77b" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::erase</source>
          <target state="translated">std::unordered_multiset::erase</target>
        </trans-unit>
        <trans-unit id="4b4f0c60129c8c7813a5ed768610f60a75ff357b" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::extract</source>
          <target state="translated">std::unordered_multiset::extract</target>
        </trans-unit>
        <trans-unit id="e99f7669a327f2ba8d88bdbab92d78dd9004b56d" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::find</source>
          <target state="translated">std::unordered_multiset::find</target>
        </trans-unit>
        <trans-unit id="fd69f2852d6d816cddf4f03629bf441852002ee1" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::get_allocator</source>
          <target state="translated">std::unordered_multiset::get_allocator</target>
        </trans-unit>
        <trans-unit id="7e13a9d12d34f2b4b96c2eef3cf20a03787f20b1" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::hash_function</source>
          <target state="translated">std::unordered_multiset::hash_function</target>
        </trans-unit>
        <trans-unit id="71f0bade8f63472585a0158eb0b0e234d1d0447a" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::insert</source>
          <target state="translated">std::unordered_multiset::insert</target>
        </trans-unit>
        <trans-unit id="1c1e683e7fdaed78b7afee99abaa1c6bcbdea1f3" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::key_eq</source>
          <target state="translated">std::unordered_multiset::key_eq</target>
        </trans-unit>
        <trans-unit id="d67c372f6215823880afd7212aaf8b26f482b555" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::load_factor</source>
          <target state="translated">std::unordered_multiset::load_factor</target>
        </trans-unit>
        <trans-unit id="04de9e2f003503a29254e9d7333ddef97c5cbd05" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::max_bucket_count</source>
          <target state="translated">std::unordered_multiset::max_bucket_count</target>
        </trans-unit>
        <trans-unit id="811399f02a7dca21cbc11b84e3424ddb8516cf89" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::max_load_factor</source>
          <target state="translated">std::unordered_multiset::max_load_factor</target>
        </trans-unit>
        <trans-unit id="4c0dfa1b456e10ee69389239e47cdc2a3cf2c81f" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::max_size</source>
          <target state="translated">std::unordered_multiset::max_size</target>
        </trans-unit>
        <trans-unit id="d508c698e5e96eefe4a3e749098dae3f06557452" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::merge</source>
          <target state="translated">std::unordered_multiset::merge</target>
        </trans-unit>
        <trans-unit id="b4776ebc225ac2e2157099b51bdb09b9793e1588" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::operator=</source>
          <target state="translated">std::unordered_multiset::operator=</target>
        </trans-unit>
        <trans-unit id="865cfe8033bde7b5246cb014ebc9cb49374ce7cf" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::rehash</source>
          <target state="translated">std::unordered_multiset::rehash</target>
        </trans-unit>
        <trans-unit id="7370da56b2219c4ede2eca223377e17bdb5c6919" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::reserve</source>
          <target state="translated">std::unordered_multiset::reserve</target>
        </trans-unit>
        <trans-unit id="076b2af8939b3d267ca4da7f2e89a074d2fd72f5" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::size</source>
          <target state="translated">std::unordered_multiset::size</target>
        </trans-unit>
        <trans-unit id="9f171f6b27a16331bc36d18c029393086d42bfc8" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::swap</source>
          <target state="translated">std::unordered_multiset::swap</target>
        </trans-unit>
        <trans-unit id="2db0b78405977190a502091792a4b2f7a2a743e3" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::unordered_multiset</source>
          <target state="translated">std::unordered_multiset::unordered_multiset</target>
        </trans-unit>
        <trans-unit id="adc7ed0374ef003f62a37cacd58c69cd96d2d7c6" translate="yes" xml:space="preserve">
          <source>std::unordered_multiset::~unordered_multiset</source>
          <target state="translated">std::unordered_multiset::~unordered_multiset</target>
        </trans-unit>
        <trans-unit id="62c2a00adb9612db54202ce5235846fd77a10acd" translate="yes" xml:space="preserve">
          <source>std::unordered_set</source>
          <target state="translated">std::unordered_set</target>
        </trans-unit>
        <trans-unit id="86f4a315f45c59f3a9929878569512d4b47ff843" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::begin(size_type), std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cbegin(size_type)</source>
          <target state="translated">std :: unordered_set &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: begin (size_type), std :: unordered_set &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cbegin (size_type)</target>
        </trans-unit>
        <trans-unit id="ab1dc5259972bee6e8b43cb36b06bdc9800e40ba" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::begin, std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::cbegin</source>
          <target state="translated">std :: unordered_set &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: begin, std :: unordered_set &amp;lt;Key, Hash, KeyEqual, Allocator&amp;gt; :: cbegin</target>
        </trans-unit>
        <trans-unit id="023a3adde6d193096d22a4e1a172f6244306ae9f" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket</source>
          <target state="translated">std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket</target>
        </trans-unit>
        <trans-unit id="5115209153824cea645370eb9d2986c54b23c68a" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</source>
          <target state="translated">std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_count</target>
        </trans-unit>
        <trans-unit id="ed4b40f00d0a0b21a1f6061d0f4feffb97db09b6" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</source>
          <target state="translated">std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::bucket_size</target>
        </trans-unit>
        <trans-unit id="c09840e9f1da30173773ca8f3209ac74406d54b0" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::clear</source>
          <target state="translated">std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::clear</target>
        </trans-unit>
        <trans-unit id="cbbbdd6768cf2d9e8a353c0d2a5c5c0c1bfcbb21" translate="yes" xml:space="preserve">
          <source>std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::contains</source>
          <target state="translated">std::unordered_set&amp;lt;Key,Hash,KeyEqual,Allocator&amp;gt;::contains</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
