<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="f29d5f2d3c95a36ee2b0ea46a567a632aaf41a04" translate="yes" xml:space="preserve">
          <source>MDN switch statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2193d22aa101ed468111273da4fc9a8ff26cb08" translate="yes" xml:space="preserve">
          <source>MDN: &lt;code&gt;typeof&lt;/code&gt; documentation</source>
          <target state="translated">MDN: &lt;code&gt;typeof&lt;/code&gt; документации</target>
        </trans-unit>
        <trans-unit id="94dc241af5d9eb0a680088ee20211bc0c0311d3c" translate="yes" xml:space="preserve">
          <source>MDN: Functions getter</source>
          <target state="translated">MDN:Геттер функций</target>
        </trans-unit>
        <trans-unit id="afae02907d2f28836e8ebcf79b528469165b5953" translate="yes" xml:space="preserve">
          <source>MDN: Operator Precedence</source>
          <target state="translated">MDN:Приоритет оператора</target>
        </trans-unit>
        <trans-unit id="40980a42cc4812dad76a30f975d0ecb98f42a1d9" translate="yes" xml:space="preserve">
          <source>MDN: RegExp Constructor</source>
          <target state="translated">MDN:Конструктор RegExp</target>
        </trans-unit>
        <trans-unit id="b2777e08fa18d849dfd73d3f3047a7b8ba8d3042" translate="yes" xml:space="preserve">
          <source>MDN: Regular Expressions</source>
          <target state="translated">MDN:регулярные выражения</target>
        </trans-unit>
        <trans-unit id="09d82cc59ea6b15487145efc5860cbacae4c5187" translate="yes" xml:space="preserve">
          <source>Make ESLint even better by &lt;a href=&quot;developer-guide/contributing/index&quot;&gt;contributing&lt;/a&gt;.</source>
          <target state="translated">Сделайте ESLint еще лучше, &lt;a href=&quot;developer-guide/contributing/index&quot;&gt;внося свой вклад&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="08102ad0462aa310615f1de442b43a80696f3f09" translate="yes" xml:space="preserve">
          <source>Make fixes as small as possible. Fixes that are unnecessarily large could conflict with other fixes, and prevent them from being applied.</source>
          <target state="translated">Сделайте исправления как можно меньше.Исправления неоправданно больших размеров могут конфликтовать с другими исправлениями и препятствовать их применению.</target>
        </trans-unit>
        <trans-unit id="49ba3a90310eda05b6222d40e80f85b80ab264cc" translate="yes" xml:space="preserve">
          <source>Make fixes that are as small as possible. Anything more than a single character is risky and could prevent other, simpler fixes from being made.</source>
          <target state="translated">Делайте исправления как можно меньшего размера.Все,что больше,чем один персонаж,является рискованным и может помешать другим,более простым исправлениям.</target>
        </trans-unit>
        <trans-unit id="003acc6ee30f8dfe6d64cbf566782eadf992c2a5" translate="yes" xml:space="preserve">
          <source>Make frequent use of comments to aid others in understanding your code. Use comments when:</source>
          <target state="translated">Часто используйте комментарии,чтобы помочь другим людям понять ваш код.Использовать комментарии,когда:</target>
        </trans-unit>
        <trans-unit id="48605054d2a26e6ebeb6461152bd41032c424c7e" translate="yes" xml:space="preserve">
          <source>Make separate pull requests for unrelated changes. Large pull requests with multiple unrelated changes may be closed without merging.</source>
          <target state="translated">Делайте отдельные запросы на подтягивание для несвязанных изменений.Большие тяговые запросы с множеством несвязанных изменений могут быть закрыты без слияния.</target>
        </trans-unit>
        <trans-unit id="66052a8bb781ea4c3486f29d92fd4d76dd3b173b" translate="yes" xml:space="preserve">
          <source>Make sure your commit is formatted correctly.</source>
          <target state="translated">Убедитесь,что ваш коммит правильно отформатирован.</target>
        </trans-unit>
        <trans-unit id="2294106611bb7be36ee5d5d272a03c7e228c69ec" translate="yes" xml:space="preserve">
          <source>Make the changes to the code and tests, following the &lt;a href=&quot;../code-conventions&quot;&gt;code conventions&lt;/a&gt; as you go. Once you have finished, commit the changes to your branch:</source>
          <target state="translated">Вносите изменения в код и тесты, следуя &lt;a href=&quot;../code-conventions&quot;&gt;соглашениям&lt;/a&gt; о коде по мере продвижения. Как только вы закончите, зафиксируйте изменения в своей ветке:</target>
        </trans-unit>
        <trans-unit id="4b6914f73852714eeda13d3e462e3d5fdef8f379" translate="yes" xml:space="preserve">
          <source>Make your changes</source>
          <target state="translated">Делайте ваши изменения</target>
        </trans-unit>
        <trans-unit id="bae6e15f8b41918cf92f172d566b4d738bc07054" translate="yes" xml:space="preserve">
          <source>Managing the execution environment for &lt;code&gt;Linter&lt;/code&gt;</source>
          <target state="translated">Управление средой исполнения для &lt;code&gt;Linter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0373508bebe8dbaeab01855b2503dec101737d8" translate="yes" xml:space="preserve">
          <source>Many JavaScript libraries use the callback pattern to manage asynchronous operations. A program of any complexity will most likely need to manage several asynchronous operations at various levels of concurrency. A common pitfall that is easy to fall into is nesting callbacks, which makes code more difficult to read the deeper the callbacks are nested.</source>
          <target state="translated">Многие библиотеки JavaScript используют шаблон обратного вызова для управления асинхронными операциями.Программа любой сложности,скорее всего,будет нуждаться в управлении несколькими асинхронными операциями на различных уровнях параллельности.Общим подводным камнем,в который легко попасть,является вложение обратных вызовов,что затрудняет чтение кода,чем глубже вложены обратные вызовы.</target>
        </trans-unit>
        <trans-unit id="f31b27c63c34d0475df6058a328447b442261068" translate="yes" xml:space="preserve">
          <source>Many codebases require strings to be defined in a consistent manner.</source>
          <target state="translated">Многие кодовые базы требуют последовательного определения строк.</target>
        </trans-unit>
        <trans-unit id="3f3335e45cb0fe011f2c670521d47c996929538a" translate="yes" xml:space="preserve">
          <source>Many developers consider code difficult to read if blocks are nested beyond a certain depth.</source>
          <target state="translated">Многие разработчики считают код сложным для чтения,если блоки вложены на определенную глубину.</target>
        </trans-unit>
        <trans-unit id="ec6dcf6f91e26c974d5a7820b7cb35c058c70329" translate="yes" xml:space="preserve">
          <source>Many people enjoy a terser code style and don't mind comments bumping up against code. If you fall into that category this rule is not for you.</source>
          <target state="translated">Многие люди наслаждаются стилем триггерного кода и не возражают против комментариев,натыкающихся на код.Если вы попадаете в эту категорию,то это правило не для вас.</target>
        </trans-unit>
        <trans-unit id="30142d0203615d41e1641b80d943d73cc5ab1f7d" translate="yes" xml:space="preserve">
          <source>Many style guides require a particular style for comments that span multiple lines. For example, some style guides prefer the use of a single block comment for multiline comments, whereas other style guides prefer consecutive line comments.</source>
          <target state="translated">Многие руководства по стилю требуют определенного стиля для комментариев,которые охватывают несколько строк.Например,некоторые руководства стилей предпочитают использовать один блочный комментарий для многострочных комментариев,в то время как другие руководства стилей предпочитают последовательные линейные комментарии.</target>
        </trans-unit>
        <trans-unit id="1b81db8af58d6a82844c2a7f8a0fb423a248acad" translate="yes" xml:space="preserve">
          <source>Many style guides require empty lines before or after comments. The primary goal of these rules is to make the comments easier to read and improve readability of the code.</source>
          <target state="translated">Многие руководства по стилю требуют пустых строк до или после комментариев.Основная цель этих правил-сделать комментарии более удобными для чтения и улучшить читабельность кода.</target>
        </trans-unit>
        <trans-unit id="65510d0ed7112a32a93fbfa0f852ca9727017a1d" translate="yes" xml:space="preserve">
          <source>Many style guides require or disallow newlines inside of function parentheses.</source>
          <target state="translated">Многие руководства по стилю требуют или запрещают добавлять новые строки внутри функциональных скобок.</target>
        </trans-unit>
        <trans-unit id="0ed12807412804e8c761c63c5aafe1b92dde8f29" translate="yes" xml:space="preserve">
          <source>Many users found this behavior confusing, because if they made a typo in a filename, ESLint would appear to lint that file successfully while actually not linting anything.</source>
          <target state="translated">Многие пользователи находят такое поведение запутанным,потому что если они делают опечатку в имени файла,ESLint будет выглядеть так,будто он успешно перелистывает этот файл,в то время как на самом деле ничего не перелистывает.</target>
        </trans-unit>
        <trans-unit id="75eae4786a36e18e4c433733218135d176e49561" translate="yes" xml:space="preserve">
          <source>Many versioning systems (like git and subversion) can automatically ensure the correct ending. However to cover all contingencies, you can activate this rule.</source>
          <target state="translated">Многие системы версионирования (например,git и subversion)могут автоматически гарантировать правильное окончание.Однако,чтобы покрыть все непредвиденные ситуации,вы можете активировать это правило.</target>
        </trans-unit>
        <trans-unit id="d43df01241be64a2f04e14f16ff54fa881de6350" translate="yes" xml:space="preserve">
          <source>Medium - Runs ESLint on jQuery</source>
          <target state="translated">Средний-Запускает ESLint на jQuery</target>
        </trans-unit>
        <trans-unit id="08da200116809cb87f9df70d5b14e0b115e836c5" translate="yes" xml:space="preserve">
          <source>MemberExpression</source>
          <target state="translated">MemberExpression</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="78327bd6b1c4878fa59ed96c8e3108c92ded9378" translate="yes" xml:space="preserve">
          <source>Migrating</source>
          <target state="translated">Migrating</target>
        </trans-unit>
        <trans-unit id="f19f19cf7d792e42d3a20e6c6066ddb485e88b86" translate="yes" xml:space="preserve">
          <source>Migrating from JSCS</source>
          <target state="translated">Мигрируя из АОС</target>
        </trans-unit>
        <trans-unit id="f4cc004b36f93dc98ec6cb8cdd988862d89b0841" translate="yes" xml:space="preserve">
          <source>Migrating to v1.0.0</source>
          <target state="translated">Переход на v1.0.0</target>
        </trans-unit>
        <trans-unit id="207ad564379ab84e0bd1d9f94528cf475fccedfe" translate="yes" xml:space="preserve">
          <source>Migrating to v2.0.0</source>
          <target state="translated">Переход на v2.0.0</target>
        </trans-unit>
        <trans-unit id="6996ff0c977043ad7b164e529401b9633d67d887" translate="yes" xml:space="preserve">
          <source>Migrating to v3.0.0</source>
          <target state="translated">Переход на v3.0.0</target>
        </trans-unit>
        <trans-unit id="b7e113904f56ea23562186c3f481bcb45dd5dd88" translate="yes" xml:space="preserve">
          <source>Migrating to v4.0.0</source>
          <target state="translated">Переход на v4.0.0</target>
        </trans-unit>
        <trans-unit id="3a672cb43559c6811fe6c8d12f1ff180dd8516ab" translate="yes" xml:space="preserve">
          <source>Migrating to v5.0.0</source>
          <target state="translated">Переход на v5.0.0</target>
        </trans-unit>
        <trans-unit id="519f16166bf3e002d2ccde6246ebacf01cc0a2bb" translate="yes" xml:space="preserve">
          <source>Migrating to v6.0.0</source>
          <target state="translated">Переход на v6.0.0</target>
        </trans-unit>
        <trans-unit id="d246782d0c4e2e56023b3b51f8f80bebc4084244" translate="yes" xml:space="preserve">
          <source>Migrating to v7.0.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528b503f97c282e46488116b7644afc7003a7185" translate="yes" xml:space="preserve">
          <source>Mimosa: &lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;mimosa-eslint&lt;/a&gt;</source>
          <target state="translated">Мимоза: &lt;a href=&quot;https://www.npmjs.com/package/mimosa-eslint&quot;&gt;мимоза-эслинт&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="99c887ad129c82e774781a1e88541c3f8352bfe0" translate="yes" xml:space="preserve">
          <source>Mocha.js: &lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</source>
          <target state="translated">Mocha.js: &lt;a href=&quot;https://www.npmjs.com/package/mocha-eslint&quot;&gt;mocha-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7d7a3d6a2ddcd05134bdb5c8786e8cf510ba6fd1" translate="yes" xml:space="preserve">
          <source>Modern terminals like &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; or &lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake&lt;/a&gt; expect a specific results format to automatically open filenames when they are clicked. Most terminals support this format for that purpose:</source>
          <target state="translated">Современные терминалы, такие как &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt; или &lt;a href=&quot;http://guake-project.org/&quot;&gt;Guake,&lt;/a&gt; ожидают, что определенный формат результатов автоматически открывает имена файлов при нажатии на них. Большинство терминалов поддерживают этот формат для этой цели:</target>
        </trans-unit>
        <trans-unit id="3846ef909df0be6113f867ef70064e247aabbd00" translate="yes" xml:space="preserve">
          <source>Monitor the status of the Travis CI build for your pull request. If it fails, please investigate why. We cannot merge pull requests that fail Travis for any reason.</source>
          <target state="translated">Следите за состоянием сборки Travis CI для вашего запроса на вытаскивание.Если он провалится,пожалуйста,расследуйте,почему.Мы не можем объединять тяговые запросы,которые по каким-либо причинам проваливают Трэвис.</target>
        </trans-unit>
        <trans-unit id="0dc20fad549e82acb25baf9beda60f2ad6f4782b" translate="yes" xml:space="preserve">
          <source>More Control on Unit Testing</source>
          <target state="translated">Дополнительный контроль за тестированием модулей</target>
        </trans-unit>
        <trans-unit id="8985cd96f1b823aecfe823a7ea114c4ab4c77f3f" translate="yes" xml:space="preserve">
          <source>More about Complexity in JavaScript</source>
          <target state="translated">Подробнее о сложности в JavaScript</target>
        </trans-unit>
        <trans-unit id="cf861d594fba09fdccc03924cfd4dbfa37e34457" translate="yes" xml:space="preserve">
          <source>More clear:</source>
          <target state="translated">Более ясно:</target>
        </trans-unit>
        <trans-unit id="f9a9f89b9373f2be282736f322c949e24ac40fdf" translate="yes" xml:space="preserve">
          <source>More on ES6 arrow functions</source>
          <target state="translated">Подробнее о функциях стрелки ES6</target>
        </trans-unit>
        <trans-unit id="b4a364a72443f90f75eadeb97e6069788cc6ba06" translate="yes" xml:space="preserve">
          <source>More report messages now have full location ranges</source>
          <target state="translated">Больше сообщений отчетов теперь имеют полные диапазоны местоположения</target>
        </trans-unit>
        <trans-unit id="6e669deb33d5dab4d7c948c39f7c25a8a1410c31" translate="yes" xml:space="preserve">
          <source>Most code conventions require either tabs or spaces be used for indentation. As such, it's usually an error if a single line of code is indented with both tabs and spaces.</source>
          <target state="translated">Большинство кодовых соглашений требуют использования либо закладок,либо пробелов для отступов.Как правило,это ошибка,если одна строка кода имеет отступ и с закладками,и с пробелами.</target>
        </trans-unit>
        <trans-unit id="d26ee49c9e2ae7e618cb4f098141d60255bb1c01" translate="yes" xml:space="preserve">
          <source>Most of the installers already come with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; but if for some reason npm doesn't work on your system, you can install it manually using the instructions on the site.</source>
          <target state="translated">Большинство установщиков уже поставляются с &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm,&lt;/a&gt; но если по какой-то причине npm не работает в вашей системе, вы можете установить его вручную, используя инструкции на сайте.</target>
        </trans-unit>
        <trans-unit id="cda170b39a2aee0a27ca48dc565c4de1f9771f33" translate="yes" xml:space="preserve">
          <source>Most of the installers come with &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; already installed, but if for some reason it doesn't work on your system, you can install it manually using the instructions on the site.</source>
          <target state="translated">Большинство установщиков поставляются с уже установленным &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; , но если по какой-то причине он не работает в вашей системе, вы можете установить его вручную, используя инструкции на сайте.</target>
        </trans-unit>
        <trans-unit id="c0c042b4288a4f46ee5fbcb5a35c3c86ee3a0aa9" translate="yes" xml:space="preserve">
          <source>Most parts of ESLint have unit tests associated with them. Unit tests are written using &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; and are required when making contributions to ESLint. You'll find all of the unit tests in the &lt;code&gt;tests&lt;/code&gt; directory.</source>
          <target state="translated">С большинством частей ESLint связаны модульные тесты. Модульные тесты написаны с использованием &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; и необходимы при внесении вклада в ESLint. Вы найдете все модульные тесты в каталоге &lt;code&gt;tests&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fde66fa86f8517d887e54616bf1fb31656fc7f81" translate="yes" xml:space="preserve">
          <source>Motivations</source>
          <target state="translated">Motivations</target>
        </trans-unit>
        <trans-unit id="cd847d892e51c9af96a07d5f1327caaaa74f5961" translate="yes" xml:space="preserve">
          <source>Mozilla Developer Network</source>
          <target state="translated">Mozilla Developer Network</target>
        </trans-unit>
        <trans-unit id="1717de09461ac8ad667382f9284cc154ed5fcf13" translate="yes" xml:space="preserve">
          <source>Multi-Line Comments</source>
          <target state="translated">Многострочные комментарии</target>
        </trans-unit>
        <trans-unit id="50ffbaa596feb6c3fce6a0ab79b26de80c0fc9ad" translate="yes" xml:space="preserve">
          <source>Multi-line &lt;code&gt;eslint-disable-line&lt;/code&gt; directives are now reported as problems</source>
          <target state="translated">Многострочные &lt;code&gt;eslint-disable-line&lt;/code&gt; теперь сообщаются как проблемы</target>
        </trans-unit>
        <trans-unit id="ebd80a2db4954a31bc8bbc5ce38618ea3077ca04" translate="yes" xml:space="preserve">
          <source>Multi-line comments should be used to document code that requires more explanation. Each multi-line comment should have at least three lines:</source>
          <target state="translated">Многострочные комментарии должны использоваться для документирования кода,требующего более подробного объяснения.Каждый многострочный комментарий должен содержать не менее трех строк:</target>
        </trans-unit>
        <trans-unit id="b97cd68ceb9fb3aefd437fb8bac6c169f39dc7ef" translate="yes" xml:space="preserve">
          <source>Multiline Properties</source>
          <target state="translated">Многогранные свойства</target>
        </trans-unit>
        <trans-unit id="25384bc20fcb587fe7b1a27bd9646bb5677ec5ce" translate="yes" xml:space="preserve">
          <source>Multiple glob patterns can be provided within a single override block. A file must match at least one of the supplied patterns for the configuration to apply.</source>
          <target state="translated">В пределах одного блока обхода может быть предусмотрено несколько шаблонов.Файл должен соответствовать,по крайней мере,одной из поставляемых шаблонов,чтобы применить конфигурацию.</target>
        </trans-unit>
        <trans-unit id="75af35131e430e8f953818ff04be0c62dc2c9f54" translate="yes" xml:space="preserve">
          <source>Multiple object/property values can be disallowed, and you can specify an optional message:</source>
          <target state="translated">Многочисленные значения объектов/свойств могут быть запрещены,и вы можете указать необязательное сообщение:</target>
        </trans-unit>
        <trans-unit id="ce6c9b518828a9995fa8b5eaa2bb15a280c804ca" translate="yes" xml:space="preserve">
          <source>Multiple properties with the same key in object literals can cause unexpected behavior in your application.</source>
          <target state="translated">Многочисленные свойства с одним и тем же ключом в литералах объектов могут привести к неожиданному поведению в вашем приложении.</target>
        </trans-unit>
        <trans-unit id="2ea30e5e8aba10118d84047ac8d06b2fb97d351e" translate="yes" xml:space="preserve">
          <source>Multiple spaces in a row that are not used for indentation are typically mistakes. For example:</source>
          <target state="translated">Многочисленные пробелы в строке,которые не используются для отступов,как правило,являются ошибками.Например:</target>
        </trans-unit>
        <trans-unit id="fe7b50504e864db175792f08ac3122cab2513fc4" translate="yes" xml:space="preserve">
          <source>Multiple var statements in JavaScript, not superfluous</source>
          <target state="translated">Многочисленные операторы var в JavaScript,не лишние</target>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="45b150c33703661a4e069fa3f97c482cd27685ef" translate="yes" xml:space="preserve">
          <source>Naming Convention</source>
          <target state="translated">Конвенция о наименовании</target>
        </trans-unit>
        <trans-unit id="4a1334b26c176a4a0cf6f3310906a31587677f7c" translate="yes" xml:space="preserve">
          <source>Naming things consistently in a project is an often underestimated aspect of code creation. When done correctly, it can save your team hours of unnecessary head scratching and misdirections. This rule allows you to precisely define and enforce the variables and function names on your team should use. No more limiting yourself to camelCase, snake_case, PascalCase or oHungarianNotation. Id-match has all your needs covered!</source>
          <target state="translated">Последовательное переименование вещей в проекте-часто недооцениваемый аспект создания кода.При правильном выполнении это может избавить вашу команду от многих часов ненужных царапин на голове и неправильных указаний.Это правило позволяет точно определить и применить переменные и имена функций,которые должна использовать ваша команда.Больше не нужно ограничиваться верблюжьим кейсом,snake_case,PascalCase или oHungarianNotation.Id-match покрывает все ваши потребности!</target>
        </trans-unit>
        <trans-unit id="f9c51726a21f2c071e2eaecdc1f58e85c2e063e9" translate="yes" xml:space="preserve">
          <source>Negated conditions are more difficult to understand. Code can be made more readable by inverting the condition instead.</source>
          <target state="translated">Негативные условия сложнее понять.Код можно сделать более читабельным,перевернув условие.</target>
        </trans-unit>
        <trans-unit id="e4be93dc7bf3a2d0c376b542c46f2be17b015f34" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;overrides&lt;/code&gt; setting will be applied only if the glob patterns of both of the parent config and the child config matched. This is the same when the extended configs have &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">Параметр вложенных &lt;code&gt;overrides&lt;/code&gt; будет применяться только в том случае, если совпадают шаблоны глобусов родительской и дочерней конфигурации. То же самое, когда расширенные конфигурации имеют настройку &lt;code&gt;overrides&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bba2cf8efb9ea175365987d5e97406eab0eb07ac" translate="yes" xml:space="preserve">
          <source>Nested long method chains like the below example are often broken onto separate lines for readability:</source>
          <target state="translated">Вложенные длинные цепочки методов,как в примере ниже,часто разбиваются на отдельные строки для удобочитаемости:</target>
        </trans-unit>
        <trans-unit id="0f7143e0984fd302373a44b923b04ef166d1d6d4" translate="yes" xml:space="preserve">
          <source>Nesting ternary expressions can make code more difficult to understand.</source>
          <target state="translated">Вложение тернарных выражений может затруднить понимание кода.</target>
        </trans-unit>
        <trans-unit id="e868c2d163da18b704134c91dfe580b7476d872b" translate="yes" xml:space="preserve">
          <source>Never use &lt;code&gt;eval()&lt;/code&gt;.</source>
          <target state="translated">Никогда не используйте &lt;code&gt;eval()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17303bc383f07ad6ca5f1e713ad09a8e4c5aceb1" translate="yes" xml:space="preserve">
          <source>Never use the &lt;code&gt;with&lt;/code&gt; statement. This statement isn't available in strict mode and likely won't be available in future ECMAScript editions.</source>
          <target state="translated">Никогда не используйте оператор &lt;code&gt;with&lt;/code&gt; . Этот оператор недоступен в строгом режиме и, вероятно, не будет доступен в будущих выпусках ECMAScript.</target>
        </trans-unit>
        <trans-unit id="ccd1fb39539ac8b89e4d82497beb7205dfc545dc" translate="yes" xml:space="preserve">
          <source>Never use the primitive wrapper types, such as &lt;code&gt;String&lt;/code&gt;, to create new objects.</source>
          <target state="translated">Никогда не используйте примитивные типы-оболочки, такие как &lt;code&gt;String&lt;/code&gt; , для создания новых объектов.</target>
        </trans-unit>
        <trans-unit id="b8fd74418c174fa1a6547580b4f9d50c65e103b2" translate="yes" xml:space="preserve">
          <source>Never use the special value &lt;code&gt;undefined&lt;/code&gt;. To see if a variable has been defined, use the &lt;code&gt;typeof&lt;/code&gt; operator:</source>
          <target state="translated">Никогда не используйте специальное значение &lt;code&gt;undefined&lt;/code&gt; . Чтобы узнать, была ли определена переменная, используйте оператор &lt;code&gt;typeof&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e29869dc1c4b4ed49384ced7f3787145a78ff2a6" translate="yes" xml:space="preserve">
          <source>Never.</source>
          <target state="translated">Never.</target>
        </trans-unit>
        <trans-unit id="a5f5c5a26121891aea3614a5ee0763dc3b389722" translate="yes" xml:space="preserve">
          <source>Nevertheless, the ECMAScript specification treats &lt;code&gt;\8&lt;/code&gt; and &lt;code&gt;\9&lt;/code&gt; in string literals as a legacy feature. This syntax is optional if the ECMAScript host is not a web browser. Browsers still have to support it, but only in non-strict mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c2bffc4ed85d835ff90e67b6700b9717359c25" translate="yes" xml:space="preserve">
          <source>New Rules</source>
          <target state="translated">Новые правила</target>
        </trans-unit>
        <trans-unit id="b90e91c1c9b0532e10c8d94b3242c03a7c521d78" translate="yes" xml:space="preserve">
          <source>New Rules in &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">Новые правила в &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="098b5a1915693dd6ff64ee239f651997dde49e83" translate="yes" xml:space="preserve">
          <source>New rules have been added to &lt;code&gt;eslint:recommended&lt;/code&gt;</source>
          <target state="translated">В &lt;code&gt;eslint:recommended&lt;/code&gt; добавлены новые правила : рекомендуется</target>
        </trans-unit>
        <trans-unit id="3f170caead65df254d786032a409a6f6d204bca6" translate="yes" xml:space="preserve">
          <source>Next Steps</source>
          <target state="translated">Следующие шаги</target>
        </trans-unit>
        <trans-unit id="f76dd91a3359617271ed7ffd8b7df9bbc0c954e1" translate="yes" xml:space="preserve">
          <source>Next, push your changes to your clone:</source>
          <target state="translated">Дальше,надавите на клон:</target>
        </trans-unit>
        <trans-unit id="432bb6269b57474b24c9803b75937c68ef4b90c5" translate="yes" xml:space="preserve">
          <source>No Longer Exporting cli</source>
          <target state="translated">Больше нет Клиент на экспорт</target>
        </trans-unit>
        <trans-unit id="6fe37c89ea3654de81c59847379a8780e76d887e" translate="yes" xml:space="preserve">
          <source>No one will blame you for backing out of an issue if you are unable to complete it. We just want to keep the process moving along as efficiently as possible.</source>
          <target state="translated">Никто не будет винить вас в том,что вы отказались от проблемы,если вы не сможете ее решить.Мы просто хотим,чтобы процесс продвигался как можно более эффективно.</target>
        </trans-unit>
        <trans-unit id="015936150c4240bf1685a0beae94734e5c0fd2e7" translate="yes" xml:space="preserve">
          <source>No rules are enabled by default. The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a &lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;configuration file&lt;/a&gt; enables rules that report common problems, which have a check mark  below.</source>
          <target state="translated">По умолчанию правила не включены. Свойство &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; в &lt;a href=&quot;../user-guide/configuring#extending-configuration-files&quot;&gt;файле конфигурации&lt;/a&gt; включает правила, которые сообщают о типичных проблемах, отмеченных флажком ниже.</target>
        </trans-unit>
        <trans-unit id="43b56bdc9a2f449dd95a29cc4403aabc8d987dfc" translate="yes" xml:space="preserve">
          <source>Node.JS</source>
          <target state="translated">Node.JS</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="7c492f9c09c9ff17a16de6ed9c821ef76255da51" translate="yes" xml:space="preserve">
          <source>Node.js 10 (10.13.0 and above)</source>
          <target state="translated">Node.js 10 (10.13.0 и выше)</target>
        </trans-unit>
        <trans-unit id="4ea1289b9b156c25356b48232636d10ae1337444" translate="yes" xml:space="preserve">
          <source>Node.js 10 (&lt;code&gt;10.12.0&lt;/code&gt; and above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb72478afd730580cf0fbc94ae9ad267b59b6d" translate="yes" xml:space="preserve">
          <source>Node.js 12 and above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d89d5227cc3415b0eef08538029343dc658ba6" translate="yes" xml:space="preserve">
          <source>Node.js 4 is no longer supported</source>
          <target state="translated">Node.js 4 больше не поддерживается</target>
        </trans-unit>
        <trans-unit id="5a40f605ee0fd0ee1b8acb34f313bb0a19612661" translate="yes" xml:space="preserve">
          <source>Node.js 6 (6.14.0 and above)</source>
          <target state="translated">Node.js 6 (6.14.0 и выше)</target>
        </trans-unit>
        <trans-unit id="e90914a7b373d6529d8a016e66f5135b658d37af" translate="yes" xml:space="preserve">
          <source>Node.js 6 is no longer supported</source>
          <target state="translated">Node.js 6 больше не поддерживается</target>
        </trans-unit>
        <trans-unit id="2ceb71f6fc886f72cd41914593a377d2331bca2a" translate="yes" xml:space="preserve">
          <source>Node.js 8 (8.10.0 and above)</source>
          <target state="translated">Node.js 8 (8.10.0 и выше)</target>
        </trans-unit>
        <trans-unit id="d141eed305b5a0817124be433bc810afd24f5cf0" translate="yes" xml:space="preserve">
          <source>Node.js 8 is no longer supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b609a3673d2801930c52c7f60a09dbfa6895105" translate="yes" xml:space="preserve">
          <source>Node.js 8 reached EOL in December 2019, and we are officially dropping support for it in this release. ESLint now supports the following versions of Node.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8214b8e226c143da7ac208d7ccfff6ed28e492" translate="yes" xml:space="preserve">
          <source>Node.js API</source>
          <target state="translated">Node.js API</target>
        </trans-unit>
        <trans-unit id="04fbd93b23e439f6b5bdb44a7ebe23e14c1d9127" translate="yes" xml:space="preserve">
          <source>Node.js and CommonJS</source>
          <target state="translated">Node.js и CommonJS</target>
        </trans-unit>
        <trans-unit id="cf4ef447c1c3a6af00c6d095f16e14a9b1f54259" translate="yes" xml:space="preserve">
          <source>Node.js/CommonJS rules are deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d679929ff239f3cfca986b3e50f54d4f9910b67" translate="yes" xml:space="preserve">
          <source>Node.js/CommonJS rules have been deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f2bdd6d137ca1e9a98351c023627cbde0cec9c" translate="yes" xml:space="preserve">
          <source>Nodejitsu: What are the error conventions?</source>
          <target state="translated">Ноджитсу:Каковы соглашения об ошибках?</target>
        </trans-unit>
        <trans-unit id="40b5e952bb48a49486eed3f9c7473ff77e065932" translate="yes" xml:space="preserve">
          <source>Normally, if ESLint runs and finds no errors (only warnings), it will exit with a success exit status. However, if &lt;code&gt;--max-warnings&lt;/code&gt; is specified and the total warning count is greater than the specified threshold, ESLint will exit with an error status. Specifying a threshold of &lt;code&gt;-1&lt;/code&gt; or omitting this option will prevent this behavior.</source>
          <target state="translated">Обычно, если ESLint запускается и не находит ошибок (только предупреждения), он завершается с успешным статусом выхода. Однако, если &lt;code&gt;--max-warnings&lt;/code&gt; и общее количество предупреждений превышает указанный порог, ESLint выйдет со статусом ошибки. Указание порога &lt;code&gt;-1&lt;/code&gt; или пропуск этой опции предотвратит такое поведение.</target>
        </trans-unit>
        <trans-unit id="b25fdf6d849a83c39bb3f295e2b8c788a05b6b0d" translate="yes" xml:space="preserve">
          <source>Not be library-specific.</source>
          <target state="translated">Это не библиотекарская специализация.</target>
        </trans-unit>
        <trans-unit id="35e36fc0294abf8492a00a6146dff86e708f4159" translate="yes" xml:space="preserve">
          <source>Not be the opposite of an existing rule.</source>
          <target state="translated">Не быть противоположностью существующему правилу.</target>
        </trans-unit>
        <trans-unit id="fad574db66b94391e41eddfcd296f39d4f94404a" translate="yes" xml:space="preserve">
          <source>Not overlap with an existing rule.</source>
          <target state="translated">Не пересекаются с существующим правилом.</target>
        </trans-unit>
        <trans-unit id="9029138548f2a9fdd23c03ef55efcf761ab4cfd0" translate="yes" xml:space="preserve">
          <source>Not specifying this rule is equivalent of assigning it to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">Отсутствие указания этого правила равносильно его &lt;code&gt;none&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4861a0142b65983913e9d41b8290eade0ea43067" translate="yes" xml:space="preserve">
          <source>Notations</source>
          <target state="translated">Notations</target>
        </trans-unit>
        <trans-unit id="9b7b918044536aa7a7deb04ec10c32265cca907c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; has a special case where &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;[]&lt;/code&gt; are not considered problems.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;&quot;always&quot;&lt;/code&gt; имеет особый случай, когда &lt;code&gt;{}&lt;/code&gt; и &lt;code&gt;[]&lt;/code&gt; не считаются проблемами.</target>
        </trans-unit>
        <trans-unit id="b8542e39cfc8468ccf1b75f31ccc5f6beca12d4a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;/* exported */&lt;/code&gt; has no effect for any of the following:</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;/* exported */&lt;/code&gt; не влияет ни на одно из следующего:</target>
        </trans-unit>
        <trans-unit id="aca84c496113223feba48b89954e9ed6a64416c1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;defaultAssignment: false&lt;/code&gt; still allows expressions of the form &lt;code&gt;x ? expr : x&lt;/code&gt; (where the identifier is on the right hand side of the ternary).</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;defaultAssignment: false&lt;/code&gt; прежнему допускает выражения вида &lt;code&gt;x ? expr : x&lt;/code&gt; (где идентификатор находится в правой части троичного).</target>
        </trans-unit>
        <trans-unit id="9b7f17dafb1fc2ac631526c6b46f9a1d8ffa8e3b" translate="yes" xml:space="preserve">
          <source>Note that at least one of &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;loc&lt;/code&gt; is required.</source>
          <target state="translated">Обратите внимание, что требуется хотя бы один из &lt;code&gt;node&lt;/code&gt; или &lt;code&gt;loc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3f74885501a3e7134a66bf3df8110995866d5416" translate="yes" xml:space="preserve">
          <source>Note that configuration comments and comments which start with URLs are never reported.</source>
          <target state="translated">Обратите внимание,что комментарии к конфигурации и комментарии,которые начинаются с URL-адресов,никогда не сообщаются.</target>
        </trans-unit>
        <trans-unit id="c2f78d136a146a36971c9e8628e71d64cc1bd5ef" translate="yes" xml:space="preserve">
          <source>Note that even with these compatibilities, there are no guarantees that an external parser will work correctly with ESLint and ESLint will not fix bugs related to incompatibilities with other parsers.</source>
          <target state="translated">Обратите внимание,что даже при такой совместимости нет никаких гарантий,что внешний парсер будет корректно работать с ESLint,и ESLint не будет исправлять ошибки,связанные с несовместимостью с другими парсерами.</target>
        </trans-unit>
        <trans-unit id="bfc76a3bf8f752b8b71cfd21bce6317dc0eb6d26" translate="yes" xml:space="preserve">
          <source>Note that every &lt;code&gt;getter&lt;/code&gt; is expected to return a value.</source>
          <target state="translated">Обратите внимание, что каждый &lt;code&gt;getter&lt;/code&gt; должен возвращать значение.</target>
        </trans-unit>
        <trans-unit id="973ad8dc3ee2a30a3d4c6e8e9554560da150053f" translate="yes" xml:space="preserve">
          <source>Note that leading and trailing whitespace is optional in message parameters.</source>
          <target state="translated">Обратите внимание,что ведущий и ведущий пробелы являются необязательными в параметрах сообщения.</target>
        </trans-unit>
        <trans-unit id="8c038f50e970ff4a6c263baef88671b9b6797c2c" translate="yes" xml:space="preserve">
          <source>Note that one or more string expression statements (with or without semi-colons) will only be considered as unused if they are not in the beginning of a script, module, or function (alone and uninterrupted by other statements). Otherwise, they will be treated as part of a &quot;directive prologue&quot;, a section potentially usable by JavaScript engines. This includes &quot;strict mode&quot; directives.</source>
          <target state="translated">Обратите внимание,что один или несколько строковых выражений (с или без полустолбцов)будут считаться неиспользованными только в том случае,если они не находятся в начале скрипта,модуля или функции (самостоятельно и без прерывания другими выражениями).В противном случае они будут рассматриваться как часть &quot;директивы prologue&quot;-раздела,потенциально используемого JavaScript-движками.Это включает в себя директивы &quot;строгого режима&quot;.</target>
        </trans-unit>
        <trans-unit id="14eabcc20ca1ae6d595dd0146dacc275446c2785" translate="yes" xml:space="preserve">
          <source>Note that operator &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;allow&lt;/code&gt; list would allow &lt;code&gt;+foo&lt;/code&gt; (number coercion) as well as &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; (string coercion).</source>
          <target state="translated">Обратите внимание , что оператор &lt;code&gt;+&lt;/code&gt; в &lt;code&gt;allow&lt;/code&gt; список позволит &lt;code&gt;+foo&lt;/code&gt; (число принуждения), а также &lt;code&gt;&quot;&quot; + foo&lt;/code&gt; (строка принуждению).</target>
        </trans-unit>
        <trans-unit id="a2ea103023fbbea878ee580810efa43b1ce5e514" translate="yes" xml:space="preserve">
          <source>Note that simply checking &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; is likely to cause an error in some cases; see &lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt;.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;foo.hasOwnProperty(key)&lt;/code&gt; проверка foo.hasOwnProperty (key) в некоторых случаях может вызвать ошибку; см. &lt;a href=&quot;no-prototype-builtins&quot;&gt;no-prototype-builtins&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="da8f31abf81fd1530a65a1c89cbaf28a84d87fe4" translate="yes" xml:space="preserve">
          <source>Note that the following words are always ignored by this rule: &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что это правило всегда игнорирует следующие слова: &lt;code&gt;[&quot;jscs&quot;, &quot;jshint&quot;, &quot;eslint&quot;, &quot;istanbul&quot;, &quot;global&quot;, &quot;globals&quot;, &quot;exported&quot;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="92871ffd4aceb2bd3a9e8edec06e56e2e05d821f" translate="yes" xml:space="preserve">
          <source>Note that the last &lt;code&gt;case&lt;/code&gt; statement in these examples does not cause a warning because there is nothing to fall through into.</source>
          <target state="translated">Обратите внимание, что последний оператор &lt;code&gt;case&lt;/code&gt; в этих примерах не вызывает предупреждения, потому что здесь не во что упасть.</target>
        </trans-unit>
        <trans-unit id="9fe60f0778016b7de275c5c3433b4ff7fcd68bdb" translate="yes" xml:space="preserve">
          <source>Note that the patterns considered problems are &lt;strong&gt;not&lt;/strong&gt; flagged by the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">Обратите внимание, что шаблоны, считающиеся проблемами, &lt;strong&gt;не&lt;/strong&gt; помечаются &lt;a href=&quot;semi&quot;&gt;полуправилом&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="649f078207c83d3aa9f8117c4caa24a177fa6e14" translate="yes" xml:space="preserve">
          <source>Note that this also affects the &lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="translated">Обратите внимание, что это также влияет на API &lt;a href=&quot;../developer-guide/nodejs-api#cliengineexecuteonfiles&quot;&gt; &lt;code&gt;CLIEngine.executeOnFiles()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4e1fc0ebbd12c442e0e5e74e0e029ef6f09efa61" translate="yes" xml:space="preserve">
          <source>Note that this also enables parsing for other features from ES2018, such as &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;async iteration&lt;/a&gt;. When using ESLint v5 with the default parser, it is no longer possible to toggle syntax support for object rest/spread independently of other features.</source>
          <target state="translated">Обратите внимание, что это также позволяет анализировать другие функции из ES2018, такие как &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration&quot;&gt;асинхронная итерация&lt;/a&gt; . При использовании ESLint v5 с парсером по умолчанию больше невозможно переключить поддержку синтаксиса для отдыха / распространения объекта независимо от других функций.</target>
        </trans-unit>
        <trans-unit id="82d62f793b20020481672da21ac064b568a683e5" translate="yes" xml:space="preserve">
          <source>Note that this rule does not disallow assignments to read-only global variables. See &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; if you also want to disallow those assignments.</source>
          <target state="translated">Обратите внимание, что это правило не запрещает присваивания глобальным переменным только для чтения. См. &lt;a href=&quot;no-global-assign&quot;&gt;No-global-assign,&lt;/a&gt; если вы также хотите запретить эти назначения.</target>
        </trans-unit>
        <trans-unit id="a5a9767c41439a621031ba6529109fef573ecf23" translate="yes" xml:space="preserve">
          <source>Note that this rule does not enforce the usage of single-line statements in general. If you would like to disallow single-line statements, use the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule instead.</source>
          <target state="translated">Обратите внимание, что это правило не предписывает использование однострочных операторов в целом. Если вы хотите запретить однострочные операторы, используйте вместо этого &lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt; правило.</target>
        </trans-unit>
        <trans-unit id="d826b4d17235a608a3c9cd20c92fa11e3d5d2e94" translate="yes" xml:space="preserve">
          <source>Note that this rule only enforces spacing within parentheses; it does not check spacing within curly or square brackets, but will enforce or disallow spacing of those brackets if and only if they are adjacent to an opening or closing parenthesis.</source>
          <target state="translated">Обратите внимание,что это правило обеспечивает соблюдение интервала между скобками;оно не проверяет интервал между скобками в фигурных или квадратных скобках,но обеспечивает соблюдение интервала между скобками,если и только если они примыкают к открывающей или закрывающей скобкам.</target>
        </trans-unit>
        <trans-unit id="347d91e7a5b838e6bcb85cf66bf52f2d967e3ca1" translate="yes" xml:space="preserve">
          <source>Note that when using the &lt;code&gt;node&lt;/code&gt; or &lt;code&gt;commonjs&lt;/code&gt; environments (or &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt;, if using the default parser), the top scope of a program is not actually the global scope, but rather a &quot;module&quot; scope. When this is the case, declaring a variable named after a builtin global is not a redeclaration, but rather a shadowing of the global variable. In that case, the &lt;a href=&quot;no-shadow&quot;&gt;&lt;code&gt;no-shadow&lt;/code&gt;&lt;/a&gt; rule with the &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option should be used.</source>
          <target state="translated">Обратите внимание, что при использовании среды &lt;code&gt;node&lt;/code&gt; или &lt;code&gt;commonjs&lt;/code&gt; (или &lt;code&gt;ecmaFeatures.globalReturn&lt;/code&gt; , если используется синтаксический анализатор по умолчанию), верхняя область программы фактически не является глобальной областью, а скорее областью &amp;laquo;модуля&amp;raquo;. В этом случае объявление переменной, названной в честь встроенной глобальной переменной, не является повторным объявлением, а скорее затенением глобальной переменной. В этом случае следует использовать правило &lt;a href=&quot;no-shadow&quot;&gt; &lt;code&gt;no-shadow&lt;/code&gt; &lt;/a&gt; с &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1125aced35499b31bb41c702c9945c7bd12e9b07" translate="yes" xml:space="preserve">
          <source>Note that you can leave off the &lt;code&gt;.js&lt;/code&gt; from the filename. In this way, you can add as many additional configs to your package as you'd like.</source>
          <target state="translated">Обратите внимание, что вы можете &lt;code&gt;.js&lt;/code&gt; в имени файла. Таким образом, вы можете добавить в свой пакет столько дополнительных конфигураций, сколько захотите.</target>
        </trans-unit>
        <trans-unit id="76aa0f033fd5d1d41d32bcaf6fd648d73e33b956" translate="yes" xml:space="preserve">
          <source>Note that, as with core rules and plugin rules, you still need to enable the rules in configuration or via the &lt;code&gt;--rule&lt;/code&gt; CLI option in order to actually run those rules during linting. Specifying a rules directory with &lt;code&gt;--rulesdir&lt;/code&gt; does not automatically enable the rules within that directory.</source>
          <target state="translated">Обратите внимание, что, как и в случае с основными правилами и правилами плагинов, вам все равно необходимо включить правила в конфигурации или с помощью &lt;code&gt;--rule&lt;/code&gt; CLI --rule , чтобы фактически запустить эти правила во время линтинга. Указание каталога правил с помощью &lt;code&gt;--rulesdir&lt;/code&gt; не включает автоматически правила в этом каталоге.</target>
        </trans-unit>
        <trans-unit id="e9b6296c44a9bc30cef358e801b33c46b39d24f5" translate="yes" xml:space="preserve">
          <source>Note the use of a semicolon as the final part of this statement. There should be a space before and after the &lt;code&gt;while&lt;/code&gt; keyword.</source>
          <target state="translated">Обратите внимание на использование точки с запятой в заключительной части этого оператора. Перед ключевым словом &lt;code&gt;while&lt;/code&gt; и после него должен быть пробел .</target>
        </trans-unit>
        <trans-unit id="cc6c88398cdded8def6acc02b6ff7133a562ee36" translate="yes" xml:space="preserve">
          <source>Note when using a custom parser, the &lt;code&gt;parserOptions&lt;/code&gt; configuration property is still required for ESLint to work properly with features not in ECMAScript 5 by default. Parsers are all passed &lt;code&gt;parserOptions&lt;/code&gt; and may or may not use them to determine which features to enable.</source>
          <target state="translated">Обратите внимание, что при использовании настраиваемого анализатора &lt;code&gt;parserOptions&lt;/code&gt; конфигурации parserOptions по-прежнему требуется для правильной работы ESLint с функциями, не входящими в ECMAScript 5 по умолчанию. Всем &lt;code&gt;parserOptions&lt;/code&gt; передаются параметры parserOptions, и они могут использовать или не использовать их для определения того, какие функции следует включить.</target>
        </trans-unit>
        <trans-unit id="50c39afa03191645dbc4d28c7d2359af7e538e42" translate="yes" xml:space="preserve">
          <source>Note: Currently &lt;code&gt;CLIEngine&lt;/code&gt; does not validate options passed to it, but may start doing so in the future.</source>
          <target state="translated">Примечание. В настоящее время &lt;code&gt;CLIEngine&lt;/code&gt; не проверяет переданные ему параметры, но может начать делать это в будущем.</target>
        </trans-unit>
        <trans-unit id="984b1133cbe92feba750f10ab3475f0c23c1b51a" translate="yes" xml:space="preserve">
          <source>Note: For a rule preventing deletion of variables, see &lt;a href=&quot;no-delete-var&quot;&gt;no-delete-var instead&lt;/a&gt;</source>
          <target state="translated">Примечание. Для правила, предотвращающего удаление переменных, см. &lt;a href=&quot;no-delete-var&quot;&gt;Вместо этого no-delete-var&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d25aa0b7adae8f5ed33576b5806bc8d4bbf49549" translate="yes" xml:space="preserve">
          <source>Note: Formatting for Terminals</source>
          <target state="translated">Примечание:Форматирование для терминалов</target>
        </trans-unit>
        <trans-unit id="be22f31f5831c296a952cd7a2998bc8d390f968e" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolons. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">Примечание:Предложения будут применены как самостоятельное изменение,без срабатывания многопроходных исправлений.Каждое предложение должно быть сфокусировано на единичном изменении кода и не должно пытаться соответствовать определенным пользователем стилям.Например,если предложение добавляет новое утверждение в кодовую базу,оно не должно пытаться соответствовать правильному отступу или подтверждать предпочтения пользователя о наличии/отсутствии точек с запятой.Все это можно исправить многопроходным автофиксом при его срабатывании пользователем.</target>
        </trans-unit>
        <trans-unit id="094162498ea0d1d13c56050f15e2107cd8551770" translate="yes" xml:space="preserve">
          <source>Note: Suggestions will be applied as a stand-alone change, without triggering multipass fixes. Each suggestion should focus on a singular change in the code and should not try to conform to user defined styles. For example, if a suggestion is adding a new statement into the codebase, it should not try to match correct indentation, or confirm to user preferences on presence/absence of semicolumns. All of those things can be corrected by multipass autofix when the user triggers it.</source>
          <target state="translated">Примечание:Предложения будут применены как самостоятельное изменение,без срабатывания многопроходных исправлений.Каждое предложение должно быть сфокусировано на единичном изменении кода и не должно пытаться соответствовать определенным пользователем стилям.Например,если предложение добавляет новое утверждение в кодовую базу,оно не должно пытаться соответствовать правильному отступу или подтверждать предпочтения пользователя о наличии/отсутствии точек с запятыми.Все это можно исправить многопроходным автофиксом при его срабатывании пользователем.</target>
        </trans-unit>
        <trans-unit id="7a96d12cefbf530755a3476759379971f31c30b2" translate="yes" xml:space="preserve">
          <source>Note: This API is deprecated as of 4.0.0.</source>
          <target state="translated">Примечание:Этот API устарел от 4.0.0.</target>
        </trans-unit>
        <trans-unit id="0f4d27cca8900b2f84cb2149ba7b39507829e56c" translate="yes" xml:space="preserve">
          <source>Note: this rule ignores async generator functions. This is because generators yield rather than return a value and async generators might yield all the values of another async generator without ever actually needing to use await.</source>
          <target state="translated">Примечание:данное правило игнорирует функции генератора асинхронизации.Это происходит потому,что генераторы выдают,а не возвращают значение,а генераторы асинхронизации могут выдать все значения другого генератора асинхронизации без необходимости ожидания.</target>
        </trans-unit>
        <trans-unit id="24de5bcbd5c3607fa22b1b0d298fae9fdf45a3ea" translate="yes" xml:space="preserve">
          <source>Now here are ES6 equivalents:</source>
          <target state="translated">Вот эквивалент ES6:</target>
        </trans-unit>
        <trans-unit id="87fe1cc3d574f9be3c85d698f90d866c75ac44a8" translate="yes" xml:space="preserve">
          <source>Now inside your &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</source>
          <target state="translated">Теперь внутри вашего &lt;code&gt;/lib/ci/backend.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35e2195ff597916ba2ef234cdbb68bdf57b69342" translate="yes" xml:space="preserve">
          <source>Now inside your package you have &lt;code&gt;/lib/defaults.js&lt;/code&gt;, which contains:</source>
          <target state="translated">Теперь внутри вашего пакета есть &lt;code&gt;/lib/defaults.js&lt;/code&gt; , который содержит:</target>
        </trans-unit>
        <trans-unit id="4137e109ac15d620738ab61f944d78dc01861a63" translate="yes" xml:space="preserve">
          <source>Now it is very clear that three spaces are expected to be matched.</source>
          <target state="translated">Теперь очень ясно,что три пространства должны соответствовать друг другу.</target>
        </trans-unit>
        <trans-unit id="5bca21c074e0d721a5fd90d89b255318c8ce0216" translate="yes" xml:space="preserve">
          <source>Now when you run &lt;code&gt;eslint&lt;/code&gt;, it will be running your local copy and showing your changes.</source>
          <target state="translated">Теперь, когда вы запустите &lt;code&gt;eslint&lt;/code&gt; , он запустит вашу локальную копию и покажет ваши изменения.</target>
        </trans-unit>
        <trans-unit id="57c585f4798ef4591adf413472a8e4f97e198bfd" translate="yes" xml:space="preserve">
          <source>Now you're ready to send the pull request. Go to your ESLint fork and then follow the &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;GitHub documentation&lt;/a&gt; on how to send a pull request.</source>
          <target state="translated">Теперь вы готовы отправить запрос на перенос. Перейдите в вилку ESLint и следуйте &lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request&quot;&gt;документации GitHub&lt;/a&gt; о том, как отправить запрос на перенос .</target>
        </trans-unit>
        <trans-unit id="20482a66574043c6f07e88950af557ca9ba4cb34" translate="yes" xml:space="preserve">
          <source>Now, consider the following group configuration: &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt;. There are 2 groups specified in this configuration: bitwise operators and logical operators. This rule checks if the operators belong to the same group only. In this case, this rule checks if bitwise operators and logical operators are mixed, but ignores all other operators.</source>
          <target state="translated">Теперь рассмотрим следующую конфигурацию группы: &lt;code&gt;{&quot;groups&quot;: [[&quot;&amp;amp;&quot;, &quot;|&quot;, &quot;^&quot;, &quot;~&quot;, &quot;&amp;lt;&amp;lt;&quot;, &quot;&amp;gt;&amp;gt;&quot;, &quot;&amp;gt;&amp;gt;&amp;gt;&quot;], [&quot;&amp;amp;&amp;amp;&quot;, &quot;||&quot;]]}&lt;/code&gt; . В этой конфигурации указаны 2 группы: побитовые операторы и логические операторы. Это правило проверяет, принадлежат ли операторы только к одной группе. В этом случае это правило проверяет, смешаны ли побитовые операторы и логические операторы, но игнорирует все остальные операторы.</target>
        </trans-unit>
        <trans-unit id="b4992572eba9e898e29cdb06f84784a8f96e8a75" translate="yes" xml:space="preserve">
          <source>Now, the remote &lt;code&gt;upstream&lt;/code&gt; points to the upstream source.</source>
          <target state="translated">Теперь удаленный &lt;code&gt;upstream&lt;/code&gt; указывает на восходящий источник.</target>
        </trans-unit>
        <trans-unit id="8dad4f5a3bcf9c3bffdb2bf8a3903f51188938d6" translate="yes" xml:space="preserve">
          <source>Now, those variables and references have correct values in these properties.</source>
          <target state="translated">Теперь эти переменные и ссылки имеют правильные значения в этих свойствах.</target>
        </trans-unit>
        <trans-unit id="b69cceaa39cc9827d135c31a0a311643f64c4242" translate="yes" xml:space="preserve">
          <source>Numbers should be written as decimal integers, e-notation integers, hexadecimal integers or floating-point decimals with at least one digit before and one digit after the decimal point. Never use octal literals.</source>
          <target state="translated">Числа следует записывать в виде десятичных целых чисел,целых чисел с электронной нумерацией,шестнадцатеричных чисел или десятичных чисел с плавающей запятой,содержащих по крайней мере одну цифру до и одну цифру после десятичной запятой.Никогда не используйте восьмеричные литералы.</target>
        </trans-unit>
        <trans-unit id="afb8e044bcdc5720b645f5bad798ce2422b144b7" translate="yes" xml:space="preserve">
          <source>Object Getters</source>
          <target state="translated">Геттеры объектов</target>
        </trans-unit>
        <trans-unit id="bff5a67a67ce40c0fd925410f2eb22f8e622ed24" translate="yes" xml:space="preserve">
          <source>Object Literals</source>
          <target state="translated">Буквы объекта</target>
        </trans-unit>
        <trans-unit id="8c039bd2c30b64d60bbf9c614cffee3af09daea6" translate="yes" xml:space="preserve">
          <source>Object Rest/Spread Properties for ECMAScript</source>
          <target state="translated">Свойства сохранения/распространения объекта для ECMAScript</target>
        </trans-unit>
        <trans-unit id="5b78ac9af4a56a7e0611f75dde6336ad4efc93cf" translate="yes" xml:space="preserve">
          <source>Object Setters</source>
          <target state="translated">Объектные сеттеры</target>
        </trans-unit>
        <trans-unit id="4671b195767e872ed26e93314009bf9a02b4925b" translate="yes" xml:space="preserve">
          <source>Object initializer - MDN</source>
          <target state="translated">Инициализатор объектов-MDN</target>
        </trans-unit>
        <trans-unit id="ffa631f7811b9675c18511c35ebd3c5888d3c693" translate="yes" xml:space="preserve">
          <source>Object literal property names can be defined in two ways: using literals or using strings. For example, these two objects are equivalent:</source>
          <target state="translated">Имена литературных свойств объектов могут быть определены двумя способами:с помощью литералов или с помощью строк.Например,эти два объекта эквивалентны:</target>
        </trans-unit>
        <trans-unit id="01a531c72bfc336c6dd4074ad4379fdce5371193" translate="yes" xml:space="preserve">
          <source>Object literals should have the following format:</source>
          <target state="translated">Буквы объектов должны иметь следующий формат:</target>
        </trans-unit>
        <trans-unit id="593c1a9b247ae9203d0656b7697e245c92cca212" translate="yes" xml:space="preserve">
          <source>Object literals.</source>
          <target state="translated">Буквы &quot;Объект&quot;.</target>
        </trans-unit>
        <trans-unit id="d0906ffdbaac63ebcdad566357ec1fa32b660ce9" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;always&quot;&lt;/code&gt;):</source>
          <target state="translated">Вариант объекта (когда &lt;code&gt;&quot;always&quot;&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="ac9c86f6b8a7b6cb8ef56a7d1efe7d9ef0bb7e18" translate="yes" xml:space="preserve">
          <source>Object option (when &lt;code&gt;&quot;never&quot;&lt;/code&gt;):</source>
          <target state="translated">Вариант объекта (когда &lt;code&gt;&quot;never&quot;&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="f8eb5265b464019bacbbf51d8d1ff30364921024" translate="yes" xml:space="preserve">
          <source>Object option:</source>
          <target state="translated">Опция &quot;Объект&quot;:</target>
        </trans-unit>
        <trans-unit id="149ecb5e6d435ef3f0c0b95567c172606e31d857" translate="yes" xml:space="preserve">
          <source>Object properties follow the same naming conventions as variables. Object methods follow the same naming conventions as functions. If a property or method is meant to be private, then it should be prefixed with an underscore character.</source>
          <target state="translated">Свойства объектов следуют тем же правилам именования,что и переменные.Методы объектов следуют тем же конвенциям по наименованию,что и функции.Если свойство или метод должен быть приватным,то он должен быть префиксом со знаком подчеркивания.</target>
        </trans-unit>
        <trans-unit id="07cc26cad16fa208535abacfadeea81f2c8f08d7" translate="yes" xml:space="preserve">
          <source>Object properties for variants of the &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option:</source>
          <target state="translated">Свойства объекта для вариантов варианта &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c4dfaa986b5d14c627c83c972171a7941c5b7be6" translate="yes" xml:space="preserve">
          <source>Object rest/spread is now an official part of the JavaScript language, so our support for it is no longer experimental. In both ESLint v4 and ESLint v5, object rest/spread can now be enabled with the &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; option:</source>
          <target state="translated">Объект rest / spread теперь является официальной частью языка JavaScript, поэтому наша поддержка больше не является экспериментальной. И в ESLint v4, и в ESLint v5 теперь можно активировать отдых / распространение объекта с помощью параметра &lt;code&gt;&quot;ecmaVersion&quot;: 2018&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="11a92c8196539fdab3857b1551dea0f331c775a8" translate="yes" xml:space="preserve">
          <source>Object.getPrototypeOf</source>
          <target state="translated">Object.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="fa8ae9f7df131e038e636e584d189c8515f58a8c" translate="yes" xml:space="preserve">
          <source>ObjectExpression</source>
          <target state="translated">ObjectExpression</target>
        </trans-unit>
        <trans-unit id="793061db282a75e8ed5dcc678e2f977602f536e5" translate="yes" xml:space="preserve">
          <source>ObjectExpression and ObjectPattern</source>
          <target state="translated">ObjectExpression и ObjectPattern</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="79c19740aba487d5c36feef2d71ebeab770748e7" translate="yes" xml:space="preserve">
          <source>Occasionally, a core ESLint rule needs to be changed. This is not necessarily a bug, but rather, an enhancement that makes a rule more configurable. In those situations, we will consider making changes to rules.</source>
          <target state="translated">Иногда необходимо менять основное правило ESLint.Это не обязательно ошибка,а скорее усовершенствование,которое делает правило более настраиваемым.В таких ситуациях мы рассмотрим возможность внесения изменений в правила.</target>
        </trans-unit>
        <trans-unit id="503c1e8b34ff2b306e45ab8d949857759bce53e9" translate="yes" xml:space="preserve">
          <source>Octal literals are numerals that begin with a leading zero, such as:</source>
          <target state="translated">Октальные буквы-это цифры,которые начинаются с ведущего нуля,например:</target>
        </trans-unit>
        <trans-unit id="5270a8f48af0485d13759bcff94f40182ae7fbe6" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces around keywords.</source>
          <target state="translated">Конечно,можно также иметь руководство по стилю,которое не допускает пробелов вокруг ключевых слов.</target>
        </trans-unit>
        <trans-unit id="1125ca598816239bf6b761a79b64ee161ec9a9d7" translate="yes" xml:space="preserve">
          <source>Of course, you could also have a style guide that disallows spaces before keywords.</source>
          <target state="translated">Конечно,вы также можете иметь руководство по стилю,которое запрещает пробелы перед ключевыми словами.</target>
        </trans-unit>
        <trans-unit id="c141537fefa1f7236bb95371a0c1823cf3d5a82a" translate="yes" xml:space="preserve">
          <source>Of particular note is that like &lt;code&gt;.gitignore&lt;/code&gt; files, all paths used as patterns for both &lt;code&gt;.eslintignore&lt;/code&gt; and &lt;code&gt;--ignore-pattern&lt;/code&gt; must use forward slashes as their path separators.</source>
          <target state="translated">Особо следует отметить, что, как &lt;code&gt;.gitignore&lt;/code&gt; файлы .gitignore , все пути, используемые в качестве шаблонов для &lt;code&gt;.eslintignore&lt;/code&gt; и &lt;code&gt;--ignore-pattern&lt;/code&gt; , должны использовать косую черту в качестве разделителей путей.</target>
        </trans-unit>
        <trans-unit id="051c540be9962a7623f661578a805c175aaad210" translate="yes" xml:space="preserve">
          <source>On a separate line, describing the code beneath it.</source>
          <target state="translated">В отдельной строке,описывая код под ним.</target>
        </trans-unit>
        <trans-unit id="41a98baf04faa90e085c1d5b39d3f2303b09a371" translate="yes" xml:space="preserve">
          <source>On multiple lines, to comment out sections of code.</source>
          <target state="translated">На нескольких строках,чтобы прокомментировать участки кода.</target>
        </trans-unit>
        <trans-unit id="dd6bc408351897c37ede1ee1ad09032dd8381b52" translate="yes" xml:space="preserve">
          <source>On the first line, the JavaScript engine will automatically insert a semicolon, so this is not considered a syntax error. The JavaScript engine still knows how to interpret the line and knows that the line end indicates the end of the statement.</source>
          <target state="translated">В первой строке движок JavaScript автоматически вставляет точку с запятой,поэтому это не считается синтаксической ошибкой.JavaScript-движок по-прежнему знает,как интерпретировать строку,и знает,что конец строки указывает на конец оператора.</target>
        </trans-unit>
        <trans-unit id="be62b8888255b7d5db97a2146275b0a473a3cd7f" translate="yes" xml:space="preserve">
          <source>On the other hand, if the code is targeting only ES5-compliant environments passing the radix &lt;code&gt;10&lt;/code&gt; may be redundant. In such a case you might want to disallow using such a radix.</source>
          <target state="translated">С другой стороны, если код нацелен только на среды, совместимые с ES5, передача по основанию &lt;code&gt;10&lt;/code&gt; может быть избыточной. В таком случае вы можете запретить использование такого основания.</target>
        </trans-unit>
        <trans-unit id="54325008781cc6962735603ca0f94ac6486bda16" translate="yes" xml:space="preserve">
          <source>On the other side of the argument are those who say that since semicolons are inserted automatically, they are optional and do not need to be inserted manually. However, the ASI mechanism can also be tricky to people who don't use semicolons. For example, consider this code:</source>
          <target state="translated">По другую сторону аргумента находятся те,кто говорит,что поскольку точка с запятой вставляется автоматически,они являются необязательными и их не нужно вставлять вручную.Тем не менее,механизм ASI также может быть хитрым для людей,которые не используют точки с запятой.Например,рассмотрим этот код:</target>
        </trans-unit>
        <trans-unit id="96134602d9113347d1bc859098545b8dd3e69676" translate="yes" xml:space="preserve">
          <source>Once again, the intent here is to show that the developer intended for there to be no default behavior.</source>
          <target state="translated">И опять же,намерение здесь состоит в том,чтобы показать,что разработчик не намеревался вести себя по умолчанию.</target>
        </trans-unit>
        <trans-unit id="c1de3fc4cbdd3e50999095504fb8e328eb84c3d2" translate="yes" xml:space="preserve">
          <source>Once npm is installed, run the following</source>
          <target state="translated">После установки в об/мин выполните следующие действия</target>
        </trans-unit>
        <trans-unit id="c04fc496076254cace10e1520cd55bfc500cbbe1" translate="yes" xml:space="preserve">
          <source>Once the AST is available, &lt;code&gt;estraverse&lt;/code&gt; is used to traverse the AST from top to bottom. At each node, the &lt;code&gt;Linter&lt;/code&gt; object emits an event that has the same name as the node type (i.e., &quot;Identifier&quot;, &quot;WithStatement&quot;, etc.). On the way back up the subtree, an event is emitted with the AST type name and suffixed with &quot;:exit&quot;, such as &quot;Identifier:exit&quot; - this allows rules to take action both on the way down and on the way up in the traversal. Each event is emitted with the appropriate AST node available.</source>
          <target state="translated">Как только AST доступен, &lt;code&gt;estraverse&lt;/code&gt; используется для пересечения AST сверху вниз. На каждом узле объект &lt;code&gt;Linter&lt;/code&gt; генерирует событие, имя которого совпадает с именем типа узла (т. Е. &amp;laquo;Идентификатор&amp;raquo;, &amp;laquo;WithStatement&amp;raquo; и т. Д.). На обратном пути вверх по поддереву создается событие с именем типа AST и суффиксом &amp;laquo;: exit&amp;raquo;, например &amp;laquo;Идентификатор: выход&amp;raquo; - это позволяет правилам выполнять действия как на пути вниз, так и на пути вверх в обход. Каждое событие генерируется с соответствующим доступным узлом AST.</target>
        </trans-unit>
        <trans-unit id="64e40e04906a03b72ac5f6ed6329c5032886299c" translate="yes" xml:space="preserve">
          <source>Once you get a report object, it's up to you to determine how to output the results. Fixes will not be automatically applied to the files, even if you set &lt;code&gt;fix: true&lt;/code&gt; when constructing the &lt;code&gt;CLIEngine&lt;/code&gt; instance. To apply fixes to the files, call &lt;a href=&quot;#cliengineoutputfixes&quot;&gt;&lt;code&gt;outputFixes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">После того как вы получите объект отчета, вам решать, как выводить результаты. Исправления не будут автоматически применяться к файлам, даже если вы установили &lt;code&gt;fix: true&lt;/code&gt; при &lt;code&gt;CLIEngine&lt;/code&gt; экземпляра CLIEngine . Чтобы применить исправления к файлам, вызовите &lt;a href=&quot;#cliengineoutputfixes&quot;&gt; &lt;code&gt;outputFixes&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b58e4b61287e965d92e76370ea203cbb83aba778" translate="yes" xml:space="preserve">
          <source>Once you have a local copy and have Node.JS and npm installed, you'll need to install the ESLint dependencies:</source>
          <target state="translated">После того,как у вас будет локальная копия и будут установлены Node.JS и npm,вам нужно будет установить зависимости ESLint:</target>
        </trans-unit>
        <trans-unit id="e7288581c9fd0f9fb86a36a0098329661fafddf0" translate="yes" xml:space="preserve">
          <source>Once you have an instance of &lt;code&gt;SourceCode&lt;/code&gt;, you can use the methods on it to work with the code:</source>
          <target state="translated">Когда у вас есть экземпляр &lt;code&gt;SourceCode&lt;/code&gt; , вы можете использовать его методы для работы с кодом:</target>
        </trans-unit>
        <trans-unit id="c35dc0ae3fcf2f907c56b8a61b2d1c1013797195" translate="yes" xml:space="preserve">
          <source>Once you have the configuration information, you can pass it into the &lt;code&gt;linter&lt;/code&gt; object:</source>
          <target state="translated">Получив информацию о конфигурации, вы можете передать ее в объект &lt;code&gt;linter&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b5819a1bbc0e4af2eebf7583e7e5176671549350" translate="yes" xml:space="preserve">
          <source>Once you have your development environment installed, you can make and submit changes to the ESLint source files. Doing this successfully requires careful adherence to our &lt;a href=&quot;contributing/pull-requests&quot;&gt;pull-request submission workflow&lt;/a&gt;.</source>
          <target state="translated">После установки среды разработки вы можете вносить изменения в исходные файлы ESLint и отправлять их. Для успешного выполнения этой задачи требуется тщательное соблюдение нашего &lt;a href=&quot;contributing/pull-requests&quot;&gt;рабочего процесса отправки запросов&lt;/a&gt; на вытягивание .</target>
        </trans-unit>
        <trans-unit id="df1fc06bd4ba0916a355e415a08d9ac385fc744f" translate="yes" xml:space="preserve">
          <source>Once you've cloned the repository, run &lt;code&gt;npm install&lt;/code&gt; to get all the necessary dependencies:</source>
          <target state="translated">После клонирования репозитория запустите &lt;code&gt;npm install&lt;/code&gt; , чтобы получить все необходимые зависимости:</target>
        </trans-unit>
        <trans-unit id="a952bd0499233ed62352245dbdd816bb714cb93a" translate="yes" xml:space="preserve">
          <source>Once you've got ESLint running, you'll probably want to adjust the configuration to better suit your project. This section explains all the different ways you can configure ESLint.</source>
          <target state="translated">Как только ESLint будет запущен,вы,вероятно,захотите настроить конфигурацию так,чтобы она лучше соответствовала вашему проекту.Этот раздел объясняет все различные способы,которыми вы можете настроить ESLint.</target>
        </trans-unit>
        <trans-unit id="80320c8df4e958c73560fc248b42aa546a052559" translate="yes" xml:space="preserve">
          <source>Once you've made changes that you want to share with the community, the next step is to submit those changes back via a pull request.</source>
          <target state="translated">После того,как вы внесли изменения,которыми хотите поделиться с сообществом,следующий шаг-отправить эти изменения обратно с помощью запроса на вытаскивание.</target>
        </trans-unit>
        <trans-unit id="73e73f412681c6b3c636b32c5dd0a954ee56c9f0" translate="yes" xml:space="preserve">
          <source>Once your pull request is sent, it's time for the team to review it. As such, please make sure to:</source>
          <target state="translated">Как только ваш запрос на вытаскивание отправлен,пришло время команде пересмотреть его.Поэтому,пожалуйста,убедитесь в этом:</target>
        </trans-unit>
        <trans-unit id="461bb8bc5f902440c44a097ed81d4ff591b9129d" translate="yes" xml:space="preserve">
          <source>Once your shareable config is ready, you can &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;publish to npm&lt;/a&gt; to share with others. We recommend using the &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;eslintconfig&lt;/code&gt; keywords so others can easily find your module.</source>
          <target state="translated">Когда ваша общая конфигурация будет готова, вы можете &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;опубликовать ее в npm,&lt;/a&gt; чтобы поделиться ею с другими. Мы рекомендуем использовать ключевые слова &lt;code&gt;eslint&lt;/code&gt; и &lt;code&gt;eslintconfig&lt;/code&gt; , чтобы другие могли легко найти ваш модуль.</target>
        </trans-unit>
        <trans-unit id="968cb18b99b4f357f4169659789d6d35558a5b6b" translate="yes" xml:space="preserve">
          <source>One blank line should always be used in the following circumstances:</source>
          <target state="translated">Одна пустая строка всегда должна использоваться в следующих случаях:</target>
        </trans-unit>
        <trans-unit id="6e05f3f48106cca4c55183384c239e9f6781eecf" translate="yes" xml:space="preserve">
          <source>One common variant of one true brace style is called Stroustrup, in which the &lt;code&gt;else&lt;/code&gt; statements in an &lt;code&gt;if-else&lt;/code&gt; construct, as well as &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;, must be on its own line after the preceding closing brace. For example:</source>
          <target state="translated">Один из распространенных вариантов одного истинного стиля скобок называется Stroustrup, в котором операторы &lt;code&gt;else&lt;/code&gt; в конструкции &lt;code&gt;if-else&lt;/code&gt; , а также &lt;code&gt;catch&lt;/code&gt; и, &lt;code&gt;finally&lt;/code&gt; , должны находиться на отдельной строке после предыдущей закрывающей скобки. Например:</target>
        </trans-unit>
        <trans-unit id="074902a0b6265654f7818885f2c699f282da2808" translate="yes" xml:space="preserve">
          <source>One key is &lt;code&gt;VariableDeclarator&lt;/code&gt; and the other is &lt;code&gt;AssignmentExpression&lt;/code&gt;, which can be used to control the destructuring requirement for each of those types independently. Each property accepts an object that accepts two properties, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;, which can be used to control the destructuring requirement for each of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; independently for variable declarations and assignment expressions. By default, &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; are set to true for both &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt;.</source>
          <target state="translated">Один ключ - это &lt;code&gt;VariableDeclarator&lt;/code&gt; , а другой - &lt;code&gt;AssignmentExpression&lt;/code&gt; , который можно использовать для независимого управления требованиями деструктуризации для каждого из этих типов. Каждое свойство принимает объект, который принимает два свойства, &lt;code&gt;array&lt;/code&gt; и &lt;code&gt;object&lt;/code&gt; , которые можно использовать для управления требованием деструктуризации для каждого &lt;code&gt;array&lt;/code&gt; и &lt;code&gt;object&lt;/code&gt; независимо для объявлений переменных и выражений присваивания. По умолчанию для &lt;code&gt;array&lt;/code&gt; и &lt;code&gt;object&lt;/code&gt; установлено значение true как для &lt;code&gt;VariableDeclarator&lt;/code&gt; ,так и для &lt;code&gt;AssignmentExpression&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7b40cc8090e56f00ece04fc448cb76c1a5545421" translate="yes" xml:space="preserve">
          <source>One of benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">Одним из преимуществ этой опции является то,что она предотвращает неправильное использование функций стрелок в кондиционерах:</target>
        </trans-unit>
        <trans-unit id="91d4f19646312c60afdd6cb23f93395bc802b054" translate="yes" xml:space="preserve">
          <source>One of the benefits of this option is that it prevents the incorrect use of arrow functions in conditionals:</source>
          <target state="translated">Одним из преимуществ этой опции является то,что она предотвращает неправильное использование функций стрелок в кондиционерах:</target>
        </trans-unit>
        <trans-unit id="93a084e0710ce98d42a3b6895d5f4238168d8a76" translate="yes" xml:space="preserve">
          <source>One of the great things about open source projects is that anyone can contribute in any number of meaningful ways. ESLint couldn't exist without the help of the many contributors it's had since the project began, and we want you to feel like you can contribute and make a difference as well.</source>
          <target state="translated">Одна из замечательных особенностей проектов с открытым исходным кодом заключается в том,что каждый может внести свой вклад любым значимым образом.ESLint не мог бы существовать без помощи многих участников,которые у него были с момента начала проекта,и мы хотим,чтобы вы чувствовали,что вы можете внести свой вклад и изменить ситуацию к лучшему.</target>
        </trans-unit>
        <trans-unit id="8fe321b030cabb7b6a56d2b3c7ba46379fd8d541" translate="yes" xml:space="preserve">
          <source>One of the interesting, and sometimes confusing, aspects of JavaScript is that assignment can happen at almost any point. Because of this, an errant equals sign can end up causing assignment when the true intent was to do a comparison. This is especially true when using a &lt;code&gt;return&lt;/code&gt; statement. For example:</source>
          <target state="translated">Один из интересных, а иногда и сбивающих с толку аспектов JavaScript заключается в том, что назначение может происходить практически в любой момент. Из-за этого ошибочный знак равенства может в конечном итоге вызвать присвоение, когда истинное намерение состояло в том, чтобы провести сравнение. Это особенно верно при использовании оператора &lt;code&gt;return&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="dc2c724cf22353a00eb4d8e0b5ec68baf78eb5ec" translate="yes" xml:space="preserve">
          <source>One of the justifications for using Comma First style is that it can help track missing and trailing commas. These are problematic because missing commas in variable declarations can lead to the leakage of global variables and trailing commas can lead to errors in older versions of IE.</source>
          <target state="translated">Одним из оправданий использования стиля Comma First является то,что он может помочь в отслеживании пропущенных и отстающих запятых.Это проблематично,так как пропущенные запятые в переменных декларациях могут привести к утечке глобальных переменных,а трейлинговые запятые могут привести к ошибкам в старых версиях IE.</target>
        </trans-unit>
        <trans-unit id="43739dc5f4290e33b069d3cbfc858a0190a0b218" translate="yes" xml:space="preserve">
          <source>One way to fix this issue would be to ensure that &lt;code&gt;totalLength&lt;/code&gt; is read at the same time as it's updated, like this:</source>
          <target state="translated">Один из способов решить эту проблему - убедиться, что &lt;code&gt;totalLength&lt;/code&gt; читается одновременно с обновлением, например:</target>
        </trans-unit>
        <trans-unit id="82d457ac979b2d749bfa1fff14b37ecb16e90d1f" translate="yes" xml:space="preserve">
          <source>Only &lt;code&gt;return&lt;/code&gt; without a value is allowed, as it's a control flow statement.</source>
          <target state="translated">Разрешен только &lt;code&gt;return&lt;/code&gt; без значения, поскольку это оператор потока управления.</target>
        </trans-unit>
        <trans-unit id="865b1b6e5f709be37accdd161c63ae845508b783" translate="yes" xml:space="preserve">
          <source>Only make one fix per message. This is enforced because you must return the result of the fixer operation from &lt;code&gt;fix()&lt;/code&gt;.</source>
          <target state="translated">Делайте только одно исправление для каждого сообщения. Это принудительно, потому что вы должны вернуть результат операции &lt;code&gt;fix()&lt;/code&gt; из fix () .</target>
        </trans-unit>
        <trans-unit id="651a50a7f66b3213d4ddbca3f4a04a538e94dae9" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;Property&lt;/code&gt; node type is ignored by default, because for the &lt;a href=&quot;key-spacing&quot;&gt;key-spacing&lt;/a&gt; rule some alignment options require multiple spaces in properties of object literals.</source>
          <target state="translated">По умолчанию игнорируется только тип узла &amp;laquo; &lt;code&gt;Property&lt;/code&gt; &amp;raquo;, поскольку для правила &lt;a href=&quot;key-spacing&quot;&gt;межключевого интервала&lt;/a&gt; некоторые параметры выравнивания требуют наличия нескольких пробелов в свойствах литералов объектов.</target>
        </trans-unit>
        <trans-unit id="29e0482fd1761fdd60ab2cbaa6f30278bf01c57e" translate="yes" xml:space="preserve">
          <source>Open up developer tools</source>
          <target state="translated">Откройте инструменты для разработчиков</target>
        </trans-unit>
        <trans-unit id="528fa3274e8f2faac58c536989703b2a7691898b" translate="yes" xml:space="preserve">
          <source>Operator Spacing</source>
          <target state="translated">Расстояние между операторами</target>
        </trans-unit>
        <trans-unit id="f31ac1bc0518dff16e20d2bee973046b839b0d11" translate="yes" xml:space="preserve">
          <source>Operators with two operands must be preceded and followed by a single space to make the expression clear. Operators include assignments and logical operators.</source>
          <target state="translated">Операторы с двумя операндами должны предшествовать и сопровождаться одним пробелом,чтобы сделать выражение ясным.Операторы включают в себя назначения и логические операторы.</target>
        </trans-unit>
        <trans-unit id="5cf9f8318f166d81f0832974953640e35cb76c75" translate="yes" xml:space="preserve">
          <source>Opponents of Yoda conditions point out that tooling has made us better programmers because tools will catch the mistaken use of &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; (ESLint will catch this for you). Therefore, they argue, the utility of the pattern doesn't outweigh the readability hit the code takes while using Yoda conditions.</source>
          <target state="translated">Противники условий Йоды указывают на то, что инструменты сделали нас лучшими программистами, потому что инструменты будут обнаруживать ошибочное использование &lt;code&gt;=&lt;/code&gt; вместо &lt;code&gt;==&lt;/code&gt; (ESLint поймает это за вас). Следовательно, утверждают они, полезность шаблона не перевешивает снижение читабельности кода при использовании условий Йоды.</target>
        </trans-unit>
        <trans-unit id="cc2f1a7f94147f105a8901b8c9bb3f24406fa1ff" translate="yes" xml:space="preserve">
          <source>Optional Exception</source>
          <target state="translated">Дополнительное исключение</target>
        </trans-unit>
        <trans-unit id="a89a55547173e68a8fb3ba71bad23165f06ceb9e" translate="yes" xml:space="preserve">
          <source>Optional. If &lt;code&gt;true&lt;/code&gt; is present and the &lt;code&gt;options.filePath&lt;/code&gt; is a file ESLint should ignore, this method returns a lint result contains a warning message.</source>
          <target state="translated">Необязательный. Если присутствует значение &lt;code&gt;true&lt;/code&gt; и параметр &lt;code&gt;options.filePath&lt;/code&gt; - это файл, который ESLint должен игнорировать, этот метод возвращает результат lint, содержащий предупреждающее сообщение.</target>
        </trans-unit>
        <trans-unit id="f8431df7be1c6293b85fd6c46fb7d73eae65d45c" translate="yes" xml:space="preserve">
          <source>Optional. The path to the file of the source code text. If omitted, the &lt;code&gt;result.filePath&lt;/code&gt; becomes the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">Необязательный. Путь к файлу с текстом исходного кода. Если не указано, &lt;code&gt;result.filePath&lt;/code&gt; становится строкой &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4f2085951383e2cdbc090c9683b06731c8ef7ac4" translate="yes" xml:space="preserve">
          <source>Optionally, this rule can also enforce consistent order (&lt;code&gt;getBeforeSet&lt;/code&gt; or &lt;code&gt;setBeforeGet&lt;/code&gt;).</source>
          <target state="translated">При желании это правило также может обеспечивать согласованный порядок ( &lt;code&gt;getBeforeSet&lt;/code&gt; или &lt;code&gt;setBeforeGet&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3f583032cbdd550a2873302394f975358318e3c2" translate="yes" xml:space="preserve">
          <source>Optionally, you may specify a &lt;code&gt;max&lt;/code&gt; object property:</source>
          <target state="translated">При желании вы можете указать свойство объекта &lt;code&gt;max&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="babf5970a0d99737bb086b6569f51b231437e499" translate="yes" xml:space="preserve">
          <source>Options Schemas</source>
          <target state="translated">Схемы опционов</target>
        </trans-unit>
        <trans-unit id="125e188e5c535aba49305bcd42d96422853718e3" translate="yes" xml:space="preserve">
          <source>Options that accept array values can be specified by repeating the option or with a comma-delimited list (other than &lt;code&gt;--ignore-pattern&lt;/code&gt; which does not allow the second style).</source>
          <target state="translated">Параметры, которые принимают значения массива, могут быть указаны путем повторения параметра или с помощью списка, разделенного запятыми (кроме &lt;code&gt;--ignore-pattern&lt;/code&gt; , который не поддерживает второй стиль).</target>
        </trans-unit>
        <trans-unit id="cc6d4354c518051842952b8b24cff75c301ac9bd" translate="yes" xml:space="preserve">
          <source>Or an object option (Requires line breaks if any of properties is satisfied. Otherwise, disallows line breaks):</source>
          <target state="translated">Или опция объекта (Требуется перенос строки при удовлетворении любого из свойств).В противном случае,не допускает разрывов строк):</target>
        </trans-unit>
        <trans-unit id="48fb5dcfee6b391a00a0d645f582f3d72542e395" translate="yes" xml:space="preserve">
          <source>Or an object option:</source>
          <target state="translated">Или вариант объекта:</target>
        </trans-unit>
        <trans-unit id="8e04bc60d27598107203a60a335ed572e88264d3" translate="yes" xml:space="preserve">
          <source>Or for non-iterable 'array-like' objects:</source>
          <target state="translated">Или для неграмотных &quot;массивовидных&quot; объектов:</target>
        </trans-unit>
        <trans-unit id="8b117f5f38fcd06ba55849762c28b3c6a4df0d38" translate="yes" xml:space="preserve">
          <source>Or for tabbed indentation:</source>
          <target state="translated">Или для отступов с табличками:</target>
        </trans-unit>
        <trans-unit id="534b36ed6d3baf1cd0fb88cab59bd33364f67414" translate="yes" xml:space="preserve">
          <source>Or in a &lt;code&gt;package.json&lt;/code&gt; file</source>
          <target state="translated">Или в файле &lt;code&gt;package.json&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="983504f1db047b4a14f090593364eea27f5c86b0" translate="yes" xml:space="preserve">
          <source>Or you can enforce that calls to &lt;code&gt;setTimeout&lt;/code&gt; always have two arguments:</source>
          <target state="translated">Или вы можете заставить вызовы &lt;code&gt;setTimeout&lt;/code&gt; всегда иметь два аргумента:</target>
        </trans-unit>
        <trans-unit id="2349626c15ba88b850dda985180df347efff61da" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;Variable&lt;/code&gt; objects and &lt;code&gt;Reference&lt;/code&gt; objects refer each other:</source>
          <target state="translated">Первоначально, &lt;code&gt;Variable&lt;/code&gt; объекты и &lt;code&gt;Reference&lt;/code&gt; объекты относятся друг к другу:</target>
        </trans-unit>
        <trans-unit id="0c7f2d70c0ac6c087885c2e18648286544190997" translate="yes" xml:space="preserve">
          <source>Other Integration Lists</source>
          <target state="translated">Другие интеграционные списки</target>
        </trans-unit>
        <trans-unit id="121423f7955be6f99034dbe35e9109d534d3bb31" translate="yes" xml:space="preserve">
          <source>Other code conventions allow you to skip the &lt;code&gt;default&lt;/code&gt; case so long as there is a comment indicating the omission is intentional, such as:</source>
          <target state="translated">Другие соглашения по коду позволяют пропустить регистр по &lt;code&gt;default&lt;/code&gt; если есть комментарий, указывающий на намеренное упущение, например:</target>
        </trans-unit>
        <trans-unit id="c413664d095ba6eda32b2e5180bd3f63ad775b0e" translate="yes" xml:space="preserve">
          <source>Others prefer to declare one var per line.</source>
          <target state="translated">Другие предпочитают объявлять по одному варику на линию.</target>
        </trans-unit>
        <trans-unit id="777e3867f41cdcbbc95d8a27831735e4439631d1" translate="yes" xml:space="preserve">
          <source>Otherwise are considered problems.</source>
          <target state="translated">Иначе считаются проблемами.</target>
        </trans-unit>
        <trans-unit id="8f226c4b9fa003489fea8332ce25c85c4ade2f50" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option. Note that if &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; is explicitly specified in the configuration, the &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option will correspond to the &lt;code&gt;&quot;function&quot;&lt;/code&gt; option regardless of the specified environment.</source>
          <target state="translated">В противном случае вариант &lt;code&gt;&quot;safe&quot;&lt;/code&gt; соответствует параметру &lt;code&gt;&quot;function&quot;&lt;/code&gt; . Обратите внимание, что если в конфигурации явно указано &lt;code&gt;&quot;globalReturn&quot;: false&lt;/code&gt; , параметр &lt;code&gt;&quot;safe&quot;&lt;/code&gt; будет соответствовать параметру &lt;code&gt;&quot;function&quot;&lt;/code&gt; независимо от указанной среды.</target>
        </trans-unit>
        <trans-unit id="0b2741d82e791a60bad1a8621fcdbf97b20d60b3" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;RuleTester#run&lt;/code&gt; will simply execute all of the tests in sequence, and will throw an error if one of them fails. This means you can simply execute a test file that calls &lt;code&gt;RuleTester.run&lt;/code&gt; using &lt;code&gt;node&lt;/code&gt;, without needing a testing framework.</source>
          <target state="translated">В противном случае &lt;code&gt;RuleTester#run&lt;/code&gt; просто выполнит все тесты последовательно и выдаст ошибку, если один из них завершится неудачно. Это означает, что вы можете просто выполнить тестовый файл, который вызывает &lt;code&gt;RuleTester.run&lt;/code&gt; с помощью &lt;code&gt;node&lt;/code&gt; , без необходимости использования среды тестирования.</target>
        </trans-unit>
        <trans-unit id="da453deb49d685f98fdc9eee6730a3db89861b4f" translate="yes" xml:space="preserve">
          <source>Otherwise, if &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are present as globals, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;global.describe&lt;/code&gt; and &lt;code&gt;global.it&lt;/code&gt; to run tests. This allows &lt;code&gt;RuleTester&lt;/code&gt; to work when using frameworks like &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; without any additional configuration.</source>
          <target state="translated">В противном случае, если &lt;code&gt;describe&lt;/code&gt; и &lt;code&gt;it&lt;/code&gt; присутствует в качестве глобал, &lt;code&gt;RuleTester&lt;/code&gt; будет использовать &lt;code&gt;global.describe&lt;/code&gt; и &lt;code&gt;global.it&lt;/code&gt; для выполнения тестов. Это позволяет &lt;code&gt;RuleTester&lt;/code&gt; работать с такими фреймворками, как &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha,&lt;/a&gt; без какой-либо дополнительной настройки.</target>
        </trans-unit>
        <trans-unit id="f111dde36a2183fb8b31d84bb35478c7ad28ae40" translate="yes" xml:space="preserve">
          <source>Otherwise, if the node does not declare any variables, an empty array is returned.</source>
          <target state="translated">В противном случае,если узел не объявляет никаких переменных,возвращается пустой массив.</target>
        </trans-unit>
        <trans-unit id="112f84fde1efd0a6b137f4ef4aeed3c549b08bd5" translate="yes" xml:space="preserve">
          <source>Our commit message format is as follows:</source>
          <target state="translated">Формат нашего сообщения о фиксации следующий:</target>
        </trans-unit>
        <trans-unit id="874ef7e39663f7db82348ed922daa965002f8637" translate="yes" xml:space="preserve">
          <source>Our public &lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;issues tracker&lt;/a&gt; lists all of the things we plan on doing as well as suggestions from the community. Before starting to work on an issue, be sure you read through the rest of this page.</source>
          <target state="translated">В нашем &lt;a href=&quot;https://github.com/eslint/eslint/issues&quot;&gt;трекере&lt;/a&gt; общественных проблем перечислены все, что мы планируем делать, а также предложения сообщества. Прежде чем приступить к работе над проблемой, обязательно прочтите оставшуюся часть этой страницы.</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="50d578ebf4e00d8649eb4f95a59bf792edcd3b16" translate="yes" xml:space="preserve">
          <source>Output Examples</source>
          <target state="translated">Выходные примеры</target>
        </trans-unit>
        <trans-unit id="f721699fc008a02ac10d406435648374991b8df2" translate="yes" xml:space="preserve">
          <source>Output object from this method:</source>
          <target state="translated">Выводите объект из этого метода:</target>
        </trans-unit>
        <trans-unit id="2ae3c877f13160bf4fb915afd2aa35c94e464b88" translate="yes" xml:space="preserve">
          <source>Output to the console</source>
          <target state="translated">Выход на консоль</target>
        </trans-unit>
        <trans-unit id="afb6b4b6cae2618f58f61a3533c0fccfc233090f" translate="yes" xml:space="preserve">
          <source>Outputting to the console</source>
          <target state="translated">Вывод на консоль</target>
        </trans-unit>
        <trans-unit id="afdf6e15c0ce33e13907329dd18f3fa61951053c" translate="yes" xml:space="preserve">
          <source>Outputting to the filesystem</source>
          <target state="translated">Вывод в файловую систему</target>
        </trans-unit>
        <trans-unit id="744acdca9924738f6ba20a057659f4dab8956cfb" translate="yes" xml:space="preserve">
          <source>Over the past several releases, we have been deprecating rules and introducing new rules to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">В течение последних нескольких релизов мы отменяли правила и вводили новые правила,чтобы занять их место.Ниже приведен список удаленных правил и их замена:</target>
        </trans-unit>
        <trans-unit id="f15e25b67d56c0b50f6e65a89912cb8c44445c60" translate="yes" xml:space="preserve">
          <source>Overall Performance</source>
          <target state="translated">Общая производительность</target>
        </trans-unit>
        <trans-unit id="bed3eb091eb6a1e8a3c68cc9f2b8cad9f0ea7e35" translate="yes" xml:space="preserve">
          <source>Override blocks can also specify patterns to exclude from matches. If a file matches any of the excluded patterns, the configuration won't apply.</source>
          <target state="translated">Блоки переопределения могут также задавать шаблоны для исключения из совпадения.Если файл соответствует какому-либо из исключенных шаблонов,конфигурация не будет применяться.</target>
        </trans-unit>
        <trans-unit id="d65d233ad72a12dd5f816f689346ed699f068f74" translate="yes" xml:space="preserve">
          <source>Overrides in a config file can now match dotfiles</source>
          <target state="translated">Переопределения в конфигурационном файле теперь могут совпадать с точечными файлами</target>
        </trans-unit>
        <trans-unit id="c7279b45cea6645bd003b55c34e4e0b68128806b" translate="yes" xml:space="preserve">
          <source>Overrides in an extended config file can now be overridden by a parent config file</source>
          <target state="translated">Переопределения в расширенном конфигурационном файле теперь могут быть переопределены родительским конфигурационным файлом</target>
        </trans-unit>
        <trans-unit id="84e380bd7906ce369799455bb337baa4a7e912c3" translate="yes" xml:space="preserve">
          <source>Packaging the Custom Formatter</source>
          <target state="translated">Упаковка пользовательского формата</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="0a0e056314281df7ebe5bff4801d78e2bcb2e0da" translate="yes" xml:space="preserve">
          <source>Parentheses Spacing</source>
          <target state="translated">Круглые скобки Расстояние между скобками</target>
        </trans-unit>
        <trans-unit id="8b047ea57f8d4953d13e87c42cd0dfbacf8b9d4e" translate="yes" xml:space="preserve">
          <source>Passing Arguments to Formatters</source>
          <target state="translated">Передача аргументов форматорам</target>
        </trans-unit>
        <trans-unit id="bbad3fbb9280e935e855b557b50f0feb18c726b1" translate="yes" xml:space="preserve">
          <source>Passing the callback by reference</source>
          <target state="translated">Передача обратного вызова по ссылке</target>
        </trans-unit>
        <trans-unit id="866764460d5b328ce01c5d25fea87d4f72c58d7e" translate="yes" xml:space="preserve">
          <source>Path to the cache file. If none specified &lt;code&gt;.eslintcache&lt;/code&gt; will be used. The file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed. &lt;strong&gt;Deprecated&lt;/strong&gt;: Use &lt;code&gt;--cache-location&lt;/code&gt; instead.</source>
          <target state="translated">Путь к файлу кеша. Если не указан &lt;code&gt;.eslintcache&lt;/code&gt; будет использоваться. Файл будет создан в каталоге, где &lt;code&gt;eslint&lt;/code&gt; команда eslint . &lt;strong&gt;Не рекомендуется&lt;/strong&gt; : используйте вместо этого &lt;code&gt;--cache-location&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1a4f2472b12ffd8aaa283f1912f4a749bb112a9e" translate="yes" xml:space="preserve">
          <source>Path to the cache location. Can be a file or a directory. If no location is specified, &lt;code&gt;.eslintcache&lt;/code&gt; will be used. In that case, the file will be created in the directory where the &lt;code&gt;eslint&lt;/code&gt; command is executed.</source>
          <target state="translated">Путь к расположению кеша. Может быть файлом или каталогом. Если местоположение не указано, будет использоваться &lt;code&gt;.eslintcache&lt;/code&gt; . В этом случае файл будет создан в каталоге, в котором &lt;code&gt;eslint&lt;/code&gt; команда eslint .</target>
        </trans-unit>
        <trans-unit id="9cf1a4ce359a6f23066671fb0ce9dcb0cf168d6e" translate="yes" xml:space="preserve">
          <source>Paths are relative to &lt;code&gt;.eslintignore&lt;/code&gt; location or the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">Пути указываются относительно местоположения &lt;code&gt;.eslintignore&lt;/code&gt; или текущего рабочего каталога. Это также верно и путей передали через &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;команды&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="be2e483ed2197aec27cb04e7cf1f6436f2920c5c" translate="yes" xml:space="preserve">
          <source>Paths are relative to the current working directory. This is also true of paths passed in via the &lt;code&gt;--ignore-pattern&lt;/code&gt;&lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;command&lt;/a&gt;.</source>
          <target state="translated">Пути указаны относительно текущего рабочего каталога. Это также верно и путей передали через &lt;code&gt;--ignore-pattern&lt;/code&gt; &lt;a href=&quot;command-line-interface#--ignore-pattern&quot;&gt;команды&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0493aae6aa03f23cee93bbaad9b496620e893832" translate="yes" xml:space="preserve">
          <source>Peer Dependency</source>
          <target state="translated">Коллегиальная зависимость</target>
        </trans-unit>
        <trans-unit id="d4a170a4c994882082963476d79b1a77b04c7ae7" translate="yes" xml:space="preserve">
          <source>Per-rule Performance</source>
          <target state="translated">Производительность по правилам</target>
        </trans-unit>
        <trans-unit id="ed363adcc6ae50f9e2d44c956c484ce493017156" translate="yes" xml:space="preserve">
          <source>Perform any asynchronous operations</source>
          <target state="translated">Выполнять любые асинхронные операции</target>
        </trans-unit>
        <trans-unit id="9b69332b09b8aef3669c8068b4744d1b0de90bdd" translate="yes" xml:space="preserve">
          <source>Performance Testing</source>
          <target state="translated">Тестирование производительности</target>
        </trans-unit>
        <trans-unit id="be4da6f0c7a2438c9087ddd0f224ce1c2084f2f0" translate="yes" xml:space="preserve">
          <source>Performing an operation on each element of an iterable is a common task. However, performing an &lt;code&gt;await&lt;/code&gt; as part of each operation is an indication that the program is not taking full advantage of the parallelization benefits of &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;.</source>
          <target state="translated">Выполнение операции над каждым элементом итерации - обычная задача. Однако выполнение &lt;code&gt;await&lt;/code&gt; как части каждой операции является признаком того, что программа не в полной мере использует преимущества распараллеливания &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="95901ce3386d6d8922a77162d48436823c7874d9" translate="yes" xml:space="preserve">
          <source>Personal Configuration File (deprecated)</source>
          <target state="translated">Персональный файл конфигурации (устаревший)</target>
        </trans-unit>
        <trans-unit id="f11e03ac0806752483bf14b215cdf12352c57130" translate="yes" xml:space="preserve">
          <source>Personal config files have been deprecated since &lt;a href=&quot;https://eslint.org/blog/2019/11/eslint-v6.7.0-released&quot;&gt;v6.7.0&lt;/a&gt;. ESLint v7.0.0 will start printing runtime deprecation warnings. It will print a warning for the following situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4e75f6b932e3d5f6b66dcca11234789a64b98d" translate="yes" xml:space="preserve">
          <source>Piping Code Into ESLint</source>
          <target state="translated">Код трубопровода в ESLint</target>
        </trans-unit>
        <trans-unit id="06f50881a755583b161af4399bd829f0111ebe4f" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (e.g., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">Поместите все свои правила выполнения в один и тот же каталог (например, &lt;code&gt;eslint_rules&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="31ccc366a57c10600d02a87ddb1627ad8fcf83e4" translate="yes" xml:space="preserve">
          <source>Place all of your runtime rules in the same directory (i.e., &lt;code&gt;eslint_rules&lt;/code&gt;).</source>
          <target state="translated">Поместите все свои правила во время выполнения в том же каталоге (например, &lt;code&gt;eslint_rules&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="92009e0d6a0520471a107f4e981c2e736fb0840b" translate="yes" xml:space="preserve">
          <source>Placeholders in suggestion messages</source>
          <target state="translated">Держатели в сообщениях с предложениями</target>
        </trans-unit>
        <trans-unit id="e51396525bede24fbfd195365328421b2712f903" translate="yes" xml:space="preserve">
          <source>Please include as much detail as possible to help us properly address your issue. If we need to triage issues and constantly ask people for more detail, that's time taken away from actually fixing issues. Help us be as efficient as possible by including a lot of detail in your issues.</source>
          <target state="translated">Пожалуйста,включите как можно больше подробностей,чтобы помочь нам правильно решить вашу проблему.Если нам нужно сортировать проблемы и постоянно просить людей о более подробной информации,то это время уйдет от фактического решения проблем.Помогите нам быть как можно более эффективными,включив как можно больше деталей в ваши вопросы.</target>
        </trans-unit>
        <trans-unit id="8fe040cc7654341f94ac91393bb05581350df1ab" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;&quot;always&quot;&lt;/code&gt; and &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; require function expressions and function declarations in &lt;code&gt;export default&lt;/code&gt; declarations to have a name.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;&quot;always&quot;&lt;/code&gt; и &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; требуют, чтобы выражения функций и объявления функций в объявлениях &lt;code&gt;export default&lt;/code&gt; имели имя.</target>
        </trans-unit>
        <trans-unit id="58942fbcaefe941982699b63620879d5c168e499" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;data&lt;/code&gt; in a test case does not assert &lt;code&gt;data&lt;/code&gt; passed to &lt;code&gt;context.report&lt;/code&gt;. Instead, it is used to form the expected message text which is then compared with the received &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что &lt;code&gt;data&lt;/code&gt; в тестовом примере не подтверждают &lt;code&gt;data&lt;/code&gt; переданные в &lt;code&gt;context.report&lt;/code&gt; . Вместо этого он используется для формирования ожидаемого текста сообщения, который затем сравнивается с полученным &lt;code&gt;message&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a2dd72b1131b99a3809611bb27561465f891b142" translate="yes" xml:space="preserve">
          <source>Please note that most editors show an additional empty line at the end if the file ends with a line break. This rule does not count that extra line.</source>
          <target state="translated">Обратите внимание,что большинство редакторов показывают дополнительную пустую строку в конце,если файл заканчивается с разрывом строки.Это правило не учитывает эту дополнительную строку.</target>
        </trans-unit>
        <trans-unit id="cd6cb4e45c0a145bc991dcd0e8f4ab88f39165d4" translate="yes" xml:space="preserve">
          <source>Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt; if you are using React and want React semantics. By the same token, supporting ES6 syntax is not the same as supporting new ES6 globals (e.g., new types such as &lt;code&gt;Set&lt;/code&gt;). For ES6 syntax, use &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt;; for new ES6 global variables, use &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt;. &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; enables ES6 syntax automatically, but &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; does not enable ES6 globals automatically. Parser options are set in your &lt;code&gt;.eslintrc.*&lt;/code&gt; file by using the &lt;code&gt;parserOptions&lt;/code&gt; property. The available options are:</source>
          <target state="translated">Обратите внимание, что поддержка синтаксиса JSX - это не то же самое, что поддержка React. React применяет определенную семантику к синтаксису JSX, которую ESLint не распознает. Мы рекомендуем использовать &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-плагин реагировать&lt;/a&gt; , если вы используете React и хочет Реагировать семантику. К тому же, поддержка синтаксиса ES6 - это не то же самое, что поддержка новых глобальных переменных ES6 (например, новых типов, таких как &lt;code&gt;Set&lt;/code&gt; ). Для синтаксиса ES6 используйте &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; ; для новых глобальных переменных ES6 используйте &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; . &lt;code&gt;{ &quot;env&quot;: { &quot;es6&quot;: true } }&lt;/code&gt; автоматически включает синтаксис ES6, но &lt;code&gt;{ &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 6 } }&lt;/code&gt; не включает автоматически глобальные переменные ES6. &lt;code&gt;.eslintrc.*&lt;/code&gt; файл с помощью свойства &lt;code&gt;parserOptions&lt;/code&gt; . Доступные варианты:</target>
        </trans-unit>
        <trans-unit id="caa1e575508ae90c0c1f3ba9cbc5f1d6c3021954" translate="yes" xml:space="preserve">
          <source>Please note that the following methods have been deprecated and will be removed in a future version of ESLint:</source>
          <target state="translated">Пожалуйста,обратите внимание,что следующие методы были устаревшие и будут удалены в будущей версии ESLint:</target>
        </trans-unit>
        <trans-unit id="32dcca51ba22590cfb1a0282165e0b20b80790ba" translate="yes" xml:space="preserve">
          <source>Please note that this option applies only to identifiers inside destructuring patterns. It doesn't additionally allow any particular use of the created variables later in the code apart from the use that is already allowed by default or by other options.</source>
          <target state="translated">Обратите внимание,что данная опция применима только к идентификаторам внутри шаблонов деструкции.Кроме того,она не позволяет использовать созданные переменные позже в коде,за исключением использования,которое уже разрешено по умолчанию или другими опциями.</target>
        </trans-unit>
        <trans-unit id="af6c838d3e272ac0343544e6baa570e2ff52feda" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not aim to detect and disallow a potentially erroneous use of backreference syntax in regular expressions, like the use in character classes or an attempt to reference a group that doesn't exist. Depending on the context, a &lt;code&gt;\1&lt;/code&gt;...&lt;code&gt;\9&lt;/code&gt; sequence that is not a syntactically valid backreference may produce syntax error, or be parsed as something else (e.g., as a legacy octal escape sequence).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2fdf1d62a3776fdec8b729a28be6e793bf8d2a" translate="yes" xml:space="preserve">
          <source>Please note that this rule does not compare conditions from the chain with conditions inside statements, and will not warn in the cases such as follows:</source>
          <target state="translated">Пожалуйста,обратите внимание,что это правило не сравнивает условия из цепочки с условиями внутри заявлений и не предупреждает в следующих случаях:</target>
        </trans-unit>
        <trans-unit id="2c0f066535f2bcba0c175ddc973c5549691cce2c" translate="yes" xml:space="preserve">
          <source>Please note that this rule is not designed to check loop conditions, and will not warn in cases such as the following examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970fbd12b618363bade0db3e52057a632da36216" translate="yes" xml:space="preserve">
          <source>Please note that when passing a glob as a parameter, it will be expanded by your shell. The results of the expansion can vary depending on your shell, and its configuration. If you want to use node &lt;code&gt;glob&lt;/code&gt; syntax, you have to quote your parameter (using double quotes if you need it to run in Windows), as follows:</source>
          <target state="translated">Обратите внимание, что при передаче глобуса в качестве параметра он будет расширен вашей оболочкой. Результаты расширения могут различаться в зависимости от вашей оболочки и ее конфигурации. Если вы хотите использовать синтаксис node &lt;code&gt;glob&lt;/code&gt; , вы должны заключить свой параметр в кавычки (используя двойные кавычки, если вам нужно, чтобы он работал в Windows), как показано ниже:</target>
        </trans-unit>
        <trans-unit id="7e110a34a2db33270f753e46f8b7ab8a3821147b" translate="yes" xml:space="preserve">
          <source>Please note that you can either use the top-level options or the grouped options (&lt;code&gt;singleLine&lt;/code&gt; and &lt;code&gt;multiLine&lt;/code&gt;) but not both.</source>
          <target state="translated">Обратите внимание, что вы можете использовать либо параметры верхнего уровня, либо сгруппированные параметры ( &lt;code&gt;singleLine&lt;/code&gt; и &lt;code&gt;multiLine&lt;/code&gt; ), но не оба сразу.</target>
        </trans-unit>
        <trans-unit id="a115fb1f05052d949674b5ad9f4dd54cca5e205b" translate="yes" xml:space="preserve">
          <source>Please note that you have to provide &lt;code&gt;data&lt;/code&gt; on the suggestion's object. Suggestion messages cannot use properties from the overall error's &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">Обратите внимание, что вы должны предоставить &lt;code&gt;data&lt;/code&gt; об объекте предложения. В сообщениях с предложениями нельзя использовать свойства из общих &lt;code&gt;data&lt;/code&gt; об ошибке .</target>
        </trans-unit>
        <trans-unit id="8131e2054fa3d6ce5d0136ddb8d6ac107226cb3a" translate="yes" xml:space="preserve">
          <source>Please read the user guide's section on &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuring parser options&lt;/a&gt; to learn more.</source>
          <target state="translated">Пожалуйста, прочтите раздел руководства пользователя о &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;настройке параметров парсера,&lt;/a&gt; чтобы узнать больше.</target>
        </trans-unit>
        <trans-unit id="4e9e14b73e813f94faf81a7bf4b8e790aeed433c" translate="yes" xml:space="preserve">
          <source>Please see &lt;code&gt;.gitignore&lt;/code&gt;'s specification for further examples of valid syntax.</source>
          <target state="translated">Пожалуйста, смотрите &lt;code&gt;.gitignore&lt;/code&gt; для дальнейших примеров допустимого синтаксиса.</target>
        </trans-unit>
        <trans-unit id="910be8bbebe15605e3211e93adb45fe019aed843" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;generator documentation&lt;/a&gt; for instructions on how to use it.</source>
          <target state="translated">Пожалуйста, обратитесь к &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;документации генератора,&lt;/a&gt; чтобы узнать, как его использовать.</target>
        </trans-unit>
        <trans-unit id="2c576146a981b5faae12b330f7bab5f655d4de92" translate="yes" xml:space="preserve">
          <source>Plugin authors may need to update installation instructions</source>
          <target state="translated">Авторам плагина может понадобиться обновить инструкции по установке</target>
        </trans-unit>
        <trans-unit id="e3b560171bc6f34e81c89e0ab2f15568841517f3" translate="yes" xml:space="preserve">
          <source>Plugin environments can define the following objects:</source>
          <target state="translated">Окружения плагина могут определять следующие объекты:</target>
        </trans-unit>
        <trans-unit id="58e21bcc42d158dabd7ff055ec27d67cd4db039a" translate="yes" xml:space="preserve">
          <source>Plugin resolution has been updated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbbbaf384cbc0ee72d4f8c606fcf5d504bca04e" translate="yes" xml:space="preserve">
          <source>Plugins No Longer Have Default Configurations</source>
          <target state="translated">Плагины Дольше не имеют конфигураций по умолчанию</target>
        </trans-unit>
        <trans-unit id="7b2f2b7399c496bf73ff7e69192e8907b6ce6f81" translate="yes" xml:space="preserve">
          <source>Plugins and shareable configs are no longer affected by ESLint's location</source>
          <target state="translated">На плагины и конфигурационные файлы с общим доступом больше не влияет местоположение ESLint</target>
        </trans-unit>
        <trans-unit id="6b2a2fcf74ee4cecce3ba1b5cd83e800b49e72b4" translate="yes" xml:space="preserve">
          <source>Plugins are resolved relative to the config file. In other words, ESLint will load the plugin as a user would obtain by running &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; in the config file.</source>
          <target state="translated">Плагины разрешаются относительно файла конфигурации. Другими словами, ESLint загрузит плагин в том виде, в каком пользователь получит его, запустив &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; в файле конфигурации.</target>
        </trans-unit>
        <trans-unit id="ee9003d71c823216744370af56f21413e11f9752" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional environments for use in ESLint. To do so, the plugin must export an &lt;code&gt;environments&lt;/code&gt; object. The keys of the &lt;code&gt;environments&lt;/code&gt; object are the names of the different environments provided and the values are the environment settings. For example:</source>
          <target state="translated">Плагины могут предоставлять дополнительные среды для использования в ESLint. Для этого плагин должен экспортировать объект &lt;code&gt;environments&lt;/code&gt; . Ключи объекта &lt;code&gt;environments&lt;/code&gt; - это имена различных предоставленных сред, а значения - это параметры среды. Например:</target>
        </trans-unit>
        <trans-unit id="dec281e97d018cacc13382cfc427e305389a0405" translate="yes" xml:space="preserve">
          <source>Plugins can expose additional rules for use in ESLint. To do so, the plugin must export a &lt;code&gt;rules&lt;/code&gt; object containing a key-value mapping of rule ID to rule. The rule ID does not have to follow any naming convention (so it can just be &lt;code&gt;dollar-sign&lt;/code&gt;, for instance).</source>
          <target state="translated">Плагины могут предоставлять дополнительные правила для использования в ESLint. Для этого плагин должен экспортировать объект &lt;code&gt;rules&lt;/code&gt; содержащий сопоставление &amp;laquo;ключ-значение&amp;raquo; идентификатора правила в правило. Идентификатор правила не должен соответствовать каким-либо соглашениям об именах (например, это может быть просто &lt;code&gt;dollar-sign&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b69b69c3f7bf908cf04b17050967f012181e0472" translate="yes" xml:space="preserve">
          <source>Plugins in scoped packages are now resolvable in configs</source>
          <target state="translated">Плагины в scoped-пакетах теперь могут быть разрешены в конфигурациях</target>
        </trans-unit>
        <trans-unit id="06ed5affa3a994c517d473c69ea0a4badefd02a1" translate="yes" xml:space="preserve">
          <source>Plugins in the base configuration (loaded by &lt;code&gt;extends&lt;/code&gt; setting) are relative to the derived config file. For example, if &lt;code&gt;./.eslintrc&lt;/code&gt; has &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; and the &lt;code&gt;eslint-config-foo&lt;/code&gt; has &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt;, ESLint finds the &lt;code&gt;eslint-plugin-bar&lt;/code&gt; from &lt;code&gt;./node_modules/&lt;/code&gt; (rather than &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt;) or ancestor directories. Thus every plugin in the config file and base configurations is resolved uniquely.</source>
          <target state="translated">Плагины в базовой конфигурации (загружаются с помощью параметра &lt;code&gt;extends&lt;/code&gt; ) относятся к производному файлу конфигурации. Например, если &lt;code&gt;./.eslintrc&lt;/code&gt; имеет &lt;code&gt;extends: [&quot;foo&quot;]&lt;/code&gt; и &lt;code&gt;eslint-config-foo&lt;/code&gt; имеет &lt;code&gt;plugins: [&quot;bar&quot;]&lt;/code&gt; , ESLint находит &lt;code&gt;eslint-plugin-bar&lt;/code&gt; из &lt;code&gt;./node_modules/&lt;/code&gt; (а не &lt;code&gt;./node_modules/eslint-config-foo/node_modules/&lt;/code&gt; ) или каталоги предков. Таким образом, каждый плагин в файле конфигурации и базовых конфигурациях разрешается однозначно.</target>
        </trans-unit>
        <trans-unit id="f9ec5b88d6b7fe33abdb0cd312d875b7aee0a01e" translate="yes" xml:space="preserve">
          <source>Plugins may provide processors. Processors can extract JavaScript code from another kind of files, then lets ESLint lint the JavaScript code. Or processors can convert JavaScript code in preprocessing for some purpose.</source>
          <target state="translated">Плагины могут обеспечить процессоры.Процессоры могут извлекать JavaScript-код из файлов другого типа,а затем позволяет ESLint lint код JavaScript.Или процессоры могут преобразовывать JavaScript-код в препроцессинге для каких-то целей.</target>
        </trans-unit>
        <trans-unit id="04de60818b1275febaa49d420056bd8ab7e76e8e" translate="yes" xml:space="preserve">
          <source>Polyjuice works with JSON configuration files, so if you're using a JavaScript or YAML JSCS configuration file, you should first convert it into a JSON configuration file.</source>
          <target state="translated">Polyjuice работает с конфигурационными файлами JSON,поэтому если вы используете конфигурационный файл JavaScript или YAML JSCS,то сначала необходимо преобразовать его в конфигурационный файл JSON.</target>
        </trans-unit>
        <trans-unit id="4db8807336771db69984fb33e2ecb89b2b778d76" translate="yes" xml:space="preserve">
          <source>Possible Errors</source>
          <target state="translated">Возможные ошибки</target>
        </trans-unit>
        <trans-unit id="51e379f50f0321cddf83015a5392ece47d742feb" translate="yes" xml:space="preserve">
          <source>Prefer destructuring from arrays and objects (prefer-destructuring)</source>
          <target state="translated">Предпочитает разрушение от массивов и объектов (предпочитает разрушение)</target>
        </trans-unit>
        <trans-unit id="c228b3216b65c6046a15d3f0b6ae1deea05d3ecb" translate="yes" xml:space="preserve">
          <source>Prefer use of an object spread over &lt;code&gt;Object.assign&lt;/code&gt; (prefer-object-spread)</source>
          <target state="translated">Предпочитайте использование объекта, распределенного по &lt;code&gt;Object.assign&lt;/code&gt; (предпочитают объект-распространение)</target>
        </trans-unit>
        <trans-unit id="ad7e776a42690874c6d781cece37cffe753da846" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^10.12.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">Предварительные требования: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; ( &lt;code&gt;^10.12.0&lt;/code&gt; или &lt;code&gt;&amp;gt;=12.0.0&lt;/code&gt; ) построен с поддержкой SSL. (Если вы используете официальный дистрибутив Node.js, SSL всегда встроен.)</target>
        </trans-unit>
        <trans-unit id="82062f1465f3be0589e9c94efa76e989985103e4" translate="yes" xml:space="preserve">
          <source>Prerequisites: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; (&lt;code&gt;^8.10.0&lt;/code&gt;, &lt;code&gt;^10.13.0&lt;/code&gt;, or &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt;) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)</source>
          <target state="translated">Предварительные требования: &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; ( &lt;code&gt;^8.10.0&lt;/code&gt; , &lt;code&gt;^10.13.0&lt;/code&gt; или &lt;code&gt;&amp;gt;=11.10.1&lt;/code&gt; ) построен с поддержкой SSL. (Если вы используете официальный дистрибутив Node.js, SSL всегда встроен.)</target>
        </trans-unit>
        <trans-unit id="2a14e1b8f5938872ffc8263a306ac7453d0b08cd" translate="yes" xml:space="preserve">
          <source>Previous versions of ESLint silently ignored any nonexistent files and globs provided on the command line:</source>
          <target state="translated">Предыдущие версии ESLint беззвучно игнорировали любые несуществующие файлы и глобусы,предоставляемые в командной строке:</target>
        </trans-unit>
        <trans-unit id="76163b1a220d26d8c656f8c6db9cb83328c660ff" translate="yes" xml:space="preserve">
          <source>Previously to v7.0.0, ESLint would only lint files with a &lt;code&gt;.js&lt;/code&gt; extension by default if you give directories like &lt;code&gt;eslint src&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861eb458285d7d2f2e5428c183895fe75d599908" translate="yes" xml:space="preserve">
          <source>Previously, &lt;code&gt;RuleTester&lt;/code&gt; used loose equality when making some of its assertions. For example, if a rule produced the string &lt;code&gt;&quot;7&quot;&lt;/code&gt; as a result of autofixing, &lt;code&gt;RuleTester&lt;/code&gt; would allow the number &lt;code&gt;7&lt;/code&gt; in an &lt;code&gt;output&lt;/code&gt; assertion, rather than the string &lt;code&gt;&quot;7&quot;&lt;/code&gt;. In ESLint v5, comparisons from &lt;code&gt;RuleTester&lt;/code&gt; use strict equality, so an assertion like this will no longer pass.</source>
          <target state="translated">Раньше &lt;code&gt;RuleTester&lt;/code&gt; использовал слабое равенство при выполнении некоторых своих утверждений. Например, если правило создало строку &lt;code&gt;&quot;7&quot;&lt;/code&gt; в результате автофиксации, &lt;code&gt;RuleTester&lt;/code&gt; разрешил бы число &lt;code&gt;7&lt;/code&gt; в утверждении &lt;code&gt;output&lt;/code&gt; , а не строку &lt;code&gt;&quot;7&quot;&lt;/code&gt; . В ESLint v5 сравнения из &lt;code&gt;RuleTester&lt;/code&gt; используют строгое равенство, поэтому подобное утверждение больше не будет выполняться.</target>
        </trans-unit>
        <trans-unit id="3f50639030ce290e0b2d963a0feb9b72be44a4b6" translate="yes" xml:space="preserve">
          <source>Previously, ESLint loaded plugins relative to the location of the ESLint package itself. As a result, we suggested that users with global ESLint installations should also install plugins globally, and users with local ESLint installations should install plugins locally. However, due to a design bug, this strategy caused ESLint to randomly fail to load plugins and shareable configs under certain circumstances, particularly when using package management tools like &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt;&lt;code&gt;lerna&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n' Play&lt;/a&gt;.</source>
          <target state="translated">Раньше ESLint загружал плагины относительно местоположения самого пакета ESLint. В результате мы предложили, чтобы пользователи с глобальными установками ESLint также устанавливали плагины глобально, а пользователи с локальными установками ESLint должны устанавливать плагины локально. Однако из-за ошибки дизайна эта стратегия привела к тому, что ESLint случайно не смог загрузить плагины и общие конфигурации при определенных обстоятельствах, особенно при использовании инструментов управления пакетами, таких как &lt;a href=&quot;https://github.com/lerna/lerna&quot;&gt; &lt;code&gt;lerna&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/pnp/&quot;&gt;Yarn Plug n 'Play&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e5a31efe99bb4ae0265c26c456f8708e8b3abad7" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would add an &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property to &lt;code&gt;Variable&lt;/code&gt; objects in scope analysis to indicate that a variable was introduced as a result of a &lt;code&gt;/* global */&lt;/code&gt; comment. This property was undocumented, and the ESLint team was unable to find any usage of the property outside of ESLint core. The property has been removed in ESLint v6, and replaced with the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property, which can contain a list of all &lt;code&gt;/* global */&lt;/code&gt; comments if a variable was declared with more than one of them.</source>
          <target state="translated">Ранее ESLint добавлял свойство &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; к объектам &lt;code&gt;Variable&lt;/code&gt; при анализе области видимости, чтобы указать, что переменная была введена в результате &lt;code&gt;/* global */&lt;/code&gt; comment. Это свойство было недокументировано, и команде ESLint не удалось найти какое-либо использование этого свойства за пределами ядра ESLint. Это свойство было удалено в ESLint v6 и заменено свойством &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; , которое может содержать список всех &lt;code&gt;/* global */&lt;/code&gt; комментариев, если переменная была объявлена ​​с более чем одним из них.</target>
        </trans-unit>
        <trans-unit id="a1d351994dd8ff11b19e958c9018b81f03cb97ca" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would ignore these malformed directive comments. ESLint v5 will report an error when it sees a problem like this, so that the issue can be more easily corrected.</source>
          <target state="translated">Ранее ESLint игнорировал эти некорректные комментарии к директивам.ESLint v5 сообщит об ошибке,когда увидит подобную проблему,так что проблему будет проще исправить.</target>
        </trans-unit>
        <trans-unit id="d6b010cfb49c2bd7324d04fb33de705502ddf710" translate="yes" xml:space="preserve">
          <source>Previously, ESLint would set the &lt;code&gt;parent&lt;/code&gt; property on each AST node immediately before running rule listeners for that node. This caused some confusion for rule authors, because the &lt;code&gt;parent&lt;/code&gt; property would not initially be present on any nodes, and it was sometimes necessary to complicate the structure of a rule to ensure that the &lt;code&gt;parent&lt;/code&gt; property of a given node would be available when needed.</source>
          <target state="translated">Ранее ESLint устанавливал &lt;code&gt;parent&lt;/code&gt; свойство на каждом узле AST непосредственно перед запуском прослушивателей правил для этого узла. Это вызвало некоторую путаницу у авторов правил, поскольку &lt;code&gt;parent&lt;/code&gt; свойство изначально не присутствовало ни на одном узле, и иногда приходилось усложнять структуру правила, чтобы гарантировать, что &lt;code&gt;parent&lt;/code&gt; свойство данного узла будет доступно при необходимости.</target>
        </trans-unit>
        <trans-unit id="2efde3c7b07c84bb2b96e4b7cf3ee1a328ba78ff" translate="yes" xml:space="preserve">
          <source>Previously, it was possible for rules to report AST nodes without providing a report message. This was not intended behavior, and as a result the default formatter would crash if a rule omitted a message. However, it was possible to avoid a crash when using a non-default formatter, such as &lt;code&gt;json&lt;/code&gt;.</source>
          <target state="translated">Раньше правила могли сообщать об узлах AST без предоставления сообщения отчета. Это не было предполагаемым поведением, и в результате модуль форматирования по умолчанию вылетал из строя, если правило пропустило сообщение. Однако можно было избежать сбоя при использовании средства форматирования, отличного от стандартного, например &lt;code&gt;json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="665203081aa657ef14f3fd259bc736ff48eade7a" translate="yes" xml:space="preserve">
          <source>Previously, rule context objects had an undocumented &lt;code&gt;_linter&lt;/code&gt; property, which was used internally within ESLint to process reports from rules. Some rules used this property to achieve functionality that was not intended to be possible for rules. For example, several plugins used the &lt;code&gt;_linter&lt;/code&gt; property in a rule to monitor reports from other rules, for the purpose of checking for unused &lt;code&gt;/* eslint-disable */&lt;/code&gt; directive comments. Although this functionality was useful for users, it could also cause stability problems for projects using ESLint. For example, an upgrade to a rule in one plugin could unexpectedly cause a rule in another plugin to start reporting errors.</source>
          <target state="translated">Раньше объекты контекста правил имели недокументированное свойство &lt;code&gt;_linter&lt;/code&gt; , которое использовалось внутри ESLint для обработки отчетов из правил. В некоторых правилах это свойство использовалось для достижения функциональности, которая не была предусмотрена для правил. Например, несколько подключаемых &lt;code&gt;_linter&lt;/code&gt; свойство _linter в правиле для отслеживания отчетов из других правил с целью проверки на наличие неиспользуемых комментариев директивы &lt;code&gt;/* eslint-disable */&lt;/code&gt; . Хотя эта функция была полезна для пользователей, она также могла вызвать проблемы со стабильностью для проектов, использующих ESLint. Например, обновление правила в одном плагине может неожиданно привести к тому, что правило в другом плагине начнет сообщать об ошибках.</target>
        </trans-unit>
        <trans-unit id="7ad7f54686fbe669487e9816787f55d0683c5950" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/comma-dangle&quot;&gt;&lt;code&gt;comma-dangle&lt;/code&gt;&lt;/a&gt; rule would ignore trailing function arguments and parameters, unless explicitly configured to check for function commas. In ESLint v6, function commas are treated the same way as other types of trailing commas.</source>
          <target state="translated">Раньше правило &lt;a href=&quot;../rules/comma-dangle&quot;&gt; &lt;code&gt;comma-dangle&lt;/code&gt; &lt;/a&gt; игнорировало завершающие аргументы и параметры функции, если явно не настроено для проверки наличия запятых функций. В ESLint v6 функциональные запятые обрабатываются так же, как и другие типы конечных запятых.</target>
        </trans-unit>
        <trans-unit id="bb4d9004d86d873bce13da59ea0da1efcb652b6e" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;a href=&quot;../rules/indent&quot;&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/a&gt; rule was fairly lenient about checking indentation; there were many code patterns where indentation was not validated by the rule. This caused confusion for users, because they were accidentally writing code with incorrect indentation, and they expected ESLint to catch the issues.</source>
          <target state="translated">Раньше правило &lt;a href=&quot;../rules/indent&quot;&gt; &lt;code&gt;indent&lt;/code&gt; &lt;/a&gt; было довольно мягким в отношении проверки отступа; было много шаблонов кода, где отступы не проверялись правилом. Это вызвало путаницу у пользователей, потому что они случайно писали код с неправильным отступом и ожидали, что ESLint обнаружит проблемы.</target>
        </trans-unit>
        <trans-unit id="cac4dad357054ea6ee0c7634c9a4e7c59614fbef" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;context.getScope()&lt;/code&gt; method changed its behavior based on the &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; property. However, this could cause confusing behavior when using a parser that doesn't respond to the &lt;code&gt;ecmaVersion&lt;/code&gt; option, such as &lt;code&gt;babel-eslint&lt;/code&gt;.</source>
          <target state="translated">Ранее метод &lt;code&gt;context.getScope()&lt;/code&gt; изменял свое поведение на &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; свойства parserOptions.ecmaVersion . Однако это может вызвать запутанное поведение при использовании синтаксического анализатора, который не отвечает на параметр &lt;code&gt;ecmaVersion&lt;/code&gt; , например &lt;code&gt;babel-eslint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="40450d3f81bf0c288fef5278f775f18d1a6902ca" translate="yes" xml:space="preserve">
          <source>Previously, the &lt;code&gt;linter.verify()&lt;/code&gt; API accepted a &lt;code&gt;global&lt;/code&gt; config option, which was a synonym for the documented &lt;code&gt;globals&lt;/code&gt; property. The &lt;code&gt;global&lt;/code&gt; option was never documented or officially supported, and did not work in config files. It has been removed in 4.0.</source>
          <target state="translated">Ранее API &lt;code&gt;linter.verify()&lt;/code&gt; принимал параметр &lt;code&gt;global&lt;/code&gt; конфигурации, который был синонимом задокументированного свойства &lt;code&gt;globals&lt;/code&gt; . &lt;code&gt;global&lt;/code&gt; вариант никогда не был документально или официально поддерживается, и не работает в файлах конфигурации. Он был удален в 4.0.</target>
        </trans-unit>
        <trans-unit id="759b8740ec08f1087d9d1461adf3e37a3bf5b531" translate="yes" xml:space="preserve">
          <source>Previously, when configuring a set of global variables with an object, it was possible to use anything as the values of the object. An unknown value would be treated the same as &lt;code&gt;&quot;writable&quot;&lt;/code&gt;.</source>
          <target state="translated">Раньше при настройке набора глобальных переменных с объектом можно было использовать что угодно в качестве значений объекта. Неизвестное значение будет рассматриваться как &lt;code&gt;&quot;writable&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7b32ac883bfc23aab343c6372688bec1c7d6449" translate="yes" xml:space="preserve">
          <source>Previously, when linting code with a parser that had not been previously defined, the &lt;code&gt;Linter&lt;/code&gt; API would attempt to load the parser from the filesystem. However, this behavior was confusing because &lt;code&gt;Linter&lt;/code&gt; never access the filesystem in any other cases, and it was difficult to ensure that the correct parser would be found when loading the parser from the filesystem.</source>
          <target state="translated">Раньше при линтинге кода с помощью парсера, который ранее не был определен, &lt;code&gt;Linter&lt;/code&gt; API пытался загрузить парсер из файловой системы. Однако такое поведение сбивало с толку, потому что &lt;code&gt;Linter&lt;/code&gt; никогда не обращался к файловой системе ни в каких других случаях, и было трудно гарантировать, что правильный парсер будет найден при загрузке парсера из файловой системы.</target>
        </trans-unit>
        <trans-unit id="8a3ba3b815ccf0fde610368afb8b3a032a9740a4" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const foo = {...data}&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; spread element.</source>
          <target state="translated">Ранее при синтаксическом разборе кода JS, такого как &lt;code&gt;const foo = {...data}&lt;/code&gt; с включенной опцией &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; , анализатор по умолчанию генерировал тип узла &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; для элемента &lt;code&gt;...data&lt;/code&gt; распространения данных .</target>
        </trans-unit>
        <trans-unit id="3572fe8f9bf308c3f1c32a5c5c8ecf7ade2e2992" translate="yes" xml:space="preserve">
          <source>Previously, when parsing JS code like &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; with the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option enabled, the default parser would generate an &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; node type for the &lt;code&gt;...data&lt;/code&gt; rest element.</source>
          <target state="translated">Раньше при синтаксическом анализе JS-кода, такого как &lt;code&gt;const {foo, ...rest} = data&lt;/code&gt; с включенной опцией &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; , синтаксический анализатор по умолчанию генерировал тип узла &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; для элемента &lt;code&gt;...data&lt;/code&gt; rest.</target>
        </trans-unit>
        <trans-unit id="ac97c7d1bc4493830e4f2c35fbc7b98e9d1581e8" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser it was possible to use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable support for &lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;rest/spread properties&lt;/a&gt;, as follows:</source>
          <target state="translated">Раньше при использовании синтаксического анализатора по умолчанию можно было использовать параметр &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; для включения поддержки &lt;a href=&quot;https://developers.google.com/web/updates/2017/06/object-rest-spread&quot;&gt;свойств rest / spread&lt;/a&gt; , как показано ниже:</target>
        </trans-unit>
        <trans-unit id="393a7447e4d30c62abea4ddc9f0d3dfc3e208e74" translate="yes" xml:space="preserve">
          <source>Previously, when using the default parser, a config could use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option to enable parsing support for object rest/spread properties:</source>
          <target state="translated">Раньше при использовании синтаксического анализатора по умолчанию конфигурация могла использовать параметр &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; для включения поддержки синтаксического анализа для свойств объекта rest / spread:</target>
        </trans-unit>
        <trans-unit id="6c1fec0a04a3eab043ee811142120d57785cfef0" translate="yes" xml:space="preserve">
          <source>Primitive Literals</source>
          <target state="translated">Примитивные буквы</target>
        </trans-unit>
        <trans-unit id="8c8f400f7e3e42d398c134471b34479ab1e3ff12" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, if a directory contained both an &lt;code&gt;.eslintrc&lt;/code&gt; file and a &lt;code&gt;package.json&lt;/code&gt; file with ESLint configuration information, the settings from the two files would be merged together. In 2.0.0, only the settings from the &lt;code&gt;.eslintrc.*&lt;/code&gt; file are used and the ones in &lt;code&gt;package.json&lt;/code&gt; are ignored when both are present. Otherwise, &lt;code&gt;package.json&lt;/code&gt; can still be used with ESLint configuration, but only if no other &lt;code&gt;.eslintrc.*&lt;/code&gt; files are present.</source>
          <target state="translated">До версии 2.0.0, если каталог содержал и файл &lt;code&gt;.eslintrc&lt;/code&gt; ,и файл &lt;code&gt;package.json&lt;/code&gt; с информацией о конфигурации ESLint, настройки из этих двух файлов объединялись. В 2.0.0, только настройки из &lt;code&gt;.eslintrc.*&lt;/code&gt; Файл используются и те , в &lt;code&gt;package.json&lt;/code&gt; игнорируются , когда присутствуют оба. В противном случае &lt;code&gt;package.json&lt;/code&gt; все еще можно использовать с конфигурацией ESLint, но только если нет других &lt;code&gt;.eslintrc.*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bacbbe4722ec9b78f85bdddd7ed97a705ae7d9fe" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, new global variables that were standardized as part of ES6 such as &lt;code&gt;Promise&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;Symbol&lt;/code&gt; were included in the built-in global environment. This could lead to potential issues when, for example, &lt;code&gt;no-undef&lt;/code&gt; permitted use of the &lt;code&gt;Promise&lt;/code&gt; constructor even in ES5 code where promises are unavailable. In 2.0.0, the built-in environment only includes the standard ES5 global variables, and the new ES6 global variables have been moved to the &lt;code&gt;es6&lt;/code&gt; environment.</source>
          <target state="translated">До версии 2.0.0 новые глобальные переменные, которые были стандартизированы как часть ES6, такие как &lt;code&gt;Promise&lt;/code&gt; , &lt;code&gt;Map&lt;/code&gt; , &lt;code&gt;Set&lt;/code&gt; и &lt;code&gt;Symbol&lt;/code&gt; , были включены во встроенную глобальную среду. Это может привести к потенциальным проблемам, когда, например, использование конструктора &lt;code&gt;Promise&lt;/code&gt; без использования &lt;code&gt;no-undef&lt;/code&gt; разрешено даже в коде ES5, где обещания недоступны. В 2.0.0 встроенная среда включает только стандартные глобальные переменные ES5, а новые глобальные переменные ES6 были перемещены в среду &lt;code&gt;es6&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ea53a76cd88b434dcfaff09ec72ada7ae7831a08" translate="yes" xml:space="preserve">
          <source>Prior to 2.0.0, the way to enable language options was by using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration. In 2.0.0:</source>
          <target state="translated">До версии 2.0.0 для включения языковых параметров использовалось использование &lt;code&gt;ecmaFeatures&lt;/code&gt; в вашей конфигурации. В 2.0.0:</target>
        </trans-unit>
        <trans-unit id="6b9f0362f6ea97fabedbee28f3e42f7c63d479c2" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, ESLint required parsers to implement comment attachment, a process where AST nodes would gain additional properties corresponding to their leading and trailing comments in the source file. This made it difficult for users to develop custom parsers, because they would have to replicate the confusing comment attachment semantics required by ESLint.</source>
          <target state="translated">До версии 4.0 ESLint требовалось,чтобы парсеры реализовали вложение комментариев-процесс,при котором AST-узлы получали дополнительные свойства,соответствующие их ведущим и ведущим комментариям в исходном файле.Это затрудняло разработку пользовательских синтаксических анализаторов,поскольку им приходилось дублировать запутанную семантику прикрепления комментариев,требуемую ESLint.</target>
        </trans-unit>
        <trans-unit id="5e3d392b20fe6d9664c81b4a65c6b601daf8e9bf" translate="yes" xml:space="preserve">
          <source>Prior to 4.0, shebang comments in a source file would not appear in the output of &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; or &lt;code&gt;sourceCode.getComments()&lt;/code&gt;, but they would appear in the output of &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; as line comments. This inconsistency led to some confusion for rule developers.</source>
          <target state="translated">До 4.0 комментарии shebang в исходном файле не отображались в выходных данных &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; или &lt;code&gt;sourceCode.getComments()&lt;/code&gt; , но они отображались в выходных данных &lt;code&gt;sourceCode.getTokenOrCommentBefore&lt;/code&gt; как строковые комментарии. Это несоответствие привело к некоторой путанице у разработчиков правил.</target>
        </trans-unit>
        <trans-unit id="b3be15561d5151f64c56456dc30fa7cef13a71e7" translate="yes" xml:space="preserve">
          <source>Prior to v0.16.0 this rule also enforced that there was only a single line at the end of the file. If you still want this behavior, consider enabling &lt;a href=&quot;no-multiple-empty-lines&quot;&gt;no-multiple-empty-lines&lt;/a&gt; with &lt;code&gt;maxEOF&lt;/code&gt; and/or &lt;a href=&quot;no-trailing-spaces&quot;&gt;no-trailing-spaces&lt;/a&gt;.</source>
          <target state="translated">До v0.16.0 это правило также требовало, чтобы в конце файла была только одна строка. Если вам все еще нужно такое поведение, рассмотрите возможность включения &lt;a href=&quot;no-multiple-empty-lines&quot;&gt;без нескольких пустых строк&lt;/a&gt; с &lt;code&gt;maxEOF&lt;/code&gt; и / или &lt;a href=&quot;no-trailing-spaces&quot;&gt;без конечных пробелов&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="af52f1493bafbe39bd3dae2bc861bf916727dd6e" translate="yes" xml:space="preserve">
          <source>Prior to v2.0.0, plugins could specify a &lt;code&gt;rulesConfig&lt;/code&gt; for the plugin. The &lt;code&gt;rulesConfig&lt;/code&gt; would automatically be applied whenever someone uses the plugin, which is the opposite of what ESLint does in every other situation (where nothing is on by default). To bring plugins behavior in line, we have removed support for &lt;code&gt;rulesConfig&lt;/code&gt; in plugins.</source>
          <target state="translated">До версии 2.0.0 плагины могли указывать &lt;code&gt;rulesConfig&lt;/code&gt; для плагина. &lt;code&gt;rulesConfig&lt;/code&gt; будет автоматически применяться всякий раз , когда кто - то использует плагин, который является противоположностью того , что делает ESLint в любой другой ситуации (где нет ничего по умолчанию). Чтобы привести поведение плагинов в соответствие, мы удалили поддержку &lt;code&gt;rulesConfig&lt;/code&gt; в плагинах.</target>
        </trans-unit>
        <trans-unit id="692a54c10f74d805a38453bd22bb1d25068c3ba0" translate="yes" xml:space="preserve">
          <source>Processors in Plugins</source>
          <target state="translated">Процессоры в плагинах</target>
        </trans-unit>
        <trans-unit id="ee555673e8664c98d4ada2d762c610f965ba2a31" translate="yes" xml:space="preserve">
          <source>Processors may make named code blocks such as &lt;code&gt;0.js&lt;/code&gt; and &lt;code&gt;1.js&lt;/code&gt;. ESLint handles such a named code block as a child file of the original file. You can specify additional configurations for named code blocks in the &lt;code&gt;overrides&lt;/code&gt; section of the config. For example, the following disables &lt;code&gt;strict&lt;/code&gt; rule for the named code blocks which end with &lt;code&gt;.js&lt;/code&gt; in markdown files.</source>
          <target state="translated">Процессоры могут сделать названы блоки кода , такие как &lt;code&gt;0.js&lt;/code&gt; и &lt;code&gt;1.js&lt;/code&gt; . ESLint обрабатывает такой именованный блок кода как дочерний файл исходного файла. Вы можете указать дополнительные конфигурации для именованных блоков кода в разделе &lt;code&gt;overrides&lt;/code&gt; файла config. Например, следующее отключает &lt;code&gt;strict&lt;/code&gt; правило для именованных блоков кода, которые заканчиваются на &lt;code&gt;.js&lt;/code&gt; в файлах уценки.</target>
        </trans-unit>
        <trans-unit id="f32c5098fb499f12ad76958c7a61d5b8091f9763" translate="yes" xml:space="preserve">
          <source>Program is expressed with several code paths. A code path is expressed with objects of two kinds: &lt;code&gt;CodePath&lt;/code&gt; and &lt;code&gt;CodePathSegment&lt;/code&gt;.</source>
          <target state="translated">Программа выражается несколькими путями кода. Путь кода выражается объектами двух типов: &lt;code&gt;CodePath&lt;/code&gt; и &lt;code&gt;CodePathSegment&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42fa885d13da97a910ec7164bf19b94acb08d0f0" translate="yes" xml:space="preserve">
          <source>Programming language style guides are important for the long-term maintainability of software. This guide is based on the &lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;Code Conventions for the Java Programming Language&lt;/a&gt; and &lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Douglas Crockford's Code Conventions for the JavaScript Programming Language&lt;/a&gt;. Modifications have been made due to my personal experience and preferences.</source>
          <target state="translated">Руководства по стилю языков программирования важны для долгосрочной поддержки программного обеспечения. Это руководство основано на &lt;a href=&quot;https://java.sun.com/docs/codeconv/&quot;&gt;соглашениях&lt;/a&gt; о коде для языка программирования Java и &lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;на соглашениях о коде для языка программирования JavaScript Дугласа Крокфорда&lt;/a&gt; . Изменения внесены исходя из моего личного опыта и предпочтений.</target>
        </trans-unit>
        <trans-unit id="43f3ace69f2fe7131543d9052cb08b303ff904e4" translate="yes" xml:space="preserve">
          <source>Project-level configuration:</source>
          <target state="translated">Конфигурация на уровне проекта:</target>
        </trans-unit>
        <trans-unit id="33fb62ee4504c98b469fcbf6c4712f39685712fe" translate="yes" xml:space="preserve">
          <source>Property descriptors in &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt; methods of the global objects.</source>
          <target state="translated">Дескрипторы свойств в &lt;code&gt;Object.create&lt;/code&gt; , &lt;code&gt;Object.defineProperty&lt;/code&gt; , &lt;code&gt;Object.defineProperties&lt;/code&gt; и &lt;code&gt;Reflect.defineProperty&lt;/code&gt; глобальных объектов.</target>
        </trans-unit>
        <trans-unit id="b5e66a1596415565d4a94aaddcf8bb5751542451" translate="yes" xml:space="preserve">
          <source>Proponents of Yoda conditions highlight that it is impossible to mistakenly use &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; because you cannot assign to a literal value. Doing so will cause a syntax error and you will be informed of the mistake early on. This practice was therefore very common in early programming where tools were not yet available.</source>
          <target state="translated">Сторонники условий Йоды подчеркивают, что невозможно ошибочно использовать &lt;code&gt;=&lt;/code&gt; вместо &lt;code&gt;==&lt;/code&gt; , потому что вы не можете присвоить буквальное значение. Это вызовет синтаксическую ошибку, и вы будете проинформированы об ошибке на раннем этапе. Таким образом, эта практика была очень распространена в раннем программировании, где инструменты еще не были доступны.</target>
        </trans-unit>
        <trans-unit id="d36f5aee868ae6db86c6284531cdd8f72d77db1c" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;new-rules&quot;&gt;New Rule&lt;/a&gt;</source>
          <target state="translated">Предложение &lt;a href=&quot;new-rules&quot;&gt;нового правила&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ecaeee3736f17c6a22f424961f98b463abcd212d" translate="yes" xml:space="preserve">
          <source>Proposing a &lt;a href=&quot;rule-changes&quot;&gt;Rule Change&lt;/a&gt;</source>
          <target state="translated">Предложение &lt;a href=&quot;rule-changes&quot;&gt;изменения правила&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8fde9b438a1e10afec4812ddd08e7722642dc36e" translate="yes" xml:space="preserve">
          <source>Proposing a Rule</source>
          <target state="translated">Предлагая правило</target>
        </trans-unit>
        <trans-unit id="341849141f80cca77602012c6f342ce4742319fd" translate="yes" xml:space="preserve">
          <source>Proposing a Rule Change</source>
          <target state="translated">Предложение об изменении правил</target>
        </trans-unit>
        <trans-unit id="86ee7e213745f3cf674455c23534700070da7b53" translate="yes" xml:space="preserve">
          <source>Provide as many unit tests as possible. Your pull request will never be turned down for having too many tests submitted with it!</source>
          <target state="translated">Предоставьте как можно больше модульных тестов.Ваш запрос на вытаскивание никогда не будет отклонен за то,что с ним было подано слишком много тестов!</target>
        </trans-unit>
        <trans-unit id="4ffdc87852320c6294c2b02843d1425e91d10cfc" translate="yes" xml:space="preserve">
          <source>Providing Suggestions</source>
          <target state="translated">Предоставляя предложения</target>
        </trans-unit>
        <trans-unit id="5591bbc620225df439fe2bdef9369c8238d4af8c" translate="yes" xml:space="preserve">
          <source>Publishing a Shareable Config</source>
          <target state="translated">Публикация разделяемого конфигурационного файла</target>
        </trans-unit>
        <trans-unit id="30ab8d084e2209d47a1dc198c8de1e251f390a94" translate="yes" xml:space="preserve">
          <source>Pull Requests</source>
          <target state="translated">Тяните запросы</target>
        </trans-unit>
        <trans-unit id="8317963e9e1ff1e717106bf4888341b278d74c92" translate="yes" xml:space="preserve">
          <source>Push your changes</source>
          <target state="translated">Надавите на свои изменения</target>
        </trans-unit>
        <trans-unit id="8c720088282bb804281d4141100281d68e2719bb" translate="yes" xml:space="preserve">
          <source>Putting default parameter at last allows function calls to omit optional tail arguments.</source>
          <target state="translated">Постановка параметра по умолчанию позволяет в конце концов вызвать функцию,чтобы опустить необязательные аргументы хвоста.</target>
        </trans-unit>
        <trans-unit id="289df8885d703027d487fef77d56fc52e316d891" translate="yes" xml:space="preserve">
          <source>Rather than creating separate rules for every language feature you want to turn off, this rule allows you to configure the syntax elements you want to restrict use of. These elements are represented by their &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; node types. For example, a function declaration is represented by &lt;code&gt;FunctionDeclaration&lt;/code&gt; and the &lt;code&gt;with&lt;/code&gt; statement is represented by &lt;code&gt;WithStatement&lt;/code&gt;. You may find the full list of AST node names you can use &lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;on GitHub&lt;/a&gt; and use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser to see what type of nodes your code consists of.</source>
          <target state="translated">Вместо того, чтобы создавать отдельные правила для каждой языковой функции, которую вы хотите отключить, это правило позволяет вам настраивать элементы синтаксиса, использование которых вы хотите ограничить. Эти элементы представлены своими &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;типами&lt;/a&gt; узлов ESTree . Например, объявление функции представлено &lt;code&gt;FunctionDeclaration&lt;/code&gt; , а оператор &lt;code&gt;with&lt;/code&gt; - &lt;code&gt;WithStatement&lt;/code&gt; . Вы можете найти полный список имен узлов AST, которые вы можете использовать, &lt;a href=&quot;https://github.com/eslint/espree/blob/master/lib/ast-node-types.js&quot;&gt;на GitHub&lt;/a&gt; и использовать &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; с парсером espree, чтобы узнать, из каких типов узлов состоит ваш код.</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="9ee3f643952093b19948a020203596de344dc34f" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">Прочтите &lt;a href=&quot;https://eslint.org/conduct&quot;&gt;Кодекс поведения&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8bf3ca1af55a4ac765bcc067d56c1abf4201ae04" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;Code of Conduct&lt;/a&gt;</source>
          <target state="translated">Прочтите &lt;a href=&quot;https://js.foundation/community/code-of-conduct&quot;&gt;Кодекс поведения&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c28870b2e40bf75ddc825d7f6ccf7aef23e7e4b" translate="yes" xml:space="preserve">
          <source>Read-only global variables</source>
          <target state="translated">Глобальные переменные,доступные только для чтения</target>
        </trans-unit>
        <trans-unit id="f7f699bcbeea4f59d35cf84d686c1fe9d26c6cd2" translate="yes" xml:space="preserve">
          <source>Reading configuration information from config files (including &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt;)</source>
          <target state="translated">Чтение информации о конфигурации из файлов конфигурации (включая &lt;code&gt;.eslintrc&lt;/code&gt; и &lt;code&gt;package.json&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c503dd1f9c9f723f78d9b1e948ede74c06ed1112" translate="yes" xml:space="preserve">
          <source>Reading from the file system</source>
          <target state="translated">Считывание из файловой системы</target>
        </trans-unit>
        <trans-unit id="256ac291cd34fa721dc7063e9c7a456d831fad1e" translate="yes" xml:space="preserve">
          <source>Rebase onto upstream</source>
          <target state="translated">Перейти на восходящий поток</target>
        </trans-unit>
        <trans-unit id="3636419e1cfae4b85f914484288a2e7b2429d45d" translate="yes" xml:space="preserve">
          <source>Rebasing</source>
          <target state="translated">Rebasing</target>
        </trans-unit>
        <trans-unit id="15bc3424085a46a8b413590042e27673eda36b4b" translate="yes" xml:space="preserve">
          <source>Recommended keywords:</source>
          <target state="translated">Рекомендуемые ключевые слова:</target>
        </trans-unit>
        <trans-unit id="8532988ca58a814f1543477fc268a1acefe668d0" translate="yes" xml:space="preserve">
          <source>Redeclarations of read-only global variables and assignments to read-only global variables.</source>
          <target state="translated">Переобъявления глобальных переменных,доступных только для чтения,и присваивания им глобальных переменных,доступных только для чтения.</target>
        </trans-unit>
        <trans-unit id="4462d29bec3d07aaf9a71ae4d7273bee7d450028" translate="yes" xml:space="preserve">
          <source>Reference Information</source>
          <target state="translated">Справочная информация</target>
        </trans-unit>
        <trans-unit id="df9e76446650cac75008b6bf87079e749a453bdb" translate="yes" xml:space="preserve">
          <source>Reference interface</source>
          <target state="translated">Справочный интерфейс</target>
        </trans-unit>
        <trans-unit id="53c2a1c2bb6e1d4d8148660156aec1a0a17d24a8" translate="yes" xml:space="preserve">
          <source>ReferenceError: assignment to undeclared variable</source>
          <target state="translated">ReferenceError:присваивание незаявленной переменной</target>
        </trans-unit>
        <trans-unit id="eb264a799738b600bd47d5135f4fc05dfcd5b1d5" translate="yes" xml:space="preserve">
          <source>References to scoped plugins in config files are now required to include the scope</source>
          <target state="translated">Ссылки на просмотренные плагины в конфигурационных файлах теперь необходимы для включения области видимости</target>
        </trans-unit>
        <trans-unit id="e4409d5bd36638733bfa9227649affbe8de8da69" translate="yes" xml:space="preserve">
          <source>Reflect.apply</source>
          <target state="translated">Reflect.apply</target>
        </trans-unit>
        <trans-unit id="f2f9fd068e4242fbb4c065fab823928d6658dcc6" translate="yes" xml:space="preserve">
          <source>Reflect.defineProperty</source>
          <target state="translated">Reflect.defineProperty</target>
        </trans-unit>
        <trans-unit id="d9c40e72ed42277e621938140990fecec31860d2" translate="yes" xml:space="preserve">
          <source>Reflect.deleteProperty</source>
          <target state="translated">Reflect.deleteProperty</target>
        </trans-unit>
        <trans-unit id="dca299dec7c4b27406c99a9db8613312969fc8ef" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyDescriptor</source>
          <target state="translated">Reflect.getOwnPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="9e55b43471522e73de67aec1ebffc5cdb9fa1436" translate="yes" xml:space="preserve">
          <source>Reflect.getOwnPropertyNames</source>
          <target state="translated">Reflect.getOwnPropertyNames</target>
        </trans-unit>
        <trans-unit id="c4ccc5cd40402aca6f2327273b607a16273c4cf3" translate="yes" xml:space="preserve">
          <source>Reflect.getPrototypeOf</source>
          <target state="translated">Reflect.getPrototypeOf</target>
        </trans-unit>
        <trans-unit id="67b946573d9e6181078c2c26d4ca78a319f779cb" translate="yes" xml:space="preserve">
          <source>Reflect.isExtensible</source>
          <target state="translated">Reflect.isExtensible</target>
        </trans-unit>
        <trans-unit id="9578443035eb8705bd126e9acab6f34b58453535" translate="yes" xml:space="preserve">
          <source>Reflect.preventExtensions</source>
          <target state="translated">Reflect.preventExtensions</target>
        </trans-unit>
        <trans-unit id="a5a0796157a708b39407cdcc3b1149e74aa1ba55" translate="yes" xml:space="preserve">
          <source>Reflect.setPrototypeOf</source>
          <target state="translated">Reflect.setPrototypeOf</target>
        </trans-unit>
        <trans-unit id="5a1a35c83df714211f74bb546dc5facc26363344" translate="yes" xml:space="preserve">
          <source>RegExp &lt;code&gt;u&lt;/code&gt; flag has two effects:</source>
          <target state="translated">Флаг RegExp &lt;code&gt;u&lt;/code&gt; имеет два эффекта:</target>
        </trans-unit>
        <trans-unit id="bc019f867ae1e63caad1e171c9ac68f393022fd6" translate="yes" xml:space="preserve">
          <source>RegExp literals such as &lt;code&gt;(/abc/).test(var)&lt;/code&gt; to avoid conflicts with the &lt;a href=&quot;wrap-regex&quot;&gt;wrap-regex&lt;/a&gt; rule</source>
          <target state="translated">Литералы RegExp, такие как &lt;code&gt;(/abc/).test(var)&lt;/code&gt; , чтобы избежать конфликтов с правилом переноса &lt;a href=&quot;wrap-regex&quot;&gt;-регулярного выражения&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9082bde09754114a75d35ae7be3e2cf1598e0128" translate="yes" xml:space="preserve">
          <source>Regardless of your targeted environment, these escape sequences shouldn't be used when writing new code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7114653a737d7346ec01e388401a05144edff375" translate="yes" xml:space="preserve">
          <source>Regular expression literals, e.g., &lt;code&gt;/abc/u&lt;/code&gt;.</source>
          <target state="translated">Литералы регулярных выражений, например &lt;code&gt;/abc/u&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a0ccd845025a375ba8f53989cf7554162e8cbfee" translate="yes" xml:space="preserve">
          <source>Regular expressions can be very complex and difficult to understand, which is why it's important to keep them as simple as possible in order to avoid mistakes. One of the more error-prone things you can do with a regular expression is to use more than one space, such as:</source>
          <target state="translated">Регулярные выражения могут быть очень сложными и трудными для понимания,поэтому важно максимально упростить их,чтобы избежать ошибок.Одной из наиболее подверженных ошибкам вещей,которые можно сделать с регулярным выражением,является использование более одного пробела,например:</target>
        </trans-unit>
        <trans-unit id="73df01ef95fe676ecd6771adb485003ded6e2733" translate="yes" xml:space="preserve">
          <source>Related Rules</source>
          <target state="translated">Соответствующие правила</target>
        </trans-unit>
        <trans-unit id="33749d1fd374471a64ca2130b8acf29edc1c7f83" translate="yes" xml:space="preserve">
          <source>Related rules</source>
          <target state="translated">Соответствующие правила</target>
        </trans-unit>
        <trans-unit id="c8ca31e64125f97916f5430dc1a846a8fb66cb93" translate="yes" xml:space="preserve">
          <source>Relational Operators: &lt;code&gt;&quot;in&quot;&lt;/code&gt;, &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</source>
          <target state="translated">Операторы отношения: &lt;code&gt;&quot;in&quot;&lt;/code&gt; , &lt;code&gt;&quot;instanceof&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e4f647ac04e2d41dbb5b8e09ff6b1cdb35b950d" translate="yes" xml:space="preserve">
          <source>Relative glob patterns</source>
          <target state="translated">Относительные глобусные узоры</target>
        </trans-unit>
        <trans-unit id="e67d73e5c8870b0aee2e6a5b9e1177d2a9866243" translate="yes" xml:space="preserve">
          <source>Remember that ESLint is completely pluggable, which means you can create your own rules and distribute them using plugins. We did this on purpose because we don't want to be the gatekeepers for all possible rules. Even if we don't accept a rule into the core, that doesn't mean you can't have the exact rule that you want. See the &lt;a href=&quot;../working-with-rules&quot;&gt;working with rules&lt;/a&gt; and &lt;a href=&quot;../working-with-plugins&quot;&gt;working with plugins&lt;/a&gt; documentation for more information.</source>
          <target state="translated">Помните, что ESLint полностью подключаемый, что означает, что вы можете создавать свои собственные правила и распространять их с помощью подключаемых модулей. Мы сделали это специально, потому что не хотим быть привратниками всех возможных правил. Даже если мы не принимаем правило в основу, это не значит, что у вас не может быть именно того правила, которое вам нужно. См. Документацию по &lt;a href=&quot;../working-with-rules&quot;&gt;работе с правилами&lt;/a&gt; и &lt;a href=&quot;../working-with-plugins&quot;&gt;работе с плагинами&lt;/a&gt; для получения дополнительной информации.</target>
        </trans-unit>
        <trans-unit id="960f6a4b27df973ccb71be9fd4f6a93b7639f03e" translate="yes" xml:space="preserve">
          <source>Remove the severity from the schema</source>
          <target state="translated">Удалить строгость схемы</target>
        </trans-unit>
        <trans-unit id="b5e77c5c02a90c01b16fea8f21a1083425ebe0e0" translate="yes" xml:space="preserve">
          <source>Removed</source>
          <target state="translated">Removed</target>
        </trans-unit>
        <trans-unit id="546fa02adabca3448dcb8a362469072d1db5cf13" translate="yes" xml:space="preserve">
          <source>Removed Rules</source>
          <target state="translated">Удаленные правила</target>
        </trans-unit>
        <trans-unit id="9e30b455061dff243e207fa18925b8c54a0ca2ad" translate="yes" xml:space="preserve">
          <source>Removed rule</source>
          <target state="translated">Исключенное правило</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">Замененоено</target>
        </trans-unit>
        <trans-unit id="c385e347b2af0a4d67c9b1c9902c4b0b140d1abd" translate="yes" xml:space="preserve">
          <source>Replacement</source>
          <target state="translated">Replacement</target>
        </trans-unit>
        <trans-unit id="8ada39071f07cad84f271436e272e3f53d42073a" translate="yes" xml:space="preserve">
          <source>Report Unused &lt;code&gt;eslint-disable&lt;/code&gt; Comments</source>
          <target state="translated">Отчет Неиспользуемые &lt;code&gt;eslint-disable&lt;/code&gt; Комментарии</target>
        </trans-unit>
        <trans-unit id="a5bb62e8d7d2cc84df075be591e2610b579c891d" translate="yes" xml:space="preserve">
          <source>Reported problems have the following location information:</source>
          <target state="translated">Сообщенные проблемы имеют следующую информацию о местоположении:</target>
        </trans-unit>
        <trans-unit id="2c54bc0da768d4c877c77485784187863c28ad3c" translate="yes" xml:space="preserve">
          <source>Reporting Bugs</source>
          <target state="translated">Отчётные ошибки</target>
        </trans-unit>
        <trans-unit id="e73f2c6a276df317f0e8251b594b9c3a7772ea2d" translate="yes" xml:space="preserve">
          <source>Reporting a security vulnerability</source>
          <target state="translated">Сообщение об уязвимости в системе безопасности</target>
        </trans-unit>
        <trans-unit id="4ba09f6e2cd39c11132e45ba62fe27e6d6484469" translate="yes" xml:space="preserve">
          <source>Reporting back the results of the execution</source>
          <target state="translated">Отчетность о результатах исполнения</target>
        </trans-unit>
        <trans-unit id="7fb8531d32f9fc2cf4e7e644d67cb16c9b2b084a" translate="yes" xml:space="preserve">
          <source>Reporting warnings when certain patterns are found</source>
          <target state="translated">Сообщать о предупреждениях при обнаружении определенных закономерностей</target>
        </trans-unit>
        <trans-unit id="924d4980aa5047bdf606a251026020006a83efbe" translate="yes" xml:space="preserve">
          <source>Requesting a &lt;a href=&quot;changes&quot;&gt;Change&lt;/a&gt;</source>
          <target state="translated">Запрос на &lt;a href=&quot;changes&quot;&gt;изменение&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9670695fdbad92ea104f8e7230b9955bfb27da6e" translate="yes" xml:space="preserve">
          <source>Require === and !== (eqeqeq)</source>
          <target state="translated">Требовать ===и !==(eqeqeq)</target>
        </trans-unit>
        <trans-unit id="c9f4e2dc2e937fe6aab7b4d4c5b9b14070f93f68" translate="yes" xml:space="preserve">
          <source>Require Brace Style (brace-style)</source>
          <target state="translated">Require Brace Style (Брекет-стиль)</target>
        </trans-unit>
        <trans-unit id="29f8a3517efa09985e94aaa3daa4acd42449e8f9" translate="yes" xml:space="preserve">
          <source>Require CamelCase (camelcase)</source>
          <target state="translated">Требовать верблюжьего футляра (верблюжьего футляра)</target>
        </trans-unit>
        <trans-unit id="e6c502a34157a55662fdb96c649dfac3dca1c26c" translate="yes" xml:space="preserve">
          <source>Require Consistent This (consistent-this)</source>
          <target state="translated">Требование Последовательность Это (содержание-это)</target>
        </trans-unit>
        <trans-unit id="32bfc48d08ec21670f3f949a648100cdfb446f0d" translate="yes" xml:space="preserve">
          <source>Require Default Case in Switch Statements (default-case)</source>
          <target state="translated">Требовать случай по умолчанию в утверждениях коммутатора (случай по умолчанию)</target>
        </trans-unit>
        <trans-unit id="c4bf33ba1bc063ecb08ea78c74d6e52247e78f9e" translate="yes" xml:space="preserve">
          <source>Require Dot Notation (dot-notation)</source>
          <target state="translated">Требовать точечную запись (точка-нотация)</target>
        </trans-unit>
        <trans-unit id="a3af1a645caf25364b15e6b49f5552b803adff40" translate="yes" xml:space="preserve">
          <source>Require Following Curly Brace Conventions (curly)</source>
          <target state="translated">Требовать соблюдения конвенций о кудрявых скобках (кудрявых)</target>
        </trans-unit>
        <trans-unit id="11631863fa9bc606f91797315db692789e0485a5" translate="yes" xml:space="preserve">
          <source>Require Guarding for-in (guard-for-in)</source>
          <target state="translated">Требование Охрана для входа (Охрана для входа)</target>
        </trans-unit>
        <trans-unit id="ad26fbff7070e7dd41742c51df353b22c939a838" translate="yes" xml:space="preserve">
          <source>Require IIFEs to be Wrapped (wrap-iife)</source>
          <target state="translated">Требование обернуть ЖИЗНЬ (обертка-жизнь)</target>
        </trans-unit>
        <trans-unit id="eedd486c2cd16ec02fb12f728bf82116a2f3dc18" translate="yes" xml:space="preserve">
          <source>Require Object Literal Shorthand Syntax (object-shorthand)</source>
          <target state="translated">Требуется буквальный синтаксис объекта (объект-синтаксис)</target>
        </trans-unit>
        <trans-unit id="0f941f716fc3ec6b74fefe19704d5a768596d353" translate="yes" xml:space="preserve">
          <source>Require Or Disallow Space Before Blocks (space-before-blocks)</source>
          <target state="translated">Требовать или запрещать пространство перед блоками (пространство перед блоками)</target>
        </trans-unit>
        <trans-unit id="ba41a13b01bc7714d82241f45ba769d95682a9b8" translate="yes" xml:space="preserve">
          <source>Require Radix Parameter (radix)</source>
          <target state="translated">Требуется параметр радикса (радиус).</target>
        </trans-unit>
        <trans-unit id="4649036a73fddd6b7bf8df27f93ba7f530bd0494" translate="yes" xml:space="preserve">
          <source>Require Regex Literals to be Wrapped (wrap-regex)</source>
          <target state="translated">Требование обернуть регекс-литералы (обернуть-регекс)</target>
        </trans-unit>
        <trans-unit id="7b4e071d32a73a0c6741662339d8cb1bea0829d1" translate="yes" xml:space="preserve">
          <source>Require Variable Declarations to be at the top of their scope (vars-on-top)</source>
          <target state="translated">Требовать,чтобы декларации с переменными величинами находились в верхней части их объема (вариации на верхушке)</target>
        </trans-unit>
        <trans-unit id="c6b80ff02932afc7cc099abcdbfedd2d3d1808fb" translate="yes" xml:space="preserve">
          <source>Require braces in arrow function body (arrow-body-style)</source>
          <target state="translated">Требуются скобки в теле функции стрелки (в стиле стрелки-тела)</target>
        </trans-unit>
        <trans-unit id="5f98bbcd6bc31019c27bf6149a981097646acd25" translate="yes" xml:space="preserve">
          <source>Require grouped accessor pairs in object literals and classes (grouped-accessor-pairs)</source>
          <target state="translated">Требовать сгруппированные пары доступа в предметных литералах и классах (сгруппированные пары доступа).</target>
        </trans-unit>
        <trans-unit id="be3fbbc21cd8535fe4650e22a2253265af6b017c" translate="yes" xml:space="preserve">
          <source>Require or disallow Yoda Conditions (yoda)</source>
          <target state="translated">Требовать или запретить условия Йода (yoda)</target>
        </trans-unit>
        <trans-unit id="3150215ce32a56ca1cf1f6ef2c30ca41b3749bd6" translate="yes" xml:space="preserve">
          <source>Require or disallow a space before function parenthesis (space-before-function-paren)</source>
          <target state="translated">Требовать или запретить пробел перед скобками функции (пробел перед функцией-парена)</target>
        </trans-unit>
        <trans-unit id="5b30f13883fdda696fb76a56e4bd8aac05c52c33" translate="yes" xml:space="preserve">
          <source>Require or disallow named &lt;code&gt;function&lt;/code&gt; expressions (func-names)</source>
          <target state="translated">Требовать или запрещать именованные выражения &lt;code&gt;function&lt;/code&gt; (имена- функций )</target>
        </trans-unit>
        <trans-unit id="6923954808ca2c5768d91fe26208484172008328" translate="yes" xml:space="preserve">
          <source>Require or disallow padding lines between statements (padding-line-between-statements)</source>
          <target state="translated">Требование или запрещение линий набивки между утверждениями (линия набивки-между утверждениями)</target>
        </trans-unit>
        <trans-unit id="64d620bf8940dde332be8b599fc3f3b67a15d6b1" translate="yes" xml:space="preserve">
          <source>Require or disallow spaces before/after unary operators (space-unary-ops)</source>
          <target state="translated">Требование или запрещение пространства до/после унарных операторов (пространства-вне-вне-вне)</target>
        </trans-unit>
        <trans-unit id="2e4ed016a312c06b04085359a4f3ce7e5514db8a" translate="yes" xml:space="preserve">
          <source>Require or disallow spacing between template tags and their literals (template-tag-spacing)</source>
          <target state="translated">Требование или запрещение расстояния между тегами шаблонов и их литералами (расстояние между шаблонами).</target>
        </trans-unit>
        <trans-unit id="9a6d4f3d8ac0a43fa465b1bfeb17312af22eec9d" translate="yes" xml:space="preserve">
          <source>Require or disallow the Unicode Byte Order Mark (BOM) (unicode-bom)</source>
          <target state="translated">Требовать или запретить Unicode Byte Order Mark (BOM)(юникод-бомба)</target>
        </trans-unit>
        <trans-unit id="5414253a02d05bc00109d790a3a30b0adf3a9258" translate="yes" xml:space="preserve">
          <source>Require parens in arrow function arguments (arrow-parens)</source>
          <target state="translated">Требовать пары в аргументах функции стрелки (arrow-parens)</target>
        </trans-unit>
        <trans-unit id="6c6d01b7d910c82fc9e7e87b504603648dc910c7" translate="yes" xml:space="preserve">
          <source>Require regex literals to escape division operators.</source>
          <target state="translated">Требовать буквальных регексов для побега операторов подразделения.</target>
        </trans-unit>
        <trans-unit id="c6c78079204bca77a98f474edfbb061ab779251e" translate="yes" xml:space="preserve">
          <source>Require space before/after arrow function's arrow (arrow-spacing)</source>
          <target state="translated">Требуется пространство до/после стрелки функции стрелки (расстояние между стрелками)</target>
        </trans-unit>
        <trans-unit id="3d1e419b6e19b50c4107c427e372b159f6aa3f96" translate="yes" xml:space="preserve">
          <source>Require spaces following &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, and &lt;code&gt;case&lt;/code&gt;.</source>
          <target state="translated">Требовать пробелов после &lt;code&gt;return&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt; и &lt;code&gt;case&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2aa899302df0644585abff63972bace73e121583" translate="yes" xml:space="preserve">
          <source>Require spaces following unary word operators.</source>
          <target state="translated">Требуются пробелы после одинарных операторов слова.</target>
        </trans-unit>
        <trans-unit id="72a6e138634f7c51472518cc96850ccfd3e29b3f" translate="yes" xml:space="preserve">
          <source>Require using arrow functions for callbacks (prefer-arrow-callback)</source>
          <target state="translated">Требовать использования функций со стрелками для обратных вызовов (предпочтительно со стрелкой).</target>
        </trans-unit>
        <trans-unit id="1d4909a86e26429441b20437aa655cdf89900831" translate="yes" xml:space="preserve">
          <source>Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)</source>
          <target state="translated">Требует или не допускает пробела (пробел или табуляция),начинающего комментарий (пробел-комментарий).</target>
        </trans-unit>
        <trans-unit id="76af06a553a0453a9044a446da55d272ab01d8fe" translate="yes" xml:space="preserve">
          <source>Requires that every file have a top-level &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statement.</source>
          <target state="translated">Требует, чтобы каждый файл имел оператор верхнего уровня &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e58d216d4c343337c98dbf82f961ebd1b1a6fd84" translate="yes" xml:space="preserve">
          <source>Requiring Configuration to Run</source>
          <target state="translated">Требование к конфигурации для запуска</target>
        </trans-unit>
        <trans-unit id="a190ae07585f55210601db70caeb73d10cf5a08d" translate="yes" xml:space="preserve">
          <source>Reserved words as property names</source>
          <target state="translated">Зарезервированные слова в качестве имен собственности</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="787f008daf743bf86dcef2a2f647bc232a0260e8" translate="yes" xml:space="preserve">
          <source>Respond to comments left on the pull request from team members. Remember, we want to help you land your code, so please be receptive to our feedback.</source>
          <target state="translated">Ответьте на комментарии,оставленные на запрос о подтягивании членов команды.Помните,что мы хотим помочь вам приземлить ваш код,поэтому,пожалуйста,будьте восприимчивы к нашим отзывам.</target>
        </trans-unit>
        <trans-unit id="5e8db4f15f13d726195782f734cfad7c22163767" translate="yes" xml:space="preserve">
          <source>Restrict what can be thrown as an exception (no-throw-literal)</source>
          <target state="translated">Ограничение того,что может быть брошено как исключение (не бросок)</target>
        </trans-unit>
        <trans-unit id="d0dfe217a11c007cdb80ffac3d869a5f9a91d024" translate="yes" xml:space="preserve">
          <source>Restricting syntax with selectors</source>
          <target state="translated">Ограничение синтаксиса с селекторами</target>
        </trans-unit>
        <trans-unit id="0cde1762953d450159956d185082cff8d76cd6b3" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="translated">Результирующая фактическая конфигурация: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;allow-null&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="637d7bf830d8b7c31d75616f1f6184a3ad69451f" translate="yes" xml:space="preserve">
          <source>Resulting actual config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="translated">Результирующая фактическая конфигурация: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b969c8dc0ad380e6594b1beedc5370d8f8a5d756" translate="yes" xml:space="preserve">
          <source>Retrieves a formatter, which you can then use to format a report object. The argument is either the name of a built-in formatter:</source>
          <target state="translated">Извлекает форматировщик,который затем можно использовать для форматирования объекта отчета.Аргументом является либо имя встроенного форматировщика:</target>
        </trans-unit>
        <trans-unit id="4ed1a51e3c7c6cf43a3633b3e58f69e74b9dd263" translate="yes" xml:space="preserve">
          <source>Return Value</source>
          <target state="translated">Возвращаемая стоимость</target>
        </trans-unit>
        <trans-unit id="426dd4f5734405b3041af3bb0cf97c4f743e8aa6" translate="yes" xml:space="preserve">
          <source>Returning the correct exit code</source>
          <target state="translated">Возврат правильного кода выхода</target>
        </trans-unit>
        <trans-unit id="a8af8ce64c5e78a1bab5c7411bdc15d47c7d3cee" translate="yes" xml:space="preserve">
          <source>Rollup: &lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;rollup-plugin-eslint&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/rollup-plugin-eslint&quot;&gt;Накопительный пакет&lt;/a&gt; : rollup-plugin-eslint</target>
        </trans-unit>
        <trans-unit id="ee3c4356687403593882e1c450ecd5fa91ef9176" translate="yes" xml:space="preserve">
          <source>Rule Acceptance Criteria</source>
          <target state="translated">Критерии принятия правил</target>
        </trans-unit>
        <trans-unit id="4fea3171fe249e115dde51b612942d51ff597112" translate="yes" xml:space="preserve">
          <source>Rule Basics</source>
          <target state="translated">Основы правил</target>
        </trans-unit>
        <trans-unit id="58f4d8dcadb0bda6b1de9bc0a5d352f60cf07234" translate="yes" xml:space="preserve">
          <source>Rule Changes</source>
          <target state="translated">Изменения в правилах</target>
        </trans-unit>
        <trans-unit id="7fd1351f99409305b16b0a09a4498bd284b5d93e" translate="yes" xml:space="preserve">
          <source>Rule Deprecation</source>
          <target state="translated">Истощение правила</target>
        </trans-unit>
        <trans-unit id="2f74fe952a58aefbda52fe4dd186b37f5595f912" translate="yes" xml:space="preserve">
          <source>Rule Details</source>
          <target state="translated">Правило Подробности</target>
        </trans-unit>
        <trans-unit id="a6cbaaefbab1ddfd94efe95cec74c44f36be693f" translate="yes" xml:space="preserve">
          <source>Rule Naming Conventions</source>
          <target state="translated">Правила Название Конвенций</target>
        </trans-unit>
        <trans-unit id="3183951c7dd470388a3c3557d1a5436eae05d87f" translate="yes" xml:space="preserve">
          <source>Rule Schema Changes</source>
          <target state="translated">Изменения в схеме правил</target>
        </trans-unit>
        <trans-unit id="793bcb95f3d538bb319a28344fffc4123fe887c4" translate="yes" xml:space="preserve">
          <source>Rule Unit Tests</source>
          <target state="translated">Единицы измерения правил Испытания</target>
        </trans-unit>
        <trans-unit id="ebc497fdd0042b59fbb043aa6dad9e62ad6aaedd" translate="yes" xml:space="preserve">
          <source>Rule configuration are validated more strictly</source>
          <target state="translated">Конфигурация правил проверена более строго</target>
        </trans-unit>
        <trans-unit id="b423a892d42c8b952873772e3d160731bd071f84" translate="yes" xml:space="preserve">
          <source>Rule source</source>
          <target state="translated">Источник правил</target>
        </trans-unit>
        <trans-unit id="c79090f879452ce67b81c8904f848b8ac0346c07" translate="yes" xml:space="preserve">
          <source>Rule to disallow a duplicate case label (no-duplicate-case)</source>
          <target state="translated">Правило,запрещающее дубликат ярлыка случая (без дубликата).</target>
        </trans-unit>
        <trans-unit id="a6dc24b3b766471c01f26defe2df961bd51fa80c" translate="yes" xml:space="preserve">
          <source>RuleTester</source>
          <target state="translated">RuleTester</target>
        </trans-unit>
        <trans-unit id="bb11a8e3f8712e36e7cd9d1c615a4e3dbb03336a" translate="yes" xml:space="preserve">
          <source>Rules</source>
          <target state="translated">Rules</target>
        </trans-unit>
        <trans-unit id="8af516527308d5f596f472b28e50707a3c2ec990" translate="yes" xml:space="preserve">
          <source>Rules are now required to provide messages along with reports</source>
          <target state="translated">В настоящее время правила обязательны для предоставления сообщений вместе с отчетами.</target>
        </trans-unit>
        <trans-unit id="c130e2f455ef978067c1ba9937f4a4b55ad9b4d6" translate="yes" xml:space="preserve">
          <source>Rules in ESLint are grouped by category to help you understand their purpose.</source>
          <target state="translated">Правила в ESLint сгруппированы по категориям,чтобы помочь вам понять их назначение.</target>
        </trans-unit>
        <trans-unit id="a375a11830a6fc15a9c077874fa2553a5e211c2a" translate="yes" xml:space="preserve">
          <source>Rules in Plugins</source>
          <target state="translated">Правила в плагинах</target>
        </trans-unit>
        <trans-unit id="6012963a27096009406f4a3e3efbeb71a5dd3e0c" translate="yes" xml:space="preserve">
          <source>Rules like &lt;a href=&quot;../rules/max-len&quot;&gt;&lt;code&gt;max-len&lt;/code&gt;&lt;/a&gt; accept a string option which is interpreted as a regular expression. In ESLint v6.0.0, these regular expressions are interpreted with the &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;unicode flag&lt;/a&gt;, which should exhibit more reasonable behavior when matching characters like astral symbols. Unicode regexes also validate escape sequences more strictly than non-unicode regexes.</source>
          <target state="translated">Такие правила, как &lt;a href=&quot;../rules/max-len&quot;&gt; &lt;code&gt;max-len&lt;/code&gt; ,&lt;/a&gt; принимают строковый параметр, который интерпретируется как регулярное выражение. В ESLint v6.0.0 эти регулярные выражения интерпретируются с помощью &lt;a href=&quot;https://mathiasbynens.be/notes/es6-unicode-regex&quot;&gt;флага Unicode&lt;/a&gt; , который должен демонстрировать более разумное поведение при сопоставлении символов, таких как астральные символы. Регулярные выражения Unicode также проверяют escape-последовательности более строго, чем регулярные выражения, отличные от Unicode.</target>
        </trans-unit>
        <trans-unit id="ce446a008739b0122bfbf913623e68d18926810d" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;http://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="translated">Правила могут экспортировать свойство &lt;code&gt;schema&lt;/code&gt; , которое представляет собой описание формата &lt;a href=&quot;http://json-schema.org/&quot;&gt;схемы JSON&lt;/a&gt; параметров правила, которое будет использоваться ESLint для проверки параметров конфигурации и предотвращения недопустимых или неожиданных вводов до того, как они будут переданы правилу в &lt;code&gt;context.options&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e1d45be617bb66d659fc889df5d9d9e9f2f9e9e4" translate="yes" xml:space="preserve">
          <source>Rules may export a &lt;code&gt;schema&lt;/code&gt; property, which is a &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON schema&lt;/a&gt; format description of a rule's options which will be used by ESLint to validate configuration options and prevent invalid or unexpected inputs before they are passed to the rule in &lt;code&gt;context.options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c2759fe03a902a67d153b036b0d4f1c07d1f3c" translate="yes" xml:space="preserve">
          <source>Rules will be deprecated as needed, and marked as such in all documentation.</source>
          <target state="translated">Правила будут при необходимости отменены и помечены как таковые во всей документации.</target>
        </trans-unit>
        <trans-unit id="e93f0f77000adc61fb508077599d138239b58cd6" translate="yes" xml:space="preserve">
          <source>Rules will never be removed from ESLint.</source>
          <target state="translated">Правила никогда не будут удалены из ESLint.</target>
        </trans-unit>
        <trans-unit id="3d27ff71d65030f0e00381932a052d2a17b92776" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;command line interface&lt;/a&gt; using the &lt;code&gt;--rulesdir&lt;/code&gt; option to specify the location of your runtime rules.</source>
          <target state="translated">Запустите &lt;a href=&quot;../user-guide/command-line-interface&quot;&gt;интерфейс командной строки,&lt;/a&gt; используя параметр &lt;code&gt;--rulesdir&lt;/code&gt; , чтобы указать расположение правил времени выполнения.</target>
        </trans-unit>
        <trans-unit id="95227c2b581e8476ae8110dc2d62c41753abc92b" translate="yes" xml:space="preserve">
          <source>Run the tests</source>
          <target state="translated">Запустите тесты</target>
        </trans-unit>
        <trans-unit id="82584eccefdf0e64733530fb7b37a5c4e7baadbe" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;eslint&lt;/code&gt; with the previous custom formatter,</source>
          <target state="translated">Запуск &lt;code&gt;eslint&lt;/code&gt; с предыдущим пользовательским форматером,</target>
        </trans-unit>
        <trans-unit id="cc4ca7c771cd08213f4b8be7b584910f7669bad1" translate="yes" xml:space="preserve">
          <source>Running Individual Tests</source>
          <target state="translated">Запущенные индивидуальные тесты</target>
        </trans-unit>
        <trans-unit id="441a534445ce234b3c86dbe18e6044480f3bedfd" translate="yes" xml:space="preserve">
          <source>Running individual tests is useful when you're working on a specific bug and iterating on the solution. You should be sure to run &lt;code&gt;npm test&lt;/code&gt; before submitting a pull request.</source>
          <target state="translated">Выполнение индивидуальных тестов полезно, когда вы работаете над конкретной ошибкой и повторяете решение. Вы должны обязательно запустить &lt;code&gt;npm test&lt;/code&gt; перед отправкой запроса на перенос.</target>
        </trans-unit>
        <trans-unit id="5d976eb8e273ca6d6ba9fdfa6ef367a56a3b6ffd" translate="yes" xml:space="preserve">
          <source>Running the tests is the best way to ensure you have correctly set up your development environment. Make sure you're in the &lt;code&gt;eslint&lt;/code&gt; directory and run:</source>
          <target state="translated">Выполнение тестов - лучший способ убедиться, что вы правильно настроили среду разработки. Убедитесь, что вы находитесь в каталоге &lt;code&gt;eslint&lt;/code&gt; и запустите:</target>
        </trans-unit>
        <trans-unit id="d106aea3ee94c9ea07b2d08364473f5561ff6c88" translate="yes" xml:space="preserve">
          <source>Runs a subset of tests in PhantomJS</source>
          <target state="translated">Выполняет подмножество тестов в PhantomJS</target>
        </trans-unit>
        <trans-unit id="3a49577a7bd2d4bd0341a073ea8ac28454947600" translate="yes" xml:space="preserve">
          <source>Runs all tests on Node.js</source>
          <target state="translated">Проводит все тесты на Node.js.</target>
        </trans-unit>
        <trans-unit id="2242ca7138a532d29176cff8e842e87d6315b52e" translate="yes" xml:space="preserve">
          <source>Runs just the JavaScript and JSON linting on the repository</source>
          <target state="translated">Выполняет только JavaScript и JSON накладку на репозиторий.</target>
        </trans-unit>
        <trans-unit id="16d64887294214d8ed081b14945edfe9e11fdda5" translate="yes" xml:space="preserve">
          <source>Runtime Rules</source>
          <target state="translated">Правила выполнения</target>
        </trans-unit>
        <trans-unit id="7f506fb7f4c5e2c0e5cf2c5fa73b92aa33edf743" translate="yes" xml:space="preserve">
          <source>Runtime deprecation warnings for &lt;code&gt;~/.eslintrc.*&lt;/code&gt; config files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735c74977973d2da5bffd227fd5f002279654583" translate="yes" xml:space="preserve">
          <source>Runtime rules are written in the same format as all other rules. Create your rule as you would any other and then follow these steps:</source>
          <target state="translated">Правила выполнения записываются в том же формате,что и все остальные правила.Создайте свое правило,как и любое другое,а затем выполните следующие шаги:</target>
        </trans-unit>
        <trans-unit id="d4a37f09fbd0b4d14017c11606211cf2ba713d3b" translate="yes" xml:space="preserve">
          <source>Sails.js: &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;sails-hook-lint&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</source>
          <target state="translated">Sails.js: sails &lt;a href=&quot;https://www.npmjs.com/package/sails-hook-lint&quot;&gt;-hook-lint&lt;/a&gt; , &lt;a href=&quot;https://www.npmjs.com/package/sails-eslint&quot;&gt;sails-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="09d7f145b9b7e1d0c79daf58a80e9abbdc849945" translate="yes" xml:space="preserve">
          <source>Same reason as the point above: You shouldn't configure terms that are used very often (e.g. central parts of the native language used in your comments).</source>
          <target state="translated">По той же причине,что и выше:Не следует настраивать термины,которые используются очень часто (например,центральные части родного языка,используемые в ваших комментариях).</target>
        </trans-unit>
        <trans-unit id="7c671e8c47943a8c325952dde1f0ea58ab681314" translate="yes" xml:space="preserve">
          <source>Scope Analysis Changes</source>
          <target state="translated">Анализ сферы охвата Изменения</target>
        </trans-unit>
        <trans-unit id="36ab5b6d2a8bb7e55f7b1d6b39e4e5ce11688937" translate="yes" xml:space="preserve">
          <source>Scope Type</source>
          <target state="translated">Тип области применения</target>
        </trans-unit>
        <trans-unit id="1ababc4ffaa5b7bdf69961b71c11caa9ddda5aef" translate="yes" xml:space="preserve">
          <source>Scope interface</source>
          <target state="translated">Интерфейс Scope</target>
        </trans-unit>
        <trans-unit id="0a313e66995747d51d210db31cc5a359aecf5923" translate="yes" xml:space="preserve">
          <source>ScopeManager</source>
          <target state="translated">ScopeManager</target>
        </trans-unit>
        <trans-unit id="f83f415575654aec918367fa7b4efd53484afeb7" translate="yes" xml:space="preserve">
          <source>ScopeManager interface</source>
          <target state="translated">Интерфейс ScopeManager</target>
        </trans-unit>
        <trans-unit id="9f61e165e4f63a9799a4482983a897b3c392fb00" translate="yes" xml:space="preserve">
          <source>Second option</source>
          <target state="translated">Второй вариант</target>
        </trans-unit>
        <trans-unit id="37b1dc04082b220b42be965eea192bef3c547ba5" translate="yes" xml:space="preserve">
          <source>Second, it advances to &lt;code&gt;ForStatement.body&lt;/code&gt;. Of course the &lt;code&gt;body&lt;/code&gt; segment is preceded by the &lt;code&gt;test&lt;/code&gt; segment. It keeps the &lt;code&gt;update&lt;/code&gt; segment hovering.</source>
          <target state="translated">Во-вторых, он переходит к &lt;code&gt;ForStatement.body&lt;/code&gt; . Конечно, сегменту &lt;code&gt;body&lt;/code&gt; предшествует &lt;code&gt;test&lt;/code&gt; сегмент. Он держит сегмент &lt;code&gt;update&lt;/code&gt; зависании.</target>
        </trans-unit>
        <trans-unit id="8323971eba037489129f23f49f88dde8358fa8ad" translate="yes" xml:space="preserve">
          <source>Second, it creates the looping path. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">Во-вторых, он создает контур цикла. В настоящее время следующий сегмент уже существует, поэтому событие &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; не запускается. &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; этого он запускает onCodePathSegmentLoop .</target>
        </trans-unit>
        <trans-unit id="5b4acc9dc16ce636a836361190495f1196e2d6f8" translate="yes" xml:space="preserve">
          <source>Section 1: Get the &lt;a href=&quot;source-code&quot;&gt;Source Code&lt;/a&gt;</source>
          <target state="translated">Раздел 1. Получите &lt;a href=&quot;source-code&quot;&gt;исходный код&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b1637242cb5f4b3e36d4492cd36c48e74446f57" translate="yes" xml:space="preserve">
          <source>Section 2: Set up a &lt;a href=&quot;development-environment&quot;&gt;Development Environment&lt;/a&gt;</source>
          <target state="translated">Раздел 2: Настройка &lt;a href=&quot;development-environment&quot;&gt;среды разработки&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="78f0e7c8b704185ecfe739a5f8c33c68a075ef9e" translate="yes" xml:space="preserve">
          <source>Section 3: Run the &lt;a href=&quot;unit-tests&quot;&gt;Unit Tests&lt;/a&gt;</source>
          <target state="translated">Раздел 3: Запуск &lt;a href=&quot;unit-tests&quot;&gt;модульных тестов&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3b79d5d78e14a8c4b0ba5bc3059259a23cad08b" translate="yes" xml:space="preserve">
          <source>Section 4: &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt;</source>
          <target state="translated">Раздел 4: &lt;a href=&quot;working-with-rules&quot;&gt;Работа с правилами&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="03c3cb69551b14b8df9cb910afaab136f027242f" translate="yes" xml:space="preserve">
          <source>Section 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Working with Plugins&lt;/a&gt;</source>
          <target state="translated">Раздел 5: &lt;a href=&quot;working-with-plugins&quot;&gt;Работа с плагинами&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b994bfa5badb9f811f171491ad2085ca2163162" translate="yes" xml:space="preserve">
          <source>Section 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Working with Custom Parsers&lt;/a&gt;</source>
          <target state="translated">Раздел 6: &lt;a href=&quot;working-with-custom-parsers&quot;&gt;Работа с пользовательскими парсерами&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7cef9b81d7487df40316eccfb3ac59bb6e5049a8" translate="yes" xml:space="preserve">
          <source>Section 7: &lt;a href=&quot;nodejs-api&quot;&gt;Node.js API&lt;/a&gt;</source>
          <target state="translated">Раздел 7. &lt;a href=&quot;nodejs-api&quot;&gt;API Node.js&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b89f1494eec98976470a195404c75143a7d87a8b" translate="yes" xml:space="preserve">
          <source>Section 8: &lt;a href=&quot;contributing/index&quot;&gt;Contributing&lt;/a&gt;</source>
          <target state="translated">Раздел 8: &lt;a href=&quot;contributing/index&quot;&gt;Содействие&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a36f58a29f1275ec5d968141f07cf060b746bc67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Specifying Processor&lt;/a&gt; for details.</source>
          <target state="translated">См. Подробности в разделе &amp;laquo; &lt;a href=&quot;../user-guide/configuring#specifying-processor&quot;&gt;Указание процессора&amp;raquo;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b6969594f8da02157a002f4a80fcf1d497e64bb" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-class-members&quot;&gt;no-dupe-class-members&lt;/a&gt; if you also want to disallow duplicate names in class definitions.</source>
          <target state="translated">См. &lt;a href=&quot;no-dupe-class-members&quot;&gt;No-dupe-class-members,&lt;/a&gt; если вы также хотите запретить повторяющиеся имена в определениях классов.</target>
        </trans-unit>
        <trans-unit id="b75b5956411bc41a59d15e137400fe418c3a0502" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;no-dupe-keys&quot;&gt;no-dupe-keys&lt;/a&gt; if you also want to disallow duplicate keys in object literals.</source>
          <target state="translated">См. &lt;a href=&quot;no-dupe-keys&quot;&gt;No-dupe-keys,&lt;/a&gt; если вы также хотите запретить дублирование ключей в объектных литералах.</target>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="translated">См.также:</target>
        </trans-unit>
        <trans-unit id="2601bab23f6d6b7f8c2a0b4d06f87b74ca15b5fc" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</source>
          <target state="translated">См. Также: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/constructor-super.js&quot;&gt;constructor-super&lt;/a&gt; , &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-this-before-super.js&quot;&gt;no-this-before-super&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1f2f2da9007ba35b167fb5fbeeeef552aaaf5204" translate="yes" xml:space="preserve">
          <source>See Also: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;no-unreachable&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;no-fallthrough&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;consistent-return&lt;/a&gt;</source>
          <target state="translated">См. Также: &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-unreachable.js&quot;&gt;недоступность&lt;/a&gt; , &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/no-fallthrough.js&quot;&gt;отсутствие провалов&lt;/a&gt; , &lt;a href=&quot;https://github.com/eslint/eslint/blob/master/lib/rules/consistent-return.js&quot;&gt;постоянный возврат&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5475994619c5659ff506420bcda0f2341a59e086" translate="yes" xml:space="preserve">
          <source>See all &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;formatters on npm&lt;/a&gt;;</source>
          <target state="translated">См. Все средства &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-formatter&quot;&gt;форматирования на npm&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="d711728163616d324e06d612e575de7b428f280d" translate="yes" xml:space="preserve">
          <source>See also: the &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;full diff&lt;/a&gt; where the defaults were changed.</source>
          <target state="translated">См. Также: &lt;a href=&quot;https://github.com/eslint/eslint/commit/e3e9dbd9876daf4bdeb4e15f8a76a9d5e6e03e39#diff-b01a5cfd9361ca9280a460fd6bb8edbbL1&quot;&gt;полную разницу, в&lt;/a&gt; которой были изменены значения по умолчанию.</target>
        </trans-unit>
        <trans-unit id="4df28d2cb8a74e0553a8b501f660f7fd482671ed" translate="yes" xml:space="preserve">
          <source>Selectors</source>
          <target state="translated">Selectors</target>
        </trans-unit>
        <trans-unit id="ba1dd4d24595765d36380d449f2f63da8783485e" translate="yes" xml:space="preserve">
          <source>Selectors are not limited to matching against single node types. For example, the selector &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; will match all &lt;code&gt;Identifier&lt;/code&gt; nodes that have a &lt;code&gt;VariableDeclarator&lt;/code&gt; as a direct parent. In the program above, this will match the node for &lt;code&gt;foo&lt;/code&gt;, but not the nodes for &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt;.</source>
          <target state="translated">Селекторы не ограничиваются сопоставлением с типами отдельных узлов. Например, селектор &lt;code&gt;VariableDeclarator &amp;gt; Identifier&lt;/code&gt; будет соответствовать всем узлам &lt;code&gt;Identifier&lt;/code&gt; , у которых &lt;code&gt;VariableDeclarator&lt;/code&gt; является прямым родительским элементом. В приведенной выше программе это будет соответствовать узлу для &lt;code&gt;foo&lt;/code&gt; , но не узлам для &lt;code&gt;bar&lt;/code&gt; и &lt;code&gt;baz&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="52a3f1908b1bbd91b0b9259682b062315f687ab1" translate="yes" xml:space="preserve">
          <source>Self assignments have no effect, so probably those are an error due to incomplete refactoring. Those indicate that what you should do is still remaining.</source>
          <target state="translated">Самоназначения не имеют эффекта,поэтому,вероятно,это ошибка из-за неполного рефакторинга.Это указывает на то,что то,что вы должны сделать,все еще остается.</target>
        </trans-unit>
        <trans-unit id="f7959cd9f43abd1103f282c5754afbee5224b16f" translate="yes" xml:space="preserve">
          <source>Semicolons are usually optional in JavaScript, because of automatic semicolon insertion (ASI). You can require or disallow semicolons with the &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; rule.</source>
          <target state="translated">Точка с запятой обычно не является обязательной в JavaScript из-за автоматической вставки точки с запятой (ASI). Вы можете требовать или запрещать использование точки с запятой с помощью правила &lt;a href=&quot;semi&quot;&gt;semi&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7ef827951df1f89ec5fb16c5c417655c418fa285" translate="yes" xml:space="preserve">
          <source>Sequence expressions (those using a comma, such as &lt;code&gt;a = 1, b = 2&lt;/code&gt;) are always considered unused unless their return value is assigned or used in a condition evaluation, or a function call is made with the sequence expression value.</source>
          <target state="translated">Выражения последовательности (те, которые используют запятую, например &lt;code&gt;a = 1, b = 2&lt;/code&gt; ) всегда считаются неиспользуемыми, если их возвращаемое значение не присвоено или не используется в оценке условия, или если вызов функции выполняется со значением выражения последовательности.</target>
        </trans-unit>
        <trans-unit id="a171fcac3dd876a9a68a177995635a2d7e821db8" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want those functions to be treated as 'regular' functions.</source>
          <target state="translated">Установите для &lt;code&gt;&quot;capIsConstructor&quot;&lt;/code&gt; значение &lt;code&gt;false&lt;/code&gt; , если вы хотите, чтобы эти функции обрабатывались как &amp;laquo;обычные&amp;raquo; функции.</target>
        </trans-unit>
        <trans-unit id="c0180f010e4da395331d6d54df6959189e9dae8b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;indexOf(NaN)&lt;/code&gt; and &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; method calls.</source>
          <target state="translated">Установите для &lt;code&gt;&quot;enforceForIndexOf&quot;&lt;/code&gt; значение &lt;code&gt;true&lt;/code&gt; , если вы хотите, чтобы это правило сообщало о &lt;code&gt;indexOf(NaN)&lt;/code&gt; и &lt;code&gt;lastIndexOf(NaN)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="618ceba957897722ae596312a10c551288948191" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to report &lt;code&gt;case NaN&lt;/code&gt; and &lt;code&gt;switch(NaN)&lt;/code&gt; in &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">Установите для параметра &lt;code&gt;&quot;enforceForSwitchCase&quot;&lt;/code&gt; значение &lt;code&gt;true&lt;/code&gt; , если вы хотите, чтобы это правило сообщало о &lt;code&gt;case NaN&lt;/code&gt; и &lt;code&gt;switch(NaN)&lt;/code&gt; в операторах &lt;code&gt;switch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa3491e34539a3ccbb31246fccfeafd612faa9f3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; if you want this rule to check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations as well.</source>
          <target state="translated">Установите для &lt;code&gt;&quot;lexicalBindings&quot;&lt;/code&gt; значение &lt;code&gt;true&lt;/code&gt; , если вы хотите, чтобы это правило также проверяло объявления &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; и &lt;code&gt;class&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="faf94416ab2a050dcb6bbfd98218d385084c3972" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowKeywords&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; (default is &lt;code&gt;true&lt;/code&gt;) to follow ECMAScript version 3 compatible style, avoiding dot notation for reserved word properties.</source>
          <target state="translated">Установите для параметра &lt;code&gt;allowKeywords&lt;/code&gt; значение &lt;code&gt;false&lt;/code&gt; (по умолчанию - &lt;code&gt;true&lt;/code&gt; ), чтобы следовать стилю, совместимому с ECMAScript версии 3, избегая точечной нотации для свойств зарезервированных слов.</target>
        </trans-unit>
        <trans-unit id="be2fe335d32f03aea39945e0531758a541f8d75d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;allowPattern&lt;/code&gt; option to a regular expression string to allow bracket notation for property names that match a pattern (by default, no pattern is tested).</source>
          <target state="translated">Установите для параметра &lt;code&gt;allowPattern&lt;/code&gt; значение строки регулярного выражения, чтобы разрешить использование скобок для имен свойств, соответствующих шаблону (по умолчанию шаблон не проверяется).</target>
        </trans-unit>
        <trans-unit id="1c81c3037407b2aa16474a63ef04fe8a38928ef4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the default &lt;code&gt;/^no default$/i&lt;/code&gt; comment test pattern</source>
          <target state="translated">Установите для параметра &lt;code&gt;commentPattern&lt;/code&gt; значение строки регулярного выражения, чтобы изменить шаблон проверки комментариев по умолчанию &lt;code&gt;/^no default$/i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0013f5c88955deac87e1686900438d34e9741c2d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;commentPattern&lt;/code&gt; option to a regular expression string to change the test for intentional fallthrough comment</source>
          <target state="translated">Установите для параметра &lt;code&gt;commentPattern&lt;/code&gt; значение строки регулярного выражения, чтобы изменить тест на преднамеренный выпадающий комментарий</target>
        </trans-unit>
        <trans-unit id="68ce687ddf0f134fff7cf81f9dc938e6b3878d8a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;int32Hint&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;) to allow write &lt;code&gt;a|0&lt;/code&gt; without space.</source>
          <target state="translated">Установите для параметра &lt;code&gt;int32Hint&lt;/code&gt; значение &lt;code&gt;true&lt;/code&gt; (по умолчанию - &lt;code&gt;false&lt;/code&gt; ), чтобы разрешить запись &lt;code&gt;a|0&lt;/code&gt; без пробела.</target>
        </trans-unit>
        <trans-unit id="3134ee2112bdc78853bd1511d97b31e6159ccb88" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; by default. Setting this option to &lt;code&gt;false&lt;/code&gt; allows constant expressions in loops.</source>
          <target state="translated">По умолчанию установлено значение &lt;code&gt;true&lt;/code&gt; . Установка для этого параметра значения &lt;code&gt;false&lt;/code&gt; разрешает постоянные выражения в циклах.</target>
        </trans-unit>
        <trans-unit id="70eda033c7f0c498a86724919e7320f305b80b0d" translate="yes" xml:space="preserve">
          <source>Set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt;.</source>
          <target state="translated">Настройте &lt;a href=&quot;../development-environment&quot;&gt;среду разработки&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f8322127967adf862ac72c512b139ae1854bca05" translate="yes" xml:space="preserve">
          <source>Setters cannot return values.</source>
          <target state="translated">Установщики не могут возвращать значения.</target>
        </trans-unit>
        <trans-unit id="c9c749d001ff268cbeb4ea4c24c216a86d9a6a4d" translate="yes" xml:space="preserve">
          <source>Setting parser options helps ESLint determine what is a parsing error. All language options are &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">Настройка параметров парсера помогает ESLint определить, что является ошибкой синтаксического анализа. По умолчанию все языковые параметры являются &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="37c53c1b3fac94914ae01b6fca4c4e53991f792a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;ignoreInlineComments&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; means that comments in the middle of code (with a token on the same line as the beginning of the comment, and another token on the same line as the end of the comment) will not be reported by this rule.</source>
          <target state="translated">Установка для параметра &lt;code&gt;ignoreInlineComments&lt;/code&gt; значения &lt;code&gt;true&lt;/code&gt; означает, что комментарии в середине кода (с токеном в той же строке, что и начало комментария, и другим токеном в той же строке, что и конец комментария) не будут сообщаться этим правилом ,</target>
        </trans-unit>
        <trans-unit id="2cb3483662622664036fa4200b1ad6fc9357335b" translate="yes" xml:space="preserve">
          <source>Several rules have been enhanced and now report additional errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b975340ecb92f51d1355c1bc6f74105b9ac0d69" translate="yes" xml:space="preserve">
          <source>Several rules have been updated to cover more cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a21f615bd35450d045383608de1e8b616f708b6" translate="yes" xml:space="preserve">
          <source>Shadowing is the process by which a local variable shares the same name as a variable in its containing scope. For example:</source>
          <target state="translated">Затенение-это процесс,при котором локальная переменная имеет то же имя,что и переменная в содержащей ее области видимости.Например:</target>
        </trans-unit>
        <trans-unit id="6bf3b29e45e3e5e600d18ebc1d069a9b49cb2211" translate="yes" xml:space="preserve">
          <source>Share Plugins</source>
          <target state="translated">Плагины акции</target>
        </trans-unit>
        <trans-unit id="d411f634d35296374dbb079a9b10699e721c60b8" translate="yes" xml:space="preserve">
          <source>Shareable Configs</source>
          <target state="translated">Настройки с возможностью совместного использования</target>
        </trans-unit>
        <trans-unit id="f7728f13ff64a72cf6ff58838bc2cf984afc2062" translate="yes" xml:space="preserve">
          <source>Shareable configs are designed to work with the &lt;code&gt;extends&lt;/code&gt; feature of &lt;code&gt;.eslintrc&lt;/code&gt; files. Instead of using a file path for the value of &lt;code&gt;extends&lt;/code&gt;, use your module name. For example:</source>
          <target state="translated">Совместные конфиги предназначены для работы с &lt;code&gt;extends&lt;/code&gt; особенность &lt;code&gt;.eslintrc&lt;/code&gt; файлов. Вместо использования пути к файлу для значения &lt;code&gt;extends&lt;/code&gt; используйте имя вашего модуля. Например:</target>
        </trans-unit>
        <trans-unit id="ac98661439154e24e66154b8b56ea65970febcd8" translate="yes" xml:space="preserve">
          <source>Shareable configs are simply npm packages that export a configuration object. To start, &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;create a Node.js module&lt;/a&gt; like you normally would. Make sure the module name begins with &lt;code&gt;eslint-config-&lt;/code&gt;, such as &lt;code&gt;eslint-config-myconfig&lt;/code&gt;.</source>
          <target state="translated">Совместно используемые конфигурации - это просто пакеты npm, которые экспортируют объект конфигурации. Для начала &lt;a href=&quot;https://docs.npmjs.com/getting-started/creating-node-modules&quot;&gt;создайте модуль Node.js,&lt;/a&gt; как обычно. Убедитесь, что имя модуля начинается с &lt;code&gt;eslint-config-&lt;/code&gt; , например &lt;code&gt;eslint-config-myconfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5de27ab2273537b3d6d14a587e6661a643b307d7" translate="yes" xml:space="preserve">
          <source>Sharing Multiple Configs</source>
          <target state="translated">Совместное использование нескольких конфигураций</target>
        </trans-unit>
        <trans-unit id="8fc88f1b91b2fde5e1092771afaef36f9a2e347a" translate="yes" xml:space="preserve">
          <source>Shebangs are now returned from comment APIs</source>
          <target state="translated">Шебангс теперь возвращается из API комментариев.</target>
        </trans-unit>
        <trans-unit id="7017708c1c06a3f1e90941c34316e9d4607c7d9c" translate="yes" xml:space="preserve">
          <source>Shebangs are represented by tokens of type &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt;. They are treated as comments and can be accessed by the methods outlined above.</source>
          <target state="translated">Шебанги представлены жетонами типа &lt;code&gt;&quot;Shebang&quot;&lt;/code&gt; . Они рассматриваются как комментарии, и к ним можно получить доступ описанными выше способами.</target>
        </trans-unit>
        <trans-unit id="23210f846566656bab3b173307947416d7f3ca0b" translate="yes" xml:space="preserve">
          <source>Sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;.</source>
          <target state="translated">Подпишите наше &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;лицензионное соглашение для участников&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2be01717d65543f816e780251a90121cfccc7576" translate="yes" xml:space="preserve">
          <source>Signing the CLA</source>
          <target state="translated">Подписание CLA</target>
        </trans-unit>
        <trans-unit id="0ec28340f6b30cc1ce90c43020055c994f7d5efb" translate="yes" xml:space="preserve">
          <source>Similar to the valid cases, you can also specify &lt;code&gt;options&lt;/code&gt; to be passed to the rule:</source>
          <target state="translated">Подобно допустимым случаям, вы также можете указать &lt;code&gt;options&lt;/code&gt; которые будут передаваться правилу:</target>
        </trans-unit>
        <trans-unit id="83f59937d173df040577971290f0e1cacd671a9c" translate="yes" xml:space="preserve">
          <source>Simple Statements</source>
          <target state="translated">Простые утверждения</target>
        </trans-unit>
        <trans-unit id="24da9670085c68ec6aa7a55a98200997a7091b66" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;context.options&lt;/code&gt; is just an array, you can use it to determine how many options have been passed as well as retrieving the actual options themselves. Keep in mind that the error level is not part of &lt;code&gt;context.options&lt;/code&gt;, as the error level cannot be known or modified from inside a rule.</source>
          <target state="translated">Поскольку &lt;code&gt;context.options&lt;/code&gt; - это просто массив, вы можете использовать его, чтобы определить, сколько параметров было передано, а также получить сами фактические параметры. Имейте в виду, что уровень ошибки не является частью &lt;code&gt;context.options&lt;/code&gt; , поскольку уровень ошибки нельзя узнать или изменить из правила.</target>
        </trans-unit>
        <trans-unit id="3dec31ada8554ba1a6a6debc16cb59773af96567" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;index.js&lt;/code&gt; is just JavaScript, you can optionally read these settings from a file or generate them dynamically.</source>
          <target state="translated">Поскольку &lt;code&gt;index.js&lt;/code&gt; - это просто JavaScript, вы можете при желании прочитать эти настройки из файла или сгенерировать их динамически.</target>
        </trans-unit>
        <trans-unit id="48bb4d613279d48459f21ef7090afc2c9bd1a5ba" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;require()&lt;/code&gt; does a synchronous load, it can cause performance problems when used in other locations.</source>
          <target state="translated">Поскольку &lt;code&gt;require()&lt;/code&gt; выполняет синхронную загрузку, это может вызвать проблемы с производительностью при использовании в других местах.</target>
        </trans-unit>
        <trans-unit id="9b146ffe6d582fd6188c56da94a8eb3d6c952c6f" translate="yes" xml:space="preserve">
          <source>Since ECMAScript 2021, these escape sequences are specified as &lt;a href=&quot;https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalEscapeSequence&quot;&gt;non-octal decimal escape sequences&lt;/a&gt;, retaining the same behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4072153bf32cdf523ee16f38e671d010ceab044" translate="yes" xml:space="preserve">
          <source>Since ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; has been equivalent to &lt;code&gt;ecmaVersion: 2018&lt;/code&gt;, and has also emitted a deprecation warning. In ESLint v6, the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; feature has been removed entirely and has no effect. If your config was relying on &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; to enable ES2018 parsing, you might start seeing parsing errors for recent syntax.</source>
          <target state="translated">Начиная с ESLint v5, &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; был эквивалентен &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; , а также выдавал предупреждение об устаревании. В ESLint v6 функция &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; была полностью удалена и не имеет никакого эффекта. Если ваша конфигурация полагалась на &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; для включения синтаксического анализа ES2018, вы могли бы начать видеть ошибки синтаксического анализа для недавнего синтаксиса.</target>
        </trans-unit>
        <trans-unit id="d13ae6387ed366be6d8b805801c5cfb3cfb9ad21" translate="yes" xml:space="preserve">
          <source>Since all rules are run again after the initial round of fixes is applied, it's not necessary for a rule to check whether the code style of a fix will cause errors to be reported by another rule.</source>
          <target state="translated">Так как все правила выполняются повторно после первого раунда исправления,нет необходимости проверять,не приведет ли стиль кода исправления к сообщению об ошибке другим правилом.</target>
        </trans-unit>
        <trans-unit id="18fb1e3007320b11f3d7fd9d833d2b32f18f24bd" translate="yes" xml:space="preserve">
          <source>Since deprecated rules will never be removed, you can continue to use them indefinitely if they are working for you. However, keep in mind that deprecated rules will effectively be unmaintained.</source>
          <target state="translated">Поскольку устаревшие правила никогда не будут удалены,вы можете продолжать использовать их бесконечно,если они работают на вас.Однако,имейте в виду,что устаревшие правила будут фактически не обслуживаться.</target>
        </trans-unit>
        <trans-unit id="0b45593d5f75200b1272e2e445af7ba7a6ca42cb" translate="yes" xml:space="preserve">
          <source>Since it's good to have a consistent code style, you should either always write padded blocks or never do it.</source>
          <target state="translated">Так как это хорошо иметь последовательный стиль кода,вы должны либо всегда писать блоки с подкладкой,либо никогда не делать этого.</target>
        </trans-unit>
        <trans-unit id="20e1b60daaa62f4d5667736af96bfb991b249553" translate="yes" xml:space="preserve">
          <source>Single-Line Comments</source>
          <target state="translated">Однострочные комментарии</target>
        </trans-unit>
        <trans-unit id="56f06f07d3754fea01009119715bfd5517b24da3" translate="yes" xml:space="preserve">
          <source>Single-line comments should be used to document one line of code or a group of related lines of code. A single-line comment may be used in three ways:</source>
          <target state="translated">Однострочные комментарии следует использовать для документирования одной строки кода или группы связанных строк кода.Однострочный комментарий может быть использован тремя способами:</target>
        </trans-unit>
        <trans-unit id="d5725de7b903a8b05de6ad0470647699fe07e580" translate="yes" xml:space="preserve">
          <source>Small - Runs ESLint on KnockoutJS</source>
          <target state="translated">Малый-работает ESLint на KnockoutJS</target>
        </trans-unit>
        <trans-unit id="8a314d2e7d6188c8847f81a281bc5f5ae16c1c06" translate="yes" xml:space="preserve">
          <source>Smart Tabs</source>
          <target state="translated">Интеллектуальные вкладки</target>
        </trans-unit>
        <trans-unit id="f4e452300a2b0f07b41745625016cd897fb85bfe" translate="yes" xml:space="preserve">
          <source>So running &lt;code&gt;eslint&lt;/code&gt; with this custom formatter:</source>
          <target state="translated">Итак, запускаем &lt;code&gt;eslint&lt;/code&gt; с этим настраиваемым форматером:</target>
        </trans-unit>
        <trans-unit id="65f774dd6ab39438c5f5df28e0b861b09e448b2d" translate="yes" xml:space="preserve">
          <source>So the second argument &lt;code&gt;ast&lt;/code&gt; also should be parsed from stripped text.</source>
          <target state="translated">Таким образом, второй аргумент &lt;code&gt;ast&lt;/code&gt; также должен быть извлечен из вырезанного текста.</target>
        </trans-unit>
        <trans-unit id="31a71f85cf4f793cf2a2e4f0097c3f2e95ba388a" translate="yes" xml:space="preserve">
          <source>Software Module size and file size</source>
          <target state="translated">Программное обеспечение Размер модуля и размер файла</target>
        </trans-unit>
        <trans-unit id="be134f7c50807cfb772cbc0bcb5081b5a12c45d8" translate="yes" xml:space="preserve">
          <source>Some code conventions require that all &lt;code&gt;switch&lt;/code&gt; statements have a &lt;code&gt;default&lt;/code&gt; case, even if the default case is empty, such as:</source>
          <target state="translated">Некоторые соглашения о коде требуют, чтобы все операторы &lt;code&gt;switch&lt;/code&gt; имели регистр по &lt;code&gt;default&lt;/code&gt; , даже если регистр по умолчанию пуст, например:</target>
        </trans-unit>
        <trans-unit id="c8b6c94f005c780b423c192df3948fbf6b0bc032" translate="yes" xml:space="preserve">
          <source>Some code styles prohibit &lt;code&gt;void&lt;/code&gt; operator, marking it as non-obvious and hard to read.</source>
          <target state="translated">Некоторые стили кода запрещают оператор &lt;code&gt;void&lt;/code&gt; , помечая его как неочевидный и трудный для чтения.</target>
        </trans-unit>
        <trans-unit id="5c5510f077de709ac2acb2de150530c1a834f95a" translate="yes" xml:space="preserve">
          <source>Some consider this to be a bad practice as it was an undocumented feature of JavaScript that was only formalized later.</source>
          <target state="translated">Некоторые считают это плохой практикой,так как это была недокументированная функция JavaScript,которая была формализована позже.</target>
        </trans-unit>
        <trans-unit id="5c13b92416e3720dc9efdcd598e2b13bb218f8f0" translate="yes" xml:space="preserve">
          <source>Some developers declare multiple var statements on the same line:</source>
          <target state="translated">Некоторые разработчики объявляют несколько вариаторов на одной строке:</target>
        </trans-unit>
        <trans-unit id="88fde2b94b3e6e7f06f28f5ca48809414c632781" translate="yes" xml:space="preserve">
          <source>Some developers find that placing operators at the beginning of the line makes the code more readable.</source>
          <target state="translated">Некоторые разработчики находят,что размещение операторов в начале строки делает код более читабельным.</target>
        </trans-unit>
        <trans-unit id="da83d59be8d3c1fa61746c9667b3e144b3b46f21" translate="yes" xml:space="preserve">
          <source>Some developers prefer to have multiple blank lines removed, while others feel that it helps improve readability. Whitespace is useful for separating logical sections of code, but excess whitespace takes up more of the screen.</source>
          <target state="translated">Некоторые разработчики предпочитают удалять несколько пустых строк,в то время как другие считают,что это помогает улучшить читабельность.Пробельные символы полезны для разделения логических разделов кода,но избыток пробельных символов занимает больше места на экране.</target>
        </trans-unit>
        <trans-unit id="319b3df86b7ba843599bf2b2dd9f3af029a3c402" translate="yes" xml:space="preserve">
          <source>Some exposed APIs are now ES2015 classes</source>
          <target state="translated">Некоторые открытые API теперь относятся к классам ES2015.</target>
        </trans-unit>
        <trans-unit id="70eec175aefc8c0ac35582826149396333b51a6a" translate="yes" xml:space="preserve">
          <source>Some global variables have been deprecated or removed for code running in Node.js, browsers, and Jest. (For example, browsers used to expose an &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; global variable to JavaScript code, but this global has been removed from web standards and is no longer present in browsers.) As a result, we have removed these globals from the corresponding &lt;code&gt;eslint&lt;/code&gt; environments, so use of these globals will trigger an error when using rules such as &lt;a href=&quot;../rules/no-undef&quot;&gt;&lt;code&gt;no-undef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Некоторые глобальные переменные объявлены устаревшими или удалены для кода, работающего в Node.js, браузерах и Jest. (Например, браузеры, используемые для предоставления глобальной переменной &lt;code&gt;SVGAltGlyphElement&lt;/code&gt; коду JavaScript, но эта глобальная переменная была удалена из веб-стандартов и больше не присутствует в браузерах.) В результате мы удалили эти глобальные переменные из соответствующих сред &lt;code&gt;eslint&lt;/code&gt; , поэтому использование этих глобальных переменных вызовет ошибку при использовании таких правил, как &lt;a href=&quot;../rules/no-undef&quot;&gt; &lt;code&gt;no-undef&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f062f278fdeadb9e299ef656855a628748c5bb85" translate="yes" xml:space="preserve">
          <source>Some imports might not make sense in a particular environment. For example, Node.js' &lt;code&gt;fs&lt;/code&gt; module would not make sense in an environment that didn't have a file system.</source>
          <target state="translated">Некоторый импорт может не иметь смысла в определенной среде. Например, модуль &lt;code&gt;fs&lt;/code&gt; в Node.js не имел бы смысла в среде, не имеющей файловой системы.</target>
        </trans-unit>
        <trans-unit id="8a1845bade3c1e32522c230c7fd34c3040711d50" translate="yes" xml:space="preserve">
          <source>Some issues have had monetary rewards attached to them. Those are labeled &lt;code&gt;bounty&lt;/code&gt;. Bounties are assigned via &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt;.</source>
          <target state="translated">Некоторые выпуски были связаны с денежным вознаграждением. Они помечены как &lt;code&gt;bounty&lt;/code&gt; . Баунти назначаются через &lt;a href=&quot;https://www.bountysource.com/teams/eslint/issues&quot;&gt;BountySource&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="cc97f15ec33a8fb0d8f181362b5bbc40bdbb948d" translate="yes" xml:space="preserve">
          <source>Some modules provide similar or identical functionality, think &lt;code&gt;lodash&lt;/code&gt; and &lt;code&gt;underscore&lt;/code&gt;. Your project may have standardized on a module. You want to make sure that the other alternatives are not being used as this would unnecessarily bloat the project and provide a higher maintenance cost of two dependencies when one would suffice.</source>
          <target state="translated">Некоторые модули предоставляют аналогичные или идентичные функции, например &lt;code&gt;lodash&lt;/code&gt; и &lt;code&gt;underscore&lt;/code&gt; . Ваш проект мог быть стандартизирован на модуле. Вы хотите убедиться, что другие альтернативы не используются, поскольку это приведет к излишнему раздуванию проекта и приведет к более высоким затратам на обслуживание двух зависимостей, когда будет достаточно одной.</target>
        </trans-unit>
        <trans-unit id="264939a2d43fd66c197012a9cf9648b42c36337b" translate="yes" xml:space="preserve">
          <source>Some modules return a constructor which can potentially lead to code such as:</source>
          <target state="translated">Некоторые модули возвращают конструктор,который потенциально может привести к такому коду как:</target>
        </trans-unit>
        <trans-unit id="29ba1427e8c92e96a16255e3f6eb4ecbfabc34f6" translate="yes" xml:space="preserve">
          <source>Some people consider large files a code smell. Large files tend to do a lot of things and can make it hard following what's going. While there is not an objective maximum number of lines considered acceptable in a file, most people would agree it should not be in the thousands. Recommendations usually range from 100 to 500 lines.</source>
          <target state="translated">Некоторые люди считают большие файлы запахом кода.Большие файлы,как правило,много чего делают и могут затруднить отслеживание того,что происходит.Хотя не существует объективного максимального количества строк,считающихся приемлемыми в файле,большинство людей согласятся с тем,что их не должно быть в тысячах.Рекомендации обычно варьируются от 100 до 500 строк.</target>
        </trans-unit>
        <trans-unit id="a357eb75979b31ab9472de29b249e979f6b6b141" translate="yes" xml:space="preserve">
          <source>Some people consider large functions a code smell. Large functions tend to do a lot of things and can make it hard following what's going on. Many coding style guides dictate a limit of the number of lines that a function can comprise of. This rule can help enforce that style.</source>
          <target state="translated">Некоторые считают большие функции запахом кода.Большие функции,как правило,много чего делают и могут затруднить отслеживание происходящего.Многие руководства по стилю кодирования диктуют ограничение на количество строк,из которых может состоять функция.Это правило может помочь в применении этого стиля.</target>
        </trans-unit>
        <trans-unit id="b516222d790d0bfe6d8641c249e0071402e077c0" translate="yes" xml:space="preserve">
          <source>Some rules and APIs allow the use of selectors to query an AST. This page is intended to:</source>
          <target state="translated">Некоторые правила и API позволяют использовать селекторы для запроса AST.Эта страница предназначена для:</target>
        </trans-unit>
        <trans-unit id="d46d7f40436527e02e15f42c4b8e72f68eaadfc8" translate="yes" xml:space="preserve">
          <source>Some rules require options in order to function correctly. These options appear in configuration (&lt;code&gt;.eslintrc&lt;/code&gt;, command line, or in comments). For example:</source>
          <target state="translated">Некоторым правилам для правильной работы требуются параметры. Эти параметры отображаются в конфигурации ( &lt;code&gt;.eslintrc&lt;/code&gt; , в командной строке или в комментариях). Например:</target>
        </trans-unit>
        <trans-unit id="00275b3b345f6b9172064ad3c4803175ae258c34" translate="yes" xml:space="preserve">
          <source>Some style guides disallow comments on the same line as code. Code can become difficult to read if comments immediately follow the code on the same line. On the other hand, it is sometimes faster and more obvious to put comments immediately following code.</source>
          <target state="translated">Некоторые руководства по стилю запрещают комментировать одну и ту же строку с кодом.Код может стать трудночитаемым,если комментарии сразу же следуют за кодом в той же строке.С другой стороны,иногда бывает быстрее и очевиднее ставить комментарии сразу после кода.</target>
        </trans-unit>
        <trans-unit id="1849aab38ed123bdc6d7b029034a46313136fc00" translate="yes" xml:space="preserve">
          <source>Some style guides don't allow the use of tab characters at all, including within comments.</source>
          <target state="translated">Некоторые руководства по стилю вообще не разрешают использовать символы табуляции,в том числе в комментариях.</target>
        </trans-unit>
        <trans-unit id="2244458667f3ce520967956eda4ce510fbeed0c1" translate="yes" xml:space="preserve">
          <source>Some style guides may require a consistent spacing for function names.</source>
          <target state="translated">В некоторых руководствах по стилю может потребоваться последовательный интервал между именами функций.</target>
        </trans-unit>
        <trans-unit id="030befb9cb1b6a4b5dacb92a3f92d4b8ba5e2c62" translate="yes" xml:space="preserve">
          <source>Some style guides require JSDoc comments for all functions as a way of explaining function behavior.</source>
          <target state="translated">Некоторые руководства по стилю требуют комментариев JSDoc для всех функций как способа объяснения поведения функций.</target>
        </trans-unit>
        <trans-unit id="dc237e4772e0207c27c1e378f2525052a1ff94c6" translate="yes" xml:space="preserve">
          <source>Some style guides require block statements to start and end with blank lines. The goal is to improve readability by visually separating the block content and the surrounding code.</source>
          <target state="translated">Некоторые руководства по стилю требуют,чтобы блочные утверждения начинались и заканчивались пустыми строками.Целью является улучшение читабельности за счет визуального разделения содержимого блока и окружающего кода.</target>
        </trans-unit>
        <trans-unit id="201550e6abc7ddd420de4b881ba83ce28f29f0b9" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; of a line comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">Некоторые руководства по стилю требуют или запрещают использование пробелов сразу после начального &lt;code&gt;//&lt;/code&gt; строчного комментария. Пробел после &lt;code&gt;//&lt;/code&gt; упрощает чтение текста в комментариях. С другой стороны, комментировать код проще без необходимости ставить пробел сразу после &lt;code&gt;//&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1c5fdd2ea4191bb42ab7f9fca487d91da02843c" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow a whitespace immediately after the initial &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; of a comment. Whitespace after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; makes it easier to read text in comments. On the other hand, commenting out code is easier without having to put a whitespace right after the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;.</source>
          <target state="translated">Некоторые руководства по стилю требуют или запрещают использование пробелов сразу после начального &lt;code&gt;//&lt;/code&gt; или &lt;code&gt;/*&lt;/code&gt; комментария. Пробелы после &lt;code&gt;//&lt;/code&gt; или &lt;code&gt;/*&lt;/code&gt; упрощают чтение текста в комментариях. С другой стороны, комментировать код проще без необходимости ставить пробел сразу после &lt;code&gt;//&lt;/code&gt; или &lt;code&gt;/*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9568a858ccab377c3f347cbea8a8037f371d4712" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces before or after unary operators. This is mainly a stylistic issue, however, some JavaScript expressions can be written without spacing which makes it harder to read and maintain.</source>
          <target state="translated">Некоторые руководства по стилю требуют или запрещают использовать пробелы до или после операторов,работающих без оператора.В основном это стилистическая проблема,однако,некоторые выражения JavaScript могут быть написаны без пробелов,что затрудняет чтение и поддержку.</target>
        </trans-unit>
        <trans-unit id="1cd1de3034a3fc730da0bea8dd9b8d360a4330f4" translate="yes" xml:space="preserve">
          <source>Some style guides require or disallow spaces inside of parentheses:</source>
          <target state="translated">Некоторые руководства по стилю требуют или запрещают пространство внутри скобок:</target>
        </trans-unit>
        <trans-unit id="c3070c75d033320e5f7ebe414b6237a3ba652bf4" translate="yes" xml:space="preserve">
          <source>Some style guides will require or disallow spaces following the certain keywords.</source>
          <target state="translated">Некоторые руководства по стилю требуют или запрещают пробелы после определенных ключевых слов.</target>
        </trans-unit>
        <trans-unit id="c4be317e60f6aa965f4ab059cd2ad659412f195d" translate="yes" xml:space="preserve">
          <source>Some tests require that a certain parser configuration must be used. This can be specified in test specifications via the &lt;code&gt;parserOptions&lt;/code&gt; setting.</source>
          <target state="translated">Некоторые тесты требуют использования определенной конфигурации парсера. Это можно указать в спецификациях теста с помощью параметра &lt;code&gt;parserOptions&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="838af6a85f479a1fedfe1a6da00a3f1b6a2a4200" translate="yes" xml:space="preserve">
          <source>Sometimes (especially in big projects) the name of the error variable is not consistent across the project, so you need a more flexible configuration to ensure that the rule reports all unhandled errors.</source>
          <target state="translated">Иногда (особенно в больших проектах)имя переменной error не совпадает в проекте,поэтому нужна более гибкая конфигурация,чтобы правило сообщало обо всех необработанных ошибках.</target>
        </trans-unit>
        <trans-unit id="50c696bd306a1b3a43860828cc49620093926e56" translate="yes" xml:space="preserve">
          <source>Sometimes during the course of code maintenance, the &lt;code&gt;this&lt;/code&gt; value is removed from the function body. In that case, you can end up with a call to &lt;code&gt;bind()&lt;/code&gt; that doesn't accomplish anything:</source>
          <target state="translated">Иногда в процессе обслуживания кода значение &lt;code&gt;this&lt;/code&gt; удаляется из тела функции. В этом случае вы можете получить вызов &lt;code&gt;bind()&lt;/code&gt; который ничего не дает:</target>
        </trans-unit>
        <trans-unit id="e1239a4ef3312baebd03a9fadd3dc1da7a196cfc" translate="yes" xml:space="preserve">
          <source>Sometimes in the course of editing files, you can end up with extra whitespace at the end of lines. These whitespace differences can be picked up by source control systems and flagged as diffs, causing frustration for developers. While this extra whitespace causes no functional issues, many code conventions require that trailing spaces be removed before check-in.</source>
          <target state="translated">Иногда в процессе редактирования файлов,вы можете получить дополнительные пробелы в конце строк.Эти различия в пробелах могут быть подобраны системами управления исходными текстами и помечены как различия,вызывая разочарование разработчиков.Хотя эти дополнительные пробелы не вызывают функциональных проблем,многие соглашения по коду требуют,чтобы пробелы в конце строк были удалены перед регистрацией.</target>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="translated">Исходный код</target>
        </trans-unit>
        <trans-unit id="f13b901ad76229dac734487a39808cdde93abfe1" translate="yes" xml:space="preserve">
          <source>Source Control</source>
          <target state="translated">Контроль источников</target>
        </trans-unit>
        <trans-unit id="d7f23e409b1f9d227333564c23108a422010e901" translate="yes" xml:space="preserve">
          <source>SourceCode</source>
          <target state="translated">SourceCode</target>
        </trans-unit>
        <trans-unit id="bce4c495898f1faddcaa7c35b37ab4481ede3b00" translate="yes" xml:space="preserve">
          <source>SourceCode constructor (Node API) changes</source>
          <target state="translated">Изменения конструктора SourceCode (Node API)</target>
        </trans-unit>
        <trans-unit id="4295a0eca57863562626d681cbe158963892a6fd" translate="yes" xml:space="preserve">
          <source>SourceCode#splitLines()</source>
          <target state="translated">SourceCode#splitLines()</target>
        </trans-unit>
        <trans-unit id="db40a182aaf7dc66373c8652a068c39e88c92f7e" translate="yes" xml:space="preserve">
          <source>Space issues can also cause code to look inconsistent and harder to read.</source>
          <target state="translated">Проблемы с пространством также могут привести к тому,что код будет выглядеть непоследовательно и сложнее для чтения.</target>
        </trans-unit>
        <trans-unit id="9b903a63fa074533e05ee538bb400f7ae7d25ae0" translate="yes" xml:space="preserve">
          <source>Spacing around colons improves readability of &lt;code&gt;case&lt;/code&gt;/&lt;code&gt;default&lt;/code&gt; clauses.</source>
          <target state="translated">Интервал между двоеточиями улучшает читаемость предложений &lt;code&gt;case&lt;/code&gt; / &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bee60614d09a5dc287b728aa03f9ca804bb2765e" translate="yes" xml:space="preserve">
          <source>Spacing around commas improves readability of a list of items. Although most of the style guidelines for languages prescribe adding a space after a comma and not before it, it is subjective to the preferences of a project.</source>
          <target state="translated">Расстояние между запятыми улучшает читабельность списка пунктов.Хотя большинство стилевых рекомендаций для языков предписывают добавлять пробел после запятой,а не перед ней,это субъективно по отношению к предпочтениям проекта.</target>
        </trans-unit>
        <trans-unit id="85517ae7d9ab81a8dc4d785d38d52af351849a64" translate="yes" xml:space="preserve">
          <source>Sparse arrays contain empty slots, most frequently due to multiple commas being used in an array literal, such as:</source>
          <target state="translated">Разделенные массивы содержат пустые слоты,чаще всего из-за того,что в буквальном массиве используется несколько запятых,например:</target>
        </trans-unit>
        <trans-unit id="0b7e749be12e1d4e6f29f80172dc19cac2d01996" translate="yes" xml:space="preserve">
          <source>Specifying Environments</source>
          <target state="translated">Окружающие среды</target>
        </trans-unit>
        <trans-unit id="056af97903e3dc6e6f43b88d96ae94278918b7f2" translate="yes" xml:space="preserve">
          <source>Specifying File extensions to Lint</source>
          <target state="translated">Указание расширений файла для Lint</target>
        </trans-unit>
        <trans-unit id="42e1afab26529373a5755f37ed73c9992e7a1f27" translate="yes" xml:space="preserve">
          <source>Specifying Globals</source>
          <target state="translated">Определение Шаров</target>
        </trans-unit>
        <trans-unit id="615655edaa8435cea59ad96bf63fd800fe901df4" translate="yes" xml:space="preserve">
          <source>Specifying Parser</source>
          <target state="translated">Указание парсера</target>
        </trans-unit>
        <trans-unit id="3fdf1ff8c15b6bfb3e42d6729c40289a364a0934" translate="yes" xml:space="preserve">
          <source>Specifying Parser Options</source>
          <target state="translated">Указание параметров парсера</target>
        </trans-unit>
        <trans-unit id="a5dba7920ee9d85457d6a302a8028c1f41b8cc64" translate="yes" xml:space="preserve">
          <source>Specifying Processor</source>
          <target state="translated">Указание процессора</target>
        </trans-unit>
        <trans-unit id="ec5cdef761600831584f51b13c5e7e1af51231d0" translate="yes" xml:space="preserve">
          <source>Specifying Processor in Config Files</source>
          <target state="translated">Указание процессора в конфигурационных файлах</target>
        </trans-unit>
        <trans-unit id="dd101a9b3761464c88a971471d60c8157de97419" translate="yes" xml:space="preserve">
          <source>Specifying Target Files to Lint</source>
          <target state="translated">Указание целевых файлов в Линт</target>
        </trans-unit>
        <trans-unit id="fd3a805a25d509c02dbba7487be2139a847549f5" translate="yes" xml:space="preserve">
          <source>Specifying rules and plugins</source>
          <target state="translated">Указание правил и плагинов</target>
        </trans-unit>
        <trans-unit id="96c2be7c78e35ecedf2f6d32e197f0983c7d3765" translate="yes" xml:space="preserve">
          <source>Start Developing</source>
          <target state="translated">Начать развитие</target>
        </trans-unit>
        <trans-unit id="d5ebef5b5d844222a804e3497fcaed1e87e4a705" translate="yes" xml:space="preserve">
          <source>Start: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@start/plugin-lib-eslint&lt;/a&gt;</source>
          <target state="translated">Начало: &lt;a href=&quot;https://www.npmjs.com/package/@start/plugin-lib-eslint&quot;&gt;@ start / plugin-lib-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="67086f02eed6ec69807b5ddb9e07150ee0b0c38d" translate="yes" xml:space="preserve">
          <source>Starting Work</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="91b0ca4a9a5191f5469dcbd23531b6ea8254d67c" translate="yes" xml:space="preserve">
          <source>Starting in 3.1.0, rules have been able to specify the &lt;em&gt;end&lt;/em&gt; location of a reported problem, in addition to the start location, by explicitly specifying an end location in the &lt;code&gt;report&lt;/code&gt; call. This is useful for tools like editor integrations, which can use the range to precisely display where a reported problem occurs. Starting in 4.0, if a &lt;em&gt;node&lt;/em&gt; is reported rather than a location, the end location of the range will automatically be inferred from the end location of the node. As a result, many more reported problems will have end locations.</source>
          <target state="translated">Начиная с версии 3.1.0, правила могут указывать &lt;em&gt;конечное&lt;/em&gt; местоположение проблемы, о которой сообщается, в дополнение к начальному местоположению путем явного указания конечного местоположения в вызове &lt;code&gt;report&lt;/code&gt; . Это полезно для таких инструментов, как интеграция редакторов, которые могут использовать диапазон, чтобы точно отображать, где возникает проблема, о которой сообщается. Начиная с версии 4.0, если сообщается об &lt;em&gt;узле,&lt;/em&gt; а не о местоположении, конечное местоположение диапазона будет автоматически выведено из конечного местоположения узла. В результате многие другие проблемы, о которых сообщалось, будут иметь конечные местоположения.</target>
        </trans-unit>
        <trans-unit id="5f2ecf2f7eb4335fbd187d0845b33268b44df84a" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComments&lt;/code&gt; events will not be emitted during AST traversal. There are two reasons for this:</source>
          <target state="translated">Начиная с &lt;code&gt;LineComment&lt;/code&gt; 4.0, события LineComment и &lt;code&gt;BlockComments&lt;/code&gt; не будут генерироваться во время обхода AST. На это есть две причины:</target>
        </trans-unit>
        <trans-unit id="4a9fefe6ba1eb3abeeec5967b3b58b648a035245" translate="yes" xml:space="preserve">
          <source>Starting in 4.0, the &lt;code&gt;RuleTester&lt;/code&gt; utility will validate properties of test case objects, and an error will be thrown if an unknown property is encountered. This change was added because we found that it was relatively common for developers to make typos in rule tests, often invalidating the assertions that the test cases were trying to make.</source>
          <target state="translated">Начиная с &lt;code&gt;RuleTester&lt;/code&gt; 4.0, утилита RuleTester будет проверять свойства объектов тестового примера, и при обнаружении неизвестного свойства будет выдана ошибка. Это изменение было добавлено, потому что мы обнаружили, что разработчики довольно часто допускают опечатки в тестах правил, часто делая недействительными утверждения, которые тестовые примеры пытались сделать.</target>
        </trans-unit>
        <trans-unit id="5836540c848187e8316d3af4bef63d2382012f09" translate="yes" xml:space="preserve">
          <source>Starting in ESLint v7.0.0, &lt;code&gt;plugins&lt;/code&gt; are resolved relative to the directory path of the &lt;em&gt;entry&lt;/em&gt; configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04d68fcfe6276090301ad5e7e04bbd6aa6916dc" translate="yes" xml:space="preserve">
          <source>Starting in ESLint v7.0.0, configuration files and ignore files passed to ESLint using the &lt;code&gt;--config path/to/a-config&lt;/code&gt; and &lt;code&gt;--ignore-path path/to/a-ignore&lt;/code&gt; CLI flags, respectively, will resolve from the current working directory rather than the file location. This allows for users to utilize shared plugins without having to install them directly in their project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="6a5813201a4580fe5f1fbb25f1a522d4d505bf2d" translate="yes" xml:space="preserve">
          <source>Static Methods</source>
          <target state="translated">Статические методы</target>
        </trans-unit>
        <trans-unit id="a7493a3592ca8e6e6a83cb0baa71e9ef4d283b40" translate="yes" xml:space="preserve">
          <source>Static code path analysis, in general, does not evaluate conditions. Due to this fact, this rule might miss reporting cases such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633c64990d0fd3fb0088750ad9faa31590a9c3f0" translate="yes" xml:space="preserve">
          <source>Step 1: Create a new branch</source>
          <target state="translated">Шаг 1:Создание нового филиала</target>
        </trans-unit>
        <trans-unit id="c743a1387584019a5b9e49c171021066a9274bbd" translate="yes" xml:space="preserve">
          <source>Step 1: Install Node.js</source>
          <target state="translated">Шаг 1:Установка узла.js</target>
        </trans-unit>
        <trans-unit id="ebb615d0e8fbd3bc64c658bdeea517e1be8a7501" translate="yes" xml:space="preserve">
          <source>Step 2: Fork and checkout your own ESLint repository</source>
          <target state="translated">Шаг 2:Вилка и проверка вашего собственного репозитория ESLint.</target>
        </trans-unit>
        <trans-unit id="4b277bac8f09c41a896b5778dc93caf8cea1b8d1" translate="yes" xml:space="preserve">
          <source>Step 2: Make your changes</source>
          <target state="translated">Шаг 2:Сделайте ваши изменения</target>
        </trans-unit>
        <trans-unit id="162e5376e301468cf0fb8feee5902817e041ced1" translate="yes" xml:space="preserve">
          <source>Step 3: Add the upstream source</source>
          <target state="translated">Шаг 3:Добавить источник восходящего потока</target>
        </trans-unit>
        <trans-unit id="c69e88aa3310028acfe11e07da987e642ed7401d" translate="yes" xml:space="preserve">
          <source>Step 3: Rebase onto upstream</source>
          <target state="translated">Шаг 3:Перезагрузка на восходящий поток</target>
        </trans-unit>
        <trans-unit id="11d3053005d884cc0baea0d55f626ee5d58a2a6e" translate="yes" xml:space="preserve">
          <source>Step 4: Install the Yeoman Generator</source>
          <target state="translated">Шаг 4:Установка йоменского генератора</target>
        </trans-unit>
        <trans-unit id="d2be3c72779cd587be34e70421fd2467e7894ea1" translate="yes" xml:space="preserve">
          <source>Step 4: Run the tests</source>
          <target state="translated">Шаг 4:Запустите тесты</target>
        </trans-unit>
        <trans-unit id="e9fd76aa2302af763cd9bb123a722b970152c5fc" translate="yes" xml:space="preserve">
          <source>Step 5: Double check your submission</source>
          <target state="translated">Шаг 5:Дважды проверьте вашу заявку</target>
        </trans-unit>
        <trans-unit id="1c864ce6457173a3a941ae978f55091a735f72c1" translate="yes" xml:space="preserve">
          <source>Step 5: Run the tests</source>
          <target state="translated">Шаг 5:Запустите тесты</target>
        </trans-unit>
        <trans-unit id="b96518c7b052df6c7c228843ed78292c66a91d9a" translate="yes" xml:space="preserve">
          <source>Step 6: Push your changes</source>
          <target state="translated">Шаг 6:Надавите на свои изменения</target>
        </trans-unit>
        <trans-unit id="baa82a802e0780c46eb5d8b0c851c905af055f75" translate="yes" xml:space="preserve">
          <source>Step 7: Send the pull request</source>
          <target state="translated">Шаг 7:Отправьте запрос на вытаскивание</target>
        </trans-unit>
        <trans-unit id="f1823ff4064066ec41c29ab620ef5de461f12793" translate="yes" xml:space="preserve">
          <source>Store the info about processed files in order to only operate on the changed ones. The cache is stored in &lt;code&gt;.eslintcache&lt;/code&gt; by default. Enabling this option can dramatically improve ESLint's running time by ensuring that only changed files are linted.</source>
          <target state="translated">Сохраняйте информацию об обработанных файлах, чтобы работать только с измененными. По умолчанию кеш хранится в &lt;code&gt;.eslintcache&lt;/code&gt; . Включение этой опции может значительно улучшить время работы ESLint, гарантируя, что только измененные файлы будут линтингом.</target>
        </trans-unit>
        <trans-unit id="040fdcc5343129a76b072a4ce16081703504850c" translate="yes" xml:space="preserve">
          <source>Storing Node.js application config data - Ben Hall's blog</source>
          <target state="translated">Хранение данных конфигурации приложения Node.js-блог Бена Холла</target>
        </trans-unit>
        <trans-unit id="7c183131363f4251f89993f5090afc10d8f0caad" translate="yes" xml:space="preserve">
          <source>Strict Mode</source>
          <target state="translated">Строгий режим</target>
        </trans-unit>
        <trans-unit id="10944d62374d1d35c0aa7618089752217945a8f3" translate="yes" xml:space="preserve">
          <source>Strict mode is enabled by using the following pragma in your code:</source>
          <target state="translated">Строгий режим включается с помощью следующей прагмы в вашем коде:</target>
        </trans-unit>
        <trans-unit id="4c2e19e5bce9b19bbc0b58f76bc3e3dfe6a9b44a" translate="yes" xml:space="preserve">
          <source>Strict mode should be used in all modules, specified below the file overview comment and above everything else:</source>
          <target state="translated">Строгий режим должен использоваться во всех модулях,указанных ниже обзорного комментария к файлу и,прежде всего,во всех остальных:</target>
        </trans-unit>
        <trans-unit id="3c519ccf5be0c1f36a3bbdf75106a4c822cfcb9f" translate="yes" xml:space="preserve">
          <source>String option:</source>
          <target state="translated">Опция &quot;строка&quot;:</target>
        </trans-unit>
        <trans-unit id="7c0095620910afa8aafa46572a5f1abcd3e6d132" translate="yes" xml:space="preserve">
          <source>String options are:</source>
          <target state="translated">Варианты со струнами:</target>
        </trans-unit>
        <trans-unit id="219423ce2478de8f7bc615787c69eeec3ac8cfbb" translate="yes" xml:space="preserve">
          <source>Strings should always use double quotes (never single quotes) and should always appear on a single line. Never use a slash to create a new line in a string.</source>
          <target state="translated">Строки должны всегда использовать двойные кавычки (никогда не одиночные)и всегда должны появляться на одной строке.Никогда не используйте слеш для создания новой строки в строке.</target>
        </trans-unit>
        <trans-unit id="2bd1e348298a2cd13100d6cde33eeacf35aa2449" translate="yes" xml:space="preserve">
          <source>Style guides may require a space after the &lt;code&gt;function&lt;/code&gt; keyword for anonymous functions, while others specify no whitespace. Similarly, the space after a function name may or may not be required.</source>
          <target state="translated">Руководства по стилям могут потребовать пробел после ключевого слова &lt;code&gt;function&lt;/code&gt; для анонимных функций, в то время как другие не указывают пробелов. Точно так же пробел после имени функции может потребоваться, а может и не потребоваться.</target>
        </trans-unit>
        <trans-unit id="d2602aec88a266da02fb6e6a39ad0ff098e617d0" translate="yes" xml:space="preserve">
          <source>Stylistic Issues</source>
          <target state="translated">Проблемы стилистики</target>
        </trans-unit>
        <trans-unit id="ff5943f72b414aaa4a17049e5bbb2634c96a77ee" translate="yes" xml:space="preserve">
          <source>Sublime Text 3:</source>
          <target state="translated">Великолепный Текст 3:</target>
        </trans-unit>
        <trans-unit id="030c1749f522d7238c0443341747221266a4ca54" translate="yes" xml:space="preserve">
          <source>SublimeLinter-eslint</source>
          <target state="translated">SublimeLinter-eslint</target>
        </trans-unit>
        <trans-unit id="6ecdca9060c4831fb381d364edb6e63d253d9af3" translate="yes" xml:space="preserve">
          <source>Submit the pull request</source>
          <target state="translated">Отправьте запрос на подтягивание</target>
        </trans-unit>
        <trans-unit id="583b503cc37a3a03e3fd4c13e083b2095261ea25" translate="yes" xml:space="preserve">
          <source>Submitting a &lt;a href=&quot;pull-requests&quot;&gt;Pull Request&lt;/a&gt;</source>
          <target state="translated">Отправка &lt;a href=&quot;pull-requests&quot;&gt;запроса&lt;/a&gt; на извлечение</target>
        </trans-unit>
        <trans-unit id="0198b462f882ff4a84867d9897d73f6245ad627e" translate="yes" xml:space="preserve">
          <source>Such as:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="3374f6918890228b021e90be8c3993cedad5f95b" translate="yes" xml:space="preserve">
          <source>Suggest using &lt;code&gt;const&lt;/code&gt; (prefer-const)</source>
          <target state="translated">Предложите использовать &lt;code&gt;const&lt;/code&gt; (предпочитают-const)</target>
        </trans-unit>
        <trans-unit id="d7fda7e48105f11ea112f4b9190ecb9e41f8c30a" translate="yes" xml:space="preserve">
          <source>Suggest using Reflect methods where applicable (prefer-reflect)</source>
          <target state="translated">Предложить использовать методы отражения там,где это применимо (предпочтительно-отражение).</target>
        </trans-unit>
        <trans-unit id="73a842e9ea440efda64fd80635a0d7967bf45ec9" translate="yes" xml:space="preserve">
          <source>Suggest using named capture group in regular expression (prefer-named-capture-group)</source>
          <target state="translated">Предложить использовать именованную группу захвата в регулярном выражении (предпочтительнее именованную группу захвата)</target>
        </trans-unit>
        <trans-unit id="28675d097f0b67789bcf9a4622cdbd9ec701d7ad" translate="yes" xml:space="preserve">
          <source>Suggest using spread syntax instead of &lt;code&gt;.apply()&lt;/code&gt;. (prefer-spread)</source>
          <target state="translated">Предложите использовать синтаксис распространения вместо &lt;code&gt;.apply()&lt;/code&gt; . (предпочтение-распространению)</target>
        </trans-unit>
        <trans-unit id="3ff97015207b9f4a9f111ed9aa1e794add36b5bd" translate="yes" xml:space="preserve">
          <source>Suggest using template literals instead of string concatenation. (prefer-template)</source>
          <target state="translated">Предложить использовать шаблонные литералы вместо конкатенирования строк.(предпочитаемый шаблон)</target>
        </trans-unit>
        <trans-unit id="73db0ab9a4b1b8fe9efa5f9e4facb96f6382eb3d" translate="yes" xml:space="preserve">
          <source>Suggest using the rest parameters instead of &lt;code&gt;arguments&lt;/code&gt; (prefer-rest-params)</source>
          <target state="translated">Предложите использовать остальные параметры вместо &lt;code&gt;arguments&lt;/code&gt; (Preferred-rest-Params)</target>
        </trans-unit>
        <trans-unit id="2eb3a8ff27b81cae5e0a8c513b02aac9cbb867f5" translate="yes" xml:space="preserve">
          <source>Suggestion &lt;code&gt;messageId&lt;/code&gt;s</source>
          <target state="translated">Предложение &lt;code&gt;messageId&lt;/code&gt; s</target>
        </trans-unit>
        <trans-unit id="18e9be223aea66671eb28836cf2ba42607386bfd" translate="yes" xml:space="preserve">
          <source>Suggestions are intended to provide fixes. ESLint will automatically remove the whole suggestion from the linting output if the suggestion's &lt;code&gt;fix&lt;/code&gt; function returned &lt;code&gt;null&lt;/code&gt; or an empty array/sequence.</source>
          <target state="translated">Предложения предназначены для исправления ошибок. ESLint автоматически удалит все предложение из вывода линтинга, если функция &lt;code&gt;fix&lt;/code&gt; предложения вернула &lt;code&gt;null&lt;/code&gt; или пустой массив / последовательность.</target>
        </trans-unit>
        <trans-unit id="f7db9952d2964aa65b756b67c22f5246a1c46374" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional):</source>
          <target state="translated">Предложения можно проверить, определив ключ &lt;code&gt;suggestions&lt;/code&gt; для объекта ошибок. Возможны следующие варианты проверки предложений (все они не являются обязательными):</target>
        </trans-unit>
        <trans-unit id="c916d9f4a8ffd629b95d93d9124a2f7c4e41d96c" translate="yes" xml:space="preserve">
          <source>Suggestions can be tested by defining a &lt;code&gt;suggestions&lt;/code&gt; key on an errors object. The options to check for the suggestions are the following (all are optional): * &lt;code&gt;desc&lt;/code&gt; (string): The suggestion &lt;code&gt;desc&lt;/code&gt; value * &lt;code&gt;messageId&lt;/code&gt; (string): The suggestion &lt;code&gt;messageId&lt;/code&gt; value for suggestions that use &lt;code&gt;messageId&lt;/code&gt;s * &lt;code&gt;output&lt;/code&gt; (string): A code string representing the result of applying the suggestion fix to the input code</source>
          <target state="translated">Предложения можно проверить, определив ключ &lt;code&gt;suggestions&lt;/code&gt; для объекта ошибок. Параметры для проверки предложений являются следующие (все являются необязательными): * &lt;code&gt;desc&lt;/code&gt; (строка): Предположение &lt;code&gt;desc&lt;/code&gt; значение * &lt;code&gt;messageId&lt;/code&gt; (строка): Предложение &lt;code&gt;messageId&lt;/code&gt; значение для предложений , которые используют &lt;code&gt;messageId&lt;/code&gt; с * &lt;code&gt;output&lt;/code&gt; (строка): Код строка, представляющая результат применения исправления предложения к входному коду</target>
        </trans-unit>
        <trans-unit id="3e50b8781a635b4ef2043bf1c55b61ebd430b444" translate="yes" xml:space="preserve">
          <source>Summary formatter</source>
          <target state="translated">Резюме формата</target>
        </trans-unit>
        <trans-unit id="f728bb607703d5d8840e57203c2748461be1c478" translate="yes" xml:space="preserve">
          <source>Supplied callback names</source>
          <target state="translated">Поставленные имена обратного вызова</target>
        </trans-unit>
        <trans-unit id="9e4bceec48f473d3d0d75720f392d38042d15367" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;scopeManager&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;scopeManager&lt;/code&gt; will provide an &lt;code&gt;eslintScopeManager: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">Поддержка &lt;code&gt;scopeManager&lt;/code&gt; была добавлена ​​в ESLint v4.14.0. Версии ESLint, поддерживающие &lt;code&gt;scopeManager&lt;/code&gt; , будут предоставлять &lt;code&gt;eslintScopeManager: true&lt;/code&gt; в &lt;code&gt;parserOptions&lt;/code&gt; , которое можно использовать для обнаружения функций.</target>
        </trans-unit>
        <trans-unit id="d3be2b0d911459b5814d53e32d33fa047f7443bd" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;visitorKeys&lt;/code&gt; was added in ESLint v4.14.0. ESLint versions which support &lt;code&gt;visitorKeys&lt;/code&gt; will provide an &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; property in &lt;code&gt;parserOptions&lt;/code&gt;, which can be used for feature detection.</source>
          <target state="translated">Поддержка &lt;code&gt;visitorKeys&lt;/code&gt; была добавлена ​​в ESLint v4.14.0. Версии ESLint, поддерживающие &lt;code&gt;visitorKeys&lt;/code&gt; , будут предоставлять &lt;code&gt;eslintVisitorKeys: true&lt;/code&gt; в &lt;code&gt;parserOptions&lt;/code&gt; , которое можно использовать для обнаружения функции.</target>
        </trans-unit>
        <trans-unit id="998fadcd171167b554bf2c08de343941a1465d16" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="translated">SwitchCase</target>
        </trans-unit>
        <trans-unit id="3253b8236b095baad85b618af991aec7e4b807ea" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification</source>
          <target state="translated">Символ Спецификация объектов</target>
        </trans-unit>
        <trans-unit id="4b8745ced25b460b42f0ffff119fb7e742454610" translate="yes" xml:space="preserve">
          <source>Symbol Objects specification: Symbol description</source>
          <target state="translated">Символ Спецификация объектов:Описание символа</target>
        </trans-unit>
        <trans-unit id="5c1a0f585424dee7b8554275b5954f6b460c63ba" translate="yes" xml:space="preserve">
          <source>Syntastic</source>
          <target state="translated">Syntastic</target>
        </trans-unit>
        <trans-unit id="9d22b24463f2b7e050a7de4a58d0cc4b507e094e" translate="yes" xml:space="preserve">
          <source>Table of Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="translated">Содержание</target>
        </trans-unit>
        <trans-unit id="1bb44ac0ce6df50699361a74b6a78b3bcf6d27e3" translate="yes" xml:space="preserve">
          <source>Tabs: jQuery</source>
          <target state="translated">Тесты:jQuery</target>
        </trans-unit>
        <trans-unit id="b56e0af9912b57fe07bd022ded51e9d34177d6b8" translate="yes" xml:space="preserve">
          <source>Template literals (MDN)</source>
          <target state="translated">Буквы шаблона (MDN)</target>
        </trans-unit>
        <trans-unit id="3760c9870e77d722186e405789b255d1fc4397f6" translate="yes" xml:space="preserve">
          <source>Temporal Dead Zone</source>
          <target state="translated">Временно мертвая зона</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="40735bc727ae1db7f555635000520d9343037f8c" translate="yes" xml:space="preserve">
          <source>Ternary Operator</source>
          <target state="translated">тернарный оператор</target>
        </trans-unit>
        <trans-unit id="73ae0e17a1d0167b6266afc4c66bc3cd1157963b" translate="yes" xml:space="preserve">
          <source>Ternary Operator: &lt;code&gt;?:&lt;/code&gt;</source>
          <target state="translated">Тернарный оператор: &lt;code&gt;?:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="aa91a5a624af7d8296afa52521f68fe2c22fbe6f" translate="yes" xml:space="preserve">
          <source>Testing Suggestions</source>
          <target state="translated">Предложения по тестированию</target>
        </trans-unit>
        <trans-unit id="fac2d0573011312ce352636a228659611db6e134" translate="yes" xml:space="preserve">
          <source>Testing errors with &lt;code&gt;messageId&lt;/code&gt;</source>
          <target state="translated">Ошибки тестирования с &lt;code&gt;messageId&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d720305ae3061bec3ca536cef916c4141b41323c" translate="yes" xml:space="preserve">
          <source>TextMate 2:</source>
          <target state="translated">TextMate 2:</target>
        </trans-unit>
        <trans-unit id="9d341ea56c03bc023005aac875b425f57d6428b2" translate="yes" xml:space="preserve">
          <source>That works fine when you don't want a fallthrough, but what if the fallthrough is intentional, there is no way to indicate that in the language. It's considered a best practice to always indicate when a fallthrough is intentional using a comment which matches the &lt;code&gt;/falls?\s?through/i&lt;/code&gt; regular expression:</source>
          <target state="translated">Это прекрасно работает, когда вы не хотите провала, но что, если провал был преднамеренным, нет способа указать это на языке. Считается лучшей практикой всегда указывать, когда падение является преднамеренным, используя комментарий, который соответствует регулярному выражению &lt;code&gt;/falls?\s?through/i&lt;/code&gt; Falls ? \ S? Через / i :</target>
        </trans-unit>
        <trans-unit id="6ae09c7ad75a7a8f54ad7a675b476d63d3d4806c" translate="yes" xml:space="preserve">
          <source>The &quot;max&quot; object property is optional (default: 1).</source>
          <target state="translated">Свойство объекта &quot;max&quot; является необязательным (по умолчанию:1).</target>
        </trans-unit>
        <trans-unit id="dbb58b13b991ead49bcb9152b87b31df2d758c54" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the begin point of this message.</source>
          <target state="translated">Номер столбца в 1-ой колонке начальной точки данного сообщения.</target>
        </trans-unit>
        <trans-unit id="77bfab5d4b122d435b42f1cc6e25f3b15431c3ba" translate="yes" xml:space="preserve">
          <source>The 1-based column number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">Номер одного столбца в конце сообщения.Данное свойство не определено,если данное сообщение не является диапазоном.</target>
        </trans-unit>
        <trans-unit id="1bfeaeabc605c8970a4e9a4943be75663e3151fb" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the begin point of this message.</source>
          <target state="translated">Номер строки в 1 начальной точке данного сообщения.</target>
        </trans-unit>
        <trans-unit id="217ce3c9eec171b0c8f48cc98ef0326f12fd81a8" translate="yes" xml:space="preserve">
          <source>The 1-based line number of the end point of this message. This property is undefined if this message is not a range.</source>
          <target state="translated">Номер строки в 1-ой точке данного сообщения.Данное свойство не определено,если данное сообщение не является диапазоном.</target>
        </trans-unit>
        <trans-unit id="b16353fd54f2f4a9ee74c0161bfe191f44ad0ae0" translate="yes" xml:space="preserve">
          <source>The 1st option is &lt;code&gt;&quot;asc&quot;&lt;/code&gt; or &lt;code&gt;&quot;desc&quot;&lt;/code&gt;.</source>
          <target state="translated">Первый вариант - &lt;code&gt;&quot;asc&quot;&lt;/code&gt; или &lt;code&gt;&quot;desc&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="45905a15b4e98684c96286c7a579ca2e9122122b" translate="yes" xml:space="preserve">
          <source>The 2nd option is an object which has 3 properties.</source>
          <target state="translated">Второй вариант-это объект,который имеет 3 свойства.</target>
        </trans-unit>
        <trans-unit id="9a3b916c01c8581fb8b9ca9adec25cef6c29aac2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object of autofix. This property is undefined if this message is not fixable.</source>
          <target state="translated">Объект &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; файла autofix. Это свойство не определено, если это сообщение невозможно исправить.</target>
        </trans-unit>
        <trans-unit id="a7ca023748464e13f90714830960ee50f938ef1e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to filter.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; возражает фильтр.</target>
        </trans-unit>
        <trans-unit id="b70253817a5926115cf28ddc0ea4683ac9393e08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to write.</source>
          <target state="translated">&lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; объекты для записи.</target>
        </trans-unit>
        <trans-unit id="29ce05a67597e0643fcdc8100c44eaa9d1419d89" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#using-rule-metadata&quot;&gt;Using Rule metadata&lt;/a&gt; example shows how to use the &lt;code&gt;data&lt;/code&gt; object in a custom formatter. See the &lt;a href=&quot;working-with-rules&quot;&gt;Working with Rules&lt;/a&gt; page for more information about rules.</source>
          <target state="translated">В &lt;a href=&quot;#using-rule-metadata&quot;&gt;Использование метаданных Правило&lt;/a&gt; пример показывает , как использовать &lt;code&gt;data&lt;/code&gt; объекта в пользовательском форматировщиком. См. Страницу &lt;a href=&quot;working-with-rules&quot;&gt;Работа с правилами&lt;/a&gt; для получения дополнительной информации о правилах.</target>
        </trans-unit>
        <trans-unit id="4353f66bb2c82dd7f9dd9e432acc290e40026470" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../developer-guide/nodejs-api#cliengine&quot;&gt;&lt;code&gt;CLIEngine&lt;/code&gt; class&lt;/a&gt; has been deprecated and replaced by the new &lt;a href=&quot;../developer-guide/nodejs-api#eslint-class&quot;&gt;&lt;code&gt;ESLint&lt;/code&gt; class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1896cdaec6c51ba10667d39b756eedd5551922" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../rules/no-undef&quot;&gt;no-undef&lt;/a&gt; rule will warn on variables that are accessed but not defined within the same file. If you are using global variables inside of a file then it's worthwhile to define those globals so that ESLint will not warn about their usage. You can define global variables either using comments inside of a file or in the configuration file.</source>
          <target state="translated">&lt;a href=&quot;../rules/no-undef&quot;&gt;Нет-UNDEF&lt;/a&gt; правило будет предупреждать о переменных, к которым обращаются , но не определены в пределах одного файла. Если вы используете глобальные переменные внутри файла, стоит определить эти глобальные переменные, чтобы ESLint не предупреждал об их использовании. Вы можете определить глобальные переменные либо с помощью комментариев внутри файла, либо в файле конфигурации.</target>
        </trans-unit>
        <trans-unit id="047eac5397259d4ad14b6243aa57de4dae1a614d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;ECMAScript 5 specification&lt;/a&gt; makes it clear that both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">&lt;a href=&quot;https://es5.github.io/#x15.8&quot;&gt;Спецификация ECMAScript 5&lt;/a&gt; становится ясно , что как &lt;code&gt;Math&lt;/code&gt; и &lt;code&gt;JSON&lt;/code&gt; не может быть вызван:</target>
        </trans-unit>
        <trans-unit id="1a35e82f6be72b6be61cd4a886d86c858f228012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; makes it clear that &lt;code&gt;Reflect&lt;/code&gt; cannot be invoked:</source>
          <target state="translated">Спецификация &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/index.html#sec-reflect-object&quot;&gt;ECMAScript 2015&lt;/a&gt; ясно дает понять, что &lt;code&gt;Reflect&lt;/code&gt; не может быть вызван:</target>
        </trans-unit>
        <trans-unit id="81c1cb58f2de5577eeb597a1918e8584414249b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;always&quot;&lt;/code&gt; option (default) enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; in every situation (except when you opt-in to more specific handling of &lt;code&gt;null&lt;/code&gt; [see below]).</source>
          <target state="translated">Параметр &lt;code&gt;&quot;always&quot;&lt;/code&gt; (по умолчанию) предписывает использование &lt;code&gt;===&lt;/code&gt; и &lt;code&gt;!==&lt;/code&gt; в каждой ситуации (кроме случаев, когда вы выбираете более конкретную обработку &lt;code&gt;null&lt;/code&gt; [см. Ниже]).</target>
        </trans-unit>
        <trans-unit id="0234b9d3610f2d5c0d1890c03b252abd7cefab7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; rule is directly inspired by the Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS Style Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;as-needed&quot;, { &quot;requireForBlockBody&quot;: true }&lt;/code&gt; правило непосредственно вдохновлен Airbnb &lt;a href=&quot;https://github.com/airbnb/javascript#arrows--one-arg-parens&quot;&gt;JS руководства по стилю&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d82ce97069386b44a427b995707c718f99559346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; option will check for redeclaration of built-in globals in global scope.</source>
          <target state="translated">Параметр &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; проверяет повторное объявление встроенных глобальных объектов в глобальной области видимости.</target>
        </trans-unit>
        <trans-unit id="258321fe90655819f22eef5ffbb3f4fe1c32eec4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception concerns empty parentheses, and works the same way as the other exceptions, inverting the first option.</source>
          <target state="translated">В &lt;code&gt;&quot;empty&quot;&lt;/code&gt; относится исключение пустые круглые скобки, и работает точно так же , как и другие исключения, перевернув первый вариант.</target>
        </trans-unit>
        <trans-unit id="3b02d6c73ff7b77ebcbfdce42ad57c73245465b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; configuration contains many of the same default rule settings from 0.x, but not all. These rules are no longer on by default, so you should review your settings to ensure they are still as you expect:</source>
          <target state="translated">&lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; конфигурация содержит многие из тех же настроек правил по умолчанию из 0.x, а не все. Эти правила больше не действуют по умолчанию, поэтому вам следует проверить свои настройки, чтобы убедиться, что они по-прежнему соответствуют вашим ожиданиям:</target>
        </trans-unit>
        <trans-unit id="5913f4b04b709c4a37956c8f0a355bb3e59d6045" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">Значение &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; - это массив строковых шаблонов, которые считаются исключениями из правила. Обратите внимание, что исключения игнорируются, если первый аргумент - &lt;code&gt;&quot;never&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fe039a59a04c46fd505176d921318453636d178a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; value is an array of string patterns which are considered exceptions to the rule. The rule will not warn when the pattern starts from the beginning of the comment and repeats until the end of the line or &lt;code&gt;*/&lt;/code&gt; if the comment is a single line comment. Please note that exceptions are ignored if the first argument is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">Значение &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; - это массив строковых шаблонов, которые считаются исключениями из правила. Правило не будет предупреждать, если шаблон начинается с начала комментария и повторяется до конца строки или &lt;code&gt;*/&lt;/code&gt; , если комментарий является однострочным. Обратите внимание, что исключения игнорируются, если первый аргумент - &lt;code&gt;&quot;never&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e34f8d72a6e0abd2b6cd46f7f53eb977a9c25ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; property in a configuration file enables this rule.</source>
          <target state="translated">Свойство &lt;code&gt;&quot;extends&quot;: &quot;eslint:recommended&quot;&lt;/code&gt; в файле конфигурации включает это правило.</target>
        </trans-unit>
        <trans-unit id="ec76be0c108097d6838a0ac4fbb38e16745647e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; value is an array of string patterns which are considered markers for docblock-style comments, such as an additional &lt;code&gt;/&lt;/code&gt;, used to denote documentation read by doxygen, vsdoc, etc. which must have additional characters. The &lt;code&gt;&quot;markers&quot;&lt;/code&gt; array will apply regardless of the value of the first argument, e.g. &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">Значение &lt;code&gt;&quot;markers&quot;&lt;/code&gt; - это массив строковых шаблонов, которые считаются маркерами для комментариев в стиле docblock, например, дополнительный &lt;code&gt;/&lt;/code&gt; , используемый для обозначения документации, читаемой doxygen, vsdoc и т. Д., Которая должна содержать дополнительные символы. &lt;code&gt;&quot;markers&quot;&lt;/code&gt; массив будет применяться независимо от значения первого аргумента, например , &lt;code&gt;&quot;always&quot;&lt;/code&gt; или &lt;code&gt;&quot;never&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5df38b7cf9b33c3fdba20972fad0ce2f4e5d6596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;never&quot;&lt;/code&gt; option ignores &lt;code&gt;const&lt;/code&gt; variable initializations.</source>
          <target state="translated">Опция &lt;code&gt;&quot;never&quot;&lt;/code&gt; игнорирует инициализацию &lt;code&gt;const&lt;/code&gt; переменных.</target>
        </trans-unit>
        <trans-unit id="665c133a9b40f2ee21d1a8c214ccb5968d500388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;property&quot;&lt;/code&gt; option requires the dot to be on the same line as the property.</source>
          <target state="translated">Параметр &lt;code&gt;&quot;property&quot;&lt;/code&gt; требует, чтобы точка находилась на той же строке, что и свойство.</target>
        </trans-unit>
        <trans-unit id="a8917282c9e6924d8221f022d420501eebe8dd61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;safe&quot;&lt;/code&gt; option corresponds to the &lt;code&gt;&quot;global&quot;&lt;/code&gt; option if ESLint considers a file to be a &lt;strong&gt;Node.js&lt;/strong&gt; or &lt;strong&gt;CommonJS&lt;/strong&gt; module because the configuration specifies either of the following:</source>
          <target state="translated">Параметр &lt;code&gt;&quot;safe&quot;&lt;/code&gt; соответствует параметру &lt;code&gt;&quot;global&quot;&lt;/code&gt; если ESLint считает файл модулем &lt;strong&gt;Node.js&lt;/strong&gt; или &lt;strong&gt;CommonJS,&lt;/strong&gt; поскольку в конфигурации указано одно из следующего:</target>
        </trans-unit>
        <trans-unit id="335d3d2aadf4b8cd6d235ef1c1ab85d30c55e2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;smart&quot;&lt;/code&gt; option enforces the use of &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; except for these cases:</source>
          <target state="translated">Опция &lt;code&gt;&quot;smart&quot;&lt;/code&gt; требует использования &lt;code&gt;===&lt;/code&gt; и &lt;code&gt;!==&lt;/code&gt; за исключением следующих случаев:</target>
        </trans-unit>
        <trans-unit id="757da32c45a012c497f6f5b85d15dfd792bd342d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive applies to the scope in which it appears and all inner scopes contained within that scope. Therefore, using the &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive in one of these inner scopes is unnecessary.</source>
          <target state="translated">&lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; Директива применяется к области, в которой она появляется, и ко всем внутренним областям, содержащимся в этой области. Следовательно, используя &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; директива в одной из этих внутренних областей не нужна.</target>
        </trans-unit>
        <trans-unit id="34c46639b01057382b6b9a17c0ce73084f411d5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixed problems reported by this rule.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;командной строке&lt;/a&gt; автоматически устраняет проблемы, о которых сообщает это правило.</target>
        </trans-unit>
        <trans-unit id="5b8b6136da33c3a25813fde1f0b5cd20a7b643a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;командной строке&lt;/a&gt; автоматически исправляет проблемы (в настоящее время в основном пробелы), о которых сообщают правила, для которых ниже указан ключ.</target>
        </trans-unit>
        <trans-unit id="8c7a3a09ba8e134da02e62a2b097beafa2f467a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;command line&lt;/a&gt; can automatically fix some of the problems reported by this rule.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в &lt;a href=&quot;../user-guide/command-line-interface#fixing-problems&quot;&gt;командной строке&lt;/a&gt; может автоматически исправить некоторые проблемы, о которых сообщает это правило.</target>
        </trans-unit>
        <trans-unit id="1ad561df4151ebb76e63f840b52ab0f6ae886e08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule. A problem is only fixed if one of the operands is a &lt;code&gt;typeof&lt;/code&gt; expression, or if both operands are literals with the same type.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в командной строке автоматически устраняет некоторые проблемы, о которых сообщает это правило. Проблема устраняется, только если один из операндов является выражением &lt;code&gt;typeof&lt;/code&gt; или оба операнда являются литералами одного и того же типа.</target>
        </trans-unit>
        <trans-unit id="cfc6a5d47bc7a83b2362366b0d3b2b186202a528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line automatically fixes some problems reported by this rule: multiple members on a single line are automatically sorted (e.g. &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; is corrected to &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt;), but multiple lines are not reordered.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в командной строке автоматически устраняет некоторые проблемы, о которых сообщает это правило: несколько элементов в одной строке автоматически сортируются (например, &lt;code&gt;import { b, a } from 'foo.js'&lt;/code&gt; исправляется на &lt;code&gt;import { a, b } from 'foo.js'&lt;/code&gt; ), но несколько строк не меняются.</target>
        </trans-unit>
        <trans-unit id="6ee7ab0d0ef494b690762e7c764488b7d5a3c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line does not insert new &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; statements, but only removes unneeded statements.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в командной строке не вставляет новые операторы &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; , а только удаляет ненужные операторы.</target>
        </trans-unit>
        <trans-unit id="3d24607e46229c7268d72a682e31b53d3099f57e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--fix&lt;/code&gt; option on the command line fixes only problems reported in variable declarations, and among them only those that fall under the category &lt;code&gt;object&lt;/code&gt; destructuring. Furthermore, the name of the declared variable has to be the same as the name used for non-computed member access in the initializer. For example, &lt;code&gt;var foo = object.foo&lt;/code&gt; can be automatically fixed by this rule. Problems that involve computed member access (e.g., &lt;code&gt;var foo = object[foo]&lt;/code&gt;) or renamed properties (e.g., &lt;code&gt;var foo = object.bar&lt;/code&gt;) are not automatically fixed.</source>
          <target state="translated">Параметр &lt;code&gt;--fix&lt;/code&gt; в командной строке устраняет только проблемы, о которых сообщается в объявлениях переменных, и среди них только те, которые подпадают под категорию деструктурирования &lt;code&gt;object&lt;/code&gt; . Кроме того, имя объявленной переменной должно быть таким же, как имя, используемое для доступа к невычисляемым членам в инициализаторе. Например, это правило может автоматически исправить &lt;code&gt;var foo = object.foo&lt;/code&gt; . Проблемы, связанные с доступом к вычисляемому члену (например, &lt;code&gt;var foo = object[foo]&lt;/code&gt; ) или переименованным свойствам (например, &lt;code&gt;var foo = object.bar&lt;/code&gt; ), автоматически не исправляются.</target>
        </trans-unit>
        <trans-unit id="651165c0cfafa6ed91a01ff2f3a275112628a26a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; field gives you credit for having created the file.</source>
          <target state="translated">В поле &lt;code&gt;@author&lt;/code&gt; указывается, что вы создали файл.</target>
        </trans-unit>
        <trans-unit id="8d050940abfee32adbac0c6eb00b3c5418a91500" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method has changed to work more like &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt;. In v2.x, &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; warned about ignored files by default and didn't have a way to opt-out of those warnings whereas &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; did not warn about ignored files by default and allowed you to opt-in to warning about them. The &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; method now also does not warn about ignored files by default and allows you to opt-in with a new, third argument (a boolean, &lt;code&gt;true&lt;/code&gt; to warn about ignored files and &lt;code&gt;false&lt;/code&gt; to not warn).</source>
          <target state="translated">Метод &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; был изменен, чтобы работать больше как &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; . В v2.x &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; по умолчанию предупреждал об игнорируемых файлах и не имел возможности отказаться от этих предупреждений, тогда как &lt;code&gt;CLIEngine#executeOnFiles()&lt;/code&gt; не предупреждал об игнорируемых файлах по умолчанию и позволял вам выбрать в предупреждении о них. Метод &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; теперь также не предупреждает об игнорируемых файлах по умолчанию и позволяет выбрать новый, третий аргумент (логическое значение &lt;code&gt;true&lt;/code&gt; , чтобы предупреждать об игнорируемых файлах, и &lt;code&gt;false&lt;/code&gt; , чтобы не предупреждать).</target>
        </trans-unit>
        <trans-unit id="b443b18f5fe8c1198515e5121d1eb8b90810b7eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; class has been deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3237aa6952ebde13c8b884eaae887809df08c16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; class provides a synchronous API that is blocking the implementation of features such as parallel linting, supporting ES modules in shareable configs/parsers/plugins/formatters, and adding the ability to visually display the progress of linting runs. The new &lt;code&gt;ESLint&lt;/code&gt; class provides an asynchronous API that ESLint core will now using going forward. &lt;code&gt;CLIEngine&lt;/code&gt; will remain in core for the foreseeable future but may be removed in a future major version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd01e52d3805d8a62d247b8499d65fa83701f436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; является конструктором, и вы можете создать новый экземпляр, передав в параметрах , которые вы хотите использовать. Доступные варианты:</target>
        </trans-unit>
        <trans-unit id="36a91b8e915150c788d9aa4f17ae522dfcd51ab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; объект</target>
        </trans-unit>
        <trans-unit id="cb04e559741ded700b750c763c58609e67280d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt; type represents the core functionality of the CLI except that it reads nothing from the command line and doesn't output anything by default. Instead, it accepts many (but not all) of the arguments that are passed into the CLI. It reads both configuration and source files as well as managing the environment that is passed into the &lt;code&gt;Linter&lt;/code&gt; object.</source>
          <target state="translated">Тип &lt;code&gt;CLIEngine&lt;/code&gt; представляет основные функции интерфейса командной строки, за исключением того, что он ничего не читает из командной строки и ничего не выводит по умолчанию. Вместо этого он принимает многие (но не все) аргументы, которые передаются в CLI. Он считывает конфигурационные и исходные файлы, а также управляет средой, передаваемой в объект &lt;code&gt;Linter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7c04bc333459294a802b327b5827d0068e581953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CLIEngine&lt;/code&gt;, &lt;code&gt;SourceCode&lt;/code&gt;, and &lt;code&gt;RuleTester&lt;/code&gt; modules from ESLint's Node.js API are now ES2015 classes. This will not break any documented behavior, but it does have some observable effects (for example, the methods on &lt;code&gt;CLIEngine.prototype&lt;/code&gt; are now non-enumerable).</source>
          <target state="translated">&lt;code&gt;CLIEngine&lt;/code&gt; , &lt;code&gt;SourceCode&lt;/code&gt; и &lt;code&gt;RuleTester&lt;/code&gt; модули из ESLint в Node.js API теперь ES2015 классы. Это не нарушит какого-либо документированного поведения, но имеет некоторые наблюдаемые эффекты (например, методы в &lt;code&gt;CLIEngine.prototype&lt;/code&gt; теперь не перечислимые).</target>
        </trans-unit>
        <trans-unit id="8dff6f94cd40c096f350e419d585278490290c3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; class is the primary class to use in Node.js applications.</source>
          <target state="translated">Класс &lt;code&gt;ESLint&lt;/code&gt; - это основной класс для использования в приложениях Node.js.</target>
        </trans-unit>
        <trans-unit id="448de94e4a5c6b54e20b7d92beb049e1353254ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ESLint&lt;/code&gt; constructor takes an &lt;code&gt;options&lt;/code&gt; object. If you omit the &lt;code&gt;options&lt;/code&gt; object then it uses default values for all options. The &lt;code&gt;options&lt;/code&gt; object has the following properties.</source>
          <target state="translated">Конструктор &lt;code&gt;ESLint&lt;/code&gt; принимает объект &lt;code&gt;options&lt;/code&gt; . Если вы опустите объект &lt;code&gt;options&lt;/code&gt; он будет использовать значения по умолчанию для всех параметров. Объект &lt;code&gt;options&lt;/code&gt; имеет следующие свойства.</target>
        </trans-unit>
        <trans-unit id="cb55f87af3939b8a26c09301489c8b88cb0d4b46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EditInfo&lt;/code&gt; value is information to edit text. The &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;suggestions&lt;/code&gt; properties of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; type contain it. It has following properties:</source>
          <target state="translated">Значение &lt;code&gt;EditInfo&lt;/code&gt; - это информация для редактирования текста. В &lt;code&gt;fix&lt;/code&gt; и &lt;code&gt;suggestions&lt;/code&gt; свойства &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; типа содержат его. Обладает следующими свойствами:</target>
        </trans-unit>
        <trans-unit id="bc6ee1cbc4284429934a86ecac444fe81dc04e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt; value is the object to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text. The &lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter()&lt;/a&gt; method returns it. It has the following method:</source>
          <target state="translated">Значение &lt;code&gt;Formatter&lt;/code&gt; - это объект для преобразования объектов &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; в текст. В &lt;a href=&quot;#-eslintloadformatternameorpath&quot;&gt;eslint.loadFormatter ()&lt;/a&gt; метод возвращает его. Он имеет следующий метод:</target>
        </trans-unit>
        <trans-unit id="10215453b4d9e38705bc6510ce93465250bda0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintMessage&lt;/code&gt; value is the information of each linting error. The &lt;code&gt;messages&lt;/code&gt; property of the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; type contains it. It has the following properties:</source>
          <target state="translated">Значение &lt;code&gt;LintMessage&lt;/code&gt; - это информация о каждой ошибке линтинга. &lt;code&gt;messages&lt;/code&gt; свойство &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; типа содержит его. Он обладает следующими свойствами:</target>
        </trans-unit>
        <trans-unit id="80d5223bd532c8881ed7de1546fb3c0c20284147" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LintResult&lt;/code&gt; value is the information of the linting result of each file. The &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt;&lt;code&gt;eslint.lintFiles()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; methods return it. It has the following properties:</source>
          <target state="translated">Значение &lt;code&gt;LintResult&lt;/code&gt; - это информация о результате линтинга каждого файла. Его &lt;a href=&quot;#-eslintlintfilespatterns&quot;&gt; &lt;code&gt;eslint.lintFiles()&lt;/code&gt; &lt;/a&gt; и &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt; . Он обладает следующими свойствами:</target>
        </trans-unit>
        <trans-unit id="5c9b20fb5b6252830eb519435c0219003fa37dba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Linter&lt;/code&gt; объект</target>
        </trans-unit>
        <trans-unit id="1d37bb325bb6d585cfb9ad4d89a7dcea80388f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Linter&lt;/code&gt; object does the actual evaluation of the JavaScript code. It doesn't do any filesystem operations, it simply parses and reports on the code. In particular, the &lt;code&gt;Linter&lt;/code&gt; object does not process configuration objects or files. The &lt;code&gt;Linter&lt;/code&gt; is a constructor, and you can create a new instance by passing in the options you want to use. The available options are:</source>
          <target state="translated">Объект &lt;code&gt;Linter&lt;/code&gt; выполняет фактическую оценку кода JavaScript. Он не выполняет никаких операций с файловой системой, он просто анализирует код и сообщает о нем. В частности, объект &lt;code&gt;Linter&lt;/code&gt; не обрабатывает объекты или файлы конфигурации. &lt;code&gt;Linter&lt;/code&gt; является конструктором, и вы можете создать новый экземпляр, передав в параметрах , которые вы хотите использовать. Доступные варианты:</target>
        </trans-unit>
        <trans-unit id="6b3697f8c0f76c13f38759df3544e6dd3e1c83db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node must have &lt;code&gt;raw&lt;/code&gt; property.</source>
          <target state="translated">Узел &lt;code&gt;Literal&lt;/code&gt; должен иметь свойство &lt;code&gt;raw&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6199c13da52a235cf644776c5b0a32c08d65bf50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Literal&lt;/code&gt; node:</source>
          <target state="translated">Узел &lt;code&gt;Literal&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b0e719a9b8eee0a7e784f9393820037edebb8384" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; constructor is used to create new generic objects in JavaScript, such as:</source>
          <target state="translated">Конструктор &lt;code&gt;Object&lt;/code&gt; используется для создания новых универсальных объектов в JavaScript, таких как:</target>
        </trans-unit>
        <trans-unit id="26fa98a82c9b4be9d13ddb25b7b39470825fc8b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node must have &lt;code&gt;tokens&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt; properties. Both properties are an array of the below Token interface.</source>
          <target state="translated">Узел &lt;code&gt;Program&lt;/code&gt; должен иметь свойства &lt;code&gt;tokens&lt;/code&gt; и &lt;code&gt;comments&lt;/code&gt; . Оба свойства представляют собой массив интерфейса токена ниже.</target>
        </trans-unit>
        <trans-unit id="bcf1f4affa5a7dea7c1e9653f4ab221ce29cdab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Program&lt;/code&gt; node:</source>
          <target state="translated">Узел &lt;code&gt;Program&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="70ccd03ac71f531e40460156a41567e273392912" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RegExp&lt;/code&gt; constructor function, e.g., &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; or &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt;.</source>
          <target state="translated">Функция конструктора &lt;code&gt;RegExp&lt;/code&gt; , например, &lt;code&gt;new RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; или &lt;code&gt;RegExp(&quot;abc&quot;, &quot;u&quot;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18ac7817ce0d8138e79809c23852f9087177a2fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester#run()&lt;/code&gt; method is used to run the tests. It should be passed the following arguments:</source>
          <target state="translated">Метод &lt;code&gt;RuleTester#run()&lt;/code&gt; используется для запуска тестов. Следует передать следующие аргументы:</target>
        </trans-unit>
        <trans-unit id="e3f4c9bab5a0c5a3adc959e3a3fdfbbb58b5ebf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; constructor accepts an optional object argument, which can be used to specify defaults for your test cases. For example, if all of your test cases use ES2015, you can set it as a default:</source>
          <target state="translated">Конструктор &lt;code&gt;RuleTester&lt;/code&gt; принимает необязательный аргумент объекта, который можно использовать для указания значений по умолчанию для ваших тестовых случаев. Например, если все ваши тестовые примеры используют ES2015, вы можете установить его по умолчанию:</target>
        </trans-unit>
        <trans-unit id="6c8764a4c51cc41689c63fe6e9375e5151a9b01d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleTester&lt;/code&gt; now validates the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5077bac9449562ad14f14c5e522a6fd8f8637a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor strips Unicode BOM. Please note the AST also should be parsed from stripped text.</source>
          <target state="translated">Конструктор &lt;code&gt;SourceCode&lt;/code&gt; удаляет спецификацию Unicode. Обратите внимание, что AST также следует анализировать из вырезанного текста.</target>
        </trans-unit>
        <trans-unit id="db75fab00b139e2cb8ebf27b845a2a26e0849306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; constructor throws an error if the AST is missing any of the required information.</source>
          <target state="translated">Конструктор &lt;code&gt;SourceCode&lt;/code&gt; выдает ошибку, если в AST отсутствует какая-либо необходимая информация.</target>
        </trans-unit>
        <trans-unit id="1218e56286f97f65b8425325264eb5a0d40ee097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; object is the main object for getting more information about the source code being linted. You can retrieve the &lt;code&gt;SourceCode&lt;/code&gt; object at any time by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">Объект &lt;code&gt;SourceCode&lt;/code&gt; - это основной объект для получения дополнительной информации об линтинговом исходном коде. Вы можете получить объект &lt;code&gt;SourceCode&lt;/code&gt; в любое время с помощью &lt;code&gt;getSourceCode()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="479675aca73cae5c11d5d90c4454a08ce8e61d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceCode&lt;/code&gt; type represents the parsed source code that ESLint executes on. It's used internally in ESLint and is also available so that already-parsed code can be used. You can create a new instance of &lt;code&gt;SourceCode&lt;/code&gt; by passing in the text string representing the code and an abstract syntax tree (AST) in &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; format (including location information, range information, comments, and tokens):</source>
          <target state="translated">Тип &lt;code&gt;SourceCode&lt;/code&gt; представляет проанализированный исходный код, на котором выполняется ESLint. Он используется внутри ESLint, а также доступен, чтобы можно было использовать уже проанализированный код. Вы можете создать новый экземпляр &lt;code&gt;SourceCode&lt;/code&gt; , передав текстовую строку, представляющую код, и абстрактное синтаксическое дерево (AST) в формате &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; (включая информацию о местоположении, информацию о диапазоне, комментарии и токены):</target>
        </trans-unit>
        <trans-unit id="0f460ba3a888cb7885538cd22b45cfa2e1993d93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Symbol&lt;/code&gt; function may have an optional description:</source>
          <target state="translated">Функция &lt;code&gt;Symbol&lt;/code&gt; может иметь дополнительное описание:</target>
        </trans-unit>
        <trans-unit id="2d21736c63a542408cd25bebb0064399dafd3380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tag&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; является один из следующих:</target>
        </trans-unit>
        <trans-unit id="4017431bd4ca04209028b2fd7c8155020d0e96be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;__iterator__&lt;/code&gt; property was a SpiderMonkey extension to JavaScript that could be used to create custom iterators that are compatible with JavaScript's &lt;code&gt;for in&lt;/code&gt; and &lt;code&gt;for each&lt;/code&gt; constructs. However, this property is now obsolete, so it should not be used. Here's an example of how this used to work:</source>
          <target state="translated">Свойство &lt;code&gt;__iterator__&lt;/code&gt; было расширением SpiderMonkey для JavaScript, которое можно было использовать для создания пользовательских итераторов, совместимых с JavaScript &lt;code&gt;for in&lt;/code&gt; и &lt;code&gt;for each&lt;/code&gt; конструкции. Однако теперь это свойство устарело, поэтому использовать его не следует. Вот пример того, как это работало:</target>
        </trans-unit>
        <trans-unit id="5c5ed6ba19e731544b6cd87b09fe8abbca32c289" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property has been removed in ESLint v5.0, so it is no longer possible to implement rules with this functionality. However, the &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;&lt;code&gt;--report-unused-disable-directives&lt;/code&gt;&lt;/a&gt; CLI flag can be used to flag unused directive comments.</source>
          <target state="translated">Свойство &lt;code&gt;_linter&lt;/code&gt; было удалено в ESLint v5.0, поэтому больше невозможно реализовать правила с этой функцией. Однако флаг CLI &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt; &lt;code&gt;--report-unused-disable-directives&lt;/code&gt; &lt;/a&gt; может использоваться для отметки неиспользуемых комментариев директивы.</target>
        </trans-unit>
        <trans-unit id="e9b2ca0a9deb95b8d07936a6b72107ed5085c1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_linter&lt;/code&gt; property on rule context objects has been removed</source>
          <target state="translated">Свойство &lt;code&gt;_linter&lt;/code&gt; для объектов контекста правила было удалено</target>
        </trans-unit>
        <trans-unit id="1540bf038d822cce14da545ed574c51549eac1e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;align&lt;/code&gt; option can take additional configuration through the &lt;code&gt;beforeColon&lt;/code&gt;, &lt;code&gt;afterColon&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt;, and &lt;code&gt;on&lt;/code&gt; options.</source>
          <target state="translated">Параметр &lt;code&gt;align&lt;/code&gt; может принимать дополнительную конфигурацию с помощью параметров &lt;code&gt;beforeColon&lt;/code&gt; , &lt;code&gt;afterColon&lt;/code&gt; , &lt;code&gt;mode&lt;/code&gt; и &lt;code&gt;on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d05ba21959dd3bd33b13539a51873b945545c638" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;allow&lt;/code&gt; option is an array of identifier names for which shadowing is allowed. For example, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt;, &lt;code&gt;&quot;reject&quot;&lt;/code&gt;, &lt;code&gt;&quot;done&quot;&lt;/code&gt;, &lt;code&gt;&quot;cb&quot;&lt;/code&gt;.</source>
          <target state="translated">Параметр &lt;code&gt;allow&lt;/code&gt; - это массив имен идентификаторов, для которых разрешено затенение. Например, &lt;code&gt;&quot;resolve&quot;&lt;/code&gt; , &lt;code&gt;&quot;reject&quot;&lt;/code&gt; , &lt;code&gt;&quot;done&quot;&lt;/code&gt; , &lt;code&gt;&quot;cb&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3afd6725b2244693e0d6e156a1e44afd3600d41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; option has three settings:</source>
          <target state="translated">Параметр &lt;code&gt;args&lt;/code&gt; имеет три настройки:</target>
        </trans-unit>
        <trans-unit id="4cadc8103349def3aa303140050911f6d8949c38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;argsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: arguments whose names match a regexp pattern. For example, variables whose names begin with an underscore.</source>
          <target state="translated">Параметр &lt;code&gt;argsIgnorePattern&lt;/code&gt; указывает исключения, которые не следует проверять на использование: аргументы, имена которых соответствуют шаблону регулярного выражения. Например, переменные, имена которых начинаются с подчеркивания.</target>
        </trans-unit>
        <trans-unit id="6bb74f27a7dcda830e7e3515e710fd44a61861b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bind()&lt;/code&gt; method is used to create functions with specific &lt;code&gt;this&lt;/code&gt; values and, optionally, binds arguments to specific values. When used to specify the value of &lt;code&gt;this&lt;/code&gt;, it's important that the function actually uses &lt;code&gt;this&lt;/code&gt; in its function body. For example:</source>
          <target state="translated">Метод &lt;code&gt;bind()&lt;/code&gt; используется для создания функций с определенными значениями &lt;code&gt;this&lt;/code&gt; и, необязательно, связывает аргументы с определенными значениями. Когда используется для указания значения &lt;code&gt;this&lt;/code&gt; , важно, чтобы функция действительно использовала &lt;code&gt;this&lt;/code&gt; в своем теле функции. Например:</target>
        </trans-unit>
        <trans-unit id="23c983ff96826f2c7de4f17b4756b8bba9663c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block-scoped-var&lt;/code&gt; rule generates warnings when variables are used outside of the block in which they were defined. This emulates C-style block scope.</source>
          <target state="translated">&lt;code&gt;block-scoped-var&lt;/code&gt; правило создает предупреждения , когда переменные используются за пределами блока , в котором они были определены. Это имитирует область видимости блока C.</target>
        </trans-unit>
        <trans-unit id="53bdd73b3413849fa66b3556c625138c24847f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break outer&lt;/code&gt; statement ensures that this code will not result in an infinite loop because control is returned to the next statement after the &lt;code&gt;outer&lt;/code&gt; label was applied. If this statement was changed to be just &lt;code&gt;break&lt;/code&gt;, control would flow back to the outer &lt;code&gt;while&lt;/code&gt; statement and an infinite loop would result.</source>
          <target state="translated">Оператор &lt;code&gt;break outer&lt;/code&gt; гарантирует, что этот код не приведет к бесконечному циклу, поскольку управление возвращается следующему оператору после применения &lt;code&gt;outer&lt;/code&gt; метки. Если бы этот оператор был изменен на просто &lt;code&gt;break&lt;/code&gt; , управление переместилось бы обратно во внешний оператор &lt;code&gt;while&lt;/code&gt; , и в результате возник бы бесконечный цикл.</target>
        </trans-unit>
        <trans-unit id="e35e957bc5c45db7810cd6dc9b85c777f96b5c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browser&lt;/code&gt; environment has many built-in global variables (for example, &lt;code&gt;top&lt;/code&gt;). Some of built-in global variables cannot be redeclared.</source>
          <target state="translated">Среда &lt;code&gt;browser&lt;/code&gt; имеет множество встроенных глобальных переменных (например, &lt;code&gt;top&lt;/code&gt; ). Некоторые встроенные глобальные переменные нельзя повторно объявить.</target>
        </trans-unit>
        <trans-unit id="9c91130ea2cd4ecd093fc52993fc6956e053783c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;builtinGlobals&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; by default. If it is &lt;code&gt;true&lt;/code&gt;, the rule prevents shadowing of built-in global variables: &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and so on.</source>
          <target state="translated">Для параметра &lt;code&gt;builtinGlobals&lt;/code&gt; по умолчанию установлено значение &lt;code&gt;false&lt;/code&gt; . Если это &lt;code&gt;true&lt;/code&gt; , правило предотвращает затенение встроенных глобальных переменных: &lt;code&gt;Object&lt;/code&gt; , &lt;code&gt;Array&lt;/code&gt; , &lt;code&gt;Number&lt;/code&gt; и т. Д.</target>
        </trans-unit>
        <trans-unit id="2e369ffae5876263cbc79c574ac64d2933232f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/apply/bind&lt;/code&gt; method of the function is called directly.</source>
          <target state="translated">Метод &lt;code&gt;call/apply/bind&lt;/code&gt; функции вызывается напрямую.</target>
        </trans-unit>
        <trans-unit id="980901839cc98d894fc636088c44f1085352a1ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrors&lt;/code&gt; option is used for &lt;code&gt;catch&lt;/code&gt; block arguments validation.</source>
          <target state="translated">Параметр &lt;code&gt;caughtErrors&lt;/code&gt; используется для проверки аргументов блока &lt;code&gt;catch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce4f2ac1f670fbb48541447196e9d9315225fdf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: catch arguments whose names match a regexp pattern. For example, variables whose names begin with a string 'ignore'.</source>
          <target state="translated">Параметр &lt;code&gt;caughtErrorsIgnorePattern&lt;/code&gt; указывает исключения, которые не следует проверять на использование: перехватить аргументы, имена которых соответствуют шаблону регулярного выражения. Например, переменные, имена которых начинаются со строки &amp;laquo;игнорировать&amp;raquo;.</target>
        </trans-unit>
        <trans-unit id="8b0cd31aec7aa29af2f5a3abfb81a77e7a641899" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;cli&lt;/code&gt; объект</target>
        </trans-unit>
        <trans-unit id="6a94eb63df1e6ac352e9b186b0e6694f22a6e525" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cli&lt;/code&gt; object is the API for the command line interface. Literally, the &lt;code&gt;bin/eslint.js&lt;/code&gt; file simply passes arguments to the &lt;code&gt;cli&lt;/code&gt; object and then sets &lt;code&gt;process.exitCode&lt;/code&gt; to the returned exit code.</source>
          <target state="translated">Объект &lt;code&gt;cli&lt;/code&gt; - это API для интерфейса командной строки. Буквально файл &lt;code&gt;bin/eslint.js&lt;/code&gt; просто передает аргументы объекту &lt;code&gt;cli&lt;/code&gt; , а затем устанавливает &lt;code&gt;process.exitCode&lt;/code&gt; на возвращаемый код выхода.</target>
        </trans-unit>
        <trans-unit id="cdf300be717f0ef1b9048b6ac9761ea3a6565f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;comma-dangle&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;comma-dangle&lt;/code&gt; правило теперь более строгое по умолчанию</target>
        </trans-unit>
        <trans-unit id="b16f7c12a77c8c69c18c6cd7c66a8ffbf55f6b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context.getScope()&lt;/code&gt; method now returns more proper scopes</source>
          <target state="translated">Метод &lt;code&gt;context.getScope()&lt;/code&gt; теперь возвращает более подходящие области видимости.</target>
        </trans-unit>
        <trans-unit id="922325a01666733ad05e06be2a7e01ae31e121a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object contains additional functionality that is helpful for rules to do their jobs. As the name implies, the &lt;code&gt;context&lt;/code&gt; object contains information that is relevant to the context of the rule. The &lt;code&gt;context&lt;/code&gt; object has the following properties:</source>
          <target state="translated">Объект &lt;code&gt;context&lt;/code&gt; содержит дополнительные функции, которые помогают правилам выполнять свою работу. Как следует из названия, объект &lt;code&gt;context&lt;/code&gt; содержит информацию, относящуюся к контексту правила. Объект &lt;code&gt;context&lt;/code&gt; имеет следующие свойства:</target>
        </trans-unit>
        <trans-unit id="42b1848493047b28e69ceb4cc9991185d8cabd5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration. When used incorrectly it makes code less testable, less readable and less maintainable. Structured control flow statements such as &lt;code&gt;if&lt;/code&gt; should be used instead.</source>
          <target state="translated">Оператор &lt;code&gt;continue&lt;/code&gt; завершает выполнение операторов в текущей итерации текущего или помеченного цикла и продолжает выполнение цикла на следующей итерации. При неправильном использовании код становится менее тестируемым, читаемым и менее удобным в обслуживании. Вместо этого следует использовать структурированные операторы потока управления, такие как &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b85184b855dad09a62d467252a42e39fc124a249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; Argument</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; Доводы</target>
        </trans-unit>
        <trans-unit id="78eb3b7cfb10f4790691c3c7134c3e3e580dff94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debugger&lt;/code&gt; statement is used to tell the executing JavaScript environment to stop execution and start up a debugger at the current point in the code. This has fallen out of favor as a good practice with the advent of modern debugging and development tools. Production code should definitely not contain &lt;code&gt;debugger&lt;/code&gt;, as it will cause the browser to stop executing code and open an appropriate debugger.</source>
          <target state="translated">Оператор &lt;code&gt;debugger&lt;/code&gt; используется для того, чтобы сообщить исполняющейся среде JavaScript о необходимости остановить выполнение и запустить отладчик в текущей точке кода. Это перестало быть хорошей практикой с появлением современных средств отладки и разработки. В производственном коде определенно не должно быть &lt;code&gt;debugger&lt;/code&gt; , поскольку это приведет к тому, что браузер прекратит выполнение кода и откроет соответствующий отладчик.</target>
        </trans-unit>
        <trans-unit id="64766836102f731f14e0abe461d47d745b9f3795" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; класс утверждений должна иметь следующий вид:</target>
        </trans-unit>
        <trans-unit id="0d9bf1e7a06807b0d9dd6dee731608e28dac63d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; flag has been replaced by a &lt;code&gt;sourceType&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; which can be set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; for ES6 modules.</source>
          <target state="translated">&lt;code&gt;ecmaFeatures.modules&lt;/code&gt; флаг был заменен &lt;code&gt;sourceType&lt;/code&gt; собственности под &lt;code&gt;parserOptions&lt;/code&gt; , который может быть установлен в &lt;code&gt;&quot;script&quot;&lt;/code&gt; ( по умолчанию) или &lt;code&gt;&quot;module&quot;&lt;/code&gt; для модулей ES6.</target>
        </trans-unit>
        <trans-unit id="114daf2c10a876d1a0119d1127fb9645cebbe320" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaFeatures&lt;/code&gt; property is now under a top-level &lt;code&gt;parserOptions&lt;/code&gt; property.</source>
          <target state="translated">Свойство &lt;code&gt;ecmaFeatures&lt;/code&gt; теперь находится под свойством &lt;code&gt;parserOptions&lt;/code&gt; верхнего уровня .</target>
        </trans-unit>
        <trans-unit id="e77d2b26470f6a64bf6847f6dfa1ccf21481c369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecmaVersion&lt;/code&gt; parser option is set to something other than a number, such as the string &lt;code&gt;&quot;2015&quot;&lt;/code&gt;. (Previously, a non-number option would simply be ignored.)</source>
          <target state="translated">Для &lt;code&gt;ecmaVersion&lt;/code&gt; парсера ecmaVersion задано значение, отличное от числа, например строка &lt;code&gt;&quot;2015&quot;&lt;/code&gt; . (Раньше нечисловой параметр просто игнорировался.)</target>
        </trans-unit>
        <trans-unit id="e8001be05979a363d68c0b97cd9a4ec677d66ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend a popular style guide (for example, &lt;code&gt;eslint-config-standard&lt;/code&gt;).</source>
          <target state="translated">Команда &lt;code&gt;eslint --init&lt;/code&gt; может создать конфигурацию, чтобы вы могли расширить популярное руководство по стилю (например, &lt;code&gt;eslint-config-standard&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="76fc19e1d805a61118a2c1a81a45040f447d9365" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint --init&lt;/code&gt; command can create a configuration so you can extend the recommended rules.</source>
          <target state="translated">Команда &lt;code&gt;eslint --init&lt;/code&gt; может создать конфигурацию, чтобы вы могли расширить рекомендуемые правила.</target>
        </trans-unit>
        <trans-unit id="c4229b7a6eefed924206c9eb78fcfba7b8bfcf1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted for non-scoped packages</source>
          <target state="translated">&lt;code&gt;eslint-plugin-&lt;/code&gt; префикс может быть опущен для не контекстных пакетов</target>
        </trans-unit>
        <trans-unit id="61707a8cc213e8d436fdfb7b834fbdfa71c295b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint-tester&lt;/code&gt; module, which has long been the primary tester for ESLint rules, has now been moved into the &lt;code&gt;eslint&lt;/code&gt; module. This was the result of a difficult relationship between these two modules that created circular dependencies and was causing a lot of problems in rule tests. Moving the tester into the &lt;code&gt;eslint&lt;/code&gt; module fixed a lot of those issues.</source>
          <target state="translated">Модуль &lt;code&gt;eslint-tester&lt;/code&gt; , который долгое время был основным тестером правил ESLint, теперь перемещен в модуль &lt;code&gt;eslint&lt;/code&gt; . Это было результатом сложных взаимоотношений между этими двумя модулями, которые создавали циклические зависимости и вызывали множество проблем при проверке правил. &lt;code&gt;eslint&lt;/code&gt; тестера в модуль eslint устранил многие из этих проблем.</target>
        </trans-unit>
        <trans-unit id="8900c3358f2163358ec0b84e6c957c7b7bbbb087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; object (deprecated) is an instance of the &lt;code&gt;Linter&lt;/code&gt; class as defined &lt;a href=&quot;#linter&quot;&gt;above&lt;/a&gt;. &lt;code&gt;eslint.linter&lt;/code&gt; exists for backwards compatibility, but we do not recommend using it because any mutations to it are shared among every module that uses &lt;code&gt;eslint&lt;/code&gt;. Instead, please create your own instance of &lt;code&gt;eslint.Linter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eslint.linter&lt;/code&gt; объект (устаревшее) является экземпляром &lt;code&gt;Linter&lt;/code&gt; класса , как определено &lt;a href=&quot;#linter&quot;&gt;выше&lt;/a&gt; . &lt;code&gt;eslint.linter&lt;/code&gt; существует для обратной совместимости, но мы не рекомендуем его использовать, потому что любые его изменения распространяются среди всех модулей, использующих &lt;code&gt;eslint&lt;/code&gt; . Вместо этого создайте свой собственный экземпляр &lt;code&gt;eslint.Linter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d379a4d77b2607390afe7d33df57381bc7286ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslint.linter&lt;/code&gt; property is now non-enumerable</source>
          <target state="translated">Свойство &lt;code&gt;eslint.linter&lt;/code&gt; теперь не перечислимое.</target>
        </trans-unit>
        <trans-unit id="a9a4221ba818f86c812a9ad87857f70725c68eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; scope analysis property has been removed</source>
          <target state="translated">&lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; свойство анализ Объем был удален</target>
        </trans-unit>
        <trans-unit id="127d896dfbc583589aff8498ff51854129f845e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptMethods&lt;/code&gt; option allows you to pass an array of method names for which you would like to ignore warnings. For example, you might have a spec from an external library that requires you to overwrite a method as a regular function (and not as a static method) and does not use &lt;code&gt;this&lt;/code&gt; inside the function body. In this case, you can add that method to ignore in the warnings.</source>
          <target state="translated">Параметр &lt;code&gt;exceptMethods&lt;/code&gt; позволяет передавать массив имен методов, для которых вы хотите игнорировать предупреждения. Например, у вас может быть спецификация из внешней библиотеки, которая требует от вас перезаписать метод как обычную функцию (а не как статический метод) и не использует &lt;code&gt;this&lt;/code&gt; внутри тела функции. В этом случае вы можете добавить этот метод, чтобы игнорировать предупреждения.</target>
        </trans-unit>
        <trans-unit id="8077695416ecc34868ba7b9a8633341faa182787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exceptions&lt;/code&gt; option allows you to pass an array of methods names you'd like to continue to use in the old style.</source>
          <target state="translated">Параметр &lt;code&gt;exceptions&lt;/code&gt; позволяет вам передать массив имен методов, которые вы хотите продолжать использовать в старом стиле.</target>
        </trans-unit>
        <trans-unit id="252d44a66cbab7b2a0ad26d5562589f321a9a54d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been deprecated</source>
          <target state="translated">&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; опция устарела</target>
        </trans-unit>
        <trans-unit id="837260e2c2d2bb0e44d170f7a8580e9382461154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; to enable all core rules in the currently installed version of ESLint. The set of core rules can change at any minor or major version of ESLint.</source>
          <target state="translated">Значение свойства &lt;code&gt;extends&lt;/code&gt; может быть &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt; чтобы активировать все основные правила в текущей установленной версии ESLint. Набор основных правил может измениться в любой младшей или основной версии ESLint.</target>
        </trans-unit>
        <trans-unit id="6b1c15d923b6c7281b7fb8242da0395d1224b9fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can be an absolute or relative path to a base &lt;a href=&quot;#using-configuration-files&quot;&gt;configuration file&lt;/a&gt;. ESLint resolves a relative path to a base configuration file relative to the configuration file that uses it.</source>
          <target state="translated">Значение свойства &lt;code&gt;extends&lt;/code&gt; может быть абсолютным или относительным путем к &lt;a href=&quot;#using-configuration-files&quot;&gt;файлу&lt;/a&gt; базовой конфигурации . ESLint разрешает относительный путь к файлу базовой конфигурации относительно файла конфигурации, который его использует.</target>
        </trans-unit>
        <trans-unit id="5fa785db2037479c7f03a5b52934be5b58f71e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can consist of:</source>
          <target state="translated">Значение свойства &lt;code&gt;extends&lt;/code&gt; может состоять из:</target>
        </trans-unit>
        <trans-unit id="003522290cdebe1b2fbd30a1f0cbdc59c0904961" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value can omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">Значение свойства &lt;code&gt;extends&lt;/code&gt; может опускать &lt;code&gt;eslint-config-&lt;/code&gt; в имени пакета.</target>
        </trans-unit>
        <trans-unit id="0a2b44eee9bddc2d60e480fea08a5f4ceb3bdae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property value is either:</source>
          <target state="translated">Значение свойства &lt;code&gt;extends&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1cb5e8d9c216034fade7c978ad13805a9c312bc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fixer&lt;/code&gt; object has the following methods:</source>
          <target state="translated">У объекта &lt;code&gt;fixer&lt;/code&gt; есть следующие методы:</target>
        </trans-unit>
        <trans-unit id="a3edba7f97a325dd3428ee6498ff770178efa766" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">Операторы класса &lt;code&gt;for&lt;/code&gt; должны иметь следующую форму:</target>
        </trans-unit>
        <trans-unit id="d49f70042d3e336aa930fa3d8a67c5746bfb590f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;global&lt;/code&gt; property in the &lt;code&gt;linter.verify()&lt;/code&gt; API is no longer supported</source>
          <target state="translated">Не &lt;code&gt;global&lt;/code&gt; свойство в &lt;code&gt;linter.verify()&lt;/code&gt; API больше не поддерживается</target>
        </trans-unit>
        <trans-unit id="21aab0ed37e0be4d941cff2e17dc050a87694419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hoist&lt;/code&gt; option has three settings:</source>
          <target state="translated">Опция &lt;code&gt;hoist&lt;/code&gt; имеет три настройки:</target>
        </trans-unit>
        <trans-unit id="462609b8b9ea4983f2b2d00bf8596dc0d30d89b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; класс утверждений должен иметь следующий вид:</target>
        </trans-unit>
        <trans-unit id="0d8118a2bec951d156bb19df18c746496e386f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePattern&lt;/code&gt; object takes a string value, which is used as a regular expression applied to the first word of a comment.</source>
          <target state="translated">Объект &lt;code&gt;ignorePattern&lt;/code&gt; принимает строковое значение, которое используется как регулярное выражение, применяемое к первому слову комментария.</target>
        </trans-unit>
        <trans-unit id="ae972c6712702d048215995c50a75a39891b07a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignorePatterns&lt;/code&gt; property affects only the directory that the config file placed.</source>
          <target state="translated">Свойство &lt;code&gt;ignorePatterns&lt;/code&gt; влияет только на каталог, в котором размещен файл конфигурации.</target>
        </trans-unit>
        <trans-unit id="b5e9061da183286584b4711c4a63bfba8da71be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreRestSiblings&lt;/code&gt; option is a boolean (default: &lt;code&gt;false&lt;/code&gt;). Using a &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;Rest Property&lt;/a&gt; it is possible to &quot;omit&quot; properties from an object, but by default the sibling properties are marked as &quot;unused&quot;. With this option enabled the rest property's siblings are ignored.</source>
          <target state="translated">Параметр &lt;code&gt;ignoreRestSiblings&lt;/code&gt; является логическим (по умолчанию: &lt;code&gt;false&lt;/code&gt; ). Используя &lt;a href=&quot;https://github.com/tc39/proposal-object-rest-spread&quot;&gt;свойство Rest&lt;/a&gt; , можно &amp;laquo;опустить&amp;raquo; свойства объекта, но по умолчанию одноуровневые свойства помечены как &amp;laquo;неиспользуемые&amp;raquo;. Если этот параметр включен, братья и сестры остальных свойств игнорируются.</target>
        </trans-unit>
        <trans-unit id="85cb7a860cbd820f9d90f12cf28b759ca78ece90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;indent&lt;/code&gt; rule is more strict</source>
          <target state="translated">&lt;code&gt;indent&lt;/code&gt; правило более строгое</target>
        </trans-unit>
        <trans-unit id="7da93c489e9178d0f216041fee0bdfd9d92b14f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; entry should be the JavaScript file implementing your custom formatter.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; вход должен быть файл JavaScript при создании собственного форматировщик.</target>
        </trans-unit>
        <trans-unit id="b638eabe7da26a08a3d704c7037df4934e4bc5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max-statements&lt;/code&gt; rule allows you to specify the maximum number of statements allowed in a function.</source>
          <target state="translated">&lt;code&gt;max-statements&lt;/code&gt; правило позволяет указать максимальное количество операторов , допустимых в функции.</target>
        </trans-unit>
        <trans-unit id="a13c3e797d7391ff2cce66ebe8056f876d975eb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;message&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; Объект</target>
        </trans-unit>
        <trans-unit id="7cfb0e1495e0c320f6699634a8ccde094dae7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;multiLine&lt;/code&gt; and &lt;code&gt;align&lt;/code&gt; options can differ, which allows for fine-tuned control over the &lt;code&gt;key-spacing&lt;/code&gt; of your files. &lt;code&gt;align&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; inherit from &lt;code&gt;multiLine&lt;/code&gt; if &lt;code&gt;align&lt;/code&gt; is configured as an object.</source>
          <target state="translated">Параметры &lt;code&gt;multiLine&lt;/code&gt; и &lt;code&gt;align&lt;/code&gt; могут различаться, что позволяет более точно контролировать &lt;code&gt;key-spacing&lt;/code&gt; в файлах. &lt;code&gt;align&lt;/code&gt; &lt;strong&gt;не&lt;/strong&gt; будет наследовать от &lt;code&gt;multiLine&lt;/code&gt; , если &lt;code&gt;align&lt;/code&gt; настроено как объект.</target>
        </trans-unit>
        <trans-unit id="aa2c39f5693dcfe067810121d7a32dcd1b1e4f58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts a single argument, called an &lt;em&gt;executor&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09e48c81deff2fe74829687d8d386203bf2e1ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new Promise&lt;/code&gt; constructor accepts an &lt;em&gt;executor&lt;/em&gt; function as an argument, which has &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; parameters that can be used to control the state of the created Promise. For example:</source>
          <target state="translated">&lt;code&gt;new Promise&lt;/code&gt; конструктор принимает &lt;em&gt;исполнитель&lt;/em&gt; функцию в качестве аргумента, который имеет &lt;code&gt;resolve&lt;/code&gt; и &lt;code&gt;reject&lt;/code&gt; параметры , которые могут быть использованы для контроля состояния созданного Promise. Например:</target>
        </trans-unit>
        <trans-unit id="098f4a5cbac65ca4cffcaba3c9ba560edcebc8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; operator in JavaScript creates a new instance of a particular type of object. That type of object is represented by a constructor function. Since constructor functions are just regular functions, the only defining characteristic is that &lt;code&gt;new&lt;/code&gt; is being used as part of the call. Native JavaScript functions begin with an uppercase letter to distinguish those functions that are to be used as constructors from functions that are not. Many style guides recommend following this pattern to more easily determine which functions are to be used as constructors.</source>
          <target state="translated">Оператор &lt;code&gt;new&lt;/code&gt; в JavaScript создает новый экземпляр объекта определенного типа. Этот тип объекта представлен функцией-конструктором. Поскольку функции-конструкторы - это просто обычные функции, единственной определяющей характеристикой является то, что &lt;code&gt;new&lt;/code&gt; используется как часть вызова. Собственные функции JavaScript начинаются с заглавной буквы, чтобы отличить те функции, которые должны использоваться в качестве конструкторов, от функций, которые не используются. Многие руководства по стилям рекомендуют следовать этому шаблону, чтобы легче определить, какие функции следует использовать в качестве конструкторов.</target>
        </trans-unit>
        <trans-unit id="4b9844e9b711c0c78b88e1df4f24b4e7ffcc90b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-confusing-arrow&lt;/code&gt; rule is now more lenient by default</source>
          <target state="translated">&lt;code&gt;no-confusing-arrow&lt;/code&gt; правил теперь более снисходительный по умолчанию</target>
        </trans-unit>
        <trans-unit id="6d1a64da4353dccbefcdf2ee522647ae870b3b07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-eq-null&lt;/code&gt; rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to &lt;code&gt;null&lt;/code&gt; only match &lt;code&gt;null&lt;/code&gt;, and not also &lt;code&gt;undefined&lt;/code&gt;. As such it will flag comparisons to null when using &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">В &lt;code&gt;no-eq-null&lt;/code&gt; цели правила уменьшить потенциальную ошибку и нежелательное поведение, гарантируя , что сравнение с &lt;code&gt;null&lt;/code&gt; соответствует только &lt;code&gt;null&lt;/code&gt; , а также не &lt;code&gt;undefined&lt;/code&gt; . Таким образом, при использовании &lt;code&gt;==&lt;/code&gt; и &lt;code&gt;!=&lt;/code&gt; Сравнение будет помечено как null .</target>
        </trans-unit>
        <trans-unit id="2cf7599f9ca5e81f4584651a246f272a61b94bee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-magic-numbers&lt;/code&gt; rule aims to make code more readable and refactoring easier by ensuring that special numbers are declared as constants to make their meaning explicit.</source>
          <target state="translated">Не &lt;code&gt;no-magic-numbers&lt;/code&gt; исключают цели , чтобы сделать код более читаемыми и рефакторинг проще, гарантируя , что специальные номера объявлены как константы , чтобы сделать их смысл явными.</target>
        </trans-unit>
        <trans-unit id="584d3863241e3dd7bef2bc890fe46f1e0dacede5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-multi-spaces&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;no-multi-spaces&lt;/code&gt; правило более строгое по умолчанию</target>
        </trans-unit>
        <trans-unit id="22f51e16b3d2fa232175e558615aef4ba7d91884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-nested-ternary&lt;/code&gt; rule disallows nested ternary expressions.</source>
          <target state="translated">В &lt;code&gt;no-nested-ternary&lt;/code&gt; правилах Запрещают вложенный тройные выражения.</target>
        </trans-unit>
        <trans-unit id="116b22d947fe1ce535309217a88923e033d53bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;no-redeclare&lt;/code&gt; rule is now more strict by default</source>
          <target state="translated">&lt;code&gt;no-redeclare&lt;/code&gt; правило теперь более строгий по умолчанию</target>
        </trans-unit>
        <trans-unit id="0aeabea2c1edc1a249245bfe09f229e42dd63ee8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with default rules (&lt;code&gt;eslint:recommended&lt;/code&gt;) enabled.</source>
          <target state="translated">Команда &lt;code&gt;npm run perf&lt;/code&gt; дает общий обзор времени работы ESLint с &lt;code&gt;eslint:recommended&lt;/code&gt; правилами по умолчанию ( eslint: рекомендуется ).</target>
        </trans-unit>
        <trans-unit id="02b6ae240bb49fb262b6c6c5aa5ce3a0f704dc54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onlyEquality&lt;/code&gt; option allows a superset of the exceptions which &lt;code&gt;exceptRange&lt;/code&gt; allows, thus both options are not useful together.</source>
          <target state="translated">Параметр &lt;code&gt;onlyEquality&lt;/code&gt; допускает надмножество исключений, которое разрешает &lt;code&gt;exceptRange&lt;/code&gt; , поэтому оба параметра вместе бесполезны.</target>
        </trans-unit>
        <trans-unit id="3664b7a3e8295f10c165e69c19822430ecc4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property must be an array of options. This gets passed through to &lt;code&gt;context.options&lt;/code&gt; in the rule.</source>
          <target state="translated">Свойство &lt;code&gt;options&lt;/code&gt; должно быть массивом параметров. Это передается в &lt;code&gt;context.options&lt;/code&gt; правила.</target>
        </trans-unit>
        <trans-unit id="138b40a2090025ead37bb2b810503f00fc28051a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;padded-blocks&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">&lt;code&gt;padded-blocks&lt;/code&gt; правило является более строгим по умолчанию</target>
        </trans-unit>
        <trans-unit id="8d637daeacbd8ce09ca4965da79910941e8f067c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of AST nodes is now set before rules start running</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; свойство AST узлов теперь устанавливается перед тем правила начать бег</target>
        </trans-unit>
        <trans-unit id="ac6604963767894ebe97a28abec444c272e929c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewritable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; свойство всех узлов должны быть перезаписываемые. ESLint устанавливает &lt;code&gt;parent&lt;/code&gt; свойство каждого узла на его родительский узел во время обхода, прежде чем какие-либо правила получат доступ к AST.</target>
        </trans-unit>
        <trans-unit id="853c13962a666c12683d5753aa639223e6ad5a5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; property of all nodes must be rewriteable. ESLint sets each node's &lt;code&gt;parent&lt;/code&gt; property to its parent node while traversing, before any rules have access to the AST.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; свойство всех узлов должно быть перезаписываемым. ESLint устанавливает &lt;code&gt;parent&lt;/code&gt; свойство каждого узла на его родительский узел во время обхода, прежде чем какие-либо правила получат доступ к AST.</target>
        </trans-unit>
        <trans-unit id="944a63b184acd73eda9811179639d595d02aa85d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; functions can be used to turn binary, octal, and hexadecimal strings into integers. As binary, octal, and hexadecimal literals are supported in ES6, this rule encourages use of those numeric literals instead of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt;.</source>
          <target state="translated">Функции &lt;code&gt;parseInt()&lt;/code&gt; и &lt;code&gt;Number.parseInt()&lt;/code&gt; могут использоваться для преобразования двоичных, восьмеричных и шестнадцатеричных строк в целые числа. Поскольку в ES6 поддерживаются двоичные, восьмеричные и шестнадцатеричные литералы, это правило поощряет использование этих числовых литералов вместо &lt;code&gt;parseInt()&lt;/code&gt; или &lt;code&gt;Number.parseInt()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a6a8b14c45ea844b14e7b8898d1ed3a957925154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt;&lt;a href=&quot;#configuring-plugins&quot;&gt;property value&lt;/a&gt; can omit the &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix of the package name.</source>
          <target state="translated">В &lt;a href=&quot;#configuring-plugins&quot;&gt;значении свойства &lt;/a&gt; &lt;code&gt;plugins&lt;/code&gt; можно опустить &lt;code&gt;eslint-plugin-&lt;/code&gt; в имени пакета.</target>
        </trans-unit>
        <trans-unit id="379ae11932b2a6155c0dd857a96208194dd56ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;position&lt;/code&gt; option has two settings:</source>
          <target state="translated">Опция &lt;code&gt;position&lt;/code&gt; имеет две настройки:</target>
        </trans-unit>
        <trans-unit id="c999b4122281345d94d147575183f7bf02e84b31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.env&lt;/code&gt; object in Node.js is used to store deployment/configuration parameters. Littering it through out a project could lead to maintenance issues as it's another kind of global dependency. As such, it could lead to merge conflicts in a multi-user setup and deployment issues in a multi-server setup. Instead, one of the best practices is to define all those parameters in a single configuration/settings file which could be accessed throughout the project.</source>
          <target state="translated">Объект &lt;code&gt;process.env&lt;/code&gt; в Node.js используется для хранения параметров развертывания / конфигурации. Засорение этого проекта на протяжении всего проекта может привести к проблемам с обслуживанием, поскольку это еще один вид глобальной зависимости. Таким образом, это может привести к конфликтам слияния в многопользовательской настройке и проблемам развертывания в многосерверной настройке. Вместо этого одна из лучших практик - определить все эти параметры в одном файле конфигурации / настроек, к которому можно будет получить доступ на протяжении всего проекта.</target>
        </trans-unit>
        <trans-unit id="53444e809ed43079efe95348d4604d7a24ea38a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;process.exit()&lt;/code&gt; method in Node.js is used to immediately stop the Node.js process and exit. This is a dangerous operation because it can occur in any method at any point in time, potentially stopping a Node.js application completely when an error occurs. For example:</source>
          <target state="translated">Метод &lt;code&gt;process.exit()&lt;/code&gt; в Node.js используется для немедленной остановки процесса Node.js и выхода. Это опасная операция, потому что она может произойти в любом методе в любой момент времени, потенциально полностью останавливая приложение Node.js при возникновении ошибки. Например:</target>
        </trans-unit>
        <trans-unit id="00253dead4a64430ced775a37d1801dbac8821d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;2&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;quotes&lt;/code&gt; правило в этом примере имеет один вариант, &lt;code&gt;&quot;double&quot;&lt;/code&gt; ( &lt;code&gt;2&lt;/code&gt; является уровнем ошибок). Вы можете получить параметры для правила с помощью &lt;code&gt;context.options&lt;/code&gt; , который представляет собой массив, содержащий все настроенные параметры для правила. В этом случае &lt;code&gt;context.options[0]&lt;/code&gt; будет содержать &lt;code&gt;&quot;double&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="15bbabad9361578bf4fae1f2a49b29be60fa376b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;quotes&lt;/code&gt; rule in this example has one option, &lt;code&gt;&quot;double&quot;&lt;/code&gt; (the &lt;code&gt;error&lt;/code&gt; is the error level). You can retrieve the options for a rule by using &lt;code&gt;context.options&lt;/code&gt;, which is an array containing every configured option for the rule. In this case, &lt;code&gt;context.options[0]&lt;/code&gt; would contain &lt;code&gt;&quot;double&quot;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;quotes&lt;/code&gt; правило в этом примере имеет один вариант, &lt;code&gt;&quot;double&quot;&lt;/code&gt; ( &lt;code&gt;error&lt;/code&gt; является уровнем ошибок). Вы можете получить параметры для правила с помощью &lt;code&gt;context.options&lt;/code&gt; , который представляет собой массив, содержащий все настроенные параметры для правила. В этом случае &lt;code&gt;context.options[0]&lt;/code&gt; будет содержать &lt;code&gt;&quot;double&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="472145e67d0e65f7aa06bad378cebc04916b8bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;range&lt;/code&gt; property contains two indexes in the code, referring to the start and end location of a contiguous section of text that will be replaced. The &lt;code&gt;text&lt;/code&gt; property refers to the text that will replace the given range.</source>
          <target state="translated">Свойство &lt;code&gt;range&lt;/code&gt; содержит два индекса в коде, относящиеся к начальному и конечному местоположению непрерывного раздела текста, который будет заменен. Свойство &lt;code&gt;text&lt;/code&gt; относится к тексту, который заменит заданный диапазон.</target>
        </trans-unit>
        <trans-unit id="e4064f447f590c1765f1771747724c820f183198" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;report&lt;/code&gt; returned from &lt;code&gt;executeOnText()&lt;/code&gt; is in the same format as from &lt;code&gt;executeOnFiles()&lt;/code&gt;, but there is only ever one result in &lt;code&gt;report.results&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;report&lt;/code&gt; вернулся из &lt;code&gt;executeOnText()&lt;/code&gt; находится в том же формате, что и от &lt;code&gt;executeOnFiles()&lt;/code&gt; , но есть только когда - либо один результат в &lt;code&gt;report.results&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="92953a45beba64856673b9e8fbcb1ed126d0847b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; function is used to include modules that exist in separate files, such as:</source>
          <target state="translated">Функция &lt;code&gt;require&lt;/code&gt; используется для включения модулей, которые существуют в отдельных файлах, например:</target>
        </trans-unit>
        <trans-unit id="064be5c0f666fc3e35b5524048c68a20f53a49bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;result&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;result&lt;/code&gt; объекта</target>
        </trans-unit>
        <trans-unit id="9af8b29a9523a61b024585850f17334d070e6e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; Object</source>
          <target state="translated">&lt;code&gt;results&lt;/code&gt; объекта</target>
        </trans-unit>
        <trans-unit id="61d30c932bc83cd2faa8787d31852a2a495de05f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;results&lt;/code&gt; object passed into a formatter is an array of objects containing the lint results for individual files. Here's some example output:</source>
          <target state="translated">Объект &lt;code&gt;results&lt;/code&gt; переданный в средство форматирования, представляет собой массив объектов, содержащих результаты линта для отдельных файлов. Вот пример вывода:</target>
        </trans-unit>
        <trans-unit id="3993cb0067ab7703186a7c2f2b6970449e1be544" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rules&lt;/code&gt; property can do any of the following to extend (or override) the set of rules:</source>
          <target state="translated">Свойство &lt;code&gt;rules&lt;/code&gt; может выполнять любое из следующих действий, чтобы расширить (или переопределить) набор правил:</target>
        </trans-unit>
        <trans-unit id="561e9293e5a8d3ad27376df8faff3ae931698040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;source&lt;/code&gt; property is no longer available on individual linting messages</source>
          <target state="translated">Свойство &lt;code&gt;source&lt;/code&gt; больше не доступно для отдельных сообщений линтинга.</target>
        </trans-unit>
        <trans-unit id="0a93eec94b022c4aa2a02db660060ca362fa877f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; parser option is set while &lt;code&gt;ecmaVersion&lt;/code&gt; is set to &lt;code&gt;5&lt;/code&gt; or left unspecified. (Previously, setting &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; would implicitly cause &lt;code&gt;ecmaVersion&lt;/code&gt; to be set to a minimum of 2015, which could be surprising.)</source>
          <target state="translated">Параметр &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; установлен, в то время как &lt;code&gt;ecmaVersion&lt;/code&gt; имеет значение &lt;code&gt;5&lt;/code&gt; или оставлено неопределенным. (Ранее установка &lt;code&gt;sourceType: &quot;module&quot;&lt;/code&gt; неявно приводила к &lt;code&gt;ecmaVersion&lt;/code&gt; для параметра ecmaVersion было установлено минимум 2015, что могло быть неожиданностью.)</target>
        </trans-unit>
        <trans-unit id="4c9529163ca9cdfc78596b70a0088a17d7d3a0b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sourceType&lt;/code&gt; is set to anything other than &lt;code&gt;&quot;script&quot;&lt;/code&gt; or &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">Для &lt;code&gt;sourceType&lt;/code&gt; установлено любое значение, кроме &lt;code&gt;&quot;script&quot;&lt;/code&gt; или &lt;code&gt;&quot;module&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77552117314df4545a21208d082a3e6e878f860f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;space-before-function-paren&lt;/code&gt; rule is more strict by default</source>
          <target state="translated">Правило &amp;laquo; &lt;code&gt;space-before-function-paren&lt;/code&gt; по умолчанию более строгое.</target>
        </trans-unit>
        <trans-unit id="3f8f7815159b1b5e0f229864128c1f7bd11839da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; класс операторов должен иметь следующий вид:</target>
        </trans-unit>
        <trans-unit id="e7bd19d734e1f9c5b8f9f98d650cecfc8c20f132" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement in JavaScript is one of the more error-prone constructs of the language thanks in part to the ability to &quot;fall through&quot; from one &lt;code&gt;case&lt;/code&gt; to the next. For example:</source>
          <target state="translated">Оператор &lt;code&gt;switch&lt;/code&gt; в JavaScript - одна из наиболее подверженных ошибкам конструкций языка, отчасти благодаря способности &amp;laquo; переходить &amp;raquo; от одного &lt;code&gt;case&lt;/code&gt; к другому. Например:</target>
        </trans-unit>
        <trans-unit id="b828067e8b794059a7226d1fb4af5dcfec1299b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement internally uses the &lt;code&gt;===&lt;/code&gt; comparison to match the expression's value to a case clause. Therefore, it can never match &lt;code&gt;case NaN&lt;/code&gt;. Also, &lt;code&gt;switch(NaN)&lt;/code&gt; can never match a case clause.</source>
          <target state="translated">Оператор &lt;code&gt;switch&lt;/code&gt; внутренне использует сравнение &lt;code&gt;===&lt;/code&gt; для сопоставления значения выражения с предложением case. Следовательно, он никогда не может соответствовать &lt;code&gt;case NaN&lt;/code&gt; . Кроме того, &lt;code&gt;switch(NaN)&lt;/code&gt; никогда не может соответствовать предложению case.</target>
        </trans-unit>
        <trans-unit id="2ada90da9d605eb89fdcd67423cc995f53e41596" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; класс утверждений должна иметь следующий вид:</target>
        </trans-unit>
        <trans-unit id="8692ce1aa1a507fdbc0506510178169257caaf18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; flag disables the recovering logic Annex B defined. As a result, you can find errors early. This is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;the strict mode&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; флаг отключает оправляется логики Приложение B определено. В результате вы можете обнаружить ошибки на раннем этапе. Это похоже &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;на строгий режим&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c13131f24eb9329164eba24a2cd91b75577b1971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undefined&lt;/code&gt; variable in JavaScript is actually a property of the global object. As such, in ECMAScript 3 it was possible to overwrite the value of &lt;code&gt;undefined&lt;/code&gt;. While ECMAScript 5 disallows overwriting &lt;code&gt;undefined&lt;/code&gt;, it's still possible to shadow &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; переменная в JavaScript на самом деле это свойство глобального объекта. Таким образом, в ECMAScript 3 можно было перезаписать значение &lt;code&gt;undefined&lt;/code&gt; . Хотя ECMAScript 5 запрещает перезапись &lt;code&gt;undefined&lt;/code&gt; , можно затенять &lt;code&gt;undefined&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="e4e9951e2f561acaf841dbfd8453226510314be0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars-on-top&lt;/code&gt; rule generates warnings when variable declarations are not used serially at the top of a function scope or the top of a program. By default variable declarations are always moved (&amp;ldquo;hoisted&amp;rdquo;) invisibly to the top of their containing scope by the JavaScript interpreter. This rule forces the programmer to represent that behavior by manually moving the variable declaration to the top of its containing scope.</source>
          <target state="translated">&lt;code&gt;vars-on-top&lt;/code&gt; правило создает предупреждения , когда объявления переменных не используется последовательно в верхней части функционального объема или в верхней части программы. По умолчанию объявления переменных всегда перемещаются (&amp;laquo;поднимаются&amp;raquo;) невидимо в верхнюю часть их содержащей области видимости интерпретатором JavaScript. Это правило вынуждает программиста представлять это поведение, вручную перемещая объявление переменной в верхнюю часть его содержащей области.</target>
        </trans-unit>
        <trans-unit id="8437526de99e51c9af62b182483b3c46ca377dbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; option has two settings:</source>
          <target state="translated">Опция &lt;code&gt;vars&lt;/code&gt; имеет две настройки:</target>
        </trans-unit>
        <trans-unit id="7f313683e74a50e68d4d012882437f3a941bbebc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;varsIgnorePattern&lt;/code&gt; option specifies exceptions not to check for usage: variables whose names match a regexp pattern. For example, variables whose names contain &lt;code&gt;ignored&lt;/code&gt; or &lt;code&gt;Ignored&lt;/code&gt;.</source>
          <target state="translated">Параметр &lt;code&gt;varsIgnorePattern&lt;/code&gt; указывает исключения, которые не следует проверять на использование: переменные, имена которых соответствуют шаблону регулярного выражения. Например, переменные, имена которых содержат &lt;code&gt;ignored&lt;/code&gt; или &lt;code&gt;Ignored&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c6c8741b7358a7fc6ab1d9e9c87df7567465e2dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verify()&lt;/code&gt; method returns an array of objects containing information about the linting warnings and errors. Here's an example:</source>
          <target state="translated">Метод &lt;code&gt;verify()&lt;/code&gt; возвращает массив объектов, содержащий информацию о предупреждениях и ошибках линтинга. Вот пример:</target>
        </trans-unit>
        <trans-unit id="8f646bffb41dff01a7acc0aab19c45366759c6bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; operator takes an operand and returns &lt;code&gt;undefined&lt;/code&gt;: &lt;code&gt;void expression&lt;/code&gt; will evaluate &lt;code&gt;expression&lt;/code&gt; and return &lt;code&gt;undefined&lt;/code&gt;. It can be used to ignore any side effects &lt;code&gt;expression&lt;/code&gt; may produce:</source>
          <target state="translated">Оператор &lt;code&gt;void&lt;/code&gt; принимает операнд и возвращает &lt;code&gt;undefined&lt;/code&gt; : &lt;code&gt;void expression&lt;/code&gt; будет оценивать &lt;code&gt;expression&lt;/code&gt; и возвращать &lt;code&gt;undefined&lt;/code&gt; . Его можно использовать для игнорирования любых побочных эффектов, которые может вызвать &lt;code&gt;expression&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2556ce629f24ecc77f8ee75b29af595f5d1ce4bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; class of statements should have the following form:</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; класс утверждений должен иметь следующий вид:</target>
        </trans-unit>
        <trans-unit id="16267e1a7f6497f96f435d3ed8e9d95c9f05b4e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; statement is potentially problematic because it adds members of an object to the current scope, making it impossible to tell what a variable inside the block actually refers to.</source>
          <target state="translated">Оператор &lt;code&gt;with&lt;/code&gt; потенциально проблематичен, потому что он добавляет элементы объекта в текущую область видимости, что делает невозможным определить, на что на самом деле ссылается переменная внутри блока.</target>
        </trans-unit>
        <trans-unit id="23d60138df9b187d83c9c312e2d8240dbd86a484" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;one true brace style&lt;/em&gt; is one of the most common brace styles in JavaScript, in which the opening brace of a block is placed on the same line as its corresponding statement or declaration. For example:</source>
          <target state="translated">Единственный &lt;em&gt;истинный стиль фигурных скобок&lt;/em&gt; - один из наиболее распространенных стилей фигурных скобок в JavaScript, в котором открывающая фигурная скобка блока размещается в той же строке, что и соответствующий оператор или объявление. Например:</target>
        </trans-unit>
        <trans-unit id="318db8bc3442a0b948f2278731ddfaa2b3371483" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository that active development happens on. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">&lt;em&gt;Источник вверх по течению&lt;/em&gt; является основным хранилищем ESLint , что активное развитие происходит на. Хотя у вас не будет push-доступа к восходящему потоку, у вас будет доступ по запросу, что позволит вам загрузить последний код, когда захотите.</target>
        </trans-unit>
        <trans-unit id="985796a6dfb39061b3806f06ead742513b9f7132" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;upstream source&lt;/em&gt; is the main ESLint repository where active development happens. While you won't have push access to upstream, you will have pull access, allowing you to pull in the latest code whenever you want.</source>
          <target state="translated">&lt;em&gt;Источник вверх по течению&lt;/em&gt; является основным хранилищем ESLint , где происходит активное развитие. Хотя у вас не будет push-доступа к восходящему потоку, у вас будет доступ по запросу, что позволит вам загрузить последний код, когда захотите.</target>
        </trans-unit>
        <trans-unit id="00a652484a4e470b827e739fbc799706911bd125" translate="yes" xml:space="preserve">
          <source>The AST specification</source>
          <target state="translated">Спецификация AST</target>
        </trans-unit>
        <trans-unit id="e60cbbce8f620754c9d5e236855c0dfac9399492" translate="yes" xml:space="preserve">
          <source>The AST that custom parsers should create is based on &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt;. The AST requires some additional properties about detail information of the source code.</source>
          <target state="translated">AST, который должны создавать пользовательские парсеры, основан на &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; . AST требует некоторых дополнительных свойств с подробной информацией об исходном коде.</target>
        </trans-unit>
        <trans-unit id="d12093d685b556a69445173fd5520486f1407941" translate="yes" xml:space="preserve">
          <source>The Art Of Node: Callbacks</source>
          <target state="translated">Искусство узла:Обратные вызовы</target>
        </trans-unit>
        <trans-unit id="dc42f36cf4efb4177d2faa05bda904369e189f7a" translate="yes" xml:space="preserve">
          <source>The Atomics object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Atomics object as a function.</source>
          <target state="translated">У объекта Atomics нет внутреннего метода &lt;code&gt;[[Call]]&lt;/code&gt; ; невозможно вызвать объект Atomics как функцию.</target>
        </trans-unit>
        <trans-unit id="121e8d7f53d94f39796abb445eea1ec6c84df947" translate="yes" xml:space="preserve">
          <source>The Comma Style rule enforces styles for comma-separated lists. There are two comma styles primarily used in JavaScript:</source>
          <target state="translated">Правило Comma Style применяет стили для списков,разделенных запятыми.Есть два стиля запятых,которые в основном используются в JavaScript:</target>
        </trans-unit>
        <trans-unit id="751c7e36741c66d3a05895481f8942a38ca2dce1" translate="yes" xml:space="preserve">
          <source>The Context Object</source>
          <target state="translated">Контекстный объект</target>
        </trans-unit>
        <trans-unit id="699ac6d6b4ec2baa85b4732c274fadb3ca039ae9" translate="yes" xml:space="preserve">
          <source>The ECMAScript 5 Annotated Specification - Strict Mode</source>
          <target state="translated">Аннотированная спецификация ECMAScript 5-строгий режим</target>
        </trans-unit>
        <trans-unit id="80e0be2b0df7dc0f52165f27603e2898ae8a5e99" translate="yes" xml:space="preserve">
          <source>The ES6 Reflect API comes with a handful of methods which somewhat deprecate methods on old constructors:</source>
          <target state="translated">ES6 Reflect API поставляется с пригоршней методов,которые несколько ослабляют методы на старых конструкторах:</target>
        </trans-unit>
        <trans-unit id="66003f739f69d29de4ae86e20e78496ebb3153ae" translate="yes" xml:space="preserve">
          <source>The ESLint directory and file structure is as follows:</source>
          <target state="translated">Структура директории и файла ESLint выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="d93e8b36b02e3c814ab20860021ac1e2f00ac494" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement new rules that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule is accepted, you are responsible for implementing and documenting the rule. You may, alternately, recruit another person to help you implement the rule. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">Команда ESLint не внедряет новые правила,которые предлагаются пользователями,потому что у нас ограниченное количество людей,и нам нужно сосредоточиться на общей дорожной карте.Как только правило принято,вы отвечаете за его реализацию и документирование.Вы можете поочередно нанимать другого человека,который поможет вам внедрить правило.Член команды ESLint,выступивший в поддержку правила,является вашим ресурсом,который поможет вам пройти остаток этого процесса.</target>
        </trans-unit>
        <trans-unit id="0c711d16f14ea7343d52f05830b40ccdb9522bc8" translate="yes" xml:space="preserve">
          <source>The ESLint team doesn't implement rule changes that are suggested by users because we have a limited number of people and need to focus on the overall roadmap. Once a rule change is accepted, you are responsible for implementing and documenting it. You may, alternately, recruit another person to help you. The ESLint team member who championed the rule is your resource to help guide you through the rest of this process.</source>
          <target state="translated">Команда ESLint не внедряет изменения правил,которые предлагаются пользователями,потому что у нас ограниченное количество людей,и нам нужно сосредоточиться на общей дорожной карте.Как только изменение правила принято,вы отвечаете за его реализацию и документирование.Вы можете поочередно нанимать другого человека,который будет вам помогать.Член команды ESLint,выступивший за правило,является вашим ресурсом,который поможет вам пройти остаток этого процесса.</target>
        </trans-unit>
        <trans-unit id="aeda0c340295fff5de3b84af83b961b23c1f657b" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. This section outlines the guidelines the team has set in place for the deprecation of rules in future releases.</source>
          <target state="translated">Команда ESLint стремится сделать модернизацию максимально простой и безболезненной.Этот раздел описывает руководящие принципы,которые команда установила для отмены правил в будущих выпусках.</target>
        </trans-unit>
        <trans-unit id="42ccbdbc3911d666627517f8ffa3964275678b01" translate="yes" xml:space="preserve">
          <source>The ESLint team is committed to making upgrading as easy and painless as possible. To that end, the team has agreed upon the following set of guidelines for deprecating rules in the future. The goal of these guidelines is to allow for improvements and changes to be made without breaking existing configurations.</source>
          <target state="translated">Команда ESLint стремится сделать модернизацию максимально простой и безболезненной.С этой целью команда согласовала следующий свод правил для отмены правил в будущем.Цель этого руководства-позволить вносить улучшения и изменения,не нарушая существующих конфигураций.</target>
        </trans-unit>
        <trans-unit id="d4e733f98b935c588d211926e08fdfd98589d4ae" translate="yes" xml:space="preserve">
          <source>The JSCS &lt;code&gt;--auto-configure&lt;/code&gt; option created a configuration based on what it found in a given file:</source>
          <target state="translated">Параметр JSCS &lt;code&gt;--auto-configure&lt;/code&gt; создает конфигурацию на основе того, что он нашел в данном файле:</target>
        </trans-unit>
        <trans-unit id="fa1c39fed1338615abafccd715f9a9ceec0208c2" translate="yes" xml:space="preserve">
          <source>The Math Object</source>
          <target state="translated">Математический объект</target>
        </trans-unit>
        <trans-unit id="9459a63048e2fc499f7aeacaa3d20ab484e34e90" translate="yes" xml:space="preserve">
          <source>The Math object does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal property; it is not possible to invoke the Math object as a function.</source>
          <target state="translated">Объект Math не имеет внутреннего свойства &lt;code&gt;[[Call]]&lt;/code&gt; ; невозможно вызвать объект Math как функцию.</target>
        </trans-unit>
        <trans-unit id="03344790500f2127bf5b89f81cc0b7f1bd8cbe99" translate="yes" xml:space="preserve">
          <source>The Reflect object also does not have a &lt;code&gt;[[Call]]&lt;/code&gt; internal method; it is not possible to invoke the Reflect object as a function.</source>
          <target state="translated">У объекта Reflect также нет внутреннего метода &lt;code&gt;[[Call]]&lt;/code&gt; ; невозможно вызвать объект Reflect как функцию.</target>
        </trans-unit>
        <trans-unit id="d8e01d191666fc3fab613c0e7605b0dd8117adb5" translate="yes" xml:space="preserve">
          <source>The Unicode Byte Order Mark (BOM) is used to specify whether code units are big endian or little endian. That is, whether the most significant or least significant bytes come first. UTF-8 does not require a BOM because byte ordering does not matter when characters are a single byte. Since UTF-8 is the dominant encoding of the web, we make &lt;code&gt;&quot;never&quot;&lt;/code&gt; the default option.</source>
          <target state="translated">Знак порядка байтов Unicode (BOM) используется, чтобы указать, являются ли единицы кода прямым или прямым порядком байтов. То есть, идут ли первыми наиболее значимые или наименее значимые байты. UTF-8 не требует спецификации, потому что порядок байтов не имеет значения, когда символы являются однобайтовыми. Поскольку UTF-8 является доминирующей кодировкой в ​​Интернете, мы делаем вариант &lt;code&gt;&quot;never&quot;&lt;/code&gt; по умолчанию.</target>
        </trans-unit>
        <trans-unit id="dee0f2bfcb123659c532724653e8c4e345e84a42" translate="yes" xml:space="preserve">
          <source>The `--fix` option on the &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;command line&lt;/a&gt; automatically fixes problems (currently mostly whitespace) reported by rules which have a wrench  below.</source>
          <target state="translated">Параметр `--fix` в &lt;a href=&quot;../user-guide/command-line-interface#fix&quot;&gt;командной строке&lt;/a&gt; автоматически исправляет проблемы (в настоящее время в основном пробелы), о которых сообщают правила, которые имеют ключ ниже.</target>
        </trans-unit>
        <trans-unit id="db8728aed09dfa6de429370be79c24bb69a35744" translate="yes" xml:space="preserve">
          <source>The above can be rewritten as the following to improve readability and more clearly delineate the operands:</source>
          <target state="translated">Вышеизложенное можно переписать следующим образом для улучшения читабельности и более четкого разграничения операндов:</target>
        </trans-unit>
        <trans-unit id="65f3cb6e1b55fcacecc756bb976bc88a3674a7e6" translate="yes" xml:space="preserve">
          <source>The above methods return a &lt;code&gt;fixing&lt;/code&gt; object. The &lt;code&gt;fix()&lt;/code&gt; function can return the following values:</source>
          <target state="translated">Вышеупомянутые методы возвращают &lt;code&gt;fixing&lt;/code&gt; объект. Функция &lt;code&gt;fix()&lt;/code&gt; может возвращать следующие значения:</target>
        </trans-unit>
        <trans-unit id="9907806cacfab0036e1c3174ec8f1e3740b6c513" translate="yes" xml:space="preserve">
          <source>The absolute path to the file of this result. This is the string &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; if the file path is unknown (when you didn't pass the &lt;code&gt;options.filePath&lt;/code&gt; option to the &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt;&lt;code&gt;eslint.lintText()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">Абсолютный путь к файлу с этим результатом. Это строка &lt;code&gt;&quot;&amp;lt;text&amp;gt;&quot;&lt;/code&gt; если путь к файлу неизвестен (если вы не &lt;a href=&quot;#-eslintlinttextcode-options&quot;&gt; &lt;code&gt;eslint.lintText()&lt;/code&gt; &lt;/a&gt; параметр &lt;code&gt;options.filePath&lt;/code&gt; методу eslint.lintText () ).</target>
        </trans-unit>
        <trans-unit id="534b2fcf7f67846ee9ee4948ebf52bf0568bd28a" translate="yes" xml:space="preserve">
          <source>The array can contain values of &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; types. If it's a string, the text must be parsed as &lt;code&gt;bigint&lt;/code&gt; literal (e.g., &lt;code&gt;&quot;100n&quot;&lt;/code&gt;).</source>
          <target state="translated">Массив может содержать значения &lt;code&gt;number&lt;/code&gt; и &lt;code&gt;string&lt;/code&gt; типов. Если это строка, текст должен быть проанализирован как литерал &lt;code&gt;bigint&lt;/code&gt; (например, &lt;code&gt;&quot;100n&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b83b06a5a4117b1ebec2ee0a831243105811ba6c" translate="yes" xml:space="preserve">
          <source>The array of &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; objects.</source>
          <target state="translated">Массив объектов &lt;a href=&quot;#-lintmessage-type&quot;&gt;LintMessage&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8040e15fea18e7a920143bf6b7ff7f7861d4d533" translate="yes" xml:space="preserve">
          <source>The base path of &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt; has changed when using the &lt;code&gt;--config&lt;/code&gt;/&lt;code&gt;--ignore-path&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6742db80aaba960ead5e3b3f95edb42af07948" translate="yes" xml:space="preserve">
          <source>The base path of &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt; is changed if the config file is given by the &lt;code&gt;--config&lt;/code&gt;/&lt;code&gt;--ignore-path&lt;/code&gt; options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c94f2b50ef7b0d53ba00f8a03e35b8008133138" translate="yes" xml:space="preserve">
          <source>The basic pattern for a rule unit test file is:</source>
          <target state="translated">Основной шаблон для тестового файла единицы правил:</target>
        </trans-unit>
        <trans-unit id="56d7ca1af2103271f042bd642392c591643ab810" translate="yes" xml:space="preserve">
          <source>The best practice is to always use a function for the first argument of &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; (and avoid &lt;code&gt;execScript()&lt;/code&gt;).</source>
          <target state="translated">Лучше всего всегда использовать функцию для первого аргумента &lt;code&gt;setTimeout()&lt;/code&gt; и &lt;code&gt;setInterval()&lt;/code&gt; (и избегать &lt;code&gt;execScript()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1e8c340ffa3f95f2957d6bb3facc83797eb47d1e" translate="yes" xml:space="preserve">
          <source>The built-in formatter options are:</source>
          <target state="translated">Встроенные форм-аккумуляторы:</target>
        </trans-unit>
        <trans-unit id="f4a074b29cc31436f926afa21bd394791fa680f4" translate="yes" xml:space="preserve">
          <source>The callback pattern is at the heart of most I/O and event-driven programming in JavaScript.</source>
          <target state="translated">Шаблон обратного вызова лежит в основе большинства программ ввода/вывода и событийного программирования на JavaScript.</target>
        </trans-unit>
        <trans-unit id="17cf8e65252c53144326fa3b3cb3dee6a9c49a73" translate="yes" xml:space="preserve">
          <source>The change introduces no functional regression. Be sure to run &lt;code&gt;npm test&lt;/code&gt; to verify your changes before submitting a pull request.</source>
          <target state="translated">Это изменение не приводит к функциональной регрессии. Обязательно запустите &lt;code&gt;npm test&lt;/code&gt; , чтобы проверить свои изменения перед отправкой запроса на перенос.</target>
        </trans-unit>
        <trans-unit id="95b1da556ce89be353ded0ac57710b104d6f438e" translate="yes" xml:space="preserve">
          <source>The closing brace should be on a separate line.</source>
          <target state="translated">Закрывающая скоба должна быть на отдельной линии.</target>
        </trans-unit>
        <trans-unit id="0e877e0656f0ec69724c1b6cc3a12731f64fac75" translate="yes" xml:space="preserve">
          <source>The code above creates an object with just a setter for the property &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">Приведенный выше код создает объект только с установщиком для свойства &lt;code&gt;&quot;a&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d7fe0fd83bc9845d159f7bbddda58e021a2af8e" translate="yes" xml:space="preserve">
          <source>The code can be rewritten as:</source>
          <target state="translated">Код можно переписать как:</target>
        </trans-unit>
        <trans-unit id="eae223ac7cf3bcd6d761f22884ef878f4080872a" translate="yes" xml:space="preserve">
          <source>The code might be mistaken for an error.</source>
          <target state="translated">Код может быть ошибочно принят за ошибку.</target>
        </trans-unit>
        <trans-unit id="07b81fa2d7c3787fd397d4cedde653ceddf32951" translate="yes" xml:space="preserve">
          <source>The combining characters are characters which belong to one of &lt;code&gt;Mc&lt;/code&gt;, &lt;code&gt;Me&lt;/code&gt;, and &lt;code&gt;Mn&lt;/code&gt;&lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;Unicode general categories&lt;/a&gt;.</source>
          <target state="translated">Комбинированные символы - это символы, которые принадлежат к одной из &lt;a href=&quot;http://www.unicode.org/L2/L1999/UnicodeData.html#General%20Category&quot;&gt;общих категорий Unicode &lt;/a&gt; &lt;code&gt;Mc&lt;/code&gt; , &lt;code&gt;Me&lt;/code&gt; и &lt;code&gt;Mn&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="73d750e0d0367037fdad99a42bc958f0afea170d" translate="yes" xml:space="preserve">
          <source>The comma and any whitespace that delimit property specifications are not considered parts of them. Therefore, the rule permits both of these formats:</source>
          <target state="translated">Запятая и любые пробелы,разделяющие спецификации свойств,не считаются их частями.Поэтому правило разрешает оба этих формата:</target>
        </trans-unit>
        <trans-unit id="d9368f1df7787717cd62dddc2cb7c148f9058bfd" translate="yes" xml:space="preserve">
          <source>The comma operator includes multiple expressions where only one is expected. It evaluates each operand from left to right and returns the value of the last operand. However, this frequently obscures side effects, and its use is often an accident. Here are some examples of sequences:</source>
          <target state="translated">Оператор запятая включает в себя несколько выражений,где ожидается только одно.Он вычисляет каждый операнд слева направо и возвращает значение последнего операнда.Однако,это часто затушевывает побочные эффекты,и его использование часто бывает случайным.Приведем несколько примеров последовательностей:</target>
        </trans-unit>
        <trans-unit id="6cbddd96542ae6a1209e95d3af05dcfc89e192c0" translate="yes" xml:space="preserve">
          <source>The command line utility has several options. You can view the options by running &lt;code&gt;eslint -h&lt;/code&gt;.</source>
          <target state="translated">Утилита командной строки имеет несколько параметров. Вы можете просмотреть параметры, запустив &lt;code&gt;eslint -h&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c80af650686399cb1e0e7040218608587eb5be3" translate="yes" xml:space="preserve">
          <source>The commit message format is important because these messages are used to create a changelog for each release. The tag and issue number help to create more consistent and useful changelogs.</source>
          <target state="translated">Формат сообщений фиксации важен,так как эти сообщения используются для создания журнала изменений для каждого выпуска.Тэг и номер проблемы помогают создавать более последовательные и полезные журналы изменений.</target>
        </trans-unit>
        <trans-unit id="a8123064f7d126e4a3b589e9af343947dfe7c445" translate="yes" xml:space="preserve">
          <source>The commit message is properly formatted.</source>
          <target state="translated">Сообщение о фиксации правильно отформатировано.</target>
        </trans-unit>
        <trans-unit id="e4677fbe3218552fdaa136e42baa9d0c902d41ca" translate="yes" xml:space="preserve">
          <source>The common case of using &lt;code&gt;void&lt;/code&gt; operator is to get a &quot;pure&quot; &lt;code&gt;undefined&lt;/code&gt; value as prior to ES5 the &lt;code&gt;undefined&lt;/code&gt; variable was mutable:</source>
          <target state="translated">Обычный случай использования оператора &lt;code&gt;void&lt;/code&gt; - получить &quot;чистое&quot; &lt;code&gt;undefined&lt;/code&gt; значение, поскольку до ES5 &lt;code&gt;undefined&lt;/code&gt; переменная была изменяемой:</target>
        </trans-unit>
        <trans-unit id="affdad1a3137988828bd199a2283a60df1bc5075" translate="yes" xml:space="preserve">
          <source>The complete configuration hierarchy, from highest precedence to lowest precedence, is as follows:</source>
          <target state="translated">Полная иерархия конфигураций,от высшего до низшего приоритета,выглядит следующим образом:</target>
        </trans-unit>
        <trans-unit id="7505181a37b9fb762478197cf4096ed5622b8d1b" translate="yes" xml:space="preserve">
          <source>The config in &lt;code&gt;app/.eslintrc.json&lt;/code&gt; defines the glob pattern &lt;code&gt;**/*Spec.js&lt;/code&gt;. This pattern is relative to the base directory of &lt;code&gt;app/.eslintrc.json&lt;/code&gt;. So, this pattern would match &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; and &lt;code&gt;app/components/barSpec.js&lt;/code&gt; but &lt;strong&gt;NOT&lt;/strong&gt;&lt;code&gt;server/serverSpec.js&lt;/code&gt;. If you defined the same pattern in the &lt;code&gt;.eslintrc.json&lt;/code&gt; file within in the &lt;code&gt;project-root&lt;/code&gt; folder, it would match all three of the &lt;code&gt;*Spec&lt;/code&gt; files.</source>
          <target state="translated">Конфигурации в &lt;code&gt;app/.eslintrc.json&lt;/code&gt; определяет Глоб рисунок &lt;code&gt;**/*Spec.js&lt;/code&gt; . Этот шаблон относится к базовому каталогу &lt;code&gt;app/.eslintrc.json&lt;/code&gt; . Таким образом, этот шаблон будет соответствовать &lt;code&gt;app/lib/fooSpec.js&lt;/code&gt; и &lt;code&gt;app/components/barSpec.js&lt;/code&gt; , но &lt;strong&gt;НЕ &lt;/strong&gt; &lt;code&gt;server/serverSpec.js&lt;/code&gt; . Если вы определили такой же шаблон в файле &lt;code&gt;.eslintrc.json&lt;/code&gt; в &lt;code&gt;project-root&lt;/code&gt; папке проекта , он будет соответствовать всем трем файлам &lt;code&gt;*Spec&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="761a0c741d5f1588ef78c2680d748e9585f5469d" translate="yes" xml:space="preserve">
          <source>The configuration cascade works by using the closest &lt;code&gt;.eslintrc&lt;/code&gt; file to the file being linted as the highest priority, then any configuration files in the parent directory, and so on. When you run ESLint on this project, all files in &lt;code&gt;lib/&lt;/code&gt; will use the &lt;code&gt;.eslintrc&lt;/code&gt; file at the root of the project as their configuration. When ESLint traverses into the &lt;code&gt;tests/&lt;/code&gt; directory, it will then use &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; in addition to &lt;code&gt;your-project/.eslintrc&lt;/code&gt;. So &lt;code&gt;your-project/tests/test.js&lt;/code&gt; is linted based on the combination of the two &lt;code&gt;.eslintrc&lt;/code&gt; files in its directory hierarchy, with the closest one taking priority. In this way, you can have project-level ESLint settings and also have directory-specific overrides.</source>
          <target state="translated">Каскад конфигурации работает с использованием ближайшего &lt;code&gt;.eslintrc&lt;/code&gt; файлу .eslintrc файла с наивысшим приоритетом, затем любых файлов конфигурации в родительском каталоге и т. Д. Когда вы запускаете ESLint в этом проекте, все файлы в &lt;code&gt;lib/&lt;/code&gt; будут использовать файл &lt;code&gt;.eslintrc&lt;/code&gt; в корне проекта в качестве своей конфигурации. Когда ESLint переходит в каталог &lt;code&gt;tests/&lt;/code&gt; , он будет использовать &lt;code&gt;your-project/tests/.eslintrc&lt;/code&gt; в дополнение к &lt;code&gt;your-project/.eslintrc&lt;/code&gt; . Итак, &lt;code&gt;your-project/tests/test.js&lt;/code&gt; создается на основе комбинации двух &lt;code&gt;.eslintrc&lt;/code&gt; файлы в своей иерархии каталогов, причем ближайший имеет приоритет. Таким образом, вы можете иметь настройки ESLint на уровне проекта, а также иметь переопределения для конкретного каталога.</target>
        </trans-unit>
        <trans-unit id="dcdf3251f61da2ed7fea4070dd8de83ac8b210fc" translate="yes" xml:space="preserve">
          <source>The configuration that you have in your &lt;code&gt;.eslintrc&lt;/code&gt; file is an important part of your project, and as such, you may want to share it with other projects or people. Shareable configs allow you to publish your configuration settings on &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; and have others download and use it in their ESLint projects.</source>
          <target state="translated">Конфигурация, которая у вас есть в вашем &lt;code&gt;.eslintrc&lt;/code&gt; файле, является важной частью вашего проекта, и поэтому вы можете поделиться ею с другими проектами или людьми. Совместно используемые конфигурации позволяют публиковать параметры конфигурации в &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm,&lt;/a&gt; а другие загружают и используют их в своих проектах ESLint.</target>
        </trans-unit>
        <trans-unit id="32170e7d3eae30d6911a8ee9094599efb5b60bbf" translate="yes" xml:space="preserve">
          <source>The confusion around sparse arrays defined in this manner is enough that it's recommended to avoid using them unless you are certain that they are useful in your code.</source>
          <target state="translated">Путаницы вокруг разреженных массивов,определенных таким образом,достаточно,чтобы избежать их использования,если вы не уверены,что они полезны в вашем коде.</target>
        </trans-unit>
        <trans-unit id="84a32a3cbfb78fbed02519d25670fc0e1cc660ca" translate="yes" xml:space="preserve">
          <source>The constructor function is particularly useful when you want to dynamically generate the pattern, because it takes string arguments.</source>
          <target state="translated">Функция конструктора особенно полезна,когда нужно динамически генерировать шаблон,так как она принимает строковые аргументы.</target>
        </trans-unit>
        <trans-unit id="1c3dff42ca3b1d5caf72f42e977b149fee7f9002" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;if&lt;/code&gt; statement is an arrow function, not a comparison.</source>
          <target state="translated">Содержимое оператора &lt;code&gt;if&lt;/code&gt; является стрелочной функцией, а не сравнением.</target>
        </trans-unit>
        <trans-unit id="dc960e48baa84799c5c10650483220ba5c93ce2e" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular import may match more than one pattern.</source>
          <target state="translated">Пользовательское сообщение будет добавлено к сообщению об ошибке по умолчанию.Обратите внимание,что пользовательские сообщения об ошибках для ограниченных шаблонов могут не указываться,так как определенный импорт может соответствовать более чем одному шаблону.</target>
        </trans-unit>
        <trans-unit id="02091995aebc0237ea1f370d1e9e697cb283fce5" translate="yes" xml:space="preserve">
          <source>The custom message will be appended to the default error message. Please note that you may not specify custom error messages for restricted patterns as a particular module may match more than one pattern.</source>
          <target state="translated">Пользовательское сообщение будет добавлено к сообщению об ошибке по умолчанию.Обратите внимание,что пользовательские сообщения об ошибках для ограниченных шаблонов могут не указываться,так как конкретный модуль может соответствовать более чем одному шаблону.</target>
        </trans-unit>
        <trans-unit id="2db40330539be8a023ce70cd6de477ff5ec12779" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option can have exception options in an object literal:</source>
          <target state="translated">Параметр по умолчанию &lt;code&gt;&quot;never&quot;&lt;/code&gt; может иметь параметры исключения в литерале объекта:</target>
        </trans-unit>
        <trans-unit id="aad36d23c9c66cf621dc65a4fdf5357b747ebf25" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;&quot;object&quot;&lt;/code&gt; option requires the dot to be on the same line as the object.</source>
          <target state="translated">Параметр &lt;code&gt;&quot;object&quot;&lt;/code&gt; умолчанию требует, чтобы точка находилась на той же строке, что и объект.</target>
        </trans-unit>
        <trans-unit id="eb214d0a96891b20944eb86c406846b8c0682ec0" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</source>
          <target state="translated">Конфигурация по умолчанию - &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="796093e436a921806e600ed6ffc0bb010636d015" translate="yes" xml:space="preserve">
          <source>The default configuration is &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt;.</source>
          <target state="translated">Конфигурация по умолчанию - &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffd96c78ae8b308cef5ee180c2cafbcfe74c3226" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">По умолчанию - &lt;code&gt;&quot;always&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d709b74ae2cf658c17f26fdf6ce2c1bfe069742" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt;.</source>
          <target state="translated">По умолчанию используется &lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="535a63e8e2a6cdd1ad85243a0f44cac231300bc7" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt;.</source>
          <target state="translated">По умолчанию используется &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="baa5bd9ea8cd406c936d48459561cdc0703e1522" translate="yes" xml:space="preserve">
          <source>The default option (that is, no string option specified) for this rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0. The &lt;code&gt;&quot;function&quot;&lt;/code&gt; option is most similar to the removed option.</source>
          <target state="translated">Параметр по умолчанию (то есть строковый параметр не указан) для этого правила был &lt;strong&gt;удален&lt;/strong&gt; в ESLint v1.0. Вариант &lt;code&gt;&quot;function&quot;&lt;/code&gt; больше всего похож на удаленный вариант.</target>
        </trans-unit>
        <trans-unit id="ea560e9329be81e2a97fb02fb917528a08a7dfda" translate="yes" xml:space="preserve">
          <source>The default options for some rules have changed</source>
          <target state="translated">Опции по умолчанию для некоторых правил изменились</target>
        </trans-unit>
        <trans-unit id="e1b30fc08a505ea690637325f1e931c67ab9c7ce" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt;&lt;code&gt;no-confusing-arrow&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ allowParens: false }&lt;/code&gt; to &lt;code&gt;{ allowParens: true }&lt;/code&gt;.</source>
          <target state="translated">Параметры по умолчанию для правила, не &lt;code&gt;{ allowParens: false }&lt;/code&gt; &lt;a href=&quot;../rules/no-confusing-arrow&quot;&gt; &lt;code&gt;no-confusing-arrow&lt;/code&gt; &lt;/a&gt; , изменены с {allowParens: false} на &lt;code&gt;{ allowParens: true }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="544468a6bb41999c9c49e104c2162d56de2501c3" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/no-redeclare&quot;&gt;&lt;code&gt;no-redeclare&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; to &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt;. Additionally, the &lt;code&gt;no-redeclare&lt;/code&gt; rule will now report an error for globals enabled by comments like &lt;code&gt;/* global foo */&lt;/code&gt; if those globals were already enabled through configuration anyway.</source>
          <target state="translated">Параметры по умолчанию для правила &lt;a href=&quot;../rules/no-redeclare&quot;&gt; &lt;code&gt;no-redeclare&lt;/code&gt; &lt;/a&gt; изменены с &lt;code&gt;{ builtinGlobals: false }&lt;/code&gt; на &lt;code&gt;{ builtinGlobals: true }&lt;/code&gt; . Кроме того, правило &lt;code&gt;no-redeclare&lt;/code&gt; теперь будет сообщать об ошибке для глобальных объектов, включенных такими комментариями, как &lt;code&gt;/* global foo */&lt;/code&gt; если эти глобальные объекты уже были включены в конфигурации.</target>
        </trans-unit>
        <trans-unit id="4b68ac7ed408d41719943a7ec2a3599de96e8bf8" translate="yes" xml:space="preserve">
          <source>The default options for the &lt;a href=&quot;../rules/object-curly-newline&quot;&gt;&lt;code&gt;object-curly-newline&lt;/code&gt;&lt;/a&gt; rule have changed from &lt;code&gt;{ multiline: true }&lt;/code&gt; to &lt;code&gt;{ consistent: true }&lt;/code&gt;.</source>
          <target state="translated">Параметры по умолчанию для правила &quot; &lt;a href=&quot;../rules/object-curly-newline&quot;&gt; &lt;code&gt;object-curly-newline&lt;/code&gt; &lt;/a&gt; изменены с &lt;code&gt;{ multiline: true }&lt;/code&gt; на &lt;code&gt;{ consistent: true }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b7ab1e46a9e7c204637eb33434f00becfe8a66d" translate="yes" xml:space="preserve">
          <source>The default options object for the &lt;a href=&quot;../rules/no-self-assign&quot;&gt;&lt;code&gt;no-self-assign&lt;/code&gt;&lt;/a&gt; rule has changed from &lt;code&gt;{ props: false }&lt;/code&gt; to &lt;code&gt;{ props: true }&lt;/code&gt;.</source>
          <target state="translated">Объект параметров по умолчанию для правила &lt;a href=&quot;../rules/no-self-assign&quot;&gt; &lt;code&gt;no-self-assign&lt;/code&gt; &lt;/a&gt; изменен с &lt;code&gt;{ props: false }&lt;/code&gt; на &lt;code&gt;{ props: true }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f7d8ef8740358e7014a22b0fc66ddeed7cc30fcc" translate="yes" xml:space="preserve">
          <source>The default parser now validates options more strictly</source>
          <target state="translated">Парсер по умолчанию теперь проверяет опции более строго.</target>
        </trans-unit>
        <trans-unit id="cb91917a4ee5c4169d24eee0779ed1f5fecc0213" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option has been removed</source>
          <target state="translated">Устаревший вариант &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; объектаRestSpread был удален.</target>
        </trans-unit>
        <trans-unit id="417c3b37d6ea8d516aaec94e4251e5a47c517230" translate="yes" xml:space="preserve">
          <source>The difference between a marker and an exception is that a marker only appears at the beginning of the comment whereas exceptions can occur anywhere in the comment string.</source>
          <target state="translated">Разница между маркером и исключением заключается в том,что маркер появляется только в начале комментария,в то время как исключения могут встречаться в любом месте строки комментария.</target>
        </trans-unit>
        <trans-unit id="be6b4fc0012e62a768e63daa1d092d896e9cd14d" translate="yes" xml:space="preserve">
          <source>The difference between these two patterns is subtle, especially because the problematic empty pattern looks just like an object literal.</source>
          <target state="translated">Разница между этими двумя шаблонами тонкая,особенно потому,что проблематичный пустой шаблон выглядит так же,как и объект буквально.</target>
        </trans-unit>
        <trans-unit id="5f8c988db3120f6ad6d74976827259fee73007f6" translate="yes" xml:space="preserve">
          <source>The easiest way to start creating a plugin is to use the &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;Yeoman generator&lt;/a&gt;. The generator will guide you through setting up the skeleton of a plugin.</source>
          <target state="translated">Самый простой способ начать создание плагина - использовать &lt;a href=&quot;https://www.npmjs.com/package/generator-eslint&quot;&gt;генератор Yeoman&lt;/a&gt; . Генератор проведет вас через настройку скелета плагина.</target>
        </trans-unit>
        <trans-unit id="43705ef6db2efcf221d0e395d353b64954c6c747" translate="yes" xml:space="preserve">
          <source>The enclosed statements should be indented one more level than the compound statement.</source>
          <target state="translated">В прилагаемых заявлениях следует сделать отступы на один уровень больше,чем в комбинированном заявлении.</target>
        </trans-unit>
        <trans-unit id="b118bf659a71ae3c29fa483a5256dbcff0e3c82c" translate="yes" xml:space="preserve">
          <source>The end of the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">Конец блока &lt;code&gt;try&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4a0628012c2d77c4a62f2562528b964f8e826cdc" translate="yes" xml:space="preserve">
          <source>The error message.</source>
          <target state="translated">Сообщение об ошибке.</target>
        </trans-unit>
        <trans-unit id="8db72bff78f8373ee30f8c8fd310da3156ec6caa" translate="yes" xml:space="preserve">
          <source>The executor function can also be an &lt;code&gt;async function&lt;/code&gt;. However, this is usually a mistake, for a few reasons:</source>
          <target state="translated">Функция-исполнитель также может быть &lt;code&gt;async function&lt;/code&gt; . Однако обычно это ошибка по нескольким причинам:</target>
        </trans-unit>
        <trans-unit id="747871d96446f5608c3230dad0216525a21179fa" translate="yes" xml:space="preserve">
          <source>The executor function usually initiates some asynchronous operation. Once it is finished, the executor should call &lt;code&gt;resolve&lt;/code&gt; with the result, or &lt;code&gt;reject&lt;/code&gt; if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f85a36ed894f5ee40529023db3887ad5bbee0c" translate="yes" xml:space="preserve">
          <source>The exported function receives an optional second argument named &lt;code&gt;data&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; object provides extended information related to the analysis results. Currently, the &lt;code&gt;data&lt;/code&gt; object consists of a single property named &lt;code&gt;rulesMeta&lt;/code&gt;. This property is a dictionary of rule metadata, keyed with &lt;code&gt;ruleId&lt;/code&gt;. The value for each entry is the &lt;code&gt;meta&lt;/code&gt; property from the corresponding rule object. The dictionary contains an entry for each rule that was run during the analysis.</source>
          <target state="translated">Экспортируемая функция получает необязательный второй аргумент с именем &lt;code&gt;data&lt;/code&gt; . Объект &lt;code&gt;data&lt;/code&gt; предоставляет расширенную информацию, относящуюся к результатам анализа. В настоящее время объект &lt;code&gt;data&lt;/code&gt; состоит из одного свойства с именем &lt;code&gt;rulesMeta&lt;/code&gt; . Это свойство представляет собой словарь метаданных правил с ключом &lt;code&gt;ruleId&lt;/code&gt; . Значение для каждой записи - это &lt;code&gt;meta&lt;/code&gt; свойство из соответствующего объекта правила. Словарь содержит запись для каждого правила, которое было выполнено во время анализа.</target>
        </trans-unit>
        <trans-unit id="10638ad26a2336c237513cb7fa8ba9e360e6572f" translate="yes" xml:space="preserve">
          <source>The expressions in a &lt;code&gt;for&lt;/code&gt; statement should be separated by blank spaces. Blank spaces should only be used after semicolons, not before.</source>
          <target state="translated">Выражения в операторе &lt;code&gt;for&lt;/code&gt; следует разделять пробелами. Пробелы следует использовать только после точки с запятой, но не до нее.</target>
        </trans-unit>
        <trans-unit id="fc9043ab9742cf8199292ae41ac858900ddd79ad" translate="yes" xml:space="preserve">
          <source>The filtered &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects.</source>
          <target state="translated">Отфильтрованные объекты &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0857209508949425ce9520e024dc97908dd75683" translate="yes" xml:space="preserve">
          <source>The first is a string which be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">Первая - это строка, которая может быть либо &lt;code&gt;&quot;always&quot;&lt;/code&gt; либо &lt;code&gt;&quot;never&quot;&lt;/code&gt; . По умолчанию - &lt;code&gt;&quot;always&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c11e634588bcc74080a015687bda5aa0bfac1d9" translate="yes" xml:space="preserve">
          <source>The first is using &lt;code&gt;setTimeout()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt; or &lt;code&gt;execScript()&lt;/code&gt; (Internet Explorer only), all of which can accept a string of JavaScript code as their first argument. For example:</source>
          <target state="translated">Первый - это использование &lt;code&gt;setTimeout()&lt;/code&gt; , &lt;code&gt;setInterval()&lt;/code&gt; или &lt;code&gt;execScript()&lt;/code&gt; (только для Internet Explorer), каждый из которых может принимать строку кода JavaScript в качестве своего первого аргумента. Например:</target>
        </trans-unit>
        <trans-unit id="6d4bbf2fb18f805ebaadc20bfc29b2a73d3969ac" translate="yes" xml:space="preserve">
          <source>The first line contains only the &lt;code&gt;/*&lt;/code&gt; comment opening. No further text is allowed on this line.</source>
          <target state="translated">Первая строка содержит только начало комментария &lt;code&gt;/*&lt;/code&gt; . В этой строке не допускается дальнейший текст.</target>
        </trans-unit>
        <trans-unit id="6154e02adfa070a6b3e169f562e328e046578b3d" translate="yes" xml:space="preserve">
          <source>The first line of multi-comments should be indented to the same level as the code it describes. Each subsequent line should have the same indentation plus one space (for proper alignment of the &lt;code&gt;*&lt;/code&gt; characters). Each multi-line comment should be preceded by one empty line.</source>
          <target state="translated">Первая строка мультикомментариев должна иметь отступ до того же уровня, что и код, который она описывает. Каждая последующая строка должна иметь такой же отступ плюс один пробел (для правильного выравнивания символов &lt;code&gt;*&lt;/code&gt; ). Каждому многострочному комментарию должна предшествовать одна пустая строка.</target>
        </trans-unit>
        <trans-unit id="5072260dd42b4b3af826cc62dd8fbb33239f1233" translate="yes" xml:space="preserve">
          <source>The first line of the commit message (the summary) must have a specific format. This format is checked by our build tools.</source>
          <target state="translated">Первая строка сообщения о фиксации (резюме)должна иметь определённый формат.Этот формат проверяется нашими инструментами сборки.</target>
        </trans-unit>
        <trans-unit id="eaba518aba6a1d6f3d301b713e35495cf26fd58b" translate="yes" xml:space="preserve">
          <source>The first problem is that primitive wrapper objects are, in fact, objects. That means &lt;code&gt;typeof&lt;/code&gt; will return &lt;code&gt;&quot;object&quot;&lt;/code&gt; instead of &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, or &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;. The second problem comes with boolean objects. Every object is truthy, that means an instance of &lt;code&gt;Boolean&lt;/code&gt; always resolves to &lt;code&gt;true&lt;/code&gt; even when its actual value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Первая проблема состоит в том, что примитивные объекты-оболочки фактически являются объектами. Это означает, что &lt;code&gt;typeof&lt;/code&gt; вернет &lt;code&gt;&quot;object&quot;&lt;/code&gt; вместо &lt;code&gt;&quot;string&quot;&lt;/code&gt; , &lt;code&gt;&quot;number&quot;&lt;/code&gt; или &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; . Вторая проблема связана с логическими объектами. Каждый объект истинен, это означает, что экземпляр &lt;code&gt;Boolean&lt;/code&gt; всегда принимает значение &lt;code&gt;true&lt;/code&gt; , даже если его фактическое значение &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="984bf5268b0ddf754b28d771410a618bd31b5080" translate="yes" xml:space="preserve">
          <source>The first step to sending a pull request is to create a new branch in your ESLint fork. Give the branch a descriptive name that describes what it is you're fixing, such as:</source>
          <target state="translated">Первым шагом к отправке запроса на подтягивание является создание новой ветки в развилке ESLint.Дайте ветке описательное имя,которое описывает,что вы исправляете,например:</target>
        </trans-unit>
        <trans-unit id="89a5d6f7116af9ee2720543818896897a369050f" translate="yes" xml:space="preserve">
          <source>The first throwable node (e.g. a function call) in the &lt;code&gt;try&lt;/code&gt; block.</source>
          <target state="translated">Первый бросаемый узел (например, вызов функции) в блоке &lt;code&gt;try&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d71475a3d6080cbad00254ef62ed2324f9e45663" translate="yes" xml:space="preserve">
          <source>The first way to use configuration files is via &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem (unless &lt;code&gt;root: true&lt;/code&gt; is specified). This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.</source>
          <target state="translated">Первый способ использовать файлы конфигурации - через файлы &lt;code&gt;.eslintrc.*&lt;/code&gt; И &lt;code&gt;package.json&lt;/code&gt; . ESLint автоматически будет искать их в каталоге файла, который нужно линковать, и в последующих родительских каталогах вплоть до корневого каталога файловой системы (если не указан &lt;code&gt;root: true&lt;/code&gt; ). Эта опция полезна, когда вам нужны разные конфигурации для разных частей проекта или когда вы хотите, чтобы другие могли использовать ESLint напрямую, без необходимости помнить о передаче файла конфигурации.</target>
        </trans-unit>
        <trans-unit id="cc7819bcb56a4f8a3f4c63d8cc7e3fc0c5244e52" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;--ignore-pattern&lt;/code&gt; is also equivalent:</source>
          <target state="translated">Следующий &lt;code&gt;--ignore-pattern&lt;/code&gt; также эквивалентен:</target>
        </trans-unit>
        <trans-unit id="7899f93b94b39beef8a71db444282ddbbd5e7124" translate="yes" xml:space="preserve">
          <source>The following configuration ignores indentation in the body of IIFEs.</source>
          <target state="translated">Следующая конфигурация игнорирует отступ в теле IIFE.</target>
        </trans-unit>
        <trans-unit id="41c40b6e586fc5cb09bbc72af12c8f09e123d736" translate="yes" xml:space="preserve">
          <source>The following configuration ignores the indentation of &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;ternary expression&quot;) nodes:</source>
          <target state="translated">Следующая конфигурация игнорирует отступ узлов &lt;code&gt;ConditionalExpression&lt;/code&gt; (&quot;троичное выражение&quot;):</target>
        </trans-unit>
        <trans-unit id="d5fa8b20b228bdd086131e38e40e897cbd6cbf7a" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will not&lt;/strong&gt; be flagged:</source>
          <target state="translated">Следующие примеры &lt;strong&gt;не&lt;/strong&gt; будут отмечены:</target>
        </trans-unit>
        <trans-unit id="f5287d99a37de7104aa2ed235baa902a0ec5078d" translate="yes" xml:space="preserve">
          <source>The following examples &lt;strong&gt;will&lt;/strong&gt; be flagged:</source>
          <target state="translated">&lt;strong&gt;Будут&lt;/strong&gt; отмечены следующие примеры :</target>
        </trans-unit>
        <trans-unit id="c14ba9c0ea8a095e66d6957614fae22fac370baf" translate="yes" xml:space="preserve">
          <source>The following exceptions are available:</source>
          <target state="translated">Имеются следующие исключения:</target>
        </trans-unit>
        <trans-unit id="cf3496b833b4ce7626fcd6541bf610fb0c36af11" translate="yes" xml:space="preserve">
          <source>The following exceptions are available: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt;.</source>
          <target state="translated">Доступны следующие исключения: &lt;code&gt;[&quot;{}&quot;, &quot;[]&quot;, &quot;()&quot;, &quot;empty&quot;]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fc06f672c1606cd07e74f3dea672e030eb3b9e95" translate="yes" xml:space="preserve">
          <source>The following is another example of this behavior:</source>
          <target state="translated">Ниже приведен еще один пример такого поведения:</target>
        </trans-unit>
        <trans-unit id="2a56e159d769ca06392168750d10004a388bb2d2" translate="yes" xml:space="preserve">
          <source>The following methods internally use the &lt;code&gt;===&lt;/code&gt; comparison to match the given value with an array element:</source>
          <target state="translated">Следующие методы внутренне используют сравнение &lt;code&gt;===&lt;/code&gt; для сопоставления заданного значения с элементом массива:</target>
        </trans-unit>
        <trans-unit id="5d5534fd1ddcbfd687919d332b483e9a80e0f5bb" translate="yes" xml:space="preserve">
          <source>The following operators can be used in &lt;code&gt;groups&lt;/code&gt; option:</source>
          <target state="translated">В опции &lt;code&gt;groups&lt;/code&gt; можно использовать следующие операторы :</target>
        </trans-unit>
        <trans-unit id="6b976bf24d5d6d504746e7c6ab5309ec8057839f" translate="yes" xml:space="preserve">
          <source>The following parsers are compatible with ESLint:</source>
          <target state="translated">Следующие парсеры совместимы с ESLint:</target>
        </trans-unit>
        <trans-unit id="0d78993759d70053fb65fd89fcd97c00ecd762fb" translate="yes" xml:space="preserve">
          <source>The following pattern is under strict mode globally and is considered valid with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option and a warning with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option.</source>
          <target state="translated">Следующий шаблон находится в строгом режиме глобально и считается допустимым с параметром &lt;code&gt;&quot;always&quot;&lt;/code&gt; и предупреждением с параметром &lt;code&gt;&quot;never&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d729325dfb7e6f59aa92e87801a3213c9448843d" translate="yes" xml:space="preserve">
          <source>The following patterns apply strict mode only to functions so are valid with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option but are problems with the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option.</source>
          <target state="translated">Следующие шаблоны применяют строгий режим только к функциям, поэтому они действительны с параметром &lt;code&gt;&quot;never&quot;&lt;/code&gt; но являются проблемами с параметром &lt;code&gt;&quot;always&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c8beda3159d864bcb7168811d6ca919b1da89c2" translate="yes" xml:space="preserve">
          <source>The following rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">В &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; &lt;/a&gt; добавлены следующие правила : рекомендуемый конфиг :</target>
        </trans-unit>
        <trans-unit id="43d343a3ec041d356d216b275ad524155322bd82" translate="yes" xml:space="preserve">
          <source>The following rules have been deprecated with new rules created to take their place. The following is a list of the removed rules and their replacements:</source>
          <target state="translated">Следующие правила были устаревшие с новыми правилами,созданными для их замены.Ниже приведен список удаленных правил и их замена:</target>
        </trans-unit>
        <trans-unit id="fd8fba26361e9e9eea3de62de397689436cfaa0d" translate="yes" xml:space="preserve">
          <source>The following rules were modified:</source>
          <target state="translated">Были изменены следующие правила:</target>
        </trans-unit>
        <trans-unit id="cbf28d7aa679ef7fb32bcf23869dde2a833ca6c5" translate="yes" xml:space="preserve">
          <source>The following rules were removed from &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">Следующие правила были удалены из &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4b1c496bbd734835e82ecba2dcd535dd72437441" translate="yes" xml:space="preserve">
          <source>The following selectors are supported:</source>
          <target state="translated">Поддерживаются следующие селекторы:</target>
        </trans-unit>
        <trans-unit id="50fe0ca19519467513afe9de899977912a5dca9e" translate="yes" xml:space="preserve">
          <source>The function declaration portion rule will be rendered obsolete when &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;block-scoped functions&lt;/a&gt; land in ES6, but until then, it should be left on to enforce valid constructions. Disable checking variable declarations when using &lt;a href=&quot;block-scoped-var&quot;&gt;block-scoped-var&lt;/a&gt; or if declaring variables in nested blocks is acceptable despite hoisting.</source>
          <target state="translated">Правило части объявления функции будет считаться устаревшим, когда функции с &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=585536&quot;&gt;блочной областью видимости&lt;/a&gt; попадут в ES6, но до тех пор его следует оставить, чтобы обеспечить соблюдение допустимых конструкций. Отключите проверку объявлений переменных при использовании переменной с &lt;a href=&quot;block-scoped-var&quot;&gt;областью действия блока&lt;/a&gt; или если объявление переменных во вложенных блоках допустимо, несмотря на подъем.</target>
        </trans-unit>
        <trans-unit id="db3dccfd930abb34e566f04f78fc9ed70b467b0b" translate="yes" xml:space="preserve">
          <source>The function has &lt;code&gt;@this&lt;/code&gt; tag in its JSDoc comment.</source>
          <target state="translated">В комментарии JSDoc функции есть тег &lt;code&gt;@this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5620d241e1ebd93a4e8ac57b317c474f477713ad" translate="yes" xml:space="preserve">
          <source>The function invocation can be written by &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt;. But &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; are slower than the normal function invocation.</source>
          <target state="translated">Вызов функции может быть записан с помощью &lt;code&gt;Function.prototype.call()&lt;/code&gt; и &lt;code&gt;Function.prototype.apply()&lt;/code&gt; . Но &lt;code&gt;Function.prototype.call()&lt;/code&gt; и &lt;code&gt;Function.prototype.apply()&lt;/code&gt; работают медленнее, чем обычный вызов функции.</target>
        </trans-unit>
        <trans-unit id="a5351ac484a8bf3cb3ea45d7dd69d4667a894926" translate="yes" xml:space="preserve">
          <source>The function is a callback of array methods (such as &lt;code&gt;.forEach()&lt;/code&gt;) if &lt;code&gt;thisArg&lt;/code&gt; is given.</source>
          <target state="translated">Функция является обратным вызовом методов массива (таких как &lt;code&gt;.forEach()&lt;/code&gt; ), если &lt;code&gt;thisArg&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="deb40c3066f6e38deb8139ba56f87dc333a2a42d" translate="yes" xml:space="preserve">
          <source>The function is a constructor of ES2015 Classes.</source>
          <target state="translated">Функция является конструктором классов ES2015.</target>
        </trans-unit>
        <trans-unit id="de02b593b295da2bc2bad8e8f15be1427537b0d8" translate="yes" xml:space="preserve">
          <source>The function is a method/getter/setter of ES2015 Classes. (excepts static methods)</source>
          <target state="translated">Функция является методом/загрузчиком/загрузчиком классов ES2015.(исключает статические методы)</target>
        </trans-unit>
        <trans-unit id="58b8b313fb5fc9cea0cb6de31e257ad439368b79" translate="yes" xml:space="preserve">
          <source>The function is assigned to a property.</source>
          <target state="translated">Функция присваивается свойству.</target>
        </trans-unit>
        <trans-unit id="1ec2f55a7c94721043c141bc1c6ef3a223affda5" translate="yes" xml:space="preserve">
          <source>The function is assigned to a variable which starts with an uppercase letter.</source>
          <target state="translated">Функция присваивается переменной,которая начинается с прописной буквы.</target>
        </trans-unit>
        <trans-unit id="f1a468e18550838069874f9e16dfdc8a15a09a28" translate="yes" xml:space="preserve">
          <source>The function is on an object literal.</source>
          <target state="translated">Функция находится на объекте буквально.</target>
        </trans-unit>
        <trans-unit id="24287496e1c3d7550a774298bb9d98fa77335f61" translate="yes" xml:space="preserve">
          <source>The function's</source>
          <target state="translated">Функция</target>
        </trans-unit>
        <trans-unit id="aeaafe54aaf295b5e3e4fde9b2befddf145018a6" translate="yes" xml:space="preserve">
          <source>The get syntax binds an object property to a function that will be called when that property is looked up. It was first introduced in ECMAScript 5:</source>
          <target state="translated">Синтаксис get связывает свойство объекта с функцией,которая будет вызвана при поиске этого свойства.Впервые он был представлен в ECMAScript 5:</target>
        </trans-unit>
        <trans-unit id="5303cca7341f758ff7259b4665508fac4ca8d017" translate="yes" xml:space="preserve">
          <source>The global's</source>
          <target state="translated">Мировой</target>
        </trans-unit>
        <trans-unit id="cd1ea1f16f00e056aa55de069fc2ba6f16e8946b" translate="yes" xml:space="preserve">
          <source>The goal of using &lt;code&gt;new&lt;/code&gt; with a constructor is typically to create an object of a particular type and store that object in a variable, such as:</source>
          <target state="translated">Целью использования &lt;code&gt;new&lt;/code&gt; с конструктором обычно является создание объекта определенного типа и сохранение этого объекта в переменной, например:</target>
        </trans-unit>
        <trans-unit id="acac3d2c78a0442ff5e1d6b8f826069158684f0b" translate="yes" xml:space="preserve">
          <source>The implementation is not aware of any local functions with the name &lt;code&gt;require&lt;/code&gt; that may shadow Node.js' global &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">Реализация не знает о каких - либо локальных функциях с именем &lt;code&gt;require&lt;/code&gt; , что может теневой Node.js' глобальный &lt;code&gt;require&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="032f95f2ad52750fe42b95d8612f0f3b8a88f333" translate="yes" xml:space="preserve">
          <source>The import statement can also import a module without exported bindings. Used when the module does not export anything, but runs it own code or changes the global context object.</source>
          <target state="translated">Оператор импорта также может импортировать модуль без экспортированных привязок.Используется,когда модуль ничего не экспортирует,а запускает собственный код или изменяет объект глобального контекста.</target>
        </trans-unit>
        <trans-unit id="0eeaf642c54558bc59a95b083b854c711c38cc2b" translate="yes" xml:space="preserve">
          <source>The import statement is used to import members (functions, objects or primitives) that have been exported from an external module. Using a specific member syntax:</source>
          <target state="translated">Оператор импорта используется для импорта членов (функций,объектов или примитивов),которые были экспортированы из внешнего модуля.Используя определенный синтаксис членов:</target>
        </trans-unit>
        <trans-unit id="828330981111cc0aaf5513c653c9b3ff72d6b8c6" translate="yes" xml:space="preserve">
          <source>The information about the deprecated rules that were used to check this file.</source>
          <target state="translated">Информация об устаревших правилах,которые использовались для проверки этого файла.</target>
        </trans-unit>
        <trans-unit id="4a80f2125f069a5f1c92caf6dad61a91aa823038" translate="yes" xml:space="preserve">
          <source>The information available for each linting message is:</source>
          <target state="translated">Доступна информация для каждого сообщения о переплетении:</target>
        </trans-unit>
        <trans-unit id="7675327e3125cbdffe94a48f7416e4309f48e134" translate="yes" xml:space="preserve">
          <source>The information available is:</source>
          <target state="translated">Информация доступна:</target>
        </trans-unit>
        <trans-unit id="026fee076803b9a433c8e9acb756fb2b3e489841" translate="yes" xml:space="preserve">
          <source>The kind of the way to address variables in destructuring. There are 2 values:</source>
          <target state="translated">Способ обращения к переменным при разрушении.Есть 2 значения:</target>
        </trans-unit>
        <trans-unit id="c38f57d73e2ff10d4366adce9c62d418943b8650" translate="yes" xml:space="preserve">
          <source>The last line has the &lt;code&gt;*/&lt;/code&gt; comment opening aligned with the preceding lines. No other text is allowed on this line.</source>
          <target state="translated">В последней строке начало комментария &lt;code&gt;*/&lt;/code&gt; выровнено с предыдущими строками. В этой строке нельзя использовать другой текст.</target>
        </trans-unit>
        <trans-unit id="cf2418cd74bfe3b3574af71ae7e2102cc8457373" translate="yes" xml:space="preserve">
          <source>The line comment &lt;code&gt;// exported variableName&lt;/code&gt; will not work as &lt;code&gt;exported&lt;/code&gt; is not line-specific.</source>
          <target state="translated">Комментарий к строке &lt;code&gt;// exported variableName&lt;/code&gt; не будет работать, так как &lt;code&gt;exported&lt;/code&gt; строка не зависит от конкретной строки.</target>
        </trans-unit>
        <trans-unit id="dd3923f68fea3cc32c62bea7c26b00e55243f62f" translate="yes" xml:space="preserve">
          <source>The line is &lt;code&gt;--&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)</source>
          <target state="translated">Строка &lt;code&gt;--&lt;/code&gt; или &lt;code&gt;++&lt;/code&gt; (в этом случае она будет уменьшать / увеличивать следующий токен.)</target>
        </trans-unit>
        <trans-unit id="8fc6d3dc22f28ddac02852365e2f486c4a9fbcb1" translate="yes" xml:space="preserve">
          <source>The linebreaks (new lines) used in windows operating system are usually &lt;em&gt;carriage returns&lt;/em&gt; (CR) followed by a &lt;em&gt;line feed&lt;/em&gt; (LF) making it a &lt;em&gt;carriage return line feed&lt;/em&gt; (CRLF) whereas Linux and Unix use a simple &lt;em&gt;line feed&lt;/em&gt; (LF). The corresponding &lt;em&gt;control sequences&lt;/em&gt; are &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (for LF) and &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; for (CRLF).</source>
          <target state="translated">Разрывы строк (новые строки), используемые в операционной системе Windows, обычно представляют собой &lt;em&gt;символы возврата каретки&lt;/em&gt; (CR), за которыми следует &lt;em&gt;перевод строки&lt;/em&gt; (LF), что делает его &lt;em&gt;переводом строки возврата каретки&lt;/em&gt; (CRLF), тогда как Linux и Unix используют простой &lt;em&gt;перевод строки&lt;/em&gt; (LF). Соответствующие &lt;em&gt;управляющие последовательности&lt;/em&gt; - &lt;code&gt;&quot;\n&quot;&lt;/code&gt; (для LF) и &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; для (CRLF).</target>
        </trans-unit>
        <trans-unit id="26d7358730984ec96df0ef330056949a6cca706a" translate="yes" xml:space="preserve">
          <source>The lint target files. This can contain any of file paths, directory paths, and glob patterns.</source>
          <target state="translated">Внутренние целевые файлы.Он может содержать любые пути к файлам,пути к каталогам и шаблоны глобусов.</target>
        </trans-unit>
        <trans-unit id="6ba0efe7b079abf8625759c3ee06d0fef820cbba" translate="yes" xml:space="preserve">
          <source>The list of suggestions. Each suggestion is the pair of a description and an &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; object to fix code. API users such as editor integrations can choose one of them to fix the problem of this message. This property is undefined if this message doesn't have any suggestions.</source>
          <target state="translated">Список предложений. Каждое предложение - это пара описания и объекта &lt;a href=&quot;#-editinfo-type&quot;&gt;EditInfo&lt;/a&gt; для исправления кода. Пользователи API, такие как интеграторы редактора, могут выбрать один из них, чтобы исправить проблему с этим сообщением. Это свойство не определено, если в этом сообщении нет предложений.</target>
        </trans-unit>
        <trans-unit id="2201d7d5091e9b276f0386c81e6c9e6b5aad5f13" translate="yes" xml:space="preserve">
          <source>The lists below are ordered roughly by the number of users each change is expected to affect, where the first items are expected to affect the most users.</source>
          <target state="translated">Приведенные ниже списки упорядочены примерно по количеству пользователей,на которых каждое изменение,как ожидается,повлияет,где первые пункты,как ожидается,повлияют на большинство пользователей.</target>
        </trans-unit>
        <trans-unit id="cd5ba3dd3a61a71ce3c2df5c8c27632dbb8e611b" translate="yes" xml:space="preserve">
          <source>The main method is &lt;code&gt;cli.execute()&lt;/code&gt;, which accepts an array of strings that represent the command line options (as if &lt;code&gt;process.argv&lt;/code&gt; were passed without the first two arguments). If you want to run ESLint from inside of another program and have it act like the CLI, then &lt;code&gt;cli&lt;/code&gt; is the object to use.</source>
          <target state="translated">Основным методом является &lt;code&gt;cli.execute()&lt;/code&gt; , который принимает массив строк, представляющих параметры командной строки (как если бы &lt;code&gt;process.argv&lt;/code&gt; был передан без первых двух аргументов). Если вы хотите запустить ESLint изнутри другой программы и заставить его работать как CLI, тогда &lt;code&gt;cli&lt;/code&gt; - это объект, который нужно использовать.</target>
        </trans-unit>
        <trans-unit id="82c7fc418c96dfe485b72e97d5785c7b1f84d1d1" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;CLIEngine&lt;/code&gt; is &lt;code&gt;executeOnFiles()&lt;/code&gt;, which accepts an array of file and directory names to run the linter on.</source>
          <target state="translated">Основным методом &lt;code&gt;CLIEngine&lt;/code&gt; является &lt;code&gt;executeOnFiles()&lt;/code&gt; , который принимает массив имен файлов и каталогов для запуска линтера.</target>
        </trans-unit>
        <trans-unit id="aa5cd71ecca317561d0f3120437420e4eb266e86" translate="yes" xml:space="preserve">
          <source>The main method of the &lt;code&gt;Linter&lt;/code&gt; object is &lt;code&gt;verify()&lt;/code&gt; and accepts two arguments: the source text to verify and a configuration object (the baked configuration of the given configuration file plus command line options). The method first parses the given text with &lt;code&gt;espree&lt;/code&gt; (or whatever the configured parser is) and retrieves the AST. The AST is produced with both line/column and range locations which are useful for reporting location of issues and retrieving the source text related to an AST node, respectively.</source>
          <target state="translated">Основным методом объекта &lt;code&gt;Linter&lt;/code&gt; является &lt;code&gt;verify()&lt;/code&gt; принимает два аргумента: исходный текст для проверки и объект конфигурации (запеченная конфигурация данного файла конфигурации плюс параметры командной строки). Метод сначала анализирует заданный текст с помощью &lt;code&gt;espree&lt;/code&gt; (или другого настроенного парсера) и извлекает AST. AST создается с местоположениями строк / столбцов и диапазонов, которые полезны для сообщения о местоположении проблем и получения исходного текста, относящегося к узлу AST, соответственно.</target>
        </trans-unit>
        <trans-unit id="b71267395abe4b458e8e16055642b9f1606731d6" translate="yes" xml:space="preserve">
          <source>The main method you'll use is &lt;code&gt;context.report()&lt;/code&gt;, which publishes a warning or error (depending on the configuration being used). This method accepts a single argument, which is an object containing the following properties:</source>
          <target state="translated">Основным методом, который вы будете использовать, является &lt;code&gt;context.report()&lt;/code&gt; , который публикует предупреждение или ошибку (в зависимости от используемой конфигурации). Этот метод принимает единственный аргумент, который представляет собой объект, содержащий следующие свойства:</target>
        </trans-unit>
        <trans-unit id="2aa043d4f97cda6b2c4e5a4d1829ce7593f304b2" translate="yes" xml:space="preserve">
          <source>The message summary should be a one-sentence description of the change, and it must be 72 characters in length or shorter. If the pull request addresses an issue, then the issue number should be mentioned at the end. If the commit doesn't completely fix the issue, then use &lt;code&gt;(refs #1234)&lt;/code&gt; instead of &lt;code&gt;(fixes #1234)&lt;/code&gt;.</source>
          <target state="translated">Сводка сообщения должна состоять из одного предложения, описывающего изменение, и содержать не менее 72 символов. Если запрос на вытягивание решает проблему, в конце следует указать номер проблемы. Если фиксация полностью не устраняет проблему, используйте &lt;code&gt;(refs #1234)&lt;/code&gt; вместо &lt;code&gt;(fixes #1234)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6fc4e5ab9c1873762f005496619a765f850f8b95" translate="yes" xml:space="preserve">
          <source>The method to convert the &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; objects to text.</source>
          <target state="translated">Метод преобразования объектов &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; в текст.</target>
        </trans-unit>
        <trans-unit id="447ba6b4ad05e52da0b122358fe9cf1656020fec" translate="yes" xml:space="preserve">
          <source>The modification does not depend on whether the object option is set to &lt;code&gt;true&lt;/code&gt;. In other words, ESLint never collects all the property specifications onto a single line, even when the object option would permit that.</source>
          <target state="translated">Модификация не зависит от того, установлено ли для параметра объекта значение &lt;code&gt;true&lt;/code&gt; . Другими словами, ESLint никогда не собирает все спецификации свойств в одну строку, даже если опция объекта позволяет это.</target>
        </trans-unit>
        <trans-unit id="928b12c02eeb60a25ebbe56b73b080bf2235439f" translate="yes" xml:space="preserve">
          <source>The modified source code text. This property is undefined if any fixable messages didn't exist.</source>
          <target state="translated">Модифицированный текст исходного кода.Это свойство не определено,если не существовало исправляемых сообщений.</target>
        </trans-unit>
        <trans-unit id="d8b8c078bf2e1f6851bd595f2c2f5cc6bbf13048" translate="yes" xml:space="preserve">
          <source>The module name can also be customized, just note that when using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config-&lt;/code&gt; prefix. Doing so would result in package naming conflicts, and thus in resolution errors in most of cases. For example a package named &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt;, since both are valid scoped package names, the configuration should be specified as:</source>
          <target state="translated">Имя модуля также можно настроить, просто обратите внимание, что при использовании &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;модулей&lt;/a&gt; с &lt;code&gt;eslint-config-&lt;/code&gt; невозможно опустить префикс eslint-config- . Это может привести к конфликтам именования пакетов и, следовательно, к ошибкам разрешения в большинстве случаев. Например, пакет с именем &lt;code&gt;@scope/eslint-config-myconfig&lt;/code&gt; vs &lt;code&gt;@scope/my-config&lt;/code&gt; , поскольку оба являются допустимыми именами пакетов с ограниченной областью видимости, конфигурация должна быть указана как:</target>
        </trans-unit>
        <trans-unit id="391d507111f772a5e622a4978aa02bebdf000901" translate="yes" xml:space="preserve">
          <source>The most important difference in v1.0.0 is that all rules are off by default. We made this change after numerous requests to allow turning off the default rules from within configuration files. While that wasn't technically feasible, it was feasible to have all rules off by default and then re-enable rules in configuration files using &lt;code&gt;extends&lt;/code&gt;. As such, we've made the &lt;code&gt;--reset&lt;/code&gt; behavior the default and removed this command line option.</source>
          <target state="translated">Самым важным отличием v1.0.0 является то, что по умолчанию все правила отключены. Мы внесли это изменение после многочисленных запросов, позволяющих отключить правила по умолчанию из файлов конфигурации. Хотя это было технически неосуществимо, можно было отключить все правила по умолчанию, а затем повторно включить правила в файлах конфигурации с помощью &lt;code&gt;extends&lt;/code&gt; . Таким образом, мы сделали поведение &lt;code&gt;--reset&lt;/code&gt; по умолчанию и удалили этот параметр командной строки.</target>
        </trans-unit>
        <trans-unit id="2981f174eb319000ec7b9dc71dff618ba3924b94" translate="yes" xml:space="preserve">
          <source>The most important method on &lt;code&gt;Linter&lt;/code&gt; is &lt;code&gt;verify()&lt;/code&gt;, which initiates linting of the given text. This method accepts three arguments:</source>
          <target state="translated">Самый важный метод на &lt;code&gt;Linter&lt;/code&gt; это &lt;code&gt;verify()&lt;/code&gt; , который инициирует пылеобразования данного текста. Этот метод принимает три аргумента:</target>
        </trans-unit>
        <trans-unit id="2d9309f4804540bc446c7db5a5a0e204ff20ebd8" translate="yes" xml:space="preserve">
          <source>The name of the function starts with uppercase.</source>
          <target state="translated">Название функции начинается с верхнего регистра.</target>
        </trans-unit>
        <trans-unit id="c187d7bc3b11447dcbf3b003402ff51671b83ee4" translate="yes" xml:space="preserve">
          <source>The name of the rule (string)</source>
          <target state="translated">Имя правила (строки)</target>
        </trans-unit>
        <trans-unit id="3d05f85495e18f50c10102d3389fcbc9d5973e21" translate="yes" xml:space="preserve">
          <source>The names &lt;code&gt;&quot;semi&quot;&lt;/code&gt; and &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; are the names of &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules&lt;/a&gt; in ESLint. The first value is the error level of the rule and can be one of these values:</source>
          <target state="translated">Имена &lt;code&gt;&quot;semi&quot;&lt;/code&gt; и &lt;code&gt;&quot;quotes&quot;&lt;/code&gt; - это названия &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;правил&lt;/a&gt; в ESLint. Первое значение - это уровень ошибки правила и может быть одним из следующих значений:</target>
        </trans-unit>
        <trans-unit id="03f1e3c6076e63d911680ce1f195f2b2861a99e5" translate="yes" xml:space="preserve">
          <source>The next line starts with &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, or some other binary operator that can only be found between two tokens in a single expression.</source>
          <target state="translated">В следующей строке начинается с &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;(&lt;/code&gt; , &lt;code&gt;+&lt;/code&gt; , &lt;code&gt;*&lt;/code&gt; , &lt;code&gt;/&lt;/code&gt; , &lt;code&gt;-&lt;/code&gt; , &lt;code&gt;,&lt;/code&gt; , &lt;code&gt;.&lt;/code&gt; , Или каким -либо другим бинарным оператором , который может быть найден только между двумя маркерами в одном выражении.</target>
        </trans-unit>
        <trans-unit id="ed3de168e4acf1680325d171a28dd7b74b024412" translate="yes" xml:space="preserve">
          <source>The next line(s) have a &lt;code&gt;*&lt;/code&gt; aligned with the &lt;code&gt;*&lt;/code&gt; in the first line. Text is allowed on these lines.</source>
          <target state="translated">В следующей строке (-ах) знак &lt;code&gt;*&lt;/code&gt; выровнен с &lt;code&gt;*&lt;/code&gt; в первой строке. В этих строках разрешен текст.</target>
        </trans-unit>
        <trans-unit id="00194fc1917a102824f66484638b388a032a7482" translate="yes" xml:space="preserve">
          <source>The node contains all of the information necessary to figure out the line and column number of the offending text as well the source text representing the node.</source>
          <target state="translated">Узел содержит всю информацию,необходимую для вычисления номера строки и столбца оскорбительного текста,а также исходный текст,представляющий узел.</target>
        </trans-unit>
        <trans-unit id="b4ed3f78adad10420e57b7e0edb1eca371c23d68" translate="yes" xml:space="preserve">
          <source>The number of errors that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">Количество ошибок, которые могут быть исправлены автоматически с помощью параметра конструктора &lt;code&gt;fix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6d50e11c18c94c2f0420745923f450c9aeb9f0a2" translate="yes" xml:space="preserve">
          <source>The number of errors. This includes fixable errors.</source>
          <target state="translated">Количество ошибок.Это включает в себя исправляемые ошибки.</target>
        </trans-unit>
        <trans-unit id="ba2a30d0b9505f420e855f975645b4c8a258575c" translate="yes" xml:space="preserve">
          <source>The number of warnings that can be fixed automatically by the &lt;code&gt;fix&lt;/code&gt; constructor option.</source>
          <target state="translated">Количество предупреждений, которые могут быть автоматически &lt;code&gt;fix&lt;/code&gt; параметра конструктора исправлений .</target>
        </trans-unit>
        <trans-unit id="91ed0bffbaeedc91108fa8391d7c91ea93e12b94" translate="yes" xml:space="preserve">
          <source>The number of warnings. This includes fixable warnings.</source>
          <target state="translated">Количество предупреждений.Это включает в себя исправляемые предупреждения.</target>
        </trans-unit>
        <trans-unit id="d45e635828bcb31db112256ea444b8c6bf3fd18e" translate="yes" xml:space="preserve">
          <source>The only acceptable time to have multiple single-line comments on successive lines is to comment out large sections of code. Multi-line comments should not be used for this purpose.</source>
          <target state="translated">Единственное приемлемое время для того,чтобы иметь несколько однострочных комментариев к последующим строкам-это комментировать большие участки кода.Многострочные комментарии не должны использоваться для этой цели.</target>
        </trans-unit>
        <trans-unit id="6a644e143491953839301b85bb8b200e474de5ab" translate="yes" xml:space="preserve">
          <source>The only time you would compare a variable against itself is when you are testing for &lt;code&gt;NaN&lt;/code&gt;. However, it is far more appropriate to use &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;Number.isNaN ES2015 function&lt;/a&gt; for that use case rather than leaving the reader of the code to determine the intent of self comparison.</source>
          <target state="translated">Единственный раз, когда вы сравниваете переменную с самой собой, - это когда вы тестируете &lt;code&gt;NaN&lt;/code&gt; . Однако гораздо более целесообразно использовать &lt;code&gt;typeof x === 'number' &amp;amp;&amp;amp; isNaN(x)&lt;/code&gt; или &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&quot;&gt;функцию Number.isNaN ES2015&lt;/a&gt; для этого варианта использования, а не оставлять читателя кода для определения цели самосравнения .</target>
        </trans-unit>
        <trans-unit id="fae2f2bc90a52f0d6909f6ceb19aaafac0a26360" translate="yes" xml:space="preserve">
          <source>The opening brace should be at the end of the line that begins the compound statement; the closing brace should begin a line and be indented to the beginning of the compound statement.</source>
          <target state="translated">Открывающая скобка должна находиться в конце строки,которая начинает составное заявление;закрывающая скобка должна начинаться со строки и быть отступом от начала составного заявления.</target>
        </trans-unit>
        <trans-unit id="abfabb83ce95a74f0937675f7094af1e6695a2c0" translate="yes" xml:space="preserve">
          <source>The opening brace should be on the same line as the containing statement.</source>
          <target state="translated">Вскрывающая скобка должна быть на той же строке,что и содержащее ее заявление.</target>
        </trans-unit>
        <trans-unit id="e9b551f3ef4076d91cd7f96a1f41ae4787a40977" translate="yes" xml:space="preserve">
          <source>The option also has a string shorthand:</source>
          <target state="translated">Опция также имеет строковое сокращение:</target>
        </trans-unit>
        <trans-unit id="49d9e0bb541ca2b3e87c88ba870eb3e86a03122a" translate="yes" xml:space="preserve">
          <source>The optional chaining (&lt;code&gt;?.&lt;/code&gt;) expression can short-circuit with a return value of &lt;code&gt;undefined&lt;/code&gt;. Therefore, treating an evaluated optional chaining expression as a function, object, number, etc., can cause TypeError or unexpected results. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7031af6085176060b0ac36063990d91e8f177b" translate="yes" xml:space="preserve">
          <source>The optional exception does not excuse this case, because the entire collection of property specifications spans 4 lines, not 1.</source>
          <target state="translated">Необязательное исключение не оправдывает этого случая,так как вся коллекция спецификаций собственности охватывает 4 строки,а не 1.</target>
        </trans-unit>
        <trans-unit id="dcedceca0a5fbd9f7abfd655550b7f46c22973d8" translate="yes" xml:space="preserve">
          <source>The options allow labels with loop or switch statements:</source>
          <target state="translated">Опции позволяют наклеивать этикетки с петлевыми или коммутационными утверждениями:</target>
        </trans-unit>
        <trans-unit id="cf49b44308f034d8aba18fe071fc2b7ec04bd224" translate="yes" xml:space="preserve">
          <source>The options available and the expected syntax for &lt;code&gt;parserOptions&lt;/code&gt; is the same as those used in &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">Доступные параметры и ожидаемый синтаксис для &lt;code&gt;parserOptions&lt;/code&gt; такие же, как и в &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;конфигурации&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c4af5a293dd844cadf7c1778b14e98c1b7daf5ee" translate="yes" xml:space="preserve">
          <source>The original source code text. This property is undefined if any messages didn't exist or the &lt;code&gt;output&lt;/code&gt; property exists.</source>
          <target state="translated">Исходный текст исходного кода. Это свойство не определено, если каких-либо сообщений не существует или существует свойство &lt;code&gt;output&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a61791ccd424eca040a7f63b8afadbed687c913a" translate="yes" xml:space="preserve">
          <source>The output will be</source>
          <target state="translated">Выход будет</target>
        </trans-unit>
        <trans-unit id="f4dc89186e373e825b6dfa59c8110b3946aeee21" translate="yes" xml:space="preserve">
          <source>The output would be:</source>
          <target state="translated">Выход был бы:</target>
        </trans-unit>
        <trans-unit id="c021a3a657e4f53d4e449ea1c6f0c78f48d2adfc" translate="yes" xml:space="preserve">
          <source>The pair of 0-based indices in source code text to remove.</source>
          <target state="translated">Пара индексов на основе 0 в тексте исходного кода для удаления.</target>
        </trans-unit>
        <trans-unit id="046ede3288f3c1cadbd2cfefc7b488c9fd37084c" translate="yes" xml:space="preserve">
          <source>The path to the file whose configuration you would like to calculate. Directory paths are forbidden because ESLint cannot handle the &lt;code&gt;overrides&lt;/code&gt; setting.</source>
          <target state="translated">Путь к файлу, конфигурацию которого вы хотите рассчитать. Пути к каталогам запрещены, потому что ESLint не может обрабатывать настройку &lt;code&gt;overrides&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0831c2dd23b6e63812d13e269c384cd1d40181e7" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check.</source>
          <target state="translated">Путь к файлу,который вы хотите проверить.</target>
        </trans-unit>
        <trans-unit id="cd939e136292c4dcd7638cc19ed24250e2872fad" translate="yes" xml:space="preserve">
          <source>The path to the file you want to check. The following values are allowed:</source>
          <target state="translated">Путь к файлу,который вы хотите проверить.Допустимы следующие значения:</target>
        </trans-unit>
        <trans-unit id="9789ff50f50df37207f7264a43f1a689f0688f0a" translate="yes" xml:space="preserve">
          <source>The patterns are applied against the file path relative to the directory of the config file. For example, if your config file has the path &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; and the file you want to lint has the path &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt;, then the pattern provided in &lt;code&gt;.eslintrc.js&lt;/code&gt; will be executed against the relative path &lt;code&gt;lib/util.js&lt;/code&gt;.</source>
          <target state="translated">Шаблоны применяются к пути к файлу относительно каталога файла конфигурации. Например, если ваш файл конфигурации имеет путь &lt;code&gt;/Users/john/workspace/any-project/.eslintrc.js&lt;/code&gt; , а файл, который вы хотите lint, имеет путь &lt;code&gt;/Users/john/workspace/any-project/lib/util.js&lt;/code&gt; , то картина представлена в &lt;code&gt;.eslintrc.js&lt;/code&gt; будет выполняться против относительный путь &lt;code&gt;lib/util.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d7c7d55489a5efe043679a245ed2e68741b450b6" translate="yes" xml:space="preserve">
          <source>The pitfalls of using objects as maps in JavaScript</source>
          <target state="translated">Ошибки использования объектов в качестве карт в JavaScript</target>
        </trans-unit>
        <trans-unit id="708371015401d250d46270e090e4dfae9df78014" translate="yes" xml:space="preserve">
          <source>The place where ESLint loads plugins from is changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05157eccd9a4d06e6ff4c2778c2a6f7b853c19e7" translate="yes" xml:space="preserve">
          <source>The prefer-reflect rule will flag usage of any older method, suggesting to instead use the newer Reflect version.</source>
          <target state="translated">Правило предпочтительного отражения помечает использование любого старого метода,предлагая вместо этого использовать более новую рефлексивную версию.</target>
        </trans-unit>
        <trans-unit id="019176c59859ffc7e6915010bb0d29fc4116cb11" translate="yes" xml:space="preserve">
          <source>The primary Node.js API is &lt;code&gt;CLIEngine&lt;/code&gt;, which is the underlying utility that runs the ESLint command line interface. This object will read the filesystem for configuration and file information but will not output any results. Instead, it allows you direct access to the important information so you can deal with the output yourself.</source>
          <target state="translated">Основным API Node.js является &lt;code&gt;CLIEngine&lt;/code&gt; , основная утилита, запускающая интерфейс командной строки ESLint. Этот объект будет читать файловую систему для получения информации о конфигурации и файлах, но не выдаст никаких результатов. Вместо этого он позволяет получить прямой доступ к важной информации, чтобы вы могли самостоятельно обрабатывать результаты.</target>
        </trans-unit>
        <trans-unit id="c476b276186c6fb97acc415f8441c0d6359f3d36" translate="yes" xml:space="preserve">
          <source>The primary difference between &lt;code&gt;function&lt;/code&gt; declarations and &lt;code&gt;function expressions&lt;/code&gt; is that declarations are &lt;em&gt;hoisted&lt;/em&gt; to the top of the scope in which they are defined, which allows you to write code that uses the function before its declaration. For example:</source>
          <target state="translated">Основное различие между &lt;code&gt;function&lt;/code&gt; декларациями и &lt;code&gt;function expressions&lt;/code&gt; , что декларации &lt;em&gt;водрузили&lt;/em&gt; в верхнюю части области , в которой они определены, что позволяет вам код записи , которая использует функцию до ее объявления. Например:</target>
        </trans-unit>
        <trans-unit id="cc5cca2ea790657770c377a55c8c2c9d38976e25" translate="yes" xml:space="preserve">
          <source>The primary reason to use asynchronous functions is typically to use the &lt;code&gt;await&lt;/code&gt; operator, such as this:</source>
          <target state="translated">Основная причина использования асинхронных функций обычно заключается в использовании оператора &lt;code&gt;await&lt;/code&gt; , например такого:</target>
        </trans-unit>
        <trans-unit id="27f63a6807abd8b3bd2aa20888273f48ea3fa67c" translate="yes" xml:space="preserve">
          <source>The primary script to use is &lt;code&gt;npm test&lt;/code&gt;, which does several things:</source>
          <target state="translated">В первую очередь следует использовать сценарий &lt;code&gt;npm test&lt;/code&gt; , который выполняет несколько функций:</target>
        </trans-unit>
        <trans-unit id="88571aeb3633660582e146f8ca69889ac98fb83d" translate="yes" xml:space="preserve">
          <source>The problem is when these developers work together in a project. This rule enforces a coding style where empty newlines are allowed or disallowed after &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; statements. It helps the code to look consistent across the entire project.</source>
          <target state="translated">Проблема в том, что эти разработчики работают вместе над проектом. Это правило применяет стиль кодирования, при котором пустые символы новой строки разрешены или запрещены после операторов &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; или &lt;code&gt;const&lt;/code&gt; . Это помогает коду выглядеть согласованным во всем проекте.</target>
        </trans-unit>
        <trans-unit id="c7abf9c98248c9d5e551542e1f7cf64b22ee6b71" translate="yes" xml:space="preserve">
          <source>The problem you want to solve.</source>
          <target state="translated">Проблема,которую ты хочешь решить.</target>
        </trans-unit>
        <trans-unit id="fbe43fced48ce154fc594e0d7efd5a4fe22b0e58" translate="yes" xml:space="preserve">
          <source>The process of submitting a pull request is fairly straightforward and generally follows the same pattern each time:</source>
          <target state="translated">Процесс подачи подтягивающего запроса достаточно прост и,как правило,каждый раз проходит по одной и той же схеме:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
