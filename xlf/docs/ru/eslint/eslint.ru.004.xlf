<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="ee01a0cbc9e8798abd18172671a6842794ad35f9" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;ObjectExpression&quot;: &quot;first&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;2, { &quot;ObjectExpression&quot;: &quot;first&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e980c091771d153bdb47b24077d7c7862ece28fd" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;ObjectExpression&quot;: 1 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;2, { &quot;ObjectExpression&quot;: 1 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f4a1cb8f51516c1b5eac16c3530459fc0070be3b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;SwitchCase&quot;: 1 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;2, { &quot;SwitchCase&quot;: 1 }&lt;/code&gt; вариантами , {&quot;SwitchCase&quot;: 1} :</target>
        </trans-unit>
        <trans-unit id="a2e31b99ff416f096aef54e05ad2238a8ba72a6d" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;VariableDeclarator&quot;: &quot;first&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;2, { &quot;VariableDeclarator&quot;: &quot;first&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="12e76ae1ceda6a0037ce413b6e0e1333b4f0f5f0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;VariableDeclarator&quot;: 1 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;2, { &quot;VariableDeclarator&quot;: 1 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="63a47322e5a0814a796a50ca8fdc65d95ec93a91" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;2, { &quot;offsetTernaryExpressions&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;2, { &quot;offsetTernaryExpressions&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f6354a49dc5882cf9ea84b20950ffa39f57bd971" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;4, { &quot;ImportDeclaration&quot;: &quot;first&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;4, { &quot;ImportDeclaration&quot;: &quot;first&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1b17c7049c90b444fb14b73c2da40d3473c459a3" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;4, { &quot;flatTernaryExpressions&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;4, { &quot;flatTernaryExpressions&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1caa6ad7e9bf30a35bdd120b9899a0b9ad824d7e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;all&lt;/code&gt; and &lt;code&gt;{ &quot;ignoreJSX&quot;: &quot;multi-line&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;all&lt;/code&gt; и &lt;code&gt;{ &quot;ignoreJSX&quot;: &quot;multi-line&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f9a34431225409a18bd88850c5288ba7bcb513c8" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;all&lt;/code&gt; and &lt;code&gt;{ &quot;ignoreJSX&quot;: &quot;single-line&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;all&lt;/code&gt; и &lt;code&gt;{ &quot;ignoreJSX&quot;: &quot;single-line&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="404f0d7cfc48ed8eb66060217f54d83e65b5d13e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ArrayExpression&quot;: &quot;always&quot;, &quot;ArrayPattern&quot;: &quot;never&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;ArrayExpression&quot;: &quot;always&quot;, &quot;ArrayPattern&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9b76bd8bbcca1d4002f3e537b17b54bb9fdea283" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;IIFEs&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;IIFEs&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="75cea8af23c762ce3feb8113e5daef85450ba6fe" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ImportDeclaration&quot;: &quot;always&quot;, &quot;ExportDeclaration&quot;: &quot;never&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неверного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;ImportDeclaration&quot;: &quot;always&quot;, &quot;ExportDeclaration&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="08efa0c76e836db8588c5a6276391c8230db6b07" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ObjectExpression&quot;: &quot;always&quot;, &quot;ObjectPattern&quot;: &quot;never&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;ObjectExpression&quot;: &quot;always&quot;, &quot;ObjectPattern&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="987df1fe4d8f21f6d7f043eab75a88e5f9f72e05" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;after&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;after&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b6f3407d69bc3e99bc3a17d8d89c335fe7ec5612" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;afterBlockComment&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;afterBlockComment&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0ba42c3c4ee0a94f4a797c60aff96c4dd5cf9c4b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;afterColon&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;afterColon&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="655825368ca59725084126b9efccef6c73b0164c" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;afterLineComment&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;afterLineComment&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a94f648fbaae4f009dcf4b3a3c53deaa16bd3311" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;align&quot;: &quot;colon&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;align&quot;: &quot;colon&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b2b24e4d4ec6b0443dffddf6aff752d18b2fc581" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;align&quot;: &quot;value&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;align&quot;: &quot;value&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2a6c69870cf6068a71e4009ae8b3802f3083b7c0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowCall&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;allowCall&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e29337a2548ed22ec0e4f4bd13a69e8e24e44e45" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowForLoopAfterthoughts&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;allowForLoopAfterthoughts&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="064d6b483e1581c63efda6322df6c5924b029c99" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowFunctionParams&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;allowFunctionParams&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="44a05af8d3762fc72826a3693ab672bbaa3e17bc" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowSeparatedGroups&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;allowSeparatedGroups&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="26b1ec32506bdc9e51023a942641313c0973c71f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: &quot;always&quot;, &quot;after&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;before&quot;: &quot;always&quot;, &quot;after&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="87f552066782d0b5788d05e079ed0553e936febc" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: &quot;never&quot;, &quot;after&quot;: &quot;always&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;before&quot;: &quot;never&quot;, &quot;after&quot;: &quot;always&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="24ebfcda4af715bc3559b62569d8da634a2c27f4" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неверного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;before&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4a111b9e2a7ba0efb0b99ccec10c5bcef16fb6a1" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4a265ad8e266f6f73a30cdba72cfe1863ce1dd12" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="956570da75fc8dfbe513cdaa13481b1b5f5452fc" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: false }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5ce11dd455067e44694bfeb600e1ee75defe39c9" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;beforeBlockComment&quot;: true, &quot;allowClassStart&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;beforeBlockComment&quot;: true, &quot;allowClassStart&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="795087b9613c04d1d234e45463e4aa0e0de990ea" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;beforeColon&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;beforeColon&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="061b35488b98844e7ef89fdbe2a44b5cb20070ce" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;beforeLineComment&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;beforeLineComment&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="415a416c990fccb28fdbdc520d61c022ddaf97c6" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;beforeLineComment&quot;: true, &quot;allowClassStart&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;beforeLineComment&quot;: true, &quot;allowClassStart&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4b1175787102cbc65cc9736d5666edee196c5709" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;blocks&quot;: &quot;always&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;blocks&quot;: &quot;always&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="205e04988f0dc0f7a63cfe28733032bc0303e64f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;blocks&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;blocks&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1ce1222b0fe157482a39bfc47e3a02d8ae102ec0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;classes&quot;: &quot;always&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;classes&quot;: &quot;always&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="490c0a61453fccfdda88fc7a73b8ca3c7e05b86b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;classes&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;classes&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="7a04498044f149bf4c5de03c545ca5669e5a6c2e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;comments&quot;: 65 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;comments&quot;: 65 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2cbae6dc03e8fb86523743175217176a4d05de73" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;enforceInMethodNames&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;enforceInMethodNames&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="74dbad4f104ad2bd1d22a479f2d58cfd73ffc72f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;grouping&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;grouping&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c3606374ac922bd14b12827c144fae584c8328af" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreCase&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreCase&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bedd83f85cc912d3e7cdeae7289b64d9a6cc753e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c31bf5691d09949eaf306402828af51e64972a56" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreEOLComments&quot;: false }&lt;/code&gt; (default) option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;ignoreEOLComments&quot;: false }&lt;/code&gt; (по умолчанию):</target>
        </trans-unit>
        <trans-unit id="445d3258e6f2c7cc4bb7ba756f5ba8b8c55c8049" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreImports&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreImports&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cb30ed6cc6b6fdcfddb0158e8bb65682b26a94a5" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;initialized&quot;: &quot;always&quot;, &quot;uninitialized&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;initialized&quot;: &quot;always&quot;, &quot;uninitialized&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9faf228a0e9e9df7cb2686f1e25003fcb5139911" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;initialized&quot;: &quot;consecutive&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;initialized&quot;: &quot;consecutive&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="63878cc5b0ba3887892efa4598909cf2c616841e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;initialized&quot;: &quot;consecutive&quot;, &quot;uninitialized&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;initialized&quot;: &quot;consecutive&quot;, &quot;uninitialized&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="716fb81c6a1dce33c6196483fe38d5f20a75c2a1" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;initialized&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;initialized&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2d8592c379a75da1f73dcdf3a36fa220579105aa" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;max&quot;: 10 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;max&quot;: 10 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="66e0cfa9153ed6fb3bab8e8c068e2061e5ff9d27" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;max&quot;: 2 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;max&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="719c241346ecc68c62afde0043331438f8dbf41d" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;max&quot;: 3 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;max&quot;: 3 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="676285c1fb7640329ea8a4871c00ae224c1d887d" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;min&quot;: 4 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;min&quot;: 4 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fbb5d24ad94b260c074e859c5f800a3c6da1aee1" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;minItems&quot;: 2 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;minItems&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bb5497833f43f547d76aaf5ff7a871d403102597" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;minItems&quot;: 3 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;minItems&quot;: 3 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="223f7d3c5212ac25d716dc686829d03c21191a22" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;minProperties&quot;: 2 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;minProperties&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ba6d16a648f1aefcd56504be12a2caa1303a5cfe" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;multiline&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;multiline&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6171dd4de11d44a34a2b33d6c0680b19e7742cb5" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;multiline&quot;: true, &quot;minItems&quot;: 2 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неверного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;multiline&quot;: true, &quot;minItems&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cb4bc238b0d827c1b830296b15c6db75d091623a" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;multiline&quot;: true, &quot;minItems&quot;: 3 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;multiline&quot;: true, &quot;minItems&quot;: 3 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d7c0afab5d9234e52c55c88b1c7d3d155e42ea86" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;require&quot;: { &quot;FunctionDeclaration&quot;: true, &quot;MethodDefinition&quot;: true, &quot;ClassDeclaration&quot;: true, &quot;ArrowFunctionExpression&quot;: true, &quot;FunctionExpression&quot;: true } }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;require&quot;: { &quot;FunctionDeclaration&quot;: true, &quot;MethodDefinition&quot;: true, &quot;ClassDeclaration&quot;: true, &quot;ArrowFunctionExpression&quot;: true, &quot;FunctionExpression&quot;: true } }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b2d15388c23afb380b3e3592d28b26b011ef04a4" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;requireReturnForObjectLiteral&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;requireReturnForObjectLiteral&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5a8383f8249f22047ac6fc85c093ab1dd9c55cd1" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;skipBlankLines&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;skipBlankLines&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4cebe6432caeaf006e4e1d0f412fccd563d88e53" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;skipComments&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;skipComments&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="faabf890728b325561aa1e7851c92f5b85cd3fbf" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;switches&quot;: &quot;always&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;switches&quot;: &quot;always&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="80689872941dcd41d9bfb7d948be33b6de39edff" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;switches&quot;: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;switches&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="04dfc4eb3492223625bd55efa33a56b94f000145" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;treatUndefinedAsUnspecified&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;treatUndefinedAsUnspecified&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9f10d631fd44e3021731250e10ef578a5a6dd219" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ allowAtRootLevel: true }&lt;/code&gt; option</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ allowAtRootLevel: true }&lt;/code&gt; вариант</target>
        </trans-unit>
        <trans-unit id="278a790cf3d2a3a98372ecb8b3692e7cd1393496" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ max: 2, maxBOF: 1 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ max: 2, maxBOF: 1 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2cf17fb5767caeface973b0f18b91ccb0211d87a" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ max: 2, maxEOF: 0 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ max: 2, maxEOF: 0 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e5e8990dc68432a17908ca90d7bb0dacd890f787" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ max: 2, maxEOF: 1 }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ max: 2, maxEOF: 1 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a413b901ed3cdabc7dd2245e93fb5990da6eb2a8" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ separateRequires: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ separateRequires: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="15a20b2a7a05d67392a88fd84b704bd71f79cafb" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ var: &quot;always&quot;, let: &quot;never&quot;, const: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ var: &quot;always&quot;, let: &quot;never&quot;, const: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6049e6e7856a186b8e8d5f0d4a16fa94d0c96cae" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ var: &quot;consecutive&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ var: &quot;consecutive&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6eb40ef2325767fea2c05f9274cf00b8f313f513" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ var: &quot;never&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ var: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2b74ba83715bab150d9d6e94773cf651e261d416" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ var: &quot;never&quot;, let: &quot;consecutive&quot;, const: &quot;consecutive&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ var: &quot;never&quot;, let: &quot;consecutive&quot;, const: &quot;consecutive&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f44b25e199f26be3e396f79397f0f93e62b090df" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;allowParens&quot;: false}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{&quot;allowParens&quot;: false}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="912dedda5164484102ad4d8661feafab0c57f044" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;, &quot;asyncArrow&quot;: &quot;always&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;, &quot;asyncArrow&quot;: &quot;always&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d08163affb066c0204fbd135b8ce4b4e7dd7ba76" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="95e030858c836eb8f636c63b0dc65b3cd23f25dd" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;anonymous&quot;: &quot;ignore&quot;, &quot;named&quot;: &quot;always&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;anonymous&quot;: &quot;ignore&quot;, &quot;named&quot;: &quot;always&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0d9267b467b24e943e2c6fb21ae77d1d9089586b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;anonymous&quot;: &quot;never&quot;, &quot;named&quot;: &quot;always&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;anonymous&quot;: &quot;never&quot;, &quot;named&quot;: &quot;always&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fa0942d0bc94a153a85cacbca1dd18342dc960a4" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неверного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2a280ef34a5fd3a0828f7149227214bd09a78aa0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;functions&quot;: &quot;always&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;functions&quot;: &quot;always&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b74f29436102f7f53ad59662e381bfc5043117ce" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{&quot;functions&quot;: &quot;never&quot;}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{&quot;functions&quot;: &quot;never&quot;}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c06bbeacaf77404cd7bd33e1939227e72248b0fb" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;1tbs&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;1tbs&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e517f8706eb48d1ec945485b200c61afcecf45bb" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;^[^_]+$&quot;, { &quot;ignoreDestructuring&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;^[^_]+$&quot;, { &quot;ignoreDestructuring&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ef00490b3e9e0d1da9e57c465dffbe2e662c9f3d" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;after&quot;, { &quot;overrides&quot;: { &quot;?&quot;: &quot;before&quot;, &quot;:&quot;: &quot;before&quot; } }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f6876112ef2939f29305c4878286573c435ce1c5" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;all&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;all&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="76f6d2b31e3844ab51cb7a588aabbd92d5cca128" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;always&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;always&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="20010de01497bf84398041bd087aa0050f027ae5" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;as-needed&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="aba416370b680f8f01036d6a3aa1b798f26c5e18" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;beside&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;beside&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="90bc299a97b445acb09b4671a7f5501bf8ed65ff" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;consistent&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;&quot;consistent&quot;&lt;/code&gt; по умолчанию :</target>
        </trans-unit>
        <trans-unit id="d06652792b8f4c08fc904b91326cd8c815d8ae3b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;double&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;double&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e576a88f4b4e19ca867e5a7806d12071fbf411aa" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;err&quot;&lt;/code&gt; parameter name:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с именем параметра по умолчанию &lt;code&gt;&quot;err&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1b2ceb04663fcf7e61752478b7d80bddf45bbd19" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;except-parens&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;except-parens&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b2ac27803094c348d3ac7b5591baccb1d05a7d9f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;expression&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;&quot;expression&quot;&lt;/code&gt; по умолчанию :</target>
        </trans-unit>
        <trans-unit id="0c0a88b4d705f4bcd662a6db4ccf557eba4230a2" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;functions&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;functions&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9e5e026dc3f142149aaf6ed30dc6b6eff9f22d69" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;initializations&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;&quot;initializations&quot;&lt;/code&gt; по умолчанию :</target>
        </trans-unit>
        <trans-unit id="26b702ce5958b17635f683121b985a60951727a9" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;last&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;last&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a022efc514f40234e0c159655d029766cf1105b9" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;multiline&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;&quot;multiline&quot;&lt;/code&gt; по умолчанию :</target>
        </trans-unit>
        <trans-unit id="e5964673dd2bdcddfb558a922f8b60044ee8e2e6" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;never&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8fa3e1d36a3a31b7e04c6715e0210714d970f7e8" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;prefer-double&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;prefer-double&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0c5b4d2629dfb6d42add5e4589fab6150d8c6f4a" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;starred-block&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c181996355b985696ceb09023f7c98b3b77fc184" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;that&quot;&lt;/code&gt; option, if the variable is not initialized:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;&quot;that&quot;&lt;/code&gt; , если переменная не инициализирована:</target>
        </trans-unit>
        <trans-unit id="0bcbfa82ab0479ec39ee00b981b6278f76749c3b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;that&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;&quot;that&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="954b3c4caf284183db199e6c0941a23d6f4422d0" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;&quot;unix&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;&quot;unix&quot;&lt;/code&gt; по умолчанию :</target>
        </trans-unit>
        <trans-unit id="6efd44fe830ddffd3b264953dee3f9c5ff65279e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;2, { &quot;offsetTernaryExpressions&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;2, { &quot;offsetTernaryExpressions&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1ede910f1337a8079af608833f13574550553411" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;4, { &quot;flatTernaryExpressions&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;4, { &quot;flatTernaryExpressions&quot;: false }&lt;/code&gt; вариант:</target>
        </trans-unit>
        <trans-unit id="0479dcb56f86330b25d3a3355327aa537281435c" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;[&quot;callback&quot;, &quot;cb&quot;, &quot;next&quot;]&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;[&quot;callback&quot;, &quot;cb&quot;, &quot;next&quot;]&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="22f4447ee3ef7adcdd53c1ae24c878f1882e4a8f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;after&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;after&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6a9137e18fefbde77a2dbc9fd0a3d10125ec284b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;afterColon&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;afterColon&quot;: true }&lt;/code&gt; по умолчанию {&quot;afterColon&quot;: true} :</target>
        </trans-unit>
        <trans-unit id="14b0c26f71dfcdf569f49d3e226a211c17f38dfb" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами по умолчанию &lt;code&gt;{ &quot;before&quot;: false, &quot;after&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6e801d096409113e1c75514c13a990cacdf77581" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;before&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;before&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="58d867e9ed8a0e095c452b776ff2356747f624eb" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;before&quot;: true, &quot;after&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="efac4042d8e1f8a1e416e17dee8ab9c9949a6364" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;beforeBlockComment&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;beforeBlockComment&quot;: true }&lt;/code&gt; по умолчанию {&quot;beforeBlockComment&quot;: true} :</target>
        </trans-unit>
        <trans-unit id="e3a3157e62fbee12bf9c2f3f56f70fb7f994419c" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;beforeColon&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;beforeColon&quot;: false }&lt;/code&gt; по умолчанию {&quot;beforeColon&quot;: false} :</target>
        </trans-unit>
        <trans-unit id="697b0860170db416487720ca1588d72abe65ed7e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;capIsNew&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;{ &quot;capIsNew&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="925cd592c147ec3b8884cfacc1609cf49aadf4e7" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;code&quot;: 80 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;code&quot;: 80 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4b6d7880fd461d3c6ae565255c753562d079b54b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;consistent&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;consistent&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e59ef02a36007d566464822f03a5ddf6a0f6840a" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;grouping&quot;: false, &quot;allowCall&quot;: false }&lt;/code&gt; options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами по умолчанию &lt;code&gt;{ &quot;grouping&quot;: false, &quot;allowCall&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2b8d4bd906ed006ad96f49514325261d37fbe203" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreChainWithDepth&quot;: 2 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;{ &quot;ignoreChainWithDepth&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="315015386a5d8daba60dd614bd4ec7128ad9e437" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreDeclarationSort&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;{ &quot;ignoreDeclarationSort&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="75f8a47b74242663790bc3e6db88894bd82564dc" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreDestructuring&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreDestructuring&quot;: false }&lt;/code&gt; по умолчанию {&quot;ignoreDestructuring&quot;: false} :</target>
        </trans-unit>
        <trans-unit id="c1b59624cf1fed9ab21104184dd315d29595b373" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreGlobals&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreGlobals&quot;: false }&lt;/code&gt; по умолчанию {&quot;ignoreGlobals&quot;: false} :</target>
        </trans-unit>
        <trans-unit id="9047e96ae55d0a14b49a3888705ed9cbef637235" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreImports&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreImports&quot;: false }&lt;/code&gt; по умолчанию {&quot;ignoreImports&quot;: false} :</target>
        </trans-unit>
        <trans-unit id="9b7f5f45902a9f90c62bbbdd24cbb0720c1643e8" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;ignoreMemberSort&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;ignoreMemberSort&quot;: false }&lt;/code&gt; по умолчанию {&quot;ignoreMemberSort&quot;: false} :</target>
        </trans-unit>
        <trans-unit id="64680f9111ad63612f8f2783656b310c82cd0fb5" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;max&quot;: 1 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;{ &quot;max&quot;: 1 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c743cbff5692ea266117a84f08d3f30755441ada" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;max&quot;: 10 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;max&quot;: 10 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="50b5ef4cbc4e9095a260ed68960c5ebe44a671e7" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;max&quot;: 2 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;max&quot;: 2 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fbd848287311ad77ccb12ab46c0952995cda366e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;max&quot;: 3 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;{ &quot;max&quot;: 3 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="703b9b4cc53970685985578316147f261ae70d2a" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;max&quot;: 4 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;max&quot;: 4 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a6ace706365e06cb0938270d9bf035e317236653" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;memberSyntaxSortOrder&quot;: [&quot;none&quot;, &quot;all&quot;, &quot;multiple&quot;, &quot;single&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;memberSyntaxSortOrder&quot;: [&quot;none&quot;, &quot;all&quot;, &quot;multiple&quot;, &quot;single&quot;] }&lt;/code&gt; по умолчанию {&quot;memberSyntaxSortOrder&quot;: [&quot;none&quot;, &quot;all&quot;, &quot;multiple&quot;, &quot;single&quot;]} :</target>
        </trans-unit>
        <trans-unit id="ac0b485971ebada8e56a8fee6f0e65f1f84c469f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;mode&quot;: &quot;strict&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;mode&quot;: &quot;strict&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fea43a9cee2f402615e7656801e7ca700a288d00" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;multiline&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;multiline&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e9b2c9e6b5723768f2603cfa7af3a07c1e999711" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;newIsCap&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со значением по умолчанию &lt;code&gt;{ &quot;newIsCap&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6ffddb3903c407024f14888013ee166a5a4dedc7" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;properties&quot;: &quot;always&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;properties&quot;: &quot;always&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cf8c2c18879d07ec05de818de163772e24db11f4" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;properties&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{ &quot;properties&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="41e94763a8b2d6c4c8bc57451304378621cfc929" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;skipStrings&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;skipStrings&quot;: true }&lt;/code&gt; по умолчанию {&quot;skipStrings&quot;: true} :</target>
        </trans-unit>
        <trans-unit id="f502a564f552261c12e2d9eb17244035594a34e2" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;tabWidth&quot;: 4 }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;{ &quot;tabWidth&quot;: 4 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9f46ebaacc7dfd7b825e2729347beba9442c7958" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ &quot;treatUndefinedAsUnspecified&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;{ &quot;treatUndefinedAsUnspecified&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2b43d14a7e95c8cbb4674319ce40afa9d55759b9" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{ allowAtRootLevel: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметром по умолчанию &lt;code&gt;{ allowAtRootLevel: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3eb1a80dba60f186f7217c469d190ee719f56fcf" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default &lt;code&gt;{&quot;words&quot;: true, &quot;nonwords&quot;: false}&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с опцией по умолчанию &lt;code&gt;{&quot;words&quot;: true, &quot;nonwords&quot;: false}&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ae076b683aa0a7470a3b98c9a4d118379d588e34" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the default options:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами по умолчанию:</target>
        </trans-unit>
        <trans-unit id="56d8a05bbe13c1790954c976c732747120166ea2" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the earlier default option which has been removed:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с более ранней опцией по умолчанию, которая была удалена:</target>
        </trans-unit>
        <trans-unit id="2a383528f399d226022bf945620a2eebd45e731f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the option &lt;code&gt;[&quot;done&quot;, &quot;send.error&quot;, &quot;send.success&quot;]&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;[&quot;done&quot;, &quot;send.error&quot;, &quot;send.success&quot;]&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ac7a9150ac3b2024c9e7ad62e0ca2cd6dde9a22f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the options &lt;code&gt;2, { &quot;outerIIFEBody&quot;: 0 }&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;2, { &quot;outerIIFEBody&quot;: 0 }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2b492fa928cdaa52becb464166229a86816d7779" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the string option:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила со строковым параметром:</target>
        </trans-unit>
        <trans-unit id="ee95335514aeb81f745fe10122b8eb5d25676c0d" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule, unlike the corresponding rule in JSHint:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила, в отличие от соответствующего правила в JSHint:</target>
        </trans-unit>
        <trans-unit id="9d7118e3de0210b6256957c71d987c3153319f4b" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule, with no object option or with &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила, без параметра объекта или с параметром &lt;code&gt;allowAllPropertiesOnSameLine&lt;/code&gt; , установленным в &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="22d2e8bb3d105c5ce19d2da6165696dce5bf5420" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила:</target>
        </trans-unit>
        <trans-unit id="fb36327dc315f140295c7fe2539829e33e35705e" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;&quot;arraysInArrays&quot;&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода, когда &lt;code&gt;&quot;arraysInArrays&quot;&lt;/code&gt; имеет значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="33932ad322e88f117be211bf6810e1bdb3bedcb3" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;&quot;arraysInObjects&quot;&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода, когда для &lt;code&gt;&quot;arraysInObjects&quot;&lt;/code&gt; установлено значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="066ece659a04c0983a0eb53ef2c3409e8f775b3f" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;&quot;objectsInArrays&quot;&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода, когда для &lt;code&gt;&quot;objectsInArrays&quot;&lt;/code&gt; установлено значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="aec81ed2117102488dd1c26a8e7cc27bd6992b98" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;&quot;objectsInObjects&quot;&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода, когда для &lt;code&gt;&quot;objectsInObjects&quot;&lt;/code&gt; установлено значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3956f03a44bfd249360b942d48da80d1e89694ac" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;&quot;propertyName&quot;&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода, когда для &lt;code&gt;&quot;propertyName&quot;&lt;/code&gt; установлено значение &lt;code&gt;false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f81d96c6e479733b4594579a7d514936dbef8666" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code when &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; is enabled:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода при &lt;code&gt;enforceForRenamedProperties&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="470e9a0659f007a5cce23116cabecaf005cc5b58" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code with &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">Примеры &lt;strong&gt;неправильного&lt;/strong&gt; кода с параметром &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; , установленным в &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="19baa47533796179ec8813a8dd1d0e53b4e19317" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code with different line and block comment configuration:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода с другой конфигурацией строковых и блочных комментариев:</target>
        </trans-unit>
        <trans-unit id="06a357ddd9a7a1de2cdb5ef5dcf93e2c313ac203" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code with the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода с опцией &lt;code&gt;&quot;never&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ade7a94dd03b4f8fa1ee6d46e0828b9dbae133ea" translate="yes" xml:space="preserve">
          <source>Examples of &lt;strong&gt;incorrect&lt;/strong&gt; code with the &lt;code&gt;{ &quot;requireStringLiterals&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры &lt;strong&gt;некорректного&lt;/strong&gt; кода с параметром &lt;code&gt;{ &quot;requireStringLiterals&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="87ba41fb26cd4ce75af4f9daf5c67a20141bf6c5" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for the &lt;code&gt;&quot;multi-or-nest&quot;&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для опции &lt;code&gt;&quot;multi-or-nest&quot;&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="67999fbe07991048be8ae4f57fc7aa8fab18d387" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with a sample &lt;code&gt;{ &quot;allow&quot;: [&quot;warn&quot;, &quot;error&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с примером параметра &lt;code&gt;{ &quot;allow&quot;: [&quot;warn&quot;, &quot;error&quot;] }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="97b9afd5dfeb3b9d7e6e0b28d62b415a0a9529b6" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;always&quot;, { &quot;arraysInObjects&quot;: false }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;always&quot;, { &quot;arraysInObjects&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cb8645b936cab0a0ef0a4a5c565513d720744b3d" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;always&quot;, { &quot;objectsInObjects&quot;: false }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опциями &lt;code&gt;&quot;always&quot;, { &quot;objectsInObjects&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4ea8b0cd0edf64a2f65892425e55a27f687e37a0" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;always&quot;, { &quot;omitLastInOneLineBlock&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;always&quot;, { &quot;omitLastInOneLineBlock&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="005401b478444fb786add672f7bf04bfb26aa687" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;as-needed&quot;, { &quot;unnecessary&quot;: false }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опциями &lt;code&gt;&quot;as-needed&quot;, { &quot;unnecessary&quot;: false }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b0eb30c197cbaea6e3256b7a22ed303ad9646aaf" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;backtick&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;backtick&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fe99914bfbd3b02a5464276addda407706ae5ac9" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;declaration&quot;, { &quot;allowArrowFunctions&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;declaration&quot;, { &quot;allowArrowFunctions&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f4950972cace695c28de339bfe3221b40cb87ddd" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;double&quot;, { &quot;allowTemplateLiterals&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;double&quot;, { &quot;allowTemplateLiterals&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6c4dfd9115dd660091fb5403f863fead513539c4" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;double&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;double&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a1b0cf1ed276fdb9647b7cf73cd62281f4c15105" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;never&quot;, { &quot;arraysInObjects&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;never&quot;, { &quot;arraysInObjects&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8ac15c12384a8d2b31bf586e95e1574f59e429a5" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;never&quot;, { &quot;objectsInObjects&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опциями &lt;code&gt;&quot;never&quot;, { &quot;objectsInObjects&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8786aec197b6a0ceea89095d8c953dac0ac5e587" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;single&quot;, { &quot;allowTemplateLiterals&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;single&quot;, { &quot;allowTemplateLiterals&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="405da797e29af56d6bb013e1a0f89dfdd20f972f" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;single&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;single&quot;, { &quot;avoidEscape&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="09551828267e777f08de2b75cdf4906db87c61ea" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;4, { &quot;ignoreComments&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;4, { &quot;ignoreComments&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="48eee2cd53d2bcd0da220d49145fa45cc65447be" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allow&quot;: [&quot;foo_&quot;, &quot;_bar&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;allow&quot;: [&quot;foo_&quot;, &quot;_bar&quot;] }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="f9fe7677167a1bbc79789fc28ca9ef20ae36d592" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowAllPropertiesOnSameLine&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;allowAllPropertiesOnSameLine&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="77b4bf44cd1518974e340b82b60efe114315fa78" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;allowEmptyCatch&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;allowEmptyCatch&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="731928146ed57131e1807d9cc9de4acc682a5abe" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;capIsNewExceptionPattern&quot;: &quot;^Person\..&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;capIsNewExceptionPattern&quot;: &quot;^Person\..&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5ac1ab4c812a7080c7a7c97873740d420cb36d04" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;capIsNewExceptions&quot;: [&quot;Person&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;capIsNewExceptions&quot;: [&quot;Person&quot;] }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a97fa6dfe89dfb1f3e1b049ebec662fc668e4ca8" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;exceptionPatterns&quot;: [&quot;E|S&quot;, &quot;[x-z]&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;exceptionPatterns&quot;: [&quot;E|S&quot;, &quot;[x-z]&quot;] }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c0c15b79853e1a385f099adb99892b6e8b5b53da" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;exceptions&quot;: [&quot;x&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;exceptions&quot;: [&quot;x&quot;] }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="24f8ccb89937ec344c74c0c32473e97e24ed8cb5" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="89ee9d9a9cbfd85bbabf32a5984c67b284c7654a" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;max&quot;: 10 }, { &quot;ignoreTopLevelFunctions&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;max&quot;: 10 }, { &quot;ignoreTopLevelFunctions&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="895fd11be634edfebe88212e60d6e50035e0b2f5" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;newIsCapExceptionPattern&quot;: &quot;^person\..&quot; }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;newIsCapExceptionPattern&quot;: &quot;^person\..&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5589b74569e57204117e3cc2c26ca16f7d2e93c7" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;newIsCapExceptions&quot;: [&quot;events&quot;] }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;newIsCapExceptions&quot;: [&quot;events&quot;] }&lt;/code&gt; Опция:</target>
        </trans-unit>
        <trans-unit id="b8b5e39c806fd46fd53cda276548cfa3afec853c" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;overrides&quot;: { &quot;+=&quot;: &quot;before&quot; } }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;overrides&quot;: { &quot;+=&quot;: &quot;before&quot; } }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b7f1e2b9cabbb5a6117817e0baa411e932385ca3" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;overrides&quot;: { &quot;?&quot;: &quot;ignore&quot;, &quot;:&quot;: &quot;ignore&quot; } }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;overrides&quot;: { &quot;?&quot;: &quot;ignore&quot;, &quot;:&quot;: &quot;ignore&quot; } }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="93517bfcab4bd84128b50a9c4003ed22ba8465a7" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;properties&quot;: &quot;never&quot;, &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;{ &quot;properties&quot;: &quot;never&quot;, &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="d6c66529da9bfbe98035177633a71fb58164a3d9" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;skipComments&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;skipComments&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="e7b363714fc4bd0ae95240f0d8aeb6fa1eb24fff" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;skipRegExps&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;skipRegExps&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="be67ec8b14fd67578f7f899d93218b2923161309" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;skipTemplates&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;правильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;skipTemplates&quot;: true }&lt;/code&gt; вариантом:</target>
        </trans-unit>
        <trans-unit id="a16c9f9a3dd3aeb4f0fea228f08345aa793585ec" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;correct&lt;/strong&gt; code for this rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af407b6c019032c63686f372c8a32a957d052470" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with sample &lt;code&gt;&quot;prefer&quot;: { &quot;arg&quot;: &quot;param&quot;, &quot;argument&quot;: &quot;param&quot;, &quot;class&quot;: &quot;constructor&quot;, &quot;return&quot;: &quot;returns&quot;, &quot;virtual&quot;: &quot;abstract&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с образцом &lt;code&gt;&quot;prefer&quot;: { &quot;arg&quot;: &quot;param&quot;, &quot;argument&quot;: &quot;param&quot;, &quot;class&quot;: &quot;constructor&quot;, &quot;return&quot;: &quot;returns&quot;, &quot;virtual&quot;: &quot;abstract&quot; }&lt;/code&gt; варианты:</target>
        </trans-unit>
        <trans-unit id="7b20642902dca6f112f61d7b5846f78adb18409b" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with sample &lt;code&gt;&quot;preferType&quot;: { &quot;Boolean&quot;: &quot;boolean&quot;, &quot;Number&quot;: &quot;number&quot;, &quot;object&quot;: &quot;Object&quot;, &quot;String&quot;: &quot;string&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;preferType&quot;: { &quot;Boolean&quot;: &quot;boolean&quot;, &quot;Number&quot;: &quot;number&quot;, &quot;object&quot;: &quot;Object&quot;, &quot;String&quot;: &quot;string&quot; }&lt;/code&gt; параметры:</target>
        </trans-unit>
        <trans-unit id="f25925ae26023e53beaf8d24dbd3612393275be6" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;as-needed&quot;, { &quot;keywords&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;as-needed&quot;, { &quot;keywords&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2d4e02dadda7d3dba136211ffb8b4782b49448aa" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;as-needed&quot;, { &quot;numbers&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опциями &lt;code&gt;&quot;as-needed&quot;, { &quot;numbers&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="14c3606ca78da3d92de091a641278eaa2525a98c" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;consistent-as-needed&quot;, { &quot;keywords&quot;: true }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметрами &lt;code&gt;&quot;consistent-as-needed&quot;, { &quot;keywords&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="430ad854370e16e646fd0990b58777c7036d5632" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;never&quot;, { &quot;beforeStatementContinuationChars&quot;: &quot;always&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;never&quot;, { &quot;beforeStatementContinuationChars&quot;: &quot;always&quot; }&lt;/code&gt; варианта:</target>
        </trans-unit>
        <trans-unit id="ffb04d49e3540b7e71c77fdd014d4e92497695b8" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;never&quot;, { &quot;beforeStatementContinuationChars&quot;: &quot;never&quot; }&lt;/code&gt; options:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;never&quot;, { &quot;beforeStatementContinuationChars&quot;: &quot;never&quot; }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="b3dc447d165255e67acf31388291f4b6f32e59e7" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;&quot;requireReturn&quot;: false&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с &lt;code&gt;&quot;requireReturn&quot;: false&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="335bb6753b4e34894e45bf009fb87b8e946b7aca" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;defaultAssignment&quot;: false }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительных &lt;strong&gt;неправильного&lt;/strong&gt; кода для этого правила с &lt;code&gt;{ &quot;defaultAssignment&quot;: false }&lt;/code&gt; Опция:</target>
        </trans-unit>
        <trans-unit id="9d26d65013cf40b238456a066d944e2003ca7d74" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;disallowArithmeticOperators&quot;: true }&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3b5fb6549c36621c620e5b94858f3339eabdf5" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;enforceForOrderingRelations&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;enforceForOrderingRelations&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="6476942ca58413c04b50449cdddcc82f6e61a4db" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с параметром &lt;code&gt;{ &quot;ignoreDestructuring&quot;: true }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4547d2a86e47e183bec6beaa53b7e60eee85149c" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule with the &lt;code&gt;{ &quot;overrides&quot;: { &quot;+=&quot;: &quot;before&quot; } }&lt;/code&gt; option:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила с опцией &lt;code&gt;{ &quot;overrides&quot;: { &quot;+=&quot;: &quot;before&quot; } }&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3e57405acd6db0b123a5455562ec75a05f27a4fc" translate="yes" xml:space="preserve">
          <source>Examples of additional &lt;strong&gt;incorrect&lt;/strong&gt; code for this rule:</source>
          <target state="translated">Примеры дополнительного &lt;strong&gt;некорректного&lt;/strong&gt; кода для этого правила:</target>
        </trans-unit>
        <trans-unit id="8774bbc30a8acfa105f2e7aca732f02cb5e645b5" translate="yes" xml:space="preserve">
          <source>Examples of each formatter were created from linting &lt;code&gt;fullOfProblems.js&lt;/code&gt; using the &lt;code&gt;.eslintrc&lt;/code&gt; configuration shown below.</source>
          <target state="translated">Примеры каждого средства форматирования были созданы из линтинга &lt;code&gt;fullOfProblems.js&lt;/code&gt; с использованием конфигурации &lt;code&gt;.eslintrc&lt;/code&gt; , показанной ниже.</target>
        </trans-unit>
        <trans-unit id="63054b580b491cde151ce2607d3581a44fd86984" translate="yes" xml:space="preserve">
          <source>Examples of unary &lt;code&gt;nonwords&lt;/code&gt; operators:</source>
          <target state="translated">Примеры унарных не &lt;code&gt;nonwords&lt;/code&gt; операторов:</target>
        </trans-unit>
        <trans-unit id="bd7c7e41befdb8e326bf14e3f475844c3ff64286" translate="yes" xml:space="preserve">
          <source>Examples of unary &lt;code&gt;words&lt;/code&gt; operators:</source>
          <target state="translated">Примеры операторов унарных &lt;code&gt;words&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="a5293a801019f70e86cf1a9d836f9f0f8eba2c6c" translate="yes" xml:space="preserve">
          <source>Examples of using tagged template literals (Exploring ES6)</source>
          <target state="translated">Примеры использования литералов шаблонов с метками (Исследование ES6)</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="20049bc069b0a04404c23d571b5e0b56f0660c02" translate="yes" xml:space="preserve">
          <source>Exception</source>
          <target state="translated">Exception</target>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="0a3dcee7fcef8b1877f7938b1939325d3fa0e18b" translate="yes" xml:space="preserve">
          <source>Executing rules on the AST</source>
          <target state="translated">Исполнение правил на АСТ</target>
        </trans-unit>
        <trans-unit id="47b9175f29d7419410db948750dd943d836ebc95" translate="yes" xml:space="preserve">
          <source>Exit codes</source>
          <target state="translated">Коды выхода</target>
        </trans-unit>
        <trans-unit id="e5e3843734054080956235b68edff413d4bf5da3" translate="yes" xml:space="preserve">
          <source>Explain what selectors are</source>
          <target state="translated">Объяснить,что такое селекторы</target>
        </trans-unit>
        <trans-unit id="3432b90725d9f6af82862cbf6c4251005e308985" translate="yes" xml:space="preserve">
          <source>Explore &lt;a href=&quot;user-guide/integrations&quot;&gt;ESLint integrations&lt;/a&gt; into other tools like editors, build systems, and more.</source>
          <target state="translated">Изучите &lt;a href=&quot;user-guide/integrations&quot;&gt;возможности интеграции ESLint&lt;/a&gt; с другими инструментами, такими как редакторы, системы сборки и т. Д.</target>
        </trans-unit>
        <trans-unit id="99c1bd3ae4c0d8f39d8445f949220790fb77e0f8" translate="yes" xml:space="preserve">
          <source>Exploring JavaScript for-in loops</source>
          <target state="translated">Исследование JavaScript для входных циклов</target>
        </trans-unit>
        <trans-unit id="806e203d5977933ba63f436026b31e7b162da68d" translate="yes" xml:space="preserve">
          <source>Extending Configuration Files</source>
          <target state="translated">Расширение конфигурационных файлов</target>
        </trans-unit>
        <trans-unit id="5572872bf407bf509366e57982f372b104981030" translate="yes" xml:space="preserve">
          <source>External ESLint rules</source>
          <target state="translated">Внешние правила ESLint</target>
        </trans-unit>
        <trans-unit id="4d52c7ff045fb58a3bd1ebda35d134da9727c3ba" translate="yes" xml:space="preserve">
          <source>Fatal errors now result in an exit code of 2</source>
          <target state="translated">Фатальные ошибки теперь приводят к коду выхода 2</target>
        </trans-unit>
        <trans-unit id="e8b685271238adf161cffed3c91f54d97023262b" translate="yes" xml:space="preserve">
          <source>Fields</source>
          <target state="translated">Fields</target>
        </trans-unit>
        <trans-unit id="0c34f9f750a4d7e715f8295493880b2ee9104dad" translate="yes" xml:space="preserve">
          <source>File Enumeration</source>
          <target state="translated">Перечисление файлов</target>
        </trans-unit>
        <trans-unit id="3a2eb5b00a80cd98cb3c3cb7c9bf9b63437abdeb" translate="yes" xml:space="preserve">
          <source>File Extension-named Processor</source>
          <target state="translated">Процессор с именем расширения файла</target>
        </trans-unit>
        <trans-unit id="5dac61882da90e6233102ab469a9220d3b83d8b3" translate="yes" xml:space="preserve">
          <source>File Format</source>
          <target state="translated">Формат файла</target>
        </trans-unit>
        <trans-unit id="506bc9f6f6a9d4241cedfd36f46c7d8dced4a31e" translate="yes" xml:space="preserve">
          <source>Files containing multiple classes can often result in a less navigable and poorly structured codebase. Best practice is to keep each file limited to a single responsibility.</source>
          <target state="translated">Файлы,содержащие несколько классов,часто могут привести к тому,что кодовая база будет менее удобной для навигации и плохо структурированной.Лучшая практика заключается в том,чтобы каждый файл был ограничен одной ответственностью.</target>
        </trans-unit>
        <trans-unit id="d3cbaa93ac003803e0fb14e21487e6a71e9c520f" translate="yes" xml:space="preserve">
          <source>Finally, comments can be accessed through many of &lt;code&gt;sourceCode&lt;/code&gt;'s methods using the &lt;code&gt;includeComments&lt;/code&gt; option.</source>
          <target state="translated">Наконец, к комментариям можно получить доступ через многие методы &lt;code&gt;sourceCode&lt;/code&gt; с помощью опции &lt;code&gt;includeComments&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="62bfb470c00174ef357dde00468c67a4e83859cb" translate="yes" xml:space="preserve">
          <source>Finally, in ESLint v5 &lt;code&gt;eslint:recommended&lt;/code&gt; would explicitly disable all core rules that were not considered &quot;recommended&quot;. This could cause confusing behavior if &lt;code&gt;eslint:recommended&lt;/code&gt; was loaded after another config, since &lt;code&gt;eslint:recommended&lt;/code&gt; would have the effect of turning off some rules. In ESLint v6, &lt;code&gt;eslint:recommended&lt;/code&gt; has no effect on non-recommended rules.</source>
          <target state="translated">Наконец, в ESLint v5 &lt;code&gt;eslint:recommended&lt;/code&gt; явно отключит все основные правила, которые не считались &amp;laquo;рекомендованными&amp;raquo;. Это может привести к странному поведению , если &lt;code&gt;eslint:recommended&lt;/code&gt; был загружено после другой конфигурации, так как &lt;code&gt;eslint:recommended&lt;/code&gt; будет иметь эффект отключив некоторые правила. В ESLint v6 &lt;code&gt;eslint:recommended&lt;/code&gt; не влияет на нерекомендуемые правила.</target>
        </trans-unit>
        <trans-unit id="6968be72142f6047358fee26cb862ebf49b0a8e8" translate="yes" xml:space="preserve">
          <source>Finally, please note that the following &lt;code&gt;SourceCode&lt;/code&gt; methods have been deprecated and will be removed in a future version of ESLint:</source>
          <target state="translated">Наконец, обратите внимание, что следующие методы &lt;code&gt;SourceCode&lt;/code&gt; устарели и будут удалены в будущей версии ESLint:</target>
        </trans-unit>
        <trans-unit id="332c59816c116bbf4c3f703721233cb3f0cdc3a6" translate="yes" xml:space="preserve">
          <source>First option</source>
          <target state="translated">Первый вариант</target>
        </trans-unit>
        <trans-unit id="af7d25d64ded340504176fb79308cb5b6cae96a8" translate="yes" xml:space="preserve">
          <source>First or last child: &lt;code&gt;:first-child&lt;/code&gt; or &lt;code&gt;:last-child&lt;/code&gt;</source>
          <target state="translated">Первый или последний ребенок:: &lt;code&gt;:first-child&lt;/code&gt; или &lt;code&gt;:last-child&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ac329fe0db5d5d7fdf228cb7f9844db9dc85321" translate="yes" xml:space="preserve">
          <source>First, the analysis advances to the end of loop.</source>
          <target state="translated">Во-первых,анализ продвигается к концу цикла.</target>
        </trans-unit>
        <trans-unit id="936a99437393c8097b3470b1b8704331bf856f73" translate="yes" xml:space="preserve">
          <source>Fixes should not introduce clashes with other rules. You can accidentally introduce a new problem that won't be reported until ESLint is run again. Another good reason to make as small a fix as possible.</source>
          <target state="translated">Исправления не должны вводить противоречия с другими правилами.Вы можете случайно ввести новую проблему,о которой не будет сообщено до тех пор,пока ESLint не будет запущен снова.Еще одна веская причина сделать как можно более маленькое исправление.</target>
        </trans-unit>
        <trans-unit id="9d95026313b9ed6b562fef4c9189a7be612dae00" translate="yes" xml:space="preserve">
          <source>Fixing problems</source>
          <target state="translated">Решение проблем</target>
        </trans-unit>
        <trans-unit id="f2bfe79555540e593036ec747fc812e790c08742" translate="yes" xml:space="preserve">
          <source>Float values in JavaScript contain a decimal point, and there is no requirement that the decimal point be preceded or followed by a number. For example, the following are all valid JavaScript numbers:</source>
          <target state="translated">Значения с плавающей запятой в JavaScript содержат десятичную точку,и нет требования,чтобы десятичной точке предшествовала или за ней следовало число.Например,все действительные числа в JavaScript:</target>
        </trans-unit>
        <trans-unit id="4f815951dc09d67e2e502379473867fc24b22968" translate="yes" xml:space="preserve">
          <source>Follow the &lt;a href=&quot;../code-conventions&quot;&gt;Code Conventions&lt;/a&gt;.</source>
          <target state="translated">Соблюдайте условные обозначения &lt;a href=&quot;../code-conventions&quot;&gt;кода&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="25e3e26be1a47a0e88b01a969735545717933946" translate="yes" xml:space="preserve">
          <source>Following Up</source>
          <target state="translated">Последующие действия</target>
        </trans-unit>
        <trans-unit id="9618c783e227f1398efc79c5a7720b4293148661" translate="yes" xml:space="preserve">
          <source>Following this style will help you find arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;) which may be mistakenly included in a condition when a comparison such as &lt;code&gt;&amp;gt;=&lt;/code&gt; was the intent.</source>
          <target state="translated">Следование этому стилю поможет вам найти стрелочные функции ( &lt;code&gt;=&amp;gt;&lt;/code&gt; ), которые могут быть ошибочно включены в условие, когда намерением было сравнение, такое как &lt;code&gt;&amp;gt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="53a8e233b26a57bba7f9b4a9f73b64b766a42653" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;function&lt;/code&gt; expressions, you must define the function before it is used, otherwise it causes an error. Example:</source>
          <target state="translated">Для &lt;code&gt;function&lt;/code&gt; выражений вы должны определить функцию до того, как она будет использована, иначе это вызовет ошибку. Пример:</target>
        </trans-unit>
        <trans-unit id="0b77832eb007b2b5c6a4db8dcbae99eba98ac52c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;words&lt;/code&gt; operators, this rule only applies when a space is not syntactically required. For instance, &lt;code&gt;delete obj.foo&lt;/code&gt; requires the space and will not be considered by this rule. The equivalent &lt;code&gt;delete(obj.foo)&lt;/code&gt; has an optional space (&lt;code&gt;delete (obj.foo)&lt;/code&gt;), therefore this rule will apply to it.</source>
          <target state="translated">Для операторов &lt;code&gt;words&lt;/code&gt; это правило применяется только в том случае, если пробел не требуется синтаксически. Например, для &lt;code&gt;delete obj.foo&lt;/code&gt; требуется пробел, и это правило не учитывается. Эквивалентное &lt;code&gt;delete(obj.foo)&lt;/code&gt; имеет необязательный пробел ( &lt;code&gt;delete (obj.foo)&lt;/code&gt; ), поэтому это правило будет применяться к нему.</target>
        </trans-unit>
        <trans-unit id="811304590b413e51c1392fb39b53923f91124658" translate="yes" xml:space="preserve">
          <source>For Example 1:</source>
          <target state="translated">Пример 1:</target>
        </trans-unit>
        <trans-unit id="4da824694049605826b042aef55b2df5e0da9864" translate="yes" xml:space="preserve">
          <source>For a vast majority of use cases, the result of the &lt;code&gt;typeof&lt;/code&gt; operator is one of the following string literals: &lt;code&gt;&quot;undefined&quot;&lt;/code&gt;, &lt;code&gt;&quot;object&quot;&lt;/code&gt;, &lt;code&gt;&quot;boolean&quot;&lt;/code&gt;, &lt;code&gt;&quot;number&quot;&lt;/code&gt;, &lt;code&gt;&quot;string&quot;&lt;/code&gt;, &lt;code&gt;&quot;function&quot;&lt;/code&gt;, &lt;code&gt;&quot;symbol&quot;&lt;/code&gt;, and &lt;code&gt;&quot;bigint&quot;&lt;/code&gt;. It is usually a typing mistake to compare the result of a &lt;code&gt;typeof&lt;/code&gt; operator to other string literals.</source>
          <target state="translated">Для подавляющего большинства случаев использования результатом оператора &lt;code&gt;typeof&lt;/code&gt; является один из следующих строковых литералов: &lt;code&gt;&quot;undefined&quot;&lt;/code&gt; , &lt;code&gt;&quot;object&quot;&lt;/code&gt; , &lt;code&gt;&quot;boolean&quot;&lt;/code&gt; , &lt;code&gt;&quot;number&quot;&lt;/code&gt; , &lt;code&gt;&quot;string&quot;&lt;/code&gt; , &lt;code&gt;&quot;function&quot;&lt;/code&gt; , &lt;code&gt;&quot;symbol&quot;&lt;/code&gt; , и &lt;code&gt;&quot;bigint&quot;&lt;/code&gt; . Сравнивать результат оператора &lt;code&gt;typeof&lt;/code&gt; с другими строковыми литералами обычно является опечаткой.</target>
        </trans-unit>
        <trans-unit id="825e891ca100d348d7132242bd7895a6f943cbe5" translate="yes" xml:space="preserve">
          <source>For compatibility, ESLint v5 will treat &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; as an alias for &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; when the former is found in a config file. As a result, if you use object rest/spread, your code should still parse successfully with ESLint v5. However, note that this alias will be removed in ESLint v6.</source>
          <target state="translated">Для совместимости ESLint v5 будет рассматривать &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt; как псевдоним для &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; если первый найден в файле конфигурации. В результате, если вы используете объект rest / spread, ваш код все равно должен успешно анализироваться с помощью ESLint v5. Однако обратите внимание, что этот псевдоним будет удален в ESLint v6.</target>
        </trans-unit>
        <trans-unit id="91663f901171f5b873e462020c2f73009fbc1a1f" translate="yes" xml:space="preserve">
          <source>For convenience, ESLint provides shortcuts that pre-define global variables exposed by popular libraries and runtime environments. This rule supports these environments, as listed in &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;Specifying Environments&lt;/a&gt;. A few examples are given below.</source>
          <target state="translated">Для удобства ESLint предоставляет ярлыки, которые предварительно определяют глобальные переменные, предоставляемые популярными библиотеками и средами выполнения. Это правило поддерживает эти среды, как указано в &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;разделе &amp;laquo;Определение сред&amp;raquo;&lt;/a&gt; . Ниже приведены несколько примеров.</target>
        </trans-unit>
        <trans-unit id="e96ab36f774428b5a83b60604b18ddb3ffbd23a7" translate="yes" xml:space="preserve">
          <source>For example 2:</source>
          <target state="translated">Например 2:</target>
        </trans-unit>
        <trans-unit id="39c525472bc4e8155672442c309e52dc2654636d" translate="yes" xml:space="preserve">
          <source>For example here we are overriding a builtin method that will then affect all Objects, even other builtins.</source>
          <target state="translated">Например,здесь мы переопределяем метод builtin,который затем повлияет на все Объекты,даже на другие сборки.</target>
        </trans-unit>
        <trans-unit id="011aff26d99bb12b2cf5405a56ff482ddc01754c" translate="yes" xml:space="preserve">
          <source>For example if you wish to use all Reflect methods, except for &lt;code&gt;Function.prototype.apply&lt;/code&gt; then your config would look like &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;] }]&lt;/code&gt;.</source>
          <target state="translated">Например, если вы хотите использовать все методы Reflect, за исключением &lt;code&gt;Function.prototype.apply&lt;/code&gt; , тогда ваша конфигурация будет выглядеть так: &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;apply&quot;] }]&lt;/code&gt; Reflect : [2, {&quot;exceptions&quot;: [&quot;apply&quot;]}] .</target>
        </trans-unit>
        <trans-unit id="ce57185fdf5c04e01b7b7c24a3e591a01a2b56a4" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;eslint .config/&lt;/code&gt; will lint all Dotfolders and Dotfiles in the &lt;code&gt;.config&lt;/code&gt; directory, including immediate children as well as children that are deeper in the directory structure.</source>
          <target state="translated">Например, &lt;code&gt;eslint .config/&lt;/code&gt; будет связывать все точечные папки и точечные файлы в каталоге &lt;code&gt;.config&lt;/code&gt; , включая непосредственных дочерних элементов, а также дочерних элементов , находящихся глубже в структуре каталогов.</target>
        </trans-unit>
        <trans-unit id="b269c8939ae99559a692823366bf03060bf013e3" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;eslint .config/my-config-file.js --no-ignore&lt;/code&gt; will cause &lt;code&gt;my-config-file.js&lt;/code&gt; to be linted. It should be noted that the same command without the &lt;code&gt;--no-ignore&lt;/code&gt; line will not lint the &lt;code&gt;my-config-file.js&lt;/code&gt; file.</source>
          <target state="translated">Например, &lt;code&gt;eslint .config/my-config-file.js --no-ignore&lt;/code&gt; вызовет &lt;code&gt;my-config-file.js&lt;/code&gt; file.js. Следует отметить, что та же команда без строки &lt;code&gt;--no-ignore&lt;/code&gt; не будет &lt;code&gt;my-config-file.js&lt;/code&gt; файл my-config-file.js .</target>
        </trans-unit>
        <trans-unit id="daccbd0e8454180bedad69f9cedccc785060982f" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;eslint lib/* --ext .js&lt;/code&gt; will match all files within the &lt;code&gt;lib/&lt;/code&gt; directory, regardless of extension.</source>
          <target state="translated">Например, &lt;code&gt;eslint lib/* --ext .js&lt;/code&gt; будет соответствовать всем файлам в каталоге &lt;code&gt;lib/&lt;/code&gt; независимо от расширения.</target>
        </trans-unit>
        <trans-unit id="b79ddf47fc7c437bb2345be67ac3d8f72d6b9468" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;n + 1;&lt;/code&gt; is not a syntax error, but it might be a typing mistake where a programmer meant an assignment statement &lt;code&gt;n += 1;&lt;/code&gt; instead. Sometimes, such unused expressions may be eliminated by some build tools in production environment, which possibly breaks application logic.</source>
          <target state="translated">Например, &lt;code&gt;n + 1;&lt;/code&gt; не является синтаксической ошибкой, но это может быть опечатка, когда программист имел в виду оператор присваивания &lt;code&gt;n += 1;&lt;/code&gt; вместо. Иногда такие неиспользуемые выражения могут быть удалены некоторыми инструментами сборки в производственной среде, что может нарушить логику приложения.</target>
        </trans-unit>
        <trans-unit id="9d572e31fdc290764e65f63e7602becd538200cb" translate="yes" xml:space="preserve">
          <source>For example, arrow functions are automatically bound to their surrounding scope/context. This provides an alternative to the pre-ES6 standard of explicitly binding function expressions to achieve similar behavior.</source>
          <target state="translated">Например,функции стрелок автоматически привязываются к окружающему их диапазону/контексту.Это предоставляет альтернативу стандарту preES6,который устанавливает явное связывание выражений функций для достижения аналогичного поведения.</target>
        </trans-unit>
        <trans-unit id="9d3f94e96ee57c76254e46cea193f88914717ca6" translate="yes" xml:space="preserve">
          <source>For example, consider &lt;code&gt;projectA&lt;/code&gt; which has &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; set in the &lt;code&gt;.eslintrc&lt;/code&gt; file in the &lt;code&gt;lib/&lt;/code&gt; directory. In this case, while linting &lt;code&gt;main.js&lt;/code&gt;, the configurations within &lt;code&gt;lib/&lt;/code&gt; will be used, but the &lt;code&gt;.eslintrc&lt;/code&gt; file in &lt;code&gt;projectA/&lt;/code&gt; will not.</source>
          <target state="translated">Например, рассмотрим &lt;code&gt;projectA&lt;/code&gt; , который имеет &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; набор в &lt;code&gt;.eslintrc&lt;/code&gt; файл в &lt;code&gt;lib/&lt;/code&gt; директории. В этом случае при линтинге &lt;code&gt;main.js&lt;/code&gt; будут использоваться конфигурации из &lt;code&gt;lib/&lt;/code&gt; , но не из файла &lt;code&gt;.eslintrc&lt;/code&gt; в projectA &lt;code&gt;projectA/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfd3428c49dfe59723888ee1ba20ca008d4f0ec9" translate="yes" xml:space="preserve">
          <source>For example, for 2-space indentation:</source>
          <target state="translated">Например,для двухпространственного вдавливания:</target>
        </trans-unit>
        <trans-unit id="6a238f30f9a64c119e5e4d8c90b26d3c50c3ffff" translate="yes" xml:space="preserve">
          <source>For example, in this scenario, &lt;code&gt;.build/test.js&lt;/code&gt; is the desired file to allowlist. Because all Dotfolders and their children are ignored by default, &lt;code&gt;.build&lt;/code&gt; must first be allowlisted so that eslint because aware of its children. Then, &lt;code&gt;.build/test.js&lt;/code&gt; must be explicitly allowlisted, while the rest of the content is denylisted. This is done with the following &lt;code&gt;.eslintignore&lt;/code&gt; file:</source>
          <target state="translated">Например, в этом сценарии &lt;code&gt;.build/test.js&lt;/code&gt; - это файл, который нужно добавить в список разрешений. Поскольку все Dotfolders и их дочерние элементы по умолчанию игнорируются, &lt;code&gt;.build&lt;/code&gt; сначала должен быть включен в список разрешений, чтобы eslint знал о своих дочерних элементах. Затем &lt;code&gt;.build/test.js&lt;/code&gt; должен быть явно разрешен, в то время как остальной контент запрещен. Это делается с помощью следующего файла &lt;code&gt;.eslintignore&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="1dec4df953a943ee60a6eb0620ba0bde839172e5" translate="yes" xml:space="preserve">
          <source>For example, placing the following &lt;code&gt;.eslintignore&lt;/code&gt; file in the current working directory will ignore all of &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;bower_components&lt;/code&gt; in the project root and anything in the &lt;code&gt;build/&lt;/code&gt; directory except &lt;code&gt;build/index.js&lt;/code&gt;:</source>
          <target state="translated">Например, поместив следующий &lt;code&gt;.eslintignore&lt;/code&gt; файл в текущем рабочем каталоге будет игнорировать все &lt;code&gt;node_modules&lt;/code&gt; , &lt;code&gt;bower_components&lt;/code&gt; в корне проекта и что - нибудь в &lt;code&gt;build/&lt;/code&gt; директории , кроме &lt;code&gt;build/index.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="da5498397cc08b0b9de6f76cde5b92d9e0a3d450" translate="yes" xml:space="preserve">
          <source>For example, some developers avoid writing code like this:</source>
          <target state="translated">Например,некоторые разработчики избегают писать подобный код:</target>
        </trans-unit>
        <trans-unit id="62cbd6213b4c8d3320bffabb94ec58fb08abc8c7" translate="yes" xml:space="preserve">
          <source>For example, suppose a fixer would like to surround an object key with quotes, but it's not sure whether the user would prefer single or double quotes.</source>
          <target state="translated">Например,предположим,что фиксатор хотел бы окружить объектный ключ кавычками,но не уверен,предпочтет ли пользователь одинарные или двойные кавычки.</target>
        </trans-unit>
        <trans-unit id="be7f8906d7b77cf4e5d7b128ed399db33edf14ce" translate="yes" xml:space="preserve">
          <source>For example, the default behavior of &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; on Windows systems is to convert LF linebreaks to CRLF when checking out files, but to store the linebreaks as LF when committing a change. This will cause the &lt;code&gt;linebreak-style&lt;/code&gt; rule to report errors if configured with the &lt;code&gt;&quot;unix&quot;&lt;/code&gt; setting, because the files that ESLint sees will have CRLF linebreaks. If you use git, you may want to add a line to your &lt;a href=&quot;https://git-scm.com/docs/gitattributes&quot;&gt;&lt;code&gt;.gitattributes&lt;/code&gt; file&lt;/a&gt; to prevent git from converting linebreaks in &lt;code&gt;.js&lt;/code&gt; files:</source>
          <target state="translated">Например, по умолчанию &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; в системах Windows преобразует разрывы строк LF в CRLF при извлечении файлов, но сохраняет разрывы строк как LF при фиксации изменения. Это заставит правило в &lt;code&gt;linebreak-style&lt;/code&gt; сообщать об ошибках, если настроено с параметром &lt;code&gt;&quot;unix&quot;&lt;/code&gt; , потому что файлы, которые видит ESLint, будут иметь разрывы строк CRLF. Если вы используете Git, вы можете добавить в свой &lt;a href=&quot;https://git-scm.com/docs/gitattributes&quot;&gt; &lt;code&gt;.gitattributes&lt;/code&gt; файл&lt;/a&gt; , чтобы предотвратить ублюдок от преобразования переносов строк в &lt;code&gt;.js&lt;/code&gt; файлах:</target>
        </trans-unit>
        <trans-unit id="130237774d19733d9dd3ff6dd609ec01fdb1a6ef" translate="yes" xml:space="preserve">
          <source>For example, the following configuration enforces object destructuring in variable declarations and enforces array destructuring in assignment expressions.</source>
          <target state="translated">Например,следующая конфигурация приводит к деструкции объектов в объявлениях переменных и к деструкции массивов в выражениях присваивания.</target>
        </trans-unit>
        <trans-unit id="492661f04cb971a50bc81d79ddd71dc4a375244b" translate="yes" xml:space="preserve">
          <source>For example, the following configuration enforces only object destructuring, but not array destructuring:</source>
          <target state="translated">Например,следующая конфигурация приводит к деструкции только объектов,но не массивов:</target>
        </trans-unit>
        <trans-unit id="758e75ef2bd76452b3570a2298e019984ec6ab98" translate="yes" xml:space="preserve">
          <source>For example, the following configuration requires a blank line between a variable declaration and a &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">Например, для следующей конфигурации требуется пустая строка между объявлением переменной и оператором &lt;code&gt;return&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="80a1d3a2c013ed557a047863a4ac29e911262277" translate="yes" xml:space="preserve">
          <source>For example, the following statements would create the same object:</source>
          <target state="translated">Например,следующие утверждения создадут один и тот же объект:</target>
        </trans-unit>
        <trans-unit id="b6fe0a8369882bd7207ad3d1ac10d9d75a0b6dd0" translate="yes" xml:space="preserve">
          <source>For example, this is how you might locate the &lt;code&gt;window&lt;/code&gt; global variable in 1.x:</source>
          <target state="translated">Например, вот как вы можете найти глобальную переменную &lt;code&gt;window&lt;/code&gt; в 1.x:</target>
        </trans-unit>
        <trans-unit id="300d85b915d51fc649d4cadc7100c53e8f00a235" translate="yes" xml:space="preserve">
          <source>For example, to enforce a camelcase naming convention:</source>
          <target state="translated">Например,для обеспечения соблюдения конвенции по наименованию верблюдов:</target>
        </trans-unit>
        <trans-unit id="2299170404e2f6627e4d4ba2b26ec4d7aa04ea1b" translate="yes" xml:space="preserve">
          <source>For example, to restrict the use of common generic identifiers:</source>
          <target state="translated">Например,для ограничения использования общих общих идентификаторов:</target>
        </trans-unit>
        <trans-unit id="696285fa4b9259e5309d4183ae88d098303fb430" translate="yes" xml:space="preserve">
          <source>For example, to set &lt;code&gt;ecmaVersion&lt;/code&gt; to 6 (in order to use constructs like &lt;code&gt;for ... of&lt;/code&gt;):</source>
          <target state="translated">Например, чтобы установить для &lt;code&gt;ecmaVersion&lt;/code&gt; значение 6 (чтобы использовать такие конструкции, как &lt;code&gt;for ... of&lt;/code&gt; ):</target>
        </trans-unit>
        <trans-unit id="dd1891709bfc32fad3c8b9c04c8e86f739b9098e" translate="yes" xml:space="preserve">
          <source>For example, when preparing data to be sent to an external API, it is often required to use property names that include underscores. If the &lt;code&gt;camelcase&lt;/code&gt; rule is in effect, these &lt;a href=&quot;https://en.wikipedia.org/wiki/Snake_case&quot;&gt;snake case&lt;/a&gt; properties would not be allowed. By providing an &lt;code&gt;allowPattern&lt;/code&gt; to the &lt;code&gt;dot-notation&lt;/code&gt; rule, these snake case properties can be accessed with bracket notation.</source>
          <target state="translated">Например, при подготовке данных для отправки во внешний API часто требуется использовать имена свойств, содержащие символы подчеркивания. Если &lt;code&gt;camelcase&lt;/code&gt; правило Camelcase , эти свойства &lt;a href=&quot;https://en.wikipedia.org/wiki/Snake_case&quot;&gt;случая змеи&lt;/a&gt; не будут разрешены. Предоставляя &lt;code&gt;allowPattern&lt;/code&gt; в &lt;code&gt;dot-notation&lt;/code&gt; правило, эти свойства змеи случае могут быть доступны с кронштейном нотации.</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="a04aaf7b5ec4c381d837ae9ba344311839715d43" translate="yes" xml:space="preserve">
          <source>For historical reasons, the boolean value &lt;code&gt;false&lt;/code&gt; and the string value &lt;code&gt;&quot;readable&quot;&lt;/code&gt; are equivalent to &lt;code&gt;&quot;readonly&quot;&lt;/code&gt;. Similarly, the boolean value &lt;code&gt;true&lt;/code&gt; and the string value &lt;code&gt;&quot;writeable&quot;&lt;/code&gt; are equivalent to &lt;code&gt;&quot;writable&quot;&lt;/code&gt;. However, the use of older values is deprecated.</source>
          <target state="translated">По историческим причинам логическое значение &lt;code&gt;false&lt;/code&gt; и строковое значение &lt;code&gt;&quot;readable&quot;&lt;/code&gt; эквивалентны &amp;laquo;только для чтения &lt;code&gt;&quot;readonly&quot;&lt;/code&gt; . Аналогичным образом , логическое значение &lt;code&gt;true&lt;/code&gt; и строковое значение &lt;code&gt;&quot;writeable&quot;&lt;/code&gt; эквивалентны &lt;code&gt;&quot;writable&quot;&lt;/code&gt; . Однако использование старых значений не рекомендуется.</target>
        </trans-unit>
        <trans-unit id="c805dfb1bf69f0846eb7e5e2e36ce8d1ec984307" translate="yes" xml:space="preserve">
          <source>For instance, early Internet Explorer versions exposed the current DOM event as a global variable &lt;code&gt;event&lt;/code&gt;, but using this variable has been considered as a bad practice for a long time. Restricting this will make sure this variable isn't used in browser code.</source>
          <target state="translated">Например, ранние версии Internet Explorer разоблачили текущее событие DOM в качестве глобального переменного &lt;code&gt;event&lt;/code&gt; , но с помощью этого переменного рассматриваются как плохая практика в течение длительного времени. Ограничение этого гарантирует, что эта переменная не используется в коде браузера.</target>
        </trans-unit>
        <trans-unit id="abc897209b2f98b7966665fa36a5eddbbc44f66d" translate="yes" xml:space="preserve">
          <source>For instance:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="bd6d093048d51651a2b1c917b15370078ec3e264" translate="yes" xml:space="preserve">
          <source>For messages with placeholders, a test case can also use &lt;code&gt;data&lt;/code&gt; property to additionally assert reported error's &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">Для сообщений с заполнителями тестовый пример также может использовать свойство &lt;code&gt;data&lt;/code&gt; для дополнительного подтверждения &lt;code&gt;message&lt;/code&gt; об ошибке .</target>
        </trans-unit>
        <trans-unit id="0765034a2dabfdfaea79b6646f69c2ff60e7b832" translate="yes" xml:space="preserve">
          <source>For more information on the Comma First style:</source>
          <target state="translated">Для получения дополнительной информации о стиле Comma First:</target>
        </trans-unit>
        <trans-unit id="204e2a7df037b5199be139e9e34c100cc1c25541" translate="yes" xml:space="preserve">
          <source>For non-version specific features such as JSX:</source>
          <target state="translated">Для неверсионных специфических функций,таких как JSX:</target>
        </trans-unit>
        <trans-unit id="eb09f30140c7358f7982d46d63a2cb6e99c4667d" translate="yes" xml:space="preserve">
          <source>For rare situations when negating the left operand is intended, this rule allows an exception. If the whole negation is explicitly wrapped in parentheses, the rule will not report a problem.</source>
          <target state="translated">Для редких ситуаций,когда предполагается отрицание левого операнда,данное правило допускает исключение.Если все отрицание явно заключено в круглые скобки,то правило не сообщит о проблеме.</target>
        </trans-unit>
        <trans-unit id="9426ba254dadde0a984628e8fb268690629324ab" translate="yes" xml:space="preserve">
          <source>For rule authors concerned about supporting ESLint v3.0 in addition to v4.0, the now deprecated &lt;code&gt;sourceCode.getComments()&lt;/code&gt; is still available and will work for both versions.</source>
          <target state="translated">Для авторов правил, озабоченных поддержкой ESLint v3.0 в дополнение к v4.0, теперь устаревший &lt;code&gt;sourceCode.getComments()&lt;/code&gt; по-прежнему доступен и будет работать для обеих версий.</target>
        </trans-unit>
        <trans-unit id="f86f0ccea3420c91f875a0ae5c268ecf742f3367" translate="yes" xml:space="preserve">
          <source>For simpler cases where the only thing that really matters is the error message, you can also specify any &lt;code&gt;errors&lt;/code&gt; as strings. You can also have some strings and some objects, if you like.</source>
          <target state="translated">Для более простых случаев, когда единственное, что действительно имеет значение, - это сообщение об ошибке, вы также можете указать любые &lt;code&gt;errors&lt;/code&gt; виде строк. Вы также можете использовать строки и объекты, если хотите.</target>
        </trans-unit>
        <trans-unit id="6b5411a3be171887f8371a0cb3a7cc8c5690f653" translate="yes" xml:space="preserve">
          <source>For single-line comments at the end of a line, ensure there is at least one indentation level between the end of the code and the beginning of the comment:</source>
          <target state="translated">Для однострочных комментариев в конце строки убедитесь,что между концом кода и началом комментария есть хотя бы один уровень отступов:</target>
        </trans-unit>
        <trans-unit id="fad240174acb9bf4add58eac19c54e5b8fdd2d21" translate="yes" xml:space="preserve">
          <source>For single-line statements preceded by a comment, braces are allowed but not required.</source>
          <target state="translated">Для однострочных высказываний,которым предшествует комментарий,фигурные скобки допускаются,но не обязательны.</target>
        </trans-unit>
        <trans-unit id="e7e3e8688c06372c64aa4883c4f3cf07fa73987d" translate="yes" xml:space="preserve">
          <source>For these reasons, it's considered a best practice to avoid using primitive wrapper types with &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">По этим причинам рекомендуется избегать использования примитивных типов-оболочек с &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="645090098975ce93000cf4137ec4bec443370819" translate="yes" xml:space="preserve">
          <source>For this reason, it is usually best to disallow this particular expression.</source>
          <target state="translated">По этой причине,как правило,лучше всего запретить это конкретное выражение.</target>
        </trans-unit>
        <trans-unit id="9037b1f2d1010d6f51721d832771101bf825911c" translate="yes" xml:space="preserve">
          <source>For this reason, many prefer to always use the object literal syntax and never use the &lt;code&gt;Object&lt;/code&gt; constructor.</source>
          <target state="translated">По этой причине многие предпочитают всегда использовать синтаксис литерала объекта и никогда не использовать конструктор &lt;code&gt;Object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc1231f8152c227ce7761cffd20f4f5b1f175398" translate="yes" xml:space="preserve">
          <source>For your rule, be sure to test:</source>
          <target state="translated">Для твоего правила,не забудь проверить:</target>
        </trans-unit>
        <trans-unit id="f49f184d228fae7a04abaa0b86e52260efcb6098" translate="yes" xml:space="preserve">
          <source>Formatter type</source>
          <target state="translated">Тип формата</target>
        </trans-unit>
        <trans-unit id="e50b41b92efbd61c242a346fe72cd79acb3f5f47" translate="yes" xml:space="preserve">
          <source>Four spaces: Crockford</source>
          <target state="translated">Четыре пространства:Крокфорд</target>
        </trans-unit>
        <trans-unit id="b337948374c41818dfcc598e8c30a7234a5636be" translate="yes" xml:space="preserve">
          <source>Fourth, also it creates the looping path from &lt;code&gt;update&lt;/code&gt; segment to &lt;code&gt;test&lt;/code&gt; segment. At this time, the next segment has existed already, so the &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; event is not fired. It fires &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; instead.</source>
          <target state="translated">В-четвертых, он также создает циклический путь от сегмента &lt;code&gt;update&lt;/code&gt; сегменту &lt;code&gt;test&lt;/code&gt; . В настоящее время следующий сегмент уже существует, поэтому событие &lt;code&gt;onCodePathSegmentStart&lt;/code&gt; не запускается. &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt; этого он запускает onCodePathSegmentLoop .</target>
        </trans-unit>
        <trans-unit id="fd79c47210cb36786d4290720e16eb5973750016" translate="yes" xml:space="preserve">
          <source>From the beginning, ESLint has reported errors using 0-based columns because that's what Esprima, and later Espree, reported. However, most tools and editors use 1-based columns, which made for some tricky integrations with ESLint. In v1.0.0, we've switched over to reporting errors using 1-based columns to fall into line with the tools developers use everyday.</source>
          <target state="translated">С самого начала ESLint сообщал об ошибках,используя столбцы на основе 0,потому что так сообщал Эсприма,а позже Эспри.Однако большинство инструментов и редакторов используют столбцы на основе 1,что сделало для некоторых хитрых интеграций с ESLint.В версии 1.0.0 мы переключились на отчетность об ошибках с использованием 1-ориентированных столбцов,чтобы соответствовать инструментам,которые разработчики используют каждый день.</target>
        </trans-unit>
        <trans-unit id="3f47013f4aefa635bb5d5b38de8d314393660680" translate="yes" xml:space="preserve">
          <source>Fulfill all the criteria listed in the &quot;Core Rule Guidelines&quot; section</source>
          <target state="translated">Выполнить все критерии,перечисленные в разделе &quot;Руководящие принципы по основным правилам&quot;.</target>
        </trans-unit>
        <trans-unit id="751924331feba79685bd7ca453e7d70d1ee39798" translate="yes" xml:space="preserve">
          <source>Function Declarations</source>
          <target state="translated">Функциональные декларации</target>
        </trans-unit>
        <trans-unit id="fcf112cdf39622e4213dfd22abe8a3faef1a39dd" translate="yes" xml:space="preserve">
          <source>Function Names in ES6</source>
          <target state="translated">Имена функций в ES6</target>
        </trans-unit>
        <trans-unit id="c7f4e21f34290acbc694da290f51d79336ab148f" translate="yes" xml:space="preserve">
          <source>Function names should also be formatted using camel case. The first word of a function name should be a verb (not a noun) to avoid confusion with variables. Do not use underscore for function names.</source>
          <target state="translated">Имена функций также должны быть отформатированы с использованием верблюжьего регистра.Первое слово имени функции должно быть глаголом (а не существительным),чтобы избежать путаницы с переменными.Не используйте подчеркивание для имен функций.</target>
        </trans-unit>
        <trans-unit id="76ddc104d925dd8d9e0c6ffd08ecbcd0bb574271" translate="yes" xml:space="preserve">
          <source>Function.prototype.bind</source>
          <target state="translated">Function.prototype.bind</target>
        </trans-unit>
        <trans-unit id="fa7a943cd941320349d280f97446fe9214a29330" translate="yes" xml:space="preserve">
          <source>FunctionDeclaration</source>
          <target state="translated">FunctionDeclaration</target>
        </trans-unit>
        <trans-unit id="242eeccd5d52147ec1754c157acf9d8bc93f2a94" translate="yes" xml:space="preserve">
          <source>FunctionExpression</source>
          <target state="translated">FunctionExpression</target>
        </trans-unit>
        <trans-unit id="7b9979eefc37fbcb68120aa159c368948bb1d7b5" translate="yes" xml:space="preserve">
          <source>Functions Explained</source>
          <target state="translated">Функции Объясненные</target>
        </trans-unit>
        <trans-unit id="9d73f5d6d7a1f0213edd697639ee44d40a45e487" translate="yes" xml:space="preserve">
          <source>Functions declared inside of other functions should be declared immediately after the &lt;code&gt;var&lt;/code&gt; statement.</source>
          <target state="translated">Функции, объявленные внутри других функций, следует объявлять сразу после оператора &lt;code&gt;var&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4bcc58afe5ae87087e01c52a23f4ed7d3ef4f59" translate="yes" xml:space="preserve">
          <source>Functions should be declared before they are used. When a function is not a method (not attached to an object) it should be defined using function declaration format (not function expression format nor using the &lt;code&gt;Function&lt;/code&gt; constructor). There should be no space between the function name and the opening parentheses. There should be one space between the closing parentheses and the right brace. The right brace should be on the same line as the &lt;code&gt;function&lt;/code&gt; keyword. There should be no space after the opening parentheses or before the closing parentheses. Named arguments should have a space after the comma but not before it. The function body should be indented one level.</source>
          <target state="translated">Функции следует объявлять до их использования. Если функция не является методом (не прикреплена к объекту), она должна быть определена с использованием формата объявления функции (а не формата выражения функции или использования конструктора &lt;code&gt;Function&lt;/code&gt; ). Между именем функции и открывающими скобками не должно быть пробелов. Между закрывающими скобками и правой фигурной скобкой должен быть один пробел. Правая фигурная скобка должна находиться в той же строке, что и ключевое слово &lt;code&gt;function&lt;/code&gt; . После открывающих скобок или перед закрывающими скобками не должно быть пробелов. Именованные аргументы должны иметь пробел после запятой, но не перед ней. Тело функции должно иметь отступ на один уровень.</target>
        </trans-unit>
        <trans-unit id="bde886e46a60602d71e6fb5101b6d6dffe1e77d5" translate="yes" xml:space="preserve">
          <source>Functions that take numerous parameters can be difficult to read and write because it requires the memorization of what each parameter is, its type, and the order they should appear in. As a result, many coders adhere to a convention that caps the number of parameters a function can take.</source>
          <target state="translated">Функции,которые берут множество параметров,могут быть сложны для чтения и записи,так как они требуют запоминания того,что представляет собой каждый параметр,его тип и порядок,в котором они должны появляться.В результате многие программисты придерживаются конвенции,которая ограничивает количество параметров,которые может взять функция.</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">Дальнейшее чтение</target>
        </trans-unit>
        <trans-unit id="e25c1e95ea5591c995c9c1f25b2d912e486761e8" translate="yes" xml:space="preserve">
          <source>Further Reading: https://estools.github.io/escope/</source>
          <target state="translated">Дальнейшее чтение:https://estools.github.io/escope/</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">Дополнительное чтение</target>
        </trans-unit>
        <trans-unit id="ba2bb5be981e93482d382868040766613c7b17db" translate="yes" xml:space="preserve">
          <source>Further, ES6 modules mandate that &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements can only occur in the top level of the module's body.</source>
          <target state="translated">Кроме того, модули ES6 требуют, чтобы операторы &lt;code&gt;import&lt;/code&gt; и &lt;code&gt;export&lt;/code&gt; могли выполняться только на верхнем уровне тела модуля.</target>
        </trans-unit>
        <trans-unit id="7815e5645af9df96e892739a3b0f31714ebc82b7" translate="yes" xml:space="preserve">
          <source>Further, in &lt;code&gt;&quot;always&quot;&lt;/code&gt; mode, a second object option is available that contains a single boolean &lt;code&gt;allowNewlines&lt;/code&gt; property.</source>
          <target state="translated">Кроме того, в режиме &lt;code&gt;&quot;always&quot;&lt;/code&gt; доступна вторая опция объекта, которая содержит одно логическое свойство &lt;code&gt;allowNewlines&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="81de065a8861790d26820fc5d06589b48f235e3e" translate="yes" xml:space="preserve">
          <source>Generally, semicolons are at the end of lines. However, in semicolon-less style, semicolons are at the beginning of lines. This rule enforces that semicolons are at the configured location.</source>
          <target state="translated">Как правило,точка с запятой находится в конце строки.Однако в стиле без точки с запятой точка с запятой находится в начале линий.Это правило приводит к тому,что точка с запятой находится в настроенном месте.</target>
        </trans-unit>
        <trans-unit id="3e79ba65138b641bbe407622f3e91f8a8f78035c" translate="yes" xml:space="preserve">
          <source>Generates &lt;code&gt;build/eslint.js&lt;/code&gt; for use in a browser</source>
          <target state="translated">Создает &lt;code&gt;build/eslint.js&lt;/code&gt; для использования в браузере</target>
        </trans-unit>
        <trans-unit id="fcc5b2914a7a2ea251adb77c39978894c31abd89" translate="yes" xml:space="preserve">
          <source>Generates &lt;code&gt;build/eslint.js&lt;/code&gt;, a version of ESLint for use in the browser</source>
          <target state="translated">Создает &lt;code&gt;build/eslint.js&lt;/code&gt; , версию ESLint для использования в браузере.</target>
        </trans-unit>
        <trans-unit id="5945bd3c8bc550a8cf2401193804d1c9e6d113b1" translate="yes" xml:space="preserve">
          <source>Generates JSDoc documentation and places it into &lt;code&gt;/jsdoc&lt;/code&gt;.</source>
          <target state="translated">Создает документацию JSDoc и помещает ее в &lt;code&gt;/jsdoc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="310727bd5d081f34063cbab1b776498ff1099367" translate="yes" xml:space="preserve">
          <source>Generators are a new type of function in ECMAScript 6 that can return multiple values over time. These special functions are indicated by placing an &lt;code&gt;*&lt;/code&gt; after the &lt;code&gt;function&lt;/code&gt; keyword.</source>
          <target state="translated">Генераторы - это новый тип функций в ECMAScript 6, которые могут возвращать несколько значений с течением времени. Эти специальные функции обозначаются символом &lt;code&gt;*&lt;/code&gt; после ключевого слова &lt;code&gt;function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="39bbe9c52d1a201f6eb4d1a37aa79984adfe3f53" translate="yes" xml:space="preserve">
          <source>Generic names can lead to hard-to-decipher code. This rule allows you to specify a deny list of disallowed identifier names to avoid this practice.</source>
          <target state="translated">Общие имена могут привести к трудно расшифровываемому коду.Это правило позволяет указать запрещающий список запрещенных имен идентификаторов,чтобы избежать такой практики.</target>
        </trans-unit>
        <trans-unit id="93c139a6ce34105689c947640356617403f86eb6" translate="yes" xml:space="preserve">
          <source>Get familiar with the &lt;a href=&quot;user-guide/command-line-interface&quot;&gt;command line options&lt;/a&gt;.</source>
          <target state="translated">Ознакомьтесь с параметрами &lt;a href=&quot;user-guide/command-line-interface&quot;&gt;командной строки&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">Начало работы</target>
        </trans-unit>
        <trans-unit id="58b550930ff9fffb167adfd8ee39a843e9586962" translate="yes" xml:space="preserve">
          <source>Getting Started with ESLint</source>
          <target state="translated">Начало работы с ESLint</target>
        </trans-unit>
        <trans-unit id="7ca8756b353c0b76dc6de040bd89171962896459" translate="yes" xml:space="preserve">
          <source>Getting the Source</source>
          <target state="translated">Получение Источника</target>
        </trans-unit>
        <trans-unit id="128c6bb7b6bf78e6850bf53726f5a89cab72531b" translate="yes" xml:space="preserve">
          <source>Git Precommit Hook</source>
          <target state="translated">Git Precommit Hook</target>
        </trans-unit>
        <trans-unit id="21ff9395b1860dfd1b610dd7f96c9e872d886945" translate="yes" xml:space="preserve">
          <source>Git pre-commit hook that only lints staged changes</source>
          <target state="translated">Крючок,который меняет только ворсинки инсценировки.</target>
        </trans-unit>
        <trans-unit id="e617e36bd8412176fc0cb1c38dd248de4b431c36" translate="yes" xml:space="preserve">
          <source>Glob pattern overrides have higher precedence than the regular configuration in the same config file. Multiple overrides within the same config are applied in order. That is, the last override block in a config file always has the highest precedence.</source>
          <target state="translated">Переопределения шаблона глобуса имеют больший приоритет,чем обычная конфигурация в том же самом конфигурационном файле.Многочисленные переопределения в пределах одного конфигурационного файла применяются по порядку.То есть,последний блок переопределения в конфигурационном файле всегда имеет наибольший приоритет.</target>
        </trans-unit>
        <trans-unit id="0823f01a9e70f704b93047e4e7ec9b65dc5acd57" translate="yes" xml:space="preserve">
          <source>Global variable leaks</source>
          <target state="translated">Глобальные утечки переменных</target>
        </trans-unit>
        <trans-unit id="1e8bf2817d0e3606a6573ec6b33c08545db542a1" translate="yes" xml:space="preserve">
          <source>Global variable leaks.</source>
          <target state="translated">Утечка глобальных переменных.</target>
        </trans-unit>
        <trans-unit id="bdf50a7101b173e7ff27359f55926a9df8d5a3fd" translate="yes" xml:space="preserve">
          <source>Global variables created from a script can produce name collisions with global variables created from another script, which will usually lead to runtime errors or unexpected behavior.</source>
          <target state="translated">Глобальные переменные,созданные из скрипта,могут привести к столкновению имен с глобальными переменными,созданными из другого скрипта,что,как правило,приводит к ошибкам во время выполнения или неожиданному поведению.</target>
        </trans-unit>
        <trans-unit id="b1d22fa6d5fe08a0428bd868deefa69f7b4dad4c" translate="yes" xml:space="preserve">
          <source>Globals can be disabled with the string &lt;code&gt;&quot;off&quot;&lt;/code&gt;. For example, in an environment where most ES2015 globals are available but &lt;code&gt;Promise&lt;/code&gt; is unavailable, you might use this config:</source>
          <target state="translated">Глобалы можно отключить с помощью строки &lt;code&gt;&quot;off&quot;&lt;/code&gt; . Например, в среде, где доступно большинство глобальных переменных ES2015, но недоступен &lt;code&gt;Promise&lt;/code&gt; , вы можете использовать эту конфигурацию:</target>
        </trans-unit>
        <trans-unit id="2a6694355730f716bd8bc02fad0f77e6032920b3" translate="yes" xml:space="preserve">
          <source>Globs are matched using &lt;a href=&quot;https://github.com/kaelzhang/node-ignore&quot;&gt;node-ignore&lt;/a&gt;, so a number of features are available:</source>
          <target state="translated">Для сопоставления глобусов используется &lt;a href=&quot;https://github.com/kaelzhang/node-ignore&quot;&gt;игнорирование узлов&lt;/a&gt; , поэтому доступен ряд функций:</target>
        </trans-unit>
        <trans-unit id="411dfa3491e742f169a9eabf19310458112cfe76" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;https://github.com/eslint/eslint&lt;/a&gt; and click the &quot;Fork&quot; button. Follow the &lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;GitHub documentation&lt;/a&gt; for forking and cloning.</source>
          <target state="translated">Перейдите на &lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;https://github.com/eslint/eslint&lt;/a&gt; и нажмите кнопку &amp;laquo;Вилка&amp;raquo;. Следуйте &lt;a href=&quot;https://help.github.com/articles/fork-a-repo&quot;&gt;документации GitHub&lt;/a&gt; для разветвления и клонирования.</target>
        </trans-unit>
        <trans-unit id="a6617e667de9f88741fd1a7ebaf6f0e23cfbaa38" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/&lt;/a&gt; to download and install the latest stable version for your operating system.</source>
          <target state="translated">Перейдите на &lt;a href=&quot;https://nodejs.org/&quot;&gt;https://nodejs.org/,&lt;/a&gt; чтобы загрузить и установить последнюю стабильную версию для своей операционной системы.</target>
        </trans-unit>
        <trans-unit id="6ea7f828f26d9fceea4f4d6bd87992131e20906f" translate="yes" xml:space="preserve">
          <source>Grunt: &lt;a href=&quot;https://www.npmjs.com/package/grunt-eslint&quot;&gt;grunt-eslint&lt;/a&gt;</source>
          <target state="translated">Grunt: &lt;a href=&quot;https://www.npmjs.com/package/grunt-eslint&quot;&gt;grunt-eslint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="54000f7505185b081957bfac1390caa5502c47df" translate="yes" xml:space="preserve">
          <source>Gulp: &lt;a href=&quot;https://www.npmjs.com/package/gulp-eslint&quot;&gt;gulp-eslint&lt;/a&gt;</source>
          <target state="translated">Глоток: &lt;a href=&quot;https://www.npmjs.com/package/gulp-eslint&quot;&gt;глоток-эслинт&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4a3cb3ca162fa44c4df1b6111753f586c63126fb" translate="yes" xml:space="preserve">
          <source>Handling warnings</source>
          <target state="translated">Обработка предупреждений</target>
        </trans-unit>
        <trans-unit id="400e3ff42bde508534f29f8b35fbfc07bca3a323" translate="yes" xml:space="preserve">
          <source>Have an ESLint team member champion inclusion of the rule</source>
          <target state="translated">Пусть чемпион команды ESLint включит правило.</target>
        </trans-unit>
        <trans-unit id="a198a8011dce88c0fa8a772a88db629e2b707836" translate="yes" xml:space="preserve">
          <source>Have an ESLint team member champion the change</source>
          <target state="translated">Пусть чемпион команды ESLint поменяется.</target>
        </trans-unit>
        <trans-unit id="2331ba67e2d2702911301630fcf52e4c0d23abea" translate="yes" xml:space="preserve">
          <source>Have some extra time and want to contribute? This section talks about the process of working on issues.</source>
          <target state="translated">У вас есть дополнительное время и вы хотите внести свой вклад? В этом разделе рассказывается о процессе работы над вопросами.</target>
        </trans-unit>
        <trans-unit id="0a4d55a8d778e5022fab701977c5d840bbc486d0" translate="yes" xml:space="preserve">
          <source>Hello World</source>
          <target state="translated">Здравствуйте,мир</target>
        </trans-unit>
        <trans-unit id="4698476cc278899c186f08ba38fc540c030e5af5" translate="yes" xml:space="preserve">
          <source>Here are a few common examples using the ES5 syntax:</source>
          <target state="translated">Вот несколько распространенных примеров использования синтаксиса ES5:</target>
        </trans-unit>
        <trans-unit id="50fcab2478cdd473bf8ef09108774e65b13bfec6" translate="yes" xml:space="preserve">
          <source>Here are methods for the &lt;a href=&quot;../rules/array-callback-return&quot;&gt;array-callback-return&lt;/a&gt; rule:</source>
          <target state="translated">Вот методы для правила &lt;a href=&quot;../rules/array-callback-return&quot;&gt;array-callback-return&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="translated">Вот несколько примеров:</target>
        </trans-unit>
        <trans-unit id="8107635e978f92c38dfc42f4127b75fb737c33b8" translate="yes" xml:space="preserve">
          <source>Here are some good commit message summary examples:</source>
          <target state="translated">Вот несколько хороших примеров краткого описания сообщений о коммитте:</target>
        </trans-unit>
        <trans-unit id="93db38995286d4c911c64ebca2e9ba323edd87ae" translate="yes" xml:space="preserve">
          <source>Here are the supported object options:</source>
          <target state="translated">Ниже приведены поддерживаемые параметры объектов:</target>
        </trans-unit>
        <trans-unit id="6bd072abb5800aca18a1177a3f0b3a9572a87781" translate="yes" xml:space="preserve">
          <source>Here is an example configuration:</source>
          <target state="translated">Вот пример конфигурации:</target>
        </trans-unit>
        <trans-unit id="e674c22be7c4bf1ffea002950ce480358ab828e8" translate="yes" xml:space="preserve">
          <source>Here is an example of a generator function:</source>
          <target state="translated">Вот пример функции генератора:</target>
        </trans-unit>
        <trans-unit id="e49700a85e99598dc36d99df820a3fccd24ff705" translate="yes" xml:space="preserve">
          <source>Here is the basic format of the source file for a rule:</source>
          <target state="translated">Вот основной формат исходного файла для правила:</target>
        </trans-unit>
        <trans-unit id="dd8677592fa5ec27c36b1f8455fb17aa39ea36fe" translate="yes" xml:space="preserve">
          <source>Here's a configuration file with the closest equivalent of the old defaults:</source>
          <target state="translated">Вот конфигурационный файл с ближайшим эквивалентом старых установок по умолчанию:</target>
        </trans-unit>
        <trans-unit id="6686d02fccec2123be7895b7576bc475f7b181af" translate="yes" xml:space="preserve">
          <source>Here's a simple example of using the &lt;code&gt;ESLint&lt;/code&gt; class:</source>
          <target state="translated">Вот простой пример использования класса &lt;code&gt;ESLint&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8f2b2a6785fe7221113d612b4694f75cc5b860c2" translate="yes" xml:space="preserve">
          <source>Here's an example &lt;code&gt;.eslintrc.json&lt;/code&gt; file:</source>
          <target state="translated">Вот пример файла &lt;code&gt;.eslintrc.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3caaee4438077ccfc367e54ba130583f7f5793e1" translate="yes" xml:space="preserve">
          <source>Here's an example where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; could be confusing:</source>
          <target state="translated">Вот пример, когда использование &lt;code&gt;=&amp;gt;&lt;/code&gt; может сбивать с толку:</target>
        </trans-unit>
        <trans-unit id="69579a1902b896558c6c5e0da078f9c102327c17" translate="yes" xml:space="preserve">
          <source>Here's an example where the usage of &lt;code&gt;=&amp;gt;&lt;/code&gt; is most likely a typo:</source>
          <target state="translated">Вот пример, в котором использование &lt;code&gt;=&amp;gt;&lt;/code&gt; , скорее всего, является опечаткой:</target>
        </trans-unit>
        <trans-unit id="91cf4ec4989adf874c24a01d0a7887526b72a403" translate="yes" xml:space="preserve">
          <source>Here's what the &lt;code&gt;data&lt;/code&gt; object would look like if one rule, &lt;code&gt;no-extra-semi&lt;/code&gt;, had been run:</source>
          <target state="translated">Вот как выглядел бы объект &lt;code&gt;data&lt;/code&gt; , если бы выполнялось одно правило &lt;code&gt;no-extra-semi&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c8381d2b32745ce22d2b437f812f233f5b2f2c31" translate="yes" xml:space="preserve">
          <source>Here's what the schema from above looks like when properly converted:</source>
          <target state="translated">Вот как выглядит схема сверху при правильной конвертации:</target>
        </trans-unit>
        <trans-unit id="75ae80968a1517575f98728b476cb5292150f02e" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;fix()&lt;/code&gt; function is used to insert a semicolon after the node. Note that a fix is not immediately applied, and may not be applied at all if there are conflicts with other fixes. After applying fixes, ESLint will run all of the enabled rules again on the fixed code, potentially applying more fixes. This process will repeat up to 10 times, or until no more fixable problems are found. Afterwards, any remaining problems will be reported as usual.</source>
          <target state="translated">Здесь функция &lt;code&gt;fix()&lt;/code&gt; используется для вставки точки с запятой после узла. Обратите внимание, что исправление не применяется сразу и может не применяться вообще, если есть конфликты с другими исправлениями. После применения исправлений ESLint снова запустит все включенные правила в фиксированном коде, потенциально применив дополнительные исправления. Этот процесс будет повторяться до 10 раз или до тех пор, пока не исчезнут проблемы, которые можно исправить. Впоследствии обо всех оставшихся проблемах будет сообщено как обычно.</target>
        </trans-unit>
        <trans-unit id="8fbec61ce977dd79baacea5273b4c4549f2f0f9a" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;fix()&lt;/code&gt; function is used to insert a semicolon after the node. Note that the fix is not immediately applied and may not be applied at all if there are conflicts with other fixes. If the fix cannot be applied, then the problem message is reported as usual; if the fix can be applied, then the problem message is not reported.</source>
          <target state="translated">Здесь функция &lt;code&gt;fix()&lt;/code&gt; используется для вставки точки с запятой после узла. Обратите внимание, что исправление не применяется сразу и может не применяться вообще, если есть конфликты с другими исправлениями. Если исправить невозможно, сообщение о проблеме выводится как обычно; если исправление применимо, сообщение о проблеме не выводится.</target>
        </trans-unit>
        <trans-unit id="ff8b740232342a63ba2626bdfd5772e2040ddc24" translate="yes" xml:space="preserve">
          <source>How ESLint Finds Personal Configuration File</source>
          <target state="translated">Как ESLint находит персональный файл конфигурации</target>
        </trans-unit>
        <trans-unit id="5f9f0fbf29f7b501c030758c0c08e3456ab16379" translate="yes" xml:space="preserve">
          <source>How Personal Configuration File Behaves</source>
          <target state="translated">Как ведет себя персональный файл конфигурации</target>
        </trans-unit>
        <trans-unit id="baf60d8659418f3ae6c463f7ba4d66b67aa7ea0a" translate="yes" xml:space="preserve">
          <source>How evil is eval</source>
          <target state="translated">Как оценивается зло</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes" xml:space="preserve">
          <source>How it works</source>
          <target state="translated">Как это работает</target>
        </trans-unit>
        <trans-unit id="1327d170552189b8d51b2d02b266287ad708c180" translate="yes" xml:space="preserve">
          <source>How to store Node.js deployment settings/configuration files? - Stack Overflow</source>
          <target state="translated">Как хранить файлы настроек/конфигураций развертывания Node.js?-Переполнение стека</target>
        </trans-unit>
        <trans-unit id="61690269fd440a22ff0ab6115f326e176ab7f24d" translate="yes" xml:space="preserve">
          <source>However, if you want to enforce the style of spacing between the &lt;code&gt;function&lt;/code&gt; keyword and the following opening parenthesis, please refer to &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt;.</source>
          <target state="translated">Однако, если вы хотите применить стиль интервала между ключевым словом &lt;code&gt;function&lt;/code&gt; и следующей открывающей скобкой, обратитесь к разделу &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1d1d23a4e252168ddaf82392ba6af06eb923611d" translate="yes" xml:space="preserve">
          <source>However, if you're using Node.js, you may want to turn strict mode on globally. Files are typically not concatenated together in Node.js projects and therefore the risk of applying strict mode accidentally is minimal. Further, since every file in Node.js has its own scope, global strict mode only effects the single file in which it is placed.</source>
          <target state="translated">Однако,если вы используете Node.js,вы можете захотеть включить строгий режим глобально.В проектах Node.js файлы,как правило,не объединены вместе,поэтому риск случайного включения строгого режима минимален.Более того,поскольку каждый файл в Node.js имеет свою область действия,глобальный строгий режим действует только на один файл,в который он помещен.</target>
        </trans-unit>
        <trans-unit id="128ecc4491bd188d93624c174fbe6b646868393b" translate="yes" xml:space="preserve">
          <source>However, the ASI mechanism can sometimes be tricky to people who are using semicolons. For example, consider this code:</source>
          <target state="translated">Тем не менее,механизм АСИ иногда может быть хитрым для людей,которые используют точку с запятой.Например,рассмотрим этот код:</target>
        </trans-unit>
        <trans-unit id="c379491a9b3c4a1a9218e57f12d3d5a77f41c184" translate="yes" xml:space="preserve">
          <source>However, there are a few problems with this. First, you can't be sure what type of system the script is running on. Node.js can be run on any computer, including Windows, which uses a different path separator. It's very easy, therefore, to create an invalid path using string concatenation and assuming Unix-style separators. There's also the possibility of having double separators, or otherwise ending up with an invalid path.</source>
          <target state="translated">Однако,с этим есть несколько проблем.Во-первых,вы не можете быть уверены,на какой системе запущен скрипт.Node.js может быть запущен на любом компьютере,включая Windows,который использует другой разделитель путей.Поэтому очень легко создать недействительный путь,используя конкатенирование строк и предполагая разделители в стиле Unix.Также есть возможность иметь двойные разделители,или иначе получить недействительный путь.</target>
        </trans-unit>
        <trans-unit id="eeb456769869329e0928feb28b4a92121639f6d0" translate="yes" xml:space="preserve">
          <source>However, this is no different from using the more concise object literal syntax:</source>
          <target state="translated">Однако,это ничем не отличается от использования более лаконичного объектно-литературного синтаксиса:</target>
        </trans-unit>
        <trans-unit id="0691cb4a13c783b84fc4fabc7b11778ad1cb0a36" translate="yes" xml:space="preserve">
          <source>However, to simplify schema creation, rules may also export an array of schemas for each optional positional argument, and ESLint will automatically validate the required error level first. For example, the &lt;code&gt;yoda&lt;/code&gt; rule accepts a primary mode argument, as well as an extra options object with named properties.</source>
          <target state="translated">Однако для упрощения создания схемы правила могут также экспортировать массив схем для каждого необязательного позиционного аргумента, и ESLint сначала автоматически проверяет требуемый уровень ошибки. Например, правило &lt;code&gt;yoda&lt;/code&gt; принимает аргумент основного режима, а также объект дополнительных параметров с именованными свойствами.</target>
        </trans-unit>
        <trans-unit id="c30ae13ab8f250b713026f3fce02de7c62dc87d4" translate="yes" xml:space="preserve">
          <source>However, when declared in the top-level of a browser script these variables are not 'script-scoped'. They are actually created in the global scope and could produce name collisions with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; variables and &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations from other scripts. This does not apply to ES and CommonJS modules.</source>
          <target state="translated">Однако, когда они объявлены на верхнем уровне сценария браузера, эти переменные не ограничиваются областью действия сценария. Они фактически создаются в глобальной области видимости и могут вызывать конфликты имен с переменными &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; и &lt;code&gt;let&lt;/code&gt; , а также объявлениями &lt;code&gt;function&lt;/code&gt; и &lt;code&gt;class&lt;/code&gt; из других сценариев. Это не относится к модулям ES и CommonJS.</target>
        </trans-unit>
        <trans-unit id="c427752105bd33ab8292fe22f39c248a208b872f" translate="yes" xml:space="preserve">
          <source>However, with appropriate new lines, it becomes easy to read and understand. Look at the same code written below with line breaks after each call.</source>
          <target state="translated">Однако,при наличии соответствующих новых строк,она становится легко читаемой и понятной.Посмотрите на один и тот же код,написанный ниже,с разрывами строк после каждого вызова.</target>
        </trans-unit>
        <trans-unit id="ddc6b64c7c2b6bc0e7723c5590c9bcaba38b512d" translate="yes" xml:space="preserve">
          <source>However, you might not want to manually add &lt;code&gt;eslint-disable-next-line&lt;/code&gt; or &lt;code&gt;eslint-disable-line&lt;/code&gt;. You can achieve the effect of only receiving errors for console calls with the &lt;code&gt;no-restricted-syntax&lt;/code&gt; rule:</source>
          <target state="translated">Однако вы можете не захотеть вручную добавлять &lt;code&gt;eslint-disable-next-line&lt;/code&gt; или &lt;code&gt;eslint-disable-line&lt;/code&gt; . Вы можете добиться эффекта получения ошибок только для консольных вызовов с помощью правила &lt;code&gt;no-restricted-syntax&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="84bf4d2e563fecd62c000173949d1bd469a0d041" translate="yes" xml:space="preserve">
          <source>I hope to deprecate &lt;code&gt;functionExpressionScope&lt;/code&gt; field as replacing by &lt;code&gt;scope.type === &quot;function-expression-name&quot;&lt;/code&gt;.</source>
          <target state="translated">Я надеюсь &lt;code&gt;scope.type === &quot;function-expression-name&quot;&lt;/code&gt; от поля &lt;code&gt;functionExpressionScope&lt;/code&gt; и заменить его на scope.type === &quot;имя-выражения-функции&quot; .</target>
        </trans-unit>
        <trans-unit id="3a588183ac256de41f63b2fdfbfde1275ea31a40" translate="yes" xml:space="preserve">
          <source>I hope to deprecate &lt;code&gt;identifiers&lt;/code&gt; field as replacing by &lt;code&gt;defs[].name&lt;/code&gt; field.</source>
          <target state="translated">Я надеюсь &lt;code&gt;defs[].name&lt;/code&gt; от поля &lt;code&gt;identifiers&lt;/code&gt; и заменить его на поле defs []. Name .</target>
        </trans-unit>
        <trans-unit id="1c0d841662dae605665760989b60b4cb4244744f" translate="yes" xml:space="preserve">
          <source>I hope to rename &lt;code&gt;set&lt;/code&gt; field or replace by a method.</source>
          <target state="translated">Надеюсь переименовать &lt;code&gt;set&lt;/code&gt; поле или заменить методом.</target>
        </trans-unit>
        <trans-unit id="7b889fd29b2848edc4e5927706ca2407a685ae99" translate="yes" xml:space="preserve">
          <source>IIFEs</source>
          <target state="translated">IIFEs</target>
        </trans-unit>
        <trans-unit id="1425a804470d990c0638321f27625d9932279335" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt; must be followed by at least one whitespace.</source>
          <target state="translated">Если &lt;code&gt;&quot;always&quot;&lt;/code&gt; то после &lt;code&gt;//&lt;/code&gt; или &lt;code&gt;/*&lt;/code&gt; должен быть хотя бы один пробел.</target>
        </trans-unit>
        <trans-unit id="94911ace78ebe05995938d04eaeb09f0e2b08447" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: false&lt;/code&gt; then balanced whitespace is not enforced.</source>
          <target state="translated">Если &lt;code&gt;&quot;balanced&quot;: false&lt;/code&gt; сбалансированные пробелы не применяются.</target>
        </trans-unit>
        <trans-unit id="df6236bfac26b8bc9b50004728602cf54088348b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; and &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;/*&lt;/code&gt; must be followed by at least one whitespace, and the &lt;code&gt;*/&lt;/code&gt; must be preceded by at least one whitespace.</source>
          <target state="translated">Если &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; и &lt;code&gt;&quot;always&quot;&lt;/code&gt; то за &lt;code&gt;/*&lt;/code&gt; должен следовать хотя бы один пробел, а перед &lt;code&gt;*/&lt;/code&gt; должен быть как минимум один пробел.</target>
        </trans-unit>
        <trans-unit id="65b29e4c4508e7a3b1dcca425ea25f5d0a6019fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; and &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following &lt;code&gt;/*&lt;/code&gt; or preceding &lt;code&gt;*/&lt;/code&gt;.</source>
          <target state="translated">Если &lt;code&gt;&quot;balanced&quot;: true&lt;/code&gt; и &lt;code&gt;&quot;never&quot;&lt;/code&gt; то не должно быть пробелов после &lt;code&gt;/*&lt;/code&gt; или перед &lt;code&gt;*/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a1bd5cf86f2f0cd115eb5d6412df3814063f3fe2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following.</source>
          <target state="translated">Если &lt;code&gt;&quot;never&quot;&lt;/code&gt; то после него не должно быть пробелов.</target>
        </trans-unit>
        <trans-unit id="af559ebac1d09db39ca603a5249c7f829d0aab9d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;.eslintrc.*&lt;/code&gt; and/or &lt;code&gt;package.json&lt;/code&gt; files are also used for configuration (i.e., &lt;code&gt;--no-eslintrc&lt;/code&gt; was not specified), the configurations will be merged. Options from this configuration file have precedence over the options from &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="translated">Если &lt;code&gt;.eslintrc.*&lt;/code&gt; И / или &lt;code&gt;package.json&lt;/code&gt; также используются для конфигурации (т. &lt;code&gt;--no-eslintrc&lt;/code&gt; не был указан), конфигурации будут объединены. Параметры из этого файла конфигурации имеют приоритет над параметрами из &lt;code&gt;.eslintrc.*&lt;/code&gt; И &lt;code&gt;package.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a9f1ee9e49e65873a251fff85f77d43eab66dac" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RuleTester.describe&lt;/code&gt; and &lt;code&gt;RuleTester.it&lt;/code&gt; have been set to function values, &lt;code&gt;RuleTester&lt;/code&gt; will use &lt;code&gt;RuleTester.describe&lt;/code&gt; and &lt;code&gt;RuleTester.it&lt;/code&gt; to run tests. You can use this to customize the behavior of &lt;code&gt;RuleTester&lt;/code&gt; to match a test framework that you're using.</source>
          <target state="translated">Если для &lt;code&gt;RuleTester.describe&lt;/code&gt; и &lt;code&gt;RuleTester.it&lt;/code&gt; заданы значения функций, &lt;code&gt;RuleTester&lt;/code&gt; будет использовать &lt;code&gt;RuleTester.describe&lt;/code&gt; и &lt;code&gt;RuleTester.it&lt;/code&gt; для запуска тестов. Вы можете использовать это, чтобы настроить поведение &lt;code&gt;RuleTester&lt;/code&gt; в соответствии с используемой вами тестовой платформой.</target>
        </trans-unit>
        <trans-unit id="ec01bb29e273ee321f9993370bc52ce9eab5a01b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;align&lt;/code&gt; is defined as an object, but not all of the parameters are provided, undefined parameters will default to the following:</source>
          <target state="translated">Если &lt;code&gt;align&lt;/code&gt; определен как объект, но не все параметры предоставлены, неопределенные параметры по умолчанию будут следующими:</target>
        </trans-unit>
        <trans-unit id="7468df61e4cc7cbe78e75b5258128550f1d95105" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;eslint&lt;/code&gt; could find configuration files in the project, &lt;code&gt;eslint&lt;/code&gt; ignores &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file even if it's in an ancestor directory of the project directory.</source>
          <target state="translated">Если &lt;code&gt;eslint&lt;/code&gt; может найти файлы конфигурации в проекте, &lt;code&gt;eslint&lt;/code&gt; игнорирует файл &lt;code&gt;~/.eslintrc.*&lt;/code&gt; , Даже если он находится в родительском каталоге каталога проекта.</target>
        </trans-unit>
        <trans-unit id="c910d7177c7be80d23035d833053528e65fae9b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;eslint&lt;/code&gt; could not find any configuration file in the project, &lt;code&gt;eslint&lt;/code&gt; loads &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file.</source>
          <target state="translated">Если &lt;code&gt;eslint&lt;/code&gt; не может найти какой-либо файл конфигурации в проекте, &lt;code&gt;eslint&lt;/code&gt; загружает файл &lt;code&gt;~/.eslintrc.*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f571fae99406f632111fb82aa898e2ca4b333877" translate="yes" xml:space="preserve">
          <source>If ESLint can't find a configuration, then it will throw an error and ask you to provide one.</source>
          <target state="translated">Если ESLint не может найти конфигурацию,то он бросит ошибку и попросит вас ее предоставить.</target>
        </trans-unit>
        <trans-unit id="6f1aa46516ae8fbeb1465af094f22ef03395bdcb" translate="yes" xml:space="preserve">
          <source>If ESLint parses code in strict mode, the parser (instead of this rule) reports the error.</source>
          <target state="translated">Если ESLint разбирает код в строгом режиме,синтаксический анализатор (вместо этого правила)сообщает об ошибке.</target>
        </trans-unit>
        <trans-unit id="36700c2c10655c29379465dfe1fd6e89caba46f9" translate="yes" xml:space="preserve">
          <source>If Statements</source>
          <target state="translated">Если Заявления</target>
        </trans-unit>
        <trans-unit id="28c62b22bf0008ec1a25ee68e5e4cab444e0ca67" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;catch&lt;/code&gt; clause in a &lt;code&gt;try&lt;/code&gt; statement accidentally (or purposely) assigns another value to the exception parameter, it impossible to refer to the error from that point on. Since there is no &lt;code&gt;arguments&lt;/code&gt; object to offer alternative access to this data, assignment of the parameter is absolutely destructive.</source>
          <target state="translated">Если предложение &lt;code&gt;catch&lt;/code&gt; в операторе &lt;code&gt;try&lt;/code&gt; случайно (или намеренно) присваивает другое значение параметру исключения, с этого момента невозможно ссылаться на ошибку. Поскольку нет объекта &lt;code&gt;arguments&lt;/code&gt; , предлагающего альтернативный доступ к этим данным, присвоение параметра абсолютно разрушительно.</target>
        </trans-unit>
        <trans-unit id="ec2084855440431416b29d5a35071c33fe850853" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;switch&lt;/code&gt; doesn't have a &lt;code&gt;default&lt;/code&gt; case, then it should be indicated with a comment.</source>
          <target state="translated">Если у &lt;code&gt;switch&lt;/code&gt; нет регистра по &lt;code&gt;default&lt;/code&gt; , это следует указать с комментарием.</target>
        </trans-unit>
        <trans-unit id="68b79dad32e10651fe6aed17316501637283b2e3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;switch&lt;/code&gt; statement has duplicate test expressions in &lt;code&gt;case&lt;/code&gt; clauses, it is likely that a programmer copied a &lt;code&gt;case&lt;/code&gt; clause but forgot to change the test expression.</source>
          <target state="translated">Если оператор &lt;code&gt;switch&lt;/code&gt; имеет повторяющиеся тестовые выражения в предложениях &lt;code&gt;case&lt;/code&gt; , вполне вероятно, что программист скопировал предложение &lt;code&gt;case&lt;/code&gt; , но забыл изменить выражение теста.</target>
        </trans-unit>
        <trans-unit id="1eb5ae63c429e600917fd387f40aefc35963e6da" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;switch&lt;/code&gt; statement should have a &lt;code&gt;default&lt;/code&gt; clause, it's considered a best practice to define it as the last clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3285cd66acdef654458171d8d844b63892f8e4" translate="yes" xml:space="preserve">
          <source>If a Promise executor function is using &lt;code&gt;await&lt;/code&gt;, this is usually a sign that it is not actually necessary to use the &lt;code&gt;new Promise&lt;/code&gt; constructor, or the scope of the &lt;code&gt;new Promise&lt;/code&gt; constructor can be reduced.</source>
          <target state="translated">Если функция-исполнитель Promise использует &lt;code&gt;await&lt;/code&gt; , это обычно признак того, что на самом деле нет необходимости использовать &lt;code&gt;new Promise&lt;/code&gt; конструктор Promise или область действия &lt;code&gt;new Promise&lt;/code&gt; конструктора Promise может быть уменьшена.</target>
        </trans-unit>
        <trans-unit id="2a8d6853f7a44d1ae90dbb34ebf7a13d629e57a6" translate="yes" xml:space="preserve">
          <source>If a class method does not use &lt;code&gt;this&lt;/code&gt;, it can &lt;em&gt;sometimes&lt;/em&gt; be made into a static function. If you do convert the method into a static function, instances of the class that call that particular method have to be converted to a static call as well (&lt;code&gt;MyClass.callStaticMethod()&lt;/code&gt;)</source>
          <target state="translated">Если метод класса не использует &lt;code&gt;this&lt;/code&gt; , &lt;em&gt;иногда его&lt;/em&gt; можно преобразовать в статическую функцию. Если вы конвертируете метод в статическую функцию, экземпляры класса, вызывающего этот конкретный метод, также должны быть преобразованы в статический вызов ( &lt;code&gt;MyClass.callStaticMethod()&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="75d8712325a9b6ce7e7c938b1688be996e809e2e" translate="yes" xml:space="preserve">
          <source>If a config is provided via the &lt;code&gt;--config&lt;/code&gt; CLI option, the glob patterns in the config are relative to the current working directory rather than the base directory of the given config. For example, if &lt;code&gt;--config configs/.eslintrc.json&lt;/code&gt; is present, the glob patterns in the config are relative to &lt;code&gt;.&lt;/code&gt; rather than &lt;code&gt;./configs&lt;/code&gt;.</source>
          <target state="translated">Если конфигурация предоставляется через параметр &lt;code&gt;--config&lt;/code&gt; CLI, шаблоны глобусов в конфигурации относятся к текущему рабочему каталогу, а не к базовому каталогу данной конфигурации. Например, если присутствует &lt;code&gt;--config configs/.eslintrc.json&lt;/code&gt; , шаблоны глобусов в конфигурации относятся к &lt;code&gt;.&lt;/code&gt; а не &lt;code&gt;./configs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cfb34f77b18d711a1878b3c6d4be802a505adb15" translate="yes" xml:space="preserve">
          <source>If a config is provided via the &lt;code&gt;--config&lt;/code&gt; CLI option, the ignore patterns that start with &lt;code&gt;/&lt;/code&gt; in the config are relative to the current working directory rather than the base directory of the given config. For example, if &lt;code&gt;--config configs/.eslintrc.json&lt;/code&gt; is present, the ignore patterns in the config are relative to &lt;code&gt;.&lt;/code&gt; rather than &lt;code&gt;./configs&lt;/code&gt;.</source>
          <target state="translated">Если конфигурация предоставляется через параметр &lt;code&gt;--config&lt;/code&gt; CLI, шаблоны игнорирования, которые начинаются с &lt;code&gt;/&lt;/code&gt; в конфигурации, относятся к текущему рабочему каталогу, а не к базовому каталогу данной конфигурации. Например, если присутствует &lt;code&gt;--config configs/.eslintrc.json&lt;/code&gt; , шаблоны игнорирования в конфигурации относятся к &lt;code&gt;.&lt;/code&gt; а не &lt;code&gt;./configs&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9adcd77d4fef720476018d5517c24d272a09b5e" translate="yes" xml:space="preserve">
          <source>If a custom message is specified with the &lt;code&gt;message&lt;/code&gt; property, ESLint will use that message when reporting occurrences of the syntax specified in the &lt;code&gt;selector&lt;/code&gt; property.</source>
          <target state="translated">Если настраиваемое сообщение указано в свойстве &lt;code&gt;message&lt;/code&gt; , ESLint будет использовать это сообщение при сообщении о вхождениях синтаксиса, указанного в свойстве &lt;code&gt;selector&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d79ab9e420559d08edcc7d09e6db99ddf957f261" translate="yes" xml:space="preserve">
          <source>If a directory is specified, a cache file will be created inside the specified folder. The name of the file will be based on the hash of the current working directory (CWD). e.g.: &lt;code&gt;.cache_hashOfCWD&lt;/code&gt;</source>
          <target state="translated">Если указан каталог, в указанной папке будет создан файл кеша. Имя файла будет основано на хеш-коде текущего рабочего каталога (CWD). например: &lt;code&gt;.cache_hashOfCWD&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="013f35aac0d5daf915b473bc276e6dac035af41c" translate="yes" xml:space="preserve">
          <source>If a filename in the optional second parameter matches a file that is configured to be ignored, then this function returns no errors or warnings. The method includes an additional optional boolean third parameter. When &lt;code&gt;true&lt;/code&gt;, a resolved file name that is ignored will return a warning.</source>
          <target state="translated">Если имя файла в необязательном втором параметре соответствует файлу, который настроен на игнорирование, эта функция не возвращает ошибок или предупреждений. Метод включает дополнительный необязательный третий логический параметр. Если установлено значение &lt;code&gt;true&lt;/code&gt; , разрешенное имя файла, которое игнорируется, вернет предупреждение.</target>
        </trans-unit>
        <trans-unit id="a005d146088f613830277a0865530f765b797a30" translate="yes" xml:space="preserve">
          <source>If a glob pattern starts with &lt;code&gt;/&lt;/code&gt;, the pattern is relative to the base directory of the config file. For example, &lt;code&gt;/foo.js&lt;/code&gt; in &lt;code&gt;lib/.eslintrc.json&lt;/code&gt; matches to &lt;code&gt;lib/foo.js&lt;/code&gt; but not &lt;code&gt;lib/subdir/foo.js&lt;/code&gt;.</source>
          <target state="translated">Если шаблон глобуса начинается с &lt;code&gt;/&lt;/code&gt; , шаблон относится к базовому каталогу файла конфигурации. Например, &lt;code&gt;/foo.js&lt;/code&gt; в &lt;code&gt;lib/.eslintrc.json&lt;/code&gt; матчей к &lt;code&gt;lib/foo.js&lt;/code&gt; , но не &lt;code&gt;lib/subdir/foo.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d76f9a27f5a237607b9a23b2fbc50e0d167e5729" translate="yes" xml:space="preserve">
          <source>If a loop contains no nested loops or switches, labeling the loop is unnecessary.</source>
          <target state="translated">Если в петле нет вложенных петель или переключателей,маркировка петли не нужна.</target>
        </trans-unit>
        <trans-unit id="ffa52261da0cd7a502d7bf4801fc10335e0f7e30" translate="yes" xml:space="preserve">
          <source>If a processor name starts with &lt;code&gt;.&lt;/code&gt;, ESLint handles the processor as a &lt;strong&gt;file extension-named processor&lt;/strong&gt; especially and applies the processor to the kind of files automatically. People don't need to specify the file extension-named processors in their config files.</source>
          <target state="translated">Если имя процессора начинается с &lt;code&gt;.&lt;/code&gt; , ESLint обрабатывает процессор как процессор с именем &lt;strong&gt;расширения&lt;/strong&gt; файла и автоматически применяет процессор к типу файлов. Людям не нужно указывать процессоры с расширениями файлов в своих файлах конфигурации.</target>
        </trans-unit>
        <trans-unit id="e5fad7687981070af33a1b73460dae7788d4aabc" translate="yes" xml:space="preserve">
          <source>If a reference is inside of a binary expression or a ternary expression, this rule checks the result of the expression instead. If a reference is inside of a dynamic expression (e.g. &lt;code&gt;CallExpression&lt;/code&gt;, &lt;code&gt;YieldExpression&lt;/code&gt;, ...), this rule ignores it.</source>
          <target state="translated">Если ссылка находится внутри двоичного выражения или троичного выражения, это правило вместо этого проверяет результат выражения. Если ссылка находится внутри выражения динамического (например , &lt;code&gt;CallExpression&lt;/code&gt; , &lt;code&gt;YieldExpression&lt;/code&gt; , ...), это правило игнорирует.</target>
        </trans-unit>
        <trans-unit id="1e1270048dc46eb08c8bcfe13b7604338d3a96bc" translate="yes" xml:space="preserve">
          <source>If a rule has additional options, you can specify them using array literal syntax, such as:</source>
          <target state="translated">Если правило имеет дополнительные опции,вы можете указать их,используя синтаксис массивов,например:</target>
        </trans-unit>
        <trans-unit id="ed092715e7af9dc686e6a209cce5db829a9d7eae" translate="yes" xml:space="preserve">
          <source>If a string is provided as an error instead of an object, the string is used to assert the &lt;code&gt;message&lt;/code&gt; of the error.</source>
          <target state="translated">Если строка предоставляется как ошибка вместо объекта, строка используется для утверждения &lt;code&gt;message&lt;/code&gt; об ошибке.</target>
        </trans-unit>
        <trans-unit id="f9d78cfc776b15554fbf39fc84e184e687deb527" translate="yes" xml:space="preserve">
          <source>If a valid test case only uses the &lt;code&gt;code&lt;/code&gt; property, it can optionally be provided as a string containing the code, rather than an object with a &lt;code&gt;code&lt;/code&gt; key.</source>
          <target state="translated">Если допустимый тестовый пример использует только свойство &lt;code&gt;code&lt;/code&gt; , его можно дополнительно предоставить в виде строки, содержащей код, а не объекта с ключом &lt;code&gt;code&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ce06671cc1c5422162e0dbee1e02e62dbe4151bb" translate="yes" xml:space="preserve">
          <source>If a variable is initialized or assigned the value &lt;code&gt;this&lt;/code&gt;, the name of the variable &lt;em&gt;must&lt;/em&gt; be a designated alias.</source>
          <target state="translated">Если переменная инициализирована или ей присвоено значение &lt;code&gt;this&lt;/code&gt; , имя переменной &lt;em&gt;должно&lt;/em&gt; быть назначенным псевдонимом.</target>
        </trans-unit>
        <trans-unit id="83ba7ea230d056612009b4845562832e2c193c78" translate="yes" xml:space="preserve">
          <source>If a variable is never reassigned, using the &lt;code&gt;const&lt;/code&gt; declaration is better.</source>
          <target state="translated">Если переменная никогда не переназначается, лучше использовать объявление &lt;code&gt;const&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05279982445e35103bd42dc84f0c8fa4bc99dcf3" translate="yes" xml:space="preserve">
          <source>If a variable with a designated name is declared, it &lt;em&gt;must&lt;/em&gt; be either initialized (in the declaration) or assigned (in the same scope as the declaration) the value &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">Если объявлена ​​переменная с назначенным именем, ей &lt;em&gt;необходимо&lt;/em&gt; либо инициализировать (в объявлении), либо присвоить (в той же области, что и объявление) значение &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4c391588a627bffc4f9b2fa0a7ad1a3f187fc0a5" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;.eslintignore&lt;/code&gt; file is not found and an alternate file is not specified, ESLint will look in package.json for an &lt;code&gt;eslintIgnore&lt;/code&gt; key to check for files to ignore.</source>
          <target state="translated">Если файл &lt;code&gt;.eslintignore&lt;/code&gt; не найден и альтернативный файл не указан, ESLint будет искать в package.json ключ &lt;code&gt;eslintIgnore&lt;/code&gt; , чтобы проверить файлы, которые следует игнорировать.</target>
        </trans-unit>
        <trans-unit id="31e630605fbaa69cd7c9106660d700ae7cc8e034" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt; block contains a &lt;code&gt;return&lt;/code&gt; statement, the &lt;code&gt;else&lt;/code&gt; block becomes unnecessary. Its contents can be placed outside of the block.</source>
          <target state="translated">Если блок &lt;code&gt;if&lt;/code&gt; содержит оператор &lt;code&gt;return&lt;/code&gt; , блок &lt;code&gt;else&lt;/code&gt; становится ненужным. Его содержимое может быть размещено за пределами блока.</target>
        </trans-unit>
        <trans-unit id="060bb33758f5003d2495b8e6017c8aabee9fd6f6" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;if&lt;/code&gt; statement is the only statement in the &lt;code&gt;else&lt;/code&gt; block, it is often clearer to use an &lt;code&gt;else if&lt;/code&gt; form.</source>
          <target state="translated">Если оператор &lt;code&gt;if&lt;/code&gt; является единственным оператором в блоке &lt;code&gt;else&lt;/code&gt; , часто проще использовать форму &lt;code&gt;else if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="108772879dc734697fb9e3f2633d5a6195dc2277" translate="yes" xml:space="preserve">
          <source>If an async executor function throws an error, the error will be lost and won't cause the newly-constructed &lt;code&gt;Promise&lt;/code&gt; to reject. This could make it difficult to debug and handle some errors.</source>
          <target state="translated">Если функция async-исполнителя выдает ошибку, ошибка будет потеряна и не приведет к отклонению вновь созданного &lt;code&gt;Promise&lt;/code&gt; . Это может затруднить отладку и обработку некоторых ошибок.</target>
        </trans-unit>
        <trans-unit id="731f187649e609b76cb19e1a10d708cfa4f42b24" translate="yes" xml:space="preserve">
          <source>If an integration has dependencies on ESLint and a set of plugins, and the tool invokes ESLint on behalf of the user with a preset configuration, the tool should set &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; to the top-level directory of the tool.</source>
          <target state="translated">Если у интеграции есть зависимости от ESLint и набора плагинов, и инструмент вызывает ESLint от имени пользователя с предустановленной конфигурацией, инструмент должен установить &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; в каталог верхнего уровня инструмента. ,</target>
        </trans-unit>
        <trans-unit id="430cfbaad19dd61f95f6a025f052c0903d62611a" translate="yes" xml:space="preserve">
          <source>If an issue has already been claimed by someone, please be respectful of that person's desire to complete the work and don't work on it unless you verify that they are no longer interested.</source>
          <target state="translated">Если вопрос уже был кем-то заявлен,пожалуйста,уважайте желание этого человека завершить работу и не работайте над ним,пока не убедитесь,что он больше не заинтересован.</target>
        </trans-unit>
        <trans-unit id="ff0ee57a0b710f6259eb08de6ae0349bb2ee8fc7" translate="yes" xml:space="preserve">
          <source>If another developer attempts to add &lt;code&gt;baz();&lt;/code&gt; to the &lt;code&gt;if&lt;/code&gt; statement, they might mistakenly change the code to</source>
          <target state="translated">Если другой разработчик пытается добавить &lt;code&gt;baz();&lt;/code&gt; в оператор &lt;code&gt;if&lt;/code&gt; , они могут ошибочно изменить код на</target>
        </trans-unit>
        <trans-unit id="d490c46886da3eef22da5146c1cd9f085497227a" translate="yes" xml:space="preserve">
          <source>If any code paths in a function return a value explicitly but some code path do not return a value explicitly, it might be a typing mistake, especially in a large function. In the following example:</source>
          <target state="translated">Если какие-либо пути кода в функции возвращают значение явно,а некоторый путь кода не возвращает значение явно,то это может быть опечаткой,особенно в большой функции.В следующем примере:</target>
        </trans-unit>
        <trans-unit id="c724ecc343a6b714b13c8432f177e2988958c487" translate="yes" xml:space="preserve">
          <source>If comments are inconsistent because they are not updated when function definitions are modified, then readers might become confused.</source>
          <target state="translated">Если комментарии противоречат друг другу,потому что они не обновляются при изменении определений функций,тогда читатели могут запутаться.</target>
        </trans-unit>
        <trans-unit id="98fcb5379ef45039a8d0d4e959eef97582a2d85a" translate="yes" xml:space="preserve">
          <source>If comments are invalid because of typing mistakes, then documentation will be incomplete.</source>
          <target state="translated">Если комментарии недействительны из-за ошибок при вводе,то документация будет неполной.</target>
        </trans-unit>
        <trans-unit id="cbb41ffface398ef2232aa13a97c60ff349b62b2" translate="yes" xml:space="preserve">
          <source>If don't want to enforce consistent linebreaks inside function parentheses, do not turn on this rule.</source>
          <target state="translated">Если вы не желаете применять последовательные линейные разрывы внутри круглых скобок функций,не включайте это правило.</target>
        </trans-unit>
        <trans-unit id="e46b2ee896050d579bb14e7a488a09fdee949b37" translate="yes" xml:space="preserve">
          <source>If explicit declaration of global variables is not to your taste.</source>
          <target state="translated">Если явное объявление глобальных переменных не по вашему вкусу.</target>
        </trans-unit>
        <trans-unit id="8f73860fe183fb4ea93cd5ae590599a3b93a4551" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt;, then the literal value must always come first.</source>
          <target state="translated">Если это &lt;code&gt;&quot;always&quot;&lt;/code&gt; , то буквальное значение всегда должно быть первым.</target>
        </trans-unit>
        <trans-unit id="9a5cddf7639a3dd0ad1b5edfefda8e16074b2b70" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;object&quot;&lt;/code&gt; (default), the dot in a member expression should be on the same line as the object portion.</source>
          <target state="translated">Если это &lt;code&gt;&quot;object&quot;&lt;/code&gt; (по умолчанию), точка в выражении члена должна находиться на той же строке, что и часть объекта.</target>
        </trans-unit>
        <trans-unit id="03af9596ea8057aa7372bb310711b2afc56fd99c" translate="yes" xml:space="preserve">
          <source>If it is &lt;code&gt;&quot;property&quot;&lt;/code&gt;, the dot in a member expression should be on the same line as the property portion.</source>
          <target state="translated">Если это &lt;code&gt;&quot;property&quot;&lt;/code&gt; , точка в выражении члена должна находиться на той же строке, что и часть свойства.</target>
        </trans-unit>
        <trans-unit id="bbd5ac5250ad5ecc9dc78acbb61a5f71c2252cd3" translate="yes" xml:space="preserve">
          <source>If it is the default &lt;code&gt;&quot;never&quot;&lt;/code&gt;, then comparisons must never be Yoda conditions.</source>
          <target state="translated">Если по умолчанию установлено &lt;code&gt;&quot;never&quot;&lt;/code&gt; , то сравнения никогда не должны быть условиями Йоды.</target>
        </trans-unit>
        <trans-unit id="bc9f5a48306289fb13de2cacc02542cd88ed1536" translate="yes" xml:space="preserve">
          <source>If more than one parameter has the same name in a function definition, the last occurrence &quot;shadows&quot; the preceding occurrences. A duplicated name might be a typing error.</source>
          <target state="translated">Если более одного параметра имеет одно и то же имя в определении функции,то последнее вхождение &quot;затеняет&quot; предшествующие вхождения.Дублированное имя может быть ошибкой при наборе текста.</target>
        </trans-unit>
        <trans-unit id="26b2099ade2be35a89641a96b838792d35446840" translate="yes" xml:space="preserve">
          <source>If multiple selectors have equal specificity, their listeners will be called in alphabetical order for that node.</source>
          <target state="translated">Если несколько селекторов имеют одинаковую специфику,то их слушатели будут вызываться в алфавитном порядке для данного узла.</target>
        </trans-unit>
        <trans-unit id="cb4224d9d3359902074aad85bbe517c47fc6fe85" translate="yes" xml:space="preserve">
          <source>If one of those occurs in an innocent-looking statement such as &lt;code&gt;a == b&lt;/code&gt; the actual problem is very difficult to spot.</source>
          <target state="translated">Если одно из них встречается в невинно выглядящем заявлении, таком как &lt;code&gt;a == b&lt;/code&gt; настоящую проблему очень трудно обнаружить.</target>
        </trans-unit>
        <trans-unit id="76657063e397c9efcf5783cfd89e0f50bdbd6248" translate="yes" xml:space="preserve">
          <source>If present, it's usually the last clause, but it doesn't need to be. It is also allowed to put the &lt;code&gt;default&lt;/code&gt; clause before all &lt;code&gt;case&lt;/code&gt; clauses, or anywhere between. The behavior is mostly the same as if it was the last clause. The &lt;code&gt;default&lt;/code&gt; block will be still executed only if there is no match in the &lt;code&gt;case&lt;/code&gt; clauses (including those defined after the &lt;code&gt;default&lt;/code&gt;), but there is also the ability to &quot;fall through&quot; from the &lt;code&gt;default&lt;/code&gt; clause to the following clause in the list. However, such flow is not common and it would be confusing to the readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c77efc2dce3b6c849c7d1edf87a9fd15fcf2ac" translate="yes" xml:space="preserve">
          <source>If re-exporting from an imported module, you should add the imports to the &lt;code&gt;import&lt;/code&gt;-statement, and export that directly, not use &lt;code&gt;export ... from&lt;/code&gt;.</source>
          <target state="translated">При реэкспорте из импортированного модуля вы должны добавить импорт в оператор &lt;code&gt;import&lt;/code&gt; и экспортировать его напрямую, а не использовать &lt;code&gt;export ... from&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0eb3e53516bf8f022c5a2446e35a316afcbffebd" translate="yes" xml:space="preserve">
          <source>If that sounds like you, then continue reading to get started.</source>
          <target state="translated">Если это похоже на тебя,то продолжай читать,чтобы начать.</target>
        </trans-unit>
        <trans-unit id="2d461afe2572662db02026a93f2f9778445ac9b5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option is used, this rule requires that files always begin with the Unicode BOM character U+FEFF. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; is used, files must never begin with U+FEFF.</source>
          <target state="translated">Если используется параметр &lt;code&gt;&quot;always&quot;&lt;/code&gt; , это правило требует, чтобы файлы всегда начинались с символа спецификации Unicode U + FEFF. Если используется &lt;code&gt;&quot;never&quot;&lt;/code&gt; , файлы никогда не должны начинаться с U + FEFF.</target>
        </trans-unit>
        <trans-unit id="a004223cf87eacec3bf8edcbe4617e861ea2175b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;exceptRange&quot;&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;, the rule &lt;em&gt;allows&lt;/em&gt; yoda conditions in range comparisons which are wrapped directly in parentheses, including the parentheses of an &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;while&lt;/code&gt; condition. The default value is &lt;code&gt;false&lt;/code&gt;. A &lt;em&gt;range&lt;/em&gt; comparison tests whether a variable is inside or outside the range between two literal values.</source>
          <target state="translated">Если свойство &lt;code&gt;&quot;exceptRange&quot;&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; , правило &lt;em&gt;разрешает&lt;/em&gt; условия yoda в сравнении диапазонов, которые заключены непосредственно в круглые скобки, включая круглые скобки условия &lt;code&gt;if&lt;/code&gt; или &lt;code&gt;while&lt;/code&gt; . Значение по умолчанию - &lt;code&gt;false&lt;/code&gt; . A &lt;em&gt;Диапазон&lt;/em&gt; сравнения проверяет , является ли переменная внутри или вне диапазона между двумя значениями литералов.</target>
        </trans-unit>
        <trans-unit id="80ccea46ead798cf9822ef53909d165d6457d6b8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;onlyEquality&quot;&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;, the rule reports yoda conditions &lt;em&gt;only&lt;/em&gt; for the equality operators &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Если свойство &lt;code&gt;&quot;onlyEquality&quot;&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; , правило сообщает об условиях yoda &lt;em&gt;только&lt;/em&gt; для операторов равенства &lt;code&gt;==&lt;/code&gt; и &lt;code&gt;===&lt;/code&gt; . Значение по умолчанию - &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="861981c1e841a3a76ef0b71345e0aaaf9b6bfd8b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt;, then comments which otherwise violate the rule will not be reported as long as they immediately follow another comment. This can be applied more than once.</source>
          <target state="translated">Если для параметра &lt;code&gt;ignoreConsecutiveComments&lt;/code&gt; установлено значение &lt;code&gt;true&lt;/code&gt; , то комментарии, которые в противном случае нарушают правило, не будут сообщаться, если они сразу же следуют за другим комментарием. Это можно применять более одного раза.</target>
        </trans-unit>
        <trans-unit id="b9736feb907745198f43b89dac8522955862c1b7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;options.filePath&lt;/code&gt; value is configured to be ignored, this method returns an empty array. If the &lt;code&gt;options.warnIgnored&lt;/code&gt; option is set along with the &lt;code&gt;options.filePath&lt;/code&gt; option, this method returns a &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; object. In that case, the result may contain a warning that indicates the file was ignored.</source>
          <target state="translated">Если значение &lt;code&gt;options.filePath&lt;/code&gt; настроено на игнорирование, этот метод возвращает пустой массив. Если параметр &lt;code&gt;options.warnIgnored&lt;/code&gt; установлен вместе с параметром &lt;code&gt;options.filePath&lt;/code&gt; , этот метод возвращает объект &lt;a href=&quot;#-lintresult-type&quot;&gt;LintResult&lt;/a&gt; . В этом случае результат может содержать предупреждение о том, что файл был проигнорирован.</target>
        </trans-unit>
        <trans-unit id="bffdbe44f305944bc7109716f9cf52ec0cf80daa" translate="yes" xml:space="preserve">
          <source>If the arrow function is intentional, it should be wrapped in parens to remove ambiguity.</source>
          <target state="translated">Если функция стрелки является преднамеренной,она должна быть обернута в пары для удаления двусмысленности.</target>
        </trans-unit>
        <trans-unit id="55317abcd7e2aa335fbbbc7490e278d824a2e6b4" translate="yes" xml:space="preserve">
          <source>If the class/attribute/pseudo-class count is tied, the selector that contains more node type selectors has higher specificity.</source>
          <target state="translated">Если счетчик класса/признака/псевдо-класса привязан,то селектор,содержащий больше селекторов узлового типа,имеет более высокую специфичность.</target>
        </trans-unit>
        <trans-unit id="286888e55b37d67f478b26da19d04cf8b3fa7cba" translate="yes" xml:space="preserve">
          <source>If the configured name of the error variable begins with a &lt;code&gt;^&lt;/code&gt; it is considered to be a regexp pattern.</source>
          <target state="translated">Если настроенное имя переменной ошибки начинается с символа &lt;code&gt;^&lt;/code&gt; , это считается шаблоном регулярного выражения.</target>
        </trans-unit>
        <trans-unit id="c8424c3fa05ae2557114fbb7afae75511fc54e4f" translate="yes" xml:space="preserve">
          <source>If the example plugin above were called &lt;code&gt;eslint-plugin-myPlugin&lt;/code&gt;, the &lt;code&gt;myConfig&lt;/code&gt; and &lt;code&gt;myOtherConfig&lt;/code&gt; configurations would then be usable by extending off of &lt;code&gt;&quot;plugin:myPlugin/myConfig&quot;&lt;/code&gt; and &lt;code&gt;&quot;plugin:myPlugin/myOtherConfig&quot;&lt;/code&gt;, respectively.</source>
          <target state="translated">Если бы вышеприведенный пример подключаемого модуля назывался &lt;code&gt;eslint-plugin-myPlugin&lt;/code&gt; , &lt;code&gt;myConfig&lt;/code&gt; конфигурации myConfig и &lt;code&gt;myOtherConfig&lt;/code&gt; можно было бы использовать, расширив &lt;code&gt;&quot;plugin:myPlugin/myConfig&quot;&lt;/code&gt; и &lt;code&gt;&quot;plugin:myPlugin/myOtherConfig&quot;&lt;/code&gt; соответственно.</target>
        </trans-unit>
        <trans-unit id="6755e05b62b74cc3c5aaf2f93b2be523dafe3b38" translate="yes" xml:space="preserve">
          <source>If the expression sequence is explicitly wrapped in parentheses.</source>
          <target state="translated">Если последовательность выражений явно заключена в круглые скобки.</target>
        </trans-unit>
        <trans-unit id="4979b6e8f108fec6d6947fcf358fcb9a4ebe8f29" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;CatchClause&lt;/code&gt;, the variable for the exception is returned.</source>
          <target state="translated">Если узел является &lt;code&gt;CatchClause&lt;/code&gt; , возвращается переменная для исключения.</target>
        </trans-unit>
        <trans-unit id="0bedf0818cdf99f778f0aba476971b9012249054" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;ClassDeclaration&lt;/code&gt; or a &lt;code&gt;ClassExpression&lt;/code&gt;, the variable for the class name is returned.</source>
          <target state="translated">Если узел является &lt;code&gt;ClassDeclaration&lt;/code&gt; или &lt;code&gt;ClassExpression&lt;/code&gt; , возвращается переменная для имени класса.</target>
        </trans-unit>
        <trans-unit id="bb5dcd249f6b5101ffc512ce04d850df7301f340" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;FunctionDeclaration&lt;/code&gt; or &lt;code&gt;FunctionExpression&lt;/code&gt;, the variable for the function name is returned, in addition to variables for the function parameters.</source>
          <target state="translated">Если узел является &lt;code&gt;FunctionDeclaration&lt;/code&gt; или &lt;code&gt;FunctionExpression&lt;/code&gt; , возвращается переменная для имени функции в дополнение к переменным для параметров функции.</target>
        </trans-unit>
        <trans-unit id="0239c6eab481baf7e5cd73e1d8be32515edd4e81" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;VariableDeclaration&lt;/code&gt;, all variables declared in the declaration are returned.</source>
          <target state="translated">Если узел является &lt;code&gt;VariableDeclaration&lt;/code&gt; , возвращаются все переменные, объявленные в объявлении.</target>
        </trans-unit>
        <trans-unit id="61a88a7314032c642bfc5f80310b4c5fc44211ab" translate="yes" xml:space="preserve">
          <source>If the node is a &lt;code&gt;VariableDeclarator&lt;/code&gt;, all variables declared in the declarator are returned.</source>
          <target state="translated">Если узел является &lt;code&gt;VariableDeclarator&lt;/code&gt; , возвращаются все переменные, объявленные в деклараторе.</target>
        </trans-unit>
        <trans-unit id="a53e1a5bf877ea2bcfd787625d054a10533b30c2" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ArrowFunctionExpression&lt;/code&gt;, variables for the parameters are returned.</source>
          <target state="translated">Если узел является выражением &lt;code&gt;ArrowFunctionExpression&lt;/code&gt; , возвращаются переменные для параметров.</target>
        </trans-unit>
        <trans-unit id="9f838ab4ac526271081c23b394b697a09e426e0d" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ImportDeclaration&lt;/code&gt;, variables for all of its specifiers are returned.</source>
          <target state="translated">Если узел является &lt;code&gt;ImportDeclaration&lt;/code&gt; , возвращаются переменные для всех его спецификаторов.</target>
        </trans-unit>
        <trans-unit id="e6c21b10c9edae6498937fd2f3d4185500c8f7f7" translate="yes" xml:space="preserve">
          <source>If the node is an &lt;code&gt;ImportSpecifier&lt;/code&gt;, &lt;code&gt;ImportDefaultSpecifier&lt;/code&gt;, or &lt;code&gt;ImportNamespaceSpecifier&lt;/code&gt;, the declared variable is returned.</source>
          <target state="translated">Если узел является &lt;code&gt;ImportSpecifier&lt;/code&gt; , &lt;code&gt;ImportDefaultSpecifier&lt;/code&gt; или &lt;code&gt;ImportNamespaceSpecifier&lt;/code&gt; , возвращается объявленная переменная.</target>
        </trans-unit>
        <trans-unit id="77e6d0663a5dc9ddfb5ba721ad2cac984752b5a7" translate="yes" xml:space="preserve">
          <source>If the object name is omitted, the property is disallowed for all objects:</source>
          <target state="translated">Если имя объекта опущено,то для всех объектов свойство запрещено:</target>
        </trans-unit>
        <trans-unit id="3d87c6b6c0dd2f2805118449f8bde287740cd978" translate="yes" xml:space="preserve">
          <source>If the operation ends with a parsing error, you will get a single message for this file, with &lt;code&gt;fatal: true&lt;/code&gt; added as an extra property.</source>
          <target state="translated">Если операция завершится ошибкой синтаксического анализа, вы получите одно сообщение для этого файла с добавлением &lt;code&gt;fatal: true&lt;/code&gt; в качестве дополнительного свойства.</target>
        </trans-unit>
        <trans-unit id="7fe396c3c6bb93306ee96c0f7cebd18cb04f122d" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^(err|error|anySpecificError)$&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name can be &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;anySpecificError&lt;/code&gt;.</source>
          <target state="translated">Если опция - &lt;code&gt;&quot;^(err|error|anySpecificError)$&quot;&lt;/code&gt; , правило сообщает о необработанных ошибках, где имя параметра может быть &lt;code&gt;err&lt;/code&gt; , &lt;code&gt;error&lt;/code&gt; или &lt;code&gt;anySpecificError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb07ab30e4a55a6eddf8ef9a05a2f85cf2a6aee9" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^.*(e|E)rr&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name matches any string that contains &lt;code&gt;err&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt; (for example, &lt;code&gt;err&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;anyError&lt;/code&gt;, &lt;code&gt;some_err&lt;/code&gt; will match).</source>
          <target state="translated">Если опция - &lt;code&gt;&quot;^.*(e|E)rr&quot;&lt;/code&gt; , правило сообщает о необработанных ошибках, где имя параметра соответствует любой строке, содержащей &lt;code&gt;err&lt;/code&gt; или &lt;code&gt;Err&lt;/code&gt; (например, &lt;code&gt;err&lt;/code&gt; , &lt;code&gt;error&lt;/code&gt; , &lt;code&gt;anyError&lt;/code&gt; , &lt;code&gt;some_err&lt;/code&gt; будет соответствовать).</target>
        </trans-unit>
        <trans-unit id="93cc7488fa78f99eb5cf4d9c302285ca9b4f9441" translate="yes" xml:space="preserve">
          <source>If the option is &lt;code&gt;&quot;^.+Error$&quot;&lt;/code&gt;, the rule reports unhandled errors where the parameter name ends with &lt;code&gt;Error&lt;/code&gt; (for example, &lt;code&gt;connectionError&lt;/code&gt; or &lt;code&gt;validationError&lt;/code&gt; will match).</source>
          <target state="translated">Если выбрана опция &lt;code&gt;&quot;^.+Error$&quot;&lt;/code&gt; , правило сообщает о необработанных ошибках, в которых имя параметра заканчивается на &lt;code&gt;Error&lt;/code&gt; (например, будет совпадение &lt;code&gt;connectionError&lt;/code&gt; или &lt;code&gt;validationError&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7712055bc35d737e090546266f22012e0b214b58" translate="yes" xml:space="preserve">
          <source>If the path to lint is a glob pattern or directory path and contains a Dotfolder, all Dotfiles and Dotfolders will be linted. This includes sub-dotfiles and sub-dotfolders that are buried deeper in the directory structure.</source>
          <target state="translated">Если путь к lint является шаблоном глобуса или каталога и содержит папку Dotfolder,то все Dotfiles и папки Dotfiles будут снабжены подкладками.Сюда входят вложенные точечные файлы и вложенные папки,которые глубже погружены в структуру каталога.</target>
        </trans-unit>
        <trans-unit id="c7c92f47b39ce1c4fe895b7352605b99e1b0c435" translate="yes" xml:space="preserve">
          <source>If the path to lint is a specific file path and the &lt;code&gt;--no-ignore&lt;/code&gt; flag has been passed, ESLint will lint the file regardless of the implicit ignore rules.</source>
          <target state="translated">Если путь к пуху является путем конкретного файла и &lt;code&gt;--no-ignore&lt;/code&gt; флаг был принят, ESLint будет нибудь вкусненьким файл , независимо от неявного игнорировать правила.</target>
        </trans-unit>
        <trans-unit id="0e771886c3456f585fd28d2511e4e816e918a626" translate="yes" xml:space="preserve">
          <source>If the property name is omitted, accessing any property of the given object is disallowed:</source>
          <target state="translated">Если имя свойства опущено,то доступ к любому свойству данного объекта запрещен:</target>
        </trans-unit>
        <trans-unit id="936496d696830abf713f57ff4dffcd113c791136" translate="yes" xml:space="preserve">
          <source>If the rule is defined within a plugin, you have to prefix the rule ID with the plugin name and a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">Если правило определено в подключаемом модуле, вы должны поставить перед идентификатором правила имя подключаемого модуля и &lt;code&gt;/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98136f7288dfbf30f89559b917edd8aa7870532f" translate="yes" xml:space="preserve">
          <source>If the rule under test uses &lt;code&gt;messageId&lt;/code&gt;s, you can use &lt;code&gt;messageId&lt;/code&gt; property in a test case to assert reported error's &lt;code&gt;messageId&lt;/code&gt; instead of its &lt;code&gt;message&lt;/code&gt;.</source>
          <target state="translated">Если в тестируемом правиле используется &lt;code&gt;messageId&lt;/code&gt; s, вы можете использовать свойство &lt;code&gt;messageId&lt;/code&gt; в тестовом примере, чтобы подтвердить &lt;code&gt;messageId&lt;/code&gt; сообщенной ошибки вместо ее &lt;code&gt;message&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d16d54aa0743d9f97198f4deb3a1dda76f546b0" translate="yes" xml:space="preserve">
          <source>If the third argument is a string, it is interpreted as the &lt;code&gt;filename&lt;/code&gt;.</source>
          <target state="translated">Если третий аргумент является строкой, он интерпретируется как &lt;code&gt;filename&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0a70cbab282fd2c607dbd174889be8db4131e9e9" translate="yes" xml:space="preserve">
          <source>If the value is a function, it should wrap under the property name and should have a blank line both before and after the function.</source>
          <target state="translated">Если значение является функцией,оно должно обернуться под именем свойства и иметь пустую строку как до,так и после функции.</target>
        </trans-unit>
        <trans-unit id="b9e58d27ec1d6a8f2b83ea052b21d0675aebbb38" translate="yes" xml:space="preserve">
          <source>If the variable is intended to be local to the script, wrap the code with a block or with an immediately-invoked function expression (IIFE).</source>
          <target state="translated">Если переменная должна быть локальной для скрипта,оберните код блоком или выражением функции с немедленным вызовом (IIFE).</target>
        </trans-unit>
        <trans-unit id="73767ddbd81d9dbe02ce6fed5e6251914cb03d71" translate="yes" xml:space="preserve">
          <source>If there are any failing tests, update your code until all tests pass.</source>
          <target state="translated">Если есть неудачные тесты,обновите свой код до тех пор,пока все тесты не пройдут.</target>
        </trans-unit>
        <trans-unit id="4e39a9fb9ba324c2286fd879d0e7ba5569d5dacc" translate="yes" xml:space="preserve">
          <source>If there are declarations of the same name in class members, the last declaration overwrites other declarations silently. It can cause unexpected behaviors.</source>
          <target state="translated">Если в членах класса есть одноименные декларации,то последняя декларация молча перезаписывает другие декларации.Это может вызвать неожиданное поведение.</target>
        </trans-unit>
        <trans-unit id="0c7f9187cd1de032df79c7af025cf136787d74ca" translate="yes" xml:space="preserve">
          <source>If there are multiple configuration files in the same directory, ESLint will only use one. The priority order is:</source>
          <target state="translated">Если в одной директории имеется несколько конфигурационных файлов,ESLint будет использовать только один.Приоритетный порядок:</target>
        </trans-unit>
        <trans-unit id="8647b942abc0b85c8f1bf2d86a64b8b3d027f285" translate="yes" xml:space="preserve">
          <source>If there is an &lt;code&gt;.eslintrc&lt;/code&gt; and a &lt;code&gt;package.json&lt;/code&gt; file found in the same directory, &lt;code&gt;.eslintrc&lt;/code&gt; will take a priority and &lt;code&gt;package.json&lt;/code&gt; file will not be used.</source>
          <target state="translated">Если в одном &lt;code&gt;.eslintrc&lt;/code&gt; найдены файлы .eslintrc и &lt;code&gt;package.json&lt;/code&gt; , &lt;code&gt;.eslintrc&lt;/code&gt; будет иметь .eslintrc , а файл &lt;code&gt;package.json&lt;/code&gt; использоваться не будет.</target>
        </trans-unit>
        <trans-unit id="df824358feaeb45f56e93593d0d239d836cdfe4c" translate="yes" xml:space="preserve">
          <source>If there is not &lt;code&gt;catch&lt;/code&gt; block, &lt;code&gt;finally&lt;/code&gt; block has two current segments. At this time, &lt;code&gt;CodePath.currentSegments.length&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;. One is the normal path, and another is the leaving path (&lt;code&gt;throw&lt;/code&gt; or &lt;code&gt;return&lt;/code&gt;).</source>
          <target state="translated">Если блока &lt;code&gt;catch&lt;/code&gt; нет, блок &lt;code&gt;finally&lt;/code&gt; имеет два текущих сегмента. В настоящее время &lt;code&gt;CodePath.currentSegments.length&lt;/code&gt; равен &lt;code&gt;2&lt;/code&gt; . Один - это нормальный путь, а другой - уходящий путь ( &lt;code&gt;throw&lt;/code&gt; или &lt;code&gt;return&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1757e08f8b71310c2a4c59f6dc50ed8f567f5460" translate="yes" xml:space="preserve">
          <source>If this rule is invoked with the command-line &lt;code&gt;--fix&lt;/code&gt; option, object literals that violate the rule are generally modified to comply with it. The modification in each case is to move a property specification to the next line whenever there is part or all of a previous property specification on the same line. For example,</source>
          <target state="translated">Если это правило вызывается с параметром командной строки &lt;code&gt;--fix&lt;/code&gt; , объектные литералы, нарушающие правило, обычно модифицируются в соответствии с ним. Модификация в каждом случае заключается в перемещении спецификации свойства на следующую строку всякий раз, когда в той же строке есть часть или вся предыдущая спецификация свойства. Например,</target>
        </trans-unit>
        <trans-unit id="850d3ffd2fa1ce88bcaebffd3ad35b0697ab6bcb" translate="yes" xml:space="preserve">
          <source>If two or more selectors match the same node, their listeners will be called in order of increasing specificity. The specificity of an AST selector is similar to the specificity of a CSS selector:</source>
          <target state="translated">Если два или более селекторов совпадают с одним и тем же узлом,то их слушатели будут вызываться в порядке возрастания специфичности.Специфика селектора АСТ аналогична специфике селектора CSS:</target>
        </trans-unit>
        <trans-unit id="99630c41d6f205e5e12d2bda184454445047c226" translate="yes" xml:space="preserve">
          <source>If we ask you to make code changes, there's no need to close the pull request and create a new one. Just go back to the branch on your fork and make your changes. Then, when you're ready, you can add your changes into the branch:</source>
          <target state="translated">Если мы просим вас внести изменения в код,то нет необходимости закрывать запрос на подтягивание и создавать новый.Просто вернитесь к ветке на вилке и внесите изменения.Затем,когда вы будете готовы,вы сможете добавить свои изменения в ветку:</target>
        </trans-unit>
        <trans-unit id="de0e0d7c63f3124bf206c35deec0d0869a1131e5" translate="yes" xml:space="preserve">
          <source>If you already have some text to lint, then you can use the &lt;code&gt;executeOnText()&lt;/code&gt; method to lint that text. The linter will assume that the text is a file in the current working directory, and so will still obey any &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;.eslintignore&lt;/code&gt; files that may be present. Here's an example:</source>
          <target state="translated">Если у вас уже есть текст для линтинга, вы можете использовать метод &lt;code&gt;executeOnText()&lt;/code&gt; для линтинга этого текста. Линтер будет считать, что текст является файлом в текущем рабочем каталоге, и поэтому по-прежнему будет подчиняться любым &lt;code&gt;.eslintrc&lt;/code&gt; и &lt;code&gt;.eslintignore&lt;/code&gt; , которые могут присутствовать. Вот пример:</target>
        </trans-unit>
        <trans-unit id="1fbb74a49f2eaba94e280fd44611bcca515833b5" translate="yes" xml:space="preserve">
          <source>If you are not concerned about unnecessary calls to &lt;code&gt;bind()&lt;/code&gt;, you can safely disable this rule.</source>
          <target state="translated">Если вас не беспокоят ненужные вызовы &lt;code&gt;bind()&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="e8ddab54be7073b7379d9641b3883acaaac2a010" translate="yes" xml:space="preserve">
          <source>If you are targeting ECMAScript 2017 and/or older environments, you can disable this rule, because this ECMAScript feature is only supported in ECMAScript 2018 and/or newer environments.</source>
          <target state="translated">Если вы нацелены на ECMAScript 2017 и/или более старые среды,вы можете отключить это правило,потому что эта функция ECMAScript поддерживается только в ECMAScript 2018 и/или более новых средах.</target>
        </trans-unit>
        <trans-unit id="5e889a6e2c510adf6f330ae77fbde14de46dd853" translate="yes" xml:space="preserve">
          <source>If you are throwing an error inside of an asynchronous function for this purpose, then you may want to disable this rule.</source>
          <target state="translated">Если вы выбрасываете ошибку внутри асинхронной функции для этой цели,то вы можете захотеть отключить это правило.</target>
        </trans-unit>
        <trans-unit id="0727bfa2099c5dff84bb32defc46aff16b4cd440" translate="yes" xml:space="preserve">
          <source>If you are trying to override one of the native objects.</source>
          <target state="translated">Если вы пытаетесь переопределить один из родных объектов.</target>
        </trans-unit>
        <trans-unit id="b2612b9f29d0ec472086dc1da9d121df79cb8ca9" translate="yes" xml:space="preserve">
          <source>If you are unable to push because some references are old, do a forced push instead:</source>
          <target state="translated">Если вы не можете нажать,потому что некоторые ссылки старые,сделайте принудительное нажатие вместо этого:</target>
        </trans-unit>
        <trans-unit id="0b370077857ae1599795ffaa3d65cdbadb983377" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;process.exit()&lt;/code&gt; only for specifying the exit code, you can set &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_exitcode&quot;&gt;&lt;code&gt;process.exitCode&lt;/code&gt;&lt;/a&gt; (introduced in Node.js 0.11.8) instead.</source>
          <target state="translated">Если вы используете &lt;code&gt;process.exit()&lt;/code&gt; только для указания кода выхода, вы можете вместо этого установить &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_exitcode&quot;&gt; &lt;code&gt;process.exitCode&lt;/code&gt; &lt;/a&gt; (введенный в Node.js 0.11.8).</target>
        </trans-unit>
        <trans-unit id="794c9e1eab3bee427778ec5f6492eee54355c471" translate="yes" xml:space="preserve">
          <source>If you are using a custom implementation of &lt;code&gt;require&lt;/code&gt; and your code will never be used in projects where a standard &lt;code&gt;require&lt;/code&gt; (CommonJS, Node.js, AMD) is expected, you can safely turn this rule off.</source>
          <target state="translated">Если вы используете настраиваемую реализацию &lt;code&gt;require&lt;/code&gt; и ваш код никогда не будет использоваться в проектах, где ожидается стандартное &lt;code&gt;require&lt;/code&gt; (CommonJS, Node.js, AMD), вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="a095c50390bcd7a4a098485b2044aec9520f886d" translate="yes" xml:space="preserve">
          <source>If you are using an ECMAScript 3 JavaScript engine (such as IE8) and you want to use a keyword (such as &lt;code&gt;if&lt;/code&gt;) as a property name. This restriction was removed in ECMAScript 5.</source>
          <target state="translated">Если вы используете механизм JavaScript ECMAScript 3 (например, IE8) и хотите использовать ключевое слово (например, &lt;code&gt;if&lt;/code&gt; ) в качестве имени свойства. Это ограничение было снято в ECMAScript 5.</target>
        </trans-unit>
        <trans-unit id="e79b6d39ed61231d71b33b4d264895e5f11a3a24" translate="yes" xml:space="preserve">
          <source>If you are using one configuration file and want ESLint to ignore any &lt;code&gt;.eslintrc.*&lt;/code&gt; files, make sure to use &lt;code&gt;--no-eslintrc&lt;/code&gt; along with the &lt;code&gt;-c&lt;/code&gt; flag.</source>
          <target state="translated">Если вы используете один файл конфигурации и хотите, чтобы ESLint игнорировал любые &lt;code&gt;.eslintrc.*&lt;/code&gt; , Обязательно используйте &lt;code&gt;--no-eslintrc&lt;/code&gt; вместе с флагом &lt;code&gt;-c&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dc0228170d5897f66f6c2892c04523f20899b905" translate="yes" xml:space="preserve">
          <source>If you are working with ES6 modules:</source>
          <target state="translated">Если вы работаете с модулями ES6:</target>
        </trans-unit>
        <trans-unit id="7fd01c75198649e058b17377a36d78a054ffe274" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about having different line comment styles, then you can turn off this rule.</source>
          <target state="translated">Если вас не беспокоят различные стили комментариев к строкам,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="b93d0dcfda167424e32f450a26f03cf14dedb911" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about having different line endings within your code, then you can safely turn this rule off.</source>
          <target state="translated">Если вас не беспокоят различные окончания строк в вашем коде,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="ca485d61ff911bfd152fcdab49dac4ba14922646" translate="yes" xml:space="preserve">
          <source>If you aren't concerned about misinterpreting floating decimal point values, then you can safely turn this rule off.</source>
          <target state="translated">Если вас не беспокоит неправильное толкование значений с плавающей запятой,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="90285ec365861710d4fa6c81c812503ce64d8cd4" translate="yes" xml:space="preserve">
          <source>If you aren't going to use the default parser of ESLint, this section explains about using custom parsers.</source>
          <target state="translated">Если вы не собираетесь использовать парсер ESLint по умолчанию,этот раздел объясняет об использовании пользовательских парсеров.</target>
        </trans-unit>
        <trans-unit id="f36c167b80c0da8a28ee63a69b56b94547879c0c" translate="yes" xml:space="preserve">
          <source>If you aren't using JSDoc, then you can safely turn this rule off.</source>
          <target state="translated">Если вы не используете JSDoc,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="6f3b62d423b673891d6d79bb7f1574b983499ef7" translate="yes" xml:space="preserve">
          <source>If you can't determine an appropriate complexity limit for your code, then it's best to disable this rule.</source>
          <target state="translated">Если вы не можете определить подходящий предел сложности для вашего кода,то лучше всего отключить это правило.</target>
        </trans-unit>
        <trans-unit id="48d343ff8f2275b0ea325fc0a64c31bd1fb7cd98" translate="yes" xml:space="preserve">
          <source>If you configure ESLint to automatically enable new rules when you upgrade, ESLint can report new problems when there are no changes to source code, therefore any newer minor version of ESLint can behave as if it has breaking changes.</source>
          <target state="translated">Если настроить ESLint на автоматическое включение новых правил при обновлении,то ESLint может сообщать о новых проблемах при отсутствии изменений в исходном коде,поэтому любая более новая небольшая версия ESLint может вести себя так,как будто в ней есть нарушения.</target>
        </trans-unit>
        <trans-unit id="404fcfa2ef5c1f362f2be3f12cef0103e708a9b8" translate="yes" xml:space="preserve">
          <source>If you decide that you wish to use whitespace other than tabs and spaces outside of strings in your application.</source>
          <target state="translated">Если вы решили,что хотите использовать в своем приложении пробельные символы,кроме вкладок и пробелов за пределами строк.</target>
        </trans-unit>
        <trans-unit id="e2f36f9a48b18ab417c90448e3760f46ecb246c5" translate="yes" xml:space="preserve">
          <source>If you depend on fall through behavior and want access to bindings introduced in the case block.</source>
          <target state="translated">Если вы зависите от падения поведения и хотите,чтобы доступ к привязкам был введен в корпусном блоке.</target>
        </trans-unit>
        <trans-unit id="7a38e6f565ac0f063fab2adb4a1dcf52e65781dc" translate="yes" xml:space="preserve">
          <source>If you do not care about extra blank lines, turn this off.</source>
          <target state="translated">Если тебя не волнуют дополнительные пустые строки,выключи это.</target>
        </trans-unit>
        <trans-unit id="7bfcf2e27f8485a989b5dfd1cc941c1c7279f4bf" translate="yes" xml:space="preserve">
          <source>If you do not need consistency in your string styles, you can safely disable this rule.</source>
          <target state="translated">Если вам не нужна согласованность стилей строк,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="392f8a1f4fba093842c4607835e8cfd25a31c650" translate="yes" xml:space="preserve">
          <source>If you do not need to support IE 8 and earlier, you should turn this rule off.</source>
          <target state="translated">Если вам не требуется поддержка IE 8 и более ранних версий,вам следует отключить это правило.</target>
        </trans-unit>
        <trans-unit id="9d547b86ad688b98a0c6659d848158e9b5dabb04" translate="yes" xml:space="preserve">
          <source>If you do not require JSDoc for your functions, then you can leave this rule off.</source>
          <target state="translated">Если вам не требуется JSDoc для ваших функций,то вы можете оставить это правило выключенным.</target>
        </trans-unit>
        <trans-unit id="c9d550da8d530ae5bf38a38f34d4a343d1cbae42" translate="yes" xml:space="preserve">
          <source>If you do not want ignored file warnings output to the console, you can omit the third argument or pass &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Если вы не хотите, чтобы на консоль выводились игнорируемые файловые предупреждения, вы можете опустить третий аргумент или передать &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a3c44a0f49e4f2daa8aabf13aaca175959962a0f" translate="yes" xml:space="preserve">
          <source>If you do not want the performance benefit of avoiding &lt;code&gt;return await&lt;/code&gt;</source>
          <target state="translated">Если вы не хотите повышения производительности за &lt;code&gt;return await&lt;/code&gt; предотвращения возврата, ожидайте</target>
        </trans-unit>
        <trans-unit id="2628614f8cc596f13fac5b621f18df2aeb5bc2ff" translate="yes" xml:space="preserve">
          <source>If you do not want to enforce semicolon usage (or omission) in any particular way, then you can turn this rule off.</source>
          <target state="translated">Если вы не хотите навязывать использование (или пропуск)точки с запятой каким-либо определенным образом,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="1e0473345a5bb57f1c01e60cdf29fe464c00a72c" translate="yes" xml:space="preserve">
          <source>If you do not wish to enforce consistency on keyword spacing.</source>
          <target state="translated">Если вы не желаете обеспечить последовательность в использовании межстрочных интервалов между ключевыми словами.</target>
        </trans-unit>
        <trans-unit id="ec438abebebab23efa3997bca0496ca41fc86dd6" translate="yes" xml:space="preserve">
          <source>If you don't care about disallowing redundant return statements, you can turn off this rule.</source>
          <target state="translated">Если вас не волнует отключение избыточных деклараций возврата,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="377445f5eeba500665b9afe31fabf0a6ca7e60ea" translate="yes" xml:space="preserve">
          <source>If you don't care if property names are consistently wrapped in quotes or not, and you don't target legacy ES3 environments, turn this rule off.</source>
          <target state="translated">Если вас не волнует,последовательно ли имена свойств обернуты в кавычки или нет,и вы не нацелены на наследственные среды ES3,выключите это правило.</target>
        </trans-unit>
        <trans-unit id="fbb1b5f010231afcab8c832ef9f8d843a9047947" translate="yes" xml:space="preserve">
          <source>If you don't have any object/property combinations to restrict, you should not use this rule.</source>
          <target state="translated">Если у вас нет комбинаций объектов/свойств,которые можно было бы ограничить,вам не следует использовать это правило.</target>
        </trans-unit>
        <trans-unit id="c5f3d9d25eecc50921d17e2d250b565540102e1d" translate="yes" xml:space="preserve">
          <source>If you don't use Node.js, or you still need to support versions of Node.js that lack methods like &lt;code&gt;Buffer.from&lt;/code&gt;, then you should not enable this rule.</source>
          <target state="translated">Если вы не используете Node.js или вам все еще нужно поддерживать версии Node.js, в которых отсутствуют такие методы, как &lt;code&gt;Buffer.from&lt;/code&gt; , то вам не следует включать это правило.</target>
        </trans-unit>
        <trans-unit id="28fe184ed022eb7ed86a6fdb953113737c1230b4" translate="yes" xml:space="preserve">
          <source>If you don't use async or generator functions, you don't need to enable this rule.</source>
          <target state="translated">Если вы не используете асинхронные или генераторные функции,вам не нужно включать это правило.</target>
        </trans-unit>
        <trans-unit id="8e8976ae986f3df4acec0327270b71cfedc18f22" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about empty functions, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите,чтобы вас оповещали о пустых функциях,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="035b02b7f62b6cf56e490c776d78cfc18884a2f6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about invalid/missing &lt;code&gt;super()&lt;/code&gt; callings in constructors, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о недопустимых / отсутствующих &lt;code&gt;super()&lt;/code&gt; в конструкторах, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="3cdcf809d4b2ba636118edcb3c72c778c76b8ef9" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about mixed operators, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о смешанных операторах,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="b34060b6575a25206fbe68c5a7727598b25882e3" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying imported bindings, you can disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об изменении импортируемых привязок,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="05cd0829efd0f529155675a47415f71b807b23e6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying variables of class declarations, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об изменении переменных объявлений классов,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="b676a87bc4231e95cfd51afd88cbeab37557db5d" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about modifying variables that are declared using &lt;code&gt;const&lt;/code&gt; keyword, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об изменении переменных, объявленных с использованием ключевого слова &lt;code&gt;const&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="57556711aa41b9d323be8427c2ecdd4bff4b57ef" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about shorter notations for the type conversion, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите,чтобы вас оповещали о более коротких нотациях для приведения типа,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="4d0dc600bd88206c2efee7216202f42acce935e8" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about spacing style inside of blocks, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о стиле интервалов внутри блоков,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="08b5bb845c2f283fd9522751ebbc0160e430a28d" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ненужных &lt;code&gt;.call()&lt;/code&gt; и &lt;code&gt;.apply()&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="ac9f79445e9a598b886c416fdf23687b7ac40682" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary catch clauses, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите,чтобы вас уведомили о ненужных оговорках об уловах,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="d1af85e373e8151e1abe933aa39f83e1d3e16b9c" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary computed property keys, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ненужных вычисленных ключах свойств,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="e855a5d5cb2ae2ff25109bb9e22035ab28a628e6" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary constructors, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ненужных конструкторах,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="938ce66a3470c3b9f0b562fcf30a08bd7f6898be" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary escapes, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ненужных побегах,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="1b06ab9aed5b29d9c1a958df26fdcb70958c47f8" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unnecessary string concatenation, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ненужном конкатенировании строк,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="6d677c6d2346e3a005d4cdd590600c4532148540" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unused labels, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите,чтобы вас уведомили о неиспользуемых ярлыках,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="05e4276980e348df485708112eedf0b691b13051" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about unused variables or function arguments, you can safely turn this rule off.</source>
          <target state="translated">Если вы не хотите получать уведомления о неиспользуемых переменных или аргументах функции,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="58889c4cfc98cc39318dd6b4c202708b2134c213" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of &lt;code&gt;this&lt;/code&gt; keyword outside of classes or class-like objects, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об использовании &lt;code&gt;this&lt;/code&gt; ключевого слова вне классов или объектов, подобных классу, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="34f8ec01867de0ac8cf9a52dab4bc974350b262a" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of labels, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите,чтобы вас уведомляли об использовании ярлыков,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="c3c8da72d7ad33b084fed89dc9957cbb66fc2e56" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of spacing between tag functions and their template literals, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об использовании расстояния между функциями тегов и их шаблонными литералами,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="69856ad30b7df75041b8701dce21332166566dbf" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about usage of spacing inside of template strings, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об использовании интервала внутри строк шаблона,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="3a49a93c91c935fd9301abeba634853b470cfac9" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about using &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; before &lt;code&gt;super()&lt;/code&gt; in constructors, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления об использовании &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; перед &lt;code&gt;super()&lt;/code&gt; в конструкторах, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="90eb0f399adda799268d0bf35448574d276ef357" translate="yes" xml:space="preserve">
          <source>If you don't want to be notified about variables that are never reassigned after initial assignment, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о переменных,которые никогда не переназначаются после начального назначения,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="93ee117c17516d2c719e0db6ab55eccac5d6aa9c" translate="yes" xml:space="preserve">
          <source>If you don't want to check and disallow multiple spaces, then you should turn this rule off.</source>
          <target state="translated">Если вы не хотите проверять и запрещать несколько пробелов,то вы должны отключить это правило.</target>
        </trans-unit>
        <trans-unit id="0d0224d3ec9408d92b6667d3c8ffeab802c5eee2" translate="yes" xml:space="preserve">
          <source>If you don't want to convert your JSCS configuration directly into an ESLint configuration, then you can use ESLint's built-in wizard to get you started. Just run:</source>
          <target state="translated">Если Вы не хотите напрямую конвертировать конфигурацию JSCS в конфигурацию ESLint,то Вы можете воспользоваться встроенным мастером ESLint для начала работы.Просто запустите:</target>
        </trans-unit>
        <trans-unit id="dd03ca6e3947a66ea53baf8ac86171507a2394fc" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a &lt;code&gt;default&lt;/code&gt; case for &lt;code&gt;switch&lt;/code&gt; statements, you can safely disable this rule.</source>
          <target state="translated">Если вы не хотите принудительно применять регистр по &lt;code&gt;default&lt;/code&gt; для операторов &lt;code&gt;switch&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="aababb9275bb8cf111ca9e21208a1cb5e64bd8e0" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a particular brace style, don't enable this rule.</source>
          <target state="translated">Если ты не хочешь соблюдать определенный стиль крепления,не включай это правило.</target>
        </trans-unit>
        <trans-unit id="4f9124dfb72433852245c700fe867a59eddb7e22" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a particular style for multiline comments, you can disable the rule.</source>
          <target state="translated">Если вы не хотите навязывать определенный стиль для многострочных комментариев,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="eb3d2c7d722dea39207f449727021bfd08dd6671" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce a style for using equality operators, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите применять стиль использования операторов равенства,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="881783518287437ee5c4be83087dc074c16404b7" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce any particular naming convention for all identifiers, or your naming convention is too complex to be enforced by configuring this rule, then you should not enable this rule.</source>
          <target state="translated">Если вы не хотите внедрять какое-либо определенное соглашение об именовании для всех идентификаторов,или ваше соглашение об именовании слишком сложное,чтобы его можно было внедрить с помощью настройки этого правила,то вам не следует включать это правило.</target>
        </trans-unit>
        <trans-unit id="03c547bbe71dd30e4b389d995a733cefd95fe62d" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce consistency on keyword spacing, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите обеспечивать согласованность при задании интервала между ключевыми словами,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="ba05107ad0aa4784160535c5a83cf1838bb66020" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce consistent line breaks inside braces, then it's safe to disable this rule.</source>
          <target state="translated">Если ты не хочешь обеспечить последовательный разрыв линии внутри фигурных скобок,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="fab6d15b9e92cdd55e80d0de68464eedc16c6a43" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce either presence or omission of the &lt;code&gt;10&lt;/code&gt; radix value you can turn this rule off.</source>
          <target state="translated">Если вы не хотите применять либо наличие или бездействие &lt;code&gt;10&lt;/code&gt; значения натальной вы можете включить это правило выключить.</target>
        </trans-unit>
        <trans-unit id="e804e65f30ad2295d3ca3750dd67b83793cbfc1a" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce empty lines between class members, you can disable this rule.</source>
          <target state="translated">Если вы не хотите навязывать пустые строки между членами класса,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="89d6cebc65b3f88d81c83eeb9c12b94536bc421c" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce line breaks after opening and before closing array brackets, don't enable this rule.</source>
          <target state="translated">Если вы не хотите приводить в исполнение обрывы строк после открытия и до закрытия скобок в массиве,не включайте это правило.</target>
        </trans-unit>
        <trans-unit id="28fb13c709b5f77912ad0d548d670040e0b12839" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce line breaks between arguments, don't enable this rule.</source>
          <target state="translated">Если вы не хотите приводить в исполнение разрывы строк между аргументами,не включайте это правило.</target>
        </trans-unit>
        <trans-unit id="4533fe95406ecc1ea725791c70efca418fe966b8" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce linebreaks between array elements, don't enable this rule.</source>
          <target state="translated">Если вы не хотите внедрять перерывы в строке между элементами массива,не включайте это правило.</target>
        </trans-unit>
        <trans-unit id="bd6ed68cf488b02540f00ff06a41e1354a2bf35b" translate="yes" xml:space="preserve">
          <source>If you don't want to enforce that each &lt;code&gt;case&lt;/code&gt; statement should end with a &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or comment, then you can safely turn this rule off.</source>
          <target state="translated">Если вы не хотите, чтобы каждый оператор &lt;code&gt;case&lt;/code&gt; заканчивался &lt;code&gt;throw&lt;/code&gt; , &lt;code&gt;return&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; или комментарием, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="4c4ada68371f02ae755b6c46bc3ff8872f96d881" translate="yes" xml:space="preserve">
          <source>If you don't want to notified about references inside of loop conditions, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите получать уведомления о ссылках внутри условий цикла,то это правило можно отключить.</target>
        </trans-unit>
        <trans-unit id="55804cfbbeb711790995c168e8efbacb6de0c91a" translate="yes" xml:space="preserve">
          <source>If you don't want to notify about properties' order, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о порядке свойств,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="0c9a9ac4de306fc8ecda601da045432c3691af97" translate="yes" xml:space="preserve">
          <source>If you don't want to notify about self assignments, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о самоназначениях,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="44d06f76b9a9450bdb8b56c5dfe1046944fc23a9" translate="yes" xml:space="preserve">
          <source>If you don't want to notify generator functions that have no &lt;code&gt;yield&lt;/code&gt; expression, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять функции генератора, у которых нет выражения &lt;code&gt;yield&lt;/code&gt; , можно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="7cbf12fa597c277297c8058f6568bf93b2611aa3" translate="yes" xml:space="preserve">
          <source>If you don't want to notify regular expressions with no &lt;code&gt;u&lt;/code&gt; flag, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять регулярные выражения без флага &lt;code&gt;u&lt;/code&gt; , можно безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="debec24cd2ab68499573ae20752142917a1aaa28" translate="yes" xml:space="preserve">
          <source>If you don't want to notify spacing around colons of switch statements, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о промежутках между двоеточиями операторов переключения,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="48c5ed2023dc8f69088270df9de52f3c95dffc50" translate="yes" xml:space="preserve">
          <source>If you don't want to notify the location of semicolons, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о расположении точек с запятой,то это правило можно отключить.</target>
        </trans-unit>
        <trans-unit id="b1086b581d410ccfff2d69ce1d4a0f1ce3883ef4" translate="yes" xml:space="preserve">
          <source>If you don't want to notify unsafe logical negations, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о небезопасных логических отрицаниях,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="092de94e02976f91598695c0b62fe884df6462d5" translate="yes" xml:space="preserve">
          <source>If you don't want to notify warnings about linebreaks, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите уведомлять о предупреждениях о поломках,то это правило можно отключить.</target>
        </trans-unit>
        <trans-unit id="f7d7ceec15dd410c793e8ea6857bb2384373256d" translate="yes" xml:space="preserve">
          <source>If you don't want to restrict your code from using any JavaScript features or syntax, you should not use this rule.</source>
          <target state="translated">Если вы не хотите ограничивать свой код от использования каких-либо возможностей JavaScript или синтаксиса,вы не должны использовать это правило.</target>
        </trans-unit>
        <trans-unit id="727de670c07aa6ddaad290b7f9c4933857178381" translate="yes" xml:space="preserve">
          <source>If you don't want to warn about usage of &lt;code&gt;return&lt;/code&gt; statement in callbacks of array's methods, then it's safe to disable this rule.</source>
          <target state="translated">Если вы не хотите предупреждать об использовании оператора &lt;code&gt;return&lt;/code&gt; в обратных вызовах методов массива, можно безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="cd5b557f539ab445a2f764b39d2f629358eb8508" translate="yes" xml:space="preserve">
          <source>If you find the custom formatter pattern doesn't provide enough options for the way you'd like to format ESLint results, the best option is to use ESLint's built-in &lt;a href=&quot;../user-guide/formatters/index&quot;&gt;JSON formatter&lt;/a&gt; and pipe the output to a second program. For example:</source>
          <target state="translated">Если вы обнаружите, что шаблон настраиваемого форматирования не предоставляет достаточно возможностей для того, как вы хотели бы форматировать результаты ESLint, лучшим вариантом является использование встроенного модуля &lt;a href=&quot;../user-guide/formatters/index&quot;&gt;форматирования JSON&lt;/a&gt; ESLint и конвейера вывода во вторую программу. Например:</target>
        </trans-unit>
        <trans-unit id="118095cb4d7d2586daf3a9c4aeedb6269df5ca60" translate="yes" xml:space="preserve">
          <source>If you find you can't finish the work, then simply add a comment letting people know, for example:</source>
          <target state="translated">Если вы обнаружили,что не можете закончить работу,просто добавьте комментарий,например,чтобы люди знали об этом:</target>
        </trans-unit>
        <trans-unit id="e102d884d27cd6a22fd9e584af0049437ee110e4" translate="yes" xml:space="preserve">
          <source>If you have a custom rule, you should make sure it handles empty files appropriately. (In most cases, no changes should be necessary.)</source>
          <target state="translated">Если у вас есть пользовательское правило,вы должны убедиться,что оно обрабатывает пустые файлы должным образом.(В большинстве случаев никаких изменений не требуется).</target>
        </trans-unit>
        <trans-unit id="b921db934ffd761c043389137ead53e58a1b0bf5" translate="yes" xml:space="preserve">
          <source>If you have a large code base that was not developed with a policy to not use such warning terms, you might get hundreds of warnings / errors which might be counter-productive if you can't fix all of them (e.g. if you don't get the time to do it) as you might overlook other warnings / errors or get used to many of them and don't pay attention on it anymore.</source>
          <target state="translated">Если у вас есть большая база кода,которая не была разработана с политикой отказа от использования таких предупреждений,вы можете получить сотни предупреждений/ошибок,которые могут оказаться контрпродуктивными,если вы не сможете исправить их все (например,если у вас не будет времени на это),так как вы можете пропустить другие предупреждения/ошибки или привыкнуть ко многим из них и больше не обращать на них внимания.</target>
        </trans-unit>
        <trans-unit id="73368d2dd1104f63622c3ee28dbef44e3e0176d9" translate="yes" xml:space="preserve">
          <source>If you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to &lt;code&gt;require()&lt;/code&gt; an optional dependency inside of a &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;, you can disable this rule for just that dependency using the &lt;code&gt;// eslint-disable-line global-require&lt;/code&gt; comment.</source>
          <target state="translated">Если у вас есть модуль, который должен быть инициализирован информацией, поступающей из файловой системы, или если модуль используется только в очень редких ситуациях и вызывает значительные накладные расходы на загрузку, может иметь смысл отключить правило. Если вам нужно &lt;code&gt;require()&lt;/code&gt; необязательную зависимость внутри &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; , вы можете отключить это правило только для этой зависимости, используя &lt;code&gt;// eslint-disable-line global-require&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="78b63fe9c75180f7eae12563749a18484f524c7f" translate="yes" xml:space="preserve">
          <source>If you have a plugin with rules and you are using RuleTester, then you also need to update the options you pass for rules that use &lt;code&gt;ecmaFeatures&lt;/code&gt;. For example:</source>
          <target state="translated">Если у вас есть плагин с правилами и вы используете RuleTester, вам также необходимо обновить параметры, которые вы передаете для правил, использующих &lt;code&gt;ecmaFeatures&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="1adc550e08a101ef27b397d37ebb50513d8babdd" translate="yes" xml:space="preserve">
          <source>If you have another convention for property spacing that might not be consistent with the available options, or if you want to permit multiple styles concurrently you can safely disable this rule.</source>
          <target state="translated">Если у вас есть другая конвенция для интервалов между свойствами,которые могут не соответствовать доступным опциям,или если вы хотите разрешить несколько стилей одновременно,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="a15b4bf698befd94c9c28f3b561bee7f0f9d2d1a" translate="yes" xml:space="preserve">
          <source>If you have conflicting rules or when you are fine with chained calls on one line, you can safely turn this rule off.</source>
          <target state="translated">Если у вас есть конфликтующие правила или если вы не против прикованных звонков на одной линии,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="9bf354fdcd95932555803b6fe121c6b5650ca543" translate="yes" xml:space="preserve">
          <source>If you have conventions that don't require an uppercase letter for constructors, or don't require capitalized functions be only used as constructors, turn this rule off.</source>
          <target state="translated">Если у вас есть конвенции,которые не требуют прописных букв для конструкторов,или не требуют,чтобы функции с заглавными буквами использовались только как конструкторы,выключите это правило.</target>
        </trans-unit>
        <trans-unit id="439a3304ad5df05ab1c795bee9cad7c9396aac67" translate="yes" xml:space="preserve">
          <source>If you have established a standard where having tabs is fine, then you can disable this rule.</source>
          <target state="translated">Если вы установили стандарт,в котором нормально иметь вкладки,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="188988ea697a9b957d25b534719239d8a1857409" translate="yes" xml:space="preserve">
          <source>If you have established coding standards using a different naming convention (separating words with underscores), turn this rule off.</source>
          <target state="translated">Если вы установили стандарты кодирования,используя другое соглашение об именовании (разделение слов с помощью подчеркивания),выключите это правило.</target>
        </trans-unit>
        <trans-unit id="526f59648be01853bcfaff830a60f08fcb2ba9a0" translate="yes" xml:space="preserve">
          <source>If you have multiple &lt;code&gt;.jscsrc.json&lt;/code&gt; files, you can pass them all and Polyjuice will combine them into one &lt;code&gt;.eslintrc.json&lt;/code&gt; file:</source>
          <target state="translated">Если у вас несколько файлов &lt;code&gt;.jscsrc.json&lt;/code&gt; , вы можете передать их все, и Polyjuice объединит их в один файл &lt;code&gt;.eslintrc.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="ac994ca847831c1c302f8b42ca3c3efee45e3720" translate="yes" xml:space="preserve">
          <source>If you have no strict conventions about when to use block statements and when not to, you can safely disable this rule.</source>
          <target state="translated">Если у вас нет строгих соглашений о том,когда использовать блокирующие выражения,а когда нет,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="70f93035ea1b2e22270015dfd6ae4ecd60d85f61" translate="yes" xml:space="preserve">
          <source>If you intend to create a global &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; variable or a global &lt;code&gt;class&lt;/code&gt; declaration, to be used from other scripts, be aware that there are certain differences when compared to the traditional methods, which are &lt;code&gt;var&lt;/code&gt; declarations and assigning to a property of the global &lt;code&gt;window&lt;/code&gt; object:</source>
          <target state="translated">Если вы намереваетесь создать глобальную &lt;code&gt;const&lt;/code&gt; или &lt;code&gt;let&lt;/code&gt; переменную или объявление глобального &lt;code&gt;class&lt;/code&gt; , которое будет использоваться из других скриптов, имейте в виду, что существуют определенные различия по сравнению с традиционными методами, которые представляют собой объявления &lt;code&gt;var&lt;/code&gt; и присвоение свойству глобального &lt;code&gt;window&lt;/code&gt; объект:</target>
        </trans-unit>
        <trans-unit id="cc1252817e8c5df5df09e177c1f59eb843a08370" translate="yes" xml:space="preserve">
          <source>If you intentionally use &lt;code&gt;with&lt;/code&gt; statements then you can disable this rule.</source>
          <target state="translated">Если вы намеренно используете операторы &lt;code&gt;with&lt;/code&gt; , вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="a5a54e590a75faa65b0ed8e0ad0659925f1afaec" translate="yes" xml:space="preserve">
          <source>If you intentionally use empty block statements then you can disable this rule.</source>
          <target state="translated">Если вы намеренно используете пустые блочные операторы,то можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="d3b9a44ddb5f057d0633a491bcff3b454a13ca25" translate="yes" xml:space="preserve">
          <source>If you intentionally use extra semicolons then you can disable this rule.</source>
          <target state="translated">Если вы намеренно используете дополнительные точки с запятой,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="ed58b7a43c9e311ce8e3580896560e95ee0a6c3d" translate="yes" xml:space="preserve">
          <source>If you intentionally use the &lt;code&gt;void&lt;/code&gt; operator then you can disable this rule.</source>
          <target state="translated">Если вы намеренно используете оператор &lt;code&gt;void&lt;/code&gt; , вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="29ecbabab88c404ca5af384d017cf9ea2b3f4919" translate="yes" xml:space="preserve">
          <source>If you maintain a plugin and provide installation instructions, you should ensure that the installation instructions are up to date with the &lt;a href=&quot;#package-loading-simplification&quot;&gt;user-facing changes to how plugins are loaded&lt;/a&gt;. In particular, if your plugin was generated with the &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt;&lt;code&gt;generator-eslint&lt;/code&gt;&lt;/a&gt; package, it likely contains outdated instructions for how to use the plugin with global ESLint installations.</source>
          <target state="translated">Если вы поддерживаете подключаемый модуль и предоставляете инструкции по установке, вы должны убедиться, что инструкции по установке актуальны с учетом &lt;a href=&quot;#package-loading-simplification&quot;&gt;пользовательских изменений способа загрузки&lt;/a&gt; подключаемых модулей . В частности, если ваш плагин был сгенерирован с &lt;a href=&quot;https://github.com/eslint/generator-eslint&quot;&gt; &lt;code&gt;generator-eslint&lt;/code&gt; &lt;/a&gt; пакета generator-eslint , он, вероятно, содержит устаревшие инструкции по использованию плагина с глобальными установками ESLint.</target>
        </trans-unit>
        <trans-unit id="f3373840bab8a6d0b2da19696a1d21a05dfa1320" translate="yes" xml:space="preserve">
          <source>If you maintain plugins that check files with extensions other than &lt;code&gt;.js&lt;/code&gt;, this feature will allow you to check these files by default by configuring an &lt;code&gt;overrides&lt;/code&gt; setting in your &lt;code&gt;recommended&lt;/code&gt; preset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382050530e90f989fc4392b588fcc385aace40bb" translate="yes" xml:space="preserve">
          <source>If you make a &lt;code&gt;fix()&lt;/code&gt; function which returns multiple &lt;code&gt;fixing&lt;/code&gt; objects, those &lt;code&gt;fixing&lt;/code&gt; objects must not be overlapped.</source>
          <target state="translated">Если вы создаете функцию &lt;code&gt;fix()&lt;/code&gt; которая возвращает несколько &lt;code&gt;fixing&lt;/code&gt; объектов, эти &lt;code&gt;fixing&lt;/code&gt; объекты не должны перекрываться.</target>
        </trans-unit>
        <trans-unit id="30d314fb125cae0253768be98db5440a6591c835" translate="yes" xml:space="preserve">
          <source>If you need to access comments for a specific node you can use &lt;code&gt;sourceCode.getComments(node)&lt;/code&gt;:</source>
          <target state="translated">Если вам нужно получить доступ к комментариям для определенного узла, вы можете использовать &lt;code&gt;sourceCode.getComments(node)&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5bded78921bf41e6e0100847f8e36439af0a827a" translate="yes" xml:space="preserve">
          <source>If you need to capture nested context, &lt;code&gt;consistent-this&lt;/code&gt; is going to be problematic. Code of that nature is usually difficult to read and maintain and you should consider refactoring it.</source>
          <target state="translated">Если вам нужно захватить вложенный контекст, &lt;code&gt;consistent-this&lt;/code&gt; будет проблематично. Код такого рода обычно трудно читать и поддерживать, и вам следует подумать о его рефакторинге.</target>
        </trans-unit>
        <trans-unit id="382e78ca57fb3d4eb43f4468524bc11d77683bdd" translate="yes" xml:space="preserve">
          <source>If you need to make multiple configs that can extend from each other and live in different directories, you can create a single shareable config that handles this scenario.</source>
          <target state="translated">Если вам нужно сделать несколько конфигураций,которые могут расширяться друг от друга и жить в разных директориях,вы можете создать одну конфигурацию с общим доступом,которая будет работать с этим сценарием.</target>
        </trans-unit>
        <trans-unit id="5812603008a46c3486b5e671b8f0edc57df6edd6" translate="yes" xml:space="preserve">
          <source>If you need to use control character pattern matching, then you should turn this rule off.</source>
          <target state="translated">Если необходимо использовать подгонку контрольных символов,то данное правило следует отключить.</target>
        </trans-unit>
        <trans-unit id="02d1a6666bd32062a9544a0211172b4e0690165a" translate="yes" xml:space="preserve">
          <source>If you need to use labeled statements everywhere, then you can safely disable this rule.</source>
          <target state="translated">Если вам нужно использовать помеченные утверждения повсюду,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="660081d33ba72f5ae35d8f8429fbf0433e7b68be" translate="yes" xml:space="preserve">
          <source>If you prefer to use &lt;code&gt;process.env&lt;/code&gt; throughout your project to retrieve values from environment variables, then you can safely disable this rule.</source>
          <target state="translated">Если вы предпочитаете использовать &lt;code&gt;process.env&lt;/code&gt; в своем проекте для получения значений из переменных среды, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="0d0340890e7d3e636e8f793bfb600313cb993e9d" translate="yes" xml:space="preserve">
          <source>If you simply want to create a local copy of the source to play with, you can clone the main repository using this command:</source>
          <target state="translated">Если вы просто хотите создать локальную копию исходного текста,вы можете клонировать основной репозиторий с помощью этой команды:</target>
        </trans-unit>
        <trans-unit id="b04452ae38d5259f038ccf2561fa3df0c59a4de4" translate="yes" xml:space="preserve">
          <source>If you specified directories with CLI (e.g., &lt;code&gt;eslint lib&lt;/code&gt;), ESLint searches target files in the directory to lint. The target files are &lt;code&gt;*.js&lt;/code&gt; or the files that match any of &lt;code&gt;overrides&lt;/code&gt; entries (but exclude entries that are any of &lt;code&gt;files&lt;/code&gt; end with &lt;code&gt;*&lt;/code&gt;).</source>
          <target state="translated">Если вы указали каталоги с помощью CLI (например, &lt;code&gt;eslint lib&lt;/code&gt; ), ESLint будет искать целевые файлы в каталоге для линтинга. Целевые файлы - это &lt;code&gt;*.js&lt;/code&gt; или файлы, соответствующие любой из записей &lt;code&gt;overrides&lt;/code&gt; (но исключая записи, которые являются &lt;code&gt;files&lt;/code&gt; заканчивающимися на &lt;code&gt;*&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fd8626c14a51a0d1489edd4acc5be7edf0bd3b9d" translate="yes" xml:space="preserve">
          <source>If you specified the &lt;a href=&quot;command-line-interface#ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt;&lt;/a&gt; command line option along with directories, the target files are only the files that have specified file extensions regardless of &lt;code&gt;overrides&lt;/code&gt; entries.</source>
          <target state="translated">Если вы указали &lt;a href=&quot;command-line-interface#ext&quot;&gt; &lt;code&gt;--ext&lt;/code&gt; &lt;/a&gt; командной строки --ext вместе с каталогами, целевыми файлами будут только файлы с указанными расширениями независимо от записей &lt;code&gt;overrides&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b54b0379c44ec2d18f671613df2ac7b3fa322827" translate="yes" xml:space="preserve">
          <source>If you think you've found a bug in ESLint, please &lt;a href=&quot;https://github.com/eslint/eslint/issues/new&quot;&gt;create a new issue&lt;/a&gt; or a &lt;a href=&quot;pull-requests&quot;&gt;pull request&lt;/a&gt; on GitHub.</source>
          <target state="translated">Если вы считаете, что нашли ошибку в ESLint, &lt;a href=&quot;https://github.com/eslint/eslint/issues/new&quot;&gt;создайте новую проблему&lt;/a&gt; или &lt;a href=&quot;pull-requests&quot;&gt;запрос&lt;/a&gt; на перенос на GitHub.</target>
        </trans-unit>
        <trans-unit id="38f228e5fd212b5545994a73a849c889d4d81493" translate="yes" xml:space="preserve">
          <source>If you use a boilerplate generator that relies on this behavior (e.g. to generate a script that runs &lt;code&gt;eslint tests/&lt;/code&gt; in a new project before any test files are actually present), you can work around this issue by adding a dummy file that matches the given pattern (e.g. an empty &lt;code&gt;tests/index.js&lt;/code&gt; file).</source>
          <target state="translated">Если вы используете шаблонный генератор, который полагается на это поведение (например, для создания сценария, который запускает &lt;code&gt;eslint tests/&lt;/code&gt; в новом проекте до того, как какие-либо тестовые файлы фактически присутствуют), вы можете обойти эту проблему, добавив фиктивный файл, который соответствует заданному шаблон (например, пустой файл &lt;code&gt;tests/index.js&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="7d3465c7ac30a9cf24afa4cba7d6d7a58b08270c" translate="yes" xml:space="preserve">
          <source>If you use a config file located outside of a local project (with the &lt;code&gt;--config&lt;/code&gt; flag), consider installing the plugins as dependencies of that config file, and setting the &lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt;&lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt;&lt;/a&gt; flag to the location of the config file.</source>
          <target state="translated">Если вы используете файл конфигурации, расположенный за пределами локального проекта (с флагом &lt;code&gt;--config&lt;/code&gt; ), рассмотрите возможность установки подключаемых &lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt; &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; &lt;/a&gt; как зависимостей этого файла конфигурации и установки флага --resolve-plugins-relative-to для расположения конфигурационный файл.</target>
        </trans-unit>
        <trans-unit id="ef38f0f26aedebc08c900f2170004ffdde1f5fb9" translate="yes" xml:space="preserve">
          <source>If you use a pattern such as &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt; where the &lt;code&gt;require&lt;/code&gt;d modules are not loaded in variable declarations, this rule will obviously do nothing for you.</source>
          <target state="translated">Если вы используете шаблон , такие как &lt;a href=&quot;https://github.com/umdjs/umd&quot;&gt;UMD&lt;/a&gt; , где &lt;code&gt;require&lt;/code&gt; г модули не загружаются в объявлениях переменных, это правило не будет , очевидно , ничего для вас.</target>
        </trans-unit>
        <trans-unit id="0e5b9656ad64e63d8b3fd891ddf70408bf2754ad" translate="yes" xml:space="preserve">
          <source>If you use some UTF-16 or UTF-32 files and you want to allow a file to optionally begin with a Unicode BOM, you should turn this rule off.</source>
          <target state="translated">Если вы используете некоторые файлы в кодировке UTF-16 или UTF-32 и хотите,чтобы файл по выбору начинался с Unicode BOM,вы должны отключить это правило.</target>
        </trans-unit>
        <trans-unit id="0b762ce7207b461cd7e474fde30e3e2573814934" translate="yes" xml:space="preserve">
          <source>If you want the functions to show up in stack traces (useful for debugging purposes)</source>
          <target state="translated">Если вы хотите,чтобы функции отображались в стековых трассах (полезно для отладки)</target>
        </trans-unit>
        <trans-unit id="0326d8c204460011dd4d50e18688b63f04393c0a" translate="yes" xml:space="preserve">
          <source>If you want to allow &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; with string arguments, then you can safely disable this rule.</source>
          <target state="translated">Если вы хотите разрешить &lt;code&gt;setTimeout()&lt;/code&gt; и &lt;code&gt;setInterval()&lt;/code&gt; со строковыми аргументами, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="cdc7c63ca6c90a4fc825f096a878d02d0077a0af" translate="yes" xml:space="preserve">
          <source>If you want to allow additional constructor flags for any reason, you can specify them using an &lt;code&gt;allowConstructorFlags&lt;/code&gt; option in &lt;code&gt;.eslintrc&lt;/code&gt;. These flags will then be ignored by the rule regardless of the &lt;code&gt;ecmaVersion&lt;/code&gt; setting.</source>
          <target state="translated">Если вы хотите , чтобы предоставить дополнительные флаги конструктора по какой - либо причине, вы можете задать их с помощью &lt;code&gt;allowConstructorFlags&lt;/code&gt; опции в &lt;code&gt;.eslintrc&lt;/code&gt; . Эти флаги будут игнорироваться правилом независимо от настройки &lt;code&gt;ecmaVersion&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="025c660770aa315e6d8b4dbc5d92f3800b8c5d91" translate="yes" xml:space="preserve">
          <source>If you want to allow assignment to function parameters, then you can safely disable this rule.</source>
          <target state="translated">Если вы хотите разрешить назначение параметров функции,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="01c2aaebaf24fdde52a8a21733c045787756506c" translate="yes" xml:space="preserve">
          <source>If you want to allow control flow operations in &lt;code&gt;finally&lt;/code&gt; blocks, you can turn this rule off.</source>
          <target state="translated">Если вы хотите разрешить операции потока управления в блоках &lt;code&gt;finally&lt;/code&gt; , вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="6ce4198863586a404bf23ac360d7a26607f63a6c" translate="yes" xml:space="preserve">
          <source>If you want to allow dangling underscores in identifiers, then you can safely turn this rule off.</source>
          <target state="translated">Если вы хотите разрешить висячие подчеркивания в идентификаторах,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="77ec3c669980b1ce6e74d2cc3cca9be9749234bd" translate="yes" xml:space="preserve">
          <source>If you want to allow developers to each decide how they want to write functions on their own, then you can disable this rule.</source>
          <target state="translated">Если вы хотите разрешить каждому разработчику самостоятельно решать,как он хочет писать функции,то вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="a99420336119594b2985f957e70afd067dc5c412" translate="yes" xml:space="preserve">
          <source>If you want to allow functions to have different &lt;code&gt;return&lt;/code&gt; behavior depending on code branching, then it is safe to disable this rule.</source>
          <target state="translated">Если вы хотите, чтобы функции имели разное поведение &lt;code&gt;return&lt;/code&gt; зависимости от ветвления кода, можно безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="06d8a61f2b762c90cf475f1c301e8c19a2803657" translate="yes" xml:space="preserve">
          <source>If you want to allow multiple spaces in a regular expression, then you can safely turn this rule off.</source>
          <target state="translated">Если вы хотите разрешить несколько пробелов в регулярном выражении,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="168b692048b6b1f7a247321b869174d92d311217" translate="yes" xml:space="preserve">
          <source>If you want to allow string concatenation of path names.</source>
          <target state="translated">Если вы хотите разрешить строковое конкатенирование имен путей.</target>
        </trans-unit>
        <trans-unit id="c2b47982ee8ecdbe90dcd79199ede4d5a1a2501a" translate="yes" xml:space="preserve">
          <source>If you want to allow synchronous operations in your script, do not enable this rule.</source>
          <target state="translated">Если вы хотите разрешить синхронные операции в вашем скрипте,не включайте это правило.</target>
        </trans-unit>
        <trans-unit id="157d97e1222d6e6c5c3036eddedf2544c220e1e7" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of &lt;code&gt;undefined&lt;/code&gt; in your code, then you can safely turn this rule off.</source>
          <target state="translated">Если вы хотите разрешить использование &lt;code&gt;undefined&lt;/code&gt; в своем коде, вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="5593620bae839c590950598c5628a7cf2b50ce4f" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of assignment operators in a &lt;code&gt;return&lt;/code&gt; statement, then you can safely disable this rule.</source>
          <target state="translated">Если вы хотите разрешить использование операторов присваивания в операторе &lt;code&gt;return&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="b91748df59dc1d210ee220fffd1795446709f9c9" translate="yes" xml:space="preserve">
          <source>If you want to allow the use of primitive wrapper objects, then you can safely disable this rule.</source>
          <target state="translated">Если вы хотите разрешить использование примитивных оберточных объектов,то вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="117c72dd490ac86d6418992cd2bdcb271c9762cc" translate="yes" xml:space="preserve">
          <source>If you want to allow use of &lt;code&gt;parseInt()&lt;/code&gt; or &lt;code&gt;Number.parseInt()&lt;/code&gt; for binary, octal, or hexadecimal integers, or if you are not using ES6 (because binary and octal literals are not supported in ES5 and below), you may wish to disable this rule.</source>
          <target state="translated">Если вы хотите разрешить использование &lt;code&gt;parseInt()&lt;/code&gt; или &lt;code&gt;Number.parseInt()&lt;/code&gt; для двоичных, восьмеричных или шестнадцатеричных целых чисел или если вы не используете ES6 (поскольку двоичные и восьмеричные литералы не поддерживаются в ES5 и ниже), вы можете пожелать чтобы отключить это правило.</target>
        </trans-unit>
        <trans-unit id="a7a2d8bc617fb6a973e4a757758c6ff305221634" translate="yes" xml:space="preserve">
          <source>If you want to be able to access array indices or object properties directly, you can either configure the rule to your tastes or disable the rule entirely.</source>
          <target state="translated">Если вы хотите иметь прямой доступ к индексам массива или свойствам объектов,вы можете либо настроить правило на свой вкус,либо полностью отключить его.</target>
        </trans-unit>
        <trans-unit id="e945829b731e7b76322bd039aebed22d8e0288ab" translate="yes" xml:space="preserve">
          <source>If you want to contribute to an ESLint repo, please use a GitHub pull request. This is the fastest way for us to evaluate your code and to merge it into the code base. Please don't file an issue with snippets of code. Doing so means that we need to manually merge the changes in and update any appropriate tests. That decreases the likelihood that your code is going to get included in a timely manner. Please use pull requests.</source>
          <target state="translated">Если вы хотите внести свой вклад в репо ESLint,пожалуйста,используйте запрос GitHub pull.Это самый быстрый способ для нас оценить ваш код и объединить его в кодовую базу.Пожалуйста,не оформляйте проблему фрагментами кода.Это означает,что нам нужно вручную объединить изменения и обновить все соответствующие тесты.Это снижает вероятность того,что ваш код будет своевременно включен в базу.Пожалуйста,используйте подтягивающие запросы.</target>
        </trans-unit>
        <trans-unit id="b1bc3e203f722d1ec9693455df83c11f36ba7aae" translate="yes" xml:space="preserve">
          <source>If you want to fix code from &lt;code&gt;stdin&lt;/code&gt; or otherwise want to get the fixes without actually writing them to the file, use the &lt;a href=&quot;#--fix-dry-run&quot;&gt;&lt;code&gt;--fix-dry-run&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">Если вы хотите исправить код из стандартного &lt;code&gt;stdin&lt;/code&gt; или иначе хотите получить исправления, не записывая их в файл, используйте параметр &lt;a href=&quot;#--fix-dry-run&quot;&gt; &lt;code&gt;--fix-dry-run&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d433926704a4ac51dbe6e1a80f5afe0f9cbc20ed" translate="yes" xml:space="preserve">
          <source>If you want to implement a breaking change or a change to the core, ensure there's an issue that describes what you're doing and the issue has been accepted. You can create a new issue or just indicate you're &lt;a href=&quot;working-on-issues&quot;&gt;working on an existing issue&lt;/a&gt;. Bug fixes, documentation changes, and other pull requests do not require an issue.</source>
          <target state="translated">Если вы хотите внести критическое изменение или изменение в ядро, убедитесь, что есть проблема, которая описывает то, что вы делаете, и проблема принята. Вы можете создать новую задачу или просто указать, что &lt;a href=&quot;working-on-issues&quot;&gt;работаете над существующей проблемой&lt;/a&gt; . Исправления ошибок, изменения документации и другие запросы на вытягивание не требуют проблем.</target>
        </trans-unit>
        <trans-unit id="dbaf3fa15fdca101b1059dd87a531855c8a22f9b" translate="yes" xml:space="preserve">
          <source>If you want to learn more about destructuring, check out the links below:</source>
          <target state="translated">Если вы хотите узнать больше об уничтожении,пройдите по ссылкам ниже:</target>
        </trans-unit>
        <trans-unit id="01bdb16b7d4784e8c75c4b849aaf2b1888300119" translate="yes" xml:space="preserve">
          <source>If you want to learn more about tagged template literals, check out the links below:</source>
          <target state="translated">Если вы хотите узнать больше о литералах шаблонов с метками,пройдите по ссылкам ниже:</target>
        </trans-unit>
        <trans-unit id="1bfb10754401295a1a5e4ea43c2fe0a3b67db675" translate="yes" xml:space="preserve">
          <source>If you want to lint one or more files, use the &lt;code&gt;executeOnFiles()&lt;/code&gt; method. This method accepts a single argument, which is an array of files and/or directories to traverse for files. You can pass the same values as you would using the ESLint command line interface, such as &lt;code&gt;&quot;.&quot;&lt;/code&gt; to search all JavaScript files in the current directory. Here's an example:</source>
          <target state="translated">Если вы хотите линтовать один или несколько файлов, используйте метод &lt;code&gt;executeOnFiles()&lt;/code&gt; . Этот метод принимает единственный аргумент, который представляет собой массив файлов и / или каталогов для поиска файлов. Вы можете передавать те же значения, что и при использовании интерфейса командной строки ESLint, например &lt;code&gt;&quot;.&quot;&lt;/code&gt; для поиска во всех файлах JavaScript в текущем каталоге. Вот пример:</target>
        </trans-unit>
        <trans-unit id="8ae0efa7cc8d38a3e330a4407faa82ae491a0ad3" translate="yes" xml:space="preserve">
          <source>If you want to propose a new rule, please see how to &lt;a href=&quot;pull-requests&quot;&gt;create a pull request&lt;/a&gt; or submit an issue by filling out a &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=NEW_RULE.md&quot;&gt;new rule template&lt;/a&gt;.</source>
          <target state="translated">Если вы хотите предложить новое правило, узнайте, как &lt;a href=&quot;pull-requests&quot;&gt;создать запрос на вытягивание&lt;/a&gt; или отправить проблему, заполнив &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=NEW_RULE.md&quot;&gt;новый шаблон правила&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fc20c08d174f1ad50d824f0e45cd254992c6ae16" translate="yes" xml:space="preserve">
          <source>If you want to quickly run just one test, you can do so by running Mocha directly and passing in the filename. For example:</source>
          <target state="translated">Если вы хотите быстро запустить только один тест,вы можете сделать это,запустив Mocha напрямую и пройдя по имени файла.Например:</target>
        </trans-unit>
        <trans-unit id="16da35b5af438aa046c923e0c90a12cc343ac898" translate="yes" xml:space="preserve">
          <source>If you want to retrieve a configuration object for a given file, use the &lt;code&gt;getConfigForFile()&lt;/code&gt; method. This method accepts one argument, a file path, and returns an object represented the calculated configuration of the file. Here's an example:</source>
          <target state="translated">Если вы хотите получить объект конфигурации для данного файла, используйте метод &lt;code&gt;getConfigForFile()&lt;/code&gt; . Этот метод принимает один аргумент, путь к файлу, и возвращает объект, представляющий вычисленную конфигурацию файла. Вот пример:</target>
        </trans-unit>
        <trans-unit id="a781125be48b88ef90aa4de75ea39fd749f253a9" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;await&lt;/code&gt; to denote a value that is a thenable</source>
          <target state="translated">Если вы хотите использовать &lt;code&gt;await&lt;/code&gt; для обозначения значения, которое может быть</target>
        </trans-unit>
        <trans-unit id="7bbedf7b05174e3221ac6559667171bdc4900f74" translate="yes" xml:space="preserve">
          <source>If you want to use &lt;code&gt;await&lt;/code&gt; to denote a value that is a thenable, even when it is not necessary; or if you do not want the performance benefit of avoiding &lt;code&gt;return await&lt;/code&gt;, you can turn off this rule.</source>
          <target state="translated">Если вы хотите использовать &lt;code&gt;await&lt;/code&gt; для обозначения значения, которое можно использовать, даже если в этом нет необходимости; или если вы не хотите повышения производительности за &lt;code&gt;return await&lt;/code&gt; избежания return await , вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="7ebf4e944a61bef47f4a2f25c9dfb29556f044f3" translate="yes" xml:space="preserve">
          <source>If you want to use Reflect methods, but keep using the &lt;code&gt;delete&lt;/code&gt; keyword, then your config would look like &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;delete&quot;] }]&lt;/code&gt;.</source>
          <target state="translated">Если вы хотите использовать методы Reflect, но продолжаете использовать ключевое слово &lt;code&gt;delete&lt;/code&gt; , тогда ваша конфигурация будет выглядеть так: &lt;code&gt;prefer-reflect: [2, { &quot;exceptions&quot;: [&quot;delete&quot;] }]&lt;/code&gt; Reflect : [2, {&quot;exceptions&quot;: [&quot;delete&quot;]}] .</target>
        </trans-unit>
        <trans-unit id="5dcbce8e16ab14d37edc537499d4673be2756e1d" translate="yes" xml:space="preserve">
          <source>If you want to use an environment from a plugin, be sure to specify the plugin name in the &lt;code&gt;plugins&lt;/code&gt; array and then use the unprefixed plugin name, followed by a slash, followed by the environment name. For example:</source>
          <target state="translated">Если вы хотите использовать среду из плагина, обязательно укажите имя плагина в массиве &lt;code&gt;plugins&lt;/code&gt; а затем используйте имя плагина без префикса, за которым следует косая черта, а затем имя среды. Например:</target>
        </trans-unit>
        <trans-unit id="eb8a205efd9c67c4073b9416e356ad4478147a46" translate="yes" xml:space="preserve">
          <source>If you want to use sparse arrays, then it is safe to disable this rule.</source>
          <target state="translated">Если вы хотите использовать разреженные массивы,то безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="32718e9e480985cfed80435e0fad5f99885ad95f" translate="yes" xml:space="preserve">
          <source>If you want to use your own parser and provide additional capabilities for your rules, you can specify your own custom parser. If a &lt;code&gt;parseForESLint&lt;/code&gt; method is exposed on the parser, this method will be used to parse the code. Otherwise, the &lt;code&gt;parse&lt;/code&gt; method will be used. Both methods should take in the source code as the first argument, and an optional configuration object as the second argument (provided as &lt;code&gt;parserOptions&lt;/code&gt; in a config file). The &lt;code&gt;parse&lt;/code&gt; method should simply return the AST. The &lt;code&gt;parseForESLint&lt;/code&gt; method should return an object that contains the required property &lt;code&gt;ast&lt;/code&gt; and optional properties &lt;code&gt;services&lt;/code&gt;, &lt;code&gt;scopeManager&lt;/code&gt;, and &lt;code&gt;visitorKeys&lt;/code&gt;.</source>
          <target state="translated">Если вы хотите использовать собственный синтаксический анализатор и предоставить дополнительные возможности для своих правил, вы можете указать свой собственный синтаксический анализатор. Если в &lt;code&gt;parseForESLint&lt;/code&gt; метод parseForESLint , этот метод будет использоваться для синтаксического анализа кода. В противном случае будет использован метод &lt;code&gt;parse&lt;/code&gt; . Оба метода должны принимать исходный код в качестве первого аргумента и необязательный объект конфигурации в качестве второго аргумента (предоставляемый как &lt;code&gt;parserOptions&lt;/code&gt; в файле конфигурации). Метод &lt;code&gt;parse&lt;/code&gt; должен просто возвращать AST. Метод &lt;code&gt;parseForESLint&lt;/code&gt; должен возвращать объект, содержащий требуемое свойство &lt;code&gt;ast&lt;/code&gt; и необязательные &lt;code&gt;services&lt;/code&gt; свойств , &lt;code&gt;scopeManager&lt;/code&gt; и &lt;code&gt;visitorKeys&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3230232a97c3d21775cfc1d1507fc08955ed3b0e" translate="yes" xml:space="preserve">
          <source>If you were to remove the initialization, then the behavior of the loop changes:</source>
          <target state="translated">Если убрать инициализацию,то поведение цикла меняется:</target>
        </trans-unit>
        <trans-unit id="d93b953074e456b439293bef97d4d869490dadb5" translate="yes" xml:space="preserve">
          <source>If you were using &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; to enable ES6 module support like this:</source>
          <target state="translated">Если вы использовали &lt;code&gt;ecmaFeatures.modules&lt;/code&gt; для включения поддержки модуля ES6 следующим образом:</target>
        </trans-unit>
        <trans-unit id="36c05b83cad0c60a876dbe4551ddc2004b01bce0" translate="yes" xml:space="preserve">
          <source>If you were using a prior version of ESLint, you can get help with the transition by reading:</source>
          <target state="translated">Если вы использовали предыдущую версию ESLint,вы можете получить помощь в переходе,прочитав ее:</target>
        </trans-unit>
        <trans-unit id="62e887c8ffaf679225cbfb62fab07d5987855b22" translate="yes" xml:space="preserve">
          <source>If you wish to allow the use of the &lt;code&gt;Object&lt;/code&gt; constructor, you can safely turn this rule off.</source>
          <target state="translated">Если вы хотите разрешить использование конструктора &lt;code&gt;Object&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="4845e6a9b32a2c3cb12af3f332e0e771dafb2f16" translate="yes" xml:space="preserve">
          <source>If you wish to have a different configuration for line comments and block comments, you can do so by using two different object configurations (note that the capitalization option will be enforced consistently for line and block comments):</source>
          <target state="translated">Если вы хотите иметь другую конфигурацию для комментариев к строкам и блочных комментариев,вы можете сделать это,используя две различные конфигурации объектов (обратите внимание,что для комментариев к строкам и блокам опция заглавной буквы будет применяться последовательно):</target>
        </trans-unit>
        <trans-unit id="3b305d34beab965b8e6902b4057eb1ea1186cc8f" translate="yes" xml:space="preserve">
          <source>If you'd like ESLint to attempt to fix the problem you're reporting, you can do so by specifying the &lt;code&gt;fix&lt;/code&gt; function when using &lt;code&gt;context.report()&lt;/code&gt;. The &lt;code&gt;fix&lt;/code&gt; function receives a single argument, a &lt;code&gt;fixer&lt;/code&gt; object, that you can use to apply a fix. For example:</source>
          <target state="translated">Если вы хотите, чтобы ESLint попытался исправить проблему, о которой вы сообщаете, вы можете сделать это, указав функцию &lt;code&gt;fix&lt;/code&gt; при использовании &lt;code&gt;context.report()&lt;/code&gt; . &lt;code&gt;fix&lt;/code&gt; функция принимает один аргумент, &lt;code&gt;fixer&lt;/code&gt; объект, который можно использовать , чтобы применить исправление. Например:</target>
        </trans-unit>
        <trans-unit id="e2de9e1d21deb952d591059d9bfac04bff3045b4" translate="yes" xml:space="preserve">
          <source>If you'd like to request a change other than a bug fix or new rule, this section explains that process.</source>
          <target state="translated">Если вы хотите запросить изменение,отличное от исправления ошибки или нового правила,этот раздел объясняет этот процесс.</target>
        </trans-unit>
        <trans-unit id="9dbf97a89558daba71eceae42ebb78166efcb253" translate="yes" xml:space="preserve">
          <source>If you'd like to request a change to ESLint, please &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=CHANGE.md&quot;&gt;create a new issue&lt;/a&gt; on GitHub. Be sure to include the following information:</source>
          <target state="translated">Если вы хотите запросить изменение ESLint, &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=CHANGE.md&quot;&gt;создайте новую проблему&lt;/a&gt; на GitHub. Обязательно укажите следующую информацию:</target>
        </trans-unit>
        <trans-unit id="a2ff681ef1e1294a4a8430977faeb8b6585b95bd" translate="yes" xml:space="preserve">
          <source>If you'd like to work on a pull request and you've never submitted code before, follow these steps:</source>
          <target state="translated">Если вы хотите поработать над запросом на вытаскивание,но никогда раньше не отправляли код,выполните следующие шаги:</target>
        </trans-unit>
        <trans-unit id="1fc6d5511f027154cd7d3325f533abfe108333a7" translate="yes" xml:space="preserve">
          <source>If you'd prefer to use a different file than the &lt;code&gt;.eslintignore&lt;/code&gt; in the current working directory, you can specify it on the command line using the &lt;code&gt;--ignore-path&lt;/code&gt; option. For example, you can use &lt;code&gt;.jshintignore&lt;/code&gt; file because it has the same format:</source>
          <target state="translated">Если вы предпочитаете использовать в текущем рабочем каталоге файл, отличный от &lt;code&gt;.eslintignore&lt;/code&gt; , вы можете указать его в командной строке с помощью параметра &lt;code&gt;--ignore-path&lt;/code&gt; . Например, вы можете использовать файл &lt;code&gt;.jshintignore&lt;/code&gt; , потому что он имеет тот же формат:</target>
        </trans-unit>
        <trans-unit id="d8bb46085e72a67007bd541cac129fad559af636" translate="yes" xml:space="preserve">
          <source>If you're going to work on an issue, please add a comment to that issue saying so and indicating when you think you will complete it. It will help us to avoid duplication of effort. Some examples of good comments are:</source>
          <target state="translated">Если вы собираетесь работать над вопросом,пожалуйста,добавьте комментарий к этому вопросу,сказав об этом и указав,когда,по вашему мнению,вы его закончите.Это поможет нам избежать дублирования усилий.Некоторые примеры хороших комментариев:</target>
        </trans-unit>
        <trans-unit id="529fb9f8074c731a55ea46317378ab6ce2fa6379" translate="yes" xml:space="preserve">
          <source>If you're interested in writing a tool that uses ESLint, then you can use the Node.js API to get programmatic access to functionality.</source>
          <target state="translated">Если вы заинтересованы в написании инструмента,использующего ESLint,то вы можете использовать Node.js API для получения программного доступа к функциональности.</target>
        </trans-unit>
        <trans-unit id="492482d9566e53632c85e7788842a3f9c1aceabf" translate="yes" xml:space="preserve">
          <source>If you're not concerned about consistent locations of implicitly returned arrow function expressions, you should not turn on this rule.</source>
          <target state="translated">Если вас не беспокоит согласованное расположение неявно возвращаемых выражений функции стрелок,то не стоит включать это правило.</target>
        </trans-unit>
        <trans-unit id="403e57af13573e69ccf33af74594bbecf97b2c8e" translate="yes" xml:space="preserve">
          <source>If you're not concerned about consistent locations of single-line statements, you should not turn on this rule. You can also disable this rule if you're using the &lt;code&gt;&quot;all&quot;&lt;/code&gt; option for the &lt;a href=&quot;curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; rule, because this will disallow single-line statements entirely.</source>
          <target state="translated">Если вас не беспокоит согласованное расположение однострочных операторов, не следует включать это правило. Вы также можете отключить это правило, если используете опцию &lt;code&gt;&quot;all&quot;&lt;/code&gt; для &lt;a href=&quot;curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt; правила, потому что это полностью запретит однострочные операторы.</target>
        </trans-unit>
        <trans-unit id="1d9f59855a50da748bf20de2e170697ffbe4d25d" translate="yes" xml:space="preserve">
          <source>If you're not sure which config file needs to be updated, it may be useful to run ESLint v5 and look at what config file is mentioned in the deprecation warning.</source>
          <target state="translated">Если вы не уверены,какой конфигурационный файл нуждается в обновлении,может быть полезно запустить ESLint v5 и посмотреть,какой конфигурационный файл упоминается в предупреждении об истощении.</target>
        </trans-unit>
        <trans-unit id="e7c33db323d7ae05a4a777eaa7e0692355dceeee" translate="yes" xml:space="preserve">
          <source>If you're not using &lt;code&gt;ecmaFeatures&lt;/code&gt; in your configuration or your custom/plugin rules and tests, then no change is needed.</source>
          <target state="translated">Если вы не используете &lt;code&gt;ecmaFeatures&lt;/code&gt; в своей конфигурации или в правилах и тестах для пользовательских / плагинов, то никаких изменений не требуется.</target>
        </trans-unit>
        <trans-unit id="0e5d630cd8e1ad7d04f0f3ebb887b02dbcbde5a8" translate="yes" xml:space="preserve">
          <source>If you're planning on contributing to ESLint, then it's a good idea to fork the repository. You can find instructions for forking a repository at &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;https://help.github.com/articles/fork-a-repo/&lt;/a&gt;. After forking the ESLint repository, you'll want to create a local copy of your fork.</source>
          <target state="translated">Если вы планируете внести свой вклад в ESLint, то хорошей идеей будет форк репозитория. Вы можете найти инструкции по разветвлению репозитория на &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;https://help.github.com/articles/fork-a-repo/&lt;/a&gt; . После разветвления репозитория ESLint вы захотите создать локальную копию своей вилки.</target>
        </trans-unit>
        <trans-unit id="04c7fb910e2d3f13bf107bc9b013fc5fc7904efc" translate="yes" xml:space="preserve">
          <source>If you're requesting a change to a rule, it's helpful to include this information as well:</source>
          <target state="translated">Если вы запрашиваете изменение правила,полезно также включить эту информацию:</target>
        </trans-unit>
        <trans-unit id="44e50b47a18d3a7403129f958f989d1c21f74408" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;context.ecmaFeatures.modules&lt;/code&gt;, rewrite to check that the &lt;code&gt;sourceType&lt;/code&gt; property of the Program node is &lt;code&gt;&quot;module&quot;&lt;/code&gt;.</source>
          <target state="translated">Если вы используете &lt;code&gt;context.ecmaFeatures.modules&lt;/code&gt; , перепишите , чтобы проверить, что свойство &lt;code&gt;sourceType&lt;/code&gt; узла Program имеет значение &lt;code&gt;&quot;module&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1fc559da69650e0770bde8a012bac60b284aed63" translate="yes" xml:space="preserve">
          <source>If you're using Node.js, however, &lt;code&gt;console&lt;/code&gt; is used to output information to the user and so is not strictly used for debugging purposes. If you are developing for Node.js then you most likely do not want this rule enabled.</source>
          <target state="translated">Однако, если вы используете Node.js, &lt;code&gt;console&lt;/code&gt; используется для вывода информации пользователю и поэтому не используется строго для целей отладки. Если вы разрабатываете для Node.js, то, скорее всего, вы не хотите, чтобы это правило было включено.</target>
        </trans-unit>
        <trans-unit id="6679e6e261401ed39ebd01362b8293e4ddca112e" translate="yes" xml:space="preserve">
          <source>If you're using a non-ES6 feature flag such as &lt;code&gt;context.ecmaFeatures.jsx&lt;/code&gt;, rewrite to check for &lt;code&gt;context.parserOptions.ecmaFeatures.jsx&lt;/code&gt;.</source>
          <target state="translated">Если вы используете флаг функции, отличной от ES6, такой как &lt;code&gt;context.ecmaFeatures.jsx&lt;/code&gt; , перепишите его , чтобы проверить &lt;code&gt;context.parserOptions.ecmaFeatures.jsx&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a85d177b329bc6c730f23ff598ce3a4fb75b095d" translate="yes" xml:space="preserve">
          <source>If you're using an ES6 feature flag such as &lt;code&gt;context.ecmaFeatures.blockBindings&lt;/code&gt;, rewrite to check for &lt;code&gt;context.parserOptions.ecmaVersion &amp;gt; 5&lt;/code&gt;.</source>
          <target state="translated">Если вы используете флаг функции ES6, такой как &lt;code&gt;context.ecmaFeatures.blockBindings&lt;/code&gt; , перепишите , чтобы проверить наличие &lt;code&gt;context.parserOptions.ecmaVersion &amp;gt; 5&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0ff71978601ec2bbe9e3d1868a2d18412ce28bed" translate="yes" xml:space="preserve">
          <source>If you're using any non-ES6 flags in &lt;code&gt;ecmaFeatures&lt;/code&gt;, you need to move those inside of &lt;code&gt;parserOptions&lt;/code&gt;. For instance:</source>
          <target state="translated">Если вы используете какие - либо флаги , не ES6 в &lt;code&gt;ecmaFeatures&lt;/code&gt; , вам нужно переместить эти внутренности &lt;code&gt;parserOptions&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="5d5c9fc44eb094ac8f2b18978cbf3f0acccc994b" translate="yes" xml:space="preserve">
          <source>If you're using any of these flags, such as:</source>
          <target state="translated">Если вы используете любой из этих флагов,например:</target>
        </trans-unit>
        <trans-unit id="6495d2f4fd019907eeb203fca9c3e68a5e7680ab" translate="yes" xml:space="preserve">
          <source>If you're using custom non-error values as Promise rejection reasons, you can turn off this rule.</source>
          <target state="translated">Если вы используете пользовательские значения без ошибок в качестве причины отказа в обещании,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="b3dda6a82a85489dc460700036c64d7e04f74905" translate="yes" xml:space="preserve">
          <source>If you're using such an initialization inside of a loop, then you should disable this rule.</source>
          <target state="translated">Если вы используете такую инициализацию внутри цикла,то следует отключить данное правило.</target>
        </trans-unit>
        <trans-unit id="de18cfd7f994a6a4746d6a5b6b988915f27f6978" translate="yes" xml:space="preserve">
          <source>If you're writing custom ESLint rules, you might be interested in using selectors to examine specific parts of the AST. If you're configuring ESLint for your codebase, you might be interested in restricting particular syntax patterns with selectors.</source>
          <target state="translated">Если вы пишете пользовательские правила ESLint,вам может быть интересно использовать селекторы для изучения конкретных частей AST.Если вы настраиваете ESLint для своей кодовой базы,вас может заинтересовать ограничение определенных синтаксических шаблонов с помощью селекторов.</target>
        </trans-unit>
        <trans-unit id="c96442ea1831fcb8ddebf6e89b51db125d24c596" translate="yes" xml:space="preserve">
          <source>If your code is only going to be executed in an ECMAScript 5 or higher environment, then you can safely leave this rule off.</source>
          <target state="translated">Если ваш код будет выполняться только в среде ECMAScript 5 или выше,то вы можете безопасно оставить это правило выключенным.</target>
        </trans-unit>
        <trans-unit id="7c1a1996cd5371119325ca66866f4edcd3530231" translate="yes" xml:space="preserve">
          <source>If your code is out-of-date, we might ask you to rebase. That means we want you to apply your changes on top of the latest upstream code. Make sure you have set up a &lt;a href=&quot;../development-environment&quot;&gt;development environment&lt;/a&gt; and then you can rebase using these commands:</source>
          <target state="translated">Если ваш код устарел, мы можем попросить вас перебазировать его. Это означает, что мы хотим, чтобы вы применили свои изменения поверх последнего исходного кода. Убедитесь, что вы настроили &lt;a href=&quot;../development-environment&quot;&gt;среду разработки,&lt;/a&gt; а затем вы можете выполнить перебазирование с помощью следующих команд:</target>
        </trans-unit>
        <trans-unit id="51a50954cfa8c4532d799e153f3402761f00daa2" translate="yes" xml:space="preserve">
          <source>If your code is still very much in development and don't want to worry about stripping &lt;code&gt;debugger&lt;/code&gt; statements, then turn this rule off. You'll generally want to turn it back on when testing code prior to deployment.</source>
          <target state="translated">Если ваш код все еще находится в стадии разработки и вы не хотите беспокоиться об удалении операторов &lt;code&gt;debugger&lt;/code&gt; , отключите это правило. Обычно вы захотите снова включить его при тестировании кода перед развертыванием.</target>
        </trans-unit>
        <trans-unit id="83a5396f7b29a4f6527d5a1931cc0bcb3428da62" translate="yes" xml:space="preserve">
          <source>If your code will not be run in IE8 or below (a Node.js application, for example) and you'd prefer to allow trailing commas, turn this rule off.</source>
          <target state="translated">Если ваш код не будет запущен в IE8 или ниже (например,приложение Node.js)и вы предпочитаете разрешить трейлинговые запятые,выключите это правило.</target>
        </trans-unit>
        <trans-unit id="f8f29c811490e5458b9805b99b4ea539001d53d1" translate="yes" xml:space="preserve">
          <source>If your codebase doesn't support async function syntax, there's no need to enable this rule.</source>
          <target state="translated">Если ваша кодовая база не поддерживает синтаксис асинхронных функций,то нет необходимости включать это правило.</target>
        </trans-unit>
        <trans-unit id="a162368aefa62116f17df2fd8bc935578feec8ea" translate="yes" xml:space="preserve">
          <source>If your commit message is in the incorrect format, you'll be asked to update it. You can do so via:</source>
          <target state="translated">Если ваше сообщение о фиксации находится в неправильном формате,вас попросят обновить его.Вы можете сделать это через:</target>
        </trans-unit>
        <trans-unit id="ab5ccc8af6f48197d32df8b7d3e12fe2a0141524" translate="yes" xml:space="preserve">
          <source>If your configuration extends all core rules: after you upgrade to a newer major or minor version of ESLint, review the reported problems before you use the &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;command-line-interface#fix&quot;&gt;command line&lt;/a&gt;, so you know if a new fixable rule will make changes to the code.</source>
          <target state="translated">Если ваша конфигурация расширяет все основные правила: после обновления до более новой основной или дополнительной версии ESLint просмотрите сообщенные проблемы, прежде чем использовать параметр &lt;code&gt;--fix&lt;/code&gt; в &lt;a href=&quot;command-line-interface#fix&quot;&gt;командной строке&lt;/a&gt; , чтобы вы знали, внесет ли новое исправляемое правило изменения в код.</target>
        </trans-unit>
        <trans-unit id="2559a41e901cadba989bfeffd57f3935b353bcb1" translate="yes" xml:space="preserve">
          <source>If your configuration extends the recommended rules: after you upgrade to a newer major version of ESLint, review the reported problems before you use the &lt;code&gt;--fix&lt;/code&gt; option on the &lt;a href=&quot;command-line-interface#fix&quot;&gt;command line&lt;/a&gt;, so you know if a new fixable recommended rule will make changes to the code.</source>
          <target state="translated">Если ваша конфигурация расширяет рекомендуемые правила: после обновления до более новой основной версии ESLint, прежде чем использовать параметр &lt;code&gt;--fix&lt;/code&gt; в &lt;a href=&quot;command-line-interface#fix&quot;&gt;командной строке&lt;/a&gt; , просмотрите сообщения о проблемах , чтобы вы знали, внесет ли новое исправляемое рекомендуемое правило изменения в код.</target>
        </trans-unit>
        <trans-unit id="39f85b8e11f0a7287198c3637add2aa74d65ec3a" translate="yes" xml:space="preserve">
          <source>If your project will not be following a consistent comma-spacing pattern, turn this rule off.</source>
          <target state="translated">Если ваш проект не будет следовать последовательному шаблону с интервалом между запятыми,выключите это правило.</target>
        </trans-unit>
        <trans-unit id="b2741db66d6831acaf061c23673437b93b79e590" translate="yes" xml:space="preserve">
          <source>If your project will not be using ES5 property getters you do not need this rule.</source>
          <target state="translated">Если ваш проект не будет использовать ES5-геттеры свойств,то вам не нужно это правило.</target>
        </trans-unit>
        <trans-unit id="bab195dfe6cfd05f543eca0ef2bf531274ab3593" translate="yes" xml:space="preserve">
          <source>If your project will not be using a common operator line break style, turn this rule off.</source>
          <target state="translated">Если в вашем проекте не будет использоваться общий стиль разрыва строки оператора,выключите это правило.</target>
        </trans-unit>
        <trans-unit id="2945d370984bd3d31485c9bde06fc75b8ba6634f" translate="yes" xml:space="preserve">
          <source>If your project will not be using generators or you are not concerned with spacing consistency, you do not need this rule.</source>
          <target state="translated">Если ваш проект не будет использовать генераторы или вас не волнует согласованность интервалов,вам не нужно это правило.</target>
        </trans-unit>
        <trans-unit id="b5ba84c31d79b821b596dda291e464837704ee5d" translate="yes" xml:space="preserve">
          <source>If your project will not be using generators you do not need this rule.</source>
          <target state="translated">Если ваш проект не будет использовать генераторы,то вам не нужно это правило.</target>
        </trans-unit>
        <trans-unit id="3b403b66e02ddb4237f2f89a2eff187617c1cbaf" translate="yes" xml:space="preserve">
          <source>If your rule is disallowing something, prefix it with &lt;code&gt;no-&lt;/code&gt; such as &lt;code&gt;no-eval&lt;/code&gt; for disallowing &lt;code&gt;eval()&lt;/code&gt; and &lt;code&gt;no-debugger&lt;/code&gt; for disallowing &lt;code&gt;debugger&lt;/code&gt;.</source>
          <target state="translated">Если ваше правило что-то запрещает, &lt;code&gt;no-eval&lt;/code&gt; перед ним префикс &lt;code&gt;no-&lt;/code&gt; , например no-eval, чтобы запретить &lt;code&gt;eval()&lt;/code&gt; и &lt;code&gt;no-debugger&lt;/code&gt; , чтобы запретить &lt;code&gt;debugger&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2824b845991c6bbe7e78b00c6a0fb1a3e916869b" translate="yes" xml:space="preserve">
          <source>If your rule is enforcing the inclusion of something, use a short name without a special prefix.</source>
          <target state="translated">Если ваше правило заставляет что-то включать,используйте короткое имя без специального префикса.</target>
        </trans-unit>
        <trans-unit id="2011f28355e4125316a3bdd688cb7db66dd75549" translate="yes" xml:space="preserve">
          <source>If your rule needs to get the actual JavaScript source to work with, then use the &lt;code&gt;sourceCode.getText()&lt;/code&gt; method. This method works as follows:</source>
          <target state="translated">Если ваше правило требует, чтобы фактический источник JavaScript работал с ним, используйте метод &lt;code&gt;sourceCode.getText()&lt;/code&gt; . Этот метод работает следующим образом:</target>
        </trans-unit>
        <trans-unit id="e1ebf009df56e29e74f07a68f239e17913f4a1d3" translate="yes" xml:space="preserve">
          <source>If your shareable config depends on a plugin, you should also specify it as a &lt;code&gt;peerDependency&lt;/code&gt; (plugins will be loaded relative to the end user's project, so the end user is required to install the plugins they need). However, if your shareable config depends on a third-party parser or another shareable config, you can specify these packages as &lt;code&gt;dependencies&lt;/code&gt;.</source>
          <target state="translated">Если ваша общая конфигурация зависит от плагина, вы также должны указать его как &lt;code&gt;peerDependency&lt;/code&gt; (плагины будут загружаться относительно проекта конечного пользователя, поэтому конечный пользователь должен установить необходимые плагины). Однако, если ваша общая конфигурация зависит от стороннего парсера или другой общей конфигурации, вы можете указать эти пакеты как &lt;code&gt;dependencies&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1856f3abeff9591a2a7d76238103bbed25f63cd8" translate="yes" xml:space="preserve">
          <source>If/else statements</source>
          <target state="translated">утверждения о несоответствии</target>
        </trans-unit>
        <trans-unit id="934ac64f888852108eb511923459b3545bf9389e" translate="yes" xml:space="preserve">
          <source>Ignore files (&lt;code&gt;.eslintignore&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88efdf7b0a638bc58f75e1b4e8e0f081ca07ff33" translate="yes" xml:space="preserve">
          <source>Ignore patterns behave according to the &lt;code&gt;.gitignore&lt;/code&gt;&lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;specification&lt;/a&gt;.</source>
          <target state="translated">Шаблоны игнорирования действуют в &lt;code&gt;.gitignore&lt;/code&gt; &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;спецификацией &lt;/a&gt;.gitignore .</target>
        </trans-unit>
        <trans-unit id="e0c0968ebdf38ddfdbaec683b916b61dcb603c54" translate="yes" xml:space="preserve">
          <source>Ignored File Warnings</source>
          <target state="translated">Предупреждения об игнорируемых файлах</target>
        </trans-unit>
        <trans-unit id="d261e62109255eb2c88ce241ececcda865af665d" translate="yes" xml:space="preserve">
          <source>Ignores the member sorting within a &lt;code&gt;multiple&lt;/code&gt; member import declaration.</source>
          <target state="translated">Игнорирует сортировку элементов в объявлении импорта &lt;code&gt;multiple&lt;/code&gt; элементов.</target>
        </trans-unit>
        <trans-unit id="97f2ea65d88865525c32c1dc0fdaabf6454b7ce5" translate="yes" xml:space="preserve">
          <source>Ignores the sorting of import declaration statements.</source>
          <target state="translated">Игнорирует сортировку деклараций на импорт.</target>
        </trans-unit>
        <trans-unit id="fc6c2032aae29f2bf4cdf1ecb565f44e6c98df5a" translate="yes" xml:space="preserve">
          <source>Ignoring Files and Directories</source>
          <target state="translated">Игнорирование файлов и директорий</target>
        </trans-unit>
        <trans-unit id="87a5b84b90eaf9c6a4ea4cf7776f8cdbe987e92e" translate="yes" xml:space="preserve">
          <source>Ignoring files</source>
          <target state="translated">Игнорирование файлов</target>
        </trans-unit>
        <trans-unit id="c58183c9a7f3073a5d043430bb488897214cfb72" translate="yes" xml:space="preserve">
          <source>Ignoring files from linting</source>
          <target state="translated">Игнорирование файлов из подшивки</target>
        </trans-unit>
        <trans-unit id="1c756c5607fbc3a3e749301ea2e32381c2238f06" translate="yes" xml:space="preserve">
          <source>Immediately-Invoked Function Expression (IIFE)</source>
          <target state="translated">Немедленно вызываемая функциональная экспрессия (IIFE)</target>
        </trans-unit>
        <trans-unit id="8670c08fed9affa1bdffc5de7ab5b3464ea35b75" translate="yes" xml:space="preserve">
          <source>Immediately-invoked functions should surround the entire function call with parentheses.</source>
          <target state="translated">Функции с немедленным вызовом должны окружать весь вызов функции круглыми скобками.</target>
        </trans-unit>
        <trans-unit id="04ab9b79c8691d1b53dc55cdbba436a62027f12a" translate="yes" xml:space="preserve">
          <source>Implementation is Your Responsibility</source>
          <target state="translated">Реализация-Ваша ответственность</target>
        </trans-unit>
        <trans-unit id="1de41e87576d1cd7f3d74b3b5efff943cda9a84d" translate="yes" xml:space="preserve">
          <source>Import Sorting (sort-imports)</source>
          <target state="translated">Импорт Сортировка (сортировка-импорт)</target>
        </trans-unit>
        <trans-unit id="e0559377cfba6b8aed12863122b1b2dcc118cb64" translate="yes" xml:space="preserve">
          <source>ImportDeclaration</source>
          <target state="translated">ImportDeclaration</target>
        </trans-unit>
        <trans-unit id="e23adeb5c008391316e0c7840edb5f056d234e51" translate="yes" xml:space="preserve">
          <source>ImportDeclaration and ExportDeclaration</source>
          <target state="translated">ИмпортДекларация и ЭкспортДекларация</target>
        </trans-unit>
        <trans-unit id="512f7b91ec0d8627411f038f8a785a9f4f839ad5" translate="yes" xml:space="preserve">
          <source>Imports are an ES6/ES2015 standard for making the functionality of other modules available in your current module. In CommonJS this is implemented through the &lt;code&gt;require()&lt;/code&gt; call which makes this ESLint rule roughly equivalent to its CommonJS counterpart &lt;code&gt;no-restricted-modules&lt;/code&gt;.</source>
          <target state="translated">Импорт - это стандарт ES6 / ES2015, позволяющий сделать функциональные возможности других модулей доступными в вашем текущем модуле. В CommonJS это реализовано с помощью вызова &lt;code&gt;require()&lt;/code&gt; который делает это правило ESLint примерно эквивалентным его аналогу &lt;code&gt;no-restricted-modules&lt;/code&gt; в CommonJS .</target>
        </trans-unit>
        <trans-unit id="18df2daa90a7f6f769b0f156d9d53dd73803f193" translate="yes" xml:space="preserve">
          <source>In 0.x, the &lt;code&gt;cli&lt;/code&gt; object was exported for use by external tools. It was later deprecated in favor of &lt;code&gt;CLIEngine&lt;/code&gt;. In v1.0.0, we are no longer exporting &lt;code&gt;cli&lt;/code&gt; as it should not be used by external tools. This will break existing tools that make use of it.</source>
          <target state="translated">В 0.x объект &lt;code&gt;cli&lt;/code&gt; был экспортирован для использования внешними инструментами. Позже он был &lt;code&gt;CLIEngine&lt;/code&gt; . В версии 1.0.0 мы больше не экспортируем &lt;code&gt;cli&lt;/code&gt; , поскольку он не должен использоваться внешними инструментами. Это сломает существующие инструменты, которые его используют.</target>
        </trans-unit>
        <trans-unit id="5898b7f28a0e71c9b161ddb4ca225bd973b5e97c" translate="yes" xml:space="preserve">
          <source>In 2.0.0, &lt;code&gt;window&lt;/code&gt; is no longer located in &lt;code&gt;Scope#through&lt;/code&gt; because we have added back the correct declaration. That means you can reference the &lt;code&gt;window&lt;/code&gt; object (or any other global object) directly. So the previous example would change to this:</source>
          <target state="translated">В 2.0.0 &lt;code&gt;window&lt;/code&gt; больше не находится в &lt;code&gt;Scope#through&lt;/code&gt; потому что мы добавили правильное объявление. Это означает, что вы можете напрямую ссылаться на объект &lt;code&gt;window&lt;/code&gt; (или любой другой глобальный объект). Таким образом, предыдущий пример изменился бы на это:</target>
        </trans-unit>
        <trans-unit id="05d96a1c4cc6fce528d734e47e75612567aa64df" translate="yes" xml:space="preserve">
          <source>In 2.0.0, the following 11 rules were added to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;.</source>
          <target state="translated">В 2.0.0 следующие 11 правил были добавлены в &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c17a66e49943e18d906b5c12b9a5610dc4ab2300" translate="yes" xml:space="preserve">
          <source>In 3.0.0, the following rules were added to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;:</source>
          <target state="translated">В версии 3.0.0 в &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; были добавлены следующие правила :</target>
        </trans-unit>
        <trans-unit id="d9538a421f15d2f2ded0595be1de71484d2215ae" translate="yes" xml:space="preserve">
          <source>In 3.x, there was a bug where references to scoped NPM packages as plugins in config files could omit the scope. For example, in 3.x the following config was legal:</source>
          <target state="translated">В 3.x была ошибка,в которой ссылки на scoped NPM-пакеты в качестве подключаемых модулей в конфигурационных файлах могли опускать границы видимости.Например,в 3.x следующая конфигурация была легальной:</target>
        </trans-unit>
        <trans-unit id="4a1986599cc9b6d638b666c0d5c5c84604abcd28" translate="yes" xml:space="preserve">
          <source>In 4.0, shebang comments are treated as comment tokens of type &lt;code&gt;Shebang&lt;/code&gt; and will be returned by any &lt;code&gt;SourceCode&lt;/code&gt; method that returns comments. The goal of this change is to make working with shebang comments more consistent with how other tokens are handled.</source>
          <target state="translated">В 4.0 комментарии shebang обрабатываются как маркеры комментариев типа &lt;code&gt;Shebang&lt;/code&gt; и будут возвращены любым методом &lt;code&gt;SourceCode&lt;/code&gt; , который возвращает комментарии. Цель этого изменения - сделать работу с комментариями shebang более согласованной с тем, как обрабатываются другие токены.</target>
        </trans-unit>
        <trans-unit id="16bc04c506c5ab833d227d4d6e4907ae0bdb1f50" translate="yes" xml:space="preserve">
          <source>In 4.0, we have moved away from the concept of comment attachment and have moved all comment handling logic into ESLint itself. This should make it easier to develop custom parsers, but it also means that AST nodes will no longer have &lt;code&gt;leadingComments&lt;/code&gt; and &lt;code&gt;trailingComments&lt;/code&gt; properties. Conceptually, rule authors can now think of comments in the context of tokens rather than AST nodes.</source>
          <target state="translated">В 4.0 мы отошли от концепции прикрепления комментариев и переместили всю логику обработки комментариев в сам ESLint. Это должно упростить разработку пользовательских анализаторов, но это также означает, что узлы AST больше не будут иметь свойства &lt;code&gt;leadingComments&lt;/code&gt; и &lt;code&gt;trailingComments&lt;/code&gt; . По сути, авторы правил теперь могут рассматривать комментарии в контексте токенов, а не узлов AST.</target>
        </trans-unit>
        <trans-unit id="00f714d17f0050b761984997f366964ef0c19b70" translate="yes" xml:space="preserve">
          <source>In 4.0.0, the &lt;code&gt;indent&lt;/code&gt; rule has been rewritten. The new version of the rule will report some indentation errors that the old version of the rule did not catch. Additionally, the indentation of &lt;code&gt;MemberExpression&lt;/code&gt; nodes, function parameters, and function arguments will now be checked by default (it was previously ignored by default for backwards compatibility).</source>
          <target state="translated">В 4.0.0 было переписано правило &lt;code&gt;indent&lt;/code&gt; . Новая версия правила сообщит о некоторых ошибках отступа, которые не были обнаружены в старой версии правила. Кроме того, отступ узлов &lt;code&gt;MemberExpression&lt;/code&gt; , параметров функции и аргументов функции теперь будет проверяться по умолчанию (ранее он игнорировался по умолчанию для обратной совместимости).</target>
        </trans-unit>
        <trans-unit id="520e73186dae0d7b16f745db5f763187ed794910" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;ECMAScript&lt;/strong&gt; modules, which always have strict mode semantics, the directives are unnecessary.</source>
          <target state="translated">В модулях &lt;strong&gt;ECMAScript&lt;/strong&gt; , которые всегда имеют семантику строгого режима, директивы не нужны.</target>
        </trans-unit>
        <trans-unit id="65d11792aba2f3af0b5566f3cb910f10a5d5d222" translate="yes" xml:space="preserve">
          <source>In April 2016, we &lt;a href=&quot;https://eslint.org/blog/2016/04/welcoming-jscs-to-eslint&quot;&gt;announced&lt;/a&gt; that the JSCS project was shutting down and the JSCS team would be joining the ESLint team. This guide is intended to help those who are using JSCS to migrate their settings and projects to use ESLint. We've tried to automate as much of the conversion as possible, but there are some manual changes that are needed.</source>
          <target state="translated">В апреле 2016 года мы &lt;a href=&quot;https://eslint.org/blog/2016/04/welcoming-jscs-to-eslint&quot;&gt;объявили,&lt;/a&gt; что проект JSCS закрывается, и команда JSCS присоединится к команде ESLint. Это руководство предназначено для того, чтобы помочь тем, кто использует JSCS, перенести свои настройки и проекты на использование ESLint. Мы постарались максимально автоматизировать преобразование, но необходимо внести некоторые изменения вручную.</target>
        </trans-unit>
        <trans-unit id="b23708a1c68d550b884d817586351e04c0ec1e6b" translate="yes" xml:space="preserve">
          <source>In ECMAScript 5.1, &lt;code&gt;Object.create&lt;/code&gt; was added, which enables the creation of objects with a specified &lt;code&gt;[[Prototype]]&lt;/code&gt;. &lt;code&gt;Object.create(null)&lt;/code&gt; is a common pattern used to create objects that will be used as a Map. This can lead to errors when it is assumed that objects will have properties from &lt;code&gt;Object.prototype&lt;/code&gt;. This rule prevents calling some &lt;code&gt;Object.prototype&lt;/code&gt; methods directly from an object.</source>
          <target state="translated">В ECMAScript 5.1 был добавлен &lt;code&gt;Object.create&lt;/code&gt; , который позволяет создавать объекты с указанным &lt;code&gt;[[Prototype]]&lt;/code&gt; . &lt;code&gt;Object.create(null)&lt;/code&gt; - это общий шаблон, используемый для создания объектов, которые будут использоваться в качестве карты. Это может привести к ошибкам, если предполагается, что объекты будут иметь свойства из &lt;code&gt;Object.prototype&lt;/code&gt; . Это правило предотвращает вызов некоторых методов &lt;code&gt;Object.prototype&lt;/code&gt; непосредственно из объекта.</target>
        </trans-unit>
        <trans-unit id="425012cd9483a50d08725272bb44280b01fa5c2b" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about &lt;code&gt;Function.prototype.apply()&lt;/code&gt; callings, you can safely disable this rule.</source>
          <target state="translated">В ES2015 (ES6) или более поздних версиях, если вы не хотите получать уведомления о вызовах &lt;code&gt;Function.prototype.apply()&lt;/code&gt; , вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="7288feb7f3cbe9e2c5aa84dc1b8995f09043f354" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about &lt;code&gt;arguments&lt;/code&gt; variables, then it's safe to disable this rule.</source>
          <target state="translated">В ES2015 (ES6) или более поздних версиях, если вы не хотите получать уведомления о переменных &lt;code&gt;arguments&lt;/code&gt; , можно безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="c6e27cc5398617c234e14f6fdd9c136c292789aa" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about duplicate names in class members, you can safely disable this rule.</source>
          <target state="translated">В ES2015 (ES6)или более поздней версии,если вы не хотите,чтобы вас уведомляли о дублирующих именах в членах класса,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="1b0ab634b81ee05b23f8702255df744fed8eb12f" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about places where Reflect could be used, you can safely disable this rule.</source>
          <target state="translated">В ES2015 (ES6)или более поздней версии,если вы не хотите получать уведомления о местах,где может использоваться Reflect,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="d2eb7a2147b19e9a68b53dd99798118a281e8775" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6) or later, if you don't want to be notified about string concatenation, you can safely disable this rule.</source>
          <target state="translated">В ES2015 (ES6)или более поздней версии,если вы не хотите получать уведомления о конкатеннации строк,вы можете безопасно отключить это правило.</target>
        </trans-unit>
        <trans-unit id="79284304dcf5a3c4453db8bcc5a3d21330ba7616" translate="yes" xml:space="preserve">
          <source>In ES2015 (ES6), we can use template literals instead of string concatenation.</source>
          <target state="translated">В ES2015 (ES6)мы можем использовать шаблонные литералы вместо конкатенирования строк.</target>
        </trans-unit>
        <trans-unit id="c45a211d3e50a5f07def68689fe81ce6f3396159" translate="yes" xml:space="preserve">
          <source>In ES2015, one can use spread syntax to call variadic functions.</source>
          <target state="translated">В ES2015 можно использовать синтаксис спреда для вызова вариадических функций.</target>
        </trans-unit>
        <trans-unit id="76009c166d3d239347600943770e4ce17bd2a6bd" translate="yes" xml:space="preserve">
          <source>In ES6+ environments that allow the use of function expressions when describing callbacks or function arguments.</source>
          <target state="translated">В ES6+окружениях,которые позволяют использовать выражения функций при описании обратных вызовов или аргументов функций.</target>
        </trans-unit>
        <trans-unit id="d6e9567bb6bc4821161b78d2c46b2c8ee02a2b83" translate="yes" xml:space="preserve">
          <source>In ES6, block-level bindings (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;) introduce a &quot;temporal dead zone&quot; where a &lt;code&gt;ReferenceError&lt;/code&gt; will be thrown with any attempt to access the variable before its declaration.</source>
          <target state="translated">В ES6 привязки на уровне блоков ( &lt;code&gt;let&lt;/code&gt; и &lt;code&gt;const&lt;/code&gt; ) создают &amp;laquo;временную мертвую зону&amp;raquo;, в которой при любой попытке доступа к переменной перед ее объявлением будет выдано исключение &lt;code&gt;ReferenceError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c283b77541c32dd8ff6097bc78fb8ab4c5daff4" translate="yes" xml:space="preserve">
          <source>In ES6, code blocks may create a new scope if a block-level binding (&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;), a class declaration or a function declaration (in strict mode) are present. A block is not considered redundant in these cases.</source>
          <target state="translated">В ES6 блоки кода могут создавать новую область видимости, если присутствует привязка на уровне блока ( &lt;code&gt;let&lt;/code&gt; и &lt;code&gt;const&lt;/code&gt; ), объявление класса или объявление функции (в строгом режиме). В этих случаях блок не считается избыточным.</target>
        </trans-unit>
        <trans-unit id="e5f75e3e4423421f164920649e64e4ef38d574fa" translate="yes" xml:space="preserve">
          <source>In ESLint v5, an unsuccessful linting run due to a fatal error will result in an exit code of 2, rather than 1.</source>
          <target state="translated">В ESLint v5 при неудачном прогоне по причине фатальной ошибки код выхода будет равен 2,а не 1.</target>
        </trans-unit>
        <trans-unit id="eea08ca030095038bf25a737549a277fbe3aba08" translate="yes" xml:space="preserve">
          <source>In ESLint v5, reporting a problem without providing a message always results in an error.</source>
          <target state="translated">В ESLint v5 сообщение о проблеме без сообщения всегда приводит к ошибке.</target>
        </trans-unit>
        <trans-unit id="14faa4b6b34ee8eda4c12e45811ba40e9496a537" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the &lt;code&gt;context.getScope()&lt;/code&gt; method has the same behavior regardless of &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; and returns the proper scope. See &lt;a href=&quot;../developer-guide/working-with-rules#contextgetscope&quot;&gt;the documentation&lt;/a&gt; for more details on which scopes are returned.</source>
          <target state="translated">В ESLint v5 метод &lt;code&gt;context.getScope()&lt;/code&gt; ведет себя одинаково независимо от &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; и возвращает правильную область видимости. См. &lt;a href=&quot;../developer-guide/working-with-rules#contextgetscope&quot;&gt;Документацию&lt;/a&gt; для получения более подробной информации о том, какие области возвращаются.</target>
        </trans-unit>
        <trans-unit id="bb1ef5c27afbdde2e7a8e173d72c21f7e3ae1a66" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the &lt;code&gt;parent&lt;/code&gt; property is set on all AST nodes before any rules have access to the AST. This makes it easier to write some rules, because the &lt;code&gt;parent&lt;/code&gt; property is always available rather than being mutated behind the scenes. However, as a side-effect of having &lt;code&gt;parent&lt;/code&gt; properties, the AST object has a circular structure the first time a rule sees it (previously, it only had a circular structure after the first rule listeners were called). As a result, a custom rule that enumerates all properties of a node in order to traverse the AST might now loop forever or run out of memory if it does not check for cycles properly.</source>
          <target state="translated">В ESLint v5 свойство &lt;code&gt;parent&lt;/code&gt; устанавливается на всех узлах AST до того, как какие-либо правила получат доступ к AST. Это упрощает написание некоторых правил, потому что свойство &lt;code&gt;parent&lt;/code&gt; всегда доступно, а не изменяется за кулисами. Однако в качестве побочного эффекта наличия &lt;code&gt;parent&lt;/code&gt; свойств объект AST имеет круговую структуру, когда правило видит его в первый раз (ранее он имел круговую структуру только после того, как были вызваны первые прослушиватели правила). В результате настраиваемое правило, которое перечисляет все свойства узла для обхода AST, теперь может зацикливаться бесконечно или исчерпать память, если оно не проверяет циклы должным образом.</target>
        </trans-unit>
        <trans-unit id="02e6562154408a0cd95ff399370b02dae59011b9" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the default parser will now always give the &lt;code&gt;...data&lt;/code&gt; AST node the &lt;code&gt;RestElement&lt;/code&gt; type, even if the (now deprecated) &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt;&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt;&lt;/a&gt; option is enabled. This makes the AST compliant with the current ESTree spec.</source>
          <target state="translated">В ESLint v5 синтаксический анализатор по умолчанию теперь всегда будет &lt;code&gt;RestElement&lt;/code&gt; узлу AST &lt;code&gt;...data&lt;/code&gt; тип RestElement , даже если включена (теперь не рекомендуется) опция &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; &lt;/a&gt; . Это делает AST совместимым с текущей спецификацией ESTree.</target>
        </trans-unit>
        <trans-unit id="31a881cb748835a072bf8830b1288b7196f3ecf5" translate="yes" xml:space="preserve">
          <source>In ESLint v5, the default parser will now always give the &lt;code&gt;...data&lt;/code&gt; AST node the &lt;code&gt;SpreadElement&lt;/code&gt; type, even if the (now deprecated) &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt;&lt;code&gt;experimentalObjectRestSpread&lt;/code&gt;&lt;/a&gt; option is enabled. This makes the AST compliant with the current ESTree spec.</source>
          <target state="translated">В ESLint v5 синтаксический анализатор по умолчанию теперь всегда будет давать узлу AST &lt;code&gt;...data&lt;/code&gt; тип &lt;code&gt;SpreadElement&lt;/code&gt; , даже если включена (теперь устарел) опция &lt;a href=&quot;#experimental-object-rest-spread&quot;&gt; &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; &lt;/a&gt; . Это делает AST совместимым с текущей спецификацией ESTree.</target>
        </trans-unit>
        <trans-unit id="d4431524bfd5c4f07af8235581cb94fca4ff8732" translate="yes" xml:space="preserve">
          <source>In ESLint v6, &lt;code&gt;Linter&lt;/code&gt; will no longer perform any filesystem operations, including loading parsers.</source>
          <target state="translated">В ESLint v6 &lt;code&gt;Linter&lt;/code&gt; больше не будет выполнять какие-либо операции с файловой системой, включая загрузку парсеров.</target>
        </trans-unit>
        <trans-unit id="bf67a660608cd3e1668cf8ebedf7ff745592d095" translate="yes" xml:space="preserve">
          <source>In ESLint v6.0.0, a parent config always has precedence over extended configs, even with &lt;code&gt;overrides&lt;/code&gt; blocks.</source>
          <target state="translated">В ESLint v6.0.0 родительская конфигурация всегда имеет приоритет над расширенными конфигурациями, даже с блоками &lt;code&gt;overrides&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8abbd9afcc5de245675ea3f2aa4947437c8ef25" translate="yes" xml:space="preserve">
          <source>In ESLint, there's a similar option when you use &lt;code&gt;--init&lt;/code&gt;. Just select &quot;Inspect your JavaScript file(s)&quot;:</source>
          <target state="translated">В ESLint есть аналогичный параметр при использовании &lt;code&gt;--init&lt;/code&gt; . Просто выберите &amp;laquo;Проверить файлы JavaScript&amp;raquo;:</target>
        </trans-unit>
        <trans-unit id="5b59c31296d60785bf4dae3841ef03bc4bd1dfda" translate="yes" xml:space="preserve">
          <source>In ESLint, you can also pipe in code, but you need to use the &lt;code&gt;--stdin&lt;/code&gt; flag:</source>
          <target state="translated">В ESLint вы также можете передавать код по конвейеру, но вам нужно использовать флаг &lt;code&gt;--stdin&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="acd5139582c073618b8ef6f0a7ca63779857d618" translate="yes" xml:space="preserve">
          <source>In IE 8 and earlier, the catch clause parameter can overwrite the value of a variable in the outer scope, if that variable has the same name as the catch clause parameter.</source>
          <target state="translated">В IE 8 и более ранних версиях параметр условия catch может перезаписать значение переменной во внешней области видимости,если эта переменная имеет то же имя,что и параметр условия catch.</target>
        </trans-unit>
        <trans-unit id="e9f2bf62772b7688443d6c6dfb6b1cf5a7da0701" translate="yes" xml:space="preserve">
          <source>In JS, &lt;code&gt;Number&lt;/code&gt;s are stored as double-precision floating-point numbers according to the &lt;a href=&quot;https://en.wikipedia.org/wiki/IEEE_754&quot;&gt;IEEE 754 standard&lt;/a&gt;. Because of this, numbers can only retain accuracy up to a certain amount of digits. If the programmer enters additional digits, those digits will be lost in the conversion to the &lt;code&gt;Number&lt;/code&gt; type and will result in unexpected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adf1aee416a521238a7c811bd9bd2ecf5e14167" translate="yes" xml:space="preserve">
          <source>In JSCS, you can pipe code in like this:</source>
          <target state="translated">В АОЗС можно ввести код трубы вот так:</target>
        </trans-unit>
        <trans-unit id="3703d4c15bc56ac828c52126bdc5c7540593b23a" translate="yes" xml:space="preserve">
          <source>In JSON:</source>
          <target state="translated">В JSON:</target>
        </trans-unit>
        <trans-unit id="3ef5bc7ee14cf7d135eaf49bd22292f5148572ee" translate="yes" xml:space="preserve">
          <source>In JavaScript regular expressions, it's syntactically valid to define a backreference to a group that belongs to another alternative part of the pattern, a backreference to a group that appears after the backreference, a backreference to a group that contains that backreference, or a backreference to a group that is inside a negative lookaround. However, by the specification, in any of these cases the backreference always ends up matching only zero-length (the empty string), regardless of the context in which the backreference and the group appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82e67122ca4aaac99057c3557502dcfc9509e84" translate="yes" xml:space="preserve">
          <source>In JavaScript that is designed to be executed in the browser, it's considered a best practice to avoid using methods on &lt;code&gt;console&lt;/code&gt;. Such messages are considered to be for debugging purposes and therefore not suitable to ship to the client. In general, calls using &lt;code&gt;console&lt;/code&gt; should be stripped before being pushed to production.</source>
          <target state="translated">В JavaScript, который предназначен для выполнения в браузере, рекомендуется избегать использования методов на &lt;code&gt;console&lt;/code&gt; . Такие сообщения считаются предназначенными для целей отладки и поэтому не подходят для отправки клиенту. В общем, вызовы с использованием &lt;code&gt;console&lt;/code&gt; должны быть удалены перед отправкой в ​​производство.</target>
        </trans-unit>
        <trans-unit id="e26a4ff80b5f3f66c04e4918b45e8756a1c26153" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;code&gt;NaN&lt;/code&gt; is a special value of the &lt;code&gt;Number&lt;/code&gt; type. It's used to represent any of the &quot;not-a-number&quot; values represented by the double-precision 64-bit format as specified by the IEEE Standard for Binary Floating-Point Arithmetic.</source>
          <target state="translated">В JavaScript &lt;code&gt;NaN&lt;/code&gt; - это специальное значение типа &lt;code&gt;Number&lt;/code&gt; . Он используется для представления любых &amp;laquo;нечисловых&amp;raquo; значений, представленных в 64-битном формате с двойной точностью, как указано в стандарте IEEE для двоичной арифметики с плавающей запятой.</target>
        </trans-unit>
        <trans-unit id="9bd2fc151901451626280161ac11b4b93b4b50fd" translate="yes" xml:space="preserve">
          <source>In JavaScript, a variable that is declared and not initialized to any value automatically gets the value of &lt;code&gt;undefined&lt;/code&gt;. For example:</source>
          <target state="translated">В JavaScript переменная, которая объявлена ​​и не инициализирована каким-либо значением, автоматически получает значение &lt;code&gt;undefined&lt;/code&gt; . Например:</target>
        </trans-unit>
        <trans-unit id="b60aba9b6eda269c9c92c576d2d7b17436dc1a04" translate="yes" xml:space="preserve">
          <source>In JavaScript, it's possible to redeclare the same variable name using &lt;code&gt;var&lt;/code&gt;. This can lead to confusion as to where the variable is actually declared and initialized.</source>
          <target state="translated">В JavaScript можно повторно объявить то же имя переменной с помощью &lt;code&gt;var&lt;/code&gt; . Это может привести к путанице относительно того, где фактически объявлена ​​и инициализирована переменная.</target>
        </trans-unit>
        <trans-unit id="ae3ae9da35b031e6fe272d750d08d43b247a9241" translate="yes" xml:space="preserve">
          <source>In JavaScript, one can access properties using the dot notation (&lt;code&gt;foo.bar&lt;/code&gt;) or square-bracket notation (&lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt;). However, the dot notation is often preferred because it is easier to read, less verbose, and works better with aggressive JavaScript minimizers.</source>
          <target state="translated">В JavaScript можно получить доступ к свойствам, используя точечную нотацию ( &lt;code&gt;foo.bar&lt;/code&gt; ) или запись в квадратных скобках ( &lt;code&gt;foo[&quot;bar&quot;]&lt;/code&gt; ). Однако точечная нотация часто предпочтительнее, поскольку ее легче читать, она менее многословна и лучше работает с агрессивными минимизаторами JavaScript.</target>
        </trans-unit>
        <trans-unit id="79c19c72e76be7de1e81564fdd907fa54ae18eb9" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, a function declaration is only allowed in the first level of a program or the body of another function, though parsers sometimes &lt;a href=&quot;https://code.google.com/p/esprima/issues/detail?id=422&quot;&gt;erroneously accept them elsewhere&lt;/a&gt;. This only applies to function declarations; named or anonymous function expressions can occur anywhere an expression is permitted.</source>
          <target state="translated">В JavaScript до ES6 объявление функции разрешено только на первом уровне программы или в теле другой функции, хотя парсеры иногда &lt;a href=&quot;https://code.google.com/p/esprima/issues/detail?id=422&quot;&gt;ошибочно принимают их в другом месте&lt;/a&gt; . Это применимо только к объявлениям функций; именованные или анонимные функциональные выражения могут встречаться везде, где разрешено выражение.</target>
        </trans-unit>
        <trans-unit id="803af5f5d14791d201ae8d61d435f1c64184268e" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, standalone code blocks delimited by curly braces do not create a new scope and have no use. For example, these curly braces do nothing to &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">В JavaScript до ES6 отдельные блоки кода, разделенные фигурными скобками, не создают новую область видимости и не используются. Например, эти фигурные скобки ничего не делают с &lt;code&gt;foo&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c8e0cb0f20079a63c0ebee7c35d2763450e0da3b" translate="yes" xml:space="preserve">
          <source>In JavaScript, prior to ES6, variable and function declarations are hoisted to the top of a scope, so it's possible to use identifiers before their formal declarations in code. This can be confusing and some believe it is best to always declare variables and functions before using them.</source>
          <target state="translated">В JavaScript до ES6 декларации переменных и функций поднимаются в верхнюю часть области видимости,поэтому в коде можно использовать идентификаторы перед их формальными декларациями.Это может ввести в заблуждение,и некоторые считают,что лучше всегда объявлять переменные и функции перед их использованием.</target>
        </trans-unit>
        <trans-unit id="1823798885782ba7322754df0cb99b7b3ed765ea" translate="yes" xml:space="preserve">
          <source>In JavaScript, returning a value in the constructor of a class may be a mistake. Forbidding this pattern prevents mistakes resulting from unfamiliarity with the language or a copy-paste error.</source>
          <target state="translated">В JavaScript возврат значения в конструкторе класса может быть ошибкой.Форбация этого паттерна предотвращает ошибки,возникающие из-за незнания языка или ошибки копирования-вставки.</target>
        </trans-unit>
        <trans-unit id="d5dbdb528c78d6964e655c920b5562c6ac7357b6" translate="yes" xml:space="preserve">
          <source>In JavaScript, there are a lot of different ways to convert value types. Some of them might be hard to read and understand.</source>
          <target state="translated">В JavaScript существует множество различных способов преобразования типов значений.Некоторые из них могут быть трудны для чтения и понимания.</target>
        </trans-unit>
        <trans-unit id="5f85fcb870ec98a4b8e042f1f4f7d1ee7d391150" translate="yes" xml:space="preserve">
          <source>In JavaScript, variables can be assigned during declaration, or at any point afterwards using an assignment statement. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; is initialized during declaration, while &lt;code&gt;bar&lt;/code&gt; is initialized later.</source>
          <target state="translated">В JavaScript переменные могут быть присвоены во время объявления или в любой момент после этого с помощью оператора присваивания. Например, в следующем коде &lt;code&gt;foo&lt;/code&gt; инициализируется во время объявления, а &lt;code&gt;bar&lt;/code&gt; инициализируется позже.</target>
        </trans-unit>
        <trans-unit id="f2431e0c54f3ccddb9b8b55c40ef110d03001a01" translate="yes" xml:space="preserve">
          <source>In JavaScript, you can extend any object, including builtin or &quot;native&quot; objects. Sometimes people change the behavior of these native objects in ways that break the assumptions made about them in other parts of the code.</source>
          <target state="translated">В JavaScript можно расширять любой объект,включая встроенные или &quot;родные&quot; объекты.Иногда люди меняют поведение этих &quot;родных&quot; объектов таким образом,что нарушают предположения,сделанные о них в других частях кода.</target>
        </trans-unit>
        <trans-unit id="5e343893daa54be7d2e9b003885e6efda1094561" translate="yes" xml:space="preserve">
          <source>In Node.js, a common pattern for dealing with asynchronous behavior is called the callback pattern. This pattern expects an &lt;code&gt;Error&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt; as the first argument of the callback. Forgetting to handle these errors can lead to some really strange behavior in your application.</source>
          <target state="translated">В Node.js общий шаблон для работы с асинхронным поведением называется шаблоном обратного вызова. Этот шаблон ожидает объект &lt;code&gt;Error&lt;/code&gt; или &lt;code&gt;null&lt;/code&gt; в качестве первого аргумента обратного вызова. Если вы забудете обработать эти ошибки, это может привести к очень странному поведению вашего приложения.</target>
        </trans-unit>
        <trans-unit id="54e83e14b97a21dfc3164689e39c9953204a0216" translate="yes" xml:space="preserve">
          <source>In Node.js, module dependencies are included using the &lt;code&gt;require()&lt;/code&gt; function, such as:</source>
          <target state="translated">В Node.js зависимости модулей включаются с помощью функции &lt;code&gt;require()&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="eec858697f015c807640f5be285c6675cc7d8cf3" translate="yes" xml:space="preserve">
          <source>In Node.js, most I/O is done through asynchronous methods. However, there are often synchronous versions of the asynchronous methods. For example, &lt;code&gt;fs.exists()&lt;/code&gt; and &lt;code&gt;fs.existsSync()&lt;/code&gt;. In some contexts, using synchronous operations is okay (if, as with ESLint, you are writing a command line utility). However, in other contexts the use of synchronous operations is considered a bad practice that should be avoided. For example, if you are running a high-travel web server on Node.js, you should consider carefully if you want to allow any synchronous operations that could lock up the server.</source>
          <target state="translated">В Node.js большая часть операций ввода-вывода выполняется с помощью асинхронных методов. Однако часто существуют синхронные версии асинхронных методов. Например, &lt;code&gt;fs.exists()&lt;/code&gt; и &lt;code&gt;fs.existsSync()&lt;/code&gt; . В некоторых контекстах можно использовать синхронные операции (если, как в случае с ESLint, вы пишете утилиту командной строки). Однако в других контекстах использование синхронных операций считается плохой практикой, которой следует избегать. Например, если вы запускаете на Node.js веб-сервер с высокой посещаемостью, вам следует внимательно подумать, хотите ли вы разрешить какие-либо синхронные операции, которые могут заблокировать сервер.</target>
        </trans-unit>
        <trans-unit id="8fb05857d9c01ca30417b8554d82f2317ca35e6b" translate="yes" xml:space="preserve">
          <source>In Node.js, the &lt;code&gt;__dirname&lt;/code&gt; and &lt;code&gt;__filename&lt;/code&gt; global variables contain the directory path and the file path of the currently executing script file, respectively. Sometimes, developers try to use these variables to create paths to other files, such as:</source>
          <target state="translated">В Node.js глобальные переменные &lt;code&gt;__dirname&lt;/code&gt; и &lt;code&gt;__filename&lt;/code&gt; содержат путь к каталогу и путь к файлу текущего исполняемого файла сценария соответственно. Иногда разработчики пытаются использовать эти переменные для создания путей к другим файлам, например:</target>
        </trans-unit>
        <trans-unit id="986462bdb57daa520d17d6d171bfef6c12a9e4c1" translate="yes" xml:space="preserve">
          <source>In Node.js, the behavior of the &lt;code&gt;Buffer&lt;/code&gt; constructor is different depending on the type of its argument. Passing an argument from user input to &lt;code&gt;Buffer()&lt;/code&gt; without validating its type can lead to security vulnerabilities such as remote memory disclosure and denial of service. As a result, the &lt;code&gt;Buffer&lt;/code&gt; constructor has been deprecated and should not be used. Use the producer methods &lt;code&gt;Buffer.from&lt;/code&gt;, &lt;code&gt;Buffer.alloc&lt;/code&gt;, and &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; instead.</source>
          <target state="translated">В Node.js поведение конструктора &lt;code&gt;Buffer&lt;/code&gt; зависит от типа его аргумента. Передача аргумента из пользовательского ввода в &lt;code&gt;Buffer()&lt;/code&gt; без проверки его типа может привести к уязвимостям безопасности, таким как удаленное раскрытие памяти и отказ в обслуживании. В результате конструктор &lt;code&gt;Buffer&lt;/code&gt; устарел и не должен использоваться. &lt;code&gt;Buffer.allocUnsafe&lt;/code&gt; этого используйте методы производителя &lt;code&gt;Buffer.from&lt;/code&gt; , &lt;code&gt;Buffer.alloc&lt;/code&gt; и Buffer.allocUnsafe .</target>
        </trans-unit>
        <trans-unit id="01b5e11bafdf37ab445e4c84a4053b58bfebcbed" translate="yes" xml:space="preserve">
          <source>In a codebase that has both strict and non-strict code, either turn this rule off, or &lt;a href=&quot;../user-guide/configuring&quot;&gt;selectively disable it&lt;/a&gt; where necessary. For example, functions referencing &lt;code&gt;arguments.callee&lt;/code&gt; are invalid in strict mode. A &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict&quot;&gt;full list of strict mode differences&lt;/a&gt; is available on MDN.</source>
          <target state="translated">В кодовой базе, которая имеет как строгий, так и нестрогий код, либо отключите это правило, либо &lt;a href=&quot;../user-guide/configuring&quot;&gt;выборочно отключите его,&lt;/a&gt; где это необходимо. Например, функции, ссылающиеся на &lt;code&gt;arguments.callee&lt;/code&gt; , недопустимы в строгом режиме. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode#Differences_from_non-strict_to_strict&quot;&gt;Полный список строгих различий в режиме&lt;/a&gt; доступен на MDN.</target>
        </trans-unit>
        <trans-unit id="10ce8149f3ae92cb0fb6941142cf5493644f910b" translate="yes" xml:space="preserve">
          <source>In a custom rule or plugin, you can omit &lt;code&gt;docs&lt;/code&gt; or include any properties that you need in it.</source>
          <target state="translated">В настраиваемом правиле или плагине вы можете опустить &lt;code&gt;docs&lt;/code&gt; или включить в них любые необходимые вам свойства.</target>
        </trans-unit>
        <trans-unit id="a49ea8f3a6a29ebddbdc670bf994129c67ea4098" translate="yes" xml:space="preserve">
          <source>In a project, certain names may be disallowed from being used as exported names for various reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c9201ea52e4b148492fb5b692b369da55a6f80" translate="yes" xml:space="preserve">
          <source>In addition to any patterns in a &lt;code&gt;.eslintignore&lt;/code&gt; file, ESLint always ignores files in &lt;code&gt;/node_modules/*&lt;/code&gt; and &lt;code&gt;/bower_components/*&lt;/code&gt;.</source>
          <target state="translated">В дополнение к любым шаблонам в файле &lt;code&gt;.eslintignore&lt;/code&gt; , ESLint всегда игнорирует файлы в &lt;code&gt;/node_modules/*&lt;/code&gt; и &lt;code&gt;/bower_components/*&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="861e562011bd8f2e7ae8a4fe68dff4135b99ea8c" translate="yes" xml:space="preserve">
          <source>In addition to any patterns in the &lt;code&gt;.eslintignore&lt;/code&gt; file, ESLint always follows a couple implicit ignore rules even if the &lt;code&gt;--no-ignore&lt;/code&gt; flag is passed. The implicit rules are as follows:</source>
          <target state="translated">Помимо любых шаблонов в файле &lt;code&gt;.eslintignore&lt;/code&gt; , ESLint всегда следует нескольким неявным правилам игнорирования, даже если передан флаг &lt;code&gt;--no-ignore&lt;/code&gt; . Неявные правила заключаются в следующем:</target>
        </trans-unit>
        <trans-unit id="fc12ca84af3f6382d0762d431b9d50690920ac41" translate="yes" xml:space="preserve">
          <source>In addition to non-ES6 environments, existing JavaScript projects that are beginning to introduce ES6 into their codebase may not want to apply this rule if the cost of migrating from &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;let&lt;/code&gt; is too costly.</source>
          <target state="translated">В дополнение к средам, отличным от ES6, существующие проекты JavaScript, которые начинают вводить ES6 в свою кодовую базу, могут не захотеть применять это правило, если стоимость перехода с &lt;code&gt;var&lt;/code&gt; на &lt;code&gt;let&lt;/code&gt; слишком высока.</target>
        </trans-unit>
        <trans-unit id="c1150e19bd11cdc7072eeae11448462abf32644f" translate="yes" xml:space="preserve">
          <source>In addition to the above, there is currently a proposal to add object rest and spread properties to the spec. They can be used as follows:</source>
          <target state="translated">В дополнение к вышесказанному,в настоящее время существует предложение о добавлении объекта rest и распространении свойств в спецификацию.Они могут быть использованы следующим образом:</target>
        </trans-unit>
        <trans-unit id="252f70da347da561455e66862058935add889d81" translate="yes" xml:space="preserve">
          <source>In addition to the properties above, invalid test cases can also have the following properties:</source>
          <target state="translated">В дополнение к вышеперечисленным свойствам,недействительные случаи тестирования могут иметь следующие свойства:</target>
        </trans-unit>
        <trans-unit id="1712f8c3199dccd12aeedb6949eed21b105861f8" translate="yes" xml:space="preserve">
          <source>In case of &lt;code&gt;&quot;always&quot;&lt;/code&gt; option, set an exception to &lt;code&gt;false&lt;/code&gt; to enable it:</source>
          <target state="translated">В случае опции &lt;code&gt;&quot;always&quot;&lt;/code&gt; установите для исключения значение &lt;code&gt;false&lt;/code&gt; , чтобы включить его:</target>
        </trans-unit>
        <trans-unit id="7e2e3e9f152c06b2ea5727f6f3c6e80f43018dd6" translate="yes" xml:space="preserve">
          <source>In case of &lt;code&gt;&quot;never&quot;&lt;/code&gt; option, set an exception to &lt;code&gt;true&lt;/code&gt; to enable it:</source>
          <target state="translated">В случае опции &lt;code&gt;&quot;never&quot;&lt;/code&gt; установите для исключения значение &lt;code&gt;true&lt;/code&gt; , чтобы включить его:</target>
        </trans-unit>
        <trans-unit id="92c16a623230638ab21900e3843f89d1124021ce" translate="yes" xml:space="preserve">
          <source>In conditional statements, it is very easy to mistype a comparison operator (such as &lt;code&gt;==&lt;/code&gt;) as an assignment operator (such as &lt;code&gt;=&lt;/code&gt;). For example:</source>
          <target state="translated">В условных операторах очень легко ошибиться при вводе оператора сравнения (такого как &lt;code&gt;==&lt;/code&gt; ) как оператора присваивания (например, &lt;code&gt;=&lt;/code&gt; ). Например:</target>
        </trans-unit>
        <trans-unit id="1fb410a3ea7892596a7988ae7c901cf7e2882ac6" translate="yes" xml:space="preserve">
          <source>In contexts such as an &lt;code&gt;if&lt;/code&gt; statement's test where the result of the expression will already be coerced to a Boolean, casting to a Boolean via double negation (&lt;code&gt;!!&lt;/code&gt;) or a &lt;code&gt;Boolean&lt;/code&gt; call is unnecessary. For example, these &lt;code&gt;if&lt;/code&gt; statements are equivalent:</source>
          <target state="translated">В таких контекстах, как проверка оператора &lt;code&gt;if&lt;/code&gt; , где результат выражения уже будет приведен к логическому, приведение к логическому типу с помощью двойного отрицания ( &lt;code&gt;!!&lt;/code&gt; ) или &lt;code&gt;Boolean&lt;/code&gt; вызова не требуется . Например, эти операторы &lt;code&gt;if&lt;/code&gt; эквивалентны:</target>
        </trans-unit>
        <trans-unit id="c8599f68059b0b2f8fbd7472705607eace6b16b0" translate="yes" xml:space="preserve">
          <source>In each case, the settings in the configuration file override default settings.</source>
          <target state="translated">В каждом случае настройки в конфигурационном файле переопределяют настройки по умолчанию.</target>
        </trans-unit>
        <trans-unit id="649357e05b50e25c812fc667d0a51838efee7ebc" translate="yes" xml:space="preserve">
          <source>In each of the following examples, the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option is assumed.</source>
          <target state="translated">В каждом из следующих примеров предполагается вариант &lt;code&gt;&quot;always&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9ab58973a1b0451e64158fd130c4275226ff167" translate="yes" xml:space="preserve">
          <source>In environments outside of CommonJS or ECMAScript modules, you may use &lt;code&gt;var&lt;/code&gt; to create a global variable that may be used by other scripts. You can use the &lt;code&gt;/* exported variableName */&lt;/code&gt; comment block to indicate that this variable is being exported and therefore should not be considered unused.</source>
          <target state="translated">В средах за пределами модулей CommonJS или ECMAScript вы можете использовать &lt;code&gt;var&lt;/code&gt; для создания глобальной переменной, которая может использоваться другими скриптами. Вы можете использовать блок комментариев &lt;code&gt;/* exported variableName */&lt;/code&gt; чтобы указать, что эта переменная экспортируется и, следовательно, не должна считаться неиспользованной.</target>
        </trans-unit>
        <trans-unit id="f39532fe56426ff07a71783a151b540911e49b3c" translate="yes" xml:space="preserve">
          <source>In environments that have not yet adopted ES6 language features (ES3/5).</source>
          <target state="translated">В средах,которые еще не приняли функции языка ES6 (ES3/5).</target>
        </trans-unit>
        <trans-unit id="1a2489feba41fd4a92ae4a53d0b6dbcbf4bb794f" translate="yes" xml:space="preserve">
          <source>In general, ESLint core rules must be:</source>
          <target state="translated">В целом,основные правила ESLint должны быть:</target>
        </trans-unit>
        <trans-unit id="730c374622cf98488a7fb84f8403c25862d877fe" translate="yes" xml:space="preserve">
          <source>In general, no comment style is any more or less valid than any others, but many developers would agree that a consistent style can improve a project's maintainability.</source>
          <target state="translated">В целом,ни один стиль комментариев не является более или менее приемлемым,чем любой другой,но многие разработчики согласятся с тем,что последовательный стиль может улучшить удобство сопровождения проекта.</target>
        </trans-unit>
        <trans-unit id="f2dd07b1a4b0ae05f069e2c86041c05b70c13a77" translate="yes" xml:space="preserve">
          <source>In many cases the iterations of a loop are not actually independent of each-other. For example, the output of one iteration might be used as the input to another. Or, loops may be used to retry asynchronous operations that were unsuccessful. Or, loops may be used to prevent your code from sending an excessive amount of requests in parallel. In such cases it makes sense to use &lt;code&gt;await&lt;/code&gt; within a loop and it is recommended to disable the rule via a standard ESLint disable comment.</source>
          <target state="translated">Во многих случаях итерации цикла на самом деле не независимы друг от друга. Например, выходные данные одной итерации могут использоваться в качестве входных данных для другой. Или могут использоваться циклы для повторения неудачных асинхронных операций. Или могут использоваться циклы, чтобы ваш код не отправлял чрезмерное количество запросов параллельно. В таких случаях имеет смысл использовать &lt;code&gt;await&lt;/code&gt; в цикле, и рекомендуется отключить правило с помощью стандартного комментария отключения ESLint.</target>
        </trans-unit>
        <trans-unit id="3e48107c6c8896cdcfc7e1315abb4322178c42a2" translate="yes" xml:space="preserve">
          <source>In many cases, it doesn't matter if you choose to use an identifier instead of a string or vice-versa. Even so, you might decide to enforce a consistent style in your code.</source>
          <target state="translated">Во многих случаях не имеет значения,используете ли Вы идентификатор вместо строки или наоборот.Тем не менее,вы можете принять решение о применении последовательного стиля в вашем коде.</target>
        </trans-unit>
        <trans-unit id="a474ea154ff40cc0c6e94f8cbfb8cf71fd96857f" translate="yes" xml:space="preserve">
          <source>In many cases, the empty object pattern is a mistake where the author intended to use a default value instead, such as:</source>
          <target state="translated">Во многих случаях пустой шаблон объекта является ошибкой,когда автор намеревался использовать вместо него значение по умолчанию,например:</target>
        </trans-unit>
        <trans-unit id="f25b07254468f73077ad50b101b6ec3bb43ecd81" translate="yes" xml:space="preserve">
          <source>In more advanced cases where you really need to use the &lt;code&gt;Function&lt;/code&gt; constructor.</source>
          <target state="translated">В более сложных случаях, когда вам действительно нужно использовать конструктор &lt;code&gt;Function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f1a46503feb2a904ba1391691b0681df116ea85" translate="yes" xml:space="preserve">
          <source>In object literal shorthand methods, spacing before the &lt;code&gt;*&lt;/code&gt; is not checked, as they lack a &lt;code&gt;function&lt;/code&gt; keyword.</source>
          <target state="translated">В сокращенных методах объектных литералов интервал перед &lt;code&gt;*&lt;/code&gt; не проверяется, так как в них отсутствует ключевое слово &lt;code&gt;function&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6138f7780a5a7a61a7849d9987dd52fd48b2c8ed" translate="yes" xml:space="preserve">
          <source>In older version of ESLint, there was no convenient way to indicate why a directive comment &amp;ndash; such as &lt;code&gt;/*eslint-disable*/&lt;/code&gt; &amp;ndash; was necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a619c7a6f45b45f93088c9ff495f0ed8669f1a" translate="yes" xml:space="preserve">
          <source>In order for a rule change to be accepted into ESLint, it must:</source>
          <target state="translated">Для того,чтобы изменение правила было принято в ESLint,оно должно быть принято:</target>
        </trans-unit>
        <trans-unit id="528b4219cc85dfb751a7dfd6e0385ac32c86b7cb" translate="yes" xml:space="preserve">
          <source>In order for a rule to be accepted in the ESLint core, it must:</source>
          <target state="translated">Для того чтобы правило было принято в ядре ESLint,оно должно быть принято:</target>
        </trans-unit>
        <trans-unit id="1076911d7bc31ae6a22b80533fa7746bb73a1110" translate="yes" xml:space="preserve">
          <source>In order to avoid any confusion as to how to create the correct path, Node.js provides the &lt;code&gt;path&lt;/code&gt; module. This module uses system-specific information to always return the correct value. So you can rewrite the previous example as:</source>
          <target state="translated">Чтобы избежать путаницы в том, как создать правильный путь, Node.js предоставляет модуль &lt;code&gt;path&lt;/code&gt; . Этот модуль использует системную информацию, чтобы всегда возвращать правильное значение. Таким образом, вы можете переписать предыдущий пример как:</target>
        </trans-unit>
        <trans-unit id="30dfaba2b526c5b26fe5ba2b4d9ad078d60be29f" translate="yes" xml:space="preserve">
          <source>In order to get the same functionality in ESLint, you would first need to install the &lt;code&gt;eslint-config-airbnb&lt;/code&gt; shareable config package:</source>
          <target state="translated">Чтобы получить ту же функциональность в ESLint, вам сначала необходимо установить &lt;code&gt;eslint-config-airbnb&lt;/code&gt; конфигурационный пакет eslint-config-airbnb :</target>
        </trans-unit>
        <trans-unit id="da327dc7b8895d9c2a799fa276a2c344a1fa9ef6" translate="yes" xml:space="preserve">
          <source>In order to make your plugin available to the community you have to publish it on npm.</source>
          <target state="translated">Для того,чтобы сделать свой плагин доступным для сообщества,Вы должны опубликовать его в npm.</target>
        </trans-unit>
        <trans-unit id="f53a0ee7361f805bc70b82dd2bf7fd681d44bfa2" translate="yes" xml:space="preserve">
          <source>In order to provide suggestions, use the &lt;code&gt;suggest&lt;/code&gt; key in the report argument with an array of suggestion objects. The suggestion objects represent individual suggestions that could be applied and require either a &lt;code&gt;desc&lt;/code&gt; key string that describes what applying the suggestion would do or a &lt;code&gt;messageId&lt;/code&gt; key (see &lt;a href=&quot;#suggestion-messageids&quot;&gt;below&lt;/a&gt;), and a &lt;code&gt;fix&lt;/code&gt; key that is a function defining the suggestion result. This &lt;code&gt;fix&lt;/code&gt; function follows the same API as regular fixes (described above in &lt;a href=&quot;#applying-fixes&quot;&gt;applying fixes&lt;/a&gt;).</source>
          <target state="translated">Для того , чтобы предоставить предложения, использовать &lt;code&gt;suggest&lt;/code&gt; ключ в докладе спор с массивом объектов внушения. Объекты предложений представляют собой отдельные предложения, которые могут быть применены, и требуют либо строки ключа &lt;code&gt;desc&lt;/code&gt; , описывающей, что будет делать применение предложения, либо ключа &lt;code&gt;messageId&lt;/code&gt; (см. &lt;a href=&quot;#suggestion-messageids&quot;&gt;Ниже&lt;/a&gt; ) и ключа &lt;code&gt;fix&lt;/code&gt; который является функцией, определяющей результат предложения. Эта функция &lt;code&gt;fix&lt;/code&gt; использует тот же API, что и обычные исправления (описанные выше в разделе &amp;laquo; &lt;a href=&quot;#applying-fixes&quot;&gt;Применение исправлений&amp;raquo;&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c914896e68d128ecab267923570754040656a4ad" translate="yes" xml:space="preserve">
          <source>In order to submit code or documentation to an ESLint project, you will need to electronically sign our &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;Contributor License Agreement&lt;/a&gt;. The CLA is you giving us permission to use your contribution.</source>
          <target state="translated">Чтобы отправить код или документацию в проект ESLint, вам необходимо в электронном виде подписать наше &lt;a href=&quot;https://cla.js.foundation/eslint/eslint&quot;&gt;лицензионное соглашение с участником&lt;/a&gt; . CLA дает нам разрешение на использование вашего вклада.</target>
        </trans-unit>
        <trans-unit id="ab1eb2b457b3afd52e3fa40c61b2b91f8e61a0a6" translate="yes" xml:space="preserve">
          <source>In order to use a local file as a custom formatter, you must begin the filename with a dot (such as &lt;code&gt;./my-awesome-formatter.js&lt;/code&gt; or &lt;code&gt;../formatters/my-awesome-formatter.js&lt;/code&gt;).</source>
          <target state="translated">Чтобы использовать локальный файл в качестве настраиваемого средства форматирования, вы должны начинать имя файла с точки (например, &lt;code&gt;./my-awesome-formatter.js&lt;/code&gt; или &lt;code&gt;../formatters/my-awesome-formatter.js&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fe1c5d3210fe6c242e0968d6574611b5ef639ec0" translate="yes" xml:space="preserve">
          <source>In order to work with ESLint as a developer, it's recommended that:</source>
          <target state="translated">Для работы с ESLint как с разработчиком,это рекомендуется:</target>
        </trans-unit>
        <trans-unit id="9ae8b29a221aab7cf63177a1099bc7ff8a91620e" translate="yes" xml:space="preserve">
          <source>In other words, a blank line or a comment line or line with any other statement after an import declaration statement will reset the sorting of import declaration statements.</source>
          <target state="translated">Другими словами,пустая строка или строка комментария или строка с любым другим оператором после оператора импортной декларации сбросит сортировку операторов импортной декларации.</target>
        </trans-unit>
        <trans-unit id="da54d53c92208bf53d5c67c558cd27c2431dde1d" translate="yes" xml:space="preserve">
          <source>In other words, if a property has a getter and a setter, the setter should be defined right after the getter, or vice versa.</source>
          <target state="translated">Другими словами,если свойство имеет геттер и сеттер,то сеттер должен быть определен сразу после геттера,или наоборот.</target>
        </trans-unit>
        <trans-unit id="7bfb1d001512e3bd279cdd5b491a8cafde9ef9eb" translate="yes" xml:space="preserve">
          <source>In other words, it was possible to reference a rule from a scoped plugin (such as &lt;code&gt;foo/some-rule&lt;/code&gt;) without explicitly stating the &lt;code&gt;@my-organization&lt;/code&gt; scope. This was a bug because it could lead to ambiguous rule references if there was also an unscoped plugin called &lt;code&gt;eslint-plugin-foo&lt;/code&gt; loaded at the same time.</source>
          <target state="translated">Другими словами, можно было ссылаться на правило из подключаемого модуля с заданной областью (например, &lt;code&gt;foo/some-rule&lt;/code&gt; ) без явного указания области действия &lt;code&gt;@my-organization&lt;/code&gt; . Это была ошибка, потому что это могло привести к неоднозначным ссылкам на правила, если одновременно был &lt;code&gt;eslint-plugin-foo&lt;/code&gt; с незаданной областью, называемый eslint-plugin-foo .</target>
        </trans-unit>
        <trans-unit id="f0c4307446ae6432fa624bbb4de27850821df533" translate="yes" xml:space="preserve">
          <source>In particular, this rule will disallow a loop with a body that exits the loop in all code paths. If all code paths in the loop's body will end with either a &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt; or a &lt;code&gt;throw&lt;/code&gt; statement, the second iteration of such loop is certainly unreachable, regardless of the loop's condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439c51934e27a2e6593b317294185405f124822b" translate="yes" xml:space="preserve">
          <source>In previous versions, ESLint resolved all plugins from the current working directory by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2469f7b6a21432ad41d271440c98cea16a70b72b" translate="yes" xml:space="preserve">
          <source>In rare cases (if you were relying on the previous behavior where &lt;code&gt;eslint:recommended&lt;/code&gt; disables core rules), you might need to disable additional rules to restore the previous behavior.</source>
          <target state="translated">В редких случаях (если вы полагались на предыдущее поведение, когда &lt;code&gt;eslint:recommended&lt;/code&gt; отключает основные правила), вам может потребоваться отключить дополнительные правила, чтобы восстановить предыдущее поведение.</target>
        </trans-unit>
        <trans-unit id="26ea8e4ced2ccec4c629355b12008ccd6d578d3e" translate="yes" xml:space="preserve">
          <source>In rare cases where only one iteration (or at most one iteration) is intended behavior, the code should be refactored to use &lt;code&gt;if&lt;/code&gt; conditionals instead of &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops. It's considered a best practice to avoid using loop constructs for such cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62940093175d70030e07910796a72fc9b37a5914" translate="yes" xml:space="preserve">
          <source>In rare cases where you really need identical test conditions in the same chain, which necessarily means that the expressions in the chain are causing and relying on side effects, you will have to turn this rule off.</source>
          <target state="translated">В редких случаях,когда вам действительно нужны одинаковые условия тестирования в одной цепи,что обязательно означает,что выражения в цепи вызывают и полагаются на побочные эффекты,вам придется отключить это правило.</target>
        </trans-unit>
        <trans-unit id="79ead7da48164fbb99604c5811336f071bb53e52" translate="yes" xml:space="preserve">
          <source>In some cases fixes aren't appropriate to be automatically applied, for example, if a fix potentially changes functionality or if there are multiple valid ways to fix a rule depending on the implementation intent (see the best practices for &lt;a href=&quot;#applying-fixes&quot;&gt;applying fixes&lt;/a&gt; listed above). In these cases, there is an alternative &lt;code&gt;suggest&lt;/code&gt; option on &lt;code&gt;context.report()&lt;/code&gt; that allows other tools, such as editors, to expose helpers for users to manually apply a suggestion.</source>
          <target state="translated">В некоторых случаях исправления не подходят для автоматического применения, например, если исправление потенциально изменяет функциональность или если существует несколько допустимых способов исправления правила в зависимости от цели реализации (см. Рекомендации по &lt;a href=&quot;#applying-fixes&quot;&gt;применению исправлений,&lt;/a&gt; перечисленные выше). В этих случаях, есть альтернатива &lt;code&gt;suggest&lt;/code&gt; вариант на &lt;code&gt;context.report()&lt;/code&gt; , что позволяет другие инструменты, такие как редактора, разоблачить помощник для пользователей , чтобы вручную применить предложение.</target>
        </trans-unit>
        <trans-unit id="22ed0b0513e44ddddd0487035021c4a4d3ab12ff" translate="yes" xml:space="preserve">
          <source>In some cases, rule schemas can use the &lt;code&gt;default&lt;/code&gt; keyword to automatically specify default values for rule options. However, the &lt;code&gt;default&lt;/code&gt; keyword is only effective in certain schema locations, and is ignored elsewhere, which creates a risk of bugs if a rule incorrectly expects a default value to be provided as a rule option. In ESLint v6.0.0, &lt;code&gt;RuleTester&lt;/code&gt; will raise an error if a rule has an invalid &lt;code&gt;default&lt;/code&gt; keyword in its schema.</source>
          <target state="translated">В некоторых случаях схемы правил могут использовать ключевое слово &lt;code&gt;default&lt;/code&gt; для автоматического определения значений по умолчанию для параметров правила. Однако ключевое слово по &lt;code&gt;default&lt;/code&gt; действует только в определенных местоположениях схемы и игнорируется в других местах, что создает риск ошибок, если правило неправильно ожидает, что значение по умолчанию будет предоставлено в качестве параметра правила. В ESLint v6.0.0 &lt;code&gt;RuleTester&lt;/code&gt; выдаст ошибку, если в схеме правила указано недопустимое ключевое слово по &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="586438146f6109615a34b9a900fa8fbf8761e69b" translate="yes" xml:space="preserve">
          <source>In that case the expected syntax would have been:</source>
          <target state="translated">В этом случае ожидаемый синтаксис был бы:</target>
        </trans-unit>
        <trans-unit id="34e220746b67d0d1a6860ca7f5580ed5292abe0f" translate="yes" xml:space="preserve">
          <source>In the &lt;strong&gt;CommonJS&lt;/strong&gt; module system, a hidden function wraps each module and limits the scope of a &quot;global&quot; strict mode directive.</source>
          <target state="translated">В модульной системе &lt;strong&gt;CommonJS&lt;/strong&gt; скрытая функция обертывает каждый модуль и ограничивает область действия &amp;laquo;глобальной&amp;raquo; директивы строгого режима.</target>
        </trans-unit>
        <trans-unit id="2af7474f5034d2a87e6bb76f217e0214d6566d39" translate="yes" xml:space="preserve">
          <source>In the Node.js community it is often customary to separate initializations with calls to &lt;code&gt;require&lt;/code&gt; modules from other variable declarations, sometimes also grouping them by the type of module. This rule helps you enforce this convention.</source>
          <target state="translated">В сообществе Node.js часто принято отделять инициализацию с вызовами &lt;code&gt;require&lt;/code&gt; модулей от других объявлений переменных, иногда также группируя их по типу модуля. Это правило помогает обеспечить соблюдение этого соглашения.</target>
        </trans-unit>
        <trans-unit id="f25f337dc8aa34dae55d66f05c1bb5c8ed5144c6" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;baz()&lt;/code&gt; can never execute. Obviously, &lt;code&gt;baz()&lt;/code&gt; could be executed only when &lt;code&gt;b&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, but in that case &lt;code&gt;bar()&lt;/code&gt; would be executed instead, since it's earlier in the chain.</source>
          <target state="translated">В приведенном выше примере &lt;code&gt;baz()&lt;/code&gt; никогда не может выполняться. Очевидно, что &lt;code&gt;baz()&lt;/code&gt; может выполняться только тогда, когда &lt;code&gt;b&lt;/code&gt; принимает значение &lt;code&gt;true&lt;/code&gt; , но в этом случае вместо этого будет выполняться &lt;code&gt;bar()&lt;/code&gt; , поскольку он находится раньше в цепочке.</target>
        </trans-unit>
        <trans-unit id="4dc0e08c3b19b46bd79d160c044fb63b2212f50f" translate="yes" xml:space="preserve">
          <source>In the above example, the regular expression literal is easier to read and reason about. Also, it's a common mistake to omit the extra &lt;code&gt;\&lt;/code&gt; in the string literal, which would produce a completely different regular expression:</source>
          <target state="translated">В приведенном выше примере литерал регулярного выражения легче читать и рассуждать. Также распространенной ошибкой является опускание лишнего &lt;code&gt;\&lt;/code&gt; в строковом литерале, что приводит к совершенно другому регулярному выражению:</target>
        </trans-unit>
        <trans-unit id="805fa113fe73a36f3075118dbb4cbf1f7f0e4911" translate="yes" xml:space="preserve">
          <source>In the case of a CommonJS module, if your code is in strict mode or you don't want this rule to warn you about undeclared variables, and you also don't want this rule to warn you about the read-only globals, you can disable this rule.</source>
          <target state="translated">В случае модуля CommonJS,если ваш код находится в строгом режиме или вы не хотите,чтобы это правило предупреждало вас о необъявленных переменных,а также вы не хотите,чтобы это правило предупреждало вас о глобусах,доступных только для чтения,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="2333879fe578127fd545ac29675c84de972fc829" translate="yes" xml:space="preserve">
          <source>In the case of a browser script, if you want to be able to explicitly declare variables and functions in the global scope, and your code is in strict mode or you don't want this rule to warn you about undeclared variables, and you also don't want this rule to warn you about read-only globals, you can disable this rule.</source>
          <target state="translated">В случае со скриптом браузера,если вы хотите иметь возможность явно объявлять переменные и функции в глобальном масштабе,и ваш код находится в строгом режиме,или вы не хотите,чтобы это правило предупреждало вас о необъявленных переменных,а также вы не хотите,чтобы это правило предупреждало вас о глобусах,доступных только для чтения,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="73ff69869ee358fb751b07d6f10bc627b10fdf31" translate="yes" xml:space="preserve">
          <source>In the case of an ES module, if you don't want this rule to warn you about the read-only globals you can disable this rule.</source>
          <target state="translated">В случае модуля ES,если вы не хотите,чтобы это правило предупреждало вас о глобусах,доступных только для чтения,вы можете отключить это правило.</target>
        </trans-unit>
        <trans-unit id="bf0cf62f8e2a7187fa75b64fd67d8b2165c79bd0" translate="yes" xml:space="preserve">
          <source>In the constructor of derived classes, if &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; are used before &lt;code&gt;super()&lt;/code&gt; calls, it raises a reference error.</source>
          <target state="translated">В конструкторе производных классов, если &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; используется до вызова &lt;code&gt;super()&lt;/code&gt; , возникает ошибка ссылки.</target>
        </trans-unit>
        <trans-unit id="3ff70ad8a5f97d1019f5ec2166872e8af868b385" translate="yes" xml:space="preserve">
          <source>In the debate over ASI, there are generally two schools of thought. The first is that we should treat ASI as if it didn't exist and always include semicolons manually. The rationale is that it's easier to always include semicolons than to try to remember when they are or are not required, and thus decreases the possibility of introducing an error.</source>
          <target state="translated">В дебатах по АСИ,как правило,существуют две школы мысли.Первая заключается в том,что мы должны относиться к АСИ так,как будто ее не существует,и всегда включать точку с запятой вручную.Обоснование заключается в том,что легче всегда включать точки с запятой,чем пытаться запомнить,когда они нужны или не нужны,и,таким образом,уменьшается вероятность введения ошибки.</target>
        </trans-unit>
        <trans-unit id="484a62f26f2c619574ceb1e6c457d31625392327" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;sayHi&lt;/code&gt; method doesn't use &lt;code&gt;this&lt;/code&gt;, so we can make it a static method:</source>
          <target state="translated">В приведенном выше &lt;code&gt;sayHi&lt;/code&gt; метод sayHi не использует &lt;code&gt;this&lt;/code&gt; , поэтому мы можем сделать его статическим методом:</target>
        </trans-unit>
        <trans-unit id="c2cd47d59330aa36977aa9998d327bbf8acb99ff" translate="yes" xml:space="preserve">
          <source>In the example configuration above, the top level &quot;before&quot; and &quot;after&quot; options define the default behavior of the rule, while the &quot;anonymous&quot; and &quot;method&quot; options override the default behavior. Overrides can be either an object with &quot;before&quot; and &quot;after&quot;, or a shorthand string as above.</source>
          <target state="translated">В приведенном выше примере конфигурации верхний уровень опций &quot;до&quot; и &quot;после&quot; определяет поведение правила по умолчанию,в то время как опции &quot;анонимный&quot; и &quot;метод&quot; переопределяют поведение по умолчанию.Замена может быть как объектом с опциями &quot;до&quot; и &quot;после&quot;,так и короткой строкой,как описано выше.</target>
        </trans-unit>
        <trans-unit id="97328f04f5b1cf5749587791362446a7fb8f3c20" translate="yes" xml:space="preserve">
          <source>In the exceptions where a newline does &lt;strong&gt;not&lt;/strong&gt; end a statement, a typing mistake to omit a semicolon causes two unrelated consecutive lines to be interpreted as one expression. Especially for a coding style without semicolons, readers might overlook the mistake. Although syntactically correct, the code might throw exceptions when it is executed.</source>
          <target state="translated">В исключениях , где перевод строка никак &lt;strong&gt;не&lt;/strong&gt; заканчивается заявлением, опечатка опустить точку с запятой вызывает два несвязанные последовательные строки должны интерпретироваться как одно выражения. Читатели могут не заметить ошибку, особенно в случае стиля кодирования без точки с запятой. Хотя синтаксически правильный код, при выполнении может вызывать исключения.</target>
        </trans-unit>
        <trans-unit id="6aff87de13f5ffd8d68a4105042048c5b3c19ed4" translate="yes" xml:space="preserve">
          <source>In the following example the &lt;code&gt;module&lt;/code&gt; import on line 1 is repeated on line 3. These can be combined to make the list of imports more succinct.</source>
          <target state="translated">В следующем примере импорт &lt;code&gt;module&lt;/code&gt; в строке 1 повторяется в строке 3. Их можно комбинировать, чтобы сделать список импорта более сжатым.</target>
        </trans-unit>
        <trans-unit id="e223ddd8853ea414a7d8a8c3771424ff2c613622" translate="yes" xml:space="preserve">
          <source>In the initial list of problems, the &lt;code&gt;fix&lt;/code&gt; property will refer to a fix in the processed JavaScript. The &lt;code&gt;postprocess&lt;/code&gt; method should transform the object to refer to a fix in the original, unprocessed file.</source>
          <target state="translated">В исходном списке проблем свойство &lt;code&gt;fix&lt;/code&gt; будет относиться к исправлению в обработанном JavaScript. Метод &lt;code&gt;postprocess&lt;/code&gt; должен преобразовать объект, чтобы он ссылался на исправление в исходном необработанном файле.</target>
        </trans-unit>
        <trans-unit id="cdeeb4e7b1833bacebcb592d32546b7b7787fbed" translate="yes" xml:space="preserve">
          <source>In the initialization or update portions of a &lt;code&gt;for&lt;/code&gt; statement.</source>
          <target state="translated">В частях инициализации или обновления оператора &lt;code&gt;for&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3a3d2790bd2dc958072534cbc721ebee4aafd235" translate="yes" xml:space="preserve">
          <source>In the last example the &lt;code&gt;await&lt;/code&gt; is necessary to be able to catch errors thrown from &lt;code&gt;bar()&lt;/code&gt;.</source>
          <target state="translated">В последнем примере &lt;code&gt;await&lt;/code&gt; необходимо, чтобы иметь возможность перехватывать ошибки, выдаваемые &lt;code&gt;bar()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c8992ad5fc6c79ca648b7546f8d54a92a932529c" translate="yes" xml:space="preserve">
          <source>In the last file, you'll once again see that to properly resolve your config, you'll need include the full package path.</source>
          <target state="translated">В последнем файле,вы еще раз увидите,что для правильного разрешения вашей конфигурации,вам нужно включить полный путь пакета.</target>
        </trans-unit>
        <trans-unit id="06a65141438f1465b9453edef91ccf38f50b2a41" translate="yes" xml:space="preserve">
          <source>In the preceding example, the error level is assumed to be the first argument. It is followed by the first optional argument, a string which may be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. The final optional argument is an object, which may have a Boolean property named &lt;code&gt;exceptRange&lt;/code&gt;.</source>
          <target state="translated">В предыдущем примере предполагается, что уровень ошибки является первым аргументом. За ним следует первый необязательный аргумент, строка, которая может иметь значение &lt;code&gt;&quot;always&quot;&lt;/code&gt; или &lt;code&gt;&quot;never&quot;&lt;/code&gt; . Последний необязательный аргумент - это объект, который может иметь логическое свойство с именем &lt;code&gt;exceptRange&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ae7da0834ca34159e742b20fb358094baed4a0e" translate="yes" xml:space="preserve">
          <source>In the same way, if there is a &lt;code&gt;package.json&lt;/code&gt; file in the root directory with an &lt;code&gt;eslintConfig&lt;/code&gt; field, the configuration it describes will apply to all subdirectories beneath it, but the configuration described by the &lt;code&gt;.eslintrc&lt;/code&gt; file in the tests directory will override it where there are conflicting specifications.</source>
          <target state="translated">Таким же образом, если в корневом каталоге есть файл &lt;code&gt;package.json&lt;/code&gt; с полем &lt;code&gt;eslintConfig&lt;/code&gt; , описанная в нем конфигурация будет применяться ко всем подкаталогам под ним, но конфигурация, описанная файлом &lt;code&gt;.eslintrc&lt;/code&gt; в каталоге тестов, переопределит его. где есть противоречивые спецификации.</target>
        </trans-unit>
        <trans-unit id="d895f26e01a339a58df0b6097b997dc2676f5f9b" translate="yes" xml:space="preserve">
          <source>In these configuration files, the rule &lt;code&gt;plugin1/rule1&lt;/code&gt; comes from the plugin named &lt;code&gt;plugin1&lt;/code&gt;. You can also use this format with configuration comments, such as:</source>
          <target state="translated">В этих файлах конфигурации правило &lt;code&gt;plugin1/rule1&lt;/code&gt; происходит от подключаемого модуля с именем &lt;code&gt;plugin1&lt;/code&gt; . Вы также можете использовать этот формат с комментариями к конфигурации, например:</target>
        </trans-unit>
        <trans-unit id="36d6699bd7eef806ecf2d6c599b776a76340f808" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;doSomething()&lt;/code&gt; is undefined at the time of invocation and so causes a runtime error.</source>
          <target state="translated">В этом случае &lt;code&gt;doSomething()&lt;/code&gt; не определен во время вызова и поэтому вызывает ошибку времени выполнения.</target>
        </trans-unit>
        <trans-unit id="5a85d7db6d4b6df41b744c0747f7ca33c597e8b6" translate="yes" xml:space="preserve">
          <source>In this case, each function created within the loop returns a different number as expected.</source>
          <target state="translated">В этом случае каждая функция,созданная в цикле,возвращает,как и ожидалось,разное число.</target>
        </trans-unit>
        <trans-unit id="356abc620d37a1abfd58a799df08e6a2a04736c0" translate="yes" xml:space="preserve">
          <source>In this case, probably removing &lt;code&gt;OUTER_LOOP:&lt;/code&gt; had been forgotten. Such labels take up space in the code and can lead to confusion by readers.</source>
          <target state="translated">В этом случае, вероятно, было забыто удалить &lt;code&gt;OUTER_LOOP:&lt;/code&gt; . Такие метки занимают место в коде и могут ввести читателей в заблуждение.</target>
        </trans-unit>
        <trans-unit id="c39bb2ffd2c62e6c7064f4d5e0435501709e632d" translate="yes" xml:space="preserve">
          <source>In this case, spacing will be disallowed after a &lt;code&gt;new&lt;/code&gt; operator and required before/after a &lt;code&gt;++&lt;/code&gt; operator.</source>
          <target state="translated">В этом случае интервал будет запрещен после &lt;code&gt;new&lt;/code&gt; оператора и обязателен до / после оператора &lt;code&gt;++&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7d4495221d480b471dcc1896dd624d6c593b570c" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;fail()&lt;/code&gt; function throws an error that is intended to be caught by the &lt;code&gt;catch()&lt;/code&gt; handler assigned later. Converting the &lt;code&gt;fail()&lt;/code&gt; function into a synchronous function would require the call to &lt;code&gt;fail()&lt;/code&gt; to be refactored to use a &lt;code&gt;try-catch&lt;/code&gt; statement instead of a promise.</source>
          <target state="translated">В этом случае функция &lt;code&gt;fail()&lt;/code&gt; выдает ошибку, которая должна быть перехвачена обработчиком &lt;code&gt;catch()&lt;/code&gt; назначенным позже. Преобразование функции &lt;code&gt;fail()&lt;/code&gt; в синхронную функцию потребует рефакторинга вызова &lt;code&gt;fail()&lt;/code&gt; для использования оператора &lt;code&gt;try-catch&lt;/code&gt; вместо обещания.</target>
        </trans-unit>
        <trans-unit id="c0334129e557cb71f1101529b6b21d138390105a" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;var x&lt;/code&gt; is hoisted out of the loop, effectively creating:</source>
          <target state="translated">В этом случае &lt;code&gt;var x&lt;/code&gt; выводится из цикла, эффективно создавая:</target>
        </trans-unit>
        <trans-unit id="81b4bbb5892a95679c7e65b779450b662ceded28" translate="yes" xml:space="preserve">
          <source>In this case, the created object is thrown away because its reference isn't stored anywhere, and in many cases, this means that the constructor should be replaced with a function that doesn't require &lt;code&gt;new&lt;/code&gt; to be used.</source>
          <target state="translated">В этом случае созданный объект отбрасывается, потому что его ссылка нигде не хранится, и во многих случаях это означает, что конструктор следует заменить функцией, которая не требует использования &lt;code&gt;new&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0131376096f23dfc4bd77b3459401e2d691c79dd" translate="yes" xml:space="preserve">
          <source>In this case, the message is specific to the variable being used and the AST node type is &lt;code&gt;Identifier&lt;/code&gt;.</source>
          <target state="translated">В этом случае сообщение зависит от используемой переменной, а тип узла AST - &lt;code&gt;Identifier&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aad77b7ee8cfa194f8d3ef8768c4c03df4c2b476" translate="yes" xml:space="preserve">
          <source>In this case, the variable &lt;code&gt;a&lt;/code&gt; inside of &lt;code&gt;b()&lt;/code&gt; is shadowing the variable &lt;code&gt;a&lt;/code&gt; in the global scope. This can cause confusion while reading the code and it's impossible to access the global variable.</source>
          <target state="translated">В этом случае переменная &lt;code&gt;a&lt;/code&gt; внутри &lt;code&gt;b()&lt;/code&gt; затеняет переменную &lt;code&gt;a&lt;/code&gt; в глобальной области видимости. Это может вызвать путаницу при чтении кода и невозможность доступа к глобальной переменной.</target>
        </trans-unit>
        <trans-unit id="399b857b733880f93edced40099e5c214d78fa49" translate="yes" xml:space="preserve">
          <source>In this case, you would expect each function created within the loop to return a different number. In reality, each function returns 10, because that was the last value of &lt;code&gt;i&lt;/code&gt; in the scope.</source>
          <target state="translated">В этом случае можно ожидать, что каждая функция, созданная в цикле, вернет другое число. На самом деле каждая функция возвращает 10, потому что это было последнее значение &lt;code&gt;i&lt;/code&gt; в области видимости.</target>
        </trans-unit>
        <trans-unit id="89db72e5b125a2136f5700b9df46d59dfd325de2" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;enum&lt;/code&gt; is used as an object key and will throw an error in an ECMAScript 3 environment (such as Internet Explorer 8).</source>
          <target state="translated">В этом коде &lt;code&gt;enum&lt;/code&gt; используется в качестве ключа объекта и вызывает ошибку в среде ECMAScript 3 (например, Internet Explorer 8).</target>
        </trans-unit>
        <trans-unit id="7b3f3ffb93c91f659a612089534865f9263e81d0" translate="yes" xml:space="preserve">
          <source>In this code, no new variables are created because &lt;code&gt;a&lt;/code&gt; is just a location helper while the &lt;code&gt;{}&lt;/code&gt; is expected to contain the variables to create, such as:</source>
          <target state="translated">В этом коде новые переменные не создаются, потому что &lt;code&gt;a&lt;/code&gt; - это просто помощник по расположению, в то время как &lt;code&gt;{}&lt;/code&gt; , как ожидается, будет содержать переменные для создания, например:</target>
        </trans-unit>
        <trans-unit id="99609a5bff02d4c73d9df2f874ef482759db0b7c" translate="yes" xml:space="preserve">
          <source>In this code, the reference to &lt;code&gt;this&lt;/code&gt; has been removed but &lt;code&gt;bind()&lt;/code&gt; is still used. In this case, the &lt;code&gt;bind()&lt;/code&gt; is unnecessary overhead (and a performance hit) and can be safely removed.</source>
          <target state="translated">В этом коде ссылка на &lt;code&gt;this&lt;/code&gt; удалена, но &lt;code&gt;bind()&lt;/code&gt; все еще используется. В этом случае &lt;code&gt;bind()&lt;/code&gt; не требует дополнительных затрат (и снижает производительность) и может быть безопасно удалена.</target>
        </trans-unit>
        <trans-unit id="df86629a847fb7ed6459c203d8878e66d97590a4" translate="yes" xml:space="preserve">
          <source>In this document, the first four types are summed up under the term &lt;em&gt;require declaration&lt;/em&gt;.</source>
          <target state="translated">В этом документе первые четыре типа суммируются под термином &amp;laquo; &lt;em&gt;требуется объявление&amp;raquo;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="c640e601c90d57c39ee9be82c0f12dec43d6aa1a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;a href=&quot;../rules/eqeqeq&quot;&gt;&lt;code&gt;eqeqeq&lt;/code&gt;&lt;/a&gt; is turned off and &lt;a href=&quot;../rules/curly&quot;&gt;&lt;code&gt;curly&lt;/code&gt;&lt;/a&gt; is turned on as an error. You can also use the numeric equivalent for the rule severity:</source>
          <target state="translated">В этом примере, &lt;a href=&quot;../rules/eqeqeq&quot;&gt; &lt;code&gt;eqeqeq&lt;/code&gt; &lt;/a&gt; выключен и &lt;a href=&quot;../rules/curly&quot;&gt; &lt;code&gt;curly&lt;/code&gt; &lt;/a&gt; включен как ошибка. Вы также можете использовать числовой эквивалент серьезности правила:</target>
        </trans-unit>
        <trans-unit id="c58957ba7e167fed9c432e37bda0f2aa517e44f7" translate="yes" xml:space="preserve">
          <source>In this example, a new &lt;code&gt;CLIEngine&lt;/code&gt; instance is created that extends a configuration called &lt;code&gt;&quot;eslint-config-shared&quot;&lt;/code&gt;, a setting named &lt;code&gt;&quot;sharedData&quot;&lt;/code&gt; and two environments (&lt;code&gt;&quot;browser&quot;&lt;/code&gt; and &lt;code&gt;&quot;mocha&quot;&lt;/code&gt;) are defined, loading of &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files are disabled, and the &lt;code&gt;semi&lt;/code&gt; rule enabled as an error. You can then call methods on &lt;code&gt;cli&lt;/code&gt; and these options will be used to perform the correct action.</source>
          <target state="translated">В этом примере создается новый экземпляр &lt;code&gt;CLIEngine&lt;/code&gt; , который расширяет конфигурацию с именем &lt;code&gt;&quot;eslint-config-shared&quot;&lt;/code&gt; , определяется параметр с именем &lt;code&gt;&quot;sharedData&quot;&lt;/code&gt; и две среды ( &lt;code&gt;&quot;browser&quot;&lt;/code&gt; и &lt;code&gt;&quot;mocha&quot;&lt;/code&gt; ), загрузка &lt;code&gt;.eslintrc&lt;/code&gt; и &lt;code&gt;package.json&lt;/code&gt; Файлы .json отключены, а &lt;code&gt;semi&lt;/code&gt; включено как ошибка. Затем вы можете вызвать методы в &lt;code&gt;cli&lt;/code&gt; , и эти параметры будут использоваться для выполнения правильного действия.</target>
        </trans-unit>
        <trans-unit id="e04d10297a79bb36c8285674c21e09aa283053e2" translate="yes" xml:space="preserve">
          <source>In this example, a semicolon will not be inserted after the first line, causing a run-time error (because an empty object is called as if it's a function). The &lt;a href=&quot;no-unexpected-multiline&quot;&gt;no-unexpected-multiline&lt;/a&gt; rule can protect your code from such cases.</source>
          <target state="translated">В этом примере точка с запятой не будет вставлена ​​после первой строки, что вызовет ошибку времени выполнения (поскольку пустой объект вызывается, как если бы это функция). &lt;a href=&quot;no-unexpected-multiline&quot;&gt;Не-неожиданное-многострочное&lt;/a&gt; правило может защитить ваш код от таких случаев.</target>
        </trans-unit>
        <trans-unit id="cfd38ba50d65586ae33ba8981419872a1566d701" translate="yes" xml:space="preserve">
          <source>In this example, if &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, then execution will flow through both cases, as the first falls through to the second. You can prevent this by using &lt;code&gt;break&lt;/code&gt;, as in this example:</source>
          <target state="translated">В этом примере, если &lt;code&gt;foo&lt;/code&gt; равно &lt;code&gt;1&lt;/code&gt; , выполнение будет проходить через оба случая, поскольку первый переходит во второй. Вы можете предотвратить это, используя &lt;code&gt;break&lt;/code&gt; , как в этом примере:</target>
        </trans-unit>
        <trans-unit id="7d644af3174c7141490f9748832a9b77f491be79" translate="yes" xml:space="preserve">
          <source>In this example, rules run on &lt;code&gt;linter1&lt;/code&gt; will get &lt;code&gt;path/to/project&lt;/code&gt; when calling &lt;code&gt;context.getCwd()&lt;/code&gt;. Those run on &lt;code&gt;linter2&lt;/code&gt; will get &lt;code&gt;process.cwd()&lt;/code&gt; if the global &lt;code&gt;process&lt;/code&gt; object is defined or &lt;code&gt;undefined&lt;/code&gt; otherwise (e.g. on the browser https://eslint.org/demo).</source>
          <target state="translated">В этом примере правила, запущенные на &lt;code&gt;linter1&lt;/code&gt; , получат &lt;code&gt;path/to/project&lt;/code&gt; при вызове &lt;code&gt;context.getCwd()&lt;/code&gt; . Те, которые работают на &lt;code&gt;linter2&lt;/code&gt; , получат &lt;code&gt;process.cwd()&lt;/code&gt; если глобальный объект &lt;code&gt;process&lt;/code&gt; определен или &lt;code&gt;undefined&lt;/code&gt; противном случае (например, в браузере https://eslint.org/demo).</target>
        </trans-unit>
        <trans-unit id="779b188cd469ad108c26dd64160ac911811d7073" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;colors&lt;/code&gt; array has a &lt;code&gt;length&lt;/code&gt; of 3. But did the developer intend for there to be an empty spot in the middle of the array? Or is it a typo?</source>
          <target state="translated">В этом примере массив &lt;code&gt;colors&lt;/code&gt; имеет &lt;code&gt;length&lt;/code&gt; 3. Но задумал ли разработчик, чтобы в середине массива было пустое место? Или это опечатка?</target>
        </trans-unit>
        <trans-unit id="5386dba46b991972060bd7c9e14da379324e4d9b" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;your-program-that-reads-json&lt;/code&gt; program can accept the raw JSON of ESLint results and process it before outputting its own format of the results. You can pass as many command line arguments to that program as are necessary to customize the output.</source>
          <target state="translated">В этом примере программа &lt;code&gt;your-program-that-reads-json&lt;/code&gt; может принимать необработанный JSON результатов ESLint и обрабатывать его перед выводом результатов в собственном формате. Вы можете передать этой программе столько аргументов командной строки, сколько необходимо для настройки вывода.</target>
        </trans-unit>
        <trans-unit id="1fe1ba8b07ed67f5a9ede5eb35c07a25b1b5f527" translate="yes" xml:space="preserve">
          <source>In this example, there is no confusion as to the expected behavior. It is clear that the first case is meant to fall through to the second case.</source>
          <target state="translated">В данном примере нет никакой путаницы в отношении ожидаемого поведения.Понятно,что первый случай предназначен для того,чтобы попасть во второй.</target>
        </trans-unit>
        <trans-unit id="7e7ef8fabcff41fe8f6f4df0b1edfce0bf6562b5" translate="yes" xml:space="preserve">
          <source>In this regular expression, it's very hard to tell how many spaces are intended to be matched. It's better to use only one space and then specify how many spaces are expected, such as:</source>
          <target state="translated">В этом регулярном выражении очень трудно сказать,сколько пространств должно быть подобрано.Лучше использовать только один пробел,а затем указывать,сколько пробелов предполагается,например:</target>
        </trans-unit>
        <trans-unit id="4a189fd8ceca6899851eb5f5658a2bf4f6b54ef4" translate="yes" xml:space="preserve">
          <source>In this way, you can look for patterns in the JavaScript text itself when the AST isn't providing the appropriate data (such as location of commas, semicolons, parentheses, etc.).</source>
          <target state="translated">Таким образом,вы можете искать шаблоны в самом тексте JavaScript,когда AST не предоставляет соответствующих данных (например,расположение запятых,точек с запятыми,круглых скобок и т.д.).</target>
        </trans-unit>
        <trans-unit id="d5c0141841620af4d1a195b336ad8e436213bec6" translate="yes" xml:space="preserve">
          <source>In this way, you can retrieve the text and AST used for the last run of &lt;code&gt;linter.verify()&lt;/code&gt;.</source>
          <target state="translated">Таким образом можно получить текст и AST, использованные при последнем запуске &lt;code&gt;linter.verify()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f93ca71277a0502e3ed4131457bb0945a787ed0" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;.eslintrc.json&lt;/code&gt;:</source>
          <target state="translated">В вашем &lt;code&gt;.eslintrc.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="009b0850360ef7549f9650d1923055c3693ba1c5" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;index.js&lt;/code&gt; you can do something like this:</source>
          <target state="translated">В вашем &lt;code&gt;index.js&lt;/code&gt; вы можете сделать что-то вроде этого:</target>
        </trans-unit>
        <trans-unit id="032a16fac15a2c35de7010f198a6616b53ea5447" translate="yes" xml:space="preserve">
          <source>Include a Plugin</source>
          <target state="translated">Включить плагин</target>
        </trans-unit>
        <trans-unit id="11727c01a1f0f864099d5b7d0794777c1a808dbc" translate="yes" xml:space="preserve">
          <source>Inconsistent array literals</source>
          <target state="translated">Непоследовательные литералы массива</target>
        </trans-unit>
        <trans-unit id="ca0226a65c54af3be6e8d1317608eb74c1af4347" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will indent the multi-line property chains with 0 spaces.</source>
          <target state="translated">Отступ в 2 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; ,равным &lt;code&gt;0&lt;/code&gt; , приведет к отступу в многострочную цепочку свойств с помощью 0 пробелов.</target>
        </trans-unit>
        <trans-unit id="7291c3e61a93ea88556a7189c20daea3b648aec5" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent the multi-line property chains with 2 spaces.</source>
          <target state="translated">Отступ в 2 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; ,равным &lt;code&gt;1&lt;/code&gt; , приведет к отступу в многострочную цепочку свойств двумя пробелами.</target>
        </trans-unit>
        <trans-unit id="6bc91230783ec5f7e7d075a1b0c3b0e709d44eaa" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line property chains with 4 spaces.</source>
          <target state="translated">Отступ в 2 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; равным &lt;code&gt;2&lt;/code&gt; приведет к отступу в многострочную цепочку свойств с 4 пробелами.</target>
        </trans-unit>
        <trans-unit id="4aa45cb0a17e641de36c01adbba849efeb37b109" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will not indent &lt;code&gt;case&lt;/code&gt; clauses with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">Отступ в 2 пробела с &lt;code&gt;SwitchCase&lt;/code&gt; , установленным на &lt;code&gt;0&lt;/code&gt; , не приведет к отступу в предложениях &lt;code&gt;case&lt;/code&gt; относительно операторов &lt;code&gt;switch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f4f2a16a4131df3f89017d70bbb1ece160f90c7c" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 2 spaces with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">Отступ в 2 пробела с &lt;code&gt;SwitchCase&lt;/code&gt; , установленным на &lt;code&gt;1&lt;/code&gt; , будет сдвигать предложения &lt;code&gt;case&lt;/code&gt; с 2 пробелами по отношению к операторам &lt;code&gt;switch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa3ef7698444ec15ef47c06f1146395abe21723b" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 4 spaces with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">Отступ в 2 пробела с &lt;code&gt;SwitchCase&lt;/code&gt; , установленным на &lt;code&gt;2&lt;/code&gt; , приведет к отступу в предложениях &lt;code&gt;case&lt;/code&gt; с 4 пробелами относительно операторов &lt;code&gt;switch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04b9c9c421c16f0b5f05a25e69465b0bc0f1be79" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 4 spaces.</source>
          <target state="translated">Отступ в 2 пробела с &lt;code&gt;VariableDeclarator&lt;/code&gt; , установленным на &lt;code&gt;2&lt;/code&gt; , приведет к отступу в объявлениях многострочных переменных с 4 пробелами.</target>
        </trans-unit>
        <trans-unit id="0c8ebca7ea1eadf77aa1539aee5992376aa42b9a" translate="yes" xml:space="preserve">
          <source>Indent of 2 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;{&quot;var&quot;: 2, &quot;let&quot;: 2, &quot;const&quot;: 3}&lt;/code&gt; will indent the multi-line variable declarations with 4 spaces for &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;, 6 spaces for &lt;code&gt;const&lt;/code&gt; statements.</source>
          <target state="translated">Отступ в 2 пробела с &lt;code&gt;VariableDeclarator&lt;/code&gt; , установленным на &lt;code&gt;{&quot;var&quot;: 2, &quot;let&quot;: 2, &quot;const&quot;: 3}&lt;/code&gt; приведет к отступу в объявлениях многострочных переменных с 4 пробелами для &lt;code&gt;var&lt;/code&gt; и &lt;code&gt;let&lt;/code&gt; , 6 пробелами для операторов &lt;code&gt;const&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="37da0f8ed8adb3a9ae9717323caef07582ce3615" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; will indent the multi-line property chains with 0 spaces.</source>
          <target state="translated">Отступ в 4 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; ,равным &lt;code&gt;0&lt;/code&gt; , приведет к отступу в многострочную цепочку свойств с помощью 0 пробелов.</target>
        </trans-unit>
        <trans-unit id="81800a33fcf8d34618c84a566cae8af76effa434" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; will indent the multi-line property chains with 4 spaces.</source>
          <target state="translated">Отступ в 4 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; ,равным &lt;code&gt;1&lt;/code&gt; , приведет к отступу в многострочную цепочку свойств с 4 пробелами.</target>
        </trans-unit>
        <trans-unit id="0adfe437bd53df09a8a1d1b8b57ebaa2b74de516" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;MemberExpression&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line property chains with 8 spaces.</source>
          <target state="translated">Отступ в 4 пробела с параметром &lt;code&gt;MemberExpression&lt;/code&gt; ,равным &lt;code&gt;2&lt;/code&gt; , приведет к отступу в многострочную цепочку свойств с 8 пробелами.</target>
        </trans-unit>
        <trans-unit id="c377f9f2c9baba9b61174102349a3cff039f772b" translate="yes" xml:space="preserve">
          <source>Indent of 4 spaces with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 8 spaces.</source>
          <target state="translated">Отступ в 4 пробела с &lt;code&gt;VariableDeclarator&lt;/code&gt; , установленным на &lt;code&gt;2&lt;/code&gt; , приведет к отступу в объявлениях многострочных переменных с 8 пробелами.</target>
        </trans-unit>
        <trans-unit id="249477091acfdfe0764a4626099be04431debedd" translate="yes" xml:space="preserve">
          <source>Indent of tab with &lt;code&gt;SwitchCase&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent &lt;code&gt;case&lt;/code&gt; clauses with 2 tabs with respect to &lt;code&gt;switch&lt;/code&gt; statements.</source>
          <target state="translated">Отступ табуляции с &lt;code&gt;SwitchCase&lt;/code&gt; , установленным на &lt;code&gt;2&lt;/code&gt; , будет сдвигать предложения &lt;code&gt;case&lt;/code&gt; с 2 табуляциями по отношению к операторам &lt;code&gt;switch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f517b0d431fab414c01fa41d1cb1ba6e2c691bfe" translate="yes" xml:space="preserve">
          <source>Indent of tab with &lt;code&gt;VariableDeclarator&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; will indent the multi-line variable declarations with 2 tabs.</source>
          <target state="translated">Отступ табуляции с &lt;code&gt;VariableDeclarator&lt;/code&gt; , установленным на &lt;code&gt;2&lt;/code&gt; , приведет к отступу в объявлениях многострочных переменных с двумя табуляциями.</target>
        </trans-unit>
        <trans-unit id="be85770cb5a76a0818b1bf2921835273683eab9e" translate="yes" xml:space="preserve">
          <source>Indent style</source>
          <target state="translated">отступной стиль</target>
        </trans-unit>
        <trans-unit id="c9ec7fcf0ce1c005cbdd2ae9ab39e1773e6bf368" translate="yes" xml:space="preserve">
          <source>Indentation</source>
          <target state="translated">Indentation</target>
        </trans-unit>
        <trans-unit id="e6261109da4902b33b9cd6b6a6e13950c7b2f265" translate="yes" xml:space="preserve">
          <source>Individual rules are the most specialized part of the ESLint architecture. Rules can do very little, they are simply a set of instructions executed against an AST that is provided. They do get some context information passed in, but the primary responsibility of a rule is to inspect the AST and report warnings.</source>
          <target state="translated">Отдельные правила являются наиболее специализированной частью архитектуры ESLint.Правила могут делать очень мало,они представляют собой просто набор инструкций,выполняемых против предоставленного AST.Они действительно получают некоторую передаваемую контекстную информацию,но основная ответственность правила заключается в том,чтобы проверять AST и сообщать о предупреждениях.</target>
        </trans-unit>
        <trans-unit id="a85c159fc06136af3a0e6f3ef7f7b357155918ae" translate="yes" xml:space="preserve">
          <source>Infix notation is considered to be more readable and thus more preferable than the function notation.</source>
          <target state="translated">Инфекционная нотация считается более читабельной и,следовательно,более предпочтительной,чем нотация функции.</target>
        </trans-unit>
        <trans-unit id="171e49fd6eadd04f3820993c4be21fe5a1b35166" translate="yes" xml:space="preserve">
          <source>Inline configuration</source>
          <target state="translated">Интернет-конфигурация</target>
        </trans-unit>
        <trans-unit id="d2fd04fd84101709fd89ec790e1371ff8b9ef63c" translate="yes" xml:space="preserve">
          <source>Inline configuration comments</source>
          <target state="translated">Инлайн-комментарии по настройке</target>
        </trans-unit>
        <trans-unit id="9585f00332de4d4f8c32369ef56719ceb72cd815" translate="yes" xml:space="preserve">
          <source>Inside an &lt;code&gt;async function&lt;/code&gt;, &lt;code&gt;return await&lt;/code&gt; is seldom useful. Since the return value of an &lt;code&gt;async function&lt;/code&gt; is always wrapped in &lt;code&gt;Promise.resolve&lt;/code&gt;, &lt;code&gt;return await&lt;/code&gt; doesn&amp;rsquo;t actually do anything except add extra time before the overarching Promise resolves or rejects. The only valid exception is if &lt;code&gt;return await&lt;/code&gt; is used in a try/catch statement to catch errors from another Promise-based function.</source>
          <target state="translated">Внутри &lt;code&gt;async function&lt;/code&gt; , &lt;code&gt;return await&lt;/code&gt; редко полезно. Поскольку возвращаемое значение &lt;code&gt;async function&lt;/code&gt; всегда заключено в &lt;code&gt;Promise.resolve&lt;/code&gt; , &lt;code&gt;return await&lt;/code&gt; на самом деле ничего не делает, кроме добавления дополнительного времени перед тем, как всеобъемлющее обещание разрешится или отклонится. Единственное допустимое исключение - если &lt;code&gt;return await&lt;/code&gt; используется в операторе try / catch для перехвата ошибок из другой функции на основе Promise.</target>
        </trans-unit>
        <trans-unit id="eb0de3cbdd2ccc580ba1ed8ca26a4b30319c1d03" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;/lib/ci.js&lt;/code&gt; you have</source>
          <target state="translated">Внутри вашего &lt;code&gt;/lib/ci.js&lt;/code&gt; у вас есть</target>
        </trans-unit>
        <trans-unit id="97641fdd5c503b70c8becbd4ce8f7e9e8d44e3c6" translate="yes" xml:space="preserve">
          <source>Inside your &lt;code&gt;/lib/ci/common.js&lt;/code&gt;</source>
          <target state="translated">Внутри вашего &lt;code&gt;/lib/ci/common.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79793a6b410e0433146645ca2357b284caa999c3" translate="yes" xml:space="preserve">
          <source>Inspect the AST for specific patterns</source>
          <target state="translated">Проверьте AST на наличие определенных шаблонов</target>
        </trans-unit>
        <trans-unit id="aa191a92122db1dd534e01a6f8db776a244a258a" translate="yes" xml:space="preserve">
          <source>Inspecting JavaScript code strings</source>
          <target state="translated">Проверка строк кода JavaScript</target>
        </trans-unit>
        <trans-unit id="c606fdbf6de357bfc1116bac2ce0d38a13ee0476" translate="yes" xml:space="preserve">
          <source>Installation and Usage</source>
          <target state="translated">Установка и использование</target>
        </trans-unit>
        <trans-unit id="e15807031e6ce06bd523ee795f410f6739658f43" translate="yes" xml:space="preserve">
          <source>Instances where an arrow function would not produce identical results will be ignored.</source>
          <target state="translated">Случаи,когда функция стрелки не даст идентичных результатов,будут проигнорированы.</target>
        </trans-unit>
        <trans-unit id="cd015dcfc5986643aac68a740707e55386dfe2e8" translate="yes" xml:space="preserve">
          <source>Instead of those, you can comply with the rule by writing</source>
          <target state="translated">Вместо них,вы можете соблюдать правило,написав</target>
        </trans-unit>
        <trans-unit id="6029437e076bc4c6afdd7d074c7461678e957ef0" translate="yes" xml:space="preserve">
          <source>Instead of typing out messages in both the &lt;code&gt;context.report()&lt;/code&gt; call and your tests, you can use &lt;code&gt;messageId&lt;/code&gt;s instead.</source>
          <target state="translated">Вместо того, чтобы вводить сообщения как в вызове &lt;code&gt;context.report()&lt;/code&gt; и в ваших тестах, вы можете использовать &lt;code&gt;messageId&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ad4af54fe31ce812575acd3bb59ea228cff9bbd9" translate="yes" xml:space="preserve">
          <source>Instead of using a &lt;code&gt;desc&lt;/code&gt; key for suggestions a &lt;code&gt;messageId&lt;/code&gt; can be used instead. This works the same way as &lt;code&gt;messageId&lt;/code&gt;s for the overall error (see &lt;a href=&quot;#messageIds&quot;&gt;messageIds&lt;/a&gt;). Here is an example of how to use it in a rule:</source>
          <target state="translated">Вместо использования ключа &lt;code&gt;desc&lt;/code&gt; для предложений можно использовать &lt;code&gt;messageId&lt;/code&gt; . Это работает так же, как &lt;code&gt;messageId&lt;/code&gt; для общей ошибки (см. &lt;a href=&quot;#messageIds&quot;&gt;MessageIds&lt;/a&gt; ). Вот пример того, как использовать его в правиле:</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="7ce82ae5f06c2403a942ea5944563684a05c2677" translate="yes" xml:space="preserve">
          <source>IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm, AppCode, Android Studio, 0xDBE: &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7494-eslint&quot;&gt;ESLint Plugin&lt;/a&gt;</source>
          <target state="translated">IntelliJ IDEA, RubyMine, WebStorm, PhpStorm, PyCharm, AppCode, Android Studio, 0xDBE: &lt;a href=&quot;https://plugins.jetbrains.com/plugin/7494-eslint&quot;&gt;плагин ESLint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0dcaca927eb571b52afe4df5a018ef73e1f47fd6" translate="yes" xml:space="preserve">
          <source>Inter-property Delimiters</source>
          <target state="translated">Межсобственность Делимиттеры</target>
        </trans-unit>
        <trans-unit id="d2e6be9cff98375cf9b71efc8412555587e67bf3" translate="yes" xml:space="preserve">
          <source>Internally, the list of core modules is retrieved via &lt;code&gt;require(&quot;repl&quot;)._builtinLibs&lt;/code&gt;. If you use different versions of Node.js for ESLint and your application, the list of core modules for each version may be different. The above mentioned &lt;code&gt;_builtinLibs&lt;/code&gt; property became available in 0.8, for earlier versions a hardcoded list of module names is used as a fallback. If your version of Node.js is older than 0.6 that list may be inaccurate.</source>
          <target state="translated">Внутри список основных модулей получается через &lt;code&gt;require(&quot;repl&quot;)._builtinLibs&lt;/code&gt; . Если вы используете разные версии Node.js для ESLint и своего приложения, список основных модулей для каждой версии может отличаться. Вышеупомянутое свойство &lt;code&gt;_builtinLibs&lt;/code&gt; стало доступно в 0.8, для более ранних версий в качестве запасного варианта используется жестко запрограммированный список имен модулей. Если ваша версия Node.js старше 0.6, этот список может быть неточным.</target>
        </trans-unit>
        <trans-unit id="a353823bf4679ac9a97ecdcdda169f480ccc4e6b" translate="yes" xml:space="preserve">
          <source>Interpreting command line arguments</source>
          <target state="translated">Интерпретация аргументов командной строки</target>
        </trans-unit>
        <trans-unit id="44cd6f5293258a62e092650968ebc166ee72f7e8" translate="yes" xml:space="preserve">
          <source>Introduced in ES2016, the infix exponentiation operator &lt;code&gt;**&lt;/code&gt; is an alternative for the standard &lt;code&gt;Math.pow&lt;/code&gt; function.</source>
          <target state="translated">Введенный в ES2016, инфиксный оператор возведения в степень &lt;code&gt;**&lt;/code&gt; является альтернативой стандартной функции &lt;code&gt;Math.pow&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="306481a508a9005a041e40b4b6b65eb7b3a5810a" translate="yes" xml:space="preserve">
          <source>Introduced in ES2018, object spread is a declarative alternative which may perform better than the more dynamic, imperative &lt;code&gt;Object.assign&lt;/code&gt;.</source>
          <target state="translated">Представленный в ES2018 объект Spread - это декларативная альтернатива, которая может работать лучше, чем более динамичный императивный &lt;code&gt;Object.assign&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="98ba7cd71bb7b6ecec8a3a9d63e39097f51862b5" translate="yes" xml:space="preserve">
          <source>Invalid Code</source>
          <target state="translated">Недействительный кодекс</target>
        </trans-unit>
        <trans-unit id="815945ae0fe3963181a2bfa1fb673d90efae01ff" translate="yes" xml:space="preserve">
          <source>Invalid or irregular whitespace causes issues with ECMAScript 5 parsers and also makes code harder to debug in a similar nature to mixed tabs and spaces.</source>
          <target state="translated">Недействительные или нерегулярные пробелы вызывают проблемы с парсерами ECMAScript 5,а также затрудняют отладку кода по аналогии со смешанными табуляциями и пробелами.</target>
        </trans-unit>
        <trans-unit id="d5b11134917a485155a6f88cb85472d4bfbf86f8" translate="yes" xml:space="preserve">
          <source>Is NOT a valid character within JSON which would cause parse errors</source>
          <target state="translated">НЕ является допустимым символом в JSON,что может привести к ошибкам при разборе.</target>
        </trans-unit>
        <trans-unit id="60cf4231de6804a719f7211d9a553afb7accfba5" translate="yes" xml:space="preserve">
          <source>Is NOT considered a separator for tokens and is often parsed as an &lt;code&gt;Unexpected token ILLEGAL&lt;/code&gt;</source>
          <target state="translated">НЕ считается разделителем для токенов и часто анализируется как &lt;code&gt;Unexpected token ILLEGAL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="957302f33f2dc5759ecc018bc572081e80d88860" translate="yes" xml:space="preserve">
          <source>Is NOT shown in modern browsers making code repository software expected to resolve the visualization</source>
          <target state="translated">НЕ отображается в современных браузерах,делая программное обеспечение репозитория кода ожидаемым для решения визуализации</target>
        </trans-unit>
        <trans-unit id="dc9cf4d64ebc62cf137d309a08c91bfd3d80092e" translate="yes" xml:space="preserve">
          <source>Is this issue available for me to work on? If you have little or no experience contributing to ESLint, the &lt;a href=&quot;https://github.com/eslint/eslint/labels/good%20first%20issue&quot;&gt;&lt;code&gt;good first issue&lt;/code&gt;&lt;/a&gt; label marks appropriate issues. Otherwise, the &lt;a href=&quot;https://github.com/eslint/eslint/labels/help%20wanted&quot;&gt;&lt;code&gt;help wanted&lt;/code&gt;&lt;/a&gt; label is an invitation to work on the issue. If you have more experience, you can try working on other issues labeled &lt;a href=&quot;https://github.com/eslint/eslint/labels/accepted&quot;&gt;&lt;code&gt;accepted&lt;/code&gt;&lt;/a&gt;. Conversely, issues not yet ready to work on are labeled &lt;code&gt;triage&lt;/code&gt;, &lt;code&gt;evaluating&lt;/code&gt;, and/or &lt;code&gt;needs bikeshedding&lt;/code&gt;, and issues that cannot currently be worked on because of something else, such as a bug in a dependency, are labeled &lt;code&gt;blocked&lt;/code&gt;.</source>
          <target state="translated">Могу ли я поработать над этой проблемой? Если у вас мало или совсем нет опыта участия в ESLint, &lt;a href=&quot;https://github.com/eslint/eslint/labels/good%20first%20issue&quot;&gt; &lt;code&gt;good first issue&lt;/code&gt; &lt;/a&gt; метка первой проблемы отмечает соответствующие проблемы. В противном случае ярлык &amp;laquo; Требуется &lt;a href=&quot;https://github.com/eslint/eslint/labels/help%20wanted&quot;&gt; &lt;code&gt;help wanted&lt;/code&gt; &lt;/a&gt; - это приглашение поработать над проблемой. Если у вас больше опыта, вы можете попробовать поработать над другими проблемами, отмеченными как &lt;a href=&quot;https://github.com/eslint/eslint/labels/accepted&quot;&gt; &lt;code&gt;accepted&lt;/code&gt; &lt;/a&gt; . И наоборот, проблемы, которые еще не готовы к работе, помечаются как &lt;code&gt;triage&lt;/code&gt; , &lt;code&gt;evaluating&lt;/code&gt; и / или &lt;code&gt;needs bikeshedding&lt;/code&gt; , а проблемы, которые в настоящее время не могут быть решены из-за чего-то еще, например, ошибки в зависимости, помечаются как &lt;code&gt;blocked&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d7a2b9ab5c52c5baa98c0142e1ecf88e976d9a7" translate="yes" xml:space="preserve">
          <source>Issue 5848: Exponentiation operator ** has different results for numbers and variables from 50 upwards</source>
          <target state="translated">Выпуск 5848:Оператор Exponentiation **имеет различные результаты для чисел и переменных от 50 и выше.</target>
        </trans-unit>
        <trans-unit id="37728d8bc7a4f09a840422afa258e772e00bb890" translate="yes" xml:space="preserve">
          <source>Issue Labels</source>
          <target state="translated">Выпускные этикетки</target>
        </trans-unit>
        <trans-unit id="0b740bfff65fa9fc349966663110278f3b373112" translate="yes" xml:space="preserve">
          <source>It adds the &lt;code&gt;processor&lt;/code&gt; setting if a legacy file extension processor is matched.</source>
          <target state="translated">Он добавляет настройку &lt;code&gt;processor&lt;/code&gt; если соответствует устаревший процессор расширения файлов.</target>
        </trans-unit>
        <trans-unit id="1cd07795c36c156d9f2ee87a0d791d80b387db0c" translate="yes" xml:space="preserve">
          <source>It applies only to &lt;code&gt;switch&lt;/code&gt; statements that already have a &lt;code&gt;default&lt;/code&gt; clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86a029f7873d477fbbedd4c6e632f07e9dc217d" translate="yes" xml:space="preserve">
          <source>It applies to static imports only, not dynamic ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be652d16de194c250a891ad0f6808f168955fcd0" translate="yes" xml:space="preserve">
          <source>It can also take an object with lists of &lt;code&gt;paths&lt;/code&gt; and gitignore-style &lt;code&gt;patterns&lt;/code&gt; strings.</source>
          <target state="translated">Он также может принимать объект со списками &lt;code&gt;paths&lt;/code&gt; и строками &lt;code&gt;patterns&lt;/code&gt; стиле gitignore .</target>
        </trans-unit>
        <trans-unit id="2924f65b6a87a4bd47f6db0bc1044df77741aec9" translate="yes" xml:space="preserve">
          <source>It creates the paths from &lt;code&gt;try&lt;/code&gt; block to &lt;code&gt;catch&lt;/code&gt; block at:</source>
          <target state="translated">Он создает пути из блока &lt;code&gt;try&lt;/code&gt; к блоку &lt;code&gt;catch&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fdb515fbd413583a1777a93401fe6bf040d961f9" translate="yes" xml:space="preserve">
          <source>It creates two code paths.</source>
          <target state="translated">Он создает два пути кода.</target>
        </trans-unit>
        <trans-unit id="eb099b07cfe57d0b23bb60718644f2ee8f5a8e02" translate="yes" xml:space="preserve">
          <source>It doesn't interpret the &lt;code&gt;env&lt;/code&gt; setting to the &lt;code&gt;globals&lt;/code&gt; and &lt;code&gt;parserOptions&lt;/code&gt; settings, so the result object contains the &lt;code&gt;env&lt;/code&gt; setting as is.</source>
          <target state="translated">Он не интерпретирует параметр &lt;code&gt;env&lt;/code&gt; для параметров &lt;code&gt;globals&lt;/code&gt; и &lt;code&gt;parserOptions&lt;/code&gt; , поэтому объект результата содержит параметр &lt;code&gt;env&lt;/code&gt; как есть.</target>
        </trans-unit>
        <trans-unit id="e0d45deb43503113017a4d4ddd12a12a01bba178" translate="yes" xml:space="preserve">
          <source>It either requires or disallows spaces between the brackets and the values inside of them. This rule does not apply to brackets that are separated from the adjacent value by a newline.</source>
          <target state="translated">Она либо требует,либо не допускает пробелов между скобками и значениями внутри них.Это правило не применяется к скобкам,которые отделяются от соседнего значения новой строкой.</target>
        </trans-unit>
        <trans-unit id="24766393b99eaea48c1683ef37a8ba69a067a803" translate="yes" xml:space="preserve">
          <source>It fails test cases if any unknown properties are found in the objects in the &lt;code&gt;errors&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bccb53acff966ad55fb47e00bf52bd9cc47b92" translate="yes" xml:space="preserve">
          <source>It fails test cases if the rule under test provides an autofix but a test case doesn't have an &lt;code&gt;output&lt;/code&gt; property. Add an &lt;code&gt;output&lt;/code&gt; property to test cases to test the rule's autofix functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1103318b99fceabb53b7cbee102a257fe5033c3" translate="yes" xml:space="preserve">
          <source>It fails test cases if the rule under test uses the non-standard &lt;code&gt;node.start&lt;/code&gt; or &lt;code&gt;node.end&lt;/code&gt; properties. Rules should use &lt;code&gt;node.range&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1437185c6ef9d0863b444bd8bb4f3398c15e78df" translate="yes" xml:space="preserve">
          <source>It has two settings:</source>
          <target state="translated">У него две настройки:</target>
        </trans-unit>
        <trans-unit id="8eac4161f004a7becbe3061ce8c3b4bd97a4b319" translate="yes" xml:space="preserve">
          <source>It is a &lt;code&gt;for()&lt;/code&gt;, &lt;code&gt;while()&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;if()&lt;/code&gt;, or &lt;code&gt;else&lt;/code&gt;, and there is no &lt;code&gt;{&lt;/code&gt;</source>
          <target state="translated">Это &lt;code&gt;for()&lt;/code&gt; , &lt;code&gt;while()&lt;/code&gt; , &lt;code&gt;do&lt;/code&gt; , &lt;code&gt;if()&lt;/code&gt; или &lt;code&gt;else&lt;/code&gt; , и нет &lt;code&gt;{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f04b31fe116a81aee3104f1518870b3f9f257e4d" translate="yes" xml:space="preserve">
          <source>It is also possible to install ESLint globally rather than locally (using &lt;code&gt;npm install eslint --global&lt;/code&gt;). However, this is not recommended, and any plugins or shareable configs that you use must be installed locally in either case.</source>
          <target state="translated">Также можно установить ESLint глобально, а не локально (используя &lt;code&gt;npm install eslint --global&lt;/code&gt; ). Однако это не рекомендуется, и любые плагины или общие конфигурации, которые вы используете, должны быть установлены локально в любом случае.</target>
        </trans-unit>
        <trans-unit id="60d8bb2666fcd22fb48ff106ea15d22786cda53c" translate="yes" xml:space="preserve">
          <source>It is called (&lt;code&gt;foo()&lt;/code&gt;) or constructed (&lt;code&gt;new foo()&lt;/code&gt;)</source>
          <target state="translated">Он называется ( &lt;code&gt;foo()&lt;/code&gt; ) или сконструирован ( &lt;code&gt;new foo()&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="d50a64c3ddd7bf38274c6a5f24e1b180a437f3ae" translate="yes" xml:space="preserve">
          <source>It is considered good practice to only &lt;code&gt;throw&lt;/code&gt; the &lt;code&gt;Error&lt;/code&gt; object itself or an object using the &lt;code&gt;Error&lt;/code&gt; object as base objects for user-defined exceptions. The fundamental benefit of &lt;code&gt;Error&lt;/code&gt; objects is that they automatically keep track of where they were built and originated.</source>
          <target state="translated">Считается хорошей практикой &lt;code&gt;throw&lt;/code&gt; только сам объект &lt;code&gt;Error&lt;/code&gt; или объект, использующий объект &lt;code&gt;Error&lt;/code&gt; в качестве базовых объектов для определяемых пользователем исключений. Основное преимущество объектов &lt;code&gt;Error&lt;/code&gt; заключается в том, что они автоматически отслеживают, где они были созданы и возникли.</target>
        </trans-unit>
        <trans-unit id="be5f31a9c2ec8133c8f35672e41c04c2511eb6b8" translate="yes" xml:space="preserve">
          <source>It is considered good practice to only pass instances of the built-in &lt;code&gt;Error&lt;/code&gt; object to the &lt;code&gt;reject()&lt;/code&gt; function for user-defined errors in Promises. &lt;code&gt;Error&lt;/code&gt; objects automatically store a stack trace, which can be used to debug an error by determining where it came from. If a Promise is rejected with a non-&lt;code&gt;Error&lt;/code&gt; value, it can be difficult to determine where the rejection occurred.</source>
          <target state="translated">Считается хорошей практикой передавать только экземпляры встроенного объекта &lt;code&gt;Error&lt;/code&gt; в функцию &lt;code&gt;reject()&lt;/code&gt; для пользовательских ошибок в Promises. Объекты &lt;code&gt;Error&lt;/code&gt; автоматически сохраняют трассировку стека, которую можно использовать для отладки ошибки путем определения ее источника. Если Promise отклоняется со значением, отличным от &lt;code&gt;Error&lt;/code&gt; , может быть трудно определить, где произошло отклонение.</target>
        </trans-unit>
        <trans-unit id="a4efad34ec75493b8be888ef3c0c9c3a3be295e6" translate="yes" xml:space="preserve">
          <source>It is considered good practice to use the type-safe equality operators &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; instead of their regular counterparts &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">Считается хорошей практикой использовать типобезопасные операторы равенства &lt;code&gt;===&lt;/code&gt; и &lt;code&gt;!==&lt;/code&gt; вместо их обычных аналогов &lt;code&gt;==&lt;/code&gt; и &lt;code&gt;!=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2db77118d25a6696528bec7e8025641d13ef6524" translate="yes" xml:space="preserve">
          <source>It is difficult to tell the intent of the &lt;code&gt;return&lt;/code&gt; statement here. It's possible that the function is meant to return the result of &lt;code&gt;bar + 2&lt;/code&gt;, but then why is it assigning to &lt;code&gt;foo&lt;/code&gt;? It's also possible that the intent was to use a comparison operator such as &lt;code&gt;==&lt;/code&gt; and that this code is an error.</source>
          <target state="translated">Трудно сказать , намерение в &lt;code&gt;return&lt;/code&gt; заявлении здесь. Возможно, функция предназначена для возврата результата &lt;code&gt;bar + 2&lt;/code&gt; , но тогда почему она присваивается &lt;code&gt;foo&lt;/code&gt; ? Также возможно, что намерением было использовать оператор сравнения, такой как &lt;code&gt;==&lt;/code&gt; , и что этот код является ошибкой.</target>
        </trans-unit>
        <trans-unit id="2bfab86bd0d58f0b204ea60ad86d6c48fe5638be" translate="yes" xml:space="preserve">
          <source>It is never permissible to omit the braces in any part of an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">Запрещается опускать фигурные скобки в любой части оператора &lt;code&gt;if&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0d610283fcff3de92ca8a3e960496ebdd493acd5" translate="yes" xml:space="preserve">
          <source>It is often necessary to capture the current execution context in order to make it available subsequently. A prominent example of this are jQuery callbacks:</source>
          <target state="translated">Часто бывает необходимо захватить контекст текущего исполнения,чтобы впоследствии сделать его доступным.Ярким примером этого являются обратные вызовы jQuery:</target>
        </trans-unit>
        <trans-unit id="dfc9afbf00569a0e87286216aa95f76c773a479c" translate="yes" xml:space="preserve">
          <source>It is passed into a function as an argument (&lt;code&gt;doSomething(foo)&lt;/code&gt;)</source>
          <target state="translated">Он передается в функцию как аргумент ( &lt;code&gt;doSomething(foo)&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="dfa2013456253628c34682b02d1086b4f4ef7bcc" translate="yes" xml:space="preserve">
          <source>It is read (&lt;code&gt;var bar = foo&lt;/code&gt;)</source>
          <target state="translated">Читается ( &lt;code&gt;var bar = foo&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="0a1cbdcc89556b2945c916ade57ddabf664e1243" translate="yes" xml:space="preserve">
          <source>It is read inside of a function that is passed to another function (&lt;code&gt;doSomething(function() { foo(); })&lt;/code&gt;)</source>
          <target state="translated">Он читается внутри функции, которая передается другой функции ( &lt;code&gt;doSomething(function() { foo(); })&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="cbbe54b3892924943f5cfe9bf7ffc5f5c0209850" translate="yes" xml:space="preserve">
          <source>It is the best practice to avoid 'polluting' the global scope with variables that are intended to be local to the script.</source>
          <target state="translated">Лучше всего избегать &quot;загрязнения&quot; глобального масштаба переменными,которые должны быть локальными для сценария.</target>
        </trans-unit>
        <trans-unit id="d55327c58055d26684cdaa59dbf53b5743e7d61a" translate="yes" xml:space="preserve">
          <source>It may facilitate identifying symbols when one is observed during debugging.</source>
          <target state="translated">Это может облегчить идентификацию символов,когда они наблюдаются во время отладки.</target>
        </trans-unit>
        <trans-unit id="114d866dd6678baad5a769edfd94f8aa8e3b81d5" translate="yes" xml:space="preserve">
          <source>It must be a Node module loadable from the config file where it appears. Usually, this means you should install the parser package separately using npm.</source>
          <target state="translated">Это должен быть узловой модуль,загружаемый из конфигурационного файла,где он появляется.Обычно это означает,что вы должны установить парсерный пакет отдельно,используя npm.</target>
        </trans-unit>
        <trans-unit id="a5cdcf6bed6964b65ce5ab2c443baa4370ca8d8b" translate="yes" xml:space="preserve">
          <source>It must conform to the &lt;a href=&quot;../developer-guide/working-with-custom-parsers&quot;&gt;parser interface&lt;/a&gt;.</source>
          <target state="translated">Он должен соответствовать &lt;a href=&quot;../developer-guide/working-with-custom-parsers&quot;&gt;интерфейсу парсера&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="41cebf36bc0a3258b56f36013f221f214f448509" translate="yes" xml:space="preserve">
          <source>It must conform to the &lt;a href=&quot;../developer-guide/working-with-plugins#working-with-custom-parsers&quot;&gt;parser interface&lt;/a&gt;.</source>
          <target state="translated">Он должен соответствовать &lt;a href=&quot;../developer-guide/working-with-plugins#working-with-custom-parsers&quot;&gt;интерфейсу парсера&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a1ce3c0824edccda40eb77de3e46b4d5093077cf" translate="yes" xml:space="preserve">
          <source>It normalizes the &lt;code&gt;plugins&lt;/code&gt; setting to align short names. (e.g., &lt;code&gt;eslint-plugin-foo&lt;/code&gt; &amp;rarr; &lt;code&gt;foo&lt;/code&gt;)</source>
          <target state="translated">Он нормализует настройку &lt;code&gt;plugins&lt;/code&gt; для выравнивания коротких имен. (например, &lt;code&gt;eslint-plugin-foo&lt;/code&gt; &amp;rarr; &lt;code&gt;foo&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="872a6d1d47a0faae8824b1198773c190399d07d6" translate="yes" xml:space="preserve">
          <source>It resolves and merges &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;overrides&lt;/code&gt; settings into the top level configuration.</source>
          <target state="translated">Он разрешает и объединяет &lt;code&gt;extends&lt;/code&gt; и &lt;code&gt;overrides&lt;/code&gt; настройки в конфигурации верхнего уровня.</target>
        </trans-unit>
        <trans-unit id="72b830ef676fd251fbadf6dacaf273749a61a833" translate="yes" xml:space="preserve">
          <source>It resolves the &lt;code&gt;parser&lt;/code&gt; setting to absolute paths.</source>
          <target state="translated">Он разрешает настройку &lt;code&gt;parser&lt;/code&gt; на абсолютные пути.</target>
        </trans-unit>
        <trans-unit id="cf3f5af0d35e26dd178828257b423e55cf86a169" translate="yes" xml:space="preserve">
          <source>It will not catch blacklisted identifiers that are:</source>
          <target state="translated">Он не поймает идентификаторы,внесенные в черный список:</target>
        </trans-unit>
        <trans-unit id="37f458ad448a48098e69ff1ee2fa152a28acc21d" translate="yes" xml:space="preserve">
          <source>It will not catch disallowed identifiers that are:</source>
          <target state="translated">Он не будет ловить запрещенные идентификаторы:</target>
        </trans-unit>
        <trans-unit id="f5d0d8c3a73df7cb32016f4fcb17e2f5afe0755f" translate="yes" xml:space="preserve">
          <source>It's a common mistake in JavaScript to create an object with just a setter for a property but never have a corresponding getter defined for it. Without a getter, you cannot read the property, so it ends up not being used.</source>
          <target state="translated">Частой ошибкой в JavaScript является создание объекта,для которого только задан сеттер для свойства,но никогда не задан соответствующий сеттер для него.Без геттера невозможно прочитать свойство,поэтому оно в конечном итоге не используется.</target>
        </trans-unit>
        <trans-unit id="9bc2aa041aeca24b1e83bce8e14db39165127131" translate="yes" xml:space="preserve">
          <source>It's a common mistake in JavaScript to use a conditional expression to select between two Boolean values instead of using ! to convert the test to a Boolean. Here are some examples:</source>
          <target state="translated">Распространенной ошибкой в JavaScript является использование условного выражения для выбора между двумя булевыми значениями вместо использования ! для преобразования теста в булевую.Вот несколько примеров:</target>
        </trans-unit>
        <trans-unit id="1540ef4737be0d6ff417a0782976005f83977b1f" translate="yes" xml:space="preserve">
          <source>It's also possible to manually create a new wrapper instance:</source>
          <target state="translated">Также можно вручную создать новый экземпляр обертки:</target>
        </trans-unit>
        <trans-unit id="38c9441170509492ba24ec2876918c292c10f2ce" translate="yes" xml:space="preserve">
          <source>It's also safe to disable this rule when using TypeScript because TypeScript's compiler already checks for duplicate function implementations.</source>
          <target state="translated">Также безопасно отключить это правило при использовании TypeScript,потому что компилятор TypeScript уже проверяет наличие дублирующих реализаций функций.</target>
        </trans-unit>
        <trans-unit id="db4f5e50534780f1446698505a2d5bbe87d770d4" translate="yes" xml:space="preserve">
          <source>It's considered a best practice to avoid initializing variables to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">Рекомендуется избегать инициализации переменных значением &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b947e8368ebaac8be7eb45d05db7c278b4d8d20" translate="yes" xml:space="preserve">
          <source>It's considered a good practice to avoid using &lt;code&gt;eval()&lt;/code&gt; in JavaScript. There are security and performance implications involved with doing so, which is why many linters (including ESLint) recommend disallowing &lt;code&gt;eval()&lt;/code&gt;. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.</source>
          <target state="translated">Считается хорошей практикой избегать использования &lt;code&gt;eval()&lt;/code&gt; в JavaScript. Это влияет на безопасность и производительность, поэтому многие линтеры (в том числе ESLint) рекомендуют запретить &lt;code&gt;eval()&lt;/code&gt; . Однако есть и другие способы передать строку и интерпретировать ее как код JavaScript, вызывающий аналогичные проблемы.</target>
        </trans-unit>
        <trans-unit id="918a92ed2fd168a3c3cdb4b8edf6fc35db93de45" translate="yes" xml:space="preserve">
          <source>It's hard to tell, but there are two spaces between &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt;. Multiple spaces such as this are generally frowned upon in favor of single spaces:</source>
          <target state="translated">Трудно сказать, но между &lt;code&gt;foo&lt;/code&gt; и &lt;code&gt;===&lt;/code&gt; есть два пробела . Множественные пробелы, такие как это, обычно не одобряются в пользу одиночных пробелов:</target>
        </trans-unit>
        <trans-unit id="b430d90d24691524aa348af6d5cc4d1cefef18fc" translate="yes" xml:space="preserve">
          <source>It's less common to use &lt;code&gt;new&lt;/code&gt; and not store the result, such as:</source>
          <target state="translated">Реже использовать &lt;code&gt;new&lt;/code&gt; и не сохранять результат, например:</target>
        </trans-unit>
        <trans-unit id="d714e9087d5b54ecca2b51569eb95d74ddf8334f" translate="yes" xml:space="preserve">
          <source>It's possible to create functions in JavaScript using the &lt;code&gt;Function&lt;/code&gt; constructor, such as:</source>
          <target state="translated">С помощью конструктора &lt;code&gt;Function&lt;/code&gt; можно создавать функции в JavaScript , например:</target>
        </trans-unit>
        <trans-unit id="ee85d43b1ef036dbda6ac1ecca68ca0ebe5218b1" translate="yes" xml:space="preserve">
          <source>It's possible to create multiline strings in JavaScript by using a slash before a newline, such as:</source>
          <target state="translated">В JavaScript можно создавать многострочные строки,используя косую черту перед новой строкой,например:</target>
        </trans-unit>
        <trans-unit id="eef00365692deaf723e678d24f89a72996bca75d" translate="yes" xml:space="preserve">
          <source>It's possible to have a class method which doesn't use &lt;code&gt;this&lt;/code&gt;, such as:</source>
          <target state="translated">Возможно иметь метод класса, который не использует &lt;code&gt;this&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="338c73acf937231c9f586f241d1a166618a1a2de" translate="yes" xml:space="preserve">
          <source>It's possible to share multiple configs in the same npm package. You can specify a default config for the package by following the directions in the first section. You can specify additional configs by simply adding a new file to your npm package and then referencing it from your ESLint config.</source>
          <target state="translated">Возможно совместное использование нескольких конфигураций в одном npm-пакете.Вы можете указать конфигурацию по умолчанию для пакета,следуя инструкциям первого раздела.Вы можете указать дополнительные конфигы,просто добавив новый файл в ваш пакет npm и затем обратившись к нему из вашего ESLint-конфигуратора.</target>
        </trans-unit>
        <trans-unit id="232ff89a49d744909e74bfbe6f3a0152ca2f07e5" translate="yes" xml:space="preserve">
          <source>It's therefore unnecessary to initialize a variable to &lt;code&gt;undefined&lt;/code&gt;, such as:</source>
          <target state="translated">Поэтому нет необходимости инициализировать переменную значением &lt;code&gt;undefined&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="6700e2ff03beeb48145f7ff39dce207f42ed620a" translate="yes" xml:space="preserve">
          <source>It's unnecessary to concatenate two strings together, such as:</source>
          <target state="translated">Нет необходимости соединять две струны вместе,например:</target>
        </trans-unit>
        <trans-unit id="bcf1e0519c1e3f74f5179a17cad7d7e59f2d0a7d" translate="yes" xml:space="preserve">
          <source>It's unnecessary to use computed properties with literals such as:</source>
          <target state="translated">Нет необходимости использовать вычисленные свойства с такими буквами,как..:</target>
        </trans-unit>
        <trans-unit id="56d6447c476a3f8a52dcf546edf453aff97884dd" translate="yes" xml:space="preserve">
          <source>It's up to the plugin to decide if it needs to return just one part, or multiple pieces. For example in the case of processing &lt;code&gt;.html&lt;/code&gt; files, you might want to return just one item in the array by combining all scripts, but for &lt;code&gt;.md&lt;/code&gt; file where each JavaScript block might be independent, you can return multiple items.</source>
          <target state="translated">Плагин должен решить, нужно ли возвращать только одну часть или несколько частей. Например, в случае обработки файлов &lt;code&gt;.html&lt;/code&gt; вы можете захотеть вернуть только один элемент в массиве, объединив все сценарии, но для файла &lt;code&gt;.md&lt;/code&gt; , где каждый блок JavaScript может быть независимым, вы можете вернуть несколько элементов.</target>
        </trans-unit>
        <trans-unit id="6560f835b7a7d5870e94eb9b41e3fcd77d90d7e8" translate="yes" xml:space="preserve">
          <source>JSCS allows you to specify a configuration file to use on the command line using either &lt;code&gt;--config&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt;, such as:</source>
          <target state="translated">JSCS позволяет указать файл конфигурации для использования в командной строке с помощью &lt;code&gt;--config&lt;/code&gt; или &lt;code&gt;-c&lt;/code&gt; , например:</target>
        </trans-unit>
        <trans-unit id="ad2824b434b68a13856ffaff984918c67213b72f" translate="yes" xml:space="preserve">
          <source>JSCS uses the &lt;code&gt;--fix&lt;/code&gt; option to apply automatic fixes to code:</source>
          <target state="translated">JSCS использует параметр &lt;code&gt;--fix&lt;/code&gt; для автоматического исправления кода:</target>
        </trans-unit>
        <trans-unit id="7e6a7de74786bb8a06e6cd1f198e6bb251b32a02" translate="yes" xml:space="preserve">
          <source>JSCS: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireNewlineBeforeSingleStatementsInIf&quot;&gt;requireNewlineBeforeSingleStatementsInIf&lt;/a&gt;</source>
          <target state="translated">JSCS: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireNewlineBeforeSingleStatementsInIf&quot;&gt;requireNewlineBeforeSingleStatementsInIf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eb066eaad6fec2a6a994996f176b5cede7d0c117" translate="yes" xml:space="preserve">
          <source>JSDoc</source>
          <target state="translated">JSDoc</target>
        </trans-unit>
        <trans-unit id="03371684afaf55d8f3d68e5dc095125a09ff3cd3" translate="yes" xml:space="preserve">
          <source>JSON whitespace issues</source>
          <target state="translated">Проблемы пробелов в JSON</target>
        </trans-unit>
        <trans-unit id="ae37798c9273d9a9a11bbfcf191ad17fc943238e" translate="yes" xml:space="preserve">
          <source>JSX attribute values can contain string literals, which are delimited with single or double quotes.</source>
          <target state="translated">Значения JSX-атрибутов могут содержать строковые литералы,которые разделены одинарными или двойными кавычками.</target>
        </trans-unit>
        <trans-unit id="8cb39ed38ed1f1854a0f052be116e2d4d4ed3892" translate="yes" xml:space="preserve">
          <source>JSX exception</source>
          <target state="translated">JSX исключение</target>
        </trans-unit>
        <trans-unit id="3755f3f206953314cab133719791d70c7c568127" translate="yes" xml:space="preserve">
          <source>Jasmine</source>
          <target state="translated">Jasmine</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="aeb477733ef3bd24e40cc3ef2f023ec0e75bb981" translate="yes" xml:space="preserve">
          <source>JavaScript Scoping and Hoisting</source>
          <target state="translated">Скрипт JavaScript Скейнинг и подъем</target>
        </trans-unit>
        <trans-unit id="35fd2acb7480cdbfc20e463c2d778164a28c3af8" translate="yes" xml:space="preserve">
          <source>JavaScript Semicolon Insertion</source>
          <target state="translated">Вставка точки с запятой на JavaScript</target>
        </trans-unit>
        <trans-unit id="a1533b7dece4ef1e890cbfd9e9b05d2df5893150" translate="yes" xml:space="preserve">
          <source>JavaScript allows for placing unnecessary spaces between an expression and the closing semicolon.</source>
          <target state="translated">JavaScript позволяет разместить лишние пробелы между выражением и закрывающей точкой с запятой.</target>
        </trans-unit>
        <trans-unit id="fb3776e4f2a012989a09983f23fbfa42da091730" translate="yes" xml:space="preserve">
          <source>JavaScript allows operands of ternary expressions to be separated by newlines, which can improve the readability of your program.</source>
          <target state="translated">JavaScript позволяет разделить операнды тернарных выражений на новые строки,что может улучшить читабельность вашей программы.</target>
        </trans-unit>
        <trans-unit id="70238e7446b2c14f3c63ee52342d01ab306e0ac0" translate="yes" xml:space="preserve">
          <source>JavaScript allows the omission of curly braces when a block contains only one statement. However, it is considered by many to be best practice to &lt;em&gt;never&lt;/em&gt; omit curly braces around blocks, even when they are optional, because it can lead to bugs and reduces code clarity. So the following:</source>
          <target state="translated">JavaScript позволяет опускать фигурные скобки, когда блок содержит только один оператор. Однако многие считают лучшей практикой &lt;em&gt;никогда не&lt;/em&gt; опускать фигурные скобки вокруг блоков, даже если они не являются обязательными, поскольку это может привести к ошибкам и ухудшить ясность кода. Итак, следующее:</target>
        </trans-unit>
        <trans-unit id="874615b72be77374791ea953ea46256b48a8b2d9" translate="yes" xml:space="preserve">
          <source>JavaScript allows the omission of parentheses when invoking a function via the &lt;code&gt;new&lt;/code&gt; keyword and the constructor has no arguments. However, some coders believe that omitting the parentheses is inconsistent with the rest of the language and thus makes code less clear.</source>
          <target state="translated">JavaScript позволяет опускать круглые скобки при вызове функции через ключевое слово &lt;code&gt;new&lt;/code&gt; , а конструктор не имеет аргументов. Однако некоторые программисты считают, что отсутствие скобок несовместимо с остальной частью языка и, таким образом, делает код менее понятным.</target>
        </trans-unit>
        <trans-unit id="1b3cd75cba9ae18b5f809b6e802a6ac27d7d0cb6" translate="yes" xml:space="preserve">
          <source>JavaScript allows whitespace between objects and their properties. However, inconsistent spacing can make code harder to read and can lead to errors.</source>
          <target state="translated">JavaScript позволяет пробела между объектами и их свойствами.Однако непоследовательные промежутки могут затруднить чтение кода и привести к ошибкам.</target>
        </trans-unit>
        <trans-unit id="3dc87ecb051dcb25ce39847b91018535b39fdc05" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to define strings in one of three ways: double quotes, single quotes, and backticks (as of ECMAScript 6). For example:</source>
          <target state="translated">JavaScript позволяет определять строки одним из трех способов:двойные кавычки,одиночные кавычки и черные метки (как в ECMAScript 6).Например:</target>
        </trans-unit>
        <trans-unit id="d5c94ad5d9baaf1eef18b221f414ea08803b2b2b" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to place newlines before or after a dot in a member expression.</source>
          <target state="translated">JavaScript позволяет размещать новые строки до или после точки в выражении члена.</target>
        </trans-unit>
        <trans-unit id="ff9324f42b811ab6297f7a807c024f230020aaf3" translate="yes" xml:space="preserve">
          <source>JavaScript allows you to place unnecessary spaces before or after a semicolon.</source>
          <target state="translated">JavaScript позволяет разместить лишние пробелы до или после точки с запятой.</target>
        </trans-unit>
        <trans-unit id="38dc43a9932415ace083692ab15fe2efa6e79340" translate="yes" xml:space="preserve">
          <source>JavaScript doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as &lt;strong&gt;automatic semicolon insertion (ASI)&lt;/strong&gt; and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:</source>
          <target state="translated">JavaScript не требует точки с запятой в конце каждого оператора. Во многих случаях движок JavaScript может определить, что точка с запятой должна быть в определенном месте, и автоматически добавит ее. Эта функция известна как &lt;strong&gt;автоматическая вставка точки с запятой (ASI)&lt;/strong&gt; и считается одной из наиболее спорных функций JavaScript. Например, допустимы обе следующие строки:</target>
        </trans-unit>
        <trans-unit id="2cecfbaf09bf74a3e6308e2394b0e0e42e4f3694" translate="yes" xml:space="preserve">
          <source>JavaScript environments contain a number of built-in global variables, such as &lt;code&gt;window&lt;/code&gt; in browsers and &lt;code&gt;process&lt;/code&gt; in Node.js. In almost all cases, you don't want to assign a value to these global variables as doing so could result in losing access to important functionality. For example, you probably don't want to do this in browser code:</source>
          <target state="translated">Среды JavaScript содержат ряд встроенных глобальных переменных, таких как &lt;code&gt;window&lt;/code&gt; в браузерах и &lt;code&gt;process&lt;/code&gt; в Node.js. Почти во всех случаях вы не хотите присваивать значение этим глобальным переменным, так как это может привести к потере доступа к важным функциям. Например, вы, вероятно, не захотите делать это в коде браузера:</target>
        </trans-unit>
        <trans-unit id="2bf5eedeafd607eaa45b9a97d92f8d8ae4ea268f" translate="yes" xml:space="preserve">
          <source>JavaScript functions can be written as a FunctionDeclaration &lt;code&gt;function foo() { ... }&lt;/code&gt; or as a FunctionExpression &lt;code&gt;var foo = function() { ... };&lt;/code&gt;. While a JavaScript interpreter might tolerate it, overwriting/reassigning a function written as a FunctionDeclaration is often indicative of a mistake or issue.</source>
          <target state="translated">Функции JavaScript могут быть записаны как FunctionDeclaration &lt;code&gt;function foo() { ... }&lt;/code&gt; или как FunctionExpression &lt;code&gt;var foo = function() { ... };&lt;/code&gt; , Хотя интерпретатор JavaScript может терпеть это, перезапись / переназначение функции, написанной как FunctionDeclaration, часто указывает на ошибку или проблему.</target>
        </trans-unit>
        <trans-unit id="46aa43f956749763c4c77aef295237374a62c29e" translate="yes" xml:space="preserve">
          <source>JavaScript has a lot of language features, and not everyone likes all of them. As a result, some projects choose to disallow the use of certain language features altogether. For instance, you might decide to disallow the use of &lt;code&gt;try-catch&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt;, or you might decide to disallow the use of the &lt;code&gt;in&lt;/code&gt; operator.</source>
          <target state="translated">В JavaScript есть много языковых функций, и не всем они нравятся. В результате некоторые проекты решают полностью запретить использование определенных языковых функций. Например, вы можете решить запретить использование &lt;code&gt;try-catch&lt;/code&gt; или &lt;code&gt;class&lt;/code&gt; , или вы можете решить запретить использование оператора &lt;code&gt;in&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4b4a005b83e68cac28ad34d043efe8c63977c815" translate="yes" xml:space="preserve">
          <source>JavaScript is unique amongst the C-like languages in that it doesn't require semicolons at the end of each statement. In many cases, the JavaScript engine can determine that a semicolon should be in a certain spot and will automatically add it. This feature is known as &lt;strong&gt;automatic semicolon insertion (ASI)&lt;/strong&gt; and is considered one of the more controversial features of JavaScript. For example, the following lines are both valid:</source>
          <target state="translated">JavaScript уникален среди языков C-подобных тем, что не требует точки с запятой в конце каждого оператора. Во многих случаях движок JavaScript может определить, что точка с запятой должна быть в определенном месте, и автоматически добавит ее. Эта функция известна как &lt;strong&gt;автоматическая вставка точки с запятой (ASI)&lt;/strong&gt; и считается одной из наиболее спорных функций JavaScript. Например, допустимы обе следующие строки:</target>
        </trans-unit>
        <trans-unit id="ec241f3f76e7823d627bd4584bd71234938ed3c6" translate="yes" xml:space="preserve">
          <source>JavaScript provides shorthand operators that combine variable assignment and some simple mathematical operations. For example, &lt;code&gt;x = x + 4&lt;/code&gt; can be shortened to &lt;code&gt;x += 4&lt;/code&gt;. The supported shorthand forms are as follows:</source>
          <target state="translated">JavaScript предоставляет сокращенные операторы, сочетающие присвоение переменных и некоторые простые математические операции. Например, &lt;code&gt;x = x + 4&lt;/code&gt; можно сократить до &lt;code&gt;x += 4&lt;/code&gt; . Поддерживаются следующие сокращенные формы:</target>
        </trans-unit>
        <trans-unit id="47c3f29689bdd2ef62ccda2e081bc789ad36a502" translate="yes" xml:space="preserve">
          <source>JavaScript suspends the control flow statements of &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; blocks until the execution of &lt;code&gt;finally&lt;/code&gt; block finishes. So, when &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, or &lt;code&gt;continue&lt;/code&gt; is used in &lt;code&gt;finally&lt;/code&gt;, control flow statements inside &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt; are overwritten, which is considered as unexpected behavior. Such as:</source>
          <target state="translated">JavaScript приостанавливает выполнение операторов потока управления блоков &lt;code&gt;try&lt;/code&gt; и &lt;code&gt;catch&lt;/code&gt; до завершения выполнения блока &lt;code&gt;finally&lt;/code&gt; . Таким образом, когда &lt;code&gt;return&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; или &lt;code&gt;continue&lt;/code&gt; используются в &lt;code&gt;finally&lt;/code&gt; , операторы потока управления внутри &lt;code&gt;try&lt;/code&gt; и &lt;code&gt;catch&lt;/code&gt; перезаписываются, что считается неожиданным поведением. Такие как:</target>
        </trans-unit>
        <trans-unit id="0bed567369bc5dad154764ff85e0f62d5a508f04" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;confirm&lt;/code&gt;, and &lt;code&gt;prompt&lt;/code&gt; functions are widely considered to be obtrusive as UI elements and should be replaced by a more appropriate custom UI implementation. Furthermore, &lt;code&gt;alert&lt;/code&gt; is often used while debugging code, which should be removed before deployment to production.</source>
          <target state="translated">Функции &lt;code&gt;alert&lt;/code&gt; , &lt;code&gt;confirm&lt;/code&gt; и &lt;code&gt;prompt&lt;/code&gt; JavaScript широко считаются навязчивыми элементами пользовательского интерфейса, и их следует заменить более подходящей реализацией пользовательского интерфейса. Кроме того, при отладке кода часто используется &lt;code&gt;alert&lt;/code&gt; , которое следует удалить перед развертыванием в производственной среде.</target>
        </trans-unit>
        <trans-unit id="bb36d203e1e163e1a6bae5dfbd3a4757283a3d47" translate="yes" xml:space="preserve">
          <source>JavaScript's &lt;code&gt;eval()&lt;/code&gt; function is potentially dangerous and is often misused. Using &lt;code&gt;eval()&lt;/code&gt; on untrusted code can open a program up to several different injection attacks. The use of &lt;code&gt;eval()&lt;/code&gt; in most contexts can be substituted for a better, alternative approach to a problem.</source>
          <target state="translated">Функция &lt;code&gt;eval()&lt;/code&gt; JavaScript потенциально опасна и часто используется неправильно. Использование &lt;code&gt;eval()&lt;/code&gt; в ненадежном коде может открыть программу для нескольких различных инъекционных атак. Использование &lt;code&gt;eval()&lt;/code&gt; в большинстве случаев может заменить лучший альтернативный подход к проблеме.</target>
        </trans-unit>
        <trans-unit id="ff0382e972b4c38f7e98ab4c1c45d9893b525347" translate="yes" xml:space="preserve">
          <source>JavaScript: Don&amp;rsquo;t Reassign Your Function Arguments</source>
          <target state="translated">JavaScript: не переназначайте аргументы функции</target>
        </trans-unit>
        <trans-unit id="1ca76be7b84d714e17e61b65c84bec4810f63dd5" translate="yes" xml:space="preserve">
          <source>Javascript</source>
          <target state="translated">Javascript</target>
        </trans-unit>
        <trans-unit id="de938f1548a4251b63d23119145ba2c835fe9fb6" translate="yes" xml:space="preserve">
          <source>Just as developers might type &lt;code&gt;-a + b&lt;/code&gt; when they mean &lt;code&gt;-(a + b)&lt;/code&gt; for the negative of a sum, they might type &lt;code&gt;!key in object&lt;/code&gt; by mistake when they almost certainly mean &lt;code&gt;!(key in object)&lt;/code&gt; to test that a key is not in an object.</source>
          <target state="translated">Так же, как разработчики могут ввести &lt;code&gt;-a + b&lt;/code&gt; когда они имеют в виду &lt;code&gt;-(a + b)&lt;/code&gt; для отрицательного значения суммы, они могут по ошибке ввести &lt;code&gt;!key in object&lt;/code&gt; , когда они почти наверняка имеют в виду &lt;code&gt;!(key in object)&lt;/code&gt; чтобы проверить, что ключ не в объекте.</target>
        </trans-unit>
        <trans-unit id="000a2d9b669cfca9b9c610b40fd644d3f5bb04e7" translate="yes" xml:space="preserve">
          <source>Just as developers might type &lt;code&gt;-a + b&lt;/code&gt; when they mean &lt;code&gt;-(a + b)&lt;/code&gt; for the negative of a sum, they might type &lt;code&gt;!key in object&lt;/code&gt; by mistake when they almost certainly mean &lt;code&gt;!(key in object)&lt;/code&gt; to test that a key is not in an object. &lt;code&gt;!obj instanceof Ctor&lt;/code&gt; is similar.</source>
          <target state="translated">Так же, как разработчики могут ввести &lt;code&gt;-a + b&lt;/code&gt; когда они имеют в виду &lt;code&gt;-(a + b)&lt;/code&gt; для отрицательного значения суммы, они могут по ошибке ввести &lt;code&gt;!key in object&lt;/code&gt; , когда они почти наверняка имеют в виду &lt;code&gt;!(key in object)&lt;/code&gt; чтобы проверить, что ключ не в объекте. &lt;code&gt;!obj instanceof Ctor&lt;/code&gt; аналогичен.</target>
        </trans-unit>
        <trans-unit id="e7c5d4963c2bb1e89fc55db41dc9f08d57c55c03" translate="yes" xml:space="preserve">
          <source>Keep in mind that comments are technically not a part of the AST and are only attached to it on demand, i.e. when you call &lt;code&gt;getComments()&lt;/code&gt;.</source>
          <target state="translated">Имейте в виду, что комментарии технически не являются частью AST и прикрепляются к нему только по запросу, то есть когда вы вызываете &lt;code&gt;getComments()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c0cf9d5c180dc8564a0d7f4b2a8b48a106463c1f" translate="yes" xml:space="preserve">
          <source>Keep in mind that the results of this method are calculated on demand.</source>
          <target state="translated">Имейте в виду,что результаты этого метода рассчитываются по требованию.</target>
        </trans-unit>
        <trans-unit id="9bd26d701e8f6ce99367d708dc895d0600bdb131" translate="yes" xml:space="preserve">
          <source>Keep in mind that we have over 200 rules, and that is daunting both for end users and the ESLint team (who has to maintain them). As such, any new rules must be deemed of high importance to be considered for inclusion in ESLint.</source>
          <target state="translated">Имейте в виду,что у нас более 200 правил,и это пугает как конечных пользователей,так и команду ESLint (которая должна их поддерживать).Как таковые,любые новые правила должны считаться очень важными для рассмотрения на предмет включения в ESLint.</target>
        </trans-unit>
        <trans-unit id="fa5d51b19a07be0d8f7c43f2a968f97c27a9cb40" translate="yes" xml:space="preserve">
          <source>Keep your rule names as short as possible, use abbreviations where appropriate, and no more than four words.</source>
          <target state="translated">Держите названия правил как можно короче,используйте аббревиатуры там,где это уместно,и не более четырех слов.</target>
        </trans-unit>
        <trans-unit id="0f1567b40d5b2ede1e1ea5371f1e60b1c78c78b4" translate="yes" xml:space="preserve">
          <source>Keeping to one of these styles across a project's codebase can help with maintaining code consistency.</source>
          <target state="translated">Сохранение одного из этих стилей в кодовой базе проекта может помочь в поддержании согласованности кода.</target>
        </trans-unit>
        <trans-unit id="ede3a17a01c5c55ed695487d421a99c9eb323e43" translate="yes" xml:space="preserve">
          <source>Keywords are syntax elements of JavaScript, such as &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;. These identifiers have special meaning to the language and so often appear in a different color in code editors. As an important part of the language, style guides often refer to the spacing that should be used around keywords. For example, you might have a style guide that says keywords should be always be preceded by spaces, which would mean &lt;code&gt;if-else&lt;/code&gt; statements must look like this:</source>
          <target state="translated">Ключевые слова - это элементы синтаксиса JavaScript, такие как &lt;code&gt;function&lt;/code&gt; и &lt;code&gt;if&lt;/code&gt; . Эти идентификаторы имеют особое значение для языка и поэтому часто отображаются другим цветом в редакторах кода. Как важная часть языка руководства по стилю часто ссылаются на интервалы, которые следует использовать вокруг ключевых слов. Например, у вас может быть руководство по стилю, в котором сказано, что перед ключевыми словами всегда должны стоять пробелы, что означает, &lt;code&gt;if-else&lt;/code&gt; операторы if-else должны выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="04fdc186fe5b056bf0b371917035f93e70f4315f" translate="yes" xml:space="preserve">
          <source>Keywords are syntax elements of JavaScript, such as &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;. These keywords have special meaning to the language and so often appear in a different color in code editors. As an important part of the language, style guides often refer to the spacing that should be used around keywords. For example, you might have a style guide that says keywords should be always surrounded by spaces, which would mean &lt;code&gt;if-else&lt;/code&gt; statements must look like this:</source>
          <target state="translated">Ключевые слова - это элементы синтаксиса JavaScript, например &lt;code&gt;try&lt;/code&gt; и &lt;code&gt;if&lt;/code&gt; . Эти ключевые слова имеют особое значение для языка и поэтому часто отображаются другим цветом в редакторах кода. Как важная часть языка руководства по стилю часто ссылаются на интервалы, которые следует использовать вокруг ключевых слов. Например, у вас может быть руководство по стилю, в котором говорится, что ключевые слова всегда должны быть окружены пробелами, что означает, &lt;code&gt;if-else&lt;/code&gt; операторы if-else должны выглядеть следующим образом:</target>
        </trans-unit>
        <trans-unit id="616ae0e516f073c066a59a8a38d5b52110f5407c" translate="yes" xml:space="preserve">
          <source>Known Limitations</source>
          <target state="translated">Известные ограничения</target>
        </trans-unit>
        <trans-unit id="aefb9f3a1db6e7c07463bd61307df961e5c58166" translate="yes" xml:space="preserve">
          <source>Known issues these spaces cause:</source>
          <target state="translated">Известные проблемы,которые вызывают эти пространства:</target>
        </trans-unit>
        <trans-unit id="a5a5fafee83492d8b176cbbdd5bb0860a6fdbf28" translate="yes" xml:space="preserve">
          <source>Known limitations:</source>
          <target state="translated">Известные ограничения:</target>
        </trans-unit>
        <trans-unit id="2e1b2523d4a68ad42a3b6d5503d6d80ddf3b1ade" translate="yes" xml:space="preserve">
          <source>Labeled statements are only used in conjunction with labeled break and continue statements. ECMAScript has no goto statement.</source>
          <target state="translated">Пометчатые утверждения используются только в сочетании с пометками &quot;брейк&quot; и &quot;продолжение&quot;.В ECMAScript нет оператора goto.</target>
        </trans-unit>
        <trans-unit id="f4101de43a6ddffb71075f1f736064d12f1f6f81" translate="yes" xml:space="preserve">
          <source>Labeled statements in JavaScript are used in conjunction with &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; to control flow around multiple loops. For example:</source>
          <target state="translated">Отмеченные операторы в JavaScript используются вместе с &lt;code&gt;break&lt;/code&gt; и &lt;code&gt;continue&lt;/code&gt; управлять потоком по нескольким циклам. Например:</target>
        </trans-unit>
        <trans-unit id="578dee19c6502f01a038eb78b3e49185c558cf41" translate="yes" xml:space="preserve">
          <source>Labels that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring.</source>
          <target state="translated">Ярлыки,которые объявлены и нигде не используются в коде,скорее всего,являются ошибкой из-за неполного рефакторинга.</target>
        </trans-unit>
        <trans-unit id="b541cfe1ccb84d2c69d0625a99389540b77207ad" translate="yes" xml:space="preserve">
          <source>Language Options</source>
          <target state="translated">Варианты языка</target>
        </trans-unit>
        <trans-unit id="c83f2b161b8660b0f54cc1c267ca1f4032a63ad5" translate="yes" xml:space="preserve">
          <source>Large - Runs ESLint on JSHint</source>
          <target state="translated">Большой-работает ESLint на JSHint</target>
        </trans-unit>
        <trans-unit id="6237b22967da3f057cb71015bdcdfde4226ee27a" translate="yes" xml:space="preserve">
          <source>Last, it advances to the end.</source>
          <target state="translated">И последнее,оно продвигается до конца.</target>
        </trans-unit>
        <trans-unit id="9791177c6b357c99f38a6978d495bcc8f01ed2dd" translate="yes" xml:space="preserve">
          <source>Learn about &lt;a href=&quot;user-guide/configuring&quot;&gt;advanced configuration&lt;/a&gt; of ESLint.</source>
          <target state="translated">Узнайте о &lt;a href=&quot;user-guide/configuring&quot;&gt;расширенной настройке&lt;/a&gt; ESLint.</target>
        </trans-unit>
        <trans-unit id="cbbe2fab2ebf18de7304c94a0bc02843f5d36771" translate="yes" xml:space="preserve">
          <source>Less clear:</source>
          <target state="translated">Менее ясно:</target>
        </trans-unit>
        <trans-unit id="976713d5799583acf6a0e5a8fbc1bb4180537050" translate="yes" xml:space="preserve">
          <source>Let's fix Node.js Buffer API</source>
          <target state="translated">Давайте исправим Node.js Buffer API.</target>
        </trans-unit>
        <trans-unit id="b837d744af533d631032679a5d43e88b68690a08" translate="yes" xml:space="preserve">
          <source>Let's look at the following perfectly valid (but single line) code.</source>
          <target state="translated">Рассмотрим следующий совершенно корректный (но однострочный)код.</target>
        </trans-unit>
        <trans-unit id="230759061d18d6dc57a7ec18ba52827940445025" translate="yes" xml:space="preserve">
          <source>Level of indentation denotes the multiple of the indent specified. Example:</source>
          <target state="translated">Уровень отступа обозначает кратный указанному отступу.Пример:</target>
        </trans-unit>
        <trans-unit id="abe24f73a4adf73f80d772b8c813e00b0527dce6" translate="yes" xml:space="preserve">
          <source>Lexical declarations &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt;, as well as &lt;code&gt;class&lt;/code&gt; declarations, create variables that are block-scoped.</source>
          <target state="translated">Лексические объявления &lt;code&gt;const&lt;/code&gt; и &lt;code&gt;let&lt;/code&gt; , а также объявления &lt;code&gt;class&lt;/code&gt; создают переменные с блочной областью видимости.</target>
        </trans-unit>
        <trans-unit id="283e35c5290c66cc5d747cb923851a3eaf110a70" translate="yes" xml:space="preserve">
          <source>Lexically declared variables are shadowing properties of the global object, which might produce errors if a consuming script is using both the variable and the property.</source>
          <target state="translated">Лексически объявленные переменные являются теневыми свойствами глобального объекта,что может привести к ошибкам,если потребляющий скрипт использует и переменную,и свойство.</target>
        </trans-unit>
        <trans-unit id="2804cac1a3610e9d560401096d1b0ec1d1c27ea1" translate="yes" xml:space="preserve">
          <source>Lexically declared variables can produce a permanent Temporal Dead Zone (TDZ) if the initialization throws an exception. Even the &lt;code&gt;typeof&lt;/code&gt; check is not safe from TDZ reference exceptions.</source>
          <target state="translated">Лексически объявленные переменные могут создавать постоянную временную мертвую зону (TDZ), если инициализация вызывает исключение. Даже &lt;code&gt;typeof&lt;/code&gt; проверка не застрахована от эталонных Протяженны исключений.</target>
        </trans-unit>
        <trans-unit id="f225bdc0c179471d37c539bc0687e6c4f1ede246" translate="yes" xml:space="preserve">
          <source>Lexically declared variables cannot be conditionally created. A script cannot check for the existence of a variable and then create a new one. &lt;code&gt;var&lt;/code&gt; variables are also always created, but redeclarations do not cause runtime exceptions.</source>
          <target state="translated">Лексически объявленные переменные не могут быть созданы условно. Сценарий не может проверить наличие переменной, а затем создать новую. Переменные &lt;code&gt;var&lt;/code&gt; также всегда создаются, но повторные объявления не вызывают исключений во время выполнения.</target>
        </trans-unit>
        <trans-unit id="e80a36f53dbe317f96ffd3bade7375caa2f65f51" translate="yes" xml:space="preserve">
          <source>Lexically declared variables do not create properties on the global object, which is what a consuming script might expect.</source>
          <target state="translated">Лексически объявленные переменные не создают свойств на глобальном объекте,чего может ожидать потребляющий скрипт.</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">Лицензия MIT.</target>
        </trans-unit>
        <trans-unit id="576a19e712655d862677383bbd691c58cb28af93" translate="yes" xml:space="preserve">
          <source>Limit Cyclomatic Complexity (complexity)</source>
          <target state="translated">Предельная цикломатическая сложность (сложность)</target>
        </trans-unit>
        <trans-unit id="8063848dd725bd56f98d4d78213b9bcdc4a7dc13" translate="yes" xml:space="preserve">
          <source>Line Separator</source>
          <target state="translated">Сепаратор линии</target>
        </trans-unit>
        <trans-unit id="f92175557e0de68fd93e204cef5f084870a15ddc" translate="yes" xml:space="preserve">
          <source>Line comments can be positioned above or beside code. This rule helps teams maintain a consistent style.</source>
          <target state="translated">Комментарии в строке могут быть расположены над или рядом с кодом.Это правило помогает командам поддерживать последовательный стиль.</target>
        </trans-unit>
        <trans-unit id="a034b76db3a8cd859ca69ba997a2e5b89502c859" translate="yes" xml:space="preserve">
          <source>Lines beginning with &lt;code&gt;#&lt;/code&gt; are treated as comments and do not affect ignore patterns.</source>
          <target state="translated">Строки, начинающиеся с символа &lt;code&gt;#&lt;/code&gt; , рассматриваются как комментарии и не влияют на шаблоны игнорирования.</target>
        </trans-unit>
        <trans-unit id="1e1103eb32ea263486103b072ab0cb94ee3e35e9" translate="yes" xml:space="preserve">
          <source>Lines preceded by &lt;code&gt;!&lt;/code&gt; are negated patterns that re-include a pattern that was ignored by an earlier pattern.</source>
          <target state="translated">Строки, которым предшествует &lt;code&gt;!&lt;/code&gt; являются инвертированными шаблонами, которые повторно включают шаблон, который был проигнорирован более ранним шаблоном.</target>
        </trans-unit>
        <trans-unit id="3f0d8a162db289701cade2eb80b4a9ea2c54c41b" translate="yes" xml:space="preserve">
          <source>Lint files matched by &lt;code&gt;overrides[].files&lt;/code&gt; by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f72298540a2983a2b08fef6769548b72b554be" translate="yes" xml:space="preserve">
          <source>LintMessage type</source>
          <target state="translated">Тип сообщения LintMessage</target>
        </trans-unit>
        <trans-unit id="ebbbdc39aac054351c973b8696d4532462c04b7a" translate="yes" xml:space="preserve">
          <source>LintResult type</source>
          <target state="translated">тип LintResult</target>
        </trans-unit>
        <trans-unit id="b4e10ddd90309b99f26fe4ef3e11b979bcef032a" translate="yes" xml:space="preserve">
          <source>Linter</source>
          <target state="translated">Linter</target>
        </trans-unit>
        <trans-unit id="bd52ff0399c852f8ad0d3b77ab2cbeba60a0d700" translate="yes" xml:space="preserve">
          <source>Linter#defineParser</source>
          <target state="translated">Linter#defineParser</target>
        </trans-unit>
        <trans-unit id="b3ec5ecd25a2470772a54fc04ae781a897dc4ac5" translate="yes" xml:space="preserve">
          <source>Linter#defineRule</source>
          <target state="translated">Linter#defineRule</target>
        </trans-unit>
        <trans-unit id="ab2d970ff5589fa92fce8827e35e3cb27afbb239" translate="yes" xml:space="preserve">
          <source>Linter#defineRules</source>
          <target state="translated">Linter#defineRules</target>
        </trans-unit>
        <trans-unit id="c4067e92f7ce3c6ae4a3d5aee194da0f0c54b6d7" translate="yes" xml:space="preserve">
          <source>Linter#getRules</source>
          <target state="translated">Linter#getRules</target>
        </trans-unit>
        <trans-unit id="aaff2261febbb9366e58763b28e5e7c542a2f676" translate="yes" xml:space="preserve">
          <source>Linter#verify</source>
          <target state="translated">Linter#verify</target>
        </trans-unit>
        <trans-unit id="2e5cf5d2293ba06968be45b3f4addc313adecbc1" translate="yes" xml:space="preserve">
          <source>Linter#verifyAndFix()</source>
          <target state="translated">Linter#verifyAndFix()</target>
        </trans-unit>
        <trans-unit id="cec5cfe559583c5da1e9000641be0f2df5c73dd3" translate="yes" xml:space="preserve">
          <source>Linter#version/Linter.version</source>
          <target state="translated">Linter#version/Linter.version</target>
        </trans-unit>
        <trans-unit id="8740f6b1646315b108f5a7b7630739c109bdee42" translate="yes" xml:space="preserve">
          <source>Linting</source>
          <target state="translated">Linting</target>
        </trans-unit>
        <trans-unit id="6f0e0a2d089a5b32424b770572c725a6c435e42f" translate="yes" xml:space="preserve">
          <source>Linting completed successfully, but there are some linting errors</source>
          <target state="translated">Облицовка выполнена успешно,но есть некоторые ошибки в облицовке.</target>
        </trans-unit>
        <trans-unit id="97c9a7f39e6010cad2bf31168096d66c5530b646" translate="yes" xml:space="preserve">
          <source>Linting message objects have a deprecated &lt;code&gt;source&lt;/code&gt; property. This property &lt;strong&gt;will be removed&lt;/strong&gt; from linting messages in an upcoming breaking release. If you depend on this property, you should now use the &lt;code&gt;SourceCode&lt;/code&gt; instance provided by the linter.</source>
          <target state="translated">Объекты сообщений Linting имеют устаревшее свойство &lt;code&gt;source&lt;/code&gt; . Это свойство &lt;strong&gt;будет удалено&lt;/strong&gt; из сообщений линтинга в следующем выпуске. Если вы &lt;code&gt;SourceCode&lt;/code&gt; от этого свойства, теперь вы должны использовать экземпляр SourceCode, предоставленный линтером .</target>
        </trans-unit>
        <trans-unit id="c1213d86c311a55a32e3f6456710a05c9c2fe6f4" translate="yes" xml:space="preserve">
          <source>Linting nonexistent files from the command line is now a fatal error</source>
          <target state="translated">Удаление несуществующих файлов из командной строки теперь является фатальной ошибкой.</target>
        </trans-unit>
        <trans-unit id="a144df07dbce74479e8b92fdbe30e5e2b955fdd1" translate="yes" xml:space="preserve">
          <source>Linting was unsuccessful due to a fatal error (e.g. an invalid config file)</source>
          <target state="translated">Линтинг был неудачным из-за фатальной ошибки (например,неправильный конфигурационный файл).</target>
        </trans-unit>
        <trans-unit id="7c38fe4b5e5c8c9cd3ce408dd2302ed5b7c90528" translate="yes" xml:space="preserve">
          <source>Lints all JavaScript (including tests) and JSON</source>
          <target state="translated">Выводит все JavaScript (включая тесты)и JSON</target>
        </trans-unit>
        <trans-unit id="9859b39a8931642fd476002b377a57cd6f6500db" translate="yes" xml:space="preserve">
          <source>Listening for selectors in rules</source>
          <target state="translated">Прослушивание селекторов в правилах</target>
        </trans-unit>
        <trans-unit id="32758c6a32e39c1401c20a7c7526852af5d1a0a6" translate="yes" xml:space="preserve">
          <source>Loads a plugin from configuration object with specified name. Name can include plugin prefix (&quot;eslint-plugin-&quot;)</source>
          <target state="translated">Загружает плагин из объекта конфигурации с указанным именем.Имя может включать префикс плагина (&quot;eslint-plugin-&quot;).</target>
        </trans-unit>
        <trans-unit id="a89b90142250f6a97e005e05eeb2bc4cbcdeb3e4" translate="yes" xml:space="preserve">
          <source>Local Config File Resolution</source>
          <target state="translated">Разрешение локального конфигурационного файла</target>
        </trans-unit>
        <trans-unit id="bf880468615d510777cab4ad8eddc24def271ed4" translate="yes" xml:space="preserve">
          <source>Logical Operators: &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt;, &lt;code&gt;&quot;||&quot;&lt;/code&gt;</source>
          <target state="translated">Логические операторы: &lt;code&gt;&quot;&amp;amp;&amp;amp;&quot;&lt;/code&gt; , &lt;code&gt;&quot;||&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c3afad3c0cae14119bc8f48a27e6623f7df048b3" translate="yes" xml:space="preserve">
          <source>Looping over objects with a &lt;code&gt;for in&lt;/code&gt; loop will include properties that are inherited through the prototype chain. This behavior can lead to unexpected items in your for loop.</source>
          <target state="translated">Цикл по объектам с помощью цикла &lt;code&gt;for in&lt;/code&gt; будет включать свойства, которые наследуются через цепочку прототипов. Такое поведение может привести к появлению неожиданных элементов в вашем цикле for.</target>
        </trans-unit>
        <trans-unit id="c7cc822b9501098075842137a86406605e675538" translate="yes" xml:space="preserve">
          <source>MDN - Iterators and Generators</source>
          <target state="translated">MDN-итераторы и генераторы</target>
        </trans-unit>
        <trans-unit id="85f054c946360a1bdde533b30957e8ab936b4d2f" translate="yes" xml:space="preserve">
          <source>MDN Arithmetic Operators - Exponentiation</source>
          <target state="translated">Арифметические операторы MDN-Экспоненцирование</target>
        </trans-unit>
        <trans-unit id="655ec4d40e2d57c4c180cac4fe2d9b4340bb4d63" translate="yes" xml:space="preserve">
          <source>MDN Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e90f0d78176e3c84b42ca0c6d98e231385391cf" translate="yes" xml:space="preserve">
          <source>MDN setter</source>
          <target state="translated">сеттер MDN</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
