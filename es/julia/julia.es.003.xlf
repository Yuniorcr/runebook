<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="d0b4cc521b49bed6e4450ecc15f092c064bf90bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.clear!&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc187d5da3514be8d5988a9b1b1ee37daeb20f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.cluster_cookie&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea57013f47e8312c9efeeb131ec7fae6aaa0abea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.default_worker_pool&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5f4fa2c0745a79ebbcc63962e6be1b55e367a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.init_worker&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8755cf92a02f145f3a7d2cbca6a1f762f2b5a698" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.interrupt&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c157b6b7c0b8516d8dff3078f45f4eccb6ebd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.launch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e175dfcfb9c80b788fdf19750e209f0adb7da2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.manage&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e897fa0a56c5fa3f84b898a641e4a821c2f5d544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.myid&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049911e17f30f07f033358c7eb105db7f26c4b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.nprocs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967d118f93df83b53255c9aac153e6334715aabb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.nworkers&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755bea8161ff57c20be9a820529c01b3a3ce135f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.pmap&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dc3898ce4daa1524683b5e40d235094b7b9ca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.process_messages&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d51afc2be42e649b175d138077790cf06fca03f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.procs&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2217b1a55e63ad77d132fa3299033959dc9561b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remote&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e38cedbc188fe439c988d7970655f305937eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remote_do&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6483cbcc35b391a44dde1a76207e96669322efe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remotecall&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49eba2e771af3137010867f803cb07a33df48429" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remotecall_fetch&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db976210774329261b14a4c2f0506f08ec57daa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remotecall_wait&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386a249d0754315056ea4706616eb364946a720d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.remoteref_id&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cea0abc224fed93a83d3e483213637f1363ab1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.rmprocs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d566d70900bd21a645f08e693744750428a0a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.start_worker&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd736f9e653af86d73572b2a1f1876c2be65c3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.worker_id_from_socket&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e75ac7883af54d2b9fd455327edf61a408a5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Distributed.workers&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfb951ff690054824c048301d57297991157bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EltypeUnknown()&lt;/code&gt; if the type of elements yielded by the iterator is not known in advance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6841ddd2f54d9ea5050f6149b2dee0f28215dde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Exception&lt;/code&gt;s are thrown when an unexpected condition has occurred. The built-in &lt;code&gt;Exception&lt;/code&gt;s listed below all interrupt the normal flow of control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d418edc95501e6c78e19eebb0685e3cafe24bf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr&lt;/code&gt; objects contain two parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0953683025817b1d61b8410d5fd5780e5253b0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Expr&lt;/code&gt; objects may also be nested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91e898a7d605b3e9d27494d07c772317cc85fac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F.P&lt;/code&gt;: the permutation matrix of the pivot (&lt;a href=&quot;#LinearAlgebra.QRPivoted&quot;&gt;&lt;code&gt;QRPivoted&lt;/code&gt;&lt;/a&gt; only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3def7b9c679f69d1406677596d9d4d240b6aea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F.Q&lt;/code&gt;: the orthogonal/unitary matrix &lt;code&gt;Q&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df1e3a470a13d796e03bf35ef732f0b5d63e09d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F.R&lt;/code&gt;: the upper triangular matrix &lt;code&gt;R&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1683ac6a94d88b868f5b5bdf1fe71050580be57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F.p&lt;/code&gt;: the permutation vector of the pivot (&lt;a href=&quot;#LinearAlgebra.QRPivoted&quot;&gt;&lt;code&gt;QRPivoted&lt;/code&gt;&lt;/a&gt; only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bad3d6f701d090aed29123a4abcb55a7fe6494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;F&lt;/code&gt; further supports the following functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53e866b8e2660322288ab72a5358b38e31febac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWatching.poll_fd&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d16e518119ad5aa8250f8f9965f642746d616b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWatching.poll_file&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9304f4aad91718d66c09d1b7dc13b5e5c4a17ccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWatching.unwatch_folder&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654132dc2bde42843e0768885fbcca2aedc8ad8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWatching.watch_file&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7b70c555e3f849e6c6aaf6532793d2029a13b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FileWatching.watch_folder&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4df79cf56d686fa358683cdbf665f19474f66d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Future&lt;/code&gt;s and &lt;code&gt;RemoteChannel&lt;/code&gt;s are identified by fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a85ba6fda16d4a161426eb6e6b711425874592b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasEltype()&lt;/code&gt; if the element type is known, and &lt;a href=&quot;#Base.eltype&quot;&gt;&lt;code&gt;eltype&lt;/code&gt;&lt;/a&gt; would return a meaningful value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8567f0d6c3a35e8af695b823221757e0992da7e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasEltype()&lt;/code&gt; is the default, since iterators are assumed to implement &lt;a href=&quot;#Base.eltype&quot;&gt;&lt;code&gt;eltype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861709d68d6f5d740832ac70c94bb2534fff44b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasLength()&lt;/code&gt; if there is a fixed, finite length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8224f2e269d0d943bb0444991190ec10b030e98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasShape{N}()&lt;/code&gt; if there is a known length plus a notion of multidimensional shape (as for an array). In this case &lt;code&gt;N&lt;/code&gt; should give the number of dimensions, and the &lt;code&gt;axes&lt;/code&gt; function is valid for the iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075124e1d29ac8919af297d9d76c5ab4329c2f19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INTEGER*2&lt;/code&gt;, &lt;code&gt;LOGICAL*2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625aff8742b4e995cad43abf4db5550dc475d8fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INTEGER*4&lt;/code&gt;, &lt;code&gt;LOGICAL*4&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d72d1bfd38001f706e8227ab7bac5c712d5b6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INTEGER*8&lt;/code&gt;, &lt;code&gt;LOGICAL*8&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0808bd8be5e3811b12ab5d83a9b4267e02cc722a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IOContext&lt;/code&gt; provides a mechanism for passing output configuration settings among &lt;a href=&quot;#Base.show-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea895c7bf1cc50c9028e642a0c9ec860895dd0f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IdDict{K,V}()&lt;/code&gt; constructs a hash table using object-id as hash and &lt;code&gt;===&lt;/code&gt; as equality with keys of type &lt;code&gt;K&lt;/code&gt; and values of type &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7232c17f376bca4075c177a71c2b0d13737de8b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IndexStyle&lt;/code&gt; specifies the &quot;native indexing style&quot; for array &lt;code&gt;A&lt;/code&gt;. When you define a new &lt;a href=&quot;#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt; type, you can choose to implement either linear indexing (with &lt;a href=&quot;#Base.IndexLinear&quot;&gt;&lt;code&gt;IndexLinear&lt;/code&gt;&lt;/a&gt;) or cartesian indexing. If you decide to implement linear indexing, then you must set this trait for your array type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91615968e105a0c6476eee521b4983e76d208c5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Inf&lt;/code&gt; is equal to itself and greater than everything else except &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77bca87828e3046fd94de6899af80c067f6c160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InsertionSort&lt;/code&gt; is an O(n^2) stable sorting algorithm. It is efficient for very small &lt;code&gt;n&lt;/code&gt;, and is used internally by &lt;code&gt;QuickSort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1850b3409e3d1788889290aa481703e2da55d9fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instant&lt;/code&gt; types represent integer-based, machine representations of time as continuous timelines starting from an epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d5b7ed3bb9047758dcc242533df57fa6e88b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int32&lt;/code&gt; (UNIX), &lt;code&gt;UInt16&lt;/code&gt; (Windows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8943d79e1e3b7acc33a58583a975636c3426c194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int8&lt;/code&gt; (x86, x86_64), &lt;code&gt;UInt8&lt;/code&gt; (powerpc, arm)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6765a24477e3f8615f3e28f78b1186d06a092cac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int&lt;/code&gt; (UNIX), &lt;code&gt;Int32&lt;/code&gt; (Windows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6f714f571b021fd352b48da6987a509057ea62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float64&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2991a6c8bb819dffcc052b4162d1fd5f5cab1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@code_llvm&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b79c215eb513b400f071b1cadb570eca7bc12b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@code_lowered&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c816688564f1e45b9d25ea422506c4d649267e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@code_native&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6c2fa19c5a973125b0e79f9befca325c2881e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@code_typed&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222c4bdf5e1d6b35d1ab6290fbf97737a448613c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@code_warntype&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961ca615c24f2d8f5b34e3c551b0a6c1494fbf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@edit&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ece165c434985f1eeb60be517a5462995d0d80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@functionloc&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f444829494bdeaeaa09a084a5d387d1fed812d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@less&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ffe07b1e694b10152b2bbca770f379c7c0a3c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.@which&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087be9fc52ed756da4908c26109e36a07061acbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.clipboard&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e365405f7d44ac0b604df288a7d70e6e7164728b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.code_llvm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72e24d38292e1d1fc872bf78c655a5a54dae86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.code_native&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08ef93ad9ded13f34dc318a30fe8eceeace6cfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.code_warntype&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2651be3e72ff4bda1214b93e87b597ede942fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.edit&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239df254c2a96ae220a0359ca648931e9e921e3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.less&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cad97a8b4ae2f09ec68ea75095610be4e503137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.methodswith&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975f377dce1f1fdd53e15b4473c05edf2cee7ff9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.subtypes&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf97380cf47523a79c0d20d1345f118566b4687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.varinfo&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae2ef8d0b17d3531ea6e416dfc7297bfc0eafc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InteractiveUtils.versioninfo&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0635e4c27c54ecb591921e8ccdf5b2722ca4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IsInfinite()&lt;/code&gt; if the iterator yields values forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2a2345ac317f11e04af5254f28f8b8bdf2ea80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JULIA_GC_ALLOC_POOL&lt;/code&gt;, &lt;code&gt;JULIA_GC_ALLOC_OTHER&lt;/code&gt;, &lt;code&gt;JULIA_GC_ALLOC_PRINT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec622d8a2c00284a784ca3aac3881710619c9d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JULIA_NUM_THREADS&lt;/code&gt; must be defined before starting julia; defining it in &lt;code&gt;startup.jl&lt;/code&gt; is too late in the startup process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175d6b8d07e223c2402b4a8e0882536d3b314a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JULIA_PROJECT&lt;/code&gt; must be defined before starting julia; defining it in &lt;code&gt;startup.jl&lt;/code&gt; is too late in the startup process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492c3bb59937e9233340e9cd9bb4025b4d9f3dfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;K+L&lt;/code&gt; is the effective numerical rank of the matrix &lt;code&gt;[A; B]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5764426706e0ba2d7c24f9d47c5120fc7cc0a3ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;L&lt;/code&gt; (lower triangular) part of &lt;code&gt;LU&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2426f1c5c5987f92b34f42ebf7b92ef0f00aba13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.@githash_str&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb7239efc8952338125c6b254bd6d9b18d0a3da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.BlameOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df2408282ce294a3cf3db943760ee000445639a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.Buffer&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934859d1b5eb2b6d699a7c77d8aff9d18c04ed44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.CachedCredentials&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657ab8a49b43fc610054eecae6623744012af8d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.CheckoutOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043ed61dd79bc08ca45a1aa9d4528db9ffe68030" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.CloneOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95d7138cc6e878371dfd7ba922278a0e1173583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.CredentialPayload&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a001fbfbc9a57cfadb57b0f4826ddce98ed4810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.DescribeFormatOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3766c3fb9f1fd2696754197229ba7e501b1ca1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.DescribeOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a795c7260c0708eeb98dcc7f9caa817672e4d8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.DiffDelta&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90fe4306be21078314dded9ed443fc263d2d2a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.DiffFile&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d16124b8e34a730d0d12aec89046c6d0c5f365" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.DiffOptionsStruct&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64607b52b65086ec4fd852b3f7de10a4180517e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.FetchHead&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2c4b1c1e4eb8cea71477a3b75d1c79bed6db29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.FetchOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1189c1851ce8d2629322ec341814fa43c8aa1a89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitAnnotated&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7844ccb52667c83102980a13dc501344f6f00af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitBlame&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0630581613d6426e2e211f203de5b4208283d2f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitBlob&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2530bc19b748f12b9ef37426017c22b77254cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitCommit&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3463813bd01cf930a88dc6cf7436298a9410ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitHash&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad5e2c6775498e098ae6cd53d84e0197531f2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitObject&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905b48d2da0e1fcfb2fde182dd9ffe2b9b1c80a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitObject&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a98ca97507f7c2b85f1d70657bdd4ac81368a96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitRemote&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd5b55c3e5c708983fdd97a76e974e7586bcebd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitRemoteAnon&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d5a0b21e32047f25ac734c3e7c231e2810c91a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitRepo&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee80f5a75d278df37e03f503af02bc5ab31b70a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitRepoExt&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b05c607f95c402f75907a8dea06a75c08c865f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitRevWalker&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647eda053f246afdc2c8c983329efabb21f34406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitShortHash&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622145d7a6a7943273a3a3f636ad949664f645fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitSignature&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da396477d6b09a9fa6a45ccfc1fff28ae0a9041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitStatus&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d86983fdf288c74ef37a753262094e9d91bd5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitTag&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc843868c710dda5cd1fbd1f14f009b428a26c69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.GitTree&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a94f1b8571f64a35a4da814f1755bae095a8232" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.IndexEntry&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dae0d4fc561941de68609b1c844dd6ff3aeb6e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.IndexTime&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770a5c5e2f02aebe442185e299b562d27da8379a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.MergeOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd08e47a359488e83feeba6057937af6888e413e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.ProxyOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640df06ef6bf8a7b1916a16c3336741de028b393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.PushOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b856e89b325ed01271df8c900fcf07c544b587" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.RebaseOperation&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684e6047fc64770c4fbfab8160a9ddd25e74e08d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.RebaseOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12501afc017f5a7e3a1d2206512d33ed34c110d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.RemoteCallbacks&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf3de96ea31acaf2ce6e2c79cba6597ff686fd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.SSHCredential&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8eb4b73e32190561ca550056b2f1848dc6b0d18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.SignatureStruct&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e443c9a3f9d4d712c2eb872c0ac862737f036d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.StatusEntry&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a632d468d3fc6d3353ca7e80a7117ed9676680" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.StatusOptions&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deddac8e03c31037410546595b678fbd1062d20c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.StrArrayStruct&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9624ced7d8de90bd595a8a40d0810d35cfe1965c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.TimeStruct&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1a31c03fa450344f1a4599e7c7ecf3079760de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.UserPasswordCredential&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0e6b038a07609ee9735a1026025689b731fc67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.add!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bdf81b0b45e70fcc71095c0a08239825dfc1d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.add_fetch!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282f85b40574758eccd4e7ccc8c644e095dbb4f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.add_push!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa0fcc7d45a3ba36f85a78e506f97f3453421d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.addblob!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030593677d70c910c9591796317c438c0ddb8409" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.approve&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1259012a15ea188aef743c30092ddaea6a63fbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.author&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d9b6965a0a338c73a3b100db05367520245794" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.authors&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d3f7c85846482b91b850ec54dd932ab4f83a87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.branch!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a588cf91420099106838de7a05a41a483d51ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.branch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dfb0d4e0a5b3d4f983778b4c473473f07eea34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.checkout!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b41314e46b6de8120efa981feb3fbb2ede8764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.clone&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f4b6b070ff7c88f18434727dd852edd25a2de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.commit&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddfa7921e2f8d5309ff2ce9a39add1b31f45db0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.committer&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784005a2ae759e31e6ccf90587c10869c46dfa6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.count&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cdc0013d79a18baaafa4b7b7fd888faba81559" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.counthunks&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dbab44c565cb0d8a32953469cb3e97a2dc3a18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.create_branch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5524209ffb6d7892203bd7d5e58a3a23195ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.credentials_callback&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9bdbc062e10368629ca9587632bba808e3975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.credentials_cb&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f8a193c84840cddc83bb7e076ea147f4f3f0b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.default_signature&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd07955eb4860d150d281619c8266e92f32c8e58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.delete_branch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba7fd2552447b0a3dfbbbf60a0adce1d2269ddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.diff_files&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ce0d6eb45cc6b18be2aefeb0de0843209280f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.entryid&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032d0d62526a7ff4f62c1e38b3b463f617346673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.entrytype&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e617051ca37d6bb2ac27deeaded496a23524f73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.features&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ea98fbe443884c66987766cf2745750ebbd20f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.fetch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c544e6367a9033833bd7fcd843d3a813c9abd0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.fetch_refspecs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972aeba4a15c1f54a6cf396600422b781c5f7b7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.fetchhead_foreach_cb&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9895f87de697495d738ee0140a7abdb2bcd2c99f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.fetchheads&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffda69313244aaddf1ff2034acb19144fd56850d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.ffmerge!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25df34893a8ce5fc305e349b0bd94da5289f9d08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.filemode&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b6849de03fab7c19f7d14b097d5e56250d405d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.filename&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b957d50bff50f4356ed9008d88cbde6c2f6d915" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.fullname&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91a53b0978fb24bc62bac8d08c128ff10c8c45c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.git_url&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76888e3c55b7c0807c150d6b7c4067f9ac288443" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.gitdir&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e97b096170c9bed7bd8ae0870852c5442ae002" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.head!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca420a17b1e54efa5095312ace202f9ae61db7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.head&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cabf17a07de8c3edd7ad22323240f59c0e3702f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.head_oid&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235eb219c9376bee3ac8b5b3bcb93d578d990865" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.headname&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fb1180b3d715023ae015c7a10ef94eceb27ad6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.init&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c388f155166f704a7d6480b6c49f6c3dff5c90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.is_ancestor_of&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775c6554220ff361e62217eaa99c74bc78113f2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isbinary&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e90a39b6a591adc7ec253f59e2a509b42f6967f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.iscommit&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d909cf65a08088fd3cf8af55fd2384aa7c876ac6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isdiff&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13325f37778c15a1cffbd9aafa6ebc946491ca98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isdirty&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921612753eb4a4e775b1e25bac866c31ae912feb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isfilled&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9f4db2713bc0c389928bc7034eae8bc8cb9a6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isorphan&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939ecffa3a1c400b8d2afebe08a0a857ceb72534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.isset&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c10609716950bb7bf92163b3db2eea4b05348f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.iszero&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ede0d77aaf53ae5f4653daf82006e69e4c09b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.lookup_branch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b185b1b34815ce9e62001b76ffc83e088a6dcf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.map&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34097aace40abf37ed2d64f3f21ec4be03891372" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.merge!&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fae956760f3a7eb1ca4f691b9beca3030e887f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.merge_analysis&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9798af03d5437dfbdb308e14b991a7fdb1a536cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.merge_base&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ffacc8801ff26f59460e0e866c0d41414f5e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.message&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb9cf2596ebb73c23b99f034cbc5de703b167d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.mirror_callback&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304a98d5b29884a466fdf7fcf3d8ffe718040139" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.mirror_cb&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c0eff094a953ad8268c60b8f36859d50a9ed72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.name&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718f34067a248656411a8d982a2acd8b6f52c9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.need_update&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcda6b34e3caced788642cd7d662b3caafbdbcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.objtype&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863e9b793f85c2c66bc321c3264afb1fca2195a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.path&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f819482e8f69fd8069db31dc45e032ed33f778c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.peel&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f26e326ac164972197b72f573ac85470ac6bdf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.posixpath&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def69a1ffde3a6e898fafb93df9e4a20ac7a36fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.push!&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462f53e365ce2a25b0bb2150f41cb795d5801e15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.push&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae8956af0cbe446c6ccc9ba26f5fec04f6d859e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.push_head!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5931891abed765030b094655bae2df6dffa84740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.push_refspecs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93987095bb0ce0413ef56931991c06c9659358a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.raw&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e60b2051b7567c5c8869a2d9871fd88cb18482" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.read_tree!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c11796e0914e763da635427d729d2cdebf61f09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.rebase!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6421d6d8e29d0e608dddbbf62127d7ddc791fd2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.ref_list&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c33ac054c2ec28057fbb593d94bc97436db25a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.reftype&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de483893c281ec65bf8291cde1ed9d141c5ecb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.reject&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b5f37bbdc1ddc439ad36d5e06b51d3e0ad292d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.remotes&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f81b792f4112ce4e44d944f44ecdb76c56c9b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.remove!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0b22a2de29e8e9ea195100c5d932e015dd89cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.reset!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731de2af215421512e79a994d2599569d2bf52d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.reset&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb9c083ed7d1fe836423af8f5e6c6a2c62ebe28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.restore&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec75fa1729941f87202af70893ad6ef6e745de94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.revcount&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc4e8f3a2a5e587f3657947a6ccf35beea0277b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.set_remote_url&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1d9951ad0c9964b4b55e0dd6ce26074bc7581a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.shortname&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d506975eb7a2f0687d8ff4ffe06f3e6d0ce4589a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.snapshot&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2181fdeb3985992e1d3fb53faca28a84d3761ed1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.split_cfg_entry&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7540f770968448f8a1144b4f4d6975f90390b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.stage&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b2dd7881d6a1dfd773f45909da25fd861246a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.status&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7489536911c64447c345d9526675f9411c8c40a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.tag_create&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759ba42972a0ca0c7a492e5cba4bb1e315114a57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.tag_delete&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cdfef07572551d7d15b3528898e08466c76140" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.tag_list&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f9a3b7456fadc4413d4de447468dd56dae57f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.target&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba36f38ef07cf75fc45bfbd8946132f5d20f1ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.toggle&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f03239cb001d6ad2c02a23076a5b9dad88f2919" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.transact&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f05b149127be996034d043631006ab6844fadf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.treewalk&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b0d17e265870d37ca831117ce4e23abcce536d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.update!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70f07a6e5effd149e0ea03fd5a2f65a6d1527e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.upstream&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9492d3b0373ac3381740e84fcf57714e2b9e930b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.url&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47a6d1b314e2542527986c81721ad5ee6683901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.version&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf0f55568bfc749dc303536afa35e513e3bd957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.with&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a8c7e2ea1db3874b9044af4a53f0918687d221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.with_warn&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c18d0c0985b91ef3bdfac6c531ade1715968d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LibGit2.workdir&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f39a951efed13fc4943ab143633fdd632ce784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.RTLD_NOW&lt;/code&gt;Constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10b0ffbaec22c009e36cbd23e72ab58db0bcaf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlclose&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5ea2c75330661fcd4544fe7ebf6a132c6d83ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlext&lt;/code&gt;Constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc07c3a34adea6fb665bd80315d8ef19d58d024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlopen&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acdaf0cdea341c9001897171e91a209566c1910" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlopen_e&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c3f0c6c7a38704fdd209a4f41af98e31036dffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlsym&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db49b15dc2b3e88f8e2f3f686e2e0f1e63274c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.dlsym_e&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ac4d38f6f691c7616ad5788ced18b591e2ed03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Libdl.find_library&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc153a1a2299692ef6a70ceb369115a8961ab81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Adjoint&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84df53455bb146d5e337a510067ceb76ed418a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.asum&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b940bc4b4a2a77113fbb970be3d51bcf3114eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.blascopy!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a74d64aca0092f8d88bfd14da9886f8e8059190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.dotc&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99e933e5ef5d215cd318435a2c8d605ce495ee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.dotu&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14366ab6ca908faa00154fcc96cd7f081e9d246" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gbmv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a49bd2321fd1dc4ccbad0bd17cbc3e4af658e7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gbmv&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e347656a7d743406ac13e052b80adb48612ddfe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gemm!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40feea6de085bb27db4cc638357050d8cec9b19c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gemm&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91b4e4c81576b76279261f7259fd455bbacd636" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gemv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f3e9fcf7daa716d6924b24d223d80edbfff932" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.gemv&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724fc2ef699be7e3ba6d96562e1ab0c6bb5333c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.ger!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cd38478a176c035f65c55dda3825062ad981ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.her!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605520578cbc7706b99d8e6189fffce9612fcfae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.herk!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4708d53ac9b6f3896963b83aec9f9f90377b5241" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.herk&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95475385c571b840d691e243cf0d467bf2e43b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.iamax&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5991e72dcbcaf4ce0aabfe053c5ad28aa647d098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.nrm2&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9f078e9230d4d6764cd923225f059a7f5a4d63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.sbmv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b689f180ca296952235d2d4505b656303140e6aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.sbmv&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519c7072bf706f8dc637abc70640239b204a5df7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.scal!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c974ba0152ddc9d7e4bb1fce6f657a1dfca38d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.scal&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aee580318afd552f9ab531529fbff7083fe0e39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.set_num_threads&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a238360c789cc3a9eab637809f85f1e434dcdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.symm!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b059285e0b4ebdf51f085510b22f931b4cff192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.symm&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a552381dcbb8da3601e31bc8ec97ab495f4356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.symv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c44c4746e88c54030d3837b21eace2ec24250c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.symv&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4842ca27a4318903146e7f42821e5f4ba9a6ac74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.syr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf5316b0d0bcd6d3abef5135260edf5093ae666" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.syrk!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493563dfaff8cc91e61dc1436d8c79989b20c6e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.syrk&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b77b7f5b3130684e147e9d353c4855df6c268ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trmm!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379011464bf26ad3e1688f935db3aa15caf03d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trmm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04fbe4ea17ea8c2cc5394cee5edb486d41ca827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trmv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07e80fd92a872ee711c057167113f98cfad692c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trmv&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d198fe8eb87c881bfbcd4f2a4f63d835970c8db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trsm!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd40a32420f498c2a1cb5386792e3d0c8f56b3cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trsm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b785972c86a2d2da4e9c5399bd5700c76dc86e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trsv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76143be23644aaf2e347210bea2133ac32439f2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS.trsv&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba5f275631d670c78491ee5cb078d6482a75ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS&lt;/code&gt; provides wrappers for some of the BLAS functions. Those BLAS functions that overwrite one of the input arrays have names ending in &lt;code&gt;'!'&lt;/code&gt;. Usually, a BLAS function has four methods defined, for &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;ComplexF64&lt;/code&gt;, and &lt;code&gt;ComplexF32&lt;/code&gt; arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f869314b823fe921435288d4aafec0d636196c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.BLAS&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e610ae6854cacd4fe76462c0ad25c98658996f67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Bidiagonal&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb060ee177881fee2b4864e8b1dd93f1cc2d2a9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Diagonal&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7076344c00b36c50f629c0eac7c094444f6e9b6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Givens&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ad07e6d7a8edc61c901cb777e9488cec3c9fc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Hermitian&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7151fcb829bb868865a594a44b5c3f0ad457f0a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.I&lt;/code&gt;Constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0540dc2756a40ecd4068e55b4753df4a993882" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.bdsdc!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9eb598352d5f9e7406615c14141006e40dc892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.bdsqr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d1fed4b1b3cb3805ee8516b8a23f453caab447" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gbtrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7471ae17ae01ecd1ed08bcce8fa4421590b221" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gbtrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119605eccd468ee730ceef3a3e8dc0e857f4537b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gebak!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc46216ec3ce842db668779210659367f72b5a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gebal!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6809bf1382cdb41585ee58916ed889fe470af069" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gebrd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d2d5a1a256870137572261579ed0b748b228be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gecon!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c73b61af2a687bb56db4449e537da2f5b2fb3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gees!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add51b290f06022f784523bcc933ec2bac036025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geev!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d92549d84dd2023f2e30079c0a4c106446caf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geevx!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c8458d7299ef32b6cd24bb3ff8a48f7b572fe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gehrd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ffcd7de391f1e647dc44a2bf3ba8eec46c0443" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gelqf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3517c9c53dc1c6d9dd811aa6efdc7a9fb42f9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gels!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def8aba2143e40c7b405115994fdba4964071213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gelsd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1d278a123838f34a00b395ff3c0fc6b4d56235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gelsy!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433b9c4a275daa8e5c2d7e3502be61baf87225a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gemqrt!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393a9ec55ec540039df30cb82008817e1a39dbb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geqlf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae2f644ebb6abfcfa05b36608dee32007261dcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geqp3!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3721bce83f0131e2ac6ad6906ccc8c9c9274f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geqrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ac18538525a13f260fc6d3283a5c22bbf24173" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geqrt!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe72f69504d360bed845e54bcbf164e3e76e7e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.geqrt3!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db4afa9e396c4e97d022d11fa6f8906107cca6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gerqf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedcbed62ba9538557a61c8514276b77cbe2ebe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gesdd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf88dd53218bc27f111d92aa0d2aba3913068eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gesv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d2982bb7e616bfb463a3b77b01bed5c41bc426" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gesvd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba841ceec65f0a4b93a0ce7b0463134e789dba33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gesvx!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da290d1e5d04410eff3e18eee1ecebb4981015cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.getrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b334313742a54221b76b42ebad5c5a89f78ab766" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.getri!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c33bb27e4b1454da534c8c60ccdec9f32a5baf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.getrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715421d7c8a90c42af39fa772592726e80788901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gges!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26060dd2f82f806534e718930cce96fbc40857eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ggev!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e88b01f2dca2d284039117510a5dac93b21e068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gglse!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6a3563e2a96d49b9412ec8425c2b6daa5cea1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ggsvd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d075d438c7167acfd8aa942baab17d0e69197e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ggsvd3!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8905e76038973d2620151833e3d1994797ad12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gtsv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3efdff4a16f2121bac215f83252a3e18a2470d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gttrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66efd1d0569777e3110bcd56a46266e2f6723ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.gttrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652b5a51b9397eef89548d2506ee1ee283d6db52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.hesv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a90fe449d55753f67b67ffa6bf794ff856c1c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.hetrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee29953286ddcc3ef89f0361e6b9059bca06076" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.hetri!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84c9e56bf87ba2abd696845c806466382183e8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.hetrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b6219590dcc52a980100a7b3a39850dc885416" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.orghr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f945d98261d5ad0d6df6b656d7092f0da38d16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.orglq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781afdcbb9b1e33a50df6ee9d5fde86a50f02216" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.orgql!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e4040613cfbf71e247f5a462c01b00d66cf8b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.orgqr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657fd0e3325a2707965480446af05f8efd5919f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.orgrq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c993f063044fe8679a344bab6c516c7abc40083" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ormlq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e469a484aa13baa18bc3ccd477c126979bd0910e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ormql!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c536115faf0a13a6a8aba513dc00630020e0fe3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ormqr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43942f1ec7bb0a3eaff14a8ac4abaf43efdec17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ormrq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a70f0dd3624e561cfea8491338fb0c6df4d108" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ormrz!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa50e809cf2cbaf14a7bb464b8d9e72166c357c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.posv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9229c39f1499073c44961fd918d2b9665bebae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.potrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b921ec76694ad77348899693e1d4bea96e9721a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.potri!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4432ec3cd41c7e95d5b7033c962250ec95fedd52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.potrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783892d34b577ab36227721a2859845d550ee25b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.pstrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533f81f0237767df1584f5bf8ac12798f8bfe2f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.ptsv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e2ef0577e8f065dd38417960dbf58c9c3868ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.pttrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1227c42b7ed691926348ca6b6a3315cf911f600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.pttrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd1996d147f3347f4b7c0a56d8e1f44d68ce1b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.stebz!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da28cd096eb9a6065d087cbdfb3875c747564064" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.stegr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b353740fa9544e01a41a3ea38d2cb2f77d7d1751" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.stein!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae2dac8673910511dfbb50dc545591833ce892a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.stev!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0a05bfeccce6ab9c471ab6cc4261767ae83e46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.syconv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6521bc7845c2fb49c953bfc11cacf69fe561dafc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.syev!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dfcf8de61e28e9868b5285e7dfa4de7b5f27bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.syevr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a0349b967ab421ae4ef9f8979902e65f8a758c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.sygvd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c310c23f488dd5519d48864199df38908d68ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.sysv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f2e8123122968b2b00692fa5695deb55306b28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.sytrf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8ad4a646440473ba262c6f38bf901dc6eb3d23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.sytri!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e23ef910ff49c3997ce9446c299393391adf119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.sytrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5db5796a7fff7601623a625c30bd2f9dde3a4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.tgsen!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3cbdfe5f95889e60b831f3b98e92d2898c688d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trcon!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0a6dc94cd005dfe2d38c441af316d578780a1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trevc!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa40475e9434aae3b8ba8b8ddf9703c0179774c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trexc!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800f0159d16f695418d87db1e667fd7b9643e51f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trrfs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe21a9886aa74b31bfc7f5d577a8fd571dc4bec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trsen!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad3610ef4c5b821af6981600bcd68460933dc26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trsyl!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924f098ad4668445a4cef6519fd52da77ee16f6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trtri!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc558744b5467759148e0f9465b728e572fd0fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.trtrs!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cff3243381bfd0925ebadab3e34890121bac08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK.tzrzf!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3253432d4f416b470077bfd42be45b3c9b60f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK&lt;/code&gt; provides wrappers for some of the LAPACK functions for linear algebra. Those functions that overwrite one of the input arrays have names ending in &lt;code&gt;'!'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9ddeceef057f5c4ba7d8e1662f6ba48999dd21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LAPACK&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fc31cb1ee9a6ea189d7b27210e1ea5c849bd50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.LowerTriangular&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7c1c09e8365f6f0bad5a854853af41a390e377" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.PosDefException&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf535fe38b6538c9d99f61ea791a64985a0b987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.QR&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a0bd23f8aa19dff99f87aae4640e10e6e857a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.QRCompactWY&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4d272238384d2992cba451b5990b6e56454b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.QRPivoted&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba388c2634dcdc32efac48019412c76f6b555de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.SingularException&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc85f24c494954d5152ad4f5c3b7a61b3edbc83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.SymTridiagonal&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb8ef29dd6c8b0bcc21ca35c43189cea9c0df1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Symmetric&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fab11c6187963d57ac850c7c415f1514512890e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Transpose&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851c7bd2afec320d83c34a8eb73ad4d6605d3b12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.Tridiagonal&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639abf8d93565357ec5447bfe88927de42156ae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.UniformScaling&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a271255c3666b0de31f3c9422a9b2782435780b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.UnitLowerTriangular&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4d94db7a631ae28e09cd12eaaf1e6b3ff30a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.UnitUpperTriangular&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c2a2660b81174704663b0950be2d1a93c3d8df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.UpperTriangular&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0106426e2d1ce09fa4abfba57f5b917c7a568e4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.adjoint!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f14e0438b58e0c87c733a172f5a47e12433ff56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.axpy!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af12e6be63ee7d6fc7debf44a9f487a365972c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.bunchkaufman!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf31be25f6afb6ab1cbf5d879d38bf1848ce2c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.bunchkaufman&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8a2a885ca0d7ed78764304ec00d9ff5a1087d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.checksquare&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9118b953ac5484ebc713590074a5aac7695f5834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.cholesky!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6334e635091720df081243a3a1c9960b2a085e4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.cholesky&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226c640760d738a20fdf45c03e40b555c5fc0a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.cond&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8e0c5b02635eecc6213fad073dcd099dc48973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.condskeel&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eb4dfb47eb9dfbc0fdeb41b42b887c0e74ffa7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.cross&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221ab276e1dda0c64bab3eab68eeb66b94b2f7df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.det&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2619e70fccd44ab673ae0030718390a5df942904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.diag&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e5ad369ef01be0a633775e31f95320664fd03a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.diagind&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa602318794ad9420bdf65c4a46245cdec5ecdab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.diagm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28664f9748adb99941182b9b3a81e82980aa33a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.dot&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f217b67048c0cc4351ff19e67f7d32615fc04cd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigen!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632910f94011086ca9820d664c9f430941afc453" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigen&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba560155d312f9b5536be43c055cc1e3fb95cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigmax&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeb98542576578283a801af49a9ff931ae7dd33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigmin&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7b3ff8bd94adb5b0cfa247c90928034ac15508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigvals!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989777411494bfd26c311597ff8bfa3cbe3c24ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigvals&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b300e85f5a1bdc5e76c880539f631c4b7985cbab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.eigvecs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f79ce5dfb81b3f35d5d38da75aa78f448e33f0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.factorize&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cd724597459ecd01c28de8f1d64d52467683af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.givens&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be9b3976a0e73782678d4b4560b44793ec7d91a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.hessenberg!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ce13f59984d08b535c5d057e1a0384e335bad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.hessenberg&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1854a5daf61958ee80b7fbd6dc5b9263486d1e18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.isdiag&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9542619c7416995c7fe09d12e001af33a8ae4e6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ishermitian&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccecdd59f04957c848f0ffcf57bab59de91c796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.isposdef!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641f5ff5670bd86216cae53f36f317983a76dab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.isposdef&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148f8386fa74c2db18c51942b987e1758b22fe8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.issuccess&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fb851d11afc4cc3ad6b828d709c655bae83f08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.issymmetric&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770fbdd4f682633af542e360efc3cf1291e020d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.istril&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09fea030ff4f71dfbcd36bee0509476cf0e14eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.istriu&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b58fe2a0585337c6b3dc58d8f47e86eca27a38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ldiv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475d9ebbf23ae2334e121a09037f8fc29db09b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ldlt!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676181654af1fd3146c3260fdf2f1727fc40f8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ldlt&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad6baef67ec39da9bfe61a17aaa0810f7b69015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lmul!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cc04890ee38e2b2c5cf178466ea1c7646b5594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.logabsdet&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb0412de5707ea19c2df66824abdfbf2a432f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.logdet&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc4ed6de4126374abea80d91d246a5663334e9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lowrankdowndate!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1c898cf5704e0d66664752eba10c7b15ca0e5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lowrankdowndate&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7094517138918445cf12e0e1e7a165d1a3ba324e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lowrankupdate!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3325ddb83fae6b6d729e3e65f44953b43dca1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lowrankupdate&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f266aa3224102fc9e1bbf75579495ed4224828cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676feff29f8ecf7a908ec6482505245716c4b2cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lq&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d177780f7b8bca0ec89b6ff0b6dd1b77e0bbcfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lu!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c70f2999a8ee8b1755096d2948adb6ced1928e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lu&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0355e32902d4bc23a40a12a27396928d20eb5b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.lyap&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86597f6bd79f943343c09d58741853d758466190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.mul!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af3ad92442e832257c8d114ae02f16adf41d7d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.norm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a738e440ed24b6b76144ea8fee1e82e8929e7189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.normalize!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef9d246943e08519624001d83a77aea36068165" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.normalize&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac030dccdb7d94a48267567772c0910dbb0ff83b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.nullspace&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ce61b392beb115b1c55496e319682b78039e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.opnorm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3265362dff736d10ebc66050ea13aaf661f8b8af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ordschur!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a896067030842c26deaaf1f75464ec5a3460c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.ordschur&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00bf94a384cfbb64cbbc0816d9f2add46046f929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.peakflops&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e1d45cead24ce997bafd7013383f1acad3fe4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.pinv&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62caa5c9413cda0252d6dc0cd0af4301f8f1f5b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.qr!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1d7f1729818cb310e7722840d5452cfeac6732" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.qr&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79580d170919daca1f0295babf1c6168140d9519" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.rank&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="240dbc1438159470e00b92895d56268ff5c276b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.rdiv!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b66a13f07b0922ce6bb23cd7a39eb97ba2cda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.rmul!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ed511883484304bfdbdc7554fe86eb61cf1c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.schur!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab9fa44ea2d70b1244065aa624174350b3eaf00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.schur&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="759ed98d8f7ba88801fe6f19bd3103fa3222fb2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.stride1&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c8d7e32645ada1e3bb71392151d4db3e721399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.svd!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc14a9c82264877ac1e0180341ada12cf92cda7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.svd&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd047519bb337c04cb079d50668bb8703eb4e65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.svdvals!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0960171b7a173f52e95f369bb3282e785366529" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.svdvals&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e856cdf99225cb79b0b5a409886be6caa1430af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.sylvester&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97152b2b270d4323d68e6be16dea9ca892fab4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.tr&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ed7e97c63939eef822691d4b1d7a1399215417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.transpose!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829658d1aa32680438ba081c290418610bc10b41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.tril!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4f921666e87a772b20a9cdfda2227271ce910d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.tril&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798974c94890b9c310c800edfead7e6c20bd6fe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.triu!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b2ad0fd3f703720191140aa2944e6fc2c14ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LinearAlgebra.triu&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5accb127041a3a1033a44508ec2d872cd99ff1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LocalManager&lt;/code&gt; is used to launch additional workers on the same host, thereby leveraging multi-core and multi-processor hardware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebccec8f40f60aebc68bc72cca09c43a0b65bc74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LocalManager&lt;/code&gt;, used by &lt;code&gt;addprocs(N)&lt;/code&gt;, by default binds only to the loopback interface. This means that workers started later on remote hosts (or by anyone with malicious intentions) are unable to connect to the cluster. An &lt;code&gt;addprocs(4)&lt;/code&gt; followed by an &lt;code&gt;addprocs([&quot;remote_host&quot;])&lt;/code&gt; will fail. Some users may need to create a cluster comprising their local system and a few remote systems. This can be done by explicitly requesting &lt;code&gt;LocalManager&lt;/code&gt; to bind to an external network interface via the &lt;code&gt;restrict&lt;/code&gt; keyword argument: &lt;code&gt;addprocs(4; restrict=false)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa2940b6507a0ca49702aab02bbfd5ee302065d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LocalManager&lt;/code&gt;, used when &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs(np::Integer)&lt;/code&gt;&lt;/a&gt; are called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099e7e82ef6d74f7ab9726ce2822a0db2c72418f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Logging.ConsoleLogger&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0b73e5a684c8e62b96535c235c7cb029d560a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Logging.Logging&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91f912ed893e141ae663f1f576ccb77dc4d24ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FAIL_ON_CONFLICT&lt;/code&gt;: exit immediately if a conflict is found rather than trying to resolve it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864aa0d3e64b7890e1afaeb2a124c5e31fa62b07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FILE_FAVOR_NORMAL&lt;/code&gt;: if both sides of the merge have changes to a section, make a note of the conflict in the index which &lt;code&gt;git checkout&lt;/code&gt; will use to create a merge file, which the user can then reference to resolve the conflicts. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941ab68ae5078dd0703ebea748e9a5a218e1232a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FILE_FAVOR_OURS&lt;/code&gt;: if both sides of the merge have changes to a section, use the version in the &quot;ours&quot; side of the merge in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38a5eab0fdc5e0ced99af1025870665f46634d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FILE_FAVOR_THEIRS&lt;/code&gt;: if both sides of the merge have changes to a section, use the version in the &quot;theirs&quot; side of the merge in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699d1f0de469b0e11e8fe2cdbf3fc5fd7ed56ad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FILE_FAVOR_UNION&lt;/code&gt;: if both sides of the merge have changes to a section, include each unique line from both sides in the file which is put into the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c7979928db5d6d2bdb32f8e0cc0179a517010b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_FIND_RENAMES&lt;/code&gt;: detect if a file has been renamed between the common ancestor and the &quot;ours&quot; or &quot;theirs&quot; side of the merge. Allows merges where a file has been renamed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6858d55e7e1aa5523e7009151412cdeabad479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_NO_RECURSIVE&lt;/code&gt;: if the commits being merged have multiple merge bases, use the first one, rather than trying to recursively merge the bases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6335a6c5fb5becd11077e3d70f9703f5fb029449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MERGE_SKIP_REUC&lt;/code&gt;: do not write the REUC extension on the index resulting from the merge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f94be9e1a93e3fc46ae5649873a0273e159af6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Main&lt;/code&gt; is the top-level module, and Julia starts with &lt;code&gt;Main&lt;/code&gt; set as the current module. Variables defined at the prompt go in &lt;code&gt;Main&lt;/code&gt;, and &lt;code&gt;varinfo&lt;/code&gt; lists variables in &lt;code&gt;Main&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6311f741d63db611953ea4a30b7b16f6a58778f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Main&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae01b5a246671e77ef7c15f5cb6c113522e7b08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MergeSort&lt;/code&gt; is an O(n log n) stable sorting algorithm but is not in-place &amp;ndash; it requires a temporary array of half the size of the input array &amp;ndash; and is typically not quite as fast as &lt;code&gt;QuickSort&lt;/code&gt;. It is the default algorithm for non-numeric data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432b6cc93efc0d3559d281a184ca45da4f41c001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mmap.Anonymous&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe140140c29823be3e68d83bc9039b2740a3df7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mmap.mmap&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5799722242b37bae48c915df10d20c6e03877538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Mmap.sync!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d2087472f05a208c2053a32f6e893653f53aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; and &lt;code&gt;MyModule.p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f18377d13ed25436c6e6d79b07eb6a72e410f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt;-dimensional dense array with elements of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b216f557c2bd4056c2acb8f51b85861f3345b1e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;N&lt;/code&gt;-dimensional dense array with elements of type &lt;code&gt;T&lt;/code&gt;. The elements of a dense array are stored contiguously in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef77b6047337134576e13dfc9c281a5f08c0a852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NaN&lt;/code&gt; is not equal to, not less than, and not greater than anything, including itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1054849b2174de6f4c4730c7b34d2ceaa7cbe1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NamedTuple&lt;/code&gt;s are, as their name suggests, named &lt;a href=&quot;#Core.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;s. That is, they're a tuple-like collection of values, where each entry has a unique name, represented as a &lt;a href=&quot;#Core.Symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt;. Like &lt;code&gt;Tuple&lt;/code&gt;s, &lt;code&gt;NamedTuple&lt;/code&gt;s are immutable; neither the names nor the values can be modified in place after construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0989b0c92b74e0d5a80fd2c41d65b0b0c0d860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NoPad&lt;/code&gt; is supplied in the same argument position as any other kind of padding, so it keeps the dispatch hierarchy well organized and with reduced likelihood of ambiguities. Moreover, it extends the &quot;public&quot; &lt;code&gt;myfilter&lt;/code&gt; interface: a user who wants to control the padding explicitly can call the &lt;code&gt;NoPad&lt;/code&gt; variant directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f3d41d5393f2dc510dea23a6cbc3ce55ac91f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OurRational&lt;/code&gt; also provides several outer constructor methods for convenience. The first is the &quot;standard&quot; general constructor that infers the type parameter &lt;code&gt;T&lt;/code&gt; from the type of the numerator and denominator when they have the same type. The second applies when the given numerator and denominator values have different types: it promotes them to a common type and then delegates construction to the outer constructor for arguments of matching type. The third outer constructor turns integer values into rationals by supplying a value of &lt;code&gt;1&lt;/code&gt; as the denominator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22301d3d53998754a29760a56ec7c411f98a1c4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PROXY_AUTO&lt;/code&gt;: attempt to figure out the proxy configuration from the git configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6102c8bc1b9298ef54a6d280b94d61f595a347" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PROXY_NONE&lt;/code&gt;: do not attempt the connection through a proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43f44cd746786e816b407516b1574adec031712" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PROXY_SPECIFIED&lt;/code&gt;: connect using the URL given in the &lt;code&gt;url&lt;/code&gt; field of this struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9422a8db56ed0aa0c93350d61a83e50cf4a49ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PartialQuickSort(k)&lt;/code&gt; is similar to &lt;code&gt;QuickSort&lt;/code&gt;, but the output array is only sorted up to index &lt;code&gt;k&lt;/code&gt; if &lt;code&gt;k&lt;/code&gt; is an integer, or in the range of &lt;code&gt;k&lt;/code&gt; if &lt;code&gt;k&lt;/code&gt; is an &lt;code&gt;OrdinalRange&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7846fbf62ad07ee710d4572b801aa28225472e77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Period&lt;/code&gt; types represent discrete, human representations of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ef9bffffea5fe5f18ade211885507e7895c37a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Point&lt;/code&gt; itself is also a valid type object, containing all instances &lt;code&gt;Point{Float64}&lt;/code&gt;, &lt;code&gt;Point{AbstractString}&lt;/code&gt;, etc. as subtypes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd143a28d9d29f147c1db5443705b2bfca28ba30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printf.@printf&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6791c4c747bc82967d051e7038765427173ceb99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Printf.@sprintf&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c590830a865f358d888e453e490e805c639004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Process&lt;/code&gt;: Wait for a process or process chain to exit. The &lt;code&gt;exitcode&lt;/code&gt; field of a process can be used to determine success or failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d40cfe1441acaabcae6cfb0a1a6206f3e24245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.@profile&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7434f43033e2c09f0352b9642926e5e815362aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.callers&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1685e1103f7eed58637bc51ed0d4a1289242b40d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.clear&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b53ff95a030344771c3ddc0616d859ae91cfe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.clear_malloc_data&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13583918e41b34bf84d680372bc683c1b7d6ec18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.fetch&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca77a44ebc7641f2094411539e46f1b7c05d7dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.init&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bbddeb7f09fce656476c3a2eec71db940f78e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.print&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f07017bf4a686f9b4451b32dcccc8a56d7a1eb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile.retrieve&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d79d54c1b3eedd204da08d5d0572f448eb03fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Profile&lt;/code&gt; implements what is known as a &quot;sampling&quot; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Profiling_(computer_programming)&quot;&gt;statistical profiler&lt;/a&gt;. It works by periodically taking a backtrace during the execution of any task. Each backtrace captures the currently-running function and line number, plus the complete chain of function calls that led to this line, and hence is a &quot;snapshot&quot; of the current state of execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556ac83ce521bd90333420f366446389f92f45c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ptr{Any}&lt;/code&gt; (&lt;code&gt;Ref{Any}&lt;/code&gt; is invalid as a return type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcd9764115386e6dc84d3ecf72cde16b73007c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ptr{Cvoid}&lt;/code&gt; (you may need to use &lt;a href=&quot;../../base/c/index#Base.@cfunction&quot;&gt;&lt;code&gt;@cfunction&lt;/code&gt;&lt;/a&gt; explicitly to create this pointer)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935ea29d69ed103764d3cd8eb3c0e16d5de09412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ptr{T}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the Julia type corresponding to &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecd7ba2704a6e655d62333319a7a3e33039ecea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Q&lt;/code&gt; is a N-by-N orthogonal matrix,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1fe82b94d8a9f08d569b3284803a9d1e84b024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;QuickSort&lt;/code&gt; is an O(n log n) sorting algorithm which is in-place, very fast, but not stable &amp;ndash; i.e. elements which are considered equal will not remain in the same order in which they originally appeared in the array to be sorted. &lt;code&gt;QuickSort&lt;/code&gt; is the default algorithm for numeric values, including integers and floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd1f2a350b752b8508728b1896a6e150ea2a073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;QuoteNode&lt;/code&gt; can also be used for certain advanced metaprogramming tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2e92585b3f85a137355376a505bf3ef69fc613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;R0&lt;/code&gt; is a (K+L)-by-N matrix whose rightmost (K+L)-by-(K+L) block is nonsingular upper block triangular,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59e4bd388eabe172e08e3ec4350798b7042dc07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_EDIT&lt;/code&gt;: cherry-pick the commit in question, but allow the user to edit the commit's contents and its message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae95e806141b69789a07062c93eee5cd49ca331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_EXEC&lt;/code&gt;: do not cherry-pick a commit. Run a command and continue if the command exits successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d87d09a2869b4f1b8ce1f91947bc5ba0412291" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_FIXUP&lt;/code&gt;: squash the commit in question into the previous commit. Only the commit message of the previous commit will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e3c8826f1a53eebe255d5ca76341afaa2f8a26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_PICK&lt;/code&gt;: cherry-pick the commit in question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330961cf81af997a3e7206dc713fa75a866cc52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_REWORD&lt;/code&gt;: cherry-pick the commit in question, but rewrite its message using the prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a63535e1f18f40eab094a22da99f514dc14fb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REBASE_OPERATION_SQUASH&lt;/code&gt;: squash the commit in question into the previous commit. The commit messages of the two commits will be merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623146fe789d460b9aedab51bcfe6d6ed270acfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;REPL&lt;/code&gt; refers to the fact that we defined &lt;code&gt;myfunc&lt;/code&gt; in the REPL, rather than putting it in a file; if we had used a file, this would show the file name. The &lt;code&gt;[1]&lt;/code&gt; shows that the function &lt;code&gt;myfunc&lt;/code&gt; was the first expression evaluated in this REPL session. Line 2 of &lt;code&gt;myfunc()&lt;/code&gt; contains the call to &lt;code&gt;rand&lt;/code&gt;, and there were 52 (out of 80) backtraces that occurred at this line. Below that, you can see a call to &lt;code&gt;dsfmt_fill_array_close_open!&lt;/code&gt; inside &lt;code&gt;dSFMT.jl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5113796ac366aba15993a660202654486d4f206" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.AbstractRNG&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463ea5ff4ab8e0d834e0db2f083ad259c181a2c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.MersenneTwister&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91907468b585be6a20b05847db94b0816666df59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.Random&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ae720a3ca04cf345200ccf0ac1c120451bccd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.RandomDevice&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aa4f10a72ac5d0cfad2833318941d316927cc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.bitrand&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b58d51e642d2b49806e5deeaad679e1dc4376a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.rand!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41d6f553db731a1dbdac00c6e66491f6cfb6d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randcycle!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9515e9ee433b8ae3a570904e9c05a0941391202" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randcycle&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0d76f6d8b146ca8f9eb382fca2ac080d93474a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randexp!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d8f388dac6bf970033882c8d8b665b544dfad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randexp&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064365357cd3cbd7772876a8aa5faf7074a87245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randn!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a344b33ea2b270974de30e06ee4ac521ebf65362" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randperm!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3a5f5fd9b35985bb008ef26f31dfd0b67196a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randperm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4e2a549c5a8afb0b1df1fbd9f5c1ceb195c6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randstring&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dec04d0de50f3aa49a256be229c7a22b9258b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randsubseq!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d6400bc2adbc9e4e09eca49b1a34dc7f8f65da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.randsubseq&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1decfc76004e06c42cd6628a455737c285dbfdbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.seed!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215a7ffc685872869e841e6bea8126963e3dd9de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.shuffle!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a845a0123a4a9a08a751f0da90716236128d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Random.shuffle&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41186769be9a01f3dd0e7a4416f5434291f5d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ref{T}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the Julia type corresponding to &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f0d4fbf6d0b4ce58c8ef5c40142f75ae30c0a51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;S&lt;/code&gt; defaults to &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae10bd852759e80df4772096296d090ff6a36418" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SSHManager&lt;/code&gt;, used by &lt;code&gt;addprocs(list_of_remote_hosts)&lt;/code&gt;, launches workers on remote hosts via SSH. By default SSH is only used to launch Julia workers. Subsequent master-worker and worker-worker connections use plain, unencrypted TCP/IP sockets. The remote hosts must have passwordless login enabled. Additional SSH flags or credentials may be specified via keyword argument &lt;code&gt;sshflags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afce63903ab0bd2b16b8ec7327e56c39fb3321e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SSHManager&lt;/code&gt;, used when &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs(hostnames::Array)&lt;/code&gt;&lt;/a&gt; is called with a list of hostnames</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1164cc8786ac32302fb4790d8faf99c4b9de5b94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sampler(::Type{MyRNG}, ::S, ::Repetition)&lt;/code&gt;, which returns an object of type say &lt;code&gt;SamplerS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4946febf8b3ff167cc6e1703ac647397c3c6fd23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serialization.deserialize&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d38ad444ad32217be8c53aa0ce6df980a4240d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serialization.serialize&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff527d065289210dae0eb389edc8b756cd08391c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Serialization.writeheader&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e6320cdabcada41f215f8727730d81ca94e588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.SharedArray&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ef2bd3855102549baa6564b215703e3c008b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.SharedMatrix&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c382c7c264df303b5217fd455be802ee316e3613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.SharedVector&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8996ba423c892a43a0a4d3f6d0a33cd8a1f030d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.indexpids&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4254d329f859a95fceda1a4b50b65ca48328f795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.localindices&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef78e7f9cd0ac15e41a8d88625eaa725136f6d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SharedArrays.sdata&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df46c52b3bb8b90bf0630b9d1f540fc0d9d0a567" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SizeUnknown()&lt;/code&gt; if the length (number of elements) cannot be determined in advance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901f931b5d778d9d288b2d14a5017209d7761f1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.@ip_str&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26f989e962d4e18783764374bac8f6ffad7eb45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.IPAddr&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88511e010884511670500f18c6838e82571d8cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.IPv4&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50345fe4760a4cdd2c9c76b73340a61ab7506565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.IPv6&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7becef75542327088d61a5b61e5758019243f6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.Sockets&lt;/code&gt;Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb023dbdb625d13e8a8acbb198397f32613ec2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.TCPSocket&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9370bab534d53e1269f4dfb58c6957410fe067ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.UDPSocket&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ddf3f1418a2b9d1c6ff2610a73b453c6806d590" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.accept&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d764b6c54d9b221df3038bdbd555fa5f22a051f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.connect&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd0df66dddd5558143367f8da98de21c28cffa4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getaddrinfo&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f09a2362cca27a6d5008155045b50c48e639c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getalladdrinfo&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a574e25d3ff42922051358c04b8ac54a6bb355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getipaddr&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367c896252bdca870614946172f8e0845d8522e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getipaddrs&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52df54457c5fdb3371762f8e0b8118d1e7d8dab5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getnameinfo&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9ee42c99664ee82b32b0d519b66f2a04e9e7b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getpeername&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c152605e2a32054ff2a4b451931cacbb41f869d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.getsockname&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64869c460db660aaeea48c70046bf8b4d84ad87b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.listen&lt;/code&gt;Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f3dac8bf12c89e8279cca688cc498593899242" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.listenany&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97573903a0d77973ba2ebdc978672b0684f81249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.recv&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb90d0715e53c041003b4fa1189c6215c395191f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.recvfrom&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6fcb4e5092bac0cbad782edb7f64a67602bea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.send&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e8a511bed0f8cadd119b22bf53337ea6cfd450" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sockets.setopt&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92740f6a04738ced4dcb6c20d325fd8205b4ee48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.AbstractSparseArray&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14508ddc578d004b1a83054e27ceddcec7d0b77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.AbstractSparseMatrix&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6189649781e9c970dfe1fd4dcf7f4261bf416fbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.AbstractSparseVector&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5429d50ee8fd756a53b734854cb103d20a31c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.SparseMatrixCSC&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec022baa8bcbf2426c406b353f1abdeeb2a4047" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.SparseVector&lt;/code&gt;Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df7f17f33dd0f894c90f416f62f118a7eec999c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.blockdiag&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac961ae9ff3496aea9b0d3949beb3249d6dea2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.droptol!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9507dfebf72d67c9328cda5de49b88797401465e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.dropzeros!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12a4b643d302fe1554cc19e71d4f43f7c56d295" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.dropzeros&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fe9b0b363f336eef42ed51d8edb2c674554415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.findnz&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b154ca150960b1c7bd7273232f4f2e9af6fac7c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.issparse&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f2e5b618d9d4c1c3f712f42543d3a6e764a9d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.nnz&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0473591c6c6bca752ad41686481a2f053ee41fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.nonzeros&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a854ae8b2a869113949b57089241b604db002c87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.nzrange&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491fe583d3e8a7ced55a6fc7245b0c893a4c5872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.permute&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845de090a731bc1187a2dc69909d5aebd60e3383" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.rowvals&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c2c17264a740157950db0ab7ec4e9b9c9d7565" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.sparse&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535698e491feb45e86dcddeaa97799b6e1861ae1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.sparsevec&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e203beb43a1417d9db3e54279d1541fd239104c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.spdiagm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff05974577b4911b463b2321226ce99653a794df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.sprand&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f065467439a9b959108895c8a7d1a5723c4458b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.sprandn&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459933be466ebd51243cbbb732b5e6310a8013c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SparseArrays.spzeros&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ba94130a462ab31c48e29a577eb6e6d1be5d63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Stateful&lt;/code&gt; provides the regular iterator interface. Like other mutable iterators (e.g. &lt;a href=&quot;../parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;), if iteration is stopped early (e.g. by a &lt;code&gt;break&lt;/code&gt; in a &lt;code&gt;for&lt;/code&gt; loop), iteration can be resumed from the same spot by continuing to iterate over the same iterator object (in contrast, an immutable iterator would restart from the beginning).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62476e1946d29c4ad43c686b393b641156c8f0c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.cor&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac9ee8bc2fa54b7c491f79ad9a348a4fb80462a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.cov&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed77d4aaf8cb4cbe60e37311017ab4a442de0ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.mean!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29464657018e6e3e6343b3fedaefcd948e33882c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.mean&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c2e943c7a91ee035a21fa4b7b7ea31955aee81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.median!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be3746bedf5da75a1f17f16187b30b077e3efac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.median&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029ee7505379aeeb644ded0ae2c52f293def99ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.middle&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9ffe7caa69030f70b0943d776a413c81e8b445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.quantile!&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ad3e8972fdbc1597c7ca430f97ea86e22abc52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.quantile&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f500e9849671efff9a7b73bc7348f15f39b56f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.std&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5042b4e6cf33d1c17f66d5e2d5c42b5a73bf9029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.stdm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d5794ad319d8325357708d83cb0590f585cfb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.var&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a0036b5f1183b0906764df1d680770c24379b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Statistics.varm&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24638388fc296bd33f4cdfd5b551179becce5a9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SubArray&lt;/code&gt; is a specialization of &lt;code&gt;AbstractArray&lt;/code&gt; that performs indexing by sharing memory with the original array rather than by copying it. A &lt;code&gt;SubArray&lt;/code&gt; is created with the &lt;a href=&quot;../../base/arrays/index#Base.view&quot;&gt;&lt;code&gt;view&lt;/code&gt;&lt;/a&gt; function, which is called the same way as &lt;a href=&quot;../../base/collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt; (with an array and a series of index arguments). The result of &lt;a href=&quot;../../base/arrays/index#Base.view&quot;&gt;&lt;code&gt;view&lt;/code&gt;&lt;/a&gt; looks the same as the result of &lt;a href=&quot;../../base/collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt;, except the data is left in place. &lt;a href=&quot;../../base/arrays/index#Base.view&quot;&gt;&lt;code&gt;view&lt;/code&gt;&lt;/a&gt; stores the input index vectors in a &lt;code&gt;SubArray&lt;/code&gt; object, which can later be used to index the original array indirectly. By putting the &lt;a href=&quot;../../base/arrays/index#Base.@views&quot;&gt;&lt;code&gt;@views&lt;/code&gt;&lt;/a&gt; macro in front of an expression or block of code, any &lt;code&gt;array[...]&lt;/code&gt; slice in that expression will be converted to create a &lt;code&gt;SubArray&lt;/code&gt; view instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2de661c976e26fa5ab1fb13141420f909e502b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol&lt;/code&gt;s are immutable and should be compared using &lt;code&gt;===&lt;/code&gt;. The implementation re-uses the same object for all &lt;code&gt;Symbol&lt;/code&gt;s with the same name, so comparison tends to be efficient (it can just compare pointers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9a7dbffa2b8bbab0d019028e01a6486dd66e85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Symbol&lt;/code&gt;s can also be constructed from strings or other values by calling the constructor &lt;code&gt;Symbol(x...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feae887103aa06237286e0ca1c225ae0f366824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T (*)(...)&lt;/code&gt; (e.g. a pointer to a function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c49c98c239e48529adb2a14d6ff6f118fa7edd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T*&lt;/code&gt; (where T represents an appropriately defined type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097fc274f38ff4f51732311eeb5f9bb62fdee346" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T...&lt;/code&gt; (where &lt;code&gt;T&lt;/code&gt; is one of the above types, variadic functions of different argument types are not supported)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de6d4972665580ea8151d057b019449d28c3692" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T...&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the Julia type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40163f11557ed50c6159ea6c021006047f18fd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt; is a square matrix with &lt;code&gt;min(m,n)&lt;/code&gt; columns, whose upper triangular part gives the matrix $T$ above (the subdiagonal elements are ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dca71f5a2103efb8e1b87ce6c3fb535be59f4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a Julia Leaf Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5062544d8af4c7ff00e13e2567b7abc71bd4da7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a Julia leaf type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a08394542779e0f3aed6dd82eafd6a98bec91a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is an equivalent Julia Bits Type (per the table above)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ead8333b8c1b1c03ff0c637dd06eded5b40adca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is one of the primitive types: &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;complex&lt;/code&gt;, &lt;code&gt;enum&lt;/code&gt; or any of their &lt;code&gt;typedef&lt;/code&gt; equivalents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2566bd81ad6f214b77a0226db4cb41a67ea23a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@inferred&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc542aec18218ef46904df7697557276742686e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dedc3fe82761ec15603860db3b1bc9f5c5325e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_broken&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be394e6e8884131bcb2317b8627b6a021c3863a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_deprecated&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648aa7d38ddc94c92c91438de58747f658a87f91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_logs&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73efad89f56f2ad718035299dcda57c2b59b830b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_nowarn&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27f4945a4645ab5521a69531e278fd870675693" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_skip&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca31dad2d9a7c953e80e0a3be1cb21599b54695" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_throws&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24433a5966d64b390dcadabd489ec4f2353a829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@test_warn&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04a492cf15ef4efaf86b62b0cbf58059fc09951" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.@testset&lt;/code&gt;Macro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93922cad2305534a39b9b51240d9cb95fd343ab3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.finish&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df4be8ea44a476ecf383917f9197f90c5c344da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.get_testset&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e17d41e7d1490181a372b93aaccaa29822b406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.get_testset_depth&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b36429d366a1f750c87f103ea53d7083f9bd15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test.record&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b163d456175a514e18e0917707e29747e42e56ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test&lt;/code&gt; also makes sure that nested &lt;code&gt;@testset&lt;/code&gt; invocations use the same &lt;code&gt;AbstractTestSet&lt;/code&gt; subtype as their parent unless it is set explicitly. It does not propagate any properties of the testset. Option inheritance behavior can be implemented by packages using the stack infrastructure that &lt;code&gt;Test&lt;/code&gt; provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35edb299ef0b033391acb344701f69fcf42287a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Test&lt;/code&gt; takes responsibility for maintaining a stack of nested testsets as they are executed, but any result accumulation is the responsibility of the &lt;code&gt;AbstractTestSet&lt;/code&gt; subtype. You can access this stack with the &lt;code&gt;get_testset&lt;/code&gt; and &lt;code&gt;get_testset_depth&lt;/code&gt; methods. Note that these functions are not exported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26283af2011e55ac71dac17665f9f3435581506c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Time&lt;/code&gt; wraps a &lt;code&gt;Nanosecond&lt;/code&gt; and represents a specific moment in a 24-hour day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2160fff376cc5270d9ce7a8d885286e0b9ae4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TimeType&lt;/code&gt; types wrap &lt;code&gt;Instant&lt;/code&gt; machine instances to provide human representations of the machine instant. &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt; are subtypes of &lt;code&gt;TimeType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af10568df89dd4690f8e10ab3da2a96db983b56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tuple&lt;/code&gt; (and &lt;code&gt;NTuple&lt;/code&gt;) arguments present special challenges. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ac66dfcf24c574fd49662c76c95db041985ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; (upper triangular) part of &lt;code&gt;LU&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de94272bf948198e60de911456bcbcbabd810cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; is a M-by-M orthogonal matrix,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eec485d6e16e3b09f17f20c24fb1fecd20b741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;Vt&lt;/code&gt; can be obtained from the factorization &lt;code&gt;F&lt;/code&gt; with &lt;code&gt;F.U&lt;/code&gt;, &lt;code&gt;F.S&lt;/code&gt;, &lt;code&gt;F.V&lt;/code&gt; and &lt;code&gt;F.Vt&lt;/code&gt;, such that &lt;code&gt;A = U * Diagonal(S) * Vt&lt;/code&gt;. The algorithm produces &lt;code&gt;Vt&lt;/code&gt; and hence &lt;code&gt;Vt&lt;/code&gt; is more efficient to extract than &lt;code&gt;V&lt;/code&gt;. The singular values in &lt;code&gt;S&lt;/code&gt; are sorted in descending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadbefe5193797d112154620b4cd908a0e95c25d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UInt&lt;/code&gt; (UNIX), &lt;code&gt;UInt32&lt;/code&gt; (Windows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a314cee80aef20d430a51dc521bc50d62153b56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UUIDs.uuid1&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a629bd036a9d23bc4cef5b7f5d0b0e9ef4663c14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UUIDs.uuid4&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c655c221dff025ebe5d685daf859aa682aa5199" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UUIDs.uuid5&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef75166ac323ee17d90a3d52b91cb13a2c31d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UUIDs.uuid_version&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7560b823c27f988512ed522cf19c890b663485f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode.graphemes&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e6d90408fd783cab997fa7651c6dc5fa54f1f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode.isassigned&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d774ce829bab46e7d74c9412d48296a63165cc3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unicode.normalize&lt;/code&gt;Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09e6d58aa445683a667a049dd58c2ca31623c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnionAll&lt;/code&gt; types are usually written using the keyword &lt;code&gt;where&lt;/code&gt;. For example &lt;code&gt;Ptr&lt;/code&gt; could be more accurately written as &lt;code&gt;Ptr{T} where T&lt;/code&gt;, meaning all values whose type is &lt;code&gt;Ptr{T}&lt;/code&gt; for some value of &lt;code&gt;T&lt;/code&gt;. In this context, the parameter &lt;code&gt;T&lt;/code&gt; is also often called a &quot;type variable&quot; since it is like a variable that ranges over types. Each &lt;code&gt;where&lt;/code&gt; introduces a single type variable, so these expressions are nested for types with multiple parameters, for example &lt;code&gt;Array{T,N} where N where T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35ef1446ab67d5589df92f51027d2c5fb26f770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Union{}&lt;/code&gt;, the empty &lt;a href=&quot;#Core.Union&quot;&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/a&gt; of types, is the type that has no values. That is, it has the defining property &lt;code&gt;isa(x, Union{}) == false&lt;/code&gt; for any &lt;code&gt;x&lt;/code&gt;. &lt;code&gt;Base.Bottom&lt;/code&gt; is defined as its alias and the type of &lt;code&gt;Union{}&lt;/code&gt; is &lt;code&gt;Core.TypeofBottom&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c159e0d0364a10aee98250e38f4ca364bff27994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Union{}&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebbae454ef4390d8518c48ef7f6caef9a9707b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;V&lt;/code&gt; is a P-by-P orthogonal matrix,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ea4dba46e215c5f92b015e50ac38c528b9dce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vector&lt;/code&gt; (a.k.a. 1-dimensional &lt;a href=&quot;../arrays/index#Core.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1f441631e775d59d087e9d82450775213500e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VersionNumber&lt;/code&gt; objects are mostly useful to easily and correctly compare two (or more) versions. For example, the constant &lt;a href=&quot;../../base/constants/index#Base.VERSION&quot;&gt;&lt;code&gt;VERSION&lt;/code&gt;&lt;/a&gt; holds Julia version number as a &lt;code&gt;VersionNumber&lt;/code&gt; object, and therefore one can define some version-specific behavior using simple statements as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa12c2aa7d1fa3eb170131ed2e147cef4360ab7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakKeyDict()&lt;/code&gt; constructs a hash table where the keys are weak references to objects, and thus may be garbage collected even when referenced in a hash table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac0d58fce6e34b7b935ab927a037c6e4d23d57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WeakRef&lt;/code&gt; objects and finalizers are not currently handled properly by the serializer (this will be fixed in an upcoming release).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f904c0b5c82ee3759e02d1d3d50d79a37d20dcec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X&lt;/code&gt;'s dimensions must match those of &lt;code&gt;A&lt;/code&gt; (&lt;code&gt;X.m == A.m&lt;/code&gt; and &lt;code&gt;X.n == A.n&lt;/code&gt;), and &lt;code&gt;X&lt;/code&gt; must have enough storage to accommodate all allocated entries in &lt;code&gt;A&lt;/code&gt; (&lt;code&gt;length(X.rowval) &amp;gt;= nnz(A)&lt;/code&gt; and &lt;code&gt;length(X.nzval) &amp;gt;= nnz(A)&lt;/code&gt;). Column-permutation &lt;code&gt;q&lt;/code&gt;'s length must match &lt;code&gt;A&lt;/code&gt;'s column count (&lt;code&gt;length(q) == A.n&lt;/code&gt;). Row-permutation &lt;code&gt;p&lt;/code&gt;'s length must match &lt;code&gt;A&lt;/code&gt;'s row count (&lt;code&gt;length(p) == A.m&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8987470a88281754ffdb71ade41b5a639248f37f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X[i] = v&lt;/code&gt;, indexed assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3383c21609340e2fdfc9d4b313962e7861477ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;X[i]&lt;/code&gt;, indexed element access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323032a81280016c208d2f29eebf2095105e28b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;\x&lt;/code&gt; and octal escape sequences produce the &lt;em&gt;byte&lt;/em&gt; corresponding to the escape value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5f161d7226b0d08d271982e4d9b34916acc39d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^/&lt;/code&gt;, &lt;code&gt;^_&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c6993bacd5663f77c6c25126d000f38f2b3a39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;^R&lt;/code&gt;, &lt;code&gt;^S&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e97ca1138d2e7a8d63ea86f369578c2aabd9e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_file=string&lt;/code&gt; and &lt;code&gt;_line=integer&lt;/code&gt; can be used to override the apparent source location of a log message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c348dee9a7a18e4f94a874841d5a3771d777202b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_group=symbol&lt;/code&gt; can be used to override the message group (this is normally derived from the base name of the source file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a8901367653db14e68543c62908a3cc78b5a47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_id=symbol&lt;/code&gt; can be used to override the automatically generated unique message identifier. This is useful if you need to very closely associate messages generated on different source lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3a6ac3e9695966e1720fafebf78de703b0040c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_module=mod&lt;/code&gt; can be used to specify a different originating module from the source location of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01fa324475f40156ee55fa3f96ac619375f6098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a.b = c&lt;/code&gt; calls &lt;a href=&quot;#Base.setproperty!&quot;&gt;&lt;code&gt;setproperty!&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(a,:b,c)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ed9c7ca1ef239e1ead28c9513a9f20101c5dc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; disables &lt;code&gt;UCP&lt;/code&gt; mode (enables ASCII mode). By default &lt;code&gt;\B&lt;/code&gt;, &lt;code&gt;\b&lt;/code&gt;, &lt;code&gt;\D&lt;/code&gt;, &lt;code&gt;\d&lt;/code&gt;, &lt;code&gt;\S&lt;/code&gt;, &lt;code&gt;\s&lt;/code&gt;, &lt;code&gt;\W&lt;/code&gt;, &lt;code&gt;\w&lt;/code&gt;, etc. match based on Unicode character properties. With this option, these sequences only match ASCII characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d9dde09ae16dc9b6c91b82d7561fd19534d9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a[i] = v&lt;/code&gt; calls &lt;a href=&quot;../collections/index#Base.setindex!&quot;&gt;&lt;code&gt;setindex!&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(a,v,i)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625442ee027d26fb342220a59c918edf0021d60b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abbreviated_size&lt;/code&gt;: lower bound on the size of the abbreviated &lt;code&gt;GitHash&lt;/code&gt; to use, defaulting to &lt;code&gt;7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b48d13280134b766f498f844ddf744c8d770d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract type&lt;/code&gt; declares a type that cannot be instantiated, and serves only as a node in the type graph, thereby describing sets of related concrete types: those concrete types which are their descendants. Abstract types form the conceptual hierarchy which makes Julia&amp;rsquo;s type system more than just a collection of object implementations. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01f4aa9b6e213f9c5405c911bdb874af9233313" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;abstract type&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3370fcbf883ab88e338713be19f4d76d4119c155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addprocs(list_of_remote_hosts; tunnel=true, sshflags=&amp;lt;ssh keys and other flags&amp;gt;)&lt;/code&gt; is useful when we wish to use SSH connections for master-worker too. A typical scenario for this is a local laptop running the Julia REPL (i.e., the master) with the rest of the cluster on the cloud, say on Amazon EC2. In this case only port 22 needs to be opened at the remote cluster coupled with SSH client authenticated via public key infrastructure (PKI). Authentication credentials can be supplied via &lt;code&gt;sshflags&lt;/code&gt;, for example &lt;code&gt;sshflags=`-i &amp;lt;keyfile&amp;gt;`&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36385a0d5e67707e3c3412f307a6e1cd3c3ef6ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always_use_long_format&lt;/code&gt;: set to &lt;code&gt;1&lt;/code&gt; to use the long format for strings even if a short format can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591f43278df786c1dcefa7d4af3ca39f47429dcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ancestor_label&lt;/code&gt;: In case of conflicts, the name of the common ancestor side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3562ef6c0f08aa2cf85d7151ac11500862c1ccb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anns&lt;/code&gt; may refer to remote or local branch heads. Return &lt;code&gt;true&lt;/code&gt; if the merge is successful, otherwise return &lt;code&gt;false&lt;/code&gt; (for instance, if no merge is possible because the branches have no common ancestor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc30a57e1981b34478e78c6127cb77885b3bd354" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ans&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7dae000675b1f8d6a33dbe76c8d1f62aa472367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;author::Signature = Signature(repo)&lt;/code&gt; is a &lt;code&gt;Signature&lt;/code&gt; containing information about the person who authored the commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63fcd3dbf8eac20e114001a6b45f19a9462eb59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&quot;DATA\xff\u2200&quot;&lt;/code&gt; is a byte array literal for &lt;code&gt;[68,65,84,65,255,226,136,128]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cddd9ed162256d9660aba6a22efa02000f7a77d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bare&lt;/code&gt;: If &lt;code&gt;0&lt;/code&gt;, clone the full remote repository. If non-zero, perform a bare clone, in which there is no local copy of the source files in the repository and the &lt;a href=&quot;#LibGit2.gitdir&quot;&gt;&lt;code&gt;gitdir&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt; are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11954259ca57a587f9d23b57bfa2a6609ba4f2a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baremodule&lt;/code&gt; declares a module that does not contain &lt;code&gt;using Base&lt;/code&gt; or a definition of &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/init/#Base.eval-1&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;. It does still import &lt;code&gt;Core&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc681c613f039fe8ea166fac4cd49f1b96d6590" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baremodule&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62514064ccf34cec3f855eb85ce96fab5b85a25f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseline&lt;/code&gt;: Expected content of the &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;, captured in a (pointer to a) &lt;a href=&quot;#LibGit2.GitTree&quot;&gt;&lt;code&gt;GitTree&lt;/code&gt;&lt;/a&gt;. Defaults to the state of the tree at HEAD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b69bccaf992afb651b72dab677f76a2ef2df258" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;baseline_index&lt;/code&gt;: Expected content of the &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;, captured in a (pointer to a) &lt;code&gt;GitIndex&lt;/code&gt;. Defaults to the state of the index at HEAD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262f7dda51bcc401b2a2c15addc431d05f54ffe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin...end&lt;/code&gt; denotes a block of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9094481548ca50e8ada86c300209aea6b6474d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;begin&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a9477d14103b9d696bf226b4584f81745676e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bind_addr&lt;/code&gt; &amp;ndash; the address on the remote host to bind to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245e96d113f5f118940af46eb44b8d846ff775d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bool&lt;/code&gt; (only in C++)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9dabf5c9a5a2ca28b68f79135b608a1bc6c0b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;branch::AbstractString=&quot;&quot;&lt;/code&gt;: Merge the branch &lt;code&gt;branch&lt;/code&gt; and all its commits since it diverged from the current branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758aa2298185c25e6a3579d61ebebe90e5b67719" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;branch::AbstractString=&quot;&quot;&lt;/code&gt;: which branch of the remote to clone, if not the default repository branch (usually &lt;code&gt;master&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294972bca0272bbe3f9123baacd2564568ecef81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ec58c2d7adece72f6721c3868c3d98e298ed2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bunchkaufman!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.bunchkaufman&quot;&gt;&lt;code&gt;bunchkaufman&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d237480943280dabccd4633c37d173a68c4160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c::Condition&lt;/code&gt;: the condition variable to be notified as and when workers are launched</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57c5d8c088870a31c034c7d2bfbae00d88ec065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callbacks::Callbacks=Callbacks()&lt;/code&gt;: user provided callbacks and payloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057c66ed2f220a71c32bb4b39301f664775dff47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callbacks&lt;/code&gt;: remote callbacks to use during the fetch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3f91e91e93c1787ffeb23e87e60f65faed4c1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callbacks&lt;/code&gt;: the callbacks (e.g. for authentication with the remote) to use for the push.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5da00d6c904aceb253dcbee004c3009d343471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callbacks=Callbacks()&lt;/code&gt;: user provided callbacks and payloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f533fea4247472779d9dd4ba43d460454db1ca92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;casefold=true&lt;/code&gt;: perform Unicode case folding, e.g. for case-insensitive string comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180df7d496ea463110991f6909267a497761aeae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ccall&lt;/code&gt; / &lt;code&gt;@cfunction&lt;/code&gt; argument translation guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec785c0ca297d9f3ee933a38caa7364de1718cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ccall&lt;/code&gt; / &lt;code&gt;@cfunction&lt;/code&gt; return type translation guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56e1b126ca6592be4662b7a171881967d8b5ee0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ccall&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669a29c7c7a939f9d84c2ac4fb4f396bb9a03bf5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ceil(T, x)&lt;/code&gt; converts the result to type &lt;code&gt;T&lt;/code&gt;, throwing an &lt;code&gt;InexactError&lt;/code&gt; if the value is not representable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef8014914d25d1b66f3506423976fb81f06f257" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ceil(x)&lt;/code&gt; returns the nearest integral value of the same type as &lt;code&gt;x&lt;/code&gt; that is greater than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edff46e892306e5700111184751ae39bf7e6f638" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;certificate_cb&lt;/code&gt;: a pointer to a callback function which will be called if certificate verification fails. This lets the user decide whether or not to keep connecting. If the function returns &lt;code&gt;1&lt;/code&gt;, connecting will be allowed. If it returns &lt;code&gt;0&lt;/code&gt;, the connection will not be allowed. A negative value can be used to return errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a014bbb38f529808167234dd3fce96e55f15991" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char**&lt;/code&gt; (or &lt;code&gt;*char[]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18b18d10879194e07c471769c57ceb7aabc0331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char*&lt;/code&gt; (or &lt;code&gt;char[]&lt;/code&gt;, e.g. a string)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c09b565c479a77f1c6c2ae8c3d30c94e9ff85da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chargeall&lt;/code&gt;: specifies the types of objects to always charge the size of all of their fields, even if those fields would normally be excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71a2a401bd1d90efb75ce0c70a6aed260e908d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chars&lt;/code&gt; can be any collection of characters, of type &lt;code&gt;Char&lt;/code&gt; or &lt;code&gt;UInt8&lt;/code&gt; (more efficient), provided &lt;a href=&quot;#Base.rand&quot;&gt;&lt;code&gt;rand&lt;/code&gt;&lt;/a&gt; can randomly pick characters from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3097dc0be39161f6a3c659f475b20a687b079d2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;charset::Symbol=:na&lt;/code&gt;: ui characters to use (&lt;code&gt;:ascii&lt;/code&gt; or &lt;code&gt;:unicode&lt;/code&gt;); overridden by other arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833774cd92251b733aa1c51de19da19efeaca742" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checked::String=&quot;[X]&quot;|&quot;✓&quot;&lt;/code&gt;: string to use for checked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2035b71bb049b7d6f31090f296a2a4b6fc7e52e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_branch&lt;/code&gt;: The name of the branch to checkout. If an empty string, the default branch of the remote will be checked out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15049383223cee96574053ec3098a5708ce51d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_opts::CheckoutOptions = CheckoutOptions()&lt;/code&gt;: options for how to perform the checkout. See &lt;a href=&quot;#LibGit2.CheckoutOptions&quot;&gt;&lt;code&gt;CheckoutOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834d8ede255daca3c13a7238b84fac7b61e188f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_opts::CheckoutOptions=CheckoutOptions()&lt;/code&gt;: &lt;code&gt;checkout_opts&lt;/code&gt; specifies options for the checkout step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc4bab5fb128ba19ae997a1758bde395eb12fda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_opts&lt;/code&gt;: The options for performing the checkout of the remote as part of the clone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d538eb25c0874f8b5dd1d61c39c77f466ccab38a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_opts&lt;/code&gt;: checkout options for writing files when initializing the rebase, stepping through it, and aborting it. See &lt;a href=&quot;#LibGit2.CheckoutOptions&quot;&gt;&lt;code&gt;CheckoutOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987ef8b8800ce568fe2dae60b9286b389f1bde08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkout_strategy&lt;/code&gt;: determine how to handle conflicts and whether to force the checkout/recreate missing files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5564d7ca2b0b99425451425c492ead7d83404708" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clock&lt;/code&gt; takes no arguments and returns an &lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/a&gt;. One common gotcha is that a 1-tuple must be written with a trailing comma. For example, to call the &lt;code&gt;getenv&lt;/code&gt; function to get a pointer to the value of an environment variable, one makes a call like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9469909e8b8236ef523c54aaaed10e21c4b49909" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cluster_cookie()&lt;/code&gt; returns the cookie, while &lt;code&gt;cluster_cookie(cookie)()&lt;/code&gt; sets it and returns the new cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188b9ab3edaa7c9f995ecfd210255b942502c2eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;color&lt;/code&gt; may take any of the values &lt;code&gt;:normal&lt;/code&gt;, &lt;code&gt;:default&lt;/code&gt;, &lt;code&gt;:bold&lt;/code&gt;, &lt;code&gt;:black&lt;/code&gt;, &lt;code&gt;:blink&lt;/code&gt;, &lt;code&gt;:blue&lt;/code&gt;, &lt;code&gt;:cyan&lt;/code&gt;, &lt;code&gt;:green&lt;/code&gt;, &lt;code&gt;:hidden&lt;/code&gt;, &lt;code&gt;:light_black&lt;/code&gt;, &lt;code&gt;:light_blue&lt;/code&gt;, &lt;code&gt;:light_cyan&lt;/code&gt;, &lt;code&gt;:light_green&lt;/code&gt;, &lt;code&gt;:light_magenta&lt;/code&gt;, &lt;code&gt;:light_red&lt;/code&gt;, &lt;code&gt;:light_yellow&lt;/code&gt;, &lt;code&gt;:magenta&lt;/code&gt;, &lt;code&gt;:nothing&lt;/code&gt;, &lt;code&gt;:red&lt;/code&gt;, &lt;code&gt;:reverse&lt;/code&gt;, &lt;code&gt;:underline&lt;/code&gt;, &lt;code&gt;:white&lt;/code&gt;, or &lt;code&gt;:yellow&lt;/code&gt; or an integer between 0 and 255 inclusive. Note that not all terminals support 256 colors. If the keyword &lt;code&gt;bold&lt;/code&gt; is given as &lt;code&gt;true&lt;/code&gt;, the result will be printed in bold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4afa027d1b36304f33fec63381a21be62c41c3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combine&lt;/code&gt; &amp;ndash; If &lt;code&gt;true&lt;/code&gt; (default), instruction pointers are merged that correspond to the same line of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730758a453ccac830e4fa862bbbadcb010e810af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combine&lt;/code&gt; &amp;ndash; Some lines of code contain multiple operations; for example, &lt;code&gt;s += A[i]&lt;/code&gt; contains both an array reference (&lt;code&gt;A[i]&lt;/code&gt;) and a sum operation. These correspond to different lines in the generated machine code, and hence there may be two or more different addresses captured during backtraces on this line. &lt;code&gt;combine = true&lt;/code&gt; lumps them together, and is probably what you typically want, but you can generate an output separately for each unique instruction pointer with &lt;code&gt;combine = false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2a6b8031024235b1cda119570c6c1470a49124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;committer::Signature = Signature(repo)&lt;/code&gt; is a &lt;code&gt;Signature&lt;/code&gt; containing information about the person who committed the commit to the repository. Not necessarily the same as &lt;code&gt;author&lt;/code&gt;, for instance if &lt;code&gt;author&lt;/code&gt; emailed a patch to &lt;code&gt;committer&lt;/code&gt; who committed it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a406cf6d5716fec4581a3d155ea3472a0b0a51e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;committish::AbstractString=&quot;&quot;&lt;/code&gt;: Merge the named commit(s) in &lt;code&gt;committish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2845b7f607d36c4d5a826ab28f3944981beadc20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compat=true&lt;/code&gt;: compatibility equivalents are canonicalized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e61026e73ccfbfe1d347b6907b8fca46559da9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compose=false&lt;/code&gt;: do not perform canonical composition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b85e097c468cc8b757df37cb4ddf959b8e7b12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect&lt;/code&gt; should return a pair of &lt;code&gt;IO&lt;/code&gt; objects, one for reading data sent from worker &lt;code&gt;pid&lt;/code&gt;, and the other to write data that needs to be sent to worker &lt;code&gt;pid&lt;/code&gt;. Custom cluster managers can use an in-memory &lt;code&gt;BufferStream&lt;/code&gt; as the plumbing to proxy data between the custom, possibly non-&lt;code&gt;IO&lt;/code&gt; transport and Julia's in-built parallel infrastructure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9deabe4eacc528d976003006b9b134240452cfde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect_at&lt;/code&gt; &amp;ndash; determines whether this is a worker-to-worker or driver-to-worker setup call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee753fcdf36981a8dc29eb843e6b536cde80aae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect_idents&lt;/code&gt; &amp;ndash; list of worker ids the worker must connect to if using a custom topology</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5849823c5dd78522c92f9451a2e54d4d7f0be9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt; is used to declare global variables whose values will not change. In almost all code (and particularly performance sensitive code) global variables should be declared constant in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f1cf27efcef648de0d6e21f363ac00957f7ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9be63e4d6ef4c5e894d0c992389c1dbb1af2ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context_lines&lt;/code&gt;: the number of &lt;em&gt;unchanged&lt;/em&gt; lines used to define the edges of a hunk. This is also the number of lines which will be shown before/after a hunk to provide context. Default is 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538b9857b1ec94f159d2ef47566a14e470f49d12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;continue&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4314bba93b735790b951cc3e8c7f4f11d72c54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;convert(T, x)&lt;/code&gt; is expected to return the original &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is already of type &lt;code&gt;T&lt;/code&gt;. In contrast, if &lt;code&gt;T&lt;/code&gt; is a mutable collection type then &lt;code&gt;T(x)&lt;/code&gt; should always make a new collection (copying elements from &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc13e5e6dac845ce3c6dfbd7e164c5d9039aa69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; &amp;ndash; the number of workers to be launched on the host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471d08778aad8856ce9ba26ddc26257badd6623e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; finds the number of commits along the walk with a certain &lt;code&gt;GitHash&lt;/code&gt;&lt;code&gt;commit_oid1&lt;/code&gt;, starting the walk from that commit and moving forwards in time from it. Since the &lt;code&gt;GitHash&lt;/code&gt; is unique to a commit, &lt;code&gt;cnt&lt;/code&gt; will be &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f55af5e160af640d2e78dec366674686188014b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; is the number of workers to be launched on the specified host. If specified as &lt;code&gt;:auto&lt;/code&gt; it will launch as many workers as the number of CPU threads on the specific host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cee5515b6c9782bee92ed48daf0c451af42fe81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; with a value of &lt;code&gt;:auto&lt;/code&gt; will launch as many workers as the number of CPU threads (logical cores) on that machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5cff5466decb243f3790d68dfdc411bb5397ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; with an integer value &lt;code&gt;n&lt;/code&gt; will launch a total of &lt;code&gt;n&lt;/code&gt; workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f26291f0809198fee9c180fb6353bc085fffeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt;, &lt;code&gt;exename&lt;/code&gt; and &lt;code&gt;exeflags&lt;/code&gt; are relevant for launching additional workers from a worker. For example, a cluster manager may launch a single worker per node, and use that to launch additional workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c329167af19c81814061c58f1794647864d3503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;credential_cb&lt;/code&gt;: a pointer to a callback function which will be called if the remote requires authentication to connect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e324e6802f5c52dea660dbd295f81b50031e7488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;credentials::Creds=nothing&lt;/code&gt;: provides credentials and/or settings when authenticating against a private repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf7d804ac4665b992c3a68255b882ee2f4305aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;credentials=nothing&lt;/code&gt;: provides credentials and/or settings when authenticating against a private &lt;code&gt;remote&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff92f2bc2b6dd765c1a2cdc7b11e3d42a2684f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ctrl_c_interrupt::Bool=true&lt;/code&gt;: If &lt;code&gt;false&lt;/code&gt;, return empty on ^C, if &lt;code&gt;true&lt;/code&gt; throw InterruptException() on ^C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc31538d3cb627494ffad36c27f224f6f8f8aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cursor::Char='&amp;gt;'|'&amp;rarr;'&lt;/code&gt;: character to use for cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5f48f584fd242fc279525a777513eb95fef56c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;custom_headers&lt;/code&gt;: any extra headers needed for the fetch. Only present on libgit2 versions newer than or equal to 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7926158bec2057f9743f5c2d191f7643ac39f7e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;custom_headers&lt;/code&gt;: only relevant if the LibGit2 version is greater than or equal to &lt;code&gt;0.24.0&lt;/code&gt;. Extra headers needed for the push operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab3dc7b169c06a0b67bb9b287bd48c0850370a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; &amp;ndash; Contains the data you want to analyze; by default that is obtained from &lt;a href=&quot;../../stdlib/profile/index#Profile.fetch&quot;&gt;&lt;code&gt;Profile.fetch()&lt;/code&gt;&lt;/a&gt;, which pulls out the backtraces from a pre-allocated buffer. For example, if you want to profile the profiler, you could say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea4b433413504ab8ff31a38349a7ab729362868" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debuginfo&lt;/code&gt; may be one of &lt;code&gt;:source&lt;/code&gt; (default) or &lt;code&gt;:none&lt;/code&gt;, to specify the verbosity of code comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff625bb55993ab68a3af394b6f211de706d1cac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decompose=true&lt;/code&gt;: do canonical decomposition instead of canonical composition (&lt;code&gt;compose=true&lt;/code&gt; is ignored if present)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584387654589ac80753489589df4ff47f721dfe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default_driver&lt;/code&gt;: the merge driver to use if both sides have changed. This field is only present on libgit2 versions newer than 0.25.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f225ad3b1b2ed4d6f7f44d5ded075d869d51b4c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;describe_strategy&lt;/code&gt;: whether to consider all entries in &lt;code&gt;refs/tags&lt;/code&gt; (equivalent to &lt;code&gt;git-describe --tags&lt;/code&gt;) or all entries in &lt;code&gt;refs/&lt;/code&gt; (equivalent to &lt;code&gt;git-describe --all&lt;/code&gt;). The default is to only show annotated tags. If &lt;code&gt;Consts.DESCRIBE_TAGS&lt;/code&gt; is passed, all tags, annotated or not, will be considered. If &lt;code&gt;Consts.DESCRIBE_ALL&lt;/code&gt; is passed, any ref in &lt;code&gt;refs/&lt;/code&gt; will be considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbc6cc0a20836ad1ebe123e347a5efc69561e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;detach::Bool&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), then the &lt;code&gt;Cmd&lt;/code&gt; will be run in a new process group, allowing it to outlive the &lt;code&gt;julia&lt;/code&gt; process and not have Ctrl-C passed to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8340c5ddf4f25ab97aad9e70c63a55cd08d35ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diag&lt;/code&gt;/&lt;code&gt;dX&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35d94806c744a32de2aaec44964966a28aa7cd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diff&lt;/code&gt; for arrays with dimension higher than 2 requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5361fe4d31276f90978dbc00ae75eeca1498a065" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;digits&lt;/code&gt;, &lt;code&gt;sigdigits&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; work as for &lt;code&gt;round&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896aad4184c0301337fbfb4fc371b6d69c45a4f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dims&lt;/code&gt; is a tuple or single &lt;a href=&quot;../../base/numbers/index#Core.Integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; specifying the size or length of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b7d9591bc86d893b0b3b24268c2fa1a6108caa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir::AbstractString&lt;/code&gt;: Specify a working directory for the command (instead of the current directory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427aaf0ba3adfcc665249ede3ee20a03e786abef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt;: specifies the working directory on the workers. Defaults to the host's current directory (as found by &lt;code&gt;pwd()&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5d3d8994e6d4cc0c7364114f577e2e905820ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir_mode&lt;/code&gt;: read/write/access mode for any directories involved in the checkout. Default is &lt;code&gt;0755&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e94b808256087a23b12a43de88344fdd8287ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirty_suffix&lt;/code&gt;: if set, this will be appended to the end of the description string if the &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt; is dirty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f097b712e653a6be6ce492ae4b2d4dca084054d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disable_filters&lt;/code&gt;: if nonzero, do not apply filters like CLRF (to convert file newlines between UNIX and DOS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624c189e4a07eb3b2ee1d73e5879772133de3efb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aed63ce1c4fea2f40359ad955840e0204192e8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&quot;&quot;&lt;/code&gt; should only be used when the docstring contains &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;\&lt;/code&gt; characters that should not be parsed by Julia such as LaTeX syntax or Julia source code examples containing interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54b7d104f675e6b8986fa8a4e78c2db8625a1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;down_arrow::Char='v'|'&amp;darr;'&lt;/code&gt;: character to use for down arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b2181801dbc34d821d40950e6760ed80cfc5a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;download_tags&lt;/code&gt;: whether to download tags present at the remote or not. The default is to request the tags for objects which are being downloaded anyway from the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6526cf54cd6036370b8fad5549c15d024cae2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edit&lt;/code&gt; on modules requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c84f288143353e4d3398644c8792e2cfcde04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;email&lt;/code&gt;: The email at which the committer/author can be contacted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8626417ad58304970a6797c6b3ad0ca7afd22a12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enable_broadcast&lt;/code&gt;: flag must be set to &lt;code&gt;true&lt;/code&gt; if socket will be used for broadcast messages, or else the UDP system will return an access error (default: &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5de7f9105f9a5b0d6b02c5bc403fc391b879779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enable_threaded_blas&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt;, whether to use threaded BLAS or not on the workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f4a58348e94041b298cd25eac9d55b973cb65a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enable_threaded_blas&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt; then BLAS will run on multiple threads in added processes. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3730809a9175c1f102e72992423b4b0aed8c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; marks the conclusion of a block of expressions, for example &lt;a href=&quot;#module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#mutable%20struct&quot;&gt;&lt;code&gt;mutable struct&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#begin&quot;&gt;&lt;code&gt;begin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; etc. &lt;code&gt;end&lt;/code&gt; may also be used when indexing into an array to represent the last index of a dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1865138d9a06f5c59cbe949376a9949685ee42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a1f7217488939442c7cf7dd9d4e92bf7a46e30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endswith&lt;/code&gt; does not compile the anchoring into the regular expression, but instead passes the anchoring as &lt;code&gt;match_option&lt;/code&gt; to PCRE. If compile time is amortized, &lt;code&gt;occursin(r&quot;...$&quot;, s)&lt;/code&gt; is faster than &lt;code&gt;endswith(s, r&quot;...&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e5d7049863db5d1c28381555a579ea148b3c64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt;: Set environment variables to use when running the &lt;code&gt;Cmd&lt;/code&gt;. &lt;code&gt;env&lt;/code&gt; is either a dictionary mapping strings to strings, an array of strings of the form &lt;code&gt;&quot;var=val&quot;&lt;/code&gt;, an array or tuple of &lt;code&gt;&quot;var&quot;=&amp;gt;val&lt;/code&gt; pairs, or &lt;code&gt;nothing&lt;/code&gt;. In order to modify (rather than replace) the existing environment, create &lt;code&gt;env&lt;/code&gt; by &lt;code&gt;copy(ENV)&lt;/code&gt; and then set &lt;code&gt;env[&quot;var&quot;]=val&lt;/code&gt; as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd9f7c46d8d488443a1fd7cfd8cac9a15d9c774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;environ&lt;/code&gt; &amp;ndash; private dictionary used to store temporary information by Local/SSH managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9091cfe5b2ccbc33d0cc68f5e302afff4d7a38f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception=ex&lt;/code&gt; should be used to transport an exception with a log message, often used with &lt;code&gt;@error&lt;/code&gt;. An associated backtrace &lt;code&gt;bt&lt;/code&gt; may be attached using the tuple &lt;code&gt;exception=(ex,bt)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbdde63c774d4d637fc18820b7c2261306ed0be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exclude&lt;/code&gt;: specifies the types of objects to exclude from the traversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f331d89838daabfff012fe727d742c8c8e673c8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec&lt;/code&gt;: in case &lt;code&gt;REBASE_OPERATION_EXEC&lt;/code&gt; is used, the command to run during this step (for instance, running the test suite after each commit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1522caf94cdbf9488832895b1e607324c5eadf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exeflags&lt;/code&gt; &amp;ndash; flags to use when lauching Julia remotely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4475ebb24c0e359de01708bc1d247a728f337715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exeflags&lt;/code&gt; should be set to the required command line arguments for new workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f09246b7fa073a7f1026d572e6e088740c6e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exeflags&lt;/code&gt;: additional flags passed to the worker processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8963f41f3051e232c8d5de842f5be607191c3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt; &amp;ndash; the path to the Julia executable on the host, defaults to &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; or &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbecc18bae8e3704699c9ddb2d2f6ee8f7947be3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt; is the name of the &lt;code&gt;julia&lt;/code&gt; executable including the full path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9777b51b1141d2eaeeb8767f03f02a288a8ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt;: name of the &lt;code&gt;julia&lt;/code&gt; executable. Defaults to &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; or &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt; as the case may be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d0445c62c1b3939fafe7b40795814fcba18b16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt; is used within modules to tell Julia which functions should be made available to the user. For example: &lt;code&gt;export foo&lt;/code&gt; makes the name &lt;code&gt;foo&lt;/code&gt; available when &lt;a href=&quot;#using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; the module. See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6574aff1f598d8da6d01cfe7e24524b2c0a7bd1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7471ee53c91775ff9ce42d242abe595bcfc7dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f(x)&lt;/code&gt; can be any call expression. Returns the result of &lt;code&gt;f(x)&lt;/code&gt; if the types match, and an &lt;code&gt;Error&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; if it finds different types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497f30aa399e54f4d4675a55c3eafb38181ea62b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;factors&lt;/code&gt; is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c27552004d64395046d29795efee05dcc044c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;factors&lt;/code&gt;, as in the &lt;a href=&quot;#LinearAlgebra.QR&quot;&gt;&lt;code&gt;QR&lt;/code&gt;&lt;/a&gt; type, is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d807df0dedd6adab6f030655307f5490121a67cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; (0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c323dd694e4baf6f9a2d099639446439f70e26f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fastforward::Bool=false&lt;/code&gt;: If &lt;code&gt;fastforward&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, only merge if the merge is a fast-forward (the current branch head is an ancestor of the commits to be merged), otherwise refuse to merge and return &lt;code&gt;false&lt;/code&gt;. This is equivalent to the git CLI option &lt;code&gt;--ff-only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c543b2d8b2065a2e5dc452819e6c3f937251e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch&lt;/code&gt; can be considered an explicit data movement operation, since it directly asks that an object be moved to the local machine. &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawn&quot;&gt;&lt;code&gt;@spawn&lt;/code&gt;&lt;/a&gt; (and a few related constructs) also moves data, but this is not as obvious, hence it can be called an implicit data movement operation. Consider these two approaches to constructing and squaring a random matrix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f304481efd9961734ed02019c52b7f122e9caadf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch_opts&lt;/code&gt;: The options for performing the pre-checkout fetch of the remote as part of the clone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fd3b698a115341e458d38e2ec7ad39b99bd28b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_favor&lt;/code&gt;: how to handle conflicting file contents for the &lt;code&gt;text&lt;/code&gt; driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de1b4ec1dbc92d77323db107114a2663e47b3ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_flags&lt;/code&gt;: guidelines for merging files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbf2559a3914fd50a580c62f1bf3a524a1b31f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_mode&lt;/code&gt;: read/write/access mode for any files involved in the checkout. Default is &lt;code&gt;0755&lt;/code&gt; or &lt;code&gt;0644&lt;/code&gt;, depending on the blob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c42aacc63e30d4330883c95cf718c8560278f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_open_flags&lt;/code&gt;: bitflags used to open any files during the checkout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0fc1d82d9beeb03810443c1cef5731061c18c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter::Set{Consts.DELTA_STATUS}=Set([Consts.DELTA_ADDED, Consts.DELTA_MODIFIED, Consts.DELTA_DELETED]))&lt;/code&gt;, and it sets options for the diff. The default is to show files added, modified, or deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1902a68a69fa5a2286af83a34ec192b45a3e6c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally&lt;/code&gt; Clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705dcca1f483b5f410a7d024bf9ea5567a98d882" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a246350d082e2ecf351fc1a6227a9daf36f33939" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findnext(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; such that &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; and &lt;code&gt;i &amp;lt;= start&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt; if unmatched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07de775ab3ffe3db837f89e66ab75d6248ad4f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findprev(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; such that &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; and &lt;code&gt;stop &amp;lt;= i&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt; if unmatched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6132598e6b7a6f7dbd326bd4b30b37bdb5c4535d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: Flags for the delta and the objects on each side. Determines whether to treat the file(s) as binary/text, whether they exist on each side of the diff, and whether the object ids are known to be correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dfea97d21ddfc07bbc16a2205aa96d1c822a29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: a combination of the &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_diff_flag_t&quot;&gt;&lt;code&gt;git_diff_flag_t&lt;/code&gt;&lt;/a&gt; flags. The &lt;code&gt;i&lt;/code&gt;th bit of this integer sets the &lt;code&gt;i&lt;/code&gt;th flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3f46c8ead4a96fd5e9f1735c77e01ac2e9df4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: an &lt;code&gt;enum&lt;/code&gt; for flags describing merge behavior. Defined in &lt;a href=&quot;https://github.com/libgit2/libgit2/blob/HEAD/include/git2/merge.h#L95&quot;&gt;&lt;code&gt;git_merge_flag_t&lt;/code&gt;&lt;/a&gt;. The corresponding Julia enum is &lt;code&gt;GIT_MERGE&lt;/code&gt; and has values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ad69674a910f1a345e02b973a2e9f13be3f925" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: flags controlling which files will appear in the diff. Defaults to &lt;code&gt;DIFF_NORMAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac96c3420fc47ecbae6d81e79e8646bf681816a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: flags for controlling any callbacks used in a status call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f514fc00776f1753b3aa88448a24342da8ef48c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: one of &lt;code&gt;Consts.BLAME_NORMAL&lt;/code&gt; or &lt;code&gt;Consts.BLAME_FIRST_PARENT&lt;/code&gt; (the other blame flags are not yet implemented by libgit2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e302baefdbfe650eed3e3989e00d95ff24420d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;floor(T, x)&lt;/code&gt; converts the result to type &lt;code&gt;T&lt;/code&gt;, throwing an &lt;code&gt;InexactError&lt;/code&gt; if the value is not representable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83862f9f9b336e858b86ef3cce875e4b50041164" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;floor(x)&lt;/code&gt; returns the nearest integral value of the same type as &lt;code&gt;x&lt;/code&gt; that is less than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="555deaa32601a989d7598bcb2f199e104d3181cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops repeatedly evaluate a block of statements while iterating over a sequence of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc0eadc34c155040e86b2da693e68d65e15d861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;while&lt;/code&gt; loops, and &lt;a href=&quot;../arrays/index#Comprehensions-1&quot;&gt;Comprehensions&lt;/a&gt; have the following behavior: any new variables introduced in their body scopes are freshly allocated for each loop iteration, as if the loop body were surrounded by a &lt;code&gt;let&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec35bbf9967b12c572f1318ed025dfeae186ddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53dd6aa8e8d475ff1ee618c1ee3d8f300a0e513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: determines if the push will be a force push, overwriting the remote branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffee3fe6299fc5a6f0fbcb9a6544eb7b084a999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, branch creation will be forced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c5127fe157928b2cdc7f2f08c633baf7c246a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, existing references will be overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ce10e1bd1c57308264cfa8a02820161529c9d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, a force-push will occur, disregarding conflicts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46f672d0974765d0e4d253aed78bcd6e5d3db60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; &amp;ndash; Determines whether backtraces are printed with (default, &lt;code&gt;:tree&lt;/code&gt;) or without (&lt;code&gt;:flat&lt;/code&gt;) indentation indicating tree structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f38a1c899e88a0f23d1dfceaf7e3fd37e72169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; &amp;ndash; Introduced above, determines whether backtraces are printed with (default, &lt;code&gt;:tree&lt;/code&gt;) or without (&lt;code&gt;:flat&lt;/code&gt;) indentation indicating tree structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fcdc8d4522728ad257672e40067d5a19c4c857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0109f2ca671c98fc793c2888fdfb44cb05b2f484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global const&lt;/code&gt; statements from local scope after &lt;code&gt;__init__()&lt;/code&gt; has been started (see issue #12010 for plans to add an error for this)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcb126bd8fbe56f4b5b16fa14c6c4a92e9cf8a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global x&lt;/code&gt; makes &lt;code&gt;x&lt;/code&gt; in the current scope and its inner scopes refer to the global variable of that name. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2e813901bd2d8f12c7e3878d31c8f733486073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90e71a2c6d30f99d8ba5b28c6c2a5bb0f3aff1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt; is a full (&lt;code&gt;GitHash&lt;/code&gt;) or partial (&lt;code&gt;GitShortHash&lt;/code&gt;) hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab9710162b39252a4dfe60a21316f6a9dd04318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head_to_index&lt;/code&gt;: a pointer to a &lt;a href=&quot;#LibGit2.DiffDelta&quot;&gt;&lt;code&gt;DiffDelta&lt;/code&gt;&lt;/a&gt; which encapsulates the difference(s) between the file as it exists in HEAD and in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fb6255646b88973be5d589e3e2cd202888275d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hessenberg!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.hessenberg&quot;&gt;&lt;code&gt;hessenberg&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443aaa2d8a08dbab9eefb3c00c406e4d50854023" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;homedir&lt;/code&gt; determines the home directory via &lt;code&gt;libuv&lt;/code&gt;'s &lt;code&gt;uv_os_homedir&lt;/code&gt;. For details (for example on how to specify the home directory via environment variables), see the &lt;a href=&quot;http://docs.libuv.org/en/v1.x/misc.html#c.uv_os_homedir&quot;&gt;&lt;code&gt;uv_os_homedir&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25471dd737a8db4cd226555668049cca23bf99f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host::AbstractString=&quot;&quot;&lt;/code&gt;: the hostname to use in the output. A hostname is required to be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6378d9ceebd483400cddb31fa9c2a3c49dd015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; &amp;ndash; the host address (either an &lt;code&gt;AbstractString&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f2590aab388123acc554ec9786e12f2ed78dd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; enables case-insensitive matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac86474612cc32f61718a325d8179094b3f029b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; is unique across all references created from the worker specified by &lt;code&gt;whence&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77683aec1c525b2fa7ea4282b18b2bfd743591a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit being worked on during this rebase step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4632953193a9be88e4db3f78db33ec9c0b3e5355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the item in the diff. If the item is empty on this side of the diff (for instance, if the diff is of the removal of a file), this will be &lt;code&gt;GitHash(0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e890a5aeabd7d8ed2134402d7301e54269b9fea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_abbrev&lt;/code&gt;: only present in LibGit2 versions newer than or equal to &lt;code&gt;0.25.0&lt;/code&gt;. The length of the &lt;code&gt;id&lt;/code&gt; field when converted using &lt;a href=&quot;../../base/strings/index#Base.string&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;. Usually equal to &lt;code&gt;OID_HEXSZ&lt;/code&gt; (40).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d569a64dd1d8d5f907282660e533f0925b4121f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_abbrev&lt;/code&gt;: sets the length of the abbreviated &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; to print. Default is &lt;code&gt;7&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b126af9abc886e3ecfdde16a44fc1fd06cacab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ident&lt;/code&gt; &amp;ndash; worker as identified by the &lt;a href=&quot;#Distributed.ClusterManager&quot;&gt;&lt;code&gt;ClusterManager&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b00d5176640c38aab5edaa5b524b6e779cf1b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; blocks also return a value, which may seem unintuitive to users coming from many other languages. This value is simply the return value of the last executed statement in the branch that was chosen, so</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb2f9043fb5a6e861c26de7d9fc3e06f6279b43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; blocks are &quot;leaky&quot;, i.e. they do not introduce a local scope. This means that new variables defined inside the &lt;code&gt;if&lt;/code&gt; clauses can be used after the &lt;code&gt;if&lt;/code&gt; block, even if they weren't defined before. So, we could have defined the &lt;code&gt;test&lt;/code&gt; function above as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf46a1a1630b72dba5a7f8db4ee562143b45f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; performs conditional evaluation, which allows portions of code to be evaluated or not evaluated depending on the value of a boolean expression. Here is the anatomy of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; conditional syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566ebce021ad66c3334658155da253a262017f6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d807151cf5fb7a277f815a71877f8ac2493dd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignore_submodules&lt;/code&gt;: whether to look at files in submodules or not. Defaults to &lt;code&gt;SUBMODULE_IGNORE_UNSPECIFIED&lt;/code&gt;, which means the submodule's configuration will control whether it appears in the diff or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ec9971812e6bb11003c306876aa97764469071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignorestatus::Bool&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), then the &lt;code&gt;Cmd&lt;/code&gt; will not throw an error if the return code is nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d73230963993ccbecb868483fbaecb6157d6cda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Foo&lt;/code&gt; will load the module or package &lt;code&gt;Foo&lt;/code&gt;. Names from the imported &lt;code&gt;Foo&lt;/code&gt; module can be accessed with dot syntax (e.g. &lt;code&gt;Foo.foo&lt;/code&gt; to access the name &lt;code&gt;foo&lt;/code&gt;). See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a86299ce603a7643e3664ff35ca004b94ad86d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35c5eb16c9e1c075a2a381e94cfe254e7dd0daa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt; the &lt;code&gt;tst.jl&lt;/code&gt; file in the Julia REPL with &lt;code&gt;include(&quot;tst.jl&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f768295f60d5987df59c14346dbea6137535cca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index_to_workdir&lt;/code&gt;: a pointer to a &lt;code&gt;DiffDelta&lt;/code&gt; which encapsulates the difference(s) between the file as it exists in the index and in the &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474f56e3f7f2db91f626ba947f94c8134a832be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inds&lt;/code&gt; can be either an iterator or a collection of sorted and unique integer indices, or a boolean vector of the same length as &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;true&lt;/code&gt; indicating entries to delete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b74525a3214d8995b7de35723cd0e10aa9cc48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_worker(cookie, manager::FooManager)&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be called as part of worker process initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062786138593a2c08d489ac7499ae90c9ac1b687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inmemory&lt;/code&gt;: start an in-memory rebase. Callers working on the rebase can go through its steps and commit any changes, but cannot rewind HEAD or update the repository. The &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt; will not be modified. Only present on libgit2 versions newer than or equal to 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f0e964371142a5bdcf673bc58ad413b60b5576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;BOOL&lt;/code&gt; (C, typical)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6987d5f4b696d5dad48c78ec3bd108e4434880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interhunk_lines&lt;/code&gt;: the maximum number of &lt;em&gt;unchanged&lt;/em&gt; lines &lt;em&gt;between&lt;/em&gt; two separate hunks allowed before the hunks will be combined. Default is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac758c6df49f7e88cbaf72ed20736709216e27a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv(::Missing)&lt;/code&gt; requires at least Julia 1.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defccb8166cf527d394e34aea3f1751d7f3bf94e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;a href=&quot;#LinearAlgebra.det&quot;&gt;&lt;code&gt;det&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1625223f3bccb84ba7248a9f8ae3e5a6efc8f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;a href=&quot;#LinearAlgebra.det&quot;&gt;&lt;code&gt;det&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#LinearAlgebra.logdet&quot;&gt;&lt;code&gt;logdet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/math/index#Base.:/&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd375f58223ce99e67fd522a69ff52eeb0090c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb423dd8ec10d55f3420319afa3f79a334d2182d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;io&lt;/code&gt; &amp;ndash; Allows you to save the results to a buffer, e.g. a file, but the default is to print to &lt;code&gt;stdout&lt;/code&gt; (the console).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5546bdb05f19d23dc367936cace4cab1b8200d3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;io&lt;/code&gt; &amp;ndash; the connection used to access the worker (a subtype of &lt;code&gt;IO&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a259654f78220bfceb0da4679453a56d4d9938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isbare::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, clone the remote as a bare repository, which will make &lt;code&gt;repo_path&lt;/code&gt; itself the git directory instead of &lt;code&gt;repo_path/.git&lt;/code&gt;. This means that a working tree cannot be checked out. Plays the role of the git CLI argument &lt;code&gt;--bare&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f28ba244c2cc607da8b0fcf1f3367c037ee2322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isequal&lt;/code&gt; can also be used to distinguish signed zeros:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6155f47b9568bd6b958ba232c62862f14186f428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isequal&lt;/code&gt; is the comparison function used by hash tables (&lt;code&gt;Dict&lt;/code&gt;). &lt;code&gt;isequal(x,y)&lt;/code&gt; must imply that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c588e795f436dd4d05aaac17fde984ce26c5d8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ismerge&lt;/code&gt;: Boolean flag indicating whether the changes at the remote have been merged into the local copy yet or not. If &lt;code&gt;true&lt;/code&gt;, the local copy is up to date with the remote fetch head.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf09e161cb1b30fd41fdc4159954ec544ced0840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isready&lt;/code&gt; - return false if a &lt;code&gt;take!&lt;/code&gt; on the pool would block, else true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad6e3363b26358cf09c26c458c64943918beb93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isready&lt;/code&gt; tests for the presence of any object in the channel, while &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; waits for an object to become available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf94b7544dc2a3713c698136abf41c0ffeb4bb19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_error&lt;/code&gt; takes a C string, and &lt;code&gt;jl_errorf&lt;/code&gt; is called like &lt;code&gt;printf&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fc079cf4386f9010ec6a2a6dcc4d336dfd5990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_value_t**&lt;/code&gt; (a reference to a Julia Type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c496bfdad90f2fcfcf408b69f7b755c0534067bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_value_t*&lt;/code&gt; (any Julia Type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6119baf62a14c4942fa709be955c8698c7254e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jpvt&lt;/code&gt; is an integer vector of length &lt;code&gt;n&lt;/code&gt; corresponding to the permutation $P$.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5370bf4f79562ad85e01f701fe6974cf62dddd5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;julia    pkg&amp;gt; generate MyPkg              # type ] to enter pkg mode    julia&amp;gt; push!(LOAD_PATH, pwd())   # hit backspace to exit pkg mode&lt;/code&gt; If you restart your Julia session you'll have to re-issue that command modifying &lt;code&gt;LOAD_PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd73df7706c15ba69b8cb61854340ff6886bc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;julia    using PkgTemplates    t = Template()    generate(&quot;MyPkg&quot;, t)&lt;/code&gt; This will create a blank package, &lt;code&gt;&quot;MyPkg&quot;&lt;/code&gt;, in your &lt;code&gt;.julia/dev&lt;/code&gt; directory. Note that PkgTemplates allows you to control many different options through its &lt;code&gt;Template&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625af536bb88ddf9aa5a8b9ba26a788c563e9774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keepempty&lt;/code&gt;: whether empty fields should be kept in the result. Default is &lt;code&gt;false&lt;/code&gt; without a &lt;code&gt;dlm&lt;/code&gt; argument, &lt;code&gt;true&lt;/code&gt; with a &lt;code&gt;dlm&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6fd799a7cffc4157ed068f75896f2a6f68342b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill(manager, pid, config)&lt;/code&gt; is called to remove a worker from the cluster. On the master process, the corresponding &lt;code&gt;IO&lt;/code&gt; objects must be closed by the implementation to ensure proper cleanup. The default implementation simply executes an &lt;code&gt;exit()&lt;/code&gt; call on the specified remote worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfba992423752658b61db87a6fc7a82071655e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;launched::Array&lt;/code&gt;: the array to append one or more &lt;code&gt;WorkerConfig&lt;/code&gt; objects to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4472e72e5805ee9aa798ea6065a631b9f8120d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lazy&lt;/code&gt;: Applicable only with &lt;code&gt;topology=:all_to_all&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, worker-worker connections are setup lazily, i.e. they are setup at the first instance of a remote call between workers. Default is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab3641b567d7550fa4574b7e9fcd59486edd69f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(iter)&lt;/code&gt; and &lt;code&gt;size(iter, [dim])&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82c15769674081bdc4b1e2732d829ab6f255a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(str)&lt;/code&gt; the number of characters in &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520336ce4b0d7ffb4223a859ab46df75e628bf97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(str, i, j)&lt;/code&gt; the number of valid character indices in &lt;code&gt;str&lt;/code&gt; from &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f8144db4b1abe106783e820484be829d5e84bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; statements allocate new variable bindings each time they run. Whereas an assignment modifies an existing value location, &lt;code&gt;let&lt;/code&gt; creates new locations. This difference is only detectable in the case of variables that outlive their scope via closures. The &lt;code&gt;let&lt;/code&gt; syntax accepts a comma-separated series of assignments and variable names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2857b88b57ff8e8634f1fd5411364f41533e5276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d34fd9ee3b3db157e9c05aba51e1a69d53562d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt;: the maximum size of the result. &lt;code&gt;limit=0&lt;/code&gt; implies no maximum (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a949f1c99f2882cd291b76f59d11378f665e213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; introduces a new local variable. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1237a0341e49a3e81f1f3559c045b64e25d095c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ace899c61be5098940595710c0631ed9e0f98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localclone&lt;/code&gt;: Flag whether to clone a local object database or do a fetch. The default is to let git decide. It will not use the git-aware transport for a local clone, but will use it for URLs which begin with &lt;code&gt;file://&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45419d31c5c3e877e8801855f33df8c42b91a13b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lu!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.lu&quot;&gt;&lt;code&gt;lu&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. An &lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; exception is thrown if the factorization produces a number not representable by the element type of &lt;code&gt;A&lt;/code&gt;, e.g. for integer types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e7ecffd4874930679049a4efd39c31c359825a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; treats the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; tokens as matching the start and end of individual lines, as opposed to the whole string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959d5f8f25ccf34278c7231d15d752b5420fe0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt;-by-&lt;code&gt;n&lt;/code&gt; identity matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0804fc37d749faa6c59c487dd0fd30a88f27145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;machine_spec&lt;/code&gt; is a string of the form &lt;code&gt;[user@]host[:port] [bind_addr[:port]]&lt;/code&gt;. &lt;code&gt;user&lt;/code&gt; defaults to current user, &lt;code&gt;port&lt;/code&gt; to the standard ssh port. If &lt;code&gt;[bind_addr[:port]]&lt;/code&gt; is specified, other workers will connect to this worker at the specified &lt;code&gt;bind_addr&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae97bd7ed7d82dd19e12486744447e7aab4faa00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;machines&lt;/code&gt; is a vector of machine specifications. Workers are started for each specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0e0fb4129a24815ec030736714dbdf7a492aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macro&lt;/code&gt; defines a method for inserting generated code into a program. A macro maps a sequence of argument expressions to a returned expression, and the resulting expression is substituted directly into the program at the point where the macro is invoked. Macros are a way to run generated code without calling &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/init/#Base.eval-1&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, since the generated code instead simply becomes part of the surrounding program. Macro arguments may include expressions, literal values, and symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8484bf3ce18b73a3cab86759b8f006be25dfcef0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macro&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b9fe4b3edfa78bd622af9c76d19c51a2ae7a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)&lt;/code&gt; is called at different times during the worker's lifetime with appropriate &lt;code&gt;op&lt;/code&gt; values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3811884df527d3a7abba9f083f81c97faa84f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manager::ClusterManager&lt;/code&gt;: the cluster manager that &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt; is called with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f703846e4a33db719039e6bcacfcf60d0b7d137b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapreduce&lt;/code&gt; with multiple iterators requires Julia 1.2 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404b7144aa3a425a14deb38ee5cef8b003767781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_candidates_tags&lt;/code&gt;: consider this many most recent tags in &lt;code&gt;refs/tags&lt;/code&gt; to describe a commit. Defaults to 10 (so that the 10 most recent tags would be examined to see if they describe a commit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72981d27e1ab22dbc583a1145b1621a961f192c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_line&lt;/code&gt;: the last line of the file to which to blame. The default is &lt;code&gt;0&lt;/code&gt;, meaning the last line of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cedd55ecf1ad91d90724912d371f1e5caa41be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_parallel&lt;/code&gt; &amp;ndash; the maximum number of workers to connect to in parallel on the host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d995f39223c4bb9a999a43cfcca6c5681ab1ad1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_parallel&lt;/code&gt;: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1d9f37af536ccd58c278c3e506d8652b8ac208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_size&lt;/code&gt;: the maximum file size of a blob. Above this size, it will be treated as a binary blob. The default is 512 MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaffe3704906f8467b046897a2780542aedcf5e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxdepth&lt;/code&gt; &amp;ndash; Limits frames at a depth higher than &lt;code&gt;maxdepth&lt;/code&gt; in the &lt;code&gt;:tree&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32491e760e7f18f6d8360a85f2a4709cc201ee79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxdepth&lt;/code&gt; &amp;ndash; Limits the depth higher than &lt;code&gt;maxdepth&lt;/code&gt; in the &lt;code&gt;:tree&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f20d7bbc515704268a8c41e4ee1011847047e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxlog=integer&lt;/code&gt; should be used as a hint to the backend that the message should be displayed no more than &lt;code&gt;maxlog&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234c5dd9163cc56272b3f54c2a5466c8b1f6eaee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxsize&lt;/code&gt;: specifies a size beyond which the buffer may not be grown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f6f1cd7ea6f9bdc2332e5a901da5db582cd3aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mean&lt;/code&gt; for empty arrays requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f22ee8634e701a2f38532448ed1c500b069efd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts::MergeOptions = MergeOptions()&lt;/code&gt;: options for how to perform the merge, including whether fastforwarding is allowed. See &lt;a href=&quot;#LibGit2.MergeOptions&quot;&gt;&lt;code&gt;MergeOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cc2e70735d9fd74fff0caeb5b8d510b36cbd2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts::MergeOptions=MergeOptions()&lt;/code&gt;: &lt;code&gt;merge_opts&lt;/code&gt; specifies options for the merge, such as merge strategy in case of conflicts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125e60bc501dba72f09f0b4976efe2ce6d4483cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts&lt;/code&gt;: merge options controlling how the trees will be merged at each rebase step. Only present on libgit2 versions newer than or equal to 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b67314512e49ee15c92e5c7e9f6dbd1931dab06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; should be an expression which evaluates to a string which is a human readable description of the log event. By convention, this string will be formatted as markdown when presented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90e0c119e4dfcc2e9dd089d139594390c4da90a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta_formatter&lt;/code&gt; is a function which takes the log event metadata &lt;code&gt;(level, _module, group, id, file, line)&lt;/code&gt; and returns a color (as would be passed to printstyled), prefix and suffix for the log message. The default is to prefix with the log level and a suffix containing the module, file and line location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793b666b763adfb5cbc980bd4657fe28ca8ebfa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;metric&lt;/code&gt;: optional custom function to use to determine the similarity between two files for rename detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee731c731c0b59328238d9d827bb96b9a9284c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min_line&lt;/code&gt;: the first line of the file from which to starting blaming. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3253f765bb04e11f5c63333adab3ac5b42e254" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min_match_characters&lt;/code&gt;: the minimum number of &lt;em&gt;alphanumeric&lt;/em&gt; characters which much change in a commit in order for the change to be associated with that commit. The default is 20. Only takes effect if one of the &lt;code&gt;Consts.BLAME_*_COPIES&lt;/code&gt; flags are used, which libgit2 does not implement yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db057df9be404f6e7c104b6feff23b69ad90b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mincount&lt;/code&gt; &amp;ndash; Limits frames with less than &lt;code&gt;mincount&lt;/code&gt; occurrences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1560ab3a1270d2ec7101ba0ebabaa0d8741ee114" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mincount&lt;/code&gt; &amp;ndash; Limits the printout to only those lines with at least &lt;code&gt;mincount&lt;/code&gt; occurrences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fbe82d06f465bb8d2948bd22cf8237ee9a59c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod&lt;/code&gt; with offset 1; returns &lt;code&gt;r&amp;isin;(0,y]&lt;/code&gt; for &lt;code&gt;y&amp;gt;0&lt;/code&gt; or &lt;code&gt;r&amp;isin;[y,0)&lt;/code&gt; for &lt;code&gt;y&amp;lt;0&lt;/code&gt;, where &lt;code&gt;mod(r, y) == mod(x, y)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ee2c86fd7250e19c9601f24f28fca8d9bdc9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; must be one of &lt;code&gt;&quot;r&quot;&lt;/code&gt;, &lt;code&gt;&quot;r+&quot;&lt;/code&gt;, &lt;code&gt;&quot;w+&quot;&lt;/code&gt;, or &lt;code&gt;&quot;a+&quot;&lt;/code&gt;, and defaults to &lt;code&gt;&quot;r+&quot;&lt;/code&gt; if the file specified by &lt;code&gt;filename&lt;/code&gt; already exists, or &lt;code&gt;&quot;w+&quot;&lt;/code&gt; if not. If an &lt;code&gt;init&lt;/code&gt; function of the type &lt;code&gt;initfn(S::SharedArray)&lt;/code&gt; is specified, it is called on all the participating workers. You cannot specify an &lt;code&gt;init&lt;/code&gt; function if the file is not writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a097698641d5469c04e6f0f998cce8e958f0b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;: the &lt;a href=&quot;../../base/file/index#Base.stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; mode for the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5158bf646d4d27259805df6c3a41ba7e37637e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; declares a &lt;a href=&quot;#Core.Module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;, which is a separate global variable workspace. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting). Modules allow you to create top-level definitions without worrying about name conflicts when your code is used together with somebody else&amp;rsquo;s. See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b46915fd1e85bc90eb5d56fd7bd927a43d2f01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95192ba3e3940cd0188a72ebb62589a75aa7d1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg::AbstractString=&quot;&quot;&lt;/code&gt;: the message for the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d691c48a28d2ce55d8a4698e4a2c1aee668e25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt;: a message to insert into the reflogs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487395b1bdfc7e61d7447898d434b73b3a4f1f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multicast_loop&lt;/code&gt;: loopback for multicast packets (default: &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99e21c3690f3dcdfa4d6c0fe75cee3eea8fe44c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multicast_ttl&lt;/code&gt;: TTL for multicast packets (default: &lt;code&gt;nothing&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f441746093557e9ec7fe5f7c0d91f2ae4fdd6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable struct&lt;/code&gt; is similar to &lt;a href=&quot;#struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;, but additionally allows the fields of the type to be set after construction. See the manual section on &lt;a href=&quot;../../manual/types/index#Composite-Types-1&quot;&gt;Composite Types&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112c939f3f1e9b5e8b278904ec6b0b49257b0632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable struct&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320c0e13d8c7b9ff51bc77d61fd9070c11bc1ebc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is the total number of instruction pointers you can store, with a default value of &lt;code&gt;10^6&lt;/code&gt;. If your typical backtrace is 20 instruction pointers, then you can collect 50000 backtraces, which suggests a statistical uncertainty of less than 1%. This may be good enough for most applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e658555bc40ad43ec211978ec0729a0b02c58be6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The full name of the committer or author of the commit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552e03fffa49ac0ec7ab0ea1aaa5c130fedf4f05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The name in the local reference database of the fetch head, for example, &lt;code&gt;&quot;refs/heads/master&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d29f5a5c3f202febb2a81757e5b837859f3823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ncodeunits(str)&lt;/code&gt; number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding#Terminology&quot;&gt;code units&lt;/a&gt; in a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f909eb780ec20a645e7ec717e2b09ab499055360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735cb1802f16a2c6f76996e3fbd8153f32d4f6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_file&lt;/code&gt;: A &lt;a href=&quot;#LibGit2.DiffFile&quot;&gt;&lt;code&gt;DiffFile&lt;/code&gt;&lt;/a&gt; containing information about the file(s) after the changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be2c96b12a02f7083c9d25ea7528ad8667d09e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_prefix&lt;/code&gt;: the virtual file directory in which to place new files on one side of the diff. Default is &lt;code&gt;&quot;b&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c2e95eb3130b139d44d439028bbbfabf438e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newest_commit&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the newest commit from which to look at changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f40f498efe7ceacbe5a57c6f819e21dd76050f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newline2lf=true&lt;/code&gt;, &lt;code&gt;newline2ls=true&lt;/code&gt;, or &lt;code&gt;newline2ps=true&lt;/code&gt;: convert various newline sequences (LF, CRLF, CR, NEL) into a linefeed (LF), line-separation (LS), or paragraph-separation (PS) character, respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec45f42c32c00b527d28e030133b724dbf610e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nfiles&lt;/code&gt;: The number of files in the delta (for instance, if the delta was run on a submodule commit id, it may contain more than one file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13583c0cdd9e082972c1e68b453244539921d780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash; Limits frames that are below the heuristic noise floor of the sample (only applies to format &lt;code&gt;:tree&lt;/code&gt;). A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of samples on this line, and &lt;code&gt;N&lt;/code&gt; is the number of samples for the callee.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f539796532455743d77bf293cbd17e25f2f2dad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash; Limits frames that exceed the heuristic noise floor of the sample (only applies to format &lt;code&gt;:tree&lt;/code&gt;). A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of samples on this line, and &lt;code&gt;N&lt;/code&gt; is the number of samples for the callee.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cccdf2a98a9aae590bd349512e62d461403b275" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_cb&lt;/code&gt;: An optional callback function to notify the user if a checkout conflict occurs. If this function returns a non-zero value, the checkout will be cancelled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30392c812d865b5c68f24732d969c588932dc51d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_cb&lt;/code&gt;: optional callback which will notify the user of changes to the diff as file deltas are added to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d44c57c1841b302e1e4a4864a4e16016feedd35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_flags&lt;/code&gt;: Flags for what sort of conflicts the user should be notified about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c444029454795fde1134c2d469857e669b1440c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_payload&lt;/code&gt;: Payload for the notify callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a72ff21213c5747c87230deb5736ece00049c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ntasks&lt;/code&gt; can also be specified as a zero-arg function. In this case, the number of tasks to run in parallel is checked before processing every element and a new task started if the value of &lt;code&gt;ntasks_func&lt;/code&gt; is less than the current number of tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a2d799c4775665ec0492395458a2421920f94b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ntasks&lt;/code&gt; specifies the number of tasks to run concurrently. Depending on the length of the collections, if &lt;code&gt;ntasks&lt;/code&gt; is unspecified, up to 100 tasks will be used for concurrent mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649eb66db0ac1d45f589aa8e9473637c03ceaed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; allows you to skip the specified number of bytes at the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f497a87199a32512c97994d5a18e9f772067d770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the tip of the fetch head.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1944d05e865a7be7c70b13dc44ad49d6eef824c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;old_file&lt;/code&gt;: A &lt;a href=&quot;#LibGit2.DiffFile&quot;&gt;&lt;code&gt;DiffFile&lt;/code&gt;&lt;/a&gt; containing information about the file(s) before the changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4e9a36bc861c7981c727529931615c5c12cf7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;old_prefix&lt;/code&gt;: the virtual file directory in which to place old files on one side of the diff. Default is &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c31e5cf28678d5c969358670eb5133dd3159a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldest_commit&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the oldest commit from which to look at changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab08f6dbafd16b32ce5160a5db1168198264195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;only_follow_first_parent&lt;/code&gt;: when finding the distance from a matching reference to the described object, only consider the distance from the first parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7b1529623e34aaf3b56dcbaf1430c042e15e1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimize&lt;/code&gt; controls whether additional optimizations, such as inlining, are also applied. &lt;code&gt;raw&lt;/code&gt; makes all metadata and dbg.* calls visible. &lt;code&gt;debuginfo&lt;/code&gt; may be one of &lt;code&gt;:source&lt;/code&gt; (default) or &lt;code&gt;:none&lt;/code&gt;, to specify the verbosity of code comments. &lt;code&gt;dump_module&lt;/code&gt; prints the entire module that encapsulates the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0c73b16f432720504516e2f958debb7c0a4f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;: determines the options for the fetch, e.g. whether to prune afterwards. See &lt;a href=&quot;#LibGit2.FetchOptions&quot;&gt;&lt;code&gt;FetchOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9ddb6ecff4eeaf4d380bca97b4dd6f7fde407e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;: determines the options for the push, e.g. which proxy headers to use. See &lt;a href=&quot;#LibGit2.PushOptions&quot;&gt;&lt;code&gt;PushOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f25b0d9ee03294770f82dddd1bc7bcef0fb64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optype&lt;/code&gt;: the type of rebase operation currently being performed. The options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e3a0e908208f76b5ccd84be51a34bb39927cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ospid&lt;/code&gt; &amp;ndash; the process ID according to the host OS, used to interrupt worker processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697de2c67496b1d84f2571e138792286e7da4946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;our_label&lt;/code&gt;: In case of conflicts, the name of &quot;our&quot; side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6830be65e4ac77ca9e62be6dc5c7e0620fc0523a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, &lt;code&gt;norm(A, Inf)&lt;/code&gt; returns the largest value in &lt;code&gt;abs.(A)&lt;/code&gt;, whereas &lt;code&gt;norm(A, -Inf)&lt;/code&gt; returns the smallest. If &lt;code&gt;A&lt;/code&gt; is a matrix and &lt;code&gt;p=2&lt;/code&gt;, then this is equivalent to the Frobenius norm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1263f31af18883ad798ffeb9ebfc0a698a746ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parallelism&lt;/code&gt;: if a pack file must be created, this variable sets the number of worker threads which will be spawned by the packbuilder. If &lt;code&gt;0&lt;/code&gt;, the packbuilder will auto-set the number of threads to use. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062dd574e97337bbf0642f566cbd632bf4e6858a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params::Dict&lt;/code&gt;: all the keyword arguments passed to &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7beec041180be0f67a5413cf19dc80f87f5c60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent_ids::Vector{GitHash}=GitHash[]&lt;/code&gt; is a list of commits by &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; to use as parent commits for the new one, and may be empty. A commit might have multiple parents if it is a merge commit, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aeba9857371fd4afaedeaa23fe9e52591dc0285" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse(Bool, str)&lt;/code&gt; requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985febc2923b1ba06875dac2b326b7c44efb7b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password::AbstractString=&quot;&quot;&lt;/code&gt;: the password to use in the output if provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2d565e6b56d3e37cd4a4c107b73f4f88a4add0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path::AbstractString=&quot;&quot;&lt;/code&gt;: the path to use in the output if provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a1cfd3ac44390db0e2939f5bb09d810d9dc716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;: a &lt;code&gt;NULL&lt;/code&gt; terminated path to the item relative to the working directory of the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df78851e58e7c0164b5edaedb4aae38730252715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paths&lt;/code&gt;: If not empty, describes which paths to search during the checkout. If empty, the checkout will occur over all files in the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaac9c176103fbec24dd83078cf0783db26c54ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pathspec&lt;/code&gt;: an array of paths to use for path-matching. The behavior of the path-matching will vary depending on the values of &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5de9b2330e81c1ec09cc2a025ec36b4958e8f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pathspec&lt;/code&gt;: path to files to include in the diff. Default is to use all files in the repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5c79832426fbf09095f04929a254af7d30d839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pattern&lt;/code&gt;: only consider tags which match &lt;code&gt;pattern&lt;/code&gt;. Supports glob expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa8387984da43a7639fa49609355dfec1758934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;payload&lt;/code&gt;: the payload to be provided to the two callback functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e76aa49d7a614c921c6cec0e182e1bd4a6645c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;payload&lt;/code&gt;: the payload to pass to &lt;code&gt;notify_cb&lt;/code&gt; and &lt;code&gt;progress_cb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2913a1a2626baab62573ae3ba9c2e917e2edec43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peakflops&lt;/code&gt; computes the peak flop rate of the computer by using double precision &lt;a href=&quot;#LinearAlgebra.BLAS.gemm!&quot;&gt;&lt;code&gt;gemm!&lt;/code&gt;&lt;/a&gt;. By default, if no arguments are specified, it multiplies a matrix of size &lt;code&gt;n x n&lt;/code&gt;, where &lt;code&gt;n = 2000&lt;/code&gt;. If the underlying BLAS is using multiple threads, higher flop rates are realized. The number of BLAS threads can be set with &lt;a href=&quot;#LinearAlgebra.BLAS.set_num_threads&quot;&gt;&lt;code&gt;BLAS.set_num_threads(n)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b91990e60f0a690dd7da2850cc5ea9cee3bec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perfdata_cb&lt;/code&gt;: An optional callback function to display performance data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d2d97fa30fe0159febc55e5a72c5956e0c05f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perfdata_payload&lt;/code&gt;: Payload for the performance callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c86680e44cfade629b4ed2ebc1670d3a11ff31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pmap&lt;/code&gt; can also use a mix of processes and tasks via the &lt;code&gt;batch_size&lt;/code&gt; argument. For batch sizes greater than 1, the collection is processed in multiple batches, each of length &lt;code&gt;batch_size&lt;/code&gt; or less. A batch is sent as a single request to a free worker, where a local &lt;a href=&quot;../../base/parallel/index#Base.asyncmap&quot;&gt;&lt;code&gt;asyncmap&lt;/code&gt;&lt;/a&gt; processes elements from the batch using multiple concurrent tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6062089bc8ea7356a1c0e294144b992c9b0d190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port::Union{AbstractString,Integer}=&quot;&quot;&lt;/code&gt;: the port number to use in the output if provided. Cannot be specified when using the scp-like syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3926b6e41c21bebec38e3305ee3aef86c0f67cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; &amp;ndash; the port on the host used to connect to the worker (either an &lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ae02e4311ab0f64e68f548cb0826d87786e864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;power_method&lt;/code&gt; repeatedly creates a new vector and normalizes it. We have not specified any type signature in function declaration, let's see if it works with the aforementioned datatypes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9113fbab087ead22351138a5675e71d4cc277d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt; as a keyword argument requires at least Julia 1.1. In Julia 1.0 &lt;code&gt;precision&lt;/code&gt; is the second positional argument (&lt;code&gt;BigFloat(x, precision)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af54082b04f05e356fa41312f4ae5ca97f259a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitive type&lt;/code&gt; declares a concrete type whose data consists only of a series of bits. Classic examples of primitive types are integers and floating-point values. Some example built-in primitive type declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d408d986573283a26cbda182d85b826b49383c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitive type&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0cc2b360368626a735bd2ae5d7c2a083fbb6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; and &lt;code&gt;println&lt;/code&gt; &quot;lock&quot; the stream during a call. Consequently changing &lt;code&gt;write&lt;/code&gt; to &lt;code&gt;println&lt;/code&gt; in the above example results in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1959b9f7871b156edd3a2de5e77463b33177e392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; falls back to calling &lt;code&gt;show&lt;/code&gt;, so most types should just define &lt;code&gt;show&lt;/code&gt;. Define &lt;code&gt;print&lt;/code&gt; if your type has a separate &quot;plain&quot; representation. For example, &lt;code&gt;show&lt;/code&gt; displays strings with quotes, and &lt;code&gt;print&lt;/code&gt; displays strings without quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0178c5df89eb967f462cc2e8445f025988bec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;process&lt;/code&gt; &amp;ndash; the process which will be connected (usually the manager will assign this during &lt;a href=&quot;#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63a4f1761d5adacd1e7460b66b481bd63cdd398" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_cb&lt;/code&gt;: An optional callback function to display checkout progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb6a0f147459271d2a7a2a1bcb82b298199436d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_cb&lt;/code&gt;: optional callback which will display diff progress. Only relevant on libgit2 versions at least as new as 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a974da56e773f57fa11edfba525b0d17e70b3e1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_payload&lt;/code&gt;: Payload for the progress callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9656c555e40a59798ca04ab2a0fd64ef8fcd145d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propertynames(x)&lt;/code&gt; may return only &quot;public&quot; property names that are part of the documented interface of &lt;code&gt;x&lt;/code&gt;. If you want it to also return &quot;private&quot; fieldnames intended for internal use, pass &lt;code&gt;true&lt;/code&gt; for the optional second argument. REPL tab completion on &lt;code&gt;x.&lt;/code&gt; shows only the &lt;code&gt;private=false&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d345329a2391a60fb2ebd4642c5f13f15f3a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_opts&lt;/code&gt;: only relevant if the LibGit2 version is greater than or equal to &lt;code&gt;0.25.0&lt;/code&gt;. Sets options for using a proxy to communicate with a remote. See &lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt;&lt;code&gt;ProxyOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1c2878a9100523ed8ddcdc2ca50b8e3e3accca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_opts&lt;/code&gt;: options for connecting to the remote through a proxy. See &lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt;&lt;code&gt;ProxyOptions&lt;/code&gt;&lt;/a&gt;. Only present on libgit2 versions newer than or equal to 0.25.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1cca20f02fc7ef7b42d7136de423456f81b239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxytype&lt;/code&gt;: an &lt;code&gt;enum&lt;/code&gt; for the type of proxy to use. Defined in &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_proxy_t&quot;&gt;&lt;code&gt;git_proxy_t&lt;/code&gt;&lt;/a&gt;. The corresponding Julia enum is &lt;code&gt;GIT_PROXY&lt;/code&gt; and has values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c30e484bc5a233582234aa0eaf5f9ff4b81c5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prune&lt;/code&gt;: whether to perform a prune after the fetch or not. The default is to use the setting from the &lt;code&gt;GitConfig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d39971bfff573dc1ff9e1372624b262b5a7768" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put!&lt;/code&gt; - put back a worker to the available pool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d064f8a98d481de062cba01c97539bfc2f0871d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt; when &lt;code&gt;A&lt;/code&gt; is a subtype of &lt;code&gt;StridedMatrix&lt;/code&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. An &lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; exception is thrown if the factorization produces a number not representable by the element type of &lt;code&gt;A&lt;/code&gt;, e.g. for integer types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9e4bad0fd4a4794a48064d48581af7033259a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr&lt;/code&gt; returns multiple types because LAPACK uses several representations that minimize the memory storage requirements of products of Householder elementary reflectors, so that the &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; matrices can be stored compactly rather as two separate dense matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b9466c550831a8245833d9e56b4ae895f63c18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quiet&lt;/code&gt;: inform other git clients helping with/working on the rebase that the rebase should be done &quot;quietly&quot;. Used for interoperability. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89148ab980d30701194964666d016c3558cde6f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt; creates multiple expression objects in a block without using the explicit &lt;a href=&quot;#Core.Expr&quot;&gt;&lt;code&gt;Expr&lt;/code&gt;&lt;/a&gt; constructor. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3b9755167388bcf3471ba197b6c40b6008de5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt;Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9096a143fba87878f860ce663f000649f6400ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&quot;^\s*(?:#|$)&quot;&lt;/code&gt; produces a regular expression object rather than a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec672446bd53c264182855affbe5a78b442fb6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;: restricts operations to the buffer; see &lt;code&gt;open&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fbd8f3deb831b9f5ec8b1264c745debaec29b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recursion_limit&lt;/code&gt;: the upper limit on the number of merges of common ancestors to perform to try to build a new virtual merge base for the merge. The default is no limit. This field is only present on libgit2 versions newer than 0.24.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3223e9226e352a329b29a7eace6c1d31eb0a618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refname::AbstractString=Consts.HEAD_FILE&lt;/code&gt;: if not NULL, the name of the reference to update to point to the new commit. For example, &lt;code&gt;&quot;HEAD&quot;&lt;/code&gt; will update the HEAD of the current branch. If the reference does not yet exist, it will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7e2623afd5bf4ea28699952aaf1e41bf326a1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt;: determines properties of the fetch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad51a938d649503c2ef46d1225a6fc56968236e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt;: determines properties of the push.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789e0d7504799b3b38c290db69c2914eaa79a006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rejectna=true&lt;/code&gt;: throw an error if unassigned code points are found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c34491f7ee239ad33defe253fb1defd64e8594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt;: the name of the upstream remote to push to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b26ba19c7207aa3b208454b432a26db97e4da0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt;: which remote, specified by name, of &lt;code&gt;repo&lt;/code&gt; to fetch from. If this is empty, the URL will be used to construct an anonymous remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdcacc6e1483f4d462c34f2bea9360ca75d4db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_cb::Ptr{Cvoid}=C_NULL&lt;/code&gt;: a callback which will be used to create the remote before it is cloned. If &lt;code&gt;C_NULL&lt;/code&gt; (the default), no attempt will be made to create the remote - it will be assumed to already exist.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
