<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="qt">
    <body>
      <group id="qt">
        <trans-unit id="f9c4e1ecc5601fcf9e9447bb69488d9d57d4ef15" translate="yes" xml:space="preserve">
          <source>In addition to the standard toolbar and context menu entries, there is also a set of keyboard shortcuts to apply layouts on widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcbc9ef9242a5ec4e23f73cbc3b577f639b3b87" translate="yes" xml:space="preserve">
          <source>In addition to the standard widget styles for each platform, widgets can also be styled according to rules specified in a &lt;a href=&quot;stylesheet#&quot;&gt;style sheet&lt;/a&gt;. This feature enables you to customize the appearance of specific widgets to provide visual cues to users about their purpose. For example, a button could be styled in a particular way to indicate that it performs a destructive action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bae76ffe4383123793f13b43b96fced6eb87f9b" translate="yes" xml:space="preserve">
          <source>In addition to the supported extensions above, many other common extensions will be returned in a reasonably structured way. Extensions that the SSL backend has no support for at all will be returned as a &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045bbb78e1954a03a7a0c662484fd4300d5c27fc" translate="yes" xml:space="preserve">
          <source>In addition to the username and password required for authentication, a &lt;a href=&quot;qauthenticator&quot;&gt;QAuthenticator&lt;/a&gt; object can also contain additional options. The &lt;a href=&quot;qauthenticator#options&quot;&gt;options&lt;/a&gt;() function can be used to query incoming options sent by the server; the &lt;a href=&quot;qauthenticator#setOption&quot;&gt;setOption&lt;/a&gt;() function can be used to set outgoing options, to be processed by the authenticator calculation. The options accepted and provided depend on the authentication type (see method()).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae48ceb544b86a9722e1bf250b1c20f5f9e3d04" translate="yes" xml:space="preserve">
          <source>In addition to the usual checked and unchecked states, &lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt; optionally provides a third state to indicate &quot;no change&quot;. This is useful whenever you need to give the user the option of neither checking nor unchecking a checkbox. If you need this third state, enable it with &lt;a href=&quot;qcheckbox#tristate-prop&quot;&gt;setTristate&lt;/a&gt;(), and use &lt;a href=&quot;qcheckbox#checkState&quot;&gt;checkState&lt;/a&gt;() to query the current toggle state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43521fb550ae8e7c824622aefa4d418ea35da248" translate="yes" xml:space="preserve">
          <source>In addition to the wizard style, there are several options that control the look and feel of the wizard. These can be set using &lt;a href=&quot;qwizard#setOption&quot;&gt;setOption&lt;/a&gt;() or &lt;a href=&quot;qwizard#options-prop&quot;&gt;setOptions&lt;/a&gt;(). For example, &lt;a href=&quot;qwizard#WizardOption-enum&quot;&gt;HaveHelpButton&lt;/a&gt; makes &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt; show a &lt;b&gt;Help&lt;/b&gt; button along with the other wizard buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd18e5b71e6b68fe8f805a94a5e93bdd8b32775" translate="yes" xml:space="preserve">
          <source>In addition you can query the current formatting and user data using the &lt;a href=&quot;qsyntaxhighlighter#format&quot;&gt;format&lt;/a&gt;() and &lt;a href=&quot;qsyntaxhighlighter#currentBlockUserData&quot;&gt;currentBlockUserData&lt;/a&gt;() functions respectively. You can also attach user data to the current text block using the &lt;a href=&quot;qsyntaxhighlighter#setCurrentBlockUserData&quot;&gt;setCurrentBlockUserData&lt;/a&gt;() function. &lt;a href=&quot;qtextblockuserdata&quot;&gt;QTextBlockUserData&lt;/a&gt; can be used to store custom settings. In the case of syntax highlighting, it is in particular interesting as cache storage for information that you may figure out while parsing the paragraph's text. For an example, see the &lt;a href=&quot;qsyntaxhighlighter#setCurrentBlockUserData&quot;&gt;setCurrentBlockUserData&lt;/a&gt;() documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09089230bafdc9eed0b4278c8a9e46cfe92e906" translate="yes" xml:space="preserve">
          <source>In addition you can specify a curve's threshold, controlling the granularity with which a curve is drawn, using the &lt;a href=&quot;qpainterpathstroker#setCurveThreshold&quot;&gt;setCurveThreshold&lt;/a&gt;() function. The default threshold is a well adjusted value (0.25), and normally you should not need to modify it. However, you can make the curve's appearance smoother by decreasing its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4babc89dd6c166e0c65f2079d856d20f7a427c69" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qbuttongroup&quot;&gt;QButtonGroup&lt;/a&gt; can map between integers and buttons. You can assign an integer id to a button with &lt;a href=&quot;qbuttongroup#setId&quot;&gt;setId&lt;/a&gt;(), and retrieve it with &lt;a href=&quot;qbuttongroup#id&quot;&gt;id&lt;/a&gt;(). The id of the currently checked button is available with &lt;a href=&quot;qbuttongroup#checkedId&quot;&gt;checkedId&lt;/a&gt;(), and there is an overloaded signal &lt;a href=&quot;qbuttongroup#buttonClicked&quot;&gt;buttonClicked&lt;/a&gt;() which emits the id of the button. The id &lt;code&gt;-1&lt;/code&gt; is reserved by &lt;a href=&quot;qbuttongroup&quot;&gt;QButtonGroup&lt;/a&gt; to mean &quot;no such button&quot;. The purpose of the mapping mechanism is to simplify the representation of enum values in a user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9800f88f80534b79f93e4fbc116787e4a0a4bc9" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qdesignerformwindowmanagerinterface&quot;&gt;QDesignerFormWindowManagerInterface&lt;/a&gt; contains a collection of functions that enables you to intervene and control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7101167786b4f33575c031b3f25584c8316f3307" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qgraphicsitemgroup&quot;&gt;QGraphicsItemGroup&lt;/a&gt; is a special item that combines child event handling with a useful interface for adding and removing items to and from a group. Adding an item to a &lt;a href=&quot;qgraphicsitemgroup&quot;&gt;QGraphicsItemGroup&lt;/a&gt; will keep the item's original position and transformation, whereas reparenting items in general will cause the child to reposition itself relative to its new parent. For convenience, you can create &lt;a href=&quot;qgraphicsitemgroup&quot;&gt;QGraphicsItemGroup&lt;/a&gt;s through the scene by calling &lt;a href=&quot;qgraphicsscene#createItemGroup&quot;&gt;QGraphicsScene::createItemGroup&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9932170715abe979bd672a850450f1e95e87f370" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qml-qtquick-viewtransition&quot;&gt;ViewTransition&lt;/a&gt; provides properties specific to the items which are the target of the operation that triggered the transition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47e93a20e07e14b05f17c112a8284c932cb10fd" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qrect&quot;&gt;QRect&lt;/a&gt; provides the &lt;a href=&quot;qrect#getCoords&quot;&gt;getCoords&lt;/a&gt;() function which extracts the position of the rectangle's top-left and bottom-right corner, and the &lt;a href=&quot;qrect#getRect&quot;&gt;getRect&lt;/a&gt;() function which extracts the rectangle's top-left corner, width and height. Use the &lt;a href=&quot;qrect#setCoords&quot;&gt;setCoords&lt;/a&gt;() and &lt;a href=&quot;qrect#setRect&quot;&gt;setRect&lt;/a&gt;() function to manipulate the rectangle's coordinates and dimensions in one go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c715c4d611d2eace18dfa7ba865f61b93cdbfb" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qrectf&quot;&gt;QRectF&lt;/a&gt; provides the &lt;a href=&quot;qrectf#getCoords&quot;&gt;getCoords&lt;/a&gt;() function which extracts the position of the rectangle's top-left and bottom-right corner, and the &lt;a href=&quot;qrectf#getRect&quot;&gt;getRect&lt;/a&gt;() function which extracts the rectangle's top-left corner, width and height. Use the &lt;a href=&quot;qrectf#setCoords&quot;&gt;setCoords&lt;/a&gt;() and &lt;a href=&quot;qrectf#setRect&quot;&gt;setRect&lt;/a&gt;() function to manipulate the rectangle's coordinates and dimensions in one go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909743cdef726cab568394ea75f444bd548316d7" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;qregularexpressionmatch&quot;&gt;QRegularExpressionMatch&lt;/a&gt; returns the substrings captured by the capturing groups in the pattern string. The implicit capturing group with index 0 captures the result of the whole match. The &lt;a href=&quot;qregularexpressionmatch#captured&quot;&gt;captured&lt;/a&gt;() function returns each substring captured, either by the capturing group's index or by its name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee0d9a370aaadea9a4d185748317b1c06665f7b" translate="yes" xml:space="preserve">
          <source>In addition, BeginNativeGesture and EndNativeGesture are sent before and after gesture event streams:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef758b3f8333e9857e8cbd013860ab9e6d7dcdcb" translate="yes" xml:space="preserve">
          <source>In addition, D-Bus defines two well-known buses, called the system bus and the session bus. These buses are special in the sense that they have well-defined semantics: some services are defined to be found in one or both of these buses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ee892583deb6d4d41b8c8b843c3b60ef4c1329" translate="yes" xml:space="preserve">
          <source>In addition, QML also extends the behavior of the instanceof function to allow for type checking against QML types. This means that you may use it to verify that a variable is indeed the type you expect, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77026bc774f019d465cb985bb88e2ef3536b43fb" translate="yes" xml:space="preserve">
          <source>In addition, QML provides several other types useful for animation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb9a05822f94850d265bd43fe3ad424a0579317" translate="yes" xml:space="preserve">
          <source>In addition, Qt Core provides a platform-independent mechanism for storing binary files in the application's executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75f43f682b1fd3051c65a70b2469454aa434705" translate="yes" xml:space="preserve">
          <source>In addition, Qt provides three global manipulators that take a parameter: &lt;a href=&quot;qtextstream#qSetFieldWidth&quot;&gt;qSetFieldWidth&lt;/a&gt;(), &lt;a href=&quot;qtextstream#qSetPadChar&quot;&gt;qSetPadChar&lt;/a&gt;(), and &lt;a href=&quot;qtextstream#qSetRealNumberPrecision&quot;&gt;qSetRealNumberPrecision&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b914c9a13b980209076c664272d3474ddbfaeedf" translate="yes" xml:space="preserve">
          <source>In addition, Windows are always filled with &lt;a href=&quot;qpalette#ColorRole-enum&quot;&gt;QPalette::Window&lt;/a&gt;, unless the WA_OpaquePaintEvent or WA_NoSystemBackground attributes are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ad048be8b28912305cac5e9340fbdf557eb523" translate="yes" xml:space="preserve">
          <source>In addition, a &lt;a href=&quot;qinappstore#transactionReady&quot;&gt;transactionReady&lt;/a&gt;() signal may be emitted for any existing transaction which has not yet been finalized. At this point, you should check if the transaction has previously been registered. If it hasn't, register it right away. Finally, call &lt;a href=&quot;qinapptransaction#finalize&quot;&gt;QInAppTransaction::finalize&lt;/a&gt;() on the transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298aaf11e6ababff88df1d84101d9d211251a1d1" translate="yes" xml:space="preserve">
          <source>In addition, a &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; that has a parent can become a window by setting the &lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt::Window&lt;/a&gt; flag. Depending on the window management system such</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d5a80e1b843b708991828a30680c97b1afbd2b" translate="yes" xml:space="preserve">
          <source>In addition, a json file (&lt;code&gt;mystyleplugin.json&lt;/code&gt;) containing meta data describing the plugin is required for most plugins. For style plugins it simply contains a list of styles that can be created by the plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e177f7bdf5fc56ccdaf4497efb44f1eca607df17" translate="yes" xml:space="preserve">
          <source>In addition, a page might also execute scripts added through &lt;a href=&quot;qwebengineprofile#scripts&quot;&gt;QWebEngineProfile::scripts&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5159fe6cbb8ad71a53796901f6a8fff8c6920b1c" translate="yes" xml:space="preserve">
          <source>In addition, a path can be added to the current path using the &lt;a href=&quot;qpainterpath#connectPath&quot;&gt;connectPath&lt;/a&gt;() function. But note that this function will connect the last element of the current path to the first element of given one by adding a line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d3a109895fb8d65710b14af04dc9baaf5b9fcd" translate="yes" xml:space="preserve">
          <source>In addition, any property that can be mapped to an OpenGL Shading Language (GLSL) type is available as a uniform variable. The following list shows how properties are mapped to GLSL uniform variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e4524fdaa4266008b062613a51b847f8c288da" translate="yes" xml:space="preserve">
          <source>In addition, creating a subclass of &lt;a href=&quot;qabstractvideobuffer&quot;&gt;QAbstractVideoBuffer&lt;/a&gt; will allow you to construct video frames from preallocated or static buffers, in cases where the &lt;a href=&quot;qvideoframe&quot;&gt;QVideoFrame&lt;/a&gt; constructors taking a &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; or a &lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt; do not suffice. This may be necessary when implementing a new hardware accelerated video system, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eade8bb89fa5de3837f420f3a88ab6294e206f2f" translate="yes" xml:space="preserve">
          <source>In addition, each handle has the following read-only attached properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd109b1b85b88138905dd380068e554d860c7ac" translate="yes" xml:space="preserve">
          <source>In addition, it is only emitted for top-level, standalone animations. It will not be emitted for animations in a Behavior or Transition, or animations that are part of an animation group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2490e3e5a334237da1567a783f01e8009fc9ce74" translate="yes" xml:space="preserve">
          <source>In addition, only affine transformations are supported by drawStaticText(). Calling drawStaticText() on a projected painter will perform slightly worse than using the regular drawText() call, so this should be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19eb41eaf7e0ee26c76e1ac8b4d2b2dc1e7135e" translate="yes" xml:space="preserve">
          <source>In addition, style sheets can be used to provide a distinctive look and feel for your application, without having to subclass &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt;. For example, you can specify arbitrary images for radio buttons and check boxes to make them stand out. Using this technique, you can also achieve minor customizations that would normally require subclassing several style classes, such as specifying a &lt;a href=&quot;qstyle#styleHint&quot;&gt;style hint&lt;/a&gt;. The &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtwidgets-widgets-stylesheet-example.html#&quot;&gt;Style Sheet&lt;/a&gt; example depicted below defines two distinctive style sheets that you can try out and modify at will.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37770a999540fd15e550dc216ea0b1887914b1b4" translate="yes" xml:space="preserve">
          <source>In addition, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4294cbe29d0a211f41be2675d1170fd01484c757" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; class provides the &lt;a href=&quot;qpoint#manhattanLength&quot;&gt;manhattanLength&lt;/a&gt;() function which gives an inexpensive approximation of the length of the &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; object interpreted as a vector. Finally, &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; objects can be streamed as well as compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807bea15a65b9c94213161b391497ccdf492154c" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;qpointf&quot;&gt;QPointF&lt;/a&gt; class provides a constructor converting a &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; object into a &lt;a href=&quot;qpointf&quot;&gt;QPointF&lt;/a&gt; object, and a corresponding &lt;a href=&quot;qpointf#toPoint&quot;&gt;toPoint&lt;/a&gt;() function which returns a &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; copy of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3637f28f454cec0a1068776d551d93e59bf42145" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;qstringlist#operator-2b&quot;&gt;operator+&lt;/a&gt;() function allows you to concatenate two string lists into one. To sort a string list, use the &lt;a href=&quot;qstringlist#sort&quot;&gt;sort&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66461439f94dba43b25e37e7160162baf0cbc4f5" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;stylesheet-reference#image-prop&quot;&gt;image&lt;/a&gt; property may be used to draw an image over the border-image. The image specified does not tile or stretch and when its size does not match the size of the widget, its alignment is specified using the &lt;a href=&quot;stylesheet-reference#image-position-prop&quot;&gt;image-position&lt;/a&gt; property. Unlike background-image and border-image, one may specify a SVG in the image property, in which case the image is scaled automatically according to the widget size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a46630ab43bb00e5b49a5179d16ab40545a5dd" translate="yes" xml:space="preserve">
          <source>In addition, the class provides a couple of enums: The &lt;a href=&quot;qstyleoptiontoolbar#ToolBarFeature-enum&quot;&gt;ToolBarFeature&lt;/a&gt; enum is used to describe whether a toolbar is movable or not, and the &lt;a href=&quot;qstyleoptiontoolbar#ToolBarPosition-enum&quot;&gt;ToolBarPosition&lt;/a&gt; enum is used to describe the position of a toolbar line, as well as the toolbar's position within the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d5ff971616d26e5375ef2a0ec1826ba1c540ca" translate="yes" xml:space="preserve">
          <source>In addition, the conversion to &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt; is not completely lossless. Please see the documentation in &lt;a href=&quot;qcborvalue#toVariant&quot;&gt;QCborValue::toVariant&lt;/a&gt;() for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0aad9a5f4d6d3691448b59800e8efecbf2634e" translate="yes" xml:space="preserve">
          <source>In addition, the dialog provides the option of selecting an &lt;b&gt;Icon&lt;/b&gt; for the action, as well as removing the current icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e61f5cc2b8a1a7c9fe1993a17a4377dc5970c7" translate="yes" xml:space="preserve">
          <source>In addition, the extensions &quot;nec-vdc&quot;, &quot;ibm-vdc&quot; and &quot;udc&quot; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334be7c783ae69325d868c8da8d12cde4136c0a0" translate="yes" xml:space="preserve">
          <source>In addition, the following tools are required for building the &lt;a href=&quot;qtwebengine-index#&quot;&gt;Qt WebEngine&lt;/a&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259a8a4680ce9ea422a3b43fc3383c00eb6a9891" translate="yes" xml:space="preserve">
          <source>In addition, the menu item &lt;code&gt;triggered()&lt;/code&gt; and &lt;code&gt;toggled()&lt;/code&gt; signals will not be emitted. Instead, the action &lt;code&gt;triggered()&lt;/code&gt; and &lt;code&gt;toggled()&lt;/code&gt; signals will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57898156cd4bdc735abe027f8d52c69114c111dd" translate="yes" xml:space="preserve">
          <source>In addition, the property is marked as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c256e841e5885018f8d36ae9f87bdc49ef0fa441" translate="yes" xml:space="preserve">
          <source>In addition, true will be returned for shortcuts (&lt;code&gt;*.lnk&lt;/code&gt; files) on Windows. Opening those will open the &lt;code&gt;.lnk&lt;/code&gt; file itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85bf730226efcb8dbba20f8b402be883786be4b" translate="yes" xml:space="preserve">
          <source>In addition, you can customize or create your own user interface by deriving your own loader class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8775a5f4292c4d5a3d2ec861b0eb5ed5abe3c49" translate="yes" xml:space="preserve">
          <source>In addition, you can use features introduced with Windows 7, such as Aero Peek, Jump Lists, a progress indicator on a taskbar button, or a thumbnail toolbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463c64bcc9966c4d69bde36ea74f4415b5444bc3" translate="yes" xml:space="preserve">
          <source>In additional to a copy of the &lt;a href=&quot;qbluetoothtransferrequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; object used to create the request, &lt;a href=&quot;qbluetoothtransferreply&quot;&gt;QBluetoothTransferReply&lt;/a&gt; contains the contents of the reply itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7963ae02d9ae56508ad29960b63dd83d294ccbb8" translate="yes" xml:space="preserve">
          <source>In alert state, the window indicates that it demands attention, for example by flashing or bouncing the taskbar entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4514bd62bce43fb3e470760f2f43559ef1f9a8f1" translate="yes" xml:space="preserve">
          <source>In all cases,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ddeff0647b1e25802a4a6fbff662d14d08cb99" translate="yes" xml:space="preserve">
          <source>In all of the &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; functions that take &lt;code&gt;const char *&lt;/code&gt; parameters, the &lt;code&gt;const char *&lt;/code&gt; is interpreted as a classic C-style '\0'-terminated string encoded in UTF-8. It is legal for the &lt;code&gt;const char *&lt;/code&gt; parameter to be &lt;code&gt;nullptr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46185100ddc5fa96ee7b078daa3ff964a2e06d05" translate="yes" xml:space="preserve">
          <source>In all other Unix-type systems, this function always returns &quot;unknown&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4e3e330fdaf3532958f7d2e3fa664ddbaa42cc" translate="yes" xml:space="preserve">
          <source>In all other aspects, the class is the same. Please refer to &lt;a href=&quot;qrandomgenerator&quot;&gt;QRandomGenerator&lt;/a&gt;'s documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f275549afeb6ce9e54fd32ffe522dc9b4853886d" translate="yes" xml:space="preserve">
          <source>In all other cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e08556e5e2c760deb39a74b3062bbe01c81e54" translate="yes" xml:space="preserve">
          <source>In all other cases, the new &lt;a href=&quot;qrandomgenerator&quot;&gt;QRandomGenerator&lt;/a&gt; object will start at the same position in the deterministic sequence as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d52301091442ee7f197c20e330e83b794ca3e19" translate="yes" xml:space="preserve">
          <source>In all other cases, where the source code to the custom widgets is available, we can adapt the custom widget for use with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea8912a36ba47c9a555c445dd112d414d9fe8b1" translate="yes" xml:space="preserve">
          <source>In all other respects, property value sources are regular QML types that can have properties, signals methods and so on, but with the added capability that they can be used to change property values using the &lt;code&gt;&amp;lt;PropertyValueSource&amp;gt; on &amp;lt;property&amp;gt;&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68be1244c692e681b85f7a736975755b80b13362" translate="yes" xml:space="preserve">
          <source>In all the other cases it's possible to start the camera directly from unloaded state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9233a51e1e060331ea3b736194c375facb2023" translate="yes" xml:space="preserve">
          <source>In an exclusive group, the user cannot uncheck the currently checked action by triggering it; instead, another action in the group must be triggered to set the new checked action for that group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690db6b2a51f1eaf775df4d65497a1a51cb723e6" translate="yes" xml:space="preserve">
          <source>In an exclusive group, the user cannot uncheck the currently checked button by clicking on it; instead, another button in the group must be clicked to set the new checked button for that group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9336b9cc8f537feeae957a4aefb184706e860089" translate="yes" xml:space="preserve">
          <source>In an exclusive menu item group, only one item can be checked at any time; checking another item automatically unchecks the previously checked one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139759fe936af14ab258217452c17e6bf0d141bf" translate="yes" xml:space="preserve">
          <source>In an image over a title bar in the Java style, we show the bounding rectangles of the sub elements supported by the Java style (all of which are drawn with standard pixmaps). It is usual to draw the button backgrounds using &lt;code&gt;PE_PanelButtonTool&lt;/code&gt;, but it's not mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e96054603e3b6b045c9475e4054772c913f367" translate="yes" xml:space="preserve">
          <source>In any application which expects to create translucent windows, it's necessary to set this to true before creating the first &lt;a href=&quot;qquickwindow&quot;&gt;QQuickWindow&lt;/a&gt;. The default value is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692fa6695bdd339718247690e7bfb93f9cd60a4f" translate="yes" xml:space="preserve">
          <source>In applications many common commands can be invoked via menus, toolbar buttons, and keyboard shortcuts. Since the user expects each command to be performed in the same way, regardless of the user interface used, it is useful to represent each command as an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec16753f9b169809d5315cca662d85c483c4a9f2" translate="yes" xml:space="preserve">
          <source>In applications, windows provide the screen space upon which the user interface is built. Windows separate applications visually from each other and usually provide a window decoration that allows the user to resize and position the applications according to his preferences. Windows are typically integrated into the desktop environment and to some degree managed by the window management system that the desktop environment provides. For instance, selected windows of an application are represented in the task bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da98e6fbeabb2716d313454293ae17c5537c72bb" translate="yes" xml:space="preserve">
          <source>In areas beyond this image, pixels are set to 0. For 32-bit RGB images, this means black; for 32-bit ARGB images, this means transparent black; for 8-bit images, this means the color with index 0 in the color table which can be anything; for 1-bit images, this means &lt;a href=&quot;qt#GlobalColor-enum&quot;&gt;Qt::color0&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c989f99f7fca6bc1c632b6912280beb6031bbad0" translate="yes" xml:space="preserve">
          <source>In automatic focusing modes, the &lt;a href=&quot;qml-qtmultimedia-camerafocus#focusPointMode-prop&quot;&gt;focusPointMode&lt;/a&gt; property and &lt;a href=&quot;qml-qtmultimedia-camerafocus#focusZones-prop&quot;&gt;focusZones&lt;/a&gt; property provide information and control over how automatic focusing is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8317ef30e050c1b2a18c87c257ee398e6393d9ce" translate="yes" xml:space="preserve">
          <source>In bar charts, bars are defined as bar sets that contain one data value for each category. The position of a bar is specified by the category and its height by the data value. Bar series that contain multiple bar sets group together bars that belong to the same category. The way the bars are displayed is determined by the subclass of this class chosen to create the bar chart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ee35eebc89a7516006609749715a9cf14e1e70" translate="yes" xml:space="preserve">
          <source>In bar charts, bars are defined as bar sets that contain one data value for each category. The position of a bar is specified by the category and its height by the data value. Bar series that contain multiple bar sets group together bars that belong to the same category. The way the bars are displayed is determined by the type chosen to create the bar chart: &lt;a href=&quot;qml-qtcharts-barseries&quot;&gt;BarSeries&lt;/a&gt;, &lt;a href=&quot;qml-qtcharts-stackedbarseries&quot;&gt;StackedBarSeries&lt;/a&gt;, &lt;a href=&quot;qml-qtcharts-percentbarseries&quot;&gt;PercentBarSeries&lt;/a&gt;, &lt;a href=&quot;qml-qtcharts-horizontalbarseries&quot;&gt;HorizontalBarSeries&lt;/a&gt;, &lt;a href=&quot;qml-qtcharts-horizontalstackedbarseries&quot;&gt;HorizontalStackedBarSeries&lt;/a&gt;, or &lt;a href=&quot;qml-qtcharts-horizontalpercentbarseries&quot;&gt;HorizontalPercentBarSeries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da4b7608499cb4d9199ddde1548bf4d9b453c3d" translate="yes" xml:space="preserve">
          <source>In both cases &lt;a href=&quot;qerrormessage&quot;&gt;QErrorMessage&lt;/a&gt; will queue pending messages and display them in order, with each new message being shown as soon as the user has accepted the previous message. Once the user has specified that a message is not to be shown again it is automatically skipped, and the dialog will show the next appropriate message in the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48727c4f24c1b1bebdfe2449a2dc47ec53057414" translate="yes" xml:space="preserve">
          <source>In both cases the position information is received via the &lt;a href=&quot;qgeopositioninfosource#positionUpdated&quot;&gt;positionUpdated&lt;/a&gt;() signal and the last known position can be accessed with &lt;a href=&quot;qnmeapositioninfosource#lastKnownPosition&quot;&gt;lastKnownPosition&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b23cd22d7aec875c727844783902cf6f75a89a" translate="yes" xml:space="preserve">
          <source>In both cases you can only rely on the child being a &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; (or, if &lt;a href=&quot;qobject#isWidgetType&quot;&gt;QObject::isWidgetType&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;, a &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt;). This is because in the &lt;a href=&quot;qevent#Type-enum&quot;&gt;QEvent::ChildAdded&lt;/a&gt; case the child is not yet fully constructed; in the &lt;a href=&quot;qevent#Type-enum&quot;&gt;QEvent::ChildRemoved&lt;/a&gt; case it might have already been destructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b47b90c72db98cef0d0517fc03051399c430e8c" translate="yes" xml:space="preserve">
          <source>In both cases, a ray will be cast through the scene to find geometry intersecting the ray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d0dd1c3efc95f3e6feb7ff726f68584afab600" translate="yes" xml:space="preserve">
          <source>In both cases, the file may either be a local file or in a &lt;a href=&quot;resources&quot;&gt;resource&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f61469829ccedc96d407de227553d31019c412" translate="yes" xml:space="preserve">
          <source>In both modes the progress dialog may be customized by replacing the child widgets with custom widgets by using &lt;a href=&quot;qprogressdialog#setLabel&quot;&gt;setLabel&lt;/a&gt;(), &lt;a href=&quot;qprogressdialog#setBar&quot;&gt;setBar&lt;/a&gt;(), and &lt;a href=&quot;qprogressdialog#setCancelButton&quot;&gt;setCancelButton&lt;/a&gt;(). The functions &lt;a href=&quot;qprogressdialog#labelText-prop&quot;&gt;setLabelText&lt;/a&gt;() and &lt;a href=&quot;qprogressdialog#setCancelButtonText&quot;&gt;setCancelButtonText&lt;/a&gt;() set the texts shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abdd1e00428bd13a38cc59cc27012745da0841f" translate="yes" xml:space="preserve">
          <source>In both scenarios the size of the item and the Loader are identical. This ensures that anchoring to the Loader is equivalent to anchoring to the loaded item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6410812bb79165260872e790b3aeeacfb98336" translate="yes" xml:space="preserve">
          <source>In both the &lt;a href=&quot;qobject#Q_PROPERTY&quot;&gt;Q_PROPERTY&lt;/a&gt; and return from &lt;a href=&quot;qobject#Q_INVOKABLE&quot;&gt;Q_INVOKABLE&lt;/a&gt; cases, the elements of a std::vector are copied. This copying may be an expensive operation, so std::vector should be used judiciously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda0089d34ad9f159900c7c59a6831aead8730ac" translate="yes" xml:space="preserve">
          <source>In both these cases, we provide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba2c56c2973199791cd11f73ae5b03f53ca84eb" translate="yes" xml:space="preserve">
          <source>In case memory allocation fails, &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; will throw a &lt;code&gt;std::bad_alloc&lt;/code&gt; exception. Out of memory conditions in the Qt containers are the only case where Qt will throw exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef15aa7461c89d9fc123f519ddcbd5713e865016" translate="yes" xml:space="preserve">
          <source>In case memory allocation fails, &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; will throw a &lt;code&gt;std::bad_alloc&lt;/code&gt; exception. Out of memory conditions in the Qt containers are the only case where Qt will throw exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589322a4fd437840ac5d03458d5e677d518922ad" translate="yes" xml:space="preserve">
          <source>In case memory allocation fails, &lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt; will use the &lt;a href=&quot;qtglobal#Q_CHECK_PTR&quot;&gt;Q_CHECK_PTR&lt;/a&gt; macro, which will throw a &lt;code&gt;std::bad_alloc&lt;/code&gt; exception if the application is being compiled with exception support. If exceptions are disabled, then running out of memory is undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403f40fd85f4c2cdd8b3e799596aba751f98f07b" translate="yes" xml:space="preserve">
          <source>In case of Direct3D 12, all combinations are supported. If the &lt;a href=&quot;qml-qtquick-shadereffect#vertexShader-prop&quot;&gt;vertexShader&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-shadereffect#fragmentShader-prop&quot;&gt;fragmentShader&lt;/a&gt; properties form a valid URL with the &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;qrc&lt;/code&gt; schema, the bytecode or HLSL source code is read from the specified file. The type of the file contents is detected automatically. Otherwise, the string is treated as HLSL source code and is compiled at runtime, assuming Shader Model 5.0 and an entry point of &lt;code&gt;&quot;main&quot;&lt;/code&gt;. This allows dynamically constructing shader strings. However, whenever the shader source code is static, it is strongly recommended to pre-compile to bytecode using the &lt;code&gt;fxc&lt;/code&gt; tool and refer to these files from QML. This will be a lot more efficient at runtime and allows catching syntax errors in the shaders at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c14cde32faa4da56bd1b22b376c08b53ff772c4" translate="yes" xml:space="preserve">
          <source>In case of a 32-bit image, the &lt;a href=&quot;qimage#setPixel&quot;&gt;setPixel&lt;/a&gt;() function can be used to alter the color of the pixel at the given coordinates to any other color specified as an ARGB quadruplet. To make a suitable &lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; value, use the &lt;a href=&quot;qcolor#qRgb&quot;&gt;qRgb&lt;/a&gt;() (adding a default alpha component to the given RGB values, i.e. creating an opaque color) or &lt;a href=&quot;qcolor#qRgba&quot;&gt;qRgba&lt;/a&gt;() function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7d5bcfadd6c3fe703c910abf652c70be9ff65b" translate="yes" xml:space="preserve">
          <source>In case of a 8-bit and monchrome images, the pixel value is only an index from the image's color table. So the &lt;a href=&quot;qimage#setPixel&quot;&gt;setPixel&lt;/a&gt;() function can only be used to alter the color of the pixel at the given coordinates to a predefined color from the image's color table, i.e. it can only change the pixel's index value. To alter or add a color to an image's color table, use the &lt;a href=&quot;qimage#setColor&quot;&gt;setColor&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec00035a1597adbdaa9047833b476dabefb639c" translate="yes" xml:space="preserve">
          <source>In case of monochrome and 8-bit images, the &lt;a href=&quot;qimage#colorCount&quot;&gt;colorCount&lt;/a&gt;() and &lt;a href=&quot;qimage#colorTable&quot;&gt;colorTable&lt;/a&gt;() functions provide information about the color components used to store the image data: The &lt;a href=&quot;qimage#colorTable&quot;&gt;colorTable&lt;/a&gt;() function returns the image's entire color table. To obtain a single entry, use the &lt;a href=&quot;qimage#pixelIndex&quot;&gt;pixelIndex&lt;/a&gt;() function to retrieve the pixel index for a given pair of coordinates, then use the &lt;a href=&quot;qimage#color&quot;&gt;color&lt;/a&gt;() function to retrieve the color. Note that if you create an 8-bit image manually, you have to set a valid color table on the image as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f557a853f9dcfb42e9e7e75aa25bfa12a9a5690" translate="yes" xml:space="preserve">
          <source>In case of monochrome and 8-bit images, the image is first converted to a 32-bit pixmap and then filled with the colors in the color table. If this is too expensive an operation, you can use &lt;a href=&quot;qbitmap#fromImage&quot;&gt;QBitmap::fromImage&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a0296aba6dcfa0a1a1a5597305f635dc74150d" translate="yes" xml:space="preserve">
          <source>In case of scaled image reading, the quality setting may also influence the tradeoff level between visual quality and execution speed of the scaling algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae544507d3486de8b97f48520e17ee0e147c2d6" translate="yes" xml:space="preserve">
          <source>In case the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593f205da1c052290a1493d0e66e6609df894718" translate="yes" xml:space="preserve">
          <source>In case the environment variable is not set, or contains an invalid directory, the virtual keyboard falls back to the default built-in layouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa48d768cf215396ea33c0e816f375dc4a64a2d" translate="yes" xml:space="preserve">
          <source>In case the environment variable is not set, or contains an invalid style name, the virtual keyboard falls back in the default built-in style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062a2e9136354c61add4182e5499e92258fe3943" translate="yes" xml:space="preserve">
          <source>In case the input manifest file should not be processed and only copied to the target directory, the verbatim configuration needs to be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49eabccfb18df9a9fa4a7e77113f4890f8d8cc1" translate="yes" xml:space="preserve">
          <source>In case the old code relied on the specialization of the qLess() functor, then a workaround is explicitly passing an instance of the qLess() class to the STL function, for instance like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854bc338fc82cd645a280613c93774b792dc760e" translate="yes" xml:space="preserve">
          <source>In case the peer's identity cannot be validated during the handshake, the application must inspect errors returned by &lt;a href=&quot;qdtls#peerVerificationErrors&quot;&gt;peerVerificationErrors&lt;/a&gt;() and then either ignore errors by calling &lt;a href=&quot;qdtls#ignoreVerificationErrors&quot;&gt;ignoreVerificationErrors&lt;/a&gt;() or abort the handshake by calling &lt;a href=&quot;qdtls#abortHandshake&quot;&gt;abortHandshake&lt;/a&gt;(). If errors were ignored, the handshake can be resumed by calling &lt;a href=&quot;qdtls#resumeHandshake&quot;&gt;resumeHandshake&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545192acf356e40b2ed271a1b563337b471f4054" translate="yes" xml:space="preserve">
          <source>In case the variant contains a type not directly supported by &lt;a href=&quot;qdbusargument&quot;&gt;QDBusArgument&lt;/a&gt;, the value of the returned &lt;a href=&quot;qdbusvariant&quot;&gt;QDBusVariant&lt;/a&gt; will contain another &lt;a href=&quot;qdbusargument&quot;&gt;QDBusArgument&lt;/a&gt;. It is your responsibility to further demarshall it into another type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e570868f4356eb6490a48ad675c8dc61891c9112" translate="yes" xml:space="preserve">
          <source>In cases where an atomic operation is only supported in newer generations of the processor, &lt;a href=&quot;qatomicinteger&quot;&gt;QAtomicInteger&lt;/a&gt; also provides a way to check at runtime what your hardware supports with the &lt;a href=&quot;qatomicinteger#isReferenceCountingNative&quot;&gt;isReferenceCountingNative&lt;/a&gt;(), &lt;a href=&quot;qatomicinteger#isTestAndSetNative&quot;&gt;isTestAndSetNative&lt;/a&gt;(), &lt;a href=&quot;qatomicinteger#isFetchAndStoreNative&quot;&gt;isFetchAndStoreNative&lt;/a&gt;(), and &lt;a href=&quot;qatomicinteger#isFetchAndAddNative&quot;&gt;isFetchAndAddNative&lt;/a&gt;() functions. Wait-free implementations can be detected using the &lt;a href=&quot;qatomicinteger#isReferenceCountingWaitFree&quot;&gt;isReferenceCountingWaitFree&lt;/a&gt;(), &lt;a href=&quot;qatomicinteger#isTestAndSetWaitFree&quot;&gt;isTestAndSetWaitFree&lt;/a&gt;(), &lt;a href=&quot;qatomicinteger#isFetchAndStoreWaitFree&quot;&gt;isFetchAndStoreWaitFree&lt;/a&gt;(), and &lt;a href=&quot;qatomicinteger#isFetchAndAddWaitFree&quot;&gt;isFetchAndAddWaitFree&lt;/a&gt;() functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c0466e27e4ab9491979baf07dcdde1a18d3fd9" translate="yes" xml:space="preserve">
          <source>In cases where an atomic operation is only supported in newer generations of the processor, &lt;a href=&quot;qatomicpointer&quot;&gt;QAtomicPointer&lt;/a&gt; also provides a way to check at runtime what your hardware supports with the &lt;a href=&quot;qatomicpointer#isTestAndSetNative&quot;&gt;isTestAndSetNative&lt;/a&gt;(), &lt;a href=&quot;qatomicpointer#isFetchAndStoreNative&quot;&gt;isFetchAndStoreNative&lt;/a&gt;(), and &lt;a href=&quot;qatomicpointer#isFetchAndAddNative&quot;&gt;isFetchAndAddNative&lt;/a&gt;() functions. Wait-free implementations can be detected using the &lt;a href=&quot;qatomicpointer#isTestAndSetWaitFree&quot;&gt;isTestAndSetWaitFree&lt;/a&gt;(), &lt;a href=&quot;qatomicpointer#isFetchAndStoreWaitFree&quot;&gt;isFetchAndStoreWaitFree&lt;/a&gt;(), and &lt;a href=&quot;qatomicpointer#isFetchAndAddWaitFree&quot;&gt;isFetchAndAddWaitFree&lt;/a&gt;() functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc7cb8f56c52c62b79f7c46c534f50e4b95ffec" translate="yes" xml:space="preserve">
          <source>In cases where anchors are used to match the widths or heights of widgets, it is convenient to use the &lt;a href=&quot;qgraphicsanchorlayout#addAnchors&quot;&gt;addAnchors&lt;/a&gt;() function. As with the other functions for specifying anchors, it can also be used to anchor a widget to a layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da791f973c7954950e7dec5bd6cbf317ffe952f8" translate="yes" xml:space="preserve">
          <source>In cases where it is not possible to fit the rect plus margins inside the viewport the contents are scrolled so that as much as possible is visible from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cba2c07e1fd54805178ce5d941c420ce760ec6" translate="yes" xml:space="preserve">
          <source>In cases where the favorites plugin does not support matching by alternative identifiers, then the &lt;a href=&quot;qtlocation-index#plugin-references-and-parameters&quot;&gt;plugin documentation&lt;/a&gt; should be consulted to see precisely what key-value parameters to set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d71b24ddb6aa8ada2ae25e34032ae1809be895" translate="yes" xml:space="preserve">
          <source>In certain cases the parent layout is put into QLayout::FreeResize mode, meaning that it will not adapt the layout of its contents to fit inside small sized windows, or even prevent the user from making the window too small to be usable. This can be overcome by subclassing the problematic widgets, and implementing suitable &lt;a href=&quot;qwidget#sizeHint-prop&quot;&gt;sizeHint()&lt;/a&gt; and &lt;a href=&quot;qwidget#minimumSizeHint-prop&quot;&gt;minimumSizeHint()&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41b4ac3933eda1476b14382ed0a1006fe9f565d" translate="yes" xml:space="preserve">
          <source>In charge of dispatching keyboard events to attached QQKeyboardHandler objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62594d9650efc77f9adb66b52aa57691e8a522f0" translate="yes" xml:space="preserve">
          <source>In class &lt;code&gt;Employee&lt;/code&gt;, note the single data member, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45d35c7c4a845cb78c51a71a5fffbaf1765a2e0" translate="yes" xml:space="preserve">
          <source>In classic CSS, when font and color of an item is not explicitly set, it gets automatically inherited from the parent. By default, when using Qt Style Sheets, a widget does &lt;b&gt;not&lt;/b&gt; automatically inherit its font and color setting from its parent widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e29793c801fa55b34ee41a3ad89961ce0d845a4" translate="yes" xml:space="preserve">
          <source>In complex wizards, pages are identified by IDs. These IDs are typically defined using an enum. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aac7d402261de7266f7684761e23369ae2b9abf" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;#translations&quot;&gt;TRANSLATIONS&lt;/a&gt;, translation files in &lt;code&gt;EXTRA_TRANSLATIONS&lt;/code&gt; will be processed only by &lt;a href=&quot;https://doc.qt.io/qt-5.13/linguist-manager.html#using-lrelease&quot;&gt;lrelease&lt;/a&gt;, not &lt;a href=&quot;https://doc.qt.io/qt-5.13/linguist-manager.html#using-lupdate&quot;&gt;lupdate&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a196eafe5fec635b2bbdc654a994018eadbf5d" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;qfileinfo#canonicalPath&quot;&gt;canonicalPath&lt;/a&gt;() symbolic links or redundant &quot;.&quot; or &quot;..&quot; elements are not necessarily removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a9fa83d5c4840547d5095aa74f02059ad912f6" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;qtimeline#start&quot;&gt;start&lt;/a&gt;(), this function does not restart the timeline before it resumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7097e105e1037d49889af33e5f80c02e2bd8d7" translate="yes" xml:space="preserve">
          <source>In contrast to event specifications in SCXML documents, spaces are not allowed in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a772d6172888ba23751f095769c3d0f199153a2" translate="yes" xml:space="preserve">
          <source>In contrast to most other layouts, child Items' &lt;a href=&quot;qml-qtquick-layouts-layout#fillWidth-attached-prop&quot;&gt;Layout.fillWidth&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-layouts-layout#fillHeight-attached-prop&quot;&gt;Layout.fillHeight&lt;/a&gt; properties default to &lt;code&gt;true&lt;/code&gt;. As a consequence, child items are by default filled to match the size of the &lt;a href=&quot;qml-qtquick-layouts-stacklayout&quot;&gt;StackLayout&lt;/a&gt; as long as their &lt;a href=&quot;qml-qtquick-layouts-layout#maximumWidth-attached-prop&quot;&gt;Layout.maximumWidth&lt;/a&gt; or &lt;a href=&quot;qml-qtquick-layouts-layout#maximumHeight-attached-prop&quot;&gt;Layout.maximumHeight&lt;/a&gt; does not prevent it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221c871c00778299b08348aca174c31cdde4ac9e" translate="yes" xml:space="preserve">
          <source>In contrast, datagram mode is message-oriented and provides a complete simultaneous transmission of multiple data streams between endpoints. Call &lt;a href=&quot;qsctpserver#nextPendingDatagramConnection&quot;&gt;nextPendingDatagramConnection&lt;/a&gt;() to accept the pending datagram-mode connection as a connected &lt;a href=&quot;qsctpsocket&quot;&gt;QSctpSocket&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e787bef3e57569e1b4e97caaf24bc5f7bf4106d" translate="yes" xml:space="preserve">
          <source>In contrast, functor-based connections are checked by the compiler. The compiler catches errors at compile-time, enables implicit conversions between compatible types, and recognizes different names of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38ef06a2c4def729d64a10c8350bfda693b07db" translate="yes" xml:space="preserve">
          <source>In contrast, properties of an &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtqml-typesystem-topic.html#qml-object-types&quot;&gt;object type&lt;/a&gt; emit their own property change signals, and a property change signal handler for an object-type property is only invoked when the property is reassigned to a different object value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d70c8987f7df0bae4a098c83c6017992fe13ed" translate="yes" xml:space="preserve">
          <source>In contrast, setting a font and palette using &lt;a href=&quot;qwidget#font-prop&quot;&gt;QWidget::setFont&lt;/a&gt;() and &lt;a href=&quot;qwidget#palette-prop&quot;&gt;QWidget::setPalette&lt;/a&gt;() propagates to child widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1fc3d94746b812dc1a973c5e2550874e4f1cf6" translate="yes" xml:space="preserve">
          <source>In contrast, with the functor-based syntax, an overloaded signal or slot must be casted to tell the compiler which instance to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47704f927094ac2336750dc0c531d2e3723bd0c2" translate="yes" xml:space="preserve">
          <source>In datagram mode, &lt;a href=&quot;qsctpsocket&quot;&gt;QSctpSocket&lt;/a&gt; performs the buffering of datagrams independently for each channel. You can queue a datagram to the buffer of the current channel by calling &lt;a href=&quot;qsctpsocket#writeDatagram&quot;&gt;writeDatagram&lt;/a&gt;() and read a pending datagram by calling &lt;a href=&quot;qsctpsocket#readDatagram&quot;&gt;readDatagram&lt;/a&gt;() respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e42511b7abf9bb54e833603926aeb7b222def2" translate="yes" xml:space="preserve">
          <source>In debug builds the condition is enforced by an assert to facilitate debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ca71f516af27079bf83c99568901eec725fb82" translate="yes" xml:space="preserve">
          <source>In editable models, this opens the current item for editing. The Escape key can be used to cancel the editing process and revert any changes to the data displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d14e1ec2b5b306276db7124338a02023a6c82e" translate="yes" xml:space="preserve">
          <source>In effect, when a command is pushed, it becomes the top-most command on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767704cb9fd04546381b49fcfd02b90d83e7c7cb" translate="yes" xml:space="preserve">
          <source>In either case, the value may be either a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5771972b8071936a553417ed46282eae06dbd5e" translate="yes" xml:space="preserve">
          <source>In fact, any JavaScript expression (no matter how complex) may be used in a property binding definition, as long as the result of the expression is a value whose type can be assigned to the property. This includes side effects. However, complex bindings and side effects are discouraged because they can reduce the performance, readability, and maintainability of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20030dd4b75e22ef5740f4e7e8489490113c4e84" translate="yes" xml:space="preserve">
          <source>In full, the RenderViews created are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb19f0f7570b0febe9bc2b6bebf1e844928a04ec" translate="yes" xml:space="preserve">
          <source>In fullscreen mode, the virtual keyboard replicates the contents of the focused input field to the fullscreen input field located at the top of the keyboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5906462ad37b4fc10efbd813a86f2cafbda7f2" translate="yes" xml:space="preserve">
          <source>In general a document structuring command considers everything that follows it until the first line break as its argument. The argument is rendered as the unit's title. If the title needs to be spanned over several lines, make sure that each line (except the last one) is ended with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167a7ef27ae33540c81ee2290a8d3d775d231aad" translate="yes" xml:space="preserve">
          <source>In general an enabled widget handles keyboard and mouse events; a disabled widget does not. An exception is made with &lt;a href=&quot;qabstractbutton&quot;&gt;QAbstractButton&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc625bb55279831e729a96b7ba93ed54e0b4b61" translate="yes" xml:space="preserve">
          <source>In general returns the modal dialog's result code, &lt;code&gt;Accepted&lt;/code&gt; or &lt;code&gt;Rejected&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fd7bb71f823cf713a3ecec34253b92dc6cbfcf" translate="yes" xml:space="preserve">
          <source>In general there are two steps to completing an in-app purchase using the API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30673a5ebb6575bf00ffabd14fa8a0d19b73bc55" translate="yes" xml:space="preserve">
          <source>In general we can implement a default event handler by double clicking on the widget in the form, but the default events for our widgets are right now not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc58706396cf19f31560982fb0e3ab7ba9781ad7" translate="yes" xml:space="preserve">
          <source>In general you should use one of the predefined action names, unless describing an action that does not fit these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8cf290113d81f0cede60c757cf3b594dd8539e" translate="yes" xml:space="preserve">
          <source>In general, QDoc will generate &quot;See also&quot; links that interconnect the functions that access the same property. It recognizes four different syntax versions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ffe95519cbb62c5b86a0ab65f4b339f724b6c1" translate="yes" xml:space="preserve">
          <source>In general, a title command considers everything that follows it until the first line break as its argument. If the title is so long it must span multiple lines, end each line (except the last one) with a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98dd314277e1d0ada247bc3c672aabba6543f947" translate="yes" xml:space="preserve">
          <source>In general, an address is suitable for publication if it is an address this machine will be reached at for an indeterminate amount of time, though it need not be permanent. For example, addresses obtained via DHCP are often eligible, but cryptographically-generated temporary IPv6 addresses are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55acea3c2eb5e73edd7468a7a4dafb1085d723ed" translate="yes" xml:space="preserve">
          <source>In general, animating a property will cause any bindings which reference that property to be re-evaluated. Usually, this is what is desired but in other cases it may be better to disable the binding prior to performing the animation, and then reassign the binding once the animation has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50f64d09939ac18488580b2d7a1face739cfb64" translate="yes" xml:space="preserve">
          <source>In general, creating QObjects before the &lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt; is not supported and can lead to weird crashes on exit, depending on the platform. This means static instances of &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; are also not supported. A properly structured single or multi-threaded application should make the &lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt; be the first created, and last destroyed &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3163ba6967198fa96a626de9bd8f394ad413b305" translate="yes" xml:space="preserve">
          <source>In general, events come from the underlying window system (&lt;a href=&quot;qevent#spontaneous&quot;&gt;spontaneous&lt;/a&gt;() returns &lt;code&gt;true&lt;/code&gt;), but it is also possible to manually send events using &lt;a href=&quot;qcoreapplication#sendEvent&quot;&gt;QCoreApplication::sendEvent&lt;/a&gt;() and &lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;QCoreApplication::postEvent&lt;/a&gt;() (&lt;a href=&quot;qevent#spontaneous&quot;&gt;spontaneous&lt;/a&gt;() returns &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1849f84d16bd0766ea8eb662b93a02850cb20f" translate="yes" xml:space="preserve">
          <source>In general, every Qt code entity such as properties, classes, methods, signals, and enumerations have a corresponding &lt;a href=&quot;qdoc-guide-writing#qdoc-topics&quot;&gt;topic command&lt;/a&gt;. QDoc will associate the documentation to the source using C++ naming rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2517cd279222c6f9d8801a3f3219d6fbf5a2de96" translate="yes" xml:space="preserve">
          <source>In general, for visualizing key focus, this property is preferred over &lt;a href=&quot;qml-qtquick-item#activeFocus-prop&quot;&gt;Item::activeFocus&lt;/a&gt;. This ensures that key focus is only visualized when interacting with keys - not when interacting via touch or mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfd9239afb114e51ac0078b1b52a454c1bd0350" translate="yes" xml:space="preserve">
          <source>In general, it is recommended that you are somewhat familiar with MSAA, which Qt's accessibility support originally was built for. You should also study the enum values of &lt;a href=&quot;qaccessible&quot;&gt;QAccessible&lt;/a&gt;, which describe the roles, actions, relationships, and events that you need to consider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2692f7b2cb6d6d341ef938261c6eb784c6d5859b" translate="yes" xml:space="preserve">
          <source>In general, large and complex Map items such as polygons and polylines with large numbers of vertices can have an adverse effect on UI performance. Further, more detailed notes on this are in the documentation for each map item type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4535d3c722b8e58e4d5f10e8bfeafccedbf548" translate="yes" xml:space="preserve">
          <source>In general, sensor data is oriented relative to &lt;a href=&quot;qplatformscreen#nativeOrientation&quot;&gt;QPlatformScreen::nativeOrientation&lt;/a&gt;, that is to the top of the device when the device is held in its natural orientation (normally when the device logo appears the right side up). If values are to be displayed on the screen, the values may need to be transformed so that they match the user interface orientation. A sensor may define its data as being oriented to the UI. This will be noted in the documentation for the sensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d461ad9e2451af5a014dd5528ca190e7ae0e72" translate="yes" xml:space="preserve">
          <source>In general, simple logic should be defined in-line in the QML file, but more complex logic should be separated into code-behind implementation resources for maintainability and readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6849e63b08f87190a4b7fa882e9fc4b5445d543e" translate="yes" xml:space="preserve">
          <source>In general, the pointer will be invalid after the statement in which qUtf16Printable() is used. This is because the pointer may have been obtained from a temporary expression, which will fall out of scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c622bb388124a5b26778b067a582514ab280201" translate="yes" xml:space="preserve">
          <source>In general, these are accessible from QML regardless of whether a &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;-derived class has been &lt;a href=&quot;qtqml-cppintegration-definetypes#registering-c-types-with-the-qml-type-system&quot;&gt;registered with the QML type system&lt;/a&gt;. However, if a class is to be used in a way that requires the engine to access additional type information &amp;mdash; for example, if the class itself is to be used as a method parameter or property, or if one of its enum types is to be used in this way &amp;mdash; then the class may need to be registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d4e33d0bc4ecf054832e4c44c5098f53bdf3c7" translate="yes" xml:space="preserve">
          <source>In general, this uuid is invalid on every platform but &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt; and iOS. It is used as a workaround for those two platforms as they do not provide Bluetooth addresses for found Bluetooth Low Energy devices. Every other platform uses &lt;a href=&quot;qbluetoothdeviceinfo#address&quot;&gt;address&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ceb92332ee7e2712c382b2842be15ad2b3a3dd" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you create a &lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt;, &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; or a &lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt; object in your &lt;code&gt;main()&lt;/code&gt; function as early as possible. &lt;a href=&quot;qcoreapplication#exec&quot;&gt;exec&lt;/a&gt;() will not return until the event loop exits; e.g., when &lt;a href=&quot;qcoreapplication#quit&quot;&gt;quit&lt;/a&gt;() is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e4277a8585c35d53b91045f546875f4b1b8bc1" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you use &lt;a href=&quot;qhash#contains&quot;&gt;contains&lt;/a&gt;() and &lt;a href=&quot;qhash#value&quot;&gt;value&lt;/a&gt;() rather than operator[]() for looking up a key in a hash. The reason is that operator[]() silently inserts an item into the hash if no item exists with the same key (unless the hash is const). For example, the following code snippet will create 1000 items in memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0007a434f71d259618694822d5bfeba83e1dd00" translate="yes" xml:space="preserve">
          <source>In general, we recommend that you use &lt;a href=&quot;qmap#contains&quot;&gt;contains&lt;/a&gt;() and &lt;a href=&quot;qmap#value&quot;&gt;value&lt;/a&gt;() rather than operator[]() for looking up a key in a map. The reason is that operator[]() silently inserts an item into the map if no item exists with the same key (unless the map is const). For example, the following code snippet will create 1000 items in memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5622e36d535a53db4beeb4bbbfc01f7a4d6e23" translate="yes" xml:space="preserve">
          <source>In general, you will rarely ever need to call this function. &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt;'s internal hash table automatically shrinks or grows to provide good performance without wasting too much memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a04368af0343289fa3b76e8b7ef2051808deb3" translate="yes" xml:space="preserve">
          <source>In general, you will rarely ever need to call this function. &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt;'s internal hash table automatically shrinks or grows to provide good performance without wasting too much memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9eb27b95af0b2827dafa339ac25524deb224bf" translate="yes" xml:space="preserve">
          <source>In hierarchical models where finding the number of children of a given item is an expensive operation, it is useful to ensure that the model's &lt;a href=&quot;qabstractitemmodel#rowCount&quot;&gt;rowCount()&lt;/a&gt; implementation is only called when necessary. In such cases, the &lt;a href=&quot;qabstractitemmodel#hasChildren&quot;&gt;hasChildren()&lt;/a&gt; function can be reimplemented to provide an inexpensive way for views to check for the presence of children and, in the case of &lt;a href=&quot;qtreeview&quot;&gt;QTreeView&lt;/a&gt;, draw the appropriate decoration for their parent item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb92e51877c2515aad653fa53a73570269080b5a" translate="yes" xml:space="preserve">
          <source>In hierarchical models, when a drop occurs on an item, it would be better to insert new items into the model as children of that item. In the simple example shown here, the model only has one level, so this approach is not appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c0cae839ddda624334a2403483c7352f65cd8e" translate="yes" xml:space="preserve">
          <source>In its most basic form, a model can be accessed as a simple table in which items are located by their row and column numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc0cc9cd4253bcc283de2f132ac5c7d434d46b6" translate="yes" xml:space="preserve">
          <source>In its most common form, a key sequence describes a combination of keys that must be used together to perform some action. Key sequences are used with &lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; objects to specify which keyboard shortcuts can be used to trigger actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b667f86f48fc68b85ef71c107d6544fbee938d65" translate="yes" xml:space="preserve">
          <source>In its simplest form, a tree widget can be constructed in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcd072fc314743db90dadec9d0a600d1ddbed98" translate="yes" xml:space="preserve">
          <source>In itself, a &lt;a href=&quot;qt3drender-qmaterial&quot;&gt;QMaterial&lt;/a&gt; doesn't do anything. It's only when it references a &lt;a href=&quot;qt3drender-qeffect&quot;&gt;QEffect&lt;/a&gt; node that a &lt;a href=&quot;qt3drender-qmaterial&quot;&gt;QMaterial&lt;/a&gt; becomes useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2cc45bab651e1c7dac8b1681471a3a08848efc" translate="yes" xml:space="preserve">
          <source>In itself, a Material doesn't do anything. It's only when it references an Effect node that a Material becomes useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2584c43252a8dc553e4314115f45d5e3c816240" translate="yes" xml:space="preserve">
          <source>In keyboard-interactive mode, the windows are moved and resized with the keyboard. You can enter this mode through the system menu of the window. The &lt;a href=&quot;qmdisubwindow#keyboardSingleStep-prop&quot;&gt;keyboardSingleStep&lt;/a&gt; and &lt;a href=&quot;qmdisubwindow#keyboardPageStep-prop&quot;&gt;keyboardPageStep&lt;/a&gt; properties control the distance the widget is moved or resized for each keypress event. When shift is pressed down page step is used; otherwise single step is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4616ef1618967d6d6591d1a4505628dc05ae149" translate="yes" xml:space="preserve">
          <source>In many cases it is sufficient to receive signals through signal handlers rather than using the connect() function. However, using the &lt;code&gt;connect&lt;/code&gt; method allows a signal to be received by multiple methods as shown earlier, which would not be possible with signal handlers as they must be uniquely named. Also, the &lt;code&gt;connect&lt;/code&gt; method is useful when connecting signals to &lt;a href=&quot;qtqml-javascript-dynamicobjectcreation#&quot;&gt;dynamically created objects&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d785d6c000a5fe3467d5ab1dab6fc441daf8ae7d" translate="yes" xml:space="preserve">
          <source>In many cases the torch hardware is shared with camera flash functionality, and might be automatically controlled by the device. You have control over the power level (of course, higher power levels are brighter but reduce battery life significantly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161ae7ee9897550d357db6468a55ca2ca1146c1d" translate="yes" xml:space="preserve">
          <source>In many cases these properties do not need to be explicitly specified, as they can be inferred from the animation framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7bd39609818c74e82eaebc3b22311f55a717b7" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;a href=&quot;qreadwritelock&quot;&gt;QReadWriteLock&lt;/a&gt; is a direct competitor to &lt;a href=&quot;qmutex&quot;&gt;QMutex&lt;/a&gt;. &lt;a href=&quot;qreadwritelock&quot;&gt;QReadWriteLock&lt;/a&gt; is a good choice if there are many concurrent reads and writing occurs infrequently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16bee62c9c48e4c2ca9d8d2c32391aa363b033b" translate="yes" xml:space="preserve">
          <source>In many cases, the internal state of a control can be more efficiently processed in C++. For example, handling input events in C++ makes a difference for controls that would otherwise need to create internal MouseAreas and attached Keys objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f609949c9c12ed4aaeb5e4385fbcad5eaa080388" translate="yes" xml:space="preserve">
          <source>In many project files, the assignment (&lt;code&gt;=&lt;/code&gt;) and append (&lt;code&gt;+=&lt;/code&gt;) operators can be used to include all the information about a project. The typical pattern of use is to assign a list of values to a variable, and append more values depending on the result of various tests. Since qmake defines certain variables using default values, it is sometimes necessary to use the removal (&lt;code&gt;-=&lt;/code&gt;) operator to filter out values that are not required. The following sections describe how to use operators to manipulate the contents of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782917b6030b45e21219e726acc63fe353c72ceb" translate="yes" xml:space="preserve">
          <source>In many user interfaces, it is sufficient to set a visual object's opacity to 0 or to move the visual object off the screen instead of deleting it. If you have lots of dynamically created objects, however, you may receive a worthwhile performance benefit if unused objects are deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d9649203441474de67ef8c858231e2a462eb10" translate="yes" xml:space="preserve">
          <source>In many wizards, the contents of a page may affect the default values of the fields of a later page. To make it easy to communicate between pages, &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt; supports a &quot;field&quot; mechanism that allows you to register a field (e.g., a &lt;a href=&quot;qlineedit&quot;&gt;QLineEdit&lt;/a&gt;) on a page and to access its value from any page. It is also possible to specify mandatory fields (i.e., fields that must be filled before the user can advance to the next page).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340a548e3daa2a531166f65a82fc421c7864c735" translate="yes" xml:space="preserve">
          <source>In many wizards, the contents of a page may affect the default values of the fields of a later page. To make it easy to communicate between pages, &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt; supports a &lt;a href=&quot;qwizard#registering-and-using-fields&quot;&gt;&quot;field&quot; mechanism&lt;/a&gt; that allows you to register a field (e.g., a &lt;a href=&quot;qlineedit&quot;&gt;QLineEdit&lt;/a&gt;) on a page and to access its value from any page. Fields are global to the entire wizard and make it easy for any single page to access information stored by another page, without having to put all the logic in &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt; or having the pages know explicitly about each other. Fields are registered using &lt;a href=&quot;qwizardpage#registerField&quot;&gt;registerField&lt;/a&gt;() and can be accessed at any time using &lt;a href=&quot;qwizardpage#field&quot;&gt;field&lt;/a&gt;() and &lt;a href=&quot;qwizardpage#setField&quot;&gt;setField&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18a6c09fd6cb157b1e37176352d7968fbaeebaf" translate="yes" xml:space="preserve">
          <source>In member functions where an argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9cbbf03d10a0b89b193fdd16a70bbef05fcda3" translate="yes" xml:space="preserve">
          <source>In memory, resources are represented by a tree of resource objects. The tree is automatically built at startup and used by &lt;a href=&quot;qfile&quot;&gt;QFile&lt;/a&gt; for resolving paths to resources. You can use a &lt;a href=&quot;qdir&quot;&gt;QDir&lt;/a&gt; initialized with &quot;:/&quot; to navigate through the resource tree from the root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220a9a22a5e747671c32d0cc7b5fa3d602a8c0a8" translate="yes" xml:space="preserve">
          <source>In most cases it is better to use either &lt;a href=&quot;qcontiguouscache#at&quot;&gt;at&lt;/a&gt;() or &lt;a href=&quot;qcontiguouscache#insert&quot;&gt;insert&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73197b5aa23629d2e7100cc32d11106dcdef78e9" translate="yes" xml:space="preserve">
          <source>In most cases the indexes will not exceed 0 to INT_MAX, and &lt;a href=&quot;qcontiguouscache#normalizeIndexes&quot;&gt;normalizeIndexes&lt;/a&gt;() will not need to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61941430557547c2cafc6d78e6fe67b961b1fdcf" translate="yes" xml:space="preserve">
          <source>In most cases the state chage is caused by &lt;a href=&quot;qcameracontrol#setState&quot;&gt;QCameraControl::setState&lt;/a&gt;(), but if critical error has occurred the state changes to &lt;a href=&quot;qcamera#State-enum&quot;&gt;QCamera::UnloadedState&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26bd4a4c500ac565eae1b1328dab78467ff1701" translate="yes" xml:space="preserve">
          <source>In most cases this function returns the same string as &lt;a href=&quot;qsqlquery#lastQuery&quot;&gt;lastQuery&lt;/a&gt;(). If a prepared query with placeholders is executed on a DBMS that does not support it, the preparation of this query is emulated. The placeholders in the original query are replaced with their bound values to form a new query. This function returns the modified query. It is mostly useful for debugging purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdd1f4dc787718433566c661cac339bc2cf8f74" translate="yes" xml:space="preserve">
          <source>In most cases where you would consider using function pointers as signal or slot parameters, we think inheritance is a better alternative. Here is an example of illegal syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed458223351dc80f129b8d1e0771b835bd8c9289" translate="yes" xml:space="preserve">
          <source>In most cases, existing layout-aware classes such as &lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt; and &lt;a href=&quot;graphicsview#qgraphicslayout&quot;&gt;QGraphicsLayout&lt;/a&gt; already provide the functionality you require. However, subclassing these classes will enable you to create both graphical elements that work well with layouts (&lt;a href=&quot;graphicsview#qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt;) or custom layouts (&lt;a href=&quot;graphicsview#qgraphicslayout&quot;&gt;QGraphicsLayout&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f9cd42bca7bf8549d0b7506bf7a2ff5d5b751f" translate="yes" xml:space="preserve">
          <source>In most cases, it is not wise to manually invoke the garbage collector, as it will block the GUI thread for a substantial period of time. This can result in skipped frames and jerky animations, which should be avoided at all costs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927428fec6043727a4df5c30289799179e4307b4" translate="yes" xml:space="preserve">
          <source>In most cases, this is the Unicode representation of the key code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36881272bd5823b4dc7cf0473854f220400954b3" translate="yes" xml:space="preserve">
          <source>In most cases, using &lt;code&gt;@rpath&lt;/code&gt; is sufficient and recommended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29704ffa56b268da56f994cc9b0178b8fc8f5fa5" translate="yes" xml:space="preserve">
          <source>In most cases, you will also implement &lt;a href=&quot;qlayout#minimumSize&quot;&gt;minimumSize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a720d87c85cb4a3f7abf598e33c014fe235fcfae" translate="yes" xml:space="preserve">
          <source>In most main window style applications you would use the &lt;a href=&quot;qmainwindow#menuBar&quot;&gt;menuBar()&lt;/a&gt; function provided in &lt;a href=&quot;qmainwindow&quot;&gt;QMainWindow&lt;/a&gt;, adding &lt;a href=&quot;qmenu&quot;&gt;QMenu&lt;/a&gt;s to the menu bar and adding &lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt;s to the pop-up menus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb42ddc37d565d38c3af20b6bc404c9a2eced6e" translate="yes" xml:space="preserve">
          <source>In most programs, the &lt;a href=&quot;qdbuspendingcall&quot;&gt;QDBusPendingCall&lt;/a&gt; class will not be used directly. It can be safely replaced with the template-based &lt;a href=&quot;qdbuspendingreply&quot;&gt;QDBusPendingReply&lt;/a&gt;, in order to access the contents of the reply or wait for it to be complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ef42d72c72aebdfd6e5f25839b3db569e9d5ca" translate="yes" xml:space="preserve">
          <source>In most scenarios where a QML component wants the appearance of a synchronous instantiation, it should use this mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6e9ee122d981f49721c96d6590322a10156a9b" translate="yes" xml:space="preserve">
          <source>In most script engines the only supported parameter type is &quot;const &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt;&amp;amp;&quot;, for example, to call a JavaScript function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b3ae5449e8c0871d12fd80aa098dc61f16fb2f" translate="yes" xml:space="preserve">
          <source>In most situations you'll want to specify the position yourself, for example, the current mouse position:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10adffde2587482f7449d231df99d659614e6ea6" translate="yes" xml:space="preserve">
          <source>In most styles, Active and Inactive look the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a627b1dad187b65f6e604a11cc750e597d9b793" translate="yes" xml:space="preserve">
          <source>In most subclasses, the number of columns is independent of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6130a48c765ff0cdefaf8fdfe6cfc6cfe78961ca" translate="yes" xml:space="preserve">
          <source>In multi-window mode, you can arrange each of the tool windows to suit your working style. The main window consists of a menu bar, a tool bar, and a widget box that contains the widgets you can use to create your user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136eb8f687bce846390884eaa3f58e0492d486f4" translate="yes" xml:space="preserve">
          <source>In multithreaded applications, implicit sharing takes place, as explained in &lt;a href=&quot;https://doc.qt.io/qt-5.13/threads-modules.html#threads-and-implicitly-shared-classes&quot;&gt;Threads and Implicitly Shared Classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc95d48282ba6c9ac051d25113f7878c32facc8" translate="yes" xml:space="preserve">
          <source>In multithreaded applications, you can use &lt;a href=&quot;qtimer&quot;&gt;QTimer&lt;/a&gt; in any thread that has an event loop. To start an event loop from a non-GUI thread, use &lt;a href=&quot;qthread#exec&quot;&gt;QThread::exec&lt;/a&gt;(). Qt uses the timer's &lt;a href=&quot;qobject#thread&quot;&gt;thread affinity&lt;/a&gt; to determine which thread will emit the &lt;a href=&quot;qtimer#timeout&quot;&gt;timeout()&lt;/a&gt; signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739ac81164da07ab48d8f4814e3fb516cf63658c" translate="yes" xml:space="preserve">
          <source>In multithreaded applications, you can use the timer mechanism in any thread that has an event loop. To start an event loop from a non-GUI thread, use &lt;a href=&quot;qthread#exec&quot;&gt;QThread::exec&lt;/a&gt;(). Qt uses the object's &lt;a href=&quot;qobject#thread&quot;&gt;thread affinity&lt;/a&gt; to determine which thread will deliver the &lt;a href=&quot;qtimerevent&quot;&gt;QTimerEvent&lt;/a&gt;. Because of this, you must start and stop all timers in the object's thread; it is not possible to start timers for objects in another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ba01ce603721c5c3cdfd5374b21039c18778de" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;find_package&lt;/code&gt; to be successful, Qt 5 must be found below the CMAKE_PREFIX_PATH, or the &lt;code&gt;Qt5_DIR&lt;/code&gt; must be set in the &lt;code&gt;CMake&lt;/code&gt; cache to the location of the &lt;code&gt;Qt5Config.cmake&lt;/code&gt; file. The easiest way to use &lt;code&gt;CMake&lt;/code&gt; is to set the CMAKE_PREFIX_PATH environment variable to the install prefix of Qt 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273d0750c57092ee6ca57a6f1e9a7b1e391e9099" translate="yes" xml:space="preserve">
          <source>In order for Transition to correctly animate state changes, it is sometimes necessary for the engine to fast forward and rewind a state (that is, internally set and unset the state) before it is finally applied. The process is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d29bc5512257f9d56906cc19a69d3155049a056" translate="yes" xml:space="preserve">
          <source>In order for plugins to work correctly on all platforms, you need to ensure that they export the symbols needed by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b438f20068ac31bda35998838ab5e66398e889" translate="yes" xml:space="preserve">
          <source>In order to &lt;a href=&quot;qremoteobjecthostbase#enableRemoting&quot;&gt;QRemoteObjectHost::enableRemoting&lt;/a&gt;() &lt;a href=&quot;qtremoteobjects-source#source&quot;&gt;Source&lt;/a&gt; objects over &lt;a href=&quot;qtremoteobjects-external-schemas#external-qiodevices&quot;&gt;External QIODevices&lt;/a&gt;, Qt Remote Objects needs access to the communications channel (a &lt;a href=&quot;qiodevice&quot;&gt;QIODevice&lt;/a&gt;) between the respective nodes. It is the addHostSideConnection() call that enables this on the &lt;a href=&quot;qtremoteobjects-source#source&quot;&gt;Source&lt;/a&gt; side, taking the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9836ec8586dbb95dedd80563985226020c2de07" translate="yes" xml:space="preserve">
          <source>In order to &lt;a href=&quot;qremoteobjectnode#acquire&quot;&gt;QRemoteObjectNode::acquire&lt;/a&gt;() &lt;a href=&quot;qtremoteobjects-replica#replica&quot;&gt;Replica&lt;/a&gt; objects over &lt;a href=&quot;qtremoteobjects-external-schemas#external-qiodevices&quot;&gt;External QIODevices&lt;/a&gt;, Qt Remote Objects needs access to the communications channel (a &lt;a href=&quot;qiodevice&quot;&gt;QIODevice&lt;/a&gt;) between the respective nodes. It is the addClientSideConnection() call that enables this, taking the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b280a0f639348b1558b91ca8e0cb63e767d4fa" translate="yes" xml:space="preserve">
          <source>In order to access in-app products from your application, you must register them in Google Play. Go to the &lt;b&gt;In-app products&lt;/b&gt; page and click &lt;b&gt;Add new product&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5233b82e07c82933175c5f09dfc4d0290b374f52" translate="yes" xml:space="preserve">
          <source>In order to access in-app products from your application, you must register them to the Windows Store. Go the the &lt;b&gt;IAPs&lt;/b&gt; page and click &lt;b&gt;Create a new IAP&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813cd9e0152da5629452ea757d91e732907fbf24" translate="yes" xml:space="preserve">
          <source>In order to accomplish cross-referencing, there needs to be a link between the original place and the favorited place and this is typically handled via an alternative identifier attribute. The favorited place contains an alternative identifier attribute which has the identifier of the original place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7654ffe5f59aa8b415f329e4d2a4f635740bcbc5" translate="yes" xml:space="preserve">
          <source>In order to accurately and quickly apply transformations and effects to items, Graphics View is built with the assumption that the user's hardware is able to provide reasonable performance for floating point instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d107a525685e68af28a5e7ff750440b98cb5f4f7" translate="yes" xml:space="preserve">
          <source>In order to allow in-app purchases in your application, register the products in your application. Start by creating an application-global instance of &lt;a href=&quot;qinappstore&quot;&gt;QInAppStore&lt;/a&gt;, and use the registerProduct() function to register each product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5886d32c751738229c75dd8e987ff557081068" translate="yes" xml:space="preserve">
          <source>In order to allow users to edit files with write permissions in a directory with restricted permissions, call setDirectWriteFallback() with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a4870692521fed0a531ef8286ef53c637bbc59" translate="yes" xml:space="preserve">
          <source>In order to append without inserting a new paragraph, call &lt;code&gt;myTextEdit.insert(myTextEdit.length, text)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5921d05daeea9767841f5911250cc0691d8e18" translate="yes" xml:space="preserve">
          <source>In order to apply the values played back from the channels of data in the animation clip, the clip animator needs to have a ChannelMapper object assigned to the channelMapper property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b4d150c3515bcf7e23d650b6c2008ed79ae74e" translate="yes" xml:space="preserve">
          <source>In order to apply the values played back from the channels of data in the animation clip, the clip animator needs to have a QChannelMapper object assigned to the &lt;a href=&quot;qt3danimation-qabstractclipanimator#channelMapper-prop&quot;&gt;channelMapper&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eedf5f587698ff08fe02d8f6da9afd8ec0c528d" translate="yes" xml:space="preserve">
          <source>In order to avoid confusion, do not put two groups of radio buttons next to each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b2394d0e8025876c5e81fb5fca85edcc30d366" translate="yes" xml:space="preserve">
          <source>In order to avoid this worst-case behavior, the calculation of the hash value done by &lt;a href=&quot;qhash#qHashx&quot;&gt;qHash&lt;/a&gt;() can be salted by a random seed, that nullifies the attack's extent. This seed is automatically generated by &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt; once per process, and then passed by &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt; as the second argument of the two-arguments overload of the &lt;a href=&quot;qhash#qHashx&quot;&gt;qHash&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4ac30d665c227ccd3175246c4999850e299e04" translate="yes" xml:space="preserve">
          <source>In order to be considered &quot;canonical&quot;, a CBOR stream must meet the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8773022e28cbabc01911661d6e667737b76af71" translate="yes" xml:space="preserve">
          <source>In order to behave asynchronously and not introduce stutters or freezes in an application, the process of creating objects a QQmlIncubators must be driven only during the application's idle time. &lt;a href=&quot;qqmlincubationcontroller&quot;&gt;QQmlIncubationController&lt;/a&gt; allows the application to control exactly when, how often and for how long this processing occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbca8baadc999b96b836a9b38d1b87445b3753f6" translate="yes" xml:space="preserve">
          <source>In order to cause the window to be centered above its transient parent by default, depending on the window manager, it may also be necessary to set the &lt;a href=&quot;qml-qtquick-window-window#flags-prop&quot;&gt;Window::flags&lt;/a&gt; property with a suitable &lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt::WindowType&lt;/a&gt; (such as &lt;code&gt;Qt::Dialog&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ac98914dfe8f4e4136c600d1f65ff9c9cfe3e2" translate="yes" xml:space="preserve">
          <source>In order to conform to C/C++ naming conventions &quot;Dir&quot; is prepended to the codes used in the Unicode Standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1e682d0fc9b26f29b52c7416d19029656145ab" translate="yes" xml:space="preserve">
          <source>In order to conform to C/C++ naming conventions &quot;Joining_&quot; is prepended to the codes used in the Unicode Standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb270840e76faff8640691680236b1a394ebf5dd" translate="yes" xml:space="preserve">
          <source>In order to conform to C/C++ naming conventions &quot;Script_&quot; is prepended to the codes used in the Unicode Standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af9f0c87800086847f3e1f36a0a32ac193b32fa" translate="yes" xml:space="preserve">
          <source>In order to construct a correctly functioning framegraph tree, you should know a few rules about how it is traversed and how to feed it to the Qt 3D renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18ba4a788703fe91904fb4d556a9b828358a7a0" translate="yes" xml:space="preserve">
          <source>In order to customize an existing style, inherit &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt; and reimplement the desired virtual methods. &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt; allows one to specify a certain base style, or it will automatically use the application style when the base style is left unspecified. The former gives a full control on the base style and works best if the customization expects a certain style behavior, whereas the latter provides a platform agnostic way to customize the application style that defaults to the native platform style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8e427a12f9166e734e17315c12bed4668cff8d" translate="yes" xml:space="preserve">
          <source>In order to determine what options an image handler supports, Qt will call &lt;a href=&quot;qimageiohandler#supportsOption&quot;&gt;supportsOption&lt;/a&gt;() and &lt;a href=&quot;qimageiohandler#setOption&quot;&gt;setOption&lt;/a&gt;(). Make sure to reimplement these functions if you can provide support for any of the options in the &lt;a href=&quot;qimageiohandler#ImageOption-enum&quot;&gt;ImageOption&lt;/a&gt; enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfe698a4ad29b789ea1afc2062ba97f1174b270" translate="yes" xml:space="preserve">
          <source>In order to do so, you can create a &lt;a href=&quot;qopengldebugmessage&quot;&gt;QOpenGLDebugMessage&lt;/a&gt; object by calling &lt;a href=&quot;qopengldebugmessage#createApplicationMessage&quot;&gt;createApplicationMessage()&lt;/a&gt; or &lt;a href=&quot;qopengldebugmessage#createThirdPartyMessage&quot;&gt;createThirdPartyMessage()&lt;/a&gt;, and then inserting it into the log by calling &lt;a href=&quot;qopengldebuglogger#logMessage&quot;&gt;logMessage&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3332997d32b1ce89721edcd4aeaeb1d3f5900b42" translate="yes" xml:space="preserve">
          <source>In order to ensure drag operations work properly, it is important to reimplement the following functions that remove data from the model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c171a6fd49179a1e32af671ec262c87073e91ab4" translate="yes" xml:space="preserve">
          <source>In order to ensure that a popup is displayed above other items in the scene, it is recommended to use &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt;. &lt;a href=&quot;qml-qtquick-controls2-applicationwindow&quot;&gt;ApplicationWindow&lt;/a&gt; also provides background dimming effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbcaa1b4c6c581f9b2c0adf80607868930c75d7" translate="yes" xml:space="preserve">
          <source>In order to facilitate verification of the most common D-Bus errors generated by the D-Bus implementation and by the bus daemon itself, &lt;a href=&quot;qdbuserror&quot;&gt;QDBusError&lt;/a&gt; can be compared to a set of pre-defined values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5422c9a0bf4e432d87ea7ba1d07e96bffd9fbe" translate="yes" xml:space="preserve">
          <source>In order to generate such messages, you need to enable the informational output for the &lt;code&gt;qt.qml.binding.removal&lt;/code&gt; logging category, for instance by calling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e18dd8d9382b9e4ab6eff01b7ac89dd4470580" translate="yes" xml:space="preserve">
          <source>In order to get an application designed for low DPI values running on a high resolution monitors quickly, consider one of the scaling options (let the application run as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05788d09e0bce3911756b506eda62412477e1884" translate="yes" xml:space="preserve">
          <source>In order to help applications migrate from OpenGL-based code without having to flip Y coordinates in the vertex data, and to allow using &lt;a href=&quot;qmatrix4x4&quot;&gt;QMatrix4x4&lt;/a&gt; functions like &lt;a href=&quot;qmatrix4x4#perspective&quot;&gt;QMatrix4x4::perspective&lt;/a&gt;() while keeping the Vulkan viewport's minDepth and maxDepth set to 0 and 1, &lt;a href=&quot;qvulkanwindow&quot;&gt;QVulkanWindow&lt;/a&gt; provides a correction matrix retrievable by calling &lt;a href=&quot;qvulkanwindow#clipCorrectionMatrix&quot;&gt;clipCorrectionMatrix&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352f9d1daa19e27628f8adbbf3e6bb3b572f385a" translate="yes" xml:space="preserve">
          <source>In order to improve rendering performance, objects that are very small can be rendered using far fewer details, in geometry or texture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf46a9b2ab0abcc4529b05d713981200646ea92" translate="yes" xml:space="preserve">
          <source>In order to invoke the action, &lt;a href=&quot;qaccessibleactioninterface#doAction&quot;&gt;doAction&lt;/a&gt;() is called with an action name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c723dfd3494d19b1d8256d9a098a1871b1c594" translate="yes" xml:space="preserve">
          <source>In order to make it possible for Qt Quick Controls 2 to find the configuration file, it must be built into application's resources using the &lt;a href=&quot;resources&quot;&gt;The Qt Resource System&lt;/a&gt;. Here's an example &lt;code&gt;.qrc&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c293186fef6700bd78044fbc053ecf384b85c4d2" translate="yes" xml:space="preserve">
          <source>In order to modify your dialog's close behavior, you can reimplement the functions &lt;a href=&quot;qdialog#accept&quot;&gt;accept&lt;/a&gt;(), &lt;a href=&quot;qdialog#reject&quot;&gt;reject&lt;/a&gt;() or &lt;a href=&quot;qdialog#done&quot;&gt;done&lt;/a&gt;(). The &lt;a href=&quot;qwidget#closeEvent&quot;&gt;closeEvent()&lt;/a&gt; function should only be reimplemented to preserve the dialog's position or to override the standard close or reject behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595db3f0857c6c9533d3516b74fb18708745016c" translate="yes" xml:space="preserve">
          <source>In order to only set a mouse cursor shape for a region without reacting to mouse events set the &lt;a href=&quot;qml-qtquick-mousearea#acceptedButtons-prop&quot;&gt;acceptedButtons&lt;/a&gt; to none:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7e7f5f7cec0ce5fe90c693f441ab5123bc40f8" translate="yes" xml:space="preserve">
          <source>In order to parse standalone documents that do use undeclared namespace prefixes, you can turn off namespace processing completely with the &lt;a href=&quot;qxmlstreamreader#namespaceProcessing-prop&quot;&gt;namespaceProcessing&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22488f2fb9bc31cc03c8ffece771f6c5dad33dea" translate="yes" xml:space="preserve">
          <source>In order to perform a match you can simply invoke the &lt;a href=&quot;qregularexpression#match&quot;&gt;match&lt;/a&gt;() function passing a string to match against. We refer to this string as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d9746de5d1bd667c997070120c7089cb319c69" translate="yes" xml:space="preserve">
          <source>In order to perform a search operation we simply create a &lt;a href=&quot;qplacesearchrequest&quot;&gt;QPlaceSearchRequest&lt;/a&gt; and set the desired search parameters, such as a search term and search center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990dae2ac10c8c0c0c07be8097513e57dbe9f673" translate="yes" xml:space="preserve">
          <source>In order to perform an action when the value for a particular handle changes, use the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8cc764d2636377c9d350844454983b703891c4" translate="yes" xml:space="preserve">
          <source>In order to perform the matching, we create a &lt;a href=&quot;qplacematchrequest&quot;&gt;QPlaceMatchRequest&lt;/a&gt; and assign it the search results from the origin manager. The &lt;a href=&quot;qplacematchrequest&quot;&gt;QPlaceMatchRequest&lt;/a&gt; will be used on the destination manager to return corresponding places. We also specify matching parameters which are key value pairs. As mentioned previously, this can vary depending on the manager but typically the key is &lt;a href=&quot;qplacematchrequest#AlternativeId-var&quot;&gt;QPlaceMatchRequest::AlternativeId&lt;/a&gt; to indicate we are matching by alternative id, the value in this case would be x_id_here which specifies which alternative identifier attribute we are using to do the matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dbd5164517c2126a3c5d4152236f8f3118599e" translate="yes" xml:space="preserve">
          <source>In order to preserve the trust of users, QML application developers should not load and execute arbitrary JavaScript or QML resources. For example, consider the QML code below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e99a203dfdb0f33a5655989b6755ddb0403b5a" translate="yes" xml:space="preserve">
          <source>In order to preserve the trust of users, application developers should not evaluate arbitrary JavaScript code. The JavaScript engine's sandbox is only a semantic barrier. The script is evaluated in the same process and with the same privileges as the rest of the application and shares the same memory. As a consequence, C++ objects exposed to scripts are accessible without additional security guards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762fba914ff16b1c9d3cb7722b8c65aee3c0b035" translate="yes" xml:space="preserve">
          <source>In order to purchase a product, call the object's purchase() method. This launches a platform-specific, asynchronous process to purchase the product, for example by requesting the user's password and confirmation of the purchase. In most cases, you should make sure that the application UI is not accepting input while the purchasing request is being processed, as this is not handled automatically on all platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65580b7a71f4b74e660a49e586e196f6738956f" translate="yes" xml:space="preserve">
          <source>In order to restore and activate a minimized window (while preserving its maximized and/or full-screen state), use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239bc75b82c4d0119111f8e91adb1394d201ce03" translate="yes" xml:space="preserve">
          <source>In order to run an application with a specific style, either configure the style using &lt;a href=&quot;qquickstyle&quot;&gt;QQuickStyle&lt;/a&gt; in C++, pass a command line argument, or set an environment variable. Alternatively, the preferred style and style-specific attributes can be specified in a configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0d2b13442b7e65fa15e6bf769a48c084a4c415" translate="yes" xml:space="preserve">
          <source>In order to save bandwidth, sometimes a backend will only return places which are partially populated with details. This can be checked with the &lt;a href=&quot;qml-qtlocation-place#detailsFetched-prop&quot;&gt;Place::detailsFetched&lt;/a&gt; property which indicates whether all availalable details have been fetched or not. If not, the &lt;a href=&quot;qml-qtlocation-place#getDetails-method&quot;&gt;Place::getDetails&lt;/a&gt;() method can be invoked to fetch the remaining details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ba98aa49ecb34866969862fdccd9fac01c5199" translate="yes" xml:space="preserve">
          <source>In order to simplify the management of the enabled / disabled statuses, &lt;a href=&quot;qopengldebugmessage&quot;&gt;QOpenGLDebugMessage&lt;/a&gt; also supports the concept of &lt;code&gt;debug groups&lt;/code&gt;. A debug group contains the group of enabled / disabled configurations of debug messages. Moreover, debug groups are organized in a stack: it is possible to push and pop groups by calling &lt;a href=&quot;qopengldebuglogger#pushGroup&quot;&gt;pushGroup&lt;/a&gt;() and &lt;a href=&quot;qopengldebuglogger#popGroup&quot;&gt;popGroup&lt;/a&gt;() respectively. (When an OpenGL context is created, there is already a group in the stack).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1b4a169d3419fd6ac0895b85077008ef3fa9e6" translate="yes" xml:space="preserve">
          <source>In order to support future compatibility, QCborValues containing extended Qt types compare equal to the tag type of the same contents. In other words, the following expression is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891906f6b832cfd43f7613beff3b18541b8948d3" translate="yes" xml:space="preserve">
          <source>In order to test in-app purchases in your application, you first have to publish it. To limit the users who can access the application before it is ready for production, it can be published as either alpha or beta, in the respective tabs on the &lt;b&gt;APK&lt;/b&gt; page of the developer console. In order to make an alpha or beta application, fill out all the required information about the application, upload the &lt;code&gt;APK&lt;/code&gt; file under the &lt;b&gt;Beta testing&lt;/b&gt; or &lt;b&gt;Alpha testing&lt;/b&gt; tab, and mark the application as &lt;b&gt;published&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfdb1e58048ef1106e285ccf1135aa6a2d1154e" translate="yes" xml:space="preserve">
          <source>In order to test in-app purchases in your application, you first have to publish it. To limit the users who can access the application before it is ready for production, it can be published as either alpha or beta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eac5655794100ecd477fa39e106ff98f98a33f3" translate="yes" xml:space="preserve">
          <source>In order to track scroll bar movements, reimplement the virtual function &lt;a href=&quot;qabstractscrollarea#scrollContentsBy&quot;&gt;scrollContentsBy&lt;/a&gt;(). In order to fine-tune scrolling behavior, connect to a scroll bar's &lt;a href=&quot;qabstractslider#actionTriggered&quot;&gt;QAbstractSlider::actionTriggered&lt;/a&gt;() signal and adjust the &lt;a href=&quot;qabstractslider#sliderPosition-prop&quot;&gt;QAbstractSlider::sliderPosition&lt;/a&gt; as you wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe485a6cb246c26c71c6f42e96a132e7f89a894" translate="yes" xml:space="preserve">
          <source>In order to trigger the event on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;, the application must be configured to let the OS know what kind of file(s) it should react on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3be75fdce4c59f485783bed52658ee521a7009" translate="yes" xml:space="preserve">
          <source>In order to use &lt;a href=&quot;android#&quot;&gt;Qt for Android&lt;/a&gt;, you need the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9631d352c48b641ff0d7847aa100abb55c5398" translate="yes" xml:space="preserve">
          <source>In order to use an adaptor, one must create a class which inherits &lt;a href=&quot;qdbusabstractadaptor&quot;&gt;QDBusAbstractAdaptor&lt;/a&gt;. Since that is a standard &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;-derived class, the &lt;a href=&quot;qobject#Q_OBJECT&quot;&gt;Q_OBJECT&lt;/a&gt; macro must appear in the declaration and the source file must be processed with the &lt;a href=&quot;moc&quot;&gt;moc&lt;/a&gt; tool. The class must also contain one &lt;a href=&quot;qobject#Q_CLASSINFO&quot;&gt;Q_CLASSINFO&lt;/a&gt; entry with the &lt;code&gt;&quot;D-Bus Interface&quot;&lt;/code&gt; name, declaring which interface it is exporting. Only one entry per class is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b87ac57098715353e27b54a2c69f580646a7c7" translate="yes" xml:space="preserve">
          <source>In order to use one's own type with Qt D-Bus, the type has to be declared as a Qt meta-type with the &lt;a href=&quot;qmetatype#Q_DECLARE_METATYPE&quot;&gt;Q_DECLARE_METATYPE&lt;/a&gt;() macro and registered with the &lt;a href=&quot;qdbusargument#qDBusRegisterMetaType&quot;&gt;qDBusRegisterMetaType&lt;/a&gt;() function. The streaming operators &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; will be automatically found by the registration system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4e1b184c4ee4edd48b10c40c92ea172614ec75" translate="yes" xml:space="preserve">
          <source>In order to use the bundled icon theme, an application should call &lt;a href=&quot;qicon#setThemeName&quot;&gt;QIcon::setThemeName&lt;/a&gt;() before loading the main QML file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3afc705c4d4bc91938057bcf4fadb835f5a69e" translate="yes" xml:space="preserve">
          <source>In order to use the registered singleton type in QML, you must import the singleton type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d17f70074df889467be626f3995483d2addfbea" translate="yes" xml:space="preserve">
          <source>In other cases you will need to supply the signature yourself, and it is important that the signature matches the function you want to call. The signature structure is &lt;b&gt;(A)R&lt;/b&gt;, where &lt;b&gt;A&lt;/b&gt; is the type of the argument(s) and &lt;b&gt;R&lt;/b&gt; is the return type. Array types in the signature must have the &lt;b&gt;[&lt;/b&gt; suffix and the fully-qualified type names must have the &lt;b&gt;L&lt;/b&gt; prefix and &lt;b&gt;;&lt;/b&gt; suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c8e793c48baa19e9e861ca2d6a96ac2c587831" translate="yes" xml:space="preserve">
          <source>In other words, the proxy will have all rows of the first source model, followed by all rows of the second source model, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ec810f88d7ad1c4d7d04f694729ec8e79c50d5" translate="yes" xml:space="preserve">
          <source>In our delegate, we can then bind the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd757abf8f41bb3e0600f489e8f951fb229f8854" translate="yes" xml:space="preserve">
          <source>In our example, the &lt;code&gt;&quot;healthPotion&quot;&lt;/code&gt; is a consumable product, because the user should be able to buy any number of health potions and add them to their in-game inventory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3269e302be6e28e3c121a9a7e3e7959fa4362c0" translate="yes" xml:space="preserve">
          <source>In our example, the control is a &lt;a href=&quot;qstyle#ControlElement-enum&quot;&gt;QStyle::CE_PushButton&lt;/a&gt;, and according to the &lt;a href=&quot;qstyle#drawControl&quot;&gt;QStyle::drawControl&lt;/a&gt;() documentation the corresponding class is &lt;a href=&quot;qstyleoptionbutton&quot;&gt;QStyleOptionButton&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7eb38f743704f4a3ec59be92859fb1d77fdb4b" translate="yes" xml:space="preserve">
          <source>In particular calling update whenever the cursor position changes is important as that often causes other query attributes like surrounding text and text selection to change as well. The attributes that often change together with cursor position have been grouped in &lt;a href=&quot;qt#InputMethodQuery-enum&quot;&gt;Qt::ImQueryInput&lt;/a&gt; value for convenience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c064b8988cc079e71884c37f141206a12483fd0" translate="yes" xml:space="preserve">
          <source>In particular, QML currently supports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f044a192708817302082a9b98b00d91488208886" translate="yes" xml:space="preserve">
          <source>In particular, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd2b529749df25d085d0c1d75f528673e0dcc17" translate="yes" xml:space="preserve">
          <source>In particular, in the last case we want the regular expression engine to report a partial match: we are successfully matching the pattern against the subject string but the matching cannot continue because the end of the subject is encountered. Notice, however, that the matching algorithm should continue and try all possibilities, and in case a complete (non-partial) match is found, then this one should be reported, and the input string accepted as fully valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0408c88246551a7cd9cf01a51efa481f9fcb3708" translate="yes" xml:space="preserve">
          <source>In particular, this may be useful in order to access functionality provided via a singleton type; see &lt;a href=&quot;qqmlengine#qmlRegisterSingletonType&quot;&gt;qmlRegisterSingletonType&lt;/a&gt;() for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6420d958b52ec74d2f4d416713ffaec58cbba3d" translate="yes" xml:space="preserve">
          <source>In practice, additional error checking needs to be performed on the positional arguments and option values. For example, ranges of numbers should be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9649dc9661cd56dc8690eb9e41d0c267ec90959" translate="yes" xml:space="preserve">
          <source>In practice, it often happens that a single &lt;a href=&quot;qt3drender-qeffect&quot;&gt;QEffect&lt;/a&gt; is being referenced by several &lt;a href=&quot;qt3drender-qmaterial&quot;&gt;QMaterial&lt;/a&gt; components. This allows to only create the effect, techniques, passes and shaders once while allowing to specify the material by adding &lt;a href=&quot;qt3drender-qparameter&quot;&gt;QParameter&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3aac8815ccf30d39940f820118f556398786c1c" translate="yes" xml:space="preserve">
          <source>In practice, it often happens that a single Effect is being referenced by several Material components. This allows to only create the effect, techniques, passes and shaders once while allowing to specify the material by adding Parameter instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ece7a22518032100e8b60b803f635ea620c604" translate="yes" xml:space="preserve">
          <source>In practice, the impossibility of using GUI classes in other threads than the main thread can easily be worked around by putting time-consuming operations in a separate worker thread and displaying the results on screen in the main thread when the worker thread is finished. This is the approach used for implementing the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtcore-threads-mandelbrot-example.html&quot;&gt;Mandelbrot Example&lt;/a&gt; and the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtnetwork-blockingfortuneclient-example.html&quot;&gt;Blocking Fortune Client Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bc404839e234ba8ab44abaf332354bdfbe4a5d" translate="yes" xml:space="preserve">
          <source>In practice, this means that the application developer should:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584fcaeaa9a00dd83ceb7534ecaf4817a7fe4b00" translate="yes" xml:space="preserve">
          <source>In previous versions of Qt, &lt;a href=&quot;qabstractprintdialog#exec&quot;&gt;exec&lt;/a&gt;() the print dialog would create a sheet by default the dialog was given a parent. This is no longer supported in Qt 4.5. If you want to use sheets, use &lt;a href=&quot;qprintdialog#open&quot;&gt;QPrintDialog::open&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5f9c82640ac7c66877027ca298b3995f9f02f4" translate="yes" xml:space="preserve">
          <source>In previous versions of Qt, the static functions would create a sheet by default if the static function was given a parent. This is no longer supported and does nothing in Qt 4.5, The static functions will always be an application modal dialog. If you want to use sheets, use &lt;a href=&quot;qfiledialog#open&quot;&gt;QFileDialog::open&lt;/a&gt;() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6482c6f24bb5a73f6a2f88d95345457a7372a5b" translate="yes" xml:space="preserve">
          <source>In project mode, qmake will generate a project file. Additionally, you may supply the following options in this mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52eb3773db85903a8f69c6bdfd4e460d11e7a30c" translate="yes" xml:space="preserve">
          <source>In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text (if &lt;a href=&quot;qlineedit#echoMode-prop&quot;&gt;echoMode&lt;/a&gt;() is &lt;a href=&quot;qlineedit#EchoMode-enum&quot;&gt;Normal&lt;/a&gt;), but cannot edit it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea2966fca2f27a136908152df12da4dd338a57b" translate="yes" xml:space="preserve">
          <source>In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text; but cannot edit it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9096d8234b80c472ceb6ba577a7ed7c91d3f250f" translate="yes" xml:space="preserve">
          <source>In render function, for each visual object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9477c26d43c2a174197428d1b5bfa57d28f0c94f" translate="yes" xml:space="preserve">
          <source>In response to the initial ClientHello message, the server sends a HelloVerifyRequest, which contains a cookie. This cookie is a cryptographic hash and is generated using the client's address, port number, and the server's secret (which is a cryptographically strong pseudo-random sequence of bytes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b5f5b55cebbe5ba07d8b7894baf84d3fbea19e" translate="yes" xml:space="preserve">
          <source>In right-to-left language speaking cultures, people naturally scan and read graphic elements and text from the right to left. The general rule of thumb is that content (like photos, videos and maps) is not mirrored, but positioning of the content (like application layouts and the flow of visual elements) is mirrored. For example, photos shown in chronological order should flow from right to left, the low end range of the horizontal sliders should be located at the right side of the slider, and text lines should be aligned to the right side of the available text area. The location of visual elements should not be mirrored when the position is related to a content; for example, when a position marker is shown to indicate a location on a map. Also, there are some special cases you may need to take into account where right-to-left language speakers are used to left-to-right positioning, for example when using number dialers in phones and media play, pause, rewind and forward buttons in music players.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d739643e33524ace5ab6eace22efddca9e20969c" translate="yes" xml:space="preserve">
          <source>In scene initialization function, for each visual object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f30d77d4100ef4141082397d2a9dab02e6a7059" translate="yes" xml:space="preserve">
          <source>In shell surface integrations, such as QWaylandWlShellIntegration and QWaylandXdgShellV5Integration, maximize and fullscreen requests from the client will only have an effect if the integration has the primary view of the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b243fb67a5ea1c66941228cfb17b8a4f4d74cbe" translate="yes" xml:space="preserve">
          <source>In some GUI styles a default button is drawn with an extra frame around it, up to 3 pixels or more. Qt automatically keeps this space free around auto-default buttons, i.e., auto-default buttons may have a slightly larger size hint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416585172015229e64ef426fff8e77481ff2b51b" translate="yes" xml:space="preserve">
          <source>In some applications, it may make sense to have actions with icons in the toolbar, but not in menus. If true, the icon (if valid) is shown in the menu, when it is false, it is not shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e0698c1ec7fc5eb17dc208e98e215be5d4f0ae" translate="yes" xml:space="preserve">
          <source>In some applications, it may make sense to have actions with shortcuts in context menus. If true, the shortcut (if valid) is shown when the action is shown via a context menu, when it is false, it is not shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a8f44653ad7acca962e66bf2bd7bae24b4eb04" translate="yes" xml:space="preserve">
          <source>In some cases (e.g. dropping multiple email attachments), multiple data values are available. They can be accessed by adding an &lt;code&gt;index&lt;/code&gt; value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843fcdf9edd577ff40518fb8089bc3790d3fa656" translate="yes" xml:space="preserve">
          <source>In some cases and for less frequently used encodings it may be necessary to write your own &lt;a href=&quot;qtextcodec&quot;&gt;QTextCodec&lt;/a&gt; subclass. Depending on the urgency, it may be useful to contact Qt's technical support team or ask on the &lt;code&gt;qt-interest&lt;/code&gt; mailing list to see if someone else is already working on supporting the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a92f39184c895256f5a7c6db1217258254daaa5" translate="yes" xml:space="preserve">
          <source>In some cases changing these settings may result in a longer delay before an image is ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91121f9956527af6306a84bb5613efd97efa8ee" translate="yes" xml:space="preserve">
          <source>In some cases internationalization is simple, for example, making a US application accessible to Australian or British users may require little more than a few spelling corrections. But to make a US application usable by Japanese users, or a Korean application usable by German users, will require that the software operate not only in different languages, but use different input techniques, character encodings and presentation conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183909d14a1f852600e3e34b5ec35b4a844b4013" translate="yes" xml:space="preserve">
          <source>In some cases it can be more beneficial to draw the pixmap to a painter with a scale set rather than scaling the pixmap. This is the case when the painter is for instance based on OpenGL or when the scale factor changes rapidly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d1b72091a29a6578327eb1a20d9e3d6683e5cc" translate="yes" xml:space="preserve">
          <source>In some cases it is necessary for a control to have a drop shadow, for example. However, if we were to add a drop shadow to the button above, it would affect its size, which presents problems for both layouting and mouse/touch input boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1053dd709e57e11ff2ff048501cdb1191b39349" translate="yes" xml:space="preserve">
          <source>In some cases it may be desirable to access a signal outside of the object that emits it. For these purposes, the &lt;code&gt;QtQuick&lt;/code&gt; module provides the &lt;a href=&quot;qml-qtqml-connections&quot;&gt;Connections&lt;/a&gt; type for connecting to signals of arbitrary objects. A &lt;a href=&quot;qml-qtqml-connections&quot;&gt;Connections&lt;/a&gt; object can receive any signal from its specified &lt;a href=&quot;qml-qtqml-connections#target-prop&quot;&gt;target&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923702524b8a824d82d474e4042381dd4f8db231" translate="yes" xml:space="preserve">
          <source>In some cases it may be necessary to perform a video mode set on application startup even when the screen reports that the desired resolution is already set. This is normally optimized away, but if the screen stays powered down, try setting the environment variable &lt;code&gt;QT_QPA_EGLFS_ALWAYS_SET_MODE&lt;/code&gt; to a non-zero value and relaunch the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ef113bfb1073bca51faf7d55677f9bc895fdb2" translate="yes" xml:space="preserve">
          <source>In some cases it may be required to call &lt;a href=&quot;qnetworkconfigurationmanager#updateConfigurations&quot;&gt;updateConfigurations&lt;/a&gt;() and wait for the &lt;a href=&quot;qnetworkconfigurationmanager#updateCompleted&quot;&gt;updateCompleted&lt;/a&gt;() signal before calling this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c02984c7cb3ffce7032812aa08442b7bc00527b" translate="yes" xml:space="preserve">
          <source>In some cases it may be undesirable to play a sound effect - for example, when initiating video recording the sound itself may be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620031e38d73b7471c0d4e44825e6139f594aa81" translate="yes" xml:space="preserve">
          <source>In some cases properties contain a logical group of sub-property attributes. These sub-property attributes can be assigned to using either the dot notation or group notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9926d183a9d7f0c51856d01ecd9e05f58927d0" translate="yes" xml:space="preserve">
          <source>In some cases the automatic querying of the physical screen size via DRM may fail. Normally the &lt;code&gt;QT_QPA_EGLFS_PHYSICAL_WIDTH&lt;/code&gt; and &lt;code&gt;QT_QPA_EGLFS_PHYSICAL_HEIGHT&lt;/code&gt; environment variable would be used to provide the missing values, however this is not suitable anymore when multiple screens are present. Instead, use the &lt;code&gt;physicalWidth&lt;/code&gt; and &lt;code&gt;physicalHeight&lt;/code&gt; properties in the &lt;code&gt;outputs&lt;/code&gt; list to specify the sizes in millimeters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258ccc09ab212e443008a01568e6bceef2ecfa15" translate="yes" xml:space="preserve">
          <source>In some cases the functionality may not be available (for example, if the current operating system or platform does not provide the required functionality), or it may be temporarily unavailable (for example, audio playback during a phone call or similar).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a0516966e42e8b8671b423be1faf9b1e34a91b" translate="yes" xml:space="preserve">
          <source>In some cases the peripheral generates value updates which the central is interested in receiving. In order for a characteristic to support such notifications it must have the &lt;a href=&quot;qlowenergycharacteristic#PropertyType-enum&quot;&gt;QLowEnergyCharacteristic::Notify&lt;/a&gt; or &lt;a href=&quot;qlowenergycharacteristic#PropertyType-enum&quot;&gt;QLowEnergyCharacteristic::Indicate&lt;/a&gt; property and a descriptor of type &lt;a href=&quot;qbluetoothuuid#DescriptorType-enum&quot;&gt;QBluetoothUuid::ClientCharacteristicConfiguration&lt;/a&gt;. Provided those conditions are fulfilled notifications can be enabled as shown in the following code segment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a268a7e99380f4ea4cd542df2c6410112901b1e9" translate="yes" xml:space="preserve">
          <source>In some cases the source video stream requires a certain orientation to be correct. This includes sources like a camera viewfinder, where the displayed viewfinder should match reality, no matter what rotation the rest of the user interface has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48421f7799ae214cef7492b1c1b972a28a837934" translate="yes" xml:space="preserve">
          <source>In some cases the video buffer might be stored in video memory or otherwise inaccessible memory, so it is necessary to map the buffer before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb5df4808e66665cfcb730202fb1c7050e20123" translate="yes" xml:space="preserve">
          <source>In some cases the video frame data might be stored in video memory or otherwise inaccessible memory, so it is necessary to map a frame before accessing the pixel data. This may involve copying the contents around, so avoid mapping and unmapping unless required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e9a4063cec4c7bef4f5348419948d27bf2ce39" translate="yes" xml:space="preserve">
          <source>In some cases this may cause unintended behavior. For example, a state that changes a view's</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a550e6990b7577675be06e7842087f41604449fc" translate="yes" xml:space="preserve">
          <source>In some cases this setting may change automatically as a result of temperature or battery conditions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6bb4d4e22cf5c7bd4c64610c78b9203a0596cc" translate="yes" xml:space="preserve">
          <source>In some cases when application is complex e.g. it's scene graph contains lot's of Items, scene graph can consume more stack memory than what is available by default for the render thread. Default stack memory size is 64KB. Using the environment variable QSG_RENDERTHREAD_STACK_SIZE, it is possible to increase the stack size available for the scene graph render thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f8a4824c8690795d32ad499948e9a1f3af1ecd" translate="yes" xml:space="preserve">
          <source>In some cases you may choose to use a Behavior to animate a property change caused by a state change. While this works well for some situations, in other situations it may lead to unexpected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c15ac83d44ce37a0189c329d15b4f928be27be" translate="yes" xml:space="preserve">
          <source>In some cases you may want to modify the value of a property when a certain condition is met but leave it unmodified otherwise. Often, it's not possible to do this with direct bindings, as you have to supply values for all possible branches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bda29f7e738612273aabfbb087124bd5833039f" translate="yes" xml:space="preserve">
          <source>In some cases you may wish to use a Loader within a view delegate to improve delegate loading performance. This works well in most cases, but there is one important issue to be aware of related to the &lt;a href=&quot;qml-qtqml-component#creation-context&quot;&gt;creation context&lt;/a&gt; of a Component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874c41570555235045f45e49cda6de0c4b8c78af" translate="yes" xml:space="preserve">
          <source>In some cases, a complex application (for example, using a lot of custom QML components) may cause the QML loader thread to consume stack memory more than the 32 KB available by default. Using the environment variable &lt;code&gt;QML_LOADERTHREAD_STACK_SIZE&lt;/code&gt;, it is possible to increase the stack size available for the QML loader thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9d9f5d1235fa67ccc3f54fbf189565a53279e2" translate="yes" xml:space="preserve">
          <source>In some cases, it can be useful to be able to detect when the property has actually been assigned the value defined by a state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65be868fcbadc305bdc3cdebf4fd7214cd94b94" translate="yes" xml:space="preserve">
          <source>In some cases, it is relevant when a layout is added to a widget. When you set the widget of a &lt;a href=&quot;qdockwidget&quot;&gt;QDockWidget&lt;/a&gt; or a &lt;a href=&quot;qscrollarea&quot;&gt;QScrollArea&lt;/a&gt; (with &lt;a href=&quot;qdockwidget#setWidget&quot;&gt;QDockWidget::setWidget&lt;/a&gt;() and &lt;a href=&quot;qscrollarea#setWidget&quot;&gt;QScrollArea::setWidget&lt;/a&gt;()), the layout must already have been set on the widget. If not, the widget will not be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfcad5e5edafeb77b0cca023961159f6802708d" translate="yes" xml:space="preserve">
          <source>In some cases, such as when reparenting between items with clipping enabled, it is useful to animate the parent change via another item that does not have clipping enabled. Such an item can be set using the &lt;a href=&quot;qml-qtquick-parentanimation#via-prop&quot;&gt;via&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bd3abbd5b8e817487ee69c4f7e2e19dee37c4f" translate="yes" xml:space="preserve">
          <source>In some cases, such as with Unix domain sockets on Linux, the access to the socket will be determined by file system permissions, and are created based on the umask. Setting the access flags will overide this and will restrict or permit access as specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654ac9421c46d54fbbfa686e76d8aba1cf1a8945" translate="yes" xml:space="preserve">
          <source>In some cases, the content dimensions can be automatically set based on the &lt;a href=&quot;qml-qtquick-item#childrenRect.width-prop&quot;&gt;childrenRect.width&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-item#childrenRect.height-prop&quot;&gt;childrenRect.height&lt;/a&gt; properties of the &lt;a href=&quot;qml-qtquick-flickable#contentItem-prop&quot;&gt;contentItem&lt;/a&gt;. For example, the previous snippet could be rewritten with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5434ee63284e7d3858767cee9240a2601f7fb402" translate="yes" xml:space="preserve">
          <source>In some cases, the impact of increased memory pressure can be extreme. In some situations, trading off memory usage for an assumed performance gain can result in increased page-thrash or cache-thrash, causing a huge reduction in performance. It is always necessary to benchmark the impact of trade-offs carefully in order to determine which solution is best in a given situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4968ba7999c7294d40c547303ad493ab2ba4767a" translate="yes" xml:space="preserve">
          <source>In some circumstances, for special protocols, it's the local port number can also be used with a query of type &lt;a href=&quot;qnetworkproxyquery#QueryType-enum&quot;&gt;QNetworkProxyQuery::TcpSocket&lt;/a&gt;. When that happens, the socket is indicating it wishes to use the port number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3523f113c028f04478865a8bb71a266b290cfdb5" translate="yes" xml:space="preserve">
          <source>In some circumstances, the called slot may not be able to process the request immediately. This is frequently the case when the request involves an I/O or networking operation which may block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241a6483756c0179a4c7b61ebbe5bef1af1389f9" translate="yes" xml:space="preserve">
          <source>In some languages the order of arguments may need to change, and this can easily be achieved by changing the order of the % arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fb478c17aaf1c2efe6aa5581ab0395bfd01ce54" translate="yes" xml:space="preserve">
          <source>In some occasions text edits should not allow the user to input tabulators or change indentation using the &lt;b&gt;Tab&lt;/b&gt; key, as this breaks the focus chain. The default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6233e700f5658deeeb11e052468b2ab04255843d" translate="yes" xml:space="preserve">
          <source>In some situations it is useful to group &lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; objects together. For example, if you have a &lt;b&gt;Left Align&lt;/b&gt; action, a &lt;b&gt;Right Align&lt;/b&gt; action, a &lt;b&gt;Justify&lt;/b&gt; action, and a &lt;b&gt;Center&lt;/b&gt; action, only one of these actions should be active at any one time. One simple way of achieving this is to group the actions together in an action group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec01e3125218c7aa7e4acb9ff7f7ab1327614746" translate="yes" xml:space="preserve">
          <source>In some situations, it is possible to trade-off increased memory usage for decreased processing time. For example, caching the result of a symbol lookup used in a tight loop to a temporary variable in a JavaScript expression will result in a significant performance improvement when evaluating that expression, but it involves allocating a temporary variable. In some cases, these trade-offs are sensible (such as the case above, which is almost always sensible), but in other cases it may be better to allow processing to take slightly longer in order to avoid increasing the memory pressure on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a65e171ba344d27c2bc3135a6656497e102c1bf" translate="yes" xml:space="preserve">
          <source>In some situations, it is useful to give a translation context explicitly by fully qualifying the call to tr(); for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975078149e2e7255befaef187ec5cad85153778c" translate="yes" xml:space="preserve">
          <source>In some situations, the state of one toggle action should depend on the state of others. For example, &quot;Left Align&quot;, &quot;Center&quot; and &quot;Right Align&quot; toggle actions are mutually exclusive. To achieve exclusive toggling, add the relevant toggle actions to a &lt;a href=&quot;qactiongroup&quot;&gt;QActionGroup&lt;/a&gt; with the &lt;a href=&quot;qactiongroup#exclusive-prop&quot;&gt;QActionGroup::exclusive&lt;/a&gt; property set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da099b7b9b3cf8dd0ef98773710f3f41aa5b9afe" translate="yes" xml:space="preserve">
          <source>In some situations, the width of regions 2 and 8 may not be an exact multiple of the width of the corresponding regions in the source image. Similarly, the height of regions 4 and 6 may not be an exact multiple of the height of the corresponding regions. It can be useful to use &lt;a href=&quot;qml-qtquick-borderimage#horizontalTileMode-prop&quot;&gt;BorderImage.Round&lt;/a&gt; instead of &lt;a href=&quot;qml-qtquick-borderimage#horizontalTileMode-prop&quot;&gt;BorderImage.Repeat&lt;/a&gt; in cases like these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccf8fea954dfdae839b9b461ce87885d251e3ef" translate="yes" xml:space="preserve">
          <source>In some special cases it may be necessary to override the Vulkan library name. This can be achieved by setting the &lt;code&gt;QT_VULKAN_LIB&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597877827cd82985b7564fa6e61767164b61770b" translate="yes" xml:space="preserve">
          <source>In some state machines it can be useful to focus the attention on assigning properties in states, not on restoring them when the state is no longer active. If you know that a property should always be restored to its initial value when the machine enters a state that does not explicitly give the property a value, you can set the global restore policy to &lt;a href=&quot;qstate#RestorePolicy-enum&quot;&gt;QStateMachine::RestoreProperties&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8acd187a435dd6a714e2f0e2e4336b32bbc6db" translate="yes" xml:space="preserve">
          <source>In some use cases it may be necessary to turn the interface off despite of open sessions. This can be achieved by calling &lt;a href=&quot;qnetworksession#stop&quot;&gt;stop()&lt;/a&gt;. An example use case could be a network manager type of application allowing the user to control the overall state of the devices connectivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0bc9e6bd03c67533a62525483e2f23d095adcd" translate="yes" xml:space="preserve">
          <source>In some use cases the horizontal axis grid is mostly covered by the surface, so it can be more useful to display the horizontal axis grid on top of the graph rather than on the bottom. A typical use case for this is showing 2D spectrograms using orthoGraphic projection with a top-down viewpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013226cabeda2af6ef8f227f857dcd13ebf3e1ea" translate="yes" xml:space="preserve">
          <source>In special cases tests may want to disable the processing of the events. This can be achieved by setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7452d49f64c970393bfd80306f87f3e26f44a0f2" translate="yes" xml:space="preserve">
          <source>In standard views, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164a5aefb4e39073a4a04fead6f543c66536fbb1" translate="yes" xml:space="preserve">
          <source>In such cases, the following yields the expected results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f544ece13de7f5c398d0ce0f69c0fcaea9d7c95" translate="yes" xml:space="preserve">
          <source>In summary, &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt; is a low-level optimization class that only makes sense in very specific cases. It is used a few places inside Qt and was added to Qt's public API for the convenience of advanced users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f370d8fd1ae76025ade06837edabb5a99c24598d" translate="yes" xml:space="preserve">
          <source>In summary, to set an icon, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed7d9752b11297f2deeaad7c01533dae2c3f1b9" translate="yes" xml:space="preserve">
          <source>In syntactic terms, a QML object type is one which can be used to declare an object by specifying the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56fa35038d379699c4022d19966422243f5e330" translate="yes" xml:space="preserve">
          <source>In terms of stacking order, this component is displayed above the delegate and highlight components, but below the foreground component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457e23421e8521cf6f1ded404af0fb789b691073" translate="yes" xml:space="preserve">
          <source>In that case, &lt;a href=&quot;qml-qtcharts-pieseries#at-method&quot;&gt;PieSeries.at()&lt;/a&gt; or &lt;a href=&quot;qml-qtcharts-pieseries#find-method&quot;&gt;PieSeries.find&lt;/a&gt; can be used to access the properties of an individual &lt;a href=&quot;qml-qtcharts-pieslice&quot;&gt;PieSlice&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5790208d3978b524af92d93f41391c3573ec2c57" translate="yes" xml:space="preserve">
          <source>In that example, the thread will exit after the run function has returned. There will not be any event loop running in the thread unless you call &lt;a href=&quot;qthread#exec&quot;&gt;exec&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6abefb0ebc02351d5d08f8505d9c39811bfa807" translate="yes" xml:space="preserve">
          <source>In the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f13869d816e7c62f6a51e2c34e2ea27e0c6e194" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtdbus-complexpingpong-example.html#&quot;&gt;D-Bus Complex Ping Pong Example&lt;/a&gt;, &lt;code&gt;complexpong.h&lt;/code&gt; and &lt;code&gt;complexpong.cpp&lt;/code&gt; show an implementation of &lt;a href=&quot;qdbusabstractadaptor&quot;&gt;QDBusAbstractAdaptor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162bc0b4a098f3761ef3249d00dace83612c0945" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;qabstracttransition#eventTest&quot;&gt;eventTest()&lt;/a&gt; reimplementation, we first check if the event type is the desired one; if so, we cast the event to a &lt;code&gt;StringEvent&lt;/code&gt; and perform the string comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e431c91e3a785910255234cef24a4c0ecd15c4" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt; / &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; world, it is some times favorable to cache complex content in a pixmap, image or texture. In Qt Quick, because of the techniques already applied by the &lt;a href=&quot;qtquick-visualcanvas-scenegraph-renderer#&quot;&gt;scene graph renderer&lt;/a&gt;, this will in most cases not be the case. Excessive draw calls are already reduced because of batching and a cache will in most cases end up blending more pixels than the original content. The overhead of rendering to an offscreen and the blending involved with drawing the resulting texture is therefore often more costly than simply letting the item and its children be drawn normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d939b74cde175b71c6be9dd50c53f23af1da98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;qsensor#AxesOrientationMode-enum&quot;&gt;AutomaticOrientation&lt;/a&gt; mode, the readings are rotated based on the screen orientation, and therefore this property will be equal to the current screen orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f88163784997d8102c2cef5150b940a5e480ff" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;qsensor#AxesOrientationMode-enum&quot;&gt;UserOrientation&lt;/a&gt; mode, the readings are rotated based on the &lt;a href=&quot;qsensor#userOrientation-prop&quot;&gt;userOrientation&lt;/a&gt; property, and therefore this property is equal to the &lt;a href=&quot;qsensor#userOrientation-prop&quot;&gt;userOrientation&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd706a711fa67c209b0d0c2e27f9e33fd367aec" translate="yes" xml:space="preserve">
          <source>In the &lt;b&gt;App IDs&lt;/b&gt; tab of the &lt;b&gt;Developer Certificate, Identifiers, and Profiles&lt;/b&gt; manager, click the &lt;b&gt;+&lt;/b&gt; button to create a New App ID. This will open up the page to register a new iOS App ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dd03a24aeea45b153e932a3e0af98ee040f6ff" translate="yes" xml:space="preserve">
          <source>In the &lt;b&gt;App Services&lt;/b&gt; area make sure that the &lt;b&gt;In-App Purchases&lt;/b&gt; is checked. Click &lt;b&gt;continue&lt;/b&gt; your to complete the App ID registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87da9cea12fe9772bb40ec9890618272be8747c5" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;.plist&lt;/code&gt; file, you can define some variables which qmake will replace with the relevant values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a9fd76bba1bfb4f2c2688ac8a1fb05feb5a9bb" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;.pro&lt;/code&gt; file for your application, you need the following entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbd9ad121de8e48729b5f47fbd44bf610991787" translate="yes" xml:space="preserve">
          <source>In the C++ file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd084a5753431273388f3e60f04ad68299a55461" translate="yes" xml:space="preserve">
          <source>In the DOM specification, this is the only way to create a non-null document. For historical reasons, Qt also allows to create the document using the default empty constructor. The resulting document is null, but becomes non-null when a factory function, for example &lt;a href=&quot;qdomdocument#createElement&quot;&gt;QDomDocument::createElement&lt;/a&gt;(), is called. The document also becomes non-null when setContent() is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d9f0a10c4c9a854dec147039223243e7e0b574" translate="yes" xml:space="preserve">
          <source>In the Idle state it's allowed to query camera capabilities, set capture resolution, codecs, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb5ed0dca5213d6a5fe8fbcc42e41cf037c8b58" translate="yes" xml:space="preserve">
          <source>In the Idle state you can query camera capabilities, set capture resolution, codecs, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1db5d804394981f915e76bc91755412488c5ac5" translate="yes" xml:space="preserve">
          <source>In the Java style, the tab bar shape and label have the same bounding rectangle as &lt;code&gt;CE_TabBarTab&lt;/code&gt;. Notice that the tabs overlap with the tab widget frame. The base of the tab bar (if drawn) is the area where the tabs and frame overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4ece440c8d95e4496540cedfce41fe09a8d424" translate="yes" xml:space="preserve">
          <source>In the QML language syntax, there is a notion of &lt;a href=&quot;qtqml-syntax-objectattributes#attached-properties-and-attached-signal-handlers&quot;&gt;&lt;i&gt;attached properties&lt;/i&gt; and &lt;i&gt;attached signal handlers&lt;/i&gt;&lt;/a&gt;, which are additional attributes that are attached to an object. Essentially, such attributes are implemented and provided by an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de994ae7065ff0629ef8698d52fae0aa9afa8c5" translate="yes" xml:space="preserve">
          <source>In the Unix/X11 AT-SPI implementation, applications become accessible when two conditions are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9e81d8cc3e8a4adfc5e0c7748b208cfc6fe7c0" translate="yes" xml:space="preserve">
          <source>In the WHERE statement, each non-null field of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6f7ad4674c4c4505b592190446eb701f994122" translate="yes" xml:space="preserve">
          <source>In the Widget Editing Mode, objects can be dragged from the main window's widget box to a form, edited, resized, dragged around on the form, and even dragged between forms. Object properties can be modified interactively, so that changes can be seen immediately. The editing interface is intuitive for simple operations, yet it still supports Qt's powerful layout facilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67556c80897d5a3a2c3176910f8fb2db8eb1c615" translate="yes" xml:space="preserve">
          <source>In the above assignment, the value of &lt;code&gt;PWD&lt;/code&gt; is read immediately when the project file is processed, but &lt;code&gt;$(PWD)&lt;/code&gt; is assigned to &lt;code&gt;DESTDIR&lt;/code&gt; in the generated Makefile. This makes the build process more flexible as long as the environment variable is set correctly when the Makefile is processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a0e96d852ac671feaa2b81ca3ff3c7721420ca" translate="yes" xml:space="preserve">
          <source>In the above assignment, the value of the &lt;code&gt;PWD&lt;/code&gt; environment variable is read when the project file is processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4849f955a25344dd83e2b80d8df33bfd22e7919d" translate="yes" xml:space="preserve">
          <source>In the above case, the path start will be the item's current position, and the path end will be the item's target position in the target state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791c8130e8761a8f3bf03bea7cbc7d087cb6621a" translate="yes" xml:space="preserve">
          <source>In the above code, a whole word is selected using this method. &lt;a href=&quot;qtextcursor&quot;&gt;QTextCursor&lt;/a&gt; provides a number of common move operations for selecting individual characters, words, lines, and whole blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92adf25594982f9941ca5d04e0e063244190206a" translate="yes" xml:space="preserve">
          <source>In the above code, since the model is derived from &lt;a href=&quot;qstringlistmodel&quot;&gt;QStringListModel&lt;/a&gt;, we obtain a default set of flags by calling its implementation of the flags() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f203a1c2478fd4ea15e9a8717f6fa6de040c82" translate="yes" xml:space="preserve">
          <source>In the above diagram, a semi-transparent rectangular child widget with an area removed is constructed and added to a parent widget (a &lt;a href=&quot;qlabel&quot;&gt;QLabel&lt;/a&gt; showing a pixmap). Then, different properties and widget attributes are set to achieve different effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0faa87e2786bc7816634decf32116ffc37e6509" translate="yes" xml:space="preserve">
          <source>In the above example we circumvent the last rule by adding a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fce397b35eb53fa7404ef938c55c61d0545cc0b" translate="yes" xml:space="preserve">
          <source>In the above example, a modal &lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog&lt;/a&gt; is created using a static function. The dialog initially displays the contents of the &quot;/home/jana&quot; directory, and displays files matching the patterns given in the string &quot;Image Files (*.png *.jpg *.bmp)&quot;. The parent of the file dialog is set to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78b1d34265001ff2f332358ede088f23c5d6826" translate="yes" xml:space="preserve">
          <source>In the above example, a modal file dialog is created and shown. If the user clicked OK, the file they selected is put in &lt;code&gt;fileName&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7389b1f6fcb0075b550d83cc787a3c13c282650e" translate="yes" xml:space="preserve">
          <source>In the above example, only the intermediate binding will be re-evaluated each time, resulting in a significant performance increase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8fae03a2b0cb2191c66f647b2733f1def1468b" translate="yes" xml:space="preserve">
          <source>In the above example, the &lt;a href=&quot;qml-qtquick-text&quot;&gt;Text&lt;/a&gt; object will have normal opacity, since the line opacity: 0.5 has been turned into a comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fd98790deaa5f699734de43a63c6fbe8293d1d" translate="yes" xml:space="preserve">
          <source>In the above example, the associated NOTIFY signal for the &lt;code&gt;author&lt;/code&gt; property is &lt;code&gt;authorChanged&lt;/code&gt;, as specified in the &lt;a href=&quot;qobject#Q_PROPERTY&quot;&gt;Q_PROPERTY&lt;/a&gt;() macro call. This means that whenever the signal is emitted &amp;mdash; as it is when the author changes in Message::setAuthor() &amp;mdash; this notifies the QML engine that any bindings involving the &lt;code&gt;author&lt;/code&gt; property must be updated, and in turn, the engine will update the &lt;code&gt;text&lt;/code&gt; property by calling &lt;code&gt;Message::author()&lt;/code&gt; again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52035459085e014010da31cbbf38d8144f6c306d" translate="yes" xml:space="preserve">
          <source>In the above example, the filter is set to &lt;code&gt;&quot;Images (*.png *.xpm *.jpg)&quot;&lt;/code&gt;, this means that only files with the extension &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;xpm&lt;/code&gt;, or &lt;code&gt;jpg&lt;/code&gt; will be shown in the &lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog&lt;/a&gt;. You can apply several filters by using &lt;a href=&quot;qfiledialog#setNameFilters&quot;&gt;setNameFilters&lt;/a&gt;(). Use &lt;a href=&quot;qfiledialog#selectNameFilter&quot;&gt;selectNameFilter&lt;/a&gt;() to select one of the filters you've given as the file dialog's default filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd88730ef838fc8d07abd4cb0faf90585717feb" translate="yes" xml:space="preserve">
          <source>In the above example, the input method allocates the word candidate list for its use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7955e5c64c92ff547f3d25a340bd97077f23556" translate="yes" xml:space="preserve">
          <source>In the above example, the key size is inherited from parent elements in this order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1bec79b26271f29bc1213cc9adbd94afa09587" translate="yes" xml:space="preserve">
          <source>In the above example, the mode of the file dialog is set to &lt;a href=&quot;qfiledialog#FileMode-enum&quot;&gt;AnyFile&lt;/a&gt;, meaning that the user can select any file, or even specify a file that doesn't exist. This mode is useful for creating a &quot;Save As&quot; file dialog. Use &lt;a href=&quot;qfiledialog#FileMode-enum&quot;&gt;ExistingFile&lt;/a&gt; if the user must select an existing file, or &lt;a href=&quot;qfiledialog#FileMode-enum&quot;&gt;Directory&lt;/a&gt; if only a directory may be selected. See the &lt;a href=&quot;qfiledialog#FileMode-enum&quot;&gt;QFileDialog::FileMode&lt;/a&gt; enum for the complete list of modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2caab0c0536df310b455d81063c38cd4bc01e" translate="yes" xml:space="preserve">
          <source>In the above example, the red rectangle has a high z value, but is still stacked below the blue rectangle. This is because it is a child of the green rectangle, and the green rectangle is a sibling of the blue rectangle. The z value of the green rectangle is lower than that of the blue rectangle, so the green rectangle and all children will be stacked beneath the blue rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8440511dfdd68e429a1da7d100d7f5e5fd084b5e" translate="yes" xml:space="preserve">
          <source>In the above example, we neglected to mention how to handle selections of items. This subject is covered in more detail in the section about &lt;a href=&quot;#handling-selections-in-item-views&quot;&gt;Handling Selections in Item Views&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c6c3c91133829773409779fa43cb0deacc4aa9" translate="yes" xml:space="preserve">
          <source>In the above examples, the &lt;code&gt;Console&lt;/code&gt; edition only includes the contents of four modules. Only the classes from these modules will be used when the &lt;a href=&quot;12-0-qdoc-commands-miscellaneous#generatelist-command&quot;&gt;generatelist&lt;/a&gt; command is used to generate a list of classes for this edition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1b26c8502de9e92ebe525817b41cfcc7fb9699" translate="yes" xml:space="preserve">
          <source>In the above line, &lt;code&gt;USE_MY_STUFF&lt;/code&gt; will only be added to the list of pre-processor defines if it is not already defined. Note that the &lt;a href=&quot;qmake-function-reference#unique&quot;&gt;unique()&lt;/a&gt; function can also be used to ensure that a variable only contains one instance of each value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b2f7e3a7379d60e71e8a0ad9b4ca0f4baf86d9" translate="yes" xml:space="preserve">
          <source>In the above line, any values in the list that start with &lt;code&gt;QT_D&lt;/code&gt; or &lt;code&gt;QT_T&lt;/code&gt; are replaced with &lt;code&gt;QT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e32dff5085b20cc64db7542e7c40356df3d9db" translate="yes" xml:space="preserve">
          <source>In the above lines, qmake knows what needs to be copied, and will handle the installation process automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d1c4d14308bc4fdef8eec5b71409fc3d9adc9e" translate="yes" xml:space="preserve">
          <source>In the above sample the sound effect will be played when the &lt;a href=&quot;qml-qtquick-mousearea&quot;&gt;MouseArea&lt;/a&gt; is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08573c6b11eb5aa9f9479849a235a368e8127e62" translate="yes" xml:space="preserve">
          <source>In the above sample when the parent of &lt;a href=&quot;qml-qtquick-mousearea&quot;&gt;MouseArea&lt;/a&gt; is clicked, an area of 800x600 pixels with an id of 'video', the source &quot;video.avi&quot; will play in that area. Notice also that signals for the &lt;a href=&quot;qml-qtquick-keys&quot;&gt;Keys&lt;/a&gt; have been defined so that a spacebar will toggle the pause button; the left arrow will move the current position in the video to 5 seconds previously; and the right arrow will advance the current position in the video by 5 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d447248144f69b8bf3f953183e709a74a32b386f" translate="yes" xml:space="preserve">
          <source>In the above situations, it is still possible to design forms with the aim of using custom widgets in the application. To achieve this, we can use the widget promotion feature of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3331e798ca3ace3a215a35ec6c8dcd768c49a723" translate="yes" xml:space="preserve">
          <source>In the above snippet the cursor will still become visible when the &lt;a href=&quot;qml-qtquick-textinput&quot;&gt;TextInput&lt;/a&gt; gains active focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778d5c49efcd63b405579dd6f8e7514a08305900" translate="yes" xml:space="preserve">
          <source>In the above snippet, &lt;a href=&quot;qmetaobject#property&quot;&gt;QMetaObject::property&lt;/a&gt;() is used to get &lt;a href=&quot;qmetaproperty&quot;&gt;metadata&lt;/a&gt; about each property defined in some unknown class. The property name is fetched from the metadata and passed to &lt;a href=&quot;qobject#property&quot;&gt;QObject::property&lt;/a&gt;() to get the &lt;a href=&quot;qvariant&quot;&gt;value&lt;/a&gt; of the property in the current &lt;a href=&quot;qobject&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12ff91a301a5754bfc26c58b618a6895b33b177" translate="yes" xml:space="preserve">
          <source>In the above style rule, &lt;code&gt;QPushButton&lt;/code&gt; is the selector and &lt;code&gt;{ color: red }&lt;/code&gt; is the declaration. The rule specifies that &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt; and its subclasses (e.g., &lt;code&gt;MyPushButton&lt;/code&gt;) should use red as their foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5491dea569a48c821c5d3cc5fa871d9841d9b0b" translate="yes" xml:space="preserve">
          <source>In the active state as soon as camera is started the viewfinder displays video frames and the camera is ready for capture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4105802f7fa87d449178ae4278075b284b6abb9b" translate="yes" xml:space="preserve">
          <source>In the active state the viewfinder frames are available and the camera is ready for capture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe43ce054c52dd0645bc2d81f31513eb5520e68" translate="yes" xml:space="preserve">
          <source>In the animation below, the first checkbox is tri-state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06074144e41dec3d566205f517c989ed933d003" translate="yes" xml:space="preserve">
          <source>In the animation below, the first checkdelegate is tri-state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce44d5844cf9c7d884181be6345d42674e7ab6a" translate="yes" xml:space="preserve">
          <source>In the application's &lt;a href=&quot;qml-qtquick-virtualkeyboard-inputpanel&quot;&gt;InputPanel&lt;/a&gt;, add the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11529092a568d2ebed4559cd5b0c3132a36a0dba" translate="yes" xml:space="preserve">
          <source>In the application, resource paths can be used in most places instead of ordinary file system paths. In particular, you can pass a resource path instead of a file name to the &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt;, &lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt;, or &lt;a href=&quot;qpixmap&quot;&gt;QPixmap&lt;/a&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093794bd305ddfae860139dd84bba3a916168ac6" translate="yes" xml:space="preserve">
          <source>In the application, this resource would be registered with code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa9db2337634be8f880cb78c2fffea3cd290535" translate="yes" xml:space="preserve">
          <source>In the base class this is a pure virtual function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5103749357b6394f7985e837d39c213852f1028" translate="yes" xml:space="preserve">
          <source>In the branch delegate you have access to the following special properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52854a801e231867b5e93209f75904f0423e5d7b" translate="yes" xml:space="preserve">
          <source>In the case of &lt;b&gt;Tab&lt;/b&gt;, &lt;b&gt;Backtab&lt;/b&gt;, &lt;b&gt;Enter&lt;/b&gt; and &lt;b&gt;Return&lt;/b&gt; key press events, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0780880e8284aeee383317793fd94a1ca17307f9" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;fn:doc()&lt;/code&gt;, the absolute URI is the base URI in the static context (which most likely is the location of the query). Rather than use the URI the user specified, the return value of &lt;a href=&quot;qabstracturiresolver#resolve&quot;&gt;QAbstractUriResolver::resolve&lt;/a&gt;() will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476df6664814d3170809cfc84a7a9d225a742f8a" translate="yes" xml:space="preserve">
          <source>In the case of a checkable &lt;a href=&quot;qgroupbox&quot;&gt;QGroupBox&lt;/a&gt;, the title includes the check indicator. The indicator is styled using the &lt;a href=&quot;#indicator-sub&quot;&gt;::indicator&lt;/a&gt; subcontrol. The &lt;a href=&quot;#spacing-prop&quot;&gt;spacing&lt;/a&gt; property can be used to control the spacing between the text and indicator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c841a239b1f23504d92454f01a42039f4003cb72" translate="yes" xml:space="preserve">
          <source>In the case of an error, a &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtscript-index.html&quot;&gt;Qt Script&lt;/a&gt; Error object is thrown. This object has an additional property, &lt;code&gt;qmlErrors&lt;/code&gt;, which is an array of the errors encountered. Each object in this array has the members &lt;code&gt;lineNumber&lt;/code&gt;, &lt;code&gt;columnNumber&lt;/code&gt;, &lt;code&gt;fileName&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;. For example, if the above snippet had misspelled color as 'colro' then the array would contain an object like the following: { &quot;lineNumber&quot; : 1, &quot;columnNumber&quot; : 32, &quot;fileName&quot; : &quot;dynamicSnippet1&quot;, &quot;message&quot; : &quot;Cannot assign to non-existent property &quot;colro&quot;&quot;}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0824274244abdbd52bff471c964c47cedfe5858d" translate="yes" xml:space="preserve">
          <source>In the case of comparing floats and doubles, &lt;a href=&quot;#qFuzzyCompare&quot;&gt;qFuzzyCompare&lt;/a&gt;() is used for comparing. This means that comparing to 0 will likely fail. One solution to this is to compare to 1, and add 1 to the produced output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc6b3262f626e98377a151d42e98ada92bdb9aa" translate="yes" xml:space="preserve">
          <source>In the case of queries of type &lt;a href=&quot;qnetworkproxyquery#QueryType-enum&quot;&gt;QNetworkProxyQuery::UrlRequest&lt;/a&gt;, this function returns the value of the scheme component of the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180620aebe5082c9a9db3b49a73f0451d604fbee" translate="yes" xml:space="preserve">
          <source>In the case of the default OpenGL adaptation the context of this window will be bound when this function is called. The only exception is if the native OpenGL has been destroyed outside Qt's control, for instance through EGL_CONTEXT_LOST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302b4a1de7fc10868e07089fb5eb6a54d9241902" translate="yes" xml:space="preserve">
          <source>In the case the string corresponds to a valid file path on the system, a file:// URL is constructed, using &lt;a href=&quot;qurl#fromLocalFile&quot;&gt;QUrl::fromLocalFile&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8917b869fce1b4f2373fc587ff1159fcd5aaaf0" translate="yes" xml:space="preserve">
          <source>In the case where a file contains multiple animations, it is possible to select which animation should be loaded by way of query parameters on the source url. The accepted query parameters are animationIndex and animationName. If both are specified, animationName is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9970ca9194b59467b4465baf132eacc1ea8cd7a7" translate="yes" xml:space="preserve">
          <source>In the case where an icon can only possibly have one image URL, the parameter key of &lt;code&gt;&quot;singleUrl&quot;&lt;/code&gt; can be used with a &lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt; value. Any Icon with this parameter will always return the specified URL regardless of the requested icon size and not defer to any Plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dafd1675255377501babc739c62dd031c0b87c" translate="yes" xml:space="preserve">
          <source>In the class constructor you add the interfaces to your custom widgets to the list which you return in the &lt;a href=&quot;qdesignercustomwidgetcollectioninterface#customWidgets&quot;&gt;customWidgets&lt;/a&gt;() function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f985c4af31f9b16cab55135f47c6d6e919b4114" translate="yes" xml:space="preserve">
          <source>In the clipboard model, the user can</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbba5f50ddea3356e28a3b0772fb4d3dfe4616af" translate="yes" xml:space="preserve">
          <source>In the code snippets so far, we used the unary &lt;code&gt;*&lt;/code&gt; operator to retrieve the item (of type &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;) stored at a certain iterator position, and we then called &lt;a href=&quot;qstring#toLower&quot;&gt;QString::toLower&lt;/a&gt;() on it. Most C++ compilers also allow us to write &lt;code&gt;i-&amp;gt;toLower()&lt;/code&gt;, but some don't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124e39d73adbb34143a94895eae6f328439ba3eb" translate="yes" xml:space="preserve">
          <source>In the common case of interleaved linear PCM data, the codec will be &quot;audio/pcm&quot;, and the samples for all channels will be interleaved. One sample for each channel for the same instant in time is referred to as a frame in Qt Multimedia (and other places).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4d1bdb49c84c11153ae631579c2138e30d7956" translate="yes" xml:space="preserve">
          <source>In the common case of simply using a &lt;a href=&quot;qimage&quot;&gt;QImage&lt;/a&gt; as the source of texture pixel data most of the above steps are performed automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da8e3805b741a984ea93a66a1272a507e49e1ef" translate="yes" xml:space="preserve">
          <source>In the common case, it is useful to call the &lt;a href=&quot;qtglobal#qDebugx&quot;&gt;qDebug&lt;/a&gt;() function to obtain a default &lt;a href=&quot;qdebug&quot;&gt;QDebug&lt;/a&gt; object to use for writing debugging information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17c300f21b0e795728fffc213f58fce115ab850" translate="yes" xml:space="preserve">
          <source>In the cookies are equal, the client is considered to be real, and the server can continue with a TLS handshake procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b036303f55d614ffcf9a344777119a33d88c19ae" translate="yes" xml:space="preserve">
          <source>In the course of this section, we will look at the style elements, the style options, and the functions of &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt;. Finally, we describe how the palette is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9da98054ac779e0d109342bf29b26e8998dac9" translate="yes" xml:space="preserve">
          <source>In the current implementation the Qt XML classes follow the definition that the prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2e7cc57f6d075df2486f0ea3fdf26afb4ee0e3" translate="yes" xml:space="preserve">
          <source>In the default &lt;a href=&quot;qpagelayout#Mode-enum&quot;&gt;StandardMode&lt;/a&gt; the current margins and minimum margins are always taken into account. The paintable rectangle is the full page rectangle less the current margins, and the current margins can only be set to values between the minimum margins and the maximum margins allowed by the full page size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af4f12a2438da5389e981b2a43981e2330d13c2" translate="yes" xml:space="preserve">
          <source>In the default implementation, supportsGeocoding() and supportsReverseGeocoding() returns false while &lt;a href=&quot;qgeocodingmanagerengine#geocode&quot;&gt;geocode&lt;/a&gt;() and &lt;a href=&quot;qgeocodingmanagerengine#reverseGeocode&quot;&gt;reverseGeocode&lt;/a&gt;() cause &lt;a href=&quot;qgeocodereply#Error-enum&quot;&gt;QGeoCodeReply::UnsupportedOptionError&lt;/a&gt; to occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd8170ef8a59ecadee40ae365f975fcf7870a37" translate="yes" xml:space="preserve">
          <source>In the default implementation, supportsRouteUpdates() returns false and &lt;a href=&quot;qgeoroutingmanagerengine#updateRoute&quot;&gt;updateRoute&lt;/a&gt;() returns a &lt;a href=&quot;qgeoroutereply&quot;&gt;QGeoRouteReply&lt;/a&gt; object containing a &lt;a href=&quot;qgeoroutereply#Error-enum&quot;&gt;QGeoRouteReply::UnsupportedOptionError&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b97b88d857abd592cc5a47911673c45f447de45" translate="yes" xml:space="preserve">
          <source>In the default implementation, the search is reset if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0478285b5fc700b8ba538808a471d5f384467f73" translate="yes" xml:space="preserve">
          <source>In the default implementation, the text either contains a percentage value that indicates the progress so far, or it is blank because the progress bar is in the reset state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6798e6ffde70f7209f8a6967c59bde077018721" translate="yes" xml:space="preserve">
          <source>In the default mode, &lt;a href=&quot;qsensor#AxesOrientationMode-enum&quot;&gt;QSensor::FixedOrientation&lt;/a&gt;, the reading values remain unaffected by the orientation. In the &lt;a href=&quot;qsensor#AxesOrientationMode-enum&quot;&gt;QSensor::AutomaticOrientation&lt;/a&gt; mode, the reading values are automatically rotated by taking the current screen orientation into account. And finally, in the &lt;a href=&quot;qsensor#AxesOrientationMode-enum&quot;&gt;QSensor::UserOrientation&lt;/a&gt; mode, the reading values are rotated according to a user-specified orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6929bbae910ceee52ca84922a13b3920781577" translate="yes" xml:space="preserve">
          <source>In the delegate you have access to the following special properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2534f4f89a188c5999ea508d895176982cc0b73" translate="yes" xml:space="preserve">
          <source>In the dialog's constructor we set up the widgets as before, and connect the &lt;b&gt;Cancel&lt;/b&gt; button's &lt;a href=&quot;qabstractbutton#clicked&quot;&gt;clicked()&lt;/a&gt; signal to the dialog's reject() slot. We also disable the &lt;a href=&quot;qpushbutton#autoDefault-prop&quot;&gt;autoDefault&lt;/a&gt; property in both buttons to ensure that the dialog does not interfere with the way that the line edit handles return key events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08bf3c71618a2603cedc205b0af171f24a51a82b" translate="yes" xml:space="preserve">
          <source>In the end we must remember to make &lt;code&gt;main()&lt;/code&gt; pass the control to Qt. &lt;a href=&quot;qcoreapplication#exec&quot;&gt;QCoreApplication::exec&lt;/a&gt;() will return when the application exits...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58420c6de2ba679e27caab480527f70881be2502" translate="yes" xml:space="preserve">
          <source>In the event that you are running a local loop which calls this function continuously, without an event loop, the &lt;a href=&quot;qevent#Type-enum&quot;&gt;DeferredDelete&lt;/a&gt; events will not be processed. This can affect the behaviour of widgets, e.g. &lt;a href=&quot;qtooltip&quot;&gt;QToolTip&lt;/a&gt;, that rely on &lt;a href=&quot;qevent#Type-enum&quot;&gt;DeferredDelete&lt;/a&gt; events to function properly. An alternative would be to call &lt;a href=&quot;qcoreapplication#sendPostedEvents&quot;&gt;sendPostedEvents()&lt;/a&gt; from within that local loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cdfe261c710f3bc0661c21f511997cedee110e" translate="yes" xml:space="preserve">
          <source>In the example &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; above, the second and third steps are both axis steps. Both apply the &lt;code&gt;element(name)&lt;/code&gt; node test to nodes encountered while traversing along some axis. But in this example, the two axis steps are written in a &lt;a href=&quot;#shorthand-form&quot;&gt;shorthand form&lt;/a&gt;, where the axis specifier and the node test are not written explicitly but are implied. XQueries are normally written in this shorthand form, but they can also be written in the longhand form. If we rewrite the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; in the longhand form, it looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1540e0ba5a23ab6ecdac5ae38326c96fae2b3570" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt; will preallocate 1024 elements on the stack and use them unless &lt;code&gt;n + 1&lt;/code&gt; is greater than 1024. If you omit the second template argument, &lt;a href=&quot;qvarlengtharray&quot;&gt;QVarLengthArray&lt;/a&gt;'s default of 256 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba7caa3cf341198fe242e78d0bd2c61020d4ba4" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;b&gt;Alt+U&lt;/b&gt; moves the keyboard focus to the group box. See the &lt;a href=&quot;qshortcut#mnemonic&quot;&gt;QShortcut&lt;/a&gt; documentation for details (to display an actual ampersand, use '&amp;amp;&amp;amp;').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a29e3743977f058b9b27432244e6b5e6ae14312" translate="yes" xml:space="preserve">
          <source>In the example above, an expected fail will be written into the test output if the variable &lt;code&gt;i&lt;/code&gt; is not 42. If the variable &lt;code&gt;i&lt;/code&gt; is 42, an unexpected pass is written instead. The QEXPECT_FAIL() has no influence on the second &lt;a href=&quot;qtest#QCOMPARE&quot;&gt;QCOMPARE&lt;/a&gt;() statement in the example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec77cc8baea6451f3b9f84d6cf09cc3bcc9f4dce" translate="yes" xml:space="preserve">
          <source>In the example above, the template specialization for the clone() function calls the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9bdbb3a3c66b35fb808b0997f8cc411d66fe9d" translate="yes" xml:space="preserve">
          <source>In the example above, we first set the current block state to 0. Then, if the previous block ended within a comment, we highlight from the beginning of the current block (&lt;code&gt;startIndex = 0&lt;/code&gt;). Otherwise, we search for the given start expression. If the specified end expression cannot be found in the text block, we change the current block state by calling &lt;a href=&quot;qsyntaxhighlighter#setCurrentBlockState&quot;&gt;setCurrentBlockState&lt;/a&gt;(), and make sure that the rest of the block is highlighted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d55174bb91d92336e0eb3339b393cc4ebbfbb0" translate="yes" xml:space="preserve">
          <source>In the example above, we set a context property on the root context to expose the C++ object to QML. This means that the property is available to every component loaded by the engine. Context properties are useful for objects that must be available as soon as the QML is loaded and cannot be instantiated in QML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97c3d6b593559336f77d8a689881d7bab00fc1a" translate="yes" xml:space="preserve">
          <source>In the example above, we've relied on Qt's global &lt;a href=&quot;qhash#qhash&quot;&gt;qHash&lt;/a&gt;(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;, uint) to give us a hash value for the employee's name, and XOR'ed this with the day they were born to help produce unique hashes for people with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc7adeac1b277e34300fd5d178489f2de0df0e3" translate="yes" xml:space="preserve">
          <source>In the example below, custom &lt;a href=&quot;qml-qtquick-controls2-rangeslider#from-prop&quot;&gt;from&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-controls2-rangeslider#to-prop&quot;&gt;to&lt;/a&gt; values are set, and the initial positions of the &lt;a href=&quot;qml-qtquick-controls2-rangeslider#first-prop&quot;&gt;first&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-controls2-rangeslider#second-prop&quot;&gt;second&lt;/a&gt; handles are set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901772f1ce46e7dc0d3342b5491786e828a59716" translate="yes" xml:space="preserve">
          <source>In the example below, custom &lt;a href=&quot;qml-qtquick-controls2-slider#from-prop&quot;&gt;from&lt;/a&gt;, &lt;a href=&quot;qml-qtquick-controls2-slider#value-prop&quot;&gt;value&lt;/a&gt;, and &lt;a href=&quot;qml-qtquick-controls2-slider#to-prop&quot;&gt;to&lt;/a&gt; values are set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5739a38d2823101c1d59a80724de1929c397f87" translate="yes" xml:space="preserve">
          <source>In the example below, we decrease the height of the tickmarks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de9861b09f5f9e5be6874d4c2a2189a0b482e52" translate="yes" xml:space="preserve">
          <source>In the example below, we decrease the width of the minor tickmarks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090d1a166df46385d8f217eaa03d77850b67b346" translate="yes" xml:space="preserve">
          <source>In the example output, several values have been set using default values obtained from the QDoc configuration file. See &lt;a href=&quot;21-3-qt-dita-xml-output#&quot;&gt;Generating DITA XML Output&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6c383bdd9c7199a5ac185ee9a8e4187a4a3dca" translate="yes" xml:space="preserve">
          <source>In the example shown above, two views of the same type were used to display the same model's data. However, if two different types of view were used, the selected items may be represented very differently in each view; for example, a contiguous selection in a table view can be represented as a fragmented set of highlighted items in a tree view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4c74b90ed7327c871e7c9db2b832ce09857c20" translate="yes" xml:space="preserve">
          <source>In the example, for the US we would leave the translation of &quot;AMPM&quot; as it is and thereby use the 12-hour clock branch; but in Europe we would translate it as something else to make the code use the 24-hour clock branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2082b270ec671febf3797e8598da895ab18ed2d9" translate="yes" xml:space="preserve">
          <source>In the example, qdoc didn't need a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ac981619b2e22ed5047ee2df0edf2a33aff18b" translate="yes" xml:space="preserve">
          <source>In the example, the enumeration type that is the property type is declared in MyClass and registered with the &lt;a href=&quot;metaobjects#&quot;&gt;Meta-Object System&lt;/a&gt; using the &lt;a href=&quot;qobject#Q_ENUM&quot;&gt;Q_ENUM&lt;/a&gt;() macro. This makes the enumeration values available as strings for use as in the call to &lt;a href=&quot;qobject#setProperty&quot;&gt;setProperty()&lt;/a&gt;. Had the enumeration type been declared in another class, its fully qualified name (i.e., OtherClass::Priority) would be required, and that other class would also have to inherit &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; and register the enumeration type there using the &lt;a href=&quot;qobject#Q_ENUM&quot;&gt;Q_ENUM&lt;/a&gt;() macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871e54560c81446ae41e8e37228eeb0158495db1" translate="yes" xml:space="preserve">
          <source>In the example, we start by comparing the employees' names. If they're equal, we compare their dates of birth to break the tie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2439ff4140aeb1647e04fd550853ab6492c67be3" translate="yes" xml:space="preserve">
          <source>In the first line in snippet above, a file URL is constructed from a local, relative path. A file URL with a relative path only makes sense if there is a base URL to resolve it against. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee8fb560994f8b7d0e722e67bce2dd4772d32aa" translate="yes" xml:space="preserve">
          <source>In the following animation, three &lt;a href=&quot;qml-qtquick-controls2-label&quot;&gt;Label&lt;/a&gt; controls are pushed onto a stack view with the &lt;a href=&quot;qml-qtquick-controls2-stackview#push-method&quot;&gt;push()&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96e261c4933f8bc1a17cd985490c34b14f89ec1" translate="yes" xml:space="preserve">
          <source>In the following animation, we &lt;a href=&quot;qml-qtquick-controls2-stackview#replace-method&quot;&gt;replace&lt;/a&gt; the topmost item with &lt;code&gt;D&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111f6d9c712f2c81a8b4aeeaa01bfbe30557a196" translate="yes" xml:space="preserve">
          <source>In the following animation, we unwind the stack to the first item by calling &lt;code&gt;pop(null)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa72b336529fd5b4a41073264aba34f6f0d897b" translate="yes" xml:space="preserve">
          <source>In the following code snippet, the &lt;code&gt;not front&lt;/code&gt; text is an id to differentiate this &quot;Back&quot; text from the backstepping &quot;Back&quot; text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b757eb68596d90025f293b4adcdf944d51a2a5c5" translate="yes" xml:space="preserve">
          <source>In the following code snippet, the text on the &lt;code&gt;//:&lt;/code&gt; line is the main comment for the translator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04c01f4e036fa31cb18e1431e24927d2351e913" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we create two &lt;code&gt;Counter&lt;/code&gt; objects and connect the first object's &lt;code&gt;valueChanged()&lt;/code&gt; signal to the second object's &lt;code&gt;setValue()&lt;/code&gt; slot using &lt;a href=&quot;qobject#connect&quot;&gt;QObject::connect&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622414a8cf4fe591df097a16a7643cd447aabede" translate="yes" xml:space="preserve">
          <source>In the following code, the text supplied in the event is passed to a &lt;a href=&quot;qtextbrowser&quot;&gt;QTextBrowser&lt;/a&gt; and a &lt;a href=&quot;qcombobox&quot;&gt;QComboBox&lt;/a&gt; is filled with the list of MIME types that are used to describe the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c53712c1afd7973830d6f8bfc31e688b36ad36" translate="yes" xml:space="preserve">
          <source>In the following code, we provide a slot that receives the &lt;a href=&quot;qitemselectionmodel#currentChanged&quot;&gt;currentChanged()&lt;/a&gt; signal, and uses the information provided to update the status bar of a &lt;a href=&quot;qmainwindow&quot;&gt;QMainWindow&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2b035c6b28162fbba78ca6c3317891d2e87bbe" translate="yes" xml:space="preserve">
          <source>In the following code, we provide a slot that receives the &lt;a href=&quot;qitemselectionmodel#selectionChanged&quot;&gt;selectionChanged()&lt;/a&gt; signal, fills in the selected items with a string, and clears the contents of the deselected items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf9cf0e5068f95ce7e06ded2831757552ec865a" translate="yes" xml:space="preserve">
          <source>In the following example a C++ method in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d02ddec645db505d3eeebeeee290af798ebf119" translate="yes" xml:space="preserve">
          <source>In the following example a default &lt;a href=&quot;qml-qtlocation-routequery&quot;&gt;RouteQuery&lt;/a&gt; is declared within &lt;a href=&quot;qml-qtlocation-routemodel&quot;&gt;RouteModel&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f33f02aaa6910c3a74694a37c79f2598ee20b84" translate="yes" xml:space="preserve">
          <source>In the following example the line join style changes automatically based on the value of joinStyleIndex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c5696202e36e70eaaadaa8cd25a2e81bdf9faf" translate="yes" xml:space="preserve">
          <source>In the following example we change the top and bottom anchors of an item using &lt;a href=&quot;qml-qtquick-anchorchanges&quot;&gt;AnchorChanges&lt;/a&gt;, and the top and bottom anchor margins using &lt;a href=&quot;qml-qtquick-propertychanges&quot;&gt;PropertyChanges&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56fa458d5b1f88eb4269cd4d72db1416e61f851" translate="yes" xml:space="preserve">
          <source>In the following example we have a Path made up of three PathLines. Normally, the items of the &lt;a href=&quot;qml-qtquick-pathview&quot;&gt;PathView&lt;/a&gt; would be laid out equally along this path, with an equal number of items per line segment. &lt;a href=&quot;qml-qtquick-pathpercent&quot;&gt;PathPercent&lt;/a&gt; allows us to specify that the first and third lines should each hold 10% of the laid out items, while the second line should hold the remaining 80%.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a885bd6f57711148c7e8669240ed3c5ae6de2749" translate="yes" xml:space="preserve">
          <source>In the following example we match strings containing 'mail' or 'letter' or 'correspondence' but only match whole words i.e. not 'email'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76ca5184fc13ae062befac58afa357bfb179a95" translate="yes" xml:space="preserve">
          <source>In the following example we use &lt;a href=&quot;qml-qtquick-rotationanimation&quot;&gt;RotationAnimation&lt;/a&gt; to animate the rotation between states via the shortest path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c909003b7e0631788266c02806d165f54fcc92" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;a href=&quot;qml-qtquick-controls2-swipedelegate&quot;&gt;SwipeDelegate&lt;/a&gt; is used in a &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt; to allow items to be removed from it by swiping to the left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb2ca750883ba0f209500d0bde04ade441db658" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;comp1&lt;/code&gt; is created within the root context of MyItem.qml, and any objects instantiated from this component will have access to the ids and properties within that context, such as &lt;code&gt;internalSettings.color&lt;/code&gt;. When &lt;code&gt;comp1&lt;/code&gt; is used as a &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt; delegate in another context (as in main.qml below), it will continue to have access to the properties of its creation context (which would otherwise be private to external users).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b697e314fcc8c0c2a77f8d2cea534fbcdd860b" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;input&lt;/code&gt; will be given active focus when &lt;code&gt;scope&lt;/code&gt; gains active focus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c896bb0118fd4b17c3e17913bd0f14d13381d1" translate="yes" xml:space="preserve">
          <source>In the following example, a &lt;a href=&quot;qml-qttest-signalspy&quot;&gt;SignalSpy&lt;/a&gt; is installed to watch the &quot;clicked&quot; signal on a user-defined Button type. When the signal is emitted, the &lt;a href=&quot;qml-qttest-signalspy#count-prop&quot;&gt;count&lt;/a&gt; property on the spy will be increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22378d815a5bf559d36ea737919d7de134256242" translate="yes" xml:space="preserve">
          <source>In the following example, a &lt;a href=&quot;qml-signalspy&quot;&gt;SignalSpy&lt;/a&gt; is installed to watch the &quot;clicked&quot; signal on a user-defined Button type. When the signal is emitted, the &lt;a href=&quot;qml-signalspy#count-prop&quot;&gt;count&lt;/a&gt; property on the spy will be increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd283878d95b8e8b04ed49b21027ac0175cb50a" translate="yes" xml:space="preserve">
          <source>In the following example, a &lt;code&gt;SELECT * FROM&lt;/code&gt; query is executed. Since the order of the columns is not defined, &lt;a href=&quot;qsqlrecord#indexOf&quot;&gt;QSqlRecord::indexOf&lt;/a&gt;() is used to obtain the index of a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c691a15610ea578a567805e044a101f496f9194a" translate="yes" xml:space="preserve">
          <source>In the following example, clicking on the QML object makes the C++ object print a message, and vice-versa. Here is the QML type (in &lt;code&gt;QmlGui.qml&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd38a731aead71ed9be686fff959ae1dfac6c231" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;addConstant()&lt;/code&gt; method will add 13 to the parameter passed just as the programmer would expect irrespective of the value of the QML object's &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59547659499bdcf5cff2c44ed1079fc9831e4602" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;color&lt;/code&gt; property of &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt; depends on the &lt;code&gt;pressed&lt;/code&gt; property of &lt;a href=&quot;qml-qtquick-taphandler&quot;&gt;TapHandler&lt;/a&gt;. This relationship is described using a conditional expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c0f852f3619a0ba059397adca8341bc8b6fac9" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;code&gt;index&lt;/code&gt; context property inserted by the &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt; into &lt;code&gt;delegateComponent&lt;/code&gt;'s context will be inaccessible to Text, as the Loader will use the creation context of &lt;code&gt;myComponent&lt;/code&gt; as the parent context when instantiating it, and &lt;code&gt;index&lt;/code&gt; does not refer to anything within that context chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1a3b0b7aa04aadcdeaef781ce1273789fd1a3c" translate="yes" xml:space="preserve">
          <source>In the following example, the TextSender class emits a &lt;code&gt;textCompleted()&lt;/code&gt; signal which carries a &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; parameter. Here is the class declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3352880eeab52d6c62295880543212828a87c46" translate="yes" xml:space="preserve">
          <source>In the following example, the accent color of the highlighted button is changed to &lt;code&gt;Material.Orange&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d19a444e0e511a3cb9dcaba69cc7663ab9bb2f" translate="yes" xml:space="preserve">
          <source>In the following example, the accent color of the highlighted button is changed to &lt;code&gt;Universal.Orange&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9cd8fd9bd05420727217cf1a0a22388215db8c" translate="yes" xml:space="preserve">
          <source>In the following example, the addition of explicit prevents &lt;code&gt;myItem.width&lt;/code&gt; from being bound to &lt;code&gt;parent.width&lt;/code&gt;. Instead, it is assigned the value of &lt;code&gt;parent.width&lt;/code&gt; at the time of the state change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e5e49a119542cf78e7a0de167b4f79267fd829" translate="yes" xml:space="preserve">
          <source>In the following example, the background color of the button is changed to &lt;code&gt;Material.Teal&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b747eb4cdd1148dbcce2713324d55431bba2e2" translate="yes" xml:space="preserve">
          <source>In the following example, the background color of the pane is changed to &lt;code&gt;Universal.Steel&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77a03410ece85274f6797b0ef16fdc7b0ab5063" translate="yes" xml:space="preserve">
          <source>In the following example, the delegate shows the property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc781dd00dd5a638dbe28a63fadb0fd0a139d73f" translate="yes" xml:space="preserve">
          <source>In the following example, the elevation of the pane is set to &lt;code&gt;6&lt;/code&gt; in order to achieve the look of an &lt;a href=&quot;https://material.google.com/components/cards.html&quot;&gt;elevated card&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc2b9e30678181b82a731599506d1f147727a2c" translate="yes" xml:space="preserve">
          <source>In the following example, the foreground color of the button is set to &lt;code&gt;Material.Pink&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f80fed26df86ccdd2d3e899168b46e040786bc" translate="yes" xml:space="preserve">
          <source>In the following example, the foreground color of the button is set to &lt;code&gt;Universal.Pink&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4989d038344e505731fc2f0e8ab973e6410cb836" translate="yes" xml:space="preserve">
          <source>In the following example, the geometry of each child &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt; is bound to that of the parent &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt;. If the geometry of the parent &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt; were to change, the geometry of each child &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt; would automatically update due to the property bindings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341370626c1f494f2c5d38563983b3c8f0df9d88" translate="yes" xml:space="preserve">
          <source>In the following example, the rectangle will spin indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743d3704b4909878d3c325ebfc5ee54a02e4c5fa" translate="yes" xml:space="preserve">
          <source>In the following example, the theme for both the pane and the button is set to &lt;code&gt;Material.Dark&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3d0c980e6076e4372b5a4c0cbaa2d332daabe0" translate="yes" xml:space="preserve">
          <source>In the following example, the theme for both the pane and the button is set to &lt;code&gt;Universal.Dark&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f707a116dec82eb863cb33247b6dd8baae00de63" translate="yes" xml:space="preserve">
          <source>In the following example, we animate a green rectangle along a bezier path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f158cd8619df9c72bf318794a5b1bc26fa7e5c13" translate="yes" xml:space="preserve">
          <source>In the following example, we append a CBOR Tag 1 (Unix &lt;code&gt;time_t&lt;/code&gt;) and an integer representing the current time to the stream, obtained using the &lt;code&gt;time()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fd9744796d1b104621935a4a6328f618455725" translate="yes" xml:space="preserve">
          <source>In the following example, we append a CBOR Tag 36 (Regular Expression) and a &lt;a href=&quot;qregularexpression&quot;&gt;QRegularExpression&lt;/a&gt;'s pattern to the stream:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01cfb48210852f8dd95e4408d9268565b905118" translate="yes" xml:space="preserve">
          <source>In the following example, we declare a property of the enumeration type &lt;code&gt;Priority&lt;/code&gt; that is also called &lt;code&gt;priority&lt;/code&gt; and has a get function &lt;code&gt;priority()&lt;/code&gt; and a set function &lt;code&gt;setPriority()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4a3a1f331007024f30f7e139ccf549e42fccb1" translate="yes" xml:space="preserve">
          <source>In the following example, we have a block of code which is run often (in this case, it is the contents of an explicit loop; but it could be a commonly-evaluated binding expression, for example) and in it, we resolve the object with the &quot;rect&quot; id and its &quot;color&quot; property multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee21d4a3a60fbc00455c78c23d1b1a49e5e2daa" translate="yes" xml:space="preserve">
          <source>In the following example, we have two small rectangles that follow our touch points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56883a9b4926a32a7dd3884ccc5a7fe11a5dc3fb" translate="yes" xml:space="preserve">
          <source>In the following example, we write the values -1, -2&lt;sup&gt;32&lt;/sup&gt; and INT64_MIN:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f49c2cda8c5197cbdb2d193c5e6de20fce89f5" translate="yes" xml:space="preserve">
          <source>In the following snippet we animate the addition of a right anchor to a &lt;a href=&quot;qml-qtquick-rectangle&quot;&gt;Rectangle&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7be1cf0dcf07a7af9e364bcc18d12513fdfed2c" translate="yes" xml:space="preserve">
          <source>In the following table, the various modes are illustrated with animations. The movement and the &lt;a href=&quot;qml-qtquick-controls2-scrollbar#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; (&lt;code&gt;0.25&lt;/code&gt;) are identical in each animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3fb0d762d56fc045cc53eb59db05be298a4209" translate="yes" xml:space="preserve">
          <source>In the following table, the various modes are illustrated with animations. The movement of the mouse cursor and the &lt;a href=&quot;qml-qtquick-controls2-slider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; (&lt;code&gt;0.2&lt;/code&gt;) are identical in each animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1eef09ea620a7bcaff164ce888f61fc4682e29" translate="yes" xml:space="preserve">
          <source>In the forms settings dialog you can specify the &lt;b&gt;Author&lt;/b&gt; of the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60a0aced65c1ee590fed2890ff810aee3e6d361" translate="yes" xml:space="preserve">
          <source>In the generated HTML, the delimited text is surrounded by a &lt;b&gt;&amp;lt;div class=&quot;LegaleseLeft&quot;&amp;gt;&lt;/b&gt; and &lt;b&gt;&amp;lt;/div&amp;gt;&lt;/b&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8173b8ef4a5f53c2549b7e4febc3ca8abd181b96" translate="yes" xml:space="preserve">
          <source>In the illustration above, Application One's primary screen is screen 0, and App Two's primary screen is screen 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb432b3ba74ad6dc109c6c379bc4fff8bedeee3" translate="yes" xml:space="preserve">
          <source>In the image above, the application's contents are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c211da3ff0af505bb1a04f177de23028d06c25e4" translate="yes" xml:space="preserve">
          <source>In the image below, the Rectangle on the left has transparent borders and has blurred edges, whereas the Rectangle on the right does not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191949eada4e16c66ee51b0e511e500ba2bcfade" translate="yes" xml:space="preserve">
          <source>In the image below, the dashed line represents the button's clickable area, as well as the space that it will take up in a layout. The shadow is marked by the striped area behind it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f648a46e343e549b31e734ea66fd63991f85987c" translate="yes" xml:space="preserve">
          <source>In the image below, there are 3 MapQuickItems that are identical except for the value of their &lt;a href=&quot;qml-qtlocation-mapquickitem#anchorPoint-prop&quot;&gt;anchorPoint&lt;/a&gt; properties. The values of &lt;a href=&quot;qml-qtlocation-mapquickitem#anchorPoint-prop&quot;&gt;anchorPoint&lt;/a&gt; for each are written on top of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082f7f30e8907c70363ecd18171de71be62db1d7" translate="yes" xml:space="preserve">
          <source>In the item delegate you have access to the following special properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb6abe2856b41a5ce3d15e52bcc5ddd2f2d9067" translate="yes" xml:space="preserve">
          <source>In the left-most case, the blue backgrounds can be drawn in one call and the two text elements in another call, as the texts only overlap a background which they are stacked in front of. In the right-most case, the background of &quot;Item 4&quot; overlaps the text of &quot;Item 3&quot; so in this case, each of backgrounds and texts needs to be drawn using separate calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3da8e46d1d8e95626b65e9bb8214b9d517af62" translate="yes" xml:space="preserve">
          <source>In the longer term, the application should be adapted to run unmodified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c6be12ebbbbbce5a427c8b0a320a8136d5c56c" translate="yes" xml:space="preserve">
          <source>In the main function, help should be printed to the standard output if the help option was passed and the application should return the exit code 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1a3459ad641f2f0c92cc0960f241ccfd42b74e" translate="yes" xml:space="preserve">
          <source>In the member function documentation,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77c5dd9303a67ac6d7d5aebb50b969970257a99" translate="yes" xml:space="preserve">
          <source>In the middle of the header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af661d34da446aba519642819b2c4cf4140ea33d" translate="yes" xml:space="preserve">
          <source>In the mode Wildcard, the wildcard characters cannot be escaped. In the mode &lt;a href=&quot;qregexp#PatternSyntax-enum&quot;&gt;WildcardUnix&lt;/a&gt;, the character '\' escapes the wildcard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b69786d48f5ae87bab7e6f1ebdcfe64ffe3ce7" translate="yes" xml:space="preserve">
          <source>In the model/view architecture, the model provides a standard interface that views and delegates use to access data. In Qt, the standard interface is defined by the &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; class. No matter how the items of data are stored in any underlying data structure, all subclasses of &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; represent the data as a hierarchical structure containing tables of items. Views use this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275784bafdfff3eb16930135da34d48478b10553" translate="yes" xml:space="preserve">
          <source>In the model/view architecture, the view obtains items of data from the model and presents them to the user. The way that the data is presented need not resemble the representation of the data provided by the model, and may be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49a54368d26d92ba28f5862b8e174823625e9b2" translate="yes" xml:space="preserve">
          <source>In the model/view framework, items of data supplied by a single model can be shared by any number of views, and each of these can possibly represent the same information in completely different ways. Custom views and delegates are effective ways to provide radically different representations of the same data. However, applications often need to provide conventional views onto processed versions of the same data, such as differently-sorted views onto a list of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1336f1f47c6dbd46a0c5fbd43afadfef23c59a5" translate="yes" xml:space="preserve">
          <source>In the next example we demonstrate how you can append content to an editable combo box by reacting to the &lt;a href=&quot;qml-qtquick-controls-combobox#accepted-signal&quot;&gt;accepted&lt;/a&gt; signal. Note that you have to explicitly prevent duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff6d48c82e62be915aadae1c2c6306b781872ae" translate="yes" xml:space="preserve">
          <source>In the next example, a &lt;a href=&quot;qml-qtquick-focusscope&quot;&gt;FocusScope&lt;/a&gt; type is added to the component, and the visual result shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a84ddb296d495f44770fbc6512d1d10fc13b94a" translate="yes" xml:space="preserve">
          <source>In the next section &lt;b&gt;In-App Purchase Details&lt;/b&gt; you specify the details for at least one language. When the app requests the product details like &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;, they will be provided in the language of their locale if they are available. Create language details for the regions you expect to distribute app in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f41286e6a6c222e5fb44103c0dcb5543cb5b89" translate="yes" xml:space="preserve">
          <source>In the normal case, where animations are not used, this will operate as expected. However, if an animation for the &lt;code&gt;geometry&lt;/code&gt; of &lt;code&gt;button&lt;/code&gt; is set on the transition between &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, the animation will be started when &lt;code&gt;s2&lt;/code&gt; is entered, but the &lt;code&gt;geometry&lt;/code&gt; property will not actually reach its defined value before the animation is finished running. In this case, the message box will pop up before the geometry of the button has actually been set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac99875170e76bb77a35adf7514e7d860053b108" translate="yes" xml:space="preserve">
          <source>In the previous example the Image item will implicitly get scroll behavior as if it was used within a &lt;a href=&quot;qml-qtquick-flickable&quot;&gt;Flickable&lt;/a&gt;. The width and height of the child item will be used to define the size of the content area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772b0f71c73902deebe22dad6acf14257c43a016" translate="yes" xml:space="preserve">
          <source>In the previous example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98f84e7920e2d706fb32da691ff01f1a6ea38e3" translate="yes" xml:space="preserve">
          <source>In the previous example, the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtquick-animation-example.html#propertyanimation&quot;&gt;PropertyAnimation&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-numberanimation&quot;&gt;NumberAnimation&lt;/a&gt; objects needed to specify particular &lt;a href=&quot;qml-qtquick-propertyanimation#target-prop&quot;&gt;target&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-propertyanimation#properties-prop&quot;&gt;properties&lt;/a&gt; values to specify the objects and properties that should be animated. This can be avoided by using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2678a9c929c58e4117992261fd411c31e21f57e1" translate="yes" xml:space="preserve">
          <source>In the previous example, the &lt;code&gt;first&lt;/code&gt; property is bound to an empty expression, whose result is undefined. The &lt;code&gt;second&lt;/code&gt; property is bound to an expression which contains a single, empty expression block (&quot;{}&quot;), which similarly has an undefined result. The &lt;code&gt;third&lt;/code&gt; property is bound to an expression which is evaluated as an empty object declaration, and thus the property will be initialized with that empty object value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ee099e4a752c82bfa9a9a7bedb92d22f069ed1" translate="yes" xml:space="preserve">
          <source>In the previous example, the rectangles &lt;code&gt;r0&lt;/code&gt; and &lt;code&gt;r1&lt;/code&gt; do not have any custom properties, and thus the JavaScript and QML engines consider them both to be of the same type. That is, &lt;code&gt;r0&lt;/code&gt; and &lt;code&gt;r1&lt;/code&gt; are both considered to be of the explicitly defined &lt;code&gt;Rectangle&lt;/code&gt; type. The rectangles &lt;code&gt;r2&lt;/code&gt;, &lt;code&gt;r3&lt;/code&gt; and &lt;code&gt;r4&lt;/code&gt; each have custom properties and are each considered to be of different (implicit) types. Note that &lt;code&gt;r3&lt;/code&gt; and &lt;code&gt;r4&lt;/code&gt; are each considered to be of different types, even though they have identical property information, simply because the custom property was not declared in the component which they are instances of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a5f9e89da640948f69456d909fb4d55bf31b7e" translate="yes" xml:space="preserve">
          <source>In the property editor of Visual Studio we can modify the properties of our controls - &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt; exposes the &lt;code&gt;QWidget&lt;/code&gt; API and has many properties, while QAxWidget2 has only the Visual Studio standard properties in addition to its own property &quot;lineWidth&quot; in the &quot;Miscellaneous&quot; category. The objects are named &quot;axQPushButton1&quot; and &quot;axQAxWidget21&quot;, and since especially the last name is a bit confusing we rename the objects to &quot;resetButton&quot; and &quot;circleWidget&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801210748fb4e2e33b01b46d33a3b7b73d92c752" translate="yes" xml:space="preserve">
          <source>In the same manner, &lt;a href=&quot;qml-qtquick-controls2-spinbox&quot;&gt;SpinBox&lt;/a&gt; can be customized to accept floating point numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cfdf9c5fb054c03b6216a6d300c49b3e804f04" translate="yes" xml:space="preserve">
          <source>In the section about &lt;a href=&quot;#wildcards-in-name-tests&quot;&gt;using wildcards in name tests&lt;/a&gt;, we saw three simple example XQueries, each of which selected a different list of XML attributes from the cookbook. We couldn't use &lt;code&gt;xmlpatterns&lt;/code&gt; to run these queries, however, because &lt;code&gt;xmlpatterns&lt;/code&gt; sends the &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; results to a &lt;a href=&quot;qxmlserializer&quot;&gt;serializer&lt;/a&gt;, which expects to serialize the results as well-formed XML. Since a list of XML attributes by itself is not well-formed XML, the serializer reported an error for each &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3375442e852a098b37b733339d4e20adf3b09f02" translate="yes" xml:space="preserve">
          <source>In the simplest case, the target of a drag and drop action receives a copy of the data being dragged, and the source decides whether to delete the original. This is described by the &lt;code&gt;CopyAction&lt;/code&gt; action. The target may also choose to handle other actions, specifically the &lt;code&gt;MoveAction&lt;/code&gt; and &lt;code&gt;LinkAction&lt;/code&gt; actions. If the source calls &lt;a href=&quot;qdrag#exec&quot;&gt;QDrag::exec&lt;/a&gt;(), and it returns &lt;code&gt;MoveAction&lt;/code&gt;, the source is responsible for deleting any original data if it chooses to do so. The &lt;a href=&quot;qmimedata&quot;&gt;QMimeData&lt;/a&gt; and &lt;a href=&quot;qdrag&quot;&gt;QDrag&lt;/a&gt; objects created by the source widget</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9cd544023cebfc582b57171a486c13536f9da2" translate="yes" xml:space="preserve">
          <source>In the snippet below, the Rectangle on the left has transparent borders and has blurred edges, whereas the Rectangle on the right does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b928f56f82db0d1d484f603348dff5be3a155807" translate="yes" xml:space="preserve">
          <source>In the snippet below, the search model has been assigned to the &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt;'s &lt;a href=&quot;qml-qtquick-listview#model-prop&quot;&gt;model&lt;/a&gt; property. When the model is updated with new results, the &lt;a href=&quot;qml-qtquick-listview&quot;&gt;ListView&lt;/a&gt; is automatically updated to reflect the model's new data items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fd8a43e0a0a576fc00481b0e03bef2707b6cc0" translate="yes" xml:space="preserve">
          <source>In the snippet we see that the [QML]{&lt;a href=&quot;qml-qtlocation-geocodemodel&quot;&gt;GeocodeModel&lt;/a&gt;} contains the plugin and two signal handlers. One for changes in status &lt;a href=&quot;qml-qtlocation-geocodemodel#status-prop&quot;&gt;&lt;code&gt;onStatusChanged&lt;/code&gt;&lt;/a&gt; and the other to update the centering of the Map object &lt;a href=&quot;qml-qtlocation-geocodemodel#locationsChanged-signal&quot;&gt;&lt;code&gt;onLocationsChanged&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989abc71adb9a757a2b4a71aa1947dc82bb1a16f" translate="yes" xml:space="preserve">
          <source>In the special case where an Affector has no possible effect (e.g. Affector {}), this signal will be emitted for all particles being considered if you connect to it. This allows you to execute arbitrary code in response to particles (use the Affector::onAffectParticles signal handler if you want to execute code which affects the particles themselves). As this executes JavaScript code per particle, it is not recommended to use this signal with a high-volume particle system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66ae85ea2294c0c19f4823ddc222eaff12c166a" translate="yes" xml:space="preserve">
          <source>In the specified directories, QDoc will only read the files with the &lt;code&gt;fileextensions&lt;/code&gt; specified in the &lt;a href=&quot;#headers-fileextensions&quot;&gt;&lt;code&gt;headers.fileextensions&lt;/code&gt;&lt;/a&gt; variable. The default extensions are *.ch, *.h, *.h++, *.hh, *.hpp, and *.hxx&quot;. The files specified by &lt;a href=&quot;#headers&quot;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; will be read without taking into account their fileextensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1d82693b5802f23c8c35ee835e2826f2e77081" translate="yes" xml:space="preserve">
          <source>In the specified directories, QDoc will only read the files with the &lt;code&gt;fileextensions&lt;/code&gt; specified in the &lt;a href=&quot;#sources-fileextensions&quot;&gt;&lt;code&gt;sources.fileextensions&lt;/code&gt;&lt;/a&gt; variable. The default extensions are *.c++, *.cc, *.cpp and *.cxx. The files specified by &lt;a href=&quot;#sources&quot;&gt;&lt;code&gt;sources&lt;/code&gt;&lt;/a&gt; will be read independent of their fileextensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb199f938c6665059b05a219c1f50caa25100d21" translate="yes" xml:space="preserve">
          <source>In the style structure tree, we also include &lt;a href=&quot;qmenu&quot;&gt;QMenu&lt;/a&gt; as it also does styling related work. The bounding rectangles of menu items are calculated for the menu's size hint and when the menu is displayed or resized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e458fb9d3f3f7da311ceeabb2595a4265cb5e04" translate="yes" xml:space="preserve">
          <source>In the table above, &lt;code&gt;&amp;lt;APPNAME&amp;gt;&lt;/code&gt; is usually the organization name, the application name, or both, or a unique name generated at packaging. Similarly, &amp;lt;APPROOT&amp;gt; is the location where this application is installed (often a sandbox). &amp;lt;APPDIR&amp;gt; is the directory containing the application executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5f7ca52e42eebde54614781228fa2e1a26817d" translate="yes" xml:space="preserve">
          <source>In the table, &quot;Amort.&quot; stands for &quot;amortized behavior&quot;. For example, &quot;Amort. O(1)&quot; means that if you call the function only once, you might get O(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40fb8aac34cbe6100c7335e6381c93eebb9d63a" translate="yes" xml:space="preserve">
          <source>In the world of &lt;a href=&quot;qtquick-index&quot;&gt;QML&lt;/a&gt;, there are additional entities we need to document such as QML signals, attached properties, and QML methods. Internally, they use Qt technologies, however, QML API documentation requires different layout and naming conventions from the Qt C++ API documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa8717ef358ec50a15dea47b01dc1443cd08e34" translate="yes" xml:space="preserve">
          <source>In theory this would allow running your application on every single macOS version released, but for practical (and technical) reasons there is a lower limit to this range, known as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255207de917da7fa96bb3e4dfe04909f6d3feaad" translate="yes" xml:space="preserve">
          <source>In these examples, the comments will be associated with the strings passed to tr() in the context of each call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859a3deb5ba0f625fda298b3e50025df3ff51021" translate="yes" xml:space="preserve">
          <source>In this approach, we subclass a Qt widget and set up the user interface from within the constructor. Components used in this way expose the widgets and layouts used in the form to the Qt widget subclass, and provide a standard system for making signal and slot connections between the user interface and other objects in your application. The generated &lt;code&gt;Ui::CalculatorForm&lt;/code&gt; structure is a member of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362c94c7e88772e9d32d521fb79b74f48ba4533c" translate="yes" xml:space="preserve">
          <source>In this case the -D option ensures that the &lt;code&gt;consoleedition&lt;/code&gt; preprocessor symbol is defined when QDoc processes the source files defined in the qtgui.qdocconf file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbc7ebb89b91db904e7a322a6d918545a6d30a2" translate="yes" xml:space="preserve">
          <source>In this case the content size of the &lt;a href=&quot;qml-qtquick-controls-scrollview&quot;&gt;ScrollView&lt;/a&gt; will simply mirror that of its contained &lt;a href=&quot;qml-qtquick-controls-scrollview#flickableItem-prop&quot;&gt;flickableItem&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fdfbf35158389fca9671272bd410b6866e806d" translate="yes" xml:space="preserve">
          <source>In this case the events will occur in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c2a3e1849c296af6d0417f143fe71be3f75d05" translate="yes" xml:space="preserve">
          <source>In this case we chose &lt;code&gt;8&lt;/code&gt; pixel margins, so we set the &lt;code&gt;implicitWidth&lt;/code&gt; of the tickmarks to that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96e23997fff4df9e9731671989278a1f195855e" translate="yes" xml:space="preserve">
          <source>In this case we want the application to quit when the state machine is finished, so the machine's</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b975488490d31b42113087f62327369de204d0" translate="yes" xml:space="preserve">
          <source>In this case we want the application to quit when the state machine is finished, so the machine's &lt;a href=&quot;qstate#finished&quot;&gt;finished()&lt;/a&gt; signal is connected to the application's &lt;a href=&quot;qcoreapplication#quit&quot;&gt;quit()&lt;/a&gt; slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3ffe58383d7277d71ec72c56b71b5ccdb59e72" translate="yes" xml:space="preserve">
          <source>In this case, &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;'s internal data will be generated at compile time; no conversion or allocation will occur at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b16fee52137c726210b352bd2a3513af71290f" translate="yes" xml:space="preserve">
          <source>In this case, Pane cannot calculate a sensible implicit size. Since we're anchoring the &lt;a href=&quot;qml-qtquick-controls2-pageindicator&quot;&gt;PageIndicator&lt;/a&gt; over the &lt;a href=&quot;qml-qtquick-controls2-swipeview&quot;&gt;SwipeView&lt;/a&gt;, we can simply set the content size to the view's implicit size:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c14340d72a02580e23a64a2b4670ce106e45f16" translate="yes" xml:space="preserve">
          <source>In this case, Popup cannot calculate a sensible implicit size. Since we're anchoring the &lt;a href=&quot;qml-qtquick-controls2-pageindicator&quot;&gt;PageIndicator&lt;/a&gt; over the &lt;a href=&quot;qml-qtquick-controls2-swipeview&quot;&gt;SwipeView&lt;/a&gt;, we can simply set the content size to the view's implicit size:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d2bd1f24a4bc5b8d4a75b8ac6bd6239d493a88" translate="yes" xml:space="preserve">
          <source>In this case, a margin of 5 pixels is reserved to the left of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2559699cff65ead711a811fd8cb59e14e6e11bff" translate="yes" xml:space="preserve">
          <source>In this case, create the correct wrapper class explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72df5d9857db08c85e9d865105471fa46d122b7" translate="yes" xml:space="preserve">
          <source>In this case, instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44d0c003d379650806aa61e32500800e5f47f98" translate="yes" xml:space="preserve">
          <source>In this case, it may help to register the server as Administrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de0ffe19fb979ad27b3dd71c09d8ee90acf5a96" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;Ui::CalculatorForm&lt;/code&gt; is an interface description object from the &lt;code&gt;ui_calculatorform.h&lt;/code&gt; file that sets up all the dialog's widgets and the connections between its signals and slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557cb66c99ce847b1304ea0d2bca926ea7fa7f82" translate="yes" xml:space="preserve">
          <source>In this case, the Text item will be created in the engine's &lt;a href=&quot;qqmlengine#rootContext&quot;&gt;root context&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5093c104f6dbd51736a8187dd3bd4b0f6b1d9d6c" translate="yes" xml:space="preserve">
          <source>In this case, the engine will emit an error and refuse to load the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9923736f41d1c99c5ade89166c3d1e07ec481f" translate="yes" xml:space="preserve">
          <source>In this case, the file is accessible as &lt;code&gt;:/myresources/cut-img.png&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4817c64065a76057f86d53f70dd09bfacecc35" translate="yes" xml:space="preserve">
          <source>In this case, the filter attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db201376463ec4ac414b7caf1047c66a4faa690" translate="yes" xml:space="preserve">
          <source>In this case, the left edge of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ead38ce400183da10325a74e03ec2d21aa8a43" translate="yes" xml:space="preserve">
          <source>In this case, the name of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc83f168232d217b8a040e7b9dd001b4be5feb5" translate="yes" xml:space="preserve">
          <source>In this case, the order of destruction causes a problem. The parent's destructor is called first because it was created last. It then calls the destructor of its child, &lt;code&gt;quit&lt;/code&gt;, which is incorrect because &lt;code&gt;quit&lt;/code&gt; is a local variable. When &lt;code&gt;quit&lt;/code&gt; subsequently goes out of scope, its destructor is called again, this time correctly, but the damage has already been done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2fce7fc50e346d6aa873ac66e0403499b0f04a" translate="yes" xml:space="preserve">
          <source>In this case, the regular expression engine should report a partial match, so that we can match again adding new data and (eventually) get a complete match. This implies that the regular expression engine may assume that there are other characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec7f7d20357b4785d0506c8b802f3a49cbf18dd" translate="yes" xml:space="preserve">
          <source>In this case, the subpattern &lt;code&gt;abc\\w+X&lt;/code&gt; partially matches the subject string; however, the subpattern &lt;code&gt;def&lt;/code&gt; matches the subject string completely, and therefore a complete match is reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1621cf0096ee51e3a619b6331b188460f09d0bd5" translate="yes" xml:space="preserve">
          <source>In this case, the widgets used in the user interface can be accessed in the same say as a widget created in code by hand. We no longer require the &lt;code&gt;ui&lt;/code&gt; prefix to access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75ffd3874db6ea6ce0b615a59236fe8404b4e5d" translate="yes" xml:space="preserve">
          <source>In this case, we accept the proposed action without checking what it is. In a real world application, it may be necessary to return from the &lt;a href=&quot;qwidget#dropEvent&quot;&gt;dropEvent()&lt;/a&gt; function without accepting the proposed action or handling the data if the action is not relevant. For example, we may choose to ignore &lt;a href=&quot;qt#DropAction-enum&quot;&gt;Qt::LinkAction&lt;/a&gt; actions if we do not support links to external sources in our application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12de9c11e19e2cf1aa429067cf7c63431e574ddf" translate="yes" xml:space="preserve">
          <source>In this case, we just use the geometry information provided by the view option in the item rectangle. A delegate that renders items with several elements would not use the item rectangle directly. It would position the editor in relation to the other elements in the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b579c1c4a5b92543cefd293a9eb46587cc9a52" translate="yes" xml:space="preserve">
          <source>In this case, we refuse to deal with move operations. Each type of drop action that we accept is checked and dealt with accordingly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acf73b8652dc00675062e9a5cb9499c1c12038b" translate="yes" xml:space="preserve">
          <source>In this case, we set up a default &lt;a href=&quot;qfilesystemmodel&quot;&gt;QFileSystemModel&lt;/a&gt;, obtain a parent index using a specific implementation of &lt;a href=&quot;qfilesystemmodel#index&quot;&gt;index()&lt;/a&gt; provided by that model, and we count the number of rows in the model using the &lt;a href=&quot;qfilesystemmodel#rowCount&quot;&gt;rowCount()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e105cc32dae04734242b23d52e7cc6250dbcb385" translate="yes" xml:space="preserve">
          <source>In this case, when the result of the lookup is ready, the slot or signal &lt;code&gt;function&lt;/code&gt; in &lt;code&gt;receiver&lt;/code&gt; is called with a &lt;a href=&quot;qhostinfo&quot;&gt;QHostInfo&lt;/a&gt; argument. The &lt;a href=&quot;qhostinfo&quot;&gt;QHostInfo&lt;/a&gt; object can then be inspected to get the results of the lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2edc8f830b62cce7cad4ec3440f658823ce98aa6" translate="yes" xml:space="preserve">
          <source>In this chapter, we look at each of the structural elements used in a rich text document, outline their features and uses, and show how to examine their contents. Document editing is described in &lt;a href=&quot;richtext-cursor#&quot;&gt;The QTextCursor Interface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c6e171cbf5feee976517b022361c692a20a725" translate="yes" xml:space="preserve">
          <source>In this code sample, we loop through all devices that are able to output sound, i.e., play an audio stream in a supported format. For each device we find, we simply print the &lt;a href=&quot;qaudiodeviceinfo#deviceName&quot;&gt;deviceName&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d00177c82097c5be50486e9ab9d1159a60412b" translate="yes" xml:space="preserve">
          <source>In this discussion, we will concentrate on &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt; and &lt;a href=&quot;qmap&quot;&gt;QMap&lt;/a&gt;. The iterator types for &lt;a href=&quot;qlinkedlist&quot;&gt;QLinkedList&lt;/a&gt;, &lt;a href=&quot;qvector&quot;&gt;QVector&lt;/a&gt;, and &lt;a href=&quot;qset&quot;&gt;QSet&lt;/a&gt; have exactly the same interface as &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;'s iterators; similarly, the iterator types for &lt;a href=&quot;qhash#qhash&quot;&gt;QHash&lt;/a&gt; have the same interface as &lt;a href=&quot;qmap&quot;&gt;QMap&lt;/a&gt;'s iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b9f46acbee65ef19179225693f73e525c0e7d2" translate="yes" xml:space="preserve">
          <source>In this document, we take a custom type and describe how to integrate it into Qt's object model so that it can be stored in the same way as standard Qt types. We then show how to register the custom type to allow it to be used in signals and slots connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deae06da34c5ea98ed2af81fad213ae5b7bbd837" translate="yes" xml:space="preserve">
          <source>In this example our input lines have the format company name, web address and country. Unfortunately the regexp is rather long and not very versatile -- the code will break if we add any more fields. A simpler and better solution is to look for the separator, '\t' in this case, and take the surrounding text. The &lt;a href=&quot;qstring#split&quot;&gt;QString::split&lt;/a&gt;() function can take a separator string or regexp as an argument and split a string accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68e45ce12232cea0e4433fbb4169154abeebb9d" translate="yes" xml:space="preserve">
          <source>In this example the shortcut is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac57de8cb8e27d59e842bd29d3ab7f5e8c83dc4" translate="yes" xml:space="preserve">
          <source>In this example we are demonstrating how to use a &lt;a href=&quot;qml-qtqml-models-listmodel&quot;&gt;ListModel&lt;/a&gt; with a combo box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1189e66d8d1010b7362db4792af15820adbb91c5" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;anim1&lt;/code&gt; and &lt;code&gt;anim2&lt;/code&gt; are two &lt;a href=&quot;qpropertyanimation&quot;&gt;QPropertyAnimation&lt;/a&gt;s that have already been set up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e76e3fd9da832a8ce5a7866306c4863e5056d1a" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;anim1&lt;/code&gt; and &lt;code&gt;anim2&lt;/code&gt; are two already set up &lt;a href=&quot;qpropertyanimation&quot;&gt;QPropertyAnimation&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19490627b2544a644d6217034dd7faaa7ea324c" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; share data until &lt;a href=&quot;qpainter#begin&quot;&gt;QPainter::begin&lt;/a&gt;() is called for &lt;code&gt;p2&lt;/code&gt;, because painting a pixmap will modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e9a0c073a6c98292de8fb5126a0361b67561b0" translate="yes" xml:space="preserve">
          <source>In this example, a predefined gradient is set up differently depending on the orientation of the handle. &lt;a href=&quot;qsplitterhandle&quot;&gt;QSplitterHandle&lt;/a&gt; provides a reasonable size hint for the handle, so the subclass does not need to provide a reimplementation of &lt;a href=&quot;qsplitterhandle#sizeHint&quot;&gt;sizeHint&lt;/a&gt;() unless the handle has special size requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999da1ad9787398f1d2e84ddb26854e2f75d0230" translate="yes" xml:space="preserve">
          <source>In this example, both the &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; and the &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; functions may produce a different number of reads/writes. This can confuse the Qt D-Bus type system and should be avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4c78e1bc50276fe63e7f90612ec2b4d6685ef7" translate="yes" xml:space="preserve">
          <source>In this example, if the user clicks OK the font they chose will be used, and if they click Cancel the original font is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcaccfcc775dc4e2a1aed36721366878fcca6b8" translate="yes" xml:space="preserve">
          <source>In this example, keyboard focus is transferred to the label's buddy (the &lt;a href=&quot;qlineedit&quot;&gt;QLineEdit&lt;/a&gt;) when the user presses Alt+P. If the buddy was a button (inheriting from &lt;a href=&quot;qabstractbutton&quot;&gt;QAbstractButton&lt;/a&gt;), triggering the mnemonic would emulate a button click.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15b59b3fdb51e89ff35ae53f4be8eb8fedcf2ef" translate="yes" xml:space="preserve">
          <source>In this example, main.qml will normally use Component.qml for the Component type. However on a unix platform, the unix selector will be present and the +unix/Component.qml version will be used instead. Note that this acts like swapping out Component.qml with +unix/Component.qml, so when using Component.qml you should not need to alter any paths based on which version was selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff9fb3748987a1b472588cbf21d795b62d10160" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;MyWidget&lt;/code&gt; constructor relays a signal from a private member variable, and makes it available under a name that relates to &lt;code&gt;MyWidget&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3649d3f75d265bca2550faf5b7d5abd9dda84e" translate="yes" xml:space="preserve">
          <source>In this example, the dock widget can only be placed in the left and right dock areas, and it is initially placed in the left dock area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b72b94b4757c02a73386ac2ac7762e13e401756" translate="yes" xml:space="preserve">
          <source>In this example, the lambda function made the connection simple even though &lt;a href=&quot;qabstractbutton#clicked&quot;&gt;QPushButton::clicked&lt;/a&gt;() and &lt;code&gt;TextSender::textCompleted()&lt;/code&gt; have incompatible parameters. In contrast, a string-based implementation would require extra boilerplate code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235379df72b319b5f0ef8b2f33686cc77de424dc" translate="yes" xml:space="preserve">
          <source>In this example, the page entitled &quot;Qt Creator Manual&quot; contains a nested list of links to pages in the documentation which is duplicated in Qt Assistant's Contents tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da94753c669c0b214155883e8a88e777ac9bf77" translate="yes" xml:space="preserve">
          <source>In this example, the shortcut is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3564d070713315e9b062415b2c5d0a34613c1ad" translate="yes" xml:space="preserve">
          <source>In this example, the source object is a simple binary switch that will toggle its state based on a timer. When the state changes, a signal is emitted by the source which QtRO propagates to all replicas. As the replica will have the same properties, signals and slots as were exposed from the source object, any slots connected to the replica's signal will be called when the replica receives the signal. The client process then echoes back the received switch state to the source by emitting its own signal which is connected to a slot on the replica.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27ca901639e7c105df3fd5c77af46728ef15bc6" translate="yes" xml:space="preserve">
          <source>In this example, the timer is started by a call to &lt;a href=&quot;qelapsedtimer#start&quot;&gt;start&lt;/a&gt;() and the elapsed timer is calculated by the &lt;a href=&quot;qelapsedtimer#elapsed&quot;&gt;elapsed&lt;/a&gt;() function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04368f892c2f39db24b113e7bf2d0296b1a1de0b" translate="yes" xml:space="preserve">
          <source>In this example, the toolbar is restricted to the top and bottom toolbar areas of the main window, and is initially placed in the top tool bar area. We can see that the actions specified by &lt;code&gt;newAct&lt;/code&gt; and &lt;code&gt;openAct&lt;/code&gt; will be displayed both on the toolbar and in the file menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7630fea80062eea7b38dbc08e557a2c772f26d23" translate="yes" xml:space="preserve">
          <source>In this example, there will be some level of data loss because the &lt;code&gt;%FF&lt;/code&gt; cannot be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f801de70955d3907c634e712bc385370e892b307" translate="yes" xml:space="preserve">
          <source>In this example, we implement the shader effect manually. The &lt;a href=&quot;qtgraphicaleffects-index&quot;&gt;Qt Graphical Effects&lt;/a&gt; module contains a suite of ready-made effects for use with Qt Quick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949cde144af3ddb388161b46bf77b0212b49247e" translate="yes" xml:space="preserve">
          <source>In this example, we know that the editor widget is a spin box, but we could have provided different editors for different types of data in the model, in which case we would need to cast the widget to the appropriate type before accessing its member functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302e8cd2260bab3b6df359498303c437334ae297" translate="yes" xml:space="preserve">
          <source>In this example, when &lt;code&gt;button&lt;/code&gt; is clicked, the machine will enter &lt;code&gt;s2&lt;/code&gt;. It will remain in state &lt;code&gt;s2&lt;/code&gt; until the &lt;code&gt;geometry&lt;/code&gt; property has been set to &lt;code&gt;QRect(0, 0, 50, 50)&lt;/code&gt;. Then it will transition into &lt;code&gt;s3&lt;/code&gt;. When &lt;code&gt;s3&lt;/code&gt; is entered, the message box will pop up. If the transition into &lt;code&gt;s2&lt;/code&gt; has an animation for the &lt;code&gt;geometry&lt;/code&gt; property, then the machine will stay in &lt;code&gt;s2&lt;/code&gt; until the animation has finished playing. If there is no such animation, it will simply set the property and immediately enter state &lt;code&gt;s3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1688a407b207637b41abe1be9043ecb899dfd3d6" translate="yes" xml:space="preserve">
          <source>In this example, when the table view needs to provide an editor, it asks the delegate to provide an editor widget that is appropriate for the item being modified. The &lt;a href=&quot;qabstractitemdelegate#createEditor&quot;&gt;createEditor()&lt;/a&gt; function is supplied with everything that the delegate needs to be able to set up a suitable widget:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4b45f883cad08400fe2f283e3df0277bface4f" translate="yes" xml:space="preserve">
          <source>In this image the black dot is positioned at (0,0) within the item coordinates of the red rectangle. If the red rectangle was the root item of the scene, then the black dot would also be positioned at (0,0) in scene coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb41aa226d00b5cd9c17115bdf160b8d8cefd1f" translate="yes" xml:space="preserve">
          <source>In this instance, to avoid this issue, the view could set the property using a &lt;a href=&quot;qml-qtquick-propertyaction&quot;&gt;PropertyAction&lt;/a&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c79f673d02c6a0b02afffb6a4413bac50fd2c46" translate="yes" xml:space="preserve">
          <source>In this mode the gradient coordinates are relative to the bounding rectangle of the object being drawn, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the object's bounding rectangle. This value was added in Qt 5.12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bac153adc4b9fa8e68ca852dc8eface50bf9220" translate="yes" xml:space="preserve">
          <source>In this mode the gradient coordinates are relative to the bounding rectangle of the paint device, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the paint device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99379591ca05eb12bd4a6f61185a599485cd60c" translate="yes" xml:space="preserve">
          <source>In this mode the tool button displays a special arrow to indicate that a menu is present. The menu is displayed when the arrow part of the button is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a4b03e05731f32b56648a426c9e32b56ddc0e9" translate="yes" xml:space="preserve">
          <source>In this mode, a thread can lock the same &lt;a href=&quot;qreadwritelock&quot;&gt;QReadWriteLock&lt;/a&gt; multiple times. The &lt;a href=&quot;qreadwritelock&quot;&gt;QReadWriteLock&lt;/a&gt; won't be unlocked until a corresponding number of &lt;a href=&quot;qreadwritelock#unlock&quot;&gt;unlock&lt;/a&gt;() calls have been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8071f22e099a59fd4dd42f20046f8ac50f765e" translate="yes" xml:space="preserve">
          <source>In this mode, a thread can lock the same mutex multiple times and the mutex won't be unlocked until a corresponding number of &lt;a href=&quot;qmutex#unlock&quot;&gt;unlock&lt;/a&gt;() calls have been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fcfd26a81ee3c453c79d5569011ba1a79f42c0" translate="yes" xml:space="preserve">
          <source>In this mode, a thread may only lock a &lt;a href=&quot;qreadwritelock&quot;&gt;QReadWriteLock&lt;/a&gt; once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6efbbcec8516b4d059c7b41ece0e309e734609" translate="yes" xml:space="preserve">
          <source>In this mode, a thread may only lock a mutex once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c4b84006f4a9a6f5eaba5872cb21631d3572f7" translate="yes" xml:space="preserve">
          <source>In this mode, the &lt;code&gt;files&lt;/code&gt; argument can be a list of files or directories. If a directory is specified, it will be included in the &lt;a href=&quot;qmake-variable-reference#dependpath&quot;&gt;DEPENDPATH&lt;/a&gt; variable, and relevant code from there will be included in the generated project file. If a file is given, it will be appended to the correct variable, depending on its extension. For example, UI files are added to &lt;a href=&quot;qmake-variable-reference#forms&quot;&gt;FORMS&lt;/a&gt;, and C++ files are added to &lt;a href=&quot;qmake-variable-reference#sources&quot;&gt;SOURCES&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ea371b73c38c196b0320941a7a5faa4ff5dcbe" translate="yes" xml:space="preserve">
          <source>In this model, the item in the string list that corresponds to the model index is replaced by the value provided. However, before we can modify the string list, we must make sure that the index is valid, the item is of the correct type, and that the role is supported. By convention, we insist that the role is the &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;EditRole&lt;/a&gt; since this is the role used by the standard item delegate. For boolean values, however, you can use &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;Qt::CheckStateRole&lt;/a&gt; and set the &lt;a href=&quot;qt#ItemFlag-enum&quot;&gt;Qt::ItemIsUserCheckable&lt;/a&gt; flag; a checkbox is then used for editing the value. The underlying data in this model is the same for all roles, so this detail just makes it easier to integrate the model with standard components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5605cad4c620ef3a8507b3d76f04febe9af7a320" translate="yes" xml:space="preserve">
          <source>In this path expression, both &lt;code&gt;recipe&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; are name tests written in the shorthand form. &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt; resolves these names (&lt;a href=&quot;http://www.w3.org/TR/xquery/#id-basics&quot;&gt;QNames&lt;/a&gt;) to their expanded form using whatever &lt;a href=&quot;http://www.w3.org/TR/xquery/#dt-namespace-declaration&quot;&gt;namespace declarations&lt;/a&gt; it knows about. Resolving a name to its expanded form means replacing its namespace prefix, if one is present (there aren't any present in the example), with a namespace URI. The expanded name then consists of the namespace URI and the local name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234eaf6971e188df3c64ddb37bfe43b7d37738d9" translate="yes" xml:space="preserve">
          <source>In this section we will explain the procedure of implementing accessible plugins for your interfaces. A plugin is a class stored in a shared library that can be loaded at run-time. It is convenient to distribute interfaces as plugins since they will only be loaded when required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d3ed97e636aea202d0e7406445c6021f10ea06" translate="yes" xml:space="preserve">
          <source>In this section we will have a look at some implementation issues. Finally, we will see a complete example on the styling of a Java widget. We will continue to use the Java style throughout the document for examples and widget images. The implementation itself is somewhat involved, and it is not intended that you should read through it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3260e6a623886cc2b28bfaeb75b17b834e8dc4a2" translate="yes" xml:space="preserve">
          <source>In this section, we create a simple read-only model to explore the basic principles of the model/view architecture. Later in this section, we adapt this simple model so that items can be modified by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10539b1f975fafffe2435b86b80bdefa49531feb" translate="yes" xml:space="preserve">
          <source>In this section, we implement a simple model based on a list of strings, so the &lt;a href=&quot;qabstractlistmodel&quot;&gt;QAbstractListModel&lt;/a&gt; provides an ideal base class on which to build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c09ec270f1ce6cb036dc00b51571c7578d1550" translate="yes" xml:space="preserve">
          <source>In this section, we will examine how most of Qt's widgets are styled. Hopefully, this will save you some time and effort while developing your own styles and widgets. You will not find information here that is not attainable elsewhere (i.e., by examining the source code or the class descriptions for the style related classes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74dd0586be28685f37f6c5e141d9d8eeb1a83be" translate="yes" xml:space="preserve">
          <source>In this situation the application must determine which widget within the window should receive the focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65c68dcc986167cbb47bec6fde19614928981a0" translate="yes" xml:space="preserve">
          <source>In this situation we can either move the component inline,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f94475de620540cea71799bb6accd7b99465255" translate="yes" xml:space="preserve">
          <source>In this type of device, the touch surface and display are integrated. This means the surface and display typically have the same size, such that there is a direct relationship between the touch points' physical positions and the coordinate reported by &lt;a href=&quot;qtouchevent-touchpoint&quot;&gt;QTouchEvent::TouchPoint&lt;/a&gt;. As a result, Qt allows the user to interact directly with multiple QWidgets and QGraphicsItems at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6685aa01d1b3fcca52863e41b8119da93842cd0b" translate="yes" xml:space="preserve">
          <source>In this type of device, the touch surface is separate from the display. There is not a direct relationship between the physical touch location and the on-screen coordinates. Instead, they are calculated relative to the current mouse position, and the user must use the touch-pad to move this reference point. Unlike touch-screens, Qt allows users to only interact with a single &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; or &lt;a href=&quot;qgraphicsitem&quot;&gt;QGraphicsItem&lt;/a&gt; at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2535faab60201dc65f2b10fa2b5ffba2ee808d" translate="yes" xml:space="preserve">
          <source>In this way an object declaration may &lt;a href=&quot;qtqml-typesystem-objecttypes#defining-object-types-from-qml&quot;&gt;expose a particular value&lt;/a&gt; to outside objects or maintain some internal state more easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d883efb35cac06454a54d0337ddbcf3332cfbc9" translate="yes" xml:space="preserve">
          <source>In this way you can do a visual parenthesis matching and highlight from the current cursor position to the matching parenthesis. That makes it easier to spot a missing parenthesis in your code and to find where a corresponding opening/closing parenthesis is when editing parenthesis intensive code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65952435f5dc1053c6d61dfc47bb7e6eeaf06f91" translate="yes" xml:space="preserve">
          <source>In this way, modular user interface types are assembled and reused within an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de767a5f61844da8fcb371c7514c56d9009cc74" translate="yes" xml:space="preserve">
          <source>In toolbars, the icon is used as the tool button icon; in menus, it is displayed to the left of the menu text. There is no default icon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8558be4cbe55217d99da0c999c4bef98bb07c70" translate="yes" xml:space="preserve">
          <source>In total, there are four levels for sections in QDoc: &lt;code&gt;\section1&lt;/code&gt;, &lt;code&gt;\section2&lt;/code&gt;, &lt;code&gt;\section3&lt;/code&gt; and &lt;code&gt;\section4&lt;/code&gt;. These correspond to the traditional section, subsection, subsubsection and subsubsubsection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4351286a425286096d471d342fe0417768836e7b" translate="yes" xml:space="preserve">
          <source>In traditional user interfaces, views can be scrolled using standard controls, such as scroll bars and arrow buttons. In some situations, it is also possible to drag the view directly by pressing and holding a mouse button while moving the cursor. In touch-based user interfaces, this dragging action is often complemented with a flicking action, where scrolling continues after the user has stopped touching the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b39c6b56a1a873cf646e6b3b27f95ed83f3439e" translate="yes" xml:space="preserve">
          <source>In your &lt;a href=&quot;qaxbindable&quot;&gt;QAxBindable&lt;/a&gt; subclass, implement &lt;a href=&quot;qaxbindable#createAggregate&quot;&gt;QAxBindable::createAggregate&lt;/a&gt;() to return a new object of the &lt;a href=&quot;qaxaggregated&quot;&gt;QAxAggregated&lt;/a&gt; subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d2d509606741256342c77c9b94f6727b2ddd39" translate="yes" xml:space="preserve">
          <source>In your &lt;a href=&quot;qexception&quot;&gt;QException&lt;/a&gt; subclass, reimplement clone() like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2fcbeb7884806ac64f611bf2ba25de6cbb9514" translate="yes" xml:space="preserve">
          <source>In your &lt;a href=&quot;qexception&quot;&gt;QException&lt;/a&gt; subclass, reimplement raise() like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aad9d4262c115a217ea35af3bbe0130fb028821" translate="yes" xml:space="preserve">
          <source>In your configuration file, set your &lt;code&gt;outputformats&lt;/code&gt; variable to &lt;code&gt;DITAXML&lt;/code&gt;, and send the output to an appropriate directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769cfd06088af9845715bff54aafd9073099ac35" translate="yes" xml:space="preserve">
          <source>In your reimplementation of this function, if you want to filter the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427fe9e274e6f7646ab5f0deb14eec78dd36fab2" translate="yes" xml:space="preserve">
          <source>In your reimplementation of this function, if you want to stop the event being handled by Qt, return true and set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f961645c55c0b98e856d14a71b4d7fe3ad5f3874" translate="yes" xml:space="preserve">
          <source>In-App Purchases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f3fec7bd65d1e33a7327f41ace571bdb281ccc" translate="yes" xml:space="preserve">
          <source>In-App Purchasing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229d515f509ad82bcd53f709b3ca353b175a13b4" translate="yes" xml:space="preserve">
          <source>In-App purchasing can only be tested on the actual hardware for the iOS platform. For more information refer to the &lt;a href=&quot;http://developer.apple.com/in-app-purchase/&quot;&gt;iOS documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7b66e1d584f7382180975b2990383747934177" translate="yes" xml:space="preserve">
          <source>In-App purchasing for &lt;a href=&quot;supported-platforms#winrt&quot;&gt;WinRT&lt;/a&gt; differentiates between two modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ae781ad501b98baf8c7fac2203050048064c6" translate="yes" xml:space="preserve">
          <source>In-Depth Memory Allocation Considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89bb5ff5c8429f56a85f36063f920a4d959b3e6" translate="yes" xml:space="preserve">
          <source>In-app billing service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957b8acbbcffca282d9fb4135026f4a00dec0dcd" translate="yes" xml:space="preserve">
          <source>In-app products will be available once you have published the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f27319b26f4231b0090f8ed768563c7d37495cb" translate="yes" xml:space="preserve">
          <source>In-app purchases are a way to monetize an application. These purchases are made from inside the application and can include anything from unlocking content to virtual items. The Qt Purchasing API is built on the system APIs for in-app purchases, which means the purchase process is more familiar to the user, and the information already stored by the platform (such as credit card information) can be used to simplify the purchase process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d77760dfc42dc3720305af5dea4f411b55778eb" translate="yes" xml:space="preserve">
          <source>In-process servers can be registered using the &lt;code&gt;regsvr32&lt;/code&gt; tool available on all Windows systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09af574c7f20770e2ba62ab519196e2d4d08efa4" translate="yes" xml:space="preserve">
          <source>Inactive</source>
          <target state="translated">Inactive</target>
        </trans-unit>
        <trans-unit id="b3ae7850d6f2a44a03399e9a0dba5a89c8cc487d" translate="yes" xml:space="preserve">
          <source>Incidentally, &lt;a href=&quot;qlcdnumber&quot;&gt;QLCDNumber&lt;/a&gt; is the very oldest part of Qt, tracing its roots back to a BASIC program on the &lt;a href=&quot;http://www.nvg.ntnu.no/sinclair/computers/zxspectrum/zxspectrum.htm#&quot;&gt;Sinclair Spectrum&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1521a666fd6d8d437d41c159ff934a47f7429e39" translate="yes" xml:space="preserve">
          <source>Include debugging help for mismatched calls to unbind. See &lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND&quot;&gt;BIND_DEBUG_UNBIND&lt;/a&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf6b578622f60be8bbfa44c31e5ef1143efa871" translate="yes" xml:space="preserve">
          <source>Include the leading separator (if any) in the result string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823c476fee5dc1ec5038dd68f3aec3cc039d47aa" translate="yes" xml:space="preserve">
          <source>Include the resulting header file in your code to access the object APIs through the generated C++ classes. See the &lt;a href=&quot;https://doc.qt.io/qt-5.13/activeqt-activeqt-qutlook-example.html#&quot;&gt;Qutlook&lt;/a&gt; example for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a13b4f82773869c0dbf4da758c5311862a814a" translate="yes" xml:space="preserve">
          <source>Include the trailing separator (if any) in the result string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9befecdc70e3214aeaa22320e99c2964a4ba82" translate="yes" xml:space="preserve">
          <source>Included with Qt Location is a geo services plugin which accesses the relevant HERE services provided by HERE/Nokia. The use of these services is governed by the terms and conditions available at &lt;a href=&quot;https://developer.here.com/terms-conditions&quot;&gt;https://developer.here.com/terms-conditions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d569de260153324cc660bf88ca63fd98a1a150b0" translate="yes" xml:space="preserve">
          <source>Includes hyperlinks in the keyboard focus chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c849db5e8ff69f5eb683d3cbc1d8d5da69f91c2" translate="yes" xml:space="preserve">
          <source>Includes hyperlinks in the keyboard focus chain. Enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e649bd4c7484a7480998b955eefa61137cce0dd4" translate="yes" xml:space="preserve">
          <source>Includes positive leading into the line's height if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d331ec1b5532bcdd2585ae71345ec5b7c8c8142" translate="yes" xml:space="preserve">
          <source>Includes support for large files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9537403951f876c585489f46ebb3f178eb06acce" translate="yes" xml:space="preserve">
          <source>Includes the contents of the file specified by &lt;code&gt;filename&lt;/code&gt; into the current project at the point where it is included. This function succeeds if &lt;code&gt;filename&lt;/code&gt; is included; otherwise it fails. The included file is processed immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdebf884b6e907f3e0c870709f3f4f971442f558" translate="yes" xml:space="preserve">
          <source>Including Code Inline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c5bddc09025dbb9697b087115765dd1bc3f074" translate="yes" xml:space="preserve">
          <source>Including External Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162fc00796665e805cdbe5354ecaf6f537a91aaa" translate="yes" xml:space="preserve">
          <source>Including Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66c9197819af94c241fed0685c70e963b6c3180" translate="yes" xml:space="preserve">
          <source>Including code from external files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856357e2aaf151cc1159095a68744a63da15f37f" translate="yes" xml:space="preserve">
          <source>Including or Excluding Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e099b85912a418d4799b87042d73980c99c1e90" translate="yes" xml:space="preserve">
          <source>Including third-party Android libraries in an application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c615b9e833ee226ac08cb33f93df17a615ca30" translate="yes" xml:space="preserve">
          <source>Incoming</source>
          <target state="translated">Incoming</target>
        </trans-unit>
        <trans-unit id="1662c834da328dd49f9925394ce54d2977405850" translate="yes" xml:space="preserve">
          <source>Incorrectly specified fields of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d0253fa9adea6544b473e4c2fb8022218e9e72" translate="yes" xml:space="preserve">
          <source>Increase &lt;a href=&quot;qml-qtquick-controls2-dial#value-prop&quot;&gt;value&lt;/a&gt; by &lt;a href=&quot;qml-qtquick-controls2-dial#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c6cc71943b2dbe81617bc9ff88abaf82aae7ec" translate="yes" xml:space="preserve">
          <source>Increase symbol for a spin widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72200e94e65fbdb4dcaef69fd0f8a494fbcd1d08" translate="yes" xml:space="preserve">
          <source>Increased main memory consumption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f548068c72cb26a7dd9cd66ce0ceb9017ef1fb" translate="yes" xml:space="preserve">
          <source>Increased video memory consumption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972b711e7504ba6852948d3b603652176d23cc52" translate="yes" xml:space="preserve">
          <source>Increases or decreases the size of each unit in the canvas grid by multiplying the scale factors to the current tranform matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74011f7eaf5f0a592695e2976fa648b7f0308f6" translate="yes" xml:space="preserve">
          <source>Increases the position by &lt;a href=&quot;qml-qtquick-controls2-scrollbar#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; or &lt;code&gt;0.1&lt;/code&gt; if &lt;a href=&quot;qml-qtquick-controls2-scrollbar#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; is &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d03609d2de69e408ae3d5957ad5e63d281153fa" translate="yes" xml:space="preserve">
          <source>Increases the value by &lt;a href=&quot;qml-qtquick-controls2-dial#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;, or &lt;code&gt;0.1&lt;/code&gt; if &lt;a href=&quot;qml-qtquick-controls2-dial#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ac7a10eeaa4913c0ad4d27923ce83a7641d638" translate="yes" xml:space="preserve">
          <source>Increases the value by &lt;a href=&quot;qml-qtquick-controls2-slider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; or &lt;code&gt;0.1&lt;/code&gt; if &lt;a href=&quot;qml-qtquick-controls2-slider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70e17687bf9ad714b29afd37043cb03b0ef05ee" translate="yes" xml:space="preserve">
          <source>Increases the value by &lt;a href=&quot;qml-qtquick-controls2-spinbox#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;, or &lt;code&gt;1&lt;/code&gt; if &lt;a href=&quot;qml-qtquick-controls2-spinbox#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f967605cd5f92bae360c81a37ac31cc3808f3157" translate="yes" xml:space="preserve">
          <source>Increases the value of the handle by &lt;a href=&quot;qml-qtquick-controls2-rangeslider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt;, or &lt;code&gt;0.1&lt;/code&gt; if &lt;a href=&quot;qml-qtquick-controls2-rangeslider#stepSize-prop&quot;&gt;stepSize&lt;/a&gt; is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb4e0020909cf6d1687c289073922fe280a1314" translate="yes" xml:space="preserve">
          <source>Increment current value with saturation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b720dc5837e48a90b2afa9e9e921a3f1e403a66c" translate="yes" xml:space="preserve">
          <source>Increment current value with wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb94002b77a917f8b5069093085a0db653f7cc2" translate="yes" xml:space="preserve">
          <source>Increment or decrement the register's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8325b6f89469788903b5501e21a6c242bd86b91e" translate="yes" xml:space="preserve">
          <source>Incremental Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6865b823869c9d02fe065513aa1d9a243113e20d" translate="yes" xml:space="preserve">
          <source>Incremental matching is another use case of partial matching. Suppose that we want to find the occurrences of a regular expression inside a large text (that is, substrings matching the regular expression). In order to do so we would like to &quot;feed&quot; the large text to the regular expression engines in smaller chunks. The obvious problem is what happens if the substring that matches the regular expression spans across two or more chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2ef83dc5379c3316f94043edcf99b84a63aaba" translate="yes" xml:space="preserve">
          <source>Incremental/multi-segment matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4e4509dd1e1168aea8972ee5993792d8a787e8" translate="yes" xml:space="preserve">
          <source>Increments the current index of the combo box, or the highlighted index if the popup list is visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcff447ff7e30525b1cc9dc422b164496cd6a0fa" translate="yes" xml:space="preserve">
          <source>Increments the current index of the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736aad4b43d683dc580afa1f57fd75fa8f4c826e" translate="yes" xml:space="preserve">
          <source>Increments the current index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ccbc7ba6a2bbea4a64d38a4493181ea53b9db3" translate="yes" xml:space="preserve">
          <source>Increments the current index. The current index will wrap if &lt;a href=&quot;qml-qtquick-listview#keyNavigationWraps-prop&quot;&gt;keyNavigationWraps&lt;/a&gt; is true and it is currently at the end. This method has no effect if the &lt;a href=&quot;qml-qtquick-listview#count-prop&quot;&gt;count&lt;/a&gt; is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca634115aab3375e0033854281ceb6850d8f47ec" translate="yes" xml:space="preserve">
          <source>Increments the frequency by the frequency step for the current band. If the frequency is already set to the maximum frequency, calling this function has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2cea1a3b7b77176b8d8230598f46e037025713" translate="yes" xml:space="preserve">
          <source>Incubate objects for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131332e4d2b14520e4243e2e585e985e5d98be1e" translate="yes" xml:space="preserve">
          <source>Incubate objects while the bool pointed to by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c573fd192ca06c4bbf84538623d2d2c22462e0" translate="yes" xml:space="preserve">
          <source>Incubation is not in progress. Call &lt;a href=&quot;qqmlcomponent#create&quot;&gt;QQmlComponent::create&lt;/a&gt;() to begin incubating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc954f59122dd3ee3047d2bbb9dfd755e6351df" translate="yes" xml:space="preserve">
          <source>Indented paragraph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcdaccaad8839ab1b42e407591e47607de7a598" translate="yes" xml:space="preserve">
          <source>Indents the lines containing the selection or the cursor. Requires &lt;code&gt;contenteditable=&quot;true&quot;&lt;/code&gt;. (Added in Qt 5.10)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e77004038f7675f76eed50bd58a65fc137f3fe" translate="yes" xml:space="preserve">
          <source>Independent JPEG Group License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f8e6a8f27b3389c6c800cff28611a2b5eba29f" translate="yes" xml:space="preserve">
          <source>Independent of the platform you are building for, consider using the &lt;code&gt;-prefix&lt;/code&gt; option with &lt;code&gt;configure&lt;/code&gt; as well, for example, &lt;code&gt;-prefix&amp;lt;Qt-install-path&amp;gt;&lt;/code&gt;. This specifies the target folder where Qt will be installed and places all build artifacts outside of the source code tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9aba350712ae49b8566a901f158d5cb30979f" translate="yes" xml:space="preserve">
          <source>Independently maps the planes of a video buffer to memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d888a344d8120f86bc098e3dfc1aaf67f2bd11" translate="yes" xml:space="preserve">
          <source>Indeterminate progress bars have the &lt;a href=&quot;#indeterminate-ps&quot;&gt;:indeterminate&lt;/a&gt; pseudo state set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2129be9156ad1e174b83921ce16cfb7cdd85b4" translate="yes" xml:space="preserve">
          <source>Indeterminate-length arrays and maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ead966bdda1bf50f59f483a5fd7af21f4e86a9" translate="yes" xml:space="preserve">
          <source>Index buffer object for use with &lt;code&gt;glDrawElements()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77c60d2487285afad6121cf2062c6c874a73239" translate="yes" xml:space="preserve">
          <source>Index holds the index of the item in that group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bf59b651793f02cb34f2835888abbba8be345b" translate="yes" xml:space="preserve">
          <source>Index lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13750d42d812c304f674805f75db4f2bea5ac85" translate="yes" xml:space="preserve">
          <source>IndexAttribute: used to define vertex indices when indexed draw calls are to be used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eea435e2403229f2f807cea82dc5cd9a64c57f" translate="yes" xml:space="preserve">
          <source>Indexes in this array match column indexes in rows. If the list is shorter than the longest row, all columns will not get labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc10c268c2fc61dd44953d39e441a052e071500d" translate="yes" xml:space="preserve">
          <source>Indexes in this array match the row indexes in the data array. If the list is shorter than the number of rows, all rows will not get labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683d23d64559d9c2833316c72904cd887afca2a0" translate="yes" xml:space="preserve">
          <source>Indexing:</source>
          <target state="translated">Indexing:</target>
        </trans-unit>
        <trans-unit id="4ceea0e53e34df925a02cd2a10ec84d7040e4aa1" translate="yes" xml:space="preserve">
          <source>Indicate that this icon is a mask image(boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28442d79ffab853a4710987844112f8a0d0397e5" translate="yes" xml:space="preserve">
          <source>Indicates a &quot;tri-state&quot; checkbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b059c7dea46e3cbe9ad71872ceba9452158db58c" translate="yes" xml:space="preserve">
          <source>Indicates a &quot;tri-state&quot; controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02095f9320d1b1ae7ab42f0470ed32e4d246195" translate="yes" xml:space="preserve">
          <source>Indicates a flat frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1f51dafdba84057684cfb9cfbf0fe29240c5ab" translate="yes" xml:space="preserve">
          <source>Indicates a flat push button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56f1cdd9f6c8c4329a4fac2c8d4cabaf3dbe76a" translate="yes" xml:space="preserve">
          <source>Indicates a normal frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395af2db702eeca9a5c0147443982ff4e5a798fa" translate="yes" xml:space="preserve">
          <source>Indicates a normal item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1400195027e002b58865ed67dfae16c32e12f56a" translate="yes" xml:space="preserve">
          <source>Indicates a normal push button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efc61e131144dcf7258173a64a9743d16382f010" translate="yes" xml:space="preserve">
          <source>Indicates a rounded frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd8c95a1078b0d22278c999c6a97adf9a94fbe8" translate="yes" xml:space="preserve">
          <source>Indicates all possible error conditions found during Bluetooth device discovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597757379af00d19ee4c0fa35a5c58f575c2191e" translate="yes" xml:space="preserve">
          <source>Indicates all possible error conditions found during the controller's existence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73933a718658b0e4aa2fa26ccfc465e40489e6bb" translate="yes" xml:space="preserve">
          <source>Indicates all possible error conditions found during the processing of the DNS lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e7b31e1610dc299c48c0036a59b7f76d25fe1e" translate="yes" xml:space="preserve">
          <source>Indicates all possible error conditions found during the processing of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef61a23958ccbdd8adc762ea357d4368e7878d0" translate="yes" xml:space="preserve">
          <source>Indicates an item with wrapped text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039cdbd1eab66a69fa13c9c9455ba4601e7cffb0" translate="yes" xml:space="preserve">
          <source>Indicates audio is muted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26996ad14d32e630405daf001545fd1b0086ede6" translate="yes" xml:space="preserve">
          <source>Indicates background activity, for example, while content is being loaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417dfbe8ebc8216d5268243c93748bc1c5859f53" translate="yes" xml:space="preserve">
          <source>Indicates background activity, for example, while content is being loaded. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e197706536cbdddfdb457427fc860a6711262cc2" translate="yes" xml:space="preserve">
          <source>Indicates how a &lt;a href=&quot;qt3dcore-qnode&quot;&gt;QNode&lt;/a&gt; listens for property updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362c2072f957e000d8beac0a22f80f264a9b8d3d" translate="yes" xml:space="preserve">
          <source>Indicates how full the data buffer is: 0.0 (empty) to 1.0 (full).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6435a8d9a02c28835c04d333e53e588cb042f14e" translate="yes" xml:space="preserve">
          <source>Indicates if an aspect of the request's loading mechanism has been manually overridden, e.g. by Qt WebKit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa0a0a2a3c7de3a4e47f09d7ec6c50054076697" translate="yes" xml:space="preserve">
          <source>Indicates if loading of media should begin immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d18cb29ecaf1ef5e8442a72c84d6087468942fa" translate="yes" xml:space="preserve">
          <source>Indicates if the alpha information coming from the diffuse property will be taken into account during rendering. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784c9189821a1588ef7bbfc47d1513f7b678e3bf" translate="yes" xml:space="preserve">
          <source>Indicates if the file name filter details are hidden or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e946313b417d40277d4749fce157cf1368bdd303" translate="yes" xml:space="preserve">
          <source>Indicates if the flash is charged and ready to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1393953ba17a61f7f429ebb290112b529370fdb2" translate="yes" xml:space="preserve">
          <source>Indicates if the renderer applies frustum culling to the scene.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8b439b901aa8a12bfc27f33bdc257a1cf79112" translate="yes" xml:space="preserve">
          <source>Indicates if the title bar should show a '*' for windows that are modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822e6973a58317750e4e255672d02668b380c76c" translate="yes" xml:space="preserve">
          <source>Indicates that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b970566863facc09af21355af1406f19f9247d" translate="yes" xml:space="preserve">
          <source>Indicates that Qt has created a &lt;a href=&quot;qevent#Type-enum&quot;&gt;MouseButtonDblClick&lt;/a&gt; event from this event. The flag is set in the causing &lt;a href=&quot;qevent#Type-enum&quot;&gt;MouseButtonPress&lt;/a&gt;, and not in the resulting &lt;a href=&quot;qevent#Type-enum&quot;&gt;MouseButtonDblClick&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c7231ccff296e23bbee20f76b7c4948221c063" translate="yes" xml:space="preserve">
          <source>Indicates that Qt is used to author a plugin. Depending on the operating system, it suppresses specific initializations that do not necessarily make sense in the plugin case. For example on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;, this includes avoiding loading our nib for the main menu and not taking possession of the native menu bar. Setting this attribute to true will also set the AA_DontUseNativeMenuBar attribute to true. It also disables native event filters. This attribute must be set before &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; constructed. This value was added in Qt 5.7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fda9d9a6af036a8a29d489a262005c7e7339f0" translate="yes" xml:space="preserve">
          <source>Indicates that a horizontal branch (to show a child item), should be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966cc6d4da43f2273ab6b543b351114e55e8330c" translate="yes" xml:space="preserve">
          <source>Indicates that a main icon drag has begun</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a642ebd81b34b1e99daf79000b300c46bfc6c81b" translate="yes" xml:space="preserve">
          <source>Indicates that a move event is pending, e.g., when a hidden widget was moved. This flag is set or cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9496c145e9bf6e730b3d7256d8ca7fa6d30002f8" translate="yes" xml:space="preserve">
          <source>Indicates that a native window is created for the widget. Enabling this flag will also force a native window for the widget's ancestors unless Qt::WA_DontCreateNativeAncestors is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892f58bd763cc7e10bddf2546f0965b5335b9297" translate="yes" xml:space="preserve">
          <source>Indicates that a radio button is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dc6f0d0880b03790c622fa62c63c2678b6d552" translate="yes" xml:space="preserve">
          <source>Indicates that a reference has been added to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979ee8411388243019fb9712991cb0ba2c788aab" translate="yes" xml:space="preserve">
          <source>Indicates that a reference has been removed from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224c291657d741584ad59cf2333257b7255589e6" translate="yes" xml:space="preserve">
          <source>Indicates that a resize event is pending, e.g., when a hidden widget was resized. This flag is set or cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e6e9824821dd41af4226e69e87b6034049f14d" translate="yes" xml:space="preserve">
          <source>Indicates that a scroll down arrow should be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6c5357398dedbf423ae76c80ef9848d4d9058d" translate="yes" xml:space="preserve">
          <source>Indicates that a scroll up arrow should be drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633113b3ff556d2741f27903f476a02d633ddc0d" translate="yes" xml:space="preserve">
          <source>Indicates that a vertical line (to show a sibling item), should be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4809a4de98ee3112dfc7c0b5ed2b149f517f10" translate="yes" xml:space="preserve">
          <source>Indicates that accesses to this scheme should bypass all Content-Security-Policy checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc174861c397c43ca01d54f4e990309e05b848d9" translate="yes" xml:space="preserve">
          <source>Indicates that all content from this scheme should be forced to have unique opaque origins: no two resources will have the same origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c796921fe7340e18a545a0594dcce38fa5599a1" translate="yes" xml:space="preserve">
          <source>Indicates that all extension should be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8eb4815c8dbe3f08634c6e93ebaaaf8c20fcd7e" translate="yes" xml:space="preserve">
          <source>Indicates that all of the input files are combined into a single output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf11683e7b25a19fc05daddd4ac0d005fbd0946c" translate="yes" xml:space="preserve">
          <source>Indicates that console functions (&lt;code&gt;console.log()&lt;/code&gt;, for example) should be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a6adef304322623ffd688614c3b43efd5d8433" translate="yes" xml:space="preserve">
          <source>Indicates that content from this scheme should be allowed to load resources from schemes with the &lt;code&gt;Local&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bdfc76f7b6282b57c29851c92ef3ce0161a739" translate="yes" xml:space="preserve">
          <source>Indicates that garbage collection functions (&lt;code&gt;gc()&lt;/code&gt;, for example) should be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370a2d304f3e9f34a0d7b5f7ab9062a8bdecc8f4" translate="yes" xml:space="preserve">
          <source>Indicates that modifications are to be flushed explicitly via &lt;code&gt;glFlushMappedBufferRange&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96559f69cbfe3868e027dc17fcac2d1dfa86090c" translate="yes" xml:space="preserve">
          <source>Indicates that no response was obtained from the target device behind a gateway. Usually this means the target device is not online on the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79bc690d1e11381715923e30e4c1e016dd9902a" translate="yes" xml:space="preserve">
          <source>Indicates that pending operations should not be synchronized before returning from &lt;a href=&quot;qopenglbuffer#mapRange&quot;&gt;mapRange&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1713405e7362e81db2c80aab247721f3e96098aa" translate="yes" xml:space="preserve">
          <source>Indicates that position information is available, meaning that the pos() family of functions in the touch points return valid points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a455a4b3af5f5c5cf4e11e076cb43724f04cd453" translate="yes" xml:space="preserve">
          <source>Indicates that pressure information is available, meaning that pressure() returns a valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e145902cf1049f1b74278ee891d701a0c3fb9e6a" translate="yes" xml:space="preserve">
          <source>Indicates that rendering performance is the most important factor, at the potential cost of lower quality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b7423d96f9e5bb7514b38f2b2ae168f08801e3" translate="yes" xml:space="preserve">
          <source>Indicates that rendering quality is the most important factor, at the potential cost of lower performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548e095b7331892285f41debb6ef46fec66b8495" translate="yes" xml:space="preserve">
          <source>Indicates that the Frame should be sunken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf519d3a0b07603ae82b455e0b8cf140993c926" translate="yes" xml:space="preserve">
          <source>Indicates that the Service Workers API should be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb2fefa84b1310eb5075ecb465ed93ea4893e8c" translate="yes" xml:space="preserve">
          <source>Indicates that the URL scheme does not have a port element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a181f43648d61322aa64f73db239f3797cfaf110" translate="yes" xml:space="preserve">
          <source>Indicates that the URL scheme is &lt;a href=&quot;https://www.w3.org/TR/powerful-features/#is-origin-trustworthy&quot;&gt;potentially trustworthy&lt;/a&gt;. This flag should only be applied to URL schemes which ensure data authenticity, confidentiality, and integrity, either through encryption or other means. Examples of secure builtin schemes include &lt;code&gt;https&lt;/code&gt; (authenticated and encrypted) and &lt;code&gt;qrc&lt;/code&gt; (local resources only), whereas &lt;code&gt;http&lt;/code&gt; is an example of an insecure scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af92d5bb5e7c67b1108b0540114288efeeef061d" translate="yes" xml:space="preserve">
          <source>Indicates that the URL scheme provides access to local resources. The purpose of this flag is to prevent network content from accessing local resources. Only schemes with the &lt;code&gt;LocalAccessAllowed&lt;/code&gt; flag may load resources from a scheme with the &lt;code&gt;Local&lt;/code&gt; flag. The only builtin schemes with this flag are &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;qrc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0fc2e60702a66acda8f86b8aa1247d1c6a2d559" translate="yes" xml:space="preserve">
          <source>Indicates that the View Source feature should be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667d863eb3bf35ada6d9f2003f2bf38a0302e792" translate="yes" xml:space="preserve">
          <source>Indicates that the active</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631466fa3e96453796b86b317a6a0ce9bb736179" translate="yes" xml:space="preserve">
          <source>Indicates that the arrow should be drawn up; otherwise it should be down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5add1dab448418ba2c8e21ef0a78592323ba01e" translate="yes" xml:space="preserve">
          <source>Indicates that the available input modes have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ceaf52ed56d089542d109610ede4d6a3b81efc6" translate="yes" xml:space="preserve">
          <source>Indicates that the available pattern recognition modes have changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31af151ecd2af3ae10f08bda74044a5d8b657c1" translate="yes" xml:space="preserve">
          <source>Indicates that the blur radius is going to be animated, hinting that the implementation can keep a cache of blurred verisons of the source. Do not use this hint if the source is going to be dynamically changing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce01ae30bbd0378f6b10986cd07265d1dbe0ab1" translate="yes" xml:space="preserve">
          <source>Indicates that the button has a drop down menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4115dd1d3e2648191964a95ca64f7c6d06c0de7" translate="yes" xml:space="preserve">
          <source>Indicates that the button is a Windows Vista type command link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2031ac1b1b98935818c5e085a0fd013500d1df78" translate="yes" xml:space="preserve">
          <source>Indicates that the button is a default button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fc466b11b113b92ee972f5097099d49e8bded5" translate="yes" xml:space="preserve">
          <source>Indicates that the button is an auto default button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1886947f9b926e1338f5f293b0d187c4fb978452" translate="yes" xml:space="preserve">
          <source>Indicates that the button is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f975186be6cbe630be77ed81689d06042ee3a7" translate="yes" xml:space="preserve">
          <source>Indicates that the byte array contains a CBOR stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bfd57ec4e41075bed470d6ae1415572dae4e49" translate="yes" xml:space="preserve">
          <source>Indicates that the byte array contains a UUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9565594eb66dd8c5417e65b5cfe659e4c4bf689d" translate="yes" xml:space="preserve">
          <source>Indicates that the byte array should be encoded using Base16 (hex) if the stream is converted to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9bd661a507ca6ea1edfaa58a02dd7e01f4eb99" translate="yes" xml:space="preserve">
          <source>Indicates that the byte array should be encoded using Base64 if the stream is converted to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25db50585acfb1202a099fa2722611a6cc921c5" translate="yes" xml:space="preserve">
          <source>Indicates that the byte array should be encoded using Base64url if the stream is converted to JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac8a0d426fb7ba10e8ea8c3c5c63d603e5eef4f" translate="yes" xml:space="preserve">
          <source>Indicates that the client application binding to this service considers the service to be more important than the app itself. See &lt;a href=&quot;https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT&quot;&gt;BIND_ABOVE_CLIENT&lt;/a&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf6698ea0cf555cee9430c78c30389daa6fd1e3" translate="yes" xml:space="preserve">
          <source>Indicates that the contact has been made by a designated pointing device (e.g. a pen) instead of a finger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b94ea62148f25b585c81ad44b7e08cc738319d" translate="yes" xml:space="preserve">
          <source>Indicates that the contact has been made by a fiducial object (e.g. a knob or other token) instead of a finger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deadd8eaa3ac56f9552263f9e588960601e17468" translate="yes" xml:space="preserve">
          <source>Indicates that the control for expanding the tree to show child items, should be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234cf80536173936400cc44914a5ddbf06bc39a9" translate="yes" xml:space="preserve">
          <source>Indicates that the data in the texture follows the OpenGL convention of coordinate systems, meaning Y is running from bottom to top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5d161fd9155b16d5d73ffcf37a1aede4d24fe2" translate="yes" xml:space="preserve">
          <source>Indicates that the data in the texture has Y running from top to bottom, which is typical with regular, unflipped image data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dc1e6a165c38f2fb9ff704f658f68a1ae37b34" translate="yes" xml:space="preserve">
          <source>Indicates that the device synthesizes mouse events. This enum value has been introduced in Qt 5.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab5e43e3890a36b4a9f03930ad07b8b55a4caae" translate="yes" xml:space="preserve">
          <source>Indicates that the dialog doesn't allow creating directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1220cdbead7f3cf264b75247deb5b5a66319ba4e" translate="yes" xml:space="preserve">
          <source>Indicates that the drawing performed in &lt;a href=&quot;qopenglwindow#paintGL&quot;&gt;paintGL&lt;/a&gt;() does not cover the entire window. In this case an extra framebuffer object is created under the hood, and rendering performed in &lt;a href=&quot;qopenglwindow#paintGL&quot;&gt;paintGL&lt;/a&gt;() will target this framebuffer. This framebuffer is then blitted onto the window surface's default framebuffer after each paint. This allows having &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt;-based drawing code in &lt;a href=&quot;qopenglwindow#paintGL&quot;&gt;paintGL&lt;/a&gt;() which only repaints a smaller area at a time, because, unlike NoPartialUpdate, the previous content is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0b89c6a5b596f6b8922153c0699db307bd9138" translate="yes" xml:space="preserve">
          <source>Indicates that the engine should antialias edges of primitives if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9822e60ea9bee7e406f046d94fbc5e00963bdda" translate="yes" xml:space="preserve">
          <source>Indicates that the engine should antialias text if possible. To forcibly disable antialiasing for text, do not use this hint. Instead, set &lt;a href=&quot;qfont#StyleStrategy-enum&quot;&gt;QFont::NoAntialias&lt;/a&gt; on your font's style strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e39d8a2443c123004afea58a2bffbec18d2e671" translate="yes" xml:space="preserve">
          <source>Indicates that the engine should use a smooth pixmap transformation algorithm (such as bilinear) rather than nearest neighbor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ace406cbbc7d9e7219d4d9e66d26c97c82574ff" translate="yes" xml:space="preserve">
          <source>Indicates that the entire window surface will redrawn on each update and so no additional framebuffers are needed. This is the setting used in most cases and is equivalent to how drawing directly via &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt; would function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581fbcb863b2b34479852210c36e3ed5bc6fc775" translate="yes" xml:space="preserve">
          <source>Indicates that the extended file area failed to pass a consistency check. Used in conjunction with function codes 20 and 21. The exception code does not refer to any parity settings of the transmission line but only to the servers' internal memory of file records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14cf134bb2ecc2f58514db0a0e630905fb53ff3" translate="yes" xml:space="preserve">
          <source>Indicates that the filter runnable's associated &lt;a href=&quot;qabstractvideofilter&quot;&gt;QAbstractVideoFilter&lt;/a&gt; is the last in the corresponding &lt;a href=&quot;qml-qtmultimedia-videooutput&quot;&gt;VideoOutput&lt;/a&gt; type's filters list, meaning that the returned frame is the one that is going to be presented to the scene graph without invoking any further filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab67882f2e56cad24af1da2159ce9105f4014b2" translate="yes" xml:space="preserve">
          <source>Indicates that the gateway was unable to allocate an internal communication path from the input port to the output port for processing the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96bfe0da685b96fbb633f6dfce3c13a08c80e61" translate="yes" xml:space="preserve">
          <source>Indicates that the graph will be rendered directly on the window background. Clears the whole window before rendering the graph, including the areas outside the graph. Since the graphs in this rendering mode are drawn on the window background under other QML items, the regular QML window clearing before rendering is suppressed. The graphs handle the clearing themselves instead. If the surface format of the window supports antialiasing, it will be used (see &lt;code&gt;QtDataVisualization::qDefaultSurfaceFormat()&lt;/code&gt;). This rendering mode offers the best performance at the expense of non-standard QML behavior. For example, the graphs do not obey the z ordering of QML items and the opacity value has no effect on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36ec80b275ecb097b6ad1263a55faf1ffc46352" translate="yes" xml:space="preserve">
          <source>Indicates that the implementation of &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() does not render outside the area reported from &lt;a href=&quot;qsgrendernode#rect&quot;&gt;rect&lt;/a&gt;() in item coordinates. Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the software backend can continue to use the more optimal partial update path when all render nodes in the scene have this flag set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70433ec9e42f1120328e91c8b0f61f9c8ff10d02" translate="yes" xml:space="preserve">
          <source>Indicates that the implementation of &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() writes out opaque pixels for the entire area reported from &lt;a href=&quot;qsgrendernode#rect&quot;&gt;rect&lt;/a&gt;(). By default the renderers must assume that &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() can also output semi or fully transparent pixels. Setting this flag can improve performance in some cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59600f5109e9293ee7b9bc862ecfe41645a6147a" translate="yes" xml:space="preserve">
          <source>Indicates that the implementations of &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;() conforms to scenegraph expectations by only generating a Z value of 0 in scene coordinates which is then transformed by the matrices retrieved from &lt;a href=&quot;qsgrendernode-renderstate#projectionMatrix&quot;&gt;RenderState::projectionMatrix&lt;/a&gt;() and &lt;a href=&quot;qsgrendernode#matrix&quot;&gt;matrix&lt;/a&gt;(), as described in the notes for &lt;a href=&quot;qsgrendernode#render&quot;&gt;render&lt;/a&gt;(). Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the batching OpenGL renderer can continue to use a more optimal path when all render nodes in the scene have this flag set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087f1cde527359cb9c8897d7da8633f011b690a6" translate="yes" xml:space="preserve">
          <source>Indicates that the input method has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc551bbeee0adc307d0aef952f9204ade628bc9a" translate="yes" xml:space="preserve">
          <source>Indicates that the input mode has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea8b5c6a0fc54ff98e0d0e35b8821cbe32dce53" translate="yes" xml:space="preserve">
          <source>Indicates that the item has a check state indicator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3276e91721da5048ee28ebe0ad846f6c3df37a4e" translate="yes" xml:space="preserve">
          <source>Indicates that the item has a decoration role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dc60a548d7560d2a65ab2235e36c3df4691e74" translate="yes" xml:space="preserve">
          <source>Indicates that the item has a display role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525353780e76592ec0bfcff460a4f04133b9ba7a" translate="yes" xml:space="preserve">
          <source>Indicates that the item's background is rendered using alternateBase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8b3bf39d5330809265de4c546688a9ceca7ab2" translate="yes" xml:space="preserve">
          <source>Indicates that the layout direction for the widget is right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673da28dec5c7e02f929a518b3c7d86b4e43441b" translate="yes" xml:space="preserve">
          <source>Indicates that the lines do not intersect; i.e. they are parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b3a3fcf7a0f281f9aa5fda476dbd4c81dd7ef" translate="yes" xml:space="preserve">
          <source>Indicates that the list returned by &lt;a href=&quot;qtouchevent-touchpoint#rawScreenPositions&quot;&gt;QTouchEvent::TouchPoint::rawScreenPositions&lt;/a&gt;() may contain one or more positions for each touch point. This is relevant when the touch input gets filtered or corrected on driver level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503acde73e21d76d1be24c24e1029720c0db844e" translate="yes" xml:space="preserve">
          <source>Indicates that the media is playing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff51520afbac180b010c462b8eff84c694df6d0" translate="yes" xml:space="preserve">
          <source>Indicates that the model is readonly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b510e617a305a8d969d1014ed3f8f24881792116" translate="yes" xml:space="preserve">
          <source>Indicates that the mouse event was synthesized by the application. This allows distinguishing application-generated mouse events from the ones that are coming from the system or are synthesized by Qt. This value was introduced in Qt 5.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd331d1341575993679ab3a5df660fea55a6af5" translate="yes" xml:space="preserve">
          <source>Indicates that the mouse event was synthesized from a touch event by the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca23c72bef553c7bffbffd991a17d10197f5a4ca" translate="yes" xml:space="preserve">
          <source>Indicates that the mouse event was synthesized from an unhandled touch event by Qt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404213e805d106ab1deab98ed5b861fd2f3fc562" translate="yes" xml:space="preserve">
          <source>Indicates that the native Carbon size grip should be opaque instead of transparent (the default). This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt; and is set by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a80f73b0b181135b085389553d84113359c2ea" translate="yes" xml:space="preserve">
          <source>Indicates that the normalized position is available, meaning that normalizedPos() returns a valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13defbaea6a8b81fe607bbc16cb3c098c6efddb" translate="yes" xml:space="preserve">
          <source>Indicates that the output should be added to the list of &lt;a href=&quot;qmake-variable-reference#pre-targetdeps&quot;&gt;PRE_TARGETDEPS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fb5e2f15dead67d8b0c931bf83d840f7a46f55" translate="yes" xml:space="preserve">
          <source>Indicates that the output should not be added to the list of objects to be linked in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe38eee5395093bbf0b70385e425ce6444a17947" translate="yes" xml:space="preserve">
          <source>Indicates that the pixmap fragments to be drawn are opaque. Opaque fragments are potentially faster to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fcde649e4a5a819d0003c47caf47f000b51470" translate="yes" xml:space="preserve">
          <source>Indicates that the previous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c527a4d8da474e4453bd54309c1e3d1e42b6ba6" translate="yes" xml:space="preserve">
          <source>Indicates that the section is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d12ef1330abed083d43d35277b46e000c845cd" translate="yes" xml:space="preserve">
          <source>Indicates that the sort indicator should be pointing down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a689b510f9fb5497453d9b55b61618d4c640a949" translate="yes" xml:space="preserve">
          <source>Indicates that the sort indicator should be pointing up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3aa4d4a8853d8b2ec7dcb2eaf382941bda8b88" translate="yes" xml:space="preserve">
          <source>Indicates that the string contains a MIME message (according to &lt;a href=&quot;https://tools.ietf.org/html/rfc2045&quot;&gt;https://tools.ietf.org/html/rfc2045&lt;/a&gt;){RFC 2045}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92e1b8b1ced13e6a57a16ab6c849ebfc91c37fa" translate="yes" xml:space="preserve">
          <source>Indicates that the string contains a Perl-Compatible Regular Expression pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7a9f64fd77be4e1903868520938188325201e3" translate="yes" xml:space="preserve">
          <source>Indicates that the string contains a URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82aa54cabd985546394faf3533c59a3d99286654" translate="yes" xml:space="preserve">
          <source>Indicates that the string contains data encoded using Base64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f462da10384c66cf9bc1cc5e8df6aacf88348b2" translate="yes" xml:space="preserve">
          <source>Indicates that the string contains data encoded using Base64url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3906df11d99b6300dbbe77245be34c8e34794e4f" translate="yes" xml:space="preserve">
          <source>Indicates that the target uses the named Qt 5 modules. The target will be linked to the specified modules, use the include directories installed by those modules, use the COMPILE_DEFINITIONS set by those modules, and use the COMPILE_FLAGS set by the modules. The LINK_PRIVATE or LINK_PUBLIC specifiers can optionally be specified. If LINK_PRIVATE is specified then the modules are not made part of the link interface of the target. See the documentation for &lt;a href=&quot;https://cmake.org/cmake/help/latest/command/target_link_libraries.html#&quot;&gt;target_link_libraries&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875e6adf9b473c95388c8911774877ab2de7eac6" translate="yes" xml:space="preserve">
          <source>Indicates that the tree branch is expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a56cb2677ca809bb214c359c86bda85804188e0" translate="yes" xml:space="preserve">
          <source>Indicates that the variables specified here are replaced with $(QMAKE_COMP_VARNAME) when referred to in the pro file as $(VARNAME).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268ef04381ecede32f59f603fb27210f3c360465" translate="yes" xml:space="preserve">
          <source>Indicates that the virtual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffbc548ba6dc23bb0eeccaf888e5827b0aea243" translate="yes" xml:space="preserve">
          <source>Indicates that the widget appearance was modified by a &lt;a href=&quot;stylesheet&quot;&gt;style sheet&lt;/a&gt;. WA_StyleSheet will also be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db79641fd4657dfb642e578a3e08bb8a38b5d78" translate="yes" xml:space="preserve">
          <source>Indicates that the widget contents are north-west aligned and static. On resize, such a widget will receive paint events only for parts of itself that are newly visible. This flag is set or cleared by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f752b7c6ccc44a5f9cf4668f5c7e3d50bac60d" translate="yes" xml:space="preserve">
          <source>Indicates that the widget does not have a state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e0ae629e7080c695247a52d5090a0949b0473b" translate="yes" xml:space="preserve">
          <source>Indicates that the widget does not want ChildAdded or ChildRemoved events sent to its parent. This is rarely necessary but can help to avoid automatic insertion widgets like splitters and layouts. This is set by a widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc676a16ca11a6e9e49a7c67883fdb3ad467330" translate="yes" xml:space="preserve">
          <source>Indicates that the widget does not want to receive ChildAdded or ChildRemoved events sent from its children. This is set by a widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a108c1915cca3f5837b7bc4e859678a04a2296" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has a cursor of its own. This flag is set or cleared by &lt;a href=&quot;qwidget#cursor-prop&quot;&gt;QWidget::setCursor&lt;/a&gt;() and &lt;a href=&quot;qwidget#cursor-prop&quot;&gt;QWidget::unsetCursor&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2622573cac7894023c858079c34a867cfd273fb" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has a font of its own. This flag is set or cleared by &lt;a href=&quot;qwidget#font-prop&quot;&gt;QWidget::setFont&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4106deb1fc2ac126d2b03fb893d6766bbba51d8e" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has a palette of its own. This flag is set or cleared by &lt;a href=&quot;qwidget#palette-prop&quot;&gt;QWidget::setPalette&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e138b6adb02466f9aa4fc205addf1acb275ddd" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has a style of its own. This flag is set or cleared by &lt;a href=&quot;qwidget#setStyle&quot;&gt;QWidget::setStyle&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f07cc86e3e14ba3b2be803a90240891fa957926" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has an explicit position. This is set/cleared by &lt;a href=&quot;qwidget#pos-prop&quot;&gt;QWidget::move&lt;/a&gt;() and by &lt;a href=&quot;qwidget#geometry-prop&quot;&gt;QWidget::setGeometry&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a95f14a9812746e7e7ea07f18be861dc4e301d4" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has an explicit size. This flag is set or cleared by &lt;a href=&quot;qwidget#size-prop&quot;&gt;QWidget::resize&lt;/a&gt;() and &lt;a href=&quot;qwidget#geometry-prop&quot;&gt;QWidget::setGeometry&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebd8f3b2a469c92bba88617ac0b741d8eea8281" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has mouse tracking enabled. See &lt;a href=&quot;qwidget#mouseTracking-prop&quot;&gt;QWidget::mouseTracking&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3c6fa3238ada9addcffa2fb41ba6c1a16b05dd" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has no background, i.e. when the widget receives paint events, the background is not automatically repainted. &lt;b&gt;Note&lt;/b&gt;: Unlike WA_OpaquePaintEvent, newly exposed areas are &lt;b&gt;never&lt;/b&gt; filled with the background (e.g., after showing a window for the first time the user can see &quot;through&quot; it until the application processes the paint events). This flag is set or cleared by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403e4b558f43e6754c0715f61012fd1567e1967b" translate="yes" xml:space="preserve">
          <source>Indicates that the widget has tablet tracking enabled. See &lt;a href=&quot;qwidget#tabletTracking-prop&quot;&gt;QWidget::tabletTracking&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d774f169502d6d2d32dcce98f2dd70db6eeda07" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a drawer on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6471983b12e09cdbd04425009c4b85ed841e60" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a pop-up top-level window, i.e. that it is modal, but has a window system frame appropriate for pop-up menus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fff8db5b84fde282629546de4b0581785c43e19" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a tool window. A tool window is often a small window with a smaller than usual title bar and decoration, typically used for collections of tool buttons. If there is a parent, the tool window will always be kept on top of it. If there isn't a parent, you may consider using Qt::WindowStaysOnTopHint as well. If the window system supports it, a tool window can be decorated with a somewhat lighter frame. It can also be combined with Qt::FramelessWindowHint. On &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;, tool windows correspond to the &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nspanel&quot;&gt;NSPanel&lt;/a&gt; class of windows. This means that the window lives on a level above normal windows making it impossible to put a normal window on top of it. By default, tool windows will disappear when the application is inactive. This can be controlled by the &lt;a href=&quot;qt#WidgetAttribute-enum&quot;&gt;Qt::WA_MacAlwaysShowToolWindow&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9fc1999ab777fa43c3648009992976f37cfac5" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a tooltip. This is used internally to implement &lt;a href=&quot;qwidget#toolTip-prop&quot;&gt;tooltips&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e890d3209595c84049d59db5a314c74c6fe4a2f" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a window that should be decorated as a dialog (i.e., typically no maximize or minimize buttons in the title bar). This is the default type for &lt;a href=&quot;qdialog&quot;&gt;QDialog&lt;/a&gt;. If you want to use it as a modal dialog, it should be launched from another window, or have a parent and used with the &lt;a href=&quot;qwidget#windowModality-prop&quot;&gt;QWidget::windowModality&lt;/a&gt; property. If you make it modal, the dialog will prevent other top-level windows in the application from getting any input. We refer to a top-level window that has a parent as a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5581a13e1619030729ea95c52739ca7b5d8a4a5a" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is a window, usually with a window system frame and a title bar, irrespective of whether the widget has a parent or not. Note that it is not possible to unset this flag if the widget does not have a parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bd2368296fb8cea9788277594b567e269eaf07" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a601afb3b3b3410dd27b97b32aef06042c8f7c" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is disabled, i.e. it does not receive any mouse or keyboard events. There is also a getter functions &lt;a href=&quot;qwidget#enabled-prop&quot;&gt;QWidget::isEnabled&lt;/a&gt;(). This is set/cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f59952a84bc7b3d646ee6b2bcada559a65d759" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is explicitly disabled, i.e. it will remain disabled even when all its ancestors are set to the enabled state. This implies WA_Disabled. This is set/cleared by &lt;a href=&quot;qwidget#enabled-prop&quot;&gt;QWidget::setEnabled&lt;/a&gt;() and &lt;a href=&quot;qwidget#setDisabled&quot;&gt;QWidget::setDisabled&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288b0ee153849a07e1db0d2094b8f5beb562f8be" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is hidden or is not a part of the viewable Desktop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57988ad4ce8d8398b82120b88ca4d2271679dd53" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is mapped on screen. This is set/cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1392b20b5adbe2de97052f64920f80fb5eeb8e72" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is outside the valid range of the window system's coordinate system. A widget outside the valid range cannot be mapped on screen. This is set/cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6437a1ec8a9d318b237761ceb93e6474cbfb0aa3" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is styled using a &lt;a href=&quot;stylesheet&quot;&gt;style sheet&lt;/a&gt;. WA_StyleSheet is set whenever a widget is subject to a style sheet, even if the style sheet did not affect the widget appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a02540218877d4d728d8ae5eadb81bcce22af1" translate="yes" xml:space="preserve">
          <source>Indicates that the widget is under the mouse cursor. The value is not updated correctly during drag and drop operations. There is also a getter function, &lt;a href=&quot;qwidget#underMouse&quot;&gt;QWidget::underMouse&lt;/a&gt;(). This flag is set or cleared by the Qt kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ace163e944d0bba2cc4ffc04930703a0a084ab2" translate="yes" xml:space="preserve">
          <source>Indicates that the widget paints all its pixels when it receives a paint event. Thus, it is not required for operations like updating, resizing, scrolling and focus changes to erase the widget before generating paint events. The use of WA_OpaquePaintEvent provides a small optimization by helping to reduce flicker on systems that do not support double buffering and avoiding computational cycles necessary to erase the background prior to painting. &lt;b&gt;Note&lt;/b&gt;: Unlike WA_NoSystemBackground, WA_OpaquePaintEvent makes an effort to avoid transparent window backgrounds. This flag is set or cleared by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050a86842707995d9b4b10155388f62358eddbc6" translate="yes" xml:space="preserve">
          <source>Indicates that the widget should have a translucent background, i.e., any non-opaque regions of the widgets will be translucent because the widget will have an alpha channel. Setting this flag causes WA_NoSystemBackground to be set. On Windows the widget also needs the &lt;a href=&quot;qt#WindowType-enum&quot;&gt;Qt::FramelessWindowHint&lt;/a&gt; window flag to be set. This flag is set or cleared by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9868b234c68cd77ede9348802db55bc953f23318" translate="yes" xml:space="preserve">
          <source>Indicates that the widget wants &lt;a href=&quot;qlayout&quot;&gt;QLayout&lt;/a&gt; to operate on the entire &lt;a href=&quot;qwidget#rect-prop&quot;&gt;QWidget::rect&lt;/a&gt;(), not only on &lt;a href=&quot;qwidget#contentsRect&quot;&gt;QWidget::contentsRect&lt;/a&gt;(). This is set by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42733c57b7be6c82388025191093289b1838e5a8" translate="yes" xml:space="preserve">
          <source>Indicates that the widget wants to continue operating normally in &quot;What's This?&quot; mode. This is set by the widget's author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e938d9ccecc0a26cedcce31445140f66935a0711" translate="yes" xml:space="preserve">
          <source>Indicates that the widget wants to draw directly onto the screen. Widgets with this attribute set do not participate in composition management, i.e. they cannot be semi-transparent or shine through semi-transparent overlapping widgets. &lt;b&gt;Note&lt;/b&gt;: This flag is only supported on X11 and it disables double buffering. On Qt for Embedded Linux, the flag only works when set on a top-level widget and it relies on support from the active screen driver. This flag is set or cleared by the widget's author. To render outside of Qt's paint system, e.g., if you require native painting primitives, you need to reimplement &lt;a href=&quot;qwidget#paintEngine&quot;&gt;QWidget::paintEngine&lt;/a&gt;() to return 0 and set this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625d1c36513522611c5698352041ee3be45d546f" translate="yes" xml:space="preserve">
          <source>Indicates that the widget's ancestors are kept non-native even though the widget itself is native.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccfcc591583b7c527f65f7979dbb1779419da4d2" translate="yes" xml:space="preserve">
          <source>Indicates that the window handle is horizontal instead of vertical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7252a41ed693fab1f3093fd88b3f368813e918" translate="yes" xml:space="preserve">
          <source>Indicates that the window is a sheet on &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;. Since using a sheet implies window modality, the recommended way is to use &lt;a href=&quot;qwidget#windowModality-prop&quot;&gt;QWidget::setWindowModality&lt;/a&gt;(), or &lt;a href=&quot;qdialog#open&quot;&gt;QDialog::open&lt;/a&gt;(), instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61bd4fdcaa4c382a23a02e986b46e89a47b3cf90" translate="yes" xml:space="preserve">
          <source>Indicates that the window is a splash screen. This is the default type for &lt;a href=&quot;qsplashscreen&quot;&gt;QSplashScreen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3fc3220d0a1fc50fc21ebdd50db5d7325809b3" translate="yes" xml:space="preserve">
          <source>Indicates that the window is marked as modified. On some platforms this flag will do nothing, on others (including &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt; and Windows) the window will take a modified appearance. This flag is set or cleared by &lt;a href=&quot;qwidget#windowModified-prop&quot;&gt;QWidget::setWindowModified&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46a1a3f65a05a7f6a30fa171e2e0fbff9567183" translate="yes" xml:space="preserve">
          <source>Indicates that the window represents a cover window, which is shown when the application is minimized on some platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eabdac01c455ebed23471c1a353868466563af3" translate="yes" xml:space="preserve">
          <source>Indicates that this widget is a sub-window, such as a &lt;a href=&quot;qmdisubwindow&quot;&gt;QMdiSubWindow&lt;/a&gt; widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55169170f53df0b6f459ae3b1a2a8631e78f83c8" translate="yes" xml:space="preserve">
          <source>Indicates that this widget is the desktop. This is the type for QDesktopWidget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f310a392ba91bed408a93a2ded77e35da7f27d" translate="yes" xml:space="preserve">
          <source>Indicates that this widget should get a &lt;a href=&quot;qfocusframe&quot;&gt;QFocusFrame&lt;/a&gt; around it. Some widgets draw their own focus halo regardless of this attribute. Not that the &lt;a href=&quot;qwidget#focusPolicy-prop&quot;&gt;QWidget::focusPolicy&lt;/a&gt; also plays the main role in whether something is given focus or not, this only controls whether or not this gets the focus frame. This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1262fdb32f9a161fd7b6802148ec564ceb575934" translate="yes" xml:space="preserve">
          <source>Indicates that this window object is a handle representing a native platform window created by another process or by manually using native code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1d230243b47690c4a8fde0dea119740567492f" translate="yes" xml:space="preserve">
          <source>Indicates that touch area information is available, meaning that the rect() family of functions in the touch points return valid rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c141503c3966b7183bda72776664eee59810acf8" translate="yes" xml:space="preserve">
          <source>Indicates that translation functions (&lt;code&gt;qsTr()&lt;/code&gt;, for example) should be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a8d081a3351626a2e3db9edef9247931821366" translate="yes" xml:space="preserve">
          <source>Indicates that updates are blocked (including the system background). This flag is set or cleared by the Qt kernel. &lt;b&gt;Warning&lt;/b&gt;: This flag must</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf3ca8f93eec2200e03a2fee7411c1be93ceaee" translate="yes" xml:space="preserve">
          <source>Indicates that updates are explicitly disabled for the widget; i.e. it will remain disabled even when all its ancestors are set to the updates-enabled state. This implies WA_UpdatesDisabled. This is set/cleared by &lt;a href=&quot;qwidget#updatesEnabled-prop&quot;&gt;QWidget::setUpdatesEnabled&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d228712ef4cfb3c1a42fff7605361a1d8a1e6178" translate="yes" xml:space="preserve">
          <source>Indicates that velocity information is available, meaning that velocity() returns a valid vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c642b7ef4acbd4c96d2f924febb9ff46df508f" translate="yes" xml:space="preserve">
          <source>Indicates the HTTP request method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76904e3c56b86fd6185e7a9dabd3a49fb4bd9cc7" translate="yes" xml:space="preserve">
          <source>Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c36bd3873970924c47ebcea988acbdf25f7e25" translate="yes" xml:space="preserve">
          <source>Indicates the MIME Content-Type of the POST methods in authenticated calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1765bfa215efbf52cc9f4a36b224db79fbcce4" translate="yes" xml:space="preserve">
          <source>Indicates the capture mode is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84868bd6b0e544ee791de48b6e92940108218a24" translate="yes" xml:space="preserve">
          <source>Indicates the controller is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f86aefcb76ecc74c2a1d7aeec756aaad05b0c9" translate="yes" xml:space="preserve">
          <source>Indicates the current authentication status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd2a23a368b41be9a8054ea693383fd420e4345" translate="yes" xml:space="preserve">
          <source>Indicates the currently active page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517e61ecaf5014911daa87c19692d5eaeb5bab5d" translate="yes" xml:space="preserve">
          <source>Indicates the currently active page. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca816a8abec626366a33379ee2c8de8c42196234" translate="yes" xml:space="preserve">
          <source>Indicates the degree of overall image gain adjustment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000b374b4457c5d8dc24841e41913970bc9fcd96" translate="yes" xml:space="preserve">
          <source>Indicates the digital zoom ratio when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9ed67b6b0ca0cd36ce7a012499c849a356361e" translate="yes" xml:space="preserve">
          <source>Indicates the direction of contrast processing applied by the camera when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef51e06c043602908524d6cc336db6b48bacabf" translate="yes" xml:space="preserve">
          <source>Indicates the direction of saturation processing applied by the camera when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fe1b901372aec8b777664c1f72047c40f8846c" translate="yes" xml:space="preserve">
          <source>Indicates the direction of sharpness processing applied by the camera when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38f201f52db41b8f1b411196bd5bf274527e26f" translate="yes" xml:space="preserve">
          <source>Indicates the end of a block of editing operations on the document that should appear as a single operation from an undo/redo point of view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d328ad06c89af98af259ee246754b090790a348" translate="yes" xml:space="preserve">
          <source>Indicates the equivalent focal length assuming a 35mm film camera, in mm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eb0474718631d99edfbf9c8dae7823edc1924c" translate="yes" xml:space="preserve">
          <source>Indicates the exposure mode set when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f4074e381521e72de2306a9a380d994aabb091" translate="yes" xml:space="preserve">
          <source>Indicates the graph will be first rendered to an offscreen surface that is then drawn during normal QML item rendering. The rendered image is antialiased using the multisampling method if it is supported in the current environment and the &lt;a href=&quot;qml-qtdatavisualization-abstractgraph3d#msaaSamples-prop&quot;&gt;msaaSamples&lt;/a&gt; property value is greater than zero. This rendering mode offers good quality and normal QML item behavior at the expense of performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81ab744c51e7013292cbec6fff92cd41efd0c2f" translate="yes" xml:space="preserve">
          <source>Indicates the header file for creating a precompiled header file, to increase the compilation speed of a project. Precompiled headers are currently only supported on some platforms (Windows - all MSVC project types, Apple - Xcode, Makefile, Unix - gcc 3.3 and up).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0f76ad1d26c45dc930f49238e9771158b91ffb" translate="yes" xml:space="preserve">
          <source>Indicates the indicator is checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dae7ac1abf40b4cf7002bb10fdf40445155a060" translate="yes" xml:space="preserve">
          <source>Indicates the item accepts drag and drop events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15eb5dd448dc0292de97d8906b7e3b1689358ff" translate="yes" xml:space="preserve">
          <source>Indicates the item has visual content and should be rendered by the scene graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b306c0c2cb220ec2fd329c99d063582858ea93fb" translate="yes" xml:space="preserve">
          <source>Indicates the item is a focus scope. See &lt;a href=&quot;qtquick-input-focus#&quot;&gt;Keyboard Focus in Qt Quick&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b71a8173e293c79910d779fee60d48750725d8" translate="yes" xml:space="preserve">
          <source>Indicates the item supports text input methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ab86b5d139ae9a7a8fe518a27de819bb54cf8a" translate="yes" xml:space="preserve">
          <source>Indicates the kind of action performed by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8021d78bb5d393b3daf8aa28342cc9321fe5837" translate="yes" xml:space="preserve">
          <source>Indicates the latest received error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2998f2a6613fed525c53d55601bc41808c15d922" translate="yes" xml:space="preserve">
          <source>Indicates the locale should be taken into consideration in the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11332482f55ecbe87cb1e08a09fcffe82128ea0b" translate="yes" xml:space="preserve">
          <source>Indicates the menu item points to a sub-menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2690678619d0cf8d73def5fc8dbf23c433171c" translate="yes" xml:space="preserve">
          <source>Indicates the operation this reply is processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb57a66f059ab4a71d6a084294c90e3b84dacea4" translate="yes" xml:space="preserve">
          <source>Indicates the progress of an operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634834a0546db7255db2ec9d083a601d1c0ee963" translate="yes" xml:space="preserve">
          <source>Indicates the progress of an operation. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb10f647d5d4d3b1ed5cd78e1f0682fcd43d1d53" translate="yes" xml:space="preserve">
          <source>Indicates the role of the controller object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791e57b43d5babebd9d17c9ff6be78d59a2248dc" translate="yes" xml:space="preserve">
          <source>Indicates the severity of a JavaScript console message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50119cae91e82511a07ce12a816b7b70d18c6fa" translate="yes" xml:space="preserve">
          <source>Indicates the signature method to be used to sign requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb28a637b3ea10ebec3f8fa19c8efa9e8f8ff5ea" translate="yes" xml:space="preserve">
          <source>Indicates the start of a block of editing operations on the document that should appear as a single operation from an undo/redo point of view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d329f7cbf06130e131d2a1a8437f1d29ab766f" translate="yes" xml:space="preserve">
          <source>Indicates the state of the controller object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7369b4167a51c473f714f3efa359f7a8d2d1101" translate="yes" xml:space="preserve">
          <source>Indicates the type of DNS lookup that was performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343c7b7d2f9dd674b2f86f3757e0a9df7a9d1684" translate="yes" xml:space="preserve">
          <source>Indicates the type of scene that was shot. It can also be used to record the mode in which the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c860ef9f48dd6deda7a160b5f32bb150a3f51e66" translate="yes" xml:space="preserve">
          <source>Indicates the white balance mode set when the image was shot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09cfa81cf878c8342afdabb626e619d5e0085bf" translate="yes" xml:space="preserve">
          <source>Indicates the widget can choose between alternative sizes for widgets to avoid clipping. This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc966c8a350cc5857e647df521d98408b55529ae" translate="yes" xml:space="preserve">
          <source>Indicates the widget should be drawn using a styled background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ed1a7a2c83a220bed40cef9eabb87d4918bb55" translate="yes" xml:space="preserve">
          <source>Indicates the widget should have the mini size for widgets in &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;. This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5d21d8316ac23e2136fd7ea3f3d8023f94bde6" translate="yes" xml:space="preserve">
          <source>Indicates the widget should have the normal size for widgets in &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;. This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5792d228951f2c8a81177cd016b25debfb1435" translate="yes" xml:space="preserve">
          <source>Indicates the widget should have the small size for widgets in &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;. This attribute is only applicable to &lt;a href=&quot;internationalization#macos&quot;&gt;macOS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02f8144b70cace5900eff2fbe10c695ef7effff" translate="yes" xml:space="preserve">
          <source>Indicates this item should visually clip its children so that they are rendered only within the boundaries of this item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7695b24e5c6e8b2454784c96b0e9af98fdee52c6" translate="yes" xml:space="preserve">
          <source>Indicates to the compiler that the parameter with the specified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4881a4596a77a290f0d69a31b5a94565912c57ad" translate="yes" xml:space="preserve">
          <source>Indicates what type of Bluetooth address the remote device uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30d62a6500ac5050d736040506f464e0a87b6ed" translate="yes" xml:space="preserve">
          <source>Indicates when Canvas is able to provide a drawing context to operate on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c408bf2b90c7890644386b34769cdac597a6d31a" translate="yes" xml:space="preserve">
          <source>Indicates whether a palette was explicitly set on the &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt;. This value was added in Qt 5.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab4d45498d9d568074ed0425b73a21611339906" translate="yes" xml:space="preserve">
          <source>Indicates whether a policy must include subdomains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255a699ef5102b325764a7d8b7dbb22cc369e7f8" translate="yes" xml:space="preserve">
          <source>Indicates whether a video surface has been started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020cacfe86030ce9bd967ff22e4596f2c42d7287" translate="yes" xml:space="preserve">
          <source>Indicates whether crossfading is supported or not. If crossfading is not supported, &lt;a href=&quot;qmediagaplessplaybackcontrol#setCrossfadeTime&quot;&gt;setCrossfadeTime&lt;/a&gt;() will be ignored and &lt;a href=&quot;qmediagaplessplaybackcontrol#crossfadeTime&quot;&gt;crossfadeTime&lt;/a&gt;() will always return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f704b49f5be86ac0db9f8be242bf2f0aba7fb4f" translate="yes" xml:space="preserve">
          <source>Indicates whether duplicate reading values should be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184d58e0123d1df0eda6106c0668e460ce4e3c70" translate="yes" xml:space="preserve">
          <source>Indicates whether flat shading for surfaces is supported by the current system. It requires at least GLSL version 1.2 with GL_EXT_gpu_shader4 extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909f29dbf35ae59e65d6ce4d41fab0a116ba08bb" translate="yes" xml:space="preserve">
          <source>Indicates whether or not StandardButtons in &lt;a href=&quot;qdialogbuttonbox&quot;&gt;QDialogButtonBox&lt;/a&gt; should have icons or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded63dec8c5746d997ae13224d2893fe18debaae" translate="yes" xml:space="preserve">
          <source>Indicates whether or not the menu bar draws separators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7415450531a49ddad7f5e605307c337bd9a7450a" translate="yes" xml:space="preserve">
          <source>Indicates whether the JavaScript dialog request has been accepted by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9985459aea15dd89b273416d04969ba94c7b1c" translate="yes" xml:space="preserve">
          <source>Indicates whether the Network Access API should automatically follow a HTTP redirect response or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea72e31283a0a023cdf858d30e4c4c9ec7667044" translate="yes" xml:space="preserve">
          <source>Indicates whether the audio position can be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e55b5c134d775e614500ca0715bfc138444eeb" translate="yes" xml:space="preserve">
          <source>Indicates whether the authentication dialog request has been accepted by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2959a91e21668475629227eb800a9360bbd9931e" translate="yes" xml:space="preserve">
          <source>Indicates whether the color picker dialog request has been accepted by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e393955826f3c03708b64719ee17a571de4cdde4" translate="yes" xml:space="preserve">
          <source>Indicates whether the context menu request has been handled by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6abb10c7c8316d92098dfc43f591d5a6613e86" translate="yes" xml:space="preserve">
          <source>Indicates whether the file picker dialog request has been handled by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e804dcbb1d1cdf09cf4b067d1bea1df83ced4e" translate="yes" xml:space="preserve">
          <source>Indicates whether the form validation request has been accepted by the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeabea6928d19c713e16fb49f3d9e19a79217ea" translate="yes" xml:space="preserve">
          <source>Indicates whether the network is accessible via this network access manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79faab875042d06b23ec4d9929d055d1c83cb44" translate="yes" xml:space="preserve">
          <source>Indicates whether the selected web content is editable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19587819f1dee23df788c0c3011645fa2d9f296f" translate="yes" xml:space="preserve">
          <source>Indicates whether the server operates over wss (SecureMode) or ws (NonSecureMode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98aff605021318eca1349e2bb5ce61f192bba5d" translate="yes" xml:space="preserve">
          <source>Indicates which direction the sort indicator should be drawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293be7d39745ad803a4ba8ca6722b887e8b9be57" translate="yes" xml:space="preserve">
          <source>Indicates which of four rectangles to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f608dbce6ba75b2317d7825d8529997f56fc9e" translate="yes" xml:space="preserve">
          <source>Indicator</source>
          <target state="translated">Indicator</target>
        </trans-unit>
        <trans-unit id="13dccb915fe56b6412d771d6d2441b8531ce0f3a" translate="yes" xml:space="preserve">
          <source>Indicator Controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5a3bbbae4b3c0cf9df109953c5f557111087d6" translate="yes" xml:space="preserve">
          <source>Indicator for a drop down button, for example, a tool button that displays a menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea755a7503443ac5630b75eac7407cc0bdf332be" translate="yes" xml:space="preserve">
          <source>Individual access:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57732e3d8350a7952f79f4fd12d5d22e65e33ce0" translate="yes" xml:space="preserve">
          <source>Individual items are styled using the &lt;a href=&quot;#item-sub&quot;&gt;::item&lt;/a&gt; subcontrol. In addition to the usually supported pseudo states, &lt;code&gt;item&lt;/code&gt; subcontrol supports the &lt;a href=&quot;#selected-ps&quot;&gt;:selected&lt;/a&gt;, &lt;a href=&quot;#default-ps&quot;&gt;:default&lt;/a&gt;, &lt;a href=&quot;#exclusive-ps&quot;&gt;:exclusive&lt;/a&gt; and the &lt;a href=&quot;#non-exclusive-ps&quot;&gt;non-exclusive&lt;/a&gt; pseudo states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5da9f2a822c7575aa556a7ed33d9501092e4cd" translate="yes" xml:space="preserve">
          <source>Individual items in the selection model are updated by creating a selection of items, and applying them to the selection model. In the following code, we apply a second selection of items to the table model shown above, using the &lt;a href=&quot;qitemselectionmodel#SelectionFlag-enum&quot;&gt;Toggle&lt;/a&gt; command to invert the selection state of the items given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b19c92963b71938c25ec2e3eb680fc9bafc3c4" translate="yes" xml:space="preserve">
          <source>Individual modules might be available only on some platforms, or they might not support all configurations. For example, as Qt WebEngine has Chromium as a third-party dependency, platform or configuration limitations upstream also apply to Qt WebEngine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04a7c83812313ca2df9e1838ee1d81a062a913e" translate="yes" xml:space="preserve">
          <source>Individual provider status and general Location service state are known and communicated when location service is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84101a1fb143495739d3d43ca516ae19873b7782" translate="yes" xml:space="preserve">
          <source>Individual providers are not distinguishable but disabled Location services reflected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f09896fd5fed808060a13b146787149de38bb3a" translate="yes" xml:space="preserve">
          <source>Individual proxies are represented by the &lt;a href=&quot;qnetworkproxy&quot;&gt;QNetworkProxy&lt;/a&gt; class, which is used to describe and configure the connection to a proxy. Proxy types which operate on different levels of network communication are supported, with SOCKS 5 support allowing proxying of network traffic at a low level, and HTTP and FTP proxying working at the protocol level. See &lt;a href=&quot;qnetworkproxy#ProxyType-enum&quot;&gt;QNetworkProxy::ProxyType&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126ca640f481b985b6a5228add32870bb6445d26" translate="yes" xml:space="preserve">
          <source>Individual setting values are specified by declaring properties within a Settings element. All &lt;a href=&quot;qtqml-typesystem-basictypes&quot;&gt;basic type&lt;/a&gt; properties are supported. The recommended approach is to use property aliases in order to get automatic property updates both ways. The following example shows how to use Settings to store and restore the geometry of a window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee49243df3c46824dca7b10bb815d3a64da4d73" translate="yes" xml:space="preserve">
          <source>Individual tabs may be styled using the &lt;a href=&quot;#tab-sub&quot;&gt;::tab&lt;/a&gt; subcontrol. Close buttons using the &lt;a href=&quot;#close-button-sub&quot;&gt;::close-button&lt;/a&gt; The tabs support the &lt;a href=&quot;#only-one-ps&quot;&gt;:only-one&lt;/a&gt;, &lt;a href=&quot;#first-ps&quot;&gt;:first&lt;/a&gt;, &lt;a href=&quot;#last-ps&quot;&gt;:last&lt;/a&gt;, &lt;a href=&quot;#middle-ps&quot;&gt;:middle&lt;/a&gt;, &lt;a href=&quot;#previous-selected-ps&quot;&gt;:previous--selected&lt;/a&gt;, &lt;a href=&quot;#next-selected-ps&quot;&gt;:next-selected&lt;/a&gt;, &lt;a href=&quot;#selected-ps&quot;&gt;:selected&lt;/a&gt; pseudo states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2339b8ad3625abec50c5fec9ccfe1b4c0adb5b6e" translate="yes" xml:space="preserve">
          <source>Indonesian</source>
          <target state="translated">Indonesian</target>
        </trans-unit>
        <trans-unit id="a21901977babc66a5043ff842f00180ec219272c" translate="yes" xml:space="preserve">
          <source>Indonesian Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8beac8ab9f5bc093f922f90d56842f69a46e4021" translate="yes" xml:space="preserve">
          <source>Inequality operator. Returns &lt;code&gt;true&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad04541a97114cf936251380843bf6e455afd883" translate="yes" xml:space="preserve">
          <source>Inequality operator. Returns &lt;code&gt;true&lt;/code&gt; if the guarded pointers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9b7214eb57c837c68d3c802111327987a9da98" translate="yes" xml:space="preserve">
          <source>Inequality operator. Returns the equivalent of !(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628cb1b81f38863192a483b9a82600c5b7df5287" translate="yes" xml:space="preserve">
          <source>Infinities and NaN floating point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c6314984ccfb328261f90b0bbb7f077e8d9d74" translate="yes" xml:space="preserve">
          <source>Infinities and NaN will be converted to Null; no data loss for other values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0219fd54bd5841008b18c414a5b2dea331bad1c5" translate="yes" xml:space="preserve">
          <source>Infinity</source>
          <target state="translated">Infinity</target>
        </trans-unit>
        <trans-unit id="7eb05964e007122497376e15c522bd32f875e40c" translate="yes" xml:space="preserve">
          <source>Inform the front end that a sensor error occurred. Note that this only reports an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f96faaf3323e643039c6f80a19c10cbd9dece01" translate="yes" xml:space="preserve">
          <source>Inform the front end that the sensor has stopped. This can be due to &lt;a href=&quot;qsensorbackend#start&quot;&gt;start&lt;/a&gt;() failing or for some unexpected reason (eg. hardware failure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089b026db149db8ab346924f98fd78bac84a7081" translate="yes" xml:space="preserve">
          <source>Inform the front end that the sensor is busy. This implicitly calls &lt;a href=&quot;qsensorbackend#sensorStopped&quot;&gt;sensorStopped&lt;/a&gt;() and is typically called from &lt;a href=&quot;qsensorbackend#start&quot;&gt;start&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="translated">Information</target>
        </trans-unit>
        <trans-unit id="34375115f832b410043bb2cff007ada1aded2e0a" translate="yes" xml:space="preserve">
          <source>Information Property List Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfb3d0e35036bf315813aeca5e77029fecc6181" translate="yes" xml:space="preserve">
          <source>Information about QML API changes since 5.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3792b3e4ad13023261636033f303c40b0f2093d" translate="yes" xml:space="preserve">
          <source>Information about Unicode on the Web</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4b7006851765dd9f035482db7ba39db0827b87" translate="yes" xml:space="preserve">
          <source>Information about a given handle can be obtained using functions like &lt;a href=&quot;qsplitterhandle#orientation&quot;&gt;orientation&lt;/a&gt;() and &lt;a href=&quot;qsplitterhandle#opaqueResize&quot;&gt;opaqueResize&lt;/a&gt;(), and is retrieved from its parent splitter. Details like these can be used to give custom handles different appearances depending on the splitter's orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda45618e4cf11a950608aae0f70432aacd40be5" translate="yes" xml:space="preserve">
          <source>Information about all available properties is provided through the &lt;a href=&quot;qobject#metaObject&quot;&gt;metaObject&lt;/a&gt;() and &lt;a href=&quot;qobject#dynamicPropertyNames&quot;&gt;dynamicPropertyNames&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80808d66c8491284909bab1cab02bd6424f4241d" translate="yes" xml:space="preserve">
          <source>Information about plugins, important notes on their usage, parameters that can be provided to influence their behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079ec3698cb89a3bb6fe4c76580e256f88fee230" translate="yes" xml:space="preserve">
          <source>Information about the Qt Location GeoServices plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666684df9a210b09ee720c468576aeade583749e" translate="yes" xml:space="preserve">
          <source>Information about the Qt Sensors C++ API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d822ef736dfd9c71e718e4396ba199bf46915039" translate="yes" xml:space="preserve">
          <source>Information about the Qt Sensors QML API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b37589b485cc4284e7e223b014e393c0f65a5f3" translate="yes" xml:space="preserve">
          <source>Information about the Qt Sensors back end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef7483e03a5cbd44f0d20e795fab6d4807f7fee" translate="yes" xml:space="preserve">
          <source>Information about the Sensorfw sensor backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9019a9b2b4a48e11cfe2bdc0f7e917b8192bbe14" translate="yes" xml:space="preserve">
          <source>Information about the current frame and total length of the animation can be obtained using the &lt;a href=&quot;qml-qtquick-animatedimage#currentFrame-prop&quot;&gt;currentFrame&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-animatedimage#frameCount-prop&quot;&gt;frameCount&lt;/a&gt; properties. You can start, pause and stop the animation by changing the values of the &lt;a href=&quot;qml-qtquick-animatedimage#playing-prop&quot;&gt;playing&lt;/a&gt; and &lt;a href=&quot;qml-qtquick-animatedimage#paused-prop&quot;&gt;paused&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c293f0968e026f3fb5a14baee12f2bf90b793ae6" translate="yes" xml:space="preserve">
          <source>Information about the event is passed in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff73d8e393f5ab88d6b4b36243f87e01d6cfc079" translate="yes" xml:space="preserve">
          <source>Information about the features of the DOM implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc0d436a8d2738fde5efddcf15836dfe30e3f75" translate="yes" xml:space="preserve">
          <source>Information about the fonts available in the underlying window system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c63d59b29ff8409dac7ca13574c8f3c4fdfaae1" translate="yes" xml:space="preserve">
          <source>Information about the generic sensor backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d46535de8e4183a58be2474388a0b04166219da" translate="yes" xml:space="preserve">
          <source>Information about the items selected in a view is stored in an instance of the &lt;a href=&quot;qitemselectionmodel&quot;&gt;QItemSelectionModel&lt;/a&gt; class. This maintains model indexes for items in a single model, and is independent of any views. Since there can be many views onto a model, it is possible to share selections between views, allowing applications to show multiple views in a consistent way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c545ece3567013db722c03b761c295a19a77137f" translate="yes" xml:space="preserve">
          <source>Information about the messages will be written to the console the application was launched from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cdd936c8a4f336f555ba9d6a2778b6a54bc5b6" translate="yes" xml:space="preserve">
          <source>Information about the mouse position and button clicks are provided via signals for which event handler properties are defined. The most commonly used involved handling mouse presses and clicks: onClicked, onDoubleClicked, onPressed, onReleased and onPressAndHold. It's also possible to handle mouse wheel events via the onWheel signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468206cef655fcc19409f8df97f4d509046369b2" translate="yes" xml:space="preserve">
          <source>Information about the pinch event is provided in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e184d9992698192812a7fcf5c50cbdb531953152" translate="yes" xml:space="preserve">
          <source>Information about the steps needed to port applications to the Qt Sensors API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3a24b46193d9bb0813bcc9755b77482389a97a" translate="yes" xml:space="preserve">
          <source>Information about visited links is stored together with persistent cookies and other persistent data in a storage determined by the &lt;a href=&quot;qml-qtwebengine-webengineprofile#storageName-prop&quot;&gt;storageName&lt;/a&gt; property. Persistent data is stored in a subdirectory determined by the &lt;a href=&quot;qml-qtwebengine-webengineprofile#persistentStoragePath-prop&quot;&gt;persistentStoragePath&lt;/a&gt; property and the cache in a subdirectory determined by the &lt;a href=&quot;qml-qtwebengine-webengineprofile#cachePath-prop&quot;&gt;cachePath&lt;/a&gt; property. The &lt;a href=&quot;qml-qtwebengine-webengineprofile#httpCacheType-prop&quot;&gt;httpCacheType&lt;/a&gt; property describes the type of the cache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95aee24357207a8cb93c58af349e17d61c36181" translate="yes" xml:space="preserve">
          <source>Information about visited links is stored together with persistent cookies and other persistent data in a storage determined by the &lt;a href=&quot;qquickwebengineprofile#storageName-prop&quot;&gt;storageName&lt;/a&gt; property. Persistent data is stored in a subdirectory determined by the &lt;a href=&quot;qquickwebengineprofile#persistentStoragePath-prop&quot;&gt;persistentStoragePath&lt;/a&gt; property and the cache in a subdirectory determined by the &lt;a href=&quot;qquickwebengineprofile#cachePath-prop&quot;&gt;cachePath&lt;/a&gt; property. The &lt;a href=&quot;qquickwebengineprofile#httpCacheType-prop&quot;&gt;httpCacheType&lt;/a&gt; property describes the type of the cache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ccbe743f2024ee50424de411ecf6ee4647a6e9" translate="yes" xml:space="preserve">
          <source>Information about visited links is stored together with persistent cookies and other persistent data in a storage returned by &lt;a href=&quot;qwebengineprofile#storageName&quot;&gt;storageName&lt;/a&gt;(). Persistent data is stored in a subdirectory set by calling &lt;a href=&quot;qwebengineprofile#setPersistentStoragePath&quot;&gt;setPersistentStoragePath&lt;/a&gt;(), and the cache is located in a subdirectory set by calling &lt;a href=&quot;qwebengineprofile#setCachePath&quot;&gt;setCachePath&lt;/a&gt;(). The cache type can be set to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbceff0f896d252af39184abb1834a36af6904f" translate="yes" xml:space="preserve">
          <source>Information for Application Writers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae41e813091235e0a406da83bfeff12657884c0" translate="yes" xml:space="preserve">
          <source>Information for Backend Implementors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba79456867599d717d4096411001dce30281c399" translate="yes" xml:space="preserve">
          <source>Information for places backend implementors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1718e423e3ff5e5e8d5e71db448d11a966259ae0" translate="yes" xml:space="preserve">
          <source>Information is provided about the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d0073698e68fad9f069e79c9f67be0dc23db93" translate="yes" xml:space="preserve">
          <source>Information property list file (Info.plist) on iOS and macOS is used for configuring an application bundle. These configuration settings include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7734b0ef8db04b39f4820e71f8c34bed2b86b4" translate="yes" xml:space="preserve">
          <source>Information regarding the progress of a swipe, as well as the components that should be shown upon swiping, are both available through the &lt;a href=&quot;qml-qtquick-controls2-swipedelegate#swipe-prop&quot;&gt;swipe&lt;/a&gt; grouped property object. For example, &lt;code&gt;swipe.position&lt;/code&gt; holds the position of the swipe within the range &lt;code&gt;-1.0&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt;. The &lt;code&gt;swipe.left&lt;/code&gt; property determines which item will be displayed when the control is swiped to the right, and vice versa for &lt;code&gt;swipe.right&lt;/code&gt;. The positioning of these components is left to applications to decide. For example, without specifying any position for &lt;code&gt;swipe.left&lt;/code&gt; or &lt;code&gt;swipe.right&lt;/code&gt;, the following will occur:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d708be84b45eb292e0a9509d9d9b5070b51b7e9d" translate="yes" xml:space="preserve">
          <source>Informative text can be used to expand upon the &lt;a href=&quot;qml-qt-labs-platform-messagedialog#text-prop&quot;&gt;text&lt;/a&gt; to give more information to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effe11c4c15b37d329b949e0560b56339c54faf3" translate="yes" xml:space="preserve">
          <source>Informative text can be used to supplement the &lt;code&gt;text&lt;/code&gt; to give more information to the user. Depending on the platform, it may appear in a smaller font below the text, or simply appended to the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3e6a8edf428ee8d922df68afeab38040dcee7f" translate="yes" xml:space="preserve">
          <source>Informs &lt;a href=&quot;qwaylandoutput&quot;&gt;QWaylandOutput&lt;/a&gt; that a frame has started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2c6d874954a67e09dc70ec2129069d64736739" translate="yes" xml:space="preserve">
          <source>Informs about a change in the model's layout. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c64fda2e041738e4e180d2ffa50c3920cba1433" translate="yes" xml:space="preserve">
          <source>Informs the JS engine that the system's timezone has been changed, which is necessary for the correct manipulation of datetime data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab295bf8a0ed1302eb546fd7d6fa6e8fb38ef8bb" translate="yes" xml:space="preserve">
          <source>Informs the tree view that the number of columns in the tree view has changed from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34273b16677b5bbc4488c03675f9b9d5c52b90e7" translate="yes" xml:space="preserve">
          <source>Informs the view that the rows from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ea3bfbf2ed6395ce2a7d50246091c5093ff5a1" translate="yes" xml:space="preserve">
          <source>Informs the window system that the window should stay on bottom of all other windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2011645f48acbae1397d24ef4d141922c598c4" translate="yes" xml:space="preserve">
          <source>Informs the window system that the window should stay on top of all other windows. Note that on some window managers on X11 you also have to pass Qt::X11BypassWindowManagerHint for this flag to work correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c824ef3f46677d6ad80cf6013353d167eb8bb88b" translate="yes" xml:space="preserve">
          <source>Informs the window system that this window implements its own set of gestures and that system level gestures, like for instance three-finger desktop switching, should be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1f9512580fd0ad32e8b7592d1ea254cccf1b5e" translate="yes" xml:space="preserve">
          <source>Informs the window system that this window is used only for output (displaying something) and does not take input. Therefore input events should pass through as if it wasn't there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563bbece104d0c30c20a52006748f0239f0a5d0e" translate="yes" xml:space="preserve">
          <source>Informs the window system that this window should not receive the input focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff9795a02c24e0e73039020d3c1694be280097c" translate="yes" xml:space="preserve">
          <source>Informs the window system that when maximizing the window it should use as much of the available screen geometry as possible, including areas that may be covered by system UI such as status bars or application launchers. This may result in the window being placed under these system UIs, but does not guarantee it, depending on whether or not the platform supports it. When the flag is enabled the user is responsible for taking &lt;a href=&quot;qscreen#availableGeometry-prop&quot;&gt;QScreen::availableGeometry&lt;/a&gt;() into account, so that any UI elements in the application that require user interaction are not covered by system UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec5b885531d16780ec5de6e36137dfae62853a4" translate="yes" xml:space="preserve">
          <source>Infromative text can be used to expand upon the &lt;a href=&quot;qmessagebox#text-prop&quot;&gt;text&lt;/a&gt;() to give more information to the user. On the Mac, this text appears in small system font below the &lt;a href=&quot;qmessagebox#text-prop&quot;&gt;text&lt;/a&gt;(). On other platforms, it is simply appended to the existing text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="f3a185be5a75e97ad04ae859bb56a804cfc1a485" translate="yes" xml:space="preserve">
          <source>Inherited By:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a8b5848f834ac6994650e8a76d4e3bde61c2d4" translate="yes" xml:space="preserve">
          <source>Inheriting from this class is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c15abd93cff0ecd6cb3cf2242f6f45f0260d4a3" translate="yes" xml:space="preserve">
          <source>Inherits &lt;a href=&quot;http://qt-project.org/doc/qt-4.7/qml-animation.html&quot;&gt;Animation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ceff891e3270daf2280f0683f5eaf90385c29a" translate="yes" xml:space="preserve">
          <source>Inherits QEvent and holds a clone of an event associated with a QObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9d1b529c3efb72a25309afe4f2ce7d5d7a009b" translate="yes" xml:space="preserve">
          <source>Inherits:</source>
          <target state="translated">Inherits:</target>
        </trans-unit>
        <trans-unit id="801616f03c99c9df6beed0fc2fc0471bcad41f4e" translate="yes" xml:space="preserve">
          <source>Inhibits playback of media content until the user interacts with the page. Disabled by default.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
