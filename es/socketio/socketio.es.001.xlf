<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="socketio">
    <body>
      <group id="socketio">
        <trans-unit id="bf8b176d8763644f52776a855590bcb95c2f4023" translate="yes" xml:space="preserve">
          <source>#adapter</source>
          <target state="translated">#adapter</target>
        </trans-unit>
        <trans-unit id="a1481880575ad3b975d5330bc3062829c2d7bf53" translate="yes" xml:space="preserve">
          <source>#attach</source>
          <target state="translated">#attach</target>
        </trans-unit>
        <trans-unit id="05a10c7df72c230fef7b8b79764a8e9fb6fed1a4" translate="yes" xml:space="preserve">
          <source>#listen</source>
          <target state="translated">#listen</target>
        </trans-unit>
        <trans-unit id="b45b9d216a140661f8c47bb0e291d308e1b632b8" translate="yes" xml:space="preserve">
          <source>#onconnection</source>
          <target state="translated">#onconnection</target>
        </trans-unit>
        <trans-unit id="d96169b35525c61ac2845487e96dfdcd0f6ebc59" translate="yes" xml:space="preserve">
          <source>#origins</source>
          <target state="translated">#origins</target>
        </trans-unit>
        <trans-unit id="4214dedc89cd196890e76db3b89c5c1a06789a41" translate="yes" xml:space="preserve">
          <source>#serveClient</source>
          <target state="translated">#serveClient</target>
        </trans-unit>
        <trans-unit id="3e0309fbbfcdac9746cb99120d8fb9d02997d8e2" translate="yes" xml:space="preserve">
          <source>#sockets</source>
          <target state="translated">#sockets</target>
        </trans-unit>
        <trans-unit id="5bf7eca263744440cf7f2d8fc4ec43b67068d7b3" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2014&amp;ndash;2015 Automattic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061773f6979abce138f0c164cfe2c73baa6cdaed" translate="yes" xml:space="preserve">
          <source>&amp;hellip; so its cleaner to do auth via middleware now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cb3d1abe734273fc88074522622cbd1eef1b8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Number&lt;/code&gt; reconnection attempt number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e60cfc0580665a8b3a3a113dee5e5752a220ff4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; error data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34efbaebe1611040e953a1f9e3197ad4f9c63651" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Object&lt;/code&gt; error object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15565311cf95c8ab946cb09ca6d68cb7717ad370" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Socket&lt;/code&gt; the incoming socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392cfe62c95bd8680bcfc68b66d2e1ac40236561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect&lt;/code&gt;. Fired upon a successful connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4454b1f7cac79954908e22f059d0a2e0121b52b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect&lt;/code&gt;. Fired upon connecting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a229c70fd7dd3904517a46d0900f351ba34709b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect_error&lt;/code&gt;. Fired upon a connection error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502ec1ddf0fbcaff8bd33f5dfd438cefccbab0ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect_timeout&lt;/code&gt;. Fired upon a connection timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f706d2e577aea3336afc29e35651e9b7ad2133cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connection&lt;/code&gt; / &lt;code&gt;connect&lt;/code&gt;. Fired upon a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524d58e72db37fedcf7a8239a2d4493b9cdb6a84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnect&lt;/code&gt;. Fired upon a disconnection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7abe10d53a17b8b38ac7eda40de70dd03a7e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt;. Fired upon a connection error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49336b8954104ffe8ad5f1338c0750f9c21fe13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; sets the value for Server#path()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80a4dfb8996452868aa2d5c69b3bb988e711e10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnect&lt;/code&gt;. Fired upon a successful reconnection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40305a37d856314bc8feec326a2cfa860ac677e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnect_attempt&lt;/code&gt;. Fired upon an attempt to reconnect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ece1c421e2f336d60860d8f1265386a9b1598b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnect_error&lt;/code&gt;. Fired upon a reconnection attempt error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d91e77d8ddcc25abbeba3959d665cc1098b57b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnect_failed&lt;/code&gt;. Fired when couldn&amp;rsquo;t reconnect within &lt;code&gt;reconnectionAttempts&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d79de2e1ac70aab8c0d7fdc626aece2d4e7ef3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reconnecting&lt;/code&gt;. Fired upon an attempt to reconnect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f5782a282a10f5e59c21cdc9ae4b3a11178361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serveClient&lt;/code&gt; sets the value for Server#serveClient()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dfcbc4051896fdae37b63c15e769962b6dbd8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; The namespace is an implementation detail of the Socket.IO protocol, and is not related to the actual URL of the underlying transport, which defaults to &lt;code&gt;/socket.io/&amp;hellip;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc69b812574fda4bd8ed99a5e3144d07d786cc25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rooms are left automatically upon disconnection&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551166d6f8c3e519855c66ecc3660e0e011c30e5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Manager&lt;/code&gt; represents a connection to a given Socket.IO server. One or more &lt;code&gt;Socket&lt;/code&gt; instances are associated with the manager. The manager can be accessed through the &lt;code&gt;io&lt;/code&gt; property of each &lt;code&gt;Socket&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d80bea2a5a91a87a34a9146aa31d79111b035b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Socket&lt;/code&gt; instance is returned for the namespace specified by the pathname in the URL, defaulting to &lt;code&gt;/&lt;/code&gt;. For example, if the &lt;code&gt;url&lt;/code&gt; is &lt;code&gt;http://localhost/users&lt;/code&gt;, a transport connection will be established to &lt;code&gt;http://localhost&lt;/code&gt; and a Socket.IO connection will be established to &lt;code&gt;/users&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f0a01ffea38efa8a5a23951d8aa5386737ca39" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Socket&lt;/code&gt; is the fundamental class for interacting with browser clients. A &lt;code&gt;Socket&lt;/code&gt; belongs to a certain &lt;code&gt;Namespace&lt;/code&gt; (by default &lt;code&gt;/&lt;/code&gt;) and uses an underlying &lt;code&gt;Client&lt;/code&gt; to communicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2290f18feaaa2f27170a4b508baed92ad4e70ac0" translate="yes" xml:space="preserve">
          <source>A getter proxy that returns the reference to the &lt;code&gt;request&lt;/code&gt; that originated the engine.io connection. Useful for accessing request headers such as &lt;code&gt;Cookie&lt;/code&gt; or &lt;code&gt;User-Agent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529746c5b3b269731afd8c5ff022302c0110f903" translate="yes" xml:space="preserve">
          <source>A getter proxy that returns the reference to the &lt;code&gt;request&lt;/code&gt; that originated the underlying engine.io &lt;code&gt;Client&lt;/code&gt;. Useful for accessing request headers such as &lt;code&gt;Cookie&lt;/code&gt; or &lt;code&gt;User-Agent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b543a41b970eaeb4473cc98c553f19e1d531145" translate="yes" xml:space="preserve">
          <source>A list of strings identifying the rooms this socket is in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2a6deea73f9c4997b4dea7054abf80a6d77075" translate="yes" xml:space="preserve">
          <source>A reference to the underlying &lt;code&gt;Client&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376e0608b08c2a1d9b01665f46792d0ca067ef27" translate="yes" xml:space="preserve">
          <source>A reference to the underlying &lt;code&gt;engine.io&lt;/code&gt;&lt;code&gt;Socket&lt;/code&gt; connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf5219937b96ca2dbf18b4ac2c099b9feb869ae" translate="yes" xml:space="preserve">
          <source>A reference to the underyling &lt;code&gt;Client&lt;/code&gt; transport connection (engine.io &lt;code&gt;Socket&lt;/code&gt; object).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c911d25eb449039361c763508f9734c6af9b9494" translate="yes" xml:space="preserve">
          <source>A unique identifier for the socket session, that comes from the underlying &lt;code&gt;Client&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d36a293544040845cfc50b9aa5c48482be6018b" translate="yes" xml:space="preserve">
          <source>Adds the socket to the &lt;code&gt;room&lt;/code&gt;, and fires optionally a callback &lt;code&gt;fn&lt;/code&gt; with &lt;code&gt;err&lt;/code&gt; signature (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0056531653a5417a69f46b98bcaedc6768c175b" translate="yes" xml:space="preserve">
          <source>Advanced use only. Binds the server to a specific engine.io &lt;code&gt;Server&lt;/code&gt; (or compatible API) instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fcc9057c6d5a46679c04c3a91596e763d72f59" translate="yes" xml:space="preserve">
          <source>Advanced use only. Creates a new &lt;code&gt;socket.io&lt;/code&gt; client from the incoming engine.io (or compatible API) &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e53532546f04edb80931722892b752816bb9d51" translate="yes" xml:space="preserve">
          <source>All datastructures are supported, including &lt;code&gt;Buffer&lt;/code&gt;. JavaScript functions can&amp;rsquo;t be serialized/deserialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4390485ad60a5f274b643013b616d37b2a2d2c78" translate="yes" xml:space="preserve">
          <source>An easy way to do that is by routing clients based on their originating address. An example follows using the NginX server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a86f4f8ea1ac1f35bb81b7d2ae95d9ee306ecfc" translate="yes" xml:space="preserve">
          <source>And then filter by the scopes you&amp;rsquo;re interested in. You can use &lt;code&gt;,&lt;/code&gt; to separate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad8bba173cb7b225586481c35bff65016a407fc" translate="yes" xml:space="preserve">
          <source>And then simply use &lt;code&gt;to&lt;/code&gt; or &lt;code&gt;in&lt;/code&gt; (they are the same) when broadcasting or emitting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4862d301337bfe0de3f85f7b730a3577b7472ca" translate="yes" xml:space="preserve">
          <source>Attaches the &lt;code&gt;Server&lt;/code&gt; to an engine.io instance on &lt;code&gt;srv&lt;/code&gt; with the supplied &lt;code&gt;opts&lt;/code&gt; (optionally).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc4070e4464b742bcc08cc06e23d1102b94c8f9" translate="yes" xml:space="preserve">
          <source>Attaches the &lt;code&gt;Server&lt;/code&gt; to an engine.io instance that is bound to &lt;code&gt;port&lt;/code&gt; with the given &lt;code&gt;opts&lt;/code&gt; (optionally).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a19ace111090d963c16db0530f1f68feb67119" translate="yes" xml:space="preserve">
          <source>Authentication differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5322fc7face3a76089b42b181d534b189cb00bc" translate="yes" xml:space="preserve">
          <source>Available debugging scopes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d739cde383b81375eb3b81f1a6f7136f619ff2" translate="yes" xml:space="preserve">
          <source>Before 1.0, the Socket.IO server would default to logging everything out to the console. This turned out to be annoyingly verbose for many users (although extremely useful for others), so now we default to being completely silent by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f4d8dff68b8edc4e02415e367ac68a75eaa9bc" translate="yes" xml:space="preserve">
          <source>Binds socket.io to a new &lt;code&gt;http.Server&lt;/code&gt; that listens on &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7554e2b226727bec27436304c4855bfb7225a10b" translate="yes" xml:space="preserve">
          <source>Broadcasting messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75b45f19cb5529a0f27767c717f740ce8a3ed68" translate="yes" xml:space="preserve">
          <source>Broadcasting to all clients in default namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6720f3f41f08fc23b6516b1bfa14e0e06bb7fc1a" translate="yes" xml:space="preserve">
          <source>By default the client always connects to &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2343edf8c1bb2474193ac1e88d27484f0a5136" translate="yes" xml:space="preserve">
          <source>By implementing the Redis &lt;code&gt;Adapter&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1afd79629dc43afcf544d3a9520561780875fbb" translate="yes" xml:space="preserve">
          <source>Chances are that some of those clients might have an active bi-directional communication channel like &lt;code&gt;WebSocket&lt;/code&gt; that we can write to immediately, but some of them might be using long-polling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdd79b12628d8c4ec4226ff4207341dcb869ab8" translate="yes" xml:space="preserve">
          <source>Client</source>
          <target state="translated">Client</target>
        </trans-unit>
        <trans-unit id="5c05bc694ec8928aac04cb06b41ed427a9305f1a" translate="yes" xml:space="preserve">
          <source>Client (index.html)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c7409355f30de2476cb2c221d63babafd47a47" translate="yes" xml:space="preserve">
          <source>Client API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92401e65c0436785be642917e4f34f3d4201f9f" translate="yes" xml:space="preserve">
          <source>Client#conn</source>
          <target state="translated">Client#conn</target>
        </trans-unit>
        <trans-unit id="481786cc185b90d496773dfb676d3e29cb46ae7a" translate="yes" xml:space="preserve">
          <source>Client#request</source>
          <target state="translated">Client#request</target>
        </trans-unit>
        <trans-unit id="7fccc2ece34ed748edae44f6dce62d5e1ad8dc2d" translate="yes" xml:space="preserve">
          <source>Configuration differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb48b1f8055661c6ffeda6762545d6839f19b1c7" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Server&lt;/code&gt; and attaches it to the given &lt;code&gt;srv&lt;/code&gt;. Optionally &lt;code&gt;opts&lt;/code&gt; can be passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61681def5fd54bef82a2f44382f13e764f0c4ab4" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Server&lt;/code&gt;. Works with and without &lt;code&gt;new&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4942a1a3002105e25c97088f28bfe63bc0770981" translate="yes" xml:space="preserve">
          <source>Custom namespaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ca7986181505b21a483b3ee2f98c0c6b297f85" translate="yes" xml:space="preserve">
          <source>Debug also works in the browser; logs are persisted to localstorage. To use: open the developer console and type &lt;code&gt;localStorage.debug = 'socket.io:*'&lt;/code&gt; (or any debug level) and then refresh the page. Everything is logged until you run &lt;code&gt;localStorage.debug = ''&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830ca4c1ff58e6bf67b2647e1fadaa39cffb9f4a" translate="yes" xml:space="preserve">
          <source>Decoding takes things a step further and is event-based. This is done because some objects (binary-containing) are both encoded and decoded in multiple parts. This example should help:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4420c89ef1e444b77e053b51586961e52dc7ec9b" translate="yes" xml:space="preserve">
          <source>Default namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022a84408270969073808938ced3dedbcf6f8f1d" translate="yes" xml:space="preserve">
          <source>Default room</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd38c311d060b7b421a0557c4ee9e1ecf5ebf03" translate="yes" xml:space="preserve">
          <source>Difference 1 &amp;ndash; packet encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1411c6b6f16e053454e88e5999fafaf2723f5a4" translate="yes" xml:space="preserve">
          <source>Difference 2 &amp;ndash; packet decoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38da7b708f16cd8e3ea6bb1aa04c77c00f74faf" translate="yes" xml:space="preserve">
          <source>Disconnection</source>
          <target state="translated">Disconnection</target>
        </trans-unit>
        <trans-unit id="ac34b758084bbe817e4a315034aaa209b4266791" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Socket&lt;/code&gt; in Socket.IO is identified by a random, unguessable, unique identifier &lt;code&gt;Socket#id&lt;/code&gt;. For your convenience, each socket automatically joins a room identified by this id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30312e78b26ea8672221ff0520299c368900e9b6" translate="yes" xml:space="preserve">
          <source>Each namespace emits a &lt;code&gt;connection&lt;/code&gt; event that receives each &lt;code&gt;Socket&lt;/code&gt; instance as a parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a92c000e653283eb14d5c8c8b15559c6667a928" translate="yes" xml:space="preserve">
          <source>Emits an event to all connected clients. The following two are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508c23db3f5fe19ac80c129a4050d38099aab3e8" translate="yes" xml:space="preserve">
          <source>Emits an event to the socket identified by the string &lt;code&gt;name&lt;/code&gt;. Any other parameters can be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c2293411f6f3e1d9d62935ca183cd41e9b590d" translate="yes" xml:space="preserve">
          <source>Errors passed to middleware callbacks are sent as special &lt;code&gt;error&lt;/code&gt; packets to clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="0275edefbd2acee59455b9eec2cbfac66f4890aa" translate="yes" xml:space="preserve">
          <source>Exposed as the &lt;code&gt;io&lt;/code&gt; global in &lt;code&gt;window&lt;/code&gt; if using the standalone build (eg: &lt;code&gt;/socket.io/socket.io.js&lt;/code&gt; or the CDN), or the result of calling &lt;code&gt;require('socket.io-client')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9179dd0a6d67cdff17d3e82b78643a31e7a4bb7" translate="yes" xml:space="preserve">
          <source>Exposed by &lt;code&gt;require('socket.io')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cbfa4c6e048d355eecc103740361b0f0bb0690" translate="yes" xml:space="preserve">
          <source>Fedor Indutny has created a module called &lt;a href=&quot;https://github.com/indutny/sticky-session&quot;&gt;sticky session&lt;/a&gt; that ensures file descriptors (ie: connections) are routed based on the originating &lt;code&gt;remoteAddress&lt;/code&gt; (ie: IP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3b442764f5dc8850f558e3ea15663c41401e51" translate="yes" xml:space="preserve">
          <source>For most applications, the transition to 1.0 should be completely seamless and devoid of any hiccups. That said, we&amp;rsquo;ve done some work to streamline some APIs, and we have changed some internals, so this is a recommended read for most existing users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7146818821cd4dfe1b16f11c807efe9bda739e0" translate="yes" xml:space="preserve">
          <source>For other available methods, see &lt;code&gt;Namespace&lt;/code&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="9f1e7543c3b316d2bbf70231df1f924372cf1aba" translate="yes" xml:space="preserve">
          <source>Hash of &lt;code&gt;Socket&lt;/code&gt; objects that are connected to this namespace indexed by &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd45fd3f2e347de26d6cbb92c276978c2dd03be8" translate="yes" xml:space="preserve">
          <source>How to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8fb39373007c2c84580d473e2a6e10a1f4c15d" translate="yes" xml:space="preserve">
          <source>IO</source>
          <target state="translated">IO</target>
        </trans-unit>
        <trans-unit id="e7003e6d925e31b832856a227b0f9166b34112a4" translate="yes" xml:space="preserve">
          <source>IO#Emitter</source>
          <target state="translated">IO#Emitter</target>
        </trans-unit>
        <trans-unit id="765edfdb161c517a1ce5da44fc4d8424f1048a7d" translate="yes" xml:space="preserve">
          <source>IO#Manager</source>
          <target state="translated">IO#Manager</target>
        </trans-unit>
        <trans-unit id="41a37c4339d0c82f3ee00bfcc54ac4b2c0b5de1e" translate="yes" xml:space="preserve">
          <source>IO#Socket</source>
          <target state="translated">IO#Socket</target>
        </trans-unit>
        <trans-unit id="beec8eb46066cdc0aba242a7542ab74f6a492c78" translate="yes" xml:space="preserve">
          <source>IO#protocol</source>
          <target state="translated">IO#protocol</target>
        </trans-unit>
        <trans-unit id="eca7349d4955aaf5cf93214a3c400d32f86f5aa4" translate="yes" xml:space="preserve">
          <source>IO(url:String, opts:Object):Socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5814b01fed4c7fe4953ba3c6fd43d5fafff87c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; the attached server (see &lt;code&gt;Server#attach&lt;/code&gt;) will serve the client files. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db447192b299a9c88f722e88f343a02d49df7dc" translate="yes" xml:space="preserve">
          <source>If a certain client is not ready to receive messages (because of network slowness or other issues, or because they&amp;rsquo;re connected through long polling and is in the middle of a request-response cycle), if they doesn&amp;rsquo;t receive ALL the tweets related to bieber your application won&amp;rsquo;t suffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1ce81de34384cbd24c741e8cde40b6c4c964c6" translate="yes" xml:space="preserve">
          <source>If no arguments are supplied this method returns the current value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d917d98ca6bb6e35a46ac76ea42394de33ffb89" translate="yes" xml:space="preserve">
          <source>If the namespace was already initialized it returns it right away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74301b7fc10c8fceb7ffdf82213b13ad5ccb925e" translate="yes" xml:space="preserve">
          <source>If they&amp;rsquo;re using long polling, they might or might not have sent a request that we can write to. They could be &amp;ldquo;in between&amp;rdquo; those requests. In those situations, it means we have to buffer messages in the process. In order for the client to successfully claim those messages when he sends his request, the easiest way is for him to connect to be routed to that same process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b97a61df4d3020396f0e1707acfe7df0699d782" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t care about reconnection logic and such, take a look at &lt;a href=&quot;https://github.com/Automattic/engine.io&quot;&gt;Engine.IO&lt;/a&gt;, which is the WebSocket semantics transport layer Socket.IO uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610bbacc886e3857687966c99069ce6ee98ac268" translate="yes" xml:space="preserve">
          <source>If you have control over all the messages and events emitted for a particular application, using the default / namespace works. If you want to leverage 3rd-party code, or produce code to share with others, socket.io provides a way of namespacing a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcf833ab051064ccc875acdd0dee3beced635eb" translate="yes" xml:space="preserve">
          <source>If you just want the WebSocket semantics, you can do that too. Simply leverage &lt;code&gt;send&lt;/code&gt; and listen on the &lt;code&gt;message&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0c94a8c38ee06d3b70bf927890dd976f52d756" translate="yes" xml:space="preserve">
          <source>If you plan to distribute the load of connections among different processes or machines, you have to make sure that requests associated with a particular session id connect to the process that originated them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2756ec4a23b1fd694c780312382bba6c3ecd7034" translate="yes" xml:space="preserve">
          <source>If you want to pass messages to it from non-socket.io processes, you should look into &lt;a href=&quot;rooms-and-namespaces#sending-messages-from-the-outside-world&quot;&gt;&amp;ldquo;Sending messages from the outside-world&amp;rdquo;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628163b659303b4ed2059f717048b6933661208f" translate="yes" xml:space="preserve">
          <source>In general there are some new shortcuts for common things. The old versions should still work, but shortcuts are nice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b369045b3f111db8df1f362dd9da7e8ea71de1a" translate="yes" xml:space="preserve">
          <source>In some cases, you might want to emit events to sockets in Socket.IO namespaces / rooms from outside the context of your Socket.IO processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f2f411840c21268ffe2a08dfe697786953d849" translate="yes" xml:space="preserve">
          <source>In that case, you might want to send those messages as volatile messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef9f67dc174cf412cb111af9ddbfdaf96df10cc" translate="yes" xml:space="preserve">
          <source>In the same &lt;code&gt;http { }&lt;/code&gt; section, you can declare a &lt;code&gt;server { }&lt;/code&gt; that points to this upstream. In order for NginX to support and forward the &lt;code&gt;WebSocket&lt;/code&gt; protocol, we explicitly pass along the required &lt;code&gt;Upgrade&lt;/code&gt; headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef72f0fec4a03fc24c112a118416d6ba0263d3d" translate="yes" xml:space="preserve">
          <source>Initializes and retrieves the given &lt;code&gt;Namespace&lt;/code&gt; by its pathname identifier &lt;code&gt;nsp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38432618ce4d39079fc324e614d4d92a2815160" translate="yes" xml:space="preserve">
          <source>Installing</source>
          <target state="translated">Installing</target>
        </trans-unit>
        <trans-unit id="02c8dfbfe5cea1ca71b01088b5a62b813b5385c5" translate="yes" xml:space="preserve">
          <source>Instead do configuration in server initialization like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae15ebcd9a8a699f8cf99d5a6ae25a1efac15fe" translate="yes" xml:space="preserve">
          <source>Joining and leaving</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725a4e018f74b7ceb19a70475ed2866faeeeafb2" translate="yes" xml:space="preserve">
          <source>Just like NginX, Node.JS comes with built-in clustering support through the &lt;code&gt;cluster&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ed8cfdc270e2de7716e19637811e80c410fc24" translate="yes" xml:space="preserve">
          <source>Log differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9183822bb443d27f09ccd0df46f88958cb0e1675" translate="yes" xml:space="preserve">
          <source>Logging and Debugging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c70f7c724fcc71b34bf752646aa6108054d0140" translate="yes" xml:space="preserve">
          <source>Logging is now based on debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4137f5b5c131444a42b7cc14b9840df833ae14bc" translate="yes" xml:space="preserve">
          <source>Make sure you also configure &lt;code&gt;worker_processes&lt;/code&gt; in the topmost level to indicate how many workers NginX should use. You might also want to look into tweaking the &lt;code&gt;worker_connections&lt;/code&gt; setting within the &lt;code&gt;events { }&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babe3050e2e81dfd87a8ce67264d518cb34aef72" translate="yes" xml:space="preserve">
          <source>Manager</source>
          <target state="translated">Manager</target>
        </trans-unit>
        <trans-unit id="b3a13df34133ab17aa5b9d26c082235b806d67d0" translate="yes" xml:space="preserve">
          <source>Manager#reconnection</source>
          <target state="translated">Manager#reconnection</target>
        </trans-unit>
        <trans-unit id="f0152d8e8c04d30ce015e9183545f393f7d9b350" translate="yes" xml:space="preserve">
          <source>Manager#reconnection(v:Boolean):Manager</source>
          <target state="translated">Manager#reconnection(v:Boolean):Manager</target>
        </trans-unit>
        <trans-unit id="e89b57223fc28dd840dabb3be2ac014a549189b7" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionAttempts</source>
          <target state="translated">Manager#reconnectionAttempts</target>
        </trans-unit>
        <trans-unit id="727af5f439a98104282e62ed506c37272ab8052c" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionAttempts(v:Boolean):Manager</source>
          <target state="translated">Manager#reconnectionAttempts(v:Boolean):Manager</target>
        </trans-unit>
        <trans-unit id="ae975c3f8fcd8cbd4821337f81b6ebaaf5a981db" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionDelay</source>
          <target state="translated">Manager#reconnectionDelay</target>
        </trans-unit>
        <trans-unit id="06d3a18249c8be929ae04b42180c5b168819e6b2" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionDelay(v:Boolean):Manager</source>
          <target state="translated">Manager#reconnectionDelay(v:Boolean):Manager</target>
        </trans-unit>
        <trans-unit id="bf3016c5a8175e1750fdeee08917d1ef7df9f775" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionDelayMax</source>
          <target state="translated">Manager#reconnectionDelayMax</target>
        </trans-unit>
        <trans-unit id="c2d8667595770931cf658ec5366d0507d012bd39" translate="yes" xml:space="preserve">
          <source>Manager#reconnectionDelayMax(v:Boolean):Manager</source>
          <target state="translated">Manager#reconnectionDelayMax(v:Boolean):Manager</target>
        </trans-unit>
        <trans-unit id="ae5a4731f5f7292bce473150ff9ba305d8822742" translate="yes" xml:space="preserve">
          <source>Manager#timeout</source>
          <target state="translated">Manager#timeout</target>
        </trans-unit>
        <trans-unit id="50d7cf6d800965f9391493c5f119cba7de9edb55" translate="yes" xml:space="preserve">
          <source>Manager#timeout(v:Boolean):Manager</source>
          <target state="translated">Manager#timeout(v:Boolean):Manager</target>
        </trans-unit>
        <trans-unit id="82c08ae27c423813e6192615444336ef6a15c5c9" translate="yes" xml:space="preserve">
          <source>Manager(url:String, opts:Object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb9e154b34e9d07546bed938fef6813da37c6de" translate="yes" xml:space="preserve">
          <source>Migration from 0.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0449e1003dd0cdd92ab163e844540614258e8b38" translate="yes" xml:space="preserve">
          <source>Namespace</source>
          <target state="translated">Namespace</target>
        </trans-unit>
        <trans-unit id="c6cad564350e0bdd6d94255a18a569584b94b066" translate="yes" xml:space="preserve">
          <source>Namespace authorization?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09bc12a8d7a75a8f322d38f6a54ead60c2a56b57" translate="yes" xml:space="preserve">
          <source>Namespace#connected</source>
          <target state="translated">Namespace#connected</target>
        </trans-unit>
        <trans-unit id="b6c8aa0aefb9535b47a4649d094ee1fe33b6f44c" translate="yes" xml:space="preserve">
          <source>Namespace#connected:Object</source>
          <target state="translated">Namespace#connected:Object</target>
        </trans-unit>
        <trans-unit id="68d3f0dfb79335c600c584330553dc9e80a05365" translate="yes" xml:space="preserve">
          <source>Namespace#name</source>
          <target state="translated">Namespace#name</target>
        </trans-unit>
        <trans-unit id="4cc983dbefd5d737f87409787ded336e0349c04f" translate="yes" xml:space="preserve">
          <source>Namespace#name:String</source>
          <target state="translated">Namespace#name:String</target>
        </trans-unit>
        <trans-unit id="e940da986ed3563c553b2b35330a4422a9861581" translate="yes" xml:space="preserve">
          <source>Namespace#use</source>
          <target state="translated">Namespace#use</target>
        </trans-unit>
        <trans-unit id="14bf9a186a3907113a938f6a6b5b2ffefe06c09f" translate="yes" xml:space="preserve">
          <source>Namespace#use(fn:Function):Namespace</source>
          <target state="translated">Namespace#use(fn:Function):Namespace</target>
        </trans-unit>
        <trans-unit id="be09a63bd1995e99cd22064cdc39a4bae464033d" translate="yes" xml:space="preserve">
          <source>Namespaces</source>
          <target state="translated">Namespaces</target>
        </trans-unit>
        <trans-unit id="9120bbdfb821bd1a00efc4987ccc7be0a97318e0" translate="yes" xml:space="preserve">
          <source>Neat. Note that in both cases, these messages reach all clients connected to the default &amp;lsquo;/&amp;rsquo; namespace, but not clients in other namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63681ee071b92ca03a3b02c634915115137ff093" translate="yes" xml:space="preserve">
          <source>NginX configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2220bd5d6e854fdbfe41ca0e0f265fd248cc11de" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;ip_hash&lt;/code&gt; instruction that indicates the connections will be sticky.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd713cffc1a8235d98530e14f39fcc4172769aa5" translate="yes" xml:space="preserve">
          <source>Now that you have multiple Socket.IO nodes accepting connections, if you want to broadcast events to everyone (or even everyone in a certain &lt;a href=&quot;http://new.socket.io/docs/rooms-and-namespaces/&quot;&gt;room&lt;/a&gt;) you&amp;rsquo;ll need some way of passing messages between processes or computers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61d4e29999f717e20a2ffa02fda03db9cc09177" translate="yes" xml:space="preserve">
          <source>Now:</source>
          <target state="translated">Now:</target>
        </trans-unit>
        <trans-unit id="50bf15242d535576d75a3f8c1302809518000e36" translate="yes" xml:space="preserve">
          <source>On the client side, you tell Socket.IO client to connect to that namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a873255737967e5cd5dd0dd1fea91aa23915d1e8" translate="yes" xml:space="preserve">
          <source>Optionally, the first or second argument (see below) of the &lt;code&gt;Server&lt;/code&gt; constructor can be an options object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f06f772db11717176c485dd2b6a1783138950a8" translate="yes" xml:space="preserve">
          <source>Options like log-level are gone. &lt;code&gt;io.set('transports')&lt;/code&gt;, &lt;code&gt;io.set('heartbeat interval')&lt;/code&gt;, &lt;code&gt;io.set('heartbeat timeout'&lt;/code&gt;, and &lt;code&gt;io.set('resource')&lt;/code&gt; are still supported for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc05a04e02565e342f3c9d9537346771bbe17d85" translate="yes" xml:space="preserve">
          <source>Options: &amp;ndash; &lt;code&gt;reconnection&lt;/code&gt; whether to reconnect automatically (&lt;code&gt;true&lt;/code&gt;) &amp;ndash; &lt;code&gt;reconnectionDelay&lt;/code&gt; how long to wait before attempting a new reconnection (&lt;code&gt;1000&lt;/code&gt;) &amp;ndash; &lt;code&gt;reconnectionDelayMax&lt;/code&gt; maximum amount of time to wait between reconnections (&lt;code&gt;5000&lt;/code&gt;). Each attempt increases the reconnection by the amount specified by &lt;code&gt;reconnectionDelay&lt;/code&gt;. &amp;ndash; &lt;code&gt;timeout&lt;/code&gt; connection timeout before a &lt;code&gt;connect_error&lt;/code&gt; and &lt;code&gt;connect_timeout&lt;/code&gt; events are emitted (&lt;code&gt;20000&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="3005528f510648061623f06d3bacd5db302e39dc" translate="yes" xml:space="preserve">
          <source>Parser / Protocol differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3656eabceea41d5ef36ced31d931c12f009b456e" translate="yes" xml:space="preserve">
          <source>Parsing is now class based and asynchronous. Instead of returning a single encoded string, encode calls callback with an array of encodings as the only argument. Each encoding should be written to the transport in order. This is more flexible and makes binary data transport work. Here&amp;rsquo;s an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a434fc9b54cbce18b6b82e867b809263604aaf2" translate="yes" xml:space="preserve">
          <source>Passing events between nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a75bea51e4fcdcf5b5d55cf198957896d21a7e3" translate="yes" xml:space="preserve">
          <source>Previously:</source>
          <target state="translated">Previously:</target>
        </trans-unit>
        <trans-unit id="9c0f0e45ad41af0f83762db428d7f2094cb72481" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;Emitter&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf88e2cd029acb7abfd74ce1811ffd868649cbc7" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;Manager&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9402372832f121739c5568cca4d46551123d95c" translate="yes" xml:space="preserve">
          <source>Reference to the &lt;code&gt;Socket&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908666991862fd2c76ecb1cf6943a3fd898a0ec2" translate="yes" xml:space="preserve">
          <source>Registers a middleware, which is a function that gets executed for every incoming &lt;code&gt;Socket&lt;/code&gt; and receives as parameter the socket and a function to optionally defer execution to the next registered middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a2cb8cbacd901e2872e02918849e8e0bf656fe" translate="yes" xml:space="preserve">
          <source>Removes the socket from &lt;code&gt;room&lt;/code&gt;, and fires optionally a callback &lt;code&gt;fn&lt;/code&gt; with &lt;code&gt;err&lt;/code&gt; signature (if any).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea13acc019a669fdd49713e6c01104648fee04d7" translate="yes" xml:space="preserve">
          <source>Represents a pool of sockets connected under a given scope identified by a pathname (eg: &lt;code&gt;/chat&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c20e102a51e4d192df7d557871750a6b3a76aee" translate="yes" xml:space="preserve">
          <source>Restricting yourself to a namespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a28d6f078fd35a505195a0f8ec6f59e9801d7c2" translate="yes" xml:space="preserve">
          <source>Rooms</source>
          <target state="translated">Rooms</target>
        </trans-unit>
        <trans-unit id="fe95c4fa0a1b3153df03cedd8ee05d5b7c2c173a" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;Namespace#use&lt;/code&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfb982037b7cf38a1996e2e202aad6a82af84a7" translate="yes" xml:space="preserve">
          <source>See more at the debug documentation &lt;a href=&quot;https://www.npmjs.org/package/debug&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b699e9248d3a0c488c3571b8fd3fc4e618d74e9" translate="yes" xml:space="preserve">
          <source>Sending and getting data (acknowledgements)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb4d44399024779a7a8e983d1ecbada4539d611" translate="yes" xml:space="preserve">
          <source>Sending and receiving events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055f022c3910e2c0601f51fc6c1c6f745a06cc53" translate="yes" xml:space="preserve">
          <source>Sending messages from the outside-world</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35d0afbb0b2f3197200fb6adf04214c75c0edb6" translate="yes" xml:space="preserve">
          <source>Sending volatile messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="5a7124eea48a8de00e43fd9bc12a87f6dc2bdd37" translate="yes" xml:space="preserve">
          <source>Server (app.js)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a90ae60cf714fc87e5eb2fe8cf8a05443737743" translate="yes" xml:space="preserve">
          <source>Server API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72ee84761e9473dd9f9e572735ae12cb65f44fc" translate="yes" xml:space="preserve">
          <source>Server#adapter(v:Adapter):Server</source>
          <target state="translated">Server#adapter(v:Adapter):Server</target>
        </trans-unit>
        <trans-unit id="5437a9b0e285e9526668b3a4aa779ae052b67f38" translate="yes" xml:space="preserve">
          <source>Server#attach(port:Number, opts:Object):Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22e74aa54955dd02c045a0eca6c4fa4edc81167" translate="yes" xml:space="preserve">
          <source>Server#attach(srv:http#Server, opts:Object):Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ef9ea01904054da577370a52ce3356c3c80d06" translate="yes" xml:space="preserve">
          <source>Server#bind</source>
          <target state="translated">Server#bind</target>
        </trans-unit>
        <trans-unit id="fea9df4727e007b64fd3cadf6375b80e6b22a069" translate="yes" xml:space="preserve">
          <source>Server#bind(srv:engine#Server):Server</source>
          <target state="translated">Server#bind(srv:engine#Server):Server</target>
        </trans-unit>
        <trans-unit id="ba9bbe1322049b7bda25a11452f50c98c34f7a2e" translate="yes" xml:space="preserve">
          <source>Server#emit</source>
          <target state="translated">Server#emit</target>
        </trans-unit>
        <trans-unit id="1841bf53894719e2d1305f0533432f4d4ee7ca53" translate="yes" xml:space="preserve">
          <source>Server#listen</source>
          <target state="translated">Server#listen</target>
        </trans-unit>
        <trans-unit id="fedb9ab8e7081f849661e8798e2f464fccc40d26" translate="yes" xml:space="preserve">
          <source>Server#of</source>
          <target state="translated">Server#of</target>
        </trans-unit>
        <trans-unit id="aed34868ad797ae98e5aed657949b42af6250c97" translate="yes" xml:space="preserve">
          <source>Server#of(nsp:String):Namespace</source>
          <target state="translated">Server#of(nsp:String):Namespace</target>
        </trans-unit>
        <trans-unit id="db6b82616fcff95c7b91db9d11d2f4bdc56c043c" translate="yes" xml:space="preserve">
          <source>Server#onconnection(socket:engine#Socket):Server</source>
          <target state="translated">Server#onconnection(socket:engine#Socket):Server</target>
        </trans-unit>
        <trans-unit id="cfa26542dc1e743aaebbc3bc3de9b63de0471ff5" translate="yes" xml:space="preserve">
          <source>Server#origins(v:String):Server</source>
          <target state="translated">Server#origins(v:String):Server</target>
        </trans-unit>
        <trans-unit id="861945b71026c9816a2905d18f087a444238a6e1" translate="yes" xml:space="preserve">
          <source>Server#path</source>
          <target state="translated">Server#path</target>
        </trans-unit>
        <trans-unit id="ecfdbf93f77852e9dccec24dc2ecb3e26bb59103" translate="yes" xml:space="preserve">
          <source>Server#path(v:String):Server</source>
          <target state="translated">Server#path(v:String):Server</target>
        </trans-unit>
        <trans-unit id="23624f4aac5baf3d42bcfdb05c231686c79d6e8a" translate="yes" xml:space="preserve">
          <source>Server#serveClient(v:Boolean):Server</source>
          <target state="translated">Server#serveClient(v:Boolean):Server</target>
        </trans-unit>
        <trans-unit id="048a6c5a1f1ea7353eeb635cfb2a29f0950c24d7" translate="yes" xml:space="preserve">
          <source>Server#sockets:Namespace</source>
          <target state="translated">Server#sockets:Namespace</target>
        </trans-unit>
        <trans-unit id="304d21c84df0627c5113a03fc73bcc5098de98d0" translate="yes" xml:space="preserve">
          <source>Server#use</source>
          <target state="translated">Server#use</target>
        </trans-unit>
        <trans-unit id="b8210b6062e493364bd86e77ad70e1b70225a17c" translate="yes" xml:space="preserve">
          <source>Server()</source>
          <target state="translated">Server()</target>
        </trans-unit>
        <trans-unit id="673ba961481e4c5254a954d393f7c9ca847a9ce3" translate="yes" xml:space="preserve">
          <source>Server(opts:Object)</source>
          <target state="translated">Server(opts:Object)</target>
        </trans-unit>
        <trans-unit id="fd8ba78bc4bdad4afa475517ea076851bca5b07e" translate="yes" xml:space="preserve">
          <source>Server(port:Number, opts:Object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fb4791fde0fba0fdc098de4b42f76a4baf1477" translate="yes" xml:space="preserve">
          <source>Server(srv:http#Server, opts:Object)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d1c56444c91725378ee44d1d892a70cd9e9ba5" translate="yes" xml:space="preserve">
          <source>Sets a modifier for a subsequent event emission that the event will only be &lt;em&gt;broadcasted&lt;/em&gt; to sockets that have joined the given &lt;code&gt;room&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ca2181c89d8bf5de71020bde96ff765b948a0b" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;reconectionDelay&lt;/code&gt; option, or returns it if no parameters are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df57b4d9af43b3265cefb619cf7e408fe1245884" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;reconectionDelayMax&lt;/code&gt; option, or returns it if no parameters are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811df203431e1a4e7a4dac6c964322d344c012e4" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;reconnection&lt;/code&gt; option, or returns it if no parameters are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2884e12282256196285a0cbcbb296c8e974216" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;reconnectionAttempts&lt;/code&gt; option, or returns it if no parameters are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e27a3f6fcc85d84c852a4d4e9fd612e6ddcc915" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;timeout&lt;/code&gt; option, or returns it if no parameters are passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dc15f57459fdf04389535ef6bc2a3e40c51210" translate="yes" xml:space="preserve">
          <source>Sets the adapter &lt;code&gt;v&lt;/code&gt;. Defaults to an instance of the &lt;code&gt;Adapter&lt;/code&gt; that ships with socket.io which is memory based. See &lt;a href=&quot;https://github.com/learnboost/socket.io-adapter&quot;&gt;socket.io-adapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907baaae25eaa4baaa0fd676be92753dbd2956da" translate="yes" xml:space="preserve">
          <source>Sets the allowed origins &lt;code&gt;v&lt;/code&gt;. Defaults to any origins being allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b6159adf3efbe432a01b757362cfa95f0b6365" translate="yes" xml:space="preserve">
          <source>Sets the path &lt;code&gt;v&lt;/code&gt; under which &lt;code&gt;engine.io&lt;/code&gt; and the static files will be served. Defaults to &lt;code&gt;/socket.io&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3185af18cf5965b9e729ce9b0ae161a1b196eb13" translate="yes" xml:space="preserve">
          <source>Setting resource path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c93523ff95f6469ea7fab8ffa47ed0ddc9bc0c" translate="yes" xml:space="preserve">
          <source>Shortcuts</source>
          <target state="translated">Shortcuts</target>
        </trans-unit>
        <trans-unit id="93c6a1f183694628e37ced41591147bfc0da1908" translate="yes" xml:space="preserve">
          <source>Socket</source>
          <target state="translated">Socket</target>
        </trans-unit>
        <trans-unit id="29b05a36956f2a3b6d0e21c9c9c9abd0d27ce6a4" translate="yes" xml:space="preserve">
          <source>Socket#client</source>
          <target state="translated">Socket#client</target>
        </trans-unit>
        <trans-unit id="7b12f54fc657612603bfc6b0a2f62b4589c55b89" translate="yes" xml:space="preserve">
          <source>Socket#client:Client</source>
          <target state="translated">Socket#client:Client</target>
        </trans-unit>
        <trans-unit id="fc9618e4ed6fe2b0e323ad4c04f2389a7ddd2ff8" translate="yes" xml:space="preserve">
          <source>Socket#conn</source>
          <target state="translated">Socket#conn</target>
        </trans-unit>
        <trans-unit id="42579abc67acc6c29c99f06215995d069df1e9e2" translate="yes" xml:space="preserve">
          <source>Socket#conn:Socket</source>
          <target state="translated">Socket#conn:Socket</target>
        </trans-unit>
        <trans-unit id="cd765362f0e76329a5d64b162caa16c540029b2a" translate="yes" xml:space="preserve">
          <source>Socket#emit</source>
          <target state="translated">Socket#emit</target>
        </trans-unit>
        <trans-unit id="d809a0f082cafab8b953bd2486bdaf37812caf24" translate="yes" xml:space="preserve">
          <source>Socket#emit(name:String[, &amp;hellip;]):Socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b9334ce102b5429c62cfc7e7d56ba9c5b9066f" translate="yes" xml:space="preserve">
          <source>Socket#id</source>
          <target state="translated">Socket#id</target>
        </trans-unit>
        <trans-unit id="35f106ab97dca57f2a116d27f4d8646b1fb29e2f" translate="yes" xml:space="preserve">
          <source>Socket#id:String</source>
          <target state="translated">Socket#id:String</target>
        </trans-unit>
        <trans-unit id="3e67950b041b2d4c5bbf538fbdbad3ce34a996d0" translate="yes" xml:space="preserve">
          <source>Socket#in</source>
          <target state="translated">Socket#in</target>
        </trans-unit>
        <trans-unit id="2f5a5bafc90ccdc7872d33a8d4daa66e476967fb" translate="yes" xml:space="preserve">
          <source>Socket#in(room:String):Socket</source>
          <target state="translated">Socket#in(room:String):Socket</target>
        </trans-unit>
        <trans-unit id="ea51e55d6fd6738dd408005d0595c6ccee1d8386" translate="yes" xml:space="preserve">
          <source>Socket#join</source>
          <target state="translated">Socket#join</target>
        </trans-unit>
        <trans-unit id="c958a6c6b253b77ca46ca0c0e81e5bde7f4ead2e" translate="yes" xml:space="preserve">
          <source>Socket#join(name:String[, fn:Function]):Socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38acda990906df2fe8983c842108c2a3eada30b5" translate="yes" xml:space="preserve">
          <source>Socket#leave</source>
          <target state="translated">Socket#leave</target>
        </trans-unit>
        <trans-unit id="8ef62bc06eb9d6e9b5a0bec72cf9d953dfcb8b8d" translate="yes" xml:space="preserve">
          <source>Socket#leave(name:String[, fn:Function]):Socket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eab55314a394fc3eab6bf92d7500f13084bc83" translate="yes" xml:space="preserve">
          <source>Socket#request</source>
          <target state="translated">Socket#request</target>
        </trans-unit>
        <trans-unit id="b435e2f51680ad0d8bfa48a0ff300d9a39612eb9" translate="yes" xml:space="preserve">
          <source>Socket#request:Request</source>
          <target state="translated">Socket#request:Request</target>
        </trans-unit>
        <trans-unit id="dd4daa4d16dead4ec219b9e02a9d61cc611de7ec" translate="yes" xml:space="preserve">
          <source>Socket#rooms</source>
          <target state="translated">Socket#rooms</target>
        </trans-unit>
        <trans-unit id="f3199ae27bdf1960ba4694d00425635fb81282de" translate="yes" xml:space="preserve">
          <source>Socket#rooms:Array</source>
          <target state="translated">Socket#rooms:Array</target>
        </trans-unit>
        <trans-unit id="8c12fad4b2ee8def1a21776f936001cb286b4a91" translate="yes" xml:space="preserve">
          <source>Socket#to</source>
          <target state="translated">Socket#to</target>
        </trans-unit>
        <trans-unit id="199638421d4f50e06dbd51f9f533c9bc3ce75d68" translate="yes" xml:space="preserve">
          <source>Socket#to(room:String):Socket</source>
          <target state="translated">Socket#to(room:String):Socket</target>
        </trans-unit>
        <trans-unit id="c0a9e6bda3ac8eb4aabd920d3a5e58092c2757c4" translate="yes" xml:space="preserve">
          <source>Socket.IO</source>
          <target state="translated">Socket.IO</target>
        </trans-unit>
        <trans-unit id="c264880fe30445838423bbc7b85e1381e6a5b70a" translate="yes" xml:space="preserve">
          <source>Socket.IO allows you to &amp;ldquo;namespace&amp;rdquo; your sockets, which essentially means assigning different &lt;em&gt;endpoints&lt;/em&gt; or &lt;em&gt;paths&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb646648addbfdca4c92cc9ffc3ebdc20bf81b31" translate="yes" xml:space="preserve">
          <source>Socket.IO allows you to emit and receive custom events. Besides &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;disconnect&lt;/code&gt;, you can emit custom events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8269776b84ea2c4c4a187eedd36a4addb338019f" translate="yes" xml:space="preserve">
          <source>Socket.IO is now completely instrumented by a minimalistic yet tremendously powerful utility called &lt;a href=&quot;https://github.com/visionmedia/debug&quot;&gt;debug&lt;/a&gt; by TJ Holowaychuk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc60fe4b6c769a0681128caa799d2e077f275dd" translate="yes" xml:space="preserve">
          <source>Socket.io protocol revision number this client works with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de494d6c74a6e7577a89b88e7f5ed335e576252" translate="yes" xml:space="preserve">
          <source>Socket.io uses middleware now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1319042c21018d0befa771eafaccad63bd240222" translate="yes" xml:space="preserve">
          <source>Sometimes certain messages can be dropped. Let&amp;rsquo;s say you have an app that shows realtime tweets for the keyword &lt;code&gt;bieber&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea5c9f62c53f1da211f3efc0dfef0758e4961ba" translate="yes" xml:space="preserve">
          <source>Sometimes, you might want to get a callback when the client confirmed the message reception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317d49bb0215c341c0bb18c9da4c9a7908ce3acf" translate="yes" xml:space="preserve">
          <source>Starting the server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8feb69644f22f358eab454bbd194704d1f6a0de0" translate="yes" xml:space="preserve">
          <source>Sticky load balancing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bbfc420db8327a654a728aa697c463e704b332" translate="yes" xml:space="preserve">
          <source>Synonym of &lt;code&gt;Server#attach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892bdad12a8b152cf82f4c730410e0744f5c312c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Client&lt;/code&gt; class represents an incoming transport (engine.io) connection. A &lt;code&gt;Client&lt;/code&gt; can be associated with many multiplexed &lt;code&gt;Socket&lt;/code&gt; that belong to different &lt;code&gt;Namespace&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85c4c9a29e9db4127b0aeb1ac57bc2dc78e0aa9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opts&lt;/code&gt; are also passed to &lt;code&gt;engine.io&lt;/code&gt; upon initialization of the underlying &lt;code&gt;Socket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce37c8bfbcd3e464820377224b98de5759e6ea5" translate="yes" xml:space="preserve">
          <source>The basic idea is that each module used by Socket.IO provides different debugging scopes that give you insight into the internals. By default, all output is suppressed, and you can opt into seeing messages by supplying the &lt;code&gt;DEBUG&lt;/code&gt; env variable (Node.JS) or the &lt;code&gt;localStorage.debug&lt;/code&gt; property (Browsers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaa507e258342244ed0b78d4a6c4627ce09e7bf" translate="yes" xml:space="preserve">
          <source>The best way to see what information is available is to use the &lt;code&gt;*&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e253916f8f2529e87a3c0081a610fd31101bc46f" translate="yes" xml:space="preserve">
          <source>The default (&lt;code&gt;/&lt;/code&gt;) namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c917648f1e8bcfae586d592996cae3244b2b03" translate="yes" xml:space="preserve">
          <source>The events above are also emitted on the individual sockets that reconnect that depend on this &lt;code&gt;Manager&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfa86a540b5250017e21775e403c48165321c8c" translate="yes" xml:space="preserve">
          <source>The interface in charge of routing messages is what we call the &lt;code&gt;Adapter&lt;/code&gt;. You can implement your own on top of the &lt;a href=&quot;https://github.com/automattic/socket.io-adapter&quot;&gt;socket.io-adapter&lt;/a&gt; (by inheriting from it) or you can use the one we provide on top of &lt;a href=&quot;http://redis.io&quot;&gt;Redis&lt;/a&gt;: &lt;a href=&quot;https://github.com/automattic/socket.io-redis&quot;&gt;socket.io-redis&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24317827d7ed8454d41a31e5b87a224399a9ef74" translate="yes" xml:space="preserve">
          <source>The mechanics of joining rooms are handled by the &lt;code&gt;Adapter&lt;/code&gt; that has been configured (see &lt;code&gt;Server#adapter&lt;/code&gt; above), defaulting to &lt;a href=&quot;https://github.com/socket.io/socket.io-adapter&quot;&gt;socket.io-adapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb2ebbd7d8ad3faa9d7768e9755b448be2a9fc8" translate="yes" xml:space="preserve">
          <source>The mechanics of leaving rooms are handled by the &lt;code&gt;Adapter&lt;/code&gt; that has been configured (see &lt;code&gt;Server#adapter&lt;/code&gt; above), defaulting to &lt;a href=&quot;https://github.com/socket.io/socket.io-adapter&quot;&gt;socket.io-adapter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06706459ac934acc85cb835012cb79557fc8a914" translate="yes" xml:space="preserve">
          <source>The namespace identifier property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82b05240fc4eb27b1852ecd7a1da05a8f39092b" translate="yes" xml:space="preserve">
          <source>The old &lt;code&gt;io.set()&lt;/code&gt; and &lt;code&gt;io.get()&lt;/code&gt; methods are deprecated and only supported for backwards compatibility. Here is a translation of an old authorization example into middleware-style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab98f599d9726e4a5df4b23b6dd4f8494e9b0602" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;resource&lt;/code&gt; option is equivalent to the new &lt;code&gt;path&lt;/code&gt; option, but needs a &lt;code&gt;/&lt;/code&gt; in the beginning. For example, the following configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be088aa822aa43675dc853914b2023eb32b5bdf0" translate="yes" xml:space="preserve">
          <source>The rest of the options are passed to the &lt;code&gt;Manager&lt;/code&gt; constructor (see below for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7bb06757841fb6cfb28088ba294433e9b47c7a9" translate="yes" xml:space="preserve">
          <source>The same options passed to socket.io are always passed to the &lt;code&gt;engine.io&lt;/code&gt;&lt;code&gt;Server&lt;/code&gt; that gets created. See engine.io &lt;a href=&quot;https://github.com/learnboost/engine.io#methods-1&quot;&gt;options&lt;/a&gt; as reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c8241ea3eec1472332f9a9988c5e50131b2120" translate="yes" xml:space="preserve">
          <source>The socket is automatically a member of a room identified with its session id (see &lt;code&gt;Socket#id&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db16735f976e3814bcb38f9cceb8d8c83107426" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s several ways to tackle this problem, like implementing your own channel to send messages into the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511702e62df9f398516e7c4f6a62d12c94166518" translate="yes" xml:space="preserve">
          <source>This has the benefit of &lt;code&gt;multiplexing&lt;/code&gt; a single connection. Instead of socket.io using two &lt;code&gt;WebSocket&lt;/code&gt; connections, it&amp;rsquo;ll use one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8acf61b8bdf22d4ed2a87f81559a8fffadc5461" translate="yes" xml:space="preserve">
          <source>This is a useful feature to minimize the number of resources (TCP connections) and at the same time separate concerns within your application by introducing separation between communication channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd07633d61e50d5945082f25df5daa3dcfda467" translate="yes" xml:space="preserve">
          <source>This is due to certain transports like XHR Polling or JSONP Polling relying on firing several requests during the lifetime of the &amp;ldquo;socket&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02efc4a4611b07f0482e084ec3f488189c135842" translate="yes" xml:space="preserve">
          <source>This is only relevant for updating things like socket.io implementations in other languages, custom socket.io clients, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4364a6479b1d0e101dbfb9e2e24ad0ef272f24" translate="yes" xml:space="preserve">
          <source>This makes it easy to broadcast messages to other sockets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf75c065c2b0f5990c475265458c5721d475a12" translate="yes" xml:space="preserve">
          <source>This method has no effect after &lt;code&gt;attach&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92be099e1abd8ea12ca0b1bf8110b0d786baeb2c" translate="yes" xml:space="preserve">
          <source>This namespace is identified by &lt;code&gt;io.sockets&lt;/code&gt; or simply &lt;code&gt;io&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee40fd0a0aa8255ea84f1b0f77642e8ee8847540" translate="yes" xml:space="preserve">
          <source>This pattern should hopefully be making sense at this point. The names of the files in socket.io/lib are equivalent to their debug names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2fa8ff0e3d2b8bd72417356ce2629783708a5" translate="yes" xml:space="preserve">
          <source>To broadcast, simply add a &lt;code&gt;broadcast&lt;/code&gt; flag to &lt;code&gt;emit&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; method calls. Broadcasting means sending a message to everyone else except for the socket that starts it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793b63791f651dd4aac2889e26e0b0be6c039d3f" translate="yes" xml:space="preserve">
          <source>To do this, simply pass a function as the last parameter of &lt;code&gt;.send&lt;/code&gt; or &lt;code&gt;.emit&lt;/code&gt;. What&amp;rsquo;s more, when you use &lt;code&gt;.emit&lt;/code&gt;, the acknowledgement is done by you, which means you can also pass data along:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb8629696bdcd815d05e4dc0277025b0366d76b" translate="yes" xml:space="preserve">
          <source>To emit to multiple rooms, you can call &lt;code&gt;to&lt;/code&gt; several times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7e0925a777569039cd67d1a0905c68fb77fbac" translate="yes" xml:space="preserve">
          <source>To facilitate this use case, we created two modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c35d949f414b3a1d392f61a735af5cdc11c34a" translate="yes" xml:space="preserve">
          <source>To illustrate why this is needed, consider the example of emitting an event to all connected clients:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213a07966f1191392e1e85e0d7736fdbc04017d9" translate="yes" xml:space="preserve">
          <source>To leave a channel you call &lt;code&gt;leave&lt;/code&gt; in the same fashion as &lt;code&gt;join&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf5bc4675ffe08e49e7925addf8f4efdc397cd8" translate="yes" xml:space="preserve">
          <source>To print all debug logging, set the environment variable DEBUG to *. ie: &lt;code&gt;DEBUG=* node index.js&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4e6d19b861bd6411956bf3c8672350a8b6087a" translate="yes" xml:space="preserve">
          <source>To print logging only from the socket object: &lt;code&gt;DEBUG=socket.io:socket node index.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52168cb472fb76fab36e18061d33add5aa42bc7" translate="yes" xml:space="preserve">
          <source>To print only socket.io related logging: &lt;code&gt;DEBUG=socket.io:* node index.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7d79750ddd69f453cefbd8b88cdcfe543cb8a0" translate="yes" xml:space="preserve">
          <source>To set up a custom namespace, you can call the &lt;code&gt;of&lt;/code&gt; function on the server-side:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1a74946349b51ae407322cd90b6b54ce7ff2ed" translate="yes" xml:space="preserve">
          <source>Upon disconnection, sockets &lt;code&gt;leave&lt;/code&gt; all the channels they were part of automatically, and no specially teardown is needed on your part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c56de6fa4b8ab5ceccfc256f436d6efcd20ee7" translate="yes" xml:space="preserve">
          <source>Using Node.JS Cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd82c5a97d4f7fba2d0b4baca121679b6730b4a" translate="yes" xml:space="preserve">
          <source>Using it just as a cross-browser WebSocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073ad659615fd2190a439db57d27ca3e9b379757" translate="yes" xml:space="preserve">
          <source>Using multiple nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4e4ca4fc9fa4213c383e1da343c10d2d022b67" translate="yes" xml:space="preserve">
          <source>Using with Express 3/4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2492ec20e9752d3499807afd9c7a812fae17be6" translate="yes" xml:space="preserve">
          <source>Using with Node http server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ec78036dbf0cddbc3f809f84ef31b446dc91e3" translate="yes" xml:space="preserve">
          <source>Using with the Express framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe37b7b07cde7323bdab918a23da66cf9b3ad03f" translate="yes" xml:space="preserve">
          <source>We call the default namespace &lt;code&gt;/&lt;/code&gt; and it&amp;rsquo;s the one Socket.IO clients connect to by default, and the one the server listens to by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637cc4322580dd8273498c0361ebdf01dbfb550d" translate="yes" xml:space="preserve">
          <source>When called, it creates a new &lt;code&gt;Manager&lt;/code&gt; for the given URL, and attempts to reuse an existing &lt;code&gt;Manager&lt;/code&gt; for subsequent calls, unless the &lt;code&gt;multiplex&lt;/code&gt; option is passed with &lt;code&gt;false&lt;/code&gt;. Passing this option is the equivalent of passing &lt;code&gt;'force new connection': true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afcadb5eac60370c2a281ae61dcb47804eff96c" translate="yes" xml:space="preserve">
          <source>Within each namespace, you can also define arbitrary channels that sockets can &lt;code&gt;join&lt;/code&gt; and &lt;code&gt;leave&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a047566103afc0824595a8ea84bc4b3cecf01d0e" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;http { }&lt;/code&gt; section of your &lt;code&gt;nginx.conf&lt;/code&gt; file, you can declare a &lt;code&gt;upstream&lt;/code&gt; section with a list of Socket.IO process you want to balance load between:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff62c0e7a31ac1faaa33501d0068d4f8ddb0bfd" translate="yes" xml:space="preserve">
          <source>You can call &lt;code&gt;join&lt;/code&gt; to subscribe the socket to a given channel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1401310e1bcc60512ecbbdfd3dab7c4cb3b5bbd3" translate="yes" xml:space="preserve">
          <source>You can give a Socket.io server arbitrary functions via &lt;code&gt;io.use()&lt;/code&gt; that are run when a socket is created. Check out this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a51ec907aa1fee466fa83adb8cc25e8599fadfe" translate="yes" xml:space="preserve">
          <source>You can see it in action for example on our homepage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e58ac78738f8185ee5c7c2c3d83aca0198db529" translate="yes" xml:space="preserve">
          <source>becomes</source>
          <target state="translated">becomes</target>
        </trans-unit>
        <trans-unit id="cd6d4e6f39e589e14847405c3d5301e307be7896" translate="yes" xml:space="preserve">
          <source>io.set is gone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91d26f48744ae64b5189877f74e819c67e98fd9" translate="yes" xml:space="preserve">
          <source>or in the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8018889279b9894f0ef3b81efe40e91786ff92a" translate="yes" xml:space="preserve">
          <source>socket.io-emitter</source>
          <target state="translated">socket.io-emitter</target>
        </trans-unit>
        <trans-unit id="f8d058f52a8757cf148fc4f20ae27f10385e8e7e" translate="yes" xml:space="preserve">
          <source>socket.io-redis</source>
          <target state="translated">socket.io-redis</target>
        </trans-unit>
        <trans-unit id="b4993da023bb6cf4528cc249a4a1168cbc4c7731" translate="yes" xml:space="preserve">
          <source>vs.</source>
          <target state="translated">vs.</target>
        </trans-unit>
        <trans-unit id="26ffc2c82cecb74cde41a97b6bd22006d3d0e34f" translate="yes" xml:space="preserve">
          <source>you can then &lt;code&gt;emit&lt;/code&gt; messages from any other process to any channel</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
