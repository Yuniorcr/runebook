<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="async">
    <body>
      <group id="async">
        <trans-unit id="56ad21d29f783488b9c35d0faefbbeaf5a1047b8" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2010&amp;ndash;2018 Caolan McMahon</source>
          <target state="translated">&amp;copy; 2010&amp;ndash;2018 Caolan McMahon</target>
        </trans-unit>
        <trans-unit id="9c99f65831c0d9e8c86f402a72eb4c42e824d075" translate="yes" xml:space="preserve">
          <source>(static) apply(fn) &amp;rarr; {function}</source>
          <target state="translated">(static) apply(fn) &amp;rarr; {function}</target>
        </trans-unit>
        <trans-unit id="07452bb5fa81f970ee0dd8579171b3e3aed3bb57" translate="yes" xml:space="preserve">
          <source>(static) applyEach(fns, &amp;hellip;argsopt, callbackopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) applyEach(fns, &amp;hellip;argsopt, callbackopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="e06979c96febaa24c521464a146e27ae7943eaff" translate="yes" xml:space="preserve">
          <source>(static) applyEachSeries(fns, &amp;hellip;argsopt, callbackopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) applyEachSeries(fns, &amp;hellip;argsopt, callbackopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="06bb2adfb9fea07a6d6310fc70a33d2bbf1ce5d4" translate="yes" xml:space="preserve">
          <source>(static) asyncify(func) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) asyncify(func) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="1547e70c0edda56102b43a6ea5bef1f653aacf37" translate="yes" xml:space="preserve">
          <source>(static) auto(tasks, concurrencyopt, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) auto(tasks, concurrencyopt, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="cefedc95a8366b17230f2bd7891b515cedd8cfb4" translate="yes" xml:space="preserve">
          <source>(static) autoInject(tasks, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) autoInject(tasks, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="547c54165e787797b03e6a867788b980df0a9cf3" translate="yes" xml:space="preserve">
          <source>(static) cargo(worker, payloadopt) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</source>
          <target state="translated">(static) cargo(worker, payloadopt) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="75844208f7b2da1fbef0cbe79379a6e506cfedb9" translate="yes" xml:space="preserve">
          <source>(static) cargoQueue(worker, concurrencyopt, payloadopt) &amp;rarr; {module:ControlFlow.CargoObject}</source>
          <target state="translated">(static) cargoQueue(worker, concurrencyopt, payloadopt) &amp;rarr; {module:ControlFlow.CargoObject}</target>
        </trans-unit>
        <trans-unit id="8faafaba6b2963c9bb83fdab9e13ca4f7c231b21" translate="yes" xml:space="preserve">
          <source>(static) compose(&amp;hellip;functions) &amp;rarr; {function}</source>
          <target state="translated">(static) compose(&amp;hellip;functions) &amp;rarr; {function}</target>
        </trans-unit>
        <trans-unit id="058f83e5aa4386a2fb030a11c6be0f74c651c209" translate="yes" xml:space="preserve">
          <source>(static) concat(coll, iteratee, callbackopt)</source>
          <target state="translated">(static) concat(coll, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="7c974d37838d763dcfb2dde62829b8a13e4f075b" translate="yes" xml:space="preserve">
          <source>(static) concatLimit(coll, limit, iteratee, callbackopt)</source>
          <target state="translated">(static) concatLimit(coll, limit, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="8366f3783510d7112115f91823459e5bd75ab261" translate="yes" xml:space="preserve">
          <source>(static) concatSeries(coll, iteratee, callbackopt)</source>
          <target state="translated">(static) concatSeries(coll, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="a567cd64f028cd8e70e76a8397e373894167ae82" translate="yes" xml:space="preserve">
          <source>(static) constant() &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) constant() &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="b041a231bc84c49e22213c87444aa648ad80c2b3" translate="yes" xml:space="preserve">
          <source>(static) detect(coll, iteratee, callbackopt)</source>
          <target state="translated">(static) detect(coll, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="8a8cc95689f01a7398458f62441a602328f2d01f" translate="yes" xml:space="preserve">
          <source>(static) detectLimit(coll, limit, iteratee, callbackopt)</source>
          <target state="translated">(static) detectLimit(coll, limit, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="e57c9a05c11a8369b93950597a71748969a85651" translate="yes" xml:space="preserve">
          <source>(static) detectSeries(coll, iteratee, callbackopt)</source>
          <target state="translated">(static) detectSeries(coll, iteratee, callbackopt)</target>
        </trans-unit>
        <trans-unit id="e26f64adceedae3dc605a0a6059f0940e2e17e0e" translate="yes" xml:space="preserve">
          <source>(static) dir(function)</source>
          <target state="translated">(static) dir(function)</target>
        </trans-unit>
        <trans-unit id="d1fce34090920cce93756e888d33c9b5a18d7e28" translate="yes" xml:space="preserve">
          <source>(static) doUntil(iteratee, test, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) doUntil(iteratee, test, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="dfc0c4ec45b1e220ba7d1809f9381d060c9ac643" translate="yes" xml:space="preserve">
          <source>(static) doWhilst(iteratee, test, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) doWhilst(iteratee, test, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="57666614670bd78b3388efccec2046eaa1ca1d30" translate="yes" xml:space="preserve">
          <source>(static) each(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) each(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="95f15da1d3ff533f07a570e642f29625211a2e3d" translate="yes" xml:space="preserve">
          <source>(static) eachLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) eachLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="5e729b2498ad490a9cb4a61644f77154e1217a80" translate="yes" xml:space="preserve">
          <source>(static) eachOf(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) eachOf(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="5ebcb7a891a6b8c76ea0380a36da9120caeaf4af" translate="yes" xml:space="preserve">
          <source>(static) eachOfLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) eachOfLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="d0b860e51ffff5cd394fdc568f39821a02b96d67" translate="yes" xml:space="preserve">
          <source>(static) eachOfSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) eachOfSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="1ca8d31ebd8aa4d17d6aef5a3591778486088cdd" translate="yes" xml:space="preserve">
          <source>(static) eachSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) eachSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="81e63650c0c35dd6c4272bd348649aa86205d013" translate="yes" xml:space="preserve">
          <source>(static) ensureAsync(fn) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) ensureAsync(fn) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="83524b143b4b9e99d738f44936c9e985dee67e86" translate="yes" xml:space="preserve">
          <source>(static) every(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) every(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="899e9482e140ab5ccbab74c0f346b58c74e5f50e" translate="yes" xml:space="preserve">
          <source>(static) everyLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) everyLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="f4e2477d366c62d7c35fde729d17848b9e9c5c9b" translate="yes" xml:space="preserve">
          <source>(static) everySeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) everySeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="34d00b1605e99c4236c079f51a54250ac3c21a1e" translate="yes" xml:space="preserve">
          <source>(static) filter(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) filter(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="f83ca581990dea47e4501d751b841d7daaf36c5d" translate="yes" xml:space="preserve">
          <source>(static) filterLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) filterLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="cef42c1b5ec7b2791e2ae8bff6e57dfa11bb2983" translate="yes" xml:space="preserve">
          <source>(static) filterSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) filterSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="508a99a49aa4ea52e20c6f375ca5bae755708a78" translate="yes" xml:space="preserve">
          <source>(static) forever(fn, errbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) forever(fn, errbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="258cbf6071815b732149cab6dde6a844870c8064" translate="yes" xml:space="preserve">
          <source>(static) groupBy(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) groupBy(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="36ad3e8ae391158968bba0f075f8ba5fe7c78b5e" translate="yes" xml:space="preserve">
          <source>(static) groupByLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) groupByLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="39cd9da15dc230e8f390669e32107dfe5b3d4c2c" translate="yes" xml:space="preserve">
          <source>(static) groupBySeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) groupBySeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="424c0e312d34ee9ff3feec1e31d65569fb8e63e3" translate="yes" xml:space="preserve">
          <source>(static) log(function)</source>
          <target state="translated">(static) log(function)</target>
        </trans-unit>
        <trans-unit id="c4be5cd063451fbd3fc0f602cd1abf08edd97941" translate="yes" xml:space="preserve">
          <source>(static) map(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) map(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="d3da6f0984bdda687dc9eb87a9a1af8147cff3fd" translate="yes" xml:space="preserve">
          <source>(static) mapLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) mapLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="406597da997280f27de68fa8eae2539e4fa02a32" translate="yes" xml:space="preserve">
          <source>(static) mapSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) mapSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="28acca52995c80e8e1edc0fca828ab6d3efc9608" translate="yes" xml:space="preserve">
          <source>(static) mapValues(obj, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) mapValues(obj, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="bd2fbaf591fd1458df325027393b5b373cc668b9" translate="yes" xml:space="preserve">
          <source>(static) mapValuesLimit(obj, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) mapValuesLimit(obj, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="522aeecee0115af5858d7534c0e2af674868f2a6" translate="yes" xml:space="preserve">
          <source>(static) mapValuesSeries(obj, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) mapValuesSeries(obj, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="d0b5d3b9f44791a5c49dc5b9b33641ca45769931" translate="yes" xml:space="preserve">
          <source>(static) memoize(fn, hasher) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) memoize(fn, hasher) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="04b1193f4cf9a72efd9ff00c6c289da4221c63bb" translate="yes" xml:space="preserve">
          <source>(static) nextTick(callback)</source>
          <target state="translated">(static) nextTick(callback)</target>
        </trans-unit>
        <trans-unit id="137481b75f7fb3b40fc0fb2ddd91b6b3a6d6a16d" translate="yes" xml:space="preserve">
          <source>(static) parallel(tasks, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) parallel(tasks, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="0a357c1ab720ff77e97b6e93aedd1f28ef6ec323" translate="yes" xml:space="preserve">
          <source>(static) parallelLimit(tasks, limit, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) parallelLimit(tasks, limit, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="c2fe92c2661760076d00a8c4016ec3dee23f80cf" translate="yes" xml:space="preserve">
          <source>(static) priorityQueue(worker, concurrency) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</source>
          <target state="translated">(static) priorityQueue(worker, concurrency) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="75f711efbf3851621e70ccd6f84b777fafe26a05" translate="yes" xml:space="preserve">
          <source>(static) queue(worker, concurrencyopt) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</source>
          <target state="translated">(static) queue(worker, concurrencyopt) &amp;rarr; {&lt;a href=&quot;#QueueObject&quot;&gt;QueueObject&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="c9e2cbe826e047b153e51bb9c86011c4cf0eb5c4" translate="yes" xml:space="preserve">
          <source>(static) race(tasks, callback)</source>
          <target state="translated">(static) race(tasks, callback)</target>
        </trans-unit>
        <trans-unit id="dcd7290dd54518cb2fe0953725bb1752c9e8b6c7" translate="yes" xml:space="preserve">
          <source>(static) reduce(coll, memo, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) reduce(coll, memo, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="e59ed8af8535b5f58e408b54fa5e6de915e832d4" translate="yes" xml:space="preserve">
          <source>(static) reduceRight(array, memo, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) reduceRight(array, memo, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="49c57cf3c728e28d72a73d20938a5691149299c8" translate="yes" xml:space="preserve">
          <source>(static) reflect(fn) &amp;rarr; {function}</source>
          <target state="translated">(static) reflect(fn) &amp;rarr; {function}</target>
        </trans-unit>
        <trans-unit id="9bdb2c577a740a846b8f1fe6c0069868b1db96db" translate="yes" xml:space="preserve">
          <source>(static) reflectAll(tasks) &amp;rarr; {Array}</source>
          <target state="translated">(static) reflectAll(tasks) &amp;rarr; {Array}</target>
        </trans-unit>
        <trans-unit id="850a55b6a77f71d4ee334ace8e59baeaca530883" translate="yes" xml:space="preserve">
          <source>(static) reject(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) reject(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="bb6f0a1b60c9085788ce89b2e5e40a1f53f956ce" translate="yes" xml:space="preserve">
          <source>(static) rejectLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) rejectLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="eebb8e502fd79e2166c3691ebe4f749e6fa08822" translate="yes" xml:space="preserve">
          <source>(static) rejectSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) rejectSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="41e61083a7b27d8a34484ca3ad37787d83b7729b" translate="yes" xml:space="preserve">
          <source>(static) retry(optsopt, task, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) retry(optsopt, task, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="b7807d5b4144069faf2829c84da31bfbbadbe2aa" translate="yes" xml:space="preserve">
          <source>(static) retryable(optsopt, task) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) retryable(optsopt, task) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="35a87596c1ac4417b0330d72a94f47c572c93599" translate="yes" xml:space="preserve">
          <source>(static) seq(&amp;hellip;functions) &amp;rarr; {function}</source>
          <target state="translated">(static) seq(&amp;hellip;functions) &amp;rarr; {function}</target>
        </trans-unit>
        <trans-unit id="1d3e3e03e2865a7261ae8abbb75a16bd34e1fe95" translate="yes" xml:space="preserve">
          <source>(static) series(tasks, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) series(tasks, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="a225e3372586b754cd8f4b8eaa5b9181c81574c2" translate="yes" xml:space="preserve">
          <source>(static) setImmediate(callback)</source>
          <target state="translated">(static) setImmediate(callback)</target>
        </trans-unit>
        <trans-unit id="b9fe3f28a429a04dc8b9ef7b059afa030109ef1e" translate="yes" xml:space="preserve">
          <source>(static) some(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) some(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="7a3f73991763235cf7cb36de4ef359084eea5623" translate="yes" xml:space="preserve">
          <source>(static) someLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) someLimit(coll, limit, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="64746c374a05cef2d9790b3d920effb17eaeb2e7" translate="yes" xml:space="preserve">
          <source>(static) someSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) someSeries(coll, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="70505ca8923f23d846482a64152de457877c2922" translate="yes" xml:space="preserve">
          <source>(static) sortBy(coll, iteratee, callback) &amp;rarr; {Promise}</source>
          <target state="translated">(static) sortBy(coll, iteratee, callback) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="13699db896c7d06382469bd76bcf3528ada85e3b" translate="yes" xml:space="preserve">
          <source>(static) timeout(asyncFn, milliseconds, infoopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) timeout(asyncFn, milliseconds, infoopt) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="c1a823fbe1bfde0f7f194a205c87d7595496d275" translate="yes" xml:space="preserve">
          <source>(static) times(n, iteratee, callback) &amp;rarr; {Promise}</source>
          <target state="translated">(static) times(n, iteratee, callback) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="63d4fa94ba5358dce53564bd1e06548b10b5cff3" translate="yes" xml:space="preserve">
          <source>(static) timesLimit(count, limit, iteratee, callback) &amp;rarr; {Promise}</source>
          <target state="translated">(static) timesLimit(count, limit, iteratee, callback) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="6e103556a0d69a9bcbd7e17c52170ae6a5e9ef29" translate="yes" xml:space="preserve">
          <source>(static) timesSeries(n, iteratee, callback) &amp;rarr; {Promise}</source>
          <target state="translated">(static) timesSeries(n, iteratee, callback) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="4b92f6032f152ac93f0ec165b3839a4eb300e873" translate="yes" xml:space="preserve">
          <source>(static) transform(coll, accumulatoropt, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) transform(coll, accumulatoropt, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="73f5b0955d472e45eebc6f58b47d4df4c5ddf076" translate="yes" xml:space="preserve">
          <source>(static) tryEach(tasks, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) tryEach(tasks, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="ff98eca4ebcb7f95961c575ec457b2f98a752591" translate="yes" xml:space="preserve">
          <source>(static) unmemoize(fn) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</source>
          <target state="translated">(static) unmemoize(fn) &amp;rarr; {&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;}</target>
        </trans-unit>
        <trans-unit id="4b8b9784cde065ae0d35b71884757da90c93b959" translate="yes" xml:space="preserve">
          <source>(static) until(test, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) until(test, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="1257fa25a89ed49fa8330e939d1ec615d3b246d7" translate="yes" xml:space="preserve">
          <source>(static) waterfall(tasks, callbackopt)</source>
          <target state="translated">(static) waterfall(tasks, callbackopt)</target>
        </trans-unit>
        <trans-unit id="3712f38a96ae0e7f99ebafd3ca3c8983ebf3d264" translate="yes" xml:space="preserve">
          <source>(static) whilst(test, iteratee, callbackopt) &amp;rarr; {Promise}</source>
          <target state="translated">(static) whilst(test, iteratee, callbackopt) &amp;rarr; {Promise}</target>
        </trans-unit>
        <trans-unit id="e897b4433173e3ac9f9184bc13757836702b7825" translate="yes" xml:space="preserve">
          <source>*&amp;lt;optional&amp;gt;</source>
          <target state="translated">*&amp;lt;optional&amp;gt;</target>
        </trans-unit>
        <trans-unit id="356a192b7913b04c54574d18c28d46e6395428ab" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>
        </trans-unit>
        <trans-unit id="bb4a7587fb31336e7a020a691dd75b6ec6b52b7f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/apply.js.html&quot;&gt;apply.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/apply.js.html#line1&quot;&gt;line 1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8ef134cf557e7cd1f3cb842f3e1832fc35c479" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/applyEach.js.html&quot;&gt;applyEach.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/applyEach.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964dbec10de7c2504aa274c2f38808f530d953cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/applyEachSeries.js.html&quot;&gt;applyEachSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/applyEachSeries.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fb55015745a357bc80890f89502be3e4275f51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/asyncify.js.html&quot;&gt;asyncify.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/asyncify.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2baaf2c6549a094dbf516d03181724e510e0215e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/auto.js.html&quot;&gt;auto.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/auto.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3e839948ecf4ceb9ec434c7d7f371344329669" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/autoInject.js.html&quot;&gt;autoInject.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/autoInject.js.html#line25&quot;&gt;line 25&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc29bbf78b42bf42f3920797a18cb424d859f02" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/cargo.js.html&quot;&gt;cargo.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/cargo.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8cc6238869eb4b85715d8bb6150db37934b522" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/cargoQueue.js.html&quot;&gt;cargoQueue.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/cargoQueue.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d52ba347a80d612d11bbbc2dc46eb0f9f948797" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/compose.js.html&quot;&gt;compose.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/compose.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b56fb0cfce44055664463a558c7d705e3ea2623" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/concat.js.html&quot;&gt;concat.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/concat.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f5e554adcbdccfa59e97a07c15bda1e3cf07d7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/concatLimit.js.html&quot;&gt;concatLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/concatLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f088e6a6c7a613b7306d0b6ff4cda17693ea5ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/concatSeries.js.html&quot;&gt;concatSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/concatSeries.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0d015c8a9256d14d74c0d7100a9ebfc0afa95e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/constant.js.html&quot;&gt;constant.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/constant.js.html#line1&quot;&gt;line 1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e787964ca5bb6dd6d801516dee91c277ce7bf6c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/detect.js.html&quot;&gt;detect.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/detect.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f116d8f6e488788f96fbe226a5473201ca736c41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/detectLimit.js.html&quot;&gt;detectLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/detectLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9a7e0409d519931fa5977def17ec737482494b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/detectSeries.js.html&quot;&gt;detectSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/detectSeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f99ac4328f9e3c50dcaa5d624e2d20670537bec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/dir.js.html&quot;&gt;dir.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/dir.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988ef6192e86d36e678c8cb1b857a9ed3b7ab109" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/doUntil.js.html&quot;&gt;doUntil.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/doUntil.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7055f051dfee8dbe38ce8952656df82086fc42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/doWhilst.js.html&quot;&gt;doWhilst.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/doWhilst.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e52856c2ddd8c88e66812515d87b3c1c2a5dc12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/each.js.html&quot;&gt;each.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/each.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befa00144333e077c29886a7b17596540b8cf8a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/eachLimit.js.html&quot;&gt;eachLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/eachLimit.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f109af2e158f84b9fca31d9bcf87da544fa93" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/eachOf.js.html&quot;&gt;eachOf.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/eachOf.js.html#line42&quot;&gt;line 42&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f86947999dc9ae347305c4dcc59b3713cd9e5d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/eachOfLimit.js.html&quot;&gt;eachOfLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/eachOfLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7cf37ab6883d3e03e5fe976cd58c18950c7208" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/eachOfSeries.js.html&quot;&gt;eachOfSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/eachOfSeries.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943481849e5a3eb613679b6fdfc436b5513fd59f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/eachSeries.js.html&quot;&gt;eachSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/eachSeries.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174eecfccdb3b7f7a94f72de49eedfa491e694e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/ensureAsync.js.html&quot;&gt;ensureAsync.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/ensureAsync.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e0279ebd1d7c55d2edd638cbb923e2f4abb6f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/every.js.html&quot;&gt;every.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/every.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad16fba96a25c2a2d7494f4db5c912248f170609" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/everyLimit.js.html&quot;&gt;everyLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/everyLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17be4b3aaf77bab5a013927645913cc9e6f80a11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/everySeries.js.html&quot;&gt;everySeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/everySeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a780997b1ebdb2515cef7331e4f521c8c78591" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/filter.js.html&quot;&gt;filter.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/filter.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9841097359c8525398c2d9f7541ba7458788e18" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/filterLimit.js.html&quot;&gt;filterLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/filterLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4702b9dbcd2113cd3b34612512c88e6c6d68e128" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/filterSeries.js.html&quot;&gt;filterSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/filterSeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9964ff01a0755f420994085dcfdcab89ad828d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/forever.js.html&quot;&gt;forever.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/forever.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1664c554a00ef521cd1fdf449dd2204eef8e0fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;s also receive an object containing the results of functions which have completed so far as the first argument, if they have dependencies. If a task function has no dependencies, it will only be passed a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec7f4d0e66425fdc7a5dfb9492712c00f871a63" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/groupBy.js.html&quot;&gt;groupBy.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/groupBy.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b75ef66d6ac4fec61a01d62f63fbe6436b359e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/groupByLimit.js.html&quot;&gt;groupByLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/groupByLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a37ecc7c0b08915a6f62c225ddc38915344b794" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/groupBySeries.js.html&quot;&gt;groupBySeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/groupBySeries.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bbc6c70c57e0d3e1e4fdde1228ec82a92ccad7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html&quot;&gt;index.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html#line40&quot;&gt;line 40&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba3e2b6ee1ff5fc43e2d946e5a7c370c6bdae1c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html&quot;&gt;index.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html#line50&quot;&gt;line 50&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c649122169fb1243267a2ca4006808897019bbbd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html&quot;&gt;index.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html#line56&quot;&gt;line 56&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4c730a3013e4e9ae704fb8f33257bd9a0c7119" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html&quot;&gt;index.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/index.js.html#line61&quot;&gt;line 61&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a616bdb18c219a841ce7a8d1e963156f4938dd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/log.js.html&quot;&gt;log.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/log.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d576164d720811bbe779a8f2c6f11d8fd46fd146" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/map.js.html&quot;&gt;map.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/map.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab67d37af46359c88c1225f3055393ae586e9d0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/mapLimit.js.html&quot;&gt;mapLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/mapLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cf5de0d0d1e2fe11640bf5fd5cce205abc71b9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/mapSeries.js.html&quot;&gt;mapSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/mapSeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e11bc59540179cd2d933dddaa81c705d3eade29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/mapValues.js.html&quot;&gt;mapValues.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/mapValues.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff7a2718ef18eba61c88142bbd0ababebbd2b67" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/mapValuesLimit.js.html&quot;&gt;mapValuesLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/mapValuesLimit.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b1421e874bf06f082097b902c651e7ae39f019" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/mapValuesSeries.js.html&quot;&gt;mapValuesSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/mapValuesSeries.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f812acba3a13644e358d59f082b8f4d98c166682" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/memoize.js.html&quot;&gt;memoize.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/memoize.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2492d5a9568317c43385fadbe3db7a63b8907002" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/nextTick.js.html&quot;&gt;nextTick.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/nextTick.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97669b0992fdb8b687d74a19598355d81d30a71d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/parallel.js.html&quot;&gt;parallel.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/parallel.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604c3b673971995b9f494f0d5869afb3751b9e82" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/parallelLimit.js.html&quot;&gt;parallelLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/parallelLimit.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c66de71b7a7bc642a70a0b1ca85205e837bcd6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/priorityQueue.js.html&quot;&gt;priorityQueue.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/priorityQueue.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a36deb0c31478c508248bcaef2c46b40ddb3959" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/queue.js.html&quot;&gt;queue.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/queue.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c7af885db7d955f3f48dfb000265c4cc43f21a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/queue.js.html&quot;&gt;queue.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/queue.js.html#line85&quot;&gt;line 85&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2a749430f74174b59fa7f369e3a5f3bd3ac1be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/race.js.html&quot;&gt;race.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/race.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05e76a6410fd41a85e14d33e56d96829d30af5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/reduce.js.html&quot;&gt;reduce.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/reduce.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8551c75380e27e1ba2769029db2ae87fd4d39d9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/reduceRight.js.html&quot;&gt;reduceRight.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/reduceRight.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f84abfbfa0d45635baf37496098ed39b935c38b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/reflect.js.html&quot;&gt;reflect.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/reflect.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48eecd420622666807c5c6060a47452d995ea6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/reflectAll.js.html&quot;&gt;reflectAll.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/reflectAll.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fd751de284e62c16afc22f7585c64dc6e2aaab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/reject.js.html&quot;&gt;reject.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/reject.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313572edc5adb4814c13d8034d8e3a4bc55665f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/rejectLimit.js.html&quot;&gt;rejectLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/rejectLimit.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b6a6079cd35bc089396f5137babfd63bb09af0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/rejectSeries.js.html&quot;&gt;rejectSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/rejectSeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8a2b1ca33c9d52a4786da7d69a9e05298762a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/retry.js.html&quot;&gt;retry.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/retry.js.html#line10&quot;&gt;line 10&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bd8c31b564c3720d2c6d959db851a49823c8ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/retryable.js.html&quot;&gt;retryable.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/retryable.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce4d389e8b1ac1a3cb16e6177505113a75db972" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/seq.js.html&quot;&gt;seq.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/seq.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593ed9bb980ec87af1b040d08e88c954bd017ed6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/series.js.html&quot;&gt;series.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/series.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ad44f1a88bd676f9862a3f91fdc770e2d0161a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/setImmediate.js.html&quot;&gt;setImmediate.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/setImmediate.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af17290be5bed41f96ee62f4760c221902447fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/some.js.html&quot;&gt;some.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/some.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cb00c4a34608457ef1ebe2c48bcfa43ed6fd7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/someLimit.js.html&quot;&gt;someLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/someLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d72a5ae775f0312fe326955168f745e38b99076" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/someSeries.js.html&quot;&gt;someSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/someSeries.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfa72806d5d689eca035020751eecba293e4be7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/sortBy.js.html&quot;&gt;sortBy.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/sortBy.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d1466a3e991ebbe6be234a45ac620ee75b8d85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/timeout.js.html&quot;&gt;timeout.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/timeout.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b0309ee072c05a0292d2e18ee8329cc401b690" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/times.js.html&quot;&gt;times.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/times.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e63c9e4268b478937bca185262c658914c57634" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/timesLimit.js.html&quot;&gt;timesLimit.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/timesLimit.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fb71a739fd7f90cf8c6ee1d67077340aa6a29e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/timesSeries.js.html&quot;&gt;timesSeries.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/timesSeries.js.html#line3&quot;&gt;line 3&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3904b1ff4b50ecf177fad360b59795cc6ff718bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/transform.js.html&quot;&gt;transform.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/transform.js.html#line6&quot;&gt;line 6&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a27f71861f63ff590fb4f1bf90bfed5383c2547" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/tryEach.js.html&quot;&gt;tryEach.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/tryEach.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d865827a8de886c2adfd1c00809c1496e486dd72" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/unmemoize.js.html&quot;&gt;unmemoize.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/unmemoize.js.html#line1&quot;&gt;line 1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932d85cdf19cd7bad63106f902e67df47293e22c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/until.js.html&quot;&gt;until.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/until.js.html#line4&quot;&gt;line 4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab040256a8fc15a79ef9c08684378784760d934" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/waterfall.js.html&quot;&gt;waterfall.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/waterfall.js.html#line7&quot;&gt;line 7&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643ceac65674f4ebabbf289be9babd93c3836f50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://caolan.github.io/async/v3/whilst.js.html&quot;&gt;whilst.js&lt;/a&gt;, &lt;a href=&quot;https://caolan.github.io/async/v3/whilst.js.html#line5&quot;&gt;line 5&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a625136db39929493037c624601a98d3a4cf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doWhilst&lt;/code&gt; is to &lt;code&gt;whilst&lt;/code&gt; as &lt;code&gt;do while&lt;/code&gt; is to &lt;code&gt;while&lt;/code&gt; in plain JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9261d70e546fd58dd6f789804397a2d90d65332" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;errorFilter&lt;/code&gt; - An optional synchronous function that is invoked on erroneous result. If it returns &lt;code&gt;true&lt;/code&gt; the retry attempts will continue; if the function returns &lt;code&gt;false&lt;/code&gt; the retry flow is aborted with the current attempt's error and result being returned to the final callback. Invoked with (err).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991da06ab569460be17ccf7f43a1a1eb3ae02572" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interval&lt;/code&gt; - The time to wait between retries, in milliseconds. The default is &lt;code&gt;0&lt;/code&gt;. The interval may also be specified as a function of the retry count (see example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63404b78c905b6a388a456303afae701f3f2aeab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push(task, priority, [callback])&lt;/code&gt; - &lt;code&gt;priority&lt;/code&gt; should be a number. If an array of &lt;code&gt;tasks&lt;/code&gt; is given, all tasks will be assigned the same priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5957255ed6f9903b9230413bd847cc8d3103aac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;times&lt;/code&gt; - The number of attempts to make before giving up. The default is &lt;code&gt;5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668c835956bb79a76d22ce750ec315dfddb87ff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hint:&lt;/strong&gt; Use &lt;a href=&quot;#reflect&quot;&gt;&lt;code&gt;reflect&lt;/code&gt;&lt;/a&gt; to continue the execution of other tasks when a task fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1349963b058f113cc437ca5dd36cd1a525418aba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note: if the async function errs, the result will not be cached and subsequent calls will call the wrapped function.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1178410424347fbca83faf5a121f47ee442866be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;parallel&lt;/code&gt; is about kicking-off I/O tasks in parallel, not about parallel execution of code. If your tasks do not use any timers or perform any I/O, they will actually be executed in series. Any synchronous setup sections for each task will happen one after the other. JavaScript remains single-threaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb35a88a2e72503f7f70e8d53efec4194ab5baf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt; that while many implementations preserve the order of object properties, the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-8.6&quot;&gt;ECMAScript Language Specification&lt;/a&gt; explicitly states that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20e67effb1fda8f5649a4acefb1f102b69ce1ed" translate="yes" xml:space="preserve">
          <source>A Promise, if no callback is passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b9543812ebc5a36c35422764b190105314bbeb" translate="yes" xml:space="preserve">
          <source>A callback to run once any of the functions have completed. This function gets an error or result from the first function that completed. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8bc451f774ca1e5dc44337834ab650574c4f4d" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Results is an array containing the concatenated results of the &lt;code&gt;iteratee&lt;/code&gt; function. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c638ff4b477db9550d4363b6c7a97bb6b521ef" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Results is the items from the original &lt;code&gt;coll&lt;/code&gt; sorted by the values returned by the &lt;code&gt;iteratee&lt;/code&gt; calls. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4158b7b799f306db80db21a54f6b3416fb9a99" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Invoked with (err, results)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2edee8d1e93dbc7b3230d1ea61b79d96bb887d" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363bee64f271f90bbc4a1306ff9f3f3ebf35f5b3" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Result is the reduced value. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8cc5b323865609e4cf252639d5c13fd057fdb0" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Result is the transformed accumulator. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c01193bdc18fcba709eeb0217e465092907ee26" translate="yes" xml:space="preserve">
          <source>A callback which is called after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Result will be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on the values of the async tests. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0d9cda595a507582e41bf9f2973e203b465c0b" translate="yes" xml:space="preserve">
          <source>A callback which is called after the test function has failed and repeated execution of &lt;code&gt;iteratee&lt;/code&gt; has stopped. &lt;code&gt;callback&lt;/code&gt; will be passed an error and any arguments passed to the final &lt;code&gt;iteratee&lt;/code&gt;'s callback. Invoked with (err, [results]);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106914d327b7d210db6f745089354817f55b2247" translate="yes" xml:space="preserve">
          <source>A callback which is called after the test function has passed and repeated execution of &lt;code&gt;iteratee&lt;/code&gt; has stopped. &lt;code&gt;callback&lt;/code&gt; will be passed an error and any arguments passed to the final &lt;code&gt;iteratee&lt;/code&gt;'s callback. Invoked with (err, [results]);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83982ccbcdf0aaebfc842281e404d272c29c51ee" translate="yes" xml:space="preserve">
          <source>A callback which is called as soon as any iteratee returns &lt;code&gt;true&lt;/code&gt;, or after all the &lt;code&gt;iteratee&lt;/code&gt; functions have finished. Result will be the first item in the array that passes the truth test (iteratee) or the value &lt;code&gt;undefined&lt;/code&gt; if none passed. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2e014510b842c66f2f084248bfabc3aaf93a97" translate="yes" xml:space="preserve">
          <source>A callback which is called as soon as any iteratee returns &lt;code&gt;true&lt;/code&gt;, or after all the iteratee functions have finished. Result will be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on the values of the async tests. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a7985ad449103412bedd98a67a6063e68a6b9f" translate="yes" xml:space="preserve">
          <source>A callback which is called when all &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. &lt;code&gt;result&lt;/code&gt; is a new object consisting of each key from &lt;code&gt;obj&lt;/code&gt;, with each transformed value on the right-hand side. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842bfd47f75fe8848f27b07a91486f4b08a2454d" translate="yes" xml:space="preserve">
          <source>A callback which is called when all &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Invoked with (err).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84a0974fd4c54a8bad41eb436d6aae9c041e460" translate="yes" xml:space="preserve">
          <source>A callback which is called when all &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Result is an &lt;code&gt;Object&lt;/code&gt; whoses properties are arrays of values which returned the corresponding key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec61ca49fd5b85faeb9d07e6a16680e58c61377" translate="yes" xml:space="preserve">
          <source>A callback which is called when all &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Results is an Array of the transformed items from the &lt;code&gt;coll&lt;/code&gt;. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2351f1498cdb5f9150c6ab358651aa38c6ade30f" translate="yes" xml:space="preserve">
          <source>A callback which is called when all &lt;code&gt;iteratee&lt;/code&gt; functions have finished, or an error occurs. Results is an array of the transformed items from the &lt;code&gt;coll&lt;/code&gt;. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cc2ceba3b2c74a71150b3dd5dfdf42c91670fc" translate="yes" xml:space="preserve">
          <source>A cargo object to manage the tasks. Callbacks can attached as certain properties to listen for specific events during the lifecycle of the cargo and inner queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a341d7def09b81952d3e269742effbb8b179043" translate="yes" xml:space="preserve">
          <source>A cargoQueue object to manage the tasks. Callbacks can attached as certain properties to listen for specific events during the lifecycle of the cargoQueue and inner queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ea8bb36c0411ddfde6a13eadb1633a9120858d" translate="yes" xml:space="preserve">
          <source>A close relative of &lt;a href=&quot;#retry&quot;&gt;&lt;code&gt;retry&lt;/code&gt;&lt;/a&gt;. This method wraps a task and makes it retryable, rather than immediately calling it with retries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed39dbe4d9a82be51eccbfe3ba9180215049cd1a" translate="yes" xml:space="preserve">
          <source>A collection containing &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;async functions&lt;/a&gt; to run in series. Each function can complete with any number of optional &lt;code&gt;result&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b33e8866269af1ed3e73a5138c9193973fcf36" translate="yes" xml:space="preserve">
          <source>A collection containing functions to run, each function is passed a &lt;code&gt;callback(err, result)&lt;/code&gt; it must call on completion with an error &lt;code&gt;err&lt;/code&gt; (which can be &lt;code&gt;null&lt;/code&gt;) and an optional &lt;code&gt;result&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd418ca93f5c970cad3dfd8de9775df2f43a393" translate="yes" xml:space="preserve">
          <source>A collection of &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;s to all call with the same arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20afe4bbee95c33813e165793f8b38b5b20eb1f7" translate="yes" xml:space="preserve">
          <source>A collection of &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;async functions&lt;/a&gt; to run. Each async function can complete with any number of optional &lt;code&gt;result&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56de6e182a95d69a0d0d529cb17bb8c08181daf9" translate="yes" xml:space="preserve">
          <source>A collection of &lt;code&gt;async&lt;/code&gt; functions for controlling the flow through a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9b8145a09b826205b7188f07b2a327dacde45b" translate="yes" xml:space="preserve">
          <source>A collection of &lt;code&gt;async&lt;/code&gt; functions for manipulating collections, such as arrays and objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cfd39f81966b92644b53bae3d0e99d7a075729" translate="yes" xml:space="preserve">
          <source>A collection of &lt;code&gt;async&lt;/code&gt; utility functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a411e86fdca648f0e720b384f1a797ec5deca1" translate="yes" xml:space="preserve">
          <source>A collection to iterate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbfb27017b1025c0ac56f895259f33698e2942d" translate="yes" xml:space="preserve">
          <source>A dependency-injected version of the &lt;a href=&quot;#auto&quot;&gt;async.auto&lt;/a&gt; function. Dependent tasks are specified as parameters to the function, after the usual callback parameter, with the parameter names matching the names of the tasks it depends on. This can provide even more readable task graphs which can be easier to maintain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd274d2138a17e8736110704224064165136ae9" translate="yes" xml:space="preserve">
          <source>A function applied to each item in the array to produce the next step in the reduction. The &lt;code&gt;iteratee&lt;/code&gt; should complete with the next state of the reduction. If the iteratee complete with an error, the reduction is stopped and the main &lt;code&gt;callback&lt;/code&gt; is immediately called with the error. Invoked with (memo, item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1f7369de40aee53a4f9b6bf7ffa51bd08acab0" translate="yes" xml:space="preserve">
          <source>A function applied to each item in the collection that potentially modifies the accumulator. Invoked with (accumulator, item, key, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d74cd4f9bb8ddd7f17e3d07d631347f6d6409f" translate="yes" xml:space="preserve">
          <source>A function that always passes null to it's callback as the error. The second argument to the callback will be an &lt;code&gt;object&lt;/code&gt; with either an &lt;code&gt;error&lt;/code&gt; or a &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cd37769f0df2921e16040f59a7c5371228e685" translate="yes" xml:space="preserve">
          <source>A function to apply to each item in &lt;code&gt;coll&lt;/code&gt;, which should use an array as its result. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a35ae872966ee905f2de79a290fa2599b8d853" translate="yes" xml:space="preserve">
          <source>A function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; is the item's key, or index in the case of an array. Invoked with (item, key, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4989d55d0e8e375a526b7be5babd93ae399b59b6" translate="yes" xml:space="preserve">
          <source>A function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The iteratee should complete with an array an array of results. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da324a264c34586a318107314ed82a0c2180078b" translate="yes" xml:space="preserve">
          <source>A function to apply to each value and key in &lt;code&gt;coll&lt;/code&gt;. The iteratee should complete with the transformed value as its result. Invoked with (value, key, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb2c46057a78bb39ddd87f3024716eaef5b6c51" translate="yes" xml:space="preserve">
          <source>A function which is called each time &lt;code&gt;test&lt;/code&gt; passes. Invoked with (callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e774e10a7417c053c94ddf98b52f04066d844c" translate="yes" xml:space="preserve">
          <source>A function, that when called, is the result of appling the &lt;code&gt;args&lt;/code&gt; to the list of functions. It takes no args, other than a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e023656c4dfab679207b77f60cb6d9f6b6e0c2e0" translate="yes" xml:space="preserve">
          <source>A helper function that wraps an array or an object of functions with &lt;code&gt;reflect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288351a6a0ac1f2cb5867145a0ab5fa12fafdf73" translate="yes" xml:space="preserve">
          <source>A minimum threshold buffer in order to say that the &lt;code&gt;queue&lt;/code&gt; is &lt;code&gt;unsaturated&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3268d4043a207f3a0964572bd976093f51f9d944" translate="yes" xml:space="preserve">
          <source>A priorityQueue object to manage the tasks. There are two differences between &lt;code&gt;queue&lt;/code&gt; and &lt;code&gt;priorityQueue&lt;/code&gt; objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be534f2e348fa9dc98049a6da81a899741c30b75" translate="yes" xml:space="preserve">
          <source>A queue object to manage the tasks. Callbacks can be attached as certain properties to listen for specific events during the lifecycle of the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462a810a56c6d5345d21cedc1ad39170c2e2ae94" translate="yes" xml:space="preserve">
          <source>A queue of tasks for the worker function to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7044594d92a731296ef8a398bf177e55f1a99c62" translate="yes" xml:space="preserve">
          <source>A relative of &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, designed for use with objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11697ae63487c09eb1c0b237a29b135fce2151f" translate="yes" xml:space="preserve">
          <source>A relative of &lt;code&gt;reduce&lt;/code&gt;. Takes an Object or Array, and iterates over each element in parallel, each step potentially mutating an &lt;code&gt;accumulator&lt;/code&gt; value. The type of the accumulator defaults to the type of collection passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dee32bfc6b95c777ba0e8fee02fa34fa0bc927b" translate="yes" xml:space="preserve">
          <source>A truth test to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The &lt;code&gt;iteratee&lt;/code&gt; is passed a &lt;code&gt;callback(err, truthValue)&lt;/code&gt;, which must be called with a boolean argument once it has completed. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b165022b364bf571ed219bb30aa144a0fdb95821" translate="yes" xml:space="preserve">
          <source>A truth test to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The iteratee must complete with a boolean value as its result. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1705514f41bc5c75b6f34678b2dbd6b658791df" translate="yes" xml:space="preserve">
          <source>Alias:</source>
          <target state="translated">Alias:</target>
        </trans-unit>
        <trans-unit id="6acacfcaf1a33349a25e638499a739faec1c0534" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt; for determining how many &lt;code&gt;worker&lt;/code&gt; functions should be run in parallel. If omitted, the concurrency defaults to &lt;code&gt;1&lt;/code&gt;. If the concurrency is &lt;code&gt;0&lt;/code&gt;, an error is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729838462375a57c57229135c15dae80c4712e77" translate="yes" xml:space="preserve">
          <source>An array containing &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;async functions&lt;/a&gt; to run. Each function can complete with an optional &lt;code&gt;result&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07183514fd807a9c527b6a06025e93ff7ff7873b" translate="yes" xml:space="preserve">
          <source>An array of &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;async functions&lt;/a&gt; to run. Each function should complete with any number of &lt;code&gt;result&lt;/code&gt; values. The &lt;code&gt;result&lt;/code&gt; values will be passed as arguments, in order, to the next task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6325ef5320b71319d4f7a326302a00e6c2de240b" translate="yes" xml:space="preserve">
          <source>An async function for processing a queued task. If you want to handle errors from an individual task, pass a callback to &lt;code&gt;q.push()&lt;/code&gt;. Invoked with (task, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb781418389d00475f2e47f70c5469b6fd244ee" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. Invoked with (item, callback). The array index is not passed to the iteratee. If you need the index, use &lt;code&gt;eachOf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7103aa476b5af96daca14d17194b94e7e52d4c5c" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. Invoked with (item, key, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5214437645c52dda5a62ac4a3167e3a478568c4" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The &lt;code&gt;key&lt;/code&gt; is the item's key, or index in the case of an array. Invoked with (item, key, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ca2dfbda2d042c228b84b85c3298b03340b041" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The array index is not passed to the iteratee. If you need the index, use &lt;code&gt;eachOfLimit&lt;/code&gt;. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d156fb3f6ec8722543fdd50db646aa4604b0cf" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The array index is not passed to the iteratee. If you need the index, use &lt;code&gt;eachOfSeries&lt;/code&gt;. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd6306069b5697ef99ac4b99aab0558210b41cc" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The iteratee should complete with a &lt;code&gt;key&lt;/code&gt; to group the value under. Invoked with (value, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10b79c6e7b631ecf6ee7e411a7b6bd3fb181509" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The iteratee should complete with a value to use as the sort criteria as its &lt;code&gt;result&lt;/code&gt;. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5bb8d596dd26248a6961ecd256d24eab32a5fe" translate="yes" xml:space="preserve">
          <source>An async function to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The iteratee should complete with the transformed item. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de31b717bf465062d69f6712ec057420fa1eb338" translate="yes" xml:space="preserve">
          <source>An async function to retry. Invoked with (callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a51301edd6582ddd0028db105234eadd40a78cd" translate="yes" xml:space="preserve">
          <source>An async function which is called each time &lt;code&gt;test&lt;/code&gt; fails. Invoked with (callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d40acb7879508528b61d7aa7109aaa2acdfc074" translate="yes" xml:space="preserve">
          <source>An async function which is called each time &lt;code&gt;test&lt;/code&gt; passes. Invoked with (callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917cb77ea26cf277dcd7f26947cd7ec512631bfd" translate="yes" xml:space="preserve">
          <source>An async truth test to apply to each item in &lt;code&gt;coll&lt;/code&gt;. The should complete with a boolean value as its &lt;code&gt;result&lt;/code&gt;. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a754c567d369573fcac940de0714409bf6f6082" translate="yes" xml:space="preserve">
          <source>An async truth test to apply to each item in the collection in parallel. The iteratee must complete with a boolean result value. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e236c937fa06d5435082175545b31db4a6fb6aa0" translate="yes" xml:space="preserve">
          <source>An async truth test to apply to each item in the collection in series. The iteratee must complete with a boolean result value. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755cf821b0746af2bda42a27cb510fdb0a4c4d74" translate="yes" xml:space="preserve">
          <source>An async truth test to apply to each item in the collections in parallel. The iteratee should complete with a boolean &lt;code&gt;result&lt;/code&gt; value. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f16c053ef442eaa725539c40bac50a9dc4b3396" translate="yes" xml:space="preserve">
          <source>An async truth test to apply to each item in the collections in series. The iteratee should complete with a boolean &lt;code&gt;result&lt;/code&gt; value. Invoked with (item, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e4ee733c54dda6b4acd42257d679947c524481" translate="yes" xml:space="preserve">
          <source>An asynchronous function for processing an array of queued tasks. Invoked with &lt;code&gt;(tasks, callback)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0facfa8c26daed7e5b2109bd1575b906942fbf7" translate="yes" xml:space="preserve">
          <source>An asynchronous wrapper of the &lt;code&gt;func&lt;/code&gt;. To be invoked with &lt;code&gt;(args..., callback)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a6ee387718c4d22ed684126f267ff3ee79ddf6" translate="yes" xml:space="preserve">
          <source>An object, each of whose properties is an &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt; of the form 'func([dependencies...], callback). The object's key of a property serves as the name of the task defined by that property, i.e. can be used when specifying requirements for other tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabe188750b2501fae635fa7e5dc947977bd2f2e" translate="yes" xml:space="preserve">
          <source>An object. Each of its properties is either a function or an array of requirements, with the &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt; itself the last item in the array. The object's key of a property serves as the name of the task defined by that property, i.e. can be used when specifying requirements for other tasks. The function receives one or two arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37cfae3098ec2be276491f5aff04c5af8ba82c1" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;integer&lt;/code&gt; for determining how many tasks should be processed per round; if omitted, the default is unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673dbfad7af293c6a311f0131cdddbc89b9df8db" translate="yes" xml:space="preserve">
          <source>An optional &lt;code&gt;integer&lt;/code&gt; for determining the maximum number of tasks that can be run in parallel. By default, as many as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ca86b75c0e6a8425cf6e988063c60f6c229fe4" translate="yes" xml:space="preserve">
          <source>An optional callback to run once all the functions have completed successfully. This function gets a results array (or object) containing all the result arguments passed to the task callbacks. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323dd6485b5a853aef88952f1c86ad6e2629dde0" translate="yes" xml:space="preserve">
          <source>An optional callback to run once all the functions have completed. This function gets a results array (or object) containing all the result arguments passed to the &lt;code&gt;task&lt;/code&gt; callbacks. Invoked with (err, result).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169eaecf555d4bc4a3d50d732846ba6fea793273" translate="yes" xml:space="preserve">
          <source>An optional callback to run once all the functions have completed. This will be passed the results of the last task's callback. Invoked with (err, [results]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440dd5cd5e59eb12ad8ae55d5d27bbcd31dd930a" translate="yes" xml:space="preserve">
          <source>An optional callback which is called when all the tasks have been completed. It receives the &lt;code&gt;err&lt;/code&gt; argument if any &lt;code&gt;tasks&lt;/code&gt; pass an error to their callback, and a &lt;code&gt;results&lt;/code&gt; object with any completed task results, similar to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd4a091f70f186928ae1e73153bf04df2fa395f" translate="yes" xml:space="preserve">
          <source>An optional callback which is called when all the tasks have been completed. It receives the &lt;code&gt;err&lt;/code&gt; argument if any &lt;code&gt;tasks&lt;/code&gt; pass an error to their callback. Results are always returned; however, if an error occurs, no further &lt;code&gt;tasks&lt;/code&gt; will be performed, and the results object will only contain partial results. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f51dbc2890f59e1d3fac7526e22ef7255fb622f" translate="yes" xml:space="preserve">
          <source>An optional callback which is called when one of the tasks has succeeded, or all have failed. It receives the &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; arguments of the last attempt at completing the &lt;code&gt;task&lt;/code&gt;. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c442b5296115ee3fe32e785c70b67daabf0cf2ca" translate="yes" xml:space="preserve">
          <source>An optional callback which is called when the task has succeeded, or after the final failed attempt. It receives the &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt; arguments of the last attempt at completing the &lt;code&gt;task&lt;/code&gt;. Invoked with (err, results).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4a5f114446c3fd6697ce5912e16e0118041f94" translate="yes" xml:space="preserve">
          <source>An optional function for generating a custom hash for storing results. It has all the arguments applied to it apart from the callback, and must be synchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3d2a0428be675de2cbcb09ee542236c1decd81" translate="yes" xml:space="preserve">
          <source>Any number of arguments to apply to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf59e006db32dafa9aca72a9b038f3ee79d73ec" translate="yes" xml:space="preserve">
          <source>Any number of arguments to automatically apply when the continuation is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b1126236c43cffa68a2ed823270502f71bd49f" translate="yes" xml:space="preserve">
          <source>Any number of arguments to automatically invoke callback with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4eb1b64bcf9fe05594a465eba3860ad658e31b" translate="yes" xml:space="preserve">
          <source>Any variable you want attached (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, etc) to timeout Error for more information..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afd5e1dc5ca2e9d136dfaae9da2e26683f3b755" translate="yes" xml:space="preserve">
          <source>Applies &lt;code&gt;iteratee&lt;/code&gt; to each item in &lt;code&gt;coll&lt;/code&gt;, concatenating the results. Returns the concatenated list. The &lt;code&gt;iteratee&lt;/code&gt;s are called in parallel, and the results are concatenated as they return. The results array will be returned in the original order of &lt;code&gt;coll&lt;/code&gt; passed to the &lt;code&gt;iteratee&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af73ffe2500390dd61d41edf34e117160282bb8" translate="yes" xml:space="preserve">
          <source>Applies the function &lt;code&gt;iteratee&lt;/code&gt; to each item in &lt;code&gt;coll&lt;/code&gt;, in parallel. The &lt;code&gt;iteratee&lt;/code&gt; is called with an item from the list, and a callback for when it has finished. If the &lt;code&gt;iteratee&lt;/code&gt; passes an error to its &lt;code&gt;callback&lt;/code&gt;, the main &lt;code&gt;callback&lt;/code&gt; (for the &lt;code&gt;each&lt;/code&gt; function) is immediately called with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61b12c83d0061fa2b4aea04fab1a19ba0f89555" translate="yes" xml:space="preserve">
          <source>Applies the provided arguments to each function in the array, calling &lt;code&gt;callback&lt;/code&gt; after all functions have completed. If you only provide the first argument, &lt;code&gt;fns&lt;/code&gt;, then it will return a function which lets you pass in the arguments as if it were a single function call. If more arguments are provided, &lt;code&gt;callback&lt;/code&gt; is required while &lt;code&gt;args&lt;/code&gt; is still optional. The results for each of the applied async functions are passed to the final callback as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="669f7d2748e7fc0a5befc1231af54ecb7bf4dd25" translate="yes" xml:space="preserve">
          <source>Array | Iterable | AsyncIterable | Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd36e9d7a1ac877d150a24d5db47d53b7548122f" translate="yes" xml:space="preserve">
          <source>Array | Object | Iterable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db37f55867798c63094a75db06886660e91436bf" translate="yes" xml:space="preserve">
          <source>Async</source>
          <target state="translated">Async</target>
        </trans-unit>
        <trans-unit id="6c8959a38dfe265779cfd084592140e4b6648227" translate="yes" xml:space="preserve">
          <source>Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript. Although originally designed for use with &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; and installable via &lt;code&gt;npm install --save async&lt;/code&gt;, it can also be used directly in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72461dccf2067d5111358217c4577db8984d2f42" translate="yes" xml:space="preserve">
          <source>AsyncFunction</source>
          <target state="translated">AsyncFunction</target>
        </trans-unit>
        <trans-unit id="b1e0ed4195a5fa5dccce7705d4399533392e4d04" translate="yes" xml:space="preserve">
          <source>Attempts to get a successful response from &lt;code&gt;task&lt;/code&gt; no more than &lt;code&gt;times&lt;/code&gt; times before returning an error. If the task is successful, the &lt;code&gt;callback&lt;/code&gt; will be passed the result of the successful task. If all attempts fail, the callback will be passed the error and result (if any) of the final attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0230968a0029be5bd915ed6249d014117639ee8b" translate="yes" xml:space="preserve">
          <source>Caches the results of an async function. When creating a hash to store function results against, the callback is omitted from the hash and an optional hash function can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77de699cb8e53c018add85152541630a9bc685db" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;callback&lt;/code&gt; on a later loop around the event loop. In Node.js this just calls &lt;code&gt;process.nextTick&lt;/code&gt;. In the browser it will use &lt;code&gt;setImmediate&lt;/code&gt; if available, otherwise &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;, which means other higher priority events may precede the execution of &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b0abeacb746fa1fe0adaaa305311922ccf6636" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;callback&lt;/code&gt; on a later loop around the event loop. In Node.js this just calls &lt;code&gt;setImmediate&lt;/code&gt;. In the browser it will use &lt;code&gt;setImmediate&lt;/code&gt; if available, otherwise &lt;code&gt;setTimeout(callback, 0)&lt;/code&gt;, which means other higher priority events may precede the execution of &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daefdd131d944fd70ca86607fd5312c3c203a865" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;iteratee&lt;/code&gt; function &lt;code&gt;n&lt;/code&gt; times, and accumulates results in the same manner you would use with &lt;a href=&quot;#map&quot;&gt;map&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20ca7e6c5fab93bf9408fa74e349c045b71841d" translate="yes" xml:space="preserve">
          <source>Calls the asynchronous function &lt;code&gt;fn&lt;/code&gt; with a callback parameter that allows it to call itself again, in series, indefinitely. If an error is passed to the callback then &lt;code&gt;errback&lt;/code&gt; is called with the error, and execution stops, otherwise it will never be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf615f644e74a993bd2a7874bb5f602b94a1e45" translate="yes" xml:space="preserve">
          <source>Can be either an object with &lt;code&gt;times&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; or a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a38960b0d065c6e65f4fee1fef93d510fdacc0" translate="yes" xml:space="preserve">
          <source>CargoObject</source>
          <target state="translated">CargoObject</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="4722c5ea64f5bf604117b9b25da5ac1ab2753262" translate="yes" xml:space="preserve">
          <source>Control Flow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ea0c0d7a691276e53364418082825047063653" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;cargo&lt;/code&gt; object with the specified payload. Tasks added to the cargo will be processed altogether (up to the &lt;code&gt;payload&lt;/code&gt; limit). If the &lt;code&gt;worker&lt;/code&gt; is in progress, the task is queued until it becomes available. Once the &lt;code&gt;worker&lt;/code&gt; has completed some tasks, each callback of those tasks is called. Check out &lt;a href=&quot;https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966&quot;&gt;these&lt;/a&gt;&lt;a href=&quot;https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966&quot;&gt;animations&lt;/a&gt; for how &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c964938361afde6a3dedbe9ad3058576a513ce8c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;cargoQueue&lt;/code&gt; object with the specified payload. Tasks added to the cargoQueue will be processed together (up to the &lt;code&gt;payload&lt;/code&gt; limit) in &lt;code&gt;concurrency&lt;/code&gt; parallel workers. If the all &lt;code&gt;workers&lt;/code&gt; are in progress, the task is queued until one becomes available. Once a &lt;code&gt;worker&lt;/code&gt; has completed some tasks, each callback of those tasks is called. Check out &lt;a href=&quot;https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966&quot;&gt;these&lt;/a&gt;&lt;a href=&quot;https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966&quot;&gt;animations&lt;/a&gt; for how &lt;code&gt;cargo&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8846da7db58332ad9e6da6b45ed29b7185ddb254" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;queue&lt;/code&gt; object with the specified &lt;code&gt;concurrency&lt;/code&gt;. Tasks added to the &lt;code&gt;queue&lt;/code&gt; are processed in parallel (up to the &lt;code&gt;concurrency&lt;/code&gt; limit). If all &lt;code&gt;worker&lt;/code&gt;s are in progress, the task is queued until one becomes available. Once a &lt;code&gt;worker&lt;/code&gt; completes a &lt;code&gt;task&lt;/code&gt;, that &lt;code&gt;task&lt;/code&gt;'s callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46dde6f39c849ae351971a2c6f45a84a75269891" translate="yes" xml:space="preserve">
          <source>Creates a continuation function with some arguments already applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a58d9f8884f7e94ce0ab4a6cf62846c7fe8e2a9" translate="yes" xml:space="preserve">
          <source>Creates a function which is a composition of the passed asynchronous functions. Each function consumes the return value of the function that follows. Composing functions &lt;code&gt;f()&lt;/code&gt;, &lt;code&gt;g()&lt;/code&gt;, and &lt;code&gt;h()&lt;/code&gt; would produce the result of &lt;code&gt;f(g(h()))&lt;/code&gt;, only this version uses callbacks to obtain the return values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="be6ff719e6cba0748f72b25a551aacf86fc73fad" translate="yes" xml:space="preserve">
          <source>Determines the best order for running the &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;s in &lt;code&gt;tasks&lt;/code&gt;, based on their requirements. Each function can optionally depend on other functions being completed first, and each function is run as soon as its requirements are satisfied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cb17414bc0d9d63f41e7a26cbe723bb62269b8" translate="yes" xml:space="preserve">
          <source>Each function is executed with the &lt;code&gt;this&lt;/code&gt; binding of the composed function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="994f7e9c23f6b8e531ef86a8066aee259f797a97" translate="yes" xml:space="preserve">
          <source>For performance reasons, it may make sense to split a call to this function into a parallel map, and then use the normal &lt;code&gt;Array.prototype.reduce&lt;/code&gt; on the results. This function is for situations where each step in the reduction needs to be async; if you can get the data before reducing it, then it's probably a good idea to do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05c0720f9ddc397712f922ce935cec1cc6f82e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;map&lt;/code&gt; is passed an Object, the results will be an Array. The results will roughly be in the order of the original Objects' keys (but this can vary across JavaScript engines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3c3f8a3854925ce105a6c638ca4085223c54d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;opts&lt;/code&gt; is a number, the number specifies the number of times to retry, with the default interval of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1840b055a74f09cdf9ea9a71b39fa363e9f826c4" translate="yes" xml:space="preserve">
          <source>If a final callback is specified, the task results are similarly injected, specified as named parameters after the initial error parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7a53659f4f879ca634349c515275f52b52f867" translate="yes" xml:space="preserve">
          <source>If any of the &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;s pass an error to their callback, the &lt;code&gt;auto&lt;/code&gt; sequence will stop. Further tasks will not execute (so any other functions depending on it will not run), and the main &lt;code&gt;callback&lt;/code&gt; is immediately called with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cab58bb8ab2c4eb52963bfe75876024337e4b75" translate="yes" xml:space="preserve">
          <source>If no hash function is specified, the first argument is used as a hash key, which may work reasonably if it is a string or a data type that converts to a distinct string. Note that objects and arrays will not behave reasonably. Neither will cases where the other arguments are significant. In such cases, specify your own hash function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202cc58acdbaeeab8733ee534cad1eb29695acbb" translate="yes" xml:space="preserve">
          <source>If the function passed to &lt;code&gt;asyncify&lt;/code&gt; returns a Promise, that promises's resolved/rejected state will be used to call the callback, rather than simply the synchronous return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8a0195d9a7e1ac62f8a819ad0089ff633a7313" translate="yes" xml:space="preserve">
          <source>If the last argument to the composed function is not a function, a promise is returned when you call it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0219fd54bd5841008b18c414a5b2dea331bad1c5" translate="yes" xml:space="preserve">
          <source>Infinity</source>
          <target state="translated">Infinity</target>
        </trans-unit>
        <trans-unit id="3af9ab7886a7e96fa9a604f275479db8533f8c3b" translate="yes" xml:space="preserve">
          <source>It is also possible to use an object instead of an array. Each property will be run as a function and the results will be passed to the final &lt;code&gt;callback&lt;/code&gt; as an object instead of an array. This can be a more readable way of handling results from async.parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b67d7aa10e92dc964b4b9ace148745f136d629d" translate="yes" xml:space="preserve">
          <source>It is also possible to use an object instead of an array. Each property will be run as a function, and the results will be passed to the final &lt;code&gt;callback&lt;/code&gt; as an object instead of an array. This can be a more readable way of handling results from async.series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec357cb9486c16a32284d27170641c04c2f4fa8" translate="yes" xml:space="preserve">
          <source>It runs each task in series but stops whenever any of the functions were successful. If one of the tasks were successful, the &lt;code&gt;callback&lt;/code&gt; will be passed the result of the successful task. If all tasks fail, the callback will be passed the error and result (if any) of the final attempt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ca6a3da933ca6826a2f4d3fcc919af71d7e380" translate="yes" xml:space="preserve">
          <source>Iterable</source>
          <target state="translated">Iterable</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d31e05df14e3f50ac531f71dfeb64cd450ce14" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#doWhilst&quot;&gt;'doWhilst'&lt;/a&gt;, except the &lt;code&gt;test&lt;/code&gt; is inverted. Note the argument ordering differs from &lt;code&gt;until&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba5a18f93b6764689aaa85752dcd8897b99ab4a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#each&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt;, except that it passes the key (or index) as the second argument to the iteratee.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f826445e35ececd31d6b129a6adeb1b0c6e357" translate="yes" xml:space="preserve">
          <source>Logs the result of an &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;&lt;code&gt;async&lt;/code&gt; function&lt;/a&gt; to the &lt;code&gt;console&lt;/code&gt; using &lt;code&gt;console.dir&lt;/code&gt; to display the properties of the resulting object. Only works in Node.js or in browsers that support &lt;code&gt;console.dir&lt;/code&gt; and &lt;code&gt;console.error&lt;/code&gt; (such as FF and Chrome). If multiple arguments are returned from the async function, &lt;code&gt;console.dir&lt;/code&gt; is called on each argument in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc390f9b616cb9afe8bae24744465804329c5c1f" translate="yes" xml:space="preserve">
          <source>Logs the result of an &lt;code&gt;async&lt;/code&gt; function to the &lt;code&gt;console&lt;/code&gt;. Only works in Node.js or in browsers that support &lt;code&gt;console.log&lt;/code&gt; and &lt;code&gt;console.error&lt;/code&gt; (such as FF and Chrome). If multiple arguments are returned from the async function, &lt;code&gt;console.log&lt;/code&gt; is called on each argument in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="6b655c24f22e782ba6a587e1f16fd5ab7cb9228b" translate="yes" xml:space="preserve">
          <source>Note, that since this function applies &lt;code&gt;iteratee&lt;/code&gt; to each item in parallel, there is no guarantee that the iteratee functions will complete in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4083c95f5f510fe66388d1fd74c105d971882ec5" translate="yes" xml:space="preserve">
          <source>Note, that since this function applies the &lt;code&gt;iteratee&lt;/code&gt; to each item in parallel, there is no guarantee that the &lt;code&gt;iteratee&lt;/code&gt; functions will complete in order. However, the results array will be in the same order as the original &lt;code&gt;coll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123b60cb77763021995262f286bd3e3fa249c823" translate="yes" xml:space="preserve">
          <source>Note, that unlike &lt;a href=&quot;#each&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt;, this function applies iteratee to each item in series and therefore the iteratee functions will complete in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da92fd0f47befdd689b70d79a991b7cb9c43596" translate="yes" xml:space="preserve">
          <source>Note, the order of the keys in the result is not guaranteed. The keys will be roughly in the order they complete, (but this is very engine-specific)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5c151ce73a7334ae3a8320f68d7320f7bc246c" translate="yes" xml:space="preserve">
          <source>Note: Since this function applies the &lt;code&gt;iteratee&lt;/code&gt; to each item in parallel, there is no guarantee that the &lt;code&gt;iteratee&lt;/code&gt; functions will complete in order. However, the values for each key in the &lt;code&gt;result&lt;/code&gt; will be in the same order as the original &lt;code&gt;coll&lt;/code&gt;. For Objects, the values will roughly be in the order of the original Objects' keys (but this can vary across JavaScript engines).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="c5731f08b86bcd7de356ee0cf087fc5dc24b739f" translate="yes" xml:space="preserve">
          <source>Object | number&amp;lt;optional&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="c83acbdefa54e8edd3d705e524669aff695c4508" translate="yes" xml:space="preserve">
          <source>Produces a new Object by mapping each value of &lt;code&gt;obj&lt;/code&gt; through the &lt;code&gt;iteratee&lt;/code&gt; function. The &lt;code&gt;iteratee&lt;/code&gt; is called each &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; from &lt;code&gt;obj&lt;/code&gt; and a callback for when it has finished processing. Each of these callbacks takes two arguments: an &lt;code&gt;error&lt;/code&gt;, and the transformed item from &lt;code&gt;obj&lt;/code&gt;. If &lt;code&gt;iteratee&lt;/code&gt; passes an error to its callback, the main &lt;code&gt;callback&lt;/code&gt; (for the &lt;code&gt;mapValues&lt;/code&gt; function) is immediately called with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733cd3814eba8e8802eb9202db3d627fff770eac" translate="yes" xml:space="preserve">
          <source>Produces a new collection of values by mapping each value in &lt;code&gt;coll&lt;/code&gt; through the &lt;code&gt;iteratee&lt;/code&gt; function. The &lt;code&gt;iteratee&lt;/code&gt; is called with an item from &lt;code&gt;coll&lt;/code&gt; and a callback for when it has finished processing. Each of these callback takes 2 arguments: an &lt;code&gt;error&lt;/code&gt;, and the transformed item from &lt;code&gt;coll&lt;/code&gt;. If &lt;code&gt;iteratee&lt;/code&gt; passes an error to its callback, the main &lt;code&gt;callback&lt;/code&gt; (for the &lt;code&gt;map&lt;/code&gt; function) is immediately called with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5671922bc7f67cfabfa60ab97a9542ac21f39f" translate="yes" xml:space="preserve">
          <source>Promise</source>
          <target state="translated">Promise</target>
        </trans-unit>
        <trans-unit id="351f56a6fefd5127c90506d3e91990f1d7631787" translate="yes" xml:space="preserve">
          <source>Properties:</source>
          <target state="translated">Properties:</target>
        </trans-unit>
        <trans-unit id="48c4cdb6fc833ccf9b609864a7338db1cb4d2a5a" translate="yes" xml:space="preserve">
          <source>QueueObject</source>
          <target state="translated">QueueObject</target>
        </trans-unit>
        <trans-unit id="ea4c2a98c84af2fc9ebb1ad07aaeb3d56e327e71" translate="yes" xml:space="preserve">
          <source>Reduces &lt;code&gt;coll&lt;/code&gt; into a single value using an async &lt;code&gt;iteratee&lt;/code&gt; to return each successive step. &lt;code&gt;memo&lt;/code&gt; is the initial state of the reduction. This function only operates in series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e10a7e22ac55873707ce6891ad2b1191531a8bc" translate="yes" xml:space="preserve">
          <source>Repeatedly call &lt;code&gt;iteratee&lt;/code&gt; until &lt;code&gt;test&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. Calls &lt;code&gt;callback&lt;/code&gt; when stopped, or an error occurs. &lt;code&gt;callback&lt;/code&gt; will be passed an error and any arguments passed to the final &lt;code&gt;iteratee&lt;/code&gt;'s callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393e4889eece089c9b2cf2021d25eb8abcc644fc" translate="yes" xml:space="preserve">
          <source>Repeatedly call &lt;code&gt;iteratee&lt;/code&gt;, while &lt;code&gt;test&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. Calls &lt;code&gt;callback&lt;/code&gt; when stopped, or an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61606c14add061f9091a60928df208270c98594f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if at least one element in the &lt;code&gt;coll&lt;/code&gt; satisfies an async test. If any iteratee call returns &lt;code&gt;true&lt;/code&gt;, the main &lt;code&gt;callback&lt;/code&gt; is immediately called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afa6c698d6f1cc1a43af9d8dadd3fa422ad44b5" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if every element in &lt;code&gt;coll&lt;/code&gt; satisfies an async test. If any iteratee call returns &lt;code&gt;false&lt;/code&gt;, the main &lt;code&gt;callback&lt;/code&gt; is immediately called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c517c6c4405002c620538009aa783bc8ac0adf84" translate="yes" xml:space="preserve">
          <source>Returns a function that takes no args other than an optional callback, that is the result of applying the &lt;code&gt;args&lt;/code&gt; to each of the functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c82bdc5bd3f43823fe108b5798c8f9b12119831" translate="yes" xml:space="preserve">
          <source>Returns a function that when called, calls-back with the values provided. Useful as the first function in a &lt;a href=&quot;#waterfall&quot;&gt;&lt;code&gt;waterfall&lt;/code&gt;&lt;/a&gt;, or for plugging values in to &lt;a href=&quot;#auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2646183e579827d4426b2bdc1cf2040e8d3596" translate="yes" xml:space="preserve">
          <source>Returns a function that when invoked, automatically invokes the callback with the previous given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198d916c599bdae75acfcf12d1c74c553c1ac148" translate="yes" xml:space="preserve">
          <source>Returns a new array of all the values in &lt;code&gt;coll&lt;/code&gt; which pass an async truth test. This operation is performed in parallel, but the results array will be in the same order as the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b5400d74a9eee92d8b052a3e0ee16b30dbe355" translate="yes" xml:space="preserve">
          <source>Returns a new object, where each value corresponds to an array of items, from &lt;code&gt;coll&lt;/code&gt;, that returned the corresponding key. That is, the keys of the object correspond to the values passed to the &lt;code&gt;iteratee&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2029438c292ad3c0ab4f5397ecbe8f9c78aac8dd" translate="yes" xml:space="preserve">
          <source>Returns a wrapped function that can be used with any of the control flow functions. Invoke this function with the same parameters as you would &lt;code&gt;asyncFunc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d3feb5280551a94f239681c4be8e72339b55d0" translate="yes" xml:space="preserve">
          <source>Returns a wrapped function with the exact same call signature as the function passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febf5f4a646d6d323b5f84c74bb73fa9c715c9a0" translate="yes" xml:space="preserve">
          <source>Returns an array of async functions, each wrapped in &lt;code&gt;async.reflect&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d209f4b5af081d49b7194fba98d296fe317664" translate="yes" xml:space="preserve">
          <source>Returns the first value in &lt;code&gt;coll&lt;/code&gt; that passes an async truth test. The &lt;code&gt;iteratee&lt;/code&gt; is applied in parallel, meaning the first iteratee to return &lt;code&gt;true&lt;/code&gt; will fire the detect &lt;code&gt;callback&lt;/code&gt; with that result. That means the result might not be the first item in the original &lt;code&gt;coll&lt;/code&gt; (in terms of order) that passes the test. If order within the original &lt;code&gt;coll&lt;/code&gt; is important, then look at &lt;a href=&quot;#detectSeries&quot;&gt;&lt;code&gt;detectSeries&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="231d41c95d052809221c8e57ef4897d54328f90a" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;tasks&lt;/code&gt; collection of functions in parallel, without waiting until the previous function has completed. If any of the functions pass an error to its callback, the main &lt;code&gt;callback&lt;/code&gt; is immediately called with the value of the error. Once the &lt;code&gt;tasks&lt;/code&gt; have completed, the results are passed to the final &lt;code&gt;callback&lt;/code&gt; as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775296436516575b2350bee30c1defecc2b92257" translate="yes" xml:space="preserve">
          <source>Run the functions in the &lt;code&gt;tasks&lt;/code&gt; collection in series, each one running once the previous function has completed. If any functions in the series pass an error to its callback, no more functions are run, and &lt;code&gt;callback&lt;/code&gt; is immediately called with the value of the error. Otherwise, &lt;code&gt;callback&lt;/code&gt; receives an array of results when &lt;code&gt;tasks&lt;/code&gt; have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f6584c75fb30748ef5a69cc9092af3ffb7cf36" translate="yes" xml:space="preserve">
          <source>Runs the &lt;code&gt;tasks&lt;/code&gt; array of functions in parallel, without waiting until the previous function has completed. Once any of the &lt;code&gt;tasks&lt;/code&gt; complete or pass an error to its callback, the main &lt;code&gt;callback&lt;/code&gt; is immediately called. It's equivalent to &lt;code&gt;Promise.race()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa6e23fbca06f93cdb8aa13f64e7101d177b9ee" translate="yes" xml:space="preserve">
          <source>Runs the &lt;code&gt;tasks&lt;/code&gt; array of functions in series, each passing their results to the next in the array. However, if any of the &lt;code&gt;tasks&lt;/code&gt; pass an error to their own callback, the next function is not executed, and the main &lt;code&gt;callback&lt;/code&gt; is immediately called with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196359a067d7fb7a645ac881e2e9ab3799d429e0" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#reduce&quot;&gt;&lt;code&gt;reduce&lt;/code&gt;&lt;/a&gt;, only operates on &lt;code&gt;array&lt;/code&gt; in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497dea2253a9763272c1d3ca91776ece14a847f1" translate="yes" xml:space="preserve">
          <source>See:</source>
          <target state="translated">See:</target>
        </trans-unit>
        <trans-unit id="ac53ca0c7f2f114b4949caa44d7734266efb4fb7" translate="yes" xml:space="preserve">
          <source>Sets a time limit on an asynchronous function. If the function does not call its callback within the specified milliseconds, it will be called with a timeout error. The code property for the error object will be &lt;code&gt;'ETIMEDOUT'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98e49ead9a78f0a3a56f192b854925fb5f830a5" translate="yes" xml:space="preserve">
          <source>So if you rely on the order in which your series of functions are executed, and want this to work on all platforms, consider using an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786400b98fe5565a16b19eaf6b38873982dde9f4" translate="yes" xml:space="preserve">
          <source>Sorts a list by the results of running each &lt;code&gt;coll&lt;/code&gt; value through an async &lt;code&gt;iteratee&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922acd282cc0f3bb9e6dffb4c4b3c4fe33787051" translate="yes" xml:space="preserve">
          <source>Source:</source>
          <target state="translated">Source:</target>
        </trans-unit>
        <trans-unit id="978fffe7abd279035fcd72eebab6537a8970a274" translate="yes" xml:space="preserve">
          <source>Take a sync function and make it async, passing its return value to a callback. This is useful for plugging sync functions into a waterfall, series, or other async functions. Any arguments passed to the generated function will be passed to the wrapped function (except for the final callback argument). Errors thrown will be passed to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73af2ba62b6688a0f4caf56e2b686966bb57c2ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; parameter is a &lt;code&gt;callback(err, result)&lt;/code&gt; which must be called when finished, passing an &lt;code&gt;error&lt;/code&gt; (which can be &lt;code&gt;null&lt;/code&gt;) and the result of the function's execution. The remaining parameters name other tasks on which the task is dependent, and the results from those tasks are the arguments of those parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2c5cae82928e43e472a8cf204dfe1ddbeceef6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unshift&lt;/code&gt; method was removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4f9e46d825b132071b2b650ff6566fdb6dcacc" translate="yes" xml:space="preserve">
          <source>The async function to call &lt;code&gt;n&lt;/code&gt; times. Invoked with the iteration index and a callback: (n, next).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfd4e04e3cc1ac777319690878508704c81da7f" translate="yes" xml:space="preserve">
          <source>The async function to limit in time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87619068de9b92cff8889c6e561df225ce8c214" translate="yes" xml:space="preserve">
          <source>The async function to proxy and cache results from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee84646e1e9a026eb31d68eefc6936dfc4e55d97" translate="yes" xml:space="preserve">
          <source>The async function you want to wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002f4a895d72ceb77cf3cd5d6fc3488c870cac03" translate="yes" xml:space="preserve">
          <source>The autoInject function is purely syntactic sugar and its semantics are otherwise equivalent to &lt;a href=&quot;#auto&quot;&gt;async.auto&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ec255ebaf82a3912008df8529faf8ca3ca396e" translate="yes" xml:space="preserve">
          <source>The cache of results is exposed as the &lt;code&gt;memo&lt;/code&gt; property of the function returned by &lt;code&gt;memoize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63a2f402cfe2884e81d20aab179d8bd9cb1ee11" translate="yes" xml:space="preserve">
          <source>The collection of &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;async functions&lt;/a&gt; to wrap in &lt;code&gt;async.reflect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d6a2551024cf3c84ecfc64884d4f23f2697800" translate="yes" xml:space="preserve">
          <source>The function to call on a later loop around the event loop. Invoked with (args...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8b3ab87acba6cfc146bbbbbccb791161bf75d7" translate="yes" xml:space="preserve">
          <source>The function you want to eventually apply all arguments to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b97f5fe1c956c63fcf314daa2299f6610572186" translate="yes" xml:space="preserve">
          <source>The function you want to eventually apply all arguments to. Invokes with (arguments...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcb9fbfa80e9e4d754492fb8eaa48707abb01ca" translate="yes" xml:space="preserve">
          <source>The initial state of the reduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ac4e261a9b1b9ace15e800510581b4a51deb5d" translate="yes" xml:space="preserve">
          <source>The initial state of the transform. If omitted, it will default to an empty Object or Array, depending on the type of &lt;code&gt;coll&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6ad0736f39138fa93d691af07a92fe186d6a4f" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;a href=&quot;#whilst&quot;&gt;whilst&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3021d7b498fc20cad2eb3d447cf74887ec66dde8" translate="yes" xml:space="preserve">
          <source>The maximum number of async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2420aad1b8c9faa51d3259989052731add91b808" translate="yes" xml:space="preserve">
          <source>The mechanics and order of enumerating the properties is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ea17c544bd16d61577d690886d692843c81450" translate="yes" xml:space="preserve">
          <source>The number of times to run the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e53576f98988a5cc4eda195e3251146c2b4360" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;a href=&quot;#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;. Removes values that pass an &lt;code&gt;async&lt;/code&gt; truth test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a60627219bfa025f627af028e6b1f2cfc5be6a" translate="yes" xml:space="preserve">
          <source>The post-check version of &lt;a href=&quot;#whilst&quot;&gt;&lt;code&gt;whilst&lt;/code&gt;&lt;/a&gt;. To reflect the difference in the order of operations, the arguments &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;iteratee&lt;/code&gt; are switched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98b45e9a0676843cbf3cbfd65b1dede9a09ae77" translate="yes" xml:space="preserve">
          <source>The result object has either the property &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2028b5b28eaf773ca983b260bce34706fbeefa37" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#applyEach&quot;&gt;&lt;code&gt;applyEach&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf663c8518f62e247c5eea7ff78db5ac94f3b0de" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#concat&quot;&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653334fb74d0fb440c94f54bd94e5939b124fb88" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#concat&quot;&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bdd0dbe9fcdd3f69d5f98fd1784aa337ea0402" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#detect&quot;&gt;&lt;code&gt;detect&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f44d3952db0ac05dcdcf0daa9da5fc88db40f6" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#detect&quot;&gt;&lt;code&gt;detect&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2287cdefdc3c3943c62032449cb880931a151ae" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#each&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42143e4d7501dc962139c700a061cd0de7c1132" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#each&quot;&gt;&lt;code&gt;each&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b473a6c3b24b520411d3c62fa03c15eb5eda471e" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#eachOf&quot;&gt;&lt;code&gt;eachOf&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf8258476e5825669acb2c031b8f20eae0c62f5" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#eachOf&quot;&gt;&lt;code&gt;eachOf&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b99991f18cc07ed162bdefbdc887ba3a0c689e7" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#every&quot;&gt;&lt;code&gt;every&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de9bb777198203f913d977d36e01c1f3f58a0aa" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#every&quot;&gt;&lt;code&gt;every&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e7405eee822636aa96d8c055eed7960ba17926" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55c480d8fe359cc7abf12317e345a8784ad8e2f" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad07c155e97aeabc43e3f5c9db508810f86fcd5" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#groupBy&quot;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c4748539e808d1a5c5ee8c71f677e50f51a510" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#groupBy&quot;&gt;&lt;code&gt;groupBy&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c9d513548b2bc8b0444bf6adcb7df2d10c9128" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d8986f78fb0e8218e72bc7a54a58cc4a5452a3" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ed17d97c0e18c3dfa17f1947601f614118095a" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#mapValues&quot;&gt;&lt;code&gt;mapValues&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc8948e6d73e378af4f0f59b384c6a5af1cbb06" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#mapValues&quot;&gt;&lt;code&gt;mapValues&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db77ce768ce02f119ff59dd696490c96587288e" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#parallel&quot;&gt;&lt;code&gt;parallel&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d21d3c4cf22740a841b41158089512da8943c13" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#queue&quot;&gt;async.queue&lt;/a&gt; only tasks are assigned a priority and completed in ascending priority order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9389169793db703ddfdd06548c210220f24cfa" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ba6b1a36e6b0ed6726cb6c6717f4ba3ab046ac" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#reject&quot;&gt;&lt;code&gt;reject&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae58c1e3a26b8af29e0c7e67b9ed7bdb96b8012" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bf51c58debf090a741195be9909240fa7fe0af" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#some&quot;&gt;&lt;code&gt;some&lt;/code&gt;&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2806518753885807a9d2a2ea5dd7afb6e56809" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#times&quot;&gt;times&lt;/a&gt; but runs a maximum of &lt;code&gt;limit&lt;/code&gt; async operations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ead57ec327892d499d34077edbcbe639b2a73c" translate="yes" xml:space="preserve">
          <source>The same as &lt;a href=&quot;#times&quot;&gt;times&lt;/a&gt; but runs only a single async operation at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3debb07288e243519ded5aed6a1e9f72afa02a" translate="yes" xml:space="preserve">
          <source>The specified time limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56bed8e75c04c2fcdfeab473bc7252eda3e9842" translate="yes" xml:space="preserve">
          <source>The synchronous function, or Promise-returning function to convert to an &lt;a href=&quot;https://caolan.github.io/async/v3/global.html&quot;&gt;AsyncFunction&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c5bd63354e125dbc59582bd64ee29534326f66" translate="yes" xml:space="preserve">
          <source>The wrapped function, which when invoked, will retry on an error, based on the parameters specified in &lt;code&gt;opts&lt;/code&gt;. This function will accept the same parameters as &lt;code&gt;task&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b66be6d75d2e2418d87f470952d808387d356f6" translate="yes" xml:space="preserve">
          <source>This also means you can asyncify ES2017 &lt;code&gt;async&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f5e6fce628998eb6354295bf2cac8439ce8f56" translate="yes" xml:space="preserve">
          <source>This is used internally for browser-compatibility purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="3ba69662a63352acd45295d8a4cf929df3f97fd7" translate="yes" xml:space="preserve">
          <source>Type Definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="c8c782838f924c6fc3f5df41ff29fb2f13d92c9d" translate="yes" xml:space="preserve">
          <source>Undoes a &lt;a href=&quot;#memoize&quot;&gt;memoize&lt;/a&gt;d function, reverting it to the original, unmemoized form. Handy for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b1bfd2258359e46fe5b026facfed8c074dee2e" translate="yes" xml:space="preserve">
          <source>Useful as a shorthand when combined with other control flow functions. Any arguments passed to the returned function are added to the arguments originally passed to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a271451e65e20717de9aee72e172c4a79d419b" translate="yes" xml:space="preserve">
          <source>Utils</source>
          <target state="translated">Utils</target>
        </trans-unit>
        <trans-unit id="9f52c1b4a2243b9e0e2540d7c50662de3e866d47" translate="yes" xml:space="preserve">
          <source>Version of the compose function that is more natural to read. Each function consumes the return value of the previous function. It is the equivalent of &lt;a href=&quot;#compose&quot;&gt;compose&lt;/a&gt; with the arguments reversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad5d1cfa8d022e438c4fe2cf1c9890bb85b98e4" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt; passes only one task to one of a group of workers at a time, and &lt;a href=&quot;#cargo&quot;&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/a&gt; passes an array of tasks to a single worker, the cargoQueue passes an array of tasks to multiple parallel workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442ed5ce7dfdd1df2c0af2e7053cc24c2661e353" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt; passes only one task to one of a group of workers at a time, cargo passes an array of tasks to a single worker, repeating when the worker is finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3418f3c9405a34508db0e3e75c37cb1fde947527" translate="yes" xml:space="preserve">
          <source>Wrap an async function and ensure it calls its callback on a later tick of the event loop. If the function already calls its callback on a next tick, no extra deferral is added. This is useful for preventing stack overflows (&lt;code&gt;RangeError: Maximum call stack size exceeded&lt;/code&gt;) and generally keeping &lt;a href=&quot;http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony&quot;&gt;Zalgo&lt;/a&gt; contained. ES2017 &lt;code&gt;async&lt;/code&gt; functions are returned as-is -- they are immune to Zalgo's corrupting influences, as they always resolve on a later tick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba7440b6d3745a40c7e35b87865ac9cf7e779b8" translate="yes" xml:space="preserve">
          <source>Wraps the async function in another function that always completes with a result object, even when it errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9a8e66a792f695c97dbad017e2a1bb6c3bac1f" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;callback(err, result)&lt;/code&gt; function, which must be called when finished, passing an &lt;code&gt;error&lt;/code&gt; (which can be &lt;code&gt;null&lt;/code&gt;) and the result of the function's execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffaf062af8f735cd95ee9652ac614d99a1c66b1" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;results&lt;/code&gt; object, containing the results of the previously executed functions, only passed if the task has any dependencies,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797e27b4bf0af115e24a05b9bddbc6cad60f5916" translate="yes" xml:space="preserve">
          <source>a Promise if no callback is passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436c0fd1717bb62c44f0952b6639e08796618ecc" translate="yes" xml:space="preserve">
          <source>a boolean for determining whether the queue is in a paused state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9227d6a4ae15f8ed45f45bd7a653892db7018e14" translate="yes" xml:space="preserve">
          <source>a boolean indicating whether or not any items have been pushed and processed by the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2fde359f1ac9126e3cea530ebacc6669ce3354" translate="yes" xml:space="preserve">
          <source>a function returning false if there are items waiting or being processed, or true if not. Invoke with &lt;code&gt;queue.idle()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94dd89bbd27fa88a1d125728fd2ffcce24e89af" translate="yes" xml:space="preserve">
          <source>a function returning the array of items currently being processed. Invoke with &lt;code&gt;queue.workersList()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ca77db01f72d484878bbf813c07fb076565ddf" translate="yes" xml:space="preserve">
          <source>a function returning the number of items currently being processed. Invoke with &lt;code&gt;queue.running()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0f47cc0c713d49183cd29c098c7b8f5fd40861" translate="yes" xml:space="preserve">
          <source>a function returning the number of items waiting to be processed. Invoke with &lt;code&gt;queue.length()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4765be485ec896f70af42a26361587a10da8a892" translate="yes" xml:space="preserve">
          <source>a function that calls the original unmemoized function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ce16243e41ed1686a59908142c0646587c569e" translate="yes" xml:space="preserve">
          <source>a function that composes the &lt;code&gt;functions&lt;/code&gt; in order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105d5e137381f7cb8addc38c21fbcf6e36757377" translate="yes" xml:space="preserve">
          <source>a function that pauses the processing of tasks until &lt;code&gt;resume()&lt;/code&gt; is called. Invoke with &lt;code&gt;queue.pause()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9273dd1da7807477bd71cff39962850f0ed93a" translate="yes" xml:space="preserve">
          <source>a function that removes the &lt;code&gt;drain&lt;/code&gt; callback and empties remaining tasks from the queue forcing it to go idle. No more tasks should be pushed to the queue after calling this function. Invoke with &lt;code&gt;queue.kill()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b297c1f36e9442a8ba2864fbe68e3bf0b3c18c" translate="yes" xml:space="preserve">
          <source>a function that resumes the processing of queued tasks when the queue is paused. Invoke with &lt;code&gt;queue.resume()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1141d5a4da7b69ffbbadaf84c6a115eb5f4466" translate="yes" xml:space="preserve">
          <source>a function that sets a callback that is called when a task errors. Has the signature &lt;code&gt;function(error, task)&lt;/code&gt;. If the callback is omitted, &lt;code&gt;error()&lt;/code&gt; returns a promise that rejects on the next error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff466c452e6eb66d3a96ee4609bb441307973db" translate="yes" xml:space="preserve">
          <source>a function that sets a callback that is called when the last item from the &lt;code&gt;queue&lt;/code&gt; has returned from the &lt;code&gt;worker&lt;/code&gt;. If the callback is omitted, &lt;code&gt;q.drain()&lt;/code&gt; returns a promise for the next occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b244d276d9225bce41b601bd239d52f46c343a03" translate="yes" xml:space="preserve">
          <source>a function that sets a callback that is called when the last item from the &lt;code&gt;queue&lt;/code&gt; is given to a &lt;code&gt;worker&lt;/code&gt;. If the callback is omitted, &lt;code&gt;q.empty()&lt;/code&gt; returns a promise for the next occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce46edd87cba4c5d02429b8e07fdf70af08d28f0" translate="yes" xml:space="preserve">
          <source>a function that sets a callback that is called when the number of running workers hits the &lt;code&gt;concurrency&lt;/code&gt; limit, and further tasks will be queued. If the callback is omitted, &lt;code&gt;q.saturated()&lt;/code&gt; returns a promise for the next occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897711682a44bf2414ac84989471c2b223952acc" translate="yes" xml:space="preserve">
          <source>a function that sets a callback that is called when the number of running workers is less than the &lt;code&gt;concurrency&lt;/code&gt; &amp;amp; &lt;code&gt;buffer&lt;/code&gt; limits, and further tasks will not be queued. If the callback is omitted, &lt;code&gt;q.unsaturated()&lt;/code&gt; returns a promise for the next occurrence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400ac87a3df7076aee539159baa45b04584e7f47" translate="yes" xml:space="preserve">
          <source>a memoized version of &lt;code&gt;fn&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6944304e2beb4c07838aaa5c905cfdbb714fe49c" translate="yes" xml:space="preserve">
          <source>a promise if no callback provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7e61076566b00cf4c027d17108e5d26a807887" translate="yes" xml:space="preserve">
          <source>a promise that rejects if an error occurs and an errback is not passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67019ceed6e97d93217052ff4f7b06a3c33f430" translate="yes" xml:space="preserve">
          <source>a promise, if a callback is not passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3015be2af233df74e3f31f85571e079f9d654a" translate="yes" xml:space="preserve">
          <source>a promise, if a callback is omitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a90dbdd037f4c90c7c9e9874ad3f44ce3d40b04" translate="yes" xml:space="preserve">
          <source>a promise, if no callback is passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e7c2110952dd8d47f64b8e7bd1abf318a743ed" translate="yes" xml:space="preserve">
          <source>a promise, if no callback is provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ce5342fc30ef8d0874eba9e1943c5f397de8ff" translate="yes" xml:space="preserve">
          <source>a promise, if no callback passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22403e83b67ae04dbe32682f30e173b51380e1cb" translate="yes" xml:space="preserve">
          <source>a promise, if no callback provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898659ccd8b144793d2418b2295fd2e5afad22ed" translate="yes" xml:space="preserve">
          <source>add a new task to the &lt;code&gt;queue&lt;/code&gt;. Calls &lt;code&gt;callback&lt;/code&gt; once the &lt;code&gt;worker&lt;/code&gt; has finished processing the task. Instead of a single task, a &lt;code&gt;tasks&lt;/code&gt; array can be submitted. The respective callback is used for every task in the list. Invoke with &lt;code&gt;queue.push(task, [callback])&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71af2a2b366987e665e55cd858403fcb751b33a8" translate="yes" xml:space="preserve">
          <source>add a new task to the front of the &lt;code&gt;queue&lt;/code&gt;. Invoke with &lt;code&gt;queue.unshift(task, [callback])&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="75097bdddcb0c69e92c2f48889e37e4fcbdadd42" translate="yes" xml:space="preserve">
          <source>allLimit</source>
          <target state="translated">allLimit</target>
        </trans-unit>
        <trans-unit id="b293b6b6f4db3c6eeed7e88c2678b50488c08291" translate="yes" xml:space="preserve">
          <source>allSeries</source>
          <target state="translated">allSeries</target>
        </trans-unit>
        <trans-unit id="b7c75daeb16103586b232ddb1e12e4b3052d7a6a" translate="yes" xml:space="preserve">
          <source>an async function to call repeatedly. Invoked with (next).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2530ab6a1a7cd41eba347eca373a25f1f0ba76bd" translate="yes" xml:space="preserve">
          <source>an async function, one that expects a node-style callback as its last argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbea0df951e7ce2faab3d65cc2ceb90b539c766a" translate="yes" xml:space="preserve">
          <source>an asynchronous function that is the composed asynchronous &lt;code&gt;functions&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425017f774f88d6625406b9d9d0c8a40392b44e9" translate="yes" xml:space="preserve">
          <source>an integer for determining how many &lt;code&gt;worker&lt;/code&gt; functions should be run in parallel. This property can be changed after a &lt;code&gt;queue&lt;/code&gt; is created to alter the concurrency on-the-fly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324871a287b32761e189d8aa41046c24158339dd" translate="yes" xml:space="preserve">
          <source>an integer that specifies how many items are passed to the worker function at a time. only applies if this is a &lt;a href=&quot;#cargo&quot;&gt;cargo&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="1313e71e56cfa342399ff6186220b95d2c312b27" translate="yes" xml:space="preserve">
          <source>any number of additional arguments to pass to the callback on the next tick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3d2479b5197ebf7a386ff46f93f534d97dcf72" translate="yes" xml:space="preserve">
          <source>any number of separate arguments to pass to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5995d248b24563ab3ce29ed0f90d7c0fec49c514" translate="yes" xml:space="preserve">
          <source>anyLimit</source>
          <target state="translated">anyLimit</target>
        </trans-unit>
        <trans-unit id="ca2d873f72fa55b47b27afa44c167b36e8f92b9b" translate="yes" xml:space="preserve">
          <source>anySeries</source>
          <target state="translated">anySeries</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="c5589d9187f905f8ca8587fd6ff5b2c141e6482d" translate="yes" xml:space="preserve">
          <source>applyEach</source>
          <target state="translated">applyEach</target>
        </trans-unit>
        <trans-unit id="8397126cde67842d040f1de4041a3e10b3085816" translate="yes" xml:space="preserve">
          <source>applyEachSeries</source>
          <target state="translated">applyEachSeries</target>
        </trans-unit>
        <trans-unit id="b7e04b33fdd186ab6bd2deace04ea6b551b9bd4a" translate="yes" xml:space="preserve">
          <source>async</source>
          <target state="translated">async</target>
        </trans-unit>
        <trans-unit id="0991dd36560b3cb0c8c28dcb3a7aef71a12d5ea6" translate="yes" xml:space="preserve">
          <source>async.applyEach</source>
          <target state="translated">async.applyEach</target>
        </trans-unit>
        <trans-unit id="09acf60fd39b363e6f7dbe854d04255a69cac2e5" translate="yes" xml:space="preserve">
          <source>async.auto</source>
          <target state="translated">async.auto</target>
        </trans-unit>
        <trans-unit id="8949c0c6c720890753a1e0aa1273f16539f21ef4" translate="yes" xml:space="preserve">
          <source>async.cargo</source>
          <target state="translated">async.cargo</target>
        </trans-unit>
        <trans-unit id="29ed6c324479e185a903b1c00b01ed434506e82a" translate="yes" xml:space="preserve">
          <source>async.compose</source>
          <target state="translated">async.compose</target>
        </trans-unit>
        <trans-unit id="e1e1a8690149c7e765bb37dc53ccb6c6cb4658d7" translate="yes" xml:space="preserve">
          <source>async.concat</source>
          <target state="translated">async.concat</target>
        </trans-unit>
        <trans-unit id="59a166930678ded8a6eabd42a9aa0639947a68f8" translate="yes" xml:space="preserve">
          <source>async.detect</source>
          <target state="translated">async.detect</target>
        </trans-unit>
        <trans-unit id="b60087bc4df4e7e475af74779a9d719f5a40f65d" translate="yes" xml:space="preserve">
          <source>async.doWhilst</source>
          <target state="translated">async.doWhilst</target>
        </trans-unit>
        <trans-unit id="4526514bb5f943aadd6977c2310a66399197f351" translate="yes" xml:space="preserve">
          <source>async.each</source>
          <target state="translated">async.each</target>
        </trans-unit>
        <trans-unit id="9d62057a28dedc4f3de1067d01b6fcbea5d26b8c" translate="yes" xml:space="preserve">
          <source>async.eachOf</source>
          <target state="translated">async.eachOf</target>
        </trans-unit>
        <trans-unit id="49c18511afe9c164a5376eccea39476761c8627a" translate="yes" xml:space="preserve">
          <source>async.every</source>
          <target state="translated">async.every</target>
        </trans-unit>
        <trans-unit id="cc343b62bc858214f731e7dc3f5436c72c782006" translate="yes" xml:space="preserve">
          <source>async.filter</source>
          <target state="translated">async.filter</target>
        </trans-unit>
        <trans-unit id="5eadcc222f6b801bacc3c77840742816023dd5eb" translate="yes" xml:space="preserve">
          <source>async.groupBy</source>
          <target state="translated">async.groupBy</target>
        </trans-unit>
        <trans-unit id="31f66abb382aa2c9762ceeecfa3611598b0b5d39" translate="yes" xml:space="preserve">
          <source>async.map</source>
          <target state="translated">async.map</target>
        </trans-unit>
        <trans-unit id="9422a22ff3ac60a0f642cd8eb7d714034075bc29" translate="yes" xml:space="preserve">
          <source>async.mapValues</source>
          <target state="translated">async.mapValues</target>
        </trans-unit>
        <trans-unit id="86f8c0f1b64ecb687ee95f3b42eae1eb89a3935b" translate="yes" xml:space="preserve">
          <source>async.memoize</source>
          <target state="translated">async.memoize</target>
        </trans-unit>
        <trans-unit id="b00a384b21ba2a89f45bf3876f227f91de8d5e4d" translate="yes" xml:space="preserve">
          <source>async.nextTick</source>
          <target state="translated">async.nextTick</target>
        </trans-unit>
        <trans-unit id="605542ac0b90296cd76556243ecc0700eede701b" translate="yes" xml:space="preserve">
          <source>async.parallel</source>
          <target state="translated">async.parallel</target>
        </trans-unit>
        <trans-unit id="5d971b990bd33af180faca9fc1e83895e7f66af8" translate="yes" xml:space="preserve">
          <source>async.queue</source>
          <target state="translated">async.queue</target>
        </trans-unit>
        <trans-unit id="5fd98d5ac2e666e4c8c60d1179cfe395fa1d8710" translate="yes" xml:space="preserve">
          <source>async.reduce</source>
          <target state="translated">async.reduce</target>
        </trans-unit>
        <trans-unit id="e63843a47c6c36ee71e677a75aaa04f1f9ad5557" translate="yes" xml:space="preserve">
          <source>async.reflect</source>
          <target state="translated">async.reflect</target>
        </trans-unit>
        <trans-unit id="22deff7fbd034b3d3d570567ba3abc8f34238581" translate="yes" xml:space="preserve">
          <source>async.reject</source>
          <target state="translated">async.reject</target>
        </trans-unit>
        <trans-unit id="74b4fda3f544c100e16760fd6ff4e13f79013fab" translate="yes" xml:space="preserve">
          <source>async.retry</source>
          <target state="translated">async.retry</target>
        </trans-unit>
        <trans-unit id="ea5b7c87ad93d753af2a72db805afcc01343ff8d" translate="yes" xml:space="preserve">
          <source>async.retryable</source>
          <target state="translated">async.retryable</target>
        </trans-unit>
        <trans-unit id="762197f902a1a97c23e453f4135b85eeb4cfdc71" translate="yes" xml:space="preserve">
          <source>async.setImmediate</source>
          <target state="translated">async.setImmediate</target>
        </trans-unit>
        <trans-unit id="617b8743986bfcd9d544f403b8a7cb3bbb923db7" translate="yes" xml:space="preserve">
          <source>async.some</source>
          <target state="translated">async.some</target>
        </trans-unit>
        <trans-unit id="1ab4aaec2d6d6c8b5afb31dba8f8231cb24b1885" translate="yes" xml:space="preserve">
          <source>async.times</source>
          <target state="translated">async.times</target>
        </trans-unit>
        <trans-unit id="fba87213e79d684654a90f7558ac04d70e85677f" translate="yes" xml:space="preserve">
          <source>async.whilst</source>
          <target state="translated">async.whilst</target>
        </trans-unit>
        <trans-unit id="2b960ef6d2556a79649121abf282f703180805d6" translate="yes" xml:space="preserve">
          <source>asynchronous truth test to perform after each execution of &lt;code&gt;iteratee&lt;/code&gt;. Invoked with (...args, callback), where &lt;code&gt;...args&lt;/code&gt; are the non-error args from the previous callback of &lt;code&gt;iteratee&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f0d7f17bde6b1020997c011512b15d3a3c9bc8" translate="yes" xml:space="preserve">
          <source>asynchronous truth test to perform after each execution of &lt;code&gt;iteratee&lt;/code&gt;. Invoked with (...args, callback), where &lt;code&gt;...args&lt;/code&gt; are the non-error args from the previous callback of &lt;code&gt;iteratee&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7da3f9ea8c7f95c1fefa34dc7e77adf3c3d5d6b" translate="yes" xml:space="preserve">
          <source>asynchronous truth test to perform before each execution of &lt;code&gt;iteratee&lt;/code&gt;. Invoked with ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b35e6f73d49ab84e10274204f4bcd1e21127a2" translate="yes" xml:space="preserve">
          <source>asynchronous truth test to perform before each execution of &lt;code&gt;iteratee&lt;/code&gt;. Invoked with (callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168224a709ada5f7d520d1f9e66304e918bdb55f" translate="yes" xml:space="preserve">
          <source>asyncify</source>
          <target state="translated">asyncify</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="336360553130301f9fbb71a1c22ca8d86c45a553" translate="yes" xml:space="preserve">
          <source>autoInject</source>
          <target state="translated">autoInject</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="e0d6ae5cf2a2d0c1075943593a36cc5377382a05" translate="yes" xml:space="preserve">
          <source>cargo</source>
          <target state="translated">cargo</target>
        </trans-unit>
        <trans-unit id="f0f597f8624d7fb6efd7c8142add6e45918d7c5d" translate="yes" xml:space="preserve">
          <source>cargoQueue</source>
          <target state="translated">cargoQueue</target>
        </trans-unit>
        <trans-unit id="537bac49fb381519e179be6b0008c6ba0263e54a" translate="yes" xml:space="preserve">
          <source>compose</source>
          <target state="translated">compose</target>
        </trans-unit>
        <trans-unit id="49ba358c3272c2db40fc6ab2c103669678628b68" translate="yes" xml:space="preserve">
          <source>concat</source>
          <target state="translated">concat</target>
        </trans-unit>
        <trans-unit id="25e4a40fc593a88796e39e8798b31bccb2ab4096" translate="yes" xml:space="preserve">
          <source>concatLimit</source>
          <target state="translated">concatLimit</target>
        </trans-unit>
        <trans-unit id="927f51f313788437f090df6b929c47120a17014e" translate="yes" xml:space="preserve">
          <source>concatSeries</source>
          <target state="translated">concatSeries</target>
        </trans-unit>
        <trans-unit id="d810ca965a236c6f46a932efff918a4b3a191918" translate="yes" xml:space="preserve">
          <source>constant</source>
          <target state="translated">constant</target>
        </trans-unit>
        <trans-unit id="2b66455f7e2e80415dc9326d25b445e71b71ec42" translate="yes" xml:space="preserve">
          <source>detect</source>
          <target state="translated">detect</target>
        </trans-unit>
        <trans-unit id="33aa89c83f2cdce00e9ebac77988e32037f4b6b0" translate="yes" xml:space="preserve">
          <source>detectLimit</source>
          <target state="translated">detectLimit</target>
        </trans-unit>
        <trans-unit id="10ba63b95e7f2e20c109e71c7c99235c07ef152f" translate="yes" xml:space="preserve">
          <source>detectSeries</source>
          <target state="translated">detectSeries</target>
        </trans-unit>
        <trans-unit id="7ee737c83ee689c96ef37d3a029068c390ebc8f8" translate="yes" xml:space="preserve">
          <source>dir</source>
          <target state="translated">dir</target>
        </trans-unit>
        <trans-unit id="945bfff89a232c159e3f20944dae7a2bdd2b75c3" translate="yes" xml:space="preserve">
          <source>doUntil</source>
          <target state="translated">doUntil</target>
        </trans-unit>
        <trans-unit id="71d05db56705f9502db6d08d67b44dab7acf530f" translate="yes" xml:space="preserve">
          <source>doWhilst</source>
          <target state="translated">doWhilst</target>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="translated">each</target>
        </trans-unit>
        <trans-unit id="9c712d7164a65d89948c65dfbd3bbd849de0cd5b" translate="yes" xml:space="preserve">
          <source>eachLimit</source>
          <target state="translated">eachLimit</target>
        </trans-unit>
        <trans-unit id="ebbdbd065974394360d49877f9b7b676c7acb836" translate="yes" xml:space="preserve">
          <source>eachOf</source>
          <target state="translated">eachOf</target>
        </trans-unit>
        <trans-unit id="1445b7ef2fea47aef3adf8328b15e7aaeee18087" translate="yes" xml:space="preserve">
          <source>eachOfLimit</source>
          <target state="translated">eachOfLimit</target>
        </trans-unit>
        <trans-unit id="be0f67efff957c3df183a89b6defe2674a77117e" translate="yes" xml:space="preserve">
          <source>eachOfSeries</source>
          <target state="translated">eachOfSeries</target>
        </trans-unit>
        <trans-unit id="2829220cf568b99c11a0cbf23035404dc7811719" translate="yes" xml:space="preserve">
          <source>eachSeries</source>
          <target state="translated">eachSeries</target>
        </trans-unit>
        <trans-unit id="599a9df08c5222b9d1fff0a86c585b2a046e5b63" translate="yes" xml:space="preserve">
          <source>ensureAsync</source>
          <target state="translated">ensureAsync</target>
        </trans-unit>
        <trans-unit id="5873f666d03fb3fb39d0db9c71b5e1f769334088" translate="yes" xml:space="preserve">
          <source>every</source>
          <target state="translated">every</target>
        </trans-unit>
        <trans-unit id="5144778702d0139df42abc2a32f59f3a8c4029eb" translate="yes" xml:space="preserve">
          <source>everyLimit</source>
          <target state="translated">everyLimit</target>
        </trans-unit>
        <trans-unit id="d253c7580efaf23f954fa2a4d83575c30814d0d1" translate="yes" xml:space="preserve">
          <source>everySeries</source>
          <target state="translated">everySeries</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="aee9f3cec70f22acee96bb2e4ecbbbf8c6776d87" translate="yes" xml:space="preserve">
          <source>filterLimit</source>
          <target state="translated">filterLimit</target>
        </trans-unit>
        <trans-unit id="ff375692692286f200a6d28b6239ada9aa69918b" translate="yes" xml:space="preserve">
          <source>filterSeries</source>
          <target state="translated">filterSeries</target>
        </trans-unit>
        <trans-unit id="ded8dae5786fb0e9e6ffb657401fd861ba2efe11" translate="yes" xml:space="preserve">
          <source>find</source>
          <target state="translated">find</target>
        </trans-unit>
        <trans-unit id="250bb79d78bd2780622deeaa3ec7d02c8e267c2e" translate="yes" xml:space="preserve">
          <source>findLimit</source>
          <target state="translated">findLimit</target>
        </trans-unit>
        <trans-unit id="1ada7d906421dfe8336217a23aebd6c33c5781db" translate="yes" xml:space="preserve">
          <source>findSeries</source>
          <target state="translated">findSeries</target>
        </trans-unit>
        <trans-unit id="ccc9d4f948ad94c5bbe07a1feee18738df60b756" translate="yes" xml:space="preserve">
          <source>flatMap</source>
          <target state="translated">flatMap</target>
        </trans-unit>
        <trans-unit id="ce8a2262c78086f1d658e5997b84373bdf446651" translate="yes" xml:space="preserve">
          <source>flatMapLimit</source>
          <target state="translated">flatMapLimit</target>
        </trans-unit>
        <trans-unit id="5028f5f538d0d3a2ac2305f8c8df10d58dff7ddb" translate="yes" xml:space="preserve">
          <source>flatMapSeries</source>
          <target state="translated">flatMapSeries</target>
        </trans-unit>
        <trans-unit id="241fe3b90e83b8a0df4366916ff74bd32d63cd82" translate="yes" xml:space="preserve">
          <source>foldl</source>
          <target state="translated">foldl</target>
        </trans-unit>
        <trans-unit id="4d0670c0c558d54ec037811978e18c97c2994746" translate="yes" xml:space="preserve">
          <source>foldr</source>
          <target state="translated">foldr</target>
        </trans-unit>
        <trans-unit id="edc5ee22beb2b82f4da41914d8d41cca9c53020f" translate="yes" xml:space="preserve">
          <source>forEach</source>
          <target state="translated">forEach</target>
        </trans-unit>
        <trans-unit id="232c0a929d2c9235d1dae1b113fa480397a31b95" translate="yes" xml:space="preserve">
          <source>forEachLimit</source>
          <target state="translated">forEachLimit</target>
        </trans-unit>
        <trans-unit id="bb63ca3a1ff0920371ca9a091f91f9d65349c923" translate="yes" xml:space="preserve">
          <source>forEachOf</source>
          <target state="translated">forEachOf</target>
        </trans-unit>
        <trans-unit id="e13bd67ee1063eeaf24360a9666c378fe9754659" translate="yes" xml:space="preserve">
          <source>forEachOfLimit</source>
          <target state="translated">forEachOfLimit</target>
        </trans-unit>
        <trans-unit id="4740b18a7117e1f9c11a2251a66687280d9dce97" translate="yes" xml:space="preserve">
          <source>forEachOfSeries</source>
          <target state="translated">forEachOfSeries</target>
        </trans-unit>
        <trans-unit id="229323c687437dff364643f3894546e6e8c3e018" translate="yes" xml:space="preserve">
          <source>forEachSeries</source>
          <target state="translated">forEachSeries</target>
        </trans-unit>
        <trans-unit id="e07f8c4ab682212744526982f0f08d336e1c9041" translate="yes" xml:space="preserve">
          <source>forever</source>
          <target state="translated">forever</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="fb661d46f76cd21adb8130e390f9b277180664e4" translate="yes" xml:space="preserve">
          <source>function&amp;lt;optional&amp;gt;</source>
          <target state="translated">function&amp;lt;optional&amp;gt;</target>
        </trans-unit>
        <trans-unit id="efb22615df12aa7f71e4c5d9ccbcd20e67a8dacd" translate="yes" xml:space="preserve">
          <source>groupBy</source>
          <target state="translated">groupBy</target>
        </trans-unit>
        <trans-unit id="905c295762d7951c6f5b6f0d8df35610457899ba" translate="yes" xml:space="preserve">
          <source>groupByLimit</source>
          <target state="translated">groupByLimit</target>
        </trans-unit>
        <trans-unit id="58a86ae417668dc2d8259d9253ac2769ff86333a" translate="yes" xml:space="preserve">
          <source>groupBySeries</source>
          <target state="translated">groupBySeries</target>
        </trans-unit>
        <trans-unit id="7babc233de26ab19ead1b9c278128d5c434910ee" translate="yes" xml:space="preserve">
          <source>log</source>
          <target state="translated">log</target>
        </trans-unit>
        <trans-unit id="37745ed7a0f005fb14522c5cc7c1ba3d9e0df579" translate="yes" xml:space="preserve">
          <source>map</source>
          <target state="translated">map</target>
        </trans-unit>
        <trans-unit id="f641cc8fc947cb26d15a3a5244fdd32e584e42b0" translate="yes" xml:space="preserve">
          <source>mapLimit</source>
          <target state="translated">mapLimit</target>
        </trans-unit>
        <trans-unit id="77a30b5cfad111001aa004c023524858278c6037" translate="yes" xml:space="preserve">
          <source>mapSeries</source>
          <target state="translated">mapSeries</target>
        </trans-unit>
        <trans-unit id="ff4865435f8c56fdd5108245835036f65e208528" translate="yes" xml:space="preserve">
          <source>mapValues</source>
          <target state="translated">mapValues</target>
        </trans-unit>
        <trans-unit id="76b3f00fb1666195c1449895aa008c6abcb86e57" translate="yes" xml:space="preserve">
          <source>mapValuesLimit</source>
          <target state="translated">mapValuesLimit</target>
        </trans-unit>
        <trans-unit id="551ca21f2f69d984ce43da0833e1bfe4264a7c0e" translate="yes" xml:space="preserve">
          <source>mapValuesSeries</source>
          <target state="translated">mapValuesSeries</target>
        </trans-unit>
        <trans-unit id="aa655b9f772a7fe0b0091ff74f3fb3bf03495f64" translate="yes" xml:space="preserve">
          <source>memoize</source>
          <target state="translated">memoize</target>
        </trans-unit>
        <trans-unit id="f699bbccdb87a8ed2ace3467b85eb8af12070d2d" translate="yes" xml:space="preserve">
          <source>nextTick</source>
          <target state="translated">nextTick</target>
        </trans-unit>
        <trans-unit id="53b0a1b2fadf4e040cdc2155a7340de24aca93cb" translate="yes" xml:space="preserve">
          <source>number</source>
          <target state="translated">number</target>
        </trans-unit>
        <trans-unit id="3efccb31b3d2c7ae5b4f6f72a65ebd03b585ae59" translate="yes" xml:space="preserve">
          <source>number&amp;lt;optional&amp;gt;</source>
          <target state="translated">number&amp;lt;optional&amp;gt;</target>
        </trans-unit>
        <trans-unit id="af32ca487bb9ae439a73bf2f46dda7f2f81d654e" translate="yes" xml:space="preserve">
          <source>optional options, exactly the same as from &lt;code&gt;retry&lt;/code&gt;, except for a &lt;code&gt;opts.arity&lt;/code&gt; that is the arity of the &lt;code&gt;task&lt;/code&gt; function, defaulting to &lt;code&gt;task.length&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9252013891fed7df5ef1bbf56c675a5560e127" translate="yes" xml:space="preserve">
          <source>parallel</source>
          <target state="translated">parallel</target>
        </trans-unit>
        <trans-unit id="fbbad89f05d287cbb29633791ed602c4b8aa446f" translate="yes" xml:space="preserve">
          <source>parallelLimit</source>
          <target state="translated">parallelLimit</target>
        </trans-unit>
        <trans-unit id="9dc4208c81f0964440296e626b640cc26f21d4df" translate="yes" xml:space="preserve">
          <source>priorityQueue</source>
          <target state="translated">priorityQueue</target>
        </trans-unit>
        <trans-unit id="1038345ecc525ca37383914c8d7839e94ccf5448" translate="yes" xml:space="preserve">
          <source>queue</source>
          <target state="translated">queue</target>
        </trans-unit>
        <trans-unit id="de4bedce64a13c433914abccee8d49016e57d089" translate="yes" xml:space="preserve">
          <source>race</source>
          <target state="translated">race</target>
        </trans-unit>
        <trans-unit id="48c3689f6dd5e9e952f925b7ebebf64d7c43fc56" translate="yes" xml:space="preserve">
          <source>reduce</source>
          <target state="translated">reduce</target>
        </trans-unit>
        <trans-unit id="972d8b805ef251b8f3212fb3b804858e50b3489e" translate="yes" xml:space="preserve">
          <source>reduceRight</source>
          <target state="translated">reduceRight</target>
        </trans-unit>
        <trans-unit id="5aa483674f6d8fa8eaffe75174f72628ce67a669" translate="yes" xml:space="preserve">
          <source>reflect</source>
          <target state="translated">reflect</target>
        </trans-unit>
        <trans-unit id="be80caa1f5c4bd86d7ce95a7a33c7007621ce9c2" translate="yes" xml:space="preserve">
          <source>reflectAll</source>
          <target state="translated">reflectAll</target>
        </trans-unit>
        <trans-unit id="90afb8c10d80d7b84837590eb43cb0b81ca22390" translate="yes" xml:space="preserve">
          <source>reject</source>
          <target state="translated">reject</target>
        </trans-unit>
        <trans-unit id="b741bbe7b2edfba70eda2442744317fe71fa6c8f" translate="yes" xml:space="preserve">
          <source>rejectLimit</source>
          <target state="translated">rejectLimit</target>
        </trans-unit>
        <trans-unit id="02c67b22181362d1d56cf36a39b67024da4462b1" translate="yes" xml:space="preserve">
          <source>rejectSeries</source>
          <target state="translated">rejectSeries</target>
        </trans-unit>
        <trans-unit id="6098984757376f60ee6c54f910cedb3853530041" translate="yes" xml:space="preserve">
          <source>remove items from the queue that match a test function. The test function will be passed an object with a &lt;code&gt;data&lt;/code&gt; property, and a &lt;code&gt;priority&lt;/code&gt; property, if this is a &lt;a href=&quot;#priorityQueue&quot;&gt;priorityQueue&lt;/a&gt; object. Invoked with &lt;code&gt;queue.remove(testFn)&lt;/code&gt;, where &lt;code&gt;testFn&lt;/code&gt; is of the form &lt;code&gt;function ({data, priority}) {}&lt;/code&gt; and returns a Boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708269ae0043898dacb34d811f4db9a4661226b7" translate="yes" xml:space="preserve">
          <source>retry</source>
          <target state="translated">retry</target>
        </trans-unit>
        <trans-unit id="c057e142173f8c723b2b0b2fbf27db68aa03cf48" translate="yes" xml:space="preserve">
          <source>retryable</source>
          <target state="translated">retryable</target>
        </trans-unit>
        <trans-unit id="8edfd656196dec4251c765d63c39ea583642d33c" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;#map&quot;&gt;async.map&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94208ae4191f4ee14e7e1cd043ab965296839447" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;#map&quot;&gt;map&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81448fe273247b533b9f018e96c158cab7901247" translate="yes" xml:space="preserve">
          <source>select</source>
          <target state="translated">select</target>
        </trans-unit>
        <trans-unit id="5cc7a049e0e720b15481c0e9b87d3e162e9e49dc" translate="yes" xml:space="preserve">
          <source>selectLimit</source>
          <target state="translated">selectLimit</target>
        </trans-unit>
        <trans-unit id="4a027366181f95f94d15343ad1994e2a206c2efe" translate="yes" xml:space="preserve">
          <source>selectSeries</source>
          <target state="translated">selectSeries</target>
        </trans-unit>
        <trans-unit id="1aaccfb5b185786dfd1a9e053bafde0ca89ba47d" translate="yes" xml:space="preserve">
          <source>seq</source>
          <target state="translated">seq</target>
        </trans-unit>
        <trans-unit id="8c45d090913a21d5cac19942e6f2a531e44331a7" translate="yes" xml:space="preserve">
          <source>series</source>
          <target state="translated">series</target>
        </trans-unit>
        <trans-unit id="451ff56a67750810f1d9b20e535fa80063a3e405" translate="yes" xml:space="preserve">
          <source>setImmediate</source>
          <target state="translated">setImmediate</target>
        </trans-unit>
        <trans-unit id="eb875812858d27b22cb2b75f992dffadc1b05c66" translate="yes" xml:space="preserve">
          <source>some</source>
          <target state="translated">some</target>
        </trans-unit>
        <trans-unit id="eb388c5822d54007ce7a78af4493ceb34986f8d1" translate="yes" xml:space="preserve">
          <source>someLimit</source>
          <target state="translated">someLimit</target>
        </trans-unit>
        <trans-unit id="4e10a7f70c8059cfe0efa7a81ec4260801d4124a" translate="yes" xml:space="preserve">
          <source>someSeries</source>
          <target state="translated">someSeries</target>
        </trans-unit>
        <trans-unit id="c3adc28a9a4a7af6e6ec2bb0968554d049edb777" translate="yes" xml:space="preserve">
          <source>sortBy</source>
          <target state="translated">sortBy</target>
        </trans-unit>
        <trans-unit id="9ba7c7d58862f99db39dee48fc11eb2eb16cbdaf" translate="yes" xml:space="preserve">
          <source>the asynchronous function to wrap. This function will be passed any arguments passed to the returned wrapper. Invoked with (...args, callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be00815c79b930c68516fd2153c6747640081c9" translate="yes" xml:space="preserve">
          <source>the asynchronous functions to compose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb86dc14a295029d7e94d012b55c8bb95be3708e" translate="yes" xml:space="preserve">
          <source>the final argument should be the callback, called when all functions have completed processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70cb2adad248c40c22ed032561bbc01e7845b59" translate="yes" xml:space="preserve">
          <source>the memoized function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9962c9a45ba282d990388cbacf4612b9ccb8edd5" translate="yes" xml:space="preserve">
          <source>the partially-applied function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d3c9490be2608ac36f5a4805bfec2f21f7f982" translate="yes" xml:space="preserve">
          <source>timeout</source>
          <target state="translated">timeout</target>
        </trans-unit>
        <trans-unit id="7196b5875f713c826bd279dbda843c897e2a60c2" translate="yes" xml:space="preserve">
          <source>times</source>
          <target state="translated">times</target>
        </trans-unit>
        <trans-unit id="93072d23e39899c1b03e4e7e814a1bc1588a4463" translate="yes" xml:space="preserve">
          <source>timesLimit</source>
          <target state="translated">timesLimit</target>
        </trans-unit>
        <trans-unit id="3a83760822f853360a737f9a0469c01de25c528a" translate="yes" xml:space="preserve">
          <source>timesSeries</source>
          <target state="translated">timesSeries</target>
        </trans-unit>
        <trans-unit id="dd8ce13ad1ba5d660b1c242d9f2cb063a8429155" translate="yes" xml:space="preserve">
          <source>transform</source>
          <target state="translated">transform</target>
        </trans-unit>
        <trans-unit id="5ec20419f8716f909082db553169434c769bd0d3" translate="yes" xml:space="preserve">
          <source>tryEach</source>
          <target state="translated">tryEach</target>
        </trans-unit>
        <trans-unit id="d5d4cd07616a542891b7ec2d0257b3a24b69856e" translate="yes" xml:space="preserve">
          <source>undefined</source>
          <target state="translated">undefined</target>
        </trans-unit>
        <trans-unit id="15e49863432c89071dddfddf04017fe4b06da4a4" translate="yes" xml:space="preserve">
          <source>unmemoize</source>
          <target state="translated">unmemoize</target>
        </trans-unit>
        <trans-unit id="b310f4d4d89b8570184b9777ad7d90fc1df20457" translate="yes" xml:space="preserve">
          <source>until</source>
          <target state="translated">until</target>
        </trans-unit>
        <trans-unit id="67f0aef0702c5d03d62ad22e63c7fced5d8b3fbf" translate="yes" xml:space="preserve">
          <source>waterfall</source>
          <target state="translated">waterfall</target>
        </trans-unit>
        <trans-unit id="dde37b6e3f9de57c0022e213c670ecec6a7134aa" translate="yes" xml:space="preserve">
          <source>when &lt;code&gt;fn&lt;/code&gt; passes an error to it's callback, this function will be called, and execution stops. Invoked with (err).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173bf4287cb43e8aa84982aa7aafe3500db84480" translate="yes" xml:space="preserve">
          <source>whilst</source>
          <target state="translated">whilst</target>
        </trans-unit>
        <trans-unit id="83a122c06e1ecb9d7adf7ea03620523d0135c0bc" translate="yes" xml:space="preserve">
          <source>wrapSync</source>
          <target state="translated">wrapSync</target>
        </trans-unit>
        <trans-unit id="c67434af0e6b8a5f3fa5f0ee224a6aeb87ea90e6" translate="yes" xml:space="preserve">
          <source>{times: 5, interval: 0}| 5</source>
          <target state="translated">{times: 5, interval: 0}| 5</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
