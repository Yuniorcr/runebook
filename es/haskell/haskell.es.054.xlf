<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="haskell">
    <body>
      <group id="haskell">
        <trans-unit id="0219cc434dc5f14e7aa2d22e1fa1374ea94481bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fadaf40facdb46311f0b253aabfd4a249cbf45b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a ByteString, reduces the ByteString using the binary operator, from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637b4b1ae7de090939d1501baf59b05c6b379b5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but strict in the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38706bf8bcda5bb152bdadd2bad97f2f16c0362f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty &lt;code&gt;ByteStrings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2093c659ced7a21150b96dd391c8e3888ef2b8c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl1-39-&quot;&gt;foldl1'&lt;/a&gt;&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;, but strict in the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569e332d5a21b09df525eca4e7052b1941987723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a ByteString, reduces the ByteString using the binary operator, from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf50c8d2fc12653b3c7d86d7b1cdeb9cc8850238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f33f6db161ebfff3ca891cb8da754d402393d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:iterate&quot;&gt;iterate&lt;/a&gt; f x&lt;/code&gt; returns an infinite ByteString of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96bbfaf607a708c3811399a361d04f7b7d4cf84b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:repeat&quot;&gt;repeat&lt;/a&gt; x&lt;/code&gt; is an infinite ByteString, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0363ad05ec2d2dc4b1c954860242b98451f0db15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left. This function will fuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d244d5aa3ef0785af5bd8b75998f48fedd67cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; breaks the ByteString into two segments. It is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;data-bytestring-lazy#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623d60d5a2ab5a24d2906c9551e0417f9aecdbb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ac37f79289343bf19b065f750e3bf9cf378479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two ByteStrings to produce the list of corresponding sums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc90c20473c1ecd1f5daa9ad1aa28d44089fd39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7446723c5744081e426f0c68f66f3757ce896ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite ByteString into a circular one, or equivalently, the infinite repetition of the original ByteString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93eae0dd8a677f5e6c557557f531ed87657a455a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1826b29d8fb20478b485a25f1dd28e52178bce1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a ByteString, reduces the ByteString using the binary operator, from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcf53c62761b162c8305634c382c19038a4b4e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl-39-&quot;&gt;foldl'&lt;/a&gt;&lt;/code&gt; is like foldl, but strict in the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f74b552d46d49b2565d579b3c5a5a02e9c764a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty &lt;code&gt;ByteStrings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325a3decb3bfb6cda2467fd8a10350dd9300f3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl1-39-&quot;&gt;foldl1'&lt;/a&gt;&lt;/code&gt; is like &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt;, but strict in the accumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569f75b64b3fc4f3746a72a6e817f9a9b9adef2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a packed string, reduces the packed string using the binary operator, from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc9b69bac3a35fcb3da0090cf0d397e24abb308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b308b0398322ef72f763ca8708657195357a35c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:iterate&quot;&gt;iterate&lt;/a&gt; f x&lt;/code&gt; returns an infinite ByteString of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734c989c0581155fc3c40ecb0495412534befdc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a ByteString up into a list of ByteStrings at newline Chars. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9142293bc3569e7c4eeebb4fc06306b0fd26e4d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c73cda03c3c28a246f7653e1fed2ab0065f3583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#t:ByteString&quot;&gt;ByteString&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e0d5a7b9b68c43daa9661716c6caf2b782d299" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:repeat&quot;&gt;repeat&lt;/a&gt; x&lt;/code&gt; is an infinite ByteString, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cca0cb060471abf20e45753a3219ac297b08afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a list of successive reduced values from the left. This function will fuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12edc84f1c4696c637d33e4f7acb39260212a7a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; breaks the ByteString into two segments. It is equivalent to &lt;code&gt;(&lt;a href=&quot;data-bytestring-lazy-char8#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;data-bytestring-lazy-char8#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8203bbc7abb1550e2252baa6dcb14bf6a84a00bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a ByteString &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d58cb271d54a691f148ceb44ed361defb00b77a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e530c8bb5652916eac9c9f9df4955c3e0fb3cef5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a ByteString up into a list of words, which were delimited by Chars representing white space. And</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad56e4b49a938fe1f3e80f8f402a8c312fdaeabd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; generalises &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; by zipping with the function given as the first argument, instead of a tupling function. For example, &lt;code&gt;&lt;a href=&quot;data-bytestring-lazy-char8#v:zipWith&quot;&gt;zipWith&lt;/a&gt; (+)&lt;/code&gt; is applied to two ByteStrings to produce the list of corresponding sums.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329983f85b087c850a5ccb1bd56ee80d5dcf0ce4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-bytestring-short#t:ShortByteString&quot;&gt;ShortByteString&lt;/a&gt;&lt;/code&gt;: 4 words; 16 or 32 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d76a8baa4b918f3c183054588a8a873dd25abde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-complex#v:cis&quot;&gt;cis&lt;/a&gt; t&lt;/code&gt; is a complex value with magnitude &lt;code&gt;1&lt;/code&gt; and phase &lt;code&gt;t&lt;/code&gt; (modulo &lt;code&gt;2*&lt;a href=&quot;numeric#v:pi&quot;&gt;pi&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e63de9563335b37a43219af45dcdab137f1f6af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-data#v:dataCast1&quot;&gt;dataCast1&lt;/a&gt;&lt;/code&gt; should be defined as &lt;code&gt;&lt;a href=&quot;data-typeable#v:gcast1&quot;&gt;gcast1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ebefbd3940b6ffe12c9649942e286513e51ad0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-data#v:dataCast2&quot;&gt;dataCast2&lt;/a&gt;&lt;/code&gt; should be defined as &lt;code&gt;&lt;a href=&quot;data-typeable#v:gcast2&quot;&gt;gcast2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc62eb41f91e7b2e875fb6cefb9bf5723a3e0d8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-eq#t:Eq&quot;&gt;Eq&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818f2926ad6d9aa6217ebfa029e556150ec908a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-foldable#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c64733b3cbba386f6416f88a406a90b79b23b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-foldable#v:mapM_&quot;&gt;mapM_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;data-traversable#v:forM&quot;&gt;forM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abaa003bb2958f17b4c25c91f182467a165f9dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-foldable#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ed5f6754b7a36eabe1c5aa3ba9fe6a28a03db5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-foldable#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;data-foldable#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86f572d0a95734f99c2f335fa4012221ec9ab3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-foldable#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b4fa340bcd1803dd46f9ad92aad6e0876012b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-function#v:-38-&quot;&gt;&amp;amp;&lt;/a&gt;&lt;/code&gt; is a reverse application operator. This provides notational convenience. Its precedence is one higher than that of the forward application operator &lt;code&gt;&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;&lt;/code&gt;, which allows &lt;code&gt;&lt;a href=&quot;data-function#v:-38-&quot;&gt;&amp;amp;&lt;/a&gt;&lt;/code&gt; to be nested in &lt;code&gt;&lt;a href=&quot;data-function#v:-36-&quot;&gt;$&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1730c5686998b78a3501c910101604876ebc6067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-function#v:fix&quot;&gt;fix&lt;/a&gt; f&lt;/code&gt; is the least fixed point of the function &lt;code&gt;f&lt;/code&gt;, i.e. the least defined &lt;code&gt;x&lt;/code&gt; such that &lt;code&gt;f x = x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc2f2d88b56286c1ebf9ed3d80daa53fd96e905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-function#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; takes its (first) two arguments in the reverse order of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e5bd55f93a77fdfca4edbda89e3cbbe06f6bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-function#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; runs the binary function &lt;code&gt;b&lt;/code&gt;&lt;em&gt;on&lt;/em&gt; the results of applying unary function &lt;code&gt;u&lt;/code&gt; to two arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. From the opposite perspective, it transforms two inputs and combines the outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e9e0d5cd073da4d6b7c6378fa6edc99955e292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor#v:void&quot;&gt;void&lt;/a&gt; value&lt;/code&gt; discards or ignores the result of evaluation, such as the return value of an &lt;code&gt;&lt;a href=&quot;system-io#v:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5809cf1322027425d66e0e26a6f07dc2283c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readBinaryWith&quot;&gt;readBinaryWith&lt;/a&gt; rp1 rp2 n c'&lt;/code&gt; matches the name of a binary data constructor and then parses its arguments using &lt;code&gt;rp1&lt;/code&gt; and &lt;code&gt;rp2&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf72b90ad816dea1b11908877441a74beee7d52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readData&quot;&gt;readData&lt;/a&gt; p&lt;/code&gt; is a parser for datatypes where each alternative begins with a data constructor. It parses the constructor and passes it to &lt;code&gt;p&lt;/code&gt;. Parsers for various constructors can be constructed with &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readUnaryWith&quot;&gt;readUnaryWith&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readBinaryWith&quot;&gt;readBinaryWith&lt;/a&gt;&lt;/code&gt;, and combined with &lt;code&gt;&lt;a href=&quot;control-applicative#v:-60--124--62-&quot;&gt;(&amp;lt;|&amp;gt;)&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;control-applicative#t:Alternative&quot;&gt;Alternative&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd7d89575dc73aa7d75babcbe5618f3b2ca31aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readUnaryWith&quot;&gt;readUnaryWith&lt;/a&gt; rp n c'&lt;/code&gt; matches the name of a unary data constructor and then parses its argument using &lt;code&gt;rp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee47685d28202b9bc0ca12619f1cd0bebcd04d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsBinary1&quot;&gt;readsBinary1&lt;/a&gt; n c n'&lt;/code&gt; matches the name of a binary data constructor and then parses its arguments using &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsPrec1&quot;&gt;readsPrec1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b5d12ec307d4525dd4577645cf26777df6a9fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsBinaryWith&quot;&gt;readsBinaryWith&lt;/a&gt; rp1 rp2 n c n'&lt;/code&gt; matches the name of a binary data constructor and then parses its arguments using &lt;code&gt;rp1&lt;/code&gt; and &lt;code&gt;rp2&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f16bab2111fe95700fed25029573a3d2d398c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsData&quot;&gt;readsData&lt;/a&gt; p d&lt;/code&gt; is a parser for datatypes where each alternative begins with a data constructor. It parses the constructor and passes it to &lt;code&gt;p&lt;/code&gt;. Parsers for various constructors can be constructed with &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsUnary&quot;&gt;readsUnary&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsUnary1&quot;&gt;readsUnary1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsBinary1&quot;&gt;readsBinary1&lt;/a&gt;&lt;/code&gt;, and combined with &lt;code&gt;mappend&lt;/code&gt; from the &lt;code&gt;Monoid&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e68175751ac7ad4e7ba2cc464dac95d4c7bacf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsUnary&quot;&gt;readsUnary&lt;/a&gt; n c n'&lt;/code&gt; matches the name of a unary data constructor and then parses its argument using &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565705a2355c81f8c4e2407294fc04361b15cb5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsUnary1&quot;&gt;readsUnary1&lt;/a&gt; n c n'&lt;/code&gt; matches the name of a unary data constructor and then parses its argument using &lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsPrec1&quot;&gt;readsPrec1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d859c3c1c9433e4e320b3df0fb6021b75e688ac4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:readsUnaryWith&quot;&gt;readsUnaryWith&lt;/a&gt; rp n c n'&lt;/code&gt; matches the name of a unary data constructor and then parses its argument using &lt;code&gt;rp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c172d2a7ad86490cf652f24903c3649b1aa189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:showsBinary1&quot;&gt;showsBinary1&lt;/a&gt; n d x y&lt;/code&gt; produces the string representation of a binary data constructor with name &lt;code&gt;n&lt;/code&gt; and arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, in precedence context &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a300ad3475e1a78c005d5d6ddfa8b2b8e08adb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:showsBinaryWith&quot;&gt;showsBinaryWith&lt;/a&gt; sp1 sp2 n d x y&lt;/code&gt; produces the string representation of a binary data constructor with name &lt;code&gt;n&lt;/code&gt; and arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, in precedence context &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47a16643a75a3c5fab1e61ce0611140717494a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:showsUnary&quot;&gt;showsUnary&lt;/a&gt; n d x&lt;/code&gt; produces the string representation of a unary data constructor with name &lt;code&gt;n&lt;/code&gt; and argument &lt;code&gt;x&lt;/code&gt;, in precedence context &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b0f1af708a14962b0ccd97c41e17ccbff7c404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:showsUnary1&quot;&gt;showsUnary1&lt;/a&gt; n d x&lt;/code&gt; produces the string representation of a unary data constructor with name &lt;code&gt;n&lt;/code&gt; and argument &lt;code&gt;x&lt;/code&gt;, in precedence context &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f3519c64292852fc53002ce6cba77a64fcdd1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-classes#v:showsUnaryWith&quot;&gt;showsUnaryWith&lt;/a&gt; sp n d x&lt;/code&gt; produces the string representation of a unary data constructor with name &lt;code&gt;n&lt;/code&gt; and argument &lt;code&gt;x&lt;/code&gt;, in precedence context &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22281113e9dd1cbe3e2bf5cacab917c5656c03d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-functor-contravariant#t:Contravariant&quot;&gt;Contravariant&lt;/a&gt;&lt;/code&gt; functors, sometimes referred to colloquially as &lt;code&gt;Cofunctor&lt;/code&gt;, even though the dual of a &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; is just a &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt;. As with &lt;code&gt;&lt;a href=&quot;data-functor#t:Functor&quot;&gt;Functor&lt;/a&gt;&lt;/code&gt; the definition of &lt;code&gt;&lt;a href=&quot;data-functor-contravariant#t:Contravariant&quot;&gt;Contravariant&lt;/a&gt;&lt;/code&gt; for a given ADT is unambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42c9aeed70440c2245e1bdc0fcccba94bfdeddb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is the most general operation for working with an individual key that may or may not be in a given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae38a1a4793bb3007d6c675532b7dda58a09433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4039febd01d4ad929bda656385767f1832c4f1b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-lazy#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4af7cbb1d410440a980688c976f3fe3c5ff9d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:dropMissing&quot;&gt;dropMissing&lt;/a&gt;&lt;/code&gt; drops all the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ad5f723e1b7d3813183bfa40d49217771fd0e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; does not use the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d957addf52db3e0213174fd9c1cf59d71de9f689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:zipWithMaybeMatched&quot;&gt;zipWithMaybeMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723244082bcaaebee329d80c4dcbafe795c08afc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66bf261b0f59a091bea447b5e9d24a00bd2565f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:traverseMaybeMissing&quot;&gt;traverseMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:zipWithMaybeAMatched&quot;&gt;zipWithMaybeAMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f09eafeaf43973b2b4ef052ceb1d95ba6373ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2347113bc06e17f32ecf291f762e9885cac24fb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:preserveMissing&quot;&gt;preserveMissing&lt;/a&gt;&lt;/code&gt; leaves all the entries alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c663f83c135e82902f8082bebb4a53a45e651f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:dropMissing&quot;&gt;dropMissing&lt;/a&gt;&lt;/code&gt; drops all the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2a604a33c67a06ac112eaa1312583a9b365e34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:zipWithMaybeMatched&quot;&gt;zipWithMaybeMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90b5585b71b6245394bbd3159a3e9d4e8e2ce16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2913faa37c5de84e945d7fcad5503f42328bb22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:traverseMaybeMissing&quot;&gt;traverseMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-intmap-merge-lazy#v:zipWithMaybeAMatched&quot;&gt;zipWithMaybeAMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014a1f0b8624ffd74df3114df2903b00b9900bc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5df82aec10b0ea129154f63ba5d40a88364ec99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-merge-strict#v:preserveMissing&quot;&gt;preserveMissing&lt;/a&gt;&lt;/code&gt; leaves all the entries alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4891503ae61af9eb3f8ccdce6c57547ed7f1c24e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is the most general operation for working with an individual key that may or may not be in a given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008f5e2416d622a3b4d999e903757574cfc3eb8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d8ccf2d98e7c5a960cd8ff74b21f462cc5d0c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b376f16d49952e6c57ad03e3f8587fca1f0a7f10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is the most general operation for working with an individual key that may or may not be in a given map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a711168233422c9c61c28211e2d2a8a244ec4fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTree&quot;&gt;showTree&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbf78f1132522114c918dec1daf7d2cdc9dc3dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-intmap-strict-internal#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt; has moved to &lt;code&gt;&lt;a href=&quot;data-intmap-internal-debug#v:showTreeWith&quot;&gt;showTreeWith&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fdd3247c18a6f969cc6727a449fcc698c96ba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; acts as a barrier to reordering. Multiple &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; operations occur in strict program order. An &lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; is never observed to take place ahead of any earlier (in program order) &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; operations, or after any later &lt;code&gt;&lt;a href=&quot;data-ioref#t:IORef&quot;&gt;IORef&lt;/a&gt;&lt;/code&gt; operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4c8d1102aac436b8f0f5793df40e7ad1a26754" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ioref#v:atomicModifyIORef&quot;&gt;atomicModifyIORef&lt;/a&gt;&lt;/code&gt; does not apply the function strictly. This is important to know even if all you are doing is replacing the value. For example, this will leak memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910220a4bf99619613452961e0bdc476f9d31613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0767e85692cf7971c7128a051317950f4934ce8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ix#v:range&quot;&gt;range&lt;/a&gt; (l,u) &lt;a href=&quot;ghc-list#v:-33--33-&quot;&gt;!!&lt;/a&gt; &lt;a href=&quot;data-ix#v:index&quot;&gt;index&lt;/a&gt; (l,u) i == i&lt;/code&gt;, when &lt;code&gt;&lt;a href=&quot;data-ix#v:inRange&quot;&gt;inRange&lt;/a&gt; (l,u) i&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf08b6775117ab370780f3fa38a2974114429e1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74756822459bc859224ae76949ca4d8451713bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210cd952b09d40fb666c64e9889ffe2f63e9f918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-list#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8872c784d6122597f203ddf289f73e17b45998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac47277d251f5f62697c191a6f31151f02eac22c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a78ffb53dec25cd5b26be402229d91422497247" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06c0a3fece83ba56f78ea746b56887b41e3ca0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs xss&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-list#v:concat&quot;&gt;concat&lt;/a&gt; (&lt;a href=&quot;data-list#v:intersperse&quot;&gt;intersperse&lt;/a&gt; xs xss))&lt;/code&gt;. It inserts the list &lt;code&gt;xs&lt;/code&gt; in between the lists in &lt;code&gt;xss&lt;/code&gt; and concatenates the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa94079a6d414e0c1d2fbdbedec3c39781ae71c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:isSubsequenceOf&quot;&gt;isSubsequenceOf&lt;/a&gt; x y&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-list#v:elem&quot;&gt;elem&lt;/a&gt; x (&lt;a href=&quot;data-list#v:subsequences&quot;&gt;subsequences&lt;/a&gt; y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea0c7dee1646151d0c41cf7561f5599cf5879c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be77988f619aa34215190c1ce1269e29eb43ec7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; is the strict version of &lt;code&gt;&lt;a href=&quot;data-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b355bf6db9bddb3ef42dcc92acecadb62b4464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c3c526138429917d875b2ee9459d8aae6ac070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;data-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af813451fee92108450896cacd3ba43d040b727" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda93e3b54862e727a709d21bb63838307051d98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfd09366714050409a6d88c2b27dc4f007eb601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7447df1dc1e931b7aec5beeb8af2ebc65ca0b42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083fae862aceed4ce7a648fe3ae0933d70dfe52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39942b62d01cd98ef4b7a143e20d00797166b9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;data-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;data-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c35e4d5660c3e9b14cdff6f38dd2a70bf23cb1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466cc5d84ae667a0ce4b010de26dcd0964f6b445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833b596b8f1f8e4d1db0bf86d8918d3a5fc252ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2190a79520de0176952fdf49bdfd43f47d37aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;data-list#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4a5cb1dbbcdce4dfaa8d5831150a104e973434" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;data-list#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c363ff83c052f1a5fda294cf437002219baf309" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cc205824bdb63c5735dae1cb71a0d4e0ab9fd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58678d61bcb15e844547c926f2c586eeb14116c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7e3524c7b6d4f0b5d222eb042dd3e54b3295ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b350edd90b6983dc064b861394a52cbc6d0f70aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;data-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee942aefc23cf3c09c0a308b45b8c40b86ed3734" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e19f46c95897a3af5d30db0ed569e6d75608e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2f7b1856e138b6cd58236babce33ec043d03da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:cycle&quot;&gt;cycle&lt;/a&gt; xs&lt;/code&gt; returns the infinite repetition of &lt;code&gt;xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054af56edff9d20937f110f2ab9d51b9a0040c7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:drop&quot;&gt;drop&lt;/a&gt; n xs&lt;/code&gt; drops the first &lt;code&gt;n&lt;/code&gt; elements off the front of the sequence &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584327d6b02c14505b5ba028043a2580e98bace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e431f5d29be52591f9b0f25baede2048beda700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:filter&quot;&gt;filter&lt;/a&gt; p xs&lt;/code&gt; removes any elements from &lt;code&gt;xs&lt;/code&gt; that do not satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71eba07ca95b057934a7e3b90c50564141d3ba82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group1&quot;&gt;group1&lt;/a&gt;&lt;/code&gt; operates like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;, but uses the knowledge that its input is non-empty to produce guaranteed non-empty output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35615eb1cc908ec41c35802dbe3be7ae73d94f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupAllWith&quot;&gt;groupAllWith&lt;/a&gt;&lt;/code&gt; operates like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt;, but sorts the list first so that each equivalence class has, at most, one list in the output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e239517a9fe5ea1cb9170104c3d8431f12aee87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupAllWith1&quot;&gt;groupAllWith1&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith1&quot;&gt;groupWith1&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupAllWith&quot;&gt;groupAllWith&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97691675b79e2594cbfe7764e120cd20ba5ce58d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; operates like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;, but uses the provided equality predicate instead of &lt;code&gt;&lt;a href=&quot;data-eq#v:-61--61-&quot;&gt;==&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb7284e219aa035c9e6dfc373f64002dcb799b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupBy1&quot;&gt;groupBy1&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group1&quot;&gt;group1&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupBy&quot;&gt;groupBy&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35233c6d489657e293fdb9ffa426c238f04eee9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; operates like &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;, but uses the provided projection when comparing for equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b150652bfa039cb7cbac8551f8a113391218f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith1&quot;&gt;groupWith1&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group1&quot;&gt;group1&lt;/a&gt;&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:groupWith&quot;&gt;groupWith&lt;/a&gt;&lt;/code&gt; is to &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:group&quot;&gt;group&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f0c2464ce2c6c1562dacab4bbc3b28c939a742" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:insert&quot;&gt;insert&lt;/a&gt; x xs&lt;/code&gt; inserts &lt;code&gt;x&lt;/code&gt; into the last position in &lt;code&gt;xs&lt;/code&gt; where it is still less than or equal to the next element. In particular, if the list is sorted beforehand, the result will also be sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dad5c32b3e3017653d01d42887df4a7b9c12ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:iterate&quot;&gt;iterate&lt;/a&gt; f x&lt;/code&gt; produces the infinite sequence of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f96f44d2963142a21029600eb3038c18489dbd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:nonEmpty&quot;&gt;nonEmpty&lt;/a&gt;&lt;/code&gt; efficiently turns a normal list into a &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt; stream, producing &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if the input is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd15d1693ab0823fdd43a8b9040f11bd5d73ffa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:repeat&quot;&gt;repeat&lt;/a&gt; x&lt;/code&gt; returns a constant stream, where all elements are equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d3d7ca5b5b25879b4b578aa032169572f514bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt; a finite NonEmpty stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49ec9e9c616e86e9d7f6c0d3739b142a25da82b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a stream of successive reduced values from the left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c227a365ed6370eb69767b2b0a5537af15cea9df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c281c8e92c5cb31d27882f1ac940f3ec359f94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;. Note that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05394d6659db57721ced63e56767a4eb3d58188c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ce503ec823f7566d170cda10bd6082f83f458f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:some1&quot;&gt;some1&lt;/a&gt; x&lt;/code&gt; sequences &lt;code&gt;x&lt;/code&gt; one or more times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9968cda9de8e1dcf33132950a70615f3594fc75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt;, behaves the same as &lt;code&gt;&lt;a href=&quot;data-list#v:sortBy&quot;&gt;sortBy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafd464b59de1f767b81b50e03dfc7e7dba1d729" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:sortWith&quot;&gt;sortWith&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt;, behaves the same as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fe060d05959a2a7dd93da15b7b0431e9a15228" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:span&quot;&gt;span&lt;/a&gt; p xs&lt;/code&gt; returns the longest prefix of &lt;code&gt;xs&lt;/code&gt; that satisfies &lt;code&gt;p&lt;/code&gt;, together with the remainder of the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c11d64a4425643ad97e2869f0795a2189ceb65f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:splitAt&quot;&gt;splitAt&lt;/a&gt; n xs&lt;/code&gt; returns a pair consisting of the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; and the remaining stream immediately following this prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa2880890e75dc6279af041efe79530a31916d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:take&quot;&gt;take&lt;/a&gt; n xs&lt;/code&gt; returns the first &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfff5e0c1961ce72da33aacb70bc3e52b00de0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs&lt;/code&gt; returns the longest prefix of the stream &lt;code&gt;xs&lt;/code&gt; for which the predicate &lt;code&gt;p&lt;/code&gt; holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae16adbf20336b4f8d0731d0b64642a76abd6d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;data-list-nonempty#t:NonEmpty&quot;&gt;NonEmpty&lt;/a&gt;&lt;/code&gt;, behaves the same as &lt;code&gt;&lt;a href=&quot;data-list#v:transpose&quot;&gt;transpose&lt;/a&gt;&lt;/code&gt; The rows/columns need not be the same length, in which case &amp;gt; transpose . transpose /= id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72393d40baafdabb1e85c4305e84cd69b6f5e85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:uncons&quot;&gt;uncons&lt;/a&gt;&lt;/code&gt; produces the first element of the stream, and a stream of the remaining elements, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d772ed13de87ae9af2e65ec8fdf8d4ac8ca681b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-list-nonempty#v:unfold&quot;&gt;unfold&lt;/a&gt;&lt;/code&gt; produces a new stream by repeatedly applying the unfolding function to the seed value to produce an element of type &lt;code&gt;b&lt;/code&gt; and a new seed value. When the unfolding function returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; instead of a new seed value, the stream ends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f19443e8765ba74231c687d4090021e7219a2af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-lazy#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is the most general operation for working with an individual key that may or may not be in a given map. When used with trivial functors like &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/containers-0.6.2.1/Data-Map-Internal.html#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt;, it is often slightly slower than more specialized combinators like &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-lazy#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt;. However, when the functor is non-trivial and key comparison is not particularly cheap, it is the fastest way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429ed4dd642c042da53964b688f98097a1d73eea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:dropMissing&quot;&gt;dropMissing&lt;/a&gt;&lt;/code&gt; drops all the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c184b6f2a6aba47930850c16198b142c0568ecf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; does not use the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e8082e4ea4ec3d98a00b0c4747fe627af06250" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:zipWithMaybeMatched&quot;&gt;zipWithMaybeMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3f936b3f66cc055ff9f3cb9b908c2fac2ab7aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013f79227dfa20297b778672c05e0b43bd63dd8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:traverseMaybeMissing&quot;&gt;traverseMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:zipWithMaybeAMatched&quot;&gt;zipWithMaybeAMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793964e4243d7b404fc7cec82a1480ebf9992aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:preserveMissing&quot;&gt;preserveMissing&lt;/a&gt;&lt;/code&gt; leaves all the entries alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d15a27af8d72ad74218e26425c0ff8b310666c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:dropMissing&quot;&gt;dropMissing&lt;/a&gt;&lt;/code&gt; drops all the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee79e76d399e0968ddbfd51345f30450a442260e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:mapMaybeMissing&quot;&gt;mapMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:zipWithMaybeMatched&quot;&gt;zipWithMaybeMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09051217dd35d0a7762f1543822b6ef7f86d5218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:merge&quot;&gt;merge&lt;/a&gt;&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3106bb37c3e7721b8913515442f392089c68a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:mergeA&quot;&gt;mergeA&lt;/a&gt;&lt;/code&gt; takes two &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMissing&quot;&gt;WhenMissing&lt;/a&gt;&lt;/code&gt; tactics, a &lt;code&gt;&lt;a href=&quot;data-map-merge-strict#t:WhenMatched&quot;&gt;WhenMatched&lt;/a&gt;&lt;/code&gt; tactic and two maps. It uses the tactics to merge the maps. Its behavior is best understood via its fundamental tactics, &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:traverseMaybeMissing&quot;&gt;traverseMaybeMissing&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-merge-lazy#v:zipWithMaybeAMatched&quot;&gt;zipWithMaybeAMatched&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdce71467f909a0006caef007b6a4c488f00f40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:preserveMissing&quot;&gt;preserveMissing&lt;/a&gt;&lt;/code&gt; inconsistency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5305ea5f19cbe3258939a5429c4619f0ce44095c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-merge-strict#v:preserveMissing&quot;&gt;preserveMissing&lt;/a&gt;&lt;/code&gt; leaves all the entries alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039dbc286771a53e2f671d926b118226f632815e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-map-strict#v:alterF&quot;&gt;alterF&lt;/a&gt;&lt;/code&gt; is the most general operation for working with an individual key that may or may not be in a given map. When used with trivial functors like &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/containers-0.6.2.1/Data-Map-Internal.html#t:Identity&quot;&gt;Identity&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-functor-const#t:Const&quot;&gt;Const&lt;/a&gt;&lt;/code&gt;, it is often slightly slower than more specialized combinators like &lt;code&gt;&lt;a href=&quot;data-map-strict#v:lookup&quot;&gt;lookup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-map-strict#v:insert&quot;&gt;insert&lt;/a&gt;&lt;/code&gt;. However, when the functor is non-trivial and key comparison is not particularly cheap, it is the fastest way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05343277431320ef1bd18b74646a1bba1283ae83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt; a&lt;/code&gt; is isomorphic to &lt;code&gt;&lt;a href=&quot;data-monoid#t:Alt&quot;&gt;Alt&lt;/a&gt; &lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a&lt;/code&gt;, but precedes it historically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e7ab0a03c3bd6f249b097acf0e14dc54a28943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-monoid#t:Last&quot;&gt;Last&lt;/a&gt; a&lt;/code&gt; is isomorphic to &lt;code&gt;&lt;a href=&quot;data-monoid#t:Dual&quot;&gt;Dual&lt;/a&gt; (&lt;a href=&quot;data-monoid#t:First&quot;&gt;First&lt;/a&gt; a)&lt;/code&gt;, and thus to &lt;code&gt;&lt;a href=&quot;data-monoid#t:Dual&quot;&gt;Dual&lt;/a&gt; (&lt;a href=&quot;data-monoid#t:Alt&quot;&gt;Alt&lt;/a&gt; &lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt; a)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6135655f2ed4d64be31cb32841c5492efb402109" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ord#t:Ord&quot;&gt;Ord&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d84ec0f4f68b48892f925c1b4c9273bf7fe62a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-proxy#t:Proxy&quot;&gt;Proxy&lt;/a&gt;&lt;/code&gt; is a type that holds no data, but has a phantom parameter of arbitrary type (or even kind). Its use is to provide type information, even though there is no value available of that type (or it may be too costly to create one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79a8f4b37526f6439cf4cc61e020ede1b643b37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-proxy#v:asProxyTypeOf&quot;&gt;asProxyTypeOf&lt;/a&gt;&lt;/code&gt; is a type-restricted version of &lt;code&gt;&lt;a href=&quot;data-function#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;. It is usually used as an infix operator, and its typing forces its first argument (which is usually overloaded) to have the same type as the tag of the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3b1fa648ace6d53bef761e60145ede65d3b6cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ratio#v:approxRational&quot;&gt;approxRational&lt;/a&gt;&lt;/code&gt;, applied to two real fractional numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;epsilon&lt;/code&gt;, returns the simplest rational number within &lt;code&gt;epsilon&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;. A rational number &lt;code&gt;y&lt;/code&gt; is said to be &lt;em&gt;simpler&lt;/em&gt; than another &lt;code&gt;y'&lt;/code&gt; if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcf97bb565223c6eb3b9255f09be91cc447203d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-ratio#v:denominator&quot;&gt;denominator&lt;/a&gt; y &amp;lt;= &lt;a href=&quot;data-ratio#v:denominator&quot;&gt;denominator&lt;/a&gt; y'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494ad043d6868962e52a2773f2aa5a2535882016" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-semigroup#t:Arg&quot;&gt;Arg&lt;/a&gt;&lt;/code&gt; isn't itself a &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; in its own right, but it can be placed inside &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Min&quot;&gt;Min&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Max&quot;&gt;Max&lt;/a&gt;&lt;/code&gt; to compute an arg min or arg max.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a172a729ba1788b3aeb5176a5da93886becde4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-semigroup#t:Option&quot;&gt;Option&lt;/a&gt;&lt;/code&gt; is effectively &lt;code&gt;&lt;a href=&quot;data-maybe#t:Maybe&quot;&gt;Maybe&lt;/a&gt;&lt;/code&gt; with a better instance of &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;, built off of an underlying &lt;code&gt;&lt;a href=&quot;data-semigroup#t:Semigroup&quot;&gt;Semigroup&lt;/a&gt;&lt;/code&gt; instead of an underlying &lt;code&gt;&lt;a href=&quot;data-monoid#t:Monoid&quot;&gt;Monoid&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca66035d14498dff127111ab13edf2f86047cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:breakl&quot;&gt;breakl&lt;/a&gt; p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanl&quot;&gt;spanl&lt;/a&gt; (not . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8caccf3a1775fed521dc05355f03674544d090a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:breakr&quot;&gt;breakr&lt;/a&gt; p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:spanr&quot;&gt;spanr&lt;/a&gt; (not . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcacd5db44abf09d0a398b9275ce2e7be37d4dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:dropWhileR&quot;&gt;dropWhileR&lt;/a&gt; p xs&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:reverse&quot;&gt;reverse&lt;/a&gt; (&lt;a href=&quot;data-sequence#v:dropWhileL&quot;&gt;dropWhileL&lt;/a&gt; p (&lt;a href=&quot;data-sequence#v:reverse&quot;&gt;reverse&lt;/a&gt; xs))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349549513fa6e9a97510a4275de631ceeb9ba95b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:elemIndexL&quot;&gt;elemIndexL&lt;/a&gt;&lt;/code&gt; finds the leftmost index of the specified element, if it is present, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d0d95868c96af6e27bcc9a9570707b0dbe5779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:elemIndexR&quot;&gt;elemIndexR&lt;/a&gt;&lt;/code&gt; finds the rightmost index of the specified element, if it is present, and otherwise &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061c4174b412d693dcfc45ad346e8e75d113372b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:elemIndicesL&quot;&gt;elemIndicesL&lt;/a&gt;&lt;/code&gt; finds the indices of the specified element, from left to right (i.e. in ascending order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76efe3cf412c604fb24f66dd2ff0725296c8be3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:elemIndicesR&quot;&gt;elemIndicesR&lt;/a&gt;&lt;/code&gt; finds the indices of the specified element, from right to left (i.e. in descending order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62adb3cdaec36b26dbe66c755e69747f56a2bb08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:findIndexL&quot;&gt;findIndexL&lt;/a&gt; p xs&lt;/code&gt; finds the index of the leftmost element that satisfies &lt;code&gt;p&lt;/code&gt;, if any exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea02d02ac5428cd396fc026379247aa243b8682" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:findIndexR&quot;&gt;findIndexR&lt;/a&gt; p xs&lt;/code&gt; finds the index of the rightmost element that satisfies &lt;code&gt;p&lt;/code&gt;, if any exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9279c9214a03e64428bb02c5943066d81d1abcc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:findIndicesL&quot;&gt;findIndicesL&lt;/a&gt; p&lt;/code&gt; finds all indices of elements that satisfy &lt;code&gt;p&lt;/code&gt;, in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e7261cd25b3d825e8fdce65620db0c440b194d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:findIndicesR&quot;&gt;findIndicesR&lt;/a&gt; p&lt;/code&gt; finds all indices of elements that satisfy &lt;code&gt;p&lt;/code&gt;, in descending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f64face9d076d01d64b8a54df12491cc3e7d3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:foldlWithIndex&quot;&gt;foldlWithIndex&lt;/a&gt;&lt;/code&gt; is a version of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that also provides access to the index of each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96009108889952d16914b9ab7ccdb823f360a66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:foldrWithIndex&quot;&gt;foldrWithIndex&lt;/a&gt;&lt;/code&gt; is a version of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that also provides access to the index of each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4db6ab233b28447dd68b4c782c2ae20cbe02fce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:fromFunction&quot;&gt;fromFunction&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:intersperse&quot;&gt;intersperse&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;data-sequence#v:cycleTaking&quot;&gt;cycleTaking&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc238de9d9d47fc4e5fa2aa4d2033667cd7f02b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:inits&quot;&gt;inits&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;data-sequence#v:tails&quot;&gt;tails&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b9543c71540293f3ba846ef7b16bd03296fda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:replicateA&quot;&gt;replicateA&lt;/a&gt;&lt;/code&gt; is an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#t:Applicative&quot;&gt;Applicative&lt;/a&gt;&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;data-sequence#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;, and makes \( O(\log n) \) calls to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:liftA2&quot;&gt;liftA2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-applicative#v:pure&quot;&gt;pure&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68643ac47486e773c84168944b45f31691ec1371" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt; is a sequence counterpart of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:replicateM&quot;&gt;replicateM&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054a7ca578764ac27c8ffd1aa457876e90476850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; is similar to &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, but returns a sequence of reduced values from the left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14fb9573b4bd472b455f2e5e149321aca041d35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:scanl1&quot;&gt;scanl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-sequence#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt; that has no starting value argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2391c9de1ef61ba5444f9c5f78a01c0b1ea066f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; is the right-to-left dual of &lt;code&gt;&lt;a href=&quot;data-sequence#v:scanl&quot;&gt;scanl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecf7b887bfa3e2a7cfbdeb00889eb6d41cfe5ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:scanr1&quot;&gt;scanr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;data-sequence#v:scanr&quot;&gt;scanr&lt;/a&gt;&lt;/code&gt; that has no starting value argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de41aee0a3a6df5296ef619f27fac555f8859179" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:takeWhileR&quot;&gt;takeWhileR&lt;/a&gt; p xs&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:reverse&quot;&gt;reverse&lt;/a&gt; (&lt;a href=&quot;data-sequence#v:takeWhileL&quot;&gt;takeWhileL&lt;/a&gt; p (&lt;a href=&quot;data-sequence#v:reverse&quot;&gt;reverse&lt;/a&gt; xs))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba12c6568bcc79d6937e06fa90d530b2ff5adcbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:traverseWithIndex&quot;&gt;traverseWithIndex&lt;/a&gt;&lt;/code&gt; is a version of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; that also offers access to the index of each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b95f1dbacdc04439227115b9f4757db6b5aa836" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence#v:unfoldl&quot;&gt;unfoldl&lt;/a&gt; f x&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;data-sequence#v:reverse&quot;&gt;reverse&lt;/a&gt; (&lt;a href=&quot;data-sequence#v:unfoldr&quot;&gt;unfoldr&lt;/a&gt; (&lt;a href=&quot;../base-4.13.0.0/data-functor#v:fmap&quot;&gt;fmap&lt;/a&gt; swap . f) x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7a51c6fd275d001537d03bea729af274e113b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:mergeIQ&quot;&gt;mergeIQ&lt;/a&gt;&lt;/code&gt; merges two &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#t:IndexedQueue&quot;&gt;IndexedQueue&lt;/a&gt;&lt;/code&gt;s, taking into account the original position of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e3eecfe9a58cf32d6258380ce6d3ecb89a8837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:mergeITQ&quot;&gt;mergeITQ&lt;/a&gt;&lt;/code&gt; merges two &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#t:IndexedTaggedQueue&quot;&gt;IndexedTaggedQueue&lt;/a&gt;&lt;/code&gt;s, based on the tag value, taking into account the original position of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4a1b58344038614face687cc10d222f6eb5e5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:mergeQ&quot;&gt;mergeQ&lt;/a&gt;&lt;/code&gt; merges two &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#t:Queue&quot;&gt;Queue&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadfd2f5a60225cf2b4b2522a244deea77577331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#v:mergeTQ&quot;&gt;mergeTQ&lt;/a&gt;&lt;/code&gt; merges two &lt;code&gt;&lt;a href=&quot;data-sequence-internal-sorting#t:TaggedQueue&quot;&gt;TaggedQueue&lt;/a&gt;&lt;/code&gt;s, based on the tag value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389439fa053a85ce69e40e0adcb65eaf2ceac3a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-set#v:mapMonotonic&quot;&gt;mapMonotonic&lt;/a&gt; f s == &lt;a href=&quot;data-set#v:map&quot;&gt;map&lt;/a&gt; f s&lt;/code&gt;, but works only when &lt;code&gt;f&lt;/code&gt; is strictly increasing. &lt;em&gt;The precondition is not checked.&lt;/em&gt; Semi-formally, we have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4501fd973aa63bdd700bbf1dea84ac185fe54b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-string#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338f0b65219243f996d4bd0a9df7839ef28540da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-string#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;data-string#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15579fcea85a7ce171343c2db61ceebf2ba06fc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-string#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;data-string#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf9d8612f422a3804220034c29ed3447bc56b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-string#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da7f5dd24b977f3e8d3da7980b697bc40240950" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-encoding#v:decodeLatin1&quot;&gt;decodeLatin1&lt;/a&gt;&lt;/code&gt; is semantically equivalent to &lt;code&gt;Data.Text.pack . Data.ByteString.Char8.unpack&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5210c279f2048323795906a4d0d43dc5d4273ac4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539da5209b7a20f470b14e79366f65b244d088f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a stream, reduces the stream using the binary operator, from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d197d08dbdd44037e2bd5a659b157af2a664c3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-internal-fusion-common#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a stream, returns the longest prefix (possibly empty) of elements that satisfy &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d31f65b4e2ca1004f666bfa0e541865796fb44f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite, non-empty &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; into a circular one, or equivalently, the infinite repetition of the original &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089e0f9b13fe124baa9f8fda724f4357a753ff47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:iterate&quot;&gt;iterate&lt;/a&gt; f x&lt;/code&gt; returns an infinite &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt; of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c1e290e2545227a128295edcd8bbf2ff598503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-text-lazy#v:repeat&quot;&gt;repeat&lt;/a&gt; x&lt;/code&gt; is an infinite &lt;code&gt;&lt;a href=&quot;data-text-lazy#t:Text&quot;&gt;Text&lt;/a&gt;&lt;/code&gt;, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203e04e7646f439ab01ff7c92d4ec3efdae219c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-time-clock-system#t:SystemTime&quot;&gt;SystemTime&lt;/a&gt;&lt;/code&gt; is time returned by system clock functions. Its semantics depends on the clock function, but the epoch is typically the beginning of 1970. Note that &lt;code&gt;&lt;a href=&quot;data-time-clock-system#v:systemNanoseconds&quot;&gt;systemNanoseconds&lt;/a&gt;&lt;/code&gt; of 1E9 to 2E9-1 can be used to represent leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e65df23d7b285300818c83d4a41208886c38a96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-time-format#v:knownTimeZones&quot;&gt;knownTimeZones&lt;/a&gt;&lt;/code&gt; contains only the ten time-zones mentioned in RFC 822 sec. 5: &quot;UT&quot;, &quot;GMT&quot;, &quot;EST&quot;, &quot;EDT&quot;, &quot;CST&quot;, &quot;CDT&quot;, &quot;MST&quot;, &quot;MDT&quot;, &quot;PST&quot;, &quot;PDT&quot;. Note that the parsing functions will regardless parse &quot;UTC&quot;, single-letter military time-zones, and +HHMM format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaa4a3ebeda8675079818e26bd2cc5130b40e08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe4245503f49fc7bbf513317fda1b499e1646a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-traversable#v:forM&quot;&gt;forM&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;data-traversable#v:mapM&quot;&gt;mapM&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;data-foldable#v:forM_&quot;&gt;forM_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c51fb3deb885bf0df875c455b03d4ffcd0ab7e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-tuple#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; converts an uncurried function to a curried function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4825b3755accbb0d41237e97ab94b7a36428ba32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-tuple#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; converts a curried function to a function on pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ea250d7a3dff5ce82f8a8f0afeb370fe8abfa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;data-typeable#t:Proxy&quot;&gt;Proxy&lt;/a&gt;&lt;/code&gt; is a type that holds no data, but has a phantom parameter of arbitrary type (or even kind). Its use is to provide type information, even though there is no value available of that type (or it may be too costly to create one).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ba92390d73bc2a9127ace548e08aedddbc6ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f380e7567ff4ca778862a3861f8a67c77e3a1970" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-foreignptr-safe#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d370aae332cc82e1aa3e0ed85ed16e403d22b193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory sufficient to hold values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b5bfddf16c1319601903a5477a3f8e7ff255d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory of &lt;code&gt;n&lt;/code&gt; bytes. The block of memory is sufficiently aligned for any of the basic foreign types that fits into a memory block of the allocated size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c935d212124073d935f23b9d558ad1b8e217ad39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-marshal-utils#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory into which &lt;code&gt;val&lt;/code&gt; has been marshalled (the combination of &lt;code&gt;&lt;a href=&quot;foreign-marshal-alloc#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;foreign-storable#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1759923536bb28cb8e4c6954e3270de3e9c724ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-storable#v:alignment&quot;&gt;alignment&lt;/a&gt; (&lt;a href=&quot;prelude#v:undefined&quot;&gt;undefined&lt;/a&gt; :: CT)&lt;/code&gt; matches the alignment constraint enforced by the C implementation for &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840991abba1942f24f5480bb6d2c0ca9d4f60b18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;foreign-storable#v:sizeOf&quot;&gt;sizeOf&lt;/a&gt; (&lt;a href=&quot;prelude#v:undefined&quot;&gt;undefined&lt;/a&gt; :: CT)&lt;/code&gt; will yield the same value as &lt;code&gt;sizeof (t)&lt;/code&gt; in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adb7a338cc831fb14e8c3be02388b83427bd8de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-arr#v:accum&quot;&gt;accum&lt;/a&gt; f&lt;/code&gt; takes an array and an association list and accumulates pairs from the list into the array with the accumulating function &lt;code&gt;f&lt;/code&gt;. Thus &lt;code&gt;&lt;a href=&quot;ghc-arr#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; can be defined using &lt;code&gt;&lt;a href=&quot;ghc-arr#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d859ae1e1f8967212796be0cb2c4140a98966f92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-arr#v:ixmap&quot;&gt;ixmap&lt;/a&gt;&lt;/code&gt; allows for transformations on array indices. It may be thought of as providing function composition on the right with the mapping that the original array embodies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efc13485e08a7dccc198526097948778c8fcb96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-arr#v:range&quot;&gt;range&lt;/a&gt; (l,u) &lt;a href=&quot;ghc-list#v:-33--33-&quot;&gt;!!&lt;/a&gt; &lt;a href=&quot;ghc-arr#v:index&quot;&gt;index&lt;/a&gt; (l,u) i == i&lt;/code&gt;, when &lt;code&gt;&lt;a href=&quot;ghc-arr#v:inRange&quot;&gt;inRange&lt;/a&gt; (l,u) i&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00df7ae954477de9252212698ce145cee5485760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; is a type-restricted version of &lt;code&gt;&lt;a href=&quot;ghc-base#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;. It is usually used as an infix operator, and its typing forces its first argument (which is usually overloaded) to have the same type as the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b5934ffbeb247bfa7e82a12dbc868c719945d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; takes its (first) two arguments in the reverse order of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bb7a86450066d21b2830c2400ba41f06589c5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421bab1454071991b4e996e24c51a81910a8a1ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:mapM&quot;&gt;mapM&lt;/a&gt; f&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;ghc-base#v:sequence&quot;&gt;sequence&lt;/a&gt; . &lt;a href=&quot;ghc-base#v:map&quot;&gt;map&lt;/a&gt; f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d72501241ba806f5d1249d29edf7f40459b3ada" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; is defined as the value &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;. It helps to make guards more readable. eg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2863abaa9408ebe6cb47205fd5c42baf42648542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-base#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; yields the result of applying &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;p&lt;/code&gt; holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfeddc7e083d97c7411dff14f9a8b43eed63a8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc#v:catchSTM&quot;&gt;catchSTM&lt;/a&gt; m f&lt;/code&gt; catches any exception thrown by &lt;code&gt;m&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt;, using the function &lt;code&gt;f&lt;/code&gt; to handle the exception. If an exception is thrown, any changes made by &lt;code&gt;m&lt;/code&gt; are rolled back, but changes prior to &lt;code&gt;m&lt;/code&gt; persist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5635e16042f53942b929e63bf938df55eb4e00ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c76e2c08727a1f1a64cad6cc93ac6aca1b22807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; stores a string as identifier for this thread if you built a RTS with debugging support. This identifier will be used in the debugging output to make distinction of different threads easier (otherwise you only have the thread state object's address in the heap).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9bd6c00e06304b1874cac076433b3688b996db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; raises an arbitrary exception in the target thread (GHC only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7944dcad379f05654498cb9c0209cb19ebfc9e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:catchSTM&quot;&gt;catchSTM&lt;/a&gt; m f&lt;/code&gt; catches any exception thrown by &lt;code&gt;m&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwSTM&quot;&gt;throwSTM&lt;/a&gt;&lt;/code&gt;, using the function &lt;code&gt;f&lt;/code&gt; to handle the exception. If an exception is thrown, any changes made by &lt;code&gt;m&lt;/code&gt; are rolled back, but changes prior to &lt;code&gt;m&lt;/code&gt; persist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19ecb16622dfbe6b11da075e3d675c735b8287e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29156d19180fb72a2c72ccac69a1c12ea56de3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:labelThread&quot;&gt;labelThread&lt;/a&gt;&lt;/code&gt; stores a string as identifier for this thread if you built a RTS with debugging support. This identifier will be used in the debugging output to make distinction of different threads easier (otherwise you only have the thread state object's address in the heap).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd5026d31375f275b8d3d71ee9b5459e6f4b3d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:throwTo&quot;&gt;throwTo&lt;/a&gt;&lt;/code&gt; raises an arbitrary exception in the target thread (GHC only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d179add2b633c0f6ab44596c9cfd1f96b989f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-enum#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-enum#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; should be defined with an implicit bound, thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c0f5b014335b37ddeff4f326bc86ae94f479d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-enum#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-enum#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; should give a runtime error if the result value is not representable in the result type. For example, &lt;code&gt;&lt;a href=&quot;ghc-enum#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;data-bool#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21122f735c22d761c15a9a21d4d24b96f47dd4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-err#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; stops execution and displays an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fec0a7d5c442e811a1ce3be394c7f30e3e3c4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b11f068788df264879a0d84b77ca4fa65b8877" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-exception#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8a54bf3d2d5478e8c21a4965d26ae6feea749c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-exts#v:oneShot&quot;&gt;oneShot&lt;/a&gt;&lt;/code&gt; is representation polymorphic: the type variables may refer to lifted or unlifted types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6ca8f750423e03405e4ddbabb60b9288c08157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-exts#v:the&quot;&gt;the&lt;/a&gt;&lt;/code&gt; ensures that all the elements of the list are identical and then returns that unique element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d7a92981e2dc7e8c3f5d6254414c523ce2fb9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:castFloatToWord32&quot;&gt;castFloatToWord32&lt;/a&gt; f&lt;/code&gt; does a bit-for-bit copy from a floating-point value to an integral value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f3672afd528edc6c7afcad2d27f40c090018bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:castWord32ToFloat&quot;&gt;castWord32ToFloat&lt;/a&gt; w&lt;/code&gt; does a bit-for-bit copy from an integral value to a floating-point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca4e8815846962386a6cf78fe70c0a50e215597" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:castWord64ToDouble&quot;&gt;castWord64ToDouble&lt;/a&gt; w&lt;/code&gt; does a bit-for-bit copy from an integral value to a floating-point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7fab245fee0faddfb7cb21095450e02d876c9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; performs the inverse of &lt;code&gt;&lt;a href=&quot;ghc-float#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; in the sense that for finite &lt;code&gt;x&lt;/code&gt; with the exception of &lt;code&gt;-0.0&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;ghc-float#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;ghc-float#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-float#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; is one of the two closest representable floating-point numbers to &lt;code&gt;m*b^^n&lt;/code&gt; (or &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; if overflow occurs); usually the closer, but if &lt;code&gt;m&lt;/code&gt; contains too many bits, the result may be rounded in the wrong direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66387ccac62472faf7c3632e9f5350c41f7bf4da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;ghc-float#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8372cfeae719833ae34de678677073860c90affe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; corresponds to the second component of &lt;code&gt;&lt;a href=&quot;ghc-float#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-float#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; and for finite nonzero &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-float#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;ghc-float#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;ghc-float#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is a finite floating-point number, it is equal in value to &lt;code&gt;&lt;a href=&quot;ghc-float#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;ghc-float#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt;, where &lt;code&gt;b&lt;/code&gt; is the floating-point radix. The behaviour is unspecified on infinite or &lt;code&gt;NaN&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aede196738b3a4593c59cd0683cfd291c731a22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; takes a base and a non-negative &lt;code&gt;&lt;a href=&quot;ghc-float#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; number, and returns a list of digits and an exponent. In particular, if &lt;code&gt;x&amp;gt;=0&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355e8543305c96266a67afc57efcb6b259268eca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;ghc-float#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;ghc-float#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06041194ada4a908986816bbff19c95d6ded526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;ghc-float#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c18ea350b6260593eb8f1595839529d6661d6ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-float#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;ghc-float#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;ghc-float#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1739e79eaa88f577671c542e8aa936f1a9eaeb70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-foreignptr#v:mallocForeignPtr&quot;&gt;mallocForeignPtr&lt;/a&gt;&lt;/code&gt; is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b03d5c8288cd8170b8fc90dd354e0868331fd68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-integer-gmp-internals#t:Integer&quot;&gt;Integer&lt;/a&gt;&lt;/code&gt; for which only &lt;em&gt;n&lt;/em&gt;-th bit is set. Undefined behaviour for negative &lt;em&gt;n&lt;/em&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f970033cce52342d4d8c0129e7064ebd30af2324" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66bd1c0a9a631bb529870b9b59cb564cfef574f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; is typically used to uncover any exceptions that a lazy value may contain, and possibly handle them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f96e8297888f4c8cb6d6026f6a35358c46d796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io#v:evaluate&quot;&gt;evaluate&lt;/a&gt;&lt;/code&gt; only evaluates to &lt;em&gt;weak head normal form&lt;/em&gt;. If deeper evaluation is needed, the &lt;code&gt;force&lt;/code&gt; function from &lt;code&gt;Control.DeepSeq&lt;/code&gt; may be handy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116ec0fe55e8a757ceb15f43bd0fa2050c4526aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafeDupableInterleaveIO&quot;&gt;unsafeDupableInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494cc332291310179e2975709d8c88cef5c103a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c06be92bbf38d1cfa44849b676d89a93a1f4b97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-exception#v:ResourceVanished&quot;&gt;ResourceVanished&lt;/a&gt;&lt;/code&gt; if the handle is a pipe or socket, and the reading end is closed. (If this is a POSIX system, and the program has not asked to ignore SIGPIPE, then a SIGPIPE may be delivered instead, whose default action is to terminate the program).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce50c13fb1a1136000d974e9cc4493060de8a385" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4706f00e9d226ab177ee1df387b12eedfabe1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79989340f73ef6b73a4a5cde8b93048d012a4b1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed86d9bc28a698e12be5abb17db9e7f612a25e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd4a53f6437f9d0725aebbeb0384ac93d23343d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ebea4e3a09186bbe7167d238194af736b29fdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccf6f7dd805bc0c12ebc044d3d369fc5a7a12b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfb6c021bfac087b9c96c06f48939dd8c361aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9258862ce9f1a9933b92ddf9b1d9d2f18a73c4c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4dc99a653b44c373451a82441234ea2af3e4a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; may need to flush buffered data in order to change the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758453f292a1bc331974aee59776adf0d5a5edf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; truncates the physical file with handle &lt;code&gt;hdl&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36b65e511253e3d033408247e4fa325e5ae3a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad, and gives more comprehensive output than the (pure) instance of &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2b92ce8d23599bea2516993e5dbe37888912d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe87b19d9e6f8769238851f3e7af9644a5e24ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c70313e9e1c4c08fa152b5d6ddb6d81984c313f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47efae207f2d69e8afb3b2c31e0e6c287fa4931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf74d5b0617474e1979d9aca9cad61c7fccce397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7041975b55bc2c0a58f2acc2e167c0f3c333b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c05363a86ed4b4209f87b96dd1ac90748a8b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128ffa636231d59898b0936d59913edcbfdfb97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3e4bb2613c2387dc097154e93c221b936f32cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt;. If there is any data available to read, then &lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; returns it immediately; it only blocks if there is no data to be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e69c3ad885c4a35a35a3b1be1a6cba549c12772" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dc59680c7f6bb4bdd5385367eb8538bf70d97c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;ghc-io-handle#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fe23129403af9cc61e0ccfe3894fce89faaedd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-handle-text#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cae9e28bf8f7e443c79fb2d9e2286cab0a47437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeDupableInterleaveIO&quot;&gt;unsafeDupableInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9b14d5e8df36dce195f7980e9dbc7fc64eed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ff939a7c655e40f252ea2a1fdf65e215f1e609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730ca4b7e7275ef9d1e96efbe04d42630082f29c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c28c67953f6b715e1894eff4607f9eccef2c735" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124dcdaa10b0ebef8bc6a8625440c8d4bd3ca1fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb3707b27bc7936c7d8943822fa2d99435b6995" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc7768763cbae8d5654c35a88a6c69b3585f871" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a1094e0d73152ec3d048877a7d9d4413b830b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the list membership predicate, usually written in infix form, e.g., &lt;code&gt;x `elem` xs&lt;/code&gt;. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from an element equal to &lt;code&gt;x&lt;/code&gt; found at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd587787d42bd8ca7c94bf6bff4fe23e922896b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308eb7da1cef17bc9ce1ea7005628690c47f1de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddb4a8ceae0a66226783c02cd43b0ae1bdc9502" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6014a31a38fe5b6e5e38931269202310381a6b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-list#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715d39b0ff885f6988c0a2a054ea0418da8baa14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c196c56ceab029291efacfab9fcb76cae8d82bd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; is the strict version of &lt;code&gt;&lt;a href=&quot;ghc-list#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe67506166938e7aecccf91d6dacbcebddea684" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab899ccb74911194bc0a36f649dd833fed41899d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d7787ebb380bc1b96eea72666d3c7fb09c1fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;ghc-list#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4cbfdc0ab989ac8a97a13d0b822efc2880bb2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0644636df8cd78b43e909330866bf2fc7a1332f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f16a21b88ce11f01110656453d9e5ca17ded48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3ea283727763eb521eacf3475eb243d7fc80c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f2fd2116d78d9c7d6f5ea32f6d049ad0d24135" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5614c2d7768cf34ead9c78f699a1a2ac6ca4129e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-list#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd60ec9080c776a697617229269dbf5d665bebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb293e6998cc31fa897cbea745221011fb65dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35961b7b3bb0ba89dd8d90255d0b44b66b7bbe9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c507fb664e824b1b2b5b97d504e8eadf8522670b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0a3cd7752a8faf44ddf8e4f3ae87c49f6fba6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a86655e8615dd5c7df5069eacbc9a824510fc78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4341238ba246513d0d76e699d4e0c53a9971f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-list#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafdec54231c6ac532d9ab6d6ed23e90c8b52131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c34ba7dbeeca331c8c5c40b90d132b644fa326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-list#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9770e7e6a31badc0fd83a36d4dac4d34fde31ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6605cc8aa1dd4380ed5f686cb15ea7e5556c7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e37f43479bb93d6474577033bd649c009b9af1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;ghc-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;ghc-mvar#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3360ac613b6939a0c4153bf08ef3debedbc4f26d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; Addition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84e5de112b7d0a3ff2ad89b54b58dcc13c4819c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; multiplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6b4deddb46310d3de232e589dee823e4c35bfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; subtraction. May &lt;code&gt;&lt;a href=&quot;control-exception#v:throw&quot;&gt;throw&lt;/a&gt;
&lt;a href=&quot;control-exception#v:Underflow&quot;&gt;Underflow&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cb3bbdce439f134b8a30a9df09a5c492a3384d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-natural#t:Natural&quot;&gt;Natural&lt;/a&gt;&lt;/code&gt; subtraction. Returns &lt;code&gt;&lt;a href=&quot;data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;s for non-positive results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9bdbe865727346833837579264fd68e6849372" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f1b0fd79abca30b3e13000f72f034498252b54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78655fa3b81cee82b34334bd0ee86d51c454325" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;data-bool#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9762ea602021c138997b18bfd3007c3d576930a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074dc89a2a81b639143b0ca7af4d6716fc72b760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4b9ddcc87f0dae1d2837a5909a400d7754df58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddf6879dc1e7153c478bb7419886be34c97a639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt; is the list membership predicate, usually written in infix form, e.g., &lt;code&gt;x `elem` xs&lt;/code&gt;. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from an element equal to &lt;code&gt;x&lt;/code&gt; found at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9d40fe0905a10ed1d6facb3d27ae9defa449d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the left-identity of the operator), and a list, reduces the list using the binary operator, from left to right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916c6220f765b3e109e83387aa8e247db20cccfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl1&quot;&gt;foldl1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldl&quot;&gt;foldl&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b199b16ada99235883951d2d68955839142a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt;, applied to a binary operator, a starting value (typically the right-identity of the operator), and a list, reduces the list using the binary operator, from right to left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beac374c835fe87254ca862fa5b06447471c7a5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr1&quot;&gt;foldr1&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:foldr&quot;&gt;foldr&lt;/a&gt;&lt;/code&gt; that has no starting value argument, and thus must be applied to non-empty lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0287222812e6dc5bec2c145ad192c83ca9041d4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:intercalate&quot;&gt;intercalate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs xss&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:concat&quot;&gt;concat&lt;/a&gt; (&lt;a href=&quot;ghc-oldlist#v:intersperse&quot;&gt;intersperse&lt;/a&gt; xs xss))&lt;/code&gt;. It inserts the list &lt;code&gt;xs&lt;/code&gt; in between the lists in &lt;code&gt;xss&lt;/code&gt; and concatenates the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c30d7393da22016a45414eb2ee806c0e8a9b364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c431feab47e595bc7144a888a3fad5807053508" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate-39-&quot;&gt;iterate'&lt;/a&gt;&lt;/code&gt; is the strict version of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d3235657a416a08470e9737648f234dc9b564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d257a40bab1ece98bfd0554292505ad0b8197913" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:maximum&quot;&gt;maximum&lt;/a&gt;&lt;/code&gt; returns the maximum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:maximumBy&quot;&gt;maximumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b409d587004226531c4c952954bf3a65187c828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:minimum&quot;&gt;minimum&lt;/a&gt;&lt;/code&gt; returns the minimum value from a list, which must be non-empty, finite, and of an ordered type. It is a special case of &lt;code&gt;&lt;a href=&quot;data-list#v:minimumBy&quot;&gt;minimumBy&lt;/a&gt;&lt;/code&gt;, which allows the programmer to supply their own comparison function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f4ff7773a89ae60de1da2aac827c2152bcd23c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5918c8d1b197ed3a0becf2b7ca664b38cc19f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a Boolean list. For the result to be &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the list must be finite; &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value at a finite index of a finite or infinite list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a677af46f3e047946923afd966e750559d7d679a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255b893eabb96daf6eb78db66aa3d00d0aacdcd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67f8631f7545bf0267d1a9d6bde0113e4bd6401" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62d4347f16c1bd4b0511872d22b982a5a62c665" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6be4a3e987c474d875791b91a20621fb5f5954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;ghc-oldlist#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd2175a54ef8e7543543661ef61e6630901d48d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a431017754ad67adc003f8933b8daf88f503298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-oldlist#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9416f8ab38a6a456ce2ab46b5cb5ee0a714c32f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3260bd80e445c70ebee8ef36bb94699933245d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c343661c4c5b2ba3867b786e6ec22fcd23bab38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15cac96c59f8fe5a7d26cbe12b261e69528ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fad57b58ceda8fc2c35e80ccbbf130647310a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcdc3bff0e3d396c9659b6e0817fd3ca5435c91f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c74902e41e6a90fe42cbdb4a15b17aa3612718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dc5d2945ebc8477d5418718b41eff26f59f736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5704149f69dc4d065be3de2c92a9bfd3b028b253" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3067983166d12ffd7099880da0207ed3c82c3b10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-oldlist#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8a40cd1a39553a12b4e46d896437e11f11ae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName#=value&lt;/code&gt;. That is, an alphanumeric identifier &lt;code&gt;fieldName&lt;/code&gt; followed by the symbol &lt;code&gt;#&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5a5faeb26de5b3c48d6dd9e8be5375ec884457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a record field, of the form &lt;code&gt;fieldName=value&lt;/code&gt;. The &lt;code&gt;fieldName&lt;/code&gt; must be an alphanumeric identifier; for symbols (operator-style) field names, e.g. &lt;code&gt;(#)&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readSymField&quot;&gt;readSymField&lt;/a&gt;&lt;/code&gt;). The second argument is a parser for the field value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da2aac9b80108a5b3b6a34b0e30c108d0d00cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#t:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; parser for a symbol record field, of the form &lt;code&gt;(###)=value&lt;/code&gt; (where &lt;code&gt;###&lt;/code&gt; is the field name). The field name must be a symbol (operator-style), e.g. &lt;code&gt;(#)&lt;/code&gt;. For regular (alphanumeric) field names, use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readField&quot;&gt;readField&lt;/a&gt;&lt;/code&gt;. The second argument is a parser for the field value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1e4a49a842bcc7357116b4bcaf1dbd3fe4f53e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bae4abccfaabf546f2e1228b2518d60b461a6ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567d3f90c45d29b23b2c186f5f5cc356673aa5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;ghc-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;ghc-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;ghc-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f818d33f49c36e5bd08eeae556f19678592545d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c50aa2a62a618744936a20658cca1344b434a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319a905d94ae2e8f071c1798237712390429f2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;ghc-real#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92565e2a3dec9cdb3459eed5d5f0d227e08643d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb83bf837be47ed6a65ffe14ae13c31a18082e8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:reduce&quot;&gt;reduce&lt;/a&gt;&lt;/code&gt; is a subsidiary function used only in this module. It normalises a ratio by dividing both numerator and denominator by their greatest common divisor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9dd499cd9c9b751c0fca50154687b004edfff3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18f58d80977e91ef26ad42b2e08deecc2d7820e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-real#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18b7e588038bb2313fb65fa5f5ae38b5e024f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-rts-flags#t:RtsTime&quot;&gt;RtsTime&lt;/a&gt;&lt;/code&gt; is defined as a &lt;code&gt;StgWord64&lt;/code&gt; in &lt;code&gt;stg/Types.h&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3914e0bcc8d1236c512d64770c07549eca388052" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc45df7c2d0510c8aff5c5b3a84ba902911f4890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb99f6e79be6e92cc4c84aa3ae6ef2cf6ebfb21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeDupableInterleaveST&quot;&gt;unsafeDupableInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7912136bfe56b731805d99e4b630da55cbd9f2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-st#v:unsafeInterleaveST&quot;&gt;unsafeInterleaveST&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;ST a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;ghc-st#t:ST&quot;&gt;ST&lt;/a&gt;&lt;/code&gt; computation will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c9af8fda41ef6eb26ff7db581519d20c9414c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed0ecabea47e9d304fac4c13dc87e914b8dc670" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b54b6378609adfef6bcc92559ed48934566d6dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s are a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccdf2703d063754e5da79d77d000c1e4a8bdf62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:CallStack&quot;&gt;CallStack&lt;/a&gt;&lt;/code&gt;s do not interact with the RTS and do not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as they are built up explicitly via the &lt;code&gt;&lt;a href=&quot;ghc-stack-types#t:HasCallStack&quot;&gt;HasCallStack&lt;/a&gt;&lt;/code&gt; constraints, they will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b4a0b3ee1f7074fdbceb2404e3c332a0581142" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtrInfo&quot;&gt;StaticPtrInfo&lt;/a&gt;&lt;/code&gt; of the given &lt;code&gt;&lt;a href=&quot;ghc-staticptr#t:StaticPtr&quot;&gt;StaticPtr&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf127c76c486df4dbaba4066f38234d89487977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runIO&quot;&gt;runIO&lt;/a&gt;&lt;/code&gt; is wrapped around every &lt;code&gt;foreign export&lt;/code&gt; and &lt;code&gt;foreign
 import &quot;wrapper&quot;&lt;/code&gt; to mop up any uncaught exceptions. Thus, the result of running &lt;code&gt;&lt;a href=&quot;system-exit#v:exitWith&quot;&gt;exitWith&lt;/a&gt;&lt;/code&gt; in a foreign-exported function is the same as in the main thread: it terminates the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e2557cd44bda005fab1056fa2bf589342d1921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;ghc-tophandler#v:runMainIO&quot;&gt;runMainIO&lt;/a&gt;&lt;/code&gt; is wrapped around &lt;code&gt;&lt;a href=&quot;main#v:main&quot;&gt;main&lt;/a&gt;&lt;/code&gt; (or whatever main is called in the program). It catches otherwise uncaught exceptions, and also flushes stdout/stderr before exiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c74eaff2600683318703906e8744a1545ee71d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.6.1/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt; size is an exact multiple of &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.6.1/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:Word-35-&quot;&gt;Word#&lt;/a&gt;&lt;/code&gt; size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e33df6a525249c18105a29a873ed6404b98744d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:assert&quot;&gt;assert&lt;/a&gt;&lt;/code&gt; was applied to &lt;code&gt;&lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfa58e5846605bc97f27d46b944d2cffadf6d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bd31aaac16d5e33d0f79df81ab94bfb8d25b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e0fef24bf5f2a737953d8e70adf7276053b2a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8654d746f2c60644b5d2281313083cc9a1aa53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c7ba6a896ef8663fc06d9c179a38c6ce1844ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbce836ad277a603ffcf7c220b9f06cb8eab87f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c56cad08125fd33a494fa84bec89a27cd88b90a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4147d27888b89b2c78b46305d524b8aa858515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232001b6fbae38e36c1cd90a7584f019a4964b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc83d1bc9715c0147848c379b12c8b18d57a5085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a796695d16121f87b865283cf6538c18e0ac6eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9649b818454081f402bceec28a692626aec7dcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9999bf12ab30c952de4581c3e5219fe3da4a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#v:quoteFile&quot;&gt;quoteFile&lt;/a&gt;&lt;/code&gt; takes a &lt;code&gt;&lt;a href=&quot;language-haskell-th-quote#t:QuasiQuoter&quot;&gt;QuasiQuoter&lt;/a&gt;&lt;/code&gt; and lifts it into one that read the data out of a file. For example, suppose &lt;code&gt;asmq&lt;/code&gt; is an assembly-language quoter, so that you can write [asmq| ld r1, r2 |] as an expression. Then if you define &lt;code&gt;asmq_f = quoteFile asmq&lt;/code&gt;, then the quote [asmq_f|foo.s|] will take input from file &lt;code&gt;&quot;foo.s&quot;&lt;/code&gt; instead of the inline text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494cab9c250a45952ecb439d0268aa339e64f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:InstanceDec&quot;&gt;InstanceDec&lt;/a&gt;&lt;/code&gt; desribes a single instance of a class or type function. It is just a &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;&lt;/code&gt;, but guaranteed to be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b710ead83ecd7653b5b900b934a99e2f05f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; instances can be derived automatically by use of the &lt;code&gt;-XDeriveLift&lt;/code&gt; GHC language extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d7b99c603ed7e2bb515dc1e52c2959a87dc223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;s can be constructed in several ways, which come with different name-capture guarantees (see &lt;a href=&quot;language-haskell-th-syntax#namecapture&quot;&gt;Language.Haskell.TH.Syntax&lt;/a&gt; for an explanation of name capture):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840f5a195d18c505eed5b6054a43f1d20883a5c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:DataInstD&quot;&gt;DataInstD&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:NewtypeInstD&quot;&gt;NewtypeInstD&lt;/a&gt;&lt;/code&gt; (with empty derived &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff569f15354913d27bea83e61cb925996c8b4b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:InstanceD&quot;&gt;InstanceD&lt;/a&gt;&lt;/code&gt; (with empty &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#t:Dec&quot;&gt;Dec&lt;/a&gt;]&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86a8355fed83acbfb520a5aab5343fc869dd2e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Exp' representation of the same value, in the SYB style. It is generalized to take a function override type-specific cases; see &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; for a more commonly used variant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6b26f7ad040178ea0b3b4d3d2be19ece4e031f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; converts a value to a 'Q Pat' representation of the same value, in the SYB style. It takes a function to handle type-specific cases, alternatively, pass &lt;code&gt;const Nothing&lt;/code&gt; to get default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aaea3f49bbbb1c791befecde6970da7b81782b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToQa&quot;&gt;dataToQa&lt;/a&gt;&lt;/code&gt; is an internal utility function for constructing generic conversion functions from types with &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instances to various quasi-quoting representations. See the source of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToExpQ&quot;&gt;dataToExpQ&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:dataToPatQ&quot;&gt;dataToPatQ&lt;/a&gt;&lt;/code&gt; for two example usages: &lt;code&gt;mkCon&lt;/code&gt;, &lt;code&gt;mkLit&lt;/code&gt; and &lt;code&gt;appQ&lt;/code&gt; are overloadable to account for different syntax for expressions and patterns; &lt;code&gt;antiQ&lt;/code&gt; allows you to override type-specific cases, a common usage is just &lt;code&gt;const Nothing&lt;/code&gt;, which results in no overloading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f75bfe15dbc2aba3edb2e4be0269424f421b58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:liftData&quot;&gt;liftData&lt;/a&gt;&lt;/code&gt; is a variant of &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lift&quot;&gt;lift&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Lift&quot;&gt;Lift&lt;/a&gt;&lt;/code&gt; type class which works for any type with a &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-data#t:Data&quot;&gt;Data&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc1818b27997f484d76b1b79bfb3ed25655b1c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupValueName&quot;&gt;lookupValueName&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:lookupTypeName&quot;&gt;lookupTypeName&lt;/a&gt;&lt;/code&gt; are similar to &lt;code&gt;'f&lt;/code&gt; and &lt;code&gt;''T&lt;/code&gt; respectively, but the &lt;code&gt;Name&lt;/code&gt;s are looked up at the point where the current splice is being run. These names can never be captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782af2f301a050a096829ddcc020be752f84b031" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:mkName&quot;&gt;mkName&lt;/a&gt;&lt;/code&gt; generates a capturable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79c55fb6b73bfd7edc3807f496aa3696fb852af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:newName&quot;&gt;newName&lt;/a&gt;&lt;/code&gt; monadically generates a new name, which can never be captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c1a27fd7e44fc833c358502fc48714bafb7d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reify&quot;&gt;reify&lt;/a&gt;&lt;/code&gt; looks up information about the &lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#t:Name&quot;&gt;Name&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3240516619298cb631a45a4cbd8e169f3c59649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;language-haskell-th-syntax#v:reifyConStrictness&quot;&gt;reifyConStrictness&lt;/a&gt;&lt;/code&gt; would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedLazy&quot;&gt;DecidedLazy&lt;/a&gt;, DecidedLazy]&lt;/code&gt; under most circumstances, but it would return &lt;code&gt;[&lt;a href=&quot;language-haskell-th-syntax#v:DecidedStrict&quot;&gt;DecidedStrict&lt;/a&gt;, DecidedStrict]&lt;/code&gt; if the &lt;code&gt;-XStrictData&lt;/code&gt; language extension was enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454769dfaae8136c2efb11174dc30677b704c7d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:expm1&quot;&gt;expm1&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x - 1&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a695e4fedd553cca25bc687a091bbb8bd1eb4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:floatToDigits&quot;&gt;floatToDigits&lt;/a&gt;&lt;/code&gt; takes a base and a non-negative &lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; number, and returns a list of digits and an exponent. In particular, if &lt;code&gt;x&amp;gt;=0&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc289c8e0f3df346b3f2df9d3046765701b5d00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1mexp&quot;&gt;log1mexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 - &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d3a0d65b796f7a7d489e2a0759ae805e686ffc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1p&quot;&gt;log1p&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + x)&lt;/code&gt;, but provides more precise results for small (absolute) values of &lt;code&gt;x&lt;/code&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b46197cb9efd3cbb22ddf1716cbb034ebe2c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;numeric#v:log1pexp&quot;&gt;log1pexp&lt;/a&gt; x&lt;/code&gt; computes &lt;code&gt;&lt;a href=&quot;numeric#v:log&quot;&gt;log&lt;/a&gt; (1 + &lt;a href=&quot;numeric#v:exp&quot;&gt;exp&lt;/a&gt; x)&lt;/code&gt;, but provides more precise results if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6424498da93c2983f328c66db54a22f98306bf63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Bounded&quot;&gt;Bounded&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1a4639ba97766eb5656c3df06ea8d4a0f0d9b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Enum&quot;&gt;Enum&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bd3b22141c968eee8ca6b786e08d4e759efff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;prelude#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32ea5f5b152080a9f34fd24ca98e1512f639bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:Integral&quot;&gt;Integral&lt;/a&gt;&lt;/code&gt; types, including &lt;code&gt;&lt;a href=&quot;data-char#t:Char&quot;&gt;Char&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea52587d7432250da9aeb55e6e11c439a3603740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#t:RealFloat&quot;&gt;RealFloat&lt;/a&gt;&lt;/code&gt; types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e34dbd740d7bf97972384f8bcece1a0e39559e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE &quot;not-a-number&quot; (NaN) value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180bb4b0bf7a783f528ceb51480a97a340dccdf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE floating point number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29dfef2c890e37ba43e2c88e4bce45d2762f25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE infinity or negative infinity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bab898a810255506ac0b849f91dc439e83157a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is an IEEE negative zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e885ccee58dc4e7f6edcffcd266655296a0da640" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; if the argument is too small to be represented in normalized format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea9bb036ffe299726473f5b83da12eaf2ce2ab9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y) &amp;lt;= &lt;a href=&quot;prelude#v:abs&quot;&gt;abs&lt;/a&gt; (&lt;a href=&quot;data-ratio#v:numerator&quot;&gt;numerator&lt;/a&gt; y')&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fceec3ddb765a69aa6c91cd7fc9f35374de2ae71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:and&quot;&gt;and&lt;/a&gt;&lt;/code&gt; returns the conjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9c668715480a625fd9af9eb80eeeb206edb78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:asTypeOf&quot;&gt;asTypeOf&lt;/a&gt;&lt;/code&gt; is a type-restricted version of &lt;code&gt;&lt;a href=&quot;prelude#v:const&quot;&gt;const&lt;/a&gt;&lt;/code&gt;. It is usually used as an infix operator, and its typing forces its first argument (which is usually overloaded) to have the same type as the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d89710515219cec11872fcfa257cbf3a150eab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that &lt;em&gt;do not satisfy&lt;/em&gt;&lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65677c9d5d8e6310793e1ab8a36f6af8c40c3791" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:break&quot;&gt;break&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt; (&lt;a href=&quot;prelude#v:not&quot;&gt;not&lt;/a&gt; . p)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be66c280ca45c2cf1c5ce3828088758d49c7d3ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:ceiling&quot;&gt;ceiling&lt;/a&gt; x&lt;/code&gt; returns the least integer not less than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35530e911664fd9b3c43e39777246bc6aad72b52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:curry&quot;&gt;curry&lt;/a&gt;&lt;/code&gt; converts an uncurried function to a curried function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8691393163701b125cd36603fd414089952c93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; ties a finite list into a circular one, or equivalently, the infinite repetition of the original list. It is the identity on infinite lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37417a71dbc3a4e0a039f0004373fc1c05087a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns the suffix of &lt;code&gt;xs&lt;/code&gt; after the first &lt;code&gt;n&lt;/code&gt; elements, or &lt;code&gt;[]&lt;/code&gt; if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538ae1fd53b40794542f19501354d2d6fa15020e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; returns the suffix remaining after &lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b506e84360977987754db1c0f4ccade20a2e0af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt;&lt;/code&gt; performs the inverse of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt; in the sense that for finite &lt;code&gt;x&lt;/code&gt; with the exception of &lt;code&gt;-0.0&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt; &lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) = x&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:encodeFloat&quot;&gt;encodeFloat&lt;/a&gt; m n&lt;/code&gt; is one of the two closest representable floating-point numbers to &lt;code&gt;m*b^^n&lt;/code&gt; (or &lt;code&gt;&amp;plusmn;Infinity&lt;/code&gt; if overflow occurs); usually the closer, but if &lt;code&gt;m&lt;/code&gt; contains too many bits, the result may be rounded in the wrong direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e005e5bf5443bae1200923a51681b7678dea36c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:enumFrom&quot;&gt;enumFrom&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:enumFromThen&quot;&gt;enumFromThen&lt;/a&gt;&lt;/code&gt; should be defined with an implicit bound, thus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f76a96d436885ad0fc422b0d0033bcce4f84b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; stops execution and displays an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cd8d4c12d9480115246931f5727c25ecc68890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt;&lt;/code&gt; corresponds to the second component of &lt;code&gt;&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; 0 = 0&lt;/code&gt; and for finite nonzero &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x = snd (&lt;a href=&quot;prelude#v:decodeFloat&quot;&gt;decodeFloat&lt;/a&gt; x) + &lt;a href=&quot;prelude#v:floatDigits&quot;&gt;floatDigits&lt;/a&gt; x&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is a finite floating-point number, it is equal in value to &lt;code&gt;&lt;a href=&quot;prelude#v:significand&quot;&gt;significand&lt;/a&gt; x * b ^^ &lt;a href=&quot;prelude#v:exponent&quot;&gt;exponent&lt;/a&gt; x&lt;/code&gt;, where &lt;code&gt;b&lt;/code&gt; is the floating-point radix. The behaviour is unspecified on infinite or &lt;code&gt;NaN&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb0d52360c67c8eed2b8ebe7918d0021bfca7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:flip&quot;&gt;flip&lt;/a&gt; f&lt;/code&gt; takes its (first) two arguments in the reverse order of &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74582fe2c1b8b6147f60f7d9b00babc28681d6af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:floor&quot;&gt;floor&lt;/a&gt; x&lt;/code&gt; returns the greatest integer not greater than &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ab1bc2943c0be811d10077bb62e6127ff2dd29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:fromEnum&quot;&gt;fromEnum&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt;&lt;/code&gt; should give a runtime error if the result value is not representable in the result type. For example, &lt;code&gt;&lt;a href=&quot;prelude#v:toEnum&quot;&gt;toEnum&lt;/a&gt; 7 :: &lt;a href=&quot;prelude#t:Bool&quot;&gt;Bool&lt;/a&gt;&lt;/code&gt; is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce643c41c2db2cd82ad44ae59c126bfc3d20a14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; x y&lt;/code&gt; is the non-negative factor of both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; of which every common factor of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is also a factor; for example &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 4 2 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; (-4) 6 = 2&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 4&lt;/code&gt; = &lt;code&gt;4&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;prelude#v:gcd&quot;&gt;gcd&lt;/a&gt; 0 0&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;. (That is, the common divisor that is &quot;greatest&quot; in the divisibility preordering.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cca57c5550be7ce21679621b488ce401911a226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:iterate&quot;&gt;iterate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;f x&lt;/code&gt; returns an infinite list of repeated applications of &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a579489e99e31a99cb9989088525deb9b63c304" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lcm&quot;&gt;lcm&lt;/a&gt; x y&lt;/code&gt; is the smallest positive integer that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1e9d56d03a39d084962d1040fb10f5830e566d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of strings at newline characters. The resulting strings do not contain newlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c3b95d95e8a8b18102086e126bd104cf69ecf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:notElem&quot;&gt;notElem&lt;/a&gt;&lt;/code&gt; is the negation of &lt;code&gt;&lt;a href=&quot;prelude#v:elem&quot;&gt;elem&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b28da115bfd5d00bf1b920bb984e01a5fc3c009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:or&quot;&gt;or&lt;/a&gt;&lt;/code&gt; returns the disjunction of a container of Bools. For the result to be &lt;code&gt;&lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, the container must be finite; &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, however, results from a &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; value finitely far from the left end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4fd83f3d011b16b6dc51c43a910c7e9a78e1cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:otherwise&quot;&gt;otherwise&lt;/a&gt;&lt;/code&gt; is defined as the value &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;. It helps to make guards more readable. eg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0cc360ae261aac376aac41131de9104e521a59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7b88af6312a71be1e6cc5991346df63e87cce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cc0f4a75c44098555587a9b632e29fb9c47ba9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:repeat&quot;&gt;repeat&lt;/a&gt;&lt;/code&gt;&lt;code&gt;x&lt;/code&gt; is an infinite list, with &lt;code&gt;x&lt;/code&gt; the value of every element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ec4a6aab6c31f279c50924ed8fe63b61c8afc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:replicate&quot;&gt;replicate&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n x&lt;/code&gt; is a list of length &lt;code&gt;n&lt;/code&gt; with &lt;code&gt;x&lt;/code&gt; the value of every element. It is an instance of the more general &lt;code&gt;&lt;a href=&quot;data-list#v:genericReplicate&quot;&gt;genericReplicate&lt;/a&gt;&lt;/code&gt;, in which &lt;code&gt;n&lt;/code&gt; may be of any integral type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0f5651974cd39db6372713ad54f0e127cd892e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:reverse&quot;&gt;reverse&lt;/a&gt;&lt;/code&gt;&lt;code&gt;xs&lt;/code&gt; returns the elements of &lt;code&gt;xs&lt;/code&gt; in reverse order. &lt;code&gt;xs&lt;/code&gt; must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8866f3369aabdd70b6cea2f8ac67cc5354993ba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:round&quot;&gt;round&lt;/a&gt; x&lt;/code&gt; returns the nearest integer to &lt;code&gt;x&lt;/code&gt;; the even integer if &lt;code&gt;x&lt;/code&gt; is equidistant between two integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8197db2f8f42c33ac929501c115f060c4003dc88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff5551274655dfcc8b4e4f810e9c6303ce24ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd876887b676862f1db8746de58d3818bafe9192" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns a tuple where first element is longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef69a25e6b580461c6edf12e74a04f68967a80a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:span&quot;&gt;span&lt;/a&gt;&lt;/code&gt;&lt;code&gt;p xs&lt;/code&gt; is equivalent to &lt;code&gt;(&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt; p xs, &lt;a href=&quot;prelude#v:dropWhile&quot;&gt;dropWhile&lt;/a&gt; p xs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9986add984ef8935e2a10368b30a5809dab25a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:splitAt&quot;&gt;splitAt&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n xs&lt;/code&gt; returns a tuple where first element is &lt;code&gt;xs&lt;/code&gt; prefix of length &lt;code&gt;n&lt;/code&gt; and second element is the remainder of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f7535d630138e7e51f7c3606a32ee218bfc27c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:take&quot;&gt;take&lt;/a&gt;&lt;/code&gt;&lt;code&gt;n&lt;/code&gt;, applied to a list &lt;code&gt;xs&lt;/code&gt;, returns the prefix of &lt;code&gt;xs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;xs&lt;/code&gt; itself if &lt;code&gt;n &amp;gt; &lt;a href=&quot;ghc-list#v:length&quot;&gt;length&lt;/a&gt; xs&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32f5f2062f7bfd5341a8a4f847eef925def4c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:takeWhile&quot;&gt;takeWhile&lt;/a&gt;&lt;/code&gt;, applied to a predicate &lt;code&gt;p&lt;/code&gt; and a list &lt;code&gt;xs&lt;/code&gt;, returns the longest prefix (possibly empty) of &lt;code&gt;xs&lt;/code&gt; of elements that satisfy &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c565b5e43a2f7011ee17ba13f5a371da254c5bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:truncate&quot;&gt;truncate&lt;/a&gt; x&lt;/code&gt; returns the integer nearest &lt;code&gt;x&lt;/code&gt; between zero and &lt;code&gt;x&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6833bf4f6e77728c935667d52aa1f8e4d0e22592" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:uncurry&quot;&gt;uncurry&lt;/a&gt;&lt;/code&gt; converts a curried function to a function on pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b39b05584d753464e0a137e37b0275efe3cd36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unlines&quot;&gt;unlines&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:lines&quot;&gt;lines&lt;/a&gt;&lt;/code&gt;. It joins lines, after appending a terminating newline to each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0909cfb4024e044a781c8cc3e577608acc465b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:until&quot;&gt;until&lt;/a&gt; p f&lt;/code&gt; yields the result of applying &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;p&lt;/code&gt; holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd1257a93569ed215b8f5b00ca0ecbd2be3bd4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unwords&quot;&gt;unwords&lt;/a&gt;&lt;/code&gt; is an inverse operation to &lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt;. It joins words with separating spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01bef010073b5e20e4dd758bd14bfeda1aaccea8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:unzip&quot;&gt;unzip&lt;/a&gt;&lt;/code&gt; transforms a list of pairs into a list of first components and a list of second components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52b4c6fc29dbc556d93ce39796f1355a44b3669" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:words&quot;&gt;words&lt;/a&gt;&lt;/code&gt; breaks a string up into a list of words, which were delimited by white space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4c37f6f58036a01b451e7d137537e6c4533a7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0622371527d648d60c30d9849cadcf847e4eb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a23fc01912013cc00c836f8604380b992b0b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zip3&quot;&gt;zip3&lt;/a&gt;&lt;/code&gt; takes three lists and returns a list of triples, analogous to &lt;code&gt;&lt;a href=&quot;prelude#v:zip&quot;&gt;zip&lt;/a&gt;&lt;/code&gt;. It is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5690d97420c567a27377bcacc8f8b46ef04bfcdb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is capable of list fusion, but it is restricted to its first list argument and its resulting list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa4a1a38d950808687c491ece1044d0ba291c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;prelude#v:zipWith&quot;&gt;zipWith&lt;/a&gt;&lt;/code&gt; is right-lazy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfd4533290c5ef0e949ada807c3772d5eebbee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-getopt#v:getOpt&quot;&gt;getOpt&lt;/a&gt;&lt;/code&gt; returns a triple consisting of the option arguments, a list of non-options, and a list of error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428066ca06ed596ddd333bde5016b887aba49d76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-console-haskeline#t:Prefs&quot;&gt;Prefs&lt;/a&gt;&lt;/code&gt; allow the user to customize the terminal-style line-editing interface. They are read by default from &lt;code&gt;~/.haskeline&lt;/code&gt;; to override that behavior, use &lt;code&gt;&lt;a href=&quot;system-console-haskeline#v:readPrefs&quot;&gt;readPrefs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;runInputTWithPrefs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6d385a35e1b7babd43615a60f7444f80af2444" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectory&quot;&gt;createDirectory&lt;/a&gt; dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; which is initially empty, or as near to empty as the operating system allows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705ef22f70043a77d804ac1a1f20e78c6f911351" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:createDirectoryIfMissing&quot;&gt;createDirectoryIfMissing&lt;/a&gt; parents dir&lt;/code&gt; creates a new directory &lt;code&gt;dir&lt;/code&gt; if it doesn't exist. If the first argument is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; the function will also create all parent directories if they are missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f166a33c1b1210e5ef26e6bcfe69d6be0bbcfca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:listDirectory&quot;&gt;listDirectory&lt;/a&gt; dir&lt;/code&gt; returns a list of &lt;em&gt;all&lt;/em&gt; entries in &lt;em&gt;dir&lt;/em&gt; without the special entries (&lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f17bbcb6b2bedb9848c973e471df1323555cd5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt;. The implementation may specify additional constraints which must be satisfied before a directory can be removed (e.g. the directory has to be empty, or may not be in use by other processes). It is not legal for an implementation to partially remove a directory unless the entire directory is removed. A conformant implementation need not support directory removal in all situations (e.g. removal of the root directory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811605cb16909a2d10f9fbab42d71ae040bd7169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectoryRecursive&quot;&gt;removeDirectoryRecursive&lt;/a&gt; dir&lt;/code&gt; removes an existing directory &lt;em&gt;dir&lt;/em&gt; together with its contents and subdirectories. Within this directory, symbolic links are removed without affecting their targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d7e645324acff7f68a3c901de6f888fcae3589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:removeFile&quot;&gt;removeFile&lt;/a&gt;&lt;/code&gt;&lt;em&gt;file&lt;/em&gt; removes the directory entry for an existing file &lt;em&gt;file&lt;/em&gt;, where &lt;em&gt;file&lt;/em&gt; is not itself a directory. The implementation may specify additional constraints which must be satisfied before a file can be removed (e.g. the file may not be in use by other processes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512fb3e5392402ecd530cb7a00735e380b377ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameDirectory&quot;&gt;renameDirectory&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing directory from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; directory already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; directory. If the &lt;em&gt;new&lt;/em&gt; directory is neither the &lt;em&gt;old&lt;/em&gt; directory nor an alias of the &lt;em&gt;old&lt;/em&gt; directory, it is removed as if by &lt;code&gt;&lt;a href=&quot;system-directory#v:removeDirectory&quot;&gt;removeDirectory&lt;/a&gt;&lt;/code&gt;. A conformant implementation need not support renaming directories in all situations (e.g. renaming to an existing directory, or across different physical devices), but the constraints must be documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb6bb0aba7cc14757847ba9a69350ee82df65ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory#v:renameFile&quot;&gt;renameFile&lt;/a&gt; old new&lt;/code&gt; changes the name of an existing file system object from &lt;em&gt;old&lt;/em&gt; to &lt;em&gt;new&lt;/em&gt;. If the &lt;em&gt;new&lt;/em&gt; object already exists, it is atomically replaced by the &lt;em&gt;old&lt;/em&gt; object. Neither path may refer to an existing directory. A conformant implementation need not support renaming files in all situations (e.g. renaming across different physical devices), but the constraints must be documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de27a973f5ea2ab881c2dcfed1f431af95026d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt; f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory sufficient to hold values of type &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30881e33e4b76a76383543da3ebacc9cb6fcb0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:allocaBytes&quot;&gt;allocaBytes&lt;/a&gt; n f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory of &lt;code&gt;n&lt;/code&gt; bytes. The block of memory is sufficiently aligned for any of the basic foreign types that fits into a memory block of the allocated size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ba2e7e29aaa12a74022482ac7bb88fbe0e0b96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:traverse&quot;&gt;traverse&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that ignores the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-foldable#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdb0cf82593649629819bceb7666b11e7e622a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:for_&quot;&gt;for_&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:traverse_&quot;&gt;traverse_&lt;/a&gt;&lt;/code&gt; with its arguments flipped. For a version that doesn't ignore the results see &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-traversable#v:for&quot;&gt;for&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028b5625464fb8097365abe596c3d54434e3ec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cfc1e5042a12660b3e720d93cf0cab9c7794d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11b3c0865d210f9ab7b132999b6c4c16d6ef98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14075775c0ee25ea68f9e2f09601e21154b0a0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99d667e36582cea7f2334c492a206fcb6df9006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0490d1f560a432f99bac3122c75fb8ef6af90f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675e0c5497e4318c63592abccd2c82715047a160" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isAlreadyExistsError&quot;&gt;isAlreadyExistsError&lt;/a&gt;&lt;/code&gt; The operand refers to a directory that already exists. &lt;code&gt; [EEXIST]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d3a2ed896f8f5ead7e97db7d1db41059cac067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The directory does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570fc6e70848e62062b5f67d22eb279fa47e3442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The document directory for the current user does not exist, or cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20e3f01828fc8f87cbe164a8b5c4e1b2aa04ca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The file does not exist. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858cd772984a7e4429db514018b70ce3afd9ae06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The home directory for the current user does not exist, or cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a85b3657c156b8ae293b591e0cb872c2e655091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original directory does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c5c9601ce63bc94ccc8604c54e7bb22d69d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; The original file does not exist, or there is no path to the target. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ab4ae517a822445df2a1a704ad3674534b7b20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path referring to the working directory. &lt;code&gt;[EPERM, ENOENT, ESTALE...]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0dd37d90f48cfbdef6a570db9acc64836085b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; There is no path to the directory. &lt;code&gt;[ENOENT, ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347fc8584d20e401ff8f78ac63c1500e20cf5de5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file or directory does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fc418c169c85bf7e022cca595290b216e02ae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the symbolic link does not exist; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a49ab0d29fe4fe855dfb979840d520e0507041" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EACCES]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee56e32bdbd4711aea4be33a1fcaaf4bda21f029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES, EPERM]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b64e747953087c74ce74e2be09ce5f51ed1f10f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; The process has insufficient privileges to perform the operation. &lt;code&gt;[EROFS, EACCES]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9131e447f68b5aa32b4fe3baa0338cd3a6741e0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d89f5accd453087b393d912d9093968f25de64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to access the permissions, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c180a36cc0fcd2cf5d5a734f85406f596ffb1a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the access time; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cff511b1fbc5935a930f77cb71c60e1570a1cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to alter the modification time; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d066f5275ae106507bc969993fbcf135694886" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the access time; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc550853d68871a0ca61e37d18be5e8873706bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the modification time; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfd615404ba5f6b6c0ef4f41d095e3187b64658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to read the symbolic link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d79b4dc766b0087bfb9c761ba001e872def17a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user is not permitted to set the permissions, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344e76d740bf897453387371cea23cc330cac420" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:killThread&quot;&gt;killThread&lt;/a&gt;&lt;/code&gt; raises the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.8.3/docs/html/libraries/base-4.13.0.0/Control-Exception-Base.html#v:ThreadKilled&quot;&gt;ThreadKilled&lt;/a&gt;&lt;/code&gt; exception in the given thread (GHC only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e615977c2722c4f0e45c54f7345e00cff9115bc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:on&quot;&gt;on&lt;/a&gt; b u x y&lt;/code&gt; runs the binary function &lt;code&gt;b&lt;/code&gt;&lt;em&gt;on&lt;/em&gt; the results of applying unary function &lt;code&gt;u&lt;/code&gt; to two arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. From the opposite perspective, it transforms two inputs and combines the outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786c99907a020f9c48152e8d24c6885af0611c87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes empty, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:putMVar&quot;&gt;putMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e578064f0da8499089a403d976f0baf9159aed9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:readMVar&quot;&gt;readMVar&lt;/a&gt;&lt;/code&gt; is multiple-wakeup, so when multiple readers are blocked on an &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt;, all of them are woken up at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3f50ac80b1318619fa52bcf2532a8192f5aefc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; is single-wakeup. That is, if there are multiple threads blocked in &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt;, and the &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-concurrent-mvar#t:MVar&quot;&gt;MVar&lt;/a&gt;&lt;/code&gt; becomes full, only one thread will be woken up. The runtime guarantees that the woken thread completes its &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:takeMVar&quot;&gt;takeMVar&lt;/a&gt;&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4939a05367193825eecc5af2806613fa289229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:with&quot;&gt;with&lt;/a&gt; val f&lt;/code&gt; executes the computation &lt;code&gt;f&lt;/code&gt;, passing as argument a pointer to a temporarily allocated block of memory into which &lt;code&gt;val&lt;/code&gt; has been marshalled (the combination of &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:alloca&quot;&gt;alloca&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:poke&quot;&gt;poke&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e61feadfc129e536f83d38e4032d764857e8122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/ghc-io-handle-fd#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-directory-internal-prelude#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f4bfc1af66b1f78e6fa201119dedebf31cea28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b5a03cf9bedea531e171f5f1e26bc4003a8f2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab56e078d2844082ad734d0aabb2c57a6ce5bc98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58d145ae3238904f6ded50a490545f505e32944" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6013d33c430ebf7ce02db5cc25b9470bb617134d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withArgs&quot;&gt;withArgs&lt;/a&gt;&lt;/code&gt;&lt;code&gt;args act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getArgs&quot;&gt;getArgs&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4e2cb305925639cfd5cfb1c2f1ba63b4d75cb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-environment-blank#v:withProgName&quot;&gt;withProgName&lt;/a&gt;&lt;/code&gt;&lt;code&gt;name act&lt;/code&gt; - while executing action &lt;code&gt;act&lt;/code&gt;, have &lt;code&gt;&lt;a href=&quot;system-environment-blank#v:getProgName&quot;&gt;getProgName&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750cbc8039fe1c83e8763f28996fdc34077a41e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee498c484d9daa5b759cbcd3d038588c60a44a4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204e024900f7186a24f70c664c7a279d94013014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505fc89627c6e7b66a4e50349bdf9c2ce4989f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9828687142d3f94e89126e3b00c12daaf2d4cd55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-posix#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8b69a5412a9c411b18cda76536b61138da5070" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:dropExtension&quot;&gt;dropExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory/file&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fe48558f1fa4ec40f72ce35a9aab921fcd7182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeBaseName&quot;&gt;takeBaseName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d9d266b688f599b0358a6292fe227b5ec8759f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeDirectory&quot;&gt;takeDirectory&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;/directory&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e898427c7f13c21982b1e0944597a896ad6ad697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeExtension&quot;&gt;takeExtension&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;.ext&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f4096a36fedbe5e31682897c961e85cc71b392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-filepath-windows#v:takeFileName&quot;&gt;takeFileName&lt;/a&gt;&lt;/code&gt; gives &lt;code&gt;&quot;file.ext&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd87e5da495cc20bcf39cf6c0ba9d2a05fc5f65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; is a monad, so &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; actions can be combined using either the do-notation or the &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62-&quot;&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;prelude#v:-62--62--61-&quot;&gt;&amp;gt;&amp;gt;=&lt;/a&gt;&lt;/code&gt; operations from the &lt;code&gt;&lt;a href=&quot;prelude#v:Monad&quot;&gt;Monad&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c113f8cff9254292f69bc05445fda1246e90fbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e51dc3c610b9def739345e883f90795ad069471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fedf06dacc84d057e0aff65b80b4609f5234e578" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read. It returns the number of bytes actually read. This may be zero if EOF was reached before any data was read (or if &lt;code&gt;count&lt;/code&gt; is zero).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47492e6c7d3b7b167bf4a77f02ebb3177702211f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5e68a418777562629e83c6914b5965e4f8b7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt; is identical to &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBuf&quot;&gt;hGetBuf&lt;/a&gt;&lt;/code&gt;, except that it will never block waiting for data to become available, instead it returns only whatever data is available. To wait for data to arrive before calling &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;system-io#v:hWaitForInput&quot;&gt;hWaitForInput&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b3ffe2679a681145b675a90cf9229e33661ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufNonBlocking&quot;&gt;hGetBufNonBlocking&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt; until either EOF is reached, or &lt;code&gt;count&lt;/code&gt; 8-bit bytes have been read, or there is no more data available to read immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900ccd5046937da12e632c0bd8f4813e0b7ef207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and reads bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c26258224fd2f78d0012cf7ca47b489b5ae960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; never raises an EOF exception, instead it returns a value smaller than &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118c238c7398f2db604334baf0dccba6607b9e36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; reads data from the handle &lt;code&gt;hdl&lt;/code&gt; into the buffer &lt;code&gt;buf&lt;/code&gt;. If there is any data available to read, then &lt;code&gt;&lt;a href=&quot;system-io#v:hGetBufSome&quot;&gt;hGetBufSome&lt;/a&gt;&lt;/code&gt; returns it immediately; it only blocks if there is no data to be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fd3acb2ea09a247c6cc9f61439f4360fb06b9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores any text encoding that applies to the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, writing the bytes directly to the underlying file or device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c77d44f270fef69a537c97036ebff6b054a777" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt; ignores the prevailing &lt;code&gt;&lt;a href=&quot;system-io#v:TextEncoding&quot;&gt;TextEncoding&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-io#t:NewlineMode&quot;&gt;NewlineMode&lt;/a&gt;&lt;/code&gt; on the &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;, and writes bytes directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fa5cc1f0dea220b5d570d24561ebd4cee15a81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hPutBuf&quot;&gt;hPutBuf&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl buf count&lt;/code&gt; writes &lt;code&gt;count&lt;/code&gt; 8-bit bytes from the buffer &lt;code&gt;buf&lt;/code&gt; to the handle &lt;code&gt;hdl&lt;/code&gt;. It returns ().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26bfccb8bc5cc4f2e1a6ae4c49863b3fecc5656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetEncoding&quot;&gt;hSetEncoding&lt;/a&gt;&lt;/code&gt; may need to flush buffered data in order to change the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f709fcc15fedd012e20af0c4a2ce129ee579458" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hSetFileSize&quot;&gt;hSetFileSize&lt;/a&gt;&lt;/code&gt;&lt;code&gt;hdl&lt;/code&gt;&lt;code&gt;size&lt;/code&gt; truncates the physical file with handle &lt;code&gt;hdl&lt;/code&gt; to &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee68b3d1c21bbb0d90dc848ac40c2956dc50c88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:hShow&quot;&gt;hShow&lt;/a&gt;&lt;/code&gt; is in the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; monad, and gives more comprehensive output than the (pure) instance of &lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;system-io#t:Handle&quot;&gt;Handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5868d6a3771c787f8c7a6ca4570efb80ef87837a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openBinaryFile&quot;&gt;openBinaryFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withBinaryFile&quot;&gt;withBinaryFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf5cb2c1fd5be3e782db10ab3e5cb2a4b1ee149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt; name mode act&lt;/code&gt; opens a file using &lt;code&gt;&lt;a href=&quot;system-io#v:openFile&quot;&gt;openFile&lt;/a&gt;&lt;/code&gt; and passes the resulting handle to the computation &lt;code&gt;act&lt;/code&gt;. The handle will be closed on exit from &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt;, whether by normal termination or by raising an exception. If closing the handle raises an exception, then this exception will be raised by &lt;code&gt;&lt;a href=&quot;system-io#v:withFile&quot;&gt;withFile&lt;/a&gt;&lt;/code&gt; rather than any exception raised by &lt;code&gt;act&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabc71eec17f83a93ea23ff66cab4a1dc6ba84c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isAlreadyInUseError&quot;&gt;isAlreadyInUseError&lt;/a&gt;&lt;/code&gt; if the file is already open and cannot be reopened;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e8b0ed7a31703858ed0a28c48503222d5319df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the encoding is unknown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3003e85eaf3fbc4d4ba4bf2a4cb43b86fc85bdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the environment variable does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084f3f0a8dd95c22a11cd704ae034bf71b1f18cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if the file does not exist or (on POSIX systems) is a FIFO without a reader and &lt;code&gt;&lt;a href=&quot;system-io#v:WriteMode&quot;&gt;WriteMode&lt;/a&gt;&lt;/code&gt; was requested; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c936737e355c2bbc41be6c619b317caa00c885f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file has been reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9e4b0caa72bab041ae1ff68c755698491c977d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isEOFError&quot;&gt;isEOFError&lt;/a&gt;&lt;/code&gt; if the end of file is encountered when reading the &lt;em&gt;first&lt;/em&gt; character of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c609bcfaa99944aeb4ff3e9dd3d277f3cdb404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b22ca3a03b411a711bed4b581a930e9ee4bf29b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isFullError&quot;&gt;isFullError&lt;/a&gt;&lt;/code&gt; if the device is full; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e7a82af7669853759d0945fa89a702e11253c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperation&quot;&gt;isIllegalOperation&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;hdl&lt;/code&gt; has buffered read data, and is not seekable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da7adc31ef4edef17a242440c7d64d638a8bd80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable, or does not support the requested seek mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e8eb6cf62901659fe79c54f96421c223046405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isIllegalOperationError&quot;&gt;isIllegalOperationError&lt;/a&gt;&lt;/code&gt; if the Handle is not seekable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce2292e357dc0bd830c43d2560fdb040d147b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1106621d2a78ef47cd789f50dfd1a8b9f50c67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2180955149dbf5012930133930c9cc308ff60476" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if a system resource limit would be exceeded. It is unspecified whether the characters in the buffer are discarded or retained under these circumstances;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e9517f13f2c20a3e48c3a33ab514f471703b91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if another system resource limit would be exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8930e357a572dfef9dbdede92f4e890fe39a178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the handle has already been used for reading or writing and the implementation does not allow the buffering mode to be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bbfadf606b4d0c13351714bfa1ed22830942d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-error#v:isPermissionError&quot;&gt;isPermissionError&lt;/a&gt;&lt;/code&gt; if the user does not have permission to open the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a84d685062db941954c961e65e03ffbf15c9da5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafeInterleaveIO&quot;&gt;unsafeInterleaveIO&lt;/a&gt;&lt;/code&gt; allows an &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; computation to be deferred lazily. When passed a value of type &lt;code&gt;IO a&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; will only be performed when the value of the &lt;code&gt;a&lt;/code&gt; is demanded. This is used to implement lazy file reading, see &lt;code&gt;&lt;a href=&quot;system-io#v:hGetContents&quot;&gt;hGetContents&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636f9ef00f0bbe41d9813b08a2e27024248f864a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db638659b004f209b3be8d77aaba2e2a820082ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594f51891d30d86cfed741461446e3a9341bd7ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a741da0985ccc5379b3b2289e21c9c8ecc6c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ffd9b58b987c6fd0a2c462b44c0987761e83f02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc263b138bbc4a173923c1e1aefd1e9bda3260d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4787c41d0942e72d36598464f8701661cb6393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:dlsym&quot;&gt;dlsym&lt;/a&gt;&lt;/code&gt; returns the address binding of the symbol described in &lt;code&gt;symbol&lt;/code&gt;, as it occurs in the shared object identified by &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc21cb66946a59fcabcd04a2651b642cc04cdfc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-dynamiclinker-bytestring#v:undl&quot;&gt;undl&lt;/a&gt;&lt;/code&gt; obtains the raw handle. You mustn't do something like &lt;code&gt;withDL mod flags $ liftM undl &amp;gt;&amp;gt;=  p -&amp;gt; use p&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875b6886f5f845cde066821d5d52dcec6a8d27c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f55c89f7417b0b10d95b889afaa28b4a9090e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca2c0a4d829cb0ea281df253eab24ce8639f433" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec6916cb7447bb41f13e0beda26ad49291fcde9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64fc2012cb425156b398f64b5e3be84f23273cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env#v:setEnvironment&quot;&gt;setEnvironment&lt;/a&gt;&lt;/code&gt; resets the entire environment to the given list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4643c36ddd3c482bcd236e8e545490ab553c2dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; looks up a variable in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ae85a79131db90987ae906284712d80186032c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvDefault&quot;&gt;getEnvDefault&lt;/a&gt;&lt;/code&gt; is a wrapper around &lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnv&quot;&gt;getEnv&lt;/a&gt;&lt;/code&gt; where the programmer can specify a fallback if the variable is not found in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d18cbcc5157f7be9ed80d4af97fcdb77623d64a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:getEnvironment&quot;&gt;getEnvironment&lt;/a&gt;&lt;/code&gt; retrieves the entire environment as a list of &lt;code&gt;(key,value)&lt;/code&gt; pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df8503d7e50a0837aebd3fee4a3c41e23fd2cbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-env-bytestring#v:putEnv&quot;&gt;putEnv&lt;/a&gt;&lt;/code&gt; function takes an argument of the form &lt;code&gt;name=value&lt;/code&gt; and is equivalent to &lt;code&gt;setEnv(key,value,True{-overwrite-})&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9265b7d41ad37773728bc0c5f02dcfc38e8770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afde6d8639aaa455c87557d905849cd65ad38cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33add91f94714967891e5a07f35980bf1089bae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245ba1378d38e9bdbe623e874acbfa4bb68bd7dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8a276c3f2654ee2807265a2207fd529c00542f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b331a44e9f2d96759818096d963d90ff6d61a2b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5904c50db641a7485ad66dfd437b79e36242ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43e5f0fdfb640ca1e8bb89d9c8cb793ad252ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed059b2a0545d5d4a6e8629b3fc6a0fdcf4a4544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857e132b3d9be7755cd38a016ddf8a7c4a104694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea52f273278ce3e7a21bef5f12525ca00d928525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43baa764741c37a71bc8f703be99fbc1ec6bb89e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eafa0159314b87c384bfeb3201e7cdcb2201cf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdea95297c9f673b27f77f87f3e2142e25cd7ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f018d81ab726d4c0eb48f687fbe0b88d32709812" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c81b2134147f25dd9ba1a5abdb4fcd179152996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1d59fc3ec9bb50b20996d582e1b6d5c5114740" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6326a70dbe10166b3d108453064f69feb6545960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bd46c02e8acf48d5c4c4f61e50fb216e1bf2b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroup&quot;&gt;createProcessGroup&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader. This function is currently deprecated, and might be changed to making the current process a new process group leader in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdaf0e0f4ace757b290ce823bf71937210469424" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createProcessGroupFor&quot;&gt;createProcessGroupFor&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to make process &lt;code&gt;pid&lt;/code&gt; a new process group leader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469b4647b75bb623290b754f947b421cc558a3a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:createSession&quot;&gt;createSession&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;setsid&lt;/code&gt; to create a new session with the current process as session leader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6263bdcc9198f197573ea3e7bff7fd1a1f9b98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt; cmd args env&lt;/code&gt; calls one of the &lt;code&gt;execv*&lt;/code&gt; family, depending on whether or not the current PATH is to be searched for the command, and whether or not an environment is provided to supersede the process's current environment. The basename (leading directory names suppressed) of the command is passed to &lt;code&gt;execv*&lt;/code&gt; as &lt;code&gt;arg[0]&lt;/code&gt;; the argument list passed to &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:executeFile&quot;&gt;executeFile&lt;/a&gt;&lt;/code&gt; therefore begins with &lt;code&gt;arg[1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62df387d69aa46aebb9fd22e8170de79505247a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:exitImmediately&quot;&gt;exitImmediately&lt;/a&gt; status&lt;/code&gt; calls &lt;code&gt;_exit&lt;/code&gt; to terminate the process with the indicated exit &lt;code&gt;status&lt;/code&gt;. The operation never returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fbeeb193386e128dd8791d9dbb3d92d21dddff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; comes with a giant warning: since any other running threads are not copied into the child process, it's easy to go wrong: e.g. by accessing some shared resource that was held by another thread in the parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ce34b7e96dc6bb4514f7437a55f7f1126d59ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; corresponds to the POSIX &lt;code&gt;fork&lt;/code&gt; system call. The &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io#t:IO&quot;&gt;IO&lt;/a&gt;&lt;/code&gt; action passed as an argument is executed in the child process; no other threads will be copied to the child process. On success, &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:forkProcess&quot;&gt;forkProcess&lt;/a&gt;&lt;/code&gt; returns the child's &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; to the parent process; in case of an error, an exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d40f12f524ed1b80a76cff1812c212a3472821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt; blk stopped&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any child process if a child process has exited, or &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getAnyProcessStatus&quot;&gt;getAnyProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946427066e90542e55c6ff1390f3cd89b634a62d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt; blk stopped pgid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; (pid, tc)&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for any process in group &lt;code&gt;pgid&lt;/code&gt; if one is available, or &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; if there are child processes but none have exited. If there are no child processes, then &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getGroupProcessStatus&quot;&gt;getGroupProcessStatus&lt;/a&gt;&lt;/code&gt; raises an &lt;code&gt;isDoesNotExistError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4752731ddcf8f3a7b42f6da38f23da6682d79b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupID&quot;&gt;getProcessGroupID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpgrp&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10b90ce142453f5715bed552d3f634d0fcb8413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessGroupIDOf&quot;&gt;getProcessGroupIDOf&lt;/a&gt; pid&lt;/code&gt; calls &lt;code&gt;getpgid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa0ff09affc10c0b630f9d9e0cf12366ba0ecc8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getpid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a6c54d296bf3f4c3b5e935bedcfcd826c91808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessID&quot;&gt;getProcessID&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;getppid&lt;/code&gt; to obtain the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessID&quot;&gt;ProcessID&lt;/a&gt;&lt;/code&gt; for the parent of the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fdc2a4977a2d4fd821be31bab9ca51bea10d12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessStatus&quot;&gt;getProcessStatus&lt;/a&gt; blk stopped pid&lt;/code&gt; calls &lt;code&gt;waitpid&lt;/code&gt;, returning &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Just&quot;&gt;Just&lt;/a&gt; tc&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#t:ProcessStatus&quot;&gt;ProcessStatus&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; if it is available, &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/ghc-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt; otherwise. If &lt;code&gt;blk&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/data-bool#v:False&quot;&gt;False&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WNOHANG&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not. If &lt;code&gt;stopped&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;WUNTRACED&lt;/code&gt; is set in the options for &lt;code&gt;waitpid&lt;/code&gt;, otherwise not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7311896f40e30cb5781949c817e42696c43aed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:getProcessTimes&quot;&gt;getProcessTimes&lt;/a&gt;&lt;/code&gt; calls &lt;code&gt;times&lt;/code&gt; to obtain time-accounting information for the current process and its children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b38e886babd1564477d74d5058b093bccaf2b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:joinProcessGroup&quot;&gt;joinProcessGroup&lt;/a&gt; pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; of the current process to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85077347ee668bbd9e728537f4ea3fb95ac63667" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupID&quot;&gt;setProcessGroupID&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;. This function is currently deprecated, and might be changed to setting the &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-posix-types#t:ProcessGroupID&quot;&gt;ProcessGroupID&lt;/a&gt;&lt;/code&gt; for the current process in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ceb7acc2877b94d34a92c5a21115598457dc92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-process-bytestring#v:setProcessGroupIDOf&quot;&gt;setProcessGroupIDOf&lt;/a&gt; pid pgid&lt;/code&gt; calls &lt;code&gt;setpgid&lt;/code&gt; to set the &lt;code&gt;ProcessGroupIDOf&lt;/code&gt; for process &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;pgid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c39aa4ff44d160dd0591f998e5da759c4de9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-posix-temp-bytestring#v:mkstemps&quot;&gt;mkstemps&lt;/a&gt;&lt;/code&gt; - make a unique filename with a given prefix and suffix and open it for reading/writing (only safe on GHC &amp;amp; Hugs). The returned &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#t:RawFilePath&quot;&gt;RawFilePath&lt;/a&gt;&lt;/code&gt; is the (possibly relative) path of the created file, which contains 6 random characters in between the prefix and suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bea2aa50741b2e7f2386613326bfd099a95d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:createProcess&quot;&gt;createProcess&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;(&lt;em&gt;mb_stdin_hdl&lt;/em&gt;, &lt;em&gt;mb_stdout_hdl&lt;/em&gt;, &lt;em&gt;mb_stderr_hdl&lt;/em&gt;, &lt;em&gt;ph&lt;/em&gt;)&lt;/code&gt;, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0c3cc659c266f87b433652ed3e05f145a2368e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33ffc652cd6edf400a46276eaaa778541643378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;system-process-internals#v:use_process_jobs&quot;&gt;use_process_jobs&lt;/a&gt;&lt;/code&gt; can be set in CreateProcess since 1.5.0.0 in order to create an I/O completion port to monitor a process tree's progress on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f52a0c6f660fe927ed21e05a3a1360d4ea9efe9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c49529901eea1e0cb2b493adedce1abc8b1a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af5a9904d9710409de9c4aebdf7e5361ebc65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92803927bf6a1f9b9f8b4ddc08877befa5fdd4e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e8fcc93dfde1032e0672527b4aa4de752f9942" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; . &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; equivalent to &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:lookAhead&quot;&gt;lookAhead&lt;/a&gt;&lt;/code&gt;, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6635c77539cf16fd391ec1952c7c92332d159d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-combinator#v:notFollowedBy&quot;&gt;notFollowedBy&lt;/a&gt; &lt;a href=&quot;text-parsercombinators-parsec-combinator#v:eof&quot;&gt;eof&lt;/a&gt;&lt;/code&gt;&lt;em&gt;never&lt;/em&gt; fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3d9cbc949cf6333e88d0ebc550d9fdbbf76c29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141a47d100bf17a87275869021f7f3028622c513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457174c44b409f24e8791008f7651eca30c9c696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26226ef68095c42422efb5c3d8302ac36a4708d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-annotated-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-annotated-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c2291fca5d52ef3b8e385c5f03a12ad549a5f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:-36--36-&quot;&gt;$$&lt;/a&gt;&lt;/code&gt; is associative, with identity &lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:empty&quot;&gt;empty&lt;/a&gt;&lt;/code&gt;, and also satisfies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32bc610caedfebea4dc059d18e1763813e85b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-prettyprint-hughespj#v:text&quot;&gt;text&lt;/a&gt; &quot;&quot; &lt;a href=&quot;text-prettyprint-hughespj#v:-60--62-&quot;&gt;&amp;lt;&amp;gt;&lt;/a&gt; x = x&lt;/code&gt;, if &lt;code&gt;x&lt;/code&gt; non-empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725f5858e606954b65734f12a822508079606c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-printf#v:printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; is also extensible to support other types: see below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0644a1d5dabe87d85072f10dfb2b9115091ba3c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:Read&quot;&gt;Read&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9cd267df7fcaca555ff4ca74cb25cf9a34b68b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cb59ebfa0eac4e107f95758f79cf34e98d7c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfeef58efc61d05d69245dec05258ba6ce9073b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6197b43c339862398a73fc7613d833b3a16c5f39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db3b7b54f5fc83a3fcfd970477f8aebb48a3cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:False&quot;&gt;False&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but optionally surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2044ace9d85fa680cc478309bd2f2ded048a2b39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readParen&quot;&gt;readParen&lt;/a&gt; &lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt; p&lt;/code&gt; parses what &lt;code&gt;p&lt;/code&gt; parses, but surrounded with parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9ff89d616e39145786ac040250d647eab33b9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6189616d11fa36d845ab24a61e5678894ac658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d3b65253e1a0e79d545366904f567a7720fddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;prelude#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44fdded4467ee56f959686fa369301287106b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt;, on the other hand, is based on a much more efficient &lt;code&gt;&lt;a href=&quot;text-parsercombinators-readprec#t:ReadPrec&quot;&gt;ReadPrec&lt;/a&gt;&lt;/code&gt; datatype (a.k.a &quot;new-style parsers&quot;), but its definition relies on the use of the &lt;code&gt;RankNTypes&lt;/code&gt; language extension. Therefore, &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; (and its cousin, &lt;code&gt;&lt;a href=&quot;text-read#v:readListPrec&quot;&gt;readListPrec&lt;/a&gt;&lt;/code&gt;) are marked as GHC-only. Nevertheless, it is recommended to use &lt;code&gt;&lt;a href=&quot;text-read#v:readPrec&quot;&gt;readPrec&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; whenever possible for the efficiency improvements it brings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25a064a5394131ced760c05653fc84a47396bf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55e89dc1b131b2fd55b8fd8b3cb60cfb042c4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-read#v:readsPrec&quot;&gt;readsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-read#v:readList&quot;&gt;readList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c815201524120824766c3dddd2008bb519e427" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e49af0b446f9ab9986d2b037bf28032ad9c217" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#t:Show&quot;&gt;Show&lt;/a&gt;&lt;/code&gt;ing a value of type &lt;code&gt;&lt;a href=&quot;data-dynamic#t:Dynamic&quot;&gt;Dynamic&lt;/a&gt;&lt;/code&gt; returns a pretty-printed representation of the object's type; useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e1a13168f31f937931e2e70ce16a2f67a0264d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:show&quot;&gt;show&lt;/a&gt; (Leaf 1 :^: Leaf 2 :^: Leaf 3)&lt;/code&gt; produces the string &lt;code&gt;&quot;Leaf 1 :^: (Leaf 2 :^: Leaf 3)&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f872106d8005b7af4744ef31052e2ecc016fcb23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type. The default implementation using standard list syntax is correct for most types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c5fb4ec796298a072bbc0df7dcab65babeaf7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types. The default implementation using standard list syntax is correct for most types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35b80b86962fdcf1594ced86e6e8402d3fdb4b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb41c0ec80e9802efc6886fc457bc595361ca2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; function for an application of the type constructor based on &lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;text-show#v:showList&quot;&gt;showList&lt;/a&gt;&lt;/code&gt; functions for the argument types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18c8f572d4c964d5cef3f1b56f579716e61ef57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;text-show#v:showsPrec&quot;&gt;showsPrec&lt;/a&gt;&lt;/code&gt; should satisfy the law</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8452d2c7d8573e6d8d7eebb138d036b0ba6609e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-mix#t:Mix&quot;&gt;Mix&lt;/a&gt;&lt;/code&gt; is the information about a modules static properties, like location of Tix's in a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3f75375d99611ab884a7c4628ca1086ff611c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-tix#t:Tix&quot;&gt;Tix&lt;/a&gt;&lt;/code&gt; is the storage format for our dynamic information about what boxes are ticked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8eaede1379a8ef516539cf75e1e62246c19952" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#t:HpcPos&quot;&gt;HpcPos&lt;/a&gt;&lt;/code&gt; is an Hpc local rendition of a Span.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222d13f1ef6a9c1b57a2f449156236fe67454407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:fromHpcPos&quot;&gt;fromHpcPos&lt;/a&gt;&lt;/code&gt; explodes the HpcPos into &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf707979d12a15b678a25d216452eb375b3ad48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;a href=&quot;trace-hpc-util#v:toHpcPos&quot;&gt;toHpcPos&lt;/a&gt;&lt;/code&gt; implodes to HpcPos, from &lt;em&gt;line:column&lt;/em&gt;-&lt;em&gt;line:column&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d85912577817b4928dad24283578df3ee994e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;appdata&lt;/em&gt;/ghc/ghci.conf&lt;/code&gt;, where ⟨appdata⟩ depends on your system, but is usually something like &lt;code&gt;C:/Documents and Settings/user/Application Data&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fc649da193d3bcdb6fb69df129ba6b19d78ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&lt;em&gt;size&lt;/em&gt;&lt;/code&gt; bytes from the &lt;code&gt;&lt;a href=&quot;https://downloads.haskell.org/~ghc/8.6.1/docs/html/libraries/ghc-prim-0.5.3/GHC-Prim.html#t:ByteArray-35-&quot;&gt;ByteArray#&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;em&gt;ba&lt;/em&gt;&lt;/code&gt; starting at &lt;code&gt;&lt;em&gt;offset&lt;/em&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cc56f9108b51d563dbeb568d126dd0908fa34e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Alternative&lt;/code&gt; wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b5ad560a36d111f7b170517bec1ad9c252b361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Applicative&lt;/code&gt; wrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded059f33997a34e4cb25713d008460b2ad90488" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; arithmetic operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e53fe9f571fb27c2541c25d32556160cbfe83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; comparison predicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d650170048a21327c9057e63a570ab7560de1b5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BigNat&lt;/code&gt; logic operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cced63202e4646943f1d5997420ad399053024" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Bool&lt;/code&gt; wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fac90529992fc3ed472546b3158d027f06fa86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Buggle&lt;/code&gt;, is compiled with &lt;code&gt;-XSafe&lt;/code&gt;, so the code is machine-checked to be OK, but again under the assumption that all of &lt;code&gt;Buggle&lt;/code&gt;&amp;lsquo;s imports are trusted by &lt;code&gt;C&lt;/code&gt;. We must recursively check all imports!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8776b69f579fb241ce32fd13622015e4d0b83de0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; shared substring: 5 words; 20 or 40 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7599c125a41ef345c4cf6708fab6e6948fb7ee1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ByteString&lt;/code&gt; unshared: 9 words; 36 or 72 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc938b5f924562545bcd6ad426f0bdc998312507" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; does not have any associated data families (only type families). To see why data families are forbidden, imagine the following scenario:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea75b2216d756d059065338554235079a07239d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to be different from &lt;code&gt;C'&lt;/code&gt;, but the right-hand sides of the type signatures must coincide. We require this because when you declare an empty instance for a class that uses &lt;a href=&quot;#extension-DefaultSignatures&quot;&gt;&lt;code&gt;DefaultSignatures&lt;/code&gt;&lt;/a&gt;, GHC implicitly fills in the default implementation like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278d10bb958aa2569a8ce66305104a3060e9a7bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is allowed to have associated type families, provided they meet the requirements laid out in the section on &lt;a href=&quot;#gnd-and-associated-types&quot;&gt;GND and associated types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c00311b73a3a04aff330aa580c1629544cc14f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;C&lt;/code&gt; is not &lt;code&gt;Read&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Typeable&lt;/code&gt;, or &lt;code&gt;Data&lt;/code&gt;. These classes should not &amp;ldquo;look through&amp;rdquo; the type or its constructor. You can still derive these classes for a newtype, but it happens in the usual way, not via this new mechanism. Confer with &lt;a href=&quot;#default-deriving-strategy&quot;&gt;Default deriving strategy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4e6723a7a8830f64b1c41d49bc7a4eb6985c7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas are only used by the pattern match checker. If a function definition matches on all the constructors specified in the pragma then the compiler will produce no warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3da2fa05cdf701d710001ae3f83641efe49d34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;COMPLETE&lt;/code&gt; pragmas can contain any data constructors or pattern synonyms which are in scope, but must mention at least one data constructor or pattern synonym defined in the same module. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas may only appear at the top level of a module. Once defined, they are automatically imported and exported from modules. &lt;code&gt;COMPLETE&lt;/code&gt; pragmas should be thought of as asserting a universal truth about a set of patterns and as a result, should not be used to silence context specific incomplete match warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9a0e6f6a0e8fc1df86ba13a59949dd847e7440" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CONLIKE&lt;/code&gt; is a modifier to an &lt;code&gt;INLINE&lt;/code&gt; or &lt;code&gt;NOINLINE&lt;/code&gt; pragma. It specifies that an application of &lt;code&gt;f&lt;/code&gt; to one argument (in general, the number of arguments to the left of the &lt;code&gt;=&lt;/code&gt; sign) should be considered cheap enough to duplicate, if such a duplication would make rule fire. (The name &amp;ldquo;CONLIKE&amp;rdquo; is short for &amp;ldquo;constructor-like&amp;rdquo;, because constructors certainly have such a property.) The &lt;code&gt;CONLIKE&lt;/code&gt; pragma is a modifier to INLINE/NOINLINE because it really only makes sense to match &lt;code&gt;f&lt;/code&gt; on the LHS of a rule if you are sure that &lt;code&gt;f&lt;/code&gt; is not going to be inlined before the rule has a chance to fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0776483d98a399bc40ea0c0a1e8f9c8c9ec7b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CallStack&lt;/code&gt; is kept abstract, but GHC provides a function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f472147735abc0cecb50b7cdcae7f9dffd268e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Coercible&lt;/code&gt; is a two-parameter class that has instances for types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; if the compiler can infer that they have the same representation. This class does not have regular instances; instead they are created on-the-fly during type-checking. Trying to manually declare an instance of &lt;code&gt;Coercible&lt;/code&gt; is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68695f75a6a8888c47fbc91891863a97d327aa92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreM&lt;/code&gt; is a monad that all of the Core optimizations live and operate inside of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6583859913f3d3f655e0c5fc1c133204e495bdd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CoreToDo&lt;/code&gt; is effectively a data type that describes all the kinds of optimization passes GHC does on Core. There are passes for simplification, CSE, etc. There is a specific case for plugins, &lt;code&gt;CoreDoPluginPass :: String -&amp;gt; PluginPass -&amp;gt; CoreToDo&lt;/code&gt; which should be what you always use when inserting your own pass into the pipeline. The first parameter is the name of the plugin, and the second is the pass you wish to insert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd16322bf8019d77331194eed535094f9511cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DW_TAG_ghc_src_note&lt;/code&gt; DIEs (tag 0x5b01) are found as children of &lt;code&gt;DW_TAG_lexical_block&lt;/code&gt; DIEs. They describe source spans which gave rise to the block; formally these spans are causally responsible for produced code: changes to code in the given span may change the code within the block; conversely changes outside the span are guaranteed not to affect the code in the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7c7d802a6dbb96171248964f81e77ab81fa0f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Data.List.splitAt&lt;/code&gt; is more strict than specified in the Report. Specifically, the Report specifies that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815ef066b033cb4c87bc7a18a2fa4cd277f22cb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Debug.Trace.traceStack&lt;/code&gt; is a version of &lt;code&gt;Debug.Trace.trace&lt;/code&gt; that also prints the current call stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e797232a0f92d29c8a2b102e9e7de61760c74bcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENT_HEAP_PROF_BEGIN&lt;/code&gt; * &lt;code&gt;Word8&lt;/code&gt;: Profile ID * &lt;code&gt;Word64&lt;/code&gt;: Sampling period in nanoseconds * &lt;code&gt;Word32&lt;/code&gt;: Sample break-down type. One of,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9207634d45dbefbc2744b89fe3e58b3b2c0fccc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENT_HEAP_PROF_COST_CENTRE&lt;/code&gt; * &lt;code&gt;Word32&lt;/code&gt;: cost centre number * &lt;code&gt;String&lt;/code&gt;: label * &lt;code&gt;String&lt;/code&gt;: module * &lt;code&gt;String&lt;/code&gt;: source location * &lt;code&gt;Word8&lt;/code&gt;: flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd421a9539ec516b7d974be014fdbdecda6423f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENT_HEAP_PROF_SAMPLE_BEGIN&lt;/code&gt; * &lt;code&gt;Word64&lt;/code&gt;: sample number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f00b31135cda5f8329a1e19a3e8bd9e18278d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENT_HEAP_PROF_SAMPLE_COST_CENTRE&lt;/code&gt; * &lt;code&gt;Word8&lt;/code&gt;: Profile ID * &lt;code&gt;Word64&lt;/code&gt;: heap residency in bytes * &lt;code&gt;Word8&lt;/code&gt;: stack depth * &lt;code&gt;Word32[]&lt;/code&gt;: cost centre stack starting with inner-most (cost centre numbers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2438fba78932a3feb2be3ae124820d7915265eb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EVENT_HEAP_PROF_SAMPLE_STRING&lt;/code&gt; * &lt;code&gt;Word8&lt;/code&gt;: Profile ID * &lt;code&gt;Word64&lt;/code&gt;: heap residency in bytes * &lt;code&gt;String&lt;/code&gt;: type or closure description, or module name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1100cc7824ba867b1412485db228fd16684f426f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Errno&lt;/code&gt; functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888974bc2aa26aaf4445c229662809d0f31e1715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ExceptT&lt;/code&gt; constructs a monad parameterized over two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5c6138e19bc23ad3c13556f8e70f0b98fb7c07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Floats&lt;/code&gt; (probably 32-bits) are almost always a bad idea, anyway, unless you Really Know What You Are Doing. Use &lt;code&gt;Double&lt;/code&gt;s. There&amp;rsquo;s rarely a speed disadvantage&amp;mdash;modern machines will use the same floating-point unit for both. With &lt;code&gt;Double&lt;/code&gt;s, you are much less likely to hang yourself with numerical errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955ed75750440fafd18815a2c675e276a49e5759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; deriving will produce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0678b9641a4a2d85d4305a811bf0abc62c93278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances are expected to satisfy the following laws:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dce461b4659e9b6b61c24b5f4524e648fc47d64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Foldable&lt;/code&gt; instances can be derived for data types in which the last type parameter is existentially constrained or refined in a GADT. For example, this data type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfc19a59e8f6e4775b559a0bc28b66c2ed86472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ForeignFunctionInterface&lt;/code&gt; &amp;mdash; Foreign import declarations that import a function with a non-&lt;code&gt;IO&lt;/code&gt; type are disallowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3911b91d2db2e249dba745cebf6cf6a5bd07ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FrontendPlugin&lt;/code&gt; exports a field &lt;code&gt;frontend&lt;/code&gt;, which is a function &lt;code&gt;[String] -&amp;gt; [(String, Maybe Phase)] -&amp;gt; Ghc ()&lt;/code&gt;. The first argument is a list of extra flags passed to the frontend with &lt;code&gt;-ffrontend-opt&lt;/code&gt;; the second argument is the list of arguments, usually source files and module names to be compiled (the &lt;code&gt;Phase&lt;/code&gt; indicates if an &lt;code&gt;-x&lt;/code&gt; flag was set), and a frontend simply executes some operation in the &lt;code&gt;Ghc&lt;/code&gt; monad (which, among other things, has a &lt;code&gt;Session&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e224ff13d4731a0e30f49bc73daccfc5e8a6efb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Generics&lt;/code&gt; &amp;mdash; Hand crafted instances of the &lt;code&gt;Generic&lt;/code&gt; type class are not allowed in Safe Haskell. Such instances aren&amp;rsquo;t strictly unsafe, but there is an important invariant that a &lt;code&gt;Generic&lt;/code&gt; instance should adhere to the structure of the data type for which the instance is defined, and allowing manually implemented &lt;code&gt;Generic&lt;/code&gt; instances would break that invariant. Derived instances (through the &lt;a href=&quot;glasgow_exts#extension-DeriveGeneric&quot;&gt;&lt;code&gt;DeriveGeneric&lt;/code&gt;&lt;/a&gt; extension) are still allowed. Note that the only allowed &lt;a href=&quot;glasgow_exts#deriving-strategies&quot;&gt;deriving strategy&lt;/a&gt; for deriving &lt;code&gt;Generic&lt;/code&gt; under Safe Haskell is &lt;code&gt;stock&lt;/code&gt;, as another strategy (e.g., &lt;code&gt;anyclass&lt;/code&gt;) would produce an instance that violates the invariant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30bec5effabc453c5c550dd66f484dff6b4e7c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack.HasCallStack&lt;/code&gt; is a lightweight method of obtaining a partial call-stack at any point in the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03dd505cec7bb9d9c1f6b491b23d69415fd128d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GHC.Stack&lt;/code&gt; additionally exports a function &lt;code&gt;withFrozenCallStack&lt;/code&gt; that allows users to freeze the current &lt;code&gt;CallStack&lt;/code&gt;, preventing any future push operations from having an effect. This can be used by library authors to prevent &lt;code&gt;CallStack&lt;/code&gt;s from exposing unnecessary implementation details. Consider the &lt;code&gt;myHead&lt;/code&gt; example above, the &lt;code&gt;errorWithCallStack&lt;/code&gt; line in the printed stack is not particularly enlightening, so we might choose to suppress it by freezing the &lt;code&gt;CallStack&lt;/code&gt; that we pass to &lt;code&gt;errorWithCallStack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacf23bdced212015af63b3a25cbc43c9f95175b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GeneralisedNewtypeDeriving&lt;/code&gt; &amp;mdash; GND is not allowed in the safe language. This is due to the ability of it to violate module boundaries when module authors forget to put nominal role annotations on their types as appropriate. For this reason, the &lt;code&gt;Data.Coerce&lt;/code&gt; module is also considered unsafe. We are hoping to find a better solution here in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c565ee148d058ead79d9d99b67aa40318a498ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Generic1&lt;/code&gt; is used for functions that can only be defined over type containers, such as &lt;code&gt;map&lt;/code&gt;. Note that &lt;code&gt;Generic1&lt;/code&gt; ranges over types of kind &lt;code&gt;Type -&amp;gt; Type&lt;/code&gt; by default, but if the &lt;a href=&quot;#extension-PolyKinds&quot;&gt;&lt;code&gt;PolyKinds&lt;/code&gt;&lt;/a&gt; extension is enabled, then it can range of types of kind &lt;code&gt;k -&amp;gt; Type&lt;/code&gt;, for any kind &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a148a88bda531280ce07277c149aeeb8b4a7fa46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_BIOGRAPHY&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hb&quot;&gt;&lt;code&gt;-hb&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068621d0e0e41ba086128590df0fff41e1584f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hd&quot;&gt;&lt;code&gt;-hd&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a8b71168176994430a3b85d67178e5de6130f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_CLOSURE_TYPE&lt;/code&gt; (output from &lt;a href=&quot;runtime_control#rts-flag--hT&quot;&gt;&lt;code&gt;-hT&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209a144514bd6e95585d78e3e5e19f871cad323d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_COST_CENTER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hc&quot;&gt;&lt;code&gt;-hc&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f451a9f63b51d74a46a9eb64ea0f9b88a970893b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_MODULE&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hm&quot;&gt;&lt;code&gt;-hm&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec935e2a6930cb421328847852dc23d457d013d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_RETAINER&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hr&quot;&gt;&lt;code&gt;-hr&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3e72b620b2d3d0650ba2a97060b270f6baaf16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HEAP_PROF_BREAKDOWN_TYPE_DESCR&lt;/code&gt; (output from &lt;a href=&quot;profiling#rts-flag--hy&quot;&gt;&lt;code&gt;-hy&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bc90056af6e8a8f92b1863498736e87ba72e93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Happy&lt;/code&gt; is at its shining best when compiled by GHC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7fb99a7c08e34fbbbc2b3dcaabb50bc04ddf4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HardwareFault&lt;/code&gt; A physical I/O error has occurred. &lt;code&gt;[EIO]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6068446cca90eb8d5dbf34bec50409f58be19461" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasCallStack&lt;/code&gt; does not interact with the RTS and does not require compilation with &lt;code&gt;-prof&lt;/code&gt;. On the other hand, as the &lt;code&gt;CallStack&lt;/code&gt; is built up explicitly via the &lt;code&gt;HasCallStack&lt;/code&gt; constraints, it will generally not contain as much information as the simulated call-stacks maintained by the RTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d8b1de1f8979e61e56730cc1889a483e11eac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField &quot;foo&quot; (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has a field &lt;code&gt;foo&lt;/code&gt; (but this instance is permitted if it does not).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5700fafed7e10df4a8c118fcd5e9263f0065a67b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ (T ...) _&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a data family (because it might have fields introduced later, using data instance declarations);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5264b03696796236f3d719c78abcae6b3f3f0a09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField _ r _&lt;/code&gt; where &lt;code&gt;r&lt;/code&gt; is a variable;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c05d6fdac6e1567fec438d0cdab0fc4afb3545" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField x (T ...) _&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a variable and &lt;code&gt;T&lt;/code&gt; has any fields at all (but this instance is permitted if &lt;code&gt;T&lt;/code&gt; has no fields);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aec9ce990f77203a5be3e65db8c8327be14721f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;HasField&lt;/code&gt; is a magic built-in typeclass (similar to &lt;code&gt;Coercible&lt;/code&gt;, for example). It is given special treatment by the constraint solver (see &lt;a href=&quot;#solving-hasfield-constraints&quot;&gt;Solving HasField constraints&lt;/a&gt;). Users may define their own instances of &lt;code&gt;HasField&lt;/code&gt; also (see &lt;a href=&quot;#virtual-record-fields&quot;&gt;Virtual record fields&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6cffe526f8b73f4e82196500374e9b8a6444bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;INLINE&lt;/code&gt; pragmas are a particularly good idea for the &lt;code&gt;then&lt;/code&gt;/&lt;code&gt;return&lt;/code&gt; (or &lt;code&gt;bind&lt;/code&gt;/&lt;code&gt;unit&lt;/code&gt;) functions in a monad. For example, in GHC&amp;rsquo;s own &lt;code&gt;UniqueSupply&lt;/code&gt; monad code, we have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901c047eb44abad4b6a88d748d755034c6f1a34d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with boxed elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a7b46391e9bb7b64c3bb83e7cfb74f064ef781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; arrays with unboxed elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f26bcff87f2c0e47ded7aaf0c02f1b461875f59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#v:newTBQueue&quot;&gt;newTBQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tbqueue#t:TBQueue&quot;&gt;TBQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;atomically&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fe5fae312067423e670caed31b21f21aec8380" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newBroadcastTChan&quot;&gt;newBroadcastTChan&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9b7f6d8c6458c0b9a3d3e1e7c193bde00e0212" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#v:newTChan&quot;&gt;newTChan&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tchan#t:TChan&quot;&gt;TChan&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ef9c249e5f24811698056e50aa29a49f5979ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newEmptyTMVar&quot;&gt;newEmptyTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d83f139640f1129d97354fe306d65833b8369d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#v:newTMVar&quot;&gt;newTMVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tmvar#t:TMVar&quot;&gt;TMVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484937d2e0bf82d0944b1c07d96b97da8a850617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#v:newTQueue&quot;&gt;newTQueue&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tqueue#t:TQueue&quot;&gt;TQueue&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf7e28509486375aa72745d0848d2365b51215d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;control-concurrent-stm-tvar#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;control-monad-stm#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516f29992eac640bfb59ed6888b6d20b2bbab2db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bceb1c379d548419d109f13f58a3de8d417d8817" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IO&lt;/code&gt; version of &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:newTVar&quot;&gt;newTVar&lt;/a&gt;&lt;/code&gt;. This is useful for creating top-level &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#t:TVar&quot;&gt;TVar&lt;/a&gt;&lt;/code&gt;s using &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt;, because using &lt;code&gt;&lt;a href=&quot;ghc-conc-sync#v:atomically&quot;&gt;atomically&lt;/a&gt;&lt;/code&gt; inside &lt;code&gt;&lt;a href=&quot;system-io-unsafe#v:unsafePerformIO&quot;&gt;unsafePerformIO&lt;/a&gt;&lt;/code&gt; isn't possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce0b487e317e9c5b653ea8d945068173ff933f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IOErrorType&lt;/code&gt; predicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec2892e99b7bf5db3e130e5a59572fb77c0cfde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9167ba62b64c56ed3fb570018b11a056ec8c14e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR, EISDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde883260c4267d5fd7e6f9499278487dbc99deb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; Either the destination path refers to an existing directory, or one of the parent segments in the destination path is not a directory. &lt;code&gt;[ENOTDIR, EISDIR, EINVAL, EEXIST, ENOTEMPTY]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19368a400e931bcc5f0723b99aa19e33c6f36db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing directory. &lt;code&gt;[EPERM, EINVAL]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d93edc091d9addc333a574a6fb146b6b670ded1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The operand refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2653bd58a2db75a12dbbb3dfbc2c005ae4a403db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[EEXIST]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c23c3e11cba77cebb16481b8ae3eb81980a2f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InappropriateType&lt;/code&gt; The path refers to an existing non-directory object. &lt;code&gt;[ENOTDIR]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e316f50b68392c3bf88565809d8d5921608e25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int#&lt;/code&gt;-boolean valued versions of comparison predicates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5af0835484c93acfce75dd1f0be2a7475a5843" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, and &lt;code&gt;Double&lt;/code&gt; arithmetic is &lt;em&gt;unchecked&lt;/em&gt;. Overflows, underflows and loss of precision are either silent or reported as an exception by the operating system (depending on the platform). Divide-by-zero &lt;em&gt;may&lt;/em&gt; cause an untrapped exception (please report it if it does).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99bc7e94a1d72caaafed95443b5f36b2617ac42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ababa591787c1343e9b7ad0aaab21ce4e69061" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; Either operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9840b1befc0df2612d36488b1b1d4ecccc5f414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid directory name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49c8b69035a45d96153fa175c98a2806e9feead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InvalidArgument&lt;/code&gt; The operand is not a valid file name. &lt;code&gt;[ENAMETOOLONG, ELOOP]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fd3d7a643641e7914c0691c98647c1656fdbcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ix&lt;/code&gt; is an orphan instance or a multi-parameter-type-class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf57a5f62276c3028a14efb3cc961be69551b17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Iy&lt;/code&gt; is not marked &lt;code&gt;OVERLAPPABLE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de88eab6cd0113c6c7ff7d763258bf2eb18a9bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LANGUAGE&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076d3164cc7f28be9ed21236444f2fb85c29cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LINE&lt;/code&gt; pragmas generated from Template Haskell set the file and line position for the duration of the splice and are limited to the splice. Note that because Template Haskell splices abstract syntax, the file positions are not automatically advanced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470d6dd2e7912f4907d0f83a0fcef8239178e8af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MVar&lt;/code&gt;s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e950852064463f2891ce5299025a3f0486b0f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Maybe&lt;/code&gt; wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1847b86db7d48ce524d541637255e35bc38b76a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;MkFoo1&lt;/code&gt; and &lt;code&gt;MkFoo2&lt;/code&gt; can be promoted, since their contexts only involve equality-oriented constraints. However, &lt;code&gt;MkFoo3&lt;/code&gt;&amp;lsquo;s context contains a non-equality constraint &lt;code&gt;Show a&lt;/code&gt;, and thus cannot be promoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db30a94611388e3ec6f6f7a0d10306ac89b36b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Monoid&lt;/code&gt; typeclass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce30fdd32f587a07c3ccd03a7589cbe882b388f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NFData&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec680a929ede9b766f3bf18664d11ed7399400a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NOTINLINE&lt;/code&gt; is a synonym for &lt;code&gt;NOINLINE&lt;/code&gt; (&lt;code&gt;NOINLINE&lt;/code&gt; is specified by Haskell 98 as the standard way to disable inlining, so it should be used if you want your code to be portable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cb5297978bdd0d73f9920f2cb94ca4e2c109d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NominalDiffTime&lt;/code&gt; and &lt;code&gt;DiffTime&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84f1d4a4b497e7078e729e86506cddd7bfb2b75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; instance, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c396e63bd9c44eeb55cdefadb405ee01a84408" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Num&lt;/code&gt; wrappers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339e7f1c84a18e65c7b455719bba422a3d544601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a &lt;em&gt;file-header pragma&lt;/em&gt; (see &lt;a href=&quot;glasgow_exts#options-pragma&quot;&gt;OPTIONS_GHC pragma&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59fff9df8173d07867cecfecb2c5ff2512242c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OPTIONS_GHC&lt;/code&gt; is a file-header pragma (see &lt;a href=&quot;#pragmas&quot;&gt;Pragmas&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7765f78f62ac1e9afb8eb0f2da33f6f7ea4ee12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;OverlappingInstances&lt;/code&gt; &amp;mdash; There is no restriction on the creation of overlapping instances, but we do restrict their use at a particular call site. This is a detailed restriction, please refer to &lt;a href=&quot;#safe-overlapping-instances&quot;&gt;Safe Overlapping Instances&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36255b2fbbb41ed1d004bec3abd13a6f6d816e9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ParsecT s u m a&lt;/code&gt; is a parser with stream type &lt;code&gt;s&lt;/code&gt;, user state type &lt;code&gt;u&lt;/code&gt;, underlying monad &lt;code&gt;m&lt;/code&gt; and return type &lt;code&gt;a&lt;/code&gt;. Parsec is strict in the user state. If this is undesirable, simply use a data type like &lt;code&gt;data Box a = Box a&lt;/code&gt; and the state type &lt;code&gt;Box YourStateType&lt;/code&gt; to add a level of indirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6af7ff9bda841f09ba07d97347830184d0f8f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Plugin&lt;/code&gt; exports a field, &lt;code&gt;installCoreToDos&lt;/code&gt; which is a function of type &lt;code&gt;[CommandLineOption] -&amp;gt; [CoreToDo] -&amp;gt; CoreM [CoreToDo]&lt;/code&gt;. A &lt;code&gt;CommandLineOption&lt;/code&gt; is effectively just &lt;code&gt;String&lt;/code&gt;, and a &lt;code&gt;CoreToDo&lt;/code&gt; is basically a function of type &lt;code&gt;Core -&amp;gt; Core&lt;/code&gt;. A &lt;code&gt;CoreToDo&lt;/code&gt; gives your pass a name and runs it over every compiled module when you invoke GHC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d3d0e89234b63e36a3e1abd25e28e36aa4ba6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Prelude&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a373f7633c479789271c23e1b1277df47fb78a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdD&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42b6f33dd8dd2f78ec60b0d48abb85f162e0cb84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PyYmMdDThHmMs[.sss]S&lt;/code&gt; (ISO 8601:2004(E) sec. 4.4.3.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961ff89792e76bad1270d0352029c98a7f2504d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RULES&lt;/code&gt; &amp;mdash; Rewrite rules defined in a module M compiled with &lt;a href=&quot;#extension-Safe&quot;&gt;&lt;code&gt;Safe&lt;/code&gt;&lt;/a&gt; are dropped. Rules defined in Trustworthy modules that &lt;code&gt;M&lt;/code&gt; imports are still valid and will fire as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68ff9c1328c6499c92ab6bc0d005a077e93ba0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Reader&lt;/code&gt; to run in the modified environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150747c346cb4043728e6aeb094f71c729c4ff44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RealWorld&lt;/code&gt; is deeply magical. It is &lt;em&gt;primitive&lt;/em&gt;, but it is not &lt;em&gt;unlifted&lt;/em&gt; (hence &lt;code&gt;ptrArg&lt;/code&gt;). We never manipulate values of type &lt;code&gt;RealWorld&lt;/code&gt;; it's only used in the type system, to parameterise &lt;code&gt;State#&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d8e5b60e541c9708c36f2eb66acc458855d367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScopedTypeVariables&lt;/code&gt; breaks GHC&amp;rsquo;s usual rule that explicit &lt;code&gt;forall&lt;/code&gt; is optional and doesn&amp;rsquo;t affect semantics. For the &lt;a href=&quot;#decl-type-sigs&quot;&gt;Declaration type signatures&lt;/a&gt; (or &lt;a href=&quot;#exp-type-sigs&quot;&gt;Expression type signatures&lt;/a&gt;) examples in this section, the explicit &lt;code&gt;forall&lt;/code&gt; is required. (If omitted, usually the program will not compile; in a few cases it will compile but the functions get a different signature.) To trigger those forms of &lt;code&gt;ScopedTypeVariables&lt;/code&gt;, the &lt;code&gt;forall&lt;/code&gt; must appear against the top-level signature (or outer expression) but &lt;em&gt;not&lt;/em&gt; against nested signatures referring to the same type variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8546de8393043d85df6466b8334ea2602c27fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Show&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; instances, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b045de224343a1c387b5019818791a2694ab3cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;State#&lt;/code&gt; is the primitive, unlifted type of states. It has one type parameter, thus &lt;code&gt;State# RealWorld&lt;/code&gt;, or &lt;code&gt;State# s&lt;/code&gt;, where s is a type variable. The only purpose of the type parameter is to keep different state threads separate. It is represented by nothing at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d953c49248db1d20798dbfecf150b0ea4f7ce454" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; and &lt;code&gt;StrictData&lt;/code&gt; only affects definitions in the module they are used in. Functions and data types imported from other modules are unaffected. For example, we won&amp;rsquo;t evaluate the argument to &lt;code&gt;Just&lt;/code&gt; before applying the constructor. Similarly we won&amp;rsquo;t evaluate the first argument to &lt;code&gt;Data.Map.findWithDefault&lt;/code&gt; before applying the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691f5268bc97c136ef0fd5624b38ea2322b13642" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Strict&lt;/code&gt; implies &lt;a href=&quot;#strict-data&quot;&gt;StrictData&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab68fe30de1834c2407e7d2cc3e965d8327927b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Biography filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac96b5031b77df4e051a07a8628edebd8d8b9bd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Closure description filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828827c4a462555cbd27487175c17eb5af20e685" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd397d881f95605a8a1624c0c1e46541c77ed119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Cost centre stack filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766256d50228d727faf935a0f569e1ea819a4474" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Module filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad54b46a3384c1f6d54893db00cf8b346306d510" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Retainer filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65175f99eb3eb09144f63eeba4ed2896107f996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt;: Type description filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593aedd04957fecb0ecd4a0d1682f6ecef4e48ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TemplateHaskell&lt;/code&gt; &amp;mdash; Can be used to gain access to constructors and abstract data types that weren&amp;rsquo;t exported by a module, subverting module boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a239272fe0fbb6f9e56ba6d7932a7c3e4ef6a90e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Typeable&lt;/code&gt; is kind-polymorphic (see &lt;a href=&quot;#kind-polymorphism&quot;&gt;Kind polymorphism&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52040b4bac337720bdaeb27d72d21766b604d15d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTCTime&lt;/code&gt; and &lt;code&gt;ZonedTime&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6bf75fee53246b618432df56bf7f00bae7355c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-16&lt;/code&gt;, &lt;code&gt;UTF-16BE&lt;/code&gt;, &lt;code&gt;UTF-16LE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83582f01952008dd81c27fec6422bc954d9d5f4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UTF-32&lt;/code&gt;, &lt;code&gt;UTF-32BE&lt;/code&gt;, &lt;code&gt;UTF-32LE&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b54c2f57fb807de8cc0df62106b648136974182" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY, ENOTEMPTY, EEXIST]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da250b3804989b0a72671f1b86ef79968ebb5238" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsatisfiedConstraints&lt;/code&gt; Implementation-dependent constraints are not satisfied. &lt;code&gt;[EBUSY]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0660b241338bccd2fb6cd29b6bb53ab9cc39c5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support removal in this situation. &lt;code&gt;[EINVAL]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d46558055619c14ce6a83bcc00dd667c816ea08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EINVAL, EXDEV]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc475e868fb74e8ba3bdab39d0aff97dc8489c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The implementation does not support renaming in this situation. &lt;code&gt;[EXDEV]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9545512e2aded1a5123c575c06b5c671197e8add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of application-specific data directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af063b48cb70612c9e31e94606b9d63a49558b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory, or the working directory cannot be dynamically changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d2661856a3cd03506f48fe4735aa425a9e11e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de72e737e54be81258b64fb7ba3aff517fab9709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of document directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20d062d31428763adab8d45ff072cb7e3756899" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db45167ed4c480f8e5ee5133b810c044467b5f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnsupportedOperation&lt;/code&gt; The operating system has no notion of temporary directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d187643c9b7dbe49cc293ea82ff2dfa5448a074" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMatched&lt;/code&gt; tactics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159616400a692c69b068d46bd4c970d467315dc5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WhenMissing&lt;/code&gt; tactics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dbcfd4aff3d285d540a23f09e537c93ce97438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[d| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a list of top-level declarations; the quotation has type &lt;code&gt;Q [Dec]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1e911488d0253fbdf7543f136d38edfc246336" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[p| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a pattern; the quotation has type &lt;code&gt;Q Pat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2025e48e0db384fd506f6cfd601352a1e0460961" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[t| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is a type; the quotation has type &lt;code&gt;Q Type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f1a9cdc8c400f772fa51edfe8a34908baf7581" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[varid| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an arbitrary string; a full description of the quasi-quotation facility is given in &lt;a href=&quot;#th-quasiquotation&quot;&gt;Template Haskell Quasi-quotation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0447e54062d56fc83577942673bc23adc6a785d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[| ... |]&lt;/code&gt;, or &lt;code&gt;[e| ... |]&lt;/code&gt;, where the &amp;rdquo;...&amp;rdquo; is an expression; the quotation has type &lt;code&gt;Q Exp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb1f60931044aab8e92659cfcd1fa7dd4353883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a * (b + c)&lt;/code&gt; = &lt;code&gt;(a * b) + (a * c)&lt;/code&gt; and &lt;code&gt;(b + c) * a&lt;/code&gt; = &lt;code&gt;(b * a) + (c * a)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7186a6c673d735648990c73c641adbe3bdd3474f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; &amp;mdash; enable all event classes listed above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149cba18745043c4326ac22f19718f7a6d529cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; must appear after &lt;code&gt;k&lt;/code&gt; in the declaration, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd7f136797a73d97f172726782cf449cc821102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum f&lt;/code&gt; takes an array and an association list and accumulates pairs from the list into the array with the accumulating function &lt;code&gt;f&lt;/code&gt;. Thus &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accumArray&quot;&gt;accumArray&lt;/a&gt;&lt;/code&gt; can be defined using &lt;code&gt;&lt;a href=&quot;data-array-iarray#v:accum&quot;&gt;accum&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2d0019a6be9362d0d370987d97b795ac5b5928" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accum&lt;/code&gt; is strict in all the results of applying the accumulation. However, it is lazy in the initial values of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c3c436ea0e922399fff00f11ab69e17acf33e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;data-array#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83233de3ba4aa8ca11ffaf932deec605d107e1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accumArray&lt;/code&gt; is strict in each result of applying the accumulating function, although it is lazy in the initial value. Thus, unlike arrays built with &lt;code&gt;&lt;a href=&quot;ghc-arr#v:array&quot;&gt;array&lt;/a&gt;&lt;/code&gt;, accumulated arrays should not in general be recursive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9923105636c6caa73cb09df905df6a129e309eff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCFinalizerToWeak# fptr ptr flag eptr w&lt;/code&gt; attaches a C function pointer &lt;code&gt;fptr&lt;/code&gt; to a weak pointer &lt;code&gt;w&lt;/code&gt; as a finalizer. If &lt;code&gt;flag&lt;/code&gt; is zero, &lt;code&gt;fptr&lt;/code&gt; will be called with one argument, &lt;code&gt;ptr&lt;/code&gt;. Otherwise, it will be called with two arguments, &lt;code&gt;eptr&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt;. &lt;code&gt;addCFinalizerToWeak#&lt;/code&gt; returns 1 on success, or 0 if &lt;code&gt;w&lt;/code&gt; is already dead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f49149e870aea23ae76be6e895338577892e46f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addCorePlugin m&lt;/code&gt; has almost the same effect as passing &lt;code&gt;-fplugin=m&lt;/code&gt; to ghc in the command line. The major difference is that the plugin module &lt;code&gt;m&lt;/code&gt; must not belong to the current package. When TH executes, it is too late to tell the compiler that we needed to compile first a plugin module in the current package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d279010765e6e6b900a3896b2e19ea792336d687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f41197b390a7a1589583f2062f9ff7711a6864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;anyclass&lt;/code&gt;: Use &lt;a href=&quot;#extension-DeriveAnyClass&quot;&gt;&lt;code&gt;DeriveAnyClass&lt;/code&gt;&lt;/a&gt; (see &lt;a href=&quot;#derive-any-class&quot;&gt;Deriving any other class&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4c5b8b1d0fbe5510c268591ea1736245a43d72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arg1 `Name` arg2&lt;/code&gt; or &lt;code&gt;arg1 op arg2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaf19cc340c9cf99a449248ea81553e1e61e914" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arithSeqE&lt;/code&gt; Shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41adaeb06038cb0ab2e6d98a6ec1c7cd61ee8445" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; (on its second argument)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ec368c080e175a9a031ae9ab42188f68c395a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;autoAddHistory&lt;/code&gt;: add nonblank lines to the command history (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt; by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdb0f8dc66ababee0bfcfeccddd70afba3e3f40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal iset&lt;/code&gt; suspends execution until an interrupt is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, &lt;code&gt;awaitSignal&lt;/code&gt; calls &lt;code&gt;sigsuspend&lt;/code&gt;, installing &lt;code&gt;s&lt;/code&gt; as the new signal mask before suspending execution; otherwise, it calls &lt;code&gt;sigsuspend&lt;/code&gt; with current signal mask. Note that RTS scheduler signal (either &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:virtualTimerExpired&quot;&gt;virtualTimerExpired&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:realTimeAlarm&quot;&gt;realTimeAlarm&lt;/a&gt;&lt;/code&gt;) could cause premature termination of this call. It might be necessary to block that signal before invocation of &lt;code&gt;awaitSignal&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;system-posix-signals#v:blockSignals&quot;&gt;blockSignals&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;system-posix-signals#v:reservedSignals&quot;&gt;reservedSignals&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eddccd6b130a969a4bbe6cdbe1b5a2f2a4ecc07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;awaitSignal&lt;/code&gt; returns when signal was received and processed by a signal handler, or if the signal could not be caught. If you have installed any signal handlers with &lt;code&gt;installHandler&lt;/code&gt;, it may be wise to call &lt;code&gt;yield&lt;/code&gt; directly after &lt;code&gt;awaitSignal&lt;/code&gt; to ensure that the signal handler runs as promptly as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5527e0647486b41cc4312b1d976476b7d23da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;. Returns the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0efed973c68857e9c777874430eb0a944f2fb18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;between open close p&lt;/code&gt; parses &lt;code&gt;open&lt;/code&gt;, followed by &lt;code&gt;p&lt;/code&gt; and finally &lt;code&gt;close&lt;/code&gt;. Only the value of &lt;code&gt;p&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59bced716aaa8611056a86795f00fa553ec80c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bit &lt;em&gt;i&lt;/em&gt;&lt;/code&gt; is a value with the &lt;code&gt;&lt;em&gt;i&lt;/em&gt;&lt;/code&gt;th bit set and all other bits clear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bb751a500bd875d7a338e20a5b8f74883baf0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blockSignals mask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; with &lt;code&gt;SIG_BLOCK&lt;/code&gt; to add all interrupts in &lt;code&gt;mask&lt;/code&gt; to the set of blocked interrupts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa85a6159c096b8d76aaf5324597df0c97865075" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buildExpressionParser table term&lt;/code&gt; builds an expression parser for terms &lt;code&gt;term&lt;/code&gt; with operators from &lt;code&gt;table&lt;/code&gt;, taking the associativity and precedence specified in &lt;code&gt;table&lt;/code&gt; into account. Prefix and postfix operators of the same precedence can only occur once (i.e. &lt;code&gt;--2&lt;/code&gt; is not allowed if &lt;code&gt;-&lt;/code&gt; is prefix negate). Prefix and postfix operators of the same precedence associate to the left (i.e. if &lt;code&gt;++&lt;/code&gt; is postfix increment, than &lt;code&gt;-2++&lt;/code&gt; equals &lt;code&gt;-1&lt;/code&gt;, not &lt;code&gt;-3&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad0cb08a7c9a3cf2d210817336c422f8de0001f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt; coverage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4f0b1c441a8fe302ce5fcf7e664d845e9fa265" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls a function with the current continuation as its argument. Provides an escape continuation mechanism for use with Continuation monads. Escape continuations allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-error#v:throwError&quot;&gt;throwError&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-error#v:catchError&quot;&gt;catchError&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-error#v:Error&quot;&gt;Error&lt;/a&gt;&lt;/code&gt; monad. Advantage of this function over calling &lt;code&gt;return&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control (see examples in &lt;a href=&quot;control-monad-cont&quot;&gt;Control.Monad.Cont&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ceae3c8a658aaa250e40e1e151e962d689447b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callCC&lt;/code&gt; (call-with-current-continuation) calls its argument function, passing it the current continuation. It provides an escape continuation mechanism for use with continuation monads. Escape continuations one allow to abort the current computation and return a value immediately. They achieve a similar effect to &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:throwE&quot;&gt;throwE&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:catchE&quot;&gt;catchE&lt;/a&gt;&lt;/code&gt; within an &lt;code&gt;&lt;a href=&quot;control-monad-trans-except#v:ExceptT&quot;&gt;ExceptT&lt;/a&gt;&lt;/code&gt; monad. The advantage of this function over calling &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/control-monad#v:return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is that it makes the continuation explicit, allowing more flexibility and better control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1b977fbb6cf876421ec8abbe31bbe12bcf60ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;canonicalizePath&lt;/code&gt; can resolve at least 64 indirections in a single path, more than what is supported by most operating systems. Therefore, it may return the fully resolved path even though the operating system itself would have long given up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dcb166d8a42d48877e184da7dd256de9be24bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are zero occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194ab257885ffa8cbd5692de9ec6b0aeef2c6c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ff236a28e78bb8481813277cfd6fb730a2afd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainl1 p op&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;left&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. This parser can for example be used to eliminate left recursion which typically occurs in expression grammars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ed2fa3e7c58bbb8e0801d890944be400e1a245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, the value &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c985ed0f65a6c5e10c4638ffd95ed75329f0609" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr p op x&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated by &lt;code&gt;op&lt;/code&gt;. Returns a value produced by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt;. If there are no occurrences of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16cb565d6d3d03fad93241fb30def31c12816cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chainr1 p op x&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of |p|, separated by &lt;code&gt;op&lt;/code&gt; Returns a value obtained by a &lt;em&gt;right&lt;/em&gt; associative application of all functions returned by &lt;code&gt;op&lt;/code&gt; to the values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2063898cc537ebd7e745780ddecfa292106d7e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changeWorkingDirectory dir&lt;/code&gt; calls &lt;code&gt;chdir&lt;/code&gt; to change the current working directory to &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052c109fb02bbddcf21e7a3e895f702c6cbe4d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;char c&lt;/code&gt; parses a single character &lt;code&gt;c&lt;/code&gt;. Returns the parsed character (i.e. &lt;code&gt;c&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74b913f338132524c6dc452f39e326e7016e390" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;choice ps&lt;/code&gt; tries to apply the parsers in the list &lt;code&gt;ps&lt;/code&gt; in order, until one of them succeeds. Returns the value of the succeeding parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062c2c8918d9490e5adc2e2a085dfd713939cbf7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0fa4497c830d4b56d4c13c5c623e1dc2dbc3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closeDirStream dp&lt;/code&gt; calls &lt;code&gt;closedir&lt;/code&gt; to close the directory stream &lt;code&gt;dp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea4a17d2d326c8280f997479099e349bd994f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compareByteArrays# src1 src1_ofs src2 src2_ofs n&lt;/code&gt; compares &lt;code&gt;n&lt;/code&gt; bytes starting at offset &lt;code&gt;src1_ofs&lt;/code&gt; in the first &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src1&lt;/code&gt; to the range of &lt;code&gt;n&lt;/code&gt; bytes (i.e. same length) starting at offset &lt;code&gt;src2_ofs&lt;/code&gt; of the second &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src2&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. Returns an &lt;code&gt;Int#&lt;/code&gt; less than, equal to, or greater than zero if the range is found, respectively, to be byte-wise lexicographically less than, to match, or be greater than the second range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e544d236b45af1423cd3bc87ffb5df232a61481e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const x&lt;/code&gt; is a unary function which evaluates to &lt;code&gt;x&lt;/code&gt; for all inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f12c013af092c4fde3972020484445440d928a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;controlFlow fd action&lt;/code&gt; calls &lt;code&gt;tcflow&lt;/code&gt; to control the flow of data on &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by &lt;code&gt;action&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4520bb319d4ec6dac65138fd7754f5a137bf16e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copyByteArray# src src_ofs dst dst_ofs n&lt;/code&gt; copies the range starting at offset &lt;code&gt;src_ofs&lt;/code&gt; of length &lt;code&gt;n&lt;/code&gt; from the &lt;code&gt;ByteArray#&lt;/code&gt;&lt;code&gt;src&lt;/code&gt; to the &lt;code&gt;MutableByteArray#&lt;/code&gt;&lt;code&gt;dst&lt;/code&gt; starting at offset &lt;code&gt;dst_ofs&lt;/code&gt;. Both arrays must fully contain the specified ranges, but this is not checked. The two arrays must not be the same array in different states, but this is not checked either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a9a6ad988ae4dd809544f37834df439c94aeb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt; in sequence. A list of results is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3ab7cc4ff01c7961fe0a527f57426f6bcf5c6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count n p&lt;/code&gt; parses &lt;code&gt;n&lt;/code&gt; occurrences of &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is smaller or equal to zero, the parser equals to &lt;code&gt;return []&lt;/code&gt;. Returns a list of &lt;code&gt;n&lt;/code&gt; values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e830eb32578a6325a39011990994921443ead963" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2dd5362da4181a22373ec75833e78ad69887b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDevice path mode dev&lt;/code&gt; creates either a regular or a special file depending on the value of &lt;code&gt;mode&lt;/code&gt; (and &lt;code&gt;dev&lt;/code&gt;). &lt;code&gt;mode&lt;/code&gt; will normally be either &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:blockSpecialMode&quot;&gt;blockSpecialMode&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;system-posix-files-bytestring#v:characterSpecialMode&quot;&gt;characterSpecialMode&lt;/a&gt;&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4db2b138b3574750e07f04c89c2cc7fbde2fdc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createDirectory dir mode&lt;/code&gt; calls &lt;code&gt;mkdir&lt;/code&gt; to create a new directory, &lt;code&gt;dir&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58e82da0a7fba5c9695024c0d36d817d9035005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createLink old new&lt;/code&gt; creates a new path, &lt;code&gt;new&lt;/code&gt;, linked to an existing file, &lt;code&gt;old&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1232f65b6cf592ca37036cb00c10cd711926dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-bytestring-filepath#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ad04d1d6775e833f76121193627201a6e247a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createNamedPipe fifo mode&lt;/code&gt; creates a new named pipe, &lt;code&gt;fifo&lt;/code&gt;, with permissions based on &lt;code&gt;mode&lt;/code&gt;. May fail with &lt;code&gt;&lt;a href=&quot;system-posix-error#v:throwErrnoPathIfMinus1_&quot;&gt;throwErrnoPathIfMinus1_&lt;/a&gt;&lt;/code&gt; if a file named &lt;code&gt;name&lt;/code&gt; already exists or if the effective user ID of the current process doesn't have permission to create the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee9efc00efab99d5643207aebaa92809f127e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;createSymbolicLink file1 file2&lt;/code&gt; creates a symbolic link named &lt;code&gt;file2&lt;/code&gt; which points to the file &lt;code&gt;file1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fbc8e436d708733f29d632bb7c387b44f62477" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df60e7df637060c0210c29137e93f51d157ff540" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultPlugin&lt;/code&gt; defines &lt;code&gt;pluginRecompile&lt;/code&gt; to be &lt;code&gt;impurePlugin&lt;/code&gt; which is the most conservative and backwards compatible option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8ac8ba952e96f2f584ff153d1e0d2c50fbb8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;discardData fd queues&lt;/code&gt; calls &lt;code&gt;tcflush&lt;/code&gt; to discard pending input and/or output for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;, as indicated by the &lt;code&gt;QueueSelector&lt;/code&gt;&lt;code&gt;queues&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653522ba69eccab6c77a8c5417dd32997d59a2ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dlopen(3)&lt;/code&gt; and friends Derived from &lt;code&gt;GModule.chs&lt;/code&gt; by M.Weber &amp;amp; M.Chakravarty which is part of c2hs. I left the API more or less the same, mostly the flags are different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef46bdd157c3375114408f775493150852e02e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drainOutput fd&lt;/code&gt; calls &lt;code&gt;tcdrain&lt;/code&gt; to block until all output written to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt; has been transmitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d76e6c62116a09c7ea69142e3b355a99f57dbfe8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dup2 source target&lt;/code&gt; replaces the target device with the source device. The target device is closed first, if necessary, and then it is made into a duplicate of the first device (like Unix &lt;code&gt;dup2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554a03aaac855cf87b3e1e6f5b648cb30d35ab3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466c8896289ba5414e01061af7677aabe076c33c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86251c46011752870f8ac6831c8af890201af68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt;: the element type of the array. Only certain element types are supported: see &lt;a href=&quot;data-array-marray&quot;&gt;Data.Array.MArray&lt;/a&gt; for a list of instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57723498d28290c18a0e14ab2d7a1a61c416dc3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses &lt;em&gt;zero&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ea67996444d2042ff0261a1d87529799f87f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses one or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311ae2cbe599a5740080499a38949d85bd6cacaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy p sep&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1116ff23b47ec9512b9459f3a2fdaf213daad63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endBy1 p sep&lt;/code&gt; parses &lt;em&gt;one&lt;/em&gt; or more occurrences of &lt;code&gt;p&lt;/code&gt;, separated and ended by &lt;code&gt;sep&lt;/code&gt;. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4bfd1c817ef4eb16eb5e85f5174941b1fb2639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epochTime&lt;/code&gt; calls &lt;code&gt;time&lt;/code&gt; to obtain the number of seconds that have elapsed since the epoch (Jan 01 00:00:00 GMT 1970).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b22431113363995e02522f9f91315f345d06cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; automatically attach the current stack to the error message. This often complements the &lt;code&gt;HasCallStack&lt;/code&gt; stack (see &lt;a href=&quot;glasgow_exts#hascallstack&quot;&gt;HasCallStack&lt;/a&gt;), so both call stacks are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51b9aa0edf648e3722c4daac57a257721f19863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (a + b)&lt;/code&gt; = &lt;code&gt;exp a * exp b&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac0e4af0d48ad50e7fd3f23c631168d62f509d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp (fromInteger 0)&lt;/code&gt; = &lt;code&gt;fromInteger 1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b126a049558f379fb47e63dbe3b5d5892512a2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f1&lt;/code&gt; is a function binding, and &lt;code&gt;f2&lt;/code&gt; binds a bare variable; in both cases the type signature brings &lt;code&gt;a&lt;/code&gt; into scope. However the binding for &lt;code&gt;f3&lt;/code&gt; is a pattern binding, and so &lt;code&gt;f3&lt;/code&gt; is a fresh variable brought into scope by the pattern, not connected with top level &lt;code&gt;f3&lt;/code&gt;. Then type variable &lt;code&gt;a&lt;/code&gt; is not in scope of the right-hand side of &lt;code&gt;Just f3 = ...&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088aadfe34e0c8fec30aa1426daa42c266d37c9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; &amp;mdash; parallel sparks (fully accurate). Disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21ee40c92d51b07b0a214a5537689b1a9fe1a5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; does not use an explicit &lt;code&gt;forall&lt;/code&gt;, so type variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are brought into scope implicitly. &lt;code&gt;g&lt;/code&gt; quantifies both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; explicitly. Both &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt; work today and will continue to work in the future because they adhere to the &amp;ldquo;forall-or-nothing&amp;rdquo; rule: either all type variables in a function definition are introduced explicitly or implicitly, there is no middle ground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d648ac806ab27c3b6b97ebdc3984b377a4b72d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a fraction with the same type and sign as &lt;code&gt;x&lt;/code&gt;, and with absolute value less than &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f56fbf9b84fe774bb4706812a58a48678a4d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a record field of constructor &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7e42d0dcecec88b5b553f7ca529848310abd69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fileAccess name read write exec&lt;/code&gt; checks if the file (or other file system object) &lt;code&gt;name&lt;/code&gt; can be accessed for reading, writing and/or executing. To check a permission set the corresponding argument to &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841b2ff8e1b534d6b7ff33e50bc7b8b488c6d4f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findFilesWith predicate dirs name&lt;/code&gt; searches through the list of directories (&lt;code&gt;dirs&lt;/code&gt;) for files that have the given &lt;code&gt;name&lt;/code&gt; and satisfy the given &lt;code&gt;predicate&lt;/code&gt; ands return the paths of those files. The directories are checked in a left-to-right order and the paths are returned in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be93079f8a7e644b25fa4bf9cbf3c7628d158741" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first&lt;/code&gt; returns its first argument if it is non-empty, otherwise its second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b836363d9e5a185a08c9082ffa2e4a6e0db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forall&lt;/code&gt;&amp;lsquo;s in type signatures:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13628c7bed0f5a87fd30a4a8c34334306d16fb22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force x&lt;/code&gt; fully evaluates &lt;code&gt;x&lt;/code&gt;, and then returns it. Note that &lt;code&gt;force x&lt;/code&gt; only performs evaluation when the value of &lt;code&gt;force x&lt;/code&gt; itself is demanded, so essentially it turns shallow evaluation into deep evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d98f965de72b886a03781bc735bd86909818e22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;g&lt;/code&gt; &amp;mdash; GC events, including GC start/stop. Enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b249929568260bd2badbaaecf85c48a21a93b9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllGroupEntries&lt;/code&gt; returns all group entries on the system by repeatedly calling &lt;code&gt;getgrent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155ffebaf7cac1b73e60ff3d2c7fabfebde64da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getAllUserEntries&lt;/code&gt; returns all user entries on the system by repeatedly calling &lt;code&gt;getpwent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62311d6fe39b7f73808772e922af25463f96b74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getControllingTerminalName&lt;/code&gt; calls &lt;code&gt;ctermid&lt;/code&gt; to obtain a name associated with the controlling terminal for the process. If a controlling terminal exists, &lt;code&gt;getControllingTerminalName&lt;/code&gt; returns the name of the controlling terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b48c75090f4029b19deb63392b19507171798cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveGroupID&lt;/code&gt; calls &lt;code&gt;getegid&lt;/code&gt; to obtain the effective &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1466a085d0563a0c255277828065f309f7b37c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserID&lt;/code&gt; calls &lt;code&gt;geteuid&lt;/code&gt; to obtain the effective &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0a78700d175452cf4149f703baaec00541475e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEffectiveUserName&lt;/code&gt; gets the name associated with the effective &lt;code&gt;UserID&lt;/code&gt; of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb694fd7dcf596ee545e8885cab4fbd6764ef189" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdPathVar var fd&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with the file or directory attached to the open channel &lt;code&gt;fd&lt;/code&gt;. For defined file limits, &lt;code&gt;getFdPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getFdPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3b2f46830208e498ebfb2dd49b7cdea145897b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFdStatus fd&lt;/code&gt; acts as &lt;code&gt;getFileStatus&lt;/code&gt; but uses a file descriptor &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8b63428c73d4d68ccfd8d495d890a2bc5622c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getFileStatus path&lt;/code&gt; calls gets the &lt;code&gt;FileStatus&lt;/code&gt; information (user ID, size, access times, etc.) for the file &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cff64807ddc91673ba59fad3ef5ccfcf0c7cb5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForID gid&lt;/code&gt; calls &lt;code&gt;getgrgid_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with &lt;code&gt;GroupID&lt;/code&gt;&lt;code&gt;gid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe752f53b58c7fc3973e306b5d9be8e8c0d7e0d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroupEntryForName name&lt;/code&gt; calls &lt;code&gt;getgrnam_r&lt;/code&gt; to obtain the &lt;code&gt;GroupEntry&lt;/code&gt; information associated with the group called &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such group exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13de22006fa5622016e7393522a11015373b3d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getGroups&lt;/code&gt; calls &lt;code&gt;getgroups&lt;/code&gt; to obtain the list of supplementary &lt;code&gt;GroupID&lt;/code&gt;s associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85af0049a29319ae7de0479eb0f344f0e66f16b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getLoginName&lt;/code&gt; calls &lt;code&gt;getlogin&lt;/code&gt; to obtain the login name associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbddb8a78d2ffe61237c26bedc39c18a07770790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPathVar var path&lt;/code&gt; obtains the dynamic value of the requested configurable file limit or option associated with file or directory &lt;code&gt;path&lt;/code&gt;. For defined file limits, &lt;code&gt;getPathVar&lt;/code&gt; returns the associated value. For defined file options, the result of &lt;code&gt;getPathVar&lt;/code&gt; is undefined, but not failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d396e74c45dc35a39ef497b1e2868eefb84330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getPendingSignals&lt;/code&gt; calls &lt;code&gt;sigpending&lt;/code&gt; to obtain the set of interrupts which have been received but are currently blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d58ff35678f8b2b29a5d781fabf1cb87c05f81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealGroupID&lt;/code&gt; calls &lt;code&gt;getgid&lt;/code&gt; to obtain the real &lt;code&gt;GroupID&lt;/code&gt; associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3a1137f3fbbbc0823d11c9ceed084d0845b810" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getRealUserID&lt;/code&gt; calls &lt;code&gt;getuid&lt;/code&gt; to obtain the real &lt;code&gt;UserID&lt;/code&gt; associated with the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0848532c3948ab0f2e080e8d8f66facf8bf125" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSignalMask&lt;/code&gt; calls &lt;code&gt;sigprocmask&lt;/code&gt; to determine the set of interrupts which are currently being blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45792ac1182ddb07da8ad701cd5db05b437b3f26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getSlaveTerminalName&lt;/code&gt; calls &lt;code&gt;ptsname&lt;/code&gt; to obtain the name of the slave terminal associated with a pseudoterminal pair. The file descriptor to pass in must be that of the master.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9d53296999bcb92b005cdf6ca8476ec18bb8a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalAttributes fd&lt;/code&gt; calls &lt;code&gt;tcgetattr&lt;/code&gt; to obtain the &lt;code&gt;TerminalAttributes&lt;/code&gt; associated with &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aabec5d2ccf6dc660c81c4d3db77eeda5c51c5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalName fd&lt;/code&gt; calls &lt;code&gt;ttyname&lt;/code&gt; to obtain a name associated with the terminal for &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;. If &lt;code&gt;fd&lt;/code&gt; is associated with a terminal, &lt;code&gt;getTerminalName&lt;/code&gt; returns the name of the terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f737b45d8d4b7f86b0a85afaefa9c1d471e82657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTerminalProcessGroupID fd&lt;/code&gt; calls &lt;code&gt;tcgetpgrp&lt;/code&gt; to obtain the &lt;code&gt;ProcessGroupID&lt;/code&gt; of the foreground process group associated with the terminal attached to &lt;code&gt;Fd&lt;/code&gt;&lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87891a3f9d6eb6431b9cf1cc3d718af57ed5829e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getTixFullName&lt;/code&gt; takes a binary or &lt;code&gt;.tix&lt;/code&gt;-file name, and normalizes it into a &lt;code&gt;.tix&lt;/code&gt;-file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b494258c10daa9a0f93006d5602ef7fcbcfd7fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForID gid&lt;/code&gt; calls &lt;code&gt;getpwuid_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with &lt;code&gt;UserID&lt;/code&gt;&lt;code&gt;uid&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9764223ee5da6492f2036b20551c5a6d64e8faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getUserEntryForName name&lt;/code&gt; calls &lt;code&gt;getpwnam_r&lt;/code&gt; to obtain the &lt;code&gt;UserEntry&lt;/code&gt; information associated with the user login &lt;code&gt;name&lt;/code&gt;. This operation may fail with &lt;code&gt;&lt;a href=&quot;../base-4.12.0.0/system-io-error#v:isDoesNotExistError&quot;&gt;isDoesNotExistError&lt;/a&gt;&lt;/code&gt; if no such user exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8740046480f41b804442de90b74552696ab9e20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getWorkingDirectory&lt;/code&gt; calls &lt;code&gt;getcwd&lt;/code&gt; to obtain the name of the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4762bc4b56e65e8b8a41059f063dd83d23d621b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;graph :: Graph&lt;/code&gt; is the raw, array based adjacency list for the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79558186bcedb7ea80b05cefae0ea91dd4a1a9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7149c630b16c4633db4eba03d7f955c96e250e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;haystack&lt;/code&gt; in which to search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f32f6945456e580108cadc3338cc8b49521e04a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hh:mm:ss[.sss]&lt;/code&gt; (ISO 8601:2004(E) sec. 4.2.2.2, 4.2.2.4(a) extended format)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a73e769e2f0e725e70eea0a5095b2b787c516ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;historyFile&lt;/code&gt;: read/write the history to a file before and after the line input session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c698564f1a7e7c33afd149f30061f586392287cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc combine&lt;/code&gt; is the swiss army knife of &lt;code&gt;hpc&lt;/code&gt;. It can be used to take the difference between &lt;code&gt;.tix&lt;/code&gt; files, to subtract one &lt;code&gt;.tix&lt;/code&gt; file from another, or to add two &lt;code&gt;.tix&lt;/code&gt; files. hpc combine does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c21af023ae06fb4936ed44b4cdebc2dee607a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc markup&lt;/code&gt; marks up source files into colored html.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7243cfbd88573b525191ebf4ad35c0dcbe0f0b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc report&lt;/code&gt; gives a textual report of coverage. By default, all modules and packages are considered in generating report, unless include or exclude are used. The report is a summary unless the &lt;code&gt;--per-module&lt;/code&gt; flag is used. The &lt;code&gt;--xml-output&lt;/code&gt; option allows for tools to use hpc to glean coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3252f4e6796500fd704525666c9774a65171e975" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hpc sum&lt;/code&gt; adds together any number of &lt;code&gt;.tix&lt;/code&gt; files into a single &lt;code&gt;.tix&lt;/code&gt; file. &lt;code&gt;hpc sum&lt;/code&gt; does not change the original &lt;code&gt;.tix&lt;/code&gt; file; it generates a new &lt;code&gt;.tix&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcb7093805a2f32af47e2a28fbdb5856337eb0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hs_exit()&lt;/code&gt; normally causes the termination of any running Haskell threads in the system, and when &lt;code&gt;hs_exit()&lt;/code&gt; returns, there will be no more Haskell threads running. The runtime will then shut down the system in an orderly way, generating profiling output and statistics if necessary, and freeing all the memory it owns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158445a439d4ff5a6a7d5923dbb75384af873d21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; normally operates by creating, compiling, and running a C program. That approach doesn&amp;rsquo;t work when cross-compiling &amp;mdash; in this case, the C compiler&amp;rsquo;s generates code for the target machine, not the host machine. For this situation, there&amp;rsquo;s a special mode &lt;code&gt;hsc2hs --cross-compile&lt;/code&gt; which can generate the .hs by extracting information from compilations only &amp;mdash; specifically, whether or not compilation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99d4db11281b54a6773aae14f2c6331f47f456e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsc2hs&lt;/code&gt; takes input files as arguments, and flags that modify its behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c128fada72033616aaef08247531117855db892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsig&lt;/code&gt; files are written in a variant of Haskell similar to &lt;code&gt;hs-boot&lt;/code&gt; files, but with some slight changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffb7b4d60dfc9369148b986d5c58f8a5d0a5726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db798c17f327bae423b0e022cc72a3fe7bfec9cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;data-ix#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180d4e808183a0bb9849f66107190e0a00a9ef78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;&lt;a href=&quot;ghc-arr#t:Ix&quot;&gt;Ix&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617a65d4ddc0f8fa29d5630aad7e1b8a5082dbf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt;: the index type of the array (should be an instance of &lt;code&gt;Ix&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f54123d67fec07d114ce05638f1a7715e824f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;installHandler int handler iset&lt;/code&gt; calls &lt;code&gt;sigaction&lt;/code&gt; to install an interrupt handler for signal &lt;code&gt;int&lt;/code&gt;. If &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;SIG_DFL&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Ignore&lt;/code&gt;, &lt;code&gt;SIG_IGN&lt;/code&gt; is installed; if &lt;code&gt;handler&lt;/code&gt; is &lt;code&gt;Catch action&lt;/code&gt;, a handler is installed which will invoke &lt;code&gt;action&lt;/code&gt; in a new thread when (or shortly after) the signal is received. If &lt;code&gt;iset&lt;/code&gt; is &lt;code&gt;Just s&lt;/code&gt;, then the &lt;code&gt;sa_mask&lt;/code&gt; of the &lt;code&gt;sigaction&lt;/code&gt; structure is set to &lt;code&gt;s&lt;/code&gt;; otherwise it is cleared. The previously installed signal handler for &lt;code&gt;int&lt;/code&gt; is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2735fff850fb0ce80ad1b2ea06ae65280146117c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interruptible&lt;/code&gt; behaves exactly as &lt;code&gt;safe&lt;/code&gt;, except that when a &lt;code&gt;throwTo&lt;/code&gt; is directed at a thread in an interruptible foreign call, an OS-specific mechanism will be used to attempt to cause the foreign call to return:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b48731a8a7e22b2dcac8d4798c86a629568e47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iterate&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3895b019e0a39f76ec6015b7f84c618a1850f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; is chosen so that &lt;code&gt;C t1..tj (T v1...vk)&lt;/code&gt; is well-kinded. (Or, in the case of a &lt;code&gt;data instance&lt;/code&gt;, so that &lt;code&gt;C t1..tj (T s1..sk)&lt;/code&gt; is well kinded.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622e7af3e93d01a6d8d5dc33d97ddfe36bec9e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;k&lt;/code&gt; must appear explicitly in the kind of &lt;em&gt;some&lt;/em&gt; type variable in that declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d303bf07ef6fd38f12c9c9c2623f4ab1cdfe97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; the object linker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283469c10fca69b6183207317811536889b814a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab75ab10eb3e1a67279f20cdfe9db09933d97808" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lexeme p&lt;/code&gt; first applies parser &lt;code&gt;p&lt;/code&gt; and then the &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-token#v:whiteSpace&quot;&gt;whiteSpace&lt;/a&gt;&lt;/code&gt; parser, returning the value of &lt;code&gt;p&lt;/code&gt;. Every lexical token (lexeme) is defined using &lt;code&gt;lexeme&lt;/code&gt;, this way every parse starts at a point without white space. Parsers that use &lt;code&gt;lexeme&lt;/code&gt; are called &lt;em&gt;lexeme&lt;/em&gt; parsers in this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d24678ad2c8b5597e9f0ac0655b8161c2e0827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookAhead p&lt;/code&gt; parses &lt;code&gt;p&lt;/code&gt; without consuming any input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8260c972c6f5f473130a0d9d8505bde17b521f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; - The inner monad.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2469e47161db63f9190e78307eaf5fe489c6f0fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; does not introduce one of the variables, &lt;code&gt;b&lt;/code&gt;, and thus is rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccdfdf9e6a52d5ec89e3c0b202b8b38f2042c49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8386ca93afe24efb128ad974653e26fa09db4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;many1 p&lt;/code&gt; applies the parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;one&lt;/em&gt; or more times. Returns a list of the returned values of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532542dcaa9192e88329138dac2196c78bce7c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; applies parser &lt;code&gt;p&lt;/code&gt;&lt;em&gt;zero&lt;/em&gt; or more times until parser &lt;code&gt;end&lt;/code&gt; succeeds. Returns the list of values returned by &lt;code&gt;p&lt;/code&gt;. This parser can be used to scan comments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd84809de445a13b8fa6c8bf6e31f5e5e33ad2ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manyTill p end&lt;/code&gt; parses zero or more occurrences of &lt;code&gt;p&lt;/code&gt;, until &lt;code&gt;end&lt;/code&gt; succeeds. Returns a list of values returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e00baf13c159c42b130a388fa7c68571d949d3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt;&lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;T t . &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; = &lt;a href=&quot;control-monad-trans-class#v:lift&quot;&gt;lift&lt;/a&gt; . t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff044cde3ea44699eaa1733d0c06230bf5e937bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mappend&lt;/code&gt; takes the longer of two lifetimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb09e948d69668b5b23f295b4403b0940d6ca175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee5f7e457014efc55712b28856e1e8c43cc3a2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max x y == if x &amp;gt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d6f36a3f246953bf407b238d5d4b4956e89839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mergeA&lt;/code&gt; will first &quot;align&quot; these maps by key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07564f3f6292128b7fb23deab444d624083a69a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;data-bool#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5baaa477d2b0357e85c24cc65b9a0c8db647b2d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min x y == if x &amp;lt;= y then x else y&lt;/code&gt; = &lt;code&gt;&lt;a href=&quot;prelude#v:True&quot;&gt;True&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc58927959aeb9dab3dc72ab465ca570a504b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mkWeak# k v finalizer s&lt;/code&gt; creates a weak reference to value &lt;code&gt;k&lt;/code&gt;, with an associated reference to some value &lt;code&gt;v&lt;/code&gt;. If &lt;code&gt;k&lt;/code&gt; is still alive then &lt;code&gt;v&lt;/code&gt; can be retrieved using &lt;code&gt;deRefWeak#&lt;/code&gt;. Note that the type of &lt;code&gt;k&lt;/code&gt; must be represented by a pointer (i.e. of kind &lt;code&gt;TYPE 'LiftedRep&lt;/code&gt; or &lt;code&gt;TYPE 'UnliftedRep&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f980f294fcd0aaa83bf0434a1d2798b56e011816" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modifyState f&lt;/code&gt; applies function &lt;code&gt;f&lt;/code&gt; to the user state. Suppose that we want to count identifiers in a source, we could use the user state as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e460b94b8a438c08063c41e5f7e745a074b16b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; could be a Haskell source filename with or without the extension. If for some reason the filename starts with a &lt;code&gt;-&lt;/code&gt; you can use a second &lt;code&gt;--&lt;/code&gt; to indicate the end of flags. Anything following a second &lt;code&gt;--&lt;/code&gt; will be considered a program file or module name followed by its arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856fcb98eadbb78f6ce119264b935b6e706ee599" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is an integral number with the same sign as &lt;code&gt;x&lt;/code&gt;; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d513bf305b7a102b9a18dbc0caa74d78da4beb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8dbf7443db4c2f2acbe71b904cddb2944e1a8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;needle&lt;/code&gt; to search for. If this string is empty, an error will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3617913f70a336eee917e86d8a292b8fdc107490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newBCO# instrs lits ptrs arity bitmap&lt;/code&gt; creates a new bytecode object. The resulting object encodes a function of the given arity with the instructions encoded in &lt;code&gt;instrs&lt;/code&gt;, and a static reference table usage bitmap given by &lt;code&gt;bitmap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5d69a0b7d37427bfa59138ce5d6ff629f5c0f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newtype: Use&lt;/code&gt;&lt;a href=&quot;#extension-GeneralizedNewtypeDeriving&quot;&gt;&lt;code&gt;GeneralizedNewtypeDeriving&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6ce5e75313c95a77bc3bab8bfba53e26446a4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nodeFromVertex :: Vertex -&amp;gt; (node, key, [key])&lt;/code&gt; returns the node associated with the given 0-based &lt;code&gt;Int&lt;/code&gt; vertex; see &lt;em&gt;warning&lt;/em&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e41909ff90e256d7c446570c47a96250d4299b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notFollowedBy p&lt;/code&gt; only succeeds when parser &lt;code&gt;p&lt;/code&gt; fails. This parser does not consume any input. This parser can be used to implement the 'longest match' rule. For example, when recognizing keywords (for example &lt;code&gt;let&lt;/code&gt;), we want to make sure that a keyword is not followed by a legal identifier character, in which case the keyword is actually an identifier (for example &lt;code&gt;lets&lt;/code&gt;). We can program this behaviour as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5fe52c557ae22b302bd14a1e2519394bd13a06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubInt&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f23a458f31f92b124a38b0e41aaac962127e60e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubIntOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4b8287c8c8882e31b3f8d2880cdfeab11fc132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrd&lt;/code&gt; is strict in the elements of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686732935ff85a620a7bd6262da47b1e3811624f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nubOrdOn&lt;/code&gt; is strict in the values of the function applied to the elements of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7367896f7681bf47f880f32a2ceb33950d3c01be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dba7dbf8a8ed84fe2b86840692ea4684e4d77da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oneOf cs&lt;/code&gt; succeeds if the current character is in the supplied list of characters &lt;code&gt;cs&lt;/code&gt;. Returns the parsed character. See also &lt;code&gt;&lt;a href=&quot;text-parsercombinators-parsec-char#v:satisfy&quot;&gt;satisfy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a04efca569dfa9fbbe7d89cb7c4dd3f73aa983" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openDirStream dir&lt;/code&gt; calls &lt;code&gt;opendir&lt;/code&gt; to obtain a directory stream for &lt;code&gt;dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192a654c09f0df329ab2519a071a25e8eab05de9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;openPseudoTerminal&lt;/code&gt; creates a pseudoterminal (pty) pair, and returns the newly created pair as a (&lt;code&gt;master&lt;/code&gt;, &lt;code&gt;slave&lt;/code&gt;) tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bace0c54f31a15f5bddbe9ad572bb21e32508f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it returns the value &lt;code&gt;x&lt;/code&gt;, otherwise the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ebf5c81299360ece1c5fcdf4eefbb30ff2d4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;option x p&lt;/code&gt; will either parse &lt;code&gt;p&lt;/code&gt; or return &lt;code&gt;x&lt;/code&gt; without consuming any input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b4086a811e0da08b201496f5d39d65225aa8a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optionMaybe p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. If &lt;code&gt;p&lt;/code&gt; fails without consuming input, it return &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Nothing&quot;&gt;Nothing&lt;/a&gt;&lt;/code&gt;, otherwise it returns &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-maybe#v:Just&quot;&gt;Just&lt;/a&gt;&lt;/code&gt; the value returned by &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f4b419c9e52aaebf3661bb8fc5fd960b9dbbbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; optionally parses &lt;code&gt;p&lt;/code&gt; and always returns &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a9fa7e27cef29971c48bc00d735454128fbbd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optional p&lt;/code&gt; tries to apply parser &lt;code&gt;p&lt;/code&gt;. It will parse &lt;code&gt;p&lt;/code&gt; or nothing. It only fails if &lt;code&gt;p&lt;/code&gt; fails after consuming input. It discards the result of &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724942ba218da78a2b98ad86431785fc08972c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; &amp;mdash; parallel sparks (sampled). Enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1500ec5b52d9695092d929dcc0d64f327ff5fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5054021e9af465d95264d1946eaa05a51db43fb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse p filePath input&lt;/code&gt; runs a parser &lt;code&gt;p&lt;/code&gt; over Identity without user state. The &lt;code&gt;filePath&lt;/code&gt; is only used in error messages and may be the empty string. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0116427892802de970e9caf1b430f5b1e1556ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a lazy bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-lazy-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0af969a2929691936a95f88bc3a6ec38adc318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict bytestring parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;bytestring-char8#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82856998d9751a3733e60c0607c7b45ff990c62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74d5d2e59d089c23ba274edea898c51fbfd1b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a strict text parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../text-1.2.4.0/data-text-lazy-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e0c755040d08e0b997234debcadf0bec890c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parseFromFile p filePath&lt;/code&gt; runs a string parser &lt;code&gt;p&lt;/code&gt; on the input read from &lt;code&gt;filePath&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/system-io#v:readFile&quot;&gt;readFile&lt;/a&gt;&lt;/code&gt;. Returns either a &lt;code&gt;&lt;a href=&quot;text-parsec-error#t:ParseError&quot;&gt;ParseError&lt;/a&gt;&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Left&quot;&gt;Left&lt;/a&gt;&lt;/code&gt;) or a value of type &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;&lt;a href=&quot;../base-4.13.0.0/data-either#v:Right&quot;&gt;Right&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
