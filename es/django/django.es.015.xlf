<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="django">
    <body>
      <group id="django">
        <trans-unit id="7e0f8dd4b809ced810b321c4ca59ad5cb144a472" translate="yes" xml:space="preserve">
          <source>There are many different ways to import data into a spatial database &amp;ndash; besides the tools included within GeoDjango, you may also use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46a0cb550df1d7e7e5a2af836842f4a6edfcdcb" translate="yes" xml:space="preserve">
          <source>There are many options for deploying your Django application, based on your architecture or your particular business needs, but that discussion is outside the scope of what Django can give you as guidance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb71e78e23143f9c58be0e1a4d3b0283bc9e3fb4" translate="yes" xml:space="preserve">
          <source>There are many ways to approach writing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82ce399e41d9ada125c24412befb44b2db38a07" translate="yes" xml:space="preserve">
          <source>There are now a total of three forms showing above. One for the initial data that was passed in and two extra forms. Also note that we are passing in a list of dictionaries as the initial data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0675d92987ebc85dea15e155c04c65d27ed914a0" translate="yes" xml:space="preserve">
          <source>There are other output options though for the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; pairs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b890167490cfa71a2c2750ecaf4bbbf4044790ed" translate="yes" xml:space="preserve">
          <source>There are other trade-offs to bear in mind. Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5447b8a8aa38e50b103d54b5c95d6ddb38da9743" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6b23babe3f3faae698cf4967c8ca480e73246b" translate="yes" xml:space="preserve">
          <source>There are security risks if you are accepting uploaded content from untrusted users! See the security guide&amp;rsquo;s topic on &lt;a href=&quot;../topics/security#user-uploaded-content-security&quot;&gt;User-uploaded content&lt;/a&gt; for mitigation details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5440f1eeb6c5554f991bdd01619224b02c477d9c" translate="yes" xml:space="preserve">
          <source>There are several commands which you will use to interact with migrations and Django&amp;rsquo;s handling of database schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47d4b1128fa9f63cdd5a6ffafbb68a17a586a50" translate="yes" xml:space="preserve">
          <source>There are several other ways to customize the order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8daea2ca7aa9f48eae0cb4490b703d0fcb0ee3" translate="yes" xml:space="preserve">
          <source>There are several ways to include the flat pages in your URLconf. You can dedicate a particular path to flat pages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919e08d83f9bb207a0c2ffc9fb3d215e54e570da" translate="yes" xml:space="preserve">
          <source>There are several ways to recover from this sort of error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8e4e68fdf7d30ee2ea2be7fb1d46bbe59cabd2" translate="yes" xml:space="preserve">
          <source>There are some additional caveats to be aware of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374a4fcc956d29e47334404f1ce4c53441954cad" translate="yes" xml:space="preserve">
          <source>There are special considerations described in &lt;a href=&quot;https://sqlite.org/isolation.html&quot;&gt;Isolation In SQLite&lt;/a&gt; when modifying a table while iterating over it using &lt;a href=&quot;models/querysets#django.db.models.query.QuerySet.iterator&quot;&gt;&lt;code&gt;QuerySet.iterator()&lt;/code&gt;&lt;/a&gt;. If a row is added, changed, or deleted within the loop, then that row may or may not appear, or may appear twice, in subsequent results fetched from the iterator. Your code must handle this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbe9bb8365d832ccc308e2c7d571b7eed695798" translate="yes" xml:space="preserve">
          <source>There are subclasses to make creating messages with common levels easier. When using them you can omit the &lt;code&gt;level&lt;/code&gt; argument because it is implied by the class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f34bb3c48d35bba7edc3d9c1f3601021b1076b" translate="yes" xml:space="preserve">
          <source>There are three circumstances under which a &lt;code&gt;TemplateResponse&lt;/code&gt; will be rendered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8b284f3a8acce026acc7560c1b78c9badc6c46" translate="yes" xml:space="preserve">
          <source>There are three main situations where Django needs to interact with the database backend and fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49e65b99bc0593e177ed5bddad001b68056aff0" translate="yes" xml:space="preserve">
          <source>There are three parts to setting up a &lt;a href=&quot;#django.contrib.contenttypes.fields.GenericForeignKey&quot;&gt;&lt;code&gt;GenericForeignKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e657cd72008e9e60db47de789dcec009e637d6" translate="yes" xml:space="preserve">
          <source>There are three steps involved in validating a model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34f5a9960e13ab20b5e9b5798782887b379e349" translate="yes" xml:space="preserve">
          <source>There are three styles of inheritance that are possible in Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e3fa28c76dc98655dad9a3ba9d091ce88206c5" translate="yes" xml:space="preserve">
          <source>There are three transforms available for use in queries. You can extract the lower or upper bound, or query based on emptiness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca5918000b16d0393655e9890e11a345ad30bdd" translate="yes" xml:space="preserve">
          <source>There are three ways to render a formset in a Django template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3e2fb67cbac287f1464d999496dbaffe570b89" translate="yes" xml:space="preserve">
          <source>There are times when a single column must be returned from a &lt;code&gt;Subquery&lt;/code&gt;, for instance, to use a &lt;code&gt;Subquery&lt;/code&gt; as the target of an &lt;code&gt;__in&lt;/code&gt; lookup. To return all comments for posts published within the last day:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c74bd5c5720621ba1bf68f4629091c4f84d9f63" translate="yes" xml:space="preserve">
          <source>There are times when you do not want Django to send emails at all. For example, while developing a website, you probably don&amp;rsquo;t want to send out thousands of emails &amp;ndash; but you may want to validate that emails will be sent to the right people under the right conditions, and that those emails will contain the correct content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c842a5a4c84746e59536e96b8c1e20999f9b6d84" translate="yes" xml:space="preserve">
          <source>There are times where you would like add a bit of CSS and/or JavaScript to the add/change views. This can be accomplished by using a &lt;code&gt;Media&lt;/code&gt; inner class on your &lt;code&gt;ModelAdmin&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13152d7ad0535e0d9b833f6a6f3dc2f68630529" translate="yes" xml:space="preserve">
          <source>There are two features worth noting in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29fbf9b0eac3600d5ff5d48ee34823bcc51b162" translate="yes" xml:space="preserve">
          <source>There are two main steps involved in validating a &lt;code&gt;ModelForm&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127003b06f28dbbea5c6bb95b9fcbb4a4ddbb7c1" translate="yes" xml:space="preserve">
          <source>There are two other logging calls available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd91f5e0c7e80ba947990da88bea62cafe0f52b6" translate="yes" xml:space="preserve">
          <source>There are two reasons to use a column with &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_index&quot;&gt;&lt;code&gt;db_index&lt;/code&gt;&lt;/a&gt; when using &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; to retrieve individual objects. First, the query will be quicker because of the underlying database index. Also, the query could run much slower if multiple objects match the lookup; having a unique constraint on the column guarantees this will never happen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee491b4d745bceb462b60ff16434351784a42fb" translate="yes" xml:space="preserve">
          <source>There are two reasons you might want to customize a &lt;code&gt;Manager&lt;/code&gt;: to add extra &lt;code&gt;Manager&lt;/code&gt; methods, and/or to modify the initial &lt;code&gt;QuerySet&lt;/code&gt; the &lt;code&gt;Manager&lt;/code&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720a9aa7a33ca50cea57e0f036b334ee3370619e" translate="yes" xml:space="preserve">
          <source>There are two steps to making this work. Firstly we need to implement the lookup, then we need to tell Django about it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbd044eff295a9be81cba0ec549c2bd8ede7a25" translate="yes" xml:space="preserve">
          <source>There are two types of conditions this header can tell a browser to watch out for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4494c92caa320237552a06540d133dd99233ea98" translate="yes" xml:space="preserve">
          <source>There are two ways to customize widgets: &lt;a href=&quot;#styling-widget-instances&quot;&gt;per widget instance&lt;/a&gt; and &lt;a href=&quot;#styling-widget-classes&quot;&gt;per widget class&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15eba9bf5efe787dbfead36de258956e81386432" translate="yes" xml:space="preserve">
          <source>There are two ways to extend the default &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; model without substituting your own model. If the changes you need are purely behavioral, and don&amp;rsquo;t require any change to what is stored in the database, you can create a &lt;a href=&quot;../db/models#proxy-models&quot;&gt;proxy model&lt;/a&gt; based on &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;. This allows for any of the features offered by proxy models including default ordering, custom managers, or custom model methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e41d79a89e7118e2f2a6f5e690c8cf9e41ed2c" translate="yes" xml:space="preserve">
          <source>There are two ways to report any errors from this step. Probably the most common method is to display the error at the top of the form. To create such an error, you can raise a &lt;code&gt;ValidationError&lt;/code&gt; from the &lt;code&gt;clean()&lt;/code&gt; method. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3682bb46c7cdad94bdcb1d55e5d3aa9635668ee" translate="yes" xml:space="preserve">
          <source>There are two ways to send signals in Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d26b3386430b6fab2095c28aedd73d56054ce2" translate="yes" xml:space="preserve">
          <source>There are two ways to solve this problem. The first is to register &lt;code&gt;Choice&lt;/code&gt; with the admin just as we did with &lt;code&gt;Question&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a64397722408ba9883baae5658e6aa3502728b" translate="yes" xml:space="preserve">
          <source>There are two ways you can connect a receiver to a signal. You can take the manual connect route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98319cb6e332dba875d578d9cd1cdf771a6ece29" translate="yes" xml:space="preserve">
          <source>There are two ways you tell an email backend to reuse a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132d18eec8b0d66e698a36fa2909fb23c44ed2b9" translate="yes" xml:space="preserve">
          <source>There are, however, two shortcuts available for cases where you can guarantee these security concerns do not apply to you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6de9173a10eaaf2cbefb5280cd109fc52ac2d70" translate="yes" xml:space="preserve">
          <source>There can be side effects when calling some variables, and it&amp;rsquo;d be either foolish or a security hole to allow the template system to access them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40742fb672a16b4ddd7654662929485b7673a22d" translate="yes" xml:space="preserve">
          <source>There is a similarly named method called &lt;code&gt;get_transform()&lt;/code&gt;. &lt;code&gt;get_lookup()&lt;/code&gt; should always return a &lt;code&gt;Lookup&lt;/code&gt; subclass, and &lt;code&gt;get_transform()&lt;/code&gt; a &lt;code&gt;Transform&lt;/code&gt; subclass. It is important to remember that &lt;code&gt;Transform&lt;/code&gt; objects can be further filtered on, and &lt;code&gt;Lookup&lt;/code&gt; objects cannot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076ab0e60179747b01f6522a60cb0b32cfbad579" translate="yes" xml:space="preserve">
          <source>There is also a decorator for registering your &lt;code&gt;ModelAdmin&lt;/code&gt; classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe73062299242ce8953e23bc8f15f8eb8e74ad5b" translate="yes" xml:space="preserve">
          <source>There is also a way to pass additional information to title and description templates, if you need to supply more than the two variables mentioned before. You can provide your implementation of &lt;code&gt;get_context_data&lt;/code&gt; method in your &lt;code&gt;Feed&lt;/code&gt; subclass. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d15ec31136066f7786ec1d2ac23ce5bd6b7cdf8" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should activate translation. See &lt;a href=&quot;translation&quot;&gt;Translation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75d5351b7f9cd7638cd926fddf6bf2712770595" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls if Django should implement format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336f1a0636712f1f7df8743e5074215668a776f5" translate="yes" xml:space="preserve">
          <source>There is also an independent but related &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; setting that controls whether Django should activate format localization. See &lt;a href=&quot;formatting&quot;&gt;Format localization&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4889f2745d57846bc47e3b301034b23c55567a82" translate="yes" xml:space="preserve">
          <source>There is also the matter of convenience. An integer id isn&amp;rsquo;t always the most convenient way to refer to an object; sometimes, a more natural reference would be helpful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fec4eeb0cb4f31609ba2b0ca27378fa71d0a5c3" translate="yes" xml:space="preserve">
          <source>There is limited support for other parts of the async ecosystem; namely, Django can natively talk &lt;a href=&quot;../howto/deployment/asgi/index&quot;&gt;ASGI&lt;/a&gt;, and some async safety support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3ed6aecf8322b5839dedda17f6f29eabf48e80" translate="yes" xml:space="preserve">
          <source>There is no &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location&lt;/code&gt;&lt;/a&gt; method in this example, but you can provide it in order to specify the URL for your object. By default, &lt;a href=&quot;#django.contrib.sitemaps.Sitemap.location&quot;&gt;&lt;code&gt;location()&lt;/code&gt;&lt;/a&gt; calls &lt;code&gt;get_absolute_url()&lt;/code&gt; on each object and returns the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdcb2bd2ea7a38642c8f628d41694d630e1630a" translate="yes" xml:space="preserve">
          <source>There is no one-size-fits-all solution for which field type is best. You should evaluate the models you expect to be pointing to and determine which solution will be most effective for your use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ef18d152799a740388d62ee9b944c775a0bcd9" translate="yes" xml:space="preserve">
          <source>There is no way to have Django return, say, a &lt;code&gt;MyPerson&lt;/code&gt; object whenever you query for &lt;code&gt;Person&lt;/code&gt; objects. A queryset for &lt;code&gt;Person&lt;/code&gt; objects will return those types of objects. The whole point of proxy objects is that code relying on the original &lt;code&gt;Person&lt;/code&gt; will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the &lt;code&gt;Person&lt;/code&gt; (or any other) model everywhere with something of your own creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552f8501da1d1cf280a92b17be2fe2368642e6ad" translate="yes" xml:space="preserve">
          <source>There is one exception the above rule: When passed a &lt;code&gt;datetime&lt;/code&gt; value with attached timezone information (a &lt;a href=&quot;../../topics/i18n/timezones#naive-vs-aware-datetimes&quot;&gt;time-zone-aware&lt;/a&gt;&lt;code&gt;datetime&lt;/code&gt; instance) the &lt;code&gt;time&lt;/code&gt; filter will accept the timezone-related &lt;a href=&quot;#date-and-time-formatting-specifiers&quot;&gt;format specifiers&lt;/a&gt;&lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'O'&lt;/code&gt; , &lt;code&gt;'T'&lt;/code&gt; and &lt;code&gt;'Z'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b7655035baec0a88d69155944fc4d04fb28f67" translate="yes" xml:space="preserve">
          <source>There is only one field that you can&amp;rsquo;t leave out - the primary key field. Django uses the primary key to identify model instances, so it must always be included in a raw query. An &lt;code&gt;InvalidQuery&lt;/code&gt; exception will be raised if you forget to include the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d39b53e4827027f045ccd4097d962247d17005" translate="yes" xml:space="preserve">
          <source>There isn&amp;rsquo;t a specialized subclass for every possible HTTP response code, since many of them aren&amp;rsquo;t going to be that common. However, as documented in the &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; documentation, you can also pass the HTTP status code into the constructor for &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; to create a return class for any status code you like. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a9644e3aa5ad2978823b446ce2e81d8b0491a1" translate="yes" xml:space="preserve">
          <source>There may be files other than your project&amp;rsquo;s static assets that, for convenience, you&amp;rsquo;d like to have Django serve for you in local development. The &lt;a href=&quot;#django.views.static.serve&quot;&gt;&lt;code&gt;serve()&lt;/code&gt;&lt;/a&gt; view can be used to serve any directory you give it. (This view is &lt;strong&gt;not&lt;/strong&gt; hardened for production use and should be used only as a development aid; you should serve these files in production using a real front-end web server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f0cfcc2d7cafb44b66564c6b727249cfcccd2f" translate="yes" xml:space="preserve">
          <source>There may be some situations where you wish to call &lt;code&gt;select_related()&lt;/code&gt; with a lot of related objects, or where you don&amp;rsquo;t know all of the relations. In these cases it is possible to call &lt;code&gt;select_related()&lt;/code&gt; with no arguments. This will follow all non-null foreign keys it can find - nullable foreign keys must be specified. This is not recommended in most cases as it is likely to make the underlying query more complex, and return more data, than is actually needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a66ed86bf6678e5b05d1eac2131c3bbc960c08" translate="yes" xml:space="preserve">
          <source>There may be some views that are unprotected and have been exempted by &lt;code&gt;csrf_exempt&lt;/code&gt;, but still need to include the CSRF token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8eaf4a5f4167f0c30126f8bb76418123b4bd64b" translate="yes" xml:space="preserve">
          <source>There may be times you have the need to hook into another authentication source &amp;ndash; that is, another source of usernames and passwords or authentication methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab64bd5c330c251da1c7d0ae9773ffb209ceacd4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a command that will run the migrations for you and manage your database schema automatically - that&amp;rsquo;s called &lt;a href=&quot;../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;migrate&lt;/code&gt;&lt;/a&gt;, and we&amp;rsquo;ll come to it in a moment - but first, let&amp;rsquo;s see what SQL that migration would run. The &lt;a href=&quot;../ref/django-admin#django-admin-sqlmigrate&quot;&gt;&lt;code&gt;sqlmigrate&lt;/code&gt;&lt;/a&gt; command takes migration names and returns their SQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5093b938dd7840c576a513aff6ee2290f74f11" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a couple of extra options and possibilities you can exploit for more advanced options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529593afe16858928a0a29064611b9a44ca1fa6e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a difference in what &lt;code&gt;CURRENT ROW&lt;/code&gt; includes. When specified in &lt;code&gt;ROWS&lt;/code&gt; mode, the frame starts or ends with the current row. When specified in &lt;code&gt;RANGE&lt;/code&gt; mode, the frame starts or ends at the first or last peer according to the ordering clause. Thus, &lt;code&gt;RANGE CURRENT ROW&lt;/code&gt; evaluates the expression for rows which have the same value specified by the ordering. Because the template includes both the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; points, this may be expressed with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75aa5ff00db8d3e848514e0b69a503b42e68c4b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot more work to be done for a complete custom feed class, but the above example should demonstrate the basic idea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874b31554853528095e34057c3f8e324e697cd1c" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a problem here, though: the page&amp;rsquo;s design is hard-coded in the view. If you want to change the way the page looks, you&amp;rsquo;ll have to edit this Python code. So let&amp;rsquo;s use Django&amp;rsquo;s template system to separate the design from Python by creating a template that the view can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185044dc976a34bb0fef463a3e68c0dc9c899a83" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_list_or_404&quot;&gt;&lt;code&gt;get_list_or_404()&lt;/code&gt;&lt;/a&gt; function, which works just as &lt;a href=&quot;../topics/http/shortcuts#django.shortcuts.get_object_or_404&quot;&gt;&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/a&gt; &amp;ndash; except using &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../ref/models/querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;. It raises &lt;a href=&quot;../topics/http/views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1302bb69dd2bb26c7d9688e769480f789d6cfa7" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a &lt;code&gt;get_many()&lt;/code&gt; interface that only hits the cache once. &lt;code&gt;get_many()&lt;/code&gt; returns a dictionary with all the keys you asked for that actually exist in the cache (and haven&amp;rsquo;t expired):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfe42872ee508b7ab117bf15f51c03ece11d5d1" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a bunch of other optional keywords:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a87bcfcbedb03d65bdfed396847c86cebcd64e" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a case-insensitive version, &lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fba78129eb9d5f573fb9b9c5352d583ff508856" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a second form you can use to avoid extra processing if you need the value multiple times:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b7631a6661d85faa5e0f60692cffb92e7701d5" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s also a set of common arguments available to all field types. All are optional. They&amp;rsquo;re fully explained in the &lt;a href=&quot;../../ref/models/fields#common-model-field-options&quot;&gt;reference&lt;/a&gt;, but here&amp;rsquo;s a quick summary of the most often-used ones:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d25aa9b5da6bd7a7ab00c1e241dfd8e13497bb" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s another set of &lt;a href=&quot;../../ref/models/instances#model-instance-methods&quot;&gt;model methods&lt;/a&gt; that encapsulate a bunch of database behavior that you&amp;rsquo;ll want to customize. In particular you&amp;rsquo;ll often want to change the way &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f4324ddad3b858070a41b1bbc68573b7933c28" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s any number of ways you might do this, but if the provider has an API, you can use a &lt;a href=&quot;../custom-file-storage&quot;&gt;custom file storage backend&lt;/a&gt; to integrate the CDN with your Django project. If you&amp;rsquo;ve written or are using a 3rd party custom storage backend, you can tell &lt;a href=&quot;../../ref/contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; to use it by setting &lt;a href=&quot;../../ref/settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt; to the storage engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ca95383c15b3b4d5f05fadedabe1b500318b82" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no limit on how many modules you put in the &lt;code&gt;templatetags&lt;/code&gt; package. Just keep in mind that a &lt;a href=&quot;../ref/templates/builtins#std:templatetag-load&quot;&gt;&lt;code&gt;{% load %}&lt;/code&gt;&lt;/a&gt; statement will load tags/filters for the given Python module name, not the name of the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ff2911eb87bdf1545419b53d49db42773d814d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add URL cruft such as &lt;code&gt;.html&lt;/code&gt; &amp;ndash; unless you want to, in which case you can do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf6a18d05b5c017aab81e184dba0e80584fea79" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to add a leading slash, because every URL has that. For example, it&amp;rsquo;s &lt;code&gt;articles&lt;/code&gt;, not &lt;code&gt;/articles&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8941cd8857db5972d67440a358a4fe2697127a49" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no need to worry about the &lt;code&gt;is_safe&lt;/code&gt; flag in this case (although including it wouldn&amp;rsquo;t hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the &lt;code&gt;is_safe&lt;/code&gt; flag won&amp;rsquo;t change anything either way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4bd22abba1df8b0d5aeeace6891916c3f2c6dc" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no question that using generic views can speed up development substantially. In most projects, however, there comes a moment when the generic views no longer suffice. Indeed, the most common question asked by new Django developers is how to make generic views handle a wider array of situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f61080946f1ac7b7149cc37bf09f16b3d511f6b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no restriction that a project package can&amp;rsquo;t also be considered an application and have models, etc. (which would require adding it to &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c933ded98bbf9830d3dfd06df31fa826e1ccdc74" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no standard for describing raster data in a dictionary or JSON flavor. The definition of the dictionary input to the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster&quot;&gt;&lt;code&gt;GDALRaster&lt;/code&gt;&lt;/a&gt; class is therefore specific to Django. It&amp;rsquo;s inspired by the &lt;a href=&quot;https://geojson.org&quot;&gt;geojson&lt;/a&gt; format, but the &lt;code&gt;geojson&lt;/code&gt; standard is currently limited to vector formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cae82c054bd8f811e23d21dc3c000f18bcb71b2" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to specify whether ordering should be case sensitive. With respect to case-sensitivity, Django will order results however your database backend normally orders them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9afd208007a403419ac3ab7b998cae93f88666b" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no way to tell what the value of an ID will be before you call &lt;code&gt;save()&lt;/code&gt;, because that value is calculated by your database, not by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaeeeb9f77945ce0a808e834c18d17251cf98dba" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing Django-specific about the &lt;code&gt;Content-Disposition&lt;/code&gt; header, but it&amp;rsquo;s easy to forget the syntax, so we&amp;rsquo;ve included it here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a690ec58762f108c0e2dfaaa68036b54ef91860f" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s nothing stopping you from creating your own settings, for your own Django apps, but follow these guidelines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f9abda96ed031ceb895d9ec07592e703a29176" translate="yes" xml:space="preserve">
          <source>Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can&amp;rsquo;t avoid that, put the call to &lt;code&gt;django.setup()&lt;/code&gt; inside an &lt;code&gt;if&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1362c485b6c35f67f55f9e1cdf429d6affcfd67" translate="yes" xml:space="preserve">
          <source>Therefore, the following steps should be taken. In this example, we&amp;rsquo;ll add a non-nullable &lt;a href=&quot;../ref/models/fields#django.db.models.UUIDField&quot;&gt;&lt;code&gt;UUIDField&lt;/code&gt;&lt;/a&gt; with a default value. Modify the respective field according to your needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a811c3212bc4444ab1ca325d9edb3a68d8a1cc21" translate="yes" xml:space="preserve">
          <source>These applications are included by default as a convenience for the common case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e065064559622e4d29cabe419f920940f963ca83" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('date_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateField&lt;/code&gt; and &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__year&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d270e97f3c860dacbaf5326db81a7b97c2fc80" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Extract('datetime_field', lookup_name)&lt;/code&gt;. Each class is also a &lt;code&gt;Transform&lt;/code&gt; registered on &lt;code&gt;DateTimeField&lt;/code&gt; as &lt;code&gt;__(lookup_name)&lt;/code&gt;, e.g. &lt;code&gt;__minute&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93895ed48a7c8f2207cdc06eb69c4f5139d1a32" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('date_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering dates with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;DateField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454d6e2d9e6a21406dd0153f13a9b377029b12b8" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('datetime_field', kind)&lt;/code&gt;. They truncate all parts of the date up to &lt;code&gt;kind&lt;/code&gt; and allow grouping or filtering datetimes with less precision. &lt;code&gt;expression&lt;/code&gt; must have an &lt;code&gt;output_field&lt;/code&gt; of &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5804cdc6cee9337b46c057c6247660f5a8364c2b" translate="yes" xml:space="preserve">
          <source>These are logically equivalent to &lt;code&gt;Trunc('time_field', kind)&lt;/code&gt;. They truncate all parts of the time up to &lt;code&gt;kind&lt;/code&gt; which allows grouping or filtering times with less precision. &lt;code&gt;expression&lt;/code&gt; can have an &lt;code&gt;output_field&lt;/code&gt; of either &lt;code&gt;TimeField&lt;/code&gt; or &lt;code&gt;DateTimeField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bd291265aae0c0fb9e73beecb38af09dafcff9" translate="yes" xml:space="preserve">
          <source>These are the &lt;strong&gt;basics&lt;/strong&gt;. For more details on settings and other bits included with the framework see &lt;a href=&quot;../howto/static-files/index&quot;&gt;the static files howto&lt;/a&gt; and &lt;a href=&quot;../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;. &lt;a href=&quot;../howto/static-files/deployment&quot;&gt;Deploying static files&lt;/a&gt; discusses how to use static files on a real server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151eb5bf5744bf8063650cfa2ece87cc03e56770" translate="yes" xml:space="preserve">
          <source>These are the behavioral differences between using &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;MIDDLEWARE_CLASSES&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1f38ee94a36c6b6b2cec4fb39d0485df0fabb4" translate="yes" xml:space="preserve">
          <source>These are the same as &lt;code&gt;CharField.max_length&lt;/code&gt; and &lt;code&gt;CharField.min_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d22090f912b19514c42634f07fce865ff3a270b" translate="yes" xml:space="preserve">
          <source>These attributes are used to query for the cardinality and other details of a relation. These attribute are present on all fields; however, they will only have boolean values (rather than &lt;code&gt;None&lt;/code&gt;) if the field is a relation type (&lt;a href=&quot;#django.db.models.Field.is_relation&quot;&gt;&lt;code&gt;Field.is_relation=True&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9ac79d4e422f2ae16dd2fd794c5f063a051c44" translate="yes" xml:space="preserve">
          <source>These can be looped over in the widget template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b7b1455e3ab5f0a917f40a5321d723e049b397" translate="yes" xml:space="preserve">
          <source>These can be matched with a &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt; line such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dde7e9f5922ce83d9207aa75c5262243db571c6" translate="yes" xml:space="preserve">
          <source>These can&amp;rsquo;t report on the internals of your code, but can provide a useful insight into your site&amp;rsquo;s overall performance, including aspects that can&amp;rsquo;t be adequately measured from within Django environment. Examples include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d81b624432fa9ad29c6c90d7b4473aaba2854fb" translate="yes" xml:space="preserve">
          <source>These checks will only be run if the &lt;a href=&quot;../ref/django-admin#cmdoption-check-deploy&quot;&gt;&lt;code&gt;check --deploy&lt;/code&gt;&lt;/a&gt; option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c853c5f0ce231fbfad9d81d3d0f3ec08cc045c" translate="yes" xml:space="preserve">
          <source>These classes and functions enable the use of generic relations in forms and the admin. See the &lt;a href=&quot;../../topics/forms/modelforms&quot;&gt;model formset&lt;/a&gt; and &lt;a href=&quot;admin/index#using-generic-relations-as-an-inline&quot;&gt;admin&lt;/a&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32ba46892379b0488d917d599bb75aa07b70724" translate="yes" xml:space="preserve">
          <source>These concepts are represented by Python classes. Edit the &lt;code&gt;polls/models.py&lt;/code&gt; file so it looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c124fe0f792bebbb071a1d2b10db9048ab0ed3" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;../../models/indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;django.db.models.Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70f195ee9660ff33a236be74f31fd1c96263086" translate="yes" xml:space="preserve">
          <source>These conditions have the same database restrictions as &lt;a href=&quot;indexes#django.db.models.Index.condition&quot;&gt;&lt;code&gt;Index.condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3855f3dc40d9d7f39d8cda63c79ab18d1d68be4f" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field, and should be given as &lt;code&gt;decimal.Decimal&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac6c9cd493651714528d9531e7499105a0e1d98" translate="yes" xml:space="preserve">
          <source>These control the range of values permitted in the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d31e0ea8826de848f67ccc50cc409b106513c48" translate="yes" xml:space="preserve">
          <source>These decorators can be used to generate &lt;code&gt;ETag&lt;/code&gt; and &lt;code&gt;Last-Modified&lt;/code&gt; headers; see &lt;a href=&quot;../conditional-view-processing&quot;&gt;conditional view processing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eba9b75824489b6751a633fb101fd9cc8f0463f" translate="yes" xml:space="preserve">
          <source>These drivers are thread-safe and provide connection pooling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f783e4a54d21c873c25728d58f8e24098cbdad3d" translate="yes" xml:space="preserve">
          <source>These error messages often don&amp;rsquo;t propagate to forms. See &lt;a href=&quot;../../topics/forms/modelforms#considerations-regarding-model-errormessages&quot;&gt;Considerations regarding model&amp;rsquo;s error_messages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc37aef28cd57ff09019f44261fe870e19984e1f" translate="yes" xml:space="preserve">
          <source>These expressions are defined in &lt;code&gt;django.db.models.expressions&lt;/code&gt; and &lt;code&gt;django.db.models.aggregates&lt;/code&gt;, but for convenience they&amp;rsquo;re available and usually imported from &lt;a href=&quot;../../topics/db/models#module-django.db.models&quot;&gt;&lt;code&gt;django.db.models&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e118c1024f14f076a44dcc64598a3aeee1b7ab4e" translate="yes" xml:space="preserve">
          <source>These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd68f523b7ace0cf5729eed9d49b1b8dd9b1021a" translate="yes" xml:space="preserve">
          <source>These extra lookups may not be portable to different database engines (because you&amp;rsquo;re explicitly writing SQL code) and violate the DRY principle, so you should avoid them if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cd01b26caf9820ccd797d86a0c27cfbd90fa00" translate="yes" xml:space="preserve">
          <source>These fields should be some kind of text field, such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;TextField&lt;/code&gt;. You can also perform a related lookup on a &lt;code&gt;ForeignKey&lt;/code&gt; or &lt;code&gt;ManyToManyField&lt;/code&gt; with the lookup API &amp;ldquo;follow&amp;rdquo; notation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81be3771bbb864d65a54b4e5daf5d6ac8bf6994" translate="yes" xml:space="preserve">
          <source>These fields subclass &lt;a href=&quot;../../models/fields#django.db.models.CharField&quot;&gt;&lt;code&gt;CharField&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../models/fields#django.db.models.EmailField&quot;&gt;&lt;code&gt;EmailField&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../models/fields#django.db.models.TextField&quot;&gt;&lt;code&gt;TextField&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7cdd0871f533426a8eb966c973d6cdcefc37d5" translate="yes" xml:space="preserve">
          <source>These files are marked to say they replace the previously-squashed migrations, so they can coexist with the old migration files, and Django will intelligently switch between them depending where you are in the history. If you&amp;rsquo;re still part-way through the set of migrations that you squashed, it will keep using them until it hits the end and then switch to the squashed history, while new installs will use the new squashed migration and skip all the old ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59453eba3cca73d3f4e6eca60587f3f63376bec8" translate="yes" xml:space="preserve">
          <source>These files are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a689a35f902db0c52a7d13669aa1560f7adfad" translate="yes" xml:space="preserve">
          <source>These filters accept both aware and naive datetimes. For conversion purposes, they assume that naive datetimes are in the default time zone. They always return aware datetimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b2adf2daadd17f8991c7ad4e29a27c18bec106" translate="yes" xml:space="preserve">
          <source>These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36c44a2a16c421407efb0787f4cf7a77d871598" translate="yes" xml:space="preserve">
          <source>These functions are available from the &lt;code&gt;django.contrib.postgres.aggregates&lt;/code&gt; module. They are described in more detail in the &lt;a href=&quot;https://www.postgresql.org/docs/current/functions-aggregate.html&quot;&gt;PostgreSQL docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3613b66d5ec05e9b517e97a09c69770f654bb184" translate="yes" xml:space="preserve">
          <source>These functions do nothing if savepoints aren&amp;rsquo;t supported or if the database is in autocommit mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d2fbeed66708a6b2e3fea607b273adbc6a423b" translate="yes" xml:space="preserve">
          <source>These functions store a lazy reference to the string &amp;ndash; not the actual translation. The translation itself will be done when the string is used in a string context, such as in template rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1481dfb24ded2fa557792db5ab783a7b722addfb" translate="yes" xml:space="preserve">
          <source>These functions take a &lt;code&gt;using&lt;/code&gt; argument which should be the name of a database. If it isn&amp;rsquo;t provided, Django uses the &lt;code&gt;&quot;default&quot;&lt;/code&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7737bf890658d5a693c066c1b625a2b8fa4443" translate="yes" xml:space="preserve">
          <source>These limitations can be worked around, though, because your field name doesn&amp;rsquo;t necessarily have to match your database column name. See the &lt;a href=&quot;../../ref/models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6153116eca0bc5ff88e6a1c9c0ed7bdd536fd2f5" translate="yes" xml:space="preserve">
          <source>These log events will reach the &lt;code&gt;django&lt;/code&gt; logger by default, which mails error events to admins when &lt;code&gt;DEBUG=False&lt;/code&gt;. Requests resulting in a 400 response due to a &lt;code&gt;SuspiciousOperation&lt;/code&gt; will not be logged to the &lt;code&gt;django.request&lt;/code&gt; logger, but only to the &lt;code&gt;django.security&lt;/code&gt; logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c3eb4dcf73f6eae594708817f6f59f743cdab5" translate="yes" xml:space="preserve">
          <source>These methods accept all the same arguments &lt;em&gt;except&lt;/em&gt; for &lt;code&gt;follow&lt;/code&gt;. Since this is just a factory for producing requests, it&amp;rsquo;s up to you to handle the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69fb2d164c2dba74094b46050e6d1308565c85f" translate="yes" xml:space="preserve">
          <source>These methods are run in the order given above, one field at a time. That is, for each field in the form (in the order they are declared in the form definition), the &lt;code&gt;Field.clean()&lt;/code&gt; method (or its override) is run, then &lt;code&gt;clean_&amp;lt;fieldname&amp;gt;()&lt;/code&gt;. Finally, once those two methods are run for every field, the &lt;a href=&quot;api#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; method, or its override, is executed whether or not the previous methods have raised errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87068cc66a4571abc366c73b028c9e7489527d88" translate="yes" xml:space="preserve">
          <source>These methods do not use a cache (see &lt;a href=&quot;../../topics/db/queries#caching-and-querysets&quot;&gt;Caching and QuerySets&lt;/a&gt;). Rather, they query the database each time they&amp;rsquo;re called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c2db895bfe774801c88d30673bffc29d282607" translate="yes" xml:space="preserve">
          <source>These methods involve somewhat advanced Python programming and are described in detail in the &lt;a href=&quot;../../topics/forms/media&quot;&gt;Form Assets&lt;/a&gt; topic guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7559beb910e4d8b1dca7b5e709c16d19e91f56ae" translate="yes" xml:space="preserve">
          <source>These might be compiled statically into Apache, or you might need to use LoadModule to load them dynamically in your &lt;code&gt;httpd.conf&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668670d53f79178e79d3961dfed3c09d30eb2b84" translate="yes" xml:space="preserve">
          <source>These named URLs are registered with the application namespace &lt;code&gt;admin&lt;/code&gt;, and with an instance namespace corresponding to the name of the Site instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8970d45562b27d4dd7dda0de0f49bd1955231e7" translate="yes" xml:space="preserve">
          <source>These patterns are used by default: &lt;code&gt;'CVS'&lt;/code&gt;, &lt;code&gt;'.*'&lt;/code&gt;, &lt;code&gt;'*~'&lt;/code&gt;, &lt;code&gt;'*.pyc'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e6af629c1a12f9351f2a4b7bdb42560e70d097" translate="yes" xml:space="preserve">
          <source>These permissions will be created when you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt;; the first time you run &lt;code&gt;migrate&lt;/code&gt; after adding &lt;code&gt;django.contrib.auth&lt;/code&gt; to &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;, the default permissions will be created for all previously-installed models, as well as for any new models being installed at that time. Afterward, it will create default permissions for new models each time you run &lt;a href=&quot;../../ref/django-admin#django-admin-migrate&quot;&gt;&lt;code&gt;manage.py migrate&lt;/code&gt;&lt;/a&gt; (the function that creates permissions is connected to the &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_migrate&quot;&gt;&lt;code&gt;post_migrate&lt;/code&gt;&lt;/a&gt; signal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b373a3d98792413ead4ac2102435da1629b6d9f8" translate="yes" xml:space="preserve">
          <source>These profile models are not special in any way - they are just Django models that happen to have a one-to-one link with a user model. As such, they aren&amp;rsquo;t auto created when a user is created, but a &lt;a href=&quot;../../ref/signals#django.db.models.signals.post_save&quot;&gt;&lt;code&gt;django.db.models.signals.post_save&lt;/code&gt;&lt;/a&gt; could be used to create or update related models as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e81a2fd18e0fb9a802e3f49bc6fdbcd66325343" translate="yes" xml:space="preserve">
          <source>These provide a &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest.user&quot;&gt;&lt;code&gt;request.user&lt;/code&gt;&lt;/a&gt; attribute on every request which represents the current user. If the current user has not logged in, this attribute will be set to an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.AnonymousUser&quot;&gt;&lt;code&gt;AnonymousUser&lt;/code&gt;&lt;/a&gt;, otherwise it will be an instance of &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a52f49716ae638af573877c07f913495b580a02" translate="yes" xml:space="preserve">
          <source>These rules apply regardless of whether &lt;a href=&quot;#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; references application configuration classes or application packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432c77af6e262f2a0007bc9985de2eb83c3b1c55" translate="yes" xml:space="preserve">
          <source>These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c690c313d5a2ca67a462ea1c271dd620a9c88b9c" translate="yes" xml:space="preserve">
          <source>These settings assume you have a &lt;code&gt;templates&lt;/code&gt; directory in the root of your project. To override the templates for the &lt;code&gt;blog&lt;/code&gt; app, create a folder in the &lt;code&gt;templates&lt;/code&gt; directory, and add the template files to that folder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0c4ae958a0ebe978561639237bb001048dc9aa" translate="yes" xml:space="preserve">
          <source>These sorts of tags are called &amp;ldquo;inclusion tags&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d9f7c08639f4992b98b72080df4bac0a97e254" translate="yes" xml:space="preserve">
          <source>These specifics &amp;ndash; 2.5 megabytes; &lt;code&gt;/tmp&lt;/code&gt;; etc. &amp;ndash; are &amp;ldquo;reasonable defaults&amp;rdquo; which can be customized as described in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a4c0c6e98a48f0ef5475c3b067eccb73a5f862" translate="yes" xml:space="preserve">
          <source>These tags also require a &lt;code&gt;{% load i18n %}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ed96ec28b705164b775cb2cc5f0e2984387004" translate="yes" xml:space="preserve">
          <source>These techniques are targeted at more advanced users who want to push the boundaries of performance of an already well-optimized Django site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8341e8fb9ee809077cb7896c6dc0a69d3221e480" translate="yes" xml:space="preserve">
          <source>These three &lt;code&gt;QuerySets&lt;/code&gt; are separate. The first is a base &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; containing all entries that contain a headline starting with &amp;ldquo;What&amp;rdquo;. The second is a subset of the first, with an additional criteria that excludes records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The third is a subset of the first, with an additional criteria that selects only the records whose &lt;code&gt;pub_date&lt;/code&gt; is today or in the future. The initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;q1&lt;/code&gt;) is unaffected by the refinement process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757950666b8fbab76b5c4cb07e02bab987476329" translate="yes" xml:space="preserve">
          <source>These two functions are passed as parameters to the &lt;code&gt;django.views.decorators.http.condition&lt;/code&gt; decorator. This decorator uses the two functions (you only need to supply one, if you can&amp;rsquo;t compute both quantities easily and quickly) to work out if the headers in the HTTP request match those on the resource. If they don&amp;rsquo;t match, a new copy of the resource must be computed and your normal view is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207b6a51ea55d16e8d0b1a65f1407f0365b5f528" translate="yes" xml:space="preserve">
          <source>These two groups of functions have slightly different purposes, and it&amp;rsquo;s important to keep them straight. Normally, you would use &lt;code&gt;quote()&lt;/code&gt; on the individual portions of the IRI or URI path so that any reserved characters such as &amp;lsquo;&amp;amp;&amp;rsquo; or &amp;lsquo;%&amp;rsquo; are correctly encoded. Then, you apply &lt;code&gt;iri_to_uri()&lt;/code&gt; to the full IRI and it converts any non-ASCII characters to the correct encoded values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdef885543a3721796b5a18e4dc67e715710190f" translate="yes" xml:space="preserve">
          <source>These validators are available from the &lt;code&gt;django.contrib.postgres.validators&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0f4b335c9a3ff0d3d406159e4d926212beeceb" translate="yes" xml:space="preserve">
          <source>These values and lists are 1-based, not 0-based, so the first page would be represented as page &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6b2bb2dde29fab29c2207460ac6cadaacbbc06" translate="yes" xml:space="preserve">
          <source>These values are only displayed for unbound forms, and they&amp;rsquo;re not used as fallback values if a particular value isn&amp;rsquo;t provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11268e1c18bb10eac43ab6892fcbbda794ff66e2" translate="yes" xml:space="preserve">
          <source>These views inherit &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin&quot;&gt;&lt;code&gt;SingleObjectTemplateResponseMixin&lt;/code&gt;&lt;/a&gt; which uses &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix&quot;&gt;&lt;code&gt;template_name_suffix&lt;/code&gt;&lt;/a&gt; to construct the &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; based on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a3334722cfad7fd5554e0fb1aafd81da076850" translate="yes" xml:space="preserve">
          <source>These views represent a common case of basic Web development: getting data from the database according to a parameter passed in the URL, loading a template and returning the rendered template. Because this is so common, Django provides a shortcut, called the &amp;ldquo;generic views&amp;rdquo; system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bbc8d60be2c755e2f9e623e8bf42d01485c203" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a0329157f8f7f97e101113c93e1cffe78d13e0" translate="yes" xml:space="preserve">
          <source>These views return &lt;a href=&quot;../template-response#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; instances which allow you to easily customize the response data before rendering. For more details, see the &lt;a href=&quot;../template-response&quot;&gt;TemplateResponse documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2c61c0654cf39fb1cadf90f403f1ffbdfb5fa4" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&quot;checkbox&quot;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type=&quot;radio&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b201cf52b101336df1d987acc576b495a5065d30" translate="yes" xml:space="preserve">
          <source>These widgets make use of the HTML elements &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209ae4e703bfdbcbe41dd07f3bf0e163cb4d6d46" translate="yes" xml:space="preserve">
          <source>These work similar to &lt;a href=&quot;https://docs.python.org/3/library/enum.html#module-enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt; from Python&amp;rsquo;s standard library, but with some modifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defbd4396e45ff5a6d1ec27bc9db03ec32c25ba8" translate="yes" xml:space="preserve">
          <source>They accept strings in ISO 8601 date/time formats (or some close alternatives) and return objects from the corresponding classes in Python&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a57448ac678ab15c5024e99574887cd2d62c3cf" translate="yes" xml:space="preserve">
          <source>They accept up to picosecond resolution in input, but they truncate it to microseconds, since that&amp;rsquo;s what Python supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b5078a8ac15f6ab3e6719883c692dcb73c6f84" translate="yes" xml:space="preserve">
          <source>They can also be registered as transforms as described in &lt;a href=&quot;#django.db.models.functions.Length&quot;&gt;&lt;code&gt;Length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20419018a63bab14428321e30852b03b16aa819f" translate="yes" xml:space="preserve">
          <source>They look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e540b9dcce638be785d22acaaa3cb69d64d7f98" translate="yes" xml:space="preserve">
          <source>They raise &lt;a href=&quot;https://docs.python.org/3/library/exceptions.html#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if their input is well formatted but isn&amp;rsquo;t a valid date or time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99b17c2983d44a488dbdfbc23bea0d6e43b4481" translate="yes" xml:space="preserve">
          <source>They return &lt;code&gt;None&lt;/code&gt; if it isn&amp;rsquo;t well formatted at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812ce3fd42e848fcc884d0bd799abc17f2609188" translate="yes" xml:space="preserve">
          <source>Things get more complicated if you use inheritance. Consider a subclass of &lt;code&gt;Blog&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e9609ac9fe3987564a8635909eb477eb1365e8" translate="yes" xml:space="preserve">
          <source>Things to note here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930b1d9337c15998012417e2df8566cd18d5617d" translate="yes" xml:space="preserve">
          <source>Think back to our earlier example of using &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt; together. We were recording a user&amp;rsquo;s interest in a particular author; say now that we want to let them leave a message saying why they like them. Again, let&amp;rsquo;s assume we&amp;rsquo;re not going to store this in a relational database but instead in something more esoteric that we won&amp;rsquo;t worry about here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba49c4526ad803643cfdb6cdd00de3926c6b873" translate="yes" xml:space="preserve">
          <source>Think of &lt;em&gt;safe&lt;/em&gt; as shorthand for &lt;em&gt;safe from further escaping&lt;/em&gt; or &lt;em&gt;can be safely interpreted as HTML&lt;/em&gt;. In this example, if &lt;code&gt;data&lt;/code&gt; contains &lt;code&gt;'&amp;lt;b&amp;gt;'&lt;/code&gt;, the output will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d91b13aeb4abe02cad0ef9d448b4827bd79ce1" translate="yes" xml:space="preserve">
          <source>Third party applications might use deprecated APIs in order to support multiple versions of Django, so deprecation warnings in packages you&amp;rsquo;ve installed don&amp;rsquo;t necessarily indicate a problem. If a package doesn&amp;rsquo;t support the latest version of Django, consider raising an issue or sending a pull request for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b75a3978ba07f56f892b6dad49ca9e655751f2a" translate="yes" xml:space="preserve">
          <source>Third, you can manually render each field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93da6425ac5f23d9de76af9ecc6290d48890219" translate="yes" xml:space="preserve">
          <source>Third-party apps or those developing against MyISAM will need to set this; in general, however, you should be developing your own projects against a transactional database and be using &lt;code&gt;TestCase&lt;/code&gt; for most tests, and thus not need this setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dca3ce07c7428024eef7d0ba36844ac85942016" translate="yes" xml:space="preserve">
          <source>Third-party backends can register their functions in the top level &lt;code&gt;__init__.py&lt;/code&gt; file of the backend package or in a top level &lt;code&gt;expressions.py&lt;/code&gt; file (or package) that is imported from the top level &lt;code&gt;__init__.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3aea5a656aa75d4bc142a8ef3190878893a157" translate="yes" xml:space="preserve">
          <source>Third-party panels are also available for the toolbar, that can (for example) report on cache performance and template rendering times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871d2b6d2f4209a2045939948478b5ad9e16f6a2" translate="yes" xml:space="preserve">
          <source>Third-party services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a94a06a870c70d54a7306092125524ffc4a985d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit floating point</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02dbccd28b8a4110858dadd40a75564131c151d" translate="yes" xml:space="preserve">
          <source>Thirty-two bit signed integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46fdc4562bad3c71149e5b74089c85fdee4e2144" translate="yes" xml:space="preserve">
          <source>Thirty-two bit unsigned integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8659901c6ab113559070b8efb3e88975313d14f5" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;fields&lt;/code&gt; option should not be confused with the &lt;code&gt;fields&lt;/code&gt; dictionary key that is within the &lt;a href=&quot;#django.contrib.admin.ModelAdmin.fieldsets&quot;&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; option, as described in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe668f9708459c16592061670a3ccc9192de15e" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;save()&lt;/code&gt; method accepts an optional &lt;code&gt;commit&lt;/code&gt; keyword argument, which accepts either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. If you call &lt;code&gt;save()&lt;/code&gt; with &lt;code&gt;commit=False&lt;/code&gt;, then it will return an object that hasn&amp;rsquo;t yet been saved to the database. In this case, it&amp;rsquo;s up to you to call &lt;code&gt;save()&lt;/code&gt; on the resulting model instance. This is useful if you want to do custom processing on the object before saving it, or if you want to use one of the specialized &lt;a href=&quot;../../ref/models/instances#ref-models-force-insert&quot;&gt;model saving options&lt;/a&gt;. &lt;code&gt;commit&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9842d1e5ae6a88c77cc910626a2d1e24fafb1ee3" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;{% url ... as var %}&lt;/code&gt; syntax will &lt;em&gt;not&lt;/em&gt; cause an error if the view is missing. In practice you&amp;rsquo;ll use this to link to views that are optional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d144afb4955208a7ac9e7e6727e05123ca3e550" translate="yes" xml:space="preserve">
          <source>This SQL is backend independent, so we don&amp;rsquo;t need to worry about different databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922c1ab6c52735016ea62da5aea0d9fb8c82e767" translate="yes" xml:space="preserve">
          <source>This abstract class cannot be rendered, but provides the basic attribute &lt;a href=&quot;#django.forms.Widget.attrs&quot;&gt;&lt;code&gt;attrs&lt;/code&gt;&lt;/a&gt;. You may also implement or override the &lt;a href=&quot;#django.forms.Widget.render&quot;&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/a&gt; method on custom widgets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98df779cf3edb8e16509ad8baf14ab0f117e89b" translate="yes" xml:space="preserve">
          <source>This accomplishes roughly the same thing as the previous example, except:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ffbb81642bfce2b4f307086e6a4bafb907bede" translate="yes" xml:space="preserve">
          <source>This accomplishes several things quite nicely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9bdec834f18a99a8cb91f0165d3cd8461872b02" translate="yes" xml:space="preserve">
          <source>This address is used only for error messages. It is &lt;em&gt;not&lt;/em&gt; the address that regular email messages sent with &lt;a href=&quot;../topics/email#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; come from; for that, see &lt;a href=&quot;#std:setting-DEFAULT_FROM_EMAIL&quot;&gt;&lt;code&gt;DEFAULT_FROM_EMAIL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7bcc51ac61f5d7e80fb62bd7fb7c62e0537ec0" translate="yes" xml:space="preserve">
          <source>This adds an additional field to each form. This new field is named &lt;code&gt;ORDER&lt;/code&gt; and is an &lt;code&gt;forms.IntegerField&lt;/code&gt;. For the forms that came from the initial data it automatically assigned them a numeric value. Let&amp;rsquo;s look at what will happen when the user changes these values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3031abb1ae9e3ebcfbb4e7492ad3a9557e276f8" translate="yes" xml:space="preserve">
          <source>This adds the extra method from the &lt;code&gt;EnhancedArticleForm&lt;/code&gt; and modifies the original &lt;code&gt;ArticleForm.Meta&lt;/code&gt; to remove one field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da81e3de260768907f3e0d72ace994d16203d0d" translate="yes" xml:space="preserve">
          <source>This advanced tutorial begins where &lt;a href=&quot;tutorial07&quot;&gt;Tutorial 7&lt;/a&gt; left off. We&amp;rsquo;ll be turning our Web-poll into a standalone Python package you can reuse in new projects and share with other people.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13069d968d715ba29f0d3d45e284548cff5c148" translate="yes" xml:space="preserve">
          <source>This aggregate produces a query with the SQL 2003 &lt;code&gt;FILTER WHERE&lt;/code&gt; syntax on databases that support it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206af2ca091b9ba2d0eaea6323f193f1d5866b4d" translate="yes" xml:space="preserve">
          <source>This allows interacting with third-party databases that store datetimes in local time rather than UTC. To avoid issues around DST changes, you shouldn&amp;rsquo;t set this option for databases managed by Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5da3cb1c1aab6b7a871362c558a51b462f6df1" translate="yes" xml:space="preserve">
          <source>This allows prefetching the same relation multiple times with a different &lt;code&gt;QuerySet&lt;/code&gt;; for instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52f43f4b912f7688766d81544389903b845d369" translate="yes" xml:space="preserve">
          <source>This allows you to access the final page of results without first having to determine how many pages there are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7b3f159ed03ed9cb4b03f229125786e7044007" translate="yes" xml:space="preserve">
          <source>This allows you to check if a movie is rated better or worse than its peers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7c9808cea39c5e99d97b770f890c92544ba75f" translate="yes" xml:space="preserve">
          <source>This also addresses a man-in-the-middle attack that&amp;rsquo;s possible under HTTPS when using a session independent secret, due to the fact that HTTP &lt;code&gt;Set-Cookie&lt;/code&gt; headers are (unfortunately) accepted by clients even when they are talking to a site under HTTPS. (Referer checking is not done for HTTP requests because the presence of the &lt;code&gt;Referer&lt;/code&gt; header isn&amp;rsquo;t reliable enough under HTTP.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00873cef11eb7a0ee1b86c6a650fd2687c63823c" translate="yes" xml:space="preserve">
          <source>This also allows the result to be used in &lt;code&gt;ORDER BY&lt;/code&gt; and &lt;code&gt;DISTINCT ON&lt;/code&gt; clauses. For example &lt;code&gt;Experiment.objects.order_by('change__abs')&lt;/code&gt; generates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aeeef97b1b4a728464e53eb13776742e51a25fd" translate="yes" xml:space="preserve">
          <source>This also applies to customized implementations of &lt;a href=&quot;../../ref/applications#django.apps.AppConfig.ready&quot;&gt;&lt;code&gt;ready()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bf48f47451354e6af2ba41a76704fa04394723f" translate="yes" xml:space="preserve">
          <source>This also avoids a redirect loop when &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;code&gt;redirect_authenticated_user=True&lt;/code&gt; and the logged-in user doesn&amp;rsquo;t have all of the required permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19589a226533ed4866b513b51865b12f1780fca3" translate="yes" xml:space="preserve">
          <source>This also works in templates. See &lt;a href=&quot;#translator-comments-in-templates&quot;&gt;Comments for translators in templates&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1da31da942f373ac6ec4bdd2bc6cae4188e32b5" translate="yes" xml:space="preserve">
          <source>This also works with full URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e33c6072af3df1d8472934e3eccf57593568a0" translate="yes" xml:space="preserve">
          <source>This approach applies the decorator on a per-instance basis. If you want every instance of a view to be decorated, you need to take a different approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d687e8c265fa6bf427f4459613cfe07a61b283b4" translate="yes" xml:space="preserve">
          <source>This approach can also be used with any other generic class-based views or your own class-based views inheriting directly from &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#View&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#TemplateView&quot;&gt;&lt;code&gt;TemplateView&lt;/code&gt;&lt;/a&gt;, as it keeps the different views as separate as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e00c66184302704d0a20e9ec80ab1488466a5a" translate="yes" xml:space="preserve">
          <source>This approach maximizes code reuse and helps to add items to shared content areas, such as section-wide navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78d35f70778bc7b3d5b29b21ace0bf63af05935" translate="yes" xml:space="preserve">
          <source>This assumes we&amp;rsquo;ve imported a &lt;code&gt;MyFormField&lt;/code&gt; field class (which has its own default widget). This document doesn&amp;rsquo;t cover the details of writing custom form fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133633bb73f92c1c551154f40e4eac91f1a7095f" translate="yes" xml:space="preserve">
          <source>This assumes you have a top-level project package named &lt;code&gt;mysite&lt;/code&gt;, and within it a module &lt;code&gt;mysite/wsgi.py&lt;/code&gt; that contains a WSGI &lt;code&gt;application&lt;/code&gt; object. This is the layout you&amp;rsquo;ll have if you ran &lt;code&gt;django-admin
startproject mysite&lt;/code&gt; (using your own project name in place of &lt;code&gt;mysite&lt;/code&gt;) with a recent version of Django. If this file doesn&amp;rsquo;t exist, you&amp;rsquo;ll need to create it. See the &lt;a href=&quot;index&quot;&gt;How to deploy with WSGI&lt;/a&gt; documentation for the default contents you should put in this file and what else you can add to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c21fcff424a74ca6683f7bcc828faf356d8672" translate="yes" xml:space="preserve">
          <source>This attribute allows relabeling an application when two applications have conflicting labels. It defaults to the last component of &lt;code&gt;name&lt;/code&gt;. It should be a valid Python identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a21f66b48bf69cd4e4b6b9434e01f825a785bc" translate="yes" xml:space="preserve">
          <source>This attribute can help mitigate &lt;a href=&quot;https://www.owasp.org/index.php/Top_10_2013-A4-Insecure_Direct_Object_References&quot;&gt;insecure direct object reference&lt;/a&gt; attacks. When applications allow access to individual objects by a sequential primary key, an attacker could brute-force guess all URLs; thereby obtaining a list of all objects in the application. If users with access to individual objects should be prevented from obtaining this list, setting &lt;code&gt;query_pk_and_slug&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; will help prevent the guessing of URLs as each URL will require two correct, non-sequential arguments. Using a unique slug may serve the same purpose, but this scheme allows you to have non-unique slugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4f7df13325a65588eb9ae75ac9a9735167745c" translate="yes" xml:space="preserve">
          <source>This attribute defaults to &lt;code&gt;label.title()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0874d0745a4ddee1e795c4745a2942590b506a" translate="yes" xml:space="preserve">
          <source>This attribute defines the maximum number of URLs included on each page of the sitemap. Its value should not exceed the default value of &lt;code&gt;50000&lt;/code&gt;, which is the upper limit allowed in the &lt;a href=&quot;https://www.sitemaps.org/protocol.html#index&quot;&gt;Sitemaps protocol&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c3a1341b25ff9392387488411d79f758fbca39" translate="yes" xml:space="preserve">
          <source>This attribute defines the protocol (&lt;code&gt;'http'&lt;/code&gt; or &lt;code&gt;'https'&lt;/code&gt;) of the URLs in the sitemap. If it isn&amp;rsquo;t set, the protocol with which the sitemap was requested is used. If the sitemap is built outside the context of a request, the default is &lt;code&gt;'http'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76de190da8afddcf95e27b5cceed537aaff925c" translate="yes" xml:space="preserve">
          <source>This attribute defines which application the configuration applies to. It must be set in all &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55be929162f6a2e8a201eb26590ef69caca53b20" translate="yes" xml:space="preserve">
          <source>This attribute exists so middleware can treat streaming responses differently from regular responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5714987b0856943bcc55149403366d7e96cd4e04" translate="yes" xml:space="preserve">
          <source>This attribute is &lt;code&gt;True&lt;/code&gt; if the form field is a hidden field and &lt;code&gt;False&lt;/code&gt; otherwise. It&amp;rsquo;s not particularly useful as a template variable, but could be useful in conditional tests such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8172e55f20d4414ca9c1b06c97146615eed52b98" translate="yes" xml:space="preserve">
          <source>This attribute is a private API. It may be changed or removed without a deprecation period in the future, for instance to accommodate changes in application loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9169aa322aae2d7cfd246187c386aa06891f660" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;allow_database_queries = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619c6ed17fa7bb68653f77a5bc9d27df2912a08e" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.TestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;multi_db = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763e75d601e33877b4ffa2fe89118b4a3c1ee9d4" translate="yes" xml:space="preserve">
          <source>This attribute is deprecated in favor of &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt;&lt;code&gt;databases&lt;/code&gt;&lt;/a&gt;. The previous behavior of &lt;code&gt;multi_db = True&lt;/code&gt; can be achieved by setting &lt;code&gt;databases = '__all__'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35531196a9c906e5948d5b5410422b615467c25" translate="yes" xml:space="preserve">
          <source>This attribute is only populated when using the &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend. If you&amp;rsquo;re using another template engine, &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.context_data&quot;&gt;&lt;code&gt;context_data&lt;/code&gt;&lt;/a&gt; may be a suitable alternative on responses with that attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a47c949ac10d7528a0b22337cbc721a18ee027" translate="yes" xml:space="preserve">
          <source>This attribute is only populated when using the &lt;a href=&quot;../templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; backend. If you&amp;rsquo;re using another template engine, &lt;a href=&quot;../../ref/template-response#django.template.response.SimpleTemplateResponse.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; may be a suitable alternative if you only need the name of the template used for rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900148c9aba6296de33ca9d93c47b2c9fd36c35f" translate="yes" xml:space="preserve">
          <source>This attribute is optional when the form field does not have a &lt;code&gt;choices&lt;/code&gt; attribute. If it does, it will override anything you set here when the attribute is updated on the &lt;a href=&quot;fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a92d5a3cad8849cb049d0300bfe09d8eacbbec" translate="yes" xml:space="preserve">
          <source>This attribute is set to &lt;code&gt;'RANGE'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96b8373ebfb00b12226b8f0961f85f767af9472" translate="yes" xml:space="preserve">
          <source>This attribute is set to &lt;code&gt;'ROWS'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c71e36611c7029eb9e2478676908cf67597eab" translate="yes" xml:space="preserve">
          <source>This attribute overrides the default display value for record&amp;rsquo;s fields that are empty (&lt;code&gt;None&lt;/code&gt;, empty string, etc.). The default value is &lt;code&gt;-&lt;/code&gt; (a dash). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05579e86ed56616eea578856de6798cce7600b0d" translate="yes" xml:space="preserve">
          <source>This attribute provides a way of setting the upload directory and file name, and can be set in two ways. In both cases, the value is passed to the &lt;a href=&quot;../files/storage#django.core.files.storage.Storage.save&quot;&gt;&lt;code&gt;Storage.save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566d7048787a5a24854cce8b4b80a894902bdd9a" translate="yes" xml:space="preserve">
          <source>This attribute, if given, should be a list of field names to exclude from the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbb2fc92806c7682b4471a24e9a4100dedbe9f1" translate="yes" xml:space="preserve">
          <source>This awkward split between &lt;code&gt;set_test_cookie()&lt;/code&gt; and &lt;code&gt;test_cookie_worked()&lt;/code&gt; is necessary due to the way cookies work. When you set a cookie, you can&amp;rsquo;t actually tell whether a browser accepted it until the browser&amp;rsquo;s next request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b65dc8940436a8b84d184ec8e275a2b285d8c6e" translate="yes" xml:space="preserve">
          <source>This backend is not intended for use in production &amp;ndash; it is provided as a convenience that can be used during development and testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb7339fa58ae93cac9aaf3cdacf1e9bf9cb505d" translate="yes" xml:space="preserve">
          <source>This backend is not intended for use in production &amp;ndash; it is provided as a convenience that can be used during development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addedba6b76950284da456dcba01e13b8276a85d" translate="yes" xml:space="preserve">
          <source>This behavior avoids writing to the session whenever possible. It should provide the best performance in the general case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7841ab1fb0f284231f157a9b93d6b1b94188178e" translate="yes" xml:space="preserve">
          <source>This behavior is slightly different for the &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;regroup&lt;/code&gt; template tags. If an invalid variable is provided to one of these template tags, the variable will be interpreted as &lt;code&gt;None&lt;/code&gt;. Filters are always applied to invalid variables within these template tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347380881c1c2339c010a11f9f051ed8f317d8ba" translate="yes" xml:space="preserve">
          <source>This behavior is the same as that noted in the queryset documentation for &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.distinct&quot;&gt;&lt;code&gt;distinct()&lt;/code&gt;&lt;/a&gt; and the general rule is the same: normally you won&amp;rsquo;t want extra columns playing a part in the result, so clear out the ordering, or at least make sure it&amp;rsquo;s restricted only to those fields you also select in a &lt;code&gt;values()&lt;/code&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a0acabf1ef45f6c1d49b8653b07e7a06729fc1" translate="yes" xml:space="preserve">
          <source>This behavior simplifies the field classes, because they don&amp;rsquo;t need to check for options that aren&amp;rsquo;t necessary. They pass all the options to the parent class and then don&amp;rsquo;t use them later on. It&amp;rsquo;s up to you whether you want your fields to be more strict about the options they select, or to use the more permissive behavior of the current fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6edd812140766857b46c243602f4d6a1cd2d9d" translate="yes" xml:space="preserve">
          <source>This can also be used to make modifications to existing forms, for example by specifying the widgets to be used for a given field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63231a8cdfb5276c52f332e27cd2946cbfcdbd9" translate="yes" xml:space="preserve">
          <source>This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary &lt;code&gt;data&lt;/code&gt;, the following would display the keys and values of the dictionary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d016f636291136dfeb5abd4074eebd68fd49de0" translate="yes" xml:space="preserve">
          <source>This can be tedious if you have a lot of tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee89b1ad57f631eb321fbf3e4426015d7a334b8" translate="yes" xml:space="preserve">
          <source>This can be used to remove redundancy from URLconfs where a single pattern prefix is used repeatedly. For example, consider this URLconf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02e5b309d77a7b0314c0fefa2e1d25b1143c12d" translate="yes" xml:space="preserve">
          <source>This can be useful for some test setups. It shouldn&amp;rsquo;t be used on a live site unless you want your web server (instead of Django) to generate &amp;ldquo;Internal Server Error&amp;rdquo; responses. In that case, make sure your server doesn&amp;rsquo;t show the stack trace or other sensitive information in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874e969a34609686b932fd8f1a15b343012f6b80" translate="yes" xml:space="preserve">
          <source>This can be useful when you need to load serialized data into an existing database and you cannot guarantee that the serialized primary key value is not already in use, and do not need to ensure that deserialized objects retain the same primary keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9151b0d19d973e0d94e9a559bd438a33ccd0a4e" translate="yes" xml:space="preserve">
          <source>This cascade behavior is customizable via the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument to the &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddf7566bd95ed9d38732ed554426b5dc55e9487" translate="yes" xml:space="preserve">
          <source>This cascade behavior is customizable via the &lt;a href=&quot;fields#django.db.models.ForeignKey.on_delete&quot;&gt;&lt;code&gt;on_delete&lt;/code&gt;&lt;/a&gt; argument to the &lt;a href=&quot;fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48788848f978bc3a57457fe320417511f8ca8ab" translate="yes" xml:space="preserve">
          <source>This change can&amp;rsquo;t be done automatically and requires manually fixing your schema, moving your data from the old user table, and possibly manually reapplying some migrations. See &lt;a href=&quot;https://code.djangoproject.com/ticket/25313&quot;&gt;#25313&lt;/a&gt; for an outline of the steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e22ebf245c2c79c7368490816e720a0729356b" translate="yes" xml:space="preserve">
          <source>This check is done by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b434322a2c0bc13a3658bbaeb5d5cc7064d646fd" translate="yes" xml:space="preserve">
          <source>This class allows for the representation of an OGR geometry type in any of several ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6657206ec70f04776a5d18c46e5a36a7d2845c0" translate="yes" xml:space="preserve">
          <source>This class allows outputting the WKT representation of a geometry. See the &lt;a href=&quot;#django.contrib.gis.geos.WKBWriter.outdim&quot;&gt;&lt;code&gt;WKBWriter.outdim&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.trim&quot;&gt;&lt;code&gt;trim&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.contrib.gis.geos.WKTWriter.precision&quot;&gt;&lt;code&gt;precision&lt;/code&gt;&lt;/a&gt; attributes for details about the constructor arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5b502d03a82bfc8a23cacf7a992259449fe1a8" translate="yes" xml:space="preserve">
          <source>This class can be used to query associated records for a given model instance like a normal model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adbb7a0875b3b8ed230e2a68cd6f27b4fcdd4af" translate="yes" xml:space="preserve">
          <source>This class doesn&amp;rsquo;t follow the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt; since it has &lt;code&gt;=&amp;lt;rhs&amp;gt;&lt;/code&gt; on its construction: lookups are always the end of a lookup expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f798b440b043bd3244259cc7c29c80441947c367" translate="yes" xml:space="preserve">
          <source>This class first uses &lt;code&gt;CookieStorage&lt;/code&gt;, and falls back to using &lt;code&gt;SessionStorage&lt;/code&gt; for the messages that could not fit in a single cookie. It also requires Django&amp;rsquo;s &lt;code&gt;contrib.sessions&lt;/code&gt; application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ccf6511aa589356474def2a6a35b4f9e7e9553" translate="yes" xml:space="preserve">
          <source>This class follows the &lt;a href=&quot;#query-expression&quot;&gt;Query Expression API&lt;/a&gt;, which implies that you can use &lt;code&gt;&amp;lt;expression&amp;gt;__&amp;lt;transform1&amp;gt;__&amp;lt;transform2&amp;gt;&lt;/code&gt;. It&amp;rsquo;s a specialized &lt;a href=&quot;expressions#func-expressions&quot;&gt;Func() expression&lt;/a&gt; that only accepts one argument. It can also be used on the right hand side of a filter or directly as an annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec0bf84ed853e6bc6d3fe5e000b2034e8412b14" translate="yes" xml:space="preserve">
          <source>This class lives at &lt;code&gt;django.template.Template&lt;/code&gt;. The constructor takes one argument &amp;mdash; the raw template code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff48bb5d80db7ed334740551a7fe4d5cd696a5f" translate="yes" xml:space="preserve">
          <source>This class stores all messages inside of the request&amp;rsquo;s session. Therefore it requires Django&amp;rsquo;s &lt;code&gt;contrib.sessions&lt;/code&gt; application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37288188058569af8da43c31e65dafbe7a4e22b" translate="yes" xml:space="preserve">
          <source>This class stores the message data in a cookie (signed with a secret hash to prevent manipulation) to persist notifications across requests. Old messages are dropped if the cookie data size would exceed 2048 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2590bcfc60140b42ba1d212051567a2d8bedd3de" translate="yes" xml:space="preserve">
          <source>This class works like &lt;a href=&quot;#django.contrib.admin.apps.AdminConfig&quot;&gt;&lt;code&gt;AdminConfig&lt;/code&gt;&lt;/a&gt;, except it doesn&amp;rsquo;t call &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt;&lt;code&gt;autodiscover()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d57bb9abee0e0eb52e07f4cd61c2b38139513f0" translate="yes" xml:space="preserve">
          <source>This classmethod instantiates the GeoIP object from the given database path and given cache setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a79f3d86a0fda82a3c6a4f99d9a9836f9dd257f" translate="yes" xml:space="preserve">
          <source>This code defines a &lt;code&gt;CalendarWidget&lt;/code&gt;, which will be based on &lt;code&gt;TextInput&lt;/code&gt;. Every time the CalendarWidget is used on a form, that form will be directed to include the CSS file &lt;code&gt;pretty.css&lt;/code&gt;, and the JavaScript files &lt;code&gt;animations.js&lt;/code&gt; and &lt;code&gt;actions.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad938899ff955f81a1acf930956f7e85fbeed5b" translate="yes" xml:space="preserve">
          <source>This code includes a few things we haven&amp;rsquo;t covered yet in this tutorial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cbab031f9a4c283f03dc76fe427c7b452cea702" translate="yes" xml:space="preserve">
          <source>This code lives in &lt;code&gt;django/contrib&lt;/code&gt; in the Django distribution. This document gives a rundown of the packages in &lt;code&gt;contrib&lt;/code&gt;, along with any dependencies those packages have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a209a74619a3a02ee21ae6fc8984126b4f809c5d" translate="yes" xml:space="preserve">
          <source>This code would all live in a &lt;code&gt;models.py&lt;/code&gt; file for a custom authentication app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deff7c10eeb34b940ec43fed363441c36914806f" translate="yes" xml:space="preserve">
          <source>This command assumes the programs are on your &lt;code&gt;PATH&lt;/code&gt; so that a call to the program name (&lt;code&gt;psql&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;sqlite3&lt;/code&gt;, &lt;code&gt;sqlplus&lt;/code&gt;) will find the program in the right place. There&amp;rsquo;s no way to specify the location of the program manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282154b404446906503f35547883908f52737354" translate="yes" xml:space="preserve">
          <source>This command doesn&amp;rsquo;t require configured settings. However, when settings aren&amp;rsquo;t configured, the command can&amp;rsquo;t ignore the &lt;a href=&quot;settings#std:setting-MEDIA_ROOT&quot;&gt;&lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; directories or include &lt;a href=&quot;settings#std:setting-LOCALE_PATHS&quot;&gt;&lt;code&gt;LOCALE_PATHS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735f3f00d1504ad505769110a576a93d286cae1" translate="yes" xml:space="preserve">
          <source>This command is only available if &lt;a href=&quot;contrib/gis/index&quot;&gt;GeoDjango&lt;/a&gt; (&lt;code&gt;django.contrib.gis&lt;/code&gt;) is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4111558387329a52ac8875bd1edadafcea0cccea" translate="yes" xml:space="preserve">
          <source>This command is only available if Django&amp;rsquo;s &lt;a href=&quot;../topics/auth/index&quot;&gt;authentication system&lt;/a&gt; (&lt;code&gt;django.contrib.auth&lt;/code&gt;) is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc14624d290bf11b63a5aa824e562d18be6207f" translate="yes" xml:space="preserve">
          <source>This command is only available if Django&amp;rsquo;s &lt;a href=&quot;contrib/contenttypes&quot;&gt;contenttypes app&lt;/a&gt; (&lt;a href=&quot;contrib/contenttypes#module-django.contrib.contenttypes&quot;&gt;&lt;code&gt;django.contrib.contenttypes&lt;/code&gt;&lt;/a&gt;) is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93941679327d68c290df5e17973e2447ca49ab6" translate="yes" xml:space="preserve">
          <source>This command is only available if the &lt;a href=&quot;../howto/static-files/index&quot;&gt;static files application&lt;/a&gt; (&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;) is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947d4b131f1ea6c69d277423618cddc624fcf1b3" translate="yes" xml:space="preserve">
          <source>This command is only available if the &lt;a href=&quot;contrib/sitemaps&quot;&gt;Sitemaps framework&lt;/a&gt; (&lt;code&gt;django.contrib.sitemaps&lt;/code&gt;) is installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a039c93fd1dadc72718bb5deeb1fa1ef6611d324" translate="yes" xml:space="preserve">
          <source>This command should produce the following output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a44582b892bb6a5d356086079698f0d802de285" translate="yes" xml:space="preserve">
          <source>This command will start a minimal SMTP server listening on port 1025 of localhost. This server prints to standard output all email headers and the email body. You then only need to set the &lt;a href=&quot;../ref/settings#std:setting-EMAIL_HOST&quot;&gt;&lt;code&gt;EMAIL_HOST&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../ref/settings#std:setting-EMAIL_PORT&quot;&gt;&lt;code&gt;EMAIL_PORT&lt;/code&gt;&lt;/a&gt; accordingly. For a more detailed discussion of SMTP server options, see the Python documentation for the &lt;a href=&quot;https://docs.python.org/3/library/smtpd.html#module-smtpd&quot;&gt;&lt;code&gt;smtpd&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6403a143405e5c980c3e1ba916a8a98a8790bb6e" translate="yes" xml:space="preserve">
          <source>This complex tag is best illustrated by way of an example: say that &lt;code&gt;cities&lt;/code&gt; is a list of cities represented by dictionaries containing &lt;code&gt;&quot;name&quot;&lt;/code&gt;, &lt;code&gt;&quot;population&quot;&lt;/code&gt;, and &lt;code&gt;&quot;country&quot;&lt;/code&gt; keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1914a9a0cf5f327769de0194335c233c38b7518e" translate="yes" xml:space="preserve">
          <source>This consideration is not limited to the use of &lt;code&gt;Prefetch&lt;/code&gt; objects. Some advanced techniques may require that the lookups be performed in a specific order to avoid creating extra queries; therefore it&amp;rsquo;s recommended to always carefully order &lt;code&gt;prefetch_related&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34268c561163edb8a105bcac5d3b68ae9ddb9e8" translate="yes" xml:space="preserve">
          <source>This controls the maximum number of forms to show in the inline. This doesn&amp;rsquo;t directly correlate to the number of objects, but can if the value is small enough. See &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets-max-num&quot;&gt;Limiting the number of editable objects&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712a4ce1be34ad32cfcdf97b787042ea5cbeec26" translate="yes" xml:space="preserve">
          <source>This controls the minimum number of forms to show in the inline. See &lt;a href=&quot;../../forms/models#django.forms.models.modelformset_factory&quot;&gt;&lt;code&gt;modelformset_factory()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619d069001a26076eba8520d6fb9a58bdc9b453d" translate="yes" xml:space="preserve">
          <source>This controls the number of extra forms the formset will display in addition to the initial forms. See the &lt;a href=&quot;../../../topics/forms/formsets&quot;&gt;formsets documentation&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a694cf64c997f136b0943a8eb6406863e2acad" translate="yes" xml:space="preserve">
          <source>This conversion takes place before and after each middleware (you can think of it as the thin film in between each layer of the onion), so that every middleware can always rely on getting some kind of HTTP response back from calling its &lt;code&gt;get_response&lt;/code&gt; callable. Middleware don&amp;rsquo;t need to worry about wrapping their call to &lt;code&gt;get_response&lt;/code&gt; in a &lt;code&gt;try/except&lt;/code&gt; and handling an exception that might have been raised by a later middleware or the view. Even if the very next middleware in the chain raises an &lt;a href=&quot;views#django.http.Http404&quot;&gt;&lt;code&gt;Http404&lt;/code&gt;&lt;/a&gt; exception, for example, your middleware won&amp;rsquo;t see that exception; instead it will get an &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; object with a &lt;a href=&quot;../../ref/request-response#django.http.HttpResponse.status_code&quot;&gt;&lt;code&gt;status_code&lt;/code&gt;&lt;/a&gt; of 404.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a040e1b5bbcdfa5929e5755bb6d313ea3bb589" translate="yes" xml:space="preserve">
          <source>This cookie is set by &lt;code&gt;CsrfViewMiddleware&lt;/code&gt;. It is sent with every response that has called &lt;code&gt;django.middleware.csrf.get_token()&lt;/code&gt; (the function used internally to retrieve the CSRF token), if it wasn&amp;rsquo;t already set on the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bcab374c0361ab56a5338f10d8c0b90bd44191" translate="yes" xml:space="preserve">
          <source>This covers the basics, but forms can do a whole lot more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f58ee9b60b7567a5281e41f8e27c9b89c6a2dedd" translate="yes" xml:space="preserve">
          <source>This creates a &lt;code&gt;to_tsvector&lt;/code&gt; in the database from the &lt;code&gt;body_text&lt;/code&gt; field and a &lt;code&gt;plainto_tsquery&lt;/code&gt; from the search term &lt;code&gt;'Cheese'&lt;/code&gt;, both using the default database search configuration. The results are obtained by matching the query and the vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0e8304663e6242a2ea973e9fe8986338b415db" translate="yes" xml:space="preserve">
          <source>This creates a form that behaves identically to &lt;code&gt;ArticleForm&lt;/code&gt;, except there&amp;rsquo;s some extra validation and cleaning for the &lt;code&gt;pub_date&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f066c3383bb7cdc130908a2e1c589274d837d782" translate="yes" xml:space="preserve">
          <source>This creates a table in your database that is in the proper format that Django&amp;rsquo;s database-cache system expects. The name of the table is taken from &lt;a href=&quot;../ref/settings#std:setting-CACHES-LOCATION&quot;&gt;&lt;code&gt;LOCATION&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29544a87a8d82501d49cd8afa35afa75ea3f2904" translate="yes" xml:space="preserve">
          <source>This declares a &lt;code&gt;pizza_done&lt;/code&gt; signal that will provide receivers with &lt;code&gt;toppings&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10c25b287ebc71dfb9bcf4f3e26f44f603fbea6" translate="yes" xml:space="preserve">
          <source>This decorator adds a &lt;code&gt;Cache-Control: max-age=0, no-cache, no-store,
must-revalidate, private&lt;/code&gt; header to a response to indicate that a page should never be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e967a0456ed9876c8f232b7fa67088e0c896e983" translate="yes" xml:space="preserve">
          <source>This decorator compresses content if the browser allows gzip compression. It sets the &lt;code&gt;Vary&lt;/code&gt; header accordingly, so that caches will base their storage on the &lt;code&gt;Accept-Encoding&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed058eb50d5ef634514dbf535331db36dba04475" translate="yes" xml:space="preserve">
          <source>This decorator defines the &lt;code&gt;__html__()&lt;/code&gt; method on the decorated class by wrapping &lt;code&gt;__str__()&lt;/code&gt; in &lt;a href=&quot;#django.utils.safestring.mark_safe&quot;&gt;&lt;code&gt;mark_safe()&lt;/code&gt;&lt;/a&gt;. Ensure the &lt;code&gt;__str__()&lt;/code&gt; method does indeed return text that doesn&amp;rsquo;t require HTML escaping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f104663a93bed2d5ef71abc210b9e2e74a9cc68" translate="yes" xml:space="preserve">
          <source>This decorator forces a view to send the CSRF cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7737cd6830405eedda087588dfd63788c780c4" translate="yes" xml:space="preserve">
          <source>This decorator is used on the admin views that require authorization. A view decorated with this function will having the following behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc3427e08f718c72586d4660a2858362df707a" translate="yes" xml:space="preserve">
          <source>This decorator marks a view as being exempt from the protection ensured by the middleware. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bd152233ab8d6d56636ea2a2de594c9d78eb23" translate="yes" xml:space="preserve">
          <source>This decorator patches the response&amp;rsquo;s &lt;code&gt;Cache-Control&lt;/code&gt; header by adding all of the keyword arguments to it. See &lt;a href=&quot;../../ref/utils#django.utils.cache.patch_cache_control&quot;&gt;&lt;code&gt;patch_cache_control()&lt;/code&gt;&lt;/a&gt; for the details of the transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f48d2e55f43a65b708cccf73b25d44fc28c98e5" translate="yes" xml:space="preserve">
          <source>This decorator takes care of sending out the appropriate HTTP header behind the scenes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbf8d3caaa8867b0f7a41f87f1825677e97df21" translate="yes" xml:space="preserve">
          <source>This decorator will negate the effect of &lt;a href=&quot;../../ref/settings#std:setting-DATABASE-ATOMIC_REQUESTS&quot;&gt;&lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt;&lt;/a&gt; for a given view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac3f25c0c930bfb4618528ad1a8df65a6748241" translate="yes" xml:space="preserve">
          <source>This default output is a two-column HTML table, with a &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; for each field. Notice the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20289f789fdcdd34dd2173de027af9e90d93e518" translate="yes" xml:space="preserve">
          <source>This defaults to &lt;a href=&quot;../../../topics/forms/modelforms#django.forms.models.BaseInlineFormSet&quot;&gt;&lt;code&gt;BaseInlineFormSet&lt;/code&gt;&lt;/a&gt;. Using your own formset can give you many possibilities of customization. Inlines are built around &lt;a href=&quot;../../../topics/forms/modelforms#model-formsets&quot;&gt;model formsets&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0faa87c549dff926edc06cbb5002733a6d48db" translate="yes" xml:space="preserve">
          <source>This defines a &lt;a href=&quot;../../ref/forms/api#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class with a single field (&lt;code&gt;your_name&lt;/code&gt;). We&amp;rsquo;ve applied a human-friendly label to the field, which will appear in the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; when it&amp;rsquo;s rendered (although in this case, the &lt;a href=&quot;../../ref/forms/fields#django.forms.Field.label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt; we specified is actually the same one that would be generated automatically if we had omitted it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfb94c6ec9d795bbf4a68892297b27f2c38ae7c" translate="yes" xml:space="preserve">
          <source>This definition ensures that all &lt;code&gt;Person&lt;/code&gt; objects are serialized before any &lt;code&gt;Book&lt;/code&gt; objects. In turn, any object referencing &lt;code&gt;Book&lt;/code&gt; will be serialized after both &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Book&lt;/code&gt; have been serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b7173e8cd6e2684c8184d2c95f2279ec55ccb4" translate="yes" xml:space="preserve">
          <source>This definition is deliberately vague. For example, a tag can output content, serve as a control structure e.g. an &amp;ldquo;if&amp;rdquo; statement or a &amp;ldquo;for&amp;rdquo; loop, grab content from a database, or even enable access to other template tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc84fe0f2da4ec965cc56763ba3bd938536d6d1" translate="yes" xml:space="preserve">
          <source>This dependency behavior affects most migration operations where you restrict to a single app. Restricting to a single app (either in &lt;code&gt;makemigrations&lt;/code&gt; or &lt;code&gt;migrate&lt;/code&gt;) is a best-efforts promise, and not a guarantee; any other apps that need to be used to get dependencies correct will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83dcab2164c54ffbf545594e1639ad5e5aae500" translate="yes" xml:space="preserve">
          <source>This describes the name of the application that is being deployed. Every instance of a single application will have the same application namespace. For example, Django&amp;rsquo;s admin application has the somewhat predictable application namespace of &lt;code&gt;'admin'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51ac0918158cde7cca8ac5666530e027e7836dd" translate="yes" xml:space="preserve">
          <source>This detailed summary information tells us the number of features in the layer (246), the geographic bounds of the data, the spatial reference system (&amp;ldquo;SRS WKT&amp;rdquo;), as well as type information for each attribute field. For example, &lt;code&gt;FIPS: String (2.0)&lt;/code&gt; indicates that the &lt;code&gt;FIPS&lt;/code&gt; character field has a maximum length of 2. Similarly, &lt;code&gt;LON: Real (8.3)&lt;/code&gt; is a floating-point field that holds a maximum of 8 digits up to three decimal places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5775c97322cffc1f2873d9593fa15abfd4b13cb" translate="yes" xml:space="preserve">
          <source>This directory structure will house the poll application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e48acbb5bc75817b54f6d0a3e50ca21c4e8e2b" translate="yes" xml:space="preserve">
          <source>This document assumes you know the Django basics, as covered in the &lt;a href=&quot;../intro/tutorial01&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1457ea88a1acf0856cec1d11ee41cbdd917a2f9" translate="yes" xml:space="preserve">
          <source>This document contains all the API references of &lt;a href=&quot;#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; including the &lt;a href=&quot;#field-options&quot;&gt;field options&lt;/a&gt; and &lt;a href=&quot;#field-types&quot;&gt;field types&lt;/a&gt; Django offers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd26ba78c567ad9739e3812ccf7a4eaf9ca01e9" translate="yes" xml:space="preserve">
          <source>This document covers all stable modules in &lt;code&gt;django.utils&lt;/code&gt;. Most of the modules in &lt;code&gt;django.utils&lt;/code&gt; are designed for internal use and only the following parts can be considered stable and thus backwards compatible as per the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/release-process/#internal-release-deprecation-policy&quot;&gt;internal release deprecation policy&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdca3268b6229f527808f01b345f3456813ecc4" translate="yes" xml:space="preserve">
          <source>This document covers features of the &lt;a href=&quot;instances#django.db.models.Model&quot;&gt;&lt;code&gt;Model&lt;/code&gt;&lt;/a&gt; class. For more information about models, see &lt;a href=&quot;index&quot;&gt;the complete list of Model reference guides&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902838c5b604ed2bf5f8c9077a75f9aca720449e" translate="yes" xml:space="preserve">
          <source>This document covers the gritty details of Django&amp;rsquo;s forms API. You should read the &lt;a href=&quot;../../topics/forms/index&quot;&gt;introduction to working with forms&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544cbbec1b8fa3762dc6e8450bf8c8ad3e6604c9" translate="yes" xml:space="preserve">
          <source>This document describes Django&amp;rsquo;s built-in template tags and filters. It is recommended that you use the &lt;a href=&quot;../contrib/admin/admindocs&quot;&gt;automatic documentation&lt;/a&gt;, if available, as this will also include documentation for any custom tags or filters installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033709290e422fd3b5ffcea670ff7f3a4203cbac" translate="yes" xml:space="preserve">
          <source>This document describes Django&amp;rsquo;s file access APIs for files such as those uploaded by a user. The lower level APIs are general enough that you could use them for other purposes. If you want to handle &amp;ldquo;static files&amp;rdquo; (JS, CSS, etc.), see &lt;a href=&quot;../howto/static-files/index&quot;&gt;Managing static files (e.g. images, JavaScript, CSS)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8518c2e2577a808f5763d4a2e4dc7d5cc5c498" translate="yes" xml:space="preserve">
          <source>This document describes how to make use of external authentication sources (where the Web server sets the &lt;code&gt;REMOTE_USER&lt;/code&gt; environment variable) in your Django applications. This type of authentication solution is typically seen on intranet sites, with single sign-on solutions such as IIS and Integrated Windows Authentication or Apache and &lt;a href=&quot;https://httpd.apache.org/docs/2.2/mod/mod_authnz_ldap.html&quot;&gt;mod_authnz_ldap&lt;/a&gt;, &lt;a href=&quot;https://www.apereo.org/projects/cas&quot;&gt;CAS&lt;/a&gt;, &lt;a href=&quot;http://weblogin.org&quot;&gt;Cosign&lt;/a&gt;, &lt;a href=&quot;https://www.stanford.edu/services/webauth/&quot;&gt;WebAuth&lt;/a&gt;, &lt;a href=&quot;https://sourceforge.net/projects/mod-auth-sspi&quot;&gt;mod_auth_sspi&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d124b9e2f39ccbf1fa3ade9bdb7f3486a3fe38" translate="yes" xml:space="preserve">
          <source>This document describes the details of the &lt;code&gt;Model&lt;/code&gt; API. It builds on the material presented in the &lt;a href=&quot;../../topics/db/models&quot;&gt;model&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query&lt;/a&gt; guides, so you&amp;rsquo;ll probably want to read and understand those documents before reading this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26a08322ac485d05d31fda51379700ed782ed08" translate="yes" xml:space="preserve">
          <source>This document describes the details of the &lt;code&gt;QuerySet&lt;/code&gt; API. It builds on the material presented in the &lt;a href=&quot;../../topics/db/models&quot;&gt;model&lt;/a&gt; and &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query&lt;/a&gt; guides, so you&amp;rsquo;ll probably want to read and understand those documents before reading this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566e7a2e0221f12c04a9ab6773a6abddd6419150" translate="yes" xml:space="preserve">
          <source>This document explains all middleware components that come with Django. For information on how to use them and how to write your own middleware, see the &lt;a href=&quot;../topics/http/middleware&quot;&gt;middleware usage guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21941622da02c0227fd75dff8d70c16224be801b" translate="yes" xml:space="preserve">
          <source>This document explains all the possible &lt;a href=&quot;../../topics/db/models#meta-options&quot;&gt;metadata options&lt;/a&gt; that you can give your model in its internal &lt;code&gt;class Meta&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f969a5a1fecc77a168362f2d39b1747f7cf58029" translate="yes" xml:space="preserve">
          <source>This document explains how middleware works, how you activate middleware, and how to write your own middleware. Django ships with some built-in middleware you can use right out of the box. They&amp;rsquo;re documented in the &lt;a href=&quot;../../ref/middleware&quot;&gt;built-in middleware reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8c78329defa84c0884d6779275ab8867521575" translate="yes" xml:space="preserve">
          <source>This document explains how to output CSV (Comma Separated Values) dynamically using Django views. To do this, you can either use the Python CSV library or the Django template system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894647d2e9c9f93e52b91bb6a0df0a230350fdbc" translate="yes" xml:space="preserve">
          <source>This document explains how to output PDF files dynamically using Django views. This is made possible by the excellent, open-source &lt;a href=&quot;https://www.reportlab.com/opensource/&quot;&gt;ReportLab&lt;/a&gt; Python PDF library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1ee61844ea7fdf16533379755905a5f2c8e37e" translate="yes" xml:space="preserve">
          <source>This document explains how to structure and write database migrations for different scenarios you might encounter. For introductory material on migrations, see &lt;a href=&quot;../topics/migrations&quot;&gt;the topic guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03baac23853f40f73961af7df9f47520320cf2c" translate="yes" xml:space="preserve">
          <source>This document explains the APIs for &lt;a href=&quot;#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; objects, which are defined in the &lt;a href=&quot;#module-django.http&quot;&gt;&lt;code&gt;django.http&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aa17e0fa56e40f748271195ff26ec854e8da93" translate="yes" xml:space="preserve">
          <source>This document explains the Django template system from a technical perspective &amp;ndash; how it works and how to extend it. If you&amp;rsquo;re looking for reference on the language syntax, see &lt;a href=&quot;language&quot;&gt;The Django template language&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a8b7403c58fdb7fe9782bdf641ed06729e578c" translate="yes" xml:space="preserve">
          <source>This document explains the language syntax of the Django template system. If you&amp;rsquo;re looking for a more technical perspective on how it works and how to extend it, see &lt;a href=&quot;api&quot;&gt;The Django template language: for Python programmers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7fbb4dd17fabf8602c9f527267298186717644" translate="yes" xml:space="preserve">
          <source>This document explains the usage of Django&amp;rsquo;s authentication system in its default configuration. This configuration has evolved to serve the most common project needs, handling a reasonably wide range of tasks, and has a careful implementation of passwords and permissions. For projects where authentication needs differ from the default, Django supports extensive &lt;a href=&quot;customizing&quot;&gt;extension and customization&lt;/a&gt; of authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efc231eae9a55af885283dbf98cd95febfd2d79" translate="yes" xml:space="preserve">
          <source>This document explores the details of the GeoDjango Model API. Throughout this section, we&amp;rsquo;ll be using the following geographic model of a &lt;a href=&quot;https://en.wikipedia.org/wiki/ZIP_code&quot;&gt;ZIP code&lt;/a&gt; and of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_elevation_model&quot;&gt;Digital Elevation Model&lt;/a&gt; as our examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22646d6f146419e72dc80def95513b9c3a40877d" translate="yes" xml:space="preserve">
          <source>This document has covered the basics and some common usage patterns. For complete details on all the settings, commands, template tags, and other pieces included in &lt;a href=&quot;../../ref/contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;../../ref/contrib/staticfiles&quot;&gt;the staticfiles reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16711226e7ec7f990284540ed6d67c159df29ec7" translate="yes" xml:space="preserve">
          <source>This document has the API references of lookups, the Django API for building the &lt;code&gt;WHERE&lt;/code&gt; clause of a database query. To learn how to &lt;em&gt;use&lt;/em&gt; lookups, see &lt;a href=&quot;../../topics/db/queries&quot;&gt;Making queries&lt;/a&gt;; to learn how to &lt;em&gt;create&lt;/em&gt; new lookups, see &lt;a href=&quot;../../howto/custom-lookups&quot;&gt;Custom Lookups&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1a50700c6555619eec15c47a010c5f7478489a" translate="yes" xml:space="preserve">
          <source>This document is an overview of Django&amp;rsquo;s security features. It includes advice on securing a Django-powered site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84560b51e6624b2039b940fd12eeb92b9f69e3d" translate="yes" xml:space="preserve">
          <source>This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8197368c11e0a3c1acb5f05bc980e83eeffe0f" translate="yes" xml:space="preserve">
          <source>This document provides API reference material for the components of Django&amp;rsquo;s authentication system. For more details on the usage of these components or how to customize authentication and authorization see the &lt;a href=&quot;../../topics/auth/index&quot;&gt;authentication topic guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0f0454f8d646679fbd38c6442f28e0bf5cc850" translate="yes" xml:space="preserve">
          <source>This document provides an introduction to the basics of web forms and how they are handled in Django. For a more detailed look at specific areas of the forms API, see &lt;a href=&quot;../../ref/forms/api&quot;&gt;The Forms API&lt;/a&gt;, &lt;a href=&quot;../../ref/forms/fields&quot;&gt;Form fields&lt;/a&gt;, and &lt;a href=&quot;../../ref/forms/validation&quot;&gt;Form and field validation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967d3129cc349895cafe473321a1b303bb3b5677" translate="yes" xml:space="preserve">
          <source>This document provides an overview of techniques and tools that can help get your Django code running more efficiently - faster, and using fewer system resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8880af57ded863c99a4c5232f1300de5b5851772" translate="yes" xml:space="preserve">
          <source>This document tells you what you need to know if you&amp;rsquo;re writing applications that use data or templates that are encoded in something other than ASCII.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87ae2efb4790bfa1790aabdbb491fe1953bf7d2" translate="yes" xml:space="preserve">
          <source>This document will get you up and running with Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290e9c0b7aa1c73d34cb337fae7a6e9a2496367f" translate="yes" xml:space="preserve">
          <source>This document will guide you through installing Python 3.7 and Django on Windows. It also provides instructions for installing &lt;a href=&quot;https://pypi.org/project/virtualenv/&quot;&gt;virtualenv&lt;/a&gt; and &lt;a href=&quot;https://pypi.org/project/virtualenvwrapper-win/&quot;&gt;virtualenvwrapper&lt;/a&gt;, which make it easier to work on Python projects. This is meant as a beginner&amp;rsquo;s guide for users working on Django projects and does not reflect how Django should be installed when developing patches for Django itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afade6c1854764a7175f32fe0cc17bfdb7af0b8f" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t affect what happens to data coming from the variable itself. The variable&amp;rsquo;s contents are still automatically escaped, if necessary, because they&amp;rsquo;re beyond the control of the template author.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d12db88cb55b81499b029317d86ce08b6463c1" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t apply just to foreign keys. It also works with many-to-many relations. For example, we can ask for every author, annotated with the total number of pages considering all the books the author has (co-)authored (note how we use &lt;code&gt;'book'&lt;/code&gt; to specify the &lt;code&gt;Author&lt;/code&gt; -&amp;gt; &lt;code&gt;Book&lt;/code&gt; reverse many-to-many hop):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00e9cd207d5098f3d16ad75218a8ce74d1d4e97" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t necessarily control whether or not the user can log in. Authentication backends aren&amp;rsquo;t required to check for the &lt;code&gt;is_active&lt;/code&gt; flag but the default backend (&lt;a href=&quot;#django.contrib.auth.backends.ModelBackend&quot;&gt;&lt;code&gt;ModelBackend&lt;/code&gt;&lt;/a&gt;) and the &lt;a href=&quot;#django.contrib.auth.backends.RemoteUserBackend&quot;&gt;&lt;code&gt;RemoteUserBackend&lt;/code&gt;&lt;/a&gt; do. You can use &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersModelBackend&quot;&gt;&lt;code&gt;AllowAllUsersModelBackend&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend&quot;&gt;&lt;code&gt;AllowAllUsersRemoteUserBackend&lt;/code&gt;&lt;/a&gt; if you want to allow inactive users to login. In this case, you&amp;rsquo;ll also want to customize the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.forms.AuthenticationForm&quot;&gt;&lt;code&gt;AuthenticationForm&lt;/code&gt;&lt;/a&gt; used by the &lt;a href=&quot;../../topics/auth/default#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt; as it rejects inactive users. Be aware that the permission-checking methods such as &lt;a href=&quot;#django.contrib.auth.models.User.has_perm&quot;&gt;&lt;code&gt;has_perm()&lt;/code&gt;&lt;/a&gt; and the authentication in the Django admin all return &lt;code&gt;False&lt;/code&gt; for inactive users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8caee5635d7da4c29e177735dbd0278a714db4e" translate="yes" xml:space="preserve">
          <source>This dotted pair describes the name of the Django app (which must be in your &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;), and the name of the Django model that you wish to use as your user model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afbcf97829b0e93392116ba9d7dd0af83075c3c" translate="yes" xml:space="preserve">
          <source>This emulates the &lt;code&gt;gettext&lt;/code&gt; function but does nothing, returning whatever is passed to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2029a8b0e6aca5caab4b6c4f8421514a74f117fa" translate="yes" xml:space="preserve">
          <source>This enables filtering, ordering, and other query operations on &lt;code&gt;Bookmark&lt;/code&gt; from &lt;code&gt;TaggedItem&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79841819ca2a800d1b6ea034bd42fbb84750214d" translate="yes" xml:space="preserve">
          <source>This enables you to squash and not mess up systems currently in production that aren&amp;rsquo;t fully up-to-date yet. The recommended process is to squash, keeping the old files, commit and release, wait until all systems are upgraded with the new release (or if you&amp;rsquo;re a third-party project, ensure your users upgrade releases in order without skipping any), and then remove the old files, commit and do a second release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a729ffd47b9fd37ed910ccfca1df88d310082424" translate="yes" xml:space="preserve">
          <source>This ensures all tables and columns will use UTF-8 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5c1fda39e6b863f198b90e5554f80a714096af" translate="yes" xml:space="preserve">
          <source>This ensures that deserializing is a non-destructive operation even if the data in your serialized representation doesn&amp;rsquo;t match what&amp;rsquo;s currently in the database. Usually, working with these &lt;code&gt;DeserializedObject&lt;/code&gt; instances looks something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d4eb7ce781126408b386700b398bdba39c9b03" translate="yes" xml:space="preserve">
          <source>This ensures that further lookups like &lt;code&gt;abs__lte&lt;/code&gt; behave as they would for a &lt;code&gt;FloatField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed289593a2973a4ff43ed7d2895e9227f33109e4" translate="yes" xml:space="preserve">
          <source>This ensures that only forms that have originated from trusted domains can be used to POST data back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c94877266da84c92d34a9ec0430b63e92ea4577" translate="yes" xml:space="preserve">
          <source>This example &lt;code&gt;Task&lt;/code&gt; model creates two custom permissions, i.e., actions users can or cannot do with &lt;code&gt;Task&lt;/code&gt; instances, specific to your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa190ccfe414171bf40c299883ef107cb178c96c" translate="yes" xml:space="preserve">
          <source>This example allows translators to translate part of the URL. If &amp;ldquo;person&amp;rdquo; is translated to &amp;ldquo;persona&amp;rdquo;, the regular expression will match &lt;code&gt;persona/(?P&amp;lt;pk&amp;gt;\d+)/$&lt;/code&gt;, e.g. &lt;code&gt;persona/5/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d3424b9ca7467adf3d92798f97b9aa0cdff6b3e" translate="yes" xml:space="preserve">
          <source>This example allows you to call both &lt;code&gt;authors()&lt;/code&gt; and &lt;code&gt;editors()&lt;/code&gt; directly from the manager &lt;code&gt;Person.people&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5320d0599a0af45850960a9aa4c0205aac247c4" translate="yes" xml:space="preserve">
          <source>This example allows you to request &lt;code&gt;Person.authors.all()&lt;/code&gt;, &lt;code&gt;Person.editors.all()&lt;/code&gt;, and &lt;code&gt;Person.people.all()&lt;/code&gt;, yielding predictable results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357432278c946cdd5abbf5d0c24c225f1f7b8544" translate="yes" xml:space="preserve">
          <source>This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many &lt;code&gt;Manager()&lt;/code&gt; instances to a model as you&amp;rsquo;d like. This is a non-repetitive way to define common &amp;ldquo;filters&amp;rdquo; for your models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4f9d0f80ed4def5bb8bde9e478d3b93a7a10f7" translate="yes" xml:space="preserve">
          <source>This example compares the dictionaries of &lt;code&gt;values()&lt;/code&gt; with the normal model objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fc5de9bd539f106e851530a20cd3748f205570" translate="yes" xml:space="preserve">
          <source>This example defined a router to handle interaction with models from the &lt;code&gt;auth&lt;/code&gt; app, and other routers to handle interaction with all other apps. If you left your &lt;code&gt;default&lt;/code&gt; database empty and don&amp;rsquo;t want to define a catch-all database router to handle all apps not otherwise specified, your routers must handle the names of all apps in &lt;a href=&quot;../../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; before you migrate. See &lt;a href=&quot;#contrib-app-multiple-databases&quot;&gt;Behavior of contrib apps&lt;/a&gt; for information about contrib apps that must be together in one database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90962698e2660d328340473477806fb2659885c6" translate="yes" xml:space="preserve">
          <source>This example does not handle any errors in the hidden fields. Usually, an error in a hidden field is a sign of form tampering, since normal form interaction won&amp;rsquo;t alter them. However, you could easily insert some error displays for those form errors, as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c11bc44788931b8fccd8f8fc15ebe77d882ae8d" translate="yes" xml:space="preserve">
          <source>This example enables all four included validators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c95a2ad4a72e5bc24dec4ea3b7bd46da57c7e8" translate="yes" xml:space="preserve">
          <source>This example excludes all entries whose &lt;code&gt;pub_date&lt;/code&gt; is later than 2005-1-3 AND whose &lt;code&gt;headline&lt;/code&gt; is &amp;ldquo;Hello&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c0cead8fec1d01f0d3b934a1bb99a3ec67055b" translate="yes" xml:space="preserve">
          <source>This example excludes all entries whose &lt;code&gt;pub_date&lt;/code&gt; is later than 2005-1-3 OR whose headline is &amp;ldquo;Hello&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714271c185a4e223115cdefb87cd369bba440e98" translate="yes" xml:space="preserve">
          <source>This example illustrates all possible attributes and methods for a &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44c24c7b195d50fbf95eff850fef9ac70f06a0a" translate="yes" xml:space="preserve">
          <source>This example includes the contents of the template &lt;code&gt;&quot;foo/bar.html&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f8de7214970c9b3875d023c1f12776664474de" translate="yes" xml:space="preserve">
          <source>This example includes the contents of the template whose name is contained in the variable &lt;code&gt;template_name&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c7dec217f9ef53d5c26237866212c544ad2348" translate="yes" xml:space="preserve">
          <source>This example is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a10597d63b89a709c98b5ae2fd131fd9847c056" translate="yes" xml:space="preserve">
          <source>This example is intended as a demonstration of how the router infrastructure can be used to alter database usage. It intentionally ignores some complex issues in order to demonstrate how routers are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2716d01b5ed615ba47f33630354a3757e6ea9e03" translate="yes" xml:space="preserve">
          <source>This example is somewhat contrived, but it nicely demonstrates the range of functionality which is possible in a database backend independent manner, and without duplicating functionality already in Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48a6b4067dd5fc4d902f391664abb52d365a4bf" translate="yes" xml:space="preserve">
          <source>This example links the given user with the permission models with PKs 46 and 47.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcaf4ad1de50ae30e6803e616be4a926731d3407" translate="yes" xml:space="preserve">
          <source>This example model defines a &lt;code&gt;Person&lt;/code&gt;, which has a &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f39826b4d14c123649229eb69915cf6fe2dca3a" translate="yes" xml:space="preserve">
          <source>This example restricts languages that are available for automatic selection to German and English (and any sublanguage, like &lt;code&gt;de-ch&lt;/code&gt; or &lt;code&gt;en-us&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c793666e2882e5183f72bef1c5f6a3b509b2cc" translate="yes" xml:space="preserve">
          <source>This example retrieves all &lt;code&gt;Blog&lt;/code&gt; objects which have at least one &lt;code&gt;Entry&lt;/code&gt; whose &lt;code&gt;headline&lt;/code&gt; contains &lt;code&gt;'Lennon'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aff3ca332316f467d2935d5e48649e6e11044b4" translate="yes" xml:space="preserve">
          <source>This example retrieves all &lt;code&gt;Entry&lt;/code&gt; objects with a &lt;code&gt;Blog&lt;/code&gt; whose &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;'Beatles Blog'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd57bc85866b095be81976a8860d84a9ea5e63f" translate="yes" xml:space="preserve">
          <source>This example returns the latest &lt;code&gt;Entry&lt;/code&gt; in the table, according to the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7dd6a3def2aa6c90249279628a60b9762ab050" translate="yes" xml:space="preserve">
          <source>This example sets up Django at the site root, but serves &lt;code&gt;robots.txt&lt;/code&gt;, &lt;code&gt;favicon.ico&lt;/code&gt;, and anything in the &lt;code&gt;/static/&lt;/code&gt; and &lt;code&gt;/media/&lt;/code&gt; URL space as a static file. All other URLs will be served using mod_wsgi:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b866818c4aa08445025d08ae5f45366df5c6a98" translate="yes" xml:space="preserve">
          <source>This example sets up two admin sites. On the first site, the &lt;code&gt;Author&lt;/code&gt; and &lt;code&gt;Publisher&lt;/code&gt; objects are exposed; &lt;code&gt;Publisher&lt;/code&gt; objects have a tabular inline showing books published by that publisher. The second site exposes just publishers, without the inlines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f96f474060d75b81e5ea308ccb5c0cd023867c" translate="yes" xml:space="preserve">
          <source>This example shows how you might use both &lt;a href=&quot;#django.contrib.auth.authenticate&quot;&gt;&lt;code&gt;authenticate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcedda9ee775aa8e46a12b23e6c70556b9ff1b5" translate="yes" xml:space="preserve">
          <source>This example uses Django&amp;rsquo;s &lt;a href=&quot;../topics/templates&quot;&gt;template system&lt;/a&gt;, which has several powerful features but strives to stay simple enough for non-programmers to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeb241003b54f4ef81d79f4474cc5e13bbe5b5f" translate="yes" xml:space="preserve">
          <source>This example uses the default &lt;code&gt;InlineModelAdmin&lt;/code&gt; values for the &lt;code&gt;Membership&lt;/code&gt; model, and limits the extra add forms to one. This could be customized using any of the options available to &lt;code&gt;InlineModelAdmin&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54581b00683b2ca5d05723bd6b2cf8c1d229fee3" translate="yes" xml:space="preserve">
          <source>This example will automatically open Firefox then go to the login page, enter the credentials and press the &amp;ldquo;Log in&amp;rdquo; button. Selenium offers other drivers in case you do not have Firefox installed or wish to use another browser. The example above is just a tiny fraction of what the Selenium client can do; check out the &lt;a href=&quot;https://selenium-python.readthedocs.io/api.html&quot;&gt;full reference&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7e9ff34e214ef933d765157704636376347ccf" translate="yes" xml:space="preserve">
          <source>This example will override the &lt;a href=&quot;../../ref/settings#std:setting-LOGIN_URL&quot;&gt;&lt;code&gt;LOGIN_URL&lt;/code&gt;&lt;/a&gt; setting for the code in the &lt;code&gt;with&lt;/code&gt; block and reset its value to the previous state afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14336c4b6536db2051dc3a449157df7f4d1a26e8" translate="yes" xml:space="preserve">
          <source>This example will raise an exception, since the inner query is trying to extract two field values, where only one is expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2754102110d2e5144d816f40a6629202399ed306" translate="yes" xml:space="preserve">
          <source>This example won&amp;rsquo;t work if any of the models in &lt;code&gt;myapp&lt;/code&gt; contain relationships to models outside of the &lt;code&gt;other&lt;/code&gt; database. &lt;a href=&quot;#no-cross-database-relations&quot;&gt;Cross-database relationships&lt;/a&gt; introduce referential integrity problems that Django can&amp;rsquo;t currently handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c769ea2da6f7bffb38f15a1598bbb3ad2fea7f3e" translate="yes" xml:space="preserve">
          <source>This example would return this HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74da065ac3ea1db671b0e69072ed6f63aed07af1" translate="yes" xml:space="preserve">
          <source>This exception also happens if you forget to call &lt;a href=&quot;#django.setup&quot;&gt;&lt;code&gt;django.setup()&lt;/code&gt;&lt;/a&gt; in a standalone Python script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d70c58a0b6ccdae635689607d46efa05620cff" translate="yes" xml:space="preserve">
          <source>This exception is raised by the ORM in a couple places, for example by &lt;a href=&quot;querysets#django.db.models.query.QuerySet.get&quot;&gt;&lt;code&gt;QuerySet.get()&lt;/code&gt;&lt;/a&gt; when an object is not found for the given query parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc9ce72e7ac180755e01bc4ded35e7d5cd021bc" translate="yes" xml:space="preserve">
          <source>This exception is raised when a template cannot be found. It accepts the following optional arguments for populating the &lt;a href=&quot;#template-postmortem&quot;&gt;template postmortem&lt;/a&gt; on the debug page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661018432796deca01068795bf77f26293b6184f" translate="yes" xml:space="preserve">
          <source>This exception is raised when a template was found but contains errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c480310901b79c08c80d6852013708c9bc94d0" translate="yes" xml:space="preserve">
          <source>This exception is raised when attempting to use models before the &lt;a href=&quot;applications#app-loading-process&quot;&gt;app loading process&lt;/a&gt;, which initializes the ORM, is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f12987597476c6dca21c50adac637711a3bff9b" translate="yes" xml:space="preserve">
          <source>This feature is meant as a shortcut, not as definitive model generation. After you run it, you&amp;rsquo;ll want to look over the generated models yourself to make customizations. In particular, you&amp;rsquo;ll need to rearrange models&amp;rsquo; order, so that models that refer to other models are ordered properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8310f8b6576635e06d902b61fc52d93801e346" translate="yes" xml:space="preserve">
          <source>This feature is meant as a shortcut, not as definitive model generation. See the &lt;a href=&quot;../ref/django-admin#django-admin-inspectdb&quot;&gt;&lt;code&gt;documentation of inspectdb&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72dc5bc1fd640f216cdede8c77bef36ca87ed638" translate="yes" xml:space="preserve">
          <source>This feature is only available for Python 3.7 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8648bff2258186861e960616a9f4da5433a3015" translate="yes" xml:space="preserve">
          <source>This feature is useful in avoiding repetition in templates. You can set the timeout in a variable, in one place, and reuse that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ac491bbb97ef14d6cabe64043f2a6e21a1c335" translate="yes" xml:space="preserve">
          <source>This feature isn&amp;rsquo;t available on Windows. It doesn&amp;rsquo;t work with the Oracle database backend either.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71761f15b7f4ea3ba4f78167d77a0dc9dbbcf1be" translate="yes" xml:space="preserve">
          <source>This field handles arrays by reproducing the underlying field a fixed number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83121cfeb2b1bba555edab73e71b2df464317fa4" translate="yes" xml:space="preserve">
          <source>This field is abstract and must be subclassed. In contrast with the single-value fields, subclasses of &lt;a href=&quot;#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt; must not implement &lt;a href=&quot;#django.forms.Field.clean&quot;&gt;&lt;code&gt;clean()&lt;/code&gt;&lt;/a&gt; but instead - implement &lt;a href=&quot;#django.forms.MultiValueField.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e64914a7c96731f85e6842feb1379ee781f935" translate="yes" xml:space="preserve">
          <source>This field is intended for use in representing a model &lt;a href=&quot;../models/fields#django.db.models.SlugField&quot;&gt;&lt;code&gt;SlugField&lt;/code&gt;&lt;/a&gt; in forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a892c4cd7b071225f4826cb1d6ca132f314fce" translate="yes" xml:space="preserve">
          <source>This field will accept any string format accepted as the &lt;code&gt;hex&lt;/code&gt; argument to the &lt;a href=&quot;https://docs.python.org/3/library/uuid.html#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b101e36ba874434999c5a3298cb2883eced4bccc" translate="yes" xml:space="preserve">
          <source>This file contains the &lt;a href=&quot;../settings&quot;&gt;Django settings&lt;/a&gt; required to run your app&amp;rsquo;s tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021c43eac311b61357417b09dd2f1378217365b4" translate="yes" xml:space="preserve">
          <source>This file describes some of the features that might be relevant to Django usage. Of course, it is not intended as a replacement for server-specific documentation or reference manuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56b33597f26c5e8b3b9714d034eebb291ba8725" translate="yes" xml:space="preserve">
          <source>This filter accepts a callback function (which should accept a single argument, the record to be logged), and calls it for each record that passes through the filter. Handling of that record will not proceed if the callback returns False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9539b4302fbd68a025a40e447f5a4b97902ab61d" translate="yes" xml:space="preserve">
          <source>This filter is similar to &lt;a href=&quot;#django.utils.log.RequireDebugFalse&quot;&gt;&lt;code&gt;RequireDebugFalse&lt;/code&gt;&lt;/a&gt;, except that records are passed only when &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39bf23e4e3cfb944f02b79268021588d881e3d9" translate="yes" xml:space="preserve">
          <source>This filter is used as follows in the default &lt;a href=&quot;../ref/settings#std:setting-LOGGING&quot;&gt;&lt;code&gt;LOGGING&lt;/code&gt;&lt;/a&gt; configuration to ensure that the &lt;a href=&quot;#django.utils.log.AdminEmailHandler&quot;&gt;&lt;code&gt;AdminEmailHandler&lt;/code&gt;&lt;/a&gt; only sends error emails to admins when &lt;a href=&quot;../ref/settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a031c20490dc714000e5b3869aced71bfcc450dd" translate="yes" xml:space="preserve">
          <source>This filter will first try to coerce both values to integers. If this fails, it&amp;rsquo;ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db483d5f5e49571c9519c578b37d11fec4861f09" translate="yes" xml:space="preserve">
          <source>This filter will only pass on records when settings.DEBUG is False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819d60f6c8334b0bf91ee5a78c0747914b3fcec0" translate="yes" xml:space="preserve">
          <source>This flag tells Django that if a &amp;ldquo;safe&amp;rdquo; string is passed into your filter, the result will still be &amp;ldquo;safe&amp;rdquo; and if a non-safe string is passed in, Django will automatically escape it, if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0804e7b50b5f27fd233d4d71c22cac6d8d3b1f3" translate="yes" xml:space="preserve">
          <source>This form will include three default &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widgets, with default rendering &amp;ndash; no CSS class, no extra attributes. This means that the input boxes provided for each widget will be rendered exactly the same:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b44f999007390240a1fb81e0b1c5d82099e60b" translate="yes" xml:space="preserve">
          <source>This function accepts the same keyword arguments as &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.get_expiry_age&quot;&gt;&lt;code&gt;get_expiry_age()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5bd556a6b5c4be03a826530bbba1707486ed66" translate="yes" xml:space="preserve">
          <source>This function accepts two optional keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f121b7c34ef237e09d21d23a19b452f333ec56" translate="yes" xml:space="preserve">
          <source>This function attempts to import an &lt;code&gt;admin&lt;/code&gt; module in each installed application. Such modules are expected to register models with the admin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968161f2a7415e377c8c14e9b1f34fbb4c8f731f" translate="yes" xml:space="preserve">
          <source>This function can be used in a root URLconf and Django will automatically prepend the current active language code to all URL patterns defined within &lt;a href=&quot;#django.conf.urls.i18n.i18n_patterns&quot;&gt;&lt;code&gt;i18n_patterns()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199bd2ecc7a45fcb26c8218ad0d2fa60a473ec2e" translate="yes" xml:space="preserve">
          <source>This function doesn&amp;rsquo;t work on naive datetimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e59e030a87391c1fb151ebc37af8dea624eb2f" translate="yes" xml:space="preserve">
          <source>This function doesn&amp;rsquo;t work on naive datetimes; use &lt;a href=&quot;#django.utils.timezone.make_aware&quot;&gt;&lt;code&gt;make_aware()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2307bc99d87d3409e530f690281868ebf2450230" translate="yes" xml:space="preserve">
          <source>This function generates a SQL string without any parameters. Since &lt;code&gt;substring&lt;/code&gt; is passed to &lt;code&gt;super().__init__()&lt;/code&gt; as a keyword argument, it&amp;rsquo;s interpolated into the SQL string before the query is sent to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed1f94c5ff3f87ef4bbf761e1ff791246492108" translate="yes" xml:space="preserve">
          <source>This function is an alias to &lt;a href=&quot;#django.urls.re_path&quot;&gt;&lt;code&gt;django.urls.re_path()&lt;/code&gt;&lt;/a&gt;. It&amp;rsquo;s likely to be deprecated in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d17268add0833f5adc3d518c5acde0943a1ff8a" translate="yes" xml:space="preserve">
          <source>This function is called automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3becf540220c2ef5b4116080981f05342f38dfb0" translate="yes" xml:space="preserve">
          <source>This function is responsible for raising &lt;code&gt;django.template.TemplateSyntaxError&lt;/code&gt;, with helpful messages, for any syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48531a02ae6fd1237e1d57a9d074e94c85e33253" translate="yes" xml:space="preserve">
          <source>This function is useful when you need your Django application to be localizable to languages where the number and complexity of &lt;a href=&quot;https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms&quot;&gt;plural forms&lt;/a&gt; is greater than the two forms used in English (&amp;lsquo;object&amp;rsquo; for the singular and &amp;lsquo;objects&amp;rsquo; for all the cases where &lt;code&gt;count&lt;/code&gt; is different from one, irrespective of its value.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea100ce1a6d0ac474e0ea121e520e9ce317755af" translate="yes" xml:space="preserve">
          <source>This function loads the template with the given name and returns a &lt;code&gt;Template&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3a79fedc5fe2e143e75c65d8cbac9c6d856913" translate="yes" xml:space="preserve">
          <source>This function patches the &lt;code&gt;Cache-Control&lt;/code&gt; header by adding all keyword arguments to it. The transformation is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858eb6ea5fae48f06d0353f99e24b16f95a3eabf" translate="yes" xml:space="preserve">
          <source>This function performs time zone conversions directly in the database. As a consequence, your database must be able to interpret the value of &lt;code&gt;tzinfo.tzname(None)&lt;/code&gt;. This translates into the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db29337deb1eb47904350a603956a3fb443ac7a6" translate="yes" xml:space="preserve">
          <source>This function returns a correctly encoded URL even if &lt;code&gt;self.location&lt;/code&gt; is something like &amp;ldquo;Jack visited Paris &amp;amp; Orl&amp;eacute;ans&amp;rdquo;. (In fact, the &lt;code&gt;iri_to_uri()&lt;/code&gt; call isn&amp;rsquo;t strictly necessary in the above example, because all the non-ASCII characters would have been removed in quoting in the first line.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55365cfdaaebe10348bb84d9495963859cd4ad5" translate="yes" xml:space="preserve">
          <source>This function takes the current request and the updated user object from which the new session hash will be derived and updates the session hash appropriately. It also rotates the session key so that a stolen session cookie will be invalidated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51bd19fadc7812fd2a4a8c53373d5f2c29fa3d5" translate="yes" xml:space="preserve">
          <source>This function transforms the current raster into a new spatial reference system that can be specified with an &lt;code&gt;srid&lt;/code&gt;. It calculates the bounds and scale of the current raster in the new spatial reference system and warps the raster using the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.warp&quot;&gt;&lt;code&gt;warp&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435297cd2f4b60bba8246d51ffaca7c147ddf0f5" translate="yes" xml:space="preserve">
          <source>This function will never have a null result. On backends where a null argument results in the entire expression being null, Django will ensure that each null part is converted to an empty string first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166a5d0a1c452e640171695f3b6ea4167c42d80b" translate="yes" xml:space="preserve">
          <source>This gives full permissions to the user granted access in the above example. Notice that in addition to the same arguments given to the associated &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;django.contrib.auth.models.User&lt;/code&gt;&lt;/a&gt; functions, the backend auth functions all take the user object, which may be an anonymous user, as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8539b2dfcde60fe11dfc5f83402ad850bd5ae064" translate="yes" xml:space="preserve">
          <source>This gives you the ability to attach data to the instances before saving them to the database. If your formset contains a &lt;code&gt;ManyToManyField&lt;/code&gt;, you&amp;rsquo;ll also need to call &lt;code&gt;formset.save_m2m()&lt;/code&gt; to ensure the many-to-many relationships are saved properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f93bfd8394c85334082a5074768829bb9139120" translate="yes" xml:space="preserve">
          <source>This group of fields all share similar functionality for accepting range data. They are based on &lt;a href=&quot;../../forms/fields#django.forms.MultiValueField&quot;&gt;&lt;code&gt;MultiValueField&lt;/code&gt;&lt;/a&gt;. They treat one omitted value as an unbounded range. They also validate that the lower bound is not greater than the upper bound. All of these fields use &lt;a href=&quot;#django.contrib.postgres.forms.RangeWidget&quot;&gt;&lt;code&gt;RangeWidget&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f2812175681f97f9889ce8bfb02939d3b8d18e" translate="yes" xml:space="preserve">
          <source>This handler sends an email to the site &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; for each log message it receives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080600104131c039dbc69d49bcd9afb5b3d326a4" translate="yes" xml:space="preserve">
          <source>This has a number of caveats though:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a73891c6d7c52b472785e5b238d9aa0537307de" translate="yes" xml:space="preserve">
          <source>This has a similar purpose to &lt;code&gt;select_related&lt;/code&gt;, in that both are designed to stop the deluge of database queries that is caused by accessing related objects, but the strategy is quite different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cd1013e50b1354e57e994a6db04b37bd6b7850" translate="yes" xml:space="preserve">
          <source>This has also the advantage of checking if the sites framework is installed, and return a &lt;a href=&quot;#django.contrib.sites.requests.RequestSite&quot;&gt;&lt;code&gt;RequestSite&lt;/code&gt;&lt;/a&gt; instance if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc73af0335533b052b0c15947b99b43e2aaaed0" translate="yes" xml:space="preserve">
          <source>This has been only a quick overview of Django&amp;rsquo;s functionality. Some more useful features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6867e69d4017b1db49972f7708f7e697dccb1fab" translate="yes" xml:space="preserve">
          <source>This has the advantage that you don&amp;rsquo;t need to apply &lt;a href=&quot;#django.utils.html.escape&quot;&gt;&lt;code&gt;escape()&lt;/code&gt;&lt;/a&gt; to each argument and risk a bug and an XSS vulnerability if you forget one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5990f87e5b78b8409bb2f6e72447ff6b212cfe73" translate="yes" xml:space="preserve">
          <source>This has the same benefits as described in the last section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6170da588be7839ad87c46402c905a0510c3a1f7" translate="yes" xml:space="preserve">
          <source>This helper function will only work if &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt; and your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting is neither empty nor a full URL such as &lt;code&gt;http://static.example.com/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a093e2c4eefaca864a94d868cc8b256efde855de" translate="yes" xml:space="preserve">
          <source>This helper function works only in debug mode and only if the given prefix is local (e.g. &lt;code&gt;/media/&lt;/code&gt;) and not a URL (e.g. &lt;code&gt;http://media.example.com/&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f96c45ce693efcc4797f7eb6376fd5a8e4bf785" translate="yes" xml:space="preserve">
          <source>This helper function works only in debug mode and only if the given prefix is local (e.g. &lt;code&gt;/static/&lt;/code&gt;) and not a URL (e.g. &lt;code&gt;http://static.example.com/&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb86d034897aa91fba21ce67031ec860f20198ee" translate="yes" xml:space="preserve">
          <source>This helps a lot on virtualized hosts with limited network performance, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7d17db6ff2fa3c936a344f7b5469f086b16e1d" translate="yes" xml:space="preserve">
          <source>This helps a lot on virtualized hosts with limited network performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6294b8ffbcd66f5b177d87c5c92c8dd0f5a120dc" translate="yes" xml:space="preserve">
          <source>This hook is necessary because some widgets have multiple HTML elements and, thus, multiple IDs. In that case, this method should return an ID value that corresponds to the first ID in the widget&amp;rsquo;s tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb432eaa8f41d63c8cea3153f1e34b0f9a6fc78" translate="yes" xml:space="preserve">
          <source>This identifies a specific instance of an application. Instance namespaces should be unique across your entire project. However, an instance namespace can be the same as the application namespace. This is used to specify a default instance of an application. For example, the default Django admin instance has an instance namespace of &lt;code&gt;'admin'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3ead1206b9453869346613abf0046f15925f0d" translate="yes" xml:space="preserve">
          <source>This implementation is more efficient than &lt;code&gt;search_fields =
('name', '=age')&lt;/code&gt; which results in a string comparison for the numeric field, for example &lt;code&gt;... OR UPPER(&quot;polls_choice&quot;.&quot;votes&quot;::text) = UPPER('4')&lt;/code&gt; on PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5726add6f2cd5484e9b45b2a06c6b390dcc33748" translate="yes" xml:space="preserve">
          <source>This implies a &lt;code&gt;self.toppings.all()&lt;/code&gt; for each &lt;code&gt;Pizza&lt;/code&gt;; now each time &lt;code&gt;self.toppings.all()&lt;/code&gt; is called, instead of having to go to the database for the items, it will find them in a prefetched &lt;code&gt;QuerySet&lt;/code&gt; cache that was populated in a single query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1ec31fcf236141389378cd2dc39797d2e71983" translate="yes" xml:space="preserve">
          <source>This includes access to all of the advanced geometric operations provided by the GEOS library:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6214a479d1ca7e724d8fef14168279baf6548309" translate="yes" xml:space="preserve">
          <source>This includes the migrations - unlike in Ruby On Rails, for example, migrations are entirely derived from your models file, and are essentially a history that Django can roll through to update your database schema to match your current models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd7f461f2cbf6f7eb5852e576d5b21cfc0dc3eb" translate="yes" xml:space="preserve">
          <source>This is a PostgreSQL-specific setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82bf1540637f23a03dceff084314a08677f32aa" translate="yes" xml:space="preserve">
          <source>This is a Python context manager that sets the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; on entry with &lt;a href=&quot;#django.utils.timezone.activate&quot;&gt;&lt;code&gt;activate()&lt;/code&gt;&lt;/a&gt;, and restores the previously active time zone on exit. If the &lt;code&gt;timezone&lt;/code&gt; argument is &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;../topics/i18n/timezones#default-current-time-zone&quot;&gt;current time zone&lt;/a&gt; is unset on entry with &lt;a href=&quot;#django.utils.timezone.deactivate&quot;&gt;&lt;code&gt;deactivate()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3800e5802ae4bbe81249dbee60d9690aebb7ebe" translate="yes" xml:space="preserve">
          <source>This is a debugging aid; it&amp;rsquo;ll show you exactly which static file will be collected for a given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b95eeef68eef59dc429cc4b56e49dc7ba9da65" translate="yes" xml:space="preserve">
          <source>This is a design feature. &lt;a href=&quot;#django.core.mail.send_mail&quot;&gt;&lt;code&gt;send_mail()&lt;/code&gt;&lt;/a&gt; and related functions were originally the only interface Django provided. However, the list of parameters they accepted was slowly growing over time. It made sense to move to a more object-oriented design for email messages and retain the original functions only for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c67dd3a96a813aa2abcc3f817540d6008871af" translate="yes" xml:space="preserve">
          <source>This is a feature for the sake of maintainability and sanity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb7875e040a5ed26e05e0b7313c2e1d6aa80fff" translate="yes" xml:space="preserve">
          <source>This is a known limitation. It arises from the need to serialize objects in order to exchange them between processes. See &lt;a href=&quot;https://docs.python.org/3/library/pickle.html#pickle-picklable&quot;&gt;What can be pickled and unpickled?&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5266312b2154e9721755445434bcb185b2767" translate="yes" xml:space="preserve">
          <source>This is a list of lists that must be unique when considered together. It&amp;rsquo;s used in the Django admin and is enforced at the database level (i.e., the appropriate &lt;code&gt;UNIQUE&lt;/code&gt; statements are included in the &lt;code&gt;CREATE TABLE&lt;/code&gt; statement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a42ae774d9e1d18854f72dcf3b660e0a40346e7" translate="yes" xml:space="preserve">
          <source>This is a list or tuple of 2-tuples in the format &lt;code&gt;(permission_code,
human_readable_permission_name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25af1d400d6ad72436b2fcf27510ff8576bc332c" translate="yes" xml:space="preserve">
          <source>This is a list with all the views &lt;code&gt;django.contrib.auth&lt;/code&gt; provides. For implementation details see &lt;a href=&quot;#using-the-views&quot;&gt;Using the views&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c26c98ecfdc50c5d0121f6bcaf8aa9a098316c" translate="yes" xml:space="preserve">
          <source>This is a low level way to authenticate a set of credentials; for example, it&amp;rsquo;s used by the &lt;a href=&quot;../../ref/middleware#django.contrib.auth.middleware.RemoteUserMiddleware&quot;&gt;&lt;code&gt;RemoteUserMiddleware&lt;/code&gt;&lt;/a&gt;. Unless you are writing your own authentication system, you probably won&amp;rsquo;t use this. Rather if you&amp;rsquo;re looking for a way to login a user, use the &lt;a href=&quot;#django.contrib.auth.views.LoginView&quot;&gt;&lt;code&gt;LoginView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a22470ce1800da031cbd7e99a59fac120601e8" translate="yes" xml:space="preserve">
          <source>This is a minimal case, but you can see that you would then have the option of customizing this view by overriding any of the class attributes, e.g. &lt;code&gt;form_class&lt;/code&gt;, via URLconf configuration, or subclassing and overriding one or more of the methods (or both!).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5cb7f4f8c770fb70833af1d6f83b578c304ad7" translate="yes" xml:space="preserve">
          <source>This is a new feature, so it should be documented. Open the file &lt;code&gt;docs/topics/http/shortcuts.txt&lt;/code&gt; and add the following at the end of the file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e573bee329dd4739491504e8469bfab83f9e9d" translate="yes" xml:space="preserve">
          <source>This is a required argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36326ac1afea40a3788b92fa5f7bb49c95d15df" translate="yes" xml:space="preserve">
          <source>This is a required argument. It specifies the form field to be repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9db86d5d0c90e36a503b011ffdbe541ba8feace" translate="yes" xml:space="preserve">
          <source>This is a required argument. The name of the extension to be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be669f8f411c31e9c624ceb9d4b9a5ed78caa0c" translate="yes" xml:space="preserve">
          <source>This is a required attribute if you are generating the form class automatically (e.g. using &lt;code&gt;model&lt;/code&gt;). Omitting this attribute will result in an &lt;a href=&quot;../exceptions#django.core.exceptions.ImproperlyConfigured&quot;&gt;&lt;code&gt;ImproperlyConfigured&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a735aefe74d311f127b18d69734cdf362fda94c" translate="yes" xml:space="preserve">
          <source>This is a tuple or list of strings and/or query expressions. Each string is a field name with an optional &amp;ldquo;-&amp;rdquo; prefix, which indicates descending order. Fields without a leading &amp;ldquo;-&amp;rdquo; will be ordered ascending. Use the string &amp;ldquo;?&amp;rdquo; to order randomly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e668e33769391c22cf117f70b394da4cc8564383" translate="yes" xml:space="preserve">
          <source>This is a valuable technique for keeping business logic in one place &amp;ndash; the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d953f6c1d4fc0c753784c3acbd3afd8e0591c8" translate="yes" xml:space="preserve">
          <source>This is a very fragile solution as it requires the user to know an exact substring of the author&amp;rsquo;s name. A better approach could be a case-insensitive match (&lt;a href=&quot;../../ref/models/querysets#std:fieldlookup-icontains&quot;&gt;&lt;code&gt;icontains&lt;/code&gt;&lt;/a&gt;), but this is only marginally better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5940dd221f2de827975a0266a8123bf6ab5afe9" translate="yes" xml:space="preserve">
          <source>This is a very simple form. In practice, a form might contain dozens or hundreds of fields, many of which might need to be pre-populated, and we might expect the user to work through the edit-submit cycle several times before concluding the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb27d83f4ecb7d32b202d8595a7eb72d6f6ce42" translate="yes" xml:space="preserve">
          <source>This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f0fb7f0aae54e6409cf3634ddb518b4ca574f4" translate="yes" xml:space="preserve">
          <source>This is almost exactly the same as the &lt;code&gt;detail()&lt;/code&gt; view from &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;. The only difference is the template name. We&amp;rsquo;ll fix this redundancy later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5b338e72893f96626f70d6356723a49da8810d" translate="yes" xml:space="preserve">
          <source>This is always &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0055a0e221eb926d1d1f6540c91a6fefc8717ba4" translate="yes" xml:space="preserve">
          <source>This is always &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae6a360c4612fb1f3facf39060130dd8a072360" translate="yes" xml:space="preserve">
          <source>This is an Oracle-specific setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1442f707b625de9efa0894cf1c056d85c4f7964f" translate="yes" xml:space="preserve">
          <source>This is an abstract base widget containing the logic needed by subclasses. You cannot directly use this widget for a geometry field. Note that the rendering of GeoDjango widgets is based on a template, identified by the &lt;a href=&quot;#django.contrib.gis.forms.widgets.BaseGeometryWidget.template_name&quot;&gt;&lt;code&gt;template_name&lt;/code&gt;&lt;/a&gt; class attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05c77ecd32a1456537b74e9b2ba725ec05811e0" translate="yes" xml:space="preserve">
          <source>This is an advanced topic. A working knowledge of &lt;a href=&quot;index&quot;&gt;Django&amp;rsquo;s class-based views&lt;/a&gt; is advised before exploring these techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb43d05733aef294aae652d046a8d45e6a59cac" translate="yes" xml:space="preserve">
          <source>This is an algorithm from section 3.2 of &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.2&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 3987#section-3.2&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e180fc5960b1f977ad9c182e080a0697edbad01a" translate="yes" xml:space="preserve">
          <source>This is an auto-incrementing primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88db9f0469696a1eebc958cdbfee899484deb4ff" translate="yes" xml:space="preserve">
          <source>This is an old API that we aim to deprecate at some point in the future. Use it only if you cannot express your query using other queryset methods. If you do need to use it, please &lt;a href=&quot;https://code.djangoproject.com/newticket&quot;&gt;file a ticket&lt;/a&gt; using the &lt;a href=&quot;https://code.djangoproject.com/query?status=assigned&amp;amp;status=new&amp;amp;keywords=~QuerySet.extra&quot;&gt;QuerySet.extra keyword&lt;/a&gt; with your use case (please check the list of existing tickets first) so that we can enhance the QuerySet API to allow removing &lt;code&gt;extra()&lt;/code&gt;. We are no longer improving or fixing bugs for this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="874b9ac2aeb6d98baa04538220d79b96e01d8184" translate="yes" xml:space="preserve">
          <source>This is an optional argument which defaults to a comma: &lt;code&gt;,&lt;/code&gt;. This value is used to split the submitted data. It allows you to chain &lt;code&gt;SimpleArrayField&lt;/code&gt; for multidimensional data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1918fb796c705c4d2a45efc16bca7da620770fa1" translate="yes" xml:space="preserve">
          <source>This is an optional argument which validates that the array does not exceed the stated length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ec8e3708f2c3e0bdf9f5be81a0d5712ee9f8e4" translate="yes" xml:space="preserve">
          <source>This is an optional argument which validates that the array reaches at least the stated length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5ab685794469a2f3712ee4ff3828dfbde6c2f7" translate="yes" xml:space="preserve">
          <source>This is an optional argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1901e453d76175b9511fa5d9af1fa78afb4f68f7" translate="yes" xml:space="preserve">
          <source>This is an ordinary Python class, with nothing Django-specific about it. We&amp;rsquo;d like to be able to do things like this in our models (we assume the &lt;code&gt;hand&lt;/code&gt; attribute on the model is an instance of &lt;code&gt;Hand&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4322cbaf01c85ea15a5408ee8c965bcedd5e888" translate="yes" xml:space="preserve">
          <source>This is an overview of the Django template language&amp;rsquo;s APIs. For details see the &lt;a href=&quot;../ref/templates/api&quot;&gt;API reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435c7f016b2ddadfc7aaaa144be6dd6ad72f4682" translate="yes" xml:space="preserve">
          <source>This is an overview of the Django template language&amp;rsquo;s syntax. For details see the &lt;a href=&quot;../ref/templates/language&quot;&gt;language syntax reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c2f8fa486396257cd1d3f5ea034ac26e70cade" translate="yes" xml:space="preserve">
          <source>This is because of referential integrity. In order to maintain a relationship between two objects, Django needs to know that the primary key of the related object is valid. If the primary key is stored on a separate database, it&amp;rsquo;s not possible to easily evaluate the validity of a primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d85cd4a7a2018063c0b133570b2668e36e444ea" translate="yes" xml:space="preserve">
          <source>This is best illustrated with an example. Suppose you have the following model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946a39730fdafb7ba570acdccfaece22d7649fa6" translate="yes" xml:space="preserve">
          <source>This is called a &lt;em&gt;race condition&lt;/em&gt;. If you are interested, you can read &lt;a href=&quot;../ref/models/expressions#avoiding-race-conditions-using-f&quot;&gt;Avoiding race conditions using F()&lt;/a&gt; to learn how you can solve this issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a61e0458736b747e41261ea70878db591b1ea0" translate="yes" xml:space="preserve">
          <source>This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cf586132f41abc52616ccfd3abed60ac89bb24" translate="yes" xml:space="preserve">
          <source>This is dangerous: it will make your database more susceptible to data loss or corruption in the case of a server crash or power loss. Only use this on a development machine where you can easily restore the entire contents of all databases in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0d4effd9f3306f71a42d89ae1ffcf3a3240471" translate="yes" xml:space="preserve">
          <source>This is different from adding the geometry field to &lt;a href=&quot;../admin/index#django.contrib.admin.ModelAdmin.readonly_fields&quot;&gt;&lt;code&gt;readonly_fields&lt;/code&gt;&lt;/a&gt;, which will only display the WKT of the geometry. Setting &lt;code&gt;modifiable=False&lt;/code&gt;, actually displays the geometry in a map, but disables the ability to edit its vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c866fecd5f3e8277eae53f5b7d20b8c1b76c97" translate="yes" xml:space="preserve">
          <source>This is different from the &lt;code&gt;db_index&lt;/code&gt; field option because spatial indexes are created in a different manner than regular database indexes. Specifically, spatial indexes are typically created using a variant of the R-Tree, while regular database indexes typically use B-Trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36ba2a862a8e2820e57dcbac6cca1d4316de630" translate="yes" xml:space="preserve">
          <source>This is documented in &lt;a href=&quot;../../topics/db/queries#using-f-expressions-in-filters&quot;&gt;using F() expressions in queries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444b94b4e45890ce5baea2c5943e554f559fc5a6" translate="yes" xml:space="preserve">
          <source>This is done by passing the names of the fields to not load to &lt;code&gt;defer()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73290256149b2822764ce7dd7996869397b9c406" translate="yes" xml:space="preserve">
          <source>This is enforced at the database level and by model validation. If you try to save a model with a duplicate value in a &lt;a href=&quot;#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; field, a &lt;a href=&quot;../exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;django.db.IntegrityError&lt;/code&gt;&lt;/a&gt; will be raised by the model&amp;rsquo;s &lt;a href=&quot;instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5813c4cb71a8474e2d701bf6dcc8ec651fae3e2f" translate="yes" xml:space="preserve">
          <source>This is enforced by &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; during model validation but not at the database level. If any &lt;a href=&quot;#django.db.models.Field.unique_for_date&quot;&gt;&lt;code&gt;unique_for_date&lt;/code&gt;&lt;/a&gt; constraint involves fields that are not part of a &lt;a href=&quot;../../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt; (for example, if one of the fields is listed in &lt;code&gt;exclude&lt;/code&gt; or has &lt;a href=&quot;#django.db.models.Field.editable&quot;&gt;&lt;code&gt;editable=False&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;instances#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; will skip validation for that particular constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f1ba7734cbcdca7cf38a228017df854ddd0843" translate="yes" xml:space="preserve">
          <source>This is equivalent to (but simpler than):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0af7bd890e489a2ce28b5790b8066af2231c6f" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following SQL &lt;code&gt;WHERE&lt;/code&gt; clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081826614ba4f9b5284489708942cd4d3b7f9360" translate="yes" xml:space="preserve">
          <source>This is especially useful with very large files since it allows them to be streamed off disk and avoids storing the whole file in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335cd8702253ed81c13e11543317d2309494a4b3" translate="yes" xml:space="preserve">
          <source>This is essential when calls to these functions are located in code paths that are executed at module load time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdb997bdd44723e62e29d0c5e26a5cb5b4ed63b" translate="yes" xml:space="preserve">
          <source>This is exactly what &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt; is for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0956048242e8c56793391f92c3a7e739470af5a3" translate="yes" xml:space="preserve">
          <source>This is for convenience, because &lt;code&gt;exact&lt;/code&gt; lookups are the common case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4dad0b93cb6535164f31b5b0559d9a3bddc7b12" translate="yes" xml:space="preserve">
          <source>This is generally the operation you would use to create &lt;a href=&quot;../topics/migrations#data-migrations&quot;&gt;data migrations&lt;/a&gt;, run custom data updates and alterations, and anything else you need access to an ORM and/or Python code for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b8a18842b91586121f3d57f897055ec1c28a62" translate="yes" xml:space="preserve">
          <source>This is handy if your users live in more than one time zone and you want to display datetime information according to each user&amp;rsquo;s wall clock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593e8e2f00927704d42ff86b00399a6900503d56" translate="yes" xml:space="preserve">
          <source>This is happening because it&amp;rsquo;s trying to get or create &amp;ldquo;Chapter 1&amp;rdquo; through the book &amp;ldquo;Ulysses&amp;rdquo;, but it can&amp;rsquo;t do any of them: the relation can&amp;rsquo;t fetch that chapter because it isn&amp;rsquo;t related to that book, but it can&amp;rsquo;t create it either because &lt;code&gt;title&lt;/code&gt; field should be unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a391a548c599da87d1fd0f479c93d316fc4bd147" translate="yes" xml:space="preserve">
          <source>This is identical to &lt;a href=&quot;mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.allow_empty&quot;&gt;&lt;code&gt;django.views.generic.list.MultipleObjectMixin.allow_empty&lt;/code&gt;&lt;/a&gt;, except for the default value, which is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5e7ab116dddedf0aa701d91e435cc6b1c04fc6" translate="yes" xml:space="preserve">
          <source>This is incorrect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d08b3ac8c6f2f7a73e60b44ad3c20c1134c300" translate="yes" xml:space="preserve">
          <source>This is intended for advanced users to manipulate the current migration state directly if they&amp;rsquo;re manually applying changes; be warned that using &lt;code&gt;--fake&lt;/code&gt; runs the risk of putting the migration state table into a state where manual recovery will be needed to make migrations run correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc3979518de97cf19d92f716a27b3f7353b8251" translate="yes" xml:space="preserve">
          <source>This is just the surface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dbebbb327de4a8855f76c4ac0b282c68c9afd2" translate="yes" xml:space="preserve">
          <source>This is less efficient than &lt;a href=&quot;#std:templatefilter-truncatewords&quot;&gt;&lt;code&gt;truncatewords&lt;/code&gt;&lt;/a&gt;, so should only be used when it is being passed HTML text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8081312ccea4008c20b1e5cd5f61f7fc52257d73" translate="yes" xml:space="preserve">
          <source>This is meant as a shortcut to boilerplatish code. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536822cbdee12793e85c0c64799b267bea4225e4" translate="yes" xml:space="preserve">
          <source>This is meant to prevent duplicate objects from being created when requests are made in parallel, and as a shortcut to boilerplatish code. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1244f565a58b155152143aa26727394a52b532c" translate="yes" xml:space="preserve">
          <source>This is most useful as the primary key of a model which &amp;ldquo;extends&amp;rdquo; another model in some way; &lt;a href=&quot;../../topics/db/models#multi-table-inheritance&quot;&gt;Multi-table inheritance&lt;/a&gt; is implemented by adding an implicit one-to-one relation from the child model to the parent model, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995d099a4fad352b504e0ee0deceeeac03ecd5a0" translate="yes" xml:space="preserve">
          <source>This is most useful on the primary key of an object when that object &amp;ldquo;extends&amp;rdquo; another object in some way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212e4a29b116c26f378ceb7f419668ba0d4eacaf" translate="yes" xml:space="preserve">
          <source>This is mostly a concern for &lt;a href=&quot;../../ref/exceptions#django.db.DatabaseError&quot;&gt;&lt;code&gt;DatabaseError&lt;/code&gt;&lt;/a&gt; and its subclasses such as &lt;a href=&quot;../../ref/exceptions#django.db.IntegrityError&quot;&gt;&lt;code&gt;IntegrityError&lt;/code&gt;&lt;/a&gt;. After such an error, the transaction is broken and Django will perform a rollback at the end of the &lt;code&gt;atomic&lt;/code&gt; block. If you attempt to run database queries before the rollback happens, Django will raise a &lt;a href=&quot;../../ref/exceptions#django.db.transaction.TransactionManagementError&quot;&gt;&lt;code&gt;TransactionManagementError&lt;/code&gt;&lt;/a&gt;. You may also encounter this behavior when an ORM-related signal handler raises an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c0147b40aa6666ddd6c0716263b6e22cca0958" translate="yes" xml:space="preserve">
          <source>This is named &amp;lsquo;ProcessFormView&amp;rsquo; and inherits directly from &lt;a href=&quot;base#django.views.generic.base.View&quot;&gt;&lt;code&gt;django.views.generic.base.View&lt;/code&gt;&lt;/a&gt;, but breaks if used independently, so it is more of a mixin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b615b23156d2645a3ecd03f66c3c75edc49f1b" translate="yes" xml:space="preserve">
          <source>This is not a very common situation, but it&amp;rsquo;s useful if you&amp;rsquo;re rendering a template yourself. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79a31b8735552aa6e1c503ecf36441dab19ed62" translate="yes" xml:space="preserve">
          <source>This is not suitable for production use! For some common deployment strategies, see &lt;a href=&quot;deployment&quot;&gt;Deploying static files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0c59d3484ca87ff0b26211caf443fae0db18e7" translate="yes" xml:space="preserve">
          <source>This is one of the reasons generic views were redesigned for the 1.3 release - previously, they were view functions with a bewildering array of options; now, rather than passing in a large amount of configuration in the URLconf, the recommended way to extend generic views is to subclass them, and override their attributes or methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713415f47297ef9a60423c07c822c1d3544c995c" translate="yes" xml:space="preserve">
          <source>This is only needed for people who either want to extract message IDs or compile message files (&lt;code&gt;.po&lt;/code&gt;). Translation work itself involves editing existing files of this type, but if you want to create your own message files, or want to test or compile a changed message file, download &lt;a href=&quot;https://mlocati.github.io/articles/gettext-iconv-windows.html&quot;&gt;a precompiled binary installer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c700118e883e20ee8c70d4737d84a16ed04387f" translate="yes" xml:space="preserve">
          <source>This is only used if &lt;a href=&quot;middleware#django.middleware.common.BrokenLinkEmailsMiddleware&quot;&gt;&lt;code&gt;BrokenLinkEmailsMiddleware&lt;/code&gt;&lt;/a&gt; is enabled (see &lt;a href=&quot;../topics/http/middleware&quot;&gt;Middleware&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76560b3ec1fed8fa0aa265c5086f1427140f1687" translate="yes" xml:space="preserve">
          <source>This is roughly equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58441f3eed78ef7046684f182b270fef11d0e5a3" translate="yes" xml:space="preserve">
          <source>This is sent at the beginning of a model&amp;rsquo;s &lt;a href=&quot;models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="756e36ff5f7bacbe1eace78e351d3d1d5d4cc71e" translate="yes" xml:space="preserve">
          <source>This is shaping up well. Let&amp;rsquo;s add some search capability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428fa6ac238d51709e55021212306373ec4412a6" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;, except that it is appropriate for building up HTML fragments. All args and kwargs are passed through &lt;a href=&quot;#django.utils.html.conditional_escape&quot;&gt;&lt;code&gt;conditional_escape()&lt;/code&gt;&lt;/a&gt; before being passed to &lt;code&gt;str.format()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35cf35e743d90e08ff2f57789537e4b6d1a9bbf" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;values()&lt;/code&gt; except that instead of returning dictionaries, it returns tuples when iterated over. Each tuple contains the value from the respective field or expression passed into the &lt;code&gt;values_list()&lt;/code&gt; call &amp;mdash; so the first item is the first field, etc. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ce16baaa59f10ef196dcd189c1cf905957abee" translate="yes" xml:space="preserve">
          <source>This is something that can easily happen when defining models, forms and model forms, because Django implements these such that their fields are actually class-level attributes. For that reason, make sure to use lazy translations in the following cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51000a5f83519b7c56e85af569bc8557b1dbe627" translate="yes" xml:space="preserve">
          <source>This is the SRID code that the field value should be transformed to. For example, if the map widget SRID is different from the SRID more generally used by your application or database, the field will automatically convert input values into that SRID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6c1c7d69d98562224102bb18830338c5a3fdd6" translate="yes" xml:space="preserve">
          <source>This is the algorithm from section 3.1 of &lt;a href=&quot;https://tools.ietf.org/html/rfc3987.html#section-3.1&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 3987#section-3.1&lt;/strong&gt;&lt;/a&gt;, slightly simplified since the input is assumed to be a string rather than an arbitrary byte stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64137aaf5e33ea0944df9e5189f22140bc9429d5" translate="yes" xml:space="preserve">
          <source>This is the base class for all GEOS geometry objects. It initializes on the given &lt;code&gt;geo_input&lt;/code&gt; argument, and then assumes the proper geometry subclass (e.g., &lt;code&gt;GEOSGeometry('POINT(1 1)')&lt;/code&gt; will create a &lt;a href=&quot;#django.contrib.gis.geos.Point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; object).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc2e492390c4d569fb3752ea80192b0a46877cb" translate="yes" xml:space="preserve">
          <source>This is the base class for all session objects. It has the following standard dictionary methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2519304c5f65e56291eb40940d5cf5c5bbe07b5" translate="yes" xml:space="preserve">
          <source>This is the class of the low-level test runner which is used to execute the individual tests and format the results. By default it is set to &lt;code&gt;unittest.TextTestRunner&lt;/code&gt;. Despite the unfortunate similarity in naming conventions, this is not the same type of class as &lt;code&gt;DiscoverRunner&lt;/code&gt;, which covers a broader set of responsibilities. You can override this attribute to modify the way tests are run and reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fa69fee7c0cd707c56a03456337fa21bcf95b5" translate="yes" xml:space="preserve">
          <source>This is the class that loads tests, whether from TestCases or modules or otherwise and bundles them into test suites for the runner to execute. By default it is set to &lt;code&gt;unittest.defaultTestLoader&lt;/code&gt;. You can override this attribute if your tests are going to be loaded in unusual ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4bd790fca4885dfe5ad3167233178ab5532785" translate="yes" xml:space="preserve">
          <source>This is the default &lt;a href=&quot;../../applications#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; class for the admin. It calls &lt;a href=&quot;#django.contrib.admin.autodiscover&quot;&gt;&lt;code&gt;autodiscover()&lt;/code&gt;&lt;/a&gt; when Django starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c461cb7e091e00b2e4ea9dd04e9cb4e676e6b54" translate="yes" xml:space="preserve">
          <source>This is the default authentication backend used by Django. It authenticates using credentials consisting of a user identifier and password. For Django&amp;rsquo;s default user model, the user identifier is the username, for custom user models it is the field specified by USERNAME_FIELD (see &lt;a href=&quot;../../topics/auth/customizing&quot;&gt;Customizing Users and authentication&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7201d135a64b62da7e23b400d45bd9f90b9f95e4" translate="yes" xml:space="preserve">
          <source>This is the default backend. Email will be sent through a SMTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3981158729139aae95a94e7985e19cffa9200ff" translate="yes" xml:space="preserve">
          <source>This is the default cache if another is not specified in your settings file. If you want the speed advantages of in-memory caching but don&amp;rsquo;t have the capability of running Memcached, consider the local-memory cache backend. This cache is per-process (see below) and thread-safe. To use it, set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;&quot;django.core.cache.backends.locmem.LocMemCache&quot;&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d758546cec10c629e4c8205aa9915494abea56" translate="yes" xml:space="preserve">
          <source>This is the default output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d8c165a0f791a031a7d8d7464b503cb9f43863" translate="yes" xml:space="preserve">
          <source>This is the default widget used by all GeoDjango form fields. &lt;code&gt;template_name&lt;/code&gt; is &lt;code&gt;gis/openlayers.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb231441779d1157c766bf2350b4d562e04148cb" translate="yes" xml:space="preserve">
          <source>This is the fixed number of times the underlying field will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bed45538d5ac646a519a59a0fdc1177af38b57" translate="yes" xml:space="preserve">
          <source>This is the inverse of the &lt;a href=&quot;#std:fieldlookup-arrayfield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup - the objects returned will be those where the data is a subset of the values passed. It uses the SQL operator &lt;code&gt;&amp;lt;@&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee558cfef6de6e36a273a786f7ea5ee5d23897fd" translate="yes" xml:space="preserve">
          <source>This is the inverse of the &lt;a href=&quot;#std:fieldlookup-hstorefield.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; lookup - the objects returned will be those where the key-value pairs on the object are a subset of those in the value passed. It uses the SQL operator &lt;code&gt;&amp;lt;@&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7db72ce273e47b660f3669fac3c706e27c62f17" translate="yes" xml:space="preserve">
          <source>This is the most common class to use for writing tests in Django. It inherits from &lt;a href=&quot;#django.test.TransactionTestCase&quot;&gt;&lt;code&gt;TransactionTestCase&lt;/code&gt;&lt;/a&gt; (and by extension &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;). If your Django application doesn&amp;rsquo;t use a database, use &lt;a href=&quot;#django.test.SimpleTestCase&quot;&gt;&lt;code&gt;SimpleTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38da4b985ab4833ecd3cdfcf1ba8cf31e36e0291" translate="yes" xml:space="preserve">
          <source>This is the only way to perform an aggregation within a &lt;code&gt;Subquery&lt;/code&gt;, as using &lt;a href=&quot;querysets#django.db.models.query.QuerySet.aggregate&quot;&gt;&lt;code&gt;aggregate()&lt;/code&gt;&lt;/a&gt; attempts to evaluate the queryset (and if there is an &lt;code&gt;OuterRef&lt;/code&gt;, this will not be possible to resolve).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbcb6e1d56d0a38ba933a38514d8a63646d37a4" translate="yes" xml:space="preserve">
          <source>This is the recommended way to install Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426938002df8e712c56424e6150fe7f0d327fd43" translate="yes" xml:space="preserve">
          <source>This is the script that you invoke to run the test suite. It sets up the Django environment, creates the test database and runs the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3578e014760ac456df06570bc72a943bee34e7ac" translate="yes" xml:space="preserve">
          <source>This is the simplest view possible in Django. To call the view, we need to map it to a URL - and for this we need a URLconf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a1c85ad7b6b3cc914c9f12db86884c9446822b" translate="yes" xml:space="preserve">
          <source>This is true of Django itself. Successive releases have offered a number of improvements across the system, but you should still check the real-world performance of your application, because in some cases you may find that changes mean it performs worse rather than better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68c3b6299bdb079254b1b7f4e0911f93c797407" translate="yes" xml:space="preserve">
          <source>This is useful for connecting to a database that doesn&amp;rsquo;t support time zones and that isn&amp;rsquo;t managed by Django when &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55552a3cfc48fa1aa8c00895af6fcd8b947d4ff4" translate="yes" xml:space="preserve">
          <source>This is useful for maintaining formatting consistency with the Python-rendered values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cedbb9284050c9eac621d6a9956946151ccc91" translate="yes" xml:space="preserve">
          <source>This is useful for stubbing out portions of the code that will need translation in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f0be613c0d6f808a41d9610997fd688d64edf7" translate="yes" xml:space="preserve">
          <source>This is useful if you have a production site that uses heavy-duty caching in various places but a development/test environment where you don&amp;rsquo;t want to cache and don&amp;rsquo;t want to have to change your code to special-case the latter. To activate dummy caching, set &lt;a href=&quot;../ref/settings#std:setting-CACHES-BACKEND&quot;&gt;&lt;code&gt;BACKEND&lt;/code&gt;&lt;/a&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e9f2a0810a896c4ef92eaf92c00e647181b444" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths and each instance will only see its own language cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640f1279a5f6b45dde86121da74f4d71c1031d3a" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own CSRF cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43956ec5daaf74702b905698c1348aab376301c9" translate="yes" xml:space="preserve">
          <source>This is useful if you have multiple Django instances running under the same hostname. They can use different cookie paths, and each instance will only see its own session cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5b0cf9c0198959c0dd4d65aaa877de1e329369" translate="yes" xml:space="preserve">
          <source>This is useful if you want to &lt;a href=&quot;#multiple-formsets-in-view&quot;&gt;use more than one formset in a view&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e38f4e875f32e8b9cfd56cbd477c20aea259d5" translate="yes" xml:space="preserve">
          <source>This is useful if you want to serialize data directly to a file-like object (which includes an &lt;a href=&quot;../ref/request-response#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafa7ad5a48705694431ef67ab70a62ae4df71e5" translate="yes" xml:space="preserve">
          <source>This is useful in a number of ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9958f94d2f8d50287e4d096ceee89c546824284" translate="yes" xml:space="preserve">
          <source>This is useful in web contexts where rasters might be obtained as a buffer from a remote storage or returned from a view without being written to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5029b376e7c8240fd70cb71899c89148c333cf1" translate="yes" xml:space="preserve">
          <source>This is useful when doing data migrations for &lt;a href=&quot;../howto/writing-migrations#data-migrations-and-multiple-databases&quot;&gt;migrations with multiple databases&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc5d7bc8b6310433576b4a258c936d65b5c0201" translate="yes" xml:space="preserve">
          <source>This is what proxy model inheritance is for: creating a &lt;em&gt;proxy&lt;/em&gt; for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ca645f52a6fa74ba730942fc53f90104d982ee" translate="yes" xml:space="preserve">
          <source>This is where a filesystem loader would read contents from the filesystem, or a database loader would read from the database. If a matching template doesn&amp;rsquo;t exist, this should raise a &lt;a href=&quot;../../topics/templates#django.template.TemplateDoesNotExist&quot;&gt;&lt;code&gt;TemplateDoesNotExist&lt;/code&gt;&lt;/a&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b2f76068d73c0c3d2f55928dcd884ed53ed931" translate="yes" xml:space="preserve">
          <source>This is where asset definitions come in. Django allows you to associate different files &amp;ndash; like stylesheets and scripts &amp;ndash; with the forms and widgets that require those assets. For example, if you want to use a calendar to render DateFields, you can define a custom Calendar widget. This widget can then be associated with the CSS and JavaScript that is required to render the calendar. When the Calendar widget is used on a form, Django is able to identify the CSS and JavaScript files that are required, and provide the list of file names in a form suitable for inclusion on your Web page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657d1f961917b53c537622820064a43125cfb60b" translate="yes" xml:space="preserve">
          <source>This is why &lt;code&gt;initial&lt;/code&gt; values are only displayed for unbound forms. For bound forms, the HTML output will use the bound data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3c8027a85786c5908241449596bd0c8650e1e8" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t a particularly natural way to refer to an author. It requires that you know the primary key value for the author; it also requires that this primary key value is stable and predictable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6baf34c47c08ca196318a8950a25a5876a55c1" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t always convenient for application developers. To alleviate this problem, most databases provide an autocommit mode. When autocommit is turned on and no transaction is active, each SQL query gets wrapped in its own transaction. In other words, not only does each such query start a transaction, but the transaction also gets automatically committed or rolled back, depending on whether the query succeeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec1d5b6144d77ca8e7c0bf1b9a1201e35f370e0" translate="yes" xml:space="preserve">
          <source>This isn&amp;rsquo;t impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1f6ae4666708026e4ef1c364be5f9c77fd23dc7" translate="yes" xml:space="preserve">
          <source>This keyword is for Oracle only. It is for the tolerance value used by the &lt;code&gt;SDOAGGRTYPE&lt;/code&gt; procedure; the &lt;a href=&quot;https://docs.oracle.com/en/database/oracle/oracle-database/18/spatl/spatial-concepts.html#GUID-CE10AB14-D5EA-43BA-A647-DAC9EEF41EE6&quot;&gt;Oracle documentation&lt;/a&gt; has more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1340790c34c773f38c9e711de7f1d9fbd3971d" translate="yes" xml:space="preserve">
          <source>This keyword may be used to specify the number of significant digits for the coordinates in the KML representation &amp;ndash; the default value is 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec28c1f57e67206fee316e97b336744f4010b32" translate="yes" xml:space="preserve">
          <source>This keyword may be used to specify the number of significant digits for the coordinates in the SVG representation &amp;ndash; the default value is 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb901f8b766b225d063f15bac74735e704226f5" translate="yes" xml:space="preserve">
          <source>This library allows specifying translatable text in templates. To enable it, set &lt;a href=&quot;../settings#std:setting-USE_I18N&quot;&gt;&lt;code&gt;USE_I18N&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt;, then load it with &lt;code&gt;{% load i18n %}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac3768b194bc2f93bfe1b9fefbe0aa7b31c2a96" translate="yes" xml:space="preserve">
          <source>This library provides control over the localization of values in templates. You only need to load the library using &lt;code&gt;{% load l10n %}&lt;/code&gt;, but you&amp;rsquo;ll often set &lt;a href=&quot;../settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt; so that localization is active by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cef2503231970f4a3f0901b36673e3dba32b51" translate="yes" xml:space="preserve">
          <source>This library provides control over time zone conversions in templates. Like &lt;code&gt;l10n&lt;/code&gt;, you only need to load the library using &lt;code&gt;{% load tz %}&lt;/code&gt;, but you&amp;rsquo;ll usually also set &lt;a href=&quot;../settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;True&lt;/code&gt; so that conversion to local time happens by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e62e6e58385f5ab51336037df7d267b3da3023" translate="yes" xml:space="preserve">
          <source>This limitation does not apply to PostGIS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bda6b44860874e3ef73e2c13f90b4a86c47f930" translate="yes" xml:space="preserve">
          <source>This limits the number of objects per page and adds a &lt;code&gt;paginator&lt;/code&gt; and &lt;code&gt;page_obj&lt;/code&gt; to the &lt;code&gt;context&lt;/code&gt;. To allow your users to navigate between pages, add links to the next and previous page, in your template like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9523d6fdc67d93fc2e6bc504d1a0d98f316fcaa" translate="yes" xml:space="preserve">
          <source>This list of fields will be indexed together (i.e. the appropriate &lt;code&gt;CREATE INDEX&lt;/code&gt; statement will be issued.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc525efcb217b2b4cb667ddf6652e4acca6928d" translate="yes" xml:space="preserve">
          <source>This loader is automatically enabled if &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS['loaders']&lt;/code&gt;&lt;/a&gt; isn&amp;rsquo;t specified and &lt;a href=&quot;../settings#std:setting-TEMPLATES-OPTIONS&quot;&gt;&lt;code&gt;OPTIONS['debug']&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt; (the latter option defaults to the value of &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e572f7d9263ebd612f03aa1a08479bca706c131f" translate="yes" xml:space="preserve">
          <source>This loader is disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7b2705827937c22f2d6d10ed47c6992486cde8" translate="yes" xml:space="preserve">
          <source>This loader is enabled by default. However it won&amp;rsquo;t find any templates until you set &lt;a href=&quot;../settings#std:setting-TEMPLATES-DIRS&quot;&gt;&lt;code&gt;DIRS&lt;/code&gt;&lt;/a&gt; to a non-empty list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061bfbc78e0ba85d2fc401970c55d7ef8759efce" translate="yes" xml:space="preserve">
          <source>This loader takes a dictionary of templates as its first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd73f8da7b162f40164577c295d76fecee927d68" translate="yes" xml:space="preserve">
          <source>This logging configuration does the following things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb69846b5563f3af1cded0d741b4ca883f42ce7a" translate="yes" xml:space="preserve">
          <source>This logging does not include framework-level initialization (e.g. &lt;code&gt;SET TIMEZONE&lt;/code&gt;) or transaction management queries (e.g. &lt;code&gt;BEGIN&lt;/code&gt;, &lt;code&gt;COMMIT&lt;/code&gt;, and &lt;code&gt;ROLLBACK&lt;/code&gt;). Turn on query logging in your database if you wish to view all database queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4bcc47b6026c8b883997a1688a7bcd9063dc5c" translate="yes" xml:space="preserve">
          <source>This lookup is implemented using &lt;a href=&quot;../../models/lookups#django.db.models.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;, so it can be chained with other lookup functions. To use it, you need to add &lt;code&gt;'django.contrib.postgres'&lt;/code&gt; in your &lt;a href=&quot;../../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; and activate the &lt;a href=&quot;https://www.postgresql.org/docs/current/unaccent.html&quot;&gt;unaccent extension on PostgreSQL&lt;/a&gt;. The &lt;a href=&quot;operations#django.contrib.postgres.operations.UnaccentExtension&quot;&gt;&lt;code&gt;UnaccentExtension&lt;/code&gt;&lt;/a&gt; migration operation is available if you want to perform this activation using migrations).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798bed8702ba2679b20e511af7da842cae8387f4" translate="yes" xml:space="preserve">
          <source>This lookup order can cause some unexpected behavior with objects that override dictionary lookup. For example, consider the following code snippet that attempts to loop over a &lt;code&gt;collections.defaultdict&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8c229d6716119ce54124e2a889d8ed72428868" translate="yes" xml:space="preserve">
          <source>This make the action match what the admin itself does after successfully performing an action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f316bf5cded1be31eeaf9f4c3cd7444e88389a" translate="yes" xml:space="preserve">
          <source>This makes it less trivial for an attacker to escalate a cross-site scripting vulnerability into full hijacking of a user&amp;rsquo;s session. There aren&amp;rsquo;t many good reasons for turning this off. Your code shouldn&amp;rsquo;t read session cookies from JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f5b5a242ed05d60c0e7c152b348b72f7ee6454" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;export_selected_objects&lt;/code&gt; action globally available as an action named &amp;ldquo;export_selected_objects&amp;rdquo;. You can explicitly give the action a name &amp;ndash; good if you later want to programmatically &lt;a href=&quot;#disabling-admin-actions&quot;&gt;remove the action&lt;/a&gt; &amp;ndash; by passing a second argument to &lt;a href=&quot;#django.contrib.admin.AdminSite.add_action&quot;&gt;&lt;code&gt;AdminSite.add_action()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a692358fe14aa742c8cf53cb44616d16964852" translate="yes" xml:space="preserve">
          <source>This manager is used to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that &lt;em&gt;anything&lt;/em&gt; which is referred to can be retrieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a62b6a03ff057b389984333781dbd1f2f5a392" translate="yes" xml:space="preserve">
          <source>This mapping can be as short or as long as needed. It can reference other mappings. And, because it&amp;rsquo;s pure Python code, it can be constructed dynamically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cadbb4c4d2ebd0123eca8cc756bde2334aacdc" translate="yes" xml:space="preserve">
          <source>This may be done at the time the user is created, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823abfa7b93049ac5970a761fa50df36ae597242" translate="yes" xml:space="preserve">
          <source>This means that Django will use &lt;a href=&quot;https://en.wikipedia.org/wiki/PBKDF2&quot;&gt;PBKDF2&lt;/a&gt; to store all passwords but will support checking passwords stored with PBKDF2SHA1, &lt;a href=&quot;https://en.wikipedia.org/wiki/Argon2&quot;&gt;argon2&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Bcrypt&quot;&gt;bcrypt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881aa3565e650cdafee2d8b3ad5825b32c11953a" translate="yes" xml:space="preserve">
          <source>This means that historical model problems may not be immediately obvious. If you run into this kind of failure, it&amp;rsquo;s OK to edit the migration to use the historical models rather than direct imports and commit those changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d330a29c4a176f4880b94635e776d6d09dee777" translate="yes" xml:space="preserve">
          <source>This means that when you run the migrations, the &lt;code&gt;authors&lt;/code&gt; migration runs first and creates the table the &lt;code&gt;ForeignKey&lt;/code&gt; references, and then the migration that makes the &lt;code&gt;ForeignKey&lt;/code&gt; column runs afterwards and creates the constraint. If this didn&amp;rsquo;t happen, the migration would try to create the &lt;code&gt;ForeignKey&lt;/code&gt; column without the table it&amp;rsquo;s referencing existing and your database would throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce917c919073f22198247177a0f18bb569d8c066" translate="yes" xml:space="preserve">
          <source>This means that you will NOT have custom &lt;code&gt;save()&lt;/code&gt; methods called on objects when you access them in migrations, and you will NOT have any custom constructors or instance methods. Plan appropriately!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e262b679eecd469f1389dc5492b6c7c01048ec2" translate="yes" xml:space="preserve">
          <source>This means things should work intuitively, so the abstraction doesn&amp;rsquo;t leak. For example, to retrieve all the entries that contain a percent sign, use the percent sign as any other character:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c8c90e84903f305ccf0b6ec841763ce0622daa" translate="yes" xml:space="preserve">
          <source>This means you can store templates with your individual apps. This also helps to distribute Django apps with default templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d674da615e8dd0909b3485ca34f4c1919a711b0a" translate="yes" xml:space="preserve">
          <source>This means you would write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7206b0f18c1b7d52f5425c091e1a6517af3ae5" translate="yes" xml:space="preserve">
          <source>This means, instead of instantiating a &lt;code&gt;Client&lt;/code&gt; in each test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015dbeea32c33974e576bb465e437088c98dace7" translate="yes" xml:space="preserve">
          <source>This method &lt;strong&gt;must be implemented&lt;/strong&gt; by the subclass, and since the value may be empty, the implementation must be defensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080eb1d1cd70bcd376c7d2e21ee864b2cdade0bb" translate="yes" xml:space="preserve">
          <source>This method accepts a &lt;code&gt;clear&lt;/code&gt; argument to control how to perform the operation. If &lt;code&gt;False&lt;/code&gt; (the default), the elements missing from the new set are removed using &lt;code&gt;remove()&lt;/code&gt; and only the new ones are added. If &lt;code&gt;clear=True&lt;/code&gt;, the &lt;code&gt;clear()&lt;/code&gt; method is called instead and the whole set is added at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6258c4ca11bfe7eb08298a50b3a5d3fd21eb28ec" translate="yes" xml:space="preserve">
          <source>This method allows adding errors to specific fields from within the &lt;code&gt;Form.clean()&lt;/code&gt; method, or from outside the form altogether; for instance from a view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0609a9b18f0c262bbb7a77ddbdb916903c7fd49" translate="yes" xml:space="preserve">
          <source>This method calls &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt;&lt;code&gt;Model.clean_fields()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#django.db.models.Model.clean&quot;&gt;&lt;code&gt;Model.clean()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#django.db.models.Model.validate_unique&quot;&gt;&lt;code&gt;Model.validate_unique()&lt;/code&gt;&lt;/a&gt; (if &lt;code&gt;validate_unique&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;), in that order and raises a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; that has a &lt;code&gt;message_dict&lt;/code&gt; attribute containing errors from all three stages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c013f93834c75986f57585a6ed4bf0d38ed28a4a" translate="yes" xml:space="preserve">
          <source>This method can also be used to determine the availability of a model on a given database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75a886d7588dd8a1df9e434ffd0479aa5cca05b" translate="yes" xml:space="preserve">
          <source>This method efficiently updates the given fields on the provided model instances, generally with one query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea59edbb3ad3481aa459a9a3983985b9590f068" translate="yes" xml:space="preserve">
          <source>This method exists for convenience and readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cc4cdf3a23f8c4e59f54a621a7c2dd8a1a118c" translate="yes" xml:space="preserve">
          <source>This method inserts the provided list of objects into the database in an efficient manner (generally only 1 query, no matter how many objects there are):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3379c9f933913b2b5106787692685b4c9ccef7c0" translate="yes" xml:space="preserve">
          <source>This method inspects the WKT of this &lt;code&gt;SpatialReference&lt;/code&gt; and will add EPSG authority nodes where an EPSG identifier is applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2403a4104263a63cd1f43b21d449f59cc2b5cf" translate="yes" xml:space="preserve">
          <source>This method is &lt;strong&gt;grossly inefficient&lt;/strong&gt; and probably &lt;strong&gt;insecure&lt;/strong&gt;, so it is &lt;strong&gt;unsuitable for production&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e45c4b646180f2607e907f254c2c15286bd31d" translate="yes" xml:space="preserve">
          <source>This method is atomic assuming that the database enforces uniqueness of the keyword arguments (see &lt;a href=&quot;fields#django.db.models.Field.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;options#django.db.models.Options.unique_together&quot;&gt;&lt;code&gt;unique_together&lt;/code&gt;&lt;/a&gt;). If the fields used in the keyword arguments do not have a uniqueness constraint, concurrent calls to this method may result in multiple rows with the same parameters being inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11936f0f0a4a4fe606ced71d22ac4a9f7bcc4a71" translate="yes" xml:space="preserve">
          <source>This method is automatically called during the response initialization and set various headers (&lt;code&gt;Content-Length&lt;/code&gt;, &lt;code&gt;Content-Type&lt;/code&gt;, and &lt;code&gt;Content-Disposition&lt;/code&gt;) depending on &lt;code&gt;open_file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d48c4a7570d4b0786427804e72031d7d508e336" translate="yes" xml:space="preserve">
          <source>This method is called at the end of the request directly by the WSGI server, or when the WSGI server closes the file-like object, if &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#optional-platform-specific-file-handling&quot;&gt;wsgi.file_wrapper&lt;/a&gt; is used for the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fde432efc213a0a15aab857a3786addcbc1a373" translate="yes" xml:space="preserve">
          <source>This method is faster than &lt;code&gt;login()&lt;/code&gt; since the expensive password hashing algorithms are bypassed. Also, you can speed up &lt;code&gt;login()&lt;/code&gt; by &lt;a href=&quot;overview#speeding-up-tests-auth-hashers&quot;&gt;using a weaker hasher while testing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0b4eaf5762663b90c57c42fc7b364ccaa3d25b" translate="yes" xml:space="preserve">
          <source>This method is for controlling which database the &lt;code&gt;QuerySet&lt;/code&gt; will be evaluated against if you are using more than one database. The only argument this method takes is the alias of a database, as defined in &lt;a href=&quot;../settings#std:setting-DATABASES&quot;&gt;&lt;code&gt;DATABASES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c0d945fab944d556bde37a8ef60cef0e7a6405" translate="yes" xml:space="preserve">
          <source>This method is not used for most built-in fields as the database backend already returns the correct Python type, or the backend itself does the conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8f1ec848a96ac31b6cd8594814879c77555704" translate="yes" xml:space="preserve">
          <source>This method is often used by &lt;a href=&quot;#django.db.models.Field.value_to_string&quot;&gt;&lt;code&gt;value_to_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4dd30a8aeb968408efe60ccd4ac01ec4cb4d9d8" translate="yes" xml:space="preserve">
          <source>This method is primarily used internally. You should use a widget instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f44224f7aae7f1054a48cf18856727d7f474fc2" translate="yes" xml:space="preserve">
          <source>This method is similar to &lt;a href=&quot;#django.db.models.Model.clean_fields&quot;&gt;&lt;code&gt;clean_fields()&lt;/code&gt;&lt;/a&gt;, but validates all uniqueness constraints on your model instead of individual field values. The optional &lt;code&gt;exclude&lt;/code&gt; argument allows you to provide a list of field names to exclude from validation. It will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if any fields fail validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f91de92127376a536fa9059205131938feed775" translate="yes" xml:space="preserve">
          <source>This method makes an &lt;a href=&quot;#django.http.HttpResponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; instance a file-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478237cfb08554607b715f4eb1feb0cf7ef1258f" translate="yes" xml:space="preserve">
          <source>This method may be overridden with your own custom search method. For example, you might wish to search by an integer field, or use an external tool such as Solr or Haystack. You must establish if the queryset changes implemented by your search method may introduce duplicates into the results, and return &lt;code&gt;True&lt;/code&gt; in the second element of the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f02ad5e13a38bddd61f1ac8b9533a7a55bd0726" translate="yes" xml:space="preserve">
          <source>This method may raise a &lt;code&gt;StopFutureHandlers&lt;/code&gt; exception to prevent future handlers from handling this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804c55a18383ec732e12c536b9a3a61fc15bd6c2" translate="yes" xml:space="preserve">
          <source>This method must be added to fields prior to 1.7 to migrate its data using &lt;a href=&quot;../../topics/migrations&quot;&gt;Migrations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6882b83a65c5db4edb77c762d14d355e3f0cbbb" translate="yes" xml:space="preserve">
          <source>This method must be implemented in the subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fe75950ea64fc2ce50bddb833b2733bfb58617" translate="yes" xml:space="preserve">
          <source>This method must return a 4-tuple of &lt;code&gt;(deleted_objects, model_count, perms_needed, protected)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52f3dc1cca47c17d07d17b3778bf381b8ffd448" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; that is a clone of the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9636e56a3e2c9a7c772a2d76fcb0e8d1c34388e" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;a href=&quot;geos#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; object comprising the union of every geometry in the queryset. Please note that use of &lt;code&gt;Union&lt;/code&gt; is processor intensive and may take a significant amount of time on large querysets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e7d901a8c7b5f5ddebc53f1fae5f644abcd615" translate="yes" xml:space="preserve">
          <source>This method returns a boolean designating whether a field has an error with a specific error &lt;code&gt;code&lt;/code&gt;. If &lt;code&gt;code&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;, it will return &lt;code&gt;True&lt;/code&gt; if the field contains any errors at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe1e08ec2eacfb8545fd663797ae0a36aee1227" translate="yes" xml:space="preserve">
          <source>This method returns the list of errors from &lt;a href=&quot;#django.forms.Form.errors&quot;&gt;&lt;code&gt;Form.errors&lt;/code&gt;&lt;/a&gt; that aren&amp;rsquo;t associated with a particular field. This includes &lt;code&gt;ValidationError&lt;/code&gt;s that are raised in &lt;a href=&quot;#django.forms.Form.clean&quot;&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/a&gt; and errors added using &lt;a href=&quot;#django.forms.Form.add_error&quot;&gt;&lt;code&gt;Form.add_error(None,
&quot;...&quot;)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c390e9e6746a152b20430fa99045536dcf2d8d70" translate="yes" xml:space="preserve">
          <source>This method should be used to provide custom model validation, and to modify attributes on your model if desired. For instance, you could use it to automatically provide a value for a field, or to do validation that requires access to more than a single field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dd50117abf8b09315b29e855b6e35f86842bf2" translate="yes" xml:space="preserve">
          <source>This method should return a dictionary in the form &lt;code&gt;{'fieldname': 'fieldval'}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84245af7e748dc76ab6bdec57ff3796110793931" translate="yes" xml:space="preserve">
          <source>This method should return the number of tests that failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bb2b53277dcbaa0b45e4be49ce0692d12918ea" translate="yes" xml:space="preserve">
          <source>This method takes a filename and file contents and passes them to the storage class for the field, then associates the stored file with the model field. If you want to manually associate file data with &lt;a href=&quot;#django.db.models.FileField&quot;&gt;&lt;code&gt;FileField&lt;/code&gt;&lt;/a&gt; instances on your model, the &lt;code&gt;save()&lt;/code&gt; method is used to persist that file data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d4b02f11188457bf379af5b856c7ae95ad0e81" translate="yes" xml:space="preserve">
          <source>This method takes a raw SQL query, executes it, and returns a &lt;code&gt;django.db.models.query.RawQuerySet&lt;/code&gt; instance. This &lt;code&gt;RawQuerySet&lt;/code&gt; instance can be iterated over like a normal &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; to provide object instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841fa77ce7493857da94dca4da32c93217e76609" translate="yes" xml:space="preserve">
          <source>This method takes a single &amp;ldquo;compressed&amp;rdquo; value from the field and returns a list of &amp;ldquo;decompressed&amp;rdquo; values. The input value can be assumed valid, but not necessarily non-empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12328513cf4eafe3ecede74f7b8b94c182179435" translate="yes" xml:space="preserve">
          <source>This method will be called once per each item in the list returned by &lt;code&gt;items()&lt;/code&gt; with the following keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ae371150e73f891a976dbf0bfb6a212c4055e7" translate="yes" xml:space="preserve">
          <source>This method will encode certain characters that would normally be recognized as special characters for URIs. Note that this method does not encode the &amp;lsquo; character, as it is a valid character within URIs. See &lt;code&gt;encodeURIComponent()&lt;/code&gt; JavaScript function for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f8cd58baf63f9278adee5046e4b13af114919d" translate="yes" xml:space="preserve">
          <source>This method will validate all fields on your model. The optional &lt;code&gt;exclude&lt;/code&gt; argument lets you provide a list of field names to exclude from validation. It will raise a &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; if any fields fail validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949d1b4773e69624862522bfe362292f69c70646" translate="yes" xml:space="preserve">
          <source>This middleware is enabled in the settings file generated by &lt;a href=&quot;django-admin#django-admin-startproject&quot;&gt;&lt;code&gt;startproject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d172799496ad6ec49d1315024e3242a4607b3358" translate="yes" xml:space="preserve">
          <source>This middleware should be placed before any other middleware that need to read or write the response body so that compression happens afterward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8773b5ec14f61a44b08b434a7a553c17644481d3" translate="yes" xml:space="preserve">
          <source>This middleware should be positioned before any other middleware that relies on the value of &lt;a href=&quot;#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt; &amp;ndash; for instance, &lt;a href=&quot;middleware#django.middleware.common.CommonMiddleware&quot;&gt;&lt;code&gt;CommonMiddleware&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;middleware#django.middleware.csrf.CsrfViewMiddleware&quot;&gt;&lt;code&gt;CsrfViewMiddleware&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7d1fb46b0f9c8814e908855ec5699f338e94db" translate="yes" xml:space="preserve">
          <source>This might look familiar; the admin&amp;rsquo;s &lt;code&gt;list_display&lt;/code&gt; option uses the same technique to provide human-readable descriptions for callback functions registered there, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4d29b80a4810d9734ffdd3523cb5d7fda8b77d" translate="yes" xml:space="preserve">
          <source>This mixin provides a &lt;code&gt;render_to_json_response()&lt;/code&gt; method with the same signature as &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.TemplateResponseMixin.render_to_response&quot;&gt;&lt;code&gt;render_to_response()&lt;/code&gt;&lt;/a&gt;. To use it, we need to mix it into a &lt;code&gt;TemplateView&lt;/code&gt; for example, and override &lt;code&gt;render_to_response()&lt;/code&gt; to call &lt;code&gt;render_to_json_response()&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6df572b97310ee0aefd077b4b5b8931289d4334" translate="yes" xml:space="preserve">
          <source>This mixin, just like the &lt;code&gt;permission_required&lt;/code&gt; decorator, checks whether the user accessing a view has all given permissions. You should specify the permission (or an iterable of permissions) using the &lt;code&gt;permission_required&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb914f9772f81905142ad83227c0dae37863c0e" translate="yes" xml:space="preserve">
          <source>This module contains helper functions for controlling HTTP caching. It does so by managing the &lt;code&gt;Vary&lt;/code&gt; header of responses. It includes functions to patch the header of response objects directly and decorators that change functions to do that header-patching themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5138ecea796e65e3058c876f1f2760e62b1ae22a" translate="yes" xml:space="preserve">
          <source>This object &amp;ndash; &lt;code&gt;car.photo&lt;/code&gt; in the example &amp;ndash; is a &lt;code&gt;File&lt;/code&gt; object, which means it has all the methods and attributes described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721f8de90bc0f05d22e77831b4b42fa4b7b1859d" translate="yes" xml:space="preserve">
          <source>This object is a wrapper for the &lt;a href=&quot;https://gdal.org/api/ogrgeometry_cpp.html#ogrgeometry-class&quot;&gt;OGR Geometry&lt;/a&gt; class. These objects are instantiated directly from the given &lt;code&gt;geom_input&lt;/code&gt; parameter, which may be a string containing WKT, HEX, GeoJSON, a &lt;code&gt;buffer&lt;/code&gt; containing WKB data, or an &lt;a href=&quot;#django.contrib.gis.gdal.OGRGeomType&quot;&gt;&lt;code&gt;OGRGeomType&lt;/code&gt;&lt;/a&gt; object. These objects are also returned from the &lt;a href=&quot;#django.contrib.gis.gdal.Feature.geom&quot;&gt;&lt;code&gt;Feature.geom&lt;/code&gt;&lt;/a&gt; attribute, when reading vector data from &lt;a href=&quot;#django.contrib.gis.gdal.Layer&quot;&gt;&lt;code&gt;Layer&lt;/code&gt;&lt;/a&gt; (which is in turn a part of a &lt;a href=&quot;#django.contrib.gis.gdal.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab92fa3ff9d4bbdddd65ca8aafc3b5592457669" translate="yes" xml:space="preserve">
          <source>This object is equivalent to &lt;code&gt;caches['default']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435658b64d34dbcdb6fa11576963504e787553e9" translate="yes" xml:space="preserve">
          <source>This of course works in reverse:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca0f0c0c570538b7928e2106d580988b582906f" translate="yes" xml:space="preserve">
          <source>This opens up a text editor to type the commit message. Follow the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/committing-code/#committing-guidelines&quot;&gt;commit message guidelines&lt;/a&gt; and write a message like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50589f890445ab494088463d5ca78a94d0f14533" translate="yes" xml:space="preserve">
          <source>This option also sets &lt;a href=&quot;fields#django.db.models.ForeignKey.related_query_name&quot;&gt;&lt;code&gt;related_query_name&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb50ef3ad1325b1d161c4c5ec1959ca87e40a4c8" translate="yes" xml:space="preserve">
          <source>This option is unnecessary in &lt;code&gt;manage.py&lt;/code&gt;, because it takes care of setting the Python path for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d110f250c9cad13bf0a435a86873671d24db85b" translate="yes" xml:space="preserve">
          <source>This option is unnecessary in &lt;code&gt;manage.py&lt;/code&gt;, because it uses &lt;code&gt;settings.py&lt;/code&gt; from the current project by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8280c3c4ec0def33fb57a95b3324ae816d00af76" translate="yes" xml:space="preserve">
          <source>This option is valid on all field types except &lt;a href=&quot;#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="214e975f8e1f62c34ab6fde52dad078879cadbc9" translate="yes" xml:space="preserve">
          <source>This option may be used for customizing the coordinate dimension of the geometry field. By default, it is set to 2, for representing two-dimensional geometries. For spatial backends that support it, it may be set to 3 for three-dimensional support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42467926bfe8621601c1e5394da33114d0feb11f" translate="yes" xml:space="preserve">
          <source>This option requires the third-party &lt;code&gt;tblib&lt;/code&gt; package to display tracebacks correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3251a48b6c7b720e5b31951512c4d7744d1e2126" translate="yes" xml:space="preserve">
          <source>This optional argument is used to specify the field to use as the value of the choices in the field&amp;rsquo;s widget. Be sure it&amp;rsquo;s a unique field for the model, otherwise the selected value could match more than one object. By default it is set to &lt;code&gt;None&lt;/code&gt;, in which case the primary key of each object will be used. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06a07ee3d53d2fe4d0d3f11d634bc6d2fcd2fe5" translate="yes" xml:space="preserve">
          <source>This page describes how you can serve these static files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d8ee576ee07e12c6b3aa09603dc49a39f57306" translate="yes" xml:space="preserve">
          <source>This part is done by the template tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c289cc2789cd0c7401d02d6dd738d9ce67a394c" translate="yes" xml:space="preserve">
          <source>This particular change above makes the &amp;ldquo;Publication date&amp;rdquo; come before the &amp;ldquo;Question&amp;rdquo; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d510f7beb1ab9ef346234d69b3b849e829ad7fc" translate="yes" xml:space="preserve">
          <source>This pattern gets quite unwieldy as the number of fields in a model goes up. The above example can be rewritten using &lt;code&gt;update_or_create()&lt;/code&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9d76f9df8b974a4eb060a490fa1432080821bc" translate="yes" xml:space="preserve">
          <source>This performs an &lt;code&gt;INSERT&lt;/code&gt; SQL statement behind the scenes. Django doesn&amp;rsquo;t hit the database until you explicitly call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f573be76ba4c9f6b8b413aa33c79983e92a32a84" translate="yes" xml:space="preserve">
          <source>This performs an &lt;code&gt;UPDATE&lt;/code&gt; SQL statement behind the scenes. Django doesn&amp;rsquo;t hit the database until you explicitly call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7bcab1266b3196eabfacd3aefaea14f31b82de" translate="yes" xml:space="preserve">
          <source>This point is the &lt;a href=&quot;https://www.law.uh.edu/&quot;&gt;University of Houston Law Center&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74e03198f17b05e13e1020abff2648e79d79c15" translate="yes" xml:space="preserve">
          <source>This predicate is similar to &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;GEOSGeometry.contains()&lt;/code&gt;&lt;/a&gt;, but is more inclusive (i.e. returns &lt;code&gt;True&lt;/code&gt; for more cases). In particular, unlike &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt; it does not distinguish between points in the boundary and in the interior of geometries. For most situations, &lt;code&gt;covers()&lt;/code&gt; should be preferred to &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt;. As an added benefit, &lt;code&gt;covers()&lt;/code&gt; is more amenable to optimization and hence should outperform &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry.contains&quot;&gt;&lt;code&gt;contains()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361bed87865d33c915128ce44b1617c773a50987" translate="yes" xml:space="preserve">
          <source>This process doesn&amp;rsquo;t copy relations that aren&amp;rsquo;t part of the model&amp;rsquo;s database table. For example, &lt;code&gt;Entry&lt;/code&gt; has a &lt;code&gt;ManyToManyField&lt;/code&gt; to &lt;code&gt;Author&lt;/code&gt;. After duplicating an entry, you must set the many-to-many relations for the new entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a410b86c9d751b44698dcc65f1721aa9f0ff893" translate="yes" xml:space="preserve">
          <source>This process generally works well, but it can be slow and occasionally buggy. It is not recommended that you run and migrate SQLite in a production environment unless you are very aware of the risks and its limitations; the support Django ships with is designed to allow developers to use SQLite on their local machines to develop less complex Django projects without the need for a full database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e229ae0ad060fa9de52faa891b07a6340155ca53" translate="yes" xml:space="preserve">
          <source>This processor adds a token that is needed by the &lt;a href=&quot;builtins#std:templatetag-csrf_token&quot;&gt;&lt;code&gt;csrf_token&lt;/code&gt;&lt;/a&gt; template tag for protection against &lt;a href=&quot;../csrf&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a5084b1e174d01c72338c44306ab9ae32e66a0" translate="yes" xml:space="preserve">
          <source>This propagation can be controlled on a per-logger basis. If you don&amp;rsquo;t want a particular logger to propagate to its parents, you can turn off this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632d260c788fdba687efba486f907110be12a253" translate="yes" xml:space="preserve">
          <source>This property controls the rounding precision of coordinates; if set to &lt;code&gt;None&lt;/code&gt; rounding is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0bf2cc4fb1d566beeb3c3548fc04f4b05738fa" translate="yes" xml:space="preserve">
          <source>This property controls the spatial reference for this geometry, or &lt;code&gt;None&lt;/code&gt; if no spatial reference system has been assigned to it. If assigned, accessing this property returns a &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object. It may be set with another &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; object, or any input that &lt;a href=&quot;#django.contrib.gis.gdal.SpatialReference&quot;&gt;&lt;code&gt;SpatialReference&lt;/code&gt;&lt;/a&gt; accepts. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d90b983b0b9c4a44068f5168a1bfadb02cfffa" translate="yes" xml:space="preserve">
          <source>This property is used to enable or disable trimming of unnecessary decimals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab242bb5a764896098e96b014f378bfbe7bc8be" translate="yes" xml:space="preserve">
          <source>This property may be set to change the byte-order of the geometry representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5289e31ddaef6662a60c7e644472e194dd8d1c27" translate="yes" xml:space="preserve">
          <source>This property may be set to change the output dimension of the geometry representation. In other words, if you have a 3D geometry then set to 3 so that the Z value is included in the WKB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d84509578b7ccd047758ef2ab9a7c1153a71bc1" translate="yes" xml:space="preserve">
          <source>This property returns the area of the Geometry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463082c8500bf532a1a2a59b6665ff283e88b498" translate="yes" xml:space="preserve">
          <source>This property returns the data for this &lt;a href=&quot;#django.forms.BoundField&quot;&gt;&lt;code&gt;BoundField&lt;/code&gt;&lt;/a&gt; extracted by the widget&amp;rsquo;s &lt;a href=&quot;widgets#django.forms.Widget.value_from_datadict&quot;&gt;&lt;code&gt;value_from_datadict()&lt;/code&gt;&lt;/a&gt; method, or &lt;code&gt;None&lt;/code&gt; if it wasn&amp;rsquo;t given:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154db08cc764103fb986182b6475e92f5b09fe93" translate="yes" xml:space="preserve">
          <source>This property returns the extent of this geometry as a 4-tuple, consisting of &lt;code&gt;(xmin, ymin, xmax, ymax)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d37ab048ead714fc6618294c6a692b59216c17" translate="yes" xml:space="preserve">
          <source>This provides a quick-and-dirty way to override some of the &lt;a href=&quot;../../forms/fields#django.forms.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; options for use in the admin. &lt;code&gt;formfield_overrides&lt;/code&gt; is a dictionary mapping a field class to a dict of arguments to pass to the field at construction time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5a1a25f0304afe2db0bd8e9c8a5b2e0dc32f53" translate="yes" xml:space="preserve">
          <source>This query generates an annotated result set, and then generates a filter based upon that annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c95de6ba55865c03d04719c9f141ba69cdb48d" translate="yes" xml:space="preserve">
          <source>This queryset will be evaluated as subselect statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7645a55dbc10a1a7637c1fd526d106095848210" translate="yes" xml:space="preserve">
          <source>This read-only attribute represents the URL the response will redirect to (equivalent to the &lt;code&gt;Location&lt;/code&gt; response header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0905b50cdd99c5f4096787aa121980d1b90ff659" translate="yes" xml:space="preserve">
          <source>This registry is called &lt;a href=&quot;#django.apps.apps&quot;&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/a&gt; and it&amp;rsquo;s available in &lt;a href=&quot;#module-django.apps&quot;&gt;&lt;code&gt;django.apps&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a3f9542b0ca1cc4f88861748177ce67f7fbd9d" translate="yes" xml:space="preserve">
          <source>This renderer gives you complete control of how widget templates are sourced. It uses &lt;a href=&quot;../../topics/templates#django.template.loader.get_template&quot;&gt;&lt;code&gt;get_template()&lt;/code&gt;&lt;/a&gt; to find widget templates based on what&amp;rsquo;s configured in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1737492dac53c18be68413fbe634bdc1a43c18" translate="yes" xml:space="preserve">
          <source>This renderer is the same as the &lt;a href=&quot;#django.forms.renderers.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; renderer except that it uses a &lt;a href=&quot;../../topics/templates#django.template.backends.jinja2.Jinja2&quot;&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/a&gt; backend. Templates for the built-in widgets are located in &lt;code&gt;django/forms/jinja2&lt;/code&gt; and installed apps can provide templates in a &lt;code&gt;jinja2&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db689dc37faee124528bb16bc4f14d940146cadb" translate="yes" xml:space="preserve">
          <source>This renderer uses a standalone &lt;a href=&quot;../../topics/templates#django.template.backends.django.DjangoTemplates&quot;&gt;&lt;code&gt;DjangoTemplates&lt;/code&gt;&lt;/a&gt; engine (unconnected to what you might have configured in the &lt;a href=&quot;../settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt; setting). It loads templates first from the built-in form templates directory in &lt;code&gt;django/forms/templates&lt;/code&gt; and then from the installed apps&amp;rsquo; templates directories using the &lt;a href=&quot;../templates/api#django.template.loaders.app_directories.Loader&quot;&gt;&lt;code&gt;app_directories&lt;/code&gt;&lt;/a&gt; loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63c860ced280ca56c3dcec664ac455421cbec81" translate="yes" xml:space="preserve">
          <source>This requires you to commit explicitly every transaction, even those started by Django or by third-party libraries. Thus, this is best used in situations where you want to run your own transaction-controlling middleware or do something really strange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a82abb0d9b45ba4ff4a234227534338c66f72c5" translate="yes" xml:space="preserve">
          <source>This restriction doesn&amp;rsquo;t apply to model fields inherited from an abstract model. Such fields may be overridden with another field or value, or be removed by setting &lt;code&gt;field_name = None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5a4ec58c5ffb4646c6614fe64993dc046dc04e" translate="yes" xml:space="preserve">
          <source>This restriction only applies to attributes which are &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34fdb035dc65306c14e511d44c216c3a21b6d35" translate="yes" xml:space="preserve">
          <source>This results in an admin page that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779283760e0bd1935f36869066b2292fd9cdd1b6" translate="yes" xml:space="preserve">
          <source>This results in the error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d61a82fe1cf91ff0c9ee594e6d2fb88324d10ed" translate="yes" xml:space="preserve">
          <source>This results in the following general form for lookups involving rasters (assuming the &lt;code&gt;Elevation&lt;/code&gt; model used in the &lt;a href=&quot;model-api&quot;&gt;GeoDjango Model API&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2b4a2bab090852cd1d820e140513f212d86e72" translate="yes" xml:space="preserve">
          <source>This return value is different from the &lt;code&gt;deconstruct()&lt;/code&gt; method &lt;a href=&quot;../howto/custom-model-fields#custom-field-deconstruct-method&quot;&gt;for custom fields&lt;/a&gt; which returns a tuple of four items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddd4ab298fffe7194f1ec32e7324a526e275cad" translate="yes" xml:space="preserve">
          <source>This returns a dictionary of actions allowed. The keys are action names, and the values are &lt;code&gt;(function, name, short_description)&lt;/code&gt; tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0e9398e3314c6a39f1f4592d202cf5ce20b276" translate="yes" xml:space="preserve">
          <source>This returns the sixth through tenth objects (&lt;code&gt;OFFSET 5 LIMIT 5&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398c6a549b509f7af3be11ce8aac2f108bbe1e18" translate="yes" xml:space="preserve">
          <source>This runs your tests and collects coverage data of the executed files in your project. You can see a report of this data by typing following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2babc5571187eb3b0bc8a3066efda194e3272df" translate="yes" xml:space="preserve">
          <source>This section also includes instructions for installing an upgraded version of &lt;a href=&quot;#macos-python&quot;&gt;Python&lt;/a&gt; from packages provided by the Python Software Foundation, however, this is not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5e6ce9e300331ed5b2eebde8444a3f1f158fc1" translate="yes" xml:space="preserve">
          <source>This section contains a brief introduction and tutorial to using &lt;a href=&quot;#django.contrib.gis.geos.GEOSGeometry&quot;&gt;&lt;code&gt;GEOSGeometry&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388fdf6824f2ebd0c36c4d55e73ea06732df948d" translate="yes" xml:space="preserve">
          <source>This section describes how to create rasters from scratch using the &lt;code&gt;ds_input&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cc8ced758c2f660a6a1c96d6bb1746c366b811" translate="yes" xml:space="preserve">
          <source>This section details the authentication backends that come with Django. For information on how to use them and how to write your own authentication backends, see the &lt;a href=&quot;../../topics/auth/customizing#authentication-backends&quot;&gt;Other authentication sources section&lt;/a&gt; of the &lt;a href=&quot;../../topics/auth/index&quot;&gt;User authentication guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7698bb9af257107be814a73a7bc8f5b7d0b3dc0e" translate="yes" xml:space="preserve">
          <source>This section is relevant only if you&amp;rsquo;re implementing your own transaction management. This problem cannot occur in Django&amp;rsquo;s default mode and &lt;a href=&quot;#django.db.transaction.atomic&quot;&gt;&lt;code&gt;atomic()&lt;/code&gt;&lt;/a&gt; handles it automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ce0889945648187c9ce1b7dfbef6915209eb7d" translate="yes" xml:space="preserve">
          <source>This section provides reference material for query-related tools not documented elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d0ee281d70dcdf1425e98e10a908631caf100d" translate="yes" xml:space="preserve">
          <source>This section will show you how to import the world borders shapefile into the database via GeoDjango models using the &lt;a href=&quot;layermapping&quot;&gt;LayerMapping data import utility&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb49d45ec46a524bfd7fa97756ee182693282d0" translate="yes" xml:space="preserve">
          <source>This sends a message to &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; and &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt;, with them both receiving a separate email:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1381ed9014daa6dcc425e865f2476f5b17dadeae" translate="yes" xml:space="preserve">
          <source>This sends a single email to &lt;a href=&quot;mailto:john%40example.com&quot;&gt;john@example.com&lt;/a&gt; and &lt;a href=&quot;mailto:jane%40example.com&quot;&gt;jane@example.com&lt;/a&gt;, with them both appearing in the &amp;ldquo;To:&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e081ffcc26625aefd03c1cbf21ce7dfe5403e8" translate="yes" xml:space="preserve">
          <source>This server uses the WSGI application object specified by the &lt;a href=&quot;settings#std:setting-WSGI_APPLICATION&quot;&gt;&lt;code&gt;WSGI_APPLICATION&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349b2e302397143297b0696a765b9a10d0e05763" translate="yes" xml:space="preserve">
          <source>This sets the default storage engine upon connecting to the database. After your tables have been created, you should remove this option as it adds a query that is only needed during table creation to each database connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c3e976c7f62d3d10d1095b818e169f627f0256" translate="yes" xml:space="preserve">
          <source>This sets the mapping of message level to message tag, which is typically rendered as a CSS class in HTML. If you specify a value, it will extend the default. This means you only have to specify those values which you need to override. See &lt;a href=&quot;contrib/messages#message-displaying&quot;&gt;Displaying messages&lt;/a&gt; above for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12b042a248a44fd8b0107e3b2df2971503d6030" translate="yes" xml:space="preserve">
          <source>This setting also affects cookies set by &lt;a href=&quot;contrib/messages#module-django.contrib.messages&quot;&gt;&lt;code&gt;django.contrib.messages&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d3fdb61bcd322120ff11cb09de3302f1195f6f" translate="yes" xml:space="preserve">
          <source>This setting also determines the default permissions for collected static directories when using the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; for details on overriding it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548133c0b12e142e70380ed9e6d3f829fca0060d" translate="yes" xml:space="preserve">
          <source>This setting also determines the default permissions for collected static files when using the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; management command. See &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; for details on overriding it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab0e70beb7f05c47afa91479cbebb5eaf8db688" translate="yes" xml:space="preserve">
          <source>This setting defines the additional locations the staticfiles app will traverse if the &lt;code&gt;FileSystemFinder&lt;/code&gt; finder is enabled, e.g. if you use the &lt;a href=&quot;contrib/staticfiles#django-admin-collectstatic&quot;&gt;&lt;code&gt;collectstatic&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;contrib/staticfiles#django-admin-findstatic&quot;&gt;&lt;code&gt;findstatic&lt;/code&gt;&lt;/a&gt; management command or use the static file serving view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b80c8581f4c0dc8b87d13d06d5e657a5a150ad" translate="yes" xml:space="preserve">
          <source>This setting exists to allow for testing of primary/replica (referred to as master/slave by some databases) configurations of multiple databases. See the documentation on &lt;a href=&quot;../topics/testing/advanced#topics-testing-primaryreplica&quot;&gt;testing primary/replica configurations&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe6042ce12f8ce964adc8478a31f0fc9247fd0d" translate="yes" xml:space="preserve">
          <source>This setting is a global default and can be overwritten at a per-session level by explicitly calling the &lt;a href=&quot;#django.contrib.sessions.backends.base.SessionBase.set_expiry&quot;&gt;&lt;code&gt;set_expiry()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;request.session&lt;/code&gt; as described above in &lt;a href=&quot;#using-sessions-in-views&quot;&gt;using sessions in views&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cb264dce98fcd41c9cd8c59a257c48d3ad5c55" translate="yes" xml:space="preserve">
          <source>This setting is required to protect your site against some CSRF attacks. If you use a wildcard, you must perform your own validation of the &lt;code&gt;Host&lt;/code&gt; HTTP header, or otherwise ensure that you aren&amp;rsquo;t vulnerable to this category of attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127c7582bcafd6ada9d4c033dc6d3d6c27f3f6d3" translate="yes" xml:space="preserve">
          <source>This setting takes priority over &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt;&lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt;&lt;/a&gt;. Per &lt;a href=&quot;https://tools.ietf.org/html/rfc7239.html#section-5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7239#section-5.3&lt;/strong&gt;&lt;/a&gt;, the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header can include the port number, in which case you shouldn&amp;rsquo;t use &lt;a href=&quot;#std:setting-USE_X_FORWARDED_PORT&quot;&gt;&lt;code&gt;USE_X_FORWARDED_PORT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc8b2704f6ff908ef3d80ed33f8e26caacff314" translate="yes" xml:space="preserve">
          <source>This shapefile is in the popular WGS84 spatial reference system &amp;ndash; in other words, the data uses longitude, latitude pairs in units of degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfa635db51f594be050295806f3e510590ec9b5" translate="yes" xml:space="preserve">
          <source>This short template iterates over the given data and displays a line of CSV for each row. It uses the &lt;a href=&quot;../ref/templates/builtins#std:templatefilter-addslashes&quot;&gt;&lt;code&gt;addslashes&lt;/code&gt;&lt;/a&gt; template filter to ensure there aren&amp;rsquo;t any problems with quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeadb582a89287e89977c4d9ba1e9b67e229e70" translate="yes" xml:space="preserve">
          <source>This should be an initially empty destination directory for collecting your static files from their permanent locations into one directory for ease of deployment; it is &lt;strong&gt;not&lt;/strong&gt; a place to store your static files permanently. You should do that in directories that will be found by &lt;a href=&quot;contrib/staticfiles&quot;&gt;staticfiles&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#std:setting-STATICFILES_FINDERS&quot;&gt;&lt;code&gt;finders&lt;/code&gt;&lt;/a&gt;, which by default, are &lt;code&gt;'static/'&lt;/code&gt; app sub-directories and any directories you include in &lt;a href=&quot;#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b50ba4bcf77c2fdd6fbfb8372057b466008cd41" translate="yes" xml:space="preserve">
          <source>This should be set to a list of strings that contain full paths to your additional files directory(ies) e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8be1282035a588e2c42f17abf131670005500a" translate="yes" xml:space="preserve">
          <source>This should not be done for POST forms that target external URLs, since that would cause the CSRF token to be leaked, leading to a vulnerability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369d54d2e433bf38cfcfaa48dfb8d2e639339dd1" translate="yes" xml:space="preserve">
          <source>This should output &amp;ldquo;UTF-8&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5c4a6fe8714cac0fa3cf0cd4c7ba4e9ee4ae97" translate="yes" xml:space="preserve">
          <source>This shows another issue, where we are matching against a different spelling of the name. In this case we have an asymmetry though - a search for &lt;code&gt;Helen&lt;/code&gt; will pick up &lt;code&gt;Helena&lt;/code&gt; or &lt;code&gt;H&amp;eacute;l&amp;egrave;ne&lt;/code&gt;, but not the reverse. Another option would be to use a &lt;a href=&quot;../../ref/contrib/postgres/lookups#std:fieldlookup-trigram_similar&quot;&gt;&lt;code&gt;trigram_similar&lt;/code&gt;&lt;/a&gt; comparison, which compares sequences of letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce0e1df0614ff5c48057ab9444768b0d3e21a37" translate="yes" xml:space="preserve">
          <source>This shows, by the way, that you can make multiple calls to &lt;code&gt;extra()&lt;/code&gt; and it will behave as you expect (adding new constraints each time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dd6924d07379d5eae8108d2f9477f297126c1b" translate="yes" xml:space="preserve">
          <source>This signal is sent when the value of a setting is changed through the &lt;code&gt;django.test.TestCase.settings()&lt;/code&gt; context manager or the &lt;a href=&quot;../topics/testing/tools#django.test.override_settings&quot;&gt;&lt;code&gt;django.test.override_settings()&lt;/code&gt;&lt;/a&gt; decorator/context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82edd23b361a592a73d5f0004d3086f518ae491" translate="yes" xml:space="preserve">
          <source>This signal is sent whenever Django encounters an exception while processing an incoming HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914f0ce8bae73160152bceb95f5a23b917b48f86" translate="yes" xml:space="preserve">
          <source>This simple example, taken from a hypothetical police beat news site describes a feed of the latest five news items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9daa9b555617bab957e445a30273a3bc544da32c" translate="yes" xml:space="preserve">
          <source>This simplistic view logs in a &amp;ldquo;member&amp;rdquo; of the site:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208cfe552efadfbc9683059c968b5aee29eceb02" translate="yes" xml:space="preserve">
          <source>This simplistic view sets a &lt;code&gt;has_commented&lt;/code&gt; variable to &lt;code&gt;True&lt;/code&gt; after a user posts a comment. It doesn&amp;rsquo;t let a user post a comment more than once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462dbdfe1e37bbc5069fd21455c36eda51793588" translate="yes" xml:space="preserve">
          <source>This slows down the startup time of the test runner; if you have apps that you know don&amp;rsquo;t need this feature, you can add their full names in here (e.g. &lt;code&gt;'django.contrib.contenttypes'&lt;/code&gt;) to exclude them from this serialization process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4c28ae186c8e8f29d2f6b4cd86c3cdfb622452" translate="yes" xml:space="preserve">
          <source>This sort of reference, called a lazy relationship, can be useful when resolving circular import dependencies between two applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0f0497260c1bd8c3b04123a2b42534d0d6b8ad" translate="yes" xml:space="preserve">
          <source>This spanning can be as deep as you&amp;rsquo;d like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9f68776d403b1e87f1aff95be9f8338b3a5797" translate="yes" xml:space="preserve">
          <source>This static definition is converted at runtime into a widget property named &lt;code&gt;media&lt;/code&gt;. The list of assets for a &lt;code&gt;CalendarWidget&lt;/code&gt; instance can be retrieved through this property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b26947ffb150028956f2fc0245b54915b4cceab" translate="yes" xml:space="preserve">
          <source>This step is only necessary if you&amp;rsquo;d like to work with a &amp;ldquo;large&amp;rdquo; database engine like PostgreSQL, MariaDB, MySQL, or Oracle. To install such a database, consult the &lt;a href=&quot;../topics/install#database-installation&quot;&gt;database installation information&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd93e246c23d55e311a0b17674dcd87f793d8f08" translate="yes" xml:space="preserve">
          <source>This syntax can only be used for single-line comments (no newlines are permitted between the &lt;code&gt;{#&lt;/code&gt; and &lt;code&gt;#}&lt;/code&gt; delimiters). If you need to comment out a multiline portion of the template, see the &lt;a href=&quot;builtins#std:templatetag-comment&quot;&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e4c06960b0cc9b77691ab892156047c42d736b" translate="yes" xml:space="preserve">
          <source>This tag allows a more fine grained control of localization than &lt;a href=&quot;../../ref/settings#std:setting-USE_L10N&quot;&gt;&lt;code&gt;USE_L10N&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48514d47322b8d3fc3468b465650133d43084bf4" translate="yes" xml:space="preserve">
          <source>This tag also provides for pluralization. To use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553b1ccb92d8209e26a01f3586bd667e12f57d4e" translate="yes" xml:space="preserve">
          <source>This tag auto-escapes variable values. You can disable auto-escaping with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391d955b5bccbb5b0b196c198524f5e8bac63cec" translate="yes" xml:space="preserve">
          <source>This tag can be used in two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27093869c44859e5fbc39a11666ac3d48d84427" translate="yes" xml:space="preserve">
          <source>This tag has exactly the same effects as the &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ&lt;/code&gt;&lt;/a&gt; setting as far as the template engine is concerned. It allows a more fine grained control of conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60513b3846b57a1f4d4de01d444f5c7d6bd353a9" translate="yes" xml:space="preserve">
          <source>This tag is particularly useful in a loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d799b62253d994051bf441baa35ca4618760ff3" translate="yes" xml:space="preserve">
          <source>This tag is used for CSRF protection, as described in the documentation for &lt;a href=&quot;../csrf&quot;&gt;Cross Site Request Forgeries&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd33eb4f7f1ea18cb3e00850bd81dcaec99dfd8d" translate="yes" xml:space="preserve">
          <source>This takes the initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; containing all entries with a headline that starts with &amp;ldquo;What&amp;rdquo;, that were published between January 30, 2005, and the current day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251bc5482e0d2d2384729de0d0782385ed5239c7" translate="yes" xml:space="preserve">
          <source>This technique is used in the &lt;a href=&quot;../../ref/contrib/syndication&quot;&gt;syndication framework&lt;/a&gt; to pass metadata and options to views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c80ab2c76c9d01fd68d8e172d8679f1ecd2f61" translate="yes" xml:space="preserve">
          <source>This technique lets language-specific translations reorder the placeholder text. For example, an English translation may be &lt;code&gt;&quot;Today is November 26.&quot;&lt;/code&gt;, while a Spanish translation may be &lt;code&gt;&quot;Hoy es 26 de Noviembre.&quot;&lt;/code&gt; &amp;ndash; with the month and the day placeholders swapped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef266bf489ec0b89254f7de5d9f5916de71a526" translate="yes" xml:space="preserve">
          <source>This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32bdf947906604af2e0b8cf6074268998d49cf5" translate="yes" xml:space="preserve">
          <source>This tells Django to build a sitemap when a client accesses &lt;code&gt;/sitemap.xml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d51a843ed0251c0ec515a36e05cf10941cb2fa" translate="yes" xml:space="preserve">
          <source>This tells Django to retrieve the &lt;code&gt;Store&lt;/code&gt; model, join (through the many-to-many relationship) with the &lt;code&gt;Book&lt;/code&gt; model, and aggregate on the price field of the book model to produce a minimum and maximum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a96b77d1174ca6a922db32b401ab3bff52c93a" translate="yes" xml:space="preserve">
          <source>This tells Django to trust the &lt;code&gt;X-Forwarded-Proto&lt;/code&gt; header that comes from our proxy, and any time its value is &lt;code&gt;'https'&lt;/code&gt;, then the request is guaranteed to be secure (i.e., it originally came in via HTTPS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c889c25b5058b33e81d3467b1e3d16ce0bf106e" translate="yes" xml:space="preserve">
          <source>This tells Django: &amp;ldquo;&lt;code&gt;Choice&lt;/code&gt; objects are edited on the &lt;code&gt;Question&lt;/code&gt; admin page. By default, provide enough fields for 3 choices.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566b41c91a6fc048a88b2223d44ccc9afa07b54b" translate="yes" xml:space="preserve">
          <source>This tells downstream caches to vary on &lt;em&gt;both&lt;/em&gt;, which means each combination of user-agent and cookie will get its own cache value. For example, a request with the user-agent &lt;code&gt;Mozilla&lt;/code&gt; and the cookie value &lt;code&gt;foo=bar&lt;/code&gt; will be considered different from a request with the user-agent &lt;code&gt;Mozilla&lt;/code&gt; and the cookie value &lt;code&gt;foo=ham&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c915280d0cbd8cb69e6eee11f0222bba253610" translate="yes" xml:space="preserve">
          <source>This tells the &lt;a href=&quot;index#django.contrib.admin.ModelAdmin&quot;&gt;&lt;code&gt;ModelAdmin&lt;/code&gt;&lt;/a&gt; to not display or allow any actions, including any &lt;a href=&quot;#adminsite-actions&quot;&gt;site-wide actions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5076daafa8f95796bb9a3911395afa3623b3040d" translate="yes" xml:space="preserve">
          <source>This tells the browser to return the form data to the URL &lt;code&gt;/your-name/&lt;/code&gt;, using the &lt;code&gt;POST&lt;/code&gt; method. It will display a text field, labeled &amp;ldquo;Your name:&amp;rdquo;, and a button marked &amp;ldquo;OK&amp;rdquo;. If the template context contains a &lt;code&gt;current_name&lt;/code&gt; variable, that will be used to pre-fill the &lt;code&gt;your_name&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d546c383f3fb939674b702de55222694fde96011" translate="yes" xml:space="preserve">
          <source>This tells you that the test runner is creating a test database, as described in the previous section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ec35763241924aff863ea4892ee66700521330" translate="yes" xml:space="preserve">
          <source>This template code is much better:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43aeef0d1d83f6759d09f263d1973c0e9bfd72d" translate="yes" xml:space="preserve">
          <source>This template context variable is not available if a &lt;code&gt;RequestContext&lt;/code&gt; is not being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00183a644f3972f185fe30e6495f5ffc58eb3f6" translate="yes" xml:space="preserve">
          <source>This template file contains lots of text like &lt;code&gt;{% block branding %}&lt;/code&gt; and &lt;code&gt;{{ title }}&lt;/code&gt;. The &lt;code&gt;{%&lt;/code&gt; and &lt;code&gt;{{&lt;/code&gt; tags are part of Django&amp;rsquo;s template language. When Django renders &lt;code&gt;admin/base_site.html&lt;/code&gt;, this template language will be evaluated to produce the final HTML page, just like we saw in &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e58bc3d3abd11f3823a24751e1c45f1859c642f" translate="yes" xml:space="preserve">
          <source>This template tag works on links prefixed with &lt;code&gt;http://&lt;/code&gt;, &lt;code&gt;https://&lt;/code&gt;, or &lt;code&gt;www.&lt;/code&gt;. For example, &lt;code&gt;https://goo.gl/aia1t&lt;/code&gt; will get converted but &lt;code&gt;goo.gl/aia1t&lt;/code&gt; won&amp;rsquo;t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faf4ae6d1b4633ce9aebae7fcb01f9d0252391f" translate="yes" xml:space="preserve">
          <source>This template will be rendered against a context containing a variable called &lt;code&gt;object_list&lt;/code&gt; that contains all the publisher objects. A template might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03a946ab4019a96b9a4438a09c3244280241fa5" translate="yes" xml:space="preserve">
          <source>This template, which we&amp;rsquo;ll call &lt;code&gt;base.html&lt;/code&gt;, defines an HTML skeleton document that you might use for a two-column page. It&amp;rsquo;s the job of &amp;ldquo;child&amp;rdquo; templates to fill the empty blocks with content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a7004cbd713ebf840e7fb59b18e08d70b0027b" translate="yes" xml:space="preserve">
          <source>This test case will flush the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; test databases before running &lt;code&gt;test_index_page_view&lt;/code&gt;. You can also use &lt;code&gt;'__all__'&lt;/code&gt; to specify that all of the test databases must be flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57836182add09cdff8a2751fef476413d86fdf45" translate="yes" xml:space="preserve">
          <source>This test checks that the &lt;code&gt;make_toast()&lt;/code&gt; returns &lt;code&gt;'toast'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28584df05b5dfa9b9ec526baff2aaa227a5e76bc" translate="yes" xml:space="preserve">
          <source>This test will only allow queries against the &lt;code&gt;other&lt;/code&gt; database. Just like for &lt;a href=&quot;#django.test.SimpleTestCase.databases&quot;&gt;&lt;code&gt;SimpleTestCase.databases&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#django.test.TransactionTestCase.databases&quot;&gt;&lt;code&gt;TransactionTestCase.databases&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;'__all__'&lt;/code&gt; constant can be used to specify that the test should allow queries to all databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25bae639c0eb77257c16bd9b49e7eac65766a15" translate="yes" xml:space="preserve">
          <source>This tool runs over all available &lt;code&gt;.po&lt;/code&gt; files and creates &lt;code&gt;.mo&lt;/code&gt; files, which are binary files optimized for use by &lt;code&gt;gettext&lt;/code&gt;. In the same directory from which you ran &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt;, run &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd84b8ba7488013bcfe113468696acd31ef9d9a" translate="yes" xml:space="preserve">
          <source>This topic guide describes Django&amp;rsquo;s support for interacting with multiple databases. Most of the rest of Django&amp;rsquo;s documentation assumes you are interacting with a single database. If you want to interact with multiple databases, you&amp;rsquo;ll need to take some additional steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e1962e8e66df3ea8af2f6adfe80fde3a7c069f" translate="yes" xml:space="preserve">
          <source>This transforms the field on the model from the old field to the new one. This includes changing the name of the column (the &lt;a href=&quot;models/fields#django.db.models.Field.db_column&quot;&gt;&lt;code&gt;db_column&lt;/code&gt;&lt;/a&gt; attribute), changing the type of the field (if the field class changes), changing the &lt;code&gt;NULL&lt;/code&gt; status of the field, adding or removing field-only unique constraints and indexes, changing primary key, and changing the destination of &lt;code&gt;ForeignKey&lt;/code&gt; constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81fc6ccf0b6aa634ef44e4b747b28b9d01812b2" translate="yes" xml:space="preserve">
          <source>This tutorial assumes familiarity with Django; thus, if you&amp;rsquo;re brand new to Django, please read through the &lt;a href=&quot;../../../intro/tutorial01&quot;&gt;regular tutorial&lt;/a&gt; to familiarize yourself with Django first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635d03962a0ce40653206de9b41e85713f838d6a" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial01&quot;&gt;Tutorial 1&lt;/a&gt; left off. We&amp;rsquo;ll setup the database, create your first model, and get a quick introduction to Django&amp;rsquo;s automatically-generated admin site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a725208ca4d7e29c4e0e818d95dcb41ddac42709" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on creating the public interface &amp;ndash; &amp;ldquo;views.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c657556b72883eb8d6aad6c12a99bc972776cc6d" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial03&quot;&gt;Tutorial 3&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on form processing and cutting down our code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679c525673fbf1eec8a4c9848c2d30834435dfe8" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial04&quot;&gt;Tutorial 4&lt;/a&gt; left off. We&amp;rsquo;ve built a Web-poll application, and we&amp;rsquo;ll now create some automated tests for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4240d9a53f83d89d930aa4c992664a03725264df" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial05&quot;&gt;Tutorial 5&lt;/a&gt; left off. We&amp;rsquo;ve built a tested Web-poll application, and we&amp;rsquo;ll now add a stylesheet and an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abf081255253fb57dd1de1687dfbb281040ca49" translate="yes" xml:space="preserve">
          <source>This tutorial begins where &lt;a href=&quot;tutorial06&quot;&gt;Tutorial 6&lt;/a&gt; left off. We&amp;rsquo;re continuing the Web-poll application and will focus on customizing Django&amp;rsquo;s automatically-generated admin site that we first explored in &lt;a href=&quot;tutorial02&quot;&gt;Tutorial 2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeaec0a433b8c3d10ff804b7b3b90d1ae2137985" translate="yes" xml:space="preserve">
          <source>This tutorial is written for Django 3.0, which supports Python 3.6 and later. If the Django version doesn&amp;rsquo;t match, you can refer to the tutorial for your version of Django by using the version switcher at the bottom right corner of this page, or update Django to the newest version. If you&amp;rsquo;re using an older version of Python, check &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/install/#faq-python-version-support&quot;&gt;What Python version can I use with Django?&lt;/a&gt; to find a compatible version of Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84298b351d5fcca3a05acb3f79b17c235ef787d2" translate="yes" xml:space="preserve">
          <source>This tutorial only introduces some of the basics of testing. There&amp;rsquo;s a great deal more you can do, and a number of very useful tools at your disposal to achieve some very clever things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18112ab4065d3c3930428aa29839b531778d9529" translate="yes" xml:space="preserve">
          <source>This tutorial provides basic instruction in the use of URLconfs, and you can refer to &lt;a href=&quot;../topics/http/urls&quot;&gt;URL dispatcher&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f6d1fb458c318c3d1cb97191b62d5662936bd5" translate="yes" xml:space="preserve">
          <source>This tutorial will guide you through the creation of a geographic web application for viewing the &lt;a href=&quot;https://thematicmapping.org/downloads/world_borders.php&quot;&gt;world borders&lt;/a&gt;. &lt;a href=&quot;#id11&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; Some of the code used in this tutorial is taken from and/or inspired by the &lt;a href=&quot;https://code.google.com/p/geodjango-basic-apps/&quot;&gt;GeoDjango basic apps&lt;/a&gt; project. &lt;a href=&quot;#id12&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e728603ca63fa37f42229adece12781b4568610" translate="yes" xml:space="preserve">
          <source>This unittest TestCase subclass extends &lt;a href=&quot;../../topics/testing/tools#django.test.LiveServerTestCase&quot;&gt;&lt;code&gt;django.test.LiveServerTestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f89cbb6d7e72071eee65e8088e54a2d305497af" translate="yes" xml:space="preserve">
          <source>This usage isn&amp;rsquo;t particularly recommended as it makes it easier to accidentally introduce errors between the intended meaning of a match and the arguments of the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db3af690dc1ef929db39639e9448e89bde17c7f" translate="yes" xml:space="preserve">
          <source>This uses reverse URL lookup to find the URL of the JavaScript catalog view. When the catalog is loaded, your JavaScript code can use the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6575ff382ac55eb3efe3ab3b0f7132aac769e5" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;HttpRequest&lt;/code&gt; instance to filter the &lt;code&gt;Car&lt;/code&gt; foreign key field to only display the cars owned by the &lt;code&gt;User&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3e155dac7311fa6b9e5cbd38a172e1008b0b30" translate="yes" xml:space="preserve">
          <source>This utility grew out of the author&amp;rsquo;s personal needs to eliminate the code repetition that went into pulling geometries and fields out of a vector layer, converting to another coordinate system (e.g. WGS84), and then inserting into a GeoDjango model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223a1fff204831fb0ea255c4070f8c9c155b63b3" translate="yes" xml:space="preserve">
          <source>This validation only applies via &lt;a href=&quot;../ref/request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt;; if your code accesses the &lt;code&gt;Host&lt;/code&gt; header directly from &lt;code&gt;request.META&lt;/code&gt; you are bypassing this security protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12eec4374146bd3a116fcccc0141201fa5458a5e" translate="yes" xml:space="preserve">
          <source>This validation only applies via &lt;a href=&quot;request-response#django.http.HttpRequest.get_host&quot;&gt;&lt;code&gt;get_host()&lt;/code&gt;&lt;/a&gt;; if your code accesses the &lt;code&gt;Host&lt;/code&gt; header directly from &lt;code&gt;request.META&lt;/code&gt; you are bypassing this security protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519fb4aa21b9376da28f08043300ac3929e3b00b" translate="yes" xml:space="preserve">
          <source>This value can be either a boolean flag or a callable. If &lt;code&gt;True&lt;/code&gt; (the default), the object&amp;rsquo;s &lt;a href=&quot;../../models/instances#django.db.models.Model.get_absolute_url&quot;&gt;&lt;code&gt;get_absolute_url()&lt;/code&gt;&lt;/a&gt; method will be used to generate the url.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b632e840aaa30faaa98e4d296102660ab24f88" translate="yes" xml:space="preserve">
          <source>This value mirrors the functionality and caveats of the &lt;a href=&quot;#std:setting-FILE_UPLOAD_PERMISSIONS&quot;&gt;&lt;code&gt;FILE_UPLOAD_PERMISSIONS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9663cd15b0f9cb1004708efb7c0550a67935e92e" translate="yes" xml:space="preserve">
          <source>This view can then be deployed in the same way as any other &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt;, with exactly the same behavior &amp;ndash; except for the format of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82b91a055a2c315d31650406c0022f66a3d37e0" translate="yes" xml:space="preserve">
          <source>This view function serves static files in development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b877b900aa462fd0b4f0c239fe840fcf92cd92c4" translate="yes" xml:space="preserve">
          <source>This view inherits methods and attributes from the following view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143586bf42dc21aceee643ea32b145199654cc62" translate="yes" xml:space="preserve">
          <source>This view inherits methods and attributes from the following views:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f24476fa666fb3cf65650519e6c9399b87159f" translate="yes" xml:space="preserve">
          <source>This view is automatically enabled by &lt;a href=&quot;../django-admin#django-admin-runserver&quot;&gt;&lt;code&gt;runserver&lt;/code&gt;&lt;/a&gt; (with a &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; setting set to &lt;code&gt;True&lt;/code&gt;). To use the view with a different local development server, add the following snippet to the end of your primary URL configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016660ffdac25e641e7e3ab1bd4ea7fe4135c0ef" translate="yes" xml:space="preserve">
          <source>This view loads and renders the template &lt;code&gt;403.html&lt;/code&gt; in your root template directory, or if this file does not exist, instead serves the text &amp;ldquo;403 Forbidden&amp;rdquo;, as per &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html#section-6.5.3&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7231#section-6.5.3&lt;/strong&gt;&lt;/a&gt; (the HTTP 1.1 Specification). The template context contains &lt;code&gt;exception&lt;/code&gt;, which is the string representation of the exception that triggered the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d4ad5785f98701dff20c85a13b697075efe157" translate="yes" xml:space="preserve">
          <source>This view uses by default the same template as the &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/ref/class-based-views/flattened-index/#DayArchiveView&quot;&gt;&lt;code&gt;DayArchiveView&lt;/code&gt;&lt;/a&gt;, which is in the previous example. If you need a different template, set the &lt;code&gt;template_name&lt;/code&gt; attribute to be the name of the new template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7213c677560a9fa9a4ac052b037f6fc48838a29c" translate="yes" xml:space="preserve">
          <source>This view will only work if &lt;a href=&quot;../settings#std:setting-DEBUG&quot;&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9105d1655be2ddfce1a3395d72e4093b5625a659" translate="yes" xml:space="preserve">
          <source>This warning doesn&amp;rsquo;t apply to &lt;code&gt;RemoteUserMiddleware&lt;/code&gt; in its default configuration with &lt;code&gt;header = 'REMOTE_USER'&lt;/code&gt;, since a key that doesn&amp;rsquo;t start with &lt;code&gt;HTTP_&lt;/code&gt; in &lt;code&gt;request.META&lt;/code&gt; can only be set by your WSGI server, not directly from an HTTP request header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7999650e7e3761f1a4d6b5114cb3dcb2c73ab411" translate="yes" xml:space="preserve">
          <source>This way, you can write applications that include their own translations, and you can override base translations in your project. Or, you can build a big project out of several apps and put all translations into one big common message file specific to the project you are composing. The choice is yours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3739ab965f09a407edb58939c8f42e88b1f64f" translate="yes" xml:space="preserve">
          <source>This way, you&amp;rsquo;ll be able to pass, say, an integer to this filter, and it won&amp;rsquo;t cause an &lt;code&gt;AttributeError&lt;/code&gt; (because integers don&amp;rsquo;t have &lt;code&gt;lower()&lt;/code&gt; methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e9bdcf252e759f216585170e3a7579d3a17b08" translate="yes" xml:space="preserve">
          <source>This widget uses an OpenStreetMap base layer to display geographic objects on. Attributes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85f8c3200ce73681068479a6d6f370398f20f06" translate="yes" xml:space="preserve">
          <source>This will automatically generate a &lt;code&gt;sitemap.xml&lt;/code&gt; file that references both &lt;code&gt;sitemap-flatpages.xml&lt;/code&gt; and &lt;code&gt;sitemap-blog.xml&lt;/code&gt;. The &lt;a href=&quot;#django.contrib.sitemaps.Sitemap&quot;&gt;&lt;code&gt;Sitemap&lt;/code&gt;&lt;/a&gt; classes and the &lt;code&gt;sitemaps&lt;/code&gt; dict don&amp;rsquo;t change at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9e619492f567ed0edb127d8611a4bd8b287b73" translate="yes" xml:space="preserve">
          <source>This will be used as the root URLconf for the current request, overriding the &lt;a href=&quot;settings#std:setting-ROOT_URLCONF&quot;&gt;&lt;code&gt;ROOT_URLCONF&lt;/code&gt;&lt;/a&gt; setting. See &lt;a href=&quot;../topics/http/urls#how-django-processes-a-request&quot;&gt;How Django processes a request&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3298d4536943a07b2e2ff0a080a8256216828e18" translate="yes" xml:space="preserve">
          <source>This will call it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b994950f699945bb14a5d540ae7c274833931bf9" translate="yes" xml:space="preserve">
          <source>This will copy all files from your static folders into the &lt;a href=&quot;../../ref/settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2bfdd14c9503852609f39016cbc2f4f7ed8e88" translate="yes" xml:space="preserve">
          <source>This will create a &lt;code&gt;mysite&lt;/code&gt; directory in your current directory. If it didn&amp;rsquo;t work, see &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/faq/troubleshooting/#troubleshooting-django-admin&quot;&gt;Problems running django-admin&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71b79c71685cecb4708981aee7d48d144343a03" translate="yes" xml:space="preserve">
          <source>This will create a directory &lt;code&gt;django&lt;/code&gt; in your current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a631f2cd61479ee712e1cd927616974bd5c495" translate="yes" xml:space="preserve">
          <source>This will create a formset that is capable of working with the data associated with the &lt;code&gt;Author&lt;/code&gt; model. It works just like a regular formset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee69ae908e14090bc160ca188cd447bf32b8bf2" translate="yes" xml:space="preserve">
          <source>This will download and install the latest Django release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461ff15ba8c29ef0a66607efbda8954c9c1422e6" translate="yes" xml:space="preserve">
          <source>This will enable an API similar to the one used for a normal &lt;a href=&quot;../models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;; each &lt;code&gt;TaggedItem&lt;/code&gt; will have a &lt;code&gt;content_object&lt;/code&gt; field that returns the object it&amp;rsquo;s related to, and you can also assign to that field or use it when creating a &lt;code&gt;TaggedItem&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139faa2b6fd4c35d739e6f2ff8c1c57e8a05676a" translate="yes" xml:space="preserve">
          <source>This will ensure that the person named &lt;code&gt;Fred&lt;/code&gt; will have the same primary key on both databases. If that primary key is already in use when you try to save onto the &lt;code&gt;second&lt;/code&gt; database, an error will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1006c55fbf2688f814e4003d4620176646f333b1" translate="yes" xml:space="preserve">
          <source>This will ensure that the subquery will not be added to the &lt;code&gt;SELECT&lt;/code&gt; columns, which may result in a better performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad711bd97176f8b12ec80a064bcdd27869425f3" translate="yes" xml:space="preserve">
          <source>This will fetch the best pizza and all the toppings for the best pizza for each restaurant. This will be done in 3 database queries - one for the restaurants, one for the &amp;lsquo;best pizzas&amp;rsquo;, and one for the toppings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcfb1272c40482fab98fb5c309ad204426ae717" translate="yes" xml:space="preserve">
          <source>This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing &lt;code&gt;poll.Choice&lt;/code&gt; instances in that instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60d03fd2f5c6b6f5704c71b56528eeae9922d14" translate="yes" xml:space="preserve">
          <source>This will follow the normal &lt;a href=&quot;../../topics/http/urls#topics-http-reversing-url-namespaces&quot;&gt;namespaced URL resolution strategy&lt;/a&gt;, including using any hints provided by the context as to the current application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caa84eea347eae2caf1dcb400646433758f46f9" translate="yes" xml:space="preserve">
          <source>This will include the following URL patterns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af37af300ea79f6cd31364e11dda9f0be847e5f6" translate="yes" xml:space="preserve">
          <source>This will include the nominated URL patterns into the given application namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78806b856c974b3e3adfc873945e356ae1911f7" translate="yes" xml:space="preserve">
          <source>This will initialize a new project. Now, create a &lt;code&gt;world&lt;/code&gt; Django application within the &lt;code&gt;geodjango&lt;/code&gt; project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db9735b1efc7186a8a636558309ff03be56f285" translate="yes" xml:space="preserve">
          <source>This will inspect your &lt;a href=&quot;../settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting and wire up the view to serve static files accordingly. Don&amp;rsquo;t forget to set the &lt;a href=&quot;../settings#std:setting-STATICFILES_DIRS&quot;&gt;&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;&lt;/a&gt; setting appropriately to let &lt;code&gt;django.contrib.staticfiles&lt;/code&gt; know where to look for files in addition to files in app directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96311b0a767ce541004083df426ce0a0435e780e" translate="yes" xml:space="preserve">
          <source>This will intelligently populate itself based on available data, e.g. if all the dates are in one month, it&amp;rsquo;ll show the day-level drill-down only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee945ea9648339b1e12f974761058073325f6f3" translate="yes" xml:space="preserve">
          <source>This will make Django&amp;rsquo;s code importable, and will also make the &lt;code&gt;django-admin&lt;/code&gt; utility command available. In other words, you&amp;rsquo;re all set!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c574c9b99cd982d5e8d424e42638aac1a86b5fad" translate="yes" xml:space="preserve">
          <source>This will make SQLite wait a bit longer before throwing &amp;ldquo;database is locked&amp;rdquo; errors; it won&amp;rsquo;t really do anything to solve them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45aed5c8cf67a332feaae929b25bca5cb1a178d4" translate="yes" xml:space="preserve">
          <source>This will make a new initial migration for your app. Now, run &lt;code&gt;python
manage.py migrate --fake-initial&lt;/code&gt;, and Django will detect that you have an initial migration &lt;em&gt;and&lt;/em&gt; that the tables it wants to create already exist, and will mark the migration as already applied. (Without the &lt;a href=&quot;../ref/django-admin#cmdoption-migrate-fake-initial&quot;&gt;&lt;code&gt;migrate
--fake-initial&lt;/code&gt;&lt;/a&gt; flag, the command would error out because the tables it wants to create already exist.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83128489576e906345d0cfbc62a16a911f531ba3" translate="yes" xml:space="preserve">
          <source>This will now yield one unique result for each author; however, only the author&amp;rsquo;s name and the &lt;code&gt;average_rating&lt;/code&gt; annotation will be returned in the output data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4b4f07c609143e874b6ccba24a3916ee42b11a" translate="yes" xml:space="preserve">
          <source>This will output a list of &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; elements with &lt;code&gt;class&lt;/code&gt; alternating between &lt;code&gt;row1&lt;/code&gt; and &lt;code&gt;row2&lt;/code&gt;. The subtemplate will have access to &lt;code&gt;rowcolors&lt;/code&gt; in its context and the value will match the class of the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; that encloses it. If the &lt;code&gt;silent&lt;/code&gt; keyword were to be omitted, &lt;code&gt;row1&lt;/code&gt; and &lt;code&gt;row2&lt;/code&gt; would be emitted as normal text, outside the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b377bfc3702d77892bc7d6caed9fe030cb81ff8" translate="yes" xml:space="preserve">
          <source>This will output all articles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb2e8a486cda815a375ec676a9438b740b9e150" translate="yes" xml:space="preserve">
          <source>This will prefetch all pizzas belonging to restaurants, and all toppings belonging to those pizzas. This will result in a total of 3 database queries - one for the restaurants, one for the pizzas, and one for the toppings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f840841b76804b33169f586f5500036251c6608f" translate="yes" xml:space="preserve">
          <source>This will raise a &lt;code&gt;ValueError&lt;/code&gt; because of the attempt to redefine the queryset of a previously seen lookup. Note that an implicit queryset was created to traverse &lt;code&gt;'pizzas'&lt;/code&gt; as part of the &lt;code&gt;'pizzas__toppings'&lt;/code&gt; lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c0a1be55afcefe4d0611877866c73d8841b88e" translate="yes" xml:space="preserve">
          <source>This will return one result for each author in the database, annotated with their average book rating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9af278885eb7c5c10380e223f8a32b279280c31" translate="yes" xml:space="preserve">
          <source>This will return the proper URL pattern for serving static files to your already defined pattern list. Use it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9c09901e1b218f7ae921fe90e84b9ef04b6dea" translate="yes" xml:space="preserve">
          <source>This will start one process listening on &lt;code&gt;127.0.0.1:8000&lt;/code&gt;. It requires that your project be on the Python path; to ensure that run this command from the same directory as your &lt;code&gt;manage.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039f325dee3c9dd1b27b0d06e20052184b976795" translate="yes" xml:space="preserve">
          <source>This will start one process running one thread listening on &lt;code&gt;127.0.0.1:8000&lt;/code&gt;. It requires that your project be on the Python path; the simplest way to ensure that is to run this command from the same directory as your &lt;code&gt;manage.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acff77f22a4208e686fddb1080968754ccb1060f" translate="yes" xml:space="preserve">
          <source>This will trigger an &lt;code&gt;AttributeError&lt;/code&gt; because &lt;code&gt;'pizza_list'&lt;/code&gt; doesn&amp;rsquo;t exist yet when &lt;code&gt;'pizza_list__toppings'&lt;/code&gt; is being processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f015ca4d2d3a9bb4aa070c30f9319418080e41c" translate="yes" xml:space="preserve">
          <source>This will work, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe309c1bf1a718c9d2d8b9a788629133c6bf3300" translate="yes" xml:space="preserve">
          <source>This won&amp;rsquo;t be an issue for most custom managers. If you are just adding simple methods to your &lt;code&gt;Manager&lt;/code&gt;, it is unlikely that you will inadvertently make instances of your &lt;code&gt;Manager&lt;/code&gt; uncopyable. However, if you&amp;rsquo;re overriding &lt;code&gt;__getattr__&lt;/code&gt; or some other private method of your &lt;code&gt;Manager&lt;/code&gt; object that controls object state, you should ensure that you don&amp;rsquo;t affect the ability of your &lt;code&gt;Manager&lt;/code&gt; to be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b7e139c8ce3ebc07f0a082cca7d6af3a6af8c2" translate="yes" xml:space="preserve">
          <source>This works even though it&amp;rsquo;s unordered because &lt;code&gt;'pizzas__toppings'&lt;/code&gt; already contains all the needed information, therefore the second argument &lt;code&gt;'pizzas'&lt;/code&gt; is actually redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ae65239f735cc912a57448aa635c993c2c6b59" translate="yes" xml:space="preserve">
          <source>This would allow you to refer to the local file &lt;code&gt;'/opt/webfiles/stats/polls_20101022.tar.gz'&lt;/code&gt; with &lt;code&gt;'/static/downloads/polls_20101022.tar.gz'&lt;/code&gt; in your templates, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8523884c7437b11830200d2fd09dd2b3b0311c0" translate="yes" xml:space="preserve">
          <source>This would be wrong &amp;ndash; in fact, Django will throw an error if you do so. That&amp;rsquo;s because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1909e42ac94b6f3ac7fa3fe4949bc64ab11fd46" translate="yes" xml:space="preserve">
          <source>This would create or update the message file for JavaScript for German. After updating message files, run &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; the same way as you do with normal Django message files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec3b5753676ac3838bce1fa780e48b2e0696c77" translate="yes" xml:space="preserve">
          <source>This would display as &amp;ldquo;01h 23m&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983a108f83af73b8998cc7b7c9d8414ce34c04a1" translate="yes" xml:space="preserve">
          <source>This would display as &amp;ldquo;It is the 4th of September&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030b15ad872434f95189a8fda31ab6eca23957fe" translate="yes" xml:space="preserve">
          <source>This would generate the following HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2788b9122df77143fa2938e7136916f437ebf55" translate="yes" xml:space="preserve">
          <source>This would sort all the items for which &lt;code&gt;is_recent&lt;/code&gt; is true to the front of the result set (&lt;code&gt;True&lt;/code&gt; sorts before &lt;code&gt;False&lt;/code&gt; in a descending ordering).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef52ebf93c61dd547c408a095a1074d66ed7c6e6" translate="yes" xml:space="preserve">
          <source>This would specify a form with a comment that uses a larger &lt;a href=&quot;#django.forms.Textarea&quot;&gt;&lt;code&gt;Textarea&lt;/code&gt;&lt;/a&gt; widget, rather than the default &lt;a href=&quot;#django.forms.TextInput&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a9b0397e52fdfb6db0a2b0d4bd493c815fb59f" translate="yes" xml:space="preserve">
          <source>This wrapping will protect &lt;code&gt;self.my_view&lt;/code&gt; from unauthorized access and will apply the &lt;a href=&quot;../../../topics/http/decorators#django.views.decorators.cache.never_cache&quot;&gt;&lt;code&gt;django.views.decorators.cache.never_cache()&lt;/code&gt;&lt;/a&gt; decorator to make sure it is not cached if the cache middleware is active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cc4590bcee19cd47e0b848017a4bb1fc156a7d" translate="yes" xml:space="preserve">
          <source>Those are the basic steps &amp;ndash; from here you&amp;rsquo;ll want to tweak the models Django generated until they work the way you&amp;rsquo;d like. Try accessing your data via the Django database API, and try editing objects via Django&amp;rsquo;s admin site, and edit the models file accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa65384159de4e3107d0109b20d8feafcb042805" translate="yes" xml:space="preserve">
          <source>Those are the components used for storing a User&amp;rsquo;s password, separated by the dollar-sign character and consist of: the hashing algorithm, the number of algorithm iterations (work factor), the random salt, and the resulting password hash. The algorithm is one of a number of one-way hashing or password storage algorithms Django can use; see below. Iterations describe the number of times the algorithm is run over the hash. Salt is the random seed used and the hash is the result of the one-way function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dec9c7d9dcd5cbcf8559d801ae57299e6038f3" translate="yes" xml:space="preserve">
          <source>Those of you who are unfamiliar with version control systems and Trac will find that this tutorial and its links include just enough information to get started. However, you&amp;rsquo;ll probably want to read some more about these different tools if you plan on contributing to Django regularly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cd3362bf46d8c3b4d44b9035f24630da349cc8" translate="yes" xml:space="preserve">
          <source>Though most of the time you&amp;rsquo;ll want to use a &lt;code&gt;File&lt;/code&gt; object (which delegates to the proper storage for that file), you can use file storage systems directly. You can create an instance of some custom file storage class, or &amp;ndash; often more useful &amp;ndash; you can use the global default storage system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa70522173261d7745e665606491ff2fb31e707a" translate="yes" xml:space="preserve">
          <source>Though this looks like three database hits, in fact it hits the database only once, at the last line (&lt;code&gt;print(q)&lt;/code&gt;). In general, the results of a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; aren&amp;rsquo;t fetched from the database until you &amp;ldquo;ask&amp;rdquo; for them. When you do, the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;evaluated&lt;/em&gt; by accessing the database. For more details on exactly when evaluation takes place, see &lt;a href=&quot;../../ref/models/querysets#when-querysets-are-evaluated&quot;&gt;When QuerySets are evaluated&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f06d797a2dbdfc0af13041428f8b64d6509caee" translate="yes" xml:space="preserve">
          <source>Though you can define a choices list outside of a model class and then refer to it, defining the choices and names for each choice inside the model class keeps all of that information with the class that uses it, and helps reference the choices (e.g, &lt;code&gt;Student.SOPHOMORE&lt;/code&gt; will work anywhere that the &lt;code&gt;Student&lt;/code&gt; model has been imported).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d4decc3581b66f01cf428c39f6b04082eb94f2" translate="yes" xml:space="preserve">
          <source>Thread 1 performs its first loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row1&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b6bb88069bd58cc98dc54f37f65be623d355ac" translate="yes" xml:space="preserve">
          <source>Thread 1 performs its second loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row1&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d707641e7a45dfff93f2bb96ccedc888137e137c" translate="yes" xml:space="preserve">
          <source>Thread 2 performs its first loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row2&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f444e4e2bf879ab71b47f47d7180794877b915fb" translate="yes" xml:space="preserve">
          <source>Thread 2 performs its second loop iteration, &lt;code&gt;CycleNode.render()&lt;/code&gt; returns &amp;lsquo;row2&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbd3a775f1273e0e69a6e35a7f62c3de359bdef" translate="yes" xml:space="preserve">
          <source>Thread safety with view arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8835929ed91937f173b47032785ba8515e2fdcd" translate="yes" xml:space="preserve">
          <source>Thread-safety considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9049cfae1ef31b353d9a275cdb16906e7fac582" translate="yes" xml:space="preserve">
          <source>Threaded option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79345e2741962416bbe3e544ded2776796d4ad74" translate="yes" xml:space="preserve">
          <source>Three things to note about 404 views:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3bfc362989ee184a0cf71f52c7b089ef051068" translate="yes" xml:space="preserve">
          <source>Throttling of login attempts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eed5bec6e69811a4c090736a9314b0740244ecd" translate="yes" xml:space="preserve">
          <source>Throughout this guide (and in the reference), we&amp;rsquo;ll refer to the following models, which comprise a Weblog application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c408b8ccb860ebea717b0e3d53400ec6b1cd518" translate="yes" xml:space="preserve">
          <source>Throughout this guide, we&amp;rsquo;ll refer to the following models. These models are used to track the inventory for a series of online bookstores:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11366579f89fee02f46cc6d65d6be27edd2151f" translate="yes" xml:space="preserve">
          <source>Throughout this reference we&amp;rsquo;ll use the &lt;a href=&quot;../../topics/db/queries#queryset-model-example&quot;&gt;example Weblog models&lt;/a&gt; presented in the &lt;a href=&quot;../../topics/db/queries&quot;&gt;database query guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9f77ed8646996f9f6ba3f8da85983d0d9de65c" translate="yes" xml:space="preserve">
          <source>Throughout this tutorial, we&amp;rsquo;ll walk you through the creation of a basic poll application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981f7cdde027cb27aa223c1de4e938a388dc5546" translate="yes" xml:space="preserve">
          <source>Thus, geometry parameters may be passed in using the &lt;code&gt;GEOSGeometry&lt;/code&gt; object, WKT (Well Known Text &lt;a href=&quot;#fnwkt&quot; id=&quot;id4&quot;&gt;[1]&lt;/a&gt;), HEXEWKB (PostGIS specific &amp;ndash; a WKB geometry in hexadecimal &lt;a href=&quot;#fnewkb&quot; id=&quot;id5&quot;&gt;[2]&lt;/a&gt;), and GeoJSON (see &lt;a href=&quot;https://tools.ietf.org/html/rfc7946.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 7946&lt;/strong&gt;&lt;/a&gt;). Essentially, if the input is not a &lt;code&gt;GEOSGeometry&lt;/code&gt; object, the geometry field will attempt to create a &lt;code&gt;GEOSGeometry&lt;/code&gt; instance from the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d52d8e0e3525b980e19ac85645a26cfb59f8a8" translate="yes" xml:space="preserve">
          <source>Thus, take care when using multi-valued field to order the results. &lt;strong&gt;If&lt;/strong&gt; you can be sure that there will only be one ordering piece of data for each of the items you&amp;rsquo;re ordering, this approach should not present problems. If not, make sure the results are what you expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dffc407b7cd48fa1c573f262783f28deff819e9" translate="yes" xml:space="preserve">
          <source>Thus, to define a custom template tag, you specify how the raw template tag is converted into a &lt;code&gt;Node&lt;/code&gt; (the compilation function), and what the node&amp;rsquo;s &lt;code&gt;render()&lt;/code&gt; method does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3683b4fa1b0130c82e0b51e1c2e6f8f20d1b76" translate="yes" xml:space="preserve">
          <source>Thus, when (for example) the &lt;code&gt;APP_DIRS&lt;/code&gt; option of a &lt;code&gt;DjangoTemplates&lt;/code&gt; backend is set to True in &lt;a href=&quot;../../ref/settings#std:setting-TEMPLATES&quot;&gt;&lt;code&gt;TEMPLATES&lt;/code&gt;&lt;/a&gt;, a template location could be: /path/to/project/books/templates/books/publisher_list.html</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22303e489a09da8c7fd2fb66f48bb12dbd93f6e9" translate="yes" xml:space="preserve">
          <source>Thus, you should always modify uploading handlers as early in your view as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c826a8259cfbb90e6a79f52dfa5cc7a89f7dad5" translate="yes" xml:space="preserve">
          <source>Ticket #99999 &amp;ndash; Allow making toast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909e6bf5e669718b029b6996037bb6813452cf46" translate="yes" xml:space="preserve">
          <source>Time zone aware input in forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e123509b3ce89b6daf1043c8949acdd78d908c59" translate="yes" xml:space="preserve">
          <source>Time zone aware output in templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20155fe06d09e61a748c0713bc8e4d4d3b015de" translate="yes" xml:space="preserve">
          <source>Time zone definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abfb166fcb1ca6a02ec74d788f7f4ed4b6ed48b" translate="yes" xml:space="preserve">
          <source>Time zone of this machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec68cad11ef9801f5d18dc08423b9f51b49ae14" translate="yes" xml:space="preserve">
          <source>Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a3880acdab53a520cb7444e8a53ce109dc1127" translate="yes" xml:space="preserve">
          <source>Time zone support is disabled by default. To enable it, set &lt;a href=&quot;../../ref/settings#std:setting-USE_TZ&quot;&gt;&lt;code&gt;USE_TZ =
True&lt;/code&gt;&lt;/a&gt; in your settings file. Time zone support uses &lt;a href=&quot;http://pytz.sourceforge.net/&quot;&gt;pytz&lt;/a&gt;, which is installed when you install Django.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9aac4028931969e4e43d5926f21c1c02b03737" translate="yes" xml:space="preserve">
          <source>Time zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd49bd15d82b5fef1f9bcba2fe101e86c69c2a6" translate="yes" xml:space="preserve">
          <source>Time, in 12-hour hours and minutes, with minutes left off if they&amp;rsquo;re zero. Proprietary extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5de36c7e9fafef316efb6de8a5df80db489557" translate="yes" xml:space="preserve">
          <source>Time, in 12-hour hours, minutes and &amp;lsquo;a.m.&amp;rsquo;/&amp;rsquo;p.m.&amp;rsquo;, with minutes left off if they&amp;rsquo;re zero and the special-case strings &amp;lsquo;midnight&amp;rsquo; and &amp;lsquo;noon&amp;rsquo; if appropriate. Proprietary extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fee3dc5071659def74176ccc0333ac4e69541e5" translate="yes" xml:space="preserve">
          <source>Timezone name. Could be in any format, or might return an empty string, depending on the datetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59969ae9efadcfdeb61497cd6b46bcd408f76d86" translate="yes" xml:space="preserve">
          <source>Timing of execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19ceca501465c339e3bcf2bc0d8ff02bb697d6c" translate="yes" xml:space="preserve">
          <source>Tip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed8c17551e6c9c715719518b4a017bf89dfd0d9" translate="yes" xml:space="preserve">
          <source>To access the new value saved this way, the object must be reloaded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3411a917129a5728d0bafff61d04a100a9b00a4a" translate="yes" xml:space="preserve">
          <source>To accomplish this, use the &lt;a href=&quot;#django.forms.Form.initial&quot;&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/a&gt; argument to a &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt;. This argument, if given, should be a dictionary mapping field names to initial values. Only include the fields for which you&amp;rsquo;re specifying an initial value; it&amp;rsquo;s not necessary to include every field in your form. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf04696721a5ef40e7890144c1993bb99559bcd7" translate="yes" xml:space="preserve">
          <source>To achieve this, place all migrations that should depend on yours in the &lt;code&gt;run_before&lt;/code&gt; attribute on your &lt;code&gt;Migration&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa8188d046186e8db2101570732f0296f04c147" translate="yes" xml:space="preserve">
          <source>To activate a middleware component, add it to the &lt;a href=&quot;../../ref/settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt; list in your Django settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e319f9fcd595b15b59dae09a2b1af74ecf1a46a" translate="yes" xml:space="preserve">
          <source>To activate or deactivate conversion for a template block, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca3aa0fa210f5b1cb7c61647051dedfa6525ac1" translate="yes" xml:space="preserve">
          <source>To activate or deactivate localization for a template block, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5bed6db13412b793ca79934a8d15f5f5b75ad0" translate="yes" xml:space="preserve">
          <source>To activate sitemap generation on your Django site, add this line to your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570d6a92f143a6e5c3ea4524f84ff2e8bd43f9c0" translate="yes" xml:space="preserve">
          <source>To activate the &lt;a href=&quot;#module-django.contrib.admindocs&quot;&gt;&lt;code&gt;admindocs&lt;/code&gt;&lt;/a&gt;, you will need to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0abbe07ee6c09f34827ed989b145e540f63a10" translate="yes" xml:space="preserve">
          <source>To activate these filters, add &lt;code&gt;'django.contrib.humanize'&lt;/code&gt; to your &lt;a href=&quot;../settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. Once you&amp;rsquo;ve done that, use &lt;code&gt;{% load humanize %}&lt;/code&gt; in a template, and you&amp;rsquo;ll have access to the following filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d67291f6612a5d695f1fadb4906ebe530b6f37e" translate="yes" xml:space="preserve">
          <source>To activate this behavior, put the email addresses of the recipients in the &lt;a href=&quot;../ref/settings#std:setting-ADMINS&quot;&gt;&lt;code&gt;ADMINS&lt;/code&gt;&lt;/a&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eac47912983503a01c205979236b2b0cf232792" translate="yes" xml:space="preserve">
          <source>To activate your virtual environment on Windows, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0ba2e35b6a39cd6b24a33102820b450efd23d9" translate="yes" xml:space="preserve">
          <source>To add a key only if it doesn&amp;rsquo;t already exist, use the &lt;code&gt;add()&lt;/code&gt; method. It takes the same parameters as &lt;code&gt;set()&lt;/code&gt;, but it will not attempt to update the cache if the key specified is already present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1adf82d3c070b10933759f23b53aef9423adf07" translate="yes" xml:space="preserve">
          <source>To add a message, call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d132833ab14e3503eb3a7f9996d733b7629ffa98" translate="yes" xml:space="preserve">
          <source>To add a profile model&amp;rsquo;s fields to the user page in the admin, define an &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.InlineModelAdmin&quot;&gt;&lt;code&gt;InlineModelAdmin&lt;/code&gt;&lt;/a&gt; (for this example, we&amp;rsquo;ll use a &lt;a href=&quot;../../ref/contrib/admin/index#django.contrib.admin.StackedInline&quot;&gt;&lt;code&gt;StackedInline&lt;/code&gt;&lt;/a&gt;) in your app&amp;rsquo;s &lt;code&gt;admin.py&lt;/code&gt; and add it to a &lt;code&gt;UserAdmin&lt;/code&gt; class which is registered with the &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d1c3aa867b273c057667ee0a0d3cce967b849a" translate="yes" xml:space="preserve">
          <source>To add migrations to an app that doesn&amp;rsquo;t have a &lt;code&gt;migrations&lt;/code&gt; directory, run &lt;code&gt;makemigrations&lt;/code&gt; with the app&amp;rsquo;s &lt;code&gt;app_label&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcedae5be9d6c799b7a653302220bc59687aea58" translate="yes" xml:space="preserve">
          <source>To add multiple records to a &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt; in one go, include multiple arguments in the call to &lt;a href=&quot;../../ref/models/relations#django.db.models.fields.related.RelatedManager.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2552e635996f4768c64438c5b77946a86e95b929" translate="yes" xml:space="preserve">
          <source>To address this problem, Django provides a &lt;code&gt;render_context&lt;/code&gt; that&amp;rsquo;s associated with the &lt;code&gt;context&lt;/code&gt; of the template that is currently being rendered. The &lt;code&gt;render_context&lt;/code&gt; behaves like a Python dictionary, and should be used to store &lt;code&gt;Node&lt;/code&gt; state between invocations of the &lt;code&gt;render&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5eddeb36d25df6b8e3eb9d3f8d3986b2664c79" translate="yes" xml:space="preserve">
          <source>To administer the database, you can either use the pgAdmin III program (Start ‣ PostgreSQL 9.x ‣ pgAdmin III) or the SQL Shell (Start ‣ PostgreSQL 9.x ‣ SQL Shell). For example, to create a &lt;code&gt;geodjango&lt;/code&gt; spatial database and user, the following may be executed from the SQL Shell as the &lt;code&gt;postgres&lt;/code&gt; user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2baea20d36466ca8ed7f665428406738fb5d3e" translate="yes" xml:space="preserve">
          <source>To allow easier reversing of the admin urls in templates, Django provides an &lt;code&gt;admin_urlname&lt;/code&gt; filter which takes an action as argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1150464cc2b910c095c3d2141260b4849b277b" translate="yes" xml:space="preserve">
          <source>To allow for fine control over the use of localization, Django provides the &lt;code&gt;l10n&lt;/code&gt; template library that contains the following tags and filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdca08f5ee2393b887a5fa3a94533daf5acb513" translate="yes" xml:space="preserve">
          <source>To apply &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides&quot;&gt;WSGI middleware&lt;/a&gt; you can wrap the application object. For instance you could add these lines at the bottom of &lt;code&gt;wsgi.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db671c5ae1334e478b85aa188005cd025d89d3ec" translate="yes" xml:space="preserve">
          <source>To apply ASGI middleware, or to embed Django in another ASGI application, you can wrap Django&amp;rsquo;s &lt;code&gt;application&lt;/code&gt; object in the &lt;code&gt;asgi.py&lt;/code&gt; file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6137e8a1815c49e801851b988828a41b4ba1e902" translate="yes" xml:space="preserve">
          <source>To apply permission checks to &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, you can use the &lt;code&gt;PermissionRequiredMixin&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca93d9ef1f4c1dce4ed3b11590d8be336743e66" translate="yes" xml:space="preserve">
          <source>To assign exceptions to a specific field, instantiate the &lt;a href=&quot;../exceptions#django.core.exceptions.ValidationError&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt; with a dictionary, where the keys are the field names. We could update the previous example to assign the error to the &lt;code&gt;pub_date&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede70629b0d09c8b97dbec8d253233713d89ab6b" translate="yes" xml:space="preserve">
          <source>To assign the members of a related set, use the &lt;code&gt;set()&lt;/code&gt; method with an iterable of object instances. For example, if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are &lt;code&gt;Entry&lt;/code&gt; instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e32117f21ca9c9f566ce0a628f67eca83212b0" translate="yes" xml:space="preserve">
          <source>To assist in the creation of your own test runner, Django provides a number of utility methods in the &lt;code&gt;django.test.utils&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25964993506f81e0c3deb951a65ca499da4331c9" translate="yes" xml:space="preserve">
          <source>To avoid a SQL injection vulnerability, &lt;code&gt;extra_context&lt;/code&gt;&lt;a href=&quot;#avoiding-sql-injection-in-query-expressions&quot;&gt;must not contain untrusted user input&lt;/a&gt; as these values are interpolated into the SQL string rather than passed as query parameters, where the database driver would escape them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deef07f520bbe6d7e76e4a244e5231fbea8ae466" translate="yes" xml:space="preserve">
          <source>To avoid conflicts with user-supplied scripts or libraries, Django&amp;rsquo;s jQuery (version 3.4.1) is namespaced as &lt;code&gt;django.jQuery&lt;/code&gt;. If you want to use jQuery in your own admin JavaScript without including a second copy, you can use the &lt;code&gt;django.jQuery&lt;/code&gt; object on changelist and add/edit views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21526195c11da8ea0082583952559fba50732bad" translate="yes" xml:space="preserve">
          <source>To avoid disclosing the referrer URL to third-party sites, you might want to &lt;a href=&quot;https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery&quot;&gt;disable the referer&lt;/a&gt; on your site&amp;rsquo;s &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags. For example, you might use the &lt;code&gt;&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt;&lt;/code&gt; tag or include the &lt;code&gt;Referrer-Policy: no-referrer&lt;/code&gt; header. Due to the CSRF protection&amp;rsquo;s strict referer checking on HTTPS requests, those techniques cause a CSRF failure on requests with &amp;lsquo;unsafe&amp;rsquo; methods. Instead, use alternatives like &lt;code&gt;&amp;lt;a rel=&quot;noreferrer&quot; ...&amp;gt;&quot;&lt;/code&gt; for links to third-party sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed663276d5c69eb52b887bedbd520624b501f474" translate="yes" xml:space="preserve">
          <source>To avoid performance problems, it is important to understand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f657a2849144fa597e4ceaceaf9420af02ff13" translate="yes" xml:space="preserve">
          <source>To avoid repetitions, add &lt;a href=&quot;../middleware#django.contrib.sites.middleware.CurrentSiteMiddleware&quot;&gt;&lt;code&gt;django.contrib.sites.middleware.CurrentSiteMiddleware&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;../settings#std:setting-MIDDLEWARE&quot;&gt;&lt;code&gt;MIDDLEWARE&lt;/code&gt;&lt;/a&gt;. The middleware sets the &lt;code&gt;site&lt;/code&gt; attribute on every request object, so you can use &lt;code&gt;request.site&lt;/code&gt; to get the current site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd3ee780b9486b70d2d099c5e8d39e9acbb69e8" translate="yes" xml:space="preserve">
          <source>To avoid that restriction, you can exclude null objects if you don&amp;rsquo;t care about them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35539f80128dc718e0ed6c414fd174f7abe52b5f" translate="yes" xml:space="preserve">
          <source>To avoid the messages being cleared, you can set the messages storage to &lt;code&gt;False&lt;/code&gt; after iterating:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd390d40100a634883249e1a7c438d394024d13b" translate="yes" xml:space="preserve">
          <source>To avoid this problem, save the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; and reuse it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79eb63821d6c645ec43a986a930bc4e15e92c8a6" translate="yes" xml:space="preserve">
          <source>To avoid this problem, use mod_wsgi&amp;rsquo;s daemon mode with each site in its own daemon process, or override the value from the environment by enforcing &lt;code&gt;os.environ[&quot;DJANGO_SETTINGS_MODULE&quot;] = &quot;mysite.settings&quot;&lt;/code&gt; in your &lt;code&gt;wsgi.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d3f84f6c46a0d59965c3cc3c840c98d1a1fcab" translate="yes" xml:space="preserve">
          <source>To avoid this problem, you have two options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c6594568387210ae8d6b46569033cede27267d" translate="yes" xml:space="preserve">
          <source>To avoid this, you can &lt;a href=&quot;#deactivate-transaction-management&quot;&gt;deactivate the transaction management&lt;/a&gt;, but it isn&amp;rsquo;t recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69910e5af02b8304bc0c28960e598e4f1be130ad" translate="yes" xml:space="preserve">
          <source>To avoid unauthorized data disclosure, users must have the &lt;code&gt;view&lt;/code&gt; or &lt;code&gt;change&lt;/code&gt; permission to the related object in order to use autocomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5cf27ae67639ab18ba99e89a9285c2c3a26e9f" translate="yes" xml:space="preserve">
          <source>To be a valid tag library, the module must contain a module-level variable named &lt;code&gt;register&lt;/code&gt; that is a &lt;code&gt;template.Library&lt;/code&gt; instance, in which all the tags and filters are registered. So, near the top of your module, put the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785d5727b95fdfb959f5ebc3a08cb5ea0683e2d5" translate="yes" xml:space="preserve">
          <source>To benefit from server-side cursors in transaction pooling mode, you could set up &lt;a href=&quot;../topics/db/multi-db&quot;&gt;another connection to the database&lt;/a&gt; in order to perform queries that use server-side cursors. This connection needs to either be directly to the database or to a connection pooler in session pooling mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a004f5cf56817eea5c1b103effb0af620f33d08" translate="yes" xml:space="preserve">
          <source>To bind data to a form, pass the data as a dictionary as the first parameter to your &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; class constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429a86afcf41677aac8249b40688515a18343413" translate="yes" xml:space="preserve">
          <source>To cache something is to save the result of an expensive calculation so that you don&amp;rsquo;t have to perform the calculation next time. Here&amp;rsquo;s some pseudocode explaining how this would work for a dynamically generated Web page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0318b973b1a7298760c18d099f44eced97d19880" translate="yes" xml:space="preserve">
          <source>To call a management command from code use &lt;code&gt;call_command&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f776c74baec5af745dc2ef5f9edaf14fb9a2834a" translate="yes" xml:space="preserve">
          <source>To capture a value from the URL, use angle brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadcc5c762a260ecd13e501b90df6f851eb64a7b" translate="yes" xml:space="preserve">
          <source>To change a user&amp;rsquo;s password, you have several options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a093dc358406f4c04b67ba7447d99e196308e7" translate="yes" xml:space="preserve">
          <source>To change that, add a &lt;code&gt;feed_type&lt;/code&gt; attribute to your &lt;a href=&quot;#django.contrib.syndication.views.Feed&quot;&gt;&lt;code&gt;Feed&lt;/code&gt;&lt;/a&gt; class, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84a40400028a77544ff31aeaaac96bf21eff112" translate="yes" xml:space="preserve">
          <source>To change the default tags for a message level (either built-in or custom), set the &lt;a href=&quot;../settings#std:setting-MESSAGE_TAGS&quot;&gt;&lt;code&gt;MESSAGE_TAGS&lt;/code&gt;&lt;/a&gt; setting to a dictionary containing the levels you wish to change. As this extends the default tags, you only need to provide tags for the levels you wish to override:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca9c2ac066d17c89d62f2f413f7eed7c0dbe789" translate="yes" xml:space="preserve">
          <source>To change this default behavior, set the &lt;a href=&quot;../../ref/settings#std:setting-SESSION_SAVE_EVERY_REQUEST&quot;&gt;&lt;code&gt;SESSION_SAVE_EVERY_REQUEST&lt;/code&gt;&lt;/a&gt; setting to &lt;code&gt;True&lt;/code&gt;. When set to &lt;code&gt;True&lt;/code&gt;, Django will save the session to the database on every single request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b536c24d851a8ce43c0db6fef691629f35c357e9" translate="yes" xml:space="preserve">
          <source>To check for non-field errors use &lt;a href=&quot;../exceptions#django.core.exceptions.NON_FIELD_ERRORS&quot;&gt;&lt;code&gt;NON_FIELD_ERRORS&lt;/code&gt;&lt;/a&gt; as the &lt;code&gt;field&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed324dd61ea2957b543e15988d4c86842f352085" translate="yes" xml:space="preserve">
          <source>To check how many errors there are in the formset, we can use the &lt;code&gt;total_error_count&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8565ffb053e73530357b489a58b45415e8a21c" translate="yes" xml:space="preserve">
          <source>To check whether or not you have Git installed, enter &lt;code&gt;git&lt;/code&gt; into the command line. If you get messages saying that this command could not be found, you&amp;rsquo;ll have to download and install it, see &lt;a href=&quot;https://git-scm.com/download&quot;&gt;Git&amp;rsquo;s download page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54dc4ca69efd7c42ba63f8476851e7063bd5024" translate="yes" xml:space="preserve">
          <source>To comment-out part of a line in a template, use the comment syntax: &lt;code&gt;{# #}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d89c468c192d1af5dda0b0dbee6d0fe44189004" translate="yes" xml:space="preserve">
          <source>To commit the changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e694ac3969cbbeddcae79474e26c9dc853dbbc" translate="yes" xml:space="preserve">
          <source>To compare two model instances, use the standard Python comparison operator, the double equals sign: &lt;code&gt;==&lt;/code&gt;. Behind the scenes, that compares the primary key values of two models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc386a2b6a3585d91017cdf0b7a1abbd1c6700c" translate="yes" xml:space="preserve">
          <source>To compensate for this (and any other analogous use cases), &lt;a href=&quot;#django.template.response.TemplateResponse&quot;&gt;&lt;code&gt;TemplateResponse&lt;/code&gt;&lt;/a&gt; allows you to register callbacks that will be invoked when rendering has completed. Using this callback, you can defer critical processing until a point where you can guarantee that rendered content will be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a541d5f4a108d5cd1be8ef3d420a0bc13d157984" translate="yes" xml:space="preserve">
          <source>To compensate for this, Django allows you to define that a database is a &lt;em&gt;test mirror&lt;/em&gt;. Consider the following (simplified) example database configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a04d398d239a6fb475bae25ecb9adf989111ee" translate="yes" xml:space="preserve">
          <source>To configure an application, subclass &lt;a href=&quot;#django.apps.AppConfig&quot;&gt;&lt;code&gt;AppConfig&lt;/code&gt;&lt;/a&gt; and put the dotted path to that subclass in &lt;a href=&quot;settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a8480c7d1ff2854070dec01b6b64346bdba89b" translate="yes" xml:space="preserve">
          <source>To connect a URL to this feed, put an instance of the Feed object in your &lt;a href=&quot;../../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e0547abad52ce675d4d4084c8b9fcfab4b5475" translate="yes" xml:space="preserve">
          <source>To connect using the service name of your Oracle database, your &lt;code&gt;settings.py&lt;/code&gt; file should look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fd022c4b2c18d0df746ed6acc7f87347ce222e" translate="yes" xml:space="preserve">
          <source>To continue the example above, we want to add a new link next to the &lt;code&gt;History&lt;/code&gt; tool for the &lt;code&gt;Page&lt;/code&gt; model. After looking at &lt;code&gt;change_form.html&lt;/code&gt; we determine that we only need to override the &lt;code&gt;object-tools-items&lt;/code&gt; block. Therefore here is our new &lt;code&gt;change_form.html&lt;/code&gt; :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c667846549e33faa9aa28fbb6b3bee12dbdccd" translate="yes" xml:space="preserve">
          <source>To control auto-escaping for a template, wrap the template (or a particular section of the template) in the &lt;a href=&quot;builtins#std:templatetag-autoescape&quot;&gt;&lt;code&gt;autoescape&lt;/code&gt;&lt;/a&gt; tag, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19303d4df35892252644e5a55e3516b07f30e99b" translate="yes" xml:space="preserve">
          <source>To control this ordering, you can define dependencies on your &lt;code&gt;natural_key()&lt;/code&gt; methods. You do this by setting a &lt;code&gt;dependencies&lt;/code&gt; attribute on the &lt;code&gt;natural_key()&lt;/code&gt; method itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fecb3285f7e068f5903a97ae700785a6498b19" translate="yes" xml:space="preserve">
          <source>To create a URLconf in the polls directory, create a file called &lt;code&gt;urls.py&lt;/code&gt;. Your app directory should now look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52032016d138fa5c63e561b7d618f57a08b4aef9" translate="yes" xml:space="preserve">
          <source>To create a new instance of a model, instantiate it like any other Python class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2fed90d38f8b6163a3de559cfaa98152decfb8" translate="yes" xml:space="preserve">
          <source>To create a new virtual file-based raster from scratch, use the &lt;code&gt;ds_input&lt;/code&gt; dictionary representation and provide a &lt;code&gt;name&lt;/code&gt; argument that starts with &lt;code&gt;/vsimem/&lt;/code&gt; (for detail of the dictionary representation, see &lt;a href=&quot;#gdal-raster-ds-input&quot;&gt;Creating rasters from data&lt;/a&gt;). For virtual file-based rasters, the &lt;a href=&quot;#django.contrib.gis.gdal.GDALRaster.vsi_buffer&quot;&gt;&lt;code&gt;vsi_buffer&lt;/code&gt;&lt;/a&gt; attribute returns the &lt;code&gt;bytes&lt;/code&gt; representation of the raster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947996a21e1bfb97fe8b2846f3e9c220c0789622" translate="yes" xml:space="preserve">
          <source>To create a recursive relationship &amp;ndash; an object that has a many-to-one relationship with itself &amp;ndash; use &lt;code&gt;models.ForeignKey('self',
on_delete=models.CASCADE)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d536380a30619d485864568c1f8784082ab2a55" translate="yes" xml:space="preserve">
          <source>To create an object, instantiate it using keyword arguments to the model class, then call &lt;a href=&quot;../../ref/models/instances#django.db.models.Model.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; to save it to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f37d4e353b8abdede99c388ab6d26e3fc2dd7aa" translate="yes" xml:space="preserve">
          <source>To create an unbound &lt;a href=&quot;#django.forms.Form&quot;&gt;&lt;code&gt;Form&lt;/code&gt;&lt;/a&gt; instance, instantiate the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011a549a98496d577af0921044a3ee56323fc5dd" translate="yes" xml:space="preserve">
          <source>To create and save an object in a single step, use the &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d927819d2ede0031d07a12c92088af78ad090d5c" translate="yes" xml:space="preserve">
          <source>To create any syndication feed, all you have to do is write a short Python class. You can create as many feeds as you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1a1a09d943aa71ba713c6b5f7cef69ed90d42f" translate="yes" xml:space="preserve">
          <source>To create custom permissions for a given model object, use the &lt;code&gt;permissions&lt;/code&gt;&lt;a href=&quot;../db/models#meta-options&quot;&gt;model Meta attribute&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da9cd3e68b092c84a139da9eff43b9b8001aefa" translate="yes" xml:space="preserve">
          <source>To create message files, you use the &lt;a href=&quot;../../ref/django-admin#django-admin-makemessages&quot;&gt;&lt;code&gt;django-admin makemessages&lt;/code&gt;&lt;/a&gt; tool. And you use &lt;a href=&quot;../../ref/django-admin#django-admin-compilemessages&quot;&gt;&lt;code&gt;django-admin compilemessages&lt;/code&gt;&lt;/a&gt; to produce the binary &lt;code&gt;.mo&lt;/code&gt; files that are used by &lt;code&gt;gettext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d242efe6704a40ee42801f2267c7404e62949c2b" translate="yes" xml:space="preserve">
          <source>To create or update a message file, run this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1c6063183fbb21b7aa5b9fe85bb6661b01cdeb" translate="yes" xml:space="preserve">
          <source>To create such a subset, you refine the initial &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt;, adding filter conditions. The two most common ways to refine a &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet&quot;&gt;&lt;code&gt;QuerySet&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e4afbeac88a57c96d1f86eeace20ee8af9e0f4" translate="yes" xml:space="preserve">
          <source>To create your app, make sure you&amp;rsquo;re in the same directory as &lt;code&gt;manage.py&lt;/code&gt; and type this command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8328088af4281d32c6ca199848c57e8e96e37b" translate="yes" xml:space="preserve">
          <source>To customize how the values are serialized by a serializer, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_to_string&quot;&gt;&lt;code&gt;value_to_string()&lt;/code&gt;&lt;/a&gt;. Using &lt;a href=&quot;../ref/models/fields#django.db.models.Field.value_from_object&quot;&gt;&lt;code&gt;value_from_object()&lt;/code&gt;&lt;/a&gt; is the best way to get the field&amp;rsquo;s value prior to serialization. For example, since &lt;code&gt;HandField&lt;/code&gt; uses strings for its data storage anyway, we can reuse some existing conversion code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc4085932a3f7de1f64dadac93ace75bc8e5407" translate="yes" xml:space="preserve">
          <source>To customize the English formats, a structure like this would be needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d19f1050a4bae39ae41e6a3e9e309031cfbcc9" translate="yes" xml:space="preserve">
          <source>To customize the form field used by &lt;a href=&quot;../topics/forms/modelforms#django.forms.ModelForm&quot;&gt;&lt;code&gt;ModelForm&lt;/code&gt;&lt;/a&gt;, you can override &lt;a href=&quot;../ref/models/fields#django.db.models.Field.formfield&quot;&gt;&lt;code&gt;formfield()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f068c92fba4d0414222aa4b49897fe619150a22" translate="yes" xml:space="preserve">
          <source>To decorate every instance of a class-based view, you need to decorate the class definition itself. To do this you apply the decorator to the &lt;a href=&quot;../../ref/class-based-views/base#django.views.generic.base.View.dispatch&quot;&gt;&lt;code&gt;dispatch()&lt;/code&gt;&lt;/a&gt; method of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2872b31e30f49d7c1aebba06c6e02ba44a3f3f4b" translate="yes" xml:space="preserve">
          <source>To define a many-to-many relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae82fa5bc30d478dd98a696efee612329c4e5c9" translate="yes" xml:space="preserve">
          <source>To define a many-to-many relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.ManyToManyField&quot;&gt;&lt;code&gt;ManyToManyField&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; type: by including it as a class attribute of your model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dade9858b932f3e6c95fe8e48bda2515ecc92498" translate="yes" xml:space="preserve">
          <source>To define a many-to-one relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;ForeignKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e171564fc237a08520e6641e6c437ba62eff8a00" translate="yes" xml:space="preserve">
          <source>To define a many-to-one relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.ForeignKey&quot;&gt;&lt;code&gt;django.db.models.ForeignKey&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;a href=&quot;../../ref/models/fields#django.db.models.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; type: by including it as a class attribute of your model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48bf0b88fc5bfae3aa1d666c006cbc4d487392d" translate="yes" xml:space="preserve">
          <source>To define a one-to-one relationship, use &lt;a href=&quot;../../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b44d37881b3018c0cddf1c7f3dc59ee532f02aa" translate="yes" xml:space="preserve">
          <source>To define a one-to-one relationship, use &lt;a href=&quot;../../ref/models/fields#django.db.models.OneToOneField&quot;&gt;&lt;code&gt;OneToOneField&lt;/code&gt;&lt;/a&gt;. You use it just like any other &lt;code&gt;Field&lt;/code&gt; type: by including it as a class attribute of your model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2ec21b4b086f15cd50c0cffe7c681feee59164" translate="yes" xml:space="preserve">
          <source>To define a post-render callback, define a function that takes a single argument &amp;ndash; response &amp;ndash; and register that function with the template response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419a082f83c3934d23472274f2879d2482c1c5e5" translate="yes" xml:space="preserve">
          <source>To delete an existing &amp;ldquo;no data&amp;rdquo; value, set this property to &lt;code&gt;None&lt;/code&gt; (requires GDAL &amp;ge; 2.1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2893f6545ffed4072381f77e2f2e3fc1fa589413" translate="yes" xml:space="preserve">
          <source>To demonstrate how to use &lt;code&gt;LiveServerTestCase&lt;/code&gt;, let&amp;rsquo;s write a Selenium test. First of all, you need to install the &lt;a href=&quot;https://pypi.org/project/selenium/&quot;&gt;selenium package&lt;/a&gt; into your Python path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fc7be82871502e873a7f0730b6714ede84778a" translate="yes" xml:space="preserve">
          <source>To design URLs for an app, you create a Python module called a &lt;a href=&quot;../topics/http/urls&quot;&gt;URLconf&lt;/a&gt;. A table of contents for your app, it contains a mapping between URL patterns and Python callback functions. URLconfs also serve to decouple URLs from Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5820afde058839863556a37886cf7f3c35f8cc28" translate="yes" xml:space="preserve">
          <source>To design URLs for an app, you create a Python module informally called a &lt;strong&gt;URLconf&lt;/strong&gt; (URL configuration). This module is pure Python code and is a mapping between URL path expressions to Python functions (your views).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395d77799ab1f70a75973e3f87b8212fa88dd0af" translate="yes" xml:space="preserve">
          <source>To determine what the attribute abbreviation of a unit is, the &lt;code&gt;unit_attname&lt;/code&gt; class method may be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca464b4650bfb17c18a6beb0e7cefbe943fcdb23" translate="yes" xml:space="preserve">
          <source>To disable auto-escaping for an individual variable, use the &lt;a href=&quot;builtins#std:templatefilter-safe&quot;&gt;&lt;code&gt;safe&lt;/code&gt;&lt;/a&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046b5d60aa5f70e8ed5828ef075baccf5a159313" translate="yes" xml:space="preserve">
          <source>To disable localization on a single value, use &lt;a href=&quot;#std:templatefilter-unlocalize&quot;&gt;&lt;code&gt;unlocalize&lt;/code&gt;&lt;/a&gt;. To control localization over a large section of a template, use the &lt;a href=&quot;#std:templatetag-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9c966b3fd128e2b84fd1806ec516ce23f26380" translate="yes" xml:space="preserve">
          <source>To disconnect a receiver from a signal, call &lt;a href=&quot;#django.dispatch.Signal.disconnect&quot;&gt;&lt;code&gt;Signal.disconnect()&lt;/code&gt;&lt;/a&gt;. The arguments are as described in &lt;a href=&quot;#django.dispatch.Signal.connect&quot;&gt;&lt;code&gt;Signal.connect()&lt;/code&gt;&lt;/a&gt;. The method returns &lt;code&gt;True&lt;/code&gt; if a receiver was disconnected and &lt;code&gt;False&lt;/code&gt; if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bc266a698569cdba4a9c96c03b4694681bb4d7" translate="yes" xml:space="preserve">
          <source>To display multiple fields on the same line, wrap those fields in their own tuple. In this example, the &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; fields will display on the same line and the &lt;code&gt;content&lt;/code&gt; field will be displayed below them on its own line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a435bc9376c8bf6f39ba05b4f455f762c6c666f" translate="yes" xml:space="preserve">
          <source>To do so, create a &lt;code&gt;models&lt;/code&gt; package. Remove &lt;code&gt;models.py&lt;/code&gt; and create a &lt;code&gt;myapp/models/&lt;/code&gt; directory with an &lt;code&gt;__init__.py&lt;/code&gt; file and the files to store your models. You must import the models in the &lt;code&gt;__init__.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e48cc8577b8117545cd5c1fac6935289ee1218d" translate="yes" xml:space="preserve">
          <source>To do that, you&amp;rsquo;ll need to refactor both the compilation function and &lt;code&gt;Node&lt;/code&gt; class, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015c8ac3158ffb2425d248d83d1fa3cccda2d074" translate="yes" xml:space="preserve">
          <source>To do this in Django, use the convenient &lt;a href=&quot;http/decorators#django.views.decorators.vary.vary_on_headers&quot;&gt;&lt;code&gt;django.views.decorators.vary.vary_on_headers()&lt;/code&gt;&lt;/a&gt; view decorator, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04028e3d3aa9fd64a2c43588657162b6d43a651" translate="yes" xml:space="preserve">
          <source>To do this, add a &lt;code&gt;management/commands&lt;/code&gt; directory to the application. Django will register a &lt;code&gt;manage.py&lt;/code&gt; command for each Python module in that directory whose name doesn&amp;rsquo;t begin with an underscore. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a187773251757133e301e685a94e4f69696e81b6" translate="yes" xml:space="preserve">
          <source>To ease the creation of these types of tags, Django provides a helper function, &lt;code&gt;simple_tag&lt;/code&gt;. This function, which is a method of &lt;code&gt;django.template.Library&lt;/code&gt;, takes a function that accepts any number of arguments, wraps it in a &lt;code&gt;render&lt;/code&gt; function and the other necessary bits mentioned above and registers it with the template system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6a7de2825b659272a5cbcb6d21e49cb8b5e414" translate="yes" xml:space="preserve">
          <source>To ease the handling of access restrictions in &lt;a href=&quot;../../ref/class-based-views/index&quot;&gt;class-based views&lt;/a&gt;, the &lt;code&gt;AccessMixin&lt;/code&gt; can be used to configure the behavior of a view when access is denied. Authenticated users are denied access with an HTTP 403 Forbidden response. Anonymous users are redirected to the login page or shown an HTTP 403 Forbidden response, depending on the &lt;a href=&quot;#django.contrib.auth.mixins.AccessMixin.raise_exception&quot;&gt;&lt;code&gt;raise_exception&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9f026f26119269d8793340cae8e1a3dc596dd5" translate="yes" xml:space="preserve">
          <source>To eliminate such problems, you should minimize dependencies between your models modules and do as little work as possible at import time. To avoid executing code at import time, you can move it into a function and cache its results. The code will be executed when you first need its results. This concept is known as &amp;ldquo;lazy evaluation&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9223ce5a5e8465c9afcc137f1a0d98bbc11a37" translate="yes" xml:space="preserve">
          <source>To enable a form field to localize input and output data use its &lt;code&gt;localize&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2580b71d82ab6c3d1a268bf6d1b068477bda284" translate="yes" xml:space="preserve">
          <source>To enable session functionality, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24acc81e69f67d37eaf20c17bbc2d6eb343f6d70" translate="yes" xml:space="preserve">
          <source>To enable the &lt;code&gt;ManifestStaticFilesStorage&lt;/code&gt; you have to make sure the following requirements are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee245dc4b8eff9e75781fd3caa996d167954156" translate="yes" xml:space="preserve">
          <source>To enable the XSS filter in the browser, and force it to always block suspected XSS attacks, you can pass the &lt;code&gt;X-XSS-Protection: 1; mode=block&lt;/code&gt; header. &lt;code&gt;SecurityMiddleware&lt;/code&gt; will do this for all responses if the &lt;a href=&quot;settings#std:setting-SECURE_BROWSER_XSS_FILTER&quot;&gt;&lt;code&gt;SECURE_BROWSER_XSS_FILTER&lt;/code&gt;&lt;/a&gt; setting is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a24be87a3300c9d5a44816fd4ed884418dfd67" translate="yes" xml:space="preserve">
          <source>To enable the sites framework, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b7b991b3ab59c9058ab1826112b2857c954159" translate="yes" xml:space="preserve">
          <source>To ensure a deterministic ordering of results, the changelist adds &lt;code&gt;pk&lt;/code&gt; to the ordering if it can&amp;rsquo;t find a single or unique together set of fields that provide total ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9688dde6d0e39a1957ea5c07629e81673447e9" translate="yes" xml:space="preserve">
          <source>To facilitate querying on those attributes, &lt;a href=&quot;#django.db.models.ImageField&quot;&gt;&lt;code&gt;ImageField&lt;/code&gt;&lt;/a&gt; has two extra optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5095bad9bc9f9a6e8ce181738596ad35ba48fa" translate="yes" xml:space="preserve">
          <source>To find all the entries where the rating of the entry is less than the sum of the pingback count and comment count, we would issue the query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a0f2db08cbc73dca6e330068a6499d6259d0d2" translate="yes" xml:space="preserve">
          <source>To find the appropriate prefix to use, Django will check if the &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; setting is not &lt;code&gt;None&lt;/code&gt; and automatically fall back to using &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt;. For example, if the &lt;a href=&quot;../../ref/settings#std:setting-MEDIA_URL&quot;&gt;&lt;code&gt;MEDIA_URL&lt;/code&gt;&lt;/a&gt; for your site was &lt;code&gt;'http://uploads.example.com/'&lt;/code&gt; and &lt;a href=&quot;../../ref/settings#std:setting-STATIC_URL&quot;&gt;&lt;code&gt;STATIC_URL&lt;/code&gt;&lt;/a&gt; was &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c38eb062fd8cdcf8ffbcb6f36bc1a2f4b32163" translate="yes" xml:space="preserve">
          <source>To force localization of a single value, use &lt;a href=&quot;#std:templatefilter-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt;. To control localization over a large section of a template, use the &lt;a href=&quot;#std:templatetag-localize&quot;&gt;&lt;code&gt;localize&lt;/code&gt;&lt;/a&gt; template tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372ec61cc37938b6a73f5b716adef2310993231f" translate="yes" xml:space="preserve">
          <source>To generate the feed&amp;rsquo;s &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;description&amp;gt;&lt;/code&gt;, Django uses the &lt;code&gt;title()&lt;/code&gt;, &lt;code&gt;link()&lt;/code&gt; and &lt;code&gt;description()&lt;/code&gt; methods. In the previous example, they were string class attributes, but this example illustrates that they can be either strings &lt;em&gt;or&lt;/em&gt; methods. For each of &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt;, Django follows this algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872a3aed1348f076a9e2b388f660f42de1a04c63" translate="yes" xml:space="preserve">
          <source>To get from a URL to a view, Django uses what are known as &amp;lsquo;URLconfs&amp;rsquo;. A URLconf maps URL patterns to views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86140a0a92495975d1e553a3a6429d74095ba6fb" translate="yes" xml:space="preserve">
          <source>To get the object, &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.detail.DetailView&quot;&gt;&lt;code&gt;DetailView&lt;/code&gt;&lt;/a&gt; relies on &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, which provides a &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.get_object&quot;&gt;&lt;code&gt;get_object()&lt;/code&gt;&lt;/a&gt; method that figures out the object based on the URL of the request (it looks for &lt;code&gt;pk&lt;/code&gt; and &lt;code&gt;slug&lt;/code&gt; keyword arguments as declared in the URLConf, and looks the object up either from the &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute on the view, or the &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; attribute if that&amp;rsquo;s provided). &lt;code&gt;SingleObjectMixin&lt;/code&gt; also overrides &lt;a href=&quot;../../ref/class-based-views/mixins-simple#django.views.generic.base.ContextMixin.get_context_data&quot;&gt;&lt;code&gt;get_context_data()&lt;/code&gt;&lt;/a&gt;, which is used across all Django&amp;rsquo;s built in class-based views to supply context data for template renders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="110872093324534d541a3a658d598758a61d8309" translate="yes" xml:space="preserve">
          <source>To get the objects, &lt;a href=&quot;../../ref/class-based-views/generic-display#django.views.generic.list.ListView&quot;&gt;&lt;code&gt;ListView&lt;/code&gt;&lt;/a&gt; uses &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin&quot;&gt;&lt;code&gt;MultipleObjectMixin&lt;/code&gt;&lt;/a&gt;, which provides both &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.paginate_queryset&quot;&gt;&lt;code&gt;paginate_queryset()&lt;/code&gt;&lt;/a&gt;. Unlike with &lt;a href=&quot;../../ref/class-based-views/mixins-single-object#django.views.generic.detail.SingleObjectMixin&quot;&gt;&lt;code&gt;SingleObjectMixin&lt;/code&gt;&lt;/a&gt;, there&amp;rsquo;s no need to key off parts of the URL to figure out the queryset to work with, so the default uses the &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.queryset&quot;&gt;&lt;code&gt;queryset&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.model&quot;&gt;&lt;code&gt;model&lt;/code&gt;&lt;/a&gt; attribute on the view class. A common reason to override &lt;a href=&quot;../../ref/class-based-views/mixins-multiple-object#django.views.generic.list.MultipleObjectMixin.get_queryset&quot;&gt;&lt;code&gt;get_queryset()&lt;/code&gt;&lt;/a&gt; here would be to dynamically vary the objects, such as depending on the current user or to exclude posts in the future for a blog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6e61c08a5f4c115d3ee7207be498ed2c270080" translate="yes" xml:space="preserve">
          <source>To guess the served files&amp;rsquo; content types, this view relies on the &lt;a href=&quot;https://docs.python.org/3/library/mimetypes.html#module-mimetypes&quot;&gt;&lt;code&gt;mimetypes&lt;/code&gt;&lt;/a&gt; module from the Python standard library, which itself relies on the underlying platform&amp;rsquo;s map files. If you find that this view doesn&amp;rsquo;t return proper content types for certain files, it is most likely that the platform&amp;rsquo;s map files need to be updated. This can be achieved, for example, by installing or updating the &lt;code&gt;mailcap&lt;/code&gt; package on a Red Hat distribution, or &lt;code&gt;mime-support&lt;/code&gt; on a Debian distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a45414c7fbc9fbd62d16343d19eb31c88222b6" translate="yes" xml:space="preserve">
          <source>To handle both of these situations, Django has a consistent way of processing &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; calls. Everything inside a single &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; call is applied simultaneously to filter out items matching all those requirements. Successive &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; calls further restrict the set of objects, but for multi-valued relations, they apply to any object linked to the primary model, not necessarily those objects that were selected by an earlier &lt;a href=&quot;../../ref/models/querysets#django.db.models.query.QuerySet.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a50b60cf7e9c06cd01fd15f7d5f1a7c22a6484" translate="yes" xml:space="preserve">
          <source>To handle the form we need to instantiate it in the view for the URL where we want it to be published:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07197c993ac2c801dd32ae7167b30740099f2fa" translate="yes" xml:space="preserve">
          <source>To have the GeoDjango tests executed when &lt;a href=&quot;https://docs.djangoproject.com/en/3.0/internals/contributing/writing-code/unit-tests/#running-unit-tests&quot;&gt;running the Django test suite&lt;/a&gt; with &lt;code&gt;runtests.py&lt;/code&gt; all of the databases in the settings file must be using one of the &lt;a href=&quot;db-api#spatial-backends&quot;&gt;spatial database backends&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55390837943cafcfbe39845904315f094b3b86d8" translate="yes" xml:space="preserve">
          <source>To help with this situation, Django provides some model field attributes to assist with model field deprecation using the &lt;a href=&quot;checks&quot;&gt;system checks framework&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa868cd3d9b3aec964e605bfa411c7585ee4712" translate="yes" xml:space="preserve">
          <source>To help with this, calls to &lt;a href=&quot;../ref/django-admin#django-admin-dumpdata&quot;&gt;&lt;code&gt;dumpdata&lt;/code&gt;&lt;/a&gt; that use the &lt;a href=&quot;../ref/django-admin#cmdoption-dumpdata-natural-foreign&quot;&gt;&lt;code&gt;dumpdata
--natural-foreign&lt;/code&gt;&lt;/a&gt; option will serialize any model with a &lt;code&gt;natural_key()&lt;/code&gt; method before serializing standard primary key objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c1c8c687f013c30776cc23ab29b3ba04a1203c" translate="yes" xml:space="preserve">
          <source>To help write more concise code, there is also a context manager &lt;a href=&quot;../../ref/utils#django.utils.translation.override&quot;&gt;&lt;code&gt;django.utils.translation.override()&lt;/code&gt;&lt;/a&gt; that stores the current language on enter and restores it on exit. With it, the above example becomes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8862dcecbd294a7aedd9362eb05c7ec71bdf24fe" translate="yes" xml:space="preserve">
          <source>To help you understand and control the queries issued by your code, Django provides a hook for installing wrapper functions around the execution of database queries. For example, wrappers can count queries, measure query duration, log queries, or even prevent query execution (e.g. to make sure that no queries are issued while rendering a template with prefetched data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439cde933226bf50c44217055a74b3a42403c75b" translate="yes" xml:space="preserve">
          <source>To implement the command, edit &lt;code&gt;polls/management/commands/closepoll.py&lt;/code&gt; to look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b916e76253e21ca54c9217491770b582d7eaa17e" translate="yes" xml:space="preserve">
          <source>To import the data, use a LayerMapping in a Python script. Create a file called &lt;code&gt;load.py&lt;/code&gt; inside the &lt;code&gt;world&lt;/code&gt; application, with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60af92dc8f5b0e94deb17cc7423549ad82564edb" translate="yes" xml:space="preserve">
          <source>To include the app in our project, we need to add a reference to its configuration class in the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. The &lt;code&gt;PollsConfig&lt;/code&gt; class is in the &lt;code&gt;polls/apps.py&lt;/code&gt; file, so its dotted path is &lt;code&gt;'polls.apps.PollsConfig'&lt;/code&gt;. Edit the &lt;code&gt;mysite/settings.py&lt;/code&gt; file and add that dotted path to the &lt;a href=&quot;../ref/settings#std:setting-INSTALLED_APPS&quot;&gt;&lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/a&gt; setting. It&amp;rsquo;ll look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5494acf61c3edda5ad74419617e588766d61374" translate="yes" xml:space="preserve">
          <source>To indicate descending order with &lt;code&gt;admin_order_field&lt;/code&gt; you can use a hyphen prefix on the field name. Using the above example, this would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663fc8b167ace03927221027ebbbe5c69337151b" translate="yes" xml:space="preserve">
          <source>To initialize a distance object, pass in a keyword corresponding to the desired &lt;a href=&quot;#supported-units&quot;&gt;unit attribute name&lt;/a&gt; set with desired value. For example, the following creates a distance object representing 5 miles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcb316c243b4e4753af7d20538a04ad894f0869" translate="yes" xml:space="preserve">
          <source>To initialize an area object, pass in a keyword corresponding to the desired &lt;a href=&quot;#supported-units&quot;&gt;unit attribute name&lt;/a&gt; set with desired value. For example, the following creates an area object representing 5 square miles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca2cb3ce403dcc26a97ec2c914946f623320052" translate="yes" xml:space="preserve">
          <source>To install Python on your machine go to &lt;a href=&quot;https://python.org/downloads/&quot;&gt;https://python.org/downloads/&lt;/a&gt;. The website should offer you a download button for the latest Python version. Download the executable installer and run it. Check the boxes next to &lt;code&gt;Install
launcher for all users (recommended)&lt;/code&gt; and &lt;code&gt;Add Python 3.7 to PATH&lt;/code&gt; then click &lt;code&gt;Install Now&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f78f1937ca4d2db43bc6a4c072e4d3503b60541" translate="yes" xml:space="preserve">
          <source>To install from sources, download the latest amalgamation source archive from the &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;SQLite download page&lt;/a&gt;, and extract:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d27e0a865a21c49b4155446e931204fc4c27fa" translate="yes" xml:space="preserve">
          <source>To install pip on your machine, go to &lt;a href=&quot;https://pip.pypa.io/en/latest/installing/&quot;&gt;https://pip.pypa.io/en/latest/installing/&lt;/a&gt;, and follow the &lt;code&gt;Installing with
get-pip.py&lt;/code&gt; instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c97bb0cf49256da6a2dc6dff3a92e347017f10" translate="yes" xml:space="preserve">
          <source>To install the SpatiaLite library and tools, macOS users can choose between &lt;a href=&quot;index#kyngchaos&quot;&gt;KyngChaos packages&lt;/a&gt; and &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332f5d6a4f2adec8bc6af8f01d7b8894c9c763fe" translate="yes" xml:space="preserve">
          <source>To install the flatpages app, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de2dd2276bcb92b9289d896631bf5dd2523d0ed" translate="yes" xml:space="preserve">
          <source>To install the package, use pip (you already &lt;a href=&quot;#installing-reusable-apps-prerequisites&quot;&gt;installed it&lt;/a&gt;, right?):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c0a9c4801033c8f72097f1838b668c116f5be0" translate="yes" xml:space="preserve">
          <source>To install the redirects app, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fbe61602ac6a7e6bba367f20ba27fae2db0d6c" translate="yes" xml:space="preserve">
          <source>To install the sitemap app, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824b4c34fb9ac5138e832a58b3411e367bf75c08" translate="yes" xml:space="preserve">
          <source>To learn how to override templates in other Django applications, see &lt;a href=&quot;../../howto/overriding-templates&quot;&gt;Overriding templates&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baeb731f5a4fdce35c27f8560acee99c588e78a6" translate="yes" xml:space="preserve">
          <source>To learn more about the &lt;code&gt;UploadedFile&lt;/code&gt; object, see the &lt;a href=&quot;../../topics/http/file-uploads&quot;&gt;file uploads documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e12b8b61f18e17444f9429502061a5c915de384" translate="yes" xml:space="preserve">
          <source>To limit access based on certain permissions or some other test, you&amp;rsquo;d do essentially the same thing as described in the previous section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6642d8e8226a78aceffb3cc4d0d84a3b0028db2" translate="yes" xml:space="preserve">
          <source>To link to static files that are saved in &lt;a href=&quot;../settings#std:setting-STATIC_ROOT&quot;&gt;&lt;code&gt;STATIC_ROOT&lt;/code&gt;&lt;/a&gt; Django ships with a &lt;a href=&quot;#std:templatetag-static&quot;&gt;&lt;code&gt;static&lt;/code&gt;&lt;/a&gt; template tag. If the &lt;a href=&quot;../contrib/staticfiles#module-django.contrib.staticfiles&quot;&gt;&lt;code&gt;django.contrib.staticfiles&lt;/code&gt;&lt;/a&gt; app is installed, the tag will serve files using &lt;code&gt;url()&lt;/code&gt; method of the storage specified by &lt;a href=&quot;../settings#std:setting-STATICFILES_STORAGE&quot;&gt;&lt;code&gt;STATICFILES_STORAGE&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0aa289d09bd2328bab59548d716cb199de13b92" translate="yes" xml:space="preserve">
          <source>To load a template that&amp;rsquo;s within a subdirectory, use a slash, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf8929d8524b86ef2921f048bfcd6cfe4db0c77" translate="yes" xml:space="preserve">
          <source>To log a user in, from a view, use &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt;. It takes an &lt;a href=&quot;../../ref/request-response#django.http.HttpRequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; object and a &lt;a href=&quot;../../ref/contrib/auth#django.contrib.auth.models.User&quot;&gt;&lt;code&gt;User&lt;/code&gt;&lt;/a&gt; object. &lt;a href=&quot;#django.contrib.auth.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; saves the user&amp;rsquo;s ID in the session, using Django&amp;rsquo;s session framework.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
