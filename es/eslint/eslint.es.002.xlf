<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="44be526c0bf07640ca73389d24943d2ba6402b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(descriptor)&lt;/code&gt; - reports a problem in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f576f0105a26406714f7c21c3d009aa937c466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;report(node, [location], message)&lt;/code&gt; - reports a problem in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e70a123d190ad73ab6a4108ddc3ce1435f12922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; - (optional) when set to &lt;code&gt;true&lt;/code&gt;, adds reported errors for unused &lt;code&gt;eslint-disable&lt;/code&gt; directives when no problems would be reported in the disabled area anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44662217adc4a07fba54d6d07d774d1c9511d2d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; - When set to &lt;code&gt;true&lt;/code&gt;, adds reported errors for unused &lt;code&gt;eslint-disable&lt;/code&gt; directives when no problems would be reported in the disabled area anyway (default: false). Corresponds to &lt;code&gt;--report-unused-disable-directives&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342e993def331cf204c8eb81611d758fe135c958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resolvePluginsRelativeTo&lt;/code&gt; - Determines the folder where plugins should be resolved from. Should be used when an integration installs plugins and uses those plugins to lint code on behalf of the end user. Corresponds to &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08895232fda29a1d46906fbd76c41944a98b08b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restParams&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-rest-parameters&quot;&gt;rest parameters&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8f5ae89641eff23950db05e8f16628d1f4b207" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;returnedSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The final segments which includes only returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7677439df7966be65f67970f0b081d5c60e994b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruleId&lt;/code&gt; - The name of the rule (e.g. &lt;code&gt;indent-legacy&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f201397e61a1941d94949ce05e396f2eb6be892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ruleId&lt;/code&gt; - the ID of the rule that triggered the messages (or null if &lt;code&gt;fatal&lt;/code&gt; is true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448d5336b959502dad8f9091921de730cd52d6f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rulePaths&lt;/code&gt; - An array of directories to load custom rules from (default: empty array). Corresponds to &lt;code&gt;--rulesdir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9e950b17b2f15687b78111419b093702a5f998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - An object of rules to use (default: null). Corresponds to &lt;code&gt;--rule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb218e59d198a007db588129fdf4617116d0b205" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - all source files defining rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033313294f0c24b5ba6cf94b3a35e48deb70bc28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rules&lt;/code&gt; - tests for the rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5244945f7f5609561b8d12a8e5d9113232f9758b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;schema&lt;/code&gt; (array) specifies the &lt;a href=&quot;#options-schemas&quot;&gt;options&lt;/a&gt; so ESLint can prevent invalid &lt;a href=&quot;../user-guide/configuring#configuring-rules&quot;&gt;rule configurations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a4737446920852b8f131e6d7ae69b4a97c6ce9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scopeManager&lt;/code&gt; - the &lt;a href=&quot;scope-manager-interface#scopemanager-interface&quot;&gt;ScopeManager&lt;/a&gt; object of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d54fadc18a6887da37fa8545a87192989177d0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scopeManager&lt;/code&gt; can be a &lt;a href=&quot;scope-manager-interface&quot;&gt;ScopeManager&lt;/a&gt; object. Custom parsers can use customized scope analysis for experimental/enhancement syntaxes. Default is the &lt;code&gt;ScopeManager&lt;/code&gt; object which is created by &lt;a href=&quot;https://github.com/eslint/eslint-scope&quot;&gt;eslint-scope&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8e07cc12ee3b5466a33cc3a5a2d3366bec5503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;services&lt;/code&gt; can contain any parser-dependent services (such as type checkers for nodes). The value of the &lt;code&gt;services&lt;/code&gt; property is available to rules as &lt;code&gt;context.parserServices&lt;/code&gt;. Default is an empty object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd02fb5dc08b8103fec9545d2aaeae2326a714d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serviceworker&lt;/code&gt; - Service Worker global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61808bb3f6746f75d108f844f3b4f545613c1d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setWithoutGet&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; will warn for setters without getters (Default &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1098db1b64e3f105b8662a96224e640d047b839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;settings&lt;/code&gt; - the &lt;a href=&quot;../user-guide/configuring#adding-shared-settings&quot;&gt;shared settings&lt;/a&gt; from configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b464593816361428618f91b97e7892b603ac13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;settings&lt;/code&gt; - the &lt;code&gt;settings&lt;/code&gt; from configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1505c7011f867593ec6ba31405c1d9d6786878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;severity&lt;/code&gt; - either 1 or 2, depending on your configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2e074f2291e32a851386f6943c35c62691d3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shared-node-browser&lt;/code&gt; - Globals common to both Node.js and Browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2384792d9b4129dc8e3cd5aa0f33c7583190dd2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shelljs&lt;/code&gt; - ShellJS global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c777d667874248097ecd8cebf907c1cbe0cea9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;single&lt;/code&gt; - import single member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e16e146a19049305bd1d48672791e81e83586c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;single&lt;/code&gt; = import single member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba208adf6cb6bfa32e72d4683ef7409155bfc511" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;singleValue&lt;/code&gt; sets the spacing of a single value inside of square brackets of an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc60847f9ffed871ebb8e8a274977cb17506c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skip&lt;/code&gt; is a positive integer, the number of skipping tokens. If &lt;code&gt;filter&lt;/code&gt; option is given at the same time, it doesn't count filtered tokens as skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bffd4721137f0668214feafc3f619665634c86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipOptions&lt;/code&gt; is an object which has 3 properties; &lt;code&gt;skip&lt;/code&gt;, &lt;code&gt;includeComments&lt;/code&gt;, and &lt;code&gt;filter&lt;/code&gt;. Default is &lt;code&gt;{skip: 0, includeComments: false, filter: null}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e2ecc0406df38b1d1ccf1ecac779fa61ca0ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; - The source code for the given file. This property is omitted if this file has no errors/warnings or if the &lt;code&gt;output&lt;/code&gt; property is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bab5102de076b0619a8aaab81f5b6bcd8aed840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sourceType&lt;/code&gt; - set to &lt;code&gt;&quot;script&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;module&quot;&lt;/code&gt; if your code is in ECMAScript modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fc3fa75a643143fec43ea1214963f7a3090f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spread&lt;/code&gt; - enable the &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-the-spread-operator&quot;&gt;spread operator&lt;/a&gt; for arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74498937d9da6989b3826fb3f822c1a0e6d8ca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start&lt;/code&gt; - An object of the start location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562c297214c3079c86643ee742a66325060aefce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestion&lt;/code&gt; (boolean) specifies whether rules can return suggestions (defaults to false if omitted)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7001382730594d9af640d23183d826935097fc76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestion&lt;/code&gt; - apply fixes to the code that improve it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e1bd8b89f512b7c4dcfb3986baec9ba3d73bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestions&lt;/code&gt; (array): An array of objects with suggestion details to check. See &lt;a href=&quot;#testing-suggestions&quot;&gt;Testing Suggestions&lt;/a&gt; for details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a9e2d4ed6fc53580ec1667bad9ffa002d21113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suggestions&lt;/code&gt; - an array of objects describing possible lint fixes for editors to programmatically enable (see details in the &lt;a href=&quot;working-with-rules#providing-suggestions&quot;&gt;Working with Rules docs&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1318fab7248c2f4b39f6afd96e36cbc603af759a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;superInFunctions&lt;/code&gt; - enable &lt;code&gt;super&lt;/code&gt; references inside of functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7e78c26943268d03f5a72365c1eb3015043d08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;templateStrings&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-template-strings&quot;&gt;template strings&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd54e9fd010557953cb7a0ef7ddae91972ffc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tests&lt;/code&gt; - the main unit test folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08dcb9cef9adf8696d4c280589a87557cb5a4fd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;text&lt;/code&gt; - the full text of the code being linted. Unicode BOM has been stripped from this text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816e619a8bf7c281ba92a529d4c0642f418078aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b115b1a6144f77e6a5aa3d71ef3e7bf2f0dc3aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thrownSegments&lt;/code&gt; (&lt;code&gt;CodePathSegment[]&lt;/code&gt;) - The final segments which includes only thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7519d7afe92e54795456484fa28061d35ee23b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tokens&lt;/code&gt; (&lt;code&gt;Token[]&lt;/code&gt;) is the array of tokens which affect the behavior of programs. Arbitrary spaces can exist between tokens, so rules check the &lt;code&gt;Token#range&lt;/code&gt; to detect spaces between tokens. This must be sorted by &lt;code&gt;Token#range[0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85189a44e953487b618de67a3eb0fa859151682c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; (default) &lt;strong&gt;even if&lt;/strong&gt; the function or method does not have a &lt;code&gt;return&lt;/code&gt; statement (this option value does not apply to constructors)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398be4feb083902f29f8a7376d7e2c72ed38a618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; means there should be &lt;strong&gt;one or more spaces&lt;/strong&gt; and &lt;code&gt;false&lt;/code&gt; means &lt;strong&gt;no spaces&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164473cb1bdffa8a6ee69e081b7955161d6ce2fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; relaxes the rule and accepts parenthesis as a valid &quot;confusion-preventing&quot; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c110fc8578280c6d8b4187919d51e6880ee72955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: requires at least one space between the colon and the value in object literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c944022b8d6ef52bb3b58ed7186232da7a278a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;: requires at least one space between the key and the colon in object literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed51de71320a2a1ea9139a4f6dac950b128ae463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; (string) indicates the type of rule, which is one of &lt;code&gt;&quot;problem&quot;&lt;/code&gt;, &lt;code&gt;&quot;suggestion&quot;&lt;/code&gt;, or &lt;code&gt;&quot;layout&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2daaa0d1c129ced8360a8ffb8f746db1ac9b57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; (string): The type of the reported AST node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e25050e2f24c7a7b3cbb85b0c2364d188dc9091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeof&lt;/code&gt; set to true will warn for variables used inside typeof check (Default false).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d447c639868163e0b6f3e7e087f1876514ec1b40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unicodeCodePointEscapes&lt;/code&gt; - enable &lt;a href=&quot;https://leanpub.com/understandinges6/read/#leanpub-auto-escaping-non-bmp-characters&quot;&gt;code point escapes&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b2b3dcae0bc3c1af73d9d3ed3faff1b71eb602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uninitialized&lt;/code&gt;: a declaration that is not initialized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b8fcea74b3c2723ae07350ad0c06fdf101540d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upper&lt;/code&gt; (&lt;code&gt;CodePath|null&lt;/code&gt;) - The code path of the upper function/global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98dbb83ef9d84404723cc01fc7df3377147e2149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; (string) specifies the URL at which the full documentation can be accessed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46d96d622b96dc5814ed780900e9336cc76ccc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useEslintrc&lt;/code&gt; - Set to false to disable use of &lt;code&gt;.eslintrc&lt;/code&gt; files (default: true). Corresponds to &lt;code&gt;--no-eslintrc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb54b2ac875e39c6a5c69fbe0057d558eb17a51a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788e44194d9b2e6f3dfac11727ce139725216787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&lt;/code&gt; declarations in the global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd77df796b591255e602e82be482bd2c1aadcf02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintExplicitGlobal&lt;/code&gt; (&lt;code&gt;boolean | undefined&lt;/code&gt;) ... If &lt;code&gt;true&lt;/code&gt;, this global variable was defined by a &lt;code&gt;/* globals */&lt;/code&gt; directive comment in the source code file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cdf97481d87a8abdd46b934132dc88e0f6bd53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintExplicitGlobalComments&lt;/code&gt; (&lt;code&gt;Comment[] | undefined&lt;/code&gt;) ... The array of &lt;code&gt;/* globals */&lt;/code&gt; directive comments which defined this global variable in the source code file. This property is &lt;code&gt;undefined&lt;/code&gt; if there are no &lt;code&gt;/* globals */&lt;/code&gt; directive comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8842bb6edd2d2a32b42577f5d2f9ff77c03dc964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.eslintImplicitGlobalSetting&lt;/code&gt; (&lt;code&gt;&quot;readonly&quot; | &quot;writable&quot; | undefined&lt;/code&gt;) ... The configured value in config files. This can be different from &lt;code&gt;variable.writeable&lt;/code&gt; if there are &lt;code&gt;/* globals */&lt;/code&gt; directive comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab0a21f7c02edcdbaf94c592f26a9debce3a664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variable.writeable&lt;/code&gt; (&lt;code&gt;boolean | undefined&lt;/code&gt;) ... If &lt;code&gt;true&lt;/code&gt;, this global variable can be assigned arbitrary value. If &lt;code&gt;false&lt;/code&gt;, this global variable is read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8b2e84ad41c0b330735ef613256ce337ff37a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variables&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;) - This flag determines whether or not the rule checks variable declarations in upper scopes. If this is &lt;code&gt;true&lt;/code&gt;, the rule warns every reference to a variable before the variable declaration. Otherwise, the rule ignores a reference if the declaration is in an upper scope, while still reporting the reference if it's in the same scope as the declaration. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad405cae17dce59bbce81dd34c8a9459d0da26e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visitorKeys&lt;/code&gt; - the visitor keys to traverse this AST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c0307db470eaeab159b0b85167c1ef69de6382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;visitorKeys&lt;/code&gt; can be an object to customize AST traversal. The keys of the object are the type of AST nodes. Each value is an array of the property names which should be traversed. Default is &lt;a href=&quot;https://github.com/eslint/eslint-visitor-keys#evkkeys&quot;&gt;KEYS of &lt;code&gt;eslint-visitor-keys&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45370b8098f934ae8cbddafa379e59a2d8b1a96b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;webextensions&lt;/code&gt; - WebExtensions globals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8318d7f2494338ee26e4f979f86bef08671fb6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;words&lt;/code&gt; - applies to unary word operators such as: &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;typeof&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8969774c77043e144aff4bf62101b043cce636d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;worker&lt;/code&gt; - web workers global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300e058b27197d2fd30811e6a51b5c26466d8375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowNamedFunctions&quot;: true }&lt;/code&gt;&lt;strong&gt;will not&lt;/strong&gt; flag the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be93815ae6cace6c54c18967749e32ebc2ca2fb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowTemplateLiterals&quot;: false }&lt;/code&gt; will not disallow the usage of all template literals. If you want to forbid any instance of template literals, use &lt;a href=&quot;no-restricted-syntax&quot;&gt;no-restricted-syntax&lt;/a&gt; and target the &lt;code&gt;TemplateLiteral&lt;/code&gt; selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26aa7eb76c77f36a5b4eef1017c7a9d4f09b8d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;allowUnboundThis&quot;: false }&lt;/code&gt;&lt;strong&gt;will&lt;/strong&gt; flag the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e2de4f7aaa1280b404b80f6d67d6de16259c8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &quot;minItems&quot;: value }&lt;/code&gt; requires linebreaks inside function parentheses if the number of parameters/arguments is at least &lt;code&gt;value&lt;/code&gt;. Otherwise, it disallows linebreaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bcbf5b0912aba565be18b51eb0ba63df89c59da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;neither&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7736fafa7d8c87cab4049ac35addef0742b055ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: false, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;after&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd01b6771ae8b10b383444ed75ec0191ae1708e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: false}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;before&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ec96246a35f0fb25934ca1f382fdf207a71ec5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&quot;before&quot;: true, &quot;after&quot;: true}&lt;/code&gt; &amp;rarr; &lt;code&gt;&quot;both&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428a16477e45de88f5411d14063f1b262bf4c21e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files behave similarly to regular configuration files, with some exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6579dd2d87db720cf5022eece35bcbc5152bc405" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files load plugins from &lt;code&gt;$CWD/node_modules&lt;/code&gt; by default in order to identify plugins uniquely. If you want to use plugins with &lt;code&gt;~/.eslintrc.*&lt;/code&gt; files, plugins must be installed locally per project. Alternatively, you can use the &lt;a href=&quot;command-line-interface#--resolve-plugins-relative-to&quot;&gt;&lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; CLI option&lt;/a&gt; to change the location from which ESLint loads plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95ef68d43736af87f87d494b9aa35117f6abd6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.eslintrc.*&lt;/code&gt; files load shareable configs and custom parsers from &lt;code&gt;~/node_modules/&lt;/code&gt; &amp;ndash; similarly to &lt;code&gt;require()&lt;/code&gt; &amp;ndash; in the user's home directory. Please note that it doesn't load global-installed packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e650bf2ed65d3b6857b4caa24b44e2304666d78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/&lt;/code&gt; refers to &lt;a href=&quot;https://nodejs.org/api/os.html#os_os_homedir&quot;&gt;the home directory of the current user on your preferred operating system&lt;/a&gt;. The personal configuration file being referred to here is &lt;code&gt;~/.eslintrc.*&lt;/code&gt; file, which is currently handled differently than other configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde79d0dfe135bbe249b7430587f5c88f439ddb2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false negatives&lt;/em&gt; when this rule reports correct code, but the program calls the callback more than one time (which is incorrect behavior)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51dc182038cc3d39feed641c04dea65d51b78d8f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;false positives&lt;/em&gt; when this rule reports incorrect code, but the program calls the callback only one time (which is correct behavior)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95a880d3b307bb016a078ab0e2bc85db5ee24a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A character with Emoji modifiers:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e0d475752ce95cade194ae748f9c3ca1809f39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A character with combining characters:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3fab0654c27190e3d2eaab45ad1a04ef74343b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A pair of regional indicator symbols:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49a6d1dbffb69c2c9ac935a8c9954a3fcd707b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A surrogate pair without Unicode flag:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607fdb8cf66564d700da735af85d57e55ad73a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Atomic.&lt;/strong&gt; Rules must function completely on their own. Rules are expressly forbidden from knowing about the state or presence of other rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a077df30f5baa6d17cb6042cbd8c3773fd3bb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bugs&lt;/strong&gt; - problems with the project are actively affecting users. We want to get these resolved as quickly as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba6712942524dcf51cb8aee2c59d1ed42e073a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Characters that ZWJ joins:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08dc10fd87a158f990e8ab8a386b673f6b33bc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration Comments&lt;/strong&gt; - use JavaScript comments to embed configuration information directly into a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e063069850efd0f1fddb86fa1f07284d1ce23f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration File&lt;/strong&gt; - In JSCS, the configuration file is &lt;code&gt;.jscsrc&lt;/code&gt;, &lt;code&gt;.jscsrc.json&lt;/code&gt;, &lt;code&gt;.jscsrc.yaml&lt;/code&gt;, or &lt;code&gt;.jscsrs.js&lt;/code&gt;. In ESLint, the configuration file can be &lt;code&gt;.eslintrc.json&lt;/code&gt;, &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.yaml&lt;/code&gt;, or &lt;code&gt;.eslintrc.js&lt;/code&gt; (there is also a deprecated &lt;code&gt;.eslintrc&lt;/code&gt; file format).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7c60fdb40941a7c04650e930ca4ef5a27a43b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuration Files&lt;/strong&gt; - use a JavaScript, JSON or YAML file to specify configuration information for an entire directory and all of its subdirectories. This can be in the form of an &lt;a href=&quot;#configuration-file-formats&quot;&gt;&lt;code&gt;.eslintrc.*&lt;/code&gt;&lt;/a&gt; file or an &lt;code&gt;eslintConfig&lt;/code&gt; field in a &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file, both of which ESLint will look for and read automatically, or you can specify a configuration file on the &lt;a href=&quot;command-line-interface&quot;&gt;command line&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6350cf7d6acc659eaca20917c1ca6ac8fd6666e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; Instead of using this option use &quot;always&quot; and pass a &quot;null&quot; option property with value &quot;ignore&quot;. This will tell ESLint to always enforce strict equality except when comparing with the &lt;code&gt;null&lt;/code&gt; literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1fdd0ebbb5f72ace445a12113655c6a65804e0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The following methods on the &lt;code&gt;context&lt;/code&gt; object are deprecated. Please use the corresponding methods on &lt;code&gt;SourceCode&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26c1066ca9b4bcf09dcd1520419ccd5123d266c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The object property &lt;code&gt;maximum&lt;/code&gt; is deprecated; please use the object property &lt;code&gt;max&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07808693d351c1bf3961179bc77d8228df0bcab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; The options &lt;code&gt;&quot;unix&quot;&lt;/code&gt; and &lt;code&gt;&quot;windows&quot;&lt;/code&gt; are deprecated. If you need to enforce a specific linebreak style, use this rule in conjunction with &lt;code&gt;linebreak-style&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69cd7a86dfd50efb7075779240a06f30d11a5d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the object property &lt;code&gt;applyDefaultPatterns&lt;/code&gt; is deprecated. Please use the property &lt;code&gt;applyDefaultIgnorePatterns&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121d74800370c721111cd7b62fec7a4c3526b7a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated:&lt;/strong&gt; the object property &lt;code&gt;maximum&lt;/code&gt; is deprecated. Please use the property &lt;code&gt;max&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6318908ad3986add6a5e1e373df74f506549530" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt; - use &lt;code&gt;.eslintrc&lt;/code&gt;, which can be either JSON or YAML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a411cecdb230e7393693a1f9d6fe3493cafaa02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated&lt;/strong&gt;: The object property &lt;code&gt;avoid-escape&lt;/code&gt; is deprecated; please use the object property &lt;code&gt;avoidEscape&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c318c6dcba96b5fe81622562c4653a966b5f5d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; All scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d63d07318ddd8f8176cae489ff8e9f2a3d7d8e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the scope of a given AST node. The gotten scope's &lt;code&gt;block&lt;/code&gt; property is the node. This method never returns &lt;code&gt;function-expression-name&lt;/code&gt; scope. If the node does not have their scope, this returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2502e7c0b0ca04673f7399d46d8f900e247c4a30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the scopes of a given AST node. The gotten scopes' &lt;code&gt;block&lt;/code&gt; property is the node. If the node does not have their scope, this returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d363b3e91012022cd70cf852479f174a720188a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Get the variables that a given AST node defines. The gotten variables' &lt;code&gt;def[].node&lt;/code&gt;/&lt;code&gt;def[].parent&lt;/code&gt; property is the node. If the node does not define any variable, this returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d444ab979de6d99d2f0cd11b618cbf8e2ccfb36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;!this.dynamic&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07297c7d844bcb4b55217d7bc274ac45715324d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;this.references.find(r =&amp;gt; r.identifier === node)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007187a08867fb25c108f3639d15a1bea0e1d62a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; Returns &lt;code&gt;this.thisFound&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad9c69bb1dc7f531761819279c2fdd71461cf98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Identifier&lt;/code&gt; node of this definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e87c3a915049bb9ad1e911500554f02ce7b30ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Identifier&lt;/code&gt; node of this reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79543808d3d3ad8c145b7efc175082ee5b89fcdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Scope&lt;/code&gt; object that this reference is on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5353454d32fb26fa1a5e0e93c5ba931c946f60c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;Variable&lt;/code&gt; object that this reference refers. If such variable was not defined, this is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1991cac1575dce694faec96e6d6752ac18ce19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;partial&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfab1b4bccd169f5b14893af242e854123548d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;stack&lt;/code&gt; flag. (I'm not sure what this means.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ebdac4b754584d17fe9ec564d80fb1092bcd79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The &lt;code&gt;tainted&lt;/code&gt; flag. (always &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c932e741f1645e5cf3fa3ca9cd763120e9447732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The AST node which created this scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038d84337b46b25fee8f60dd2b0197373fa0a772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The ASTNode object which is right-hand side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a11ff5c2342225e6f07d27d0bc2fe49c905df0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of &lt;code&gt;Identifier&lt;/code&gt; nodes which define this variable. If this variable is redeclared, this array includes two or more nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e083b8ba70a3a809f455f303d81a522e42a59ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of all references on this scope. This does not include references in child scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8183238f4a04b2bad9ffb943be5777c9a692637f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of all variables which are defined on this scope. This does not include variables which are defined in child scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236d1509a87098d65558b21013cf936514b86213" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of child scopes. This does not include grandchild scopes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a37c4e52b7a84f2d803647b07615988738adb15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of references which could not be resolved in this scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30653239f2d91028d647f1ad7162ffeef9df6f30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of the definitions of this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305a2395e825dbde278bed861652d19721e0cfad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The array of the references of this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fb1488df081af5b68cee135690c98d00735f21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The enclosing node of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ed0a2d527f28125603b4b3b5c8d394d591f8f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The enclosing statement node of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4a767ff967dddfb8222aad16461f1910ee0ea1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The index in the declaration statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df195fad0ad68009fb0edecdec164d3a68408d4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The kind of the declaration statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df67f02c6460a8e894f70afd9828d8ac31cfb053" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The map from variable names to &lt;code&gt;tainted&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4b8428bb328cbc24d4974827b464982c783b86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The map from variable names to variable objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e8bc09ba6281bf3aba9eda39636214bc5a8786" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The name of this variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4a7a61464fd8acd801b1f5b8c015729f2ac5e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The parent scope. If this is the global scope then this property is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aca2fa95361a163dcc6e5d4f9ac2f5dea5fa996" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The root scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c551be088c876b85479e2dd36895051838e06f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The scope which hosts variables which are defined by &lt;code&gt;var&lt;/code&gt; declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20468fe1f2bfbcc9f2e03707a8d0aa6a6f82e303" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The type of this definition. One of &lt;code&gt;&quot;CatchClause&quot;&lt;/code&gt;, &lt;code&gt;&quot;ClassName&quot;&lt;/code&gt;, &lt;code&gt;&quot;FunctionName&quot;&lt;/code&gt;, &lt;code&gt;&quot;ImplicitGlobalVariable&quot;&lt;/code&gt;, &lt;code&gt;&quot;ImportBinding&quot;&lt;/code&gt;, &lt;code&gt;&quot;Parameter&quot;&lt;/code&gt;, and &lt;code&gt;&quot;Variable&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7b205ac1c4de3b9fcd54fcf2f952a239cd24e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt; The type of this scope. This is one of &lt;code&gt;&quot;block&quot;&lt;/code&gt;, &lt;code&gt;&quot;catch&quot;&lt;/code&gt;, &lt;code&gt;&quot;class&quot;&lt;/code&gt;, &lt;code&gt;&quot;for&quot;&lt;/code&gt;, &lt;code&gt;&quot;function&quot;&lt;/code&gt;, &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt;, &lt;code&gt;&quot;global&quot;&lt;/code&gt;, &lt;code&gt;&quot;module&quot;&lt;/code&gt;, &lt;code&gt;&quot;switch&quot;&lt;/code&gt;, &lt;code&gt;&quot;with&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58c91eaa02a13f4df54db1d615c3e064e860983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;1&lt;/code&gt; is reading, &lt;code&gt;2&lt;/code&gt; is writing, &lt;code&gt;3&lt;/code&gt; is reading/writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cee383e7e07773e4a8112bf2c0a92da494d5121" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if a given name is used in variable names or reference names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7894caac9879d2f195f04eb7f0745ebba5f4240d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this is a &lt;code&gt;&quot;function&quot;&lt;/code&gt; scope which has used &lt;code&gt;arguments&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36605474d8f010edf63b7f0fe28ab85323907ba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program is module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b0b94037409dffb029ff1840fef7c70819c156" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program is strict mode implicitly. I.e., &lt;code&gt;options.impliedStrict === true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1053cc9be0aa9bb51f7f33ef4d47b041c266a14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this program supports strict mode. I.e., &lt;code&gt;options.ecmaVersion &amp;gt;= 5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8268f6830b81c4adb5dd52396c3c0d3dd9a35f46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d2b3adc78b6d3caf6e7aba6afd631e3ab0da6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading but not writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a6f8f425d563354b1f0baf37d6b5825edd72c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59b18e6bff230841784342f7042d2b53154dee0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is resolved statically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd20eb7a275e9c8ab5581bbc0c1c586f64331ecd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is writing but not reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1aba86f1bf531bae103ec9e3ff7bc4a4d3f7206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this reference is writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2ddd3a18cc341e823438611f09b6a959d5574e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope contains &lt;code&gt;eval()&lt;/code&gt; invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a60b7f1e92c2caedd38861e969bb95ecd0ed131" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope contains &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f506f32e92524b511ad88d3d8608cc02ae497b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is &lt;code&gt;&quot;function-expression-name&quot;&lt;/code&gt; scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19a491137b8c9b3b56cd0ed75d02e46d6e52eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is dynamic. I.e., the type of this scope is &lt;code&gt;&quot;global&quot;&lt;/code&gt; or &lt;code&gt;&quot;with&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd78455aefa04ad7b2c67b07777658d01b7730cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this scope is strict mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a395bb54efa49db4c3ce533e066f657b8faec55e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description:&lt;/strong&gt;&lt;code&gt;true&lt;/code&gt; if this writing reference is a variable initializer or a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d583721fdee9eda617809d6d5f0932df533809dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d77b848a0abc76e21193a499c216a7c96c4336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Documentation&lt;/strong&gt; - documentation issues are a type of bug in that they actively affect current users. As such, we want to address documentation issues as quickly as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8c901162291381cc0db68583bdf9faf0b01cf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ESLint Comment&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02977e23c10e3c214a0ce10d03e5be4439204f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ESLint Shareable Config&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb69c54f5fa4ad2445922301b88b27b35d084398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enhancements&lt;/strong&gt; - requested improvements for existing functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c797ac32aa4127046dcb874228b7074f7a5c0aab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Environments&lt;/strong&gt; - which environments your script is designed to run in. Each environment brings with it a certain set of predefined global variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db36483c04f51816464104f9336215d65f9a9de4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Features&lt;/strong&gt; - new functionality that will aid users in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af207494644ef63da627d549729c12fe3b8c4ad1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Generic.&lt;/strong&gt; Rules cannot be so specific that users will have trouble understanding when to use them. A rule is typically too specific if describing what it does requires more than two &quot;and&quot;s (if a and b and c and d, then this rule warns).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6689c7c184eb755bc66eded45689e48fbf168a2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Globals&lt;/strong&gt; - the additional global variables your script accesses during execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f8d000c45d1a39c043aba161502703deeee9cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important note:&lt;/strong&gt; If the directory for the cache does not exist make sure you add a trailing &lt;code&gt;/&lt;/code&gt; on *nix systems or &lt;code&gt;\&lt;/code&gt; in windows. Otherwise the path will be assumed to be a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235d36d7dcc57be47171dc560e7d69f443d908c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; If you are upgrading from 0.x, please refer to &lt;a href=&quot;migrating-to-1.0.0&quot;&gt;Migrating to 1.0.0&lt;/a&gt; as your starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2eaa51443c3258dd7e45dea4a5ac94bc4017db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; If you submit a &lt;strong&gt;core&lt;/strong&gt; rule to the ESLint repository, you &lt;strong&gt;must&lt;/strong&gt; follow some conventions explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42040c1488043bf228b71702cca0584f230373b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; This configuration is &lt;strong&gt;not recommended for production use&lt;/strong&gt; because it changes with every minor and major version of ESLint. Use at your own risk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84927636eae797794df96a60238b07a1ac6aff3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Unless the rule &lt;a href=&quot;#rule-basics&quot;&gt;exports&lt;/a&gt; the &lt;code&gt;meta.fixable&lt;/code&gt; property, ESLint does not apply fixes even if the rule implements &lt;code&gt;fix&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c7924d351034165acbbfab277838dd50f1a24a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; We strongly recommend always including a default config for your plugin to avoid errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb214ee6eb5c7dc12ee59389822b7d98da3bd6fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; We will not be updating the ESLint v2.x versions going forward. All bug fixes and enhancements will land in ESLint v3.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1973d3d7abb5403d4358d2d444c4653aef3ef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; Without the &lt;code&gt;fixable&lt;/code&gt; property, ESLint does not &lt;a href=&quot;#applying-fixes&quot;&gt;apply fixes&lt;/a&gt; even if the rule implements &lt;code&gt;fix&lt;/code&gt; functions. Omit the &lt;code&gt;fixable&lt;/code&gt; property if the rule is not fixable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f318a381208ca097f538b4b037cad2f3286f2d39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important:&lt;/strong&gt; You must pass in the &lt;code&gt;results&lt;/code&gt; property of the report. Passing in &lt;code&gt;report&lt;/code&gt; directly will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef58db4ffe765c889ba28c24dfbc531efe80a6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important&lt;/strong&gt;: Note that &lt;code&gt;node_modules&lt;/code&gt; directories in, for example, a &lt;code&gt;packages&lt;/code&gt; directory in a mono repo are &lt;em&gt;not&lt;/em&gt; ignored by default and need to be added to &lt;code&gt;.eslintignore&lt;/code&gt; explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2cebb95a12bc72dedb9ca39be6d153867f8883" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS Comment&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f3fe61c5863162813e794c8b1b86796bc5e188" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS Preset&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875fa661818e2fa945668f13e89129e9902797bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterBlocks&quot;&gt;disallowPaddingNewLinesAfterBlocks&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afdb12b91844a96b65e7fe73d8b3fe6d0a5bcf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b929bd9e971dba75ed1fca7e96be672a7b5b82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesBeforeExport&quot;&gt;disallowPaddingNewLinesBeforeExport&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca621a4a90b373c75564885bff675dd36886635" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewlinesBeforeKeywords&quot;&gt;disallowPaddingNewlinesBeforeKeywords&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf1f14ed21f7fd76bd4ea944770b2b1261ccc06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLineAfterVariableDeclaration&quot;&gt;requirePaddingNewLineAfterVariableDeclaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9238f9fbbd5e5293f233a55af524c54e7219926" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterBlocks&quot;&gt;requirePaddingNewLinesAfterBlocks&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096a0e921738b26458570243b333d4e31296e6e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d28a0823e61957e5d2c5c16bede4f960cdf9ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesBeforeExport&quot;&gt;requirePaddingNewLinesBeforeExport&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792713e14953df441ea953c5ccfabc5a465b6af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewlinesBeforeKeywords&quot;&gt;requirePaddingNewlinesBeforeKeywords&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6539cdeff7be733fe5f689599bef3381961e2a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateNewlineAfterArrayElements&quot;&gt;validateNewlineAfterArrayElements&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b845858c98479877f5cd84e3e3d947a67cde0556" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS:&lt;/strong&gt;&lt;a href=&quot;https://jscs-dev.github.io/rule/validateOrderInObjectKeys&quot;&gt;validateOrderInObjectKeys&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d02c2711b391996382780ce54c871ecfbcf61b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowAnonymousFunctions&quot;&gt;disallowAnonymousFunctions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5518cb0a8307c096ca6e5181b41c3f34ded248b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowCapitalizedComments&quot;&gt;disallowCapitalizedComments&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fce6c2919f5a7f4128db723289f261b2579f50e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowIdenticalDestructuringNames&quot;&gt;disallowIdenticalDestructuringNames&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2779a0f1925b729c25143da366d2ea05a156057c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesAfterUseStrict&quot;&gt;disallowPaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc46dd82ef9a36adced582b80db251ee8098f353" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowPaddingNewLinesInObjects&quot;&gt;disallowPaddingNewLinesInObjects&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b76c35c4dec8659858707ea0d74f38aeff893a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowSpacesInCallExpression&quot;&gt;disallowSpacesInCallExpression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecefb37a09083aea3ec664483f3936076aa7ca67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowTabs&quot;&gt;disallowTabs&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b29a889bfed4db9fd94315be32c286fd2eb4d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/maximumNumberOfLines&quot;&gt;maximumNumberOfLines&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524522c208c793d67df0d70c51a25321ca6ead53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireAnonymousFunctions&quot;&gt;requireAnonymousFunctions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186a02ade6372dc7fb4ce71dac0a15dd30047be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireCapitalizedComments&quot;&gt;requireCapitalizedComments&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55f32f60480930c50ff24b3734d8f7612790aa2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMatchingFunctionName&quot;&gt;requireMatchingFunctionName&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3b86e456fcc92f2d512f9b8198df3c5dd8ed28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultiLineTernary&quot;&gt;requireMultiLineTernary&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051352b9689b94454c403b5767b707d6004dd6d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireNumericLiterals&quot;&gt;requireNumericLiterals&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e99f39f1e1bc94d80fc4189abd36d57e1c90285" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesAfterUseStrict&quot;&gt;requirePaddingNewLinesAfterUseStrict&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e8eff6880ee488abbd0548b83266d9d9ea8b17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requirePaddingNewLinesInObjects&quot;&gt;requirePaddingNewLinesInObjects&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c43f82c9f67bcd07edf26203adc57f971b82cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/requireSpacesInCallExpression&quot;&gt;requireSpacesInCallExpression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01ba1c29dfda05eb2c7fc519aef9d76b7858fec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateCommentPosition&quot;&gt;validateCommentPosition&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b5a8cc5ef8759fcbb6679a20275bfc6b56da26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateIndentation&quot;&gt;validateIndentation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f184acb203d5acc54ea98a65572c44f57115d4d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: &lt;a href=&quot;https://jscs-dev.github.io/rule/validateLineBreaks&quot;&gt;validateLineBreaks&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c9d143227ac59dde41b0e45643f66838ae798d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule option &lt;code&gt;separateRequires&lt;/code&gt; roughly maps to &lt;a href=&quot;https://jscs-dev.github.io/rule/requireMultipleVarDecl&quot;&gt;requireMultipleVarDecl&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab1eb359d57bae17ce11110702185750e352610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule provides partial compatibility with &lt;a href=&quot;https://jscs-dev.github.io/rule/requireObjectKeysOnNewLine&quot;&gt;requireObjectKeysOnNewLine&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaa291b1efb6425a2e95e390e53229057de31bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSCS&lt;/strong&gt;: This rule roughly maps to &lt;a href=&quot;https://jscs-dev.github.io/rule/disallowMultipleVarDecl&quot;&gt;disallowMultipleVarDecl&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02d0f0790e678981318f34a951582534122cfce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: &lt;code&gt;indent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b29586ffa53e44f145de605c41b6a451d5a6782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: This rule corresponds to &lt;code&gt;scripturl&lt;/code&gt; rule of JSHint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee936d2f9a974901b4dba5c409d18cbe0656291" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: This rule maps to the &lt;code&gt;onevar&lt;/code&gt; JSHint rule, but allows &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; to be configured separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d89295b6bfd37b6a9a89be78ffac98e4a06adde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: W008, W047</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e9531777492d743c03a56b4bfa95723630ba9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSHint&lt;/strong&gt;: W115</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df1d4948f9e69843f18fd06ce2f27dcf683bc4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSLint&lt;/strong&gt;: &lt;code&gt;continue&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03abc3186a2e3ec2e4b5da6a44ca7df7223a5832" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JSON&lt;/strong&gt; - use &lt;code&gt;.eslintrc.json&lt;/code&gt; to define the configuration structure. ESLint's JSON files also allow JavaScript-style comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3b1c209a92ab9329d04e6738466afd50f9f514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript (ESM)&lt;/strong&gt; - use &lt;code&gt;.eslintrc.cjs&lt;/code&gt; when running ESLint in JavaScript packages that specify &lt;code&gt;&quot;type&quot;:&quot;module&quot;&lt;/code&gt; in their &lt;code&gt;package.json&lt;/code&gt;. Note that ESLint does not support ESM configuration at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc92ffbd2f937c19368c31d09300ab30f115610" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt; - use &lt;code&gt;.eslintrc.js&lt;/code&gt; and export an object containing your configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97416c386b892ff9370bf9f0e2f0d31298565ade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Library agnostic.&lt;/strong&gt; Rules must be based solely on JavaScript runtime environments and not on specific libraries or frameworks. For example, core rules shouldn't only apply if you're using jQuery but we may have some rules that apply only if you're using Node.js (a runtime).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e380d7569e0837d2446eb4b9acd155becbd4ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make the regular expression handling UTF-16 surrogate pairs correctly.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fae8edd3e9c149517dc5c247e1ce7e56536122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Make the regular expression throwing syntax errors early as disabling &lt;a href=&quot;https://www.ecma-international.org/ecma-262/6.0/#sec-regular-expressions-patterns&quot;&gt;Annex B extensions&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1810758c9168765d6922336525d960f9b55650a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No conflicts.&lt;/strong&gt; No rule must directly conflict with another rule. For example, if we have a rule requiring semicolons, we cannot also have a rule disallowing semicolons (which is why we have one rule, &lt;code&gt;semi&lt;/code&gt;, that does both).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb0a89baebb7d7ff29d07c57e6d6233ed7646ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Also available as a static function on &lt;code&gt;CLIEngine&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50455ab1a93fffcef57eabe19fc8429ed85ead31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Arrow functions can never have their &lt;code&gt;this&lt;/code&gt; value set using &lt;code&gt;bind()&lt;/code&gt;. This rule flags all uses of &lt;code&gt;bind()&lt;/code&gt; with arrow functions as a problem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0db7671e7884ec48eec75359ca82cf8bcab23c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of 2016, we accept only rules that are deemed extremely important for inclusion. We prefer that new rules be implemented in plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd44b9d2b032786b403680c1e68b01291151ab8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Autofixed files are not placed in the cache. Subsequent linting that does not trigger an autofix will place it in the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8afacc1817ba9914741b0463066a4e02852c26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Comments that disable warnings for a portion of a file tell ESLint not to report rule violations for the disabled code. ESLint still parses the entire file, however, so disabled code still needs to be syntactically valid JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e9cb21deb1f3e9b10ff060e4c51d4130334479" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Currently you need to use full JSON Schema object rather than array in case your schema has references ($ref), because in case of array format ESLint transforms this array into a single schema without updating references that makes them incorrect (they are ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6581a69e00b07d618a535806a4a29285978cb0d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not combine fixes for multiple issues into one branch. Use a separate branch for each issue you're working on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9afe00ea0bd3a5d7887bc0b406ce66c850f9fcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Earlier versions of ESLint supported additional methods on the &lt;code&gt;context&lt;/code&gt; object. Those methods were removed in the new format and should not be relied upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2b5e8d74798a74e1d71cd719e14b5d2efbbfd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Enable the &lt;a href=&quot;../rules/no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; rule to disallow modifications to read-only global variables in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f41789a9a1d7bd3b1dc89346014e3c63ca6aa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are coming from a version before 1.0.0 please see the &lt;a href=&quot;user-guide/migrating-to-1.0.0&quot;&gt;migration guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7f55b9ec463c0929ee2cc64c6034d205688a9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you just have a question that won't necessarily result in a change to ESLint, such as asking how something works or how to contribute, please use the &lt;a href=&quot;https://groups.google.com/group/eslint&quot;&gt;mailing list&lt;/a&gt; or &lt;a href=&quot;https://gitter.im/eslint/eslint&quot;&gt;chat&lt;/a&gt; instead of filing an issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00083bc1ec54901ca5364535918d10c18eadbb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you run ESLint with &lt;code&gt;--cache&lt;/code&gt; and then run ESLint without &lt;code&gt;--cache&lt;/code&gt;, the &lt;code&gt;.eslintcache&lt;/code&gt; file will be deleted. This is necessary because the results of the lint might change and make &lt;code&gt;.eslintcache&lt;/code&gt; invalid. If you want to control when the cache file is deleted, then use &lt;code&gt;--cache-location&lt;/code&gt; to specify an alternate location for the cache file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ca9d817155df1e8a547f18bbb0946f1c55facc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is expected for this rule to emit one error for each mixed operator in a pair. As a result, for each two consecutive mixed operators used, a distinct error will be displayed, pointing to where the specific operator that breaks the rule is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87444ecd21d0cd1926f69065aba4e403244297e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It's a good idea to re-rerun &lt;code&gt;npm install&lt;/code&gt; whenever you pull from the main repository to ensure you have the latest development dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a4088cbd3a367e41689d6e94ffe74efaffd701" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; One of the libraries adds AST node properties for comments - do not use these properties. Always use &lt;code&gt;sourceCode.getComments()&lt;/code&gt; as this is the only guaranteed API for accessing comments (we will likely change how comments are handled later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c521db88d92c84eb7d807bdf62cf2da54f024a3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Please note that configuration will not enable any of the plugin's rules by default, and instead should be treated as a standalone config. This means that you must specify your plugin name in the &lt;code&gt;plugins&lt;/code&gt; array as well as any rules you want to enable that are part of the plugin. Any plugin rules must be prefixed with the short or long plugin name. See &lt;a href=&quot;../user-guide/configuring#configuring-plugins&quot;&gt;Configuring Plugins&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faa123b30aef583c9cee838fcb46855b4a4bff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Plugins are resolved relative to the current working directory of the ESLint process. In other words, ESLint will load the same plugin as a user would obtain by running &lt;code&gt;require('eslint-plugin-pluginname')&lt;/code&gt; in a Node REPL from their project root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45f807c1f211c7c24235b84d560cd87554ee515" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Polyjuice does a good job of creating a reasonable ESLint configuration from your JSCS configuration, but it may not be 100%. You may still see different warnings than you saw with JSCS, and so you may need to further modify your configuration after using Polyjuice. This is especially true if you're using inline comments to enable/disable certain rules in JSCS (you'll need to manually convert those to use ESLint-style comments instead, see &quot;Disabling Rules Inline&quot; later in this page).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77611a061ac4806612783fac5430806211fdfab3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The full code coverage report is output into &lt;code&gt;/coverage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5354a4574d8823c1a4a4f34ce28ceb4a97458241" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This page covers the most recent rule format for ESLint &amp;gt;= 3.0.0. There is also a &lt;a href=&quot;working-with-rules-deprecated&quot;&gt;deprecated rule format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a477572548696d26bce47e489626b8817978c1af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This rule does not support all of the Google Closure documentation tool's use cases. As such, some code such as &lt;code&gt;(/**number*/ n =&amp;gt; n * 2);&lt;/code&gt; will be flagged as missing appropriate function JSDoc comments even though &lt;code&gt;/**number*/&lt;/code&gt; is intended to be a type hint and not a documentation block for the function. We don't recommend using this rule if you use type hints in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631d65af1a47adbb9d740eaf0589e40e089c670e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Use undocumented parts of the API at your own risk. Only those parts that are specifically mentioned in this document are approved for use and will remain stable and reliable. Anything left undocumented is unstable and may change or be removed at any point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deda6c328c3804b27cfc41a400a33ce9851025db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When specifying rules from plugins, make sure to omit &lt;code&gt;eslint-plugin-&lt;/code&gt;. ESLint uses only the unprefixed name internally to locate rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46e12d16db360f32eead01e7c08603bd2f9ecea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;--ext&lt;/code&gt; is only used when the arguments are directories. If you use glob patterns or file names, then &lt;code&gt;--ext&lt;/code&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b54e0f954bc408384240a6020714081d3ec40f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: If you want to lint text and have your configuration be read and processed, use CLIEngine's &lt;a href=&quot;#cliengineexecuteonfiles&quot;&gt;&lt;code&gt;executeOnFiles&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#cliengineexecuteontext&quot;&gt;&lt;code&gt;executeOnText&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc8e3bfd92b4dd07b36e616a5276ef8284b6034" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: It is not possible to determine if a variable will be referring to an object or an array at runtime. This rule therefore guesses the assignment type by checking whether the key being accessed is an integer. This can lead to the following possibly confusing situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277f9286419e058430f9a225cd4bc6a93b7b0f5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Other&lt;/strong&gt; - anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478ebdcce0e7a6cf53a18ef6273ae4e36f4dc9ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Presets&lt;/strong&gt; - In JSCS, there were numerous predefined configurations shipped directly within JSCS. ESLint ships with just one predefined configuration (&lt;code&gt;eslint:recommended&lt;/code&gt;) that has no style rules enabled. However, ESLint does support &lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;shareable configs&lt;/a&gt;. Shareable configs are configurations that are published on their own to npm and there are shareable configs available for almost all of the JSCS presets (see the &quot;Converting Presets&quot; section below). Additionally, the &quot;preset&quot; option in a configuration file is the equivalent of the ESLint &quot;extends&quot; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c696028f6af1644c6acfa8977f8a9d95ddde2d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint/eslint#10125&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d11743e23f5e0719add32b8626153c71ede5152" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/10768&quot;&gt;eslint/eslint#10768&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/10873&quot;&gt;eslint/eslint#10873&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9570d7403523bee0649cc979233838054b90e0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11201&quot;&gt;eslint/eslint#11201&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1352f364143f800b534ad49bf1b88afe8fb865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11370&quot;&gt;eslint/eslint#11370&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/11405&quot;&gt;eslint/eslint#11405&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc19ee730984b2d00e99b9abe3a69195a55f2c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11423&quot;&gt;eslint/eslint#11423&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5c2b7ce826d5861457ba15a03402e7a5c6577d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11456&quot;&gt;eslint/eslint#11546&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b0ecaf60230944737d612577b682e88c9bbfa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11473&quot;&gt;eslint/eslint#11473&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b6da2e886e1772f3ab4fec0748638891213bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11502&quot;&gt;eslint/eslint#11502&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e01fb628e67b1c3164471cbb18bc9a5c8047a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11503&quot;&gt;eslint/eslint#11503&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f328443143182343b0e7102e74b6baec83b2a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11510&quot;&gt;eslint/eslint#11510&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbf167343a6bb2d759453c0907fd72f00eb08d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/11728&quot;&gt;eslint/eslint#11728&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/eslint/issues/10125&quot;&gt;eslint/eslint#10125&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bf2e8da0d7f94ec626e45a80bb23f4ea7b2167" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9505&quot;&gt;eslint/eslint#9505&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a50620377c84cb31a397fd1730933e6876170d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9687&quot;&gt;eslint/eslint#9687&lt;/a&gt;, &lt;a href=&quot;https://github.com/eslint/espree/issues/384&quot;&gt;eslint/espree#384&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d85f50272f097ff20a2462fcb341c1ec53d175c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/eslint/issues/9990&quot;&gt;eslint/eslint#9990&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eae0a1381872f14248d2e837bdef9b8347dd237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/17&quot;&gt;eslint/rfcs#17&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeb40a0dfa9d70841fc25cbea97d386230305a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Related issue(s):&lt;/strong&gt;&lt;a href=&quot;https://github.com/eslint/rfcs/pull/7&quot;&gt;eslint/rfcs#7&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f13297e23427bb54e61678231e790974ac7f0f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Reference | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c600ac93f00bbe066199904ff634a04fb92e332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Scope | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aba0e4af1c9bc08abed1d9318fafb27d8d9ce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Scope[] | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21755435f998b6c23cd26f2246c08dc01146210c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;Variable[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbfb63d32076d739044ec47055380412d316e10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Return type:&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332190df6c1c50af3cdd19c670dc2cb18f7acd4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Rules&lt;/strong&gt; - which rules are enabled and at what error level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a065f720324325574daed8c05153981da617fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;postprocess&lt;/code&gt; method&lt;/strong&gt; takes a two-dimensional array of arrays of lint messages and the filename. Each item in the input array corresponds to the part that was returned from the &lt;code&gt;preprocess&lt;/code&gt; method. The &lt;code&gt;postprocess&lt;/code&gt; method must adjust the locations of all errors to correspond to locations in the original, unprocessed code, and aggregate them into a single flat array and return it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b590b64e5aa79c3fa18b45a59322291a219656" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;preprocess&lt;/code&gt; method&lt;/strong&gt; takes the file contents and filename as arguments, and returns an array of code blocks to lint. The code blocks will be linted separately but still be registered to the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b187a38081d30402a3978e56e14522b10ff436a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To Address:&lt;/strong&gt; You should be sure to use a configuration whenever you run ESLint. However, you can still run ESLint without a configuration by passing the &lt;code&gt;--no-eslintrc&lt;/code&gt; option on the command line or setting the &lt;code&gt;useEslintrc&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;CLIEngine&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576dd716e844bba5b1c0b942527d1cda249b46a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9d28a70914ce9eea0e57267f86f3ec660c8322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Convert all of your rule tests to use &lt;code&gt;RuleTester&lt;/code&gt;. If you have this as a test using &lt;code&gt;ESLintTester&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8930c23ebdc44f581f19994b612663831d90e7ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If &lt;code&gt;RuleTester&lt;/code&gt; starts reporting an error about an invalid default, you can remove the &lt;code&gt;default&lt;/code&gt; property at the indicated location in your rule schema, and the rule will behave the same way. (If this happens, you might also want to verify that the rule behaves correctly when no option value is provided in that location.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ec9d60e5c2c0d06391a63cbdb3384b8833762f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If this change results in more linting errors in your codebase, you should fix them or reconfigure the rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770c5f27964d415381e58600e246b6e2a45ca7fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are currently using &lt;code&gt;--reset&lt;/code&gt;, then you should stop passing &lt;code&gt;--reset&lt;/code&gt; on the command line; no other changes are necessary. If you are not using &lt;code&gt;--reset&lt;/code&gt;, then you should review your configuration to determine which rules should be on by default. You can partially restore some of the default behavior by adding the following to your configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f076cf8578b53e9f3a8986241de015ab8e0237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are currently using &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt; in your project like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f807e75ac117796a23196980a6ad2170f058d220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are exporting a rule schema that checks severity, you need to make several changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e466b2d2419b0bad9ffaf3dce47a73933c8d0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using &lt;code&gt;Scope#through&lt;/code&gt; to find references of a built-in global variable, you need to make several changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cade783a3085679f35a97ecde650748cfd3e0a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using &lt;code&gt;SourceCode&lt;/code&gt; constructor in your code, please parse the source code after it stripped BOM:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ae4cbeef62973e69f3f62ff24d032e27e36eed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using a plugin in your configuration file, you will need to manually enable the plugin rules in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba194d634d55561e298dceae820c8d85ef7450c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using any ECMAScript 6 feature flags in &lt;code&gt;ecmaFeatures&lt;/code&gt;, you'll need to use &lt;code&gt;ecmaVersion: 6&lt;/code&gt; instead. The ECMAScript 6 feature flags are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c99a6b84e038c0957a900f5de5d3eb5c3e6ebd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are using the exported &lt;code&gt;cli&lt;/code&gt; object, switch to using &lt;code&gt;CLIEngine&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fbd9e1e8eef6c0b85a3e5ac9a507ed4dae9ee5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you are writing ES6 code, enable the &lt;code&gt;es6&lt;/code&gt; environment if you have not already done so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ea7ad6e98d40915dba63a00e6e1b16f3173653" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you don't want dotfiles to be matched by an override, consider adding something like &lt;code&gt;excludedFiles: [&quot;.*&quot;]&lt;/code&gt; to that &lt;code&gt;overrides&lt;/code&gt; section. See the &lt;a href=&quot;configuring#configuration-based-on-glob-patterns&quot;&gt;documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a8953f9702269d96836ee318313f6a9e43c294" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you don't want to be notified by those rules, you can simply disable those rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8d63e22446253b1a28eb32a79b01dc479fdd5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you encounter an error about missing files after upgrading to ESLint v5, you may want to double-check that there are no typos in the paths you provide to ESLint. To make the error go away, you can simply remove the given files or globs from the list of arguments provided to ESLint on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587e0b5e7b7dde8c12b10a870eef785d9451aefe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you get rule option validation errors after upgrading, ensure that any regular expressions in your rule options have no invalid escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcfec1746b4cc64153f8610dfa226533b06a680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a custom rule that depends on the &lt;code&gt;leadingComments&lt;/code&gt; or &lt;code&gt;trailingComments&lt;/code&gt; properties of an AST node, you can now use &lt;code&gt;sourceCode.getCommentsBefore()&lt;/code&gt; and &lt;code&gt;sourceCode.getCommentsAfter()&lt;/code&gt; instead, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c8ba13c4a7bc74d0557c888eb9c47ee3c701be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a custom rule that performs operations on comments, some additional logic might be required to ensure that shebang comments are correctly handled or filtered out:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c51915a6fb2ba3acc4a34393b020cc435abafff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have a formatter or integration which relies on using the &lt;code&gt;source&lt;/code&gt; property on individual linting messages, you should update it to use the &lt;code&gt;source&lt;/code&gt; property on file results objects instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907aefd8c1867f5c184569bdf1f2c733e0197711" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an empty file in your project and you don't want it to be linted, consider adding it to an &lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt;&lt;code&gt;.eslintignore&lt;/code&gt; file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d207ee9fbb85e86882b82f80f1d1a22e454fda12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an integration that deals with the ranges of reported problems, make sure you handle large report ranges in a user-friendly way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13d1c2c0ec09db8e58e52cefe33f1faeca1e45d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have an integration that detects all problems with linting runs by checking whether the exit code is equal to 1, update it to check whether the exit code is nonzero instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f196fb391f011f0260dd45968583f3c6afac7768" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have both an &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; with ESLint configuration information in the same directory, combine your configurations into just one of those files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cf3a1f46a8b6afe2db3a742f155b210a48bf89" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that enumerates all properties of an AST node, consider excluding the &lt;code&gt;parent&lt;/code&gt; property or implementing cycle detection to ensure that you obtain the correct result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0521f50b4ea0897fb5d9baf4c1aba7f6664d821" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on rest operators having the &lt;code&gt;ExperimentalRestProperty&lt;/code&gt; type, you should update it to also work with rest operators that have the &lt;code&gt;RestElement&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a741a6e5457d1d703b33b668c213de4f3bd3949" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on spread operators having the &lt;code&gt;ExperimentalSpreadProperty&lt;/code&gt; type, you should update it to also work with spread operators that have the &lt;code&gt;SpreadElement&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97813ca617db45c596b02040eff0d9c98cc91b10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that relies on text nodes in JSX elements having the &lt;code&gt;Literal&lt;/code&gt; type, you should update it to also work with nodes that have the &lt;code&gt;JSXText&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8655c1586aa80f6c2dac1db8eb7cfc6504d64456" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that reports a problem without providing a message, update it to provide a message along with the report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ce1b59082f4ae2bfb0511a01c79675050cbefb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you have written a custom rule that uses the &lt;code&gt;context.getScope()&lt;/code&gt; method in node handlers, you may need to update it to account for the modified scope information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089b7d47a2cc86930b289472505870eba900db84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you maintain a rule that uses the &lt;code&gt;eslintExplicitGlobalComment&lt;/code&gt; property, update it to use the &lt;code&gt;eslintExplicitGlobalComments&lt;/code&gt; property as a list instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16a4648dea2db7e4da75269412175cb302a26b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you reference a scoped NPM package as a plugin in a config file, be sure to include the scope wherever you reference it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57576e9f49ccb97c8478c916cc243f245ca7b88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on ESLint loading a package like &lt;code&gt;eslint-config-@foo&lt;/code&gt;, consider renaming the package to something else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771bfe5ae6ad01e83be3811455586a25bd1bf56c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on enumerating all the properties of the &lt;code&gt;eslint&lt;/code&gt; object, use something like &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt; to ensure that non-enumerable keys are captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4862d99b16336ac052fbd7de6b937b384ff20c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you rely on enumerating the methods of ESLint's Node.js APIs, use a function that can also access non-enumerable properties such as &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2753e48e2ff870bb5294ecd04c0ac32cf093503" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see a config validation error after upgrading, verify that your config doesn't contain any typos. If you are using an unrecognized property, you should be able to remove it from your config to restore the previous behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5035b705eda89a1ab0c7bd8c774c693536ecad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see config validation errors related to globals after updating, ensure that all values configured for globals are either &lt;code&gt;readonly&lt;/code&gt;, &lt;code&gt;writable&lt;/code&gt;, or &lt;code&gt;off&lt;/code&gt;. (ESLint also accepts some alternate spellings and variants for compatibility.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91438d242b64b6f41b78e018f2bebd3432720acc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you see new reported errors as a result of this change, ensure that your &lt;code&gt;eslint-disable-line&lt;/code&gt; directives only span a single line. Note that &quot;block comments&quot; (delimited by &lt;code&gt;/* */&lt;/code&gt;) are still allowed to be used for directives, provided that the block comments do not contain linebreaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02aad4fe8cf3ae7e80f1541633f1af83882297d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use &lt;code&gt;RuleTester&lt;/code&gt; to write tests for your custom rules, make sure the expected values in your assertions are strictly equal to the actual values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2def4683d622c7ca990f22929b3d8fd2ec129a28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use &lt;code&gt;parser&lt;/code&gt; property with package names in test cases, update it with &lt;code&gt;require.resolve()&lt;/code&gt; function to resolve the package name to the absolute path to the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c04e4b55d08a823682aa96facbb1f620bc73449" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use a global installation of ESLint (e.g. installed with &lt;code&gt;npm install eslint --global&lt;/code&gt;) along with plugins, you should install those plugins locally in the projects where you run ESLint. If your config file extends shareable configs and/or parsers, you should ensure that those packages are installed as dependencies of the project containing the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932a8a0b5d53f352ef6e81141b400f1099c1cc90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use an &lt;code&gt;.eslintignore&lt;/code&gt; file and you frequently run ESLint from somewhere other than the project root, it's possible that the patterns will be matched differently. You should update the patterns in the &lt;code&gt;.eslintignore&lt;/code&gt; file to ensure they are relative to the file, not to the working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a41e765e3b022b9ee6cacf0dd0cc958e025067c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use deprecated globals in the &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;browser&lt;/code&gt;, or &lt;code&gt;jest&lt;/code&gt; environments, you can add a &lt;code&gt;globals&lt;/code&gt; section to your configuration to re-enable any globals you need. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384c76e78f089df83dae56f3eaf33a46d087f0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option, you should be able to upgrade to ESLint v5 without any changes, but you will encounter a deprecation warning. To avoid the warning, use &lt;code&gt;ecmaVersion: 2018&lt;/code&gt; in your config file rather than &lt;code&gt;ecmaFeatures: { experimentalObjectRestSpread: true }&lt;/code&gt;. If you would like to disallow the use of other ES2018 features, consider using rules such as &lt;a href=&quot;../rules/no-restricted-syntax&quot;&gt;&lt;code&gt;no-restricted-syntax&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01db37c8acaa658a6bb43b82b83e0401cb1ad69d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you use the &lt;code&gt;experimentalObjectRestSpread&lt;/code&gt; option, you should change your config to contain this instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c689e103cb28d77f2578eb10b0a1a4a6cbe60d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you want to mimic how &lt;code&gt;eslint:recommended&lt;/code&gt; worked in v2.x, you can use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8019bb3aa93a5e4dae201b5bfa1578295dffe98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you were using the &lt;code&gt;global&lt;/code&gt; property, please use the &lt;code&gt;globals&lt;/code&gt; property instead, which does the same thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27b3129b5cebb205cf63438684e2accda668e14" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you would like to maintain the previous behavior, update your configuration for &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; by adding &lt;code&gt;{&quot;max&quot;: 2}&lt;/code&gt;, and change &lt;code&gt;func-style&lt;/code&gt; to &lt;code&gt;&quot;declaration&quot;&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d063f796a1fd8df02ce0b2b81e55064b5aaf28f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you're using &lt;code&gt;Linter&lt;/code&gt; with a custom parser, use &lt;a href=&quot;../developer-guide/nodejs-api#linterdefineparser&quot;&gt;&lt;code&gt;Linter#defineParser&lt;/code&gt;&lt;/a&gt; to explicitly define the parser before linting any code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a657be2b85aec590670ffc3351944457ebd3919a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If you've created an editor integration, or a tool that had to correct the column number, you'll need to update to just pass through the column number from ESLint. Otherwise, no change is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0f91e6af4c0a67887070073ef1922afdcd7e4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If your config sets &lt;code&gt;ecmaVersion&lt;/code&gt; to something other than a number, you can restore the previous behavior by removing &lt;code&gt;ecmaVersion&lt;/code&gt;. (However, you may want to double-check that your config is actually working as expected.) If your config sets &lt;code&gt;parserOptions: { sourceType: &quot;module&quot; }&lt;/code&gt; without also setting &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt;, you should add &lt;code&gt;parserOptions: { ecmaVersion: 2015 }&lt;/code&gt; to restore the previous behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ff72762e9c2760c32f1fc4fc00dd7d80b6fbbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; If your tests for custom rules have extra properties, you should remove those properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f472fde2bcf15025ec6cea9c37475bc3a49d3fd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Instead of relying on &lt;code&gt;LineComment&lt;/code&gt; and &lt;code&gt;BlockComment&lt;/code&gt;, rules can now use &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; to get all comments in a file. To check all comments of a specific type, rules can use the following pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3991457302791a2ccf0e89f9e9beb8a7e37d9b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Make sure you upgrade to at least Node.js 6 when using ESLint v5. If you are unable to upgrade, we recommend continuing to use ESLint v4.x until you are able to upgrade Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b9dd9ffb0b3c605455b34509820a64afccf522" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; Make sure you upgrade to at least Node.js 8 when using ESLint v6. If you are unable to upgrade, we recommend continuing to use ESLint v5.x until you are able to upgrade Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247eb16e84dcf6771a5cd04c4fa93f82225f23ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 3.x, you can disable these rules in a config file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1513d5e57c50f48dec7ed680ce7a5a40192356a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 4.x, you can disable these rules in a config file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fc81d9e8a3e8a0668fcf3702d5750b98c0abf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the &lt;code&gt;eslint:recommended&lt;/code&gt; behavior from 5.x, you can explicitly disable/enable rules in a config file as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416d6ba52d8d24552229dac5193497ac7375e930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To mimic the default config from 3.x, you can use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec581a37ebf9accbf967fe0fabaa5354c89f24d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; To restore the rule behavior from ESLint v4, you can update your config file to include the previous options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e334b9b8c1b05fd9a886cd98c56fc14f47ed1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; We expect the impact of this issue to be very low because most shareable configs don't use &lt;code&gt;overrides&lt;/code&gt; blocks. However, if you use a shareable config with &lt;code&gt;overrides&lt;/code&gt; blocks, you might encounter a change in behavior due to something that is explicitly specified in your config but was inactive until now. If you would rather inherit the behavior from the shareable config, simply remove the corresponding entry from your own config. (In the example above, the previous behavior could be restored by removing &lt;code&gt;semi: &quot;off&quot;&lt;/code&gt; from &lt;code&gt;.eslintrc.js&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb7b39d41b7eba1b375099a8306c792b28a00a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; We recommend upgrading without changing your &lt;code&gt;indent&lt;/code&gt; configuration, and fixing any new indentation errors that appear in your codebase. However, if you want to mimic how the &lt;code&gt;indent&lt;/code&gt; rule worked in 3.x, you can update your configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5448e647d1e18b8d154e70830c65d3ca281f27ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You can remove the non-existent rule in your (inline) config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258d65c83b7009266afa690a745fa8360311a395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You can restore the previous default behavior of the rule with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d86228b26c28b3684eba95a90b5647e0f918ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You'll need to update your rule configurations to use the new rules. ESLint v1.0.0 will also warn you when you're using a rule that has been removed and will suggest the replacement rules. Hopefully, this will result in few surprises during the upgrade process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c64f85451fdde8fc3e5c5ba6dd407f68548a57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To address:&lt;/strong&gt; You'll need to update your rule configurations to use the new rules. ESLint v2.0.0 will also warn you when you're using a rule that has been removed and will suggest the replacement rules. Hopefully, this will result in few surprises during the upgrade process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a5526a5ada884ec86f1b6da70ee21b4903d17b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab6019f558b59757ac38ebadacdec6259b91761" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode | undefined | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6feb4f8364f23f0762c4393f5bbbb273cddcb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fd28baa41a9e3c7c8727587a99aff5ec535f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;ASTNode[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a378958772ebf1a161b9c3e72909a3a55ed82f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Definition[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da3b971c96f631825ad04dbf8b4d303c9967ffb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Map&amp;lt;string, Variable&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2438c848579dbaa8779c8306f1c65c23fdeacd29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Map&amp;lt;string, boolean&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92251fe75e52951a303a026f484f69cfef77aa06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Reference[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60abdbc401d84bb32a9cb0260d994a6ae6e2f1aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b121b96e01956cb2ea86298f8b70b0650f3cd36c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9fdc725b8ea9f58f56be7c9222dd98788cc219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Scope[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9838d44d4785d1084ed93bf9fdef936c32cd25d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Variable | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e60ad93ca62b50f3f6e8c758fe0f26ffa69e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;Variable[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065aeffd64b55779e6665647b1f2bf408b580573" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;boolean&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57f66aafb9f93efb062089ab9897cdf052d5120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;number | undefined | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363e8dc93cca8bc600627e60044c5a563aae006f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;number&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5e80bb801bf5debe255dec06519da8976703cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;string | undefined | null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a876dbc9023a0657cc28e3d65b8aab30cbad7834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type:&lt;/strong&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec0a4b892636f7a0221b21073a02240fe72d8df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unique.&lt;/strong&gt; No two rules can produce the same warning. Overlapping rules confuse end users and there is an expectation that core ESLint rules do not overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf67d99b50404ab4358e9e339b1b708bcab25ed7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: When using this option, it is possible that new errors will start being reported whenever ESLint or custom rules are upgraded. For example, suppose a rule has a bug that causes it to report a false positive, and an &lt;code&gt;eslint-disable&lt;/code&gt; comment is added to suppress the incorrect report. If the bug is then fixed in a patch release of ESLint, the &lt;code&gt;eslint-disable&lt;/code&gt; comment will become unused since ESLint is no longer generating an incorrect report. This will result in a new reported error for the unused directive if the &lt;code&gt;report-unused-disable-directives&lt;/code&gt; option is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690b7b8d94a1b3c9d962ba1e289c660831b66f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Widely applicable.&lt;/strong&gt; The rules we distribute need to be of importance to a large number of developers. Individual preferences for uncommon patterns are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e9f07f31c58b5e90255be8dd4e9357ec5ea649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;YAML&lt;/strong&gt; - use &lt;code&gt;.eslintrc.yaml&lt;/code&gt; or &lt;code&gt;.eslintrc.yml&lt;/code&gt; to define the configuration structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6317608d852f5d6ad914b27925033eb82c9a3e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;column&lt;/strong&gt;: the column where the issue is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c793f9da1e8e133aff3fa2bad00a6d31fdba9a7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;errorCount&lt;/strong&gt;: The number of errors for the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a543f31705d32791f173cab2adcad503f396575" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filePath&lt;/strong&gt;: The absolute path to the file that was linted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea4713b9a2a74cb12b6d5b5fe7828d0536c07ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;line&lt;/strong&gt;: the line where the issue is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854fbee9878a2d6895114384f126d4f013d10900" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;message&lt;/strong&gt;: the human readable description of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c17ea1c475856f663a432014483567ba55bb191" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;messages&lt;/strong&gt;: An array of &lt;code&gt;message&lt;/code&gt; objects. See below for more info about messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6765e88da537247c90435e6a324b1062059fc3fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nodeType&lt;/strong&gt;: the type of the node in the &lt;a href=&quot;https://github.com/estree/estree/blob/master/spec.md#node-objects&quot;&gt;AST&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaaa539bfcc75f4a627ffdf411f6db7d696f895" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;output&lt;/strong&gt;: The source code for the given file with as many fixes applied as possible. This property is omitted if no fix is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf4ab88e9d76bbc1db7e3e4f3a15e8073f7f66d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package.json&lt;/strong&gt; - create an &lt;code&gt;eslintConfig&lt;/code&gt; property in your &lt;code&gt;package.json&lt;/code&gt; file and define your configuration there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c36fc10e4db3d87c7e40b5bfcb948a6a13aa9fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ruleId&lt;/strong&gt;: the ID of the rule that produced the error or warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c109eeec65f43a816559dc91fe2767810c7df9a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;severity&lt;/strong&gt;: the severity of the failure, &lt;code&gt;1&lt;/code&gt; for warnings and &lt;code&gt;2&lt;/code&gt; for errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57dc6fa09a500c31ce3a0e575d3599f23582d063" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;source&lt;/strong&gt;: The source code for the given file. This property is omitted if this file has no errors/warnings or if the &lt;code&gt;output&lt;/code&gt; property is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d06a59a13d8a1e231cb9ac165a8acbbdd84a946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;warningCount&lt;/strong&gt;: The number of warnings for the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5bb7e063e087e28e2ba54b1ad62519de9907a17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※1&lt;/strong&gt; Only if the configured parser provided the block-scope feature. The default parser provides the block-scope feature if &lt;code&gt;parserOptions.ecmaVersion&lt;/code&gt; is not less than &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5b1372f368e9f1781486b1cdf873f6b6e922da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※2&lt;/strong&gt; Only if the &lt;code&gt;for&lt;/code&gt; statement defines the iteration variable as a block-scoped variable (E.g., &lt;code&gt;for (let i = 0;;) {}&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f95d6c9ec993bf1003f5d6d554fb0443bff70d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;※3&lt;/strong&gt; The scope of the closest ancestor node which has own scope. If the closest ancestor node has multiple scopes then it chooses the innermost scope (E.g., the &lt;code&gt;Program&lt;/code&gt; node has a &lt;code&gt;global&lt;/code&gt; scope and a &lt;code&gt;module&lt;/code&gt; scope if &lt;code&gt;Program#sourceType&lt;/code&gt; is &lt;code&gt;&quot;module&quot;&lt;/code&gt;. The innermost scope is the &lt;code&gt;module&lt;/code&gt; scope.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02dd576fcd740e7b5e9d1205a01abf4062eb573e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;The examples in this section were adapted from the &lt;a href=&quot;https://github.com/estools/esquery&quot;&gt;esquery&lt;/a&gt; documentation.&lt;/sup&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c6124784996ca17201568f44be632340e6b1a5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../developer-guide/shareable-configs&quot;&gt;sharable configuration&lt;/a&gt; is an npm package that exports a configuration object. Make sure the package has been installed to a directory where ESLint can require it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3808288d05eda6a0a0bc6617b661283e01236f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../developer-guide/working-with-plugins&quot;&gt;plugin&lt;/a&gt; is an npm package that usually exports rules. Some plugins also export one or more named &lt;a href=&quot;../developer-guide/working-with-plugins#configs-in-plugins&quot;&gt;configurations&lt;/a&gt;. Make sure the package has been installed to a directory where ESLint can require it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0fff9a243305a444f630687fb971bc9bdfe21c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;.eslintrc.js&lt;/code&gt;, &lt;code&gt;.eslintrc.json&lt;/code&gt;, &lt;code&gt;.eslintrc.yml&lt;/code&gt;, &lt;code&gt;.eslintrc.yaml&lt;/code&gt;, or &lt;code&gt;.eslintrc&lt;/code&gt; file either in your project or home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3619e056c08299691ba58f3ad597b15a5f58a85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;catch&lt;/code&gt; clause that only rethrows the original error is redundant, and has no effect on the runtime behavior of the program. These redundant clauses can be a source of confusion and code bloat, so it's better to disallow these unnecessary &lt;code&gt;catch&lt;/code&gt; clauses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a389d325d348388839c0ea0782dd37813615760" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fixing&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc4e0872788b98de54fe4422f2e108e57fa3981" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as &lt;code&gt;while&lt;/code&gt; loops. More typically, an infinite for loop is a bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd8c1349fe0d5d2b91629e8af2a67df9488040b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;return;&lt;/code&gt; statement with nothing after it is redundant, and has no effect on the runtime behavior of a function. This can be confusing, so it's better to disallow these redundant statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427cd3d37ea17c688301c4da2e2f301a2ab49185" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;yield&lt;/code&gt; or &lt;code&gt;await&lt;/code&gt; expression interrupts the assignment after the old value is read, and before the new value is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8008f59ac6bd0272b139f77f91c4eaec29b91f9" translate="yes" xml:space="preserve">
          <source>A base configuration is provided to CLIEngine using the &lt;code&gt;baseConfig&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28f9cb5b2f38c73f333a34c925f89046619923e" translate="yes" xml:space="preserve">
          <source>A better coding convention for lists and object literals in JavaScript by isaacs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49d168e597f86961f6dcfcf63c7b9fc77704bde" translate="yes" xml:space="preserve">
          <source>A blank space should appear after commas in argument lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef78cae4223417784fc081e3049bf82c27f50e97" translate="yes" xml:space="preserve">
          <source>A boolean to specify if numbers used as array indexes are considered okay. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cc5d7724902bc0ab2d7f5534386b2ad9db7d72" translate="yes" xml:space="preserve">
          <source>A boolean to specify if we should check for the const keyword in variable declaration of numbers. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cedb82f008edd3bab5474e2a26c1601087ba6d" translate="yes" xml:space="preserve">
          <source>A boolean to specify if we should detect numbers when setting object properties for example. &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a836ff88ff9ac017f2c0ded333e7db070f9c18" translate="yes" xml:space="preserve">
          <source>A boolean value that defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; is set to true, the check will take into account the use of &lt;code&gt;Object.create&lt;/code&gt;, &lt;code&gt;Object.defineProperty&lt;/code&gt;, &lt;code&gt;Object.defineProperties&lt;/code&gt;, and &lt;code&gt;Reflect.defineProperty&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b15bec3881a375f3e36051b0e45319e9cb7dfa" translate="yes" xml:space="preserve">
          <source>A boolean value that defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt; is set to true, &lt;code&gt;module.exports&lt;/code&gt; and &lt;code&gt;module[&quot;exports&quot;]&lt;/code&gt; will be checked by this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d392c027987959cf72d4b9853225e2e854601add" translate="yes" xml:space="preserve">
          <source>A code block has two properties &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt;; the &lt;code&gt;text&lt;/code&gt; property is the content of the block and the &lt;code&gt;filename&lt;/code&gt; property is the name of the block. Name of the block can be anything, but should include the file extension, that would tell the linter how to process the current block. The linter will check &lt;a href=&quot;../user-guide/command-line-interface#--ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt; CLI option&lt;/a&gt; to see if the current block should be linted, and resolve &lt;code&gt;overrides&lt;/code&gt; configs to check how to process the current block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eea8b8a1570a4ad89b64de14a057281d21a3ef" translate="yes" xml:space="preserve">
          <source>A common suggestion to avoid this problem would be to wrap the inside of the &lt;code&gt;for&lt;/code&gt; loop with &lt;code&gt;users.hasOwnProperty(id)&lt;/code&gt;. However, if this rule is strictly enforced throughout your codebase you won't need to take that step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d60456477141b8b709fcd647cee4d38da3405ac" translate="yes" xml:space="preserve">
          <source>A common use case for this option is to avoid useless renaming when the identifier is not intended to be used later in the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b21754babbfe85667b0e2efa5cf5de9ec46843" translate="yes" xml:space="preserve">
          <source>A configuration file can extend the set of enabled rules from base configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55883fdd5b9ae6a9a3a826f2405d1dbe3a0d2fed" translate="yes" xml:space="preserve">
          <source>A configuration file passed on the command line using &lt;code&gt;-c&lt;/code&gt; (or to CLIEngine using &lt;code&gt;configFile&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16c6623d752e6bb2d6001c0a413fae9b0ced782" translate="yes" xml:space="preserve">
          <source>A configuration is an object which has 3 properties; &lt;code&gt;blankLine&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;. For example, &lt;code&gt;{ blankLine: &quot;always&quot;, prev: &quot;var&quot;, next: &quot;return&quot; }&lt;/code&gt; means &quot;one or more blank lines are required between a variable declaration and a &lt;code&gt;return&lt;/code&gt; statement.&quot; You can supply any number of configurations. If a statement pair matches multiple configurations, the last matched configuration will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e05403cd1ed3924830384794a2169931e37d6c" translate="yes" xml:space="preserve">
          <source>A confusing aspect of JavaScript is that a function returns &lt;code&gt;undefined&lt;/code&gt; if any of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b8b178eb884eddcdef7dfcdc5d1458ee22bc10" translate="yes" xml:space="preserve">
          <source>A constant expression (for example, a literal) as a test condition might be a typo or development trigger for a specific behavior. For example, the following code looks as if it is not ready for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ef8f442efa45ca28465cdb5709982cce56b8d9" translate="yes" xml:space="preserve">
          <source>A criticism of the Single Var Pattern in JavaScript, and a simple alternative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86af3e246df7da9e6606e3119d58789e53135d52" translate="yes" xml:space="preserve">
          <source>A file provided on the command line does not exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0f8365160b25f524152aaae9aa2a1eda0000c5" translate="yes" xml:space="preserve">
          <source>A formatter that only cares about the total count of errors and warnings will look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836d7f5bf58c6c5d4d4a624f7d1ee3a0a7646a0b" translate="yes" xml:space="preserve">
          <source>A getter and setter for the same property don't necessarily have to be defined adjacent to each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7f11d210d922ba42114538c835a711d4da81d4" translate="yes" xml:space="preserve">
          <source>A glob or folder provided on the command line does not match any lintable files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ab6c931da3b6d371be8a93021d9e9b0d48645d" translate="yes" xml:space="preserve">
          <source>A glob specific configuration can have &lt;code&gt;extends&lt;/code&gt; setting, but the &lt;code&gt;root&lt;/code&gt; property in the extended configs is ignored. The &lt;code&gt;ignorePatterns&lt;/code&gt; property in the extended configs is used only for the files the glob specific configuration matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b522d213270e7f352fb5949b49df3ae85baa01a7" translate="yes" xml:space="preserve">
          <source>A glob specific configuration works almost the same as any other ESLint config. Override blocks can contain any configuration options that are valid in a regular config, with the exception of &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;ignorePatterns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206b9feb0f4bbb8e333ef78a8e28833be8f4c5ae" translate="yes" xml:space="preserve">
          <source>A keyword followed by a parenthesis should be separated by a space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25b0a4a01a0fa0cb35fab86df6cc5fb0278bfe8" translate="yes" xml:space="preserve">
          <source>A line of code containing too many statements can be difficult to read. Code is generally read from the top down, especially when scanning, so limiting the number of statements allowed on a single line can be very beneficial for readability and maintainability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdb73170961eda63243d915f3c732b85dd2985f" translate="yes" xml:space="preserve">
          <source>A module in Node.js is a simple or complex functionality organized in a JavaScript file which can be reused throughout the Node.js application. The keyword &lt;code&gt;require&lt;/code&gt; is used in Node.js/CommonJS to import modules into an application. This way you can have dynamic loading where the loaded module name isn't predefined /static, or where you conditionally load a module only if it's &quot;truly required&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e913c7680534d6cb99080f78a2661196f66cafe" translate="yes" xml:space="preserve">
          <source>A more complex report will look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308dd0db07bb7acf7df7d9b6b57f161aa88b87d2" translate="yes" xml:space="preserve">
          <source>A more detailed breakdown of supported patterns and directories ESLint ignores by default can be found in &lt;a href=&quot;configuring#ignoring-files-and-directories&quot;&gt;Configuring ESLint&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f95a5a52d06fa719a2b5d0e69c8f678b2e9461" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks between arguments of a function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacd1564ab62e8653cfd111bed2b118e40aadb40" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks between array elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6daa5b1d39d0ececccc70c8f1cdb04d99e441cc" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks inside of array brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba799235c50035c5b374a07ef2c2489a022d92f0" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow line breaks inside of object braces and other tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0173ae7c66b71705fbe3bf702c3a75f916fc100b" translate="yes" xml:space="preserve">
          <source>A number of style guides require or disallow spaces between array brackets and other tokens. This rule applies to both array literals and destructuring assignments (ECMAScript 6).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e7763e5080c827a61b70944488cf0e26f29ada" translate="yes" xml:space="preserve">
          <source>A pattern that's becoming more common is to give function expressions names to aid in debugging. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5cdd669b54ca8ffb4b5b8c7c790d4b0d11fa08" translate="yes" xml:space="preserve">
          <source>A read-only global variable can be a built-in ES global (e.g. &lt;code&gt;Array&lt;/code&gt;), an environment specific global (e.g. &lt;code&gt;window&lt;/code&gt; in the browser environment), or a global variable defined as &lt;code&gt;readonly&lt;/code&gt; in the configuration file or in a &lt;code&gt;/*global */&lt;/code&gt; comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0054f9727b38ae6114afa1db04f33844004776" translate="yes" xml:space="preserve">
          <source>A return statement with a value should not use parentheses unless they make the return value more obvious in some way. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f17ce2af731b0cf58f28e612f21a508401014a8" translate="yes" xml:space="preserve">
          <source>A rule can use the current node and its surrounding tree to report or fix problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be5e6a9bd29b708e70db8babc0b03b78dbd1c85" translate="yes" xml:space="preserve">
          <source>A selector is a string that can be used to match nodes in an Abstract Syntax Tree (AST). This is useful for describing a particular syntax pattern in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6915f26f7dc1530331a66cc13216ce9e856f8f57" translate="yes" xml:space="preserve">
          <source>A simple fix for this problem could be to rewrite the offending line from scratch. This might also be a problem introduced by the text editor: if rewriting the line does not fix it, try using a different editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e71be966e5f1571ea9763af48e414a021cf939" translate="yes" xml:space="preserve">
          <source>A strict mode directive is a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; literal at the beginning of a script or function body. It enables strict mode semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c57440c6b4f6db8e00e8b319bccc1d1604f8ba4" translate="yes" xml:space="preserve">
          <source>A string which must be either &lt;code&gt;&quot;always&quot;&lt;/code&gt; (the default), to enforce initialization at declaration, or &lt;code&gt;&quot;never&quot;&lt;/code&gt; to disallow initialization during declaration. This rule applies to &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and &lt;code&gt;const&lt;/code&gt; variables, however &lt;code&gt;&quot;never&quot;&lt;/code&gt; is ignored for &lt;code&gt;const&lt;/code&gt; variables, as unassigned &lt;code&gt;const&lt;/code&gt;s generate a parse error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9575765dd4d7230fd057ffcbe983765b294ae80e" translate="yes" xml:space="preserve">
          <source>A test case is an object with the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25402932feca00f38e09e6ca5b7c31477fe21891" translate="yes" xml:space="preserve">
          <source>A variable &lt;code&gt;foo&lt;/code&gt; is considered to be used if any of the following are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66ca9673a95b3a663eaf3f3446fa9ff9cf7c024" translate="yes" xml:space="preserve">
          <source>A variable declaration is permitted anywhere a statement can go, even nested deeply inside other blocks. This is often undesirable due to variable hoisting, and moving declarations to the root of the program or function body can increase clarity. Note that &lt;a href=&quot;https://leanpub.com/understandinges6/read#leanpub-auto-block-bindings&quot;&gt;block bindings&lt;/a&gt; (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;) are not hoisted and therefore they are not affected by this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94d0d2ff85b4c8409e8498075e6309cbae9ef3f" translate="yes" xml:space="preserve">
          <source>A variable is &lt;em&gt;not&lt;/em&gt; considered to be used if it is only ever declared (&lt;code&gt;var foo = 5&lt;/code&gt;) or assigned to (&lt;code&gt;foo = 7&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a874a11ae4a94e3610adc77e83b5927c07b204ca" translate="yes" xml:space="preserve">
          <source>A variable or property is reassigned to a new value which is based on its old value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd32e4a288d5369cb2e79caa2870b11139743be" translate="yes" xml:space="preserve">
          <source>A way to determine the node types as defined by &lt;a href=&quot;https://github.com/estree/estree&quot;&gt;ESTree&lt;/a&gt; is to use &lt;a href=&quot;https://astexplorer.net/&quot;&gt;AST Explorer&lt;/a&gt; with the espree parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2271b14edc45904cc47bb0f92baf4a74500757a6" translate="yes" xml:space="preserve">
          <source>ALE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70d4e47700375d0be401f693c74eef6991b7082" translate="yes" xml:space="preserve">
          <source>AST Node Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c446c962a2b4445cdb957511e0b5cc3393b8d123" translate="yes" xml:space="preserve">
          <source>AST Nodes no longer have comment properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6692192c75f1af7938f07f9f1af0696b6f6b2d6" translate="yes" xml:space="preserve">
          <source>AST node type: &lt;code&gt;ForStatement&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf40cf26a73c367ed22afa40853e78a88516d25" translate="yes" xml:space="preserve">
          <source>AST nodes no longer have comment properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd34e75aa7865f007f08ac294fd329a2d8cd24e1" translate="yes" xml:space="preserve">
          <source>About &lt;code&gt;onCodePathSegmentLoop&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062e0e828a9d9112137faebc7569d53ad6b18eaa" translate="yes" xml:space="preserve">
          <source>About Complexity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b779c06c341c07ca1ffb8dd81ce10a4a085087a6" translate="yes" xml:space="preserve">
          <source>Accepting a Rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81be0e1ba0ee31f4985c9d67dada1b00da7487bc" translate="yes" xml:space="preserve">
          <source>Accepting a Rule Change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca36c601812025fe58057e92a05f6f683d6d84fa" translate="yes" xml:space="preserve">
          <source>Access further control over this rule's behavior via an options object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e08a06dd2fa9ae5c39052ab6543bc1691e9530b" translate="yes" xml:space="preserve">
          <source>Access the file system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b88db2f1e9e841f51c72fd0f61599541bb7876" translate="yes" xml:space="preserve">
          <source>Accessing Code Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb10a773b7cebdf807ce0cc70fe3dc0fe02182e" translate="yes" xml:space="preserve">
          <source>Accessing Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d55809203eb5aff13f4e06c5c7e2bf1fb26217b" translate="yes" xml:space="preserve">
          <source>Accessing Shebangs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7706485af3af832462d09475d2669526c29e13d8" translate="yes" xml:space="preserve">
          <source>Accessing an array element through a computed index will fall under the category &lt;code&gt;object&lt;/code&gt; destructuring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460c13f18291c5bc04269d7fad531d4041f17a30" translate="yes" xml:space="preserve">
          <source>Accessing an object property whose key is an integer will fall under the category &lt;code&gt;array&lt;/code&gt; destructuring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a776847f4d167c1b25e573491e2e435b11aa5da" translate="yes" xml:space="preserve">
          <source>Accessing comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ebcd59e2591617f7f8f6024f21a857d0c7360a" translate="yes" xml:space="preserve">
          <source>Actually labeled statements in JavaScript can be used with other than loop and switch statements. However, this way is ultra rare, not well-known, so this would be confusing developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c3b754dfbd93ab56540aade8e2c3f780191601" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;supportsAutofix: true&lt;/code&gt; property to the processor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00858d2635ba9c2a9c7ac282d89b7f6cbcebc9c4" translate="yes" xml:space="preserve">
          <source>Add these &lt;code&gt;keywords&lt;/code&gt; to help users find your formatter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19ea4bd9e18d3a1a7038fa04e68cdf64a34ab3f" translate="yes" xml:space="preserve">
          <source>Add these keywords into your &lt;code&gt;package.json&lt;/code&gt; file to make it easy for others to find.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0ba8ee04639b15125daec80a1aac00deaef410" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;:exit&lt;/code&gt; to the end of a selector will cause the listener to be called when the matching nodes are exited during traversal, rather than when they are entered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45b75823c55d8218979c87efd326a30b99d5341" translate="yes" xml:space="preserve">
          <source>Adding Shared Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474d40db0ddeac1b2a8f15efaa569bdb7394c2a2" translate="yes" xml:space="preserve">
          <source>Adding newlines visibly separates the return statements from the previous lines, making it clear where the function exits and what value it returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21fc61dc4820e7abd9d84a4d1d6ad03d3036bb0" translate="yes" xml:space="preserve">
          <source>Adding the second &lt;code&gt;bar&lt;/code&gt; in the above example is optional. If you leave off the function name then when the function throws an exception you are likely to get something similar to &lt;code&gt;anonymous function&lt;/code&gt; in the stack trace. If you provide the optional name for a function expression then you will get the name of the function expression in the stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e15f7cd7c678492038a3fb0df79c3d8a550be82" translate="yes" xml:space="preserve">
          <source>Additional empty lines may be inserted to group related properties or otherwise improve readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a56d991b0497bc7202cd311488f3455e1fb7855" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;context.getScope()&lt;/code&gt; incorrectly returned the parent scope of the proper scope on &lt;code&gt;CatchClause&lt;/code&gt; (in ES5), &lt;code&gt;ForStatement&lt;/code&gt; (in ≧ES2015), &lt;code&gt;ForInStatement&lt;/code&gt; (in ≧ES2015), &lt;code&gt;ForOfStatement&lt;/code&gt;, and &lt;code&gt;WithStatement&lt;/code&gt; nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71b0e551b8a05566bb571b697959c043848b0db" translate="yes" xml:space="preserve">
          <source>Additionally, arrow functions are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ad21267e1505f504ad3b64cf80fe8e17376b42" translate="yes" xml:space="preserve">
          <source>Additionally, if you are using &lt;code&gt;context.ecmaFeatures&lt;/code&gt; inside of your rules, then you'll need to update your code in the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b72b358b52f3185d5a6b610477da5e25ee339c" translate="yes" xml:space="preserve">
          <source>Additionally, if you intend to access large array indices directly, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb5d082a2557226722f3bf4035b8c0c5d988b88" translate="yes" xml:space="preserve">
          <source>Additionally, if you see new errors for &lt;code&gt;global&lt;/code&gt; comments in your code, you should remove those comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b39469792bfaba2ecb3083fe90ffe26058b9029" translate="yes" xml:space="preserve">
          <source>Additionally, objects can have properties that shadow the builtins on &lt;code&gt;Object.prototype&lt;/code&gt;, potentially causing unintended behavior or denial-of-service security vulnerabilities. For example, it would be unsafe for a webserver to parse JSON input from a client and call &lt;code&gt;hasOwnProperty&lt;/code&gt; directly on the resulting object, because a malicious client could send a JSON value like &lt;code&gt;{&quot;hasOwnProperty&quot;: 1}&lt;/code&gt; and cause the server to crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4b3925054b433c5116e43fc5991fd0d16a8d04" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;context&lt;/code&gt; object has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c87778f3cc603b2fb143ad17fcf5c72a8f9a63" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;sourceCode&lt;/code&gt; object now also has &lt;code&gt;sourceCode.getCommentsInside()&lt;/code&gt; (which returns all the comments inside a node), &lt;code&gt;sourceCode.getAllComments()&lt;/code&gt; (which returns all the comments in the file), and allows comments to be accessed through various other token iterator methods (such as &lt;code&gt;getTokenBefore()&lt;/code&gt; and &lt;code&gt;getTokenAfter()&lt;/code&gt;) with the &lt;code&gt;{ includeComments: true }&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955a15f42c7d00c744259f3cde915b716c8035f8" translate="yes" xml:space="preserve">
          <source>Additionally, the following rule has been &lt;em&gt;removed&lt;/em&gt; from &lt;code&gt;eslint:recommended&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813d924654bdcea721c482bee96ad4a150a5affe" translate="yes" xml:space="preserve">
          <source>Additionally, the rule accepts an optional object option with an &lt;code&gt;&quot;overrides&quot;&lt;/code&gt; key. This can be used to specify a location for particular statements that override the default. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fd36ee79b3c753873be3e875d89e688ed0058a" translate="yes" xml:space="preserve">
          <source>Additionally, the rule takes an optional object configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ee2d95f84d63e0488662b62e6f527cc3ee9e35" translate="yes" xml:space="preserve">
          <source>Additionally, this rule allows further configurability via overrides per function type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf52d0223b860a65d967da5e42817e7f5e564102" translate="yes" xml:space="preserve">
          <source>Adhere to the &lt;a href=&quot;new-rules#core-rule-guidelines&quot;&gt;Core Rule Guidelines&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed051adea84f976f94ec5df3e8c5e5ea11fec6fc" translate="yes" xml:space="preserve">
          <source>Adjust &lt;code&gt;maxItems&lt;/code&gt; by subtracting 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6a7a39ce6f2107737b7821e6cfbfb519b1b47d" translate="yes" xml:space="preserve">
          <source>Adjust &lt;code&gt;minItems&lt;/code&gt; from 1 to 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8d480c5ed2f86d6a0f15310e0eda94ae41bd4b" translate="yes" xml:space="preserve">
          <source>After a rule has been deprecated, the team will no longer do any work on it. This includes bug fixes, enhancements, and updates to the rule's documentation. Issues and pull requests related to deprecated rule will not be accepted and will be closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8391a640da107879132ab537ce183095c10f9e" translate="yes" xml:space="preserve">
          <source>After rebasing, be sure to run all of the tests once again to make sure nothing broke:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6110b5332caa86a14f380ec237c4258e5ec6e3a9" translate="yes" xml:space="preserve">
          <source>After running &lt;code&gt;eslint --init&lt;/code&gt;, you'll have a &lt;code&gt;.eslintrc&lt;/code&gt; file in your directory. In it, you'll see some rules configured like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8faac586a3ebc8cdb26c6cc7a57c27e0364800" translate="yes" xml:space="preserve">
          <source>After that, you can run ESLint on any file or directory like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d757cb6f51d9c5e443378778cc41cdf3b2c5c8b" translate="yes" xml:space="preserve">
          <source>After that, you're ready to start working on code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c30fe94a928157a94135acef729424ab12ea31" translate="yes" xml:space="preserve">
          <source>All ECMAScript 6 &lt;code&gt;ecmaFeatures&lt;/code&gt; flags have been removed in favor of a &lt;code&gt;ecmaVersion&lt;/code&gt; property under &lt;code&gt;parserOptions&lt;/code&gt; that can be set to 3, 5 (default), or 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27168471545ed29e71d31a94a211caecdf8e0715" translate="yes" xml:space="preserve">
          <source>All Rules Off by Default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21415cf206ac89c1ae9a5902f7fa084ec28c3c4e" translate="yes" xml:space="preserve">
          <source>All binary operators except dot (&lt;code&gt;.&lt;/code&gt;) should be separated from their operands by spaces. Blank spaces should never separate unary operators such as unary minus, increment (&lt;code&gt;++&lt;/code&gt;), and decrement (&lt;code&gt;--&lt;/code&gt;) from their operands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04e4bad4ab494fa9ae0caae96f8d872ba006651" translate="yes" xml:space="preserve">
          <source>All changes must be accompanied by tests, even if the feature you're working on previously had no tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fac9209227848cd5c566c056688fcbfeba1b6ec" translate="yes" xml:space="preserve">
          <source>All four options must be specified in the array, but you can customize their order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5c8e84361b28f241a1b31c82fca23efdb68a0d" translate="yes" xml:space="preserve">
          <source>All instances that should be flagged as warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a3c57a313f8a6f509ff9d3ffc36567771fb975" translate="yes" xml:space="preserve">
          <source>All nodes must have &lt;code&gt;range&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bc8a2ef6d842f8d4078628bf71b055989417cb" translate="yes" xml:space="preserve">
          <source>All nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380e6fbca39fdfd46a99f90e48d35959e1edf1ee" translate="yes" xml:space="preserve">
          <source>All of the above methods also work for plugin rules. For example, to disable &lt;code&gt;eslint-plugin-example&lt;/code&gt;'s &lt;code&gt;rule-name&lt;/code&gt; rule, combine the plugin's name (&lt;code&gt;example&lt;/code&gt;) and the rule's name (&lt;code&gt;rule-name&lt;/code&gt;) into &lt;code&gt;example/rule-name&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86729b4f455fbcd7ffc0551c382021ba83dc3f7" translate="yes" xml:space="preserve">
          <source>All of these options give you fine-grained control over how ESLint treats your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b981df969032075eba25dbbe4f15f91c780d355d" translate="yes" xml:space="preserve">
          <source>All user-facing changes must be accompanied by appropriate documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ed9c633f11b7ae73f9eb30856004c5aa615a9d" translate="yes" xml:space="preserve">
          <source>All variables should be declared before they are used. Variable declarations should take place at the beginning of a function using a single &lt;code&gt;var&lt;/code&gt; statement with one variable per line. All lines after the first should be indented one level so the variable names line up. Variables should be initialized when declared if applicable and the equals operator should be at a consistent indentation level. Initialized variables should come first followed by uninitialized variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c0a91ce7688529b69563047855933d8f3fb1e8" translate="yes" xml:space="preserve">
          <source>Alphabetical list is maintained starting from the first variable and excluding any that are considered problems. So the following code will produce two problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2942eb64d68ab38cec3ef47c24c9ccfc2f1d7e6b" translate="yes" xml:space="preserve">
          <source>Also note in the above examples that if you switch a method to a static method, &lt;em&gt;instances&lt;/em&gt; of the class that call the static method (&lt;code&gt;let a = new A(); a.sayHi();&lt;/code&gt;) have to be updated to being a static call (&lt;code&gt;A.sayHi();&lt;/code&gt;) instead of having the instance of the &lt;em&gt;class&lt;/em&gt; call the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f8d2e506fae97d44675fd599bec988987ee20c" translate="yes" xml:space="preserve">
          <source>Also, this rule does not disallow duplicate keys in object literals and class definitions, and in certain cases with duplicate keys might not report a missing pair for a getter/setter, like in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5391918dbef9fd9c4d7cea0937d59ade63a7af6" translate="yes" xml:space="preserve">
          <source>Also, this rule does not report any warnings for properties that have duplicate getters or setters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6915f039925c6757b027241cf12e316770686bea" translate="yes" xml:space="preserve">
          <source>Alternate object option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c5ca112da18ace260ba6bb33f4d3c4cc7dca10" translate="yes" xml:space="preserve">
          <source>Alternative: Creating Your Own Rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b49ead1c63a69fdf7a8fef1d4e4527b0f4cbb6" translate="yes" xml:space="preserve">
          <source>Alternatively, the rule also accepts objects, where the global name and an optional custom message are specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ea439ae2fc25b1a8e4dc3f7821000550fb475e" translate="yes" xml:space="preserve">
          <source>Alternatively, the rule also accepts objects, where the selector and an optional custom message are specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42388818dce26fe88593798136ce9a613cefe72" translate="yes" xml:space="preserve">
          <source>Alternatively, you can relax the rule to allow brace-less single-line &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt;, while still enforcing the use of curly braces for other instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86c240750580618ea8e68ab3ee67459999fb917" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use separate configurations for different assignment types. It accepts 2 other keys instead of &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9170b524599785b7c0aeb65895885be13571ba" translate="yes" xml:space="preserve">
          <source>Alternatively, you may specify a single integer for the &lt;code&gt;max&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7925c2ccec5e609c97b9e24b12ce869df70db789" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;let b&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement is before the &lt;em&gt;function&lt;/em&gt; declaration in the outer scope, it is incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866f243570c8f44641b36ea00e456d84d75ed160" translate="yes" xml:space="preserve">
          <source>Although ASI allows for more freedom over your coding style, it can also make your code behave in an unexpected way, whether you use semicolons or not. Therefore, it is best to know when ASI takes place and when it does not, and have ESLint protect your code from these potentially unexpected cases. In short, as once described by Isaac Schlueter, a &lt;code&gt;\n&lt;/code&gt; character always ends a statement (just like a semicolon) unless one of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f299f7bd27b6590317d120fdc51aa0f781de8e" translate="yes" xml:space="preserve">
          <source>Although it's possible to wrap functions in parentheses, this can be confusing when the code also contains immediately-invoked function expressions (IIFEs) since parentheses are often used to make this distinction. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d405c574edf2eaca4756329796edd9539cb601" translate="yes" xml:space="preserve">
          <source>Although not a syntax error, this format for numbers can make it difficult to distinguish between true decimal numbers and the dot operator. For this reason, some recommend that you should always include a number before and after a decimal point to make it clear the intent is to create a decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81d773bf08a95ef47ad02f669bebf58abfe87c3" translate="yes" xml:space="preserve">
          <source>Although possible, there aren't any good reasons to use these primitive wrappers as constructors. They tend to confuse other developers more than anything else because they seem like they should act as primitives, but they do not. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8a9fd5b3850b78355ba59c0786ce342032800d" translate="yes" xml:space="preserve">
          <source>Although this code might seem like an error, it actually works fine because JavaScript engines hoist the &lt;code&gt;function&lt;/code&gt; declarations to the top of the scope. That means this code is treated as if the declaration came before the invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5553a9fdd742079120793eebc8d2221f6b891b20" translate="yes" xml:space="preserve">
          <source>Always declare variables. Implied globals should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a7f009f495f80e7285c15fc4b4b3893ec6f362" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;extends&lt;/code&gt; property value &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt; enables a subset of core rules that report common problems, which have a check mark  on the &lt;a href=&quot;../rules/index&quot;&gt;rules page&lt;/a&gt;. The recommended subset can change only at major versions of ESLint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0008c8dec87379b7985a8a544d103acfceac72e" translate="yes" xml:space="preserve">
          <source>An Open Letter to JavaScript Leaders Regarding Semicolons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6dfcf2a1b3453d2a0633aaf0e9c90f54b4a3cdf" translate="yes" xml:space="preserve">
          <source>An array of numbers to ignore. It's set to &lt;code&gt;[]&lt;/code&gt; by default. If provided, it must be an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0a90c8970e8cd98eda8ee49e8140bb8398cb04" translate="yes" xml:space="preserve">
          <source>An array which includes &lt;code&gt;fixing&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8611b9d9e5eaae2d252753440448d3feefcb89" translate="yes" xml:space="preserve">
          <source>An arrow function body can contain an implicit return as an expression instead of a block body. It can be useful to enforce a consistent location for the implicitly returned expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1884bdfcf4455f7e0f018c484d212b780f99886e" translate="yes" xml:space="preserve">
          <source>An environment defines global variables that are predefined. The available environments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a993a714edad4c590ac5d9867159330b64ddc2c" translate="yes" xml:space="preserve">
          <source>An example configuration, with the defaults &lt;code&gt;VariableDeclarator&lt;/code&gt; and &lt;code&gt;AssignmentExpression&lt;/code&gt; filled in, looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341d56c5d6e304784de6633b08d9af06d30d0708" translate="yes" xml:space="preserve">
          <source>An example configuration, with the defaults &lt;code&gt;array&lt;/code&gt; and &lt;code&gt;object&lt;/code&gt; filled in, looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6f63391e9d21a63c3ea41d1ba8a96a2efd4e1d" translate="yes" xml:space="preserve">
          <source>An example configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23f10e88a66188c21919014d33eeac201e7bb6e" translate="yes" xml:space="preserve">
          <source>An example of a configuration with overrides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d36764ba33569671f7edfa7cc1e47cbf393760a" translate="yes" xml:space="preserve">
          <source>An example of shorthand configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7033976c72e3e35c02fd8336248a55e6ab23e1eb" translate="yes" xml:space="preserve">
          <source>An example use case is to enforce comma style &lt;em&gt;only&lt;/em&gt; in var statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddab7ddd0688573b5d9e27e8a285815d7261f07" translate="yes" xml:space="preserve">
          <source>An invalid pattern in a regular expression literal is a &lt;code&gt;SyntaxError&lt;/code&gt; when the code is parsed, but an invalid string in &lt;code&gt;RegExp&lt;/code&gt; constructors throws a &lt;code&gt;SyntaxError&lt;/code&gt; only when the code is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b476bef9567eb94c0088de30121faf7682d5623a" translate="yes" xml:space="preserve">
          <source>An iterable object which enumerates &lt;code&gt;fixing&lt;/code&gt; objects. Especially, the &lt;code&gt;fix()&lt;/code&gt; function can be a generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438d78e8f508d8dd7a89428814b76d0adf68590c" translate="yes" xml:space="preserve">
          <source>An npm-installed formatter is resolved with or without &lt;code&gt;eslint-formatter-&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17d5deba51ad9da3d6d69e9127834d43c91175f" translate="yes" xml:space="preserve">
          <source>An object containing &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;invalid&lt;/code&gt; properties, each of which is an array containing test cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f65760ab68396ff18ca2c5e2cf5d15f9c0728d5" translate="yes" xml:space="preserve">
          <source>An object literal may be used as a third array item to specify exceptions, with the key &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; and an array as the value. These exceptions work in the context of the first option. That is, if &lt;code&gt;&quot;always&quot;&lt;/code&gt; is set to enforce spacing, then any &quot;exception&quot; will &lt;em&gt;disallow&lt;/em&gt; spacing. Conversely, if &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set to disallow spacing, then any &quot;exception&quot; will &lt;em&gt;enforce&lt;/em&gt; spacing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e32a74ed5fb1438e5b7dc7286797ba7ef696aba" translate="yes" xml:space="preserve">
          <source>An object literal may be used as a third array item to specify spacing exceptions. These exceptions work in the context of the first option. That is, if &lt;code&gt;&quot;always&quot;&lt;/code&gt; is set to enforce spacing and an exception is set to &lt;code&gt;false&lt;/code&gt;, it will disallow spacing for cases matching the exception. Likewise, if &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set to disallow spacing and an exception is set to &lt;code&gt;true&lt;/code&gt;, it will enforce spacing for cases matching the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b176eca1a5e1018132cb2364182412c12d16e9d" translate="yes" xml:space="preserve">
          <source>An object that further controls the behavior of this rule. Currently, the only available parameter is &lt;code&gt;ignoreForLoopInit&lt;/code&gt;, which indicates if initialization at declaration is allowed in &lt;code&gt;for&lt;/code&gt; loops when &lt;code&gt;&quot;never&quot;&lt;/code&gt; is set, since it is a very typical use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f218533f4fe1fb32f27068a4f20c9c3a16dfc3" translate="yes" xml:space="preserve">
          <source>An unused expression which has no effect on the state of the program indicates a logic error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d4259045d26d22175e3f8251cfe300e5d181b6" translate="yes" xml:space="preserve">
          <source>And above of typed arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2f05944f009f34fb2b41b47c60459ed7da7240" translate="yes" xml:space="preserve">
          <source>And in YAML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a25dc5ee33e69f8b75c5fcba0c9db10f8928e94" translate="yes" xml:space="preserve">
          <source>And the &lt;a href=&quot;https://www.ecma-international.org/ecma-262/8.0/index.html#sec-atomics-object&quot;&gt;ECMAScript 2017 specification&lt;/a&gt; makes it clear that &lt;code&gt;Atomics&lt;/code&gt; cannot be invoked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dc9d622e3015b6bfa8811e104b85bb8205e25f" translate="yes" xml:space="preserve">
          <source>And the option has shorthand as a string keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9777a1e6d65b67eb72edafff1e10fe081003864e" translate="yes" xml:space="preserve">
          <source>And then you run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25ceb4859dadbd732ae104b9a92498a1e1db184" translate="yes" xml:space="preserve">
          <source>And then you would modify your configuration file like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775bd2afb33b18dbf1a41f0531b3507d20a625e6" translate="yes" xml:space="preserve">
          <source>And this rule allows &lt;code&gt;this&lt;/code&gt; keywords in functions below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591268d3d3fe5a72c8827ac84ee70b58e8c3d3e2" translate="yes" xml:space="preserve">
          <source>Annotated ES5 &amp;sect;7.8.5 - Regular Expression Literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e28c8818d9491b3223341a49c734105d436df1" translate="yes" xml:space="preserve">
          <source>Annotated ES5 - &amp;sect;15.1.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1483aa9f00c4b4bb5c32564c963065a2f0a0e12" translate="yes" xml:space="preserve">
          <source>Annotated ES5 - Annex C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8565a92875ea54b3f07cae6ab323d0096e5706" translate="yes" xml:space="preserve">
          <source>Anonymous functions may be used for assignment of object methods or as arguments to other functions. There should be no space between the &lt;code&gt;function&lt;/code&gt; keyword and the opening parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ad37defa448472e1ebec233962bd2d574a8d79" translate="yes" xml:space="preserve">
          <source>Another argument in favor of this style is that it improves the clarity of diffs when something in the method chain is changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284affa5f5f9ddb144dedea5ee6895aafa4a76f6" translate="yes" xml:space="preserve">
          <source>Another benefit of this rule is specificity of diffs when a property is changed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68caf686c329b469a32cc27f694bcc136b6f4a77" translate="yes" xml:space="preserve">
          <source>Another case where you might not use this rule is if you want to enforce console calls and not console overwrites. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3390320f4be3c19e524e28b23472d6dbb6cc689f" translate="yes" xml:space="preserve">
          <source>Another common case is to minify code as &lt;code&gt;void 0&lt;/code&gt; is shorter than &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332efd74927ce8d1c939228b31fa1aaaba97f93a" translate="yes" xml:space="preserve">
          <source>Another common mistake is using a single variable as both the conditional test and the consequent. In such cases, the logical &lt;code&gt;OR&lt;/code&gt; can be used to provide the same functionality. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b5fcb5558eb477f24af2cd32b33af9f5ee37f2" translate="yes" xml:space="preserve">
          <source>Another common use case for this option is in combination with &lt;code&gt;{ &quot;properties&quot;: &quot;never&quot; }&lt;/code&gt;, when the identifier is intended to be used only as a property shorthand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58af9b94d3f9837624df663f80036dcc5b7e920a" translate="yes" xml:space="preserve">
          <source>Another example where quotes do matter is when using numeric literals as property keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1e1b0f8401d2b1c59b0f126cfa628ec7627bf2" translate="yes" xml:space="preserve">
          <source>Another solution would be to avoid using a mutable variable reference at all:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d60372e402e0715e69db2e70551f8dd90a5d6e9" translate="yes" xml:space="preserve">
          <source>Another style is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style#Allman_style&quot;&gt;Allman&lt;/a&gt;, in which all the braces are expected to be on their own lines without any extra indentation. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a768a020f736c807eb3cee1ca2d1f14df684e7" translate="yes" xml:space="preserve">
          <source>Any additional properties of a test case will be passed directly to the linter as config options. For example, a test case can have a &lt;code&gt;parserOptions&lt;/code&gt; property to configure parser behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983552f9535f5fc056ba05e9fc491ecb6b8e9856" translate="yes" xml:space="preserve">
          <source>Any file that follows the standard ignore file format can be used. Keep in mind that specifying &lt;code&gt;--ignore-path&lt;/code&gt; means that any existing &lt;code&gt;.eslintignore&lt;/code&gt; file will not be used. Note that globbing rules in &lt;code&gt;.eslintignore&lt;/code&gt; follow those of &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf92fd782072e232ee87ae387b92f10f733a45f" translate="yes" xml:space="preserve">
          <source>Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a &lt;code&gt;/*global ...*/&lt;/code&gt; comment, or specified in the &lt;a href=&quot;../user-guide/configuring#specifying-globals&quot;&gt;&lt;code&gt;globals&lt;/code&gt; key in the configuration file&lt;/a&gt;. A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb559fa969f749523424421aa9513fbc4bbf59e" translate="yes" xml:space="preserve">
          <source>Anyone not yet in an ES6 environment would not want to apply this rule. Others may find the terseness of the shorthand syntax harder to read and may not want to encourage it with this rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301c21f7a6fb57bce654e5a9d38ef620e86123d7" translate="yes" xml:space="preserve">
          <source>Anything above Node.js 11.10.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abfe4f65f0647e4ea0c5ac4810e9e579b855636" translate="yes" xml:space="preserve">
          <source>Anything above Node.js 9.10.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22274513fcf59b01e075e91572dcaa215b399d2" translate="yes" xml:space="preserve">
          <source>Applying Fixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b040b4179b8b00702858fdb4c1afec3d6d284509" translate="yes" xml:space="preserve">
          <source>Architecture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98436c6de89d4b1603f1e667da6c73ef406ed052" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators: &lt;code&gt;&quot;+&quot;&lt;/code&gt;, &lt;code&gt;&quot;-&quot;&lt;/code&gt;, &lt;code&gt;&quot;*&quot;&lt;/code&gt;, &lt;code&gt;&quot;/&quot;&lt;/code&gt;, &lt;code&gt;&quot;%&quot;&lt;/code&gt;, &lt;code&gt;&quot;**&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ef048c871e9426c677ce4026bf612fcbcc2927" translate="yes" xml:space="preserve">
          <source>ArrayExpression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69ad151738c1fc440c6c498b7fc67ee1775b2df" translate="yes" xml:space="preserve">
          <source>Arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;) are similar in syntax to some comparison operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;). This rule warns against using the arrow function syntax in places where a condition is expected. Even if the arguments of the arrow function are wrapped with parens, this rule still warns about it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3b43a8931184e9ca69c21c5bd72b49ed93b1e7" translate="yes" xml:space="preserve">
          <source>Arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;) are similar in syntax to some comparison operators (&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;). This rule warns against using the arrow function syntax in places where it could be confused with a comparison operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd0c70c044d2f23664b1c4327d9b79430062401" translate="yes" xml:space="preserve">
          <source>Arrow functions can be an attractive alternative to function expressions for callbacks or function arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6cdc713a515de0161d2398e627f9ccf2d292b7" translate="yes" xml:space="preserve">
          <source>Arrow functions can omit parentheses when they have exactly one parameter. In all other cases the parameter(s) must be wrapped in parentheses. This rule enforces the consistent use of parentheses in arrow functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86962e3d2106eae0514d3ca150fcb521360f7e33" translate="yes" xml:space="preserve">
          <source>Arrow functions have two syntactic forms for their function bodies. They may be defined with a &lt;em&gt;block&lt;/em&gt; body (denoted by curly braces) &lt;code&gt;() =&amp;gt; { ... }&lt;/code&gt; or with a single expression &lt;code&gt;() =&amp;gt; ...&lt;/code&gt;, whose value is implicitly returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad88ac6681f3fba161f8f17b35402682ae6dfd20" translate="yes" xml:space="preserve">
          <source>As a result, it was difficult for an integration to distinguish between the two cases to determine whether it should try to extract linting results from the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef53b4059e20deb2e5c46250f59e175341842d1" translate="yes" xml:space="preserve">
          <source>As a rule of thumb: With ESLint v6, plugins should always be installed locally, even if ESLint was installed globally. More precisely, ESLint v6 resolves plugins relative to the end user's project by default, and always resolves shareable configs and parsers relative to the location of the config file that imports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ac2a5d22276a18b4b5cf02e2da7daf5734ca95f" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use the &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; and &lt;a href=&quot;no-shadow-restricted-names&quot;&gt;no-shadow-restricted-names&lt;/a&gt; rules to prevent &lt;code&gt;undefined&lt;/code&gt; from being shadowed or assigned a different value. This ensures that &lt;code&gt;undefined&lt;/code&gt; will always hold its original, expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfabdafd218d7722aa287977e6776b77c7c9d117" translate="yes" xml:space="preserve">
          <source>As an example, let's assume you're using the package name &lt;code&gt;eslint-config-myconfig&lt;/code&gt; and your package looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e03fe02a8a4faab337d273cf85be225f6274838" translate="yes" xml:space="preserve">
          <source>As an example, suppose that you are using the &lt;code&gt;airbnb&lt;/code&gt; preset, so your &lt;code&gt;.jscsrc&lt;/code&gt; file looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92656dee77e92e2cde09e2ed85c732113bec847a" translate="yes" xml:space="preserve">
          <source>As an example, you can create a file called &lt;code&gt;my-special-config.js&lt;/code&gt; in the root of your npm package and export a config, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab00035935ca3b0baf7ecef1d9105a1cc7f8bbf3" translate="yes" xml:space="preserve">
          <source>As announced in &lt;a href=&quot;https://eslint.org/blog/2016/10/eslint-v3.8.0-released#additional-property-on-linting-results&quot;&gt;October 2016&lt;/a&gt;, the &lt;code&gt;source&lt;/code&gt; property has been removed from individual lint message objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc89e27f98a865cd56617be1e005e0fbabcceb74" translate="yes" xml:space="preserve">
          <source>As another example, you can disallow calls to &lt;code&gt;require()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35711e725121bb4daddca1b88df5389087578f01" translate="yes" xml:space="preserve">
          <source>As far as naming conventions for identifiers go, dangling underscores may be the most polarizing in JavaScript. Dangling underscores are underscores at either the beginning or end of an identifier, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359ddf699fe41e18d17c5cee4d7389854514dd09" translate="yes" xml:space="preserve">
          <source>As illustrated above, the &lt;code&gt;--fix&lt;/code&gt; option, applied to this rule, does not comply with other rules, such as &lt;code&gt;indent&lt;/code&gt;, but, if those other rules are also in effect, the option applies them, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c22f0243a6ef055657c0b394805c35de30c0bb" translate="yes" xml:space="preserve">
          <source>As long as you do not explicitly disallow empty parentheses using the &lt;code&gt;&quot;empty&quot;&lt;/code&gt; exception , &lt;code&gt;()&lt;/code&gt; will be allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36031e157974d6e4e95c8577f6c65001ba72eb53" translate="yes" xml:space="preserve">
          <source>As noted above, don't try to conform to user-defined styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6997d9f9481d3aa449f1f150ecff4a38d74cd109" translate="yes" xml:space="preserve">
          <source>As of April 2019, Node.js 6 will be at EOL and will no longer be receiving security updates. As a result, we have decided to drop support for it in ESLint v6. We now support the following versions of Node.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e4d215a9b1053a82c1c3667c7e83f450b7e535" translate="yes" xml:space="preserve">
          <source>As of April 30th, 2018, Node.js 4 will be at EOL and will no longer be receiving security updates. As a result, we have decided to drop support for it in ESLint v5. We now support the following versions of Node.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639737c9a0fcdaaf4de4d62a4eb3832bf70ec145" translate="yes" xml:space="preserve">
          <source>As of the ECMAScript 5 specification, octal escape sequences in string literals are deprecated and should not be used. Unicode escape sequences should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f796d7f3a3af24d75131206d0abc1c2fc320e4" translate="yes" xml:space="preserve">
          <source>As of today there is no consistency in separating variable declarations from the rest of the code. Some developers leave an empty line between var statements and the rest of the code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919575f3efa6c0f02be94e623198fe4b3f3858de" translate="yes" xml:space="preserve">
          <source>As with other operators, whitespace is allowed between the rest or spread operator and the expression it is operating on, which can lead to inconsistent spacing within a codebase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc322d290b8282a3ec6a0dcc7758c4cf606caee" translate="yes" xml:space="preserve">
          <source>Assignment to variables declared as function parameters can be misleading and lead to confusing behavior, as modifying function parameters will also mutate the &lt;code&gt;arguments&lt;/code&gt; object. Often, assignment to function parameters is unintended and indicative of a mistake or programmer error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057d58c74d80136578cabbeee1b89206c3250bd4" translate="yes" xml:space="preserve">
          <source>Assignments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6a96371479cd831de3c86df48d3f84797d4f2d" translate="yes" xml:space="preserve">
          <source>Asynchronous functions are designed to work with promises such that throwing an error will cause a promise's rejection handler (such as &lt;code&gt;catch()&lt;/code&gt;) to be called. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9edce612edcef785910f3d8c06b7cc17be832d" translate="yes" xml:space="preserve">
          <source>Asynchronous functions in JavaScript behave differently than other functions in two important ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07b283087747dcb783d2c5638a96fb74be3a055" translate="yes" xml:space="preserve">
          <source>Asynchronous functions that don't use &lt;code&gt;await&lt;/code&gt; might not need to be asynchronous functions and could be the unintentional result of refactoring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495cf70b3cb0e5d5ab7aca92fdf16ff61b730e2a" translate="yes" xml:space="preserve">
          <source>At a high level, there are a few key parts to ESLint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621a7b37086b2293090e367d567f731b096f33e9" translate="yes" xml:space="preserve">
          <source>At least one pattern that should &lt;strong&gt;not&lt;/strong&gt; be flagged as a warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceaa0640f64b301c62702fc1f3dbd78d5989a7d3" translate="yes" xml:space="preserve">
          <source>At the end of a line, describing the code before it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ebf06181ae179602daa4a6f7199df15311cc04" translate="yes" xml:space="preserve">
          <source>Atom: &lt;a href=&quot;https://atom.io/packages/linter-eslint&quot;&gt;linter-eslint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cddfb1d29a73864682c265654bb0f2ef5476d3" translate="yes" xml:space="preserve">
          <source>Avoid any fixes that could change the runtime behavior of code and cause it to stop working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306c84fc19df225b2358435f3ea8025274a539d7" translate="yes" xml:space="preserve">
          <source>BackboneJS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f6864f9d968127a39d6137bd517abb38085639" translate="yes" xml:space="preserve">
          <source>Bad Parts: Appendix B - JavaScript: The Good Parts by Douglas Crockford</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d235dc23d56ee7523bf4a3040b040809b5d9d05" translate="yes" xml:space="preserve">
          <source>Bad names can lead to hard-to-decipher code. Generic names, such as &lt;code&gt;data&lt;/code&gt;, don't infer much about the code and the values it receives. This rule allows you to configure a blacklist of bad identifier names, that you don't want to see in your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e3efa2edac0571ee67321d4540c6b50542b0b5" translate="yes" xml:space="preserve">
          <source>Balancing the trade-offs of improving a tool and the frustration these changes can cause is a difficult task. One key area in which this affects our users is in the removal of rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6c27b74b2f0cc0a381a8c3c2e72f8e524c139f" translate="yes" xml:space="preserve">
          <source>Base config: &lt;code&gt;&quot;eqeqeq&quot;: [&quot;error&quot;, &quot;allow-null&quot;]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9860705f28896b947024df2984725f09dd6c922e" translate="yes" xml:space="preserve">
          <source>Base config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;, &quot;avoid-escape&quot;]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c41688b96ebca8546b978b079367e1aa359e74" translate="yes" xml:space="preserve">
          <source>Basic configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01687ec15ad6446d986f944c334f8c817b38eb6c" translate="yes" xml:space="preserve">
          <source>Basically, this rule checks whether or not a function containing &lt;code&gt;this&lt;/code&gt; keyword is a constructor or a method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7d13a9632df81e6cb39ca5e79cc4662290eec7" translate="yes" xml:space="preserve">
          <source>Be general enough so as to apply for a large number of developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bbf1337c47348353685759495b7a45014d286e" translate="yes" xml:space="preserve">
          <source>Be important enough that rule is deemed incomplete without this change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b55e25ea090a046d084a971240dfd3507ebe89" translate="yes" xml:space="preserve">
          <source>Be sure to replace &lt;code&gt;eslint-config-myconfig&lt;/code&gt; with the actual name of your module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea22322c908aaf33db86bfe16cff237c8212ad5" translate="yes" xml:space="preserve">
          <source>Be sure to replace the value of &lt;code&gt;&quot;no-with&quot;&lt;/code&gt; with your rule's ID. There are plenty of examples in the &lt;code&gt;tests/lib/rules/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18aedaaa28198e2a59dec8437406e3c102dd1605" translate="yes" xml:space="preserve">
          <source>Be sure to run this after making changes and before sending a pull request with your changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bc61c6b074f9a10af3f6c5c9591384318e3d81" translate="yes" xml:space="preserve">
          <source>Be very important for ESLint users because it either catches a serious problem or allows styling of code in accordance with a popular style guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810e6eb159bb09246263948760aa70f2100cfe2c" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;NaN&lt;/code&gt; is unique in JavaScript by not being equal to anything, including itself, the results of comparisons to &lt;code&gt;NaN&lt;/code&gt; are confusing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df824196b86c8adee95b01269bc5eeb40dedbe4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;let a&lt;/code&gt; and &lt;code&gt;let b&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement are before the declarations in the outer scope, they are correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0497ce3d58dfa25f479c41ca69d85c12b0f4d4" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;let a&lt;/code&gt; in the &lt;code&gt;if&lt;/code&gt; statement is before the &lt;em&gt;variable&lt;/em&gt; declaration in the outer scope, it is correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b065ee83f0fe8d1c0b2ce8c11b0d2e7f30c46b" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;undefined&lt;/code&gt; can be overwritten or shadowed, reading &lt;code&gt;undefined&lt;/code&gt; can give an unexpected value. (This is not the case for &lt;code&gt;null&lt;/code&gt;, which is a keyword that always produces the same value.) To guard against this, you can avoid all uses of &lt;code&gt;undefined&lt;/code&gt;, which is what some style guides recommend and what this rule enforces. Those style guides then also recommend:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6961b1fc4ead961a35ac6fe169d9c4f639c4f8" translate="yes" xml:space="preserve">
          <source>Because ESLint knows to look for packages beginning with &lt;code&gt;eslint-formatter-&lt;/code&gt; when the specified formatter doesn't begin with a dot, there is no need to type &lt;code&gt;eslint-formatter-&lt;/code&gt; when using a packaged custom formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc7dc53a3528436b27976bf4104d8d5429b3eba" translate="yes" xml:space="preserve">
          <source>Because empty character classes in regular expressions do not match anything, they might be typing mistakes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193c90e929807d2fbef26a901a7c3ae14756f0af" translate="yes" xml:space="preserve">
          <source>Because it is difficult to understand the meaning of a program through static analysis, this rule has limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8356d791c997a2386c33d523d57552d8123e0b" translate="yes" xml:space="preserve">
          <source>Because of historical reason, JavaScript regular expressions are tolerant of syntax errors. For example, &lt;code&gt;/\w{1, 2/&lt;/code&gt; is a syntax error, but JavaScript doesn't throw the error. It matches strings such as &lt;code&gt;&quot;a{1, 2&quot;&lt;/code&gt; instead. Such a recovering logic is defined in Annex B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829485c20f3847468a65057a424a82114baf209a" translate="yes" xml:space="preserve">
          <source>Because of this ambiguity, it's considered a best practice to not use assignment in &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdcdf38242a7e8f4d4fcd5fc5368730a95fbd82" translate="yes" xml:space="preserve">
          <source>Because of this line, all of the rules marked &quot;&quot; on the &lt;a href=&quot;https://eslint.org/docs/rules&quot;&gt;rules page&lt;/a&gt; will be turned on. Alternatively, you can use configurations that others have created by searching for &quot;eslint-config&quot; on &lt;a href=&quot;https://www.npmjs.com/search?q=eslint-config&quot;&gt;npmjs.com&lt;/a&gt;. ESLint will not lint your code unless you extend from a shared configuration or explicitly turn rules on in your configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58cd425c976939ecd82b2995c639212a60ad578" translate="yes" xml:space="preserve">
          <source>Because rules are highly personal (and therefore very contentious), accepted rules should:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ee4e3ecc629da796061aa811a204b0d0ede953" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, and &lt;code&gt;continue&lt;/code&gt; statements unconditionally exit a block of code, any statements after them cannot be executed. Unreachable statements are usually a mistake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96acc830fffba196b06148e83e6c35be6a3547ca" translate="yes" xml:space="preserve">
          <source>Because the default formatter does not output the fixed code, you'll have to use another one (e.g. &lt;code&gt;json&lt;/code&gt;) to get the fixes. Here's an example of this pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2268244767d0a8979d97ea56564f6062501bc559" translate="yes" xml:space="preserve">
          <source>Because the leading zero which identifies an octal literal has been a source of confusion and error in JavaScript code, ECMAScript 5 deprecates the use of octal numeric literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c82248abc6dfee06debb73cfce89a8e4f795a1b" translate="yes" xml:space="preserve">
          <source>Because the unary &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; operators are subject to automatic semicolon insertion, differences in whitespace can change semantics of source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f604fe978a15911ed565d1015ff35e244c161a38" translate="yes" xml:space="preserve">
          <source>Before ES2015, one must use &lt;code&gt;Function.prototype.apply()&lt;/code&gt; to call variadic functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d85842fb0b6614fec5658d9178bccc19435047" translate="yes" xml:space="preserve">
          <source>Before a multi-line or single-line comment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8fc4a82c425da02c6e46947503f16797bbd31e" translate="yes" xml:space="preserve">
          <source>Before beginning the process of migrating to ESLint, it's helpful to understand some of the terminology that ESLint uses and how it relates to terminology that JSCS uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793c8c352b760ab25f360bc8326c9bc71cd0b225" translate="yes" xml:space="preserve">
          <source>Before using the plugin, you have to install it using npm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e511de50956811edeb578d59a0804fbfbe8dea8" translate="yes" xml:space="preserve">
          <source>Before you can get started developing, you'll need to have a couple of things installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0130cfac353bfd32d8fda0c8f1e2c0f0eea17e6d" translate="yes" xml:space="preserve">
          <source>Before you can get started, you'll need to get a copy of the ESLint source code. This section explains how to do that and a little about the source code structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995b6b46a3656fa3fd0e18ff29db167a9a0ad968" translate="yes" xml:space="preserve">
          <source>Before you send the pull request, be sure to rebase onto the upstream source. This ensures your code is running on the latest available code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992e83579bc6ea6859e6f627be4f4eab97b057be" translate="yes" xml:space="preserve">
          <source>Behind the scenes in this example, a &lt;code&gt;String&lt;/code&gt; object is constructed. The &lt;code&gt;substring()&lt;/code&gt; method exists on &lt;code&gt;String.prototype&lt;/code&gt; and so is accessible to the string instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36de90e22d47f94d755a4b1bb70aaddc1bb47593" translate="yes" xml:space="preserve">
          <source>Best Practices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338ee79beaaaf18126ed94b8ed03f554024e0cfd" translate="yes" xml:space="preserve">
          <source>Best practices for fixes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf5c01b97b20119b71324bd7d7da5f8f31c07c4" translate="yes" xml:space="preserve">
          <source>Best practices for suggestions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4386a3199d49f37540036167c2bb082a887d89c5" translate="yes" xml:space="preserve">
          <source>Between class and interface definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f1e78655d2e55a66e32e73e443e9bfa69aad3b" translate="yes" xml:space="preserve">
          <source>Between logical sections inside a method to improve readability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d933ad8020c5b55ee20e6d8689eedf9c5360026" translate="yes" xml:space="preserve">
          <source>Between methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7e5a6d3249c554a4ce807b393edf17264edfd6" translate="yes" xml:space="preserve">
          <source>Between sections of a source file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cc8a57f3e58d7cd4de8dbcbc697d3180b54db0" translate="yes" xml:space="preserve">
          <source>Between the local variables in a method and its first statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf1b9521b28972220cbf79325e2c20617b6b053" translate="yes" xml:space="preserve">
          <source>Bitwise Operators: &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt;, &lt;code&gt;&quot;|&quot;&lt;/code&gt;, &lt;code&gt;&quot;^&quot;&lt;/code&gt;, &lt;code&gt;&quot;~&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13b68b58d811fab318ca729a8f17b37d477b3d3" translate="yes" xml:space="preserve">
          <source>Blank lines improve readability by setting off sections of code that are logically related.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd96bd62f5564682b84ba6192bf191b1be28b43" translate="yes" xml:space="preserve">
          <source>Blank spaces should be used in the following circumstances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e3cc1d3b5e5b1c0ad4b801e19204c1fb3921fc" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;path.join()&lt;/code&gt; and &lt;code&gt;path.resolve()&lt;/code&gt; are suitable replacements for string concatenation wherever file or directory paths are being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc21e1e88cd5040eb200959e21d74c582122508b" translate="yes" xml:space="preserve">
          <source>Both JSCS and ESLint have command line arguments corresponding to many of their configuration options. The following are the ESLint equivalents of JSCS command line options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097359be4adea4dcbabe6e8d3e40261ed26fa3b4" translate="yes" xml:space="preserve">
          <source>Both JSCS and ESLint use comments inside of files to disable rules around certain parts of your code. The following table lists out the JSCS inline configuration comments and their ESLint equivalents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd59eef72f9e0322f0828949f6c01aa1aa8058e" translate="yes" xml:space="preserve">
          <source>Both flags are also supported by ESLint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb400d0db2fc241e32273e1dc9da88bebb4f838" translate="yes" xml:space="preserve">
          <source>Both the JSON and YAML configuration file formats support comments (&lt;code&gt;package.json&lt;/code&gt; files should not include them). You can use JavaScript-style comments or YAML-style comments in either type of file and ESLint will safely ignore them. This allows your configuration files to be more human-friendly. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca62df9fb4211495bebeb6ed476dbf24104a6bf" translate="yes" xml:space="preserve">
          <source>Brace style is closely related to &lt;a href=&quot;https://en.wikipedia.org/wiki/Indent_style&quot;&gt;indent style&lt;/a&gt; in programming and describes the placement of braces relative to their control statement and body. There are probably a dozen, if not more, brace styles in the world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e376515dc59aa7f7420b054f55c95a72840be55b" translate="yes" xml:space="preserve">
          <source>Braces are used around all statements, even single statements, when they are part of a control structure, such as a &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt; statement. This makes it easier to add statements without accidentally introducing bugs due to forgetting to add braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6530074f50b1f9635a7588144e97521fd80531e4" translate="yes" xml:space="preserve">
          <source>Brackets: Included and &lt;a href=&quot;https://github.com/brackets-userland/brackets-eslint&quot;&gt;Brackets ESLint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340cf97750d96a23ba91ddb2d90b8154b27637af" translate="yes" xml:space="preserve">
          <source>Breaking changes for integration developers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e8db2e0b61dbfeb71d434b83b7fdf1e8353e53" translate="yes" xml:space="preserve">
          <source>Breaking changes for plugin/custom rule developers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbc2bcadf39845db18cc44b3b7cc8416c784aea" translate="yes" xml:space="preserve">
          <source>Breaking changes for users</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e01f9cc8e37b9339253d5f02203a453a4b8b23" translate="yes" xml:space="preserve">
          <source>Broccoli: &lt;a href=&quot;https://www.npmjs.com/package/broccoli-eslint&quot;&gt;broccoli-eslint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fdd4bc652997ceee49d1ddc76041c440aafb4d" translate="yes" xml:space="preserve">
          <source>Browser-specific code is necessary but not obvious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13842e2cda464c6e5b2211b8fc003ba47776341d" translate="yes" xml:space="preserve">
          <source>Browserify: &lt;a href=&quot;https://www.npmjs.com/package/eslintify&quot;&gt;eslintify&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1c2edbe22a1404f5105d58fea00b02f1cef470" translate="yes" xml:space="preserve">
          <source>Brunch: &lt;a href=&quot;https://www.npmjs.com/package/eslint-brunch&quot;&gt;eslint-brunch&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad4810417150ac15e14a03f28bd425d2a3d5e0b" translate="yes" xml:space="preserve">
          <source>Buffer API documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2ba055cfeabd97664f95c9afa9c9b3b42743eb" translate="yes" xml:space="preserve">
          <source>Buffer(number) is unsafe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb16822f3ab4a4b7c7befbf6b7a12d0f7072950e" translate="yes" xml:space="preserve">
          <source>Bug Reporting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec3feb7fd8b128570af46d194a8fd5cfea9b359" translate="yes" xml:space="preserve">
          <source>Build Next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822264b557dcda455c20fd570787ede9d1be28be" translate="yes" xml:space="preserve">
          <source>Build Scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2764e7dc64a6afa8f6572a70be9cc2ef88d207b2" translate="yes" xml:space="preserve">
          <source>Build tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3d56e9ff9b13595d5908c502bfb869204bdf51" translate="yes" xml:space="preserve">
          <source>Built-In Global Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23289056db225350425b91c74287655e2695db4" translate="yes" xml:space="preserve">
          <source>But the modification is a mistake in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c65cb686f365d97cef1431d92333403c589534f2" translate="yes" xml:space="preserve">
          <source>But this one, will only produce one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2faa4f26619721a43dbbcab57f8867c25e859b14" translate="yes" xml:space="preserve">
          <source>But until 1.x, the following variables and references had the wrong value (empty) in those properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a6bac896190981738cec1ee713180ff3599d1f" translate="yes" xml:space="preserve">
          <source>By activating the option &lt;code&gt;getWithoutSet&lt;/code&gt; it enforces the presence of a setter for every property which has a getter defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53edaff02bbaaf04f6f1ca246edc0a309d984524" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{ &quot;allowNamedFunctions&quot;: false }&lt;/code&gt;, this &lt;code&gt;boolean&lt;/code&gt; option prohibits using named functions as callbacks or function arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142bee28961c86e6edb34112baf458575b649ec3" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;{ &quot;allowUnboundThis&quot;: true }&lt;/code&gt;, this &lt;code&gt;boolean&lt;/code&gt; option allows function expressions containing &lt;code&gt;this&lt;/code&gt; to be used as callbacks, as long as the function in question has not been explicitly bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9064adcb0fa99df7486883b2e36cc34c841823b" translate="yes" xml:space="preserve">
          <source>By default this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;, &lt;code&gt;falls through&lt;/code&gt;. An alternative regular expression can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f81ef36c9ff48cc1d11f83611fc3688316cd07" translate="yes" xml:space="preserve">
          <source>By default this rule ignores comments starting with the following words: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;jshint&lt;/code&gt;, &lt;code&gt;jslint&lt;/code&gt;, &lt;code&gt;istanbul&lt;/code&gt;, &lt;code&gt;global&lt;/code&gt;, &lt;code&gt;exported&lt;/code&gt;, &lt;code&gt;jscs&lt;/code&gt;. An alternative regular expression can be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b090fa11c439d6a006cf50f9adb2d2cad2b33cde" translate="yes" xml:space="preserve">
          <source>By default this rule is enabled with &lt;code&gt;all&lt;/code&gt; option for variables and &lt;code&gt;after-used&lt;/code&gt; for arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810c57ecacff43e1120c95269231677bb6903a5a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;&quot;always&quot;&lt;/code&gt; does not allow newlines. To permit newlines when in &lt;code&gt;&quot;always&quot;&lt;/code&gt; mode, set the &lt;code&gt;allowNewlines&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. Newlines are never required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8149432d30bea2fb7ccff7235a0e92b208229579" translate="yes" xml:space="preserve">
          <source>By default, ESLint uses &lt;a href=&quot;https://github.com/eslint/espree&quot;&gt;Espree&lt;/a&gt; as its parser. You can optionally specify that a different parser should be used in your configuration file so long as the parser meets the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9577e9a635e28c68c848f26eabef31dbaa320c91" translate="yes" xml:space="preserve">
          <source>By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; inside the &lt;code&gt;eslintConfig&lt;/code&gt; field of the &lt;code&gt;package.json&lt;/code&gt; file or in the &lt;code&gt;.eslintrc.*&lt;/code&gt; file at your project's root level. ESLint will stop looking in parent folders once it finds a configuration with &lt;code&gt;&quot;root&quot;: true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d5e5b4f445e783b9f14a4ed45e390a3c7a870a" translate="yes" xml:space="preserve">
          <source>By default, ESLint will not perform autofixes when a processor is used, even when the &lt;code&gt;--fix&lt;/code&gt; flag is enabled on the command line. To allow ESLint to autofix code when using your processor, you should take the following additional steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642f4676bf0bdf93c93b4f8b0ebfa00e1a8aab5a" translate="yes" xml:space="preserve">
          <source>By default, all options are set to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328d8066eb8920bc57166e2447115dae7191b68f" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/no-multi-spaces&quot;&gt;&lt;code&gt;no-multi-spaces&lt;/code&gt;&lt;/a&gt; rule will now disallow multiple spaces before comments at the end of a line. Previously, the rule did not check this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ead8bee8725b19464565c53ddd55a35932fff07" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/padded-blocks&quot;&gt;&lt;code&gt;padded-blocks&lt;/code&gt;&lt;/a&gt; rule will now enforce padding in class bodies and switch statements. Previously, the rule would ignore these cases unless the user opted into enforcing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb25911cbcc93e8fb7965ef138c4639fb91fdaa5" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;../rules/space-before-function-paren&quot;&gt;&lt;code&gt;space-before-function-paren&lt;/code&gt;&lt;/a&gt; rule will now enforce spacing for async arrow functions. Previously, the rule would ignore these cases unless the user opted into enforcing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299d530060273666dadde871098da08bda8d3120" translate="yes" xml:space="preserve">
          <source>By default, this rule always allows the use of &lt;code&gt;this&lt;/code&gt; in functions which name starts with an uppercase and anonymous functions that are assigned to a variable which name starts with an uppercase, assuming that those functions are used as constructor functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcebc7dd5e599c1fa7a260257a99e17c1b7b4f41" translate="yes" xml:space="preserve">
          <source>By default, this rule checks only object literals and property descriptors. If you want this rule to also check class declarations and class expressions, activate the option &lt;code&gt;enforceForClassMembers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac583d46910ce2df6b784c5422f86d84784d80b9" translate="yes" xml:space="preserve">
          <source>By default, this rule does not check &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26744eeae2a34bc64432a235df5802392705e54" translate="yes" xml:space="preserve">
          <source>By default, this rule does not check class declarations and class expressions, as the default value for &lt;code&gt;enforceForClassMembers&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b530f087cdcc901afdd2f0a3e8affc01b112e8" translate="yes" xml:space="preserve">
          <source>By default, this rule does not enforce getter/setter pairs in class declarations and class expressions, as the default value for &lt;code&gt;enforceForClassMembers&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046441d01afdaf53feee5d9148871aec290a8572" translate="yes" xml:space="preserve">
          <source>By default, this rule warns whenever &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; are used without block statements as their body. However, you can specify that block statements should be used only when there are multiple statements in the block and warn when there is only one statement in the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fcf545318b2ef2da7a24419f1e2ac87e444cd1" translate="yes" xml:space="preserve">
          <source>By default, this rule will require a non-lowercase letter at the beginning of comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4eeaf5a9cfbd492c09302efd0a7e6ded91be252" translate="yes" xml:space="preserve">
          <source>By throwing an error in this way, other parts of the application have an opportunity to handle the error rather than stopping the application altogether. If the error bubbles all the way up to the process without being handled, then the process will exit and a non-zero exit code will returned, so the end result is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a10e6844263ca8909b3bbe0de5a3537cac5758" translate="yes" xml:space="preserve">
          <source>By using the module name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2345f2e860e68629829d65710dd0df3385db35" translate="yes" xml:space="preserve">
          <source>CLIEngine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f0383de17763d08ff9f37db2edc301741ecfbc" translate="yes" xml:space="preserve">
          <source>CLIEngine#addPlugin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22267246c77d6f4c878ebd617018969e47dd10a" translate="yes" xml:space="preserve">
          <source>CLIEngine#executeOnFiles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aaf006cc9141b559c5c527aa262abaa02da9a68" translate="yes" xml:space="preserve">
          <source>CLIEngine#executeOnText()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5119e7a9a0f06a066d338a2a5227f1de3f2a3ba8" translate="yes" xml:space="preserve">
          <source>CLIEngine#getConfigForFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f248c6ca75d279906a5e83e020e644d56c01bcb3" translate="yes" xml:space="preserve">
          <source>CLIEngine#getErrorResults()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e37a3ba68b62fd095c124f08a8da94d579dc5e" translate="yes" xml:space="preserve">
          <source>CLIEngine#getFormatter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f32f607dc57705731e718beaa6e7541390ea19" translate="yes" xml:space="preserve">
          <source>CLIEngine#getRules()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d91f42db796ef9fccb3113c5f1b379eee1985b" translate="yes" xml:space="preserve">
          <source>CLIEngine#isPathIgnored()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c38fe2163d1a1410cce4874628be155c5420a54" translate="yes" xml:space="preserve">
          <source>CLIEngine#outputFixes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fe410eb3907152812ba29b988371e8c10c7930" translate="yes" xml:space="preserve">
          <source>CLIEngine#resolveFileGlobPatterns()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bec04eda41c2467258cf63a83bbcc00c182f096" translate="yes" xml:space="preserve">
          <source>CLIEngine.version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef5cdfb0c3e16bdf7d599da18abc72413e061a5" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;console.log()&lt;/code&gt; or any other similar method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a75cd5066765fb2d890a1abed4765af529054c" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;process.exit()&lt;/code&gt; directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc7444f8724edf2b88bce5ed493cab18f0f53e6" translate="yes" xml:space="preserve">
          <source>CallExpression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e282305742d4307b1579b438b6b7173c0418e7" translate="yes" xml:space="preserve">
          <source>Can be rewritten as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b517ab5d1cd37a417d38a4cf65c412ff68fbe5e1" translate="yes" xml:space="preserve">
          <source>Can't find just the right rule? Make your own &lt;a href=&quot;developer-guide/working-with-rules&quot;&gt;custom rule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f4ec3146a0731b4e0f2d9473519c2a5b1a229e" translate="yes" xml:space="preserve">
          <source>Care should be taken to name variables and functions properly. Names should be limited to alphanumeric characters and, in some cases, the underscore character. Do not use the dollar sign (&lt;code&gt;$&lt;/code&gt;) or back slash (&lt;code&gt;\&lt;/code&gt;) characters in any names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7ca4c1fab7a8bdcf5fbc36f2e29b71084829bd" translate="yes" xml:space="preserve">
          <source>Certain properties on objects may be disallowed in a codebase. This is useful for deprecating an API or restricting usage of a module's methods. For example, you may want to disallow using &lt;code&gt;describe.only&lt;/code&gt; when using Mocha or telling people to use &lt;code&gt;Object.assign&lt;/code&gt; instead of &lt;code&gt;_.extend&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d641a78fe9f4d6c7cfe86253552245024f63f5eb" translate="yes" xml:space="preserve">
          <source>Chained method calls on a single line without line breaks are harder to read, so some developers place a newline character after each method call in the chain to make it more readable and easy to maintain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4b291d717c5eaf1d0d316458e1b370d150f8f" translate="yes" xml:space="preserve">
          <source>Chaining the assignment of variables can lead to unexpected results and be difficult to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9a9fa473109c352185514e7756f6ec081ef71e" translate="yes" xml:space="preserve">
          <source>Change Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cf5afac16871b650ff6a87357172efdfa460a8" translate="yes" xml:space="preserve">
          <source>Changes the folder where plugins are resolved from. By default, plugins are resolved from the current working directory. This option should be used when plugins were installed by someone other than the end user. It should be set to the project directory of the project that has a dependency on the necessary plugins. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab7e9a4540dddf2bc3e6493f496e69ddbf71e09" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb36713f70f34ba6d1fb8bd99cb3672abc0961e" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;CLIEngine#executeOnText()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095447aabddeac0d8a7df16e693b732d5fea7565" translate="yes" xml:space="preserve">
          <source>Changing this value to &lt;code&gt;true&lt;/code&gt; will reverse this option's behavior by allowing use of named functions without restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040ad6ac92ed227db6349ec645d53783b624cd42" translate="yes" xml:space="preserve">
          <source>Checking if a value is &lt;code&gt;undefined&lt;/code&gt; should be done with &lt;code&gt;typeof&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92028ad17322f48fc90b63d905521dc748be675" translate="yes" xml:space="preserve">
          <source>Checks code coverage targets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ecadd605f6e4c20f69369c8c791bbdde62d160" translate="yes" xml:space="preserve">
          <source>Checks if a given path is ignored by ESLint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c89bace5c803e88659649c37de3028b2ac5e3c" translate="yes" xml:space="preserve">
          <source>Class declarations and class expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f380e5d07ded1620db47a5ed2708b79c5a047d0a" translate="yes" xml:space="preserve">
          <source>Click on Profiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1683105284987a3ae83b25ff1f118eb7bdf7595" translate="yes" xml:space="preserve">
          <source>Code Climate CLI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dc1f58b1ebed71fbca665be08411c0b9cacaab" translate="yes" xml:space="preserve">
          <source>Code Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e574f8f018ffa16527ccc1b75d7fb58fb118883c" translate="yes" xml:space="preserve">
          <source>Code Path Analysis Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580546c9363cde6a5b33a366bcefc914f6ff2498" translate="yes" xml:space="preserve">
          <source>Code Path Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647c6137a359d2959ee6cdb4a5286bf7116ae92a" translate="yes" xml:space="preserve">
          <source>Code is difficult to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e909b7052999369ed0534cff25d0dc0b37c6d995" translate="yes" xml:space="preserve">
          <source>Column Numbers are 1-based</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad481f8d97686324bbafc62077e08ab2a687407" translate="yes" xml:space="preserve">
          <source>Comma First style, in which commas are placed at the start of the next line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dd3cc04c40c9a332158c95e35269c0929ad6af" translate="yes" xml:space="preserve">
          <source>Comma style (comma-style)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b91918e82d5cef17a745f0886369f20996ba6c7" translate="yes" xml:space="preserve">
          <source>Command Line Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1876987fa1a8f54ef9b28b3c2b0111b8b2e44d4a" translate="yes" xml:space="preserve">
          <source>Command Line Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0592b972c380e7e606d0a53966b0ff68a0453c1c" translate="yes" xml:space="preserve">
          <source>Command line options (or CLIEngine equivalents):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9303a3a7c7daf4c09eae8de6d13d8d831541fc8" translate="yes" xml:space="preserve">
          <source>Comment Annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe0316b6ae9d702e7dbf115bb378278ffbaddd1" translate="yes" xml:space="preserve">
          <source>Comments are useful for leaving information for future developers. In order for that information to be useful and not distracting, it is sometimes desirable for comments to follow a particular style. One element of comment formatting styles is whether the first word of a comment should be capitalized or lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f06b20dcab0aff5704c842c598f9dfcd0455108" translate="yes" xml:space="preserve">
          <source>Comments in Configuration Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0357ca1de3a2c1e41b225072c3ae58e313abf79" translate="yes" xml:space="preserve">
          <source>Comments inside the curly braces in JSX are allowed to be on the same line as the braces, but only if they are not on the same line with other code, and the braces do not enclose an actual expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c575a09fdacd956bc014b783c194f0a5c82e44" translate="yes" xml:space="preserve">
          <source>Comments may be used to annotate pieces of code with additional information. These annotations take the form of a single word followed by a colon. The acceptable annotations are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703eaaa66145aebfc6fb9e2dcf0469112d69267d" translate="yes" xml:space="preserve">
          <source>Comments on a line directly after var statements are treated like additional var statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25c0b311a5988d7e130f54f188163a4ce9f26bd" translate="yes" xml:space="preserve">
          <source>Comparing a variable against itself is usually an error, either a typo or refactoring error. It is confusing to the reader and may potentially introduce a runtime error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27bbabf9863dade6459d7cd65d288d55ad523bf4" translate="yes" xml:space="preserve">
          <source>Comparing against &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbfe191b44761abe72c903dc68c5c8bcdebdb77" translate="yes" xml:space="preserve">
          <source>Comparing to &lt;code&gt;null&lt;/code&gt; without a type-checking operator (&lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;), can have unintended results as the comparison will evaluate to true when comparing to not just a &lt;code&gt;null&lt;/code&gt;, but also an &lt;code&gt;undefined&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2f123387a2c9f00c23c76c07b00b0297d1dd1f" translate="yes" xml:space="preserve">
          <source>Comparing two literal values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a123b6cd74bccf28ec149c293edc9ff8bb839df" translate="yes" xml:space="preserve">
          <source>Comparison Operators: &lt;code&gt;&quot;==&quot;&lt;/code&gt;, &lt;code&gt;&quot;!=&quot;&lt;/code&gt;, &lt;code&gt;&quot;===&quot;&lt;/code&gt;, &lt;code&gt;&quot;!==&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e22de54c6c14d3c1fd6b16beef446d0ab100418" translate="yes" xml:space="preserve">
          <source>Complex Argument Passing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d9cf15f81bf409cdf559aa0a58b6382ca48d87" translate="yes" xml:space="preserve">
          <source>Complexity Analysis of JavaScript Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6884eb8992b62c7c1af30d600b40339c50155a" translate="yes" xml:space="preserve">
          <source>Compound Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70714def24eed02c974f5065578085314290afa" translate="yes" xml:space="preserve">
          <source>Compound statements are lists of statements enclosed inside of braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a731acf571864648fe825ad7f41f467ee967a7f" translate="yes" xml:space="preserve">
          <source>Concretely, the following function should be refactored as shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce36b3146d830ed2f9929916e1077a0694b8641" translate="yes" xml:space="preserve">
          <source>Configs in Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08f9a283e38a276a0427e713b7b70848f862614" translate="yes" xml:space="preserve">
          <source>Configuration Based on Glob Patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054d13d110e94c15fda09fa3b87ba15c0ffb578c" translate="yes" xml:space="preserve">
          <source>Configuration Cascading Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637a597497ad1278a75e9c3cc4a37f73445fc358" translate="yes" xml:space="preserve">
          <source>Configuration Cascading and Hierarchy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3367a800fa7c45bf91e141f3b7a7690040cb711f" translate="yes" xml:space="preserve">
          <source>Configuration File Formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f888285484327e1b26802fdfc517a3cdc283a16a" translate="yes" xml:space="preserve">
          <source>Configuration options passed on the command line using &lt;code&gt;--rule&lt;/code&gt; (or to CLIEngine using &lt;code&gt;rules&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4040faa0c40248a65b81d9d52f5e239c41634760" translate="yes" xml:space="preserve">
          <source>Configuration values for globals are now validated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bc3c22148beccab28adad18f452f24bed405a4" translate="yes" xml:space="preserve">
          <source>Configuring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14e099732b8bf6338cd1082d4971a5345420749" translate="yes" xml:space="preserve">
          <source>Configuring ESLint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90aee3621dbd643b7a1e7615a22bd29a1bf4fa46" translate="yes" xml:space="preserve">
          <source>Configuring Inline Comment Behaviors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9cfd78cf61a7fad9eac13d10a069961ae79993" translate="yes" xml:space="preserve">
          <source>Configuring Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf4a45b927dfcce828ce6776ec3d92df65de710" translate="yes" xml:space="preserve">
          <source>Configuring Rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f110a7ccdd4b47d412214514a5686b597e3f8569" translate="yes" xml:space="preserve">
          <source>Configuring this rule with one boolean option &lt;code&gt;true&lt;/code&gt; is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4647e6ee60c305c9dabe8168f89b6e60301a075" translate="yes" xml:space="preserve">
          <source>Consistency in placing a newline before or after the dot can greatly increase readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503aca9c53d9e27038ee3763f8c6a91d3531b09a" translate="yes" xml:space="preserve">
          <source>Consistency is an important part of any style guide. While it is a personal preference where to put the opening brace of blocks, it should be consistent across a whole project. Having an inconsistent style distracts the reader from seeing the important parts of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c039d9f3cbca82ba5423ca0597e4fd0200e8a7a" translate="yes" xml:space="preserve">
          <source>Constructor functions, those functions used with the &lt;code&gt;new&lt;/code&gt; operator to create new objects, should be formatted in camel case but must begin with an uppercase letter. Constructor function names should begin with a non-verb because &lt;code&gt;new&lt;/code&gt; is the action of creating an object instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d09586ea37267aa69ef76a9f7c8bc0e29a0c72" translate="yes" xml:space="preserve">
          <source>Constructors of derived classes must call &lt;code&gt;super()&lt;/code&gt;. Constructors of non derived classes must not call &lt;code&gt;super()&lt;/code&gt;. If this is not observed, the JavaScript engine will raise a runtime error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1d18554936cd6e2390743e62910a063c5aa483" translate="yes" xml:space="preserve">
          <source>Continue searching for &lt;code&gt;.eslintrc&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files in ancestor directories (parent has highest precedence, then grandparent, etc.), up to and including the root directory or until a config with &lt;code&gt;&quot;root&quot;: true&lt;/code&gt; is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527a09bcae64352259e895e37521e34bfd9a2d4c" translate="yes" xml:space="preserve">
          <source>Contribute code to ESLint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b869a4fc5ecdb32995495586ade690a4e7f25f" translate="yes" xml:space="preserve">
          <source>Control Flow in Node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d140e2dddfcbb8e672ff8053b01675a57d0ec7c" translate="yes" xml:space="preserve">
          <source>Control Flow in Node Part II</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35139eebf1ac066c1555c9bf6199c9f7eac4d85d" translate="yes" xml:space="preserve">
          <source>Control characters are special, invisible characters in the ASCII range 0-31. These characters are rarely used in JavaScript strings so a regular expression containing these characters is most likely a mistake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d571b1e9881fd0cf888f79914fb5ebfcbf482a" translate="yes" xml:space="preserve">
          <source>Control flow in Node.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afccb006c330732e4cff61f99359749160440bba" translate="yes" xml:space="preserve">
          <source>Convert Configuration Files Using Polyjuice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab58181014d84731967f50b05ed7c496f31e1d2a" translate="yes" xml:space="preserve">
          <source>Converting Presets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3a7d8e52a6d2e6a4f18d3e7ab1334f3cd4d5b6" translate="yes" xml:space="preserve">
          <source>Core Rule Guidelines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95be29707180faf07146d398de09a6c4200d5320" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;../user-guide/configuring&quot;&gt;configuration file&lt;/a&gt; and specify your rule ID error level under the &lt;code&gt;rules&lt;/code&gt; key. Your rule will not run unless it has a value of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3cb20251d79f003cd52ffc32fabdac22ef9f06" translate="yes" xml:space="preserve">
          <source>Create a Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd3ef2d8c97297fd3ac40631a5866542c068428" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;index.js&lt;/code&gt; file and export an object containing your settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b24d2d7edb54bbd46ce7884ebad9bcadbb5e97" translate="yes" xml:space="preserve">
          <source>Create a new branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22b463025ed1c1b87b33c315b932364a70efd63" translate="yes" xml:space="preserve">
          <source>Create their own rules for ESLint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a39d699ab72906f03ebeffbc60ea2aa1b3eeed" translate="yes" xml:space="preserve">
          <source>Creating a New Configuration From Scratch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd92f8ba24ec7ef01b8b29783834176b3963fb9" translate="yes" xml:space="preserve">
          <source>Creating a Shareable Config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482f648a7c151a3d617c673a13dd07998e557076" translate="yes" xml:space="preserve">
          <source>Creating an AST for the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733e449fda546e3a8b129948f856e5d4cfc8e56b" translate="yes" xml:space="preserve">
          <source>Currently the sole method for telling ESLint which file extensions to lint is by specifying a comma separated list of extensions using the &lt;a href=&quot;command-line-interface#ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt;&lt;/a&gt; command line option. Note this flag only takes effect in conjunction with directories, and will be ignored if used with filenames or glob patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fdbd253240e582c58bf7112d231f0aea07470b" translate="yes" xml:space="preserve">
          <source>Custom formatters can also be distributed through npm packages. To do so, create an npm package with a name in the format of &lt;code&gt;eslint-formatter-*&lt;/code&gt;, where &lt;code&gt;*&lt;/code&gt; is the name of your formatter (such as &lt;code&gt;eslint-formatter-awesome&lt;/code&gt;). Projects should then install the package and can use the custom formatter with the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--formatter&lt;/code&gt;) flag like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49ca4f33339169f36b15576df0f6a281afa0ea0" translate="yes" xml:space="preserve">
          <source>Custom formatters have access to environment variables and so can change their behavior based on environment variable data. Here's an example that uses a &lt;code&gt;AF_SKIP_WARNINGS&lt;/code&gt; environment variable to determine whether or not to show warnings in the results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff15870ecf0785cf1ed6f565432cb4eab789c25" translate="yes" xml:space="preserve">
          <source>Customizing RuleTester</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828863d4cbf7b3824c5a65d94542f5b6e50c30c6" translate="yes" xml:space="preserve">
          <source>Cyclomatic Complexity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380d9bc0a9b56d3d4830a8ed4465765522454a9e" translate="yes" xml:space="preserve">
          <source>Cyclomatic complexity measures the number of linearly independent paths through a program's source code. This rule allows setting a cyclomatic complexity threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eff362745911d820434d922e99ea187252312d8" translate="yes" xml:space="preserve">
          <source>Declarations that create one or more variables in the global scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae36edf0e14affd7d5d4b81d1097df1dbe09bdac" translate="yes" xml:space="preserve">
          <source>Default Changes When Using &lt;code&gt;eslint:recommended&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5b08caa16422344217917ff185d24cf8e1bd8a" translate="yes" xml:space="preserve">
          <source>Default callback names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d593d0478aa303348496061be603076710abf565" translate="yes" xml:space="preserve">
          <source>Default ignore patterns are applied even when &lt;code&gt;ignorePattern&lt;/code&gt; is provided. If you want to omit default patterns, set this option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c7bbf1b91e722e82b0d09e64d1596bc8d41673" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;[&quot;none&quot;, &quot;all&quot;, &quot;multiple&quot;, &quot;single&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16e15890d3d5add9f5075d6403813ccbaeb0554" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db254bea50a14b0e9eb1a7b0b2d120ed7192f40" translate="yes" xml:space="preserve">
          <source>Default option settings are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57afbebd04d4d02458682eb7fa90339a9d41caac" translate="yes" xml:space="preserve">
          <source>Default settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9b50b419df7a7306166622f8485bc222304810" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;{ allowNamedFunctions: false, allowUnboundThis: true }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451675c2ac1c560bdc9110dbf215c31e25d75d4b" translate="yes" xml:space="preserve">
          <source>Definition interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a4e82467fb83dc35208cbfc344efc585b6c0fe" translate="yes" xml:space="preserve">
          <source>Demonstrate a possible issue that can be resolved by rewriting the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6d8366b797ab9ee8e0cc6db6b82788c4bc11e5" translate="yes" xml:space="preserve">
          <source>Depending on your coding conventions, you can choose either option by specifying it in your configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527600bf0272b6bf3abcb495a99c6ee346bb82b2" translate="yes" xml:space="preserve">
          <source>Deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600c4c32abbd0e6044d374f8d9f63e6c5b81d165" translate="yes" xml:space="preserve">
          <source>Deprecated APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f155b5226ef5ac72a09b1d5a0533269a381da6" translate="yes" xml:space="preserve">
          <source>Deprecated and Obsolete Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4371ef922e51fe0fbf59bbe7402cdd622276e4" translate="yes" xml:space="preserve">
          <source>Deprecated globals have been removed from the &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;browser&lt;/code&gt;, and &lt;code&gt;jest&lt;/code&gt; environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c460045501a8ea3d1357c1eef23be6e4ef8098" translate="yes" xml:space="preserve">
          <source>Deprecated members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4941fe9de2de7fc433b3e9590719cbde5ce1aa" translate="yes" xml:space="preserve">
          <source>Deprecated rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e97da83707a37248cd49df2d934d2760fd166a" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Function.prototype.apply()&lt;/code&gt; and &lt;code&gt;Function.prototype.call()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e96f0d28fd9c327f3a8bd126ed5ddf0e9d31362" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.defineProperty()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4651e4f11985967e23527250c22fcf73a7b68d2" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.getOwnPropertyDescriptor()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c85da6d70b6b0f2080d1abb54f535bc82832569" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a80f0a943444763e9338742b33411b38ddfd03" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f56df2f09f86a9f6a057489f7ceb4b1e0b1c8ac" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.isExtensible&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4a984ce7a52ddef7e2e804d2988e9b66ebb3da" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.preventExtensions()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697b260a0cee6bea439f0681489e15b057680498" translate="yes" xml:space="preserve">
          <source>Deprecates &lt;code&gt;Object.setPrototypeOf()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d843f5ea2093ccb6671aa0c04b0070848e9831" translate="yes" xml:space="preserve">
          <source>Deprecates the &lt;code&gt;delete&lt;/code&gt; keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34fc5b3589467a8b7d78b90f9e856a1d025822a" translate="yes" xml:space="preserve">
          <source>Deprecating eslint-tester</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58326a4f36308b30e682115f0391f02ad1f1cb6a" translate="yes" xml:space="preserve">
          <source>Derived config: &lt;code&gt;&quot;eqeqeq&quot;: &quot;warn&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50157f44d361dccb8b219046318d94280d12f251" translate="yes" xml:space="preserve">
          <source>Derived config: &lt;code&gt;&quot;quotes&quot;: [&quot;error&quot;, &quot;single&quot;]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7e9672823162cea83632332d7f5bb05a7b1d63" translate="yes" xml:space="preserve">
          <source>Describe the syntax for creating selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01680ee6453e68589c3aabb95cdb46608254dfb5" translate="yes" xml:space="preserve">
          <source>Describe what selectors can be used for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c0aca59d56726527f2d287027312d0a2431f92" translate="yes" xml:space="preserve">
          <source>Despite being in an entirely different directory, you'll see that all &lt;code&gt;extends&lt;/code&gt; must use the full package path to the config file you wish to extend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97de83a38aca7a49888fc2600669f90c3021604a" translate="yes" xml:space="preserve">
          <source>Destructuring Assignment (MDN)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af4d3a9d765ca9815a04de048f7476eee434543" translate="yes" xml:space="preserve">
          <source>Destructuring and parameter handling in ECMAScript 6 (2ality blog)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8b6eb7c46e6f508b4952b114beaadc64f12f31" translate="yes" xml:space="preserve">
          <source>Detailed formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d8307a053cef0b6777a2a38a4d8fb22f7faeb6" translate="yes" xml:space="preserve">
          <source>Details about each step are found below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e199c34f2e47d26bd6cf3b0bc418229f9353d7" translate="yes" xml:space="preserve">
          <source>Developer Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48b68fd11698f8781f082afb08161421c5cb1fc" translate="yes" xml:space="preserve">
          <source>Developers often add comments to code which is not complete or needs review. Most likely you want to fix or review the code, and then remove the comment, before you consider the code to be production ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f134b627d779aaad681c98b57de489c6fa39f9" translate="yes" xml:space="preserve">
          <source>Developing for ESLint is a bit different than running it on the command line. This section shows you how to set up a development environment and get you ready to write code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b718e3426ebb543a11c3c5fcd59853368c8fdd" translate="yes" xml:space="preserve">
          <source>Development Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8013f0bbec79ed59d47cf77e67c933aae7cc1124" translate="yes" xml:space="preserve">
          <source>Directives are used in JavaScript to indicate to the execution environment that a script would like to opt into a feature such as &lt;code&gt;&quot;strict mode&quot;&lt;/code&gt;. Directives are grouped together in a &lt;a href=&quot;https://www.ecma-international.org/ecma-262/7.0/#directive-prologue&quot;&gt;directive prologue&lt;/a&gt; at the top of either a file or function block and are applied to the scope in which they occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07461fdd8bbd77721cfe447edf9e4bd20cbd0023" translate="yes" xml:space="preserve">
          <source>Directory structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459ceaedc40826269ef60f711ebad6d9c5aade2c" translate="yes" xml:space="preserve">
          <source>Disable all rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1befa33ecf40b3dc4e5f34847334167468085d4f" translate="yes" xml:space="preserve">
          <source>Disable multiple rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca98b5d9eebc53d965cc8adf37f4f58b6bed991" translate="yes" xml:space="preserve">
          <source>Disable one rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0d9676523b61c6ad0b2165fb3aa81e81d0d170" translate="yes" xml:space="preserve">
          <source>Disable one rule on single line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287de7a611f443ad4166b545ab1f2bd47e9a0e4b" translate="yes" xml:space="preserve">
          <source>Disable this rule if sequence expressions with the comma operator are acceptable. Another case is where you might want to report all usages of the comma operator, even if they are wrapped in parentheses or in a for loop. You can achieve this using rule &lt;code&gt;no-restricted-syntax&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3eb14ac0b636c4581b55b732a2fe4f35df8ba0" translate="yes" xml:space="preserve">
          <source>Disable this rule if the code is clearer without requiring the &lt;code&gt;else if&lt;/code&gt; form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8737efd5806494af343de944cb08475ed8ca65e" translate="yes" xml:space="preserve">
          <source>Disables excluding of files from &lt;code&gt;.eslintignore&lt;/code&gt;, &lt;code&gt;--ignore-path&lt;/code&gt;, &lt;code&gt;--ignore-pattern&lt;/code&gt;, and &lt;code&gt;ignorePatterns&lt;/code&gt; property in config files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0879e9fee4af87fa641a02d77d443c4f3580b8c" translate="yes" xml:space="preserve">
          <source>Disables use of configuration from &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1e7e23e0536c78b0eeafeb1ec82041aa850654" translate="yes" xml:space="preserve">
          <source>Disabling Inline Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68acdc59319cc193f125410c97e1b03dd1661d5e" translate="yes" xml:space="preserve">
          <source>Disabling Rules Inline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e67dba5d0b5b5a97bdf4d2ca161c616f435e2e" translate="yes" xml:space="preserve">
          <source>Disabling Rules Only for a Group of Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f740f554b681824f0ea863d30c43492818e6b006" translate="yes" xml:space="preserve">
          <source>Disabling Rules with Inline Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e844d08eae28a4a7404dedca3c97ef06651eb55" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;await&lt;/code&gt; inside of loops (no-await-in-loop)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7357a799bcec347bc36cefd828b1e6107f42938e" translate="yes" xml:space="preserve">
          <source>Disallow &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects. (no-invalid-this)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f44108dd138bb62b373512d428d97306e66d9e0" translate="yes" xml:space="preserve">
          <source>Disallow Assignment in return Statement (no-return-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0b317dabfc13eea2c9ede23cd875ab9ba81066" translate="yes" xml:space="preserve">
          <source>Disallow Case Statement Fallthrough (no-fallthrough)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9673fff633eede8759e7e832b94b73326b9db60d" translate="yes" xml:space="preserve">
          <source>Disallow Early Use (no-use-before-define)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9f0096c80aed5ef6f2f85572c7e5b9f3dcc761" translate="yes" xml:space="preserve">
          <source>Disallow Extending of Native Objects (no-extend-native)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e641518d634731b3f804ad68c9a1a4dd2ef9bc" translate="yes" xml:space="preserve">
          <source>Disallow Floating Decimals (no-floating-decimal)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c52c90ba330ac0933f38585f1769f53bcd68f" translate="yes" xml:space="preserve">
          <source>Disallow Function Constructor (no-new-func)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caceb8ebf8be6922bc1a3e3714b8b4a143a337eb" translate="yes" xml:space="preserve">
          <source>Disallow Functions in Loops (no-loop-func)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacb6d4fd0b17a430a4735c9677a4f81df3168d0" translate="yes" xml:space="preserve">
          <source>Disallow Implied eval() (no-implied-eval)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad449a53a85afb42003dc896d7e7640f758fdc4f" translate="yes" xml:space="preserve">
          <source>Disallow Initializing to undefined (no-undef-init)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c2a5dcf1f5e4f782be62c9fe682e6e3c462e53" translate="yes" xml:space="preserve">
          <source>Disallow Iterator (no-iterator)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c3e2222e9456b5f6dddce7eb34e67c56f53407" translate="yes" xml:space="preserve">
          <source>Disallow Labeled Statements (no-labels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17a5eefef9b4c561b935acdc4b3eac4de48de2f" translate="yes" xml:space="preserve">
          <source>Disallow Labels That Are Variables Names (no-label-var)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758d4bd82fc507c3d50dcaf46209e9b59de82c31" translate="yes" xml:space="preserve">
          <source>Disallow Magic Numbers (no-magic-numbers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce12c0ffe9206a927f0d2f38903c1e4781957d6" translate="yes" xml:space="preserve">
          <source>Disallow Multiline Strings (no-multi-str)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97fd4b300ae7084b3fefb71cd194c3f8e374201" translate="yes" xml:space="preserve">
          <source>Disallow Node.js modules (no-restricted-modules)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eae068c2e31380bd37e517bde8a4fc3a9aeb38e" translate="yes" xml:space="preserve">
          <source>Disallow Null Comparisons (no-eq-null)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def6bbcdb141b4ec18156bf0414db29d77569889" translate="yes" xml:space="preserve">
          <source>Disallow Primitive Wrapper Instances (no-new-wrappers)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f336697875c403c41992a5ee7383715c6ba02c" translate="yes" xml:space="preserve">
          <source>Disallow Reassignment of Function Parameters (no-param-reassign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f328c47cfbfb9a4c41a76fdb96895c28744581a" translate="yes" xml:space="preserve">
          <source>Disallow Reassignment of Native Objects (no-native-reassign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29998b6607932e9bf43ac89acc763010051e5d8a" translate="yes" xml:space="preserve">
          <source>Disallow Regular Expressions That Look Like Division (no-div-regex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62670fceb0e8c11e2638222c3c68a7cedcad9c0" translate="yes" xml:space="preserve">
          <source>Disallow Script URLs (no-script-url)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5171a9657f83013310480a85e529e16871624b3b" translate="yes" xml:space="preserve">
          <source>Disallow Self Assignment (no-self-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4a3fcc4c683fecc888a2907f8eea08530b0398" translate="yes" xml:space="preserve">
          <source>Disallow Self Compare (no-self-compare)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5937e3cb20b016408c6fd54e0ee288e5e1b4cb7" translate="yes" xml:space="preserve">
          <source>Disallow Shadowing of Restricted Names (no-shadow-restricted-names)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507459b36872e8cc634248f9d5d93d29bbac9ad8" translate="yes" xml:space="preserve">
          <source>Disallow Shadowing of Variables Inside of catch (no-catch-shadow)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339f1bd76ac6951ee40a627b62bc8f947135a928" translate="yes" xml:space="preserve">
          <source>Disallow Symbol Constructor (no-new-symbol)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a949374057bf252a8a2db3f4b259be245b4732" translate="yes" xml:space="preserve">
          <source>Disallow Synchronous Methods (no-sync)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6047a816e1fd864659a27ad57b221810d55971" translate="yes" xml:space="preserve">
          <source>Disallow Undeclared Variables (no-undef)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a036a4052858514dda8e7442027585dbf8404602" translate="yes" xml:space="preserve">
          <source>Disallow Unnecessary Labels (no-extra-label)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8ad992aaba6f6e59cebe6089fbe3f8c1aad49a" translate="yes" xml:space="preserve">
          <source>Disallow Unnecessary Nested Blocks (no-lone-blocks)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b817e5f716819e18ab6cf8a49692be55d9183d" translate="yes" xml:space="preserve">
          <source>Disallow Unused Expressions (no-unused-expressions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e3786c62d695c622019f048f192748cc4e2c5c" translate="yes" xml:space="preserve">
          <source>Disallow Unused Labels (no-unused-labels)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5bb34ead0451d9ed1f60a86d674bdc83fa4e02" translate="yes" xml:space="preserve">
          <source>Disallow Unused Variables (no-unused-vars)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904a84b210e203305662bac003ef0ac1c33788d2" translate="yes" xml:space="preserve">
          <source>Disallow Use of &lt;code&gt;__proto__&lt;/code&gt; (no-proto)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64af2da3c5b887652898e7849a8fb797510e2f8a" translate="yes" xml:space="preserve">
          <source>Disallow Use of &lt;code&gt;undefined&lt;/code&gt; Variable (no-undefined)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b498d4c760b158923f299f86597ba89defcb37" translate="yes" xml:space="preserve">
          <source>Disallow Use of Alert (no-alert)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57f68fabdc86c0dc3b40c6e0c75f08883bf1655" translate="yes" xml:space="preserve">
          <source>Disallow Use of Chained Assignment Expressions (no-multi-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101ff125bfe39b7329c9c8b053b39285eb135c53" translate="yes" xml:space="preserve">
          <source>Disallow Use of caller/callee (no-caller)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660c9c588586872fd207d7be566d1ccd32df370d" translate="yes" xml:space="preserve">
          <source>Disallow Use of the Comma Operator (no-sequences)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56429084603c34ca8246c22035a8794f1a11bf5e" translate="yes" xml:space="preserve">
          <source>Disallow Warning Comments (no-warning-comments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b7422058248c392772f4d86676edee55649d2f" translate="yes" xml:space="preserve">
          <source>Disallow arrow functions where they could be confused with comparisons (no-confusing-arrow)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a707916edf7e446f089abe3856233c654f9dd134" translate="yes" xml:space="preserve">
          <source>Disallow assignment to native objects or read-only global variables (no-global-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c974f1629052fb76f9ee520a607fb18fe29b7e5" translate="yes" xml:space="preserve">
          <source>Disallow assignments that can lead to race conditions due to usage of &lt;code&gt;await&lt;/code&gt; or &lt;code&gt;yield&lt;/code&gt; (require-atomic-updates)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b78c99e6b262d768af341789d9a741bb26c7e9" translate="yes" xml:space="preserve">
          <source>Disallow async functions which have no &lt;code&gt;await&lt;/code&gt; expression (require-await)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2ff655122b412f335777c39d087090906efb75" translate="yes" xml:space="preserve">
          <source>Disallow characters which are made with multiple code points in character class syntax (no-misleading-character-class)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e491b55bb9829fb75dfbc400df31641ab71a5503" translate="yes" xml:space="preserve">
          <source>Disallow declarations in the global scope (no-implicit-globals)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9193513f05dec925feb3b8c4a927187dd6abd2b4" translate="yes" xml:space="preserve">
          <source>Disallow duplicate conditions in &lt;code&gt;if-else-if&lt;/code&gt; chains (no-dupe-else-if)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6f9f4f0575a408217f721a19436d1b0c8252ef" translate="yes" xml:space="preserve">
          <source>Disallow duplicate imports (no-duplicate-imports)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1417de1e4cc27fa4685c47cbf616c7078391e320" translate="yes" xml:space="preserve">
          <source>Disallow duplicate name in class members (no-dupe-class-members)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb09a0611d9df11dccf271baa8e00751d9c8b045" translate="yes" xml:space="preserve">
          <source>Disallow empty destructuring patterns (no-empty-pattern)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14c526c57774dbf9f1030e186a9280749a35495" translate="yes" xml:space="preserve">
          <source>Disallow empty functions (no-empty-function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acfeee06cef52040c2c8912344633916e65fc3c" translate="yes" xml:space="preserve">
          <source>Disallow eval() (no-eval)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4686fc8dc69d5b4d7108dfb19795e49228fde72b" translate="yes" xml:space="preserve">
          <source>Disallow generator functions that do not have &lt;code&gt;yield&lt;/code&gt; (require-yield)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ad9ff1d1ee24602e115bcea1c04398f089267f" translate="yes" xml:space="preserve">
          <source>Disallow lexical declarations in case/default clauses (no-case-declarations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c814485a0d6649ef80fabb619f6c7824b34ebfb" translate="yes" xml:space="preserve">
          <source>Disallow mixes of different operators (no-mixed-operators)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00aa91e3fcd025bf02aae10a0863ce2fa3a1b328" translate="yes" xml:space="preserve">
          <source>Disallow modifying variables of class declarations (no-class-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff0f515c4a5acef8554d9e19712332e5094683a" translate="yes" xml:space="preserve">
          <source>Disallow modifying variables that are declared using &lt;code&gt;const&lt;/code&gt; (no-const-assign)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b3acdf6d2ce7a6cc71059a63088848b497a1a9" translate="yes" xml:space="preserve">
          <source>Disallow multiple spaces (no-multi-spaces)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4059f148bf6729d218ada2c0a5aa40a8a19a2c7" translate="yes" xml:space="preserve">
          <source>Disallow new For Side Effects (no-new)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0870579b52e8cb0810688582c151937646b24a" translate="yes" xml:space="preserve">
          <source>Disallow new require (no-new-require)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d43b3fd0ce13bdf8e052aad7450993b3f2bde0" translate="yes" xml:space="preserve">
          <source>Disallow or enforce spaces inside of blocks after opening block and before closing block (block-spacing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e966c8b7ee3d9a45170ff6640174eb3458c007e" translate="yes" xml:space="preserve">
          <source>Disallow or enforce spaces inside of brackets (array-bracket-spacing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c0d1bc538bf16403b013f81ac61f7f92bb3dcd" translate="yes" xml:space="preserve">
          <source>Disallow or enforce spaces inside of computed properties (computed-property-spacing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062f6b5006e903ea9f77c8ea7f86a33aca94aa3b" translate="yes" xml:space="preserve">
          <source>Disallow or enforce spaces inside of parentheses (space-in-parens)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5872b837fb41e64c201ebb82d1d9855bcc411290" translate="yes" xml:space="preserve">
          <source>Disallow process.env (no-process-env)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd923f1dc6daa6f09d42c20b9c552ca9f68c4f51" translate="yes" xml:space="preserve">
          <source>Disallow process.exit() (no-process-exit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f36b4940a8475af9c7f76547c3ac019f5c86cc" translate="yes" xml:space="preserve">
          <source>Disallow redundant return statements (no-useless-return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3730329134db3577c391215b6265cf31e0af2449" translate="yes" xml:space="preserve">
          <source>Disallow renaming import, export, and destructured assignments to the same name (no-useless-rename)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e2ade85b7b2bdf6f21deea56553a5e11a57d69" translate="yes" xml:space="preserve">
          <source>Disallow return before else (no-else-return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39aac5b0c23a193e413e94c3141f98e57efe72e" translate="yes" xml:space="preserve">
          <source>Disallow returning value in constructor (no-constructor-return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6388716cf7cc3875886ed1acbb66db8a6146e9" translate="yes" xml:space="preserve">
          <source>Disallow returning values from setters (no-setter-return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8976bfbedfb87152dc2da186fb89b55a6ad2091a" translate="yes" xml:space="preserve">
          <source>Disallow specific global variables (no-restricted-globals)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e9031822083cae5e962fd21808446e817524b9" translate="yes" xml:space="preserve">
          <source>Disallow specific imports (no-restricted-imports)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da64c17861f3b323d744b09c07df2ba10467412" translate="yes" xml:space="preserve">
          <source>Disallow string concatenation when using &lt;code&gt;__dirname&lt;/code&gt; and &lt;code&gt;__filename&lt;/code&gt; (no-path-concat)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b702c6aac865f0081efcf1d33cc776229d3568ac" translate="yes" xml:space="preserve">
          <source>Disallow template literal placeholder syntax in regular strings (no-template-curly-in-string)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258344b22b29fe054acf404790e03f3f06b762ca" translate="yes" xml:space="preserve">
          <source>Disallow the type conversion with shorter notations. (no-implicit-coercion)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27a8e647054209312334873abc7f3a38ddec8b1" translate="yes" xml:space="preserve">
          <source>Disallow the use of &lt;code&gt;Math.pow&lt;/code&gt; in favor of the &lt;code&gt;**&lt;/code&gt; operator (prefer-exponentiation-operator)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4eef18a4b3c258d8f9aefa4c027f1262fbad57e" translate="yes" xml:space="preserve">
          <source>Disallow unmodified conditions of loops (no-unmodified-loop-condition)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854e108f83eda418c2010e10ec7c0cdf86e19e26" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary &lt;code&gt;.call()&lt;/code&gt; and &lt;code&gt;.apply()&lt;/code&gt;. (no-useless-call)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b2d0d663016ca3e37eea525e884feb0c8af5ba" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary catch clauses (no-useless-catch)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a660be7228a5b24d2bd8e806d9d10d70e0fe1cd" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary computed property keys in objects and classes (no-useless-computed-key)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802954094d46e7de388ca0d838e6955f016d8d4" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary concatenation of strings (no-useless-concat)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b77c1509831e6ed1765f4e332efdbb26001992c" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary constructor (no-useless-constructor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11169643ef078086d5e3bf0c99c04262c1b1e191" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary escape usage (no-useless-escape)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d3894d4cf1e97ce6672ac64383e9b238e3ab84" translate="yes" xml:space="preserve">
          <source>Disallow unnecessary function binding (no-extra-bind)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecf644e2b3969e844207ca657c9bc49a07ab721" translate="yes" xml:space="preserve">
          <source>Disallow use of &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; before calling &lt;code&gt;super()&lt;/code&gt; in constructors. (no-this-before-super)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61591d098dd291d5bc87f4ea76a2dcb6f11ab07" translate="yes" xml:space="preserve">
          <source>Disallow use of Object.prototypes builtins directly (no-prototype-builtins)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fc383badb739f075bd93e518406fb7b64b27a7" translate="yes" xml:space="preserve">
          <source>Disallow use of the &lt;code&gt;RegExp&lt;/code&gt; constructor in favor of regular expression literals (prefer-regex-literals)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2001da5263b201691d16a78de7315420aa5cad3e" translate="yes" xml:space="preserve">
          <source>Disallow use of the void operator. (no-void)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907a7f9342405b4d931c1af17fb030729c773f1f" translate="yes" xml:space="preserve">
          <source>Disallowing or enforcing space around a semicolon can improve the readability of your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be37eb13887051bf64b3f398addfad20daf0e8a7" translate="yes" xml:space="preserve">
          <source>Disallowing usage of specific Node.js modules can be useful if you want to limit the available methods a developer can use. For example, you can block usage of the &lt;code&gt;fs&lt;/code&gt; module if you want to disallow file system access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9bdead6628bc1ffc4b1625c00f89ab6626b7ca" translate="yes" xml:space="preserve">
          <source>Disallowing usage of specific global variables can be useful if you want to allow a set of global variables by enabling an environment, but still want to disallow some of those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a1e84fa47db4336c04638b9c4bee6460016df1" translate="yes" xml:space="preserve">
          <source>Disallows directly modifying the prototype of builtin objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f40a399f748989e8a3884edb40a574e0463995" translate="yes" xml:space="preserve">
          <source>Disallows unnecessary &lt;code&gt;return await&lt;/code&gt; (no-return-await)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9707f0d4d9e18a2a7d14be51fa81c0ed6f21b8b4" translate="yes" xml:space="preserve">
          <source>Discussion about Complexity in ESLint and more links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8541ecf58a6d7141d00d2ab846f627b160a8bff2" translate="yes" xml:space="preserve">
          <source>Do not use this rule if you want to allow named functions to have different names from the variable or property to which they are assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09d8fe71d819660f00ffa7e97f5581804bd696d" translate="yes" xml:space="preserve">
          <source>Do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3c2c81848b884eff94bf361cfc1c803e857543" translate="yes" xml:space="preserve">
          <source>Documentation generation is necessary for an object, method, or property (use appropriate documentation comments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bd65f4c0fdbd98242b51977df25dfa18ffa4d9" translate="yes" xml:space="preserve">
          <source>Documentation source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406076f6eaa6078ddba41b50c9656b6087ed57a5" translate="yes" xml:space="preserve">
          <source>Dojo Style Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34637b2458a3cdf0654f0306fc12fbdb67115257" translate="yes" xml:space="preserve">
          <source>Don't try to do too much and suggest large refactors that could introduce a lot of breaking changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba1bfaceddfc50867dc7c93fc958d38090f34bd" translate="yes" xml:space="preserve">
          <source>Don't use this rule or don't include a module in the list for this rule if you want to be able to import a module in your project without an ESLint error or warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507bb1266b0e7e1bdb7b389006f77d5f55cd2371" translate="yes" xml:space="preserve">
          <source>Double check your submission</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c407fa6a8a8f7698fc4a50485941f026ea621497" translate="yes" xml:space="preserve">
          <source>Dropping Support for Node.js &amp;lt; 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76521d9bc08f480d1ea5e7695a0e5c3fa941d0e" translate="yes" xml:space="preserve">
          <source>Due to a bug, glob patterns in an &lt;code&gt;.eslintignore&lt;/code&gt; file were previously resolved from the current working directory of the process, rather than the location of the &lt;code&gt;.eslintignore&lt;/code&gt; file. Starting in 4.0, patterns in an &lt;code&gt;.eslintignore&lt;/code&gt; file will be resolved from the &lt;code&gt;.eslintignore&lt;/code&gt; file's location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac256469a735ad05860934eceaf83ae0909e82ac" translate="yes" xml:space="preserve">
          <source>Due to a bug, it was previously the case that an &lt;code&gt;overrides&lt;/code&gt; block in a shareable config had precedence over the top level of a parent config. For example, with the following config setup, the &lt;code&gt;semi&lt;/code&gt; rule would end up enabled even though it was explicitly disabled in the end user's config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a7f33a7f495614b11e6f1f93bee4380705f9df" translate="yes" xml:space="preserve">
          <source>Due to a bug, the glob patterns in a &lt;code&gt;files&lt;/code&gt; list in an &lt;code&gt;overrides&lt;/code&gt; section of a config file would never match dotfiles, making it impossible to have overrides apply to files starting with a dot. This bug has been fixed in ESLint v6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6f51953678164081221b8da9f3d18347fbe419" translate="yes" xml:space="preserve">
          <source>Due to a quirk in the way rule schemas worked, it was possible that you'd need to account for the rule severity (0, 1, or 2) in a rule schema if the options were sufficiently complex. That would result in a schema such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e7773f5e0a5b88636ae932433473208df89f29" translate="yes" xml:space="preserve">
          <source>Due to the limits of static analysis, this rule cannot guarantee that you will only reject Promises with &lt;code&gt;Error&lt;/code&gt; objects. While the rule will report cases where it can guarantee that the rejection reason is clearly not an &lt;code&gt;Error&lt;/code&gt;, it will not report cases where there is uncertainty about whether a given reason is an &lt;code&gt;Error&lt;/code&gt;. For more information on this caveat, see the &lt;a href=&quot;no-throw-literal#known-limitations&quot;&gt;similar limitations&lt;/a&gt; in the &lt;code&gt;no-throw-literal&lt;/code&gt; rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393c21aa095121470cbdefad84e9ffa6b789d8bc" translate="yes" xml:space="preserve">
          <source>Due to the limits of static analysis, this rule cannot guarantee that you will only throw &lt;code&gt;Error&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f7d87f3cd36181f0d2292568919f1838d91b56" translate="yes" xml:space="preserve">
          <source>Due to the limits of static analysis, this rule does not account for possible side effects and in certain cases might not report a missing pair for a getter/setter that has a computed key, like in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a91fee11d13e571bd1d29f8571cb0a12898f895" translate="yes" xml:space="preserve">
          <source>Due to the limits of static analysis, this rule does not account for possible side effects and in certain cases might require or miss to require grouping or order for getters/setters that have a computed key, like in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68057b34cdaad5e1f48a20f01603a70ad47c47e9" translate="yes" xml:space="preserve">
          <source>Due to these different behaviors, it is common to have guidelines as to which style of function should be used. There is really no correct or incorrect choice here, it is just a preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167c6eddd2bba89b43661fb2871d3bf58f597da2" translate="yes" xml:space="preserve">
          <source>ECMA whitespace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eaf7a2ca791fdc3e166f8667ddd14853a86698f" translate="yes" xml:space="preserve">
          <source>ECMA262 edition 5.1 &amp;sect;15.1.1.3: undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b54b44025140f2d0bd83d9a1ae81d28fc01af1" translate="yes" xml:space="preserve">
          <source>ECMAScript 3 described as series of keywords and reserved words, such as &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt;, that are used or intended to be used for a core language feature. The specification also indicated that these keywords and reserved words could not be used as object property names without being enclosed in strings. An error occurs in an ECMAScript 3 environment when you use a keyword or reserved word in an object literal. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9eb887e43a8068ad7df2c0792849724bfeaf129" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 changed the behavior of &lt;code&gt;parseInt()&lt;/code&gt; so that it no longer autodetects octal literals and instead treats them as decimal literals. However, the differences between hexadecimal and decimal interpretation of the first parameter causes many developers to continue using the radix parameter to ensure the string is interpreted in the intended way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a8b61325ad4489c8adabc719a5d3fa43430ede" translate="yes" xml:space="preserve">
          <source>ECMAScript 5 loosened the restriction such that keywords and reserved words can be used as object keys without causing an error. However, any code that needs to run in ECMAScript 3 still needs to avoid using keywords and reserved words as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02b03612b472d412029a9017657b2e96f26db53" translate="yes" xml:space="preserve">
          <source>ECMAScript 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305e74fb9c168f6e025c2259623b04d08156fc28" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 adds the following flag arguments to the &lt;code&gt;RegExp&lt;/code&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42472401341410855b5c28febe6f8d0bd71b32cf" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 allows programmers to create strings containing variable or expressions using template literals, instead of string concatenation, by writing expressions like &lt;code&gt;${variable}&lt;/code&gt; between two backtick quotes (`). It can be easy to use the wrong quotes when wanting to use template literals, by writing &lt;code&gt;&quot;${variable}&quot;&lt;/code&gt;, and end up with the literal value &lt;code&gt;&quot;${variable}&quot;&lt;/code&gt; instead of a string containing the value of the injected expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd5975125a9a7b7378fbb8c238846f6c1c02229" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 allows programmers to create variables with block scope instead of function scope using the &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; keywords. Block scope is common in many other programming languages and helps programmers avoid mistakes such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebd09caaf1f6990e29753f0a03cb5d486294ee0" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 compatibility table - Iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f420d6c595a4552573e8bd85b098c08ba81d346d" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 introduced a &lt;code&gt;name&lt;/code&gt; property on all functions. The value of &lt;code&gt;name&lt;/code&gt; is determined by evaluating the code around the function to see if a name can be inferred. For example, a function assigned to a variable will automatically have a &lt;code&gt;name&lt;/code&gt; property equal to the name of the variable. The value of &lt;code&gt;name&lt;/code&gt; is then used in stack traces for easier debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0727be604fa29d5b0813697791a5c1a7370ca02f" translate="yes" xml:space="preserve">
          <source>ECMAScript 6 provides a concise form for defining object literal methods and properties. This syntax can make defining complex object literals much cleaner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dc029f7879bc5361b79421c00053a9f1c9d73d" translate="yes" xml:space="preserve">
          <source>ECMAScript provides several global objects that are intended to be used as-is. Some of these objects look as if they could be constructors due their capitalization (such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;JSON&lt;/code&gt;) but will throw an error if you try to execute them as functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005a4d8558abf3d8c4b0d91f3c9ee0b37f67abc9" translate="yes" xml:space="preserve">
          <source>ES2015 allows for the renaming of references in import and export statements as well as destructuring assignments. This gives programmers a concise syntax for performing these operations while renaming these references:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab53a523db0cb8d9de7c0c9b958b4e00125a8490" translate="yes" xml:space="preserve">
          <source>ES2015 introduced the rest and spread operators, which expand an iterable structure into its individual parts. Some examples of their usage are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7ccceab6bf6243e586e6f50eb474c66a32a327" translate="yes" xml:space="preserve">
          <source>ES2015 provides a default class constructor if one is not specified. As such, it is unnecessary to provide an empty constructor or one that simply delegates into its parent class, as in the following examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fbc5b88ee0a00766e3bd9adb38b0d07b5dc90d" translate="yes" xml:space="preserve">
          <source>ES5 &amp;sect;15.1.1 Value Properties of the Global Object (&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;) as well as strict mode restricted identifiers &lt;code&gt;eval&lt;/code&gt; and &lt;code&gt;arguments&lt;/code&gt; are considered to be restricted names in JavaScript. Defining them to mean something else can have unintended consequences and confuse others reading the code. For example, there's nothing preventing you from writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387485c3637a014fbaa964164d0526497139ac1e" translate="yes" xml:space="preserve">
          <source>ESLint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1678a5cc424ad36e573e3b7351628a827298f10c" translate="yes" xml:space="preserve">
          <source>ESLint 2.0.0 removes these conflicting defaults, and so you may begin seeing linting errors related to these rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a736317f694a499ef758e7123a2c74c6252552e3" translate="yes" xml:space="preserve">
          <source>ESLint 4.0.0 introduced a rewrite of the &lt;a href=&quot;indent&quot;&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/a&gt; rule, which now reports more errors than it did in previous versions. To ease the process of migrating to 4.0.0, the &lt;code&gt;indent-legacy&lt;/code&gt; rule was introduced as a snapshot of the &lt;code&gt;indent&lt;/code&gt; rule from ESLint 3.x. If your build is failing after the upgrade to 4.0.0, you can disable &lt;code&gt;indent&lt;/code&gt; and enable &lt;code&gt;indent-legacy&lt;/code&gt; as a quick fix. Eventually, you should switch back to the &lt;code&gt;indent&lt;/code&gt; rule to get bugfixes and improvements in future versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c73eef4f37e68b547f0804fb6e8849efa03fc3e" translate="yes" xml:space="preserve">
          <source>ESLint Formatters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28a3d4233bd074dcdd911c7fcb3f2fe0da40594" translate="yes" xml:space="preserve">
          <source>ESLint Nibble</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c556421f2446081e8e77cc2e3553a9f320fcd7" translate="yes" xml:space="preserve">
          <source>ESLint Watch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea021340212002938fbfbde5e06f44ad9ffc018a" translate="yes" xml:space="preserve">
          <source>ESLint allows you to specify the JavaScript language options you want to support. By default, ESLint expects ECMAScript 5 syntax. You can override that setting to enable support for other ECMAScript versions as well as JSX by using parser options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470150da6da4b9450495b9f1735c2c9b644413ac" translate="yes" xml:space="preserve">
          <source>ESLint analyzes code paths while traversing AST. You can access that code path objects with five events related to code paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396d8f3b4ef43ddb426cf9bf16ba2a9db6468267" translate="yes" xml:space="preserve">
          <source>ESLint checks the file extension of named code blocks then ignores those if &lt;a href=&quot;command-line-interface#--ext&quot;&gt;&lt;code&gt;--ext&lt;/code&gt; CLI option&lt;/a&gt; didn't include the file extension. Be sure to specify the &lt;code&gt;--ext&lt;/code&gt; option if you wanted to lint named code blocks other than &lt;code&gt;*.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8efb71231105abb49399b8947f231bbd025b182" translate="yes" xml:space="preserve">
          <source>ESLint comes with a large number of rules. You can modify which rules your project uses either using configuration comments or configuration files. To change a rule setting, you must set the rule ID equal to one of these values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e72e72244e20ec1b761773742dc0d5244c3643" translate="yes" xml:space="preserve">
          <source>ESLint comes with several built-in formatters to control the appearance of the linting results, and supports third-party formatters as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fa28abe1eb1bce3320d5803fc40c70fe9c0439" translate="yes" xml:space="preserve">
          <source>ESLint does not correct a violation of this rule if a comment immediately precedes the second or subsequent property specification on a line, since ESLint cannot determine which line to put the comment onto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5769c39d1eb09ccf2fb98eb2f551fedae6a8ae" translate="yes" xml:space="preserve">
          <source>ESLint extends configurations recursively, so a base configuration can also have an &lt;code&gt;extends&lt;/code&gt; property. Relative paths and shareable config names in an &lt;code&gt;extends&lt;/code&gt; property are resolved from the location of the config file where they appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d858a5de37140b0973460348df836fb305b6c00" translate="yes" xml:space="preserve">
          <source>ESLint has a built-in method to track performance of individual rules. Setting the &lt;code&gt;TIMING&lt;/code&gt; environment variable will trigger the display, upon linting completion, of the ten longest-running rules, along with their individual running time and relative performance impact as a percentage of total rule processing time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496fef34dcb839112be897febe56d8e3d2e133c5" translate="yes" xml:space="preserve">
          <source>ESLint has a lot of rules that you can configure to fine-tune it to your project. This section is an exhaustive list of every rule and link to each rule's documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9adf51e9374a767814e0881042ed017167dcec" translate="yes" xml:space="preserve">
          <source>ESLint has a very lightweight development environment that makes updating code fast and easy. This is a step-by-step guide to setting up a local development environment that will let you contribute back to the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821718da72ee6344880f01ab2f94ff5d5c537ac6" translate="yes" xml:space="preserve">
          <source>ESLint has several build scripts that help with various parts of development.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
