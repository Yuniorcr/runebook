<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="ae7afc7cda35b97ec7792acdf19b73ce74efe65d" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#getopt.GetoptError&quot;&gt;&lt;code&gt;GetoptError&lt;/code&gt;&lt;/a&gt;; for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c82b8c87f05ccdbcc3a216b96cf1a53ccf563e" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab0dbe8bd01f5049191cf6e61204d3aabd1ee93" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#xml.parsers.expat.ExpatError&quot;&gt;&lt;code&gt;ExpatError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadc80a1cf0273c362c8330f48cb4ddc336aa467" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;LF&lt;/code&gt;: &amp;ldquo;New line&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38e79ce398493b91869071ba23338cb1cdcfe6f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;TAB&lt;/code&gt;: &amp;ldquo;Horizontal tab&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59614a7389348101f9b1ea41779375c6d97c1236" translate="yes" xml:space="preserve">
          <source>Alias for output, for symmetry with &lt;a href=&quot;#subprocess.CalledProcessError.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d404ca5cc49cbaffcbe2bdf1037676fb7d13f36" translate="yes" xml:space="preserve">
          <source>Alias for output, for symmetry with &lt;a href=&quot;#subprocess.TimeoutExpired.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471e12f5a361936c257c992b8760c41b0d9219fb" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#zipfile.BadZipFile&quot;&gt;&lt;code&gt;BadZipFile&lt;/code&gt;&lt;/a&gt;, for compatibility with older Python versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="6fe6d4aa04dab6037d66eb4cb0b7d08cc478f9d1" translate="yes" xml:space="preserve">
          <source>Aliases may be nested and can contain anything that can be legally typed at the pdb prompt. Note that internal pdb commands &lt;em&gt;can&lt;/em&gt; be overridden by aliases. Such a command is then hidden until the alias is removed. Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c1a164caf9d915e6d248f6f19c0c5b6e55d90b" translate="yes" xml:space="preserve">
          <source>Aligning the text and specifying a width:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8c5176c3f03b97659161923f2b6492f7de7e73" translate="yes" xml:space="preserve">
          <source>Alignment</source>
          <target state="translated">Alignment</target>
        </trans-unit>
        <trans-unit id="a82c356470136a5da9aaa83cba880eb8930e0b37" translate="yes" xml:space="preserve">
          <source>All &amp;ldquo;a&amp;rdquo; functions in this section fail (more or less) silently if the executed program cannot be found; the &amp;ldquo;b&amp;rdquo; replacements raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1726842c26241e242541890252b33775dc0eae3" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;numbers#numbers.Real&quot;&gt;&lt;code&gt;numbers.Real&lt;/code&gt;&lt;/a&gt; types (&lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;) also include the following operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cd5f511616dc760e97502971cef15504097ea7" translate="yes" xml:space="preserve">
          <source>All &lt;em&gt;multipart&lt;/em&gt; type messages will be parsed as a container message object with a list of sub-message objects for their payload. The outer container message will return &lt;code&gt;True&lt;/code&gt; for &lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt;&lt;code&gt;iter_parts()&lt;/code&gt;&lt;/a&gt; will yield a list of subparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f4fc3531243119771587b080eddb77449d0769" translate="yes" xml:space="preserve">
          <source>All &lt;em&gt;other&lt;/em&gt; keys are passed through as keyword arguments to the handler&amp;rsquo;s constructor. For example, given the snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1488621f65c70bf66f1f957d6992583befc69c" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;gzip&lt;/strong&gt; compressed streams are required to contain this timestamp field. Some programs, such as &lt;strong&gt;gunzip&lt;/strong&gt;, make use of the timestamp. The format is the same as the return value of &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;os#os.stat_result.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt; attribute of the object returned by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64a36de478d59806bf84b1b01392cf6f7782245" translate="yes" xml:space="preserve">
          <source>All IMAP4rev1 commands are represented by methods of the same name, either upper-case or lower-case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59eff8140f7f6cc8eee1beb73070dcf238148177" translate="yes" xml:space="preserve">
          <source>All IO on an &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking&lt;/a&gt;. This means that for example &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; will raise an &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; if it needs more data than the incoming BIO has available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05e728b285d42a5cfcc7b03157016dd489531bf" translate="yes" xml:space="preserve">
          <source>All POP3 commands are represented by methods of the same name, in lower-case; most return the response text sent by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3414548f8739b658119012bc5a437c65f919cdbe" translate="yes" xml:space="preserve">
          <source>All Platforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f22c61ff7186f7ff5a4a7b6ac42edb2119d4f66" translate="yes" xml:space="preserve">
          <source>All Win32 systems support at least the following; most systems support many more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c3e2e5e166bd33c375661190706f81b3415ea8" translate="yes" xml:space="preserve">
          <source>All arguments are optional and default to &lt;code&gt;0&lt;/code&gt;. Arguments may be integers or floats, and may be positive or negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afeaadb9a3f4efc626cf9837aa136718e99ff657" translate="yes" xml:space="preserve">
          <source>All arguments are optional, and all except for &lt;em&gt;m&lt;/em&gt; should be specified in keyword form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45da80b609e066ba052795b1ad773af41969ce6d" translate="yes" xml:space="preserve">
          <source>All arguments are optional. &lt;em&gt;tzinfo&lt;/em&gt; may be &lt;code&gt;None&lt;/code&gt;, or an instance of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass. The remaining arguments must be integers in the following ranges:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41de24556098cd8f538669ad809aeff6d77b80b" translate="yes" xml:space="preserve">
          <source>All arguments are required. Arguments must be integers, in the following ranges:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c41702d1e64bc776766a2674021dc0acd4cdbf" translate="yes" xml:space="preserve">
          <source>All arguments except &lt;em&gt;filename&lt;/em&gt; are optional, and should be specified in keyword form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee92851c158191e121c730100fcb0d60e5daea4d" translate="yes" xml:space="preserve">
          <source>All arguments to commands are converted to strings, except for &lt;code&gt;AUTHENTICATE&lt;/code&gt;, and the last argument to &lt;code&gt;APPEND&lt;/code&gt; which is passed as an IMAP4 literal. If necessary (the string contains IMAP4 protocol-sensitive characters and isn&amp;rsquo;t enclosed with either parentheses or double quotes) each string is quoted. However, the &lt;em&gt;password&lt;/em&gt; argument to the &lt;code&gt;LOGIN&lt;/code&gt; command is always quoted. If you want to avoid having an argument string quoted (eg: the &lt;em&gt;flags&lt;/em&gt; argument to &lt;code&gt;STORE&lt;/code&gt;) then enclose the string in parentheses (eg: &lt;code&gt;r'(\Deleted)'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031f5a606c175280f66f531447d16bf78411e5be" translate="yes" xml:space="preserve">
          <source>All asyncio protocols can implement Base Protocol callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd9ac4a05c360b4511702914270df681ebcd66a" translate="yes" xml:space="preserve">
          <source>All attributes implemented by address objects are implemented by network objects as well. In addition, network objects implement additional attributes. All of these are common between &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ipaddress.IPv6Network&quot;&gt;&lt;code&gt;IPv6Network&lt;/code&gt;&lt;/a&gt;, so to avoid duplication they are only documented for &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt;. Network objects are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbd3c5316f651cef378d40e6f747eaf218b9172" translate="yes" xml:space="preserve">
          <source>All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class.</source>
          <target state="translated">Todas las excepciones incorporadas,que no salen del sistema,se derivan de esta clase.Todas las excepciones definidas por el usuario también deben derivarse de esta clase.</target>
        </trans-unit>
        <trans-unit id="db1915ddc75890b79023cb3d160beb6524f1bf36" translate="yes" xml:space="preserve">
          <source>All calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7ddca5ecb214fc8a6ff6ead24282869b3d742a" translate="yes" xml:space="preserve">
          <source>All changes to MH mailboxes are immediately applied, so this method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ef7a286b4df5227bf77c9f5987c04ce550fd48" translate="yes" xml:space="preserve">
          <source>All changes to Maildir mailboxes are immediately applied, so this method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba4ce793f08c2aeaad053356252f02ff9e86122" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;nntplib.putline&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;, where &lt;code&gt;line&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987583aba6ab43986ee540ce2d5a0a979df6e457" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;poplib.putline&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;, where &lt;code&gt;line&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebb715b219c77d2b43f98501c7daf8840b7660a" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;smtplib.SMTP.send&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;, where &lt;code&gt;data&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130ec836bbcb22e52ee0cf2ee501ba311b193ebb" translate="yes" xml:space="preserve">
          <source>All constants are now &lt;a href=&quot;enum#enum.IntEnum&quot;&gt;&lt;code&gt;enum.IntEnum&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;enum#enum.IntFlag&quot;&gt;&lt;code&gt;enum.IntFlag&lt;/code&gt;&lt;/a&gt; collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf35df37eefcc4b205b0e86b2bb42edebe23d0f" translate="yes" xml:space="preserve">
          <source>All constants from the &lt;a href=&quot;token#module-token&quot;&gt;&lt;code&gt;token&lt;/code&gt;&lt;/a&gt; module are also exported from &lt;a href=&quot;#module-tokenize&quot;&gt;&lt;code&gt;tokenize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299f6f3a07c72abcf84b07e20f8d55abc29c53bc" translate="yes" xml:space="preserve">
          <source>All ctypes data types have a default implementation of this classmethod that normally returns &lt;em&gt;obj&lt;/em&gt; if that is an instance of the type. Some types accept other objects as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb08e4edd7da0cbd1811b03590d4649a88477dd" translate="yes" xml:space="preserve">
          <source>All defect classes are subclassed from &lt;code&gt;email.errors.MessageDefect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4baad04cd2258a2a56a2f8fc40748593c649301" translate="yes" xml:space="preserve">
          <source>All entity references from &lt;a href=&quot;html.entities#module-html.entities&quot;&gt;&lt;code&gt;html.entities&lt;/code&gt;&lt;/a&gt; are replaced in the attribute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e465e17c1a37d9609d9ff9aff3453fc0828078fd" translate="yes" xml:space="preserve">
          <source>All errors raise exceptions. The normal exceptions for invalid argument types and out-of-memory conditions can be raised; starting from Python 3.3, errors related to socket or address semantics raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; or one of its subclasses (they used to raise &lt;a href=&quot;#socket.error&quot;&gt;&lt;code&gt;socket.error&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc61495b794fe0aa34758d7e2920183e2b9b9bd" translate="yes" xml:space="preserve">
          <source>All event loops on Windows do not support the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf8948335d4c7f60ae36806aadee301a2f018ea" translate="yes" xml:space="preserve">
          <source>All examples assume a native byte order, size, and alignment with a big-endian machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f809ac9170e1c6e6ca0f059a4d69cb510f1c3d53" translate="yes" xml:space="preserve">
          <source>All files are opened in text mode by default, but you can override this by specifying the &lt;em&gt;mode&lt;/em&gt; parameter in the call to &lt;a href=&quot;#fileinput.input&quot;&gt;&lt;code&gt;input()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fileinput.FileInput&quot;&gt;&lt;code&gt;FileInput&lt;/code&gt;&lt;/a&gt;. If an I/O error occurs during opening or reading a file, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293649b21c6f8fabecd0b086b5127c14b3f9f4f1" translate="yes" xml:space="preserve">
          <source>All following arguments are optional and can be accessed as instance attributes as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1a5d969852f9eb11af03015e19c7b15f856807" translate="yes" xml:space="preserve">
          <source>All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764b4d6c99569a6649ee11a3f6913ea07403cc88" translate="yes" xml:space="preserve">
          <source>All functions in this module raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; (or subclasses thereof) in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84373164968c0434294b7890098e13ea24078ada" translate="yes" xml:space="preserve">
          <source>All functions in this module take a file descriptor &lt;em&gt;fd&lt;/em&gt; as their first argument. This can be an integer file descriptor, such as returned by &lt;code&gt;sys.stdin.fileno()&lt;/code&gt;, or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, such as &lt;code&gt;sys.stdin&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f341c1e6b9c8fc27dafea2f00fb8167a63cc9f5b" translate="yes" xml:space="preserve">
          <source>All functions in this module take a file descriptor &lt;em&gt;fd&lt;/em&gt; as their first argument. This can be an integer file descriptor, such as returned by &lt;code&gt;sys.stdin.fileno()&lt;/code&gt;, or an &lt;a href=&quot;io#io.IOBase&quot;&gt;&lt;code&gt;io.IOBase&lt;/code&gt;&lt;/a&gt; object, such as &lt;code&gt;sys.stdin&lt;/code&gt; itself, which provides a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; that returns a genuine file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c016a97492d8141818b674772a3c8a871a986a2" translate="yes" xml:space="preserve">
          <source>All hard tab characters are expanded to spaces, using 8-column tab stops. Tabs in output generated by the tested code are not modified. Because any hard tabs in the sample output &lt;em&gt;are&lt;/em&gt; expanded, this means that if the code output includes hard tabs, the only way the doctest can pass is if the &lt;a href=&quot;#doctest.NORMALIZE_WHITESPACE&quot;&gt;&lt;code&gt;NORMALIZE_WHITESPACE&lt;/code&gt;&lt;/a&gt; option or &lt;a href=&quot;#doctest-directives&quot;&gt;directive&lt;/a&gt; is in effect. Alternatively, the test can be rewritten to capture the output and compare it to an expected value as part of the test. This handling of tabs in the source was arrived at through trial and error, and has proven to be the least error prone way of handling them. It is possible to use a different algorithm for handling tabs by writing a custom &lt;a href=&quot;#doctest.DocTestParser&quot;&gt;&lt;code&gt;DocTestParser&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fc0829f8889a22e20ca26434fbffa2dbfb02ff" translate="yes" xml:space="preserve">
          <source>All inclusive filters are applied at once, a trace is ignored if no inclusive filters match it. A trace is ignored if at least one exclusive filter matches it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ed3dd190b5e59dac468767ad1a88d8c4cdff2e" translate="yes" xml:space="preserve">
          <source>All incremental decoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470d7585fb716131eaa2ac8ea527a90daf24a7cc" translate="yes" xml:space="preserve">
          <source>All incremental encoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e3878938189c7d78e25155ae9238ddf1f98a9c" translate="yes" xml:space="preserve">
          <source>All leading whitespace is removed from the first line. Any leading whitespace that can be uniformly removed from the second line onwards is removed. Empty lines at the beginning and end are subsequently removed. Also, all tabs are expanded to spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51d14eb54abb876437a862ebfe4b068d36c0dfa" translate="yes" xml:space="preserve">
          <source>All methods are executed atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2e44950a8c7f07ebc93e9cd910e4550fa37531" translate="yes" xml:space="preserve">
          <source>All methods of RawTurtle/Turtle also exist as functions, i.e. part of the procedure-oriented interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2f5fe29ba9facb218010f2a3bc8e0b1c83b43a" translate="yes" xml:space="preserve">
          <source>All methods of TurtleScreen/Screen also exist as functions, i.e. as part of the procedure-oriented interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8c9608d8c8cf4f12dfcb3de0e222922cd76e05" translate="yes" xml:space="preserve">
          <source>All non-keyword arguments are converted to strings like &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; does and written to the stream, separated by &lt;em&gt;sep&lt;/em&gt; and followed by &lt;em&gt;end&lt;/em&gt;. Both &lt;em&gt;sep&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; must be strings; they can also be &lt;code&gt;None&lt;/code&gt;, which means to use the default values. If no &lt;em&gt;objects&lt;/em&gt; are given, &lt;a href=&quot;#print&quot;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt; will just write &lt;em&gt;end&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bd0bba21301d490d1f0f4f5b72a1a7c73e3c80" translate="yes" xml:space="preserve">
          <source>All numeric types (except complex) support the following operations (for priorities of the operations, see &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#operator-summary&quot;&gt;Operator precedence&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6665fa2ccce2b7ff1105b3c545c20966ec9a92ac" translate="yes" xml:space="preserve">
          <source>All numeric values can be set to &lt;a href=&quot;#locale.CHAR_MAX&quot;&gt;&lt;code&gt;CHAR_MAX&lt;/code&gt;&lt;/a&gt; to indicate that there is no value specified in this locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b594fe2c3851296cea213bd7a2a361b71f255ca" translate="yes" xml:space="preserve">
          <source>All of the classes in this module may safely be accessed from multiple threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645eb36ba7e57dbbed8d6a760714020cf4ac62b5" translate="yes" xml:space="preserve">
          <source>All of the components of an XML document are subclasses of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579249eb8333e1522a9306c9dc218208c5dd6079" translate="yes" xml:space="preserve">
          <source>All of the following opcodes use their arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04e47f9a86b5546a2f86ac6f4ea83613fea27aa" translate="yes" xml:space="preserve">
          <source>All of the functions and methods that accept a &lt;em&gt;timeout&lt;/em&gt; parameter, such as &lt;a href=&quot;#subprocess.call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;Popen.communicate()&lt;/code&gt;&lt;/a&gt; will raise &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; if the timeout expires before the process exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6356cc46033a8c7b9c133294fcdbe6e0be5fcabf" translate="yes" xml:space="preserve">
          <source>All of the methods described below are executed atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1381ad08272119ae9383c4ca5833de30090df2a0" translate="yes" xml:space="preserve">
          <source>All of the objects provided by this module that have &lt;code&gt;acquire()&lt;/code&gt; and &lt;code&gt;release()&lt;/code&gt; methods can be used as context managers for a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The &lt;code&gt;acquire()&lt;/code&gt; method will be called when the block is entered, and &lt;code&gt;release()&lt;/code&gt; will be called when the block is exited. Hence, the following snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426266f1daf6856271c7f10aaf7a44d29269f7a4" translate="yes" xml:space="preserve">
          <source>All of the other &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; methods are invoked by this method in the process of running the application, and thus exist primarily to allow customizing the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361c6eeb57590924defca62876cd3138035cc03c" translate="yes" xml:space="preserve">
          <source>All of the patchers can be used as class decorators. When used in this way they wrap every test method on the class. The patchers recognise methods that start with &lt;code&gt;'test'&lt;/code&gt; as being test methods. This is the same way that the &lt;a href=&quot;unittest#unittest.TestLoader&quot;&gt;&lt;code&gt;unittest.TestLoader&lt;/code&gt;&lt;/a&gt; finds test methods by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab58e75ce965a7bd1231cdeac8f8a7d861f2d0d" translate="yes" xml:space="preserve">
          <source>All of the usual dictionary methods are supported. In addition, there is a &lt;em&gt;maps&lt;/em&gt; attribute, a method for creating new subcontexts, and a property for accessing all but the first mapping:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1ed368ab426895fc4010d5ccc90be43d6d02bf" translate="yes" xml:space="preserve">
          <source>All of these encodings can only encode 256 of the 1114112 code points defined in Unicode. A simple and straightforward way that can store each Unicode code point, is to store each code point as four consecutive bytes. There are two possibilities: store the bytes in big endian or in little endian order. These two encodings are called &lt;code&gt;UTF-32-BE&lt;/code&gt; and &lt;code&gt;UTF-32-LE&lt;/code&gt; respectively. Their disadvantage is that if e.g. you use &lt;code&gt;UTF-32-BE&lt;/code&gt; on a little endian machine you will always have to swap bytes on encoding and decoding. &lt;code&gt;UTF-32&lt;/code&gt; avoids this problem: bytes will always be in natural endianness. When these bytes are read by a CPU with a different endianness, then bytes have to be swapped though. To be able to detect the endianness of a &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence, there&amp;rsquo;s the so called BOM (&amp;ldquo;Byte Order Mark&amp;rdquo;). This is the Unicode character &lt;code&gt;U+FEFF&lt;/code&gt;. This character can be prepended to every &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence. The byte swapped version of this character (&lt;code&gt;0xFFFE&lt;/code&gt;) is an illegal character that may not appear in a Unicode text. So when the first character in an &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence appears to be a &lt;code&gt;U+FFFE&lt;/code&gt; the bytes have to be swapped on decoding. Unfortunately the character &lt;code&gt;U+FEFF&lt;/code&gt; had a second purpose as a &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt;: a character that has no width and doesn&amp;rsquo;t allow a word to be split. It can e.g. be used to give hints to a ligature algorithm. With Unicode 4.0 using &lt;code&gt;U+FEFF&lt;/code&gt; as a &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; has been deprecated (with &lt;code&gt;U+2060&lt;/code&gt; (&lt;code&gt;WORD JOINER&lt;/code&gt;) assuming this role). Nevertheless Unicode software still must be able to handle &lt;code&gt;U+FEFF&lt;/code&gt; in both roles: as a BOM it&amp;rsquo;s a device to determine the storage layout of the encoded bytes, and vanishes once the byte sequence has been decoded into a string; as a &lt;code&gt;ZERO WIDTH
NO-BREAK SPACE&lt;/code&gt; it&amp;rsquo;s a normal character that will be decoded like any other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608f0188bcbb97cbbc13a474f23016a327d60ea0" translate="yes" xml:space="preserve">
          <source>All of these functions accept either only bytes or only string objects as their parameters. The result is an object of the same type, if a path or file name is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffe41514d0ba0c7681ed589014b164ed58ca272" translate="yes" xml:space="preserve">
          <source>All option names used in interpolation will be passed through the &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt;&lt;code&gt;optionxform()&lt;/code&gt;&lt;/a&gt; method just like any other option name reference. For example, using the default implementation of &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt;&lt;code&gt;optionxform()&lt;/code&gt;&lt;/a&gt; (which converts option names to lower case), the values &lt;code&gt;foo %(bar)s&lt;/code&gt; and &lt;code&gt;foo
%(BAR)s&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8653fe45c3a0598bc76268bebd81e9303afe45cd" translate="yes" xml:space="preserve">
          <source>All optional arguments and some positional arguments may be omitted at the command line. The &lt;code&gt;default&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;, whose value defaults to &lt;code&gt;None&lt;/code&gt;, specifies what value should be used if the command-line argument is not present. For optional arguments, the &lt;code&gt;default&lt;/code&gt; value is used when the option string was not present at the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2357893bbf0135effa63850776998057d31bea" translate="yes" xml:space="preserve">
          <source>All other keys are optional, but if present they will be interpreted as described below. In all cases below where a &amp;lsquo;configuring dict&amp;rsquo; is mentioned, it will be checked for the special &lt;code&gt;'()'&lt;/code&gt; key to see if a custom instantiation is required. If so, the mechanism described in &lt;a href=&quot;#logging-config-dict-userdef&quot;&gt;User-defined objects&lt;/a&gt; below is used to create an instance; otherwise, the context is used to determine what to instantiate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19335cd87d8044146043baea7e04506def10ffde" translate="yes" xml:space="preserve">
          <source>All other keystrokes are treated as a command to insert the given character and move right (with line wrapping).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa448210156c802173864da10c49485e10eee030" translate="yes" xml:space="preserve">
          <source>All other keyword arguments are passed to &lt;a href=&quot;subprocess#subprocess.Popen&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt; without interpretation, except for &lt;em&gt;bufsize&lt;/em&gt;, &lt;em&gt;universal_newlines&lt;/em&gt;, &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;text&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt;, which should not be specified at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66331451f6a993bd6a4ec3db875b698eaae7b08f" translate="yes" xml:space="preserve">
          <source>All other optional or keyword arguments are passed to the underlying &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cca373364efaf0f83bf84be29776f4417aa391" translate="yes" xml:space="preserve">
          <source>All pending input is processed, and a bytes object containing the remaining compressed output is returned. &lt;em&gt;mode&lt;/em&gt; can be selected from the constants &lt;code&gt;Z_NO_FLUSH&lt;/code&gt;, &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt;, &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_BLOCK&lt;/code&gt; (zlib 1.2.3.4), or &lt;code&gt;Z_FINISH&lt;/code&gt;, defaulting to &lt;code&gt;Z_FINISH&lt;/code&gt;. Except &lt;code&gt;Z_FINISH&lt;/code&gt;, all constants allow compressing further bytestrings of data, while &lt;code&gt;Z_FINISH&lt;/code&gt; finishes the compressed stream and prevents compressing any more data. After calling &lt;a href=&quot;#zlib.Compress.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; with &lt;em&gt;mode&lt;/em&gt; set to &lt;code&gt;Z_FINISH&lt;/code&gt;, the &lt;a href=&quot;#zlib.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; method cannot be called again; the only realistic action is to delete the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845f9f346c71bf5f52a9188ace35c5ecaa3ed3df" translate="yes" xml:space="preserve">
          <source>All pending input is processed, and a bytes object containing the remaining uncompressed output is returned. After calling &lt;a href=&quot;#zlib.Decompress.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#zlib.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; method cannot be called again; the only realistic action is to delete the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ede07789c80374474bed5143b787444e15389" translate="yes" xml:space="preserve">
          <source>All platforms support sockets as &lt;em&gt;out&lt;/em&gt; file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a103db9094a7f0996094f573e4e6dea84bed483" translate="yes" xml:space="preserve">
          <source>All recipient addresses refused. The errors for each recipient are accessible through the attribute &lt;code&gt;recipients&lt;/code&gt;, which is a dictionary of exactly the same sort as &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;SMTP.sendmail()&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e2d016729108cbe2a6252b7e9f9f25b138be7a" translate="yes" xml:space="preserve">
          <source>All recipients were refused. Nobody got the mail. The &lt;code&gt;recipients&lt;/code&gt; attribute of the exception object is a dictionary with information about the refused recipients (like the one returned when at least one recipient was accepted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7add52656f73c9f9ee77cb2062c4141e037209" translate="yes" xml:space="preserve">
          <source>All registry functions in this module return one of these objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fe55d4566c1ed0919fec63b9086185e8f09e18" translate="yes" xml:space="preserve">
          <source>All registry functions in this module which accept a handle object also accept an integer, however, use of the handle object is encouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ada46f1636db2c68259c55e5dbc2108cc9bb8a" translate="yes" xml:space="preserve">
          <source>All sections include &lt;code&gt;DEFAULTSECT&lt;/code&gt; values as well which means that &lt;code&gt;.clear()&lt;/code&gt; on a section may not leave the section visibly empty. This is because default values cannot be deleted from the section (because technically they are not there). If they are overridden in the section, deleting causes the default value to be visible again. Trying to delete a default value causes a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e89195defbf174865e4ed3cfadb43c73afc721" translate="yes" xml:space="preserve">
          <source>All start methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d16b8bb98cb55dff06e1fc0c1ed62ef7d52a39" translate="yes" xml:space="preserve">
          <source>All stream readers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bf04c11ae57a8dd9464a075f980fb924cc9927" translate="yes" xml:space="preserve">
          <source>All stream writers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511adfa816e0d1230d548ef9bee4b8cae3ba51aa" translate="yes" xml:space="preserve">
          <source>All streams are careful about the type of data you give to them. For example giving a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;write()&lt;/code&gt; method of a binary stream will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. So will giving a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;write()&lt;/code&gt; method of a text stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfe73a6df86f8c591b70da4f2a97d04f73d2842" translate="yes" xml:space="preserve">
          <source>All subclasses of &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; inherit a predefined &lt;code&gt;do_help()&lt;/code&gt;. This method, called with an argument &lt;code&gt;'bar'&lt;/code&gt;, invokes the corresponding method &lt;code&gt;help_bar()&lt;/code&gt;, and if that is not present, prints the docstring of &lt;code&gt;do_bar()&lt;/code&gt;, if available. With no argument, &lt;code&gt;do_help()&lt;/code&gt; lists all available help topics (that is, all commands with corresponding &lt;code&gt;help_*()&lt;/code&gt; methods or commands that have docstrings), and also lists any undocumented commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bfa0e96351e7a39a097e3fa26ad685c6d79d8d" translate="yes" xml:space="preserve">
          <source>All tasks waiting for event to be set will be immediately awakened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0d4a1283ee19c5afe6ce70d63cdcdf8e6081cc" translate="yes" xml:space="preserve">
          <source>All test modules must be importable from the top level of the project. If the start directory is not the top level directory then the top level directory must be specified separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e86b0a592b2672e5e54dba5071e87a49d334f8" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;'%'&lt;/code&gt; interpolations are expanded in the return values, unless the &lt;em&gt;raw&lt;/em&gt; argument is true. Values for interpolation keys are looked up in the same manner as the option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ec4ea8caa603e129e1cdd2dda1c8e8f88e770a" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;ttk&lt;/code&gt; Widgets accepts the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0aa67ee5d395c9a58857bc43029eb764f978551" translate="yes" xml:space="preserve">
          <source>All the assert methods accept a &lt;em&gt;msg&lt;/em&gt; argument that, if specified, is used as the error message on failure (see also &lt;a href=&quot;#unittest.TestCase.longMessage&quot;&gt;&lt;code&gt;longMessage&lt;/code&gt;&lt;/a&gt;). Note that the &lt;em&gt;msg&lt;/em&gt; keyword argument can be passed to &lt;a href=&quot;#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertWarns&quot;&gt;&lt;code&gt;assertWarns()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertWarnsRegex&quot;&gt;&lt;code&gt;assertWarnsRegex()&lt;/code&gt;&lt;/a&gt; only when they are used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0ad57eff10b2932e3d0da3c26b31a3d89093f7" translate="yes" xml:space="preserve">
          <source>All the patchers have &lt;code&gt;start()&lt;/code&gt; and &lt;code&gt;stop()&lt;/code&gt; methods. These make it simpler to do patching in &lt;code&gt;setUp&lt;/code&gt; methods or where you want to do multiple patches without nesting decorators or with statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b3a6c16b642ad7026440e7678571fdc94dcd20" translate="yes" xml:space="preserve">
          <source>All the signal numbers are defined symbolically. For example, the hangup signal is defined as &lt;code&gt;signal.SIGHUP&lt;/code&gt;; the variable names are identical to the names used in C programs, as found in &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;. The Unix man page for &amp;lsquo;&lt;code&gt;signal()&lt;/code&gt;&amp;rsquo; lists the existing signals (on some systems this is &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(2)&quot;&gt;signal(2)&lt;/a&gt;&lt;/em&gt;, on others the list is in &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(7)&quot;&gt;signal(7)&lt;/a&gt;&lt;/em&gt;). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a718f5f334bffff82ac9ca18a26df3475e054a96" translate="yes" xml:space="preserve">
          <source>All the user-callable functions and constructors take additional arguments which allow direct control over the location and name of temporary files and directories. Files names used by this module include a string of random characters which allows those files to be securely created in shared temporary directories. To maintain backward compatibility, the argument order is somewhat odd; it is recommended to use keyword arguments for clarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ab5e9ece9f6fec3cae084274e655c615da7669" translate="yes" xml:space="preserve">
          <source>All the variables below are simply symbolic indexes into the 10-tuple returned by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os#os.fstat&quot;&gt;&lt;code&gt;os.fstat()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.lstat&quot;&gt;&lt;code&gt;os.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1874be964dba6caf7536a5f6cdb4d12bf2f501" translate="yes" xml:space="preserve">
          <source>All these classes can be instantiated by calling them with at least one argument, the pathname of the shared library. If you have an existing handle to an already loaded shared library, it can be passed as the &lt;code&gt;handle&lt;/code&gt; named parameter, otherwise the underlying platforms &lt;code&gt;dlopen&lt;/code&gt; or &lt;code&gt;LoadLibrary&lt;/code&gt; function is used to load the library into the process, and to get a handle to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417f37663be75dee9f473867fc0f32047be90a11" translate="yes" xml:space="preserve">
          <source>All these types can be created by calling them with an optional initializer of the correct type and value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155ee124577e1fe137df7c33d4f6d23d523b7db8" translate="yes" xml:space="preserve">
          <source>All transports implement the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0861f5cc7168426f537bde444cc103b430c6b13c" translate="yes" xml:space="preserve">
          <source>All wrappers around MSI functions raise &lt;code&gt;MSIError&lt;/code&gt;; the string inside the exception will contain more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edffc8bbc8f24bd588ae17bcfd535bebc57f13ec" translate="yes" xml:space="preserve">
          <source>Allow an application to set the locale for errors and warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603dd6037e099395a31f0e59c9ba1913159c4a7e" translate="yes" xml:space="preserve">
          <source>Allow encoding and decoding of surrogate codes. These codecs normally treat the presence of surrogates as an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e19ac51136d0637f9af6d20c7258158d6721dc5" translate="yes" xml:space="preserve">
          <source>Allow simple extension commands notified by server in &lt;code&gt;CAPABILITY&lt;/code&gt; response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef317f8483480a64e1b0dccb14f7bb6883cce1dc" translate="yes" xml:space="preserve">
          <source>Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number &lt;code&gt;-1&lt;/code&gt;. After calling this function, &lt;code&gt;init_pair(x,
curses.COLOR_RED, -1)&lt;/code&gt; initializes, for instance, color pair &lt;em&gt;x&lt;/em&gt; to a red foreground color on the default background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af2608dce4ccd3a4d7fe7ccd5d8a999659ec6be" translate="yes" xml:space="preserve">
          <source>Allow wildcard when it is the leftmost and the only character in that segment. Partial wildcards like &lt;code&gt;www*.example.com&lt;/code&gt; are no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d545cb48e8fe2e090c8d20ba1902d68904e84436" translate="yes" xml:space="preserve">
          <source>Allowed members and attributes of enumerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27759cb686cd5bf827a6e5a82d77411f516dc61c" translate="yes" xml:space="preserve">
          <source>Allowing alternative option prefixes like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ebd07370440c663e4f0e55185f972d0240507b" translate="yes" xml:space="preserve">
          <source>Allowing applications to identify and clear their own uncollectable types when they appear in &lt;a href=&quot;#gc.garbage&quot;&gt;&lt;code&gt;garbage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1698c3d6368b675b56ce12b0b386c7be180d6706" translate="yes" xml:space="preserve">
          <source>Allowing non-resource names to be returned is to allow for situations where how a package and its resources are stored are known a priori and the non-resource names would be useful. For instance, returning subdirectory names is allowed so that when it is known that the package and resources are stored on the file system then those subdirectory names can be used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68e07d7d7b9f4e84654d4589ca6f207be1705b6" translate="yes" xml:space="preserve">
          <source>Allowing subclassing of enums that define members would lead to a violation of some important invariants of types and instances. On the other hand, it makes sense to allow sharing some common behavior between a group of enumerations. (See &lt;a href=&quot;#orderedenum&quot;&gt;OrderedEnum&lt;/a&gt; for an example.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5168b39c43df53db082b41562ffb47b2581e0dfa" translate="yes" xml:space="preserve">
          <source>Allows customizing how exceptions are handled in the event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af65b7b8a24fd1ab3b136e24dca1bdc29a79fcb" translate="yes" xml:space="preserve">
          <source>Allows enabling or disabling coroutine origin tracking. When enabled, the &lt;code&gt;cr_origin&lt;/code&gt; attribute on coroutine objects will contain a tuple of (filename, line number, function name) tuples describing the traceback where the coroutine object was created, with the most recent call first. When disabled, &lt;code&gt;cr_origin&lt;/code&gt; will be None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738636a3be8341b9cebe3dd58e0680a5032b2eea" translate="yes" xml:space="preserve">
          <source>Allows specifying that the module named &lt;em&gt;oldname&lt;/em&gt; is in fact the package named &lt;em&gt;newname&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8494b281173c0688479a4b6438c4a9f916278d" translate="yes" xml:space="preserve">
          <source>Allows you to compare data with unknown or inconsistent encoding. All inputs except &lt;em&gt;n&lt;/em&gt; must be bytes objects, not str. Works by losslessly converting all inputs (except &lt;em&gt;n&lt;/em&gt;) to str, and calling &lt;code&gt;dfunc(a, b,
fromfile, tofile, fromfiledate, tofiledate, n, lineterm)&lt;/code&gt;. The output of &lt;em&gt;dfunc&lt;/em&gt; is then converted back to bytes, so the delta lines that you receive have the same unknown/inconsistent encodings as &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dea076b2e37e15d1b1e3961b5af0025bae1395" translate="yes" xml:space="preserve">
          <source>Almost all asyncio objects are not thread safe, which is typically not a problem unless there is code that works with them from outside of a Task or a callback. If there&amp;rsquo;s a need for such code to call a low-level asyncio API, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef26a78c0878f712db4f13e47f33bc1d3fc032c" translate="yes" xml:space="preserve">
          <source>Almost all module functions depend on the basic function &lt;a href=&quot;#random.random&quot;&gt;&lt;code&gt;random()&lt;/code&gt;&lt;/a&gt;, which generates a random float uniformly in the semi-open range [0.0, 1.0). Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748de8dc879eb6680f9d63547210f95925fe14ea" translate="yes" xml:space="preserve">
          <source>Along with the &lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt;&lt;code&gt;QueueHandler&lt;/code&gt;&lt;/a&gt; class, &lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt;&lt;code&gt;QueueListener&lt;/code&gt;&lt;/a&gt; can be used to let handlers do their work on a separate thread from the one which does the logging. This is important in Web applications and also other service applications where threads servicing clients need to respond as quickly as possible, while any potentially slow operations (such as sending an email via &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt;&lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/a&gt;) are done on a separate thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e133f1847d6ba17ada9412544089973439552b65" translate="yes" xml:space="preserve">
          <source>Along with the &lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt;&lt;code&gt;QueueListener&lt;/code&gt;&lt;/a&gt; class, &lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt;&lt;code&gt;QueueHandler&lt;/code&gt;&lt;/a&gt; can be used to let handlers do their work on a separate thread from the one which does the logging. This is important in Web applications and also other service applications where threads servicing clients need to respond as quickly as possible, while any potentially slow operations (such as sending an email via &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt;&lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/a&gt;) are done on a separate thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13a6fce77ea6aef73a68321fa87a9bf9f996061" translate="yes" xml:space="preserve">
          <source>Already-issued keys are invalidated by this operation and should not be subsequently used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddaad8ef2dfb964d8f8351c0c13727dace14f681" translate="yes" xml:space="preserve">
          <source>Also add a &lt;em&gt;MIME-Version&lt;/em&gt; header if one is not present (see also &lt;a href=&quot;email.message#email.message.MIMEPart&quot;&gt;&lt;code&gt;MIMEPart&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04aa310dbe2a0c208ac29daad11f4c7a1536bccb" translate="yes" xml:space="preserve">
          <source>Also called the binomial coefficient because it is equivalent to the coefficient of k-th term in polynomial expansion of the expression &lt;code&gt;(1 + x) ** n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da92deb98831a7db28244e57fd52231a3f52e3a" translate="yes" xml:space="preserve">
          <source>Also if &lt;em&gt;chunksize&lt;/em&gt; is &lt;code&gt;1&lt;/code&gt; then the &lt;code&gt;next()&lt;/code&gt; method of the iterator returned by the &lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt;&lt;code&gt;imap()&lt;/code&gt;&lt;/a&gt; method has an optional &lt;em&gt;timeout&lt;/em&gt; parameter: &lt;code&gt;next(timeout)&lt;/code&gt; will raise &lt;a href=&quot;#multiprocessing.TimeoutError&quot;&gt;&lt;code&gt;multiprocessing.TimeoutError&lt;/code&gt;&lt;/a&gt; if the result cannot be returned within &lt;em&gt;timeout&lt;/em&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b37f91f9986d19a74d71c28f0eb3cf516b74d0" translate="yes" xml:space="preserve">
          <source>Also note that cookies saved while Mozilla is running will get clobbered by Mozilla.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05381aa96697605cddfb622e6c2165e3e0c1cfd5" translate="yes" xml:space="preserve">
          <source>Also note that if &lt;code&gt;sys.breakpointhook()&lt;/code&gt; is overridden programmatically, &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; consulted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332b93cd68d70da8be748419e7b6e1e7630df4b0" translate="yes" xml:space="preserve">
          <source>Also note that, aside from the zero argument form, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f25e2caeef7e4eba52c7c66bd42d7b1a2c33c9" translate="yes" xml:space="preserve">
          <source>Also referred to as integer division. The resultant value is a whole integer, though the result&amp;rsquo;s type is not necessarily int. The result is always rounded towards minus infinity: &lt;code&gt;1//2&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;(-1)//2&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;1//(-2)&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;(-1)//(-2)&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969aafb04012095b4d6476bad1048d3bb9a0ed99" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;functions#func-bytearray&quot;&gt;bytearray&lt;/a&gt; built-in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17dcbded66c86a6599675ce2d2b8b6553fefda44" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;functions#func-bytes&quot;&gt;bytes&lt;/a&gt; built-in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eea734960db56a51ce22d3968f6f1a077a73c20" translate="yes" xml:space="preserve">
          <source>Also test examples reachable from dict &lt;code&gt;m.__test__&lt;/code&gt;, if it exists and is not &lt;code&gt;None&lt;/code&gt;. &lt;code&gt;m.__test__&lt;/code&gt; maps names (strings) to functions, classes and strings; function and class docstrings are searched for examples; strings are searched directly, as if they were docstrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1297c5eac193ee99dea660520c3d5d38eabae727" translate="yes" xml:space="preserve">
          <source>Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d52e998b134acc66f821dc9e280d60f9ef6cf6e" translate="yes" xml:space="preserve">
          <source>Also, note that if the callback function is called in a thread created outside of Python&amp;rsquo;s control (e.g. by the foreign code that calls the callback), ctypes creates a new dummy Python thread on every invocation. This behavior is correct for most purposes, but it means that values stored with &lt;a href=&quot;threading#threading.local&quot;&gt;&lt;code&gt;threading.local&lt;/code&gt;&lt;/a&gt; will &lt;em&gt;not&lt;/em&gt; survive across different callbacks, even when those calls are made from the same C thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffda43397fafd0562d904b85d70629199b0601e9" translate="yes" xml:space="preserve">
          <source>Also, remember that a few standard headers (&lt;em&gt;Content-Length&lt;/em&gt;, &lt;em&gt;Content-Type&lt;/em&gt; and &lt;em&gt;Host&lt;/em&gt;) are added when the &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; is passed to &lt;a href=&quot;#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt;&lt;code&gt;OpenerDirector.open()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c31d635bef296eddc9b7067796d9ac2ceca1971" translate="yes" xml:space="preserve">
          <source>Also, setting &lt;code&gt;feature_version&lt;/code&gt; to a tuple &lt;code&gt;(major, minor)&lt;/code&gt; will attempt to parse using that Python version&amp;rsquo;s grammar. Currently &lt;code&gt;major&lt;/code&gt; must equal to &lt;code&gt;3&lt;/code&gt;. For example, setting &lt;code&gt;feature_version=(3, 4)&lt;/code&gt; will allow the use of &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; as variable names. The lowest supported version is &lt;code&gt;(3, 4)&lt;/code&gt;; the highest is &lt;code&gt;sys.version_info[0:2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c038b15b5de4f5872e231b0f4fef4b3d1ab4a8a" translate="yes" xml:space="preserve">
          <source>Also, subclassing an enumeration is allowed only if the enumeration does not define any members. So this is forbidden:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88f419db1d727742f4296df8e60905129a6eaa4" translate="yes" xml:space="preserve">
          <source>Alt-/</source>
          <target state="translated">Alt-/</target>
        </trans-unit>
        <trans-unit id="523f1fa185299e53f8073a5f4db33f3a543e0c73" translate="yes" xml:space="preserve">
          <source>Alt-K</source>
          <target state="translated">Alt-K</target>
        </trans-unit>
        <trans-unit id="08044dfe50ef88573dd4b98d40dcea3bbb29cb1b" translate="yes" xml:space="preserve">
          <source>Alt-n</source>
          <target state="translated">Alt-n</target>
        </trans-unit>
        <trans-unit id="f8b5304cb9f515ca84a85d6f59d92eb340d9d86e" translate="yes" xml:space="preserve">
          <source>Alt-p</source>
          <target state="translated">Alt-p</target>
        </trans-unit>
        <trans-unit id="166df40fdc45fa8435a0aeaeb724d35b2824b092" translate="yes" xml:space="preserve">
          <source>Altered an exponent to fit representation constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a26af879a761b43ca17a9773a7940683b3c696e" translate="yes" xml:space="preserve">
          <source>Alternate character set mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b3cf0658ad7ba54f125c370d44945ffd5bbbab" translate="yes" xml:space="preserve">
          <source>Alternate constructor for &lt;a href=&quot;#itertools.chain&quot;&gt;&lt;code&gt;chain()&lt;/code&gt;&lt;/a&gt;. Gets chained inputs from a single iterable argument that is evaluated lazily. Roughly equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b95b413e2781a6e9f949c96afb8e7654b0b6a7c" translate="yes" xml:space="preserve">
          <source>Alternately, you can use the &lt;code&gt;setparameters()&lt;/code&gt; method to set all three audio parameters at once. This is more convenient, but may not be as flexible in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120472849a159296aff2262eb84d4aabcf036f62" translate="yes" xml:space="preserve">
          <source>Alternative Generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3192b9728e7aa2994a20b12d0f484a50d4d9db8" translate="yes" xml:space="preserve">
          <source>Alternative command line option and argument parsing library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f08874d859f81959583d494b6024b88f3206311" translate="yes" xml:space="preserve">
          <source>Alternative constructor. The &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; function is actually a shortcut to this classmethod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851a8413bea4eb55cb0ed6c5d8946229982061a0" translate="yes" xml:space="preserve">
          <source>Alternatively &lt;em&gt;side_effect&lt;/em&gt; can be an exception class or instance. In this case the exception will be raised when the mock is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2589d09d2de9e0443187f1741ac9282ceccb5b" translate="yes" xml:space="preserve">
          <source>Alternatively you can just use &lt;code&gt;vars(my_mock)&lt;/code&gt; (instance members) and &lt;code&gt;dir(type(my_mock))&lt;/code&gt; (type members) to bypass the filtering irrespective of &lt;code&gt;mock.FILTER_DIR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560cce3f7cddd3320937666765b3cde7401b149e" translate="yes" xml:space="preserve">
          <source>Alternatively, a &lt;a href=&quot;#object.__reduce_ex__&quot;&gt;&lt;code&gt;__reduce_ex__()&lt;/code&gt;&lt;/a&gt; method may be defined. The only difference is this method should take a single integer argument, the protocol version. When defined, pickle will prefer it over the &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; method. In addition, &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; automatically becomes a synonym for the extended version. The main use for this method is to provide backwards-compatible reduce values for older Python releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8170ca6af713e396125022cf5ef83122166378a" translate="yes" xml:space="preserve">
          <source>Alternatively, annotate your generator as having a return type of either &lt;code&gt;AsyncIterable[YieldType]&lt;/code&gt; or &lt;code&gt;AsyncIterator[YieldType]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedcc0b6120fd2e8105cbf4a4b500b32795b5330" translate="yes" xml:space="preserve">
          <source>Alternatively, annotate your generator as having a return type of either &lt;code&gt;Iterable[YieldType]&lt;/code&gt; or &lt;code&gt;Iterator[YieldType]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a0dab4ca32a3c12f17a83c0742fa58af47dd19" translate="yes" xml:space="preserve">
          <source>Alternatively, for trusted input, the shell&amp;rsquo;s own pipeline support may still be used directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c53c18dbfbfd58e92716305404323d14180eb0" translate="yes" xml:space="preserve">
          <source>Alternatively, if you configured the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PATHEXT&lt;/code&gt; variables for your &lt;a href=&quot;https://docs.python.org/3.8/using/windows.html#using-on-windows&quot;&gt;Python installation&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7e943dc867b6734626dcdec4a25f40c03a249a" translate="yes" xml:space="preserve">
          <source>Alternatively, inputs can be rounded upon creation using the &lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt;&lt;code&gt;Context.create_decimal()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdd5b97037a223bd3a94ba552f2a81c0c1bf175" translate="yes" xml:space="preserve">
          <source>Alternatively, the first character of the format string can be used to indicate the byte order, size and alignment of the packed data, according to the following table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161271a624435f85f1f3f89dd66674cf40b4b411" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;a href=&quot;#inspect.signature&quot;&gt;&lt;code&gt;signature()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt;, which provide a more structured introspection API for callables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc69874a843b8bca70392a6b4845a801e795ddc4" translate="yes" xml:space="preserve">
          <source>Alternatively, you can provide the entire regular expression pattern by overriding the class attribute &lt;em&gt;pattern&lt;/em&gt;. If you do this, the value must be a regular expression object with four named capturing groups. The capturing groups correspond to the rules given above, along with the invalid placeholder rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537f3d9f59a4cc7f4b3b3b1d8452a61dcfcd6369" translate="yes" xml:space="preserve">
          <source>Alternatively, you can run the demo scripts individually. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0d39d2965e611cb72e153681483b50e7579f0d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;a href=&quot;#multiprocessing.get_context&quot;&gt;&lt;code&gt;get_context()&lt;/code&gt;&lt;/a&gt; to obtain a context object. Context objects have the same API as the multiprocessing module, and allow one to use multiple start methods in the same program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c25f25fc8595d803ebcfcdb59b8832dd261b439" translate="yes" xml:space="preserve">
          <source>Alters flag dispositions for messages in mailbox. &lt;em&gt;command&lt;/em&gt; is specified by section 6.4.6 of &lt;a href=&quot;https://tools.ietf.org/html/rfc2060.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2060&lt;/strong&gt;&lt;/a&gt; as being one of &amp;ldquo;FLAGS&amp;rdquo;, &amp;ldquo;+FLAGS&amp;rdquo;, or &amp;ldquo;-FLAGS&amp;rdquo;, optionally with a suffix of &amp;ldquo;.SILENT&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca488175d062da3b916916dcc5cf1c6c0a580bc" translate="yes" xml:space="preserve">
          <source>Although &lt;a href=&quot;os.path#os.path.relpath&quot;&gt;&lt;code&gt;os.path.relpath()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pathlib.PurePath.relative_to&quot;&gt;&lt;code&gt;PurePath.relative_to()&lt;/code&gt;&lt;/a&gt; have some overlapping use-cases, their semantics differ enough to warrant not considering them equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aba7d7e4194f7e569bb1e4976c4f49e69cd0c0d" translate="yes" xml:space="preserve">
          <source>Although Windows supports &lt;a href=&quot;#os.chmod&quot;&gt;&lt;code&gt;chmod()&lt;/code&gt;&lt;/a&gt;, you can only set the file&amp;rsquo;s read-only flag with it (via the &lt;code&gt;stat.S_IWRITE&lt;/code&gt; and &lt;code&gt;stat.S_IREAD&lt;/code&gt; constants or a corresponding integer value). All other bits are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff306b2fbe16e39bfb4f4ae1cb51d280ddc5b736" translate="yes" xml:space="preserve">
          <source>Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they&amp;rsquo;re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or adding, changing or removing attributes in the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs (see &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#filters-contextual&quot;&gt;Using Filters to impart contextual information&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e435625441b2f1626446dd761b8fafec987e5b2e" translate="yes" xml:space="preserve">
          <source>Although in many cases, changing the &lt;code id=&quot;index-15&quot;&gt;TZ&lt;/code&gt; environment variable may affect the output of functions like &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; without calling &lt;a href=&quot;#time.tzset&quot;&gt;&lt;code&gt;tzset()&lt;/code&gt;&lt;/a&gt;, this behavior should not be relied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7e770948da6ad1f5401b21b0a95acc8356e162" translate="yes" xml:space="preserve">
          <source>Although it is possible to store a pointer in shared memory remember that this will refer to a location in the address space of a specific process. However, the pointer is quite likely to be invalid in the context of a second process and trying to dereference the pointer from the second process may cause a crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ac042d6e7c56f32a4f17c62570dba38897403c" translate="yes" xml:space="preserve">
          <source>Although powerful, implementing &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; directly in your classes is error prone. For this reason, class designers should use the high-level interface (i.e., &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#object.__getstate__&quot;&gt;&lt;code&gt;__getstate__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;) whenever possible. We will show, however, cases where using &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; is the only option or leads to more efficient pickling or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a1b224e7ad62f02a109883807627a1786137e9" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; class of the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module implements this attribute, the database engine&amp;rsquo;s own support for the determination of &amp;ldquo;rows affected&amp;rdquo;/&amp;rdquo;rows selected&amp;rdquo; is quirky.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e789a4520b246a8dd4042cca86036c0f5a37df9" translate="yes" xml:space="preserve">
          <source>Although this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e0fade5c33a8c0706c1ee4ec4d3b8efefa5ae6" translate="yes" xml:space="preserve">
          <source>Always check a script for syntax errors first, by doing something like &lt;code&gt;python script.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940801d3a0b2504730f2938dc103aefa05f13928" translate="yes" xml:space="preserve">
          <source>Always create a new, empty database, open for reading and writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b68c9edfa6077c66acf9229ba5007aeabfd27c6" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92042192835b0201f0080332bb4fd84f15bccf0" translate="yes" xml:space="preserve">
          <source>Among other uses, this allows for initializing field values that depend on one or more other fields. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b2cdd1820b99395356f8484945cb33f7bdcc5d" translate="yes" xml:space="preserve">
          <source>Among the acceptable object types in the sequences are Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt; (e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, or objects returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt;), socket objects returned by &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket.socket()&lt;/code&gt;&lt;/a&gt;. You may also define a &lt;em&gt;wrapper&lt;/em&gt; class yourself, as long as it has an appropriate &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method (that really returns a file descriptor, not just a random integer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f920425dfdb0e1d204c3706777c2dfb256039d" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;unstructured&amp;rdquo; header is the default type of header in &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;. Any header that does not have a specified syntax is treated as unstructured. The classic example of an unstructured header is the &lt;em&gt;Subject&lt;/em&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e131bde80853d47856e8609b6fce7ef182378143" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; would also be useful for implementing variants of &lt;a href=&quot;functools#functools.lru_cache&quot;&gt;&lt;code&gt;functools.lru_cache()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47217b41bb1d751c58676a69570e3346ce5098e4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; subclass that executes calls asynchronously using a pool of at most &lt;em&gt;max_workers&lt;/em&gt; processes. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, it will default to the number of processors on the machine. If &lt;em&gt;max_workers&lt;/em&gt; is lower or equal to &lt;code&gt;0&lt;/code&gt;, then a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. On Windows, &lt;em&gt;max_workers&lt;/em&gt; must be equal or lower than &lt;code&gt;61&lt;/code&gt;. If it is not then &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then the default chosen will be at most &lt;code&gt;61&lt;/code&gt;, even if more processors are available. &lt;em&gt;mp_context&lt;/em&gt; can be a multiprocessing context or None. It will be used to launch the workers. If &lt;em&gt;mp_context&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, the default multiprocessing context is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f20b7dfdda203d4d41b7e3513f2e5b7977c7e2d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; subclass that uses a pool of at most &lt;em&gt;max_workers&lt;/em&gt; threads to execute calls asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c23a468c316481bdf2183623e1c6846281a4c8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; instance is fed HTML data and calls handler methods when start tags, end tags, text, comments, and other markup elements are encountered. The user should subclass &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; and override its methods to implement the desired behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0411e58015548ce4f79bef8d87ffb7f4cf110d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#http.client.HTTPConnection&quot;&gt;&lt;code&gt;HTTPConnection&lt;/code&gt;&lt;/a&gt; instance represents one transaction with an HTTP server. It should be instantiated passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the form &lt;code&gt;host:port&lt;/code&gt;, else the default HTTP port (80) is used. If the optional &lt;em&gt;timeout&lt;/em&gt; parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional &lt;em&gt;source_address&lt;/em&gt; parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional &lt;em&gt;blocksize&lt;/em&gt; parameter sets the buffer size in bytes for sending a file-like message body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2fb59076f740158ba38827bce5bff26573eb0c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#http.client.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; instance wraps the HTTP response from the server. It provides access to the request headers and the entity body. The response is an iterable object and can be used in a with statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30417cc6f1be8386812ed952297391d77fecc73f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88406d2d2cb0f1d94ca189eb244e8e9fe67a27a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt;&lt;code&gt;AddressValueError&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;address&lt;/em&gt; is not a valid IPv4 address. A &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt;&lt;code&gt;NetmaskValueError&lt;/code&gt;&lt;/a&gt; is raised if the mask is not valid for an IPv4 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c00af07c169fbcb2dc420227c3de9360f629263" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt;&lt;code&gt;AddressValueError&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;address&lt;/em&gt; is not a valid IPv6 address. A &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt;&lt;code&gt;NetmaskValueError&lt;/code&gt;&lt;/a&gt; is raised if the mask is not valid for an IPv6 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22e8e2b70a072517721b45185e0df25bf62617a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; can wrap an already-open &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, or operate directly on a named file. The &lt;em&gt;filename&lt;/em&gt; argument specifies either the file object to wrap, or the name of the file to open (as a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like&lt;/a&gt; object). When wrapping an existing file object, the wrapped file will not be closed when the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f46664bc28103047a5cc26287a1fd211662851" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#poplib.POP3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e40ef7751f7971309b0f2f98a0b9e618f82a29f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; instance encapsulates an SMTP connection. It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; method is called with those parameters during initialization. If specified, &lt;em&gt;local_hostname&lt;/em&gt; is used as the FQDN of the local host in the HELO/EHLO command. Otherwise, the local hostname is found using &lt;a href=&quot;socket#socket.getfqdn&quot;&gt;&lt;code&gt;socket.getfqdn()&lt;/code&gt;&lt;/a&gt;. If the &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call returns anything other than a success code, an &lt;a href=&quot;#smtplib.SMTPConnectError&quot;&gt;&lt;code&gt;SMTPConnectError&lt;/code&gt;&lt;/a&gt; is raised. The optional &lt;em&gt;timeout&lt;/em&gt; parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). If the timeout expires, &lt;a href=&quot;socket#socket.timeout&quot;&gt;&lt;code&gt;socket.timeout&lt;/code&gt;&lt;/a&gt; is raised. The optional source_address parameter allows binding to some specific source address in a machine with multiple network interfaces, and/or to some specific source TCP port. It takes a 2-tuple (host, port), for the socket to bind to as its source address before connecting. If omitted (or if host or port are &lt;code&gt;''&lt;/code&gt; and/or 0 respectively) the OS default behavior will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06f296a09f34cbedecd22805400c41792ba65c6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c58fa6751490e6d0e0d24391a1319962ea6b856" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt;&lt;code&gt;SMTP_SSL&lt;/code&gt;&lt;/a&gt; instance behaves exactly the same as instances of &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt;&lt;code&gt;SMTP_SSL&lt;/code&gt;&lt;/a&gt; should be used for situations where SSL is required from the beginning of the connection and using &lt;code&gt;starttls()&lt;/code&gt; is not appropriate. If &lt;em&gt;host&lt;/em&gt; is not specified, the local host is used. If &lt;em&gt;port&lt;/em&gt; is zero, the standard SMTP-over-SSL port (465) is used. The optional arguments &lt;em&gt;local_hostname&lt;/em&gt;, &lt;em&gt;timeout&lt;/em&gt; and &lt;em&gt;source_address&lt;/em&gt; have the same meaning as they do in the &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; class. &lt;em&gt;context&lt;/em&gt;, also optional, can contain a &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; and allows configuring various aspects of the secure connection. Please read &lt;a href=&quot;ssl#ssl-security&quot;&gt;Security considerations&lt;/a&gt; for best practices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4381f9c58b5b614abf7892a4b1f45ba2f8360660" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; is raised if the private key doesn&amp;rsquo;t match with the certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6503930af8cf259e4f55b3889f6a90017471de7a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; belongs to the application, the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; is not allowed to modify &lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; objects passed to it from the application, although it may make copies and modify those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79185203e0837e407c9cfffcf6c6215ce7683000" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; can be raised if either file cannot be accessed for some reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c390610582f1c814d75321837553c7075f775df3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised on syscall failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e45de73f5fdf516cc14c157c02fac73fbe32076" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised with the value of errno when the syscall returns -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfafa94088c5bdf5d8dde31f6359f2a768fafdbe" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; will be raised for integer values that cannot be represented in (binary) plist files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8902561dc3621643794d523ee377886fb9098907" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;Asynchronous Context Managers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda979d2a681c46df74b589ab265649e61f26e6c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdb63e9d860e12df6617deab601b29ae6ed82b3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for objects representing a file system path, e.g. &lt;a href=&quot;pathlib#pathlib.PurePath&quot;&gt;&lt;code&gt;pathlib.PurePath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ab1cf8909ceb57812b37b76ad04f8a117605e8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; to provide the ability to read &lt;em&gt;resources&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3659fcc10888c5f8705dd1f37cd33e48a2bd5bc6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for built-in modules. All known built-in modules are listed in &lt;a href=&quot;sys#sys.builtin_module_names&quot;&gt;&lt;code&gt;sys.builtin_module_names&lt;/code&gt;&lt;/a&gt;. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c626fb55d328c4d6e0b42ec6745a070458977c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for frozen modules. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba830af2baa220c63058bd688a4c963ad3b97c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;asynchronous context manager&lt;/a&gt;, similar to &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, that supports combining both synchronous and asynchronous context managers, as well as having coroutines for cleanup logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1e4da468b2701c8321a708c9ecb7fa13e7e244" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;LRU (least recently used) cache&lt;/a&gt; works best when the most recent calls are the best predictors of upcoming calls (for example, the most popular articles on a news server tend to change each day). The cache&amp;rsquo;s size limit assures that the cache does not grow without bound on long-running processes such as web servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3761bc9891cb807e2bd71dcdb229acbbbd262ea3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt;&lt;code&gt;io.BufferedIOBase&lt;/code&gt;&lt;/a&gt; input stream, ready to read from the start of the optional input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134b8c5f8672fe5893203afb4343e752db19a0c9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;'AF_INET'&lt;/code&gt; address is a tuple of the form &lt;code&gt;(hostname, port)&lt;/code&gt; where &lt;em&gt;hostname&lt;/em&gt; is a string and &lt;em&gt;port&lt;/em&gt; is an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728c7bfe4ba1acdb2c72fa346ca49007566679c3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;'AF_UNIX'&lt;/code&gt; address is a string representing a filename on the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279c56929f7657d41eb016d797accbea5fc43126" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HTTPError&lt;/code&gt; exception raised as a security consideration if the HTTPRedirectHandler is presented with a redirected URL which is not an HTTP, HTTPS or FTP URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3fcacb835ee81a42ed8d1456cd79b0226a380e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;http.client.HTTPMessage&lt;/code&gt; instance holds the headers from an HTTP response. It is implemented using the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64e19d30a6b038f871b1a0ba266542e0cf44731" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__abs__&lt;/code&gt; that is covariant in its return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1781ec94a5b61e39438eca65acc12f99677f117" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__bytes__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fc1ecd30f8b9047835f4fbca4de0c1a7114ddd" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__complex__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc0d8a21ea5d1cfd983b9cd9cc3577a029a5d40" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__float__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a96e7a759cdcee0e8a671529f6684f0284b3c73" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__index__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79db425b6df47a0eb8f4b913a4b8f04661c96e98" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__int__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ea43b80301cadc8e24d4d28cf8330de4a4c022" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__round__&lt;/code&gt; that is covariant in its return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47c45aeccb0981a58aa461b9dad821d712d95bc" translate="yes" xml:space="preserve">
          <source>An Event object manages an internal flag that can be set to &lt;em&gt;true&lt;/em&gt; with the &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; method and reset to &lt;em&gt;false&lt;/em&gt; with the &lt;a href=&quot;#asyncio.Event.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;asyncio-task#asyncio.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method blocks until the flag is set to &lt;em&gt;true&lt;/em&gt;. The flag is set to &lt;em&gt;false&lt;/em&gt; initially.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c1328176988806c7acc0aff05cc07892efc2ee" translate="yes" xml:space="preserve">
          <source>An HMAC object has the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ce959eac9c1efc4346b40a6c2b0fcdb09eb53b" translate="yes" xml:space="preserve">
          <source>An HTTP Extension Framework &lt;a href=&quot;https://tools.ietf.org/html/rfc2774.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2774&lt;/strong&gt;&lt;/a&gt;, Section 7 (Experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586cd579fe48ea0181edb6aee914365f538aa9a9" translate="yes" xml:space="preserve">
          <source>An HTTP Status Code to Report Legal Obstacles &lt;a href=&quot;https://tools.ietf.org/html/rfc7725.html&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;RFC 7725&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950ad3d1cdc9b45ddd459fc6e7dc06daf0425f0b" translate="yes" xml:space="preserve">
          <source>An HTTP status code as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;. This numeric value corresponds to a value found in the dictionary of codes as found in &lt;a href=&quot;http.server#http.server.BaseHTTPRequestHandler.responses&quot;&gt;&lt;code&gt;http.server.BaseHTTPRequestHandler.responses&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd6615738f7a41f38401d20b6960d63cc413cb5" translate="yes" xml:space="preserve">
          <source>An SSL context holds various data longer-lived than single SSL connections, such as SSL configuration options, certificate(s) and private key(s). It also manages a cache of SSL sessions for server-side sockets, in order to speed up repeated connections from the same clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cf9150b9af7f68ed4e620f15b7b416606b07f7" translate="yes" xml:space="preserve">
          <source>An SSLObject communicates with the outside world using memory buffers. The class &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt;&lt;code&gt;MemoryBIO&lt;/code&gt;&lt;/a&gt; provides a memory buffer that can be used for this purpose. It wraps an OpenSSL memory BIO (Basic IO) object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a466897649a3d651921f5fa00e86176f05ce65c2" translate="yes" xml:space="preserve">
          <source>An XML declaration was found somewhere other than the start of the input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6e529d041ed7501f54f3d2eb8b240dc32017aa" translate="yes" xml:space="preserve">
          <source>An abbreviation for &amp;ldquo;derive window&amp;rdquo;, &lt;a href=&quot;#curses.window.derwin&quot;&gt;&lt;code&gt;derwin()&lt;/code&gt;&lt;/a&gt; is the same as calling &lt;a href=&quot;#curses.window.subwin&quot;&gt;&lt;code&gt;subwin()&lt;/code&gt;&lt;/a&gt;, except that &lt;em&gt;begin_y&lt;/em&gt; and &lt;em&gt;begin_x&lt;/em&gt; are relative to the origin of the window, rather than relative to the entire screen. Return a window object for the derived window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10c1add34316ae69c55a9723388948395613133" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loading arbitrary resources from the storage back-end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c00c78ac6821af3449c4a38de1c0d33c74f95d2" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loaders that inspect modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940dc0b3afc6e45c33bbd105502b6ee876696cec" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; for the exact definition for a loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db9b27bf89080da856677605e14657460be5647" translate="yes" xml:space="preserve">
          <source>An abstract base class for asyncio policies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b462ad15f20b8da0d5b31b0986af332c0c7b0e96" translate="yes" xml:space="preserve">
          <source>An abstract base class for implementing source (and optionally bytecode) file loading. The class inherits from both &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt;&lt;code&gt;ExecutionLoader&lt;/code&gt;&lt;/a&gt;, requiring the implementation of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2021dfdbcfaef781d0d06f712def8d7955c0628e" translate="yes" xml:space="preserve">
          <source>An abstract base class for time zone information objects. These are used by the &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c1eeca19930aa837c9177b8ebdce0b081bc67f" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd3e5d07b9f0593a253ce92bd9938e6c4961954" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt;. For compatibility, this is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a589cb6dfdfee9aae19397d6a303891c9da74964" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. Though it bears some similarities to &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;MetaPathFinder&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;PathEntryFinder&lt;/code&gt; is meant for use only within the path-based import subsystem provided by &lt;code&gt;PathFinder&lt;/code&gt;. This ABC is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt; for compatibility reasons only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9af4121f78134bb685216fbf44bd4f5d826951" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;InspectLoader&lt;/code&gt;&lt;/a&gt; that, when implemented, helps a module to be executed as a script. The ABC represents an optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11de885f0ab5a2d6a8da413f025f1f42a92914a8" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt;&lt;code&gt;ExecutionLoader&lt;/code&gt;&lt;/a&gt;, providing concrete implementations of &lt;a href=&quot;#importlib.abc.ResourceLoader.get_data&quot;&gt;&lt;code&gt;ResourceLoader.get_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader.get_filename&quot;&gt;&lt;code&gt;ExecutionLoader.get_filename()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955770255554b096c2a2d0d00989cc8cb2114744" translate="yes" xml:space="preserve">
          <source>An abstract class that provides methods to execute calls asynchronously. It should not be used directly, but through its concrete subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f134861215475c0febc28a88cff9f900d434fd5d" translate="yes" xml:space="preserve">
          <source>An abstract example would be the following to ensure correct resource management:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c833ccaac11f4d73ed6358d2404695fb39851cf" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the specified module. Originally specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;, this method was meant for use in &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; and in the path-based import subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b301e64f6be02c979b39c0a7f2f8742151baec4c" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. If this is a top-level import, &lt;em&gt;path&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, this is a search for a subpackage or module and &lt;em&gt;path&lt;/em&gt; will be the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; from the parent package. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;MetaPathFinders&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd63589c5c5bc876ea90a7b05def4d9308abd0ce" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. The finder will search for the module only within the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry&quot;&gt;path entry&lt;/a&gt; to which it is assigned. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;PathEntryFinders&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b518cc20074a6e012522371b44d4863fba9c6708" translate="yes" xml:space="preserve">
          <source>An abstract method that executes the module in its own namespace when a module is imported or reloaded. The module should already be initialized when &lt;code&gt;exec_module()&lt;/code&gt; is called. When this method exists, &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt; must be defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bf9688b7b004247ae61425719c8753e917df0c" translate="yes" xml:space="preserve">
          <source>An abstract method that is to return the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; for the specified module. If no path is available, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9546a7a2c25822b3aefc76fd55131bcac817f789" translate="yes" xml:space="preserve">
          <source>An abstract method to return a true value if the module is a package, a false value otherwise. &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised if the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; cannot find the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800c0095cbad1a18da2d314befc33c5c39978794" translate="yes" xml:space="preserve">
          <source>An abstract method to return the bytes for the data located at &lt;em&gt;path&lt;/em&gt;. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is to be raised if the &lt;em&gt;path&lt;/em&gt; cannot be found. The &lt;em&gt;path&lt;/em&gt; is expected to be constructed using a module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; attribute or an item from a package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563d61fc457a3bfb950c5833afc59f047a9c4836" translate="yes" xml:space="preserve">
          <source>An abstract method to return the source of a module. It is returned as a text string using &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt;, translating all recognized line separators into &lt;code&gt;'\n'&lt;/code&gt; characters. Returns &lt;code&gt;None&lt;/code&gt; if no source is available (e.g. a built-in module). Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; if the loader cannot find the module specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce1167dff3e80e3af3cc98084356e72a0bd3a36" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree can be generated by passing &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; as a flag to the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function, or using the &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; helper provided in this module. The result will be a tree of objects whose classes all inherit from &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt;. An abstract syntax tree can be compiled into a Python code object using the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70da3ef21c99fc01e1c391e4ec0a45bb54025f8a" translate="yes" xml:space="preserve">
          <source>An abstraction of a pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4487c478caae94a1d2a055c39dc744680ef17b" translate="yes" xml:space="preserve">
          <source>An abstraction to represent a connection between a parent and its child OS process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70554b33f749f867144e33b7010322e8a2d9c2f6" translate="yes" xml:space="preserve">
          <source>An additional example of normalization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8b93a1b318ef3b489264436cd2920634f37e5c" translate="yes" xml:space="preserve">
          <source>An additional section describes the exceptions defined for working with the DOM in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de5be9d95857a8f7fae738465f4f7a4ecbfe0bd" translate="yes" xml:space="preserve">
          <source>An additional utility function is provided to convert a file&amp;rsquo;s mode in a human readable string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bc718c3660ae312ee29fc3f760532b2ef990dd" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#ssl.SSLCertVerificationError&quot;&gt;&lt;code&gt;SSLCertVerificationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d058f0ff4ac1d3e35f124836eb7543d9d30422" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#tkinter.ttk.Treeview.move&quot;&gt;&lt;code&gt;Treeview.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f34bb1fd3121bf24f28736c112a6ea7ecb860b5" translate="yes" xml:space="preserve">
          <source>An alias for the built-in &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee952a3e338de8476144642c2ed1be940175b262" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Hashable&quot;&gt;&lt;code&gt;collections.abc.Hashable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cf7f2af19bdbb20c360e706340e6ea11885d97" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Sized&quot;&gt;&lt;code&gt;collections.abc.Sized&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63391b1faab340a2bb4934be82d08de2b51040f" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or &lt;code&gt;None&lt;/code&gt; if only one separator character exists. This is set to &lt;code&gt;'/'&lt;/code&gt; on Windows systems where &lt;code&gt;sep&lt;/code&gt; is a backslash. Also available via &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d5b628a54d39bf8ee6093f8e0d37a9d4cee60c" translate="yes" xml:space="preserve">
          <source>An alternative dictionary type can be used for example to sort sections and options on write-back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d850059763c1f7e51f2d1d11cf0427ad5eded88" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84083d9dc2f2455c7f8ae18733c112f9f4922f99" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe9d34c1b43e8d3bc59379cabc74d88762dfb06" translate="yes" xml:space="preserve">
          <source>An alternative handler for interpolation which implements a more advanced syntax, used for instance in &lt;code&gt;zc.buildout&lt;/code&gt;. Extended interpolation is using &lt;code&gt;${section:option}&lt;/code&gt; to denote a value from a foreign section. Interpolation can span multiple levels. For convenience, if the &lt;code&gt;section:&lt;/code&gt; part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558c117d3161559bd859666a91b9bb66c414c1f5" translate="yes" xml:space="preserve">
          <source>An alternative header can be specified in the &lt;em&gt;header&lt;/em&gt; argument. When the &lt;em&gt;Content-Type&lt;/em&gt; header is set a &lt;em&gt;MIME-Version&lt;/em&gt; header is also added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ba665411f071ae5d955adbe5282d9694eae5c4" translate="yes" xml:space="preserve">
          <source>An alternative name can be specified with &lt;code&gt;metavar&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6416917ffae045c2865eba964ef88e695b8f701a" translate="yes" xml:space="preserve">
          <source>An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="affd50cda4dcf68b768688e4f672192d92888ed0" translate="yes" xml:space="preserve">
          <source>An analogue of &lt;a href=&quot;threading#threading.current_thread&quot;&gt;&lt;code&gt;threading.current_thread()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8b2aaa418b53858967709906f3a78f69197dab" translate="yes" xml:space="preserve">
          <source>An application which needs both ST and code objects can package this code into readily available functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a68e4a13d841bc92021b61944ccadf166e7e79" translate="yes" xml:space="preserve">
          <source>An appropriate &lt;code&gt;Content-Type&lt;/code&gt; header should be included if the &lt;em&gt;data&lt;/em&gt; argument is present. If this header has not been provided and &lt;em&gt;data&lt;/em&gt; is not None, &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; will be added as a default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c475a455c39ee03168c8c78b435dcd38ae70e3df" translate="yes" xml:space="preserve">
          <source>An argument for using the original mbox format rather than a variation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec278a245be82c537401d0aff88bd1ef6e21621" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated days of the week in the current locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba535593adca4dfcb800d6a4065c1b6b73e79fa" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_abbr[0]&lt;/code&gt; is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf4961a8aabb7adc6bcd479568762d6de58a7a7" translate="yes" xml:space="preserve">
          <source>An array that represents the days of the week in the current locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f186d41c71a389deb5bc2ad8c9d947ed1464a0a8" translate="yes" xml:space="preserve">
          <source>An array that represents the months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_name[0]&lt;/code&gt; is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f78c0d8986a31d197009b378a1891659c6d5c40" translate="yes" xml:space="preserve">
          <source>An async generator can be annotated by the generic type &lt;code&gt;AsyncGenerator[YieldType, SendType]&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a32ba6658f6bd3552449f82e57df961a67e806" translate="yes" xml:space="preserve">
          <source>An asynchronous version of &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; object will behave so the object is recognized as an async function, and the result of a call is an awaitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fdc0779a5b2419f946e9654c6370c12f380766a" translate="yes" xml:space="preserve">
          <source>An asyncio condition primitive can be used by a task to wait for some event to happen and then get exclusive access to a shared resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce693ef39f956e4dfceff810a01b25898982c4eb" translate="yes" xml:space="preserve">
          <source>An asyncio event can be used to notify multiple asyncio tasks that some event has happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d221089bb63278ae2eac9dba4c559652680a0628" translate="yes" xml:space="preserve">
          <source>An asyncio lock can be used to guarantee exclusive access to a shared resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8132e7095ff57a267c20149288415aebe2314d5" translate="yes" xml:space="preserve">
          <source>An attempt to resume the parser was made when the parser had not been suspended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06688b12c4727b91b1013a9b4b85afe3f1de51e7" translate="yes" xml:space="preserve">
          <source>An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests. Requests posted to other paths will result in a 404 &amp;ldquo;no such page&amp;rdquo; HTTP error. If this tuple is empty, all paths will be considered valid. The default value is &lt;code&gt;('/', '/RPC2')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247e09baf71df7f71e226b7096feb96275db6196" translate="yes" xml:space="preserve">
          <source>An attribute was used more than once in a start tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca38611cc7b83df2236356ffa28d63d72e96458" translate="yes" xml:space="preserve">
          <source>An authentication key is a byte string which can be thought of as a password: once a connection is established both ends will demand proof that the other knows the authentication key. (Demonstrating that both ends are using the same key does &lt;strong&gt;not&lt;/strong&gt; involve sending the key over the connection.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23b9bb5bd999d4e26c014cb734e6fa9c87b39aa" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt; (which is also referred to as the &lt;em&gt;content&lt;/em&gt;). Headers are &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc6532.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 6532&lt;/strong&gt;&lt;/a&gt; style field names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c372588e305c30fd92a3064303d38c2f969de76" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt;. Headers must be &lt;a href=&quot;https://tools.ietf.org/html/rfc5233.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5233&lt;/strong&gt;&lt;/a&gt; style names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ac870ddd7b9cee7af970522ac0cb62cc665869" translate="yes" xml:space="preserve">
          <source>An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for &lt;a href=&quot;#platform.machine&quot;&gt;&lt;code&gt;machine()&lt;/code&gt;&lt;/a&gt;. NetBSD does this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0626a6597dc747aecf4b27d088ed3268190477de" translate="yes" xml:space="preserve">
          <source>An end tag did not match the innermost open start tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e204644cad08d09082fc0881f67657a40116f7c5" translate="yes" xml:space="preserve">
          <source>An end-of-file on input is passed back as the string &lt;code&gt;'EOF'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b3b2a0614b25738aef986d351e59fa4b2b82de" translate="yes" xml:space="preserve">
          <source>An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3703befccbd34b5b25cb780b7ad45fd641ab0fee" translate="yes" xml:space="preserve">
          <source>An entity reference in an attribute value referred to an external entity instead of an internal entity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d37f6c8e1d729e4b74279866b363474e3ce5063" translate="yes" xml:space="preserve">
          <source>An entity reference referred to an entity which was declared with a notation, so cannot be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cf344fbad219897b2d51ae8eba44868eff1f92" translate="yes" xml:space="preserve">
          <source>An entry in a &lt;a href=&quot;#symtable.SymbolTable&quot;&gt;&lt;code&gt;SymbolTable&lt;/code&gt;&lt;/a&gt; corresponding to an identifier in the source. The constructor is not public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f406f6ad3dfbdd6e32c42a45910cc78a6fbc0eb9" translate="yes" xml:space="preserve">
          <source>An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ceb56cb5ae384a7c045483416aaaa181587fc4e" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;#uuid.SafeUUID&quot;&gt;&lt;code&gt;SafeUUID&lt;/code&gt;&lt;/a&gt; which indicates whether the platform generated the UUID in a multiprocessing-safe way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191e9b46b39612e5a45fb6724e6abdd03694c710" translate="yes" xml:space="preserve">
          <source>An equality comparison between one &lt;code&gt;dict.values()&lt;/code&gt; view and another will always return &lt;code&gt;False&lt;/code&gt;. This also applies when comparing &lt;code&gt;dict.values()&lt;/code&gt; to itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01448ba36fc6180ade36d1e4999112151667f7e" translate="yes" xml:space="preserve">
          <source>An error is produced for arguments that could produce more than one options. This feature can be disabled by setting &lt;a href=&quot;#allow-abbrev&quot;&gt;allow_abbrev&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc2e93e3b7a317994b5c3eb2e52e7df07abc268" translate="yes" xml:space="preserve">
          <source>An error is returned whenever the resulting exponent is greater than &lt;code&gt;Emax&lt;/code&gt; or less than &lt;code&gt;Etiny&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516d3d6e48e258e621be2b2a76babfa7dc02e706" translate="yes" xml:space="preserve">
          <source>An error raised when a NIS function returns an error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58377c1e23ec237f7e5eaaef750df18f85b3cb45" translate="yes" xml:space="preserve">
          <source>An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4593a10048262564ce6c822735e42f44f346b661" translate="yes" xml:space="preserve">
          <source>An event loop based on the &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3adc0d9c6ca30e1ba3e56151e0bcf79cc795c22" translate="yes" xml:space="preserve">
          <source>An event loop for Windows that uses &amp;ldquo;I/O Completion Ports&amp;rdquo; (IOCP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd91140b0fe187a666b9e9bf676cecb25b813937" translate="yes" xml:space="preserve">
          <source>An event loop policy is a global per-process object that controls the management of the event loop. Each event loop has a default policy, which can be changed and customized using the policy API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e556041e787dfb19531ed6bea3ca88bb68687f" translate="yes" xml:space="preserve">
          <source>An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread. While a Task is running in the event loop, no other Tasks can run in the same thread. When a Task executes an &lt;code&gt;await&lt;/code&gt; expression, the running Task gets suspended, and the event loop executes the next Task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608baac34ec6b479b1e075077346da843d886918" translate="yes" xml:space="preserve">
          <source>An event object manages an internal flag that can be set to true with the &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; method and reset to false with the &lt;a href=&quot;#threading.Event.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;#threading.Event.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method blocks until the flag is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf919b4535184a2bac9b21b394a3391ed3be52c" translate="yes" xml:space="preserve">
          <source>An event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3197165a12532ea18a4db9c10db35c9e41c35331" translate="yes" xml:space="preserve">
          <source>An event object. Not thread-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58be36b1fcb18ab8fd811be0960165993ee1b495" translate="yes" xml:space="preserve">
          <source>An example for &lt;a href=&quot;#csv.Sniffer&quot;&gt;&lt;code&gt;Sniffer&lt;/code&gt;&lt;/a&gt; use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24bd94253a9e026200e1be3ce54276cf7eb1d9f" translate="yes" xml:space="preserve">
          <source>An example for the &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1abaee744f811fdecf714da38ec6d05c1976f7" translate="yes" xml:space="preserve">
          <source>An example illustrating the order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f4f4affa7b143203b514eaf53d7bbc4a253b38" translate="yes" xml:space="preserve">
          <source>An example may make it more understandable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80b147a88b6b8cb2d7f13419efc055fe8a5741d" translate="yes" xml:space="preserve">
          <source>An example of a callback displaying the current date every second. The callback uses the &lt;a href=&quot;#asyncio.loop.call_later&quot;&gt;&lt;code&gt;loop.call_later()&lt;/code&gt;&lt;/a&gt; method to reschedule itself after 5 seconds, and then stops the event loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11af1171f8dc0175c6f96364b3dfa7e2608ea195" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns a related object is the one returned by &lt;a href=&quot;decimal#decimal.localcontext&quot;&gt;&lt;code&gt;decimal.localcontext()&lt;/code&gt;&lt;/a&gt;. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement without affecting code outside the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229e46ea428fdf9847aacb2de4467c37f32f31e2" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns itself is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. File objects return themselves from __enter__() to allow &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to be used as the context expression in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36c0094a4d20f58e22fab2dc6ea6b13c4064617" translate="yes" xml:space="preserve">
          <source>An example of a custom action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd79d7fcb90941297a732fcb5d7d3317ee346397" translate="yes" xml:space="preserve">
          <source>An example of a mock that raises an exception (to test exception handling of an API):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f4febaa13c59704ab69ba35886f8105bd56383" translate="yes" xml:space="preserve">
          <source>An example of a subprocess protocol used to get the output of a subprocess and to wait for the subprocess exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359da9d396e7a3381bf357db2dce0ae96d67afdf" translate="yes" xml:space="preserve">
          <source>An example of dictionary view usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195305d65f73569e3259a2afbec9afedbef3ecc9" translate="yes" xml:space="preserve">
          <source>An example of extending &lt;code&gt;EnvBuilder&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1081cc9057f681139574ba8aa1d51a1b7326375e" translate="yes" xml:space="preserve">
          <source>An example of reading the configuration file again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17cbc95ce9a012142cb3b9171e1c0a196a14699" translate="yes" xml:space="preserve">
          <source>An example of setting some log options, these would include the process ID in logged messages, and write the messages to the destination facility used for mail logging:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc1f9040cc5763e678640ef2363a997c9953de5" translate="yes" xml:space="preserve">
          <source>An example of the extended interface with non-ASCII characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc391b585ed780ac543ae3ed4c184e7ef73852d8" translate="yes" xml:space="preserve">
          <source>An example of the usage of &lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt;&lt;code&gt;_callmethod()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0374afa67447b447f7a013a60acd58beb789bd8" translate="yes" xml:space="preserve">
          <source>An example of writing to a configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678e726964a2ce10c4c1a7c983eb935e47f7d7bc" translate="yes" xml:space="preserve">
          <source>An example showing how to use queues to feed tasks to a collection of worker processes and collect the results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7f7b7a4c5476e3cc316370c635a0a929e3cae0" translate="yes" xml:space="preserve">
          <source>An example that will remove &lt;em&gt;remove_this&lt;/em&gt; from email addresses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81981452dd23b6b05db05d7cfb0589b85b814ed7" translate="yes" xml:space="preserve">
          <source>An example to show the &lt;code&gt;_ignore_&lt;/code&gt; attribute in use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85eca7d3c00b4de3339c2e436d45332986ea35c3" translate="yes" xml:space="preserve">
          <source>An example usage of the module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8690b021b6b6b9da606f08de01ded9048222325" translate="yes" xml:space="preserve">
          <source>An example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c60e5df7208cba172a6b4861bef2a01e85722af" translate="yes" xml:space="preserve">
          <source>An example using &lt;em&gt;enter_result&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619d126046efa510fbee514e656faac7c28fa578" translate="yes" xml:space="preserve">
          <source>An example using only Unix style options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb40c2136fa42deb9a36926aa145be2f5a4b420f" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; class to control a subprocess and the &lt;a href=&quot;asyncio-stream#asyncio.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; class to read from its standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f3529798fae53307059d813edb69b2362e7c71" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt; method to schedule a callback. The callback displays &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; and then stops the event loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff40ba096df117ee2ce62d129f289e94ce50d311" translate="yes" xml:space="preserve">
          <source>An example which will deadlock is the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1449c62b11b34c51038e54fc84c6c14e5bdd420c" translate="yes" xml:space="preserve">
          <source>An example with non-ASCII characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71f4e4b07c8d3bd6da392502d651c55e4d66276" translate="yes" xml:space="preserve">
          <source>An example&amp;rsquo;s doctest directives modify doctest&amp;rsquo;s behavior for that single example. Use &lt;code&gt;+&lt;/code&gt; to enable the named behavior, or &lt;code&gt;-&lt;/code&gt; to disable it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">Un ejemplo:</target>
        </trans-unit>
        <trans-unit id="23a14600961e92118a1b9c9768e9bc704485af4b" translate="yes" xml:space="preserve">
          <source>An exception has occurred. The local trace function is called; &lt;em&gt;arg&lt;/em&gt; is a tuple &lt;code&gt;(exception, value, traceback)&lt;/code&gt;; the return value specifies the new local trace function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077f3a8d799c59c87a7879ae93f65a8b265b382c" translate="yes" xml:space="preserve">
          <source>An exception inheriting &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; that is raised when an unsupported operation is called on a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90348b9ec43ea456461b13b883f04b6adc7d95fc" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example raised an unexpected exception. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2d6bd0f6bfde706cbcad0479411815ccfff05d" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example&amp;rsquo;s actual output did not match its expected output. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d371cb40c11f76c5c36febec63cfec9705178506" translate="yes" xml:space="preserve">
          <source>An exception raised for invalid gzip files. It inherits &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;zlib#zlib.error&quot;&gt;&lt;code&gt;zlib.error&lt;/code&gt;&lt;/a&gt; can also be raised for invalid gzip files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595cdbaab3299ecf183e16949385b4ed75622bb8" translate="yes" xml:space="preserve">
          <source>An exception tuple, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b714867157f6242c971860d61ec3d6ff7556a5" translate="yes" xml:space="preserve">
          <source>An executable line in a &lt;code&gt;.pth&lt;/code&gt; file is run at every Python startup, regardless of whether a particular module is actually going to be used. Its impact should thus be kept to a minimum. The primary intended purpose of executable lines is to make the corresponding module(s) importable (load 3rd-party import hooks, adjust &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; etc). Any other initialization is supposed to be done upon a module&amp;rsquo;s actual import, if and when it happens. Limiting a code chunk to a single line is a deliberate measure to discourage putting anything more complex here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1add73ad794c032de45e9a10a3307ac96e89eae" translate="yes" xml:space="preserve">
          <source>An executor can be used to run a task in a different thread or even in a different process to avoid blocking the OS thread with the event loop. See the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt;&lt;code&gt;loop.run_in_executor()&lt;/code&gt;&lt;/a&gt; method for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e11c12943faf16444ceedb9804a38db006485b2" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1fe8390882dfde7bc76d70b8e2cafd23494e82" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten. The optional parameters have the same meaning as in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ba8d7a14486c8e174ff533d6d9c0663952b29e" translate="yes" xml:space="preserve">
          <source>An explanation of some terminology and conventions is in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890aae396d7bacf660f2e6509a7c070fac630d67" translate="yes" xml:space="preserve">
          <source>An extended example which also demonstrates the use of pointers accesses the &lt;a href=&quot;https://docs.python.org/3.8/c-api/import.html#c.PyImport_FrozenModules&quot;&gt;&lt;code&gt;PyImport_FrozenModules&lt;/code&gt;&lt;/a&gt; pointer exported by Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d874aff9356fc6c2a27e76364bce500fa2c6518e" translate="yes" xml:space="preserve">
          <source>An extensive list of Python testing tools including functional testing frameworks and mock object libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a23d9f159c83bfe97b484a3e6115e80af5d4380" translate="yes" xml:space="preserve">
          <source>An hour is converted to 3600 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6236d6ba69aedf0745fd1ea63614a9e2262bf5" translate="yes" xml:space="preserve">
          <source>An id which does not have a corresponding destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dfb427510e074283a39a54e4d9dbf2b185f2a3" translate="yes" xml:space="preserve">
          <source>An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: &lt;a href=&quot;#datetime.date.year&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.date.month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.date.day&quot;&gt;&lt;code&gt;day&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5099199c1ac259aae0741f72ef6e8d7849ea93" translate="yes" xml:space="preserve">
          <source>An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds. (There is no notion of &amp;ldquo;leap seconds&amp;rdquo; here.) Attributes: &lt;a href=&quot;#datetime.time.hour&quot;&gt;&lt;code&gt;hour&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.minute&quot;&gt;&lt;code&gt;minute&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.second&quot;&gt;&lt;code&gt;second&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.microsecond&quot;&gt;&lt;code&gt;microsecond&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5610b3c1cc31886ddf86db3b6bfe9dce38bb3a3c" translate="yes" xml:space="preserve">
          <source>An immutable sequence providing access to the logical ancestors of the path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6c96734c11fca9ebe4c7cbcdfffa8db89d5e28" translate="yes" xml:space="preserve">
          <source>An implementation of the built-in &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7720d17fff53dae117343d8e9e4e3bdf42554ea" translate="yes" xml:space="preserve">
          <source>An important feature of proxy objects is that they are picklable so they can be passed between processes. As such, a referent can contain &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;. This permits nesting of these managed lists, dicts, and other &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca5c2b2d5e23075377145528c4bb6a274c41020" translate="yes" xml:space="preserve">
          <source>An in-memory stream for text I/O. The text buffer is discarded when the &lt;a href=&quot;#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c40d804be737d2c53024a9e0ca00bbefc518b84" translate="yes" xml:space="preserve">
          <source>An incomplete character was found in the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ea41c9a0216bd11cc24452f4b96fc38cb07e7e" translate="yes" xml:space="preserve">
          <source>An indicator of the native byte order. This will have the value &lt;code&gt;'big'&lt;/code&gt; on big-endian (most-significant byte first) platforms, and &lt;code&gt;'little'&lt;/code&gt; on little-endian (least-significant byte first) platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703b3bb1868e2e8bc5b77367f969f62a6671a60f" translate="yes" xml:space="preserve">
          <source>An instance &lt;em&gt;tz&lt;/em&gt; of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass that models both standard and daylight times must be consistent in this sense:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f07dcb4a65f5f3cfefa434bd9d52d248683b91d" translate="yes" xml:space="preserve">
          <source>An instance of (a concrete subclass of) &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; can be passed to the constructors for &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects. The latter objects view their attributes as being in local time, and the &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b67a267f48e3562f47079d2bb418c11e0684d5" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.Handle&quot;&gt;&lt;code&gt;asyncio.Handle&lt;/code&gt;&lt;/a&gt; is returned, which can be used later to cancel the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80ce39420c2628cfc7e1e9324435012f462488d" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.TimerHandle&quot;&gt;&lt;code&gt;asyncio.TimerHandle&lt;/code&gt;&lt;/a&gt; is returned which can be used to cancel the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01872a127016c725833502fe1517e9a8bb1110fd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#ctypes.PyDLL&quot;&gt;&lt;code&gt;PyDLL&lt;/code&gt;&lt;/a&gt; that exposes Python C API functions as attributes. Note that all these functions are assumed to return C &lt;code&gt;int&lt;/code&gt;, which is of course not always the truth, so you have to assign the correct &lt;code&gt;restype&lt;/code&gt; attribute to use these functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c664e0f73090f1e1bd70299e8da8a6073f9919cd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#email.policy.Compat32&quot;&gt;&lt;code&gt;Compat32&lt;/code&gt;&lt;/a&gt;, providing backward compatibility with the behavior of the email package in Python 3.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753712898d5c60e92ce9fc7f47232fd4e688b279" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;EmailPolicy&lt;/code&gt; with all defaults unchanged. This policy uses the standard Python &lt;code&gt;\n&lt;/code&gt; line endings rather than the RFC-correct &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eefcaafe768844d20d2285a9ea781eccd2b0ead" translate="yes" xml:space="preserve">
          <source>An int containing the default buffer size used by the module&amp;rsquo;s buffered I/O classes. &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; uses the file&amp;rsquo;s blksize (as obtained by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;) if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6753a22067c075c8c9a4c5a84ef7830915742ad2" translate="yes" xml:space="preserve">
          <source>An integer between zero and the number of tabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645936da5c83c45f9587c17d8b318b09bd721e60" translate="yes" xml:space="preserve">
          <source>An integer containing the number of characters written to the stream before it blocked. This attribute is available when using the buffered I/O classes from the &lt;a href=&quot;io#module-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f40b0022f33627acc9876d1e86f6750f237785b" translate="yes" xml:space="preserve">
          <source>An integer giving the maximum value a variable of type &lt;code&gt;Py_ssize_t&lt;/code&gt; can take. It&amp;rsquo;s usually &lt;code&gt;2**31 - 1&lt;/code&gt; on a 32-bit platform and &lt;code&gt;2**63 - 1&lt;/code&gt; on a 64-bit platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f6a82aa8fc81a2e88d2ec14a5abf2c015f9ab5" translate="yes" xml:space="preserve">
          <source>An integer giving the number of sub keys this key has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3671820be7fdb3b8d7153be88789dda60eca34a" translate="yes" xml:space="preserve">
          <source>An integer giving the number of values this key has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61158287398e3913556fd8de17d987f121a49ce2" translate="yes" xml:space="preserve">
          <source>An integer giving the registry type for this value (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4fb4071cc7728855d3b16ff06baa25bc7f67a5" translate="yes" xml:space="preserve">
          <source>An integer giving the value of the largest Unicode code point, i.e. &lt;code&gt;1114111&lt;/code&gt; (&lt;code&gt;0x10FFFF&lt;/code&gt; in hexadecimal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ed9451b9be56604da549be2ff4d27c0a823db6" translate="yes" xml:space="preserve">
          <source>An integer giving when the key was last modified (if available) as 100&amp;rsquo;s of nanoseconds since Jan 1, 1601.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b0fef7eb70950fd1875b2099b192af05f223df" translate="yes" xml:space="preserve">
          <source>An integer indicating how many dimensions of a multi-dimensional array the memory represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bef0117d73063c1a4d56593cf70e5fec7f031c6" translate="yes" xml:space="preserve">
          <source>An integer keeping track of how many times the mock object has been awaited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0518f4d7529a2d85bc7601acec4302104bbbbb" translate="yes" xml:space="preserve">
          <source>An integer n, specifying the nth data column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d279e661a8927158d65f021e9f995b44d56314" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646e733efcef9696eb9443aa091caa22bf73aa29" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f5ca0496bffcd3b5349fb91457405154481dd3" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4 (most significant octet first).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64aac0469b4285c7ace562fb45219c88f4d45beb" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882a8de446fcecf6cab8bc081fa438fcd87c37bf" translate="yes" xml:space="preserve">
          <source>An integer preceded by &lt;code&gt;@&lt;/code&gt;, as in &lt;code&gt;@6&lt;/code&gt;, where the integer is interpreted as a y pixel coordinate in the menu&amp;rsquo;s coordinate system;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8c87923a15988fabf3c441c9e1307e478e6d10" translate="yes" xml:space="preserve">
          <source>An integer representing the node type. Symbolic constants for the types are on the &lt;code&gt;Node&lt;/code&gt; object: &lt;code&gt;ELEMENT_NODE&lt;/code&gt;, &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt;, &lt;code&gt;TEXT_NODE&lt;/code&gt;, &lt;code&gt;CDATA_SECTION_NODE&lt;/code&gt;, &lt;code&gt;ENTITY_NODE&lt;/code&gt;, &lt;code&gt;PROCESSING_INSTRUCTION_NODE&lt;/code&gt;, &lt;code&gt;COMMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_TYPE_NODE&lt;/code&gt;, &lt;code&gt;NOTATION_NODE&lt;/code&gt;. This is a read-only attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a555fc41c7502bfba0c65b97ab4ac5b9cd080b" translate="yes" xml:space="preserve">
          <source>An integer representing the set of SSL options enabled on this context. The default value is &lt;a href=&quot;#ssl.OP_ALL&quot;&gt;&lt;code&gt;OP_ALL&lt;/code&gt;&lt;/a&gt;, but you can specify other options such as &lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt;&lt;code&gt;OP_NO_SSLv2&lt;/code&gt;&lt;/a&gt; by ORing them together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e38281ba09868abdfe8882473c5fa3690e426a3" translate="yes" xml:space="preserve">
          <source>An integer representing the version of the NNTP protocol supported by the server. In practice, this should be &lt;code&gt;2&lt;/code&gt; for servers advertising &lt;a href=&quot;https://tools.ietf.org/html/rfc3977.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3977&lt;/strong&gt;&lt;/a&gt; compliance and &lt;code&gt;1&lt;/code&gt; for others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543f543f7b3326e3df52c58c046ecc3ca49dcfe2" translate="yes" xml:space="preserve">
          <source>An integer telling you how many times the mock object has been called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187f154843eb20b15b663f5ef77b74ffa766be88" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4243e776fd6616aba00dbcc2c2488ad7be2afc37" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/128&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44316d770fca56bd5eaaf3a3511c5ee64cecdc22" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdd55c3c245e5b3b8388fa54918c20b35e6e67f" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/32&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a078dc74c1c703bd1abf51f26bcdd05ff58dc2cc" translate="yes" xml:space="preserve">
          <source>An integer that identifies the type of the value data (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6221568d61a57ce1a59e1d75f271d5b94fd58a61" translate="yes" xml:space="preserve">
          <source>An integer, the default &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; used for pickling. May be less than &lt;a href=&quot;#pickle.HIGHEST_PROTOCOL&quot;&gt;&lt;code&gt;HIGHEST_PROTOCOL&lt;/code&gt;&lt;/a&gt;. Currently the default protocol is 4, first introduced in Python 3.4 and incompatible with previous versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ff29ab8afde8b6ee23d29bb72e09168c7b6f37" translate="yes" xml:space="preserve">
          <source>An integer, the highest &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; available. This value can be passed as a &lt;em&gt;protocol&lt;/em&gt; value to functions &lt;a href=&quot;#pickle.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; as well as the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f7acaa85bea0ee87dbe1ef47defa1dd89b2cca" translate="yes" xml:space="preserve">
          <source>An interface to the group database, similar to this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59cb6ef37b0cd57060129e4c5a383119176babe9" translate="yes" xml:space="preserve">
          <source>An interface to the normal password database, similar to this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23aa9ac5ddca3f3d883d5cc83284856548229022" translate="yes" xml:space="preserve">
          <source>An interface to the shadow password database, similar to this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994fe15ee3ca3aa04c018a8fe65a5d200d8e16aa" translate="yes" xml:space="preserve">
          <source>An interface to the user database, similar to this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1844ce395b8e9fdc98c2cc653690def38555f0" translate="yes" xml:space="preserve">
          <source>An interpreter instance will recognize a command name &lt;code&gt;foo&lt;/code&gt; if and only if it has a method &lt;code&gt;do_foo()&lt;/code&gt;. As a special case, a line beginning with the character &lt;code&gt;'?'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_help()&lt;/code&gt;. As another special case, a line beginning with the character &lt;code&gt;'!'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_shell()&lt;/code&gt; (if such a method is defined).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fc8b26e70e09d313612cac6794fdb4aad1682f" translate="yes" xml:space="preserve">
          <source>An invalid logger name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74a940fd099263dda413cd8757526ef0956f8af4" translate="yes" xml:space="preserve">
          <source>An invalid operation was performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a26e16375583adf85ddeccaecb2b8c4ef50d837" translate="yes" xml:space="preserve">
          <source>An object containing information about the implementation of the currently running Python interpreter. The following attributes are required to exist in all Python implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998e5eccbd293e12c5532b4dc44ce7656abeec0b" translate="yes" xml:space="preserve">
          <source>An object of type &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; may be aware or naive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b174b298545e9f1f9dff3565076e2ed782564e88" translate="yes" xml:space="preserve">
          <source>An object that holds the value data, and whose type depends on the underlying registry type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97080ae4ed5d803c9b0a23c71de971dafd14c52c" translate="yes" xml:space="preserve">
          <source>An object that wraps OS processes created by the &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647c7a24d6cf9ebcbec2e05257e54cb377032a7a" translate="yes" xml:space="preserve">
          <source>An object with at least two methods: get_content and set_content. When the &lt;a href=&quot;email.message#email.message.EmailMessage.get_content&quot;&gt;&lt;code&gt;get_content()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method of an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object is called, it calls the corresponding method of this object, passing it the message object as its first argument, and any arguments or keywords that were passed to it as additional arguments. By default &lt;code&gt;content_manager&lt;/code&gt; is set to &lt;a href=&quot;email.contentmanager#email.contentmanager.raw_data_manager&quot;&gt;&lt;code&gt;raw_data_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1865264489923958e5df1f2c9473facc3252cce6" translate="yes" xml:space="preserve">
          <source>An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support. This should never be reported by a standard build of the &lt;a href=&quot;#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4947a546c6d3f34597067ace626c8f1253938be2" translate="yes" xml:space="preserve">
          <source>An optional keyword-only &lt;em&gt;context&lt;/em&gt; argument allows specifying a custom &lt;a href=&quot;contextvars#contextvars.Context&quot;&gt;&lt;code&gt;contextvars.Context&lt;/code&gt;&lt;/a&gt; for the &lt;em&gt;callback&lt;/em&gt; to run in. The current context is used when no &lt;em&gt;context&lt;/em&gt; is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea3a8a5b272ed84ab311819ca2985d04005ee2d" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;a href=&quot;#importlib.invalidate_caches&quot;&gt;&lt;code&gt;importlib.invalidate_caches()&lt;/code&gt;&lt;/a&gt; when invalidating the caches of all finders on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9077f55d2b0b62326a8204fc9578f269c9e7d89a" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;code&gt;PathFinder.invalidate_caches()&lt;/code&gt; when invalidating the caches of all cached finders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c77488f2592943bd451545ce7ed54c2b1a12d3c" translate="yes" xml:space="preserve">
          <source>An optional sequence that lists the names of unnamed (anonymous) fields. &lt;a href=&quot;#ctypes.Structure._anonymous_&quot;&gt;&lt;code&gt;_anonymous_&lt;/code&gt;&lt;/a&gt; must be already defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40583112592749895ecadcf35532f5fbb351912" translate="yes" xml:space="preserve">
          <source>An optional shebang line, containing the characters &lt;code&gt;b'#!'&lt;/code&gt; followed by an interpreter name, and then a newline (&lt;code&gt;b'\n'&lt;/code&gt;) character. The interpreter name can be anything acceptable to the OS &amp;ldquo;shebang&amp;rdquo; processing, or the Python launcher on Windows. The interpreter should be encoded in UTF-8 on Windows, and in &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; on POSIX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadbfe27c0b9f4036e4c5d9ffd152ecaddfb607d" translate="yes" xml:space="preserve">
          <source>An optional small integer that allows overriding the alignment of structure fields in the instance. &lt;a href=&quot;#ctypes.Structure._pack_&quot;&gt;&lt;code&gt;_pack_&lt;/code&gt;&lt;/a&gt; must already be defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79293485a901f4be4341911a3c3007d1e643a627" translate="yes" xml:space="preserve">
          <source>An ordered enumeration that is not based on &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and so maintains the normal &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; invariants (such as not being comparable to other enumerations):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54eaeb427bd767e9c78a3fcf6309d624d005ab3" translate="yes" xml:space="preserve">
          <source>An ordered mapping of parameters&amp;rsquo; names to the corresponding &lt;a href=&quot;#inspect.Parameter&quot;&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/a&gt; objects. Parameters appear in strict definition order, including keyword-only parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73d51218d474d87723969e9844e08e443986117" translate="yes" xml:space="preserve">
          <source>An ordered, mutable mapping (&lt;a href=&quot;collections#collections.OrderedDict&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;) of parameters&amp;rsquo; names to arguments&amp;rsquo; values. Contains only explicitly bound arguments. Changes in &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; will reflect in &lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5b35b74ba6101747c9d4196b50ff8061dcc151" translate="yes" xml:space="preserve">
          <source>An output filename must be specified if the &lt;em&gt;source&lt;/em&gt; is an archive (and in that case, &lt;em&gt;output&lt;/em&gt; must not be the same as &lt;em&gt;source&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521aa7e611225a521017270940523db0f976f977" translate="yes" xml:space="preserve">
          <source>An undeclared prefix was found when namespace processing was enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9656bc89a24603fa1dca440ac3a2361066df5ac5" translate="yes" xml:space="preserve">
          <source>An unrelated but handy function that takes a time tuple such as returned by the &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; function in the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding. In fact, &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;time.gmtime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#calendar.timegm&quot;&gt;&lt;code&gt;timegm()&lt;/code&gt;&lt;/a&gt; are each others&amp;rsquo; inverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0de6a3a36da0eabd1ed37cb78f0a84df8288d5" translate="yes" xml:space="preserve">
          <source>Analyse the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object (as returned by &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819da723c3c425f237bdf8f03b696821a94f3e1f" translate="yes" xml:space="preserve">
          <source>Analysis functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975f7b4df518f323a30297a1f1be4e096d3fcec3" translate="yes" xml:space="preserve">
          <source>Analysis of the profiler data is done using the &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ad53cf48f04b7c123150cc524cc9d87c444927" translate="yes" xml:space="preserve">
          <source>Analyze the contents of the &lt;em&gt;pathname&lt;/em&gt; file, which must contain Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4623f537e597cbfacf24dc615db20b47e0e3c5c7" translate="yes" xml:space="preserve">
          <source>Analyze the given &lt;em&gt;sample&lt;/em&gt; and return a &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; subclass reflecting the parameters found. If the optional &lt;em&gt;delimiters&lt;/em&gt; parameter is given, it is interpreted as a string containing possible valid delimiter characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c77624248a182e0208b43d1dd511b74c035283" translate="yes" xml:space="preserve">
          <source>Analyze the sample text (presumed to be in CSV format) and return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the first row appears to be a series of column headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15cefd38640764e47311aa1a3c3174217ea802b" translate="yes" xml:space="preserve">
          <source>Anchor type. Denotes where the packer is to place each slave in its parcel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a680a6b219fde5428a49a155c5016f2f6534116" translate="yes" xml:space="preserve">
          <source>And also as a function decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25b174a26dc77d7bd4c171e7b788567380cfcad" translate="yes" xml:space="preserve">
          <source>And for reading files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea4f6d1b5164f1de2cd6425075d887c2f52dc7b" translate="yes" xml:space="preserve">
          <source>And go back to listening for new client connections (of course, a real server would probably handle each client connection in a separate thread, or put the sockets in &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking mode&lt;/a&gt; and use an event loop).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01a2b18c0aa33d0bf1ebb4b61f24aa85532e4a4" translate="yes" xml:space="preserve">
          <source>And lets you write code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c80b8291de4e65f0384d5df0e931faa6f06e26" translate="yes" xml:space="preserve">
          <source>And so on, eventually ending with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56675d3775ea977079a196ffe5d39d5c6e0ed45d" translate="yes" xml:space="preserve">
          <source>And some mathematical functions are also available to Decimal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e030fd6f202d12a04313413b21ce123caf324f74" translate="yes" xml:space="preserve">
          <source>And while the module doesn&amp;rsquo;t directly support parsing strings, it can easily be done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="5d25066343c14fdbc8cd148ee308e69f694558d6" translate="yes" xml:space="preserve">
          <source>Angular conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa955e785130d1bfb76908f175692b42dcf5a748" translate="yes" xml:space="preserve">
          <source>Animation control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17e6aa01f27f483f31ae9a05f633ce17a08ca63" translate="yes" xml:space="preserve">
          <source>Annotate each line with a short opcode description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fbe3f2c0adda2514893a924abcd2d00ba0c968" translate="yes" xml:space="preserve">
          <source>Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by &lt;em&gt;fd&lt;/em&gt; starting at &lt;em&gt;offset&lt;/em&gt; and continuing for &lt;em&gt;len&lt;/em&gt; bytes. &lt;em&gt;advice&lt;/em&gt; is one of &lt;a href=&quot;#os.POSIX_FADV_NORMAL&quot;&gt;&lt;code&gt;POSIX_FADV_NORMAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_SEQUENTIAL&quot;&gt;&lt;code&gt;POSIX_FADV_SEQUENTIAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_RANDOM&quot;&gt;&lt;code&gt;POSIX_FADV_RANDOM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_NOREUSE&quot;&gt;&lt;code&gt;POSIX_FADV_NOREUSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_WILLNEED&quot;&gt;&lt;code&gt;POSIX_FADV_WILLNEED&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.POSIX_FADV_DONTNEED&quot;&gt;&lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddbfc47bdf2815567f148a943ae50904ef48c9e" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1489f7e40318e54fcbeae8f12ceaa2e676f89a1d" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfaedd99a89f28548596fb67a7f378505de1e4e9" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59264d0e98298421242f9f70b711b5e947525220" translate="yes" xml:space="preserve">
          <source>Another approach to handling multiple simultaneous requests in an environment that supports neither threads nor &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; (or where these are too expensive or inappropriate for the service) is to maintain an explicit table of partially finished requests and to use &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; to decide which request to work on next (or whether to handle a new incoming request). This is particularly important for stream services where each client can potentially be connected for a long time (if threads or subprocesses cannot be used). See &lt;a href=&quot;asyncore#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt; for another way to manage this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6eaecc1b4becc1ce97180c1ca37fd242427bac" translate="yes" xml:space="preserve">
          <source>Another approach to using deques is to maintain a sequence of recently added elements by appending to the right and popping to the left:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154eea36fb4a3e04d9685d308f84e6f97bb356c1" translate="yes" xml:space="preserve">
          <source>Another bad idea is to print things that embed an object address, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857365788cdb8b0f09e1949a46fb3dc32e28e350" translate="yes" xml:space="preserve">
          <source>Another client can also use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830cb7a34d4e9668c5f056cdbb14f9a43e0de2af" translate="yes" xml:space="preserve">
          <source>Another example of a reusable, but not reentrant, context manager is &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, as it invokes &lt;em&gt;all&lt;/em&gt; currently registered callbacks when leaving any with statement, regardless of where those callbacks were added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970d45390b614e57c3adbeccf052061f6cbb7027" translate="yes" xml:space="preserve">
          <source>Another example that may behave differently from what one would expect is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1524e3727b5a15e1e58deafe30417f1f9c6a01f4" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;a href=&quot;#shutil.ignore_patterns&quot;&gt;&lt;code&gt;ignore_patterns()&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd67ff52eb9c7ecece2900a3c7ca5a0e8906891" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;em&gt;ignore&lt;/em&gt; argument to add a logging call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a012876e7eec4d9cf2933f51ae341f5f02747bc6" translate="yes" xml:space="preserve">
          <source>Another function is provided to reverse the tokenization process. This is useful for creating tools that tokenize a script, modify the token stream, and write back the modified script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1345847ee9d2d8f4b40cf2bd43a2a8f4b81d19c5" translate="yes" xml:space="preserve">
          <source>Another important difference between &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; is that if no flags are set (the value is 0), its boolean evaluation is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd138c705d1febdcd3cd71c72f455f7d8136282" translate="yes" xml:space="preserve">
          <source>Another option is to pass &lt;a href=&quot;functions#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; to the &lt;em&gt;globals&lt;/em&gt; parameter, which will cause the code to be executed within your current global namespace. This can be more convenient than individually specifying imports:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d89ebe791f42c5af101c46d42ea21377b531087" translate="yes" xml:space="preserve">
          <source>Another similar &lt;a href=&quot;asyncio-stream#asyncio-example-create-connection-streams&quot;&gt;example&lt;/a&gt; using the high-level &lt;a href=&quot;asyncio-stream#asyncio.open_connection&quot;&gt;&lt;code&gt;asyncio.open_connection()&lt;/code&gt;&lt;/a&gt; function and streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12cf40ba46cdbcdda739851e799c9deed7beda0" translate="yes" xml:space="preserve">
          <source>Another simple application of doctest is testing interactive examples in a text file. This can be done with the &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380a1673c02d6ffedb7ef8ccb17de0d7583fd47b" translate="yes" xml:space="preserve">
          <source>Another solution to the problem of non-comparable tasks is to create a wrapper class that ignores the task item and only compares the priority field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5e78d9ba1c7a1f17d713904f11c8fb976e77d2" translate="yes" xml:space="preserve">
          <source>Another specification of the format, with details on locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a6209aa300b723ce63cb3581b82c93359f079d" translate="yes" xml:space="preserve">
          <source>Another specification of the format. Describes a common extension for supporting folders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259c6f7c7f71afa5d1276a3716f6996db84a2e2c" translate="yes" xml:space="preserve">
          <source>Another test-support module with a very different flavor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52e511337918750293ba11f89a9f569c1bc3067" translate="yes" xml:space="preserve">
          <source>Another use case might be to replace an object with an &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a6c1f548ab752cd5952e7bc0d4d963e5bf6502" translate="yes" xml:space="preserve">
          <source>Another way to encode binary hashes for non-binary environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefd86df1dfa20cdf5dc78f24eca9be7a5e90b0f" translate="yes" xml:space="preserve">
          <source>Another way to handle this is with the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e0cebdfbbfd2a87dc6c52fdedb0b3db0e01e83" translate="yes" xml:space="preserve">
          <source>Another way to use variable-sized data types with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; is to use the dynamic nature of Python, and (re-)define the data type after the required size is already known, on a case by case basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aafffa028c1a77c7cc61a286a8bfa21a85356c" translate="yes" xml:space="preserve">
          <source>Answered</source>
          <target state="translated">Answered</target>
        </trans-unit>
        <trans-unit id="af5a6d2c7bcbd0595666bd7855f0f03cca3bf497" translate="yes" xml:space="preserve">
          <source>Any changes to any context variables that &lt;em&gt;callable&lt;/em&gt; makes will be contained in the context object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e39a27177f793a03dc9f620dad817066a7f33c1" translate="yes" xml:space="preserve">
          <source>Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f798ac81b2f74b659d7f586dd5eabb5ce15db13e" translate="yes" xml:space="preserve">
          <source>Any container can be passed as the &lt;em&gt;choices&lt;/em&gt; value, so &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; objects, and custom containers are all supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d6483718787eb0c399b57df09b4bd366515f2b" translate="yes" xml:space="preserve">
          <source>Any detected nonconformance results in an &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; being raised; note, however, that how these errors are handled is server-dependent. For example, &lt;a href=&quot;#module-wsgiref.simple_server&quot;&gt;&lt;code&gt;wsgiref.simple_server&lt;/code&gt;&lt;/a&gt; and other servers based on &lt;a href=&quot;#module-wsgiref.handlers&quot;&gt;&lt;code&gt;wsgiref.handlers&lt;/code&gt;&lt;/a&gt; (that don&amp;rsquo;t override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to &lt;code&gt;sys.stderr&lt;/code&gt; or some other error stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3161a1f48d49aece84ad1e7ba2994c99487c066" translate="yes" xml:space="preserve">
          <source>Any expected output must immediately follow the final &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or &lt;code&gt;'... '&lt;/code&gt; line containing the code, and the expected output (if any) extends to the next &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or all-whitespace line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ef8204c61c9a1813182c916e1e34ec0c335625" translate="yes" xml:space="preserve">
          <source>Any files may be present in the ZIP archive, but only files &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.pyc&lt;/code&gt; are available for import. ZIP import of dynamic modules (&lt;code&gt;.pyd&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;) is disallowed. Note that if an archive only contains &lt;code&gt;.py&lt;/code&gt; files, Python will not attempt to modify the archive by adding the corresponding &lt;code&gt;.pyc&lt;/code&gt; file, meaning that if a ZIP archive doesn&amp;rsquo;t contain &lt;code&gt;.pyc&lt;/code&gt; files, importing may be rather slow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dee1375bcf6a8c6c517898f5fc97f065da4ba9" translate="yes" xml:space="preserve">
          <source>Any form of network IO; &lt;code&gt;recv()&lt;/code&gt; and &lt;code&gt;send()&lt;/code&gt; read and write only to the underlying &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt;&lt;code&gt;MemoryBIO&lt;/code&gt;&lt;/a&gt; buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f114f3ceee9858acec62bd48fb36dd2e76f81ac" translate="yes" xml:space="preserve">
          <source>Any header object, or any header that is refolded due to the policy settings, is folded using an algorithm that fully implements the RFC folding algorithms, including knowing where encoded words are required and allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a66302b5c5f0a22de125246046b1cdfffefa6b" translate="yes" xml:space="preserve">
          <source>Any object can be tested for truth value, for use in an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; condition or as operand of the Boolean operations below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b871425be90d75ff7f0f750362354908800f258b" translate="yes" xml:space="preserve">
          <source>Any other appearance of &lt;code&gt;$&lt;/code&gt; in the string will result in a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; being raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e241730c485594f505f9764a3cbc96f2e45b62" translate="yes" xml:space="preserve">
          <source>Any other keys in the dictionary are ignored, to allow for future extensions. If the path cannot be handled, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4f45530c29236c208822a755f335ab895f7ae9" translate="yes" xml:space="preserve">
          <source>Any valid Python identifier may be used for a fieldname except for names starting with an underscore. Valid identifiers consist of letters, digits, and underscores but do not start with a digit or underscore and cannot be a &lt;a href=&quot;keyword#module-keyword&quot;&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/a&gt; such as &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;for&lt;/em&gt;, &lt;em&gt;return&lt;/em&gt;, &lt;em&gt;global&lt;/em&gt;, &lt;em&gt;pass&lt;/em&gt;, or &lt;em&gt;raise&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1518232458ae063224b67a33fbc39f874e6e7652" translate="yes" xml:space="preserve">
          <source>Any value error related to the address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a52ce7a5fdb3bd7ec0934cf4eb202d8034ff6e" translate="yes" xml:space="preserve">
          <source>Any value error related to the net mask.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f7839523439ed5db0c3285770ed6a7ad0ef07d" translate="yes" xml:space="preserve">
          <source>Apart from &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers also provide equivalent &lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt;&lt;code&gt;getint()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt;&lt;code&gt;getfloat()&lt;/code&gt;&lt;/a&gt; methods. You can register your own converters and customize the provided ones. &lt;a href=&quot;#id14&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004e30185abf19283aba3fcb4dd5458909228910" translate="yes" xml:space="preserve">
          <source>Apart from making the code (potentially) compatible with Windows and the other start methods this also ensures that as long as the child process is still alive the object will not be garbage collected in the parent process. This might be important if some resource is freed when the object is garbage collected in the parent process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f8e3f0f5b15c39aef46bc951d434aa2f994181" translate="yes" xml:space="preserve">
          <source>Apart from the node classes, the &lt;a href=&quot;#module-ast&quot;&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt; module defines these utility functions and classes for traversing abstract syntax trees:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41def7a0febe741da87c5b79ce78ce27b83f3ae7" translate="yes" xml:space="preserve">
          <source>Appearance</source>
          <target state="translated">Appearance</target>
        </trans-unit>
        <trans-unit id="7c6156597bec64b2efa893f896b414ba015b84f0" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;line&lt;/em&gt; to the history buffer, as if it was the last line typed. This calls &lt;code&gt;add_history()&lt;/code&gt; in the underlying library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e3d810f53a90235f3be7ee31ad204835b47079" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;message&lt;/em&gt; to named mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5012b56fdb1fabff75d417024359f5123b3c7cf5" translate="yes" xml:space="preserve">
          <source>Append a new action at the end. The &lt;em&gt;cmd&lt;/em&gt; variable must be a valid bourne shell command. The &lt;em&gt;kind&lt;/em&gt; variable consists of two letters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb2f2dddbf426366118168a9e541a67ab5450c2" translate="yes" xml:space="preserve">
          <source>Append a new item with value &lt;em&gt;x&lt;/em&gt; to the end of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec2f10908ba5de36daf156b98af3c60ee338f32" translate="yes" xml:space="preserve">
          <source>Append items from &lt;em&gt;iterable&lt;/em&gt; to the end of the array. If &lt;em&gt;iterable&lt;/em&gt; is another array, it must have &lt;em&gt;exactly&lt;/em&gt; the same type code; if not, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;iterable&lt;/em&gt; is not an array, it must be iterable and its elements must be the right type to be appended to the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b18019b4972b108e37841f15945c9d21d175bf" translate="yes" xml:space="preserve">
          <source>Append items from the list. This is equivalent to &lt;code&gt;for x in list:
a.append(x)&lt;/code&gt; except that if there is a type error, the array is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b7a672882b72ed3eb65f4fc161e2735a4aad2e" translate="yes" xml:space="preserve">
          <source>Append the callable &lt;em&gt;hook&lt;/em&gt; to the list of active auditing hooks for the current interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb08b061999d25be95bd753505fb9df32467aab4" translate="yes" xml:space="preserve">
          <source>Append the last &lt;em&gt;nelements&lt;/em&gt; items of history to a file. The default filename is &lt;code&gt;~/.history&lt;/code&gt;. The file must already exist. This calls &lt;code&gt;append_history()&lt;/code&gt; in the underlying library. This function only exists if Python was compiled for a version of the library that supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c421a3b35b989d4ece772b4d7f4d642bcef1d02" translate="yes" xml:space="preserve">
          <source>Append the record to the buffer. If &lt;a href=&quot;#logging.handlers.BufferingHandler.shouldFlush&quot;&gt;&lt;code&gt;shouldFlush()&lt;/code&gt;&lt;/a&gt; returns true, call &lt;a href=&quot;#logging.handlers.BufferingHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; to process the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6428efcfa3b692ae0853afc12b91104655bc067" translate="yes" xml:space="preserve">
          <source>Append the string &lt;em&gt;s&lt;/em&gt; to the MIME header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63afd5dcef3cb2a0dae141c8bb5ab6871063eaa8" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;subelements&lt;/em&gt; from a sequence object with zero or more elements. Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if a subelement is not an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bceea9f719c67ae44ec147e59a3ff45f6a13a85" translate="yes" xml:space="preserve">
          <source>Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the &lt;a href=&quot;#array.array.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26d38984e101ccc199d48ef993f80d0a613b479" translate="yes" xml:space="preserve">
          <source>Apple&amp;rsquo;s documentation of the file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c258e5edf35ac67db5d64e7635e8a3d86b778e" translate="yes" xml:space="preserve">
          <source>Application developers should typically use the high-level asyncio functions, such as &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;asyncio.run()&lt;/code&gt;&lt;/a&gt;, and should rarely need to reference the loop object or call its methods. This section is intended mostly for authors of lower-level code, libraries, and frameworks, who need finer control over the event loop behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad91f8ac2108f501e8aa1719fa2b68f46b05d5af" translate="yes" xml:space="preserve">
          <source>Applications can add their own callbacks to this list. The primary use cases are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e3de344c6c36974c5693ae0deb456a758bdd3d" translate="yes" xml:space="preserve">
          <source>Applications may store arbitrary objects in these attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c498690ce78323bc09d2e18d14d4892b6e8abd0" translate="yes" xml:space="preserve">
          <source>Applications should not &lt;a href=&quot;http://cwe.mitre.org/data/definitions/257.html&quot;&gt;store passwords in a recoverable format&lt;/a&gt;, whether plain text or encrypted. They should be salted and hashed using a cryptographically-strong one-way (irreversible) hash function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9516d3c40d5579ce0328d2d1808e751ea327f8e2" translate="yes" xml:space="preserve">
          <source>Applications that can&amp;rsquo;t bear wall-time ambiguities should explicitly check the value of the &lt;a href=&quot;#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute or avoid using hybrid &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclasses; there are no ambiguities when using &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, or any other fixed-offset &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0719959018ae4f7d3b51e5a78769bd3b0ca3df46" translate="yes" xml:space="preserve">
          <source>Applications that need to operate on potentially improperly quoted URLs that may contain non-ASCII data will need to do their own decoding from bytes to characters before invoking the URL parsing methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafdab997b122fcdc3b5c0971f1785992cabff68" translate="yes" xml:space="preserve">
          <source>Applications will create objects of this class for use in the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader.parse&quot;&gt;&lt;code&gt;XMLReader.parse()&lt;/code&gt;&lt;/a&gt; method and for returning from EntityResolver.resolveEntity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7284143fe53744047558a065875930ca468cf98" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;and&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c10a7d11316205bdac710e988348ca767a1a19" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;or&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b520db8cdcd1e798321610d25b1d0aa46d3781" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;xor&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6347e1f0ae0fe6eb691488a3a3790d194631241" translate="yes" xml:space="preserve">
          <source>Apply &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; rules on unverifiable transactions even to Netscape cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c11221fbbce04188875f4bbd9a5712dd69e34a" translate="yes" xml:space="preserve">
          <source>Apply &lt;em&gt;function&lt;/em&gt; of two arguments cumulatively to the items of &lt;em&gt;iterable&lt;/em&gt;, from left to right, so as to reduce the iterable to a single value. For example, &lt;code&gt;reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&lt;/code&gt; calculates &lt;code&gt;((((1+2)+3)+4)+5)&lt;/code&gt;. The left argument, &lt;em&gt;x&lt;/em&gt;, is the accumulated value and the right argument, &lt;em&gt;y&lt;/em&gt;, is the update value from the &lt;em&gt;iterable&lt;/em&gt;. If the optional &lt;em&gt;initializer&lt;/em&gt; is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If &lt;em&gt;initializer&lt;/em&gt; is not given and &lt;em&gt;iterable&lt;/em&gt; contains only one item, the first item is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6b8050ae59615c4994444f8cdf9e2812e29cae" translate="yes" xml:space="preserve">
          <source>Apply this handler&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be emitted. If one returns a false value, the handler will not emit the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75727d4b37b8d6f61c121aa55945e43277e79623" translate="yes" xml:space="preserve">
          <source>Apply this logger&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be processed (passed to handlers). If one returns a false value, no further processing of the record occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f8992ee05391b7dd15844b0a81da4dcbca1d1a" translate="yes" xml:space="preserve">
          <source>Apply, test or remove a POSIX lock on an open file descriptor. &lt;em&gt;fd&lt;/em&gt; is an open file descriptor. &lt;em&gt;cmd&lt;/em&gt; specifies the command to use - one of &lt;a href=&quot;#os.F_LOCK&quot;&gt;&lt;code&gt;F_LOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_TLOCK&quot;&gt;&lt;code&gt;F_TLOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_ULOCK&quot;&gt;&lt;code&gt;F_ULOCK&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.F_TEST&quot;&gt;&lt;code&gt;F_TEST&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;len&lt;/em&gt; specifies the section of the file to lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c16cf7fbf4a6d50f42643443798c0192cc0915" translate="yes" xml:space="preserve">
          <source>Applying the reverse conversion to &lt;code&gt;3740.0&lt;/code&gt; gives a different hexadecimal string representing the same number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bee686a5eaf240f9c56fe230e927f0bbd2a171" translate="yes" xml:space="preserve">
          <source>Applying the same patch to every test method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c570ce78a064ac6afc5df19b2e24947c18c38dc5" translate="yes" xml:space="preserve">
          <source>Approximating &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4f4762f9bd3f0f4a10caf5b6e63dc4ce543724" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="translated">Arabic</target>
        </trans-unit>
        <trans-unit id="aa559da736898dbd0d15602df291a370ff954c58" translate="yes" xml:space="preserve">
          <source>Archive names should be relative to the archive root, that is, they should not start with a path separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e93a940c9f8e4f679d6284bd8a795953316844a" translate="yes" xml:space="preserve">
          <source>Archiving example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2ca1a37605ad24f1be144c9f7d4cb1b3101631" translate="yes" xml:space="preserve">
          <source>Archiving operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f392576d7e147141bf396686950b09802b28f4" translate="yes" xml:space="preserve">
          <source>Arg list too long</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8126f6e897947aa2bcce9fdc2c65455309bc87d1" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;flags&lt;/em&gt; takes the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;bitwise OR&lt;/a&gt; of option flags. See section &lt;a href=&quot;#doctest-options&quot;&gt;Option Flags&lt;/a&gt;. Only &amp;ldquo;reporting flags&amp;rdquo; can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cda49e510f79a25d5fe2cd3ec5f12c16ca5615" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;module&lt;/em&gt; is a module object, or dotted name of a module, containing the object whose doctests are of interest. Argument &lt;em&gt;name&lt;/em&gt; is the name (within the module) of the object with the doctests of interest. The result is a string, containing the object&amp;rsquo;s docstring converted to a Python script, as described for &lt;a href=&quot;#doctest.script_from_examples&quot;&gt;&lt;code&gt;script_from_examples()&lt;/code&gt;&lt;/a&gt; above. For example, if module &lt;code&gt;a.py&lt;/code&gt; contains a top-level function &lt;code&gt;f()&lt;/code&gt;, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13ab8175963907a3c38cd5c0e397fdc5a88b925" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;s&lt;/em&gt; is a string containing doctest examples. The string is converted to a Python script, where doctest examples in &lt;em&gt;s&lt;/em&gt; are converted to regular code, and everything else is converted to Python comments. The generated script is returned as a string. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc60f0a9ed6b8901fa4738eb86c947f1aba137a8" translate="yes" xml:space="preserve">
          <source>Argument abbreviations (prefix matching)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646f35c0fe5203eb12ebdfc5f6722d5f4ee8b9f2" translate="yes" xml:space="preserve">
          <source>Argument groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c66f14d2ce5db0e563f7a0a9cea03ef993a86f3" translate="yes" xml:space="preserve">
          <source>Argument names are not part of the specification, and only the arguments of &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; are intended to be used as keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6331038cb6dd518cc8a1c33aa6d56e471c0a5793" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81018876e5e0fb20f6d9b1140eb03c00025d7bd7" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects usually associate a single command-line argument with a single action to be taken. The &lt;code&gt;nargs&lt;/code&gt; keyword argument associates a different number of command-line arguments with a single action. The supported values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="74013187b9b262d759763c71b93fc2050badc103" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, &lt;em&gt;strict&lt;/em&gt; and &lt;em&gt;buffers&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Unpickler&quot;&gt;&lt;code&gt;Unpickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89665ba13ee62d24ea7f2b734e91ef581e6bf8d" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062cac0907e3b6761cd5955db7e55e88c29370c5" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe50e0f8895e96e60e7ed8a520f00b347b19db9" translate="yes" xml:space="preserve">
          <source>Arguments are as for &lt;a href=&quot;#http.cookiejar.FileCookieJar.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b8834506fb3b7c5be5a3ce85e8e0c3db7c0b3f" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
          <target state="translated">Los argumentos están delimitados por un espacio en blanco,que es un espacio o una pestaña.</target>
        </trans-unit>
        <trans-unit id="ca383ab55205e5fb89e07118c8e14e4621db4341" translate="yes" xml:space="preserve">
          <source>Arguments containing &lt;code&gt;-&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d8d9a6376cd495ec8cafea6a5b8bff545de70d" translate="yes" xml:space="preserve">
          <source>Arguments for which &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt;&lt;code&gt;Signature.bind_partial()&lt;/code&gt;&lt;/a&gt; relied on a default value are skipped. However, if needed, use &lt;a href=&quot;#inspect.BoundArguments.apply_defaults&quot;&gt;&lt;code&gt;BoundArguments.apply_defaults()&lt;/code&gt;&lt;/a&gt; to add them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5642db0a84a9bfcf6fa6b2be3d81eb1124eeef" translate="yes" xml:space="preserve">
          <source>Arguments read from a file must by default be one per line (but see also &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt;) and are treated as if they were in the same place as the original file referencing argument on the command line. So in the example above, the expression &lt;code&gt;['-f', 'foo', '@args.txt']&lt;/code&gt; is considered equivalent to the expression &lt;code&gt;['-f', 'foo', '-f', 'bar']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254fe913b44f0083c86b3a72eb64233d6c9c9037" translate="yes" xml:space="preserve">
          <source>Arguments that are read from a file (see the &lt;em&gt;fromfile_prefix_chars&lt;/em&gt; keyword argument to the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; constructor) are read one argument per line. &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt; can be overridden for fancier reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c888f0156e119be7fcf794112bbc633d3a855af" translate="yes" xml:space="preserve">
          <source>Arguments, return values and exceptions raised should be the same as for &lt;code&gt;http_error_default()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="05d9f54c2dee44d1764ce455fe2d7d6a602d3b2c" translate="yes" xml:space="preserve">
          <source>Arithmetic mean (&amp;ldquo;average&amp;rdquo;) of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">Operadores aritméticos</target>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="00bda803d743e23213c7aa7e2ecbc5b4d57d34e7" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;code&gt;callback(pid, returncode, *args)&lt;/code&gt; to be called when a process with PID equal to &lt;em&gt;pid&lt;/em&gt; terminates. Specifying another callback for the same process replaces the previous handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e83bc7d750aaf3109a4f2191f8a594db7bc12dc" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;em&gt;func&lt;/em&gt; to be called in the specified executor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce67aeaeb955aba8123768b6b67cd81cceff896b" translate="yes" xml:space="preserve">
          <source>Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the &lt;em&gt;unique&lt;/em&gt; argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09bcef1e1561563a4c3e831676e473af1795dff" translate="yes" xml:space="preserve">
          <source>Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Array objects also implement the buffer interface, and may be used wherever &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a038e3af2ef2f9438b219a899eb40b5d237a4ed2" translate="yes" xml:space="preserve">
          <source>Array subclass constructors accept positional arguments, used to initialize the elements in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="2116ae0173d1a47165ce7b4c6dd99787a4f44df7" translate="yes" xml:space="preserve">
          <source>Arrays and pointers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ba2d6827acb128b9bc6dce24cfef791a15ff8e" translate="yes" xml:space="preserve">
          <source>Arrays are sequences, containing a fixed number of instances of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1bebde72fbc4b9eac4d8bc3c178b395db87608" translate="yes" xml:space="preserve">
          <source>Arrow keys and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492a48af0242c28b406dd17c1e3f267f5f7d0dde" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt;, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;\x&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; escapes. This generates a string similar to that returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; in Python 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f76a37b3c37f88ec864fc817fca31de5c8cd6a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;__enter__&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; invoked, this method can be used to cover part of an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation with a context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a1436804ffd6271fbdf496e469190ad95cfadb" translate="yes" xml:space="preserve">
          <source>As IPv4 does not define a shorthand notation for addresses with octets set to zero, these two attributes are always the same as &lt;code&gt;str(addr)&lt;/code&gt; for IPv4 addresses. Exposing these attributes makes it easier to write display code that can handle both IPv4 and IPv6 addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b75b6a03e85825e5ae6f5174dafbcc20884f22" translate="yes" xml:space="preserve">
          <source>As UTF-8 is an 8-bit encoding no BOM is required and any &lt;code&gt;U+FEFF&lt;/code&gt; character in the decoded string (even if it&amp;rsquo;s the first character) is treated as a &lt;code&gt;ZERO
WIDTH NO-BREAK SPACE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93d4b1e7a80c62c1fe29ce1183609ea319edc6b" translate="yes" xml:space="preserve">
          <source>As a basic example, below is a simple HTML parser that uses the &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; class to print out start tags, end tags, and data as they are encountered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cc68f817847f0888385ee2f0ae8a8820897e0f" translate="yes" xml:space="preserve">
          <source>As a consequence, the list &lt;code&gt;[1, 2]&lt;/code&gt; is considered equal to &lt;code&gt;[1.0, 2.0]&lt;/code&gt;, and similarly for tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c47037d0ed57ce0ffcb9e6f5f456d8a5dfad7c5" translate="yes" xml:space="preserve">
          <source>As a convenience &lt;em&gt;addr_spec&lt;/em&gt; can be specified instead of &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt;, in which case &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt; will be parsed from the &lt;em&gt;addr_spec&lt;/em&gt;. An &lt;em&gt;addr_spec&lt;/em&gt; must be a properly RFC quoted string; if it is not &lt;code&gt;Address&lt;/code&gt; will raise an error. Unicode characters are allowed and will be property encoded when serialized. However, per the RFCs, unicode is &lt;em&gt;not&lt;/em&gt; allowed in the username portion of the address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d9575dc7f90bc34c436a75f7caf3eeeecd477e" translate="yes" xml:space="preserve">
          <source>As a convenience for processing lists of addresses that consist of a mixture of groups and single addresses, a &lt;code&gt;Group&lt;/code&gt; may also be used to represent single addresses that are not part of a group by setting &lt;em&gt;display_name&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt; and providing a list of the single address as &lt;em&gt;addresses&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c6d9923ff5341e64ead3588bfe1b0fc8708eec" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;bytes(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a serialized binary representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abff2ddf7e07b5dde53a45acae67c7d73f15471" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_string&quot;&gt;&lt;code&gt;as_string()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;str(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a formatted string representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702d8b69bc2e4520c3ea7fda0210ac4d16730354" translate="yes" xml:space="preserve">
          <source>As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246fcbe17d21c864d76f20a8ea7b1030891cbcc5" translate="yes" xml:space="preserve">
          <source>As a default namespace, if &lt;em&gt;globs&lt;/em&gt; is not specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fca4637f2c6a11c94c0115101f5eb5fe7f8b54" translate="yes" xml:space="preserve">
          <source>As a hint: &lt;em&gt;ptype&lt;/em&gt; is &lt;code&gt;'Uniprocessor Free'&lt;/code&gt; on single processor NT machines and &lt;code&gt;'Multiprocessor Free'&lt;/code&gt; on multi processor machines. The &lt;em&gt;&amp;lsquo;Free&amp;rsquo;&lt;/em&gt; refers to the OS version being free of debugging code. It could also state &lt;em&gt;&amp;lsquo;Checked&amp;rsquo;&lt;/em&gt; which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01542f6485eff7fcd66532527eb2903905db20bd" translate="yes" xml:space="preserve">
          <source>As a last resort, the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4394d88d5506fb6bad90992f89785a34f016a9f1" translate="yes" xml:space="preserve">
          <source>As a practical example, a web application can symmetrically sign cookies sent to users and later verify them to make sure they weren&amp;rsquo;t tampered with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3250916881530139f1d3c3f521304a2d00f953" translate="yes" xml:space="preserve">
          <source>As a resource for sharing data across processes, shared memory blocks may outlive the original process that created them. When one process no longer needs access to a shared memory block that might still be needed by other processes, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method should be called. When a shared memory block is no longer needed by any process, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.unlink&quot;&gt;&lt;code&gt;unlink()&lt;/code&gt;&lt;/a&gt; method should be called to ensure proper cleanup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461cbf814397c1a6ad159d386793e5950747ea9b" translate="yes" xml:space="preserve">
          <source>As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, &lt;a href=&quot;#module-stringprep&quot;&gt;&lt;code&gt;stringprep&lt;/code&gt;&lt;/a&gt; provides the &amp;ldquo;characteristic function&amp;rdquo;, i.e. a function that returns &lt;code&gt;True&lt;/code&gt; if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a184ffa1e02bb553c3cf1bb5908fd5b4956ff6b" translate="yes" xml:space="preserve">
          <source>As a shortcut, &lt;code&gt;python -m unittest&lt;/code&gt; is the equivalent of &lt;code&gt;python -m unittest discover&lt;/code&gt;. If you want to pass arguments to test discovery the &lt;code&gt;discover&lt;/code&gt; sub-command must be used explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6052cb2b7ab711a2dfe70683f2ac20c152dc62" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can pass the first chunk of data to update directly to the constructor as the positional argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589b7e27763c67c7426c653620d97a4afe45eed8" translate="yes" xml:space="preserve">
          <source>As a shorthand for this type, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; can be used to annotate arguments of any of the types mentioned above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc30d222e457c2b86d38c6dc2682bd1cf49fbc5" translate="yes" xml:space="preserve">
          <source>As a single multi-line string it looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fec187f046cbb0fe0fcc91b7f32ecb2bd751ff" translate="yes" xml:space="preserve">
          <source>As an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;root&lt;/code&gt; has a tag and a dictionary of attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f3227359947ab2ce5b9947bd2e229fe5f93f58" translate="yes" xml:space="preserve">
          <source>As an added bonus you no longer need to keep a reference to the &lt;code&gt;patcher&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b503ab5544f8b7e846527fe7cd3425f0b5545263" translate="yes" xml:space="preserve">
          <source>As an alternative to using the &lt;code&gt;request()&lt;/code&gt; method described above, you can also send your request step by step, by using the four functions below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7336776d38139cf85922861d97a6c8dfca4d4e8" translate="yes" xml:space="preserve">
          <source>As an example, here are two useful aliases (especially when placed in the &lt;code&gt;.pdbrc&lt;/code&gt; file):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a80b839cbf77be14d284871859db2716a2d8281" translate="yes" xml:space="preserve">
          <source>As an example, here is a simple way to synchronize a client and server thread:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4562ba3c72351908cae38e3fc969623aaf1135" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s change the Combobox for the default theme a bit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4228081bb4db5df72a0d8ad128755e932ebc79ee" translate="yes" xml:space="preserve">
          <source>As an example, the following calls to &lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt; are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4b1a6703f8b07e5a6b60e4bad30c91c5890466" translate="yes" xml:space="preserve">
          <source>As an example, the following code could be used to read an email message from a file on disk and pass it to the system &lt;code&gt;sendmail&lt;/code&gt; program on a Unix system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbacbe7504a62ca3305f0051ceceb7ce7683b37" translate="yes" xml:space="preserve">
          <source>As an implementation detail, most modules have the name &lt;code&gt;__builtins__&lt;/code&gt; made available as part of their globals. The value of &lt;code&gt;__builtins__&lt;/code&gt; is normally either this module or the value of this module&amp;rsquo;s &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute. Since this is an implementation detail, it may not be used by alternate implementations of Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7b885f679999067032935a1aa6716b565ddb72" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; can also cause write operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd487951e11f4d42348b340f0a9fb430d37c5cc" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; can also cause read operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e24aa9e1ac5aea4c36f22d36193b3afce59ac93" translate="yes" xml:space="preserve">
          <source>As bytearray objects are mutable, they support the &lt;a href=&quot;#typesseq-mutable&quot;&gt;mutable&lt;/a&gt; sequence operations in addition to the common bytes and bytearray operations described in &lt;a href=&quot;#bytes-methods&quot;&gt;Bytes and Bytearray Operations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bf9d41f9b029450b419cb811cff375582f4159" translate="yes" xml:space="preserve">
          <source>As described before, SQLite supports only a limited set of types natively. To use other Python types with SQLite, you must &lt;strong&gt;adapt&lt;/strong&gt; them to one of the sqlite3 module&amp;rsquo;s supported types for SQLite: one of NoneType, int, float, str, bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12104d6983d2c0ac8c4e8e3db3bbb26e8a81d6cd" translate="yes" xml:space="preserve">
          <source>As explained in the previous section, foreign functions can be accessed as attributes of loaded shared libraries. The function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader. They are instances of a private class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c8f40732d97a4b4e90b1a6e8a0be872ac0ea63" translate="yes" xml:space="preserve">
          <source>As far as possible one should try to avoid shifting large amounts of data between processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbfa2bc97572579991ca5c4ddb17267e21f80e3" translate="yes" xml:space="preserve">
          <source>As has been mentioned before, all Python types except integers, strings, and bytes objects have to be wrapped in their corresponding &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, so that they can be converted to the required C data type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ddf55edc3a51e93aacbc734fc2d7fe5eb787249" translate="yes" xml:space="preserve">
          <source>As initialized upon program startup, the first item of this list, &lt;code&gt;path[0]&lt;/code&gt;, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), &lt;code&gt;path[0]&lt;/code&gt; is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted &lt;em&gt;before&lt;/em&gt; the entries inserted as a result of &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d02dd5a1c0be670a5afec6d8bf7ade0cbe0a443" translate="yes" xml:space="preserve">
          <source>As introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class. Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b975573d762213d718d91e5a19d0201d6f4a860f" translate="yes" xml:space="preserve">
          <source>As is the case with all named tuples, the subclass has a few additional methods and attributes that are particularly useful. One such method is &lt;code&gt;_replace()&lt;/code&gt;. The &lt;code&gt;_replace()&lt;/code&gt; method will return a new ParseResult object replacing specified fields with new values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c24eca1bdc966d5e836feb3ab27d1d9ed3eb23f" translate="yes" xml:space="preserve">
          <source>As long as the view exists, the &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; object cannot be resized or closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610fcdc735062bf431e7a9e2ee300d06d531c84b" translate="yes" xml:space="preserve">
          <source>As mentioned above, if a child process has put items on a queue (and it has not used &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;JoinableQueue.cancel_join_thread&lt;/code&gt;&lt;/a&gt;), then that process will not terminate until all buffered items have been flushed to the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c946dacfc8f875db22dfcdba42153aefbf4569f0" translate="yes" xml:space="preserve">
          <source>As mentioned above, when doing concurrent programming it is usually best to avoid using shared state as far as possible. This is particularly true when using multiple processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741a8166c57402ebadd253e7254391864f2e0259" translate="yes" xml:space="preserve">
          <source>As mentioned in the &lt;a href=&quot;io#io-overview&quot;&gt;Overview&lt;/a&gt;, Python distinguishes between binary and text I/O. Files opened in binary mode (including &lt;code&gt;'b'&lt;/code&gt; in the &lt;em&gt;mode&lt;/em&gt; argument) return contents as &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects without any decoding. In text mode (the default, or when &lt;code&gt;'t'&lt;/code&gt; is included in the &lt;em&gt;mode&lt;/em&gt; argument), the contents of the file are returned as &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, the bytes having been first decoded using a platform-dependent encoding or using the specified &lt;em&gt;encoding&lt;/em&gt; if given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="554761a2dd1c786ee19c7c8d095e92534e85fcea" translate="yes" xml:space="preserve">
          <source>As mentioned in the introduction, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; has grown to have three primary uses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd3237ecb3ed79cf4cebba9859ab17d40aea008" translate="yes" xml:space="preserve">
          <source>As noted in &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&quot;&gt;the errata for RFC 7159&lt;/a&gt;, JSON permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d391aeb07828e2c8ece6409fe0c3895c39bf56" translate="yes" xml:space="preserve">
          <source>As noted in the documentation of &lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt;&lt;code&gt;ExitStack.push()&lt;/code&gt;&lt;/a&gt;, this method can be useful in cleaning up an already allocated resource if later steps in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4749ff1ae4127c8c5d53e09d2473530212eedd" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.pathconf(fd, name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254ec21e59cc0a2f51b3d99a3106cbbf6e86b501" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(fd)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de72d09fd1ee5572d4a2be6e2e876c81871f619b" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(path, dir_fd=dir_fd,
follow_symlinks=False)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020b6b46db7feae3d90b1504ca1411e18c36a07a" translate="yes" xml:space="preserve">
          <source>As our examples shows, you have to be careful with what you allow to be unpickled. Therefore if security is a concern, you may want to consider alternatives such as the marshalling API in &lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; or third-party solutions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94873ca8fb7d049aa1f358ba21e1835b6d80677c" translate="yes" xml:space="preserve">
          <source>As permitted, though not required, by the RFC, this module&amp;rsquo;s serializer sets &lt;em&gt;ensure_ascii=True&lt;/em&gt; by default, thus escaping the output so that the resulting strings only contain ASCII characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab552d0f5d2aaec29b8f53a32c1edd92d2547512" translate="yes" xml:space="preserve">
          <source>As required by the Python DB API Spec, the &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt; attribute &amp;ldquo;is -1 in case no &lt;code&gt;executeXX()&lt;/code&gt; has been performed on the cursor or the rowcount of the last operation is not determinable by the interface&amp;rdquo;. This includes &lt;code&gt;SELECT&lt;/code&gt; statements because we cannot determine the number of rows a query produced until all rows were fetched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9ef0be3fa5743d16dd6068d735d43da1ed1d14" translate="yes" xml:space="preserve">
          <source>As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the &lt;code&gt;_()&lt;/code&gt; function, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777c0664c56b282dce066ba8bdfa9c0f273bd6e5" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;a href=&quot;#decimal.getcontext&quot;&gt;&lt;code&gt;getcontext()&lt;/code&gt;&lt;/a&gt; function accesses the current context and allows the settings to be changed. This approach meets the needs of most applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7a4ca36c98546dcbae60adf434cc1fdf31f390" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;code&gt;MISSING&lt;/code&gt; value is a sentinel object used to detect if the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;default_factory&lt;/code&gt; parameters are provided. This sentinel is used because &lt;code&gt;None&lt;/code&gt; is a valid value for &lt;code&gt;default&lt;/code&gt;. No code should directly use the &lt;code&gt;MISSING&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77922c76564f11dd7e1353e59f5212f7c398d9d" translate="yes" xml:space="preserve">
          <source>As shown, &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; also makes it quite easy to use &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements to manage arbitrary resources that don&amp;rsquo;t natively support the context management protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcd78e93b46d440282cd0af672c39772532099d" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;cProfile.Profile&lt;/code&gt; class cannot be calibrated, custom timer functions should be used with care and should be as fast as possible. For the best results with a custom timer, it might be necessary to hard-code it in the C source of the internal &lt;code&gt;_lsprof&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e79820db8ac841bcd7b5678fd84162e5edd5f6" translate="yes" xml:space="preserve">
          <source>As the circle is approximated by an inscribed regular polygon, &lt;em&gt;steps&lt;/em&gt; determines the number of steps to use. If not given, it will be calculated automatically. May be used to draw regular polygons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471b958617fa3e20177a04beca298db4067ef76f" translate="yes" xml:space="preserve">
          <source>As the decorated function must be able to be called multiple times, the underlying context manager must support use in multiple &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. If this is not the case, then the original construct with the explicit &lt;code&gt;with&lt;/code&gt; statement inside the function should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dd2b46461463b5dc81b3ce8b1f5caf9be1fe6b" translate="yes" xml:space="preserve">
          <source>As the example shows, if an option is marked as &lt;code&gt;required&lt;/code&gt;, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will report an error if that option is not present at the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e64b80b59b5f1ae7b48ded543b566b2c5fea6e" translate="yes" xml:space="preserve">
          <source>As the help string supports %-formatting, if you want a literal &lt;code&gt;%&lt;/code&gt; to appear in the help string, you must escape it as &lt;code&gt;%%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59b1810ad2366588e1560b21083e815a61d7702" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, reusing a single stack object across multiple with statements works correctly, but attempting to nest them will cause the stack to be cleared at the end of the innermost with statement, which is unlikely to be desirable behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7432cc881a9c7f8b1e82bf98956cfaf69b88ec94" translate="yes" xml:space="preserve">
          <source>As the previous example shows, you can add &lt;code&gt;...&lt;/code&gt; lines to your example containing only directives. This can be useful when an example is too long for a directive to comfortably fit on the same line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad0a4f610137a71fbd404f93777ff0fbaf5382a" translate="yes" xml:space="preserve">
          <source>As the python.org website uses &lt;em&gt;utf-8&lt;/em&gt; encoding as specified in its meta tag, we will use the same for decoding the bytes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ef874d7307cc69342eb69c015b2b52804bc24e" translate="yes" xml:space="preserve">
          <source>As we can easily check, our array is sorted now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23b38ddb6aef5ba6269faf72685d2b4793ec969" translate="yes" xml:space="preserve">
          <source>As we can see above, the API is pretty straightforward. The only bit of magic involves the &lt;code&gt;DEFAULT&lt;/code&gt; section which provides default values for all other sections &lt;a href=&quot;#id14&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. Note also that keys in sections are case-insensitive and stored in lowercase &lt;a href=&quot;#id14&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd35f4640dac53d4cba2d342193297bc4fce7dc6" translate="yes" xml:space="preserve">
          <source>As we shall see, pickle does not use directly the methods described above. In fact, these methods are part of the copy protocol which implements the &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; special method. The copy protocol provides a unified interface for retrieving the data necessary for pickling and copying objects. &lt;a href=&quot;#id10&quot; id=&quot;id5&quot;&gt;4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debea2eb93150eb2d1b36d8b1bf25e4f62753e5c" translate="yes" xml:space="preserve">
          <source>As well as a decorator &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; can be used as a context manager in a with statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9da1c5bbe7d0c4d318b5718e8cf13b1be346dab" translate="yes" xml:space="preserve">
          <source>As well as attributes on the created mock attributes, like the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt;, of child mocks can also be configured. These aren&amp;rsquo;t syntactically valid to pass in directly as keyword arguments, but a dictionary with these as keys can still be expanded into a &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; call using &lt;code&gt;**&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8beeb01a1af78f02464bc704487f07739d5804d" translate="yes" xml:space="preserve">
          <source>As well as being a path it is possible to pass a package name, for example &lt;code&gt;myproject.subpackage.test&lt;/code&gt;, as the start directory. The package name you supply will then be imported and its location on the filesystem will be used as the start directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac654a9b0a771a253377851cbe7d9dcdd53aa08" translate="yes" xml:space="preserve">
          <source>As well as external objects, there is sometimes also a need to refer to objects in the configuration. This will be done implicitly by the configuration system for things that it knows about. For example, the string value &lt;code&gt;'DEBUG'&lt;/code&gt; for a &lt;code&gt;level&lt;/code&gt; in a logger or handler will automatically be converted to the value &lt;code&gt;logging.DEBUG&lt;/code&gt;, and the &lt;code&gt;handlers&lt;/code&gt;, &lt;code&gt;filters&lt;/code&gt; and &lt;code&gt;formatter&lt;/code&gt; entries will take an object id and resolve to the appropriate destination object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2e6cebd59a22f19c5763adb2176795f3405ba5" translate="yes" xml:space="preserve">
          <source>As well as tracking calls to themselves, mocks also track calls to methods and attributes, and &lt;em&gt;their&lt;/em&gt; methods and attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba8324196b8dfc54af3887d0a5dc2b00afccd66" translate="yes" xml:space="preserve">
          <source>As well as using &lt;em&gt;autospec&lt;/em&gt; through &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; there is a &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; for creating autospecced mocks directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0630c32a8836c172a8afec7c1702dc1fc98e8c01" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t display anything unless an example fails. If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2f16ec04ec8da2a8b6d28bff1e96ae0730df2f" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, parameter &lt;em&gt;message&lt;/em&gt; may be a &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instance, an &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; instance, a string, a byte string, or a file-like object (which should be open in binary mode). If &lt;em&gt;message&lt;/em&gt; is an instance of the appropriate format-specific &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; subclass (e.g., if it&amp;rsquo;s an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance and this is an &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance), its format-specific information is used. Otherwise, the format-specific information of the message that currently corresponds to &lt;em&gt;key&lt;/em&gt; is left unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf2339fc3da041c7b40d65293bdd95b7f0f7885" translate="yes" xml:space="preserve">
          <source>As with a dictionary, you can use a section&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; method to provide fallback values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57771b08d272fad9dc8b1be5068d86775d7fa3ca" translate="yes" xml:space="preserve">
          <source>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de44bc643f497be8df1b37fe142eb3754e000e16" translate="yes" xml:space="preserve">
          <source>As with any &lt;code&gt;try&lt;/code&gt; statement based code, this can cause problems for development and review, because the setup code and the cleanup code can end up being separated by arbitrarily long sections of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ab064145c449d1616c3eb8354b791e442472ff" translate="yes" xml:space="preserve">
          <source>As with any other mechanism that completely suppresses exceptions, this context manager should be used only to cover very specific errors where silently continuing with program execution is known to be the right thing to do.</source>
          <target state="translated">Como cualquier otro mecanismo que suprime completamente las excepciones,este gestor de contexto debe utilizarse únicamente para cubrir errores muy específicos en los que se sabe que continuar silenciosamente con la ejecución del programa es lo correcto.</target>
        </trans-unit>
        <trans-unit id="61ba626904718f435e8bb9195d72a3d4e176bd46" translate="yes" xml:space="preserve">
          <source>As with message in an mbox mailbox, MMDF messages are stored with the sender&amp;rsquo;s address and the delivery date in an initial line beginning with &amp;ldquo;From &amp;ldquo;. Likewise, flags that indicate the state of the message are typically stored in &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb7354faa685cfe016fc2268268a70658988eb5" translate="yes" xml:space="preserve">
          <source>As with other methods, case-sensitivity is observed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31db4d814a8ee3a9c296a0ac9ab18e1168c00cb9" translate="yes" xml:space="preserve">
          <source>As with string literals, bytes literals may also use a &lt;code&gt;r&lt;/code&gt; prefix to disable processing of escape sequences. See &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt; for more about the various forms of bytes literal, including supported escape sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6084fcb644e26dce144964d5ce8fd1b644c1bcfd" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#description&quot;&gt;description&lt;/a&gt; argument, the &lt;code&gt;epilog=&lt;/code&gt; text is by default line-wrapped, but this behavior can be adjusted with the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d385a8286d57094c5ce3df7ad9daf11b5640f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;email.parser&lt;/code&gt;&lt;/a&gt; module, you aren&amp;rsquo;t limited to the functionality of the bundled generator; you could write one from scratch yourself. However the bundled generator knows how to generate most email in a standards-compliant way, should handle MIME and non-MIME email messages just fine, and is designed so that the bytes-oriented parsing and generation operations are inverses, assuming the same non-transforming &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; is used for both. That is, parsing the serialized byte stream via the &lt;a href=&quot;email.parser#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt; class and then regenerating the serialized byte stream using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt; should produce output identical to the input &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. (On the other hand, using the generator on an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; constructed by program may result in changes to the &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object as defaults are filled in.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b68bf763d9b565df24602f94e028fb7d75d354" translate="yes" xml:space="preserve">
          <source>As with the constructor for &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt;, the &lt;em&gt;filename&lt;/em&gt; argument can be an actual filename (a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object), or an existing file object to read from or write to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b89ac3cbb6042a6b76daccce240847a7e0deae" translate="yes" xml:space="preserve">
          <source>As with the normal socket object, &lt;em&gt;address&lt;/em&gt; is a tuple with the first element the host to connect to, and the second the port number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f590c8191e52a5707968f655cd53f953a854a829" translate="yes" xml:space="preserve">
          <source>As you can see, we can treat a config parser much like a dictionary. There are differences, &lt;a href=&quot;#mapping-protocol-access&quot;&gt;outlined later&lt;/a&gt;, but the behavior is very close to what you would expect from a dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f904f27b756361ae89156e1ce717db987f76ba" translate="yes" xml:space="preserve">
          <source>As you&amp;rsquo;d expect, the legal values for &lt;em&gt;someAction&lt;/em&gt; will depend on the widget&amp;rsquo;s class: &lt;code&gt;.fred disable&lt;/code&gt; works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b9f99dea4285cc76b6c48cda8a14e52d2b891d" translate="yes" xml:space="preserve">
          <source>As your collection of doctest&amp;rsquo;ed modules grows, you&amp;rsquo;ll want a way to run all their doctests systematically. &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; provides two functions that can be used to create &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test suites from modules and text files containing doctests. To integrate with &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test discovery, include a &lt;code&gt;load_tests()&lt;/code&gt; function in your test module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9978f5d754841b336538c4c5a01a51bbcd2678" translate="yes" xml:space="preserve">
          <source>Assert that &lt;em&gt;iter&lt;/em&gt; is deallocated after iterating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd264d50fb4b9eeefc754b5a58a5fcba3dedc28e" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; fails (&lt;code&gt;rc != 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0d6e30e5daa962c493e2c53bfd3e5bd71e7f71" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; succeeds (&lt;code&gt;rc == 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fb3abe58177e5028044ca5b20cc140fb7d71a8" translate="yes" xml:space="preserve">
          <source>Assert that the &lt;code&gt;__all__&lt;/code&gt; variable of &lt;em&gt;module&lt;/em&gt; contains all public names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a3005fb29b0592036701f49249b35f6fe4e576" translate="yes" xml:space="preserve">
          <source>Assert that the last await was with the specified arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab3c9a0f942a4e5218663ad1728f419192ba180" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited at least once. Note that this is separate from the object having been called, the &lt;code&gt;await&lt;/code&gt; keyword must be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559c5d43237366024e3609d35920dccb6c140415" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once and with the specified arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad7deeafb38bd4aeb17622c34aa957e7bdb88a1" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4df423286b9ac2be8365c78eafe1774099f5f2" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called at least once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3324ced759f5d86b62cf891c7da413bc53b68560" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once and that that call was with the specified arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf57493612b2763417d96c9bf7967affcea4272" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db0fab7867c814616ac71a3a5143ce2dff5900d" translate="yes" xml:space="preserve">
          <source>Assert that the mock was never awaited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c646d111dcc42ccae26bbe43d3ddada473ab0f" translate="yes" xml:space="preserve">
          <source>Assert the mock has been awaited with the specified calls. The &lt;a href=&quot;#unittest.mock.AsyncMock.await_args_list&quot;&gt;&lt;code&gt;await_args_list&lt;/code&gt;&lt;/a&gt; list is checked for the awaits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeceb688911f6dcdcfa555a84d22383aa56d4db7" translate="yes" xml:space="preserve">
          <source>Assert the mock has ever been awaited with the specified arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d67cb9aa133440c8ea1ec7d7cc69fcf71038d22" translate="yes" xml:space="preserve">
          <source>Assert the mock was never called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="096ae7879fe3ac7e3285826b7966eb892e08f3e2" translate="yes" xml:space="preserve">
          <source>Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6b37186bcf31c990ffb06dcf0507a39bd37db6" translate="yes" xml:space="preserve">
          <source>Assign a ctypes type to specify the result type of the foreign function. Use &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;void&lt;/code&gt;, a function not returning anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87af2d9b58846a93bc5651822c3deea453207ca5" translate="yes" xml:space="preserve">
          <source>Assign a tuple of ctypes types to specify the argument types that the function accepts. Functions using the &lt;code&gt;stdcall&lt;/code&gt; calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cd252fad6840a721b5d763b587fe334065ad54" translate="yes" xml:space="preserve">
          <source>Assigning a new value to instances of the pointer types &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ctypes.c_wchar_p&quot;&gt;&lt;code&gt;c_wchar_p&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ctypes.c_void_p&quot;&gt;&lt;code&gt;c_void_p&lt;/code&gt;&lt;/a&gt; changes the &lt;em&gt;memory location&lt;/em&gt; they point to, &lt;em&gt;not the contents&lt;/em&gt; of the memory block (of course not, because Python bytes objects are immutable):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad21f0fedcc6176cc70cb700d98f976d15416af" translate="yes" xml:space="preserve">
          <source>Assigning another &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt; instance to the pointer&amp;rsquo;s contents attribute would cause the pointer to point to the memory location where this is stored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b02ed6e18cfc24fbfbfe9a5ea607ee75077dc86" translate="yes" xml:space="preserve">
          <source>Assigning to an integer index changes the pointed to value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d425ffd0dc0c03777b86385bf81e964839a8b08e" translate="yes" xml:space="preserve">
          <source>Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e44ce9ac8ed3d578e4f315bbe0851d670b4c1ce" translate="yes" xml:space="preserve">
          <source>Assignment to these attributes should not be necessary other than in rare circumstances in a &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; method. The class does not enforce internal consistency, so you should know what you&amp;rsquo;re doing if you do that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdbb7b0403c9ed5b42c0c1a8e706970ef50e63c" translate="yes" xml:space="preserve">
          <source>Associate &lt;em&gt;dialect&lt;/em&gt; with &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;name&lt;/em&gt; must be a string. The dialect can be specified either by passing a sub-class of &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt;, or by &lt;em&gt;fmtparams&lt;/em&gt; keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section &lt;a href=&quot;#csv-fmt-params&quot;&gt;Dialects and Formatting Parameters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3bcabdd04e1667230d7f6889c5454cd909ae99" translate="yes" xml:space="preserve">
          <source>Associates a value with a specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c2abf791222401df793e61a9b604ada26f9510" translate="yes" xml:space="preserve">
          <source>Associates level &lt;em&gt;level&lt;/em&gt; with text &lt;em&gt;levelName&lt;/em&gt; in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99867ade566e46b388e954ef09df2f75d1038b85" translate="yes" xml:space="preserve">
          <source>Assume authentication as &lt;em&gt;user&lt;/em&gt;. Allows an authorised administrator to proxy into any user&amp;rsquo;s mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bb7ee1e82bfd124b995cad27c9d2ea8e6c6188" translate="yes" xml:space="preserve">
          <source>Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6fb61e671a32cacd481771d74554c4616cd64b" translate="yes" xml:space="preserve">
          <source>Assuming the Python code above is saved into a file called &lt;code&gt;prog.py&lt;/code&gt;, it can be run at the command line and provides useful help messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17acdde866027b94b28efa16a0a09a1e51553c63" translate="yes" xml:space="preserve">
          <source>Assuming the associated lock is recursive (which it is by default) you can instead do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005edc07fe911b0da3e54105325e3a3dbe1f1711" translate="yes" xml:space="preserve">
          <source>Assuming your script has no syntax errors, yet it does not work, you have no choice but to read the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f329190d0fd15344dac730aabc63c032720e1284" translate="yes" xml:space="preserve">
          <source>Asterisk</source>
          <target state="translated">Asterisk</target>
        </trans-unit>
        <trans-unit id="7011bcb2a149d047c8ec7153896517a23adc9f65" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a9f4eccd2719060ed9b323830b0077d403caed" translate="yes" xml:space="preserve">
          <source>Asynchronous Mixins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104c39ddd5b87efe32adc15b6d214b9332b179b7" translate="yes" xml:space="preserve">
          <source>Asynchronous iteration methods: &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209a40d7b9cbb542c52bb05184d751a0e19a14bd" translate="yes" xml:space="preserve">
          <source>Asynchronous programming is different from classic &amp;ldquo;sequential&amp;rdquo; programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120004888d9e7b45090be61175fabb0ddafb7dcc" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getaddrinfo&quot;&gt;&lt;code&gt;socket.getaddrinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9704ec7e27d093412e9ffd17b2f9417c95ee49f0" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getnameinfo&quot;&gt;&lt;code&gt;socket.getnameinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75a6e60c21cef60290f8db343e2dd2f1b6b1276" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.connect&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50fde5f44e91a6cb4dcbfaaaadebf896e7d84b9" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt;&lt;code&gt;socket.sendfile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e876b72734198f8efacaee16cfa51b70b11561" translate="yes" xml:space="preserve">
          <source>At least one of the following options must be specified when invoking &lt;a href=&quot;#module-trace&quot;&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; option is mutually exclusive with the &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; options. When &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; is provided, neither &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; are accepted, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005c763745673715312660addc3a03a01b8c8624" translate="yes" xml:space="preserve">
          <source>At normal program termination (for instance, if &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt; is called or the main module&amp;rsquo;s execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4212a7fb6907badcb796ef9f8a9820ede2ad461f" translate="yes" xml:space="preserve">
          <source>At object creation time, using keyword arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dffbcc195db46cf07fd560bf9cf819a6052dfc" translate="yes" xml:space="preserve">
          <source>At runtime, &lt;code&gt;isinstance(x, T)&lt;/code&gt; will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In general, &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; should not be used with types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ca4076074ecbdd662b657c7418c10266e2fae5" translate="yes" xml:space="preserve">
          <source>At the end of the module, there is a test section that contains a more extensive example of usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73eae57537773d1ac17b68b2f125d8fe89f21f11" translate="yes" xml:space="preserve">
          <source>At the highest level, the transport is concerned with &lt;em&gt;how&lt;/em&gt; bytes are transmitted, while the protocol determines &lt;em&gt;which&lt;/em&gt; bytes to transmit (and to some extent when).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b93ef8974634ba1eeddb05cd6f4fb7beae6e9cc" translate="yes" xml:space="preserve">
          <source>At the moment, there is only one possible parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8578bb4b0c201f731d20286e27c500875b32217c" translate="yes" xml:space="preserve">
          <source>At the operating system level, sockets in &lt;em&gt;timeout mode&lt;/em&gt; are internally set in non-blocking mode. Also, the blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint. This implementation detail can have visible consequences if e.g. you decide to use the &lt;a href=&quot;#socket.socket.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; of a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de79fa22e86445c74c1c60a24771c2ff1fcf7262" translate="yes" xml:space="preserve">
          <source>At the point where the generator yields, the block nested in the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the &lt;code&gt;with&lt;/code&gt; statement that the exception has been handled, and execution will resume with the statement immediately following the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f936198137a924a78693853317db45f419b314f" translate="yes" xml:space="preserve">
          <source>At the time of this writing there are docstring dictionaries in German and in Italian. (Requests please to &lt;a href=&quot;mailto:glingl%40aon.at&quot;&gt;glingl@aon.at&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd54bc6b94be573dbc110a2ed3dd2570d7474e92" translate="yes" xml:space="preserve">
          <source>At the top of the I/O hierarchy is the abstract base class &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. It defines the basic interface to a stream. Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise &lt;a href=&quot;#io.UnsupportedOperation&quot;&gt;&lt;code&gt;UnsupportedOperation&lt;/code&gt;&lt;/a&gt; if they do not support a given operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546ddf033018c3a7e711de15f41a05346f8ae2b5" translate="yes" xml:space="preserve">
          <source>At the top of the stack are either &lt;code&gt;NULL&lt;/code&gt; (pushed by &lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt;&lt;code&gt;BEGIN_FINALLY&lt;/code&gt;&lt;/a&gt;) or 6 values pushed if an exception has been raised in the with block. Below is the context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;__aexit__()&lt;/code&gt;&lt;/a&gt; bound method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9ec1befa4a5306b468dc7e8631beee73bd6981" translate="yes" xml:space="preserve">
          <source>At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77945ec79bafc1b696c30defadbc717e1a79af37" translate="yes" xml:space="preserve">
          <source>At unpickling time, some methods like &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement &lt;a href=&quot;#object.__getnewargs__&quot;&gt;&lt;code&gt;__getnewargs__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt; to establish such an invariant; otherwise, neither &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9837a1d06939ed7ea8bb756a82ada0870d4850" translate="yes" xml:space="preserve">
          <source>Attach a mock as an attribute of this one, replacing its name and parent. Calls to the attached mock will be recorded in the &lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt;&lt;code&gt;method_calls&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; attributes of this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00d5eac33db6facb2e7b7a2c2ed13c7c2c1b486" translate="yes" xml:space="preserve">
          <source>Attach the watcher to an event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8968365a321bb5b470f5dd2910dc56d308443a45" translate="yes" xml:space="preserve">
          <source>Attaches the callable &lt;em&gt;fn&lt;/em&gt; to the future. &lt;em&gt;fn&lt;/em&gt; will be called, with the future as its only argument, when the future is cancelled or finishes running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de4844092811a250638c499c463f6e1183dadac" translate="yes" xml:space="preserve">
          <source>Attaching Mocks as Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d7b70d5d34350cfab01a5105b6cadb19208146" translate="yes" xml:space="preserve">
          <source>Attempt to cancel the call. If the call is currently being executed or finished running and cannot be cancelled then the method will return &lt;code&gt;False&lt;/code&gt;, otherwise the call will be cancelled and the method will return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94ab803dbe317473c0a7010ac4289475d2e741b" translate="yes" xml:space="preserve">
          <source>Attempt to find the loader to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e96da2c623edd35028d89720f05572c7ca81a6" translate="yes" xml:space="preserve">
          <source>Attempt to find the spec to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ad8c10f0d76337b6eb760519bcf124aa2fa5b5" translate="yes" xml:space="preserve">
          <source>Attempt to read and parse an iterable of filenames, returning a list of filenames which were successfully parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec2196c119a8750bee0a499c586caefe53531d9" translate="yes" xml:space="preserve">
          <source>Attempt to set up a connection to the listener which is using address &lt;em&gt;address&lt;/em&gt;, returning a &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcfcda249f8236d3c4a374364c689dafac6d094d" translate="yes" xml:space="preserve">
          <source>Attempting to create a member with the same name as an already defined attribute (another member, a method, etc.) or attempting to create an attribute with the same name as a member is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582daf17ef09c37849d7cd683a4bf531834c0538" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#bz2.BZ2Decompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b665a0261d8155c9a7fef41d1c6d0fafe94af38" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#lzma.LZMADecompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e681818ae46e966f6a5519bb892f806874ff3de9" translate="yes" xml:space="preserve">
          <source>Attempting to hash an immutable sequence that contains unhashable values will result in &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4315a818f5b166adfafe5e6b5bedd0f534c2d06f" translate="yes" xml:space="preserve">
          <source>Attempting to link in too many shared libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1642b2606e4707280aebbdbf990340b047aa2c" translate="yes" xml:space="preserve">
          <source>Attempting to mix &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data with &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; in a single function call will result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; being raised, while attempting to pass in non-ASCII byte values will trigger &lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt;&lt;code&gt;UnicodeDecodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6184f80184272af2a3f2d6c0b9b164e1af53cf1" translate="yes" xml:space="preserve">
          <source>Attempting to pass an invalid interval timer will cause an &lt;a href=&quot;#signal.ItimerError&quot;&gt;&lt;code&gt;ItimerError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e116626d01e2573360701151c730543d251d466" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered causes a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception to be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3488e5797ae34b2740e12aca784ebb804aa2a11a" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered is safely ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413a8b0ee7fbafdd8b138da7cc28cc290a17232c" translate="yes" xml:space="preserve">
          <source>Attempts to parse a date according to the rules in &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;. however, some mailers don&amp;rsquo;t follow that format as specified, so &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; tries to guess correctly in such cases. &lt;em&gt;date&lt;/em&gt; is a string containing an &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; date, such as &lt;code&gt;&quot;Mon, 20 Nov 1995 19:12:08 -0500&quot;&lt;/code&gt;. If it succeeds in parsing the date, &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; returns a 9-tuple that can be passed directly to &lt;a href=&quot;time#time.mktime&quot;&gt;&lt;code&gt;time.mktime()&lt;/code&gt;&lt;/a&gt;; otherwise &lt;code&gt;None&lt;/code&gt; will be returned. Note that indexes 6, 7, and 8 of the result tuple are not usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8f0a192956c468d1f05450c3d0f99e1ed3eb87" translate="yes" xml:space="preserve">
          <source>Attempts to pickle unpicklable objects will raise the &lt;a href=&quot;#pickle.PicklingError&quot;&gt;&lt;code&gt;PicklingError&lt;/code&gt;&lt;/a&gt; exception; when this happens, an unspecified number of bytes may have already been written to the underlying file. Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt; will be raised in this case. You can carefully raise this limit with &lt;a href=&quot;sys#sys.setrecursionlimit&quot;&gt;&lt;code&gt;sys.setrecursionlimit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b271428a65f77bc781cd47b969a5bc6e419af63a" translate="yes" xml:space="preserve">
          <source>Attention: &lt;em&gt;speed&lt;/em&gt; = 0 means that &lt;em&gt;no&lt;/em&gt; animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4704ccf5d9826a4b8c3ff2f628be8f9ea11d5c58" translate="yes" xml:space="preserve">
          <source>Attr Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="fd11efd3b2bb215beb5fe4deac5b15c31b49871e" translate="yes" xml:space="preserve">
          <source>Attribute name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b0ecb440f33452e3b57f0fc1355b5b83b53b65" translate="yes" xml:space="preserve">
          <source>Attribute value nodes on element nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30390c6b25519953f15954ce4132cba67fdd587" translate="yes" xml:space="preserve">
          <source>AttributeError</source>
          <target state="translated">AttributeError</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="79c3aeb6146abe2231f5b89a475ab249029d088e" translate="yes" xml:space="preserve">
          <source>Attributes and methods for customizing the WSGI environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b663bf28955d0808f846d124c86b6d0183b33f" translate="yes" xml:space="preserve">
          <source>Attributes and methods on a &lt;code&gt;os.DirEntry&lt;/code&gt; instance are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73692911ebd863a9a87e4961881d432666982309" translate="yes" xml:space="preserve">
          <source>Attributes are created on demand when you access them by name. Accessing the same attribute will always return the same object. The objects returned have a sensible repr so that test failure messages are readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101df875704c7152821017f27b87995406582c71" translate="yes" xml:space="preserve">
          <source>Attributes plus return values and side effects can be set on child mocks using standard dot notation and unpacking a dictionary in the method call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c886066a950b07e9817b943cf62493312e7bdd7" translate="yes" xml:space="preserve">
          <source>Attributes set when an exception is catched:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Attributes:</target>
        </trans-unit>
        <trans-unit id="5c7c68f4b64e821cb3bb3f3f760a898c036a3f74" translate="yes" xml:space="preserve">
          <source>Audio Device Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16176810d7decb98eb62c4c87a10dd432035c88f" translate="yes" xml:space="preserve">
          <source>Audio device objects also support several read-only attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e947bb134465c1c6a6e453065d0c48e8ca8c64a" translate="yes" xml:space="preserve">
          <source>Audio files have a number of parameters that describe the audio data. The sampling rate or frame rate is the number of times per second the sound is sampled. The number of channels indicate if the audio is mono, stereo, or quadro. Each frame consists of one sample per channel. The sample size is the size in bytes of each sample. Thus a frame consists of &lt;code&gt;nchannels * samplesize&lt;/code&gt; bytes, and a second&amp;rsquo;s worth of audio consists of &lt;code&gt;nchannels * samplesize * framerate&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3e0d680200101f6f9f4009685f904d7888a4b5" translate="yes" xml:space="preserve">
          <source>Audit event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c2893dc5aedb9cac7688ec4357a58cad8f48e8" translate="yes" xml:space="preserve">
          <source>Audit events table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6922a9610304991071bd728c3a287a51b532d68c" translate="yes" xml:space="preserve">
          <source>Authenticate command &amp;mdash; requires response processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccb8a1076f255643cd045f9684ad5f445deae31" translate="yes" xml:space="preserve">
          <source>Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don&amp;rsquo;t support or require any authentication, but your mileage might vary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34762561a060645d5e694a00f5c15f22688272cc" translate="yes" xml:space="preserve">
          <source>Authentication keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d03350228ac0bf7f8b015328effcfd7281fdb3" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support client-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections. The protocol enables &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b09a77c9093ba1c2df03bc5d6beeb4959883e7" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support server-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47c5ab52bbe1a984f857a4d21dd996e64a02f48" translate="yes" xml:space="preserve">
          <source>Auto-open Stack Viewer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197be9c04cb2e21653d60342178244091efa77b8" translate="yes" xml:space="preserve">
          <source>Auto-speccing solves this problem. You can either pass &lt;code&gt;autospec=True&lt;/code&gt; to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; or use the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function to create a mock with a spec. If you use the &lt;code&gt;autospec=True&lt;/code&gt; argument to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; then the object that is being replaced will be used as the spec object. Because the speccing is done &amp;ldquo;lazily&amp;rdquo; (the spec is created as attributes on the mock are accessed) you can use it with very complex or deeply nested objects (like modules that import modules that import modules) without a big performance hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61da791d8a006bda906f9ae1ff768b72eb7dc76" translate="yes" xml:space="preserve">
          <source>Automatic indentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6403e37e9140843598c5440d1e8bc72de007ae50" translate="yes" xml:space="preserve">
          <source>Automatically determine how many times to call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5117dbfc630c5ff47b8c4726c276df15d1bd1e" translate="yes" xml:space="preserve">
          <source>Autospeccing</source>
          <target state="translated">Autospeccing</target>
        </trans-unit>
        <trans-unit id="aae79d454597517030f9ce7ec36250067a2b9f35" translate="yes" xml:space="preserve">
          <source>Autospeccing is based on the existing &lt;code&gt;spec&lt;/code&gt; feature of mock. It limits the api of mocks to the api of an original object (the spec), but it is recursive (implemented lazily) so that attributes of mocks only have the same api as the attributes of the spec. In addition mocked functions / methods have the same call signature as the original so they raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are called incorrectly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e04a76e0651512ad3b1c9b3855e894e52bacec7" translate="yes" xml:space="preserve">
          <source>Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ede98b9b5686d60eb679c69ff709aea96450e" translate="yes" xml:space="preserve">
          <source>Availability: SQLite 3.6.11 or higher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0648a25bb67f0b4d3be9ad2e32d5343d5884c667" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the &lt;code&gt;madvise()&lt;/code&gt; system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc09c1546fd2002ad5bda6442ec6858c4d44e94" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the madvise() system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fcd2b619f3ed9f21f2ae1dc44a712e8e0c1b0c" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3bce3637a32f6ce35b6791b2442a57507592a0" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad7b53c45f37c3a8f080b151e9238c41b4b613e" translate="yes" xml:space="preserve">
          <source>Availability: if the ncurses library is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ede860852b2d88bce6f917c8c626dd1ebd0863" translate="yes" xml:space="preserve">
          <source>Available Context Managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fb788cf6307a8cd78a358b3227f7e4460f4896" translate="yes" xml:space="preserve">
          <source>Available Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886aad58c06c842c7cf3407ff5f794bccc525568" translate="yes" xml:space="preserve">
          <source>Available Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1743168e4383b0ceeb14b5166304e0f0f3be9ec" translate="yes" xml:space="preserve">
          <source>Available for read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247b0d4f98d15c3f067f1f036f9a2288ba9508e3" translate="yes" xml:space="preserve">
          <source>Available for write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cbfc01dab58f33d6399bdf92d34e12742cc326" translate="yes" xml:space="preserve">
          <source>Available on Unix and Windows. The default on Windows and macOS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd9dd81c594faef45bb68cd8e2f6b57306afbb3" translate="yes" xml:space="preserve">
          <source>Available on Unix only. The default on Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b289188b8156e0915761af80089ec725b1d7c5e" translate="yes" xml:space="preserve">
          <source>Available on Unix platforms which support passing file descriptors over Unix pipes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c3e2a80c9a11385439b399a1bbc1528532103f" translate="yes" xml:space="preserve">
          <source>Averages and measures of central location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dece88439aa338ed47cd03f066290634af6ebb" translate="yes" xml:space="preserve">
          <source>Avoid shared state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cd5a5cd25205ca8554e1312e26ecf321d1c177" translate="yes" xml:space="preserve">
          <source>Avoid terminating processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfd80c478c083df370ff07aeddda8591a1285bc" translate="yes" xml:space="preserve">
          <source>Awaitables</source>
          <target state="translated">Awaitables</target>
        </trans-unit>
        <trans-unit id="da49b3337696e8a2b4c64d3033aa0a3a5fbc2d3f" translate="yes" xml:space="preserve">
          <source>Awaiting on a coroutine. The following snippet of code will print &amp;ldquo;hello&amp;rdquo; after waiting for 1 second, and then print &amp;ldquo;world&amp;rdquo; after waiting for &lt;em&gt;another&lt;/em&gt; 2 seconds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09738049226150f62d909b1178a56d0dfe67bbd" translate="yes" xml:space="preserve">
          <source>Aware and Naive Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708e5124ff648e8126313adce762960fdf915375" translate="yes" xml:space="preserve">
          <source>BLAKE2</source>
          <target state="translated">BLAKE2</target>
        </trans-unit>
        <trans-unit id="9bc500c21c3285144fc28bd0e912a7783b167e8c" translate="yes" xml:space="preserve">
          <source>BLAKE2 can be personalized by passing bytes to the &lt;em&gt;person&lt;/em&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c571b2356698c401ae7c55f2f7327fe7d7dcc208" translate="yes" xml:space="preserve">
          <source>BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to 32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without changing the size of output, we can tell BLAKE2b to produce 20-byte digests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef9c659e49da103106b41ae1c8a79320baba6dc" translate="yes" xml:space="preserve">
          <source>BLAKE2 specification defines constant lengths for salt and personalization parameters, however, for convenience, this implementation accepts byte strings of any size up to the specified length. If the length of the parameter is less than specified, it is padded with zeros, thus, for example, &lt;code&gt;b'salt'&lt;/code&gt; and &lt;code&gt;b'salt\x00'&lt;/code&gt; is the same value. (This is not the case for &lt;em&gt;key&lt;/em&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd2ef75abf83ba49f622d80373a85346c04a5b37" translate="yes" xml:space="preserve">
          <source>BLAKE2 supports &lt;strong&gt;keyed mode&lt;/strong&gt; (a faster and simpler replacement for &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;), &lt;strong&gt;salted hashing&lt;/strong&gt;, &lt;strong&gt;personalization&lt;/strong&gt;, and &lt;strong&gt;tree hashing&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc708fbeac5b1cf0a46d24793514cf456186e0b0" translate="yes" xml:space="preserve">
          <source>BLAKE2b</source>
          <target state="translated">BLAKE2b</target>
        </trans-unit>
        <trans-unit id="b5b58babc24a9c4ee1a0847d9544ddb7d16f7c8f" translate="yes" xml:space="preserve">
          <source>BLAKE2s</source>
          <target state="translated">BLAKE2s</target>
        </trans-unit>
        <trans-unit id="e0e381dd5fc1fcdbadce37e6a061ba49795a568d" translate="yes" xml:space="preserve">
          <source>BMP files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a05330f8bf46c41ac1665544187ff109c2243" translate="yes" xml:space="preserve">
          <source>Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs. The beginning of a message is indicated by a line containing the two characters Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) and Control-L (&lt;code&gt;'\014'&lt;/code&gt;). The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e1b906cbdb74be5ef8d171c417a6f96c704e55" translate="yes" xml:space="preserve">
          <source>Back tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf84c7c42731b104d6bb1ee61a75ed5dec2fca1" translate="yes" xml:space="preserve">
          <source>Back up your cookies before saving if you have cookies whose loss / corruption would be inconvenient (there are some subtleties which may lead to slight changes in the file over a load / save round-trip).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7cabb8d741c7dccd3373c3e1b45a4517c4bc9a5" translate="yes" xml:space="preserve">
          <source>Backend function used by &lt;a href=&quot;#curses.resizeterm&quot;&gt;&lt;code&gt;resizeterm()&lt;/code&gt;&lt;/a&gt;, performing most of the work; when resizing the windows, &lt;a href=&quot;#curses.resize_term&quot;&gt;&lt;code&gt;resize_term()&lt;/code&gt;&lt;/a&gt; blank-fills the areas that are extended. The calling application should fill in these areas with appropriate data. The &lt;code&gt;resize_term()&lt;/code&gt; function attempts to resize all windows. However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8d0fed9a547cc64ffb221201642666f0011ab4" translate="yes" xml:space="preserve">
          <source>Background, details, hints, tips and caveats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d761e5a62561f09ed0d44ad1cb46328e1f217a6f" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
          <target state="translated">Las barras invertidas se interpretan literalmente,a menos que precedan inmediatamente a una comilla doble.</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="a3b4e1ecc274bf718cbbd8a1a3fe637f6e1d74f9" translate="yes" xml:space="preserve">
          <source>Backspace (unreliable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f2cbe5dc4e91bd91593c8be3a8399315bbfdf" translate="yes" xml:space="preserve">
          <source>Backward-compatible usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afefdad8f394c65ed6d000a865d699a38489c6f" translate="yes" xml:space="preserve">
          <source>Bad address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ac5297b2f804cdafa5d88f5e271e340ba5cf37" translate="yes" xml:space="preserve">
          <source>Bad file number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42cb962824573639b58c8ac6238174cbbe0902e" translate="yes" xml:space="preserve">
          <source>Bad font file format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b7225a7007de0840d3002393babbaf7c304ea8" translate="yes" xml:space="preserve">
          <source>Baltic languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5a05a8b84deb1f27d7d9a68b519e2daa6a3749" translate="yes" xml:space="preserve">
          <source>Barrier Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5376071164581eb584cba9b3620cf0285ee49f3" translate="yes" xml:space="preserve">
          <source>Barry Warsaw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfa89884cf762b2c8452214a9cb7c8b56848102" translate="yes" xml:space="preserve">
          <source>Base Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7847ef64ed125924cd719af4769f2b49be1f954" translate="yes" xml:space="preserve">
          <source>Base Protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fa70ba520aae580db170cd80267cedd66c66af" translate="yes" xml:space="preserve">
          <source>Base Transport</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7c08675f792982cba4bf468bb32f3974d128d6" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded4acb00e3e9a0e2c6d819d2be38745cb197828" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for other Python developers (ignored by default, unless triggered by code in &lt;code&gt;__main__&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecd2a13287ac24c073616d7be9ca1bac4b820e3" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious runtime features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbf72d780c57a442a1d40e971f0bafb4ba000b7" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious syntactic features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b961e19180b568120a243fe8a965f885400f3963" translate="yes" xml:space="preserve">
          <source>Base category for warnings about features that will be deprecated in the future (ignored by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271b2d511f8d7cb0d37d60a7165a2a6be096fb2d" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56c87eafe934bdffdcf80bbda3a3f1bafd3951a" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aca1ccdde79b14ca072dd8196fe1a8eaa20e816" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to resource usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db12d86e6ccca93eb8b1b63e07ce33c90af51f7" translate="yes" xml:space="preserve">
          <source>Base category for warnings triggered during the process of importing a module (ignored by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c7f7b7e6449dee51da32f88ce059c9f0a6e133" translate="yes" xml:space="preserve">
          <source>Base class for C callable foreign functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b278fdd49d1caec7588ea1619ab8693a3d6aea" translate="yes" xml:space="preserve">
          <source>Base class for all &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a2ff960e585bade07c251fc6907e1766bfdcea" translate="yes" xml:space="preserve">
          <source>Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code. The error code is stored in the &lt;code&gt;smtp_code&lt;/code&gt; attribute of the error, and the &lt;code&gt;smtp_error&lt;/code&gt; attribute is set to the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4d1cfe65641ccd75006d6cb0c5273ca53b06fc" translate="yes" xml:space="preserve">
          <source>Base class for all other &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e79acf9343097cfca004b026b1e289b6e81d9e7" translate="yes" xml:space="preserve">
          <source>Base class for all other exceptions from this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0094874eb16d8f35c44e0f11faca44e7bc129804" translate="yes" xml:space="preserve">
          <source>Base class for all transports. Contains methods that all asyncio transports share.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8dc0e5d7f463652bc46330f069074014733a53" translate="yes" xml:space="preserve">
          <source>Base class for binary streams that support some kind of buffering. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111505a2e2f1c5d720f4dbb20b18464824cc26d2" translate="yes" xml:space="preserve">
          <source>Base class for content managers. Provides the standard registry mechanisms to register converters between MIME content and other representations, as well as the &lt;code&gt;get_content&lt;/code&gt; and &lt;code&gt;set_content&lt;/code&gt; dispatch methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e0fa5fb9d9cb92c49e07f64d986e277b736562" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4710022b4a59f7309e498f9784b89980698d53" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operations without losing their &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; membership.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8067a9d2bd64f504a0ed0bf642eba1d2667cdb0d" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operators without losing their &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; membership. &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49651f12dd69e9fc5b9eb9a491dae1396c8f4820" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants. See section &lt;a href=&quot;#functional-api&quot;&gt;Functional API&lt;/a&gt; for an alternate construction syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8496250f8d316f4c2fb71bb6afeaf2db8d55ba5" translate="yes" xml:space="preserve">
          <source>Base class for exceptions raised when problems occur performing string interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8cc99e6dd0fa75e5d9d18d1e2f0b6d159ef64b" translate="yes" xml:space="preserve">
          <source>Base class for opening and reading URLs. Unless you need to support opening objects using schemes other than &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;, or &lt;code&gt;file:&lt;/code&gt;, you probably want to use &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa942d873b8cc2045025e1cba883f43a926d1060" translate="yes" xml:space="preserve">
          <source>Base class for other signals and a subclass of &lt;a href=&quot;exceptions#ArithmeticError&quot;&gt;&lt;code&gt;ArithmeticError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78011d81daf58732134a6e10362b07bb6ae789f" translate="yes" xml:space="preserve">
          <source>Base class for policy objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37baa2206d896a594f1f8aa5a3db8477752589d1" translate="yes" xml:space="preserve">
          <source>Base class for protocol classes. Protocol classes are defined like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a52a47b306d18d17af6700a5e02d334eea68489" translate="yes" xml:space="preserve">
          <source>Base class for raw binary I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5274c46b7e76247d7c11c675e64556818455ea" translate="yes" xml:space="preserve">
          <source>Base class for syntax errors related to incorrect indentation. This is a subclass of &lt;a href=&quot;#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8034f1f619a25403ea22ca32afe23c323c69db0" translate="yes" xml:space="preserve">
          <source>Base class for text streams. This class provides a character and line based interface to stream I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115592b440ded17229a2be8652ec1583576bd6be" translate="yes" xml:space="preserve">
          <source>Base class for the dialogs defined in the other modules listed here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a767590a449f53c349f02ce7bd8efd407590883" translate="yes" xml:space="preserve">
          <source>Base class for warning categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e62bee9558e07fac538cacc23a8c4434dcd550" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef4dbd3cc05db0caaef10bd33d535aef6000686" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for other Python developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d911ad966f332393c3708556614e73ed1cbd284" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious runtime behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed11da738626db6bc66dc76605890a35049a6b1f" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e39f8ab9b8f97932eee2df10cc6b10cd8aec138" translate="yes" xml:space="preserve">
          <source>Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dda81dec15bfcd224d1e4d932c986e759a07e6a" translate="yes" xml:space="preserve">
          <source>Base class for warnings about probable mistakes in module imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a020b0a894b4052b6ee113d3143b9d2aef84bb79" translate="yes" xml:space="preserve">
          <source>Base class for warnings generated by user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b307ddcc59f65f2e18cfc4a546c8cbf5e9483f01" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f1306f10d78b1a318d2d99f7741e21a1990aab" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c1a39f6eb8799e6d29048479dd3cf5cc598666" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to resource usage. Ignored by the default warning filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1dd274748a920e7e6b6531ecc973725498ebb54" translate="yes" xml:space="preserve">
          <source>Base class of the dialog controls. &lt;em&gt;dlg&lt;/em&gt; is the dialog object the control belongs to, and &lt;em&gt;name&lt;/em&gt; is the control&amp;rsquo;s name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f20f1270a9dcc163b4e1c85af830ebcf1500698" translate="yes" xml:space="preserve">
          <source>Base class which can be inherited by SAX parsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597d1d5f179914ea7470a3760bd8ee3a2400c1bc" translate="yes" xml:space="preserve">
          <source>Base classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f532cd83f6f9947116baa3849ec23355cdfb324d" translate="yes" xml:space="preserve">
          <source>Base exception class used for all specific DOM exceptions. This exception class cannot be directly instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00864be99f44fa68097e7a11c50dc2553483317" translate="yes" xml:space="preserve">
          <source>Base interface for most objects in a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0691eb22ac03b573f0c69a50a9e4abca05842012" translate="yes" xml:space="preserve">
          <source>Base protocol with methods that all protocols share.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0433583846f35c2ba0aec03a821f97c49d6fc91d" translate="yes" xml:space="preserve">
          <source>BaseException</source>
          <target state="translated">BaseException</target>
        </trans-unit>
        <trans-unit id="2139b25cc7ba47829b2613ecd5640b728063f573" translate="yes" xml:space="preserve">
          <source>BaseException.args</source>
          <target state="translated">BaseException.args</target>
        </trans-unit>
        <trans-unit id="f8a3365a764654373607fbb6ccc5794d20c265b0" translate="yes" xml:space="preserve">
          <source>BaseException.with_traceback()</source>
          <target state="translated">BaseException.with_traceback()</target>
        </trans-unit>
        <trans-unit id="74d736dbe7da7ac2d79279fada28cb6cbb8192ea" translate="yes" xml:space="preserve">
          <source>BaseHandler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ce97d8702b53323f2a4a2c72c66dc5a0eb4e72" translate="yes" xml:space="preserve">
          <source>BaseRotatingHandler</source>
          <target state="translated">BaseRotatingHandler</target>
        </trans-unit>
        <trans-unit id="7348670742e76aaa11d877df8fca9b83a11d1757" translate="yes" xml:space="preserve">
          <source>Basic API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a289e7dff9101f26b8dc18725557c4f9fdf82bd" translate="yes" xml:space="preserve">
          <source>Basic Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3f6e8e2e15cd0179d1216f1c988e44f90d868e" translate="yes" xml:space="preserve">
          <source>Basic Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">Uso básico</target>
        </trans-unit>
        <trans-unit id="03cdc9f64fd1c085bb10854b62f123e70ce40ba7" translate="yes" xml:space="preserve">
          <source>Basic Widgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af90dc70fae02c63e1b5bfb27dfff83393f621b5" translate="yes" xml:space="preserve">
          <source>Basic dialogs and convenience functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd84c756956f6869f891f756d2ed679a18b4696" translate="yes" xml:space="preserve">
          <source>Basic examples:</source>
          <target state="translated">Ejemplos básicos:</target>
        </trans-unit>
        <trans-unit id="c58a44745c80d118117b0a04466e564264a9e678" translate="yes" xml:space="preserve">
          <source>Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc42d64e6761d3023d0a23567aa37e8faeed769a" translate="yes" xml:space="preserve">
          <source>Basic skipping looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955f12253b570691dddd89d6664ff86c6ffea525" translate="yes" xml:space="preserve">
          <source>Basic turtle commands such as &lt;a href=&quot;turtle#turtle.forward&quot;&gt;&lt;code&gt;forward()&lt;/code&gt;&lt;/a&gt; are added to a &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; subclass with method named &lt;code&gt;do_forward()&lt;/code&gt;. The argument is converted to a number and dispatched to the turtle module. The docstring is used in the help utility provided by the shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3816b07b2c1c67b6c5d0b0c0ef9af019f07757" translate="yes" xml:space="preserve">
          <source>Be aware that setting &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; can lead to infinite recursion if a link points to a parent directory of itself. &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; does not keep track of the directories it visited already.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d410bcf0f1e8b0447d1481b24eeff8e98f8899" translate="yes" xml:space="preserve">
          <source>Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created. This often occurs with blocking I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cc029ce668972e8e992f6e3aa06dc274e72815" translate="yes" xml:space="preserve">
          <source>Be forewarned about how &lt;code&gt;init=False&lt;/code&gt; fields work during a call to &lt;a href=&quot;#dataclasses.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt;. They are not copied from the source object, but rather are initialized in &lt;code&gt;__post_init__()&lt;/code&gt;, if they&amp;rsquo;re initialized at all. It is expected that &lt;code&gt;init=False&lt;/code&gt; fields will be rarely and judiciously used. If they are used, it might be wise to have alternate class constructors, or perhaps a custom &lt;code&gt;replace()&lt;/code&gt; (or similarly named) method which handles instance copying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abae3c10b04d3f45674d8d84138847d156e5d77c" translate="yes" xml:space="preserve">
          <source>Be very cautious when modifying mailboxes that might be simultaneously changed by some other process. The safest mailbox format to use for such tasks is Maildir; try to avoid using single-file formats such as mbox for concurrent writing. If you&amp;rsquo;re modifying a mailbox, you &lt;em&gt;must&lt;/em&gt; lock it by calling the &lt;a href=&quot;#mailbox.Mailbox.lock&quot;&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mailbox.Mailbox.unlock&quot;&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/a&gt; methods &lt;em&gt;before&lt;/em&gt; reading any messages in the file or making any changes by adding or deleting a message. Failing to lock the mailbox runs the risk of losing messages or corrupting the entire mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c1fe83f49ee94713ba4bebb01d2337218d28eb" translate="yes" xml:space="preserve">
          <source>Be warned that you should calibrate the profiler class for the timer function that you choose (see &lt;a href=&quot;#profile-calibration&quot;&gt;Calibration&lt;/a&gt;). For most machines, a timer that returns a lone integer value will provide the best results in terms of low overhead during profiling. (&lt;a href=&quot;os#os.times&quot;&gt;&lt;code&gt;os.times()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;pretty&lt;/em&gt; bad, as it returns a tuple of floating point values). If you want to substitute a better timer in the cleanest fashion, derive a class and hardwire a replacement dispatch method that best handles your timer call, along with the appropriate calibration constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb941ef4dc684b044e6e45b9283386b1eb3e83df" translate="yes" xml:space="preserve">
          <source>Bear in mind that a process that has put items in a queue will wait before terminating until all the buffered items are fed by the &amp;ldquo;feeder&amp;rdquo; thread to the underlying pipe. (The child process can call the &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;Queue.cancel_join_thread&lt;/code&gt;&lt;/a&gt; method of the queue to avoid this behaviour.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4332bde329f74d1a7a1aff8d1cef2c7d17c810" translate="yes" xml:space="preserve">
          <source>Bear in mind that if code run in a child process tries to access a global variable, then the value it sees (if any) may not be the same as the value in the parent process at the time that &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;Process.start&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e62a51dfa0dc36185ec273da331d0a6fb29a35" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed699fc6637c9326d06d5f91cf8cfe03647969a" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; they can be combined with them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5676d312428ed566fc5e55055b04a8a487aa66cb" translate="yes" xml:space="preserve">
          <source>Because NIS exists only on Unix systems, this module is only available for Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449b33e822195d1cb40d26026e8bbadbe72c580f" translate="yes" xml:space="preserve">
          <source>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel. It is indeed trivial to modify the above example to run several commands simultaneously:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd024808dd20391db9a5d87efaaa473460d75e55" translate="yes" xml:space="preserve">
          <source>Because deep copy copies everything it may copy too much, such as data which is intended to be shared between copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe4a8056160b609c3f4db4e7d117d78cac2ac63" translate="yes" xml:space="preserve">
          <source>Because it requires the &lt;a href=&quot;termios#module-termios&quot;&gt;&lt;code&gt;termios&lt;/code&gt;&lt;/a&gt; module, it will work only on Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512d82a1a965117bb846701b126fb31120198553" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s so flexible, &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt;&lt;code&gt;XMLPullParser&lt;/code&gt;&lt;/a&gt; can be inconvenient to use for simpler use-cases. If you don&amp;rsquo;t mind your application blocking on reading XML data but would still like to have incremental parsing capabilities, take a look at &lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt;&lt;code&gt;iterparse()&lt;/code&gt;&lt;/a&gt;. It can be useful when you&amp;rsquo;re reading a large XML document and don&amp;rsquo;t want to hold it wholly in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e478af3d6ae73e7bc440c377cd0710be8dd209" translate="yes" xml:space="preserve">
          <source>Because magic methods are looked up differently from normal methods &lt;a href=&quot;#id9&quot; id=&quot;id7&quot;&gt;2&lt;/a&gt;, this support has been specially implemented. This means that only specific magic methods are supported. The supported list includes &lt;em&gt;almost&lt;/em&gt; all of them. If there are any missing that you need please let us know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5644c87e7d8c8596308ff2c76d404cdc5f9f5e" translate="yes" xml:space="preserve">
          <source>Because many of the traps are enabled, this context is useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0682abf783b1442ff30ccebb13d38ee0bde7ce7f" translate="yes" xml:space="preserve">
          <source>Because mocks auto-create attributes on demand, and allow you to call them with arbitrary arguments, if you misspell one of these assert methods then your assertion is gone:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f324a634323f6253d750beb01677494c624217" translate="yes" xml:space="preserve">
          <source>Because most of the operations on any given type will be very similar, it can be useful to define a helper function which generates the forward and reverse instances of any given operator. For example, &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; uses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37e0b8c6e2c7fbb2cc8dfb353efdeb9905b90d4" translate="yes" xml:space="preserve">
          <source>Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d328dbf9ad55c5ef4fe48e9b55f65c19053b49" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing a specific timestamp in UTC is by calling &lt;code&gt;datetime.fromtimestamp(timestamp, tz=timezone.utc)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c258a614b92ea7ab843f0053cb8a4745997da95" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing the current time in UTC is by calling &lt;code&gt;datetime.now(timezone.utc)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47a5630dcb74119e881ec10d145701d12e134d9" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC; as a result, using &lt;code&gt;utcfromtimetuple&lt;/code&gt; may give misleading results. If you have a naive &lt;code&gt;datetime&lt;/code&gt; representing UTC, use &lt;code&gt;datetime.replace(tzinfo=timezone.utc)&lt;/code&gt; to make it aware, at which point you can use &lt;a href=&quot;#datetime.datetime.timetuple&quot;&gt;&lt;code&gt;datetime.timetuple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c1292e4567d219d1d4e44f189debf054b0b060" translate="yes" xml:space="preserve">
          <source>Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written &lt;em&gt;only&lt;/em&gt; when assigned to the shelf (see &lt;a href=&quot;#shelve-example&quot;&gt;Example&lt;/a&gt;). If the optional &lt;em&gt;writeback&lt;/em&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, all entries accessed are also cached in memory, and written back on &lt;a href=&quot;#shelve.Shelf.sync&quot;&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#shelve.Shelf.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a25338cf8065d3938e8ff0b097c26f981ba9436" translate="yes" xml:space="preserve">
          <source>Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the &lt;code&gt;tix_config()&lt;/code&gt; method. Instead, the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_resetoptions&quot;&gt;&lt;code&gt;tix_resetoptions()&lt;/code&gt;&lt;/a&gt; method must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d71e1d1d10cd40808346877ec280d341096ac6" translate="yes" xml:space="preserve">
          <source>Because of the way mock attributes are stored you can&amp;rsquo;t directly attach a &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; to a mock object. Instead you can attach it to the mock type object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400e21a04dc1ea4ab9991dc7b7931687ece1123f" translate="yes" xml:space="preserve">
          <source>Because package metadata is not available through &lt;code&gt;sys.path&lt;/code&gt; searches, or package loaders directly, the metadata for a package is found through import system &lt;a href=&quot;https://docs.python.org/3/reference/import.html#finders-and-loaders&quot;&gt;finders&lt;/a&gt;. To find a distribution package&amp;rsquo;s metadata, &lt;code&gt;importlib.metadata&lt;/code&gt; queries the list of &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-meta-path-finder&quot;&gt;meta path finders&lt;/a&gt; on &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.meta_path&quot;&gt;sys.meta_path&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55b59f6bf0508d0270277c6f73d5728e5bbe79f" translate="yes" xml:space="preserve">
          <source>Because portions of the configuration are passed through &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, use of this function may open its users to a security risk. While the function only binds to a socket on &lt;code&gt;localhost&lt;/code&gt;, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;. Specifically, if the process calling &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; runs on a multi-user machine where users cannot trust each other, then a malicious user could arrange to run essentially arbitrary code in a victim user&amp;rsquo;s process, simply by connecting to the victim&amp;rsquo;s &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; socket and sending a configuration which runs whatever code the attacker wants to have executed in the victim&amp;rsquo;s process. This is especially easy to do if the default port is used, but not hard even if a different port is used). To avoid the risk of this happening, use the &lt;code&gt;verify&lt;/code&gt; argument to &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to prevent unrecognised configurations from being applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5624fe7445294e1d731602dabe55a2ad5baa3be9" translate="yes" xml:space="preserve">
          <source>Because pseudo-terminal handling is highly platform dependent, there is code to do it only for Linux. (The Linux code is supposed to work on other platforms, but hasn&amp;rsquo;t been tested yet.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26513ebec365d3c671c97db0de645fa9c2e3b1f" translate="yes" xml:space="preserve">
          <source>Because strings cannot represent binary data, the &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; class must convert any binary data in any message it flattens to an ASCII compatible format, by converting them to an ASCII compatible &lt;em&gt;Content-Transfer_Encoding&lt;/em&gt;. Using the terminology of the email RFCs, you can think of this as &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; serializing to an I/O stream that is not &amp;ldquo;8 bit clean&amp;rdquo;. In other words, most applications will want to be using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt;, and not &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89da8e115c0fb8ba5661a24d5093eacb1e6421a5" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;#module-shelve&quot;&gt;&lt;code&gt;shelve&lt;/code&gt;&lt;/a&gt; module is backed by &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt;, it is insecure to load a shelf from an untrusted source. Like with pickle, loading a shelf can execute arbitrary code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d13ce7f4ddc06362be70a3eb8a64c34f10a0b7" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;os.DirEntry&lt;/code&gt; methods can make operating system calls, they may also raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. If you need very fine-grained control over errors, you can catch &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; when calling one of the &lt;code&gt;os.DirEntry&lt;/code&gt; methods and handle as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cc4736c7fbeafded92a9d1efa62626a33de504" translate="yes" xml:space="preserve">
          <source>Because the default behavior of &lt;code&gt;Message.__setitem__&lt;/code&gt; is to append the value to the list of headers, it is easy to create duplicate headers without realizing it. This method allows certain headers to be limited in the number of instances of that header that may be added to a &lt;code&gt;Message&lt;/code&gt; programmatically. (The limit is not observed by the parser, which will faithfully produce as many headers as exist in the message being parsed.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e508e7ca842cae56ee0fee2a7255d491cd76f437" translate="yes" xml:space="preserve">
          <source>Because the file name does not end with &lt;code&gt;.py&lt;/code&gt;, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; infers that it must be run with &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdfdaaeb849970dad8f9e9818061fb878cb7999" translate="yes" xml:space="preserve">
          <source>Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, &amp;ldquo;month/day/year&amp;rdquo; versus &amp;ldquo;day/month/year&amp;rdquo;), and the output may contain Unicode characters encoded using the locale&amp;rsquo;s default encoding (for example, if the current locale is &lt;code&gt;ja_JP&lt;/code&gt;, the default encoding could be any one of &lt;code&gt;eucJP&lt;/code&gt;, &lt;code&gt;SJIS&lt;/code&gt;, or &lt;code&gt;utf-8&lt;/code&gt;; use &lt;a href=&quot;locale#locale.getlocale&quot;&gt;&lt;code&gt;locale.getlocale()&lt;/code&gt;&lt;/a&gt; to determine the current locale&amp;rsquo;s encoding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cc5a3ec7f1feac3debf6aac3103f1d83152c83" translate="yes" xml:space="preserve">
          <source>Because the module uses &lt;strong&gt;/bin/sh&lt;/strong&gt; command lines, a POSIX or compatible shell for &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt; is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1f9af0dfdfed0a5be1b6b9e51ad5d7c030fac2" translate="yes" xml:space="preserve">
          <source>Because the pattern is passed into &lt;code&gt;load_tests&lt;/code&gt; the package is free to continue (and potentially modify) test discovery. A &amp;lsquo;do nothing&amp;rsquo; &lt;code&gt;load_tests&lt;/code&gt; function for a test package would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7eeaba1ce3974d485fc10bfd66f07a672724c5b" translate="yes" xml:space="preserve">
          <source>Because the traps are disabled, this context is useful for applications that prefer to have result value of &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Infinity&lt;/code&gt; instead of raising exceptions. This allows an application to complete a run in the presence of conditions that would otherwise halt the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f8021b79e3f19e12b4eea6f7791f976cf9c551" translate="yes" xml:space="preserve">
          <source>Because this function has rather complex behavior (especially when custom event loop policies are in use), using the &lt;a href=&quot;#asyncio.get_running_loop&quot;&gt;&lt;code&gt;get_running_loop()&lt;/code&gt;&lt;/a&gt; function is preferred to &lt;a href=&quot;#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; in coroutines and callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945f996940a3d1a131b75aea9889abba3eb63002" translate="yes" xml:space="preserve">
          <source>Because this is a naive &lt;code&gt;datetime&lt;/code&gt; it will be interpreted as a UTC timestamp, and the resulting value will have a timezone of &lt;code&gt;-0000&lt;/code&gt;. Much more useful is to use the &lt;a href=&quot;email.utils#email.utils.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; function from the &lt;a href=&quot;email.utils#module-email.utils&quot;&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa017ba24b44b99db1534c67404110bcb6547224" translate="yes" xml:space="preserve">
          <source>Beep the PC&amp;rsquo;s speaker. The &lt;em&gt;frequency&lt;/em&gt; parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The &lt;em&gt;duration&lt;/em&gt; parameter specifies the number of milliseconds the sound should last. If the system is not able to beep the speaker, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9decded3226de91a3370052bd429264360dba835" translate="yes" xml:space="preserve">
          <source>Before I explain how auto-speccing works, here&amp;rsquo;s why it is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648ed538fe4d41e0992f761cec23ce4dc2546702" translate="yes" xml:space="preserve">
          <source>Before Python 3.6, when printing a dict, Python did not guarantee that the key-value pairs was printed in any particular order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d337986d57f221ecbc2aaa26bd0ab430008b76" translate="yes" xml:space="preserve">
          <source>Before the end of the stream is reached, this will be &lt;code&gt;b&quot;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c0f47c1261299c0864a67fc685c6a3005db48e" translate="yes" xml:space="preserve">
          <source>Before we move on calling functions with other parameter types, we have to learn more about &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483be28c0eaadf9f1aa628c534f11b5e079a5451" translate="yes" xml:space="preserve">
          <source>Before you can write to or read from an audio device, you must call three methods in the correct order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68a6e6a64dac6bce2f425b8bf2ec3d1606a381e" translate="yes" xml:space="preserve">
          <source>Beg (beginning)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f9d4d10702ae8642d1d7383cb9d28d940dec80" translate="yes" xml:space="preserve">
          <source>Begin autoincrement mode: schedules a recurring timer event that calls &lt;a href=&quot;#tkinter.ttk.Progressbar.step&quot;&gt;&lt;code&gt;Progressbar.step()&lt;/code&gt;&lt;/a&gt; every &lt;em&gt;interval&lt;/em&gt; milliseconds. If omitted, &lt;em&gt;interval&lt;/em&gt; defaults to 50 milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa1a5c3ae45577ab117ab821ac5874e521c6ac6" translate="yes" xml:space="preserve">
          <source>Begin by writing &lt;code&gt;import cgi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21290f4ef30d771e174960f4bd7877417e7b443" translate="yes" xml:space="preserve">
          <source>Begin the scope of a prefix-URI Namespace mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df80a1098d80f4a77aa0c5fa9359c3f1b5d396a4" translate="yes" xml:space="preserve">
          <source>Behavior is the same as in &lt;a href=&quot;threading#threading.Lock.release&quot;&gt;&lt;code&gt;threading.Lock.release()&lt;/code&gt;&lt;/a&gt; except that when invoked on an unlocked lock, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8a60766ac333f80dc11610250a1865830afb33" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the &lt;a href=&quot;#ctypes.pointer&quot;&gt;&lt;code&gt;pointer()&lt;/code&gt;&lt;/a&gt; function does more than simply create pointer instances, it has to create pointer &lt;em&gt;types&lt;/em&gt; first. This is done with the &lt;a href=&quot;#ctypes.POINTER&quot;&gt;&lt;code&gt;POINTER()&lt;/code&gt;&lt;/a&gt; function, which accepts any &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, and returns a new type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca285402106aa0f0f7b601a2f8df4f157534b63" translate="yes" xml:space="preserve">
          <source>Being able to tell if a line of input completes a Python statement: in short, telling whether to print &amp;lsquo;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&amp;rsquo; or &amp;lsquo;&lt;code&gt;...&lt;/code&gt;&amp;rsquo; next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4198662a72fd519a4f968a74051bafac710dc07" translate="yes" xml:space="preserve">
          <source>Bell</source>
          <target state="translated">Bell</target>
        </trans-unit>
        <trans-unit id="f8c124cc977ebefe3c2c86720bb514be851e243e" translate="yes" xml:space="preserve">
          <source>Below are some examples of typical usage of the &lt;a href=&quot;#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d357b659dbe283278a24199979dd7871083127a" translate="yes" xml:space="preserve">
          <source>Below is a table mapping various &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; functions to their corresponding &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab4a051ee0b5f6099448f93c169d9e07992b08e7" translate="yes" xml:space="preserve">
          <source>Below is an example session with logging turned on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1129a8f113198207df5b47176143371497861ab" translate="yes" xml:space="preserve">
          <source>Below is an example where a number of ctypes objects are modified by a child process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e802043d7d026781c9db6d85cb3061d11ca8b23" translate="yes" xml:space="preserve">
          <source>Besides the methods described below, the &lt;code&gt;ttk.Widget&lt;/code&gt; supports the methods &lt;code&gt;tkinter.Widget.cget()&lt;/code&gt; and &lt;code&gt;tkinter.Widget.configure()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1367870fdc44f776287e47700c866b325754e2" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.selection()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Combobox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f831523d7c6cadde7e0cb39c81a22ba24bb9ec" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Spinbox&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3ff9eb01f9273b0084e00951f1623a111bedef" translate="yes" xml:space="preserve">
          <source>Besides, only the main thread is allowed to set a new signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8d3be729847deb19b6a44bdd74975d6befe47c" translate="yes" xml:space="preserve">
          <source>Besides, the &lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; method does not have a default implementation that defers to &lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83a3ab69e9fd0abbfb55d96374f52bcbc103b5f" translate="yes" xml:space="preserve">
          <source>Best defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e1caaf3a558a5215965e11aae5b2c42a62435b" translate="yes" xml:space="preserve">
          <source>Best practice is to omit the traceback stack, unless it adds significant documentation value to the example. So the last example is probably better as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8df3d1388d60aad85d2be198e574d70525685d" translate="yes" xml:space="preserve">
          <source>Beta distribution. Conditions on the parameters are &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; and &lt;code&gt;beta &amp;gt; 0&lt;/code&gt;. Returned values range between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ba6dd6cc0d2b6353ea52b89942547287c30fad" translate="yes" xml:space="preserve">
          <source>Better to inherit than pickle/unpickle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1dda353e343c24e7708a72b54529d23347826a" translate="yes" xml:space="preserve">
          <source>Between -999999999 and 999999999 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c74a472b928b3de7f142f2f611644179e766ce" translate="yes" xml:space="preserve">
          <source>Between 0 and 86399 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954ca93f131384b9558ca914d678c167bd92e718" translate="yes" xml:space="preserve">
          <source>Between 0 and 999999 inclusive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2cf7c590b6e7f609a00c26affc3a6e2749ead7" translate="yes" xml:space="preserve">
          <source>Between 1 and 12 inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08bfcd2e1cae8c1d62e31e45c7e3c998b88e587e" translate="yes" xml:space="preserve">
          <source>Between 1 and the number of days in the given month of the given year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74437956ab6159c55badf4bbc91e7ad2175fad4e" translate="yes" xml:space="preserve">
          <source>Between &lt;a href=&quot;#datetime.MINYEAR&quot;&gt;&lt;code&gt;MINYEAR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.MAXYEAR&quot;&gt;&lt;code&gt;MAXYEAR&lt;/code&gt;&lt;/a&gt; inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c36aee3637e0b2b5bfaa0e70a4ebeb4eee3c90f" translate="yes" xml:space="preserve">
          <source>Between the sending side and the receiving side, the communications system is free to implement its own transfer mechanism for out-of-band buffers. Potential optimizations include the use of shared memory or datatype-dependent compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3aa2f92c76e508acf2bfaca08ad2ba1baa2d87" translate="yes" xml:space="preserve">
          <source>Beware of replacing &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin&lt;/code&gt;&lt;/a&gt; with a &amp;ldquo;file like object&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a0688daec7baa0367d0ff67569d3d33eb4a71a" translate="yes" xml:space="preserve">
          <source>Beyond &lt;code&gt;sys.argv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892bf0fc9ced21536073b10f72d8a317557e88d9" translate="yes" xml:space="preserve">
          <source>Binary Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74dc05f939b4de6df10ded1ad85cd87cf64bc9f7" translate="yes" xml:space="preserve">
          <source>Binary Data Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077a15b13db556c78b4bfbf28994d6f478f129e0" translate="yes" xml:space="preserve">
          <source>Binary I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9ab2e214f4e3d68626fcb0f6f6f4976f56998f" translate="yes" xml:space="preserve">
          <source>Binary I/O (also called &lt;em&gt;buffered I/O&lt;/em&gt;) expects &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; and produces &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects. No encoding, decoding, or newline translation is performed. This category of streams can be used for all kinds of non-text data, and also when manual control over the handling of text data is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d18c326fb8b019f2ba7dcc08e612917c6ba14d2" translate="yes" xml:space="preserve">
          <source>Binary Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf3342675aa01229892e963ccc770d42fd0df53" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;memoryview&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5926a354af36f8d3a781a27eef2ef8a43ed8d3ed" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; bytes, bytearray, memoryview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3926624312f99b7ac129db6c0c454a3ff48903bd" translate="yes" xml:space="preserve">
          <source>Binary Transforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fe5e3cd9c91723a039c52415394d9d03534dd3" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) are not reentrant. While reentrant calls will not happen in normal situations, they can arise from doing I/O in a &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; handler. If a thread tries to re-enter a buffered object which it is already accessing, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised. Note this doesn&amp;rsquo;t prohibit a different thread from entering the buffered object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4406f8baf70aa1a1308d895faa78af8d9e41d899" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) protect their internal structures using a lock; it is therefore safe to call them from multiple threads at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f7f2783ce89c5bb6d5fe79cd3bd1c11179b462" translate="yes" xml:space="preserve">
          <source>Binary data in any form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b418b66c57a5a2313398824ab306a08b3b9421cc" translate="yes" xml:space="preserve">
          <source>Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device&amp;rsquo;s &amp;ldquo;block size&amp;rdquo; and falling back on &lt;a href=&quot;io#io.DEFAULT_BUFFER_SIZE&quot;&gt;&lt;code&gt;io.DEFAULT_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt;. On many systems, the buffer will typically be 4096 or 8192 bytes long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b48357f7d4a42846626a5244d044b564edfcf86" translate="yes" xml:space="preserve">
          <source>Binary format. Outputs the number in base 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f1ab06b67bdfb6757c6103375f928cf440f008" translate="yes" xml:space="preserve">
          <source>Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack. They perform the operation, and put the result back on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343454e4d9b2acf169be0d953fb0fb79d39cb3cc" translate="yes" xml:space="preserve">
          <source>Binary operations that mix &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; instances with &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; return the type of the first operand. For example: &lt;code&gt;frozenset('ab') |
set('bc')&lt;/code&gt; returns an instance of &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1606bce466a3fb6e4e13c59af6b1a64d90c92104" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c360811010b1ba8b6a9cf0d69579acc60a3e6bac" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-release event of key. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88250fa997071f51f9a8c6f6b2b0aff6f79ab7aa" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-button-release events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8981cb59d50b3e142bec1ed6694170c1d04c3e93" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this screen. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae217269ecbcd53a0c67a6d42f2541196eef9ba" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c696385e54300e88da723431117d0a4a8e9d3c" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-move events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afe0450ccf1ed51bd4d76038ec0971fe964de5c" translate="yes" xml:space="preserve">
          <source>Bind a callback for the given event &lt;em&gt;sequence&lt;/em&gt; to the tag &lt;em&gt;tagname&lt;/em&gt;. When an event is delivered to an item, the callbacks for each of the item&amp;rsquo;s tags option are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a0e995f722ce9bd473d6c69d16b2dc42dd47fe" translate="yes" xml:space="preserve">
          <source>Bind a unix socket, raising &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;exceptions#PermissionError&quot;&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec9eed3827520279516114577184ceeb4151b81" translate="yes" xml:space="preserve">
          <source>Bind bye() method to mouse clicks on the Screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbdacada9d39467e2d8f8e1aba79f1562fdc7db" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt; to the argument names of the Python function or method &lt;em&gt;func&lt;/em&gt;, as if it was called with them. For bound methods, bind also the first argument (typically named &lt;code&gt;self&lt;/code&gt;) to the associated instance. A dict is returned, mapping the argument names (including the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments, if any) to their values from &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt;. In case of invoking &lt;em&gt;func&lt;/em&gt; incorrectly, i.e. whenever &lt;code&gt;func(*args, **kwds)&lt;/code&gt; would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466b061fcff1561dff2e7055a677ac36776d8605" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to &lt;em&gt;codeset&lt;/em&gt;, changing the encoding of byte strings returned by the &lt;a href=&quot;#gettext.lgettext&quot;&gt;&lt;code&gt;lgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.ldgettext&quot;&gt;&lt;code&gt;ldgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.lngettext&quot;&gt;&lt;code&gt;lngettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.ldngettext&quot;&gt;&lt;code&gt;ldngettext()&lt;/code&gt;&lt;/a&gt; functions. If &lt;em&gt;codeset&lt;/em&gt; is omitted, then the current binding is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971f75ed3a8b9b21ee56302a74bf55b47cdbf22e" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to the locale directory &lt;em&gt;localedir&lt;/em&gt;. More concretely, &lt;a href=&quot;#module-gettext&quot;&gt;&lt;code&gt;gettext&lt;/code&gt;&lt;/a&gt; will look for binary &lt;code&gt;.mo&lt;/code&gt; files for the given domain using the path (on Unix): &lt;code&gt;&lt;em&gt;localedir&lt;/em&gt;/&lt;em&gt;language&lt;/em&gt;/LC_MESSAGES/&lt;em&gt;domain&lt;/em&gt;.mo&lt;/code&gt;, where &lt;em&gt;language&lt;/em&gt; is searched for in the environment variables &lt;code id=&quot;index-0&quot;&gt;LANGUAGE&lt;/code&gt;, &lt;code id=&quot;index-1&quot;&gt;LC_ALL&lt;/code&gt;, &lt;code id=&quot;index-2&quot;&gt;LC_MESSAGES&lt;/code&gt;, and &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef7c31f3723921d8fdf4d1ae7e78f574951d17b" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; refer to the &lt;a href=&quot;socket#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; documentation for more information.) To mark the socket as re-usable (setting the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; option), call the &lt;a href=&quot;#asyncore.dispatcher&quot;&gt;&lt;code&gt;dispatcher&lt;/code&gt;&lt;/a&gt; object&amp;rsquo;s &lt;code&gt;set_reuse_addr()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f4492e920673119f99caa126daf7111e8679ef" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; see above.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de75e0400dc3db591ad5734f114577fa0875a522" translate="yes" xml:space="preserve">
          <source>Bind the socket to a free port and return the port number. Relies on ephemeral ports in order to ensure we are using an unbound port. This is important as many tests may be running simultaneously, especially in a buildbot environment. This method raises an exception if the &lt;code&gt;sock.family&lt;/code&gt; is &lt;a href=&quot;socket#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;sock.type&lt;/code&gt; is &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;, and the socket has &lt;code&gt;SO_REUSEADDR&lt;/code&gt; or &lt;code&gt;SO_REUSEPORT&lt;/code&gt; set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd8b3b29ad1340858fecc05585a82b44392fdd8" translate="yes" xml:space="preserve">
          <source>Bindings and Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86116810e0f75c5cdd1a62f7f2104592005bc20" translate="yes" xml:space="preserve">
          <source>Bit fields in structures and unions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320415496f3946f94011e0ced3cddcdc515c3da5" translate="yes" xml:space="preserve">
          <source>Bit-mask</source>
          <target state="translated">Bit-mask</target>
        </trans-unit>
        <trans-unit id="10b264ac40d76c9c94d3cc50bd7202a39865e32f" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract a character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5b215b81a34d81da07b12a57a05ded49214f16" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2061b16edd78d2e593621fabec13afb636e32ce9" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract color-pair field information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55bcce66fdecceeb947a789cd32be9b93c7eca65" translate="yes" xml:space="preserve">
          <source>Bitwise And</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fef320a5b6e9f946d0c0be2f1804caae7326297" translate="yes" xml:space="preserve">
          <source>Bitwise Exclusive Or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92108ddfd25fd3b1ca3cfcbb1ac3acde1d93a1d2" translate="yes" xml:space="preserve">
          <source>Bitwise Inversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d024785d8011a85a2c45a248d86ff4be52b077" translate="yes" xml:space="preserve">
          <source>Bitwise Operations on Integer Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0861023775ab83f9aeb2c2b3492420398fae85" translate="yes" xml:space="preserve">
          <source>Bitwise Or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e17feeadb67d1865e9a3b140b95f9721af9f8fa" translate="yes" xml:space="preserve">
          <source>Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two&amp;rsquo;s complement with an infinite number of sign bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b406fb57b29fc76f71864fbb37f0238045f84d9d" translate="yes" xml:space="preserve">
          <source>Black</source>
          <target state="translated">Black</target>
        </trans-unit>
        <trans-unit id="480135dda7d845bc82b347dfaa91bf347ee099af" translate="yes" xml:space="preserve">
          <source>Blink mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfbe395b6ff593ced03bac36c099d59799a6252c" translate="yes" xml:space="preserve">
          <source>Block device required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f4277d9e2e9642b7c7082b91e613d62eab845f" translate="yes" xml:space="preserve">
          <source>Block device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb009addf624a9cc048897e81f81ead20e469bf" translate="yes" xml:space="preserve">
          <source>Block for &lt;em&gt;delay&lt;/em&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb197cebcc8478cf7165d9dc1e9b4feeed49cd6" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been gotten and processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c76bb4026cbe07b72909b50d70c6d76ce00a1bf" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been received and processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4270873346fe4ac8413b26a31ec9f3e286371ccc" translate="yes" xml:space="preserve">
          <source>Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; to set the flag to true, or until the optional timeout occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2058396a2147f5165863444e9ce5b13713a8108" translate="yes" xml:space="preserve">
          <source>Blocking (CPU-bound) code should not be called directly. For example, if a function performs a CPU-intensive calculation for 1 second, all concurrent asyncio Tasks and IO operations would be delayed by 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323ffdcd95156ec320100a2972820824ccb6d91f" translate="yes" xml:space="preserve">
          <source>BlockingIOError</source>
          <target state="translated">BlockingIOError</target>
        </trans-unit>
        <trans-unit id="92a08db9399061aa0f5eacfe511b7a6126dc9df0" translate="yes" xml:space="preserve">
          <source>BlockingIOError.characters_written</source>
          <target state="translated">BlockingIOError.characters_written</target>
        </trans-unit>
        <trans-unit id="dddf0e18cab12f3c2b4594834412adc72d47d3d6" translate="yes" xml:space="preserve">
          <source>Blocks until all items in the queue have been gotten and processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d44bc449c2a26374800a503f10f3d8949505f40" translate="yes" xml:space="preserve">
          <source>Blue</source>
          <target state="translated">Blue</target>
        </trans-unit>
        <trans-unit id="15913dcb3fc24a61ba6adcc4afcd21df3d2a5af6" translate="yes" xml:space="preserve">
          <source>Body-encode the string &lt;em&gt;string&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6718f0f90ac337fe59d6d08c1ec08dbb38b7cc92" translate="yes" xml:space="preserve">
          <source>Bold mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beddf259d4873df4879b851076af94752cb94065" translate="yes" xml:space="preserve">
          <source>Book by John Grayson (ISBN 1-884777-81-3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5deb34b87b8d065639971c2d9e0fede0fcbaa391" translate="yes" xml:space="preserve">
          <source>Book by John Ousterhout, the inventor of Tcl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba993e6c506a168367bd3edaf5e342b70b7db99" translate="yes" xml:space="preserve">
          <source>Book by Mark Lutz, has excellent coverage of Tkinter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b03cb2dbfc1444695bab06adfaeb141fdc235f" translate="yes" xml:space="preserve">
          <source>Book by Mark Roseman about building attractive and modern graphical user interfaces with Python and Tkinter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786bfd749778b9b25aa01178659c90f4e19011ff" translate="yes" xml:space="preserve">
          <source>Bookkeeping functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a8b062c380ba221961a2f8e03c873f4208921d" translate="yes" xml:space="preserve">
          <source>Boolean Operations &amp;mdash; &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e36e8bd93b3ea3b4b742ce8bb2a6ec3b2ab721" translate="yes" xml:space="preserve">
          <source>Boolean Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88306a31305db52140bbd33e277c2a177ea102f3" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether or not the module&amp;rsquo;s &amp;ldquo;origin&amp;rdquo; attribute refers to a loadable location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524796582178b3ce40400d6b1bce1725e41cb620" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the device has been closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae5f84c90d6d770c192b8c5eb2f83cd02192067" translate="yes" xml:space="preserve">
          <source>Boolean that should be set before &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt;&lt;code&gt;handle_one_request()&lt;/code&gt;&lt;/a&gt; returns, indicating if another request may be expected, or if the connection should be shut down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33269d07fca93166bdf65e0bd7b3092befe1aa4a" translate="yes" xml:space="preserve">
          <source>Boolean value of &lt;code&gt;Enum&lt;/code&gt; classes and members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb62ebe2f6b3f6e458c9478ab40f08a930df3242" translate="yes" xml:space="preserve">
          <source>Boolean value that is normally &lt;code&gt;False&lt;/code&gt;, but is set to &lt;code&gt;True&lt;/code&gt; if an &lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt; command is successfully issued for the &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; capability.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
