<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="es" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="c458f78f5f9ccfcdd573e3a12d249a3c5181314b" translate="yes" xml:space="preserve">
          <source>The HTML establishes the drop zone itself, which is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element with the ID &lt;code&gt;&quot;dropzone&quot;&lt;/code&gt;, and an unordered list element with the ID &lt;code&gt;&quot;listing&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504c13ce5e15f6dfb901aa39980bd97e446ad539" translate="yes" xml:space="preserve">
          <source>The HTML establishes the element itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79e2b3e3367a41ea074ff9ef864788b7b78328d" translate="yes" xml:space="preserve">
          <source>The HTML for our client needs a location for video to be presented. This requires video elements, and a button to hang up the call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840393e305a2f4a512917f004228a1443de40dfe" translate="yes" xml:space="preserve">
          <source>The HTML for the two boxes are shown here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d2aea18202e00c4ca1aa69ad7b6c627ad73ee6" translate="yes" xml:space="preserve">
          <source>The HTML for this example is very basic; there are only three elements of importance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61028981dc738f77c7912645e527c9998936e97" translate="yes" xml:space="preserve">
          <source>The HTML for this example is very short, with a primary element which is the box that we'll be targeting (with the creative ID &lt;code&gt;&quot;box&quot;&lt;/code&gt;) and some contents within the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13829b35806e364184bbf747e616a9e4e457358" translate="yes" xml:space="preserve">
          <source>The HTML is extremely simple and has just two elements: an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; that contains the document we're going to scroll, and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; into which we'll output the value of &lt;code&gt;pageYOffset&lt;/code&gt; when we've finished the scroll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03b7fd950e7c2d813372f12100bfb5f851c85d2" translate="yes" xml:space="preserve">
          <source>The HTML is extremely simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4bba7421f6818fac2a1812d89d9399d328718b" translate="yes" xml:space="preserve">
          <source>The HTML is pretty simple in this app, so we won't go through it here; there are a couple of slightly more interesting bits of CSS worth mentioning, however, so we'll discuss them below. If you are not interested in CSS and want to get straight to the JavaScript, skip to the &lt;a href=&quot;#Basic_app_setup&quot;&gt;Basic app setup&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dac3c875d7989f7728903897ad19bf9e0a5bb9" translate="yes" xml:space="preserve">
          <source>The HTML is pretty simple. We have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; named &lt;code&gt;&quot;main&quot;&lt;/code&gt; which is a container for the element we'll be animating, which is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the ID &lt;code&gt;&quot;box&quot;&lt;/code&gt;. Below that, another &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; serves as a button that will trigger the animation to begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c0b86b7266d39f5e394adc5fd1a08f619fcd00" translate="yes" xml:space="preserve">
          <source>The HTML is quite simple for our example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a854078ff39a0db38cfec095b691f4122af622a" translate="yes" xml:space="preserve">
          <source>The HTML is simple; the box we'll be watching for mouse events on is given the class &lt;code&gt;&quot;box&quot;&lt;/code&gt;. It has two &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements, one with the ID &lt;code&gt;&quot;x&quot;&lt;/code&gt; and one with the ID &lt;code&gt;&quot;y&quot;&lt;/code&gt;. Those will be updated each time an event occurs to contain the latest mouse coordinates relative to the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92eb88990b423c905c0338033d40153938548784" translate="yes" xml:space="preserve">
          <source>The HTML markup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9205617c43c06d323da30f69ab62a1af744e35d7" translate="yes" xml:space="preserve">
          <source>The HTML provides the paragraph whose color will be affected, as well as two buttons: one to change the color to blue and another to change the color to red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cf487bab0818c30682fbdf2be103d8c7f98e66" translate="yes" xml:space="preserve">
          <source>The HTML snippet below actually handles displaying the media itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c840d98d8f76b78289ca9084529babcd58ffb84" translate="yes" xml:space="preserve">
          <source>The HTML specification states that authors should use the &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;Event.preventDefault()&lt;/code&gt;&lt;/a&gt; method instead of using &lt;a href=&quot;../event/returnvalue&quot;&gt;&lt;code&gt;Event.returnValue&lt;/code&gt;&lt;/a&gt; to prompt the user. However, this is not yet supported by all browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c47bc114a0aa1b4c9e6344f5735daf7a4cf455f" translate="yes" xml:space="preserve">
          <source>The HTML specification states that calls to &lt;a href=&quot;../window/alert&quot;&gt;&lt;code&gt;window.alert()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../window/confirm&quot;&gt;&lt;code&gt;window.confirm()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../window/prompt&quot;&gt;&lt;code&gt;window.prompt()&lt;/code&gt;&lt;/a&gt; methods may be ignored during this event. See the &lt;a href=&quot;http://www.w3.org/TR/html5/webappapis.html#user-prompts&quot;&gt;HTML specification&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f1214b00f3f1d1aad8699b868255d9f20faa44" translate="yes" xml:space="preserve">
          <source>The HTML that creates the selection box and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option&quot;&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;&lt;/a&gt; elements representing each of the food choices looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec0dc835bc7cba54ee79a83255df01ef1f43d6a" translate="yes" xml:space="preserve">
          <source>The HTML that presents the interface looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a53f5a7c41699cb558d6e2deb08a38adb5a54ef" translate="yes" xml:space="preserve">
          <source>The HTML used to present the results looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d0a72e1c844bfd3f45949c4757c4353f74fff8" translate="yes" xml:space="preserve">
          <source>The HTMLHyperlinkElementUtils&lt;code&gt;.password&lt;/code&gt; property is a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; containing the password specified before the domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80379adcc1aeefcdbdf0a12981d0ccef641cdb7e" translate="yes" xml:space="preserve">
          <source>The HTMLHyperlinkElementUtils&lt;code&gt;.port&lt;/code&gt; property is a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854d63cb9a8fe9b57cd1adf20c3669ebbec3988d" translate="yes" xml:space="preserve">
          <source>The HTTPOnly cookie attribute can help to mitigate this attack by preventing access to cookie value through Javascript. Read more about &lt;a href=&quot;http://www.nczonline.net/blog/2009/05/12/cookies-and-security/&quot;&gt;Cookies and Security&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85249b96e9cdb6a13031b314bec94c2ded6967d" translate="yes" xml:space="preserve">
          <source>The IANA document providing registries of permitted values for the RTP parameters used by this dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b175817a98b9d321856825c61e875bd3313890" translate="yes" xml:space="preserve">
          <source>The ICE &lt;code&gt;candidate-attribute&lt;/code&gt;. If the candidate is an indicator that there are no further candidates (rather than representing a new candidate), this is the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;). The default is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa0ab6486a5b97173d25c774c79c0c3b3121edf" translate="yes" xml:space="preserve">
          <source>The ICE agent for this &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; has shut down and is no longer handling requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d95bf9c1530e62960bd74ef02b86abcba5abc9" translate="yes" xml:space="preserve">
          <source>The ICE agent for this &lt;a href=&quot;rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; has shut down and is no longer handling requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed358c39daa73fccdd48353280bec5eb30c99bbd" translate="yes" xml:space="preserve">
          <source>The ICE agent has been given one or more remote candidates and is checking pairs of local and remote candidates against one another to try to find a compatible match, but has not yet found a pair which will allow the peer connection to be made. It's possible that gathering of candidates is also still underway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ed7fd0b4c29c7cfd8b549438f3d54477076ec2" translate="yes" xml:space="preserve">
          <source>The ICE agent has determined that connectivity has been lost for this &lt;a href=&quot;../rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt;. This is not a failure state (that's &lt;code&gt;&quot;failed&quot;&lt;/code&gt;). A value of &lt;code&gt;&quot;disconnected&quot;&lt;/code&gt; means that a transient issue has occurred that has broken the connection, but that should resolve itself automatically without your code having to take any action. See &lt;a href=&quot;#The_disconnected_state&quot;&gt;The disconnected state&lt;/a&gt; for additional details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f50c0a5ce2ae774f20445b1f8122bfcfcad465" translate="yes" xml:space="preserve">
          <source>The ICE agent has determined that connectivity has been lost for this &lt;a href=&quot;rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt;. This is not a failure state (that's &lt;code&gt;&quot;failed&quot;&lt;/code&gt;). A value of &lt;code&gt;&quot;disconnected&quot;&lt;/code&gt; means that a transient issue has occurred that has broken the connection, but that should resolve itself automatically without your code having to take any action. See &lt;a href=&quot;#The_disconnected_state&quot;&gt;The disconnected state&lt;/a&gt; for additional details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006d69639b312dd5665353e99effffe5c2114b70" translate="yes" xml:space="preserve">
          <source>The ICE agent has finished gathering candidates, has checked all pairs against one another, and has found a connection for all components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a65c62cc71d7e507e5daa5aa93903a2d992310e" translate="yes" xml:space="preserve">
          <source>The ICE agent has finished gathering candidates. If something happens that requires collecting new candidates, such as a new interface being added or the addition of a new ICE server, the state will revert to &quot;gathering&quot; to gather those candidates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20823a4606978f4fc9e70bd8eea8b80c5c98d10" translate="yes" xml:space="preserve">
          <source>The ICE agent is gathering addresses or is waiting to be given remote candidates through calls to &lt;a href=&quot;addicecandidate&quot;&gt;&lt;code&gt;RTCPeerConnection.addIceCandidate()&lt;/code&gt;&lt;/a&gt; (or both).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7437c8961c71dbc5352222106137b15651b87c" translate="yes" xml:space="preserve">
          <source>The ICE agent is gathering addresses or is waiting to be given remote candidates through calls to &lt;a href=&quot;rtcpeerconnection/addicecandidate&quot;&gt;&lt;code&gt;RTCPeerConnection.addIceCandidate()&lt;/code&gt;&lt;/a&gt; (or both).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36baf14ad6d7db98386d0a2cd558be15500a253" translate="yes" xml:space="preserve">
          <source>The ICE agent is in the process of gathering candidates for the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8400caf3b34d598b3b15fbbe11c8087395479364" translate="yes" xml:space="preserve">
          <source>The ICE agent should gather candidates for each track, using separate transports to negotiate all media tracks for connections which aren't BUNDLE-compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe0b860dd79cc87f425247f29cef513d8d126c4" translate="yes" xml:space="preserve">
          <source>The ICE agent should gather candidates for just one track. If the connection isn't BUNDLE-compatible, then the ICE agent should negotiate just one media track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f54f376991fd9d5202d02118c676de60253d702" translate="yes" xml:space="preserve">
          <source>The ICE candidate has checked all candidates pairs against one another and has failed to find compatible matches for all components of the connection. It is, however, possible that the ICE agent did find compatible connections for some components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56a3d64efa565aa3bae39f36bde145d94e6ee3b" translate="yes" xml:space="preserve">
          <source>The ICE component being used by the transport. The value is one of the strings from the &lt;a href=&quot;rtcicetransport&quot;&gt;&lt;code&gt;RTCIceTransport&lt;/code&gt;&lt;/a&gt; enumerated type: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTP&quot;&gt;&quot;RTP&quot;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&quot;RTSP&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6909f019aa1d6e77bf668b3fa11c2d6336a585e3" translate="yes" xml:space="preserve">
          <source>The ICE layer selects one of the two peers to serve as the &lt;strong&gt;controlling agent&lt;/strong&gt;. This is the ICE agent which will make the final decision as to which candidate pair to use for the connection. The other peer is called the &lt;strong&gt;controlled agent&lt;/strong&gt;. You can identify which one your end of the connection is by examining the value of &lt;a href=&quot;../rtcicetransport/role&quot;&gt;&lt;code&gt;RTCIceCandidate.transport.role&lt;/code&gt;&lt;/a&gt;, although in general it doesn't matter which is which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1a069260a11decbc36aea4fcbac253a525c3ce" translate="yes" xml:space="preserve">
          <source>The ICE layer sends you the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icegatheringstatechange&quot;&gt;icegatheringstatechange&lt;/a&gt;&lt;/code&gt; event, when the ICE agent's process of collecting candidates shifts, from one state to another (such as starting to gather candidates or completing negotiation). See &lt;a href=&quot;#ICE_gathering_state&quot;&gt;ICE gathering state&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7467411e8074e1a34e2735c1667b4d23dd36ebb3" translate="yes" xml:space="preserve">
          <source>The ICE negotiation process involves each peer sending candidates to the other, repeatedly, until it runs out of potential ways it can support the &lt;code&gt;RTCPeerConnection&lt;/code&gt;'s media transport needs. Since ICE doesn't know about your signaling server, your code handles transmission of each candidate in your handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="008cc69b751f2119e5d3383441c3cb1855603a1c" translate="yes" xml:space="preserve">
          <source>The ID for this hit region to reference it for later use in events, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1696ed080cb2186e0b96a921c946da5daee8dcdf" translate="yes" xml:space="preserve">
          <source>The ID number returned by the &lt;a href=&quot;watchposition&quot;&gt;&lt;code&gt;Geolocation.watchPosition()&lt;/code&gt;&lt;/a&gt; method when installing the handler you wish to remove.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad961da9a1e99cfdfe8b27b386f1b61202fb3cc" translate="yes" xml:space="preserve">
          <source>The ID of the element to locate. The ID is case-sensitive string which is unique within the document; only one element may have any given ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908854c26212aa87ec9472cd1af1ff5ea91beb52" translate="yes" xml:space="preserve">
          <source>The ID of the notification (if any) as specified in the constructor's &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34d4fd17d6cdfd073f986cf1cf441779f58f0c2" translate="yes" xml:space="preserve">
          <source>The ID of the parent region for cursor fallback and navigation by accessibility tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6626c97828bb580f7f2d7b444de878a37be009a4" translate="yes" xml:space="preserve">
          <source>The ID value returned by &lt;a href=&quot;requestidlecallback&quot;&gt;&lt;code&gt;window.requestIdleCallback()&lt;/code&gt;&lt;/a&gt; when the callback was established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5d38bd67d400f7d3e24e24a006e0f1fd28d8cf" translate="yes" xml:space="preserve">
          <source>The ID value returned by the call to &lt;a href=&quot;requestanimationframe&quot;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; that requested the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4583665808b7240298ba5613f82df1e754fc561" translate="yes" xml:space="preserve">
          <source>The IDBIndex has been deleted or removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493f19b72d92fdb7893550ae56351bf19923bc13" translate="yes" xml:space="preserve">
          <source>The IDL attribute &lt;code&gt;text&lt;/code&gt; joins and returns the contents of all &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt; nodes&lt;/a&gt; inside the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; element (ignoring other nodes like comments) in tree order. On setting, it acts the same way as the &lt;a href=&quot;node/textcontent&quot;&gt;&lt;code&gt;textContent&lt;/code&gt;&lt;/a&gt; IDL attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63b69215a78ca1a64690966ef7a338206bc699f" translate="yes" xml:space="preserve">
          <source>The IIRFilterNode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10fd74323a3b43941180ad1b473e7cc3af4161a" translate="yes" xml:space="preserve">
          <source>The IndexedDB API is designed to minimize the need for error handling, so you're not likely to see many error events (at least, not once you're used to the API!). In the case of opening a database, however, there are some common conditions that generate error events. The most likely problem is that the user decided not to give your web app permission to create a database. One of the main design goals of IndexedDB is to allow large amounts of data to be stored for offline use. (To learn more about how much storage you can have for each browser, see &lt;a href=&quot;browser_storage_limits_and_eviction_criteria#Storage_limits&quot;&gt;Storage limits&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5166f847f1831a004d2cd645ae7c66df619a7410" translate="yes" xml:space="preserve">
          <source>The InputDeviceCapabilities API addresses this problem by abstracting the capabilities of input devices. For example, let's say we have a web page that implements both a &lt;code&gt;touchstart&lt;/code&gt; and a &lt;code&gt;mousedown&lt;/code&gt; event. We can assume that if the touchstart event is triggered that the user's device has a touch interface. What about when the mousedown event is triggered? It would be useful to know if a &lt;code&gt;touchstart&lt;/code&gt; event were also triggered so that we don't take the same action twice. We can do this by checking the sourceCapabilities property of the &lt;a href=&quot;uievent&quot;&gt;&lt;code&gt;UIEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ba8b5f8832f75a0ddc2fed23336d400efd0817" translate="yes" xml:space="preserve">
          <source>The InputDeviceCapabilities API provides details about the underlying sources of input events. The API attempts to describe how the device behaves rather than what it is. For example, the first version of the API indicates whether a device fires touch events rather than whether it is a touch screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cc61e0301b0a222c10f5029afa0000683d33fa" translate="yes" xml:space="preserve">
          <source>The Internet Explorer team requested an animations API to consolidate and normalize animation functionality across all browsers, and thus efforts began in earnest among Mozilla Firefox and Google Chrome developers to create the one animation spec to rule them all: the Web Animations API. Now we&amp;rsquo;ve got the WAAPI for future animation specifications to piggyback on, allowing them to to remain consistent and play well together. It also provides a point of reference all browsers can adhere to with the currently available specs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bfb93ac7e50b6a16df811278096081b27912ba" translate="yes" xml:space="preserve">
          <source>The Internet is big. Really big. It&amp;rsquo;s so big that years ago, smart people saw how big it was, how fast it was growing, and the &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4%20address%20exhaustion&quot;&gt;limitations&lt;/a&gt; of the 32-bit IP addressing system, and realized that something had to be done, so they started working on designing a new 64-bit addressing system. But they realized that it would take longer to complete the transition than 32-bit addresses would last, so other smart people came up with a way to let multiple computers share the same 32-bit IP address. Network Address Translation (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/NAT&quot;&gt;NAT&lt;/a&gt;) is a standard which supports this address sharing by handling routing of data inbound and outbound to and from devices on a LAN, all of which are sharing a single WAN (global) IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c65f67e89e9a0b0d50170ca0330cc98033d714a" translate="yes" xml:space="preserve">
          <source>The Intersection Observer API allows you to configure a callback that is called whenever one element, called the &lt;strong&gt;target&lt;/strong&gt;, intersects either the device viewport or a specified element; for the purpose of this API, this is called the &lt;strong&gt;root element&lt;/strong&gt; or &lt;strong&gt;root&lt;/strong&gt;. Typically, you'll want to watch for intersection changes with regard to the document's viewport (which is done by specifying &lt;code&gt;null&lt;/code&gt; as the root element ). Whether you're using the viewport or some other element as the root, the API works the same way, executing a callback function you provide whenever the visibility of the target element changes so that it crosses desired amounts of intersection with the root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0275b3f3a0470b219b0495095c2d41674973169e" translate="yes" xml:space="preserve">
          <source>The Intersection Observer API lets code register a callback function that is executed whenever an element they wish to monitor enters or exits another element (or the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;), or when the amount by which the two intersect changes by a requested amount. This way, sites no longer need to do anything on the main thread to watch for this kind of element intersection, and the browser is free to optimize the management of intersections as it sees fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c74c45ebbf5ff1847195b99d91921dd352f98ff" translate="yes" xml:space="preserve">
          <source>The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e94305c1b53cec6e6c7619f6ba67b96006992ef" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that was rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a3c1f209b8355f877d66aa788cf00d95076b11" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; which was rejected, and whose rejection went unhandled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d702aca4e29be8b964baf328574de69b65f57a3" translate="yes" xml:space="preserve">
          <source>The JavaScript code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79bbd1e13920424dac08d9881ca3eaa8320d152" translate="yes" xml:space="preserve">
          <source>The JavaScript code begins by getting into &lt;code&gt;frame&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element that contains our content as well as the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element into which we'll output the result of our scroll position check. It then gets a reference to the element we want to scroll into view calling &lt;a href=&quot;../document/getelementbyid&quot;&gt;&lt;code&gt;getElementById()&lt;/code&gt;&lt;/a&gt; on the frame's &lt;a href=&quot;../htmliframeelement/contentdocument&quot;&gt;&lt;code&gt;HTMLIFrameElement.contentDocument&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4385e35401ca85635c0e310f1815fa13eb1f2520" translate="yes" xml:space="preserve">
          <source>The JavaScript code begins by initializing a number of variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36a0a0f870d17b6a5b4755a02a0b834cc915da7" translate="yes" xml:space="preserve">
          <source>The JavaScript code below creates an event listener so that when the user clicks on a button, the location information is retrieved and displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7565cd2469cd6b89f158e983b6516d91b2a8c4bf" translate="yes" xml:space="preserve">
          <source>The JavaScript code draws the ClientRects for all HTML elements that have css class &quot;withClientRectsOverlay&quot; assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac49d333b9f311660d1f5ec300d103235372899" translate="yes" xml:space="preserve">
          <source>The JavaScript code for this example follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815c1d3d789865da92de914871ad739d423333e6" translate="yes" xml:space="preserve">
          <source>The JavaScript code handles muting the video element's audio tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046b4b3cf173c52acf3d430675bbdc47901244c9" translate="yes" xml:space="preserve">
          <source>The JavaScript code in &lt;code&gt;main.js&lt;/code&gt; consists of three methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae13a50476372a891b0fdc14e1529bd5449ebaa" translate="yes" xml:space="preserve">
          <source>The JavaScript code in the attribute is passed the Event object via the &lt;code&gt;event&lt;/code&gt; parameter. &lt;a href=&quot;http://dev.w3.org/html5/spec/webappapis.html#the-event-handler-processing-algorithm&quot;&gt;The return value is treated in a special way, described in the HTML specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f519d1e7d9235aa7ac83b50650f826ff55b9516" translate="yes" xml:space="preserve">
          <source>The JavaScript code is imported from a script named &lt;code&gt;main.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373cfd0c2cbc648a7a4f7c056f726d3183f5c56f" translate="yes" xml:space="preserve">
          <source>The JavaScript code that establishes the event handler for the button, as well as the event handler itself, looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4849799366f16a746d26cd6b46f4c923704db7b" translate="yes" xml:space="preserve">
          <source>The JavaScript code uses &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;addEventListener()&lt;/code&gt;&lt;/a&gt; to register the function &lt;code&gt;updateDisplay()&lt;/code&gt; as the event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mousemove&quot;&gt;mousemove&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mouseenter&quot;&gt;mouseenter&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mouseleave&quot;&gt;mouseleave&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd64874d13bb1f75840b32df81ad8345a87cc39" translate="yes" xml:space="preserve">
          <source>The JavaScript implementation of the &lt;code&gt;makeDocument()&lt;/code&gt; method follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce0bdbb6e70f23ab1d8f4d3f47aabae112fa722" translate="yes" xml:space="preserve">
          <source>The JavaScript looks like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126a99f3b17570caa61d3c3c1a29f161d904ddea" translate="yes" xml:space="preserve">
          <source>The Javascript code below defines several functions that make it easier to deal with whitespace in the DOM:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d3b57b0c7870b4634339ee61dfb601b814250f" translate="yes" xml:space="preserve">
          <source>The KeyboardLayoutMap that &lt;code&gt;forEach()&lt;/code&gt; is being called on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f7a348c7f44ee48a3a47d03b7cf6d2686ec246" translate="yes" xml:space="preserve">
          <source>The MASK bit simply tells whether the message is encoded. Messages from the client must be masked, so your server should expect this to be 1. (In fact, &lt;a href=&quot;http://tools.ietf.org/html/rfc6455#section-5.1&quot;&gt;section 5.1 of the spec&lt;/a&gt; says that your server must disconnect from a client if that client sends an unmasked message.) When sending a frame back to the client, do not mask it and do not set the mask bit. We'll explain masking later. &lt;em&gt;Note: You have to mask messages even when using a secure socket. &lt;/em&gt;RSV1-3 can be ignored, they are for extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0570fcef71b64ca8f9f327007e3b424ae623dc" translate="yes" xml:space="preserve">
          <source>The MIME type being used as the container format for the recorded media, in &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cab320265857e696d511d3819bdd107ac500a8" translate="yes" xml:space="preserve">
          <source>The MIME type for the upload is set by calling the &lt;code&gt;XMLHttpRequest&lt;/code&gt; function &lt;code&gt;overrideMimeType()&lt;/code&gt;. In this case, we're using a generic MIME type; you may or may not need to set the MIME type at all depending on your use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e133192f466ff2ea7b295d692396dad5dd19723b" translate="yes" xml:space="preserve">
          <source>The MIME type of WebVTT is &lt;code&gt;text/vtt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c745fcb8ba46f2b9dd01133a747b3c6a3c875586" translate="yes" xml:space="preserve">
          <source>The MIME type of an imported script is not a valid &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types&quot;&gt;JavaScript MIME type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654fe7a4ad39aacf2868a25b2199dbea1fdbd66e" translate="yes" xml:space="preserve">
          <source>The MIME type of the data to be returned in the &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;. This will be the value of the &lt;code&gt;Blob&lt;/code&gt; object's type property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f426d8a2e9159290f2c860e42e09153aa8a120e" translate="yes" xml:space="preserve">
          <source>The MIME type of the data to be returned in the &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;. This will be the value of the &lt;code&gt;File&lt;/code&gt; object's type property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc056dd09e0b8e39655ad9d6f86a994e25a976d" translate="yes" xml:space="preserve">
          <source>The MIME type of the file as a read-only string or &lt;code&gt;&quot;&quot;&lt;/code&gt; if the type couldn't be determined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc4907afde1294ca75c7d40f86b0b8c6525112d" translate="yes" xml:space="preserve">
          <source>The MIME type that you want to test support for in the current browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17253f382a065c61ee64447cf80138a3855b87b9" translate="yes" xml:space="preserve">
          <source>The MSE standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1a90941d93d2bf4e98c3439f21d0fa1d1139c1" translate="yes" xml:space="preserve">
          <source>The MSRangeCollection object does not inherit from any class or interface and does not define any members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92001780331f365c9b4adef6e921a35c79be2777" translate="yes" xml:space="preserve">
          <source>The March 20, 2018 version of the specification; the last one to include this property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46500bb00cd6e7177297d0bfa92306a6623caee6" translate="yes" xml:space="preserve">
          <source>The Media Capabilities API provide more powerful features than say &lt;a href=&quot;mediarecorder/istypesupported&quot;&gt;&lt;code&gt;MediaRecorder.isTypeSupported()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;htmlmediaelement/canplaytype&quot;&gt;&lt;code&gt;HTMLMediaElement.canPlayType()&lt;/code&gt;&lt;/a&gt;, which only address general browser support, not performance. The API also provides abilities to access display property information such as supported color gamut, dynamic range abilities, and real-time feedback about the playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ddb8cbc730cde401e8109ec64955129e5cc1d5" translate="yes" xml:space="preserve">
          <source>The Media Session API provides a way to customize media notifications. It does this by providing metadata for display by the user agent of the media your web app is playing, and allows you to create event handlers, to define your own behaviors for a user-agent playback controls. The aim of this is allowing users to know what's playing, and to control it, without opening the specific page that launched it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807882d991ae9ac1f726801a860511e4947e990a" translate="yes" xml:space="preserve">
          <source>The Media Source Extensions API (MSE) provides functionality enabling plugin-free web-based streaming media. Using MSE, media streams can be created via JavaScript, and played using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80650c9aa3308a738ca6c1349d97ef9f6d6d214" translate="yes" xml:space="preserve">
          <source>The MediaCapabilities interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc74952fb9f6bc660d74daab43829fc90c729c48" translate="yes" xml:space="preserve">
          <source>The MediaStream Image Capture API is an API for capturing images or videos from a photographic device. In addition to capturing data, it also allows you to retrieve information about device capabilities such as image size, red-eye reduction and whether or not there is a flash and what they are currently set to. Conversely, the API allows the capabilities to be configured within the constraints what the device allows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641a26de18f2a7a59f0ac2f54adc093687d59f09" translate="yes" xml:space="preserve">
          <source>The MediaStream Recording API is comprised of a single major interface, &lt;a href=&quot;mediarecorder&quot;&gt;&lt;code&gt;MediaRecorder&lt;/code&gt;&lt;/a&gt;, which does all the work of taking the data from a &lt;a href=&quot;mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; and delivering it to you for processing. The data is delivered by a series of &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dataavailable&quot;&gt;dataavailable&lt;/a&gt;&lt;/code&gt; events, already in the format you specify when creating the &lt;code&gt;MediaRecorder&lt;/code&gt;. You can then process the data further or write it to file as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="558a620e62fd989e43d7135e2ce590e9e78c7d1a" translate="yes" xml:space="preserve">
          <source>The MediaStream passed into the &lt;code&gt;MediaRecorder()&lt;/code&gt; constructor when the &lt;code&gt;MediaRecorder&lt;/code&gt; was originally created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309999cd7da725ec04144f38df218477ec5df1e7" translate="yes" xml:space="preserve">
          <source>The Mono buffer will have 44100 samples, and 44100 frames. The &lt;code&gt;length&lt;/code&gt; property will be 44100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548c8d0cec5482d27bc69456bb385dd4bf5a21db" translate="yes" xml:space="preserve">
          <source>The Navigation Timing API can be used to gather performance data on the client side to be sent to a server via XHR as well as measure data that was very difficult to measure by other means such as time to unload a previous page, domain look up time, window.onload total time, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5508e101c4cd946b21a4dafc40f55d498e9683c3" translate="yes" xml:space="preserve">
          <source>The Navigation Timing API lets you easily obtain detailed and highly accurate timing information to help isolate performance problems with your site's code or resources. Unlike other tools or libraries, the &lt;a href=&quot;../navigation_timing_api&quot;&gt;Navigation Timing API&lt;/a&gt; lets you gather information that only the browser can provide at a level of accuracy much improved over other techniques. It also offers the advantage of being able to provide timing information as perceived by the user rather than data that has no correlation to what the user experiences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e38f6dfbebdd6a9d3f6e11fab83785175af905" translate="yes" xml:space="preserve">
          <source>The Network API is enabled by default. Can be disabled using the &lt;code&gt;dom.netinfo.enabled&lt;/code&gt; preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fb8bd851e37e68f2ed31d768aee9976864987f" translate="yes" xml:space="preserve">
          <source>The Network Information API provides information about the system's connection in terms of general connection type (e.g., 'wifi', 'cellular', etc.). This can be used to select high definition content or low definition content based on the user's connection. The entire API consists of the addition of the &lt;a href=&quot;networkinformation&quot;&gt;&lt;code&gt;NetworkInformation&lt;/code&gt;&lt;/a&gt; interface and a single property to the &lt;a href=&quot;navigator&quot;&gt;&lt;code&gt;Navigator&lt;/code&gt;&lt;/a&gt; interface: &lt;a href=&quot;navigator/connection&quot;&gt;&lt;code&gt;Navigator.connection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1099d65f476be0f7f16a7b35879db8f8ddc77e" translate="yes" xml:space="preserve">
          <source>The NodeList object that &lt;code&gt;forEach()&lt;/code&gt; is being applied to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e507a76b0bea5bba94e229447b76d1ea111f82" translate="yes" xml:space="preserve">
          <source>The NodeSelector interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca76d0ac0a6f8efffe44524bcdde514c385c6a7" translate="yes" xml:space="preserve">
          <source>The Notifications API allows web pages to control the display of system notifications to the end user. These are outside the top-level browsing context viewport, so therefore can be displayed even when the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems, across different platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab362bc527862290665c3e03a826a35db5324979" translate="yes" xml:space="preserve">
          <source>The Object, returned by the &lt;code&gt;navigator.mozSocial&lt;/code&gt; property, is available within the social media provider's panel to provide functionality it may need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d517a3e2e4a34a524b1bfd689db2f5497a6f431a" translate="yes" xml:space="preserve">
          <source>The Oculus Rift headset has a latency of 20 ms or less, but with mobile device-based setups it will depend heavily on the smartphone CPU power and other capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d461b5e90f5607f411453b732ac1de62fae5f2ee" translate="yes" xml:space="preserve">
          <source>The Oscillator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4ac44e482c6be370da688fed5252387fb45c48" translate="yes" xml:space="preserve">
          <source>The Page Visibility API adds the following properties to the &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51aa0eefe0c335b589601d538fc919c4b3c522b0" translate="yes" xml:space="preserve">
          <source>The Panels window's HTML, in &lt;code&gt;panels.html&lt;/code&gt;, has JavaScript code of its own, which is executed as soon as the window is created. It doesn't even need to wait for any particular event (or any event at all). That code handles resizing the window based on the available space:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45cde8d8d83fbc1e01dd12acf8e632a416732f0" translate="yes" xml:space="preserve">
          <source>The Payment Request API provides a consistent user experience for both merchants and users. It is not a new way for paying for things; rather, it's a way for user's to select their preferred way of paying for things, and make that information available to a merchant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95079872934154d9d9264168646ca49e810f98b" translate="yes" xml:space="preserve">
          <source>The Performance Timeline API extends the &lt;a href=&quot;performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface with three methods that provide different mechanisms to get a set of &lt;a href=&quot;performanceentry&quot;&gt;&lt;code&gt;performance records (metrics)&lt;/code&gt;&lt;/a&gt;, depending on the specified filter criteria. The methods are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f30006cf04d01d2446125ca2766e2528e5714ed" translate="yes" xml:space="preserve">
          <source>The Pointer lock API also extends the &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; interface, adding both a new property and a new method. The new property is used for accessing the currently locked element (if any), and is named &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement&quot;&gt;&lt;code&gt;pointerLockElement&lt;/code&gt;&lt;/a&gt; and the new method on &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;document/exitpointerlock&quot;&gt;&lt;code&gt;exitPointerLock()&lt;/code&gt;&lt;/a&gt; and, as the name implies, it is used to exit the pointer lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e489ae9998cea4cbc289465f4527b9772d464489" translate="yes" xml:space="preserve">
          <source>The Pointer lock API extends the normal &lt;a href=&quot;mouseevent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; interface with movement attributes. Two new attributes to mouse events&amp;mdash;&lt;a href=&quot;mouseevent/movementx&quot;&gt;&lt;code&gt;movementX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mouseevent/movementy&quot;&gt;&lt;code&gt;movementY&lt;/code&gt;&lt;/a&gt;&amp;mdash;provide the change in mouse positions. The values of the parameters are the same as the difference between the values of &lt;a href=&quot;mouseevent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; properties, &lt;a href=&quot;mouseevent/screenx&quot;&gt;&lt;code&gt;screenX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mouseevent/screeny&quot;&gt;&lt;code&gt;screenY&lt;/code&gt;&lt;/a&gt;, which are stored in two subsequent &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mousemove&quot;&gt;mousemove&lt;/a&gt;&lt;/code&gt; events, &lt;code&gt;eNow&lt;/code&gt; and &lt;code&gt;ePrevious&lt;/code&gt;. In other words, the Pointer lock parameter &lt;code&gt;movementX = eNow.screenX - ePrevious.screenX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e360ec00f9b790db33c37b3c36d7a5d288ad8abc" translate="yes" xml:space="preserve">
          <source>The Pointer lock API, similar to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode&quot;&gt;Fullscreen API&lt;/a&gt;, extends DOM elements by adding a new method, &lt;a href=&quot;element/requestpointerlock&quot;&gt;&lt;code&gt;requestPointerLock()&lt;/code&gt;&lt;/a&gt;. As it has recently unprefixed, you would currently declare it something like this, for example if you wanted to request pointer lock on a &lt;code&gt;canvas&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59dae65846c20e18e1c6f60f32f3d530ddf4844" translate="yes" xml:space="preserve">
          <source>The Presentation API lets a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; (such as a Web browser) effectively display web content through large presentation devices such as projectors and network-connected televisions. Supported types of multimedia devices include both displays which are wired using HDMI, DVI, or the like, or wireless, using &lt;a href=&quot;https://www.dlna.org/&quot;&gt;DLNA&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/&quot;&gt;Chromecast&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/airplay/&quot;&gt;AirPlay&lt;/a&gt;, or &lt;a href=&quot;https://www.wi-fi.org/discover-wi-fi/wi-fi-certified-miracast&quot;&gt;Miracast&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de1b009c68ee429ae09bbd8e00bbf4f5359ed0b" translate="yes" xml:space="preserve">
          <source>The Promise returned from &lt;code&gt;fetch()&lt;/code&gt;&lt;strong&gt;won&amp;rsquo;t reject on HTTP error status&lt;/strong&gt; even if the response is an HTTP 404 or 500. Instead, it will resolve normally (with &lt;code&gt;ok&lt;/code&gt; status set to false), and it will only reject on network failure or if anything prevented the request from completing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ce4e39251f35c75cbc98ddda00d2a92fdb85f6" translate="yes" xml:space="preserve">
          <source>The PublicKeyCredentialRequestOptions specifies publicKey options that can be used with the &lt;a href=&quot;web_authentication_api&quot;&gt;WebAuthn&lt;/a&gt;&lt;a href=&quot;credentialscontainer/get&quot;&gt;get()&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6c6ee78af43f0f1a77f3075ecbc6b53d1b0167" translate="yes" xml:space="preserve">
          <source>The RTCP mux policy to use when gathering ICE candidates, in order to support non-multiplexed RTCP. The value must be one of those from the &lt;a href=&quot;#RTCRtcpMuxPolicy_enum&quot;&gt;&lt;code&gt;RTCRtcpMuxPolicy&lt;/code&gt; enum&lt;/a&gt;. The default is &lt;code&gt;&quot;require&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71221082b9745b3ca41eee626496cee724698a3" translate="yes" xml:space="preserve">
          <source>The RTCSessionDescriptionCallback is passed into the &lt;a href=&quot;rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; object when requesting it to create offers or answers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe20c1143fda9a689c8dd67e92c6808b1888747" translate="yes" xml:space="preserve">
          <source>The RTCStats subdictionaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f004f6da2b078241fd54acad0aaea2d2bb3e7d" translate="yes" xml:space="preserve">
          <source>The ReadableStream constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623d66dd5a7394acf0be6514c68defac9f959f3d" translate="yes" xml:space="preserve">
          <source>The Resource Timing API includes two methods that extend the &lt;a href=&quot;performance&quot;&gt;&lt;code&gt;Performance&lt;/code&gt;&lt;/a&gt; interface. The &lt;a href=&quot;performance/clearresourcetimings&quot;&gt;&lt;code&gt;clearResourceTimings()&lt;/code&gt;&lt;/a&gt; method removes all &quot;&lt;code&gt;resource&lt;/code&gt;&quot; type performance entries from the browser's &lt;em&gt;resource&lt;/em&gt; performance entry buffer. The &lt;a href=&quot;performance/setresourcetimingbuffersize&quot;&gt;&lt;code&gt;setResourceTimingBufferSize()&lt;/code&gt;&lt;/a&gt; method sets the resource performance entry buffer size to the specified number of resource &lt;a href=&quot;performanceentry&quot;&gt;&lt;code&gt;performance entries&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449d2e24148a024fdea091e1dd7184e56ec41dbe" translate="yes" xml:space="preserve">
          <source>The Response status is not in the 200 range (i.e., not a successful response.) This occurs if the request does not return successfully, but also if the request is a &lt;em&gt;cross-origin no-cors&lt;/em&gt; request (in which case the reported status is always 0.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566fd8230cefdf797124580bfa21be363ca07914" translate="yes" xml:space="preserve">
          <source>The SCTP transport is used for transmitting and receiving data for any and all &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt;s on the peer connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d177ca2f819fbcb7a2cd679d6631426c45a41ad2" translate="yes" xml:space="preserve">
          <source>The SDP (Session Description Protocol) string describing the local end of the connection from the perspective of the sender (or the remote end of the conection from the receiver's point of view).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161d55f437e93acc108c78333b97a0647400f1b1" translate="yes" xml:space="preserve">
          <source>The SDP answer is generated and sent using a method called &lt;code&gt;sendAnswer()&lt;/code&gt;, which generates the answer using &lt;a href=&quot;../rtcpeerconnection/createanswer&quot;&gt;&lt;code&gt;createAnswer()&lt;/code&gt;&lt;/a&gt; then sends the resulting SDP to the other peer over the signaling service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5cb048ccadd5062a88dcc7c83530e13979f8ed" translate="yes" xml:space="preserve">
          <source>The SDP candidate string, describing the proposed connection method. You typically don't need to look at the contents of this string. All your code needs to do is route it through to the remote peer using the signaling server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cd878c161b07c4deff10dd30ad183b1e72304f" translate="yes" xml:space="preserve">
          <source>The SDP contained in the &lt;a href=&quot;rtcsessiondescription/sdp&quot;&gt;&lt;code&gt;sdp&lt;/code&gt;&lt;/a&gt; property is the definitive choice in the exchange. In other words, this session description describes the agreed-upon configuration, and is being sent to finalize negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bac1b54c66cbf2e596f818be3f66ad1498f8306" translate="yes" xml:space="preserve">
          <source>The SDP contained in the &lt;a href=&quot;sdp&quot;&gt;&lt;code&gt;sdp&lt;/code&gt;&lt;/a&gt; property is the definitive choice in the exchange. In other words, this session description describes the agreed-upon configuration, and is being sent to finalize negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5059063a57edc5690ce8933b54ab203a17641cbf" translate="yes" xml:space="preserve">
          <source>The SDP representing the candidate the ICE layer wants to transmit to the other peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc2bb588c0d85e3d7af968961a09590c94ee0e8" translate="yes" xml:space="preserve">
          <source>The SDP string describing the offer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d36946d5ca216d9fe55764ef403b2dd7f3154d3" translate="yes" xml:space="preserve">
          <source>The SVG &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/data-*&quot;&gt;data-*&lt;/a&gt;&lt;/code&gt; class of global attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaab3506382bc48119c0614b12df107159693801" translate="yes" xml:space="preserve">
          <source>The Screen Orientation API is made to prevent or handle such a change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54befca1ed615a79092f261aca70139aab7bef3e" translate="yes" xml:space="preserve">
          <source>The Selection API has a common behaviour (i.e. shared between browsers) that govern how focus behaviour changes for &lt;strong&gt;editing hosts&lt;/strong&gt;, after some of its methods are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e8b2fa1c26d1674287054a1adff3b117e4c0a8" translate="yes" xml:space="preserve">
          <source>The Selection API provides functionality for reading and manipulating the range of text selected by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee74eac091b7ab5b6d96be88e5cbb5b2d0dc6a33" translate="yes" xml:space="preserve">
          <source>The Selection API specification is based on the HTML Editing APIs specification and focuses on the Selection-related functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad3660062c18f064f5f6643478e19d8647d3124" translate="yes" xml:space="preserve">
          <source>The Selectors API provides methods that make it quick and easy to retrieve &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; nodes from the DOM by matching against a set of selectors. This is much faster than past techniques, wherein it was necessary to, for example, use a loop in JavaScript code to locate the specific items you needed to find.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef471873259b67b3423091e0b54cf4b1f2049c5" translate="yes" xml:space="preserve">
          <source>The Service Worker Cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1444875f9af319f529d6b66c414222db97dd4a" translate="yes" xml:space="preserve">
          <source>The Service worker will now control pages, but only those opened after the &lt;code&gt;register()&lt;/code&gt; is successful. i.e. a document starts life with or without a Service worker and maintains that for its lifetime. So documents will have to be reloaded to actually be controlled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ab1c971e638842c7dce10fd04f0d8ef489ff49" translate="yes" xml:space="preserve">
          <source>The Simple stream pump example we&amp;rsquo;ve been studying throughout this article includes a second part &amp;mdash; once we&amp;rsquo;ve read the image from the fetch body in chunks, we then enqueue them into another, custom stream of our own creation. How do we create this? The &lt;code&gt;ReadableStream&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97eeb41fe024408a9e0eef20715704bc306253b5" translate="yes" xml:space="preserve">
          <source>The Stereo buffer will have 88200 samples, but still 44100 frames. The &lt;code&gt;length&lt;/code&gt; property will still be 44100 since it's equal to the number of frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd932f99a039f513abcd3a4467036a3f5a629f2" translate="yes" xml:space="preserve">
          <source>The Storage Access API is designed to allow embedded content to request access to storage that would otherwise be blocked when a user&amp;rsquo;s browser is set to block all third-party cookies. Since embedded content won&amp;rsquo;t know which storage policy is in use by the user, it&amp;rsquo;s best to always check whether the embedded frame has storage access before attempting to read or write from storage. This is particularly true for &lt;a href=&quot;../document/cookie&quot;&gt;&lt;code&gt;Document.cookie&lt;/code&gt;&lt;/a&gt; access, as browsers will often return an empty cookie jar when third-party cookies are blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e48c3bbcd1c162016ad1cb18153a2b695f956bd" translate="yes" xml:space="preserve">
          <source>The Storage Access API is intended to solve this problem; embedded cross-origin content can request unrestricted access to its first-party storage on a site-by-site basis via the &lt;a href=&quot;document/requeststorageaccess&quot;&gt;&lt;code&gt;Document.requestStorageAccess()&lt;/code&gt;&lt;/a&gt; method, and check whether it already has access via the &lt;a href=&quot;document/hasstorageaccess&quot;&gt;&lt;code&gt;Document.hasStorageAccess()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8dfff18fa10e5ce49d372b152b379fcd874784" translate="yes" xml:space="preserve">
          <source>The Storage Access API provides a way for embedded, cross-origin content to gain unrestricted access to storage that it would normally only have access to in a first-party context (we refer to this as an origin&amp;rsquo;s &lt;em&gt;first-party&lt;/em&gt; storage). The API provides methods that allow embedded resources to check whether they currently have access to their first-party storage, and to request access to their first-party storage from the user agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ee07422271aa4e802657568b6b3de838b34a26" translate="yes" xml:space="preserve">
          <source>The Storage Standard defines a common, shared storage system to be used by all APIs and technologies that store content-accessible data for individual Web sites. The Storage API gives sites' code the ability to find out how much space they can use, how much they are already using, and even control whether or not they need to be alerted before the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; disposes of site data in order to make room for other things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ab309ba9c700b7e443cd4f2e41f84e55396c08" translate="yes" xml:space="preserve">
          <source>The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6616ff2e5d9b99b90827966cf19fef36b6e37d7a" translate="yes" xml:space="preserve">
          <source>The Streams API is experimental, and support is at an early stage right now. Only Chrome currently has basic writable streams implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d5caac4fe5c61fce2139791ee521dca4ac480c" translate="yes" xml:space="preserve">
          <source>The Streams API is experimental, and support is at an early stage right now. You can consume Fetch bodys as streams and create your own custom readable streams in the latest versions of Firefox (58+, currently hidden behind the &lt;code&gt;dom.streams.enabled&lt;/code&gt; and &lt;code&gt;javascript.options.streams&lt;/code&gt; prefs) and Chrome (52+). &lt;a href=&quot;concepts#Pipe_chains&quot;&gt;Pipe chains&lt;/a&gt; are only supported in Chrome at the moment, and that functionality is subject to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14cf5eedc0b14c272b3ba78d4bd836c8bf15b6b" translate="yes" xml:space="preserve">
          <source>The Streams API makes it possible to pipe streams into one another (or at least it will do when browsers implement the relevant functionality) using a structure called a &lt;strong&gt;pipe chain&lt;/strong&gt;. There are two methods available in the spec to facilitate this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb99026cc1cf3bfcfe3e9a2030b882f5fb53b58e" translate="yes" xml:space="preserve">
          <source>The StylePropertyMapReadOnly that&lt;code&gt;forEach()&lt;/code&gt; is being called on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fd48c86893a58114a16a78b2841a3c47727d4e" translate="yes" xml:space="preserve">
          <source>The SyncEvent interface represents a sync action that is dispatched on the &lt;a href=&quot;serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt; of a ServiceWorker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d35651df860650cfffe590fb541a9a80c479e3a" translate="yes" xml:space="preserve">
          <source>The Timing Model is the backbone of working with the WAAPI. Each document has a master timeline, &lt;code&gt;&lt;a href=&quot;../document/timeline&quot;&gt;Document.timeline&lt;/a&gt;&lt;/code&gt;, which stretches from the moment the page is loaded to infinity &amp;mdash; or until the window is closed. Spread along that timeline according to their durations are our animations. Each animation is anchored to a point in the timeline by its &lt;code&gt;&lt;a href=&quot;../animation/starttime&quot;&gt;startTime&lt;/a&gt;&lt;/code&gt;, representing the moment along the document&amp;rsquo;s timeline when the animation starts playing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f40bf5ebca8bf528eaf490a97aa212626759c6e" translate="yes" xml:space="preserve">
          <source>The Two Models: Timing and Animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0dfb9dd63c263dbacb8bf5d1e285362fc84e14" translate="yes" xml:space="preserve">
          <source>The URL from which to retrieve payment handler specific verification information used to validate the merchant. This is an empty string by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9123b55c271aee3167279ba325c293575e37fa18" translate="yes" xml:space="preserve">
          <source>The URL interface represents an object providing static methods used for creating object URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e17316fda2111e51769a9e740ee0a299e9f112a" translate="yes" xml:space="preserve">
          <source>The URL is malformed. Make sure that the URL is complete and valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2c2651684cad9ba363d70820271140dc77e4b6" translate="yes" xml:space="preserve">
          <source>The URL of an image to be displayed as part of the notification, as specified in the constructor's &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb991546f7093b78e39247baf1488dc7b3825562" translate="yes" xml:space="preserve">
          <source>The URL of the client as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcaed1e0895bb8efd90dc2f954276f3e5ad322a5" translate="yes" xml:space="preserve">
          <source>The URL of the document initiating the change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddc78cdd03e09dbd3daeab9762b012a9863910b" translate="yes" xml:space="preserve">
          <source>The URL of the document whose &lt;code&gt;key&lt;/code&gt; changed. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304c9cc76139f0d4106c53c1b367118a2e9052da" translate="yes" xml:space="preserve">
          <source>The URL of the handler, as a string. This string should include &quot;%s&quot; as a placeholder which will be replaced with the escaped URL of the document to be handled. This URL might be a true URL, or it could be a phone number, email address, or so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132aa562f852bd134dca09f0aa2f1eb7948eb361" translate="yes" xml:space="preserve">
          <source>The URL of the image used as an icon of the notification as specified in the constructor's &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c62bf7968399dfc0c395d95a4e079bef338d42" translate="yes" xml:space="preserve">
          <source>The URL of the image used to represent the notification when there is not enough space to display the notification itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74bf5936a4fd2081193d2193f9eecc912b98b70" translate="yes" xml:space="preserve">
          <source>The URL of the service worker script. The registered service worker file needs to have a valid &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#JavaScript_types&quot;&gt;JavaScript MIME type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e3a9471777de9085d2a3bdf4583bf839994d04" translate="yes" xml:space="preserve">
          <source>The URL passed to fetch needs to be relative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07aead0b1941d42cc2dc1a93ffbf79171c9a304" translate="yes" xml:space="preserve">
          <source>The URL scheme is not &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7835fa9151863ff50a5a46c84be71cf328c30d" translate="yes" xml:space="preserve">
          <source>The URL that the new response is to originate from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc214c8037c710565de3766be9202a7c318d6f86" translate="yes" xml:space="preserve">
          <source>The URL to open in the new window. It must be on the same origin as the calling page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a33162fdc36667abff5bf7347338f3f9504c048" translate="yes" xml:space="preserve">
          <source>The URL to which to connect; this should be the URL to which the WebSocket server will respond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b7946258167f7b51c317e0839fd6087be69985" translate="yes" xml:space="preserve">
          <source>The Unimplemented&lt;code&gt;IDBEnvironmentSync&lt;/code&gt; interface of the &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB&quot;&gt;IndexedDB API&lt;/a&gt; will be implemented by &lt;a href=&quot;https://developer.mozilla.org/En/DOM/Worker&quot;&gt;worker&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de47666599306de8bdda9c71e63f48305308a61d" translate="yes" xml:space="preserve">
          <source>The W3C &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; specification adds &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;HTML&lt;/a&gt; parsing support to &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;, which originally supported only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/XML&quot;&gt;XML&lt;/a&gt; parsing. This feature allows Web apps to obtain an HTML resource as a parsed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DOM&quot;&gt;DOM&lt;/a&gt; using &lt;code&gt;XMLHttpRequest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641b94a3cff3d732ccbf09f3151d90556550da68" translate="yes" xml:space="preserve">
          <source>The W3C DOM API, supported by Mozilla, can be used to create an in-memory representation of this document like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b6dfc85e70aa33fe5fb8ade5b25a56cc499961" translate="yes" xml:space="preserve">
          <source>The W3C DOM Level 1 allows you to change the content tree &lt;em&gt;any way you want&lt;/em&gt;. It is powerful enough to build any HTML document from scratch. It allows authors to change anything in the document from script, at any time. The easiest way for web page authors to change the DOM dynamically is using JavaScript. In JavaScript, the document is accessible the same way it has been in older browsers: from the &lt;code&gt;document&lt;/code&gt; property of the global object. This &lt;code&gt;document&lt;/code&gt; object implements the &lt;a href=&quot;http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#i-Document&quot;&gt;Document interface&lt;/a&gt; from the W3C's DOM Level 1 spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35aff10042f68f70fefe7b76195f5881bac7e0f" translate="yes" xml:space="preserve">
          <source>The W3C specification is a latest of a previous version of &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standard&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232b596f2f8b872c4967fa62fa43598e3ee99a70" translate="yes" xml:space="preserve">
          <source>The W3C's DOM Level 1 Core is a powerful object model for changing the content tree of documents. It is supported in all major browsers including Mozilla Firefox and Microsoft Internet Explorer. It is a powerful base for scripting on the web.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff15f61d0e420612f1ff17aae9cda414964f7c63" translate="yes" xml:space="preserve">
          <source>The W3C's DOM Level 1 Recommendation only specified the &lt;code&gt;hasFeature&lt;/code&gt; method, which is one way to determine if a DOM module is supported by a browser (see example above and &lt;a href=&quot;http://www.w3.org/2003/02/06-dom-support.html&quot;&gt;What does your user agent claim to support?&lt;/a&gt;). If available, other &lt;code&gt;DOMImplementation&lt;/code&gt; methods provide services for controlling things outside of a single document. For example, the &lt;code&gt;DOMImplementation&lt;/code&gt; interface includes a &lt;code&gt;createDocumentType&lt;/code&gt; method with which DTDs can be created for one or more documents managed by the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada2da408a02b1a4850a3f462b91efe409e7f5c1" translate="yes" xml:space="preserve">
          <source>The Web Animation API has a &lt;a href=&quot;https://github.com/web-animations/web-animations-js&quot;&gt;polyfill&lt;/a&gt; that you can use today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe14a174d02fec4e1fadb5264ce4a4d0e0f3e06" translate="yes" xml:space="preserve">
          <source>The Web Animations API (WAAPI) provides JavaScript developers access to the browser&amp;rsquo;s animation engine and describes how animations should be implemented across browsers. This article will introduce you to the important concepts behind the WAAPI, providing you with a theoretical understanding of how it works so you can use it effectively. To learn how to put the API to use, check out its sister article, &lt;a href=&quot;using_the_web_animations_api&quot;&gt;Using the Web Animations API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5547cb036ed232ca9e4335bdc5514a6f19ccf847" translate="yes" xml:space="preserve">
          <source>The Web Animations API adds some new features to &lt;strong&gt;&lt;a href=&quot;document&quot;&gt;&lt;code&gt;document&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;element&quot;&gt;&lt;code&gt;element&lt;/code&gt;&lt;/a&gt;.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acc634a15988e3dfe6efec1b883d4bc71bdca75" translate="yes" xml:space="preserve">
          <source>The Web Animations API allows for synchronizing and timing changes to the presentation of a Web page, i.e. animation of DOM elements. It does so by combining two models: the Timing Model and the Animation Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3610b7b93e99742a9731dce86482eeb1d77cd77e" translate="yes" xml:space="preserve">
          <source>The Web Animations API fills the gap between declarative CSS animations and transitions, and dynamic JavaScript animations. This means we can use it to create and manipulate CSS-like animations that go from one pre-defined state to another, or we can use variables, loops, and callbacks to create interactive animations that adapt and react to changing inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa17f0a2f1191da4711621a8f646a4d9ba5af5" translate="yes" xml:space="preserve">
          <source>The Web Animations API is supported to varying degrees in Chrome and Firefox, while Safari has begun showing portions of it in technology previews and Edge has moved the API into a medium priority backlog. Because it is such a large API and it is being implemented piecemeal across the board, sites like caniuse.com cannot convey the granularity and nuances of support across browsers. For now, &lt;a href=&quot;../web_animations_api&quot;&gt;MDN remains one of the best places to check for feature support&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f066edfa36e25bbd4c34d10b2545f5a13cd11c6a" translate="yes" xml:space="preserve">
          <source>The Web Animations API lets us construct animations and control their playback with JavaScript. This article will start you off in the right direction with fun demos and tutorials featuring Alice in Wonderland.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bbc62cfd68c924cdd4105e463484920ce93f82" translate="yes" xml:space="preserve">
          <source>The Web Animations API provides a common language for browsers and developers to describe animations on DOM elements. To get more information on the concepts behind the API and how to use it, read &lt;a href=&quot;web_animations_api/using_the_web_animations_api&quot;&gt;Using the Web Animations API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69574c8d9036791255e1010d8f624d683a9a1d74" translate="yes" xml:space="preserve">
          <source>The Web Animations API runs on top of two models, one that handles time&amp;mdash;Timing&amp;mdash;and one that handles visual change over time&amp;mdash;Animation. The Timing Model keeps track of how far along a set timeline we've come. The Animation Model determines what the animated object should look like at any given time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cccf8dec58d94ba5dcd5b86ad6f5adf5216114" translate="yes" xml:space="preserve">
          <source>The Web Animations API's &lt;code&gt;&lt;strong&gt;cancel()&lt;/strong&gt;&lt;/code&gt; method of the &lt;a href=&quot;../animation&quot;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt; interface clears all &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt;s caused by this animation and aborts its playback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859a56d2f4a3d9ccd7d17b15ed689b4a50efc299" translate="yes" xml:space="preserve">
          <source>The Web Audio API also allows us to control how audio is &lt;em&gt;spatialized&lt;/em&gt;. Using a system based on a &lt;em&gt;source-listener model&lt;/em&gt;, it allows control of the &lt;em&gt;panning model&lt;/em&gt; and deals with &lt;em&gt;distance-induced attenuation&lt;/em&gt; or &lt;em&gt;doppler shift&lt;/em&gt; induced by a moving source (or moving listener).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d80a74b1ed09b3011c3d448936f816a475108b" translate="yes" xml:space="preserve">
          <source>The Web Audio API can seem intimidating to those that aren't familiar with audio or music terms, and as it incorporates a great deal of functionality it can prove difficult to get started if you are a developer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57df525d75de12433836d1057ced048ecda837b" translate="yes" xml:space="preserve">
          <source>The Web Audio API does not replace the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&amp;lt;audio&amp;gt;&lt;/a&gt; media element, but rather complements it, just like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/a&gt; coexists alongside the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img&quot;&gt;&amp;lt;img&amp;gt;&lt;/a&gt; element. Your use case will determine what tools you use to implement audio. If you simply want to control playback of an audio track, the &amp;lt;audio&amp;gt; media element provides a better, quicker solution than the Web Audio API. If you want to carry out more complex audio processing, as well as playback, the Web Audio API provides much more power and control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62367c3ed880e2d257fef7eaa05e7b02ce82f4af" translate="yes" xml:space="preserve">
          <source>The Web Audio API exposes &lt;strong&gt;only&lt;/strong&gt; planar buffers, because it's made for processing. It works with planar, but converts the audio to interleaved when it is sent to the sound card for playback. Conversely, when an MP3 is decoded, it starts off in interleaved format, but is converted to planar for processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81e4e46db7938fc595256859ebdea8d3e3889aa" translate="yes" xml:space="preserve">
          <source>The Web Audio API handles audio operations inside an &lt;strong&gt;audio context&lt;/strong&gt;, and has been designed to allow &lt;strong&gt;modular routing&lt;/strong&gt;. Basic audio operations are performed with &lt;strong&gt;audio nodes&lt;/strong&gt;, which are linked together to form an &lt;strong&gt;audio routing graph&lt;/strong&gt;. You have input nodes, which are the source of the sounds you are manipulating, modification nodes that change those sounds as desired, and output nodes (destinations), which allow you to save or hear those sounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdb5ee4cfc05cb2975f0911928f7614c64c368a" translate="yes" xml:space="preserve">
          <source>The Web Audio API has a number of interfaces and associated events, which we have split up into nine categories of functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575b189d8e7a2e457a361f89189aa3269bfadbe4" translate="yes" xml:space="preserve">
          <source>The Web Audio API interface &lt;code&gt;&lt;strong&gt;AudioParamMap&lt;/strong&gt;&lt;/code&gt; represents a set of multiple audio parameters, each described as a mapping of a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; identifying the parameter to the &lt;a href=&quot;audioparam&quot;&gt;&lt;code&gt;AudioParam&lt;/code&gt;&lt;/a&gt; object representing its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb1b6bed1a82dc7b05ce8085d74dcb863dc8179" translate="yes" xml:space="preserve">
          <source>The Web Audio API involves handling audio operations inside an &lt;strong&gt;audio context&lt;/strong&gt;, and has been designed to allow &lt;strong&gt;modular routing&lt;/strong&gt;. Basic audio operations are performed with &lt;strong&gt;audio nodes&lt;/strong&gt;, which are linked together to form an &lt;strong&gt;audio routing graph&lt;/strong&gt;. Several sources &amp;mdash; with different types of channel layout &amp;mdash; are supported even within a single context. This modular design provides the flexibility to create complex audio functions with dynamic effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933e02250602cddf0a6ccd9a557c0238998305c8" translate="yes" xml:space="preserve">
          <source>The Web Audio API now comes with an &lt;a href=&quot;../iirfilternode&quot;&gt;&lt;code&gt;IIRFilterNode&lt;/code&gt;&lt;/a&gt; interface. But what is this and how does it differ from the &lt;a href=&quot;../biquadfilternode&quot;&gt;&lt;code&gt;BiquadFilterNode&lt;/code&gt;&lt;/a&gt; we have already?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2472509201d64b2cd227d59dacfef1df580e82fa" translate="yes" xml:space="preserve">
          <source>The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e062c9da558f400e0f5604b2c8e64c26348e0b65" translate="yes" xml:space="preserve">
          <source>The Web Audio API specification is constantly evolving and like most things on the web, there are some issues with it working consistently across browsers. Here we'll look at options for getting around cross-browser problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5ef1a09bf20cf69b87f09251fd77313275ac7d" translate="yes" xml:space="preserve">
          <source>The Web Audio API uses a planar buffer format. The left and right channels are stored like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6048d5e3592c79fc92dcf6a6ec07220e92766d5" translate="yes" xml:space="preserve">
          <source>The Web Audio API's &lt;code&gt;AudioParam&lt;/code&gt; interface represents an audio-related parameter, usually a parameter of an &lt;a href=&quot;audionode&quot;&gt;&lt;code&gt;AudioNode&lt;/code&gt;&lt;/a&gt; (such as &lt;a href=&quot;gainnode/gain&quot;&gt;&lt;code&gt;GainNode.gain&lt;/code&gt;&lt;/a&gt;). An &lt;code&gt;AudioParam&lt;/code&gt; can be set to a specific value or a change in value, and can be scheduled to happen at a specific time and following a specific pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7c3d629773220d8bb104b7f7e5c5ebee755def" translate="yes" xml:space="preserve">
          <source>The Web Authentication API (also referred to as WebAuthn) uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;asymmetric (public-key) cryptography&lt;/a&gt; instead of passwords or SMS texts for registering, authenticating, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Multi-factor_authentication&quot;&gt;second-factor authentication&lt;/a&gt; with websites. This resolves significant security problems related to &lt;a href=&quot;https://en.wikipedia.org/wiki/Phishing&quot;&gt;phishing&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_breach&quot;&gt;data breaches&lt;/a&gt;, and attacks against SMS texts or other second-factor authentication methods while at the same time significantly increasing ease of use (since users don't have to manage dozens of increasingly complicated passwords).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccb7a82e92b1f357d802c06a99f368ef04f56c4" translate="yes" xml:space="preserve">
          <source>The Web Authentication API is an extension of the &lt;a href=&quot;credential_management_api&quot;&gt;Credential Management API&lt;/a&gt; that enables strong authentication with public key cryptography, enabling passwordless authentication and/or secure second-factor authentication without SMS texts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14b44077c2414daa7a2b14f05945b062d2043bf" translate="yes" xml:space="preserve">
          <source>The Web Crypto API can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff08584ca2e75cbbd3b4d36285cae59133b45e3f" translate="yes" xml:space="preserve">
          <source>The Web Speech API enables you to incorporate voice data into web apps. The Web Speech API has two parts: SpeechSynthesis (Text-to-Speech), and SpeechRecognition (Asynchronous Speech Recognition.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe7c062715d4e328cb98ab43f82070a82c1af01" translate="yes" xml:space="preserve">
          <source>The Web Speech API has a main controller interface for this &amp;mdash; &lt;a href=&quot;../speechrecognition&quot;&gt;&lt;code&gt;SpeechRecognition&lt;/code&gt;&lt;/a&gt; &amp;mdash; plus a number of closely-related interfaces for representing grammar, results, etc. Generally, the default speech recognition system available on the device will be used for the speech recognition &amp;mdash; most modern OSes have a speech recognition system for issuing voice commands. Think about Dictation on Mac OS X, Siri on iOS, Cortana on Windows 10, Android Speech, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066762195b1ddc1651a75d62e3f773101ebfe947" translate="yes" xml:space="preserve">
          <source>The Web Speech API has a main controller interface for this &amp;mdash; &lt;a href=&quot;../speechsynthesis&quot;&gt;&lt;code&gt;SpeechSynthesis&lt;/code&gt;&lt;/a&gt; &amp;mdash; plus a number of closely-related interfaces for representing text to be synthesised (known as utterances), voices to be used for the utterance, etc. Again, most OSes have some kind of speech synthesis system, which will be used by the API for this task as available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5174ade8ffd5150e5cc83ec56bd7f391cdde5e99" translate="yes" xml:space="preserve">
          <source>The Web Speech API makes web apps able to handle voice data. There are two components to this API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249374ceb2d606fafff2454fbf4a0a75f8540f25" translate="yes" xml:space="preserve">
          <source>The Web Speech API provides two distinct areas of functionality &amp;mdash; speech recognition, and speech synthesis (also known as text to speech, or tts) &amp;mdash; which open up interesting new possibilities for accessibility, and control mechanisms. This article provides a simple introduction to both areas, along with demos.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0157df81f966798628a159a96be57da9204eeb" translate="yes" xml:space="preserve">
          <source>The Web Storage API extends the &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; object with two new properties &amp;mdash; &lt;a href=&quot;window/sessionstorage&quot;&gt;&lt;code&gt;Window.sessionStorage&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;window/localstorage&quot;&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; &amp;mdash; which provide access to the current domain's session and local &lt;a href=&quot;storage&quot;&gt;&lt;code&gt;Storage&lt;/code&gt;&lt;/a&gt; objects respectively, and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/onstorage&quot;&gt;&lt;code&gt;Window.onstorage&lt;/code&gt;&lt;/a&gt; event handler that fires when a storage area changes (e.g. a new item is stored.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71a61d09c898f06a5c24a29016ffcb814349418" translate="yes" xml:space="preserve">
          <source>The Web Storage API provides mechanisms by which browsers can securely store key/value pairs, in a much more intuitive fashion than using cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67ed346ec00de07b8c91609b420ef3a2326ba83" translate="yes" xml:space="preserve">
          <source>The WebGL API provides methods to use compressed texture formats. These are useful to increase texture detail while limiting the additional video memory necessary. By default, no compressed formats are available: a corresponding compressed texture format extension must first be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093c4cc10a2818f177c168c5c0613112b20715b2" translate="yes" xml:space="preserve">
          <source>The WebGL context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebd518da6889c33c015bfead20d73c3fc00bdb6" translate="yes" xml:space="preserve">
          <source>The WebGL context supports querying what extensions are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f25cf0044f9bfd895e32fd48b9bdef9ddbe0247" translate="yes" xml:space="preserve">
          <source>The WebRTC API includes a number of interfaces to manage security and identity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9bb111c94dc1dc9a768f304550df41137343b4" translate="yes" xml:space="preserve">
          <source>The WebRTC API interface &lt;a href=&quot;../rtctrackevent&quot;&gt;&lt;code&gt;RTCTrackEvent&lt;/code&gt;&lt;/a&gt;'s read-only &lt;code&gt;&lt;strong&gt;transceiver&lt;/strong&gt;&lt;/code&gt; property indicates the &lt;a href=&quot;../rtcrtptransceiver&quot;&gt;&lt;code&gt;RTCRtpTransceiver&lt;/code&gt;&lt;/a&gt; affiliated with the event's &lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;. The transceiver pairs the track's &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;receiver&lt;/code&gt;&lt;/a&gt; with an &lt;a href=&quot;../rtcrtpsender&quot;&gt;&lt;code&gt;RTCRtpSender&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7789f8e0472f8f74f18d82a7f56c13de5843bd" translate="yes" xml:space="preserve">
          <source>The WebRTC API makes heavy use of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;s. They make it very easy to chain the steps of the connection process together; if you haven't already read up on this functionality of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla&quot;&gt;ECMAScript 2015&lt;/a&gt;, you should read up on them. Similarly, this example uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow functions&lt;/a&gt; to simplify syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e7a6f8661c40eed53ff956a6ebf708b304ec66" translate="yes" xml:space="preserve">
          <source>The WebRTC API's &lt;code&gt;&lt;strong&gt;RTCTrackEventInit&lt;/strong&gt;&lt;/code&gt; dictionary is used to provide information describing an &lt;a href=&quot;rtctrackevent&quot;&gt;&lt;code&gt;RTCTrackEvent&lt;/code&gt;&lt;/a&gt; when instantiating a new &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/track&quot;&gt;track&lt;/a&gt;&lt;/code&gt; event using &lt;a href=&quot;rtctrackevent/rtctrackevent&quot;&gt;&lt;code&gt;new RTCTrackEvent()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4a3438af699918c80c1ac312fece424e2c3460" translate="yes" xml:space="preserve">
          <source>The WebRTC adapter currently supports Firefox, Google Chrome, and Microsoft Edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21855d4aef7a9f347d7bd9c05b14b0043ceefb88" translate="yes" xml:space="preserve">
          <source>The WebRTC adapter project on GitHub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df1cf1de80a67d19001602d04aebd8f7901208c" translate="yes" xml:space="preserve">
          <source>The WebRTC infrastructure sends you the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/signalingstatechange&quot;&gt;signalingstatechange&lt;/a&gt;&lt;/code&gt; message when the state of the signaling process changes (or if the connection to the signaling server changes). See &lt;a href=&quot;#Signaling_state&quot;&gt;Signaling state&lt;/a&gt; to see our code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c9d62442421dd17dc7960125ed63755070f56c" translate="yes" xml:space="preserve">
          <source>The WebRTC interface &lt;code&gt;RTCRtpTransceiver&lt;/code&gt; describes a permanent pairing of an &lt;a href=&quot;rtcrtpsender&quot;&gt;&lt;code&gt;RTCRtpSender&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt;, along with some shared state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e18074407f2f4fba83f4896c5c1afa809762445" translate="yes" xml:space="preserve">
          <source>The WebRTC organization &lt;a href=&quot;https://github.com/webrtc/adapter/&quot;&gt;provides on GitHub the WebRTC adapter&lt;/a&gt; to work around compatibility issues in different browsers' WebRTC implementations. The adapter is a JavaScript shim which lets your code to be written to the specification so that it will &quot;just work&quot; in all browsers with WebRTC support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afc6c0fb79a88c0d871d56f13c20248a662feeb" translate="yes" xml:space="preserve">
          <source>The WebSocket Handshake</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088a40ab4e2b47fd16f5ec78df5790d1f22f3094" translate="yes" xml:space="preserve">
          <source>The WebSocket constructor accepts one required and one optional parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03c94378ee8f1654b560b9f7bf6d57403987b06" translate="yes" xml:space="preserve">
          <source>The WebVR API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3c17971cb35c71f23ce33c3bd9e7bb4ee8777c" translate="yes" xml:space="preserve">
          <source>The WebVR API extends the following APIs, adding the listed features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560bdcd8819ddb668c2586bf4858de9c15af7b01" translate="yes" xml:space="preserve">
          <source>The WebVR API is a fantastic addition to the web developer's toolkit, allowing WebGL scenes to be presented in virtual reality displays such as the Oculus Rift and HTC Vive. But how do you get started with developing VR apps for the Web? This article will guide you through the basics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d6fa22f29fdfe7afe3f2df504e26cf11df12bd" translate="yes" xml:space="preserve">
          <source>The WebVR spec features a number of events that are fired, allowing our app code to react to changes in the state of the VR display (see &lt;a href=&quot;../webvr_api#Window_events&quot;&gt;Window events&lt;/a&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a45768c6b39c0d2e6245c251a3366422715eab" translate="yes" xml:space="preserve">
          <source>The WindowEventHandlers.onafterprint property sets and returns the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/afterprint&quot;&gt;afterprint&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventHandler&quot;&gt;&lt;code&gt;EventHandler&lt;/code&gt;&lt;/a&gt; for the current window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5be0f61092c7cede7b894b47fbcee86ea25a55" translate="yes" xml:space="preserve">
          <source>The X coordinate of the mouse pointer in global (screen) coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a68d87324547c929a383e284c288f3333e2cb35" translate="yes" xml:space="preserve">
          <source>The X coordinate of the mouse pointer in local (DOM content) coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8c3a7fa7ec394577ab0d1e5831b5b50758055c" translate="yes" xml:space="preserve">
          <source>The X coordinate of the mouse pointer relative to the position of the last &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mousemove&quot;&gt;mousemove&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e387abda3e60e5f90f71f221f1142165971458a" translate="yes" xml:space="preserve">
          <source>The X coordinate of the mouse pointer relative to the position of the padding edge of the target node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edb8f774b6164dd0ffdbcf3726c1c6b47c7f954" translate="yes" xml:space="preserve">
          <source>The X coordinate of the mouse pointer relative to the whole document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da513e48a3ccb07174e4801174b623976520ebcf" translate="yes" xml:space="preserve">
          <source>The X coordinate of the touch point relative to the screen, not including any scroll offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a9abbeeb1dbdc78a235b4079e22f034c062f7b" translate="yes" xml:space="preserve">
          <source>The X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670ba6378c0267f919fc002db77aaae706015f2f" translate="yes" xml:space="preserve">
          <source>The XMLHttpRequest client has been created, but the open() method hasn't been called yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf5a9f304a5e69b5fade90d70c4e00de8f5182b" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the mouse pointer in global (screen) coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873b727818c49326a426906f7c1e380af4d18411" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the mouse pointer in local (DOM content) coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452fe2ef304adc2af4320701853ab83b0c1d644a" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the mouse pointer relative to the position of the last &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/mousemove&quot;&gt;mousemove&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0c1e222cf8e5fdebba330bfa7763f9b475a865" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd193a3393463aef0f51b55d0f1ba3f6edb7e23d" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the mouse pointer relative to the whole document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583c076851657d2e120fa15313ff53bf31550478" translate="yes" xml:space="preserve">
          <source>The Y coordinate of the touch point relative to the screen, not including any scroll offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d697250ba2e3a7571b0dce64acee872a1e3921" translate="yes" xml:space="preserve">
          <source>The Y radius of the ellipse that most closely circumscribes the area of contact with the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09f2fbc366fc45079a954d6b10007f6477c3ed0" translate="yes" xml:space="preserve">
          <source>The ability for each channel to have a defined subprotocol lets your app, for example, use JSON objects as messages on one channel while another channel is plaintext and another is raw binary or even some other format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bd0520554838b88ff8bfff33ea9c873200e987" translate="yes" xml:space="preserve">
          <source>The above behavior is how many browsers actually implement NodeList.prototype.forEach (Chrome, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e4af67f7a55de3ecd2e963fa5c40cf65e5df78" translate="yes" xml:space="preserve">
          <source>The above behaviour applies to selections made using the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fee76076f8a7e21b13468c4e7ce55564ad2e44" translate="yes" xml:space="preserve">
          <source>The above code solves a few usability problems related to links opening secondary window. The purpose of the &lt;code&gt;return false&lt;/code&gt; in the code is to cancel default action of the link: if the onclick event handler is executed, then there is no need to execute the default action of the link. But if javascript support is disabled or non-existent on the user's browser, then the onclick event handler is ignored and the browser loads the referenced resource in the target frame or window that has the name &quot;PromoteFirefoxWindowName&quot;. If no frame nor window has the name &quot;PromoteFirefoxWindowName&quot;, then the browser will create a new window and will name it &quot;PromoteFirefoxWindowName&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5e4d4f44ba982a9fdd82d4ad97084d6991a22b" translate="yes" xml:space="preserve">
          <source>The above example can also be written with the help of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt; arrow function&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dc12812790c3402f4277695fe105a5fdbc13d6" translate="yes" xml:space="preserve">
          <source>The above example will cause the &lt;code&gt;do_something()&lt;/code&gt; function to execute when the location is obtained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6110c226142ddb8b40a89fa33e02a9dcdaf5a62a" translate="yes" xml:space="preserve">
          <source>The above graphic is a visualization of the clip space that all of the points must fit into. It is 2 units wide, and consists of a cube from the corner (-1,-1,-1) to the corner (1,1,1). The middle of the cube is the point (0,0,0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3791ef7e47d01e2730bbd016229b6d8cf8f4040" translate="yes" xml:space="preserve">
          <source>The above prompt appears as follows (in Chrome on OS X):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e07f3f8bceafc285fb894ae57f78cea6169def" translate="yes" xml:space="preserve">
          <source>The above works because when &lt;code&gt;myMethod&lt;/code&gt; is called, its &lt;code&gt;this&lt;/code&gt; is set to &lt;code&gt;myArray&lt;/code&gt; by the call, so within the function, &lt;code&gt;this[sProperty]&lt;/code&gt; is equivalent to &lt;code&gt;myArray[sProperty]&lt;/code&gt;. However, in the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f8e491cdf524f3010374df1c95590a4e4ff67e" translate="yes" xml:space="preserve">
          <source>The absolute URL of the WebSocket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f786a6395b1ee429fce3c1236b32311b485b2f" translate="yes" xml:space="preserve">
          <source>The accuracy of the compass means that the deviation is positive or negative. It's usually 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3564b1a7def579905a95c930bf95cba44639af3" translate="yes" xml:space="preserve">
          <source>The acquisition of the geolocation failed because at least one internal source of position returned an internal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63725b2be658af5fb1680b1736c043c944100798" translate="yes" xml:space="preserve">
          <source>The acquisition of the geolocation failed because one or several internal sources of position returned an internal error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4767bf89fefb215012bc5b8f9983527342da8592" translate="yes" xml:space="preserve">
          <source>The acquisition of the geolocation information failed because the page didn't have the permission to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685c9415a1fb670ddc30df6ba5233d37855c4b51" translate="yes" xml:space="preserve">
          <source>The action of a form is the program that is executed on the server when the form is submitted. This property can be retrieved or set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2b4047e1dbe9f67dae998a12b237c106a2ba91" translate="yes" xml:space="preserve">
          <source>The action triggered by this event is defined in a function set as the event handler for the relevant &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; event (e.g. using an &lt;code&gt;onmessage&lt;/code&gt; handler as listed above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ce1164b2e4ca80ffd6835aa635f1d00c873dfb" translate="yes" xml:space="preserve">
          <source>The actions array of the notification as specified in the constructor's &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816580fb90a5b7bb1ff6bb34c69619266e490592" translate="yes" xml:space="preserve">
          <source>The actual &lt;a href=&quot;../text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; of &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../attr&quot;&gt;&lt;code&gt;Attr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e12261dc5bc35193536595ff336c1fa34dd38e5" translate="yes" xml:space="preserve">
          <source>The actual data storage within each site storage unit is called its &lt;strong&gt;box&lt;/strong&gt;. Each site storage unit has exactly one box into which all of its data is placed, and has a &lt;strong&gt;box mode&lt;/strong&gt; that describes the data retention policy for that box. There are two modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cda6c062edb9fe61c63c028c7436c081505a54b" translate="yes" xml:space="preserve">
          <source>The actual event handler looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e52e3261f601bf74a7c9989574f2902c7d0a26" translate="yes" xml:space="preserve">
          <source>The actual value of the string, however, is determined by the source of the track, and there is no guarantee what form it will take, although the specification does recommend it be a GUID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ae22527455827438230de45ea4fddf5c051eb4" translate="yes" xml:space="preserve">
          <source>The adapter is provided under a &lt;a href=&quot;https://github.com/webrtc/adapter/blob/master/LICENSE.md&quot;&gt;BSD-style license&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d86b56b93c53153cc9d0afde0831217a3fa0c7d" translate="yes" xml:space="preserve">
          <source>The add method is an&lt;em&gt;insert only&lt;/em&gt;method. If a record already exists in the object store with the &lt;code&gt;key&lt;/code&gt; parameter as its key, then an error &lt;code&gt;ConstrainError&lt;/code&gt; event is fired on the returned request object. For updating existing records, you should use the &lt;a href=&quot;put&quot;&gt;&lt;code&gt;IDBObjectStore.put&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa7fbc525a03031c49bd636b370ccdd9e3c6335" translate="yes" xml:space="preserve">
          <source>The addition of &lt;code&gt;currentLocalDescription&lt;/code&gt; and &lt;a href=&quot;pendinglocaldescription&quot;&gt;&lt;code&gt;pendingLocalDescription&lt;/code&gt;&lt;/a&gt; to the WebRTC spec is relatively recent. In browsers which don't support them, just use &lt;a href=&quot;localdescription&quot;&gt;&lt;code&gt;localDescription&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6d9301d15e53ab0ff1cbcad22815ed55d3fa56" translate="yes" xml:space="preserve">
          <source>The addition of &lt;code&gt;pendingLocalDescription&lt;/code&gt; and &lt;a href=&quot;currentlocaldescription&quot;&gt;&lt;code&gt;currentLocalDescription&lt;/code&gt;&lt;/a&gt; to the WebRTC spec is relatively recent. In browsers which don't support them, only &lt;a href=&quot;localdescription&quot;&gt;&lt;code&gt;localDescription&lt;/code&gt;&lt;/a&gt; is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e56ae0752f318cd021009c99dd571437b18731" translate="yes" xml:space="preserve">
          <source>The addition of &lt;code&gt;pendingRemoteDescription&lt;/code&gt; and &lt;a href=&quot;currentremotedescription&quot;&gt;&lt;code&gt;currentRemoteDescription&lt;/code&gt;&lt;/a&gt; to the WebRTC spec is relatively recent. In browsers which don't support them, only &lt;a href=&quot;remotedescription&quot;&gt;&lt;code&gt;remoteDescription&lt;/code&gt;&lt;/a&gt; is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6abe818dae9767ba20fbe33938c43f9f5c8f97a" translate="yes" xml:space="preserve">
          <source>The additional methods described above are also not restricted to string data; you can specify any type of data. For example, files are dragged using the &lt;a href=&quot;https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types#file&quot;&gt;application/x-moz-file&lt;/a&gt; type stored as &lt;a href=&quot;https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIFile&quot;&gt;nsIFile&lt;/a&gt; objects. As the &lt;a href=&quot;../datatransfer/setdata&quot;&gt;&lt;code&gt;setData()&lt;/code&gt;&lt;/a&gt; method only supports strings, it cannot be used to specify files for dragging in this manner. Instead the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSetDataAt&quot;&gt;&lt;code&gt;mozSetDataAt()&lt;/code&gt;&lt;/a&gt; method must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4dc2ddf6e323915868e94f07717230afc8c556" translate="yes" xml:space="preserve">
          <source>The adopted node that now has this document as its &lt;a href=&quot;../node/ownerdocument&quot;&gt;&lt;code&gt;ownerDocument&lt;/code&gt;&lt;/a&gt;. The node's &lt;a href=&quot;../node/parentnode&quot;&gt;&lt;code&gt;parentNode&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;null&lt;/code&gt;, since it has not yet been inserted into the document tree. Note that &lt;var&gt;node&lt;/var&gt; and &lt;var&gt;externalNode&lt;/var&gt; are the same object after this call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc393448fafb85972177464a98368e3536bbea6" translate="yes" xml:space="preserve">
          <source>The ads are created using a function called &lt;code&gt;loadRandomAd()&lt;/code&gt;, which both creates the ad and inserts it into the page. We'll see later that this same function can also replace an existing ad, but for now, we're simply appending ads to the existing content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623170ac19826cc8b1128d54c18159767c86d39f" translate="yes" xml:space="preserve">
          <source>The affected element will continue to be rendered in the state of the final animation framecontinue to be applied to the after the animation has completed playing, in spite of and during any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/endDelay&quot;&gt;&lt;code&gt;endDelay&lt;/code&gt;&lt;/a&gt; or when its &lt;code&gt;playState&lt;/code&gt; is &lt;code&gt;finished&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763f025a7ed4caf777520386418dcb69b6f63585" translate="yes" xml:space="preserve">
          <source>The alert dialog should be used for messages which do not require any response on the part of the user, other than the acknowledgement of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79af865daefaaaa6a62f40d841ac8ca50a90bd6f" translate="yes" xml:space="preserve">
          <source>The algorithm by which to determine if a point is inside or outside the clipping region. Possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04abc829833f9a22f6d9eb0f2a6e35c99f30d21" translate="yes" xml:space="preserve">
          <source>The algorithm by which to determine if a point is inside or outside the filling region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a708acd2dca6860ee5bfe02bb34243eeb06b8054" translate="yes" xml:space="preserve">
          <source>The algorithm by which to determine if a point is inside or outside the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953d8e4eb41a04ec5fc302aa67bc78f6911cbb73" translate="yes" xml:space="preserve">
          <source>The alignment is relative to the &lt;code&gt;x&lt;/code&gt; value of the &lt;a href=&quot;filltext&quot;&gt;&lt;code&gt;fillText()&lt;/code&gt;&lt;/a&gt; method. For example, if &lt;code&gt;textAlign&lt;/code&gt; is &lt;code&gt;&quot;center&quot;&lt;/code&gt;, then the text's left edge will be at &lt;code&gt;x - (textWidth / 2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054f2c0aa3bd310d952f8375f0d78d72a2e695a5" translate="yes" xml:space="preserve">
          <source>The allowed values are those included in the enum &lt;code&gt;&lt;a href=&quot;#RTCSignalingState_enum&quot;&gt;RTCSignalingState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea6c31d1a6b8a3b97add43e07bd5db1bc4dc5d1" translate="yes" xml:space="preserve">
          <source>The allowed values are those of an enum of type &lt;code&gt;RTCSdpType&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b87f7400a34b368480c46bc38e05e3abc5e9e5" translate="yes" xml:space="preserve">
          <source>The alternative is to use an interleaved buffer format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc79b4f2e40739e67e704a7c6fdaef74c233469" translate="yes" xml:space="preserve">
          <source>The alternative, &lt;a href=&quot;#Older_way_to_register_event_listeners&quot;&gt;older way to register event listeners&lt;/a&gt;, is described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43857378fbdefae0bb0f094edafa882b145aa444" translate="yes" xml:space="preserve">
          <source>The ambient light events are a handy way to make a web page or an application aware of any change in the light intensity. It allows them to react to such a change, for example by changing the color contrast of the User Interface (UI) or by changing the exposure necessary to take a picture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909b09ad6dbe7534b84114672364fae3857bf886" translate="yes" xml:space="preserve">
          <source>The amount of acceleration along the X axis. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d25e2cf942db1066e2338bba22b0628a56b5dc1" translate="yes" xml:space="preserve">
          <source>The amount of acceleration along the Y axis. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdad42e133a4b15efb4acfcfa984ab16584967f" translate="yes" xml:space="preserve">
          <source>The amount of acceleration along the Z axis. &lt;strong&gt;Read only.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8649a3b8863849b8c025a4b8b755da5f4510149" translate="yes" xml:space="preserve">
          <source>The amount of data that has been retrieved has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f686e01765b4268d0a9d8486843b8638d40b5318" translate="yes" xml:space="preserve">
          <source>The amount of pressure applied to a touch or tablet device when generating the event; this value ranges between &lt;code&gt;0.0&lt;/code&gt; (minimum pressure) and &lt;code&gt;1.0&lt;/code&gt; (maximum pressure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f69683ccdfac971fb3dc367607892d3732b809" translate="yes" xml:space="preserve">
          <source>The amount of pressure applied to the pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606ecab1c0ea73f7588bbe80b3ac0bff3457c8c7" translate="yes" xml:space="preserve">
          <source>The amount of pressure applied when clicking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2eeec530b8e6ad1de0edebdcadcaa122856b6e" translate="yes" xml:space="preserve">
          <source>The amount of rotation around the X axis, in degrees per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0da30990f836fc45fb080243ffbc2b93cfb3a92" translate="yes" xml:space="preserve">
          <source>The amount of rotation around the Y axis, in degrees per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaaddac20d1ee8c0c96ddcdd0066934b4702fbb" translate="yes" xml:space="preserve">
          <source>The amount of rotation around the Z axis, in degrees per second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e4674ecb369f4af48c43c5a1a8e4528446c536" translate="yes" xml:space="preserve">
          <source>The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the bounding rectangle. This means that the rectangle's boundary edges (top, right, bottom, left) change their values every time the scrolling position changes (because their values are relative to the viewport and not absolute). If you need the bounding rectangle relative to the top-left corner of the document, just add the current scrolling position to the &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties (these can be obtained using &lt;a href=&quot;../window/scrollx&quot;&gt;&lt;code&gt;window.scrollX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../window/scrolly&quot;&gt;&lt;code&gt;window.scrollY&lt;/code&gt;&lt;/a&gt;) to get a bounding rectangle which is independent from the current scrolling position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e2e8c492fb93051f1a3a14b943bfa8581c72ee" translate="yes" xml:space="preserve">
          <source>The amount of scrolling that has been done of the viewport area (or any other scrollable element) is taken into account when computing the rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3709aa7953496b2a014e7f61250d0bbd02f8217" translate="yes" xml:space="preserve">
          <source>The amount of time, in milliseconds, that each DTMF tone should last. This value must be between 40 ms and 6000 ms (6 seconds), inclusive. The default is 100 ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d72ffdca475e03d0c13c861714e68fe5cd1ed9b" translate="yes" xml:space="preserve">
          <source>The analyser node will then capture audio data using a Fast Fourier Transform (fft) in a certain frequency domain, depending on what you specify as the &lt;a href=&quot;../analysernode/fftsize&quot;&gt;&lt;code&gt;AnalyserNode.fftSize&lt;/code&gt;&lt;/a&gt; property value (if no value is specified, the default is 2048.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cd06a4bbf76d11dbc1e0288bdc5e3ecada6da7" translate="yes" xml:space="preserve">
          <source>The anchor of a selection is the beginning point of the selection. When making a selection with a mouse, the anchor is where in the document the mouse button is initially pressed. As the user changes the selection using the mouse or the keyboard, the anchor does not move.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f61069e4bb70c66e36f52d92dc0db5c1fe2540" translate="yes" xml:space="preserve">
          <source>The angle at which the arc ends, measured clockwise from the positive x-axis and expressed in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee73291bd2453c728ae7dad1a263c46dd63bc7b" translate="yes" xml:space="preserve">
          <source>The angle at which the arc starts, measured clockwise from the positive x-axis and expressed in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f3a94829b3b31185f0a5c280f1f3eb84270d38" translate="yes" xml:space="preserve">
          <source>The angle at which the ellipse ends, measured clockwise from the positive x-axis and expressed in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65231a3f02dfec23b7e7e88854bfdb40f75b3d1c" translate="yes" xml:space="preserve">
          <source>The angle at which the ellipse starts, measured clockwise from the positive x-axis and expressed in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f11eac48c3d4e45a8a2613927b7980114d4618" translate="yes" xml:space="preserve">
          <source>The angle between the X-Z plane of the pointer (stylus) and the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3dbd17d745362db6fe45dbc4309af2e4038c75" translate="yes" xml:space="preserve">
          <source>The angle between the Y-Z plane of the pointer (stylus) and the screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1209641d00d3a46add2510c27ef91ebb404f8234" translate="yes" xml:space="preserve">
          <source>The animation completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a60434314c38890dd43cb6f46d1a9f0ef705bcf" translate="yes" xml:space="preserve">
          <source>The animation has reached one of its boundaries and the &lt;a href=&quot;currenttime&quot;&gt;&lt;code&gt;Animation.currentTime&lt;/code&gt;&lt;/a&gt; property is not updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdf8a40018e722a8fdc95b977022d9c4ee8c8bf" translate="yes" xml:space="preserve">
          <source>The animation has started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c969df4df0b5b26175fae3b3592694fce2d32e45" translate="yes" xml:space="preserve">
          <source>The animation is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c3658fbed09409b0c599aa0f605ff7a00e8886" translate="yes" xml:space="preserve">
          <source>The animation model can be thought of as an array of snapshots of what the animation could look like at any given time, lined up along the duration of the animation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b16f88105b0668f3a016998f662815e66af654e" translate="yes" xml:space="preserve">
          <source>The animation runs backwards, or &quot;rewinds.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88711e85dd641adf8ded9887fb524267d7e83a0f" translate="yes" xml:space="preserve">
          <source>The animation runs forwards, from beginning to end, in the way we experience the flow of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4135dd03409cc8945e5f9a7444992cb5146396dd" translate="yes" xml:space="preserve">
          <source>The animation sequence is described next. First, the &lt;code&gt;&quot;slideAnimation&quot;&lt;/code&gt; class, which establishes the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/animation&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; that will cause the box to move over the course of five seconds, one time, using the &lt;code&gt;&quot;slideBox&quot;&lt;/code&gt; keyframe set. The keyframes are defined next; they describe an animation which causes the box to migrate from the top-left corner of the container to the bottom-right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e793e793a6b457b714365c1f9b6d2d2851a85d42" translate="yes" xml:space="preserve">
          <source>The animation switches direction after each iteration, going forward through the animation sequence the first iteration, then backward through the sequence the second iteration, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58484cf774e2da586a47d4949b5f293a1a02827f" translate="yes" xml:space="preserve">
          <source>The animation was suspended and the &lt;a href=&quot;currenttime&quot;&gt;&lt;code&gt;Animation.currentTime&lt;/code&gt;&lt;/a&gt; property is not updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c87e55f242814ba5c10f679745b7b8d4a6dee91" translate="yes" xml:space="preserve">
          <source>The animation's &lt;a href=&quot;currenttime&quot;&gt;&lt;code&gt;currentTime&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;unresolved&lt;/code&gt; (for example, if it's never been played or isn't currently playing) and the end time of the animation is positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092bf002d8c563da11c18604d844c8a69390f604" translate="yes" xml:space="preserve">
          <source>The animation's effects are only visible while the animation is iterating or its playhead is positioned over an iteration. The animation's effects are not visible when its &lt;a href=&quot;../animation/playstate&quot;&gt;&lt;code&gt;playState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;pending&lt;/code&gt; with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/delay&quot;&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/a&gt;, when its &lt;code&gt;playState&lt;/code&gt; is &lt;code&gt;finished&lt;/code&gt;, or during its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/endDelay&quot;&gt;&lt;code&gt;endDelay&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/delay&quot;&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/a&gt;. In other words, if the animation isn't in its active interval, the affected element is not visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f1b1ac95605379e06385f1c18d1951ba69219f" translate="yes" xml:space="preserve">
          <source>The animation's effects should be reflected by the element(s) state prior to playing, in spite of and during any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffectTimingReadOnly/delay&quot;&gt;&lt;code&gt;delay&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;pending&lt;/code&gt;&lt;a href=&quot;../animation/playstate&quot;&gt;&lt;code&gt;playState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7278447bbc35fcc75e72e0411abee2a2375b93" translate="yes" xml:space="preserve">
          <source>The animation's keyframes are defined next; they describe an animation which causes the box to migrate from the top-left corner of the container to the bottom-right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ff580a6c7684fe1843c3c6cc2504e10cc98d57" translate="yes" xml:space="preserve">
          <source>The animation's keyframes are described next, plotting a course from the top-left corner of the content box to the bottom-right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc75791f5ea0bc092650aacf88053d491ab1526" translate="yes" xml:space="preserve">
          <source>The answerer side of the connection will automatically begin ICE restart when new values are detected for the ICE ufrag and ICE password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d984c6b894f58dcc01adb62649a4b07c4dd6d28" translate="yes" xml:space="preserve">
          <source>The app looked up an entry, but the entry found is of the wrong type. For example, the app is asking for a directory, when the entry is really a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d5840dd29852a925a715b4ed29cac0b2c28082" translate="yes" xml:space="preserve">
          <source>The application is free to include any number of data items in a drag operation. Each data item is a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt; of a particular &lt;code&gt;type&lt;/code&gt;, typically a MIME type such as &lt;code&gt;text/html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e5ef4ae65a826265d93791b6027d6c7349527a" translate="yes" xml:space="preserve">
          <source>The application uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; elements for the touch areas and provides buttons to enable logging and clear the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0959c7f082b6ffed539c2006d05ccab2fd07a44" translate="yes" xml:space="preserve">
          <source>The application uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; elements for the touch areas and provides buttons to enable logging and to clear the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e818e60da7b65bcfec77e269509a673b547bf2" translate="yes" xml:space="preserve">
          <source>The application uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; elements to represent four touch areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f8d0e8e605d1cde2d304f195745fb994fda583" translate="yes" xml:space="preserve">
          <source>The application uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; to define the pointers' target areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d8bc3242d39ff29a9f8ee893e6c3a39049460e" translate="yes" xml:space="preserve">
          <source>The application uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; to define three different touch target areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7b15164ec61b7dca1f75f7a017702dfa7945d9" translate="yes" xml:space="preserve">
          <source>The application uses a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element for the touch area and provides buttons to enable logging and to clear the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fabeeb5dc58d4d575bde1149927c56e8a9fe596" translate="yes" xml:space="preserve">
          <source>The arc begins at the point specified by &lt;code&gt;moveTo()&lt;/code&gt;: (230, 20). It is shaped to fit control points at (90, 130) and (20, 20), and has a radius of 50. The &lt;code&gt;lineTo()&lt;/code&gt; method connects the arc to (20, 20) with a straight line. Note that the arc's second control point and the point specified by &lt;code&gt;lineTo()&lt;/code&gt; are the same, which produces a totally smooth corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158db5e15b785c9d995055723fa4391bdb8c6781" translate="yes" xml:space="preserve">
          <source>The arc is given an x coordinate of 100, a y coordinate of 75, and a radius of 50. To make a full circle, the arc begins at an angle of 0 radians (0&lt;strong&gt;&amp;deg;&lt;/strong&gt;), and ends at an angle of 2&amp;pi; radians (360&lt;strong&gt;&amp;deg;&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2469bdb6fbe6bcf47f8cebe79542b4af2316d4" translate="yes" xml:space="preserve">
          <source>The arc's radius. Must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50acd9e4269d76b173d6fb09aaaf7fafdea3d49" translate="yes" xml:space="preserve">
          <source>The argument &lt;code&gt;callback&lt;/code&gt; is a function that will be called asynchronously with &lt;code&gt;true&lt;/code&gt; as the only argument if HTML parsing is supported and &lt;code&gt;false&lt;/code&gt; as the only argument if HTML parsing is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32297a0beb94ab00e878e38bbe132cedd33da005" translate="yes" xml:space="preserve">
          <source>The argument is now optional as required by the spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587b910ad84200f59a38d9b0fe22bb92a7f2b51b" translate="yes" xml:space="preserve">
          <source>The argument is optional and not required by the spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3758eed2260a21627bedc46ba0cb807346e40d0d" translate="yes" xml:space="preserve">
          <source>The arguments of the &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd3a132179256bb7b9017585e2c6b066e469043" translate="yes" xml:space="preserve">
          <source>The array (&lt;code&gt;arr&lt;/code&gt;) has a length of &lt;code&gt;40000&lt;/code&gt;: it consists of 10,000 pixels, each of which is defined by 4 values. The &lt;code&gt;ImageData&lt;/code&gt; constructor specifies a &lt;code&gt;width&lt;/code&gt; of &lt;code&gt;200&lt;/code&gt; for the new object, so its &lt;code&gt;height&lt;/code&gt; defaults to 10,000 divided by 200, which is &lt;code&gt;50&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f0b6a45d1003245078896258f90852fc2f5336" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;redrawList&lt;/code&gt; will be used to keep a list of all the ads which need to be redrawn during this refresh cycle, since it may not be exactly the same as the elapsed time due to system activity or because you've set the interval to something other than every 1000 milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c916a1485b57bf62ca30c0473c5ce3dc1859b7e" translate="yes" xml:space="preserve">
          <source>The array of vertices is created next, as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; with six coordinates (three 2D vertices) per triangle to be drawn, for a total of 12 values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3ea3e65da8f7c4b65c1da2a62251e8c8e8b334" translate="yes" xml:space="preserve">
          <source>The array that &lt;code&gt;forEach()&lt;/code&gt; is being applied to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0520b5eb0e4c2ce715ffd33be63b5572e52b7c" translate="yes" xml:space="preserve">
          <source>The article &quot;&lt;a href=&quot;http://www.stevesouders.com/blog/2015/08/07/dominteractive-is-it-really/&quot;&gt;domInteractive: is it? really?&lt;/a&gt;&quot; explaining when you can use this property as a proxy for the user experience of loading a Web site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8377cfff93a78bfae5c684d81535ddbe74891e2" translate="yes" xml:space="preserve">
          <source>The articles below provide additional guidance and how-to information that will help you learn to use the API, and how to perform specific tasks that you may wish to handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f60b2a4d52425808c529d2cae92b722cbcac94" translate="yes" xml:space="preserve">
          <source>The assertion is returned through the WebAuthn API as the &lt;a href=&quot;../authenticatorassertionresponse&quot;&gt;AuthenticatorAssertionResponse&lt;/a&gt;. The assertion format is fairly simple as it contains four basic ArrayBuffers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6418c3911385f95048947fd269baf481137f9db8" translate="yes" xml:space="preserve">
          <source>The associated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c2ffd08921f1376f6caafa2f83b25b27d1f96d" translate="yes" xml:space="preserve">
          <source>The associated &lt;a href=&quot;../readablebytestreamcontroller&quot;&gt;&lt;code&gt;ReadableByteStreamController&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5285a0e08445c3e97b3fa6cbf65dd36cf10574" translate="yes" xml:space="preserve">
          <source>The associated &lt;a href=&quot;../readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt; was constructed with &lt;code&gt;autoAllocateChunkSize&lt;/code&gt; set, but its value is not an integer or below 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2d1ad90ba7b9e89363dbe4b5106ea3c23ee0f6" translate="yes" xml:space="preserve">
          <source>The associated &lt;a href=&quot;../rtcrtptransceiver&quot;&gt;&lt;code&gt;RTCRtpTransceiver&lt;/code&gt;&lt;/a&gt; has its &lt;code&gt;currentDirection&lt;/code&gt; updated to include sending; if its current value is &lt;code&gt;&quot;recvonly&quot;&lt;/code&gt;, it becomes &lt;code&gt;&quot;sendrecv&quot;&lt;/code&gt;, and if its current value is &lt;code&gt;&quot;inactive&quot;&lt;/code&gt;, it becomes &lt;code&gt;&quot;sendonly&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8dd46663e2d0bee2ff3b4c1fd1194a401cbe89" translate="yes" xml:space="preserve">
          <source>The associated resource or media provider object (such as a &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;) has been found to be unsuitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357e2089b936a37e20352aac2acfe7be89c64a09" translate="yes" xml:space="preserve">
          <source>The associated resource or media provider object (such as a &lt;a href=&quot;mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;) has been found to be unsuitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355ac30ac7dbe5bf63ec11fad24c3c7232909ecc" translate="yes" xml:space="preserve">
          <source>The asynchronous clipboard API is a relatively recent addition, and the process of implementing it in browsers is not yet complete. Due to both potential security concerns and technical complexities, the process of integrating this API is happening gradually in most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd781630eee56baccc548340368b34074072ec5b" translate="yes" xml:space="preserve">
          <source>The attestation is returned through the WebAuthn API as the &lt;a href=&quot;../authenticatorattestationresponse&quot;&gt;AuthenticatorAttestationResponse&lt;/a&gt;. The attestation format contains two basic ArrayBuffers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a27b3a9ad2e28a9527b91662148e284d3f8db3f" translate="yes" xml:space="preserve">
          <source>The attribute's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6139b4e8bf2573715eb494fd5d445d9cbe277c84" translate="yes" xml:space="preserve">
          <source>The attribute's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801b79c4681cb93a27587969ad0b525c894bac24" translate="yes" xml:space="preserve">
          <source>The attributes &lt;code&gt;tabindex&lt;/code&gt; and &lt;code&gt;accesskey&lt;/code&gt;, are now defined on &lt;a href=&quot;htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662a1740156260ba61a06d085acee58dfc842768" translate="yes" xml:space="preserve">
          <source>The attributes &lt;code&gt;tabindex&lt;/code&gt; and &lt;code&gt;accesskey&lt;/code&gt;, as well as the methods &lt;code&gt;blur()&lt;/code&gt; and &lt;code&gt;focus()&lt;/code&gt; are now defined on &lt;a href=&quot;htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0e5397d4f0932fa66098f769904841083f2821" translate="yes" xml:space="preserve">
          <source>The audio is involved in interactive elements, such as responding to user actions or needing to coincide with visual cues such as a video or game action. The user agent should select the lowest possible latency that doesn't cause glitches in the audio. This is likely to require increased power consumption. &lt;strong&gt;This is the default value.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e304c85aefde63f878bc57ec70895f2fa1a872" translate="yes" xml:space="preserve">
          <source>The audio is muted when the media plays backwards or if the fast forward or slow motion is outside a useful range (for example, Gecko mutes the sound outside the range &lt;code&gt;0.25&lt;/code&gt; to &lt;code&gt;5.0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9103b26c600977b01559dab6054b407226fd9557" translate="yes" xml:space="preserve">
          <source>The audio routing graph</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7640b8b7b9241a18925c52a98ed91d56026aba9c" translate="yes" xml:space="preserve">
          <source>The audio transceiver's &lt;code&gt;RTCRtpSender&lt;/code&gt;'s &lt;a href=&quot;../rtcrtpsender/replacetrack&quot;&gt;&lt;code&gt;replaceTrack()&lt;/code&gt;&lt;/a&gt; method is used to set the outgoing audio track to the first track of the microphone's audio stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227b66b66df365ef1bdb034df2a616aa9b89597f" translate="yes" xml:space="preserve">
          <source>The audio transceiver's &lt;code&gt;RTCRtpSender&lt;/code&gt;'s track is replaced with the specified stream's first audio track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="156749d85d26b7a3a85324e9b1d3a50597ee443a" translate="yes" xml:space="preserve">
          <source>The audio transceiver's direction is set to &lt;code&gt;&quot;sendrecv&quot;&lt;/code&gt;, indicating that it should return to both sending and receiving streamed audio, instead of only sending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44d6fbf0530d359eea3504cd22941a2010e038a" translate="yes" xml:space="preserve">
          <source>The availability of full-screen mode can be controlled using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy&quot;&gt;Feature Policy&lt;/a&gt;. The full-screen mode feature is identified by the string &lt;code&gt;&quot;fullscreen&quot;&lt;/code&gt;, with a default allow-list value of &lt;code&gt;&quot;self&quot;&lt;/code&gt;, meaning that full-screen mode is permitted in top-level document contexts, as well as to nested browsing contexts loaded from the same origin as the top-most document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55828aaf34cec7d872016d8e1c0dc495ea3264c" translate="yes" xml:space="preserve">
          <source>The availability of most WebGL extensions depends on the client. When using WebGL extensions, if possible, try to make them optional by gracefully adapting to the case there they are not supported. Starting in Firefox 10, the &lt;code&gt;webgl.disable-extensions&lt;/code&gt; preference allows simulating the absence of all extensions, to test portability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b0e557570be48d0ce12875cf368fe4a18d9c37" translate="yes" xml:space="preserve">
          <source>The background color of the touch areas will change as follows: no active touches is &lt;code&gt;white&lt;/code&gt;; one active touch is &lt;code&gt;yellow&lt;/code&gt;; two simultaneous touches is &lt;code&gt;ping&lt;/code&gt; and three or more simultaneous touches is &lt;code&gt;lightblue&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86c097abffbd96db6ac92bb1b18d70d4de5a32a" translate="yes" xml:space="preserve">
          <source>The background color of the touch areas will change as follows: no touch is &lt;code&gt;white&lt;/code&gt;; one touch is &lt;code&gt;yellow&lt;/code&gt;; two simultaneous touches is &lt;code&gt;pink&lt;/code&gt;, and three or more simultaneous touches is &lt;code&gt;lightblue&lt;/code&gt;. See &lt;a href=&quot;#Touch_move&quot;&gt;touch move&lt;/a&gt; for information about the background color changing when a 2-finger move/pinch/zoom is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3569ec1ff64b059622b41dd2ffb435e86b50cb52" translate="yes" xml:space="preserve">
          <source>The background elements also have &lt;code&gt;playbackRate&lt;/code&gt;s that are impacted when you click or tap. What happens when you make Alice and the Red Queen run twice as fast? What happens when you let them slow down?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7323742665d783a71fe5952f9853f28937e77fe" translate="yes" xml:space="preserve">
          <source>The backing store size in relation to the canvas element. See &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/canvas/hidpi/&quot;&gt;High DPI Canvas&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b56a920f5e732af8be01b8478721c25c02eecd8" translate="yes" xml:space="preserve">
          <source>The base 2 log of the absolute value of the maximum value that can be represented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8277890abeaccf29e0e3f32e712cc90312496a04" translate="yes" xml:space="preserve">
          <source>The base 2 log of the absolute value of the minimum value that can be represented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1aa867591b723922962aa42e82683cc14ea502" translate="yes" xml:space="preserve">
          <source>The base URL is used to &lt;a href=&quot;http://developers.whatwg.org/urls.html#resolving-urls&quot;&gt;resolve&lt;/a&gt; relative URLs when the browser needs to obtain an absolute URL, for example when processing the HTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;src&lt;/code&gt; attribute or XML &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XLink&quot;&gt;xlink&lt;/a&gt;:href&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e21db5158f4702fa41c94c4eb8ca29340bdb6fd" translate="yes" xml:space="preserve">
          <source>The base URL of a &lt;em&gt;document&lt;/em&gt; defaults to the document's address (as displayed by the browser and available in &lt;a href=&quot;../window/location&quot;&gt;&lt;code&gt;window.location&lt;/code&gt;&lt;/a&gt;), but can change from the default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad167965862efa794b7232df33a2d10a06ac8c88" translate="yes" xml:space="preserve">
          <source>The base URL of a document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a77b8888dd43c32895852c8726cc00961c5a61" translate="yes" xml:space="preserve">
          <source>The base URL of an &lt;em&gt;element&lt;/em&gt; in HTML normally equals the base URL of the document the node is in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4eda76e1332ddc63faa5d257aff76839b3a22d" translate="yes" xml:space="preserve">
          <source>The base URL of an element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7564f172378dc9c343916c5162060538d2a71f32" translate="yes" xml:space="preserve">
          <source>The base value of the given attribute before applying any animations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24669074589be646d1ce1de53dadd7ad932aa05" translate="yes" xml:space="preserve">
          <source>The basic &lt;code&gt;style&lt;/code&gt; object exposes the &lt;a href=&quot;../stylesheet&quot;&gt;&lt;code&gt;Stylesheet&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../cssstylesheet&quot;&gt;&lt;code&gt;CSSStylesheet&lt;/code&gt;&lt;/a&gt; interfaces. Those interfaces contain members like &lt;code&gt;insertRule&lt;/code&gt;, &lt;code&gt;selectorText&lt;/code&gt;, and &lt;code&gt;parentStyleSheet&lt;/code&gt; for accessing and manipulating the individual style rules that make up a CSS stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad02f2b89fa98debf5984189269da976b5a271d" translate="yes" xml:space="preserve">
          <source>The basic Web Animations API features discussed in this article are available by default in Firefox 48+ and Chrome 36+. Webkit and Edge have moved the API onto their respective to-do lists, but until we see full support across all browsers, there&amp;rsquo;s a &lt;a href=&quot;https://github.com/web-animations/web-animations-js&quot;&gt;handy maintained polyfill&lt;/a&gt; that tests for feature support and adds it where necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af264f3d6dfe87d1ea4b9cd51fdb9c018fb3a973" translate="yes" xml:space="preserve">
          <source>The basic idea is to use &lt;a href=&quot;../windoworworkerglobalscope/setinterval&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; at some arbitrary delay that corresponds to a desired frame rate. After every interval an update function will repaint the canvas showing the current view. I know I could have started with a simpler example, but I'm sure the canvas tutorial will &lt;a href=&quot;tutorial/basic_animations&quot;&gt;get to that&lt;/a&gt;, and I wanted to see if I could do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9f4a60dab03f2a9fef0d18aaee5d386adef6e3" translate="yes" xml:space="preserve">
          <source>The basic pattern that IndexedDB encourages is the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68689f49484c14b96441f0a0b7d5da8f1fa50590" translate="yes" xml:space="preserve">
          <source>The basic steps to create the table in sample1.html are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8812548ac4c7933e222479a9da49370b3513663" translate="yes" xml:space="preserve">
          <source>The basic usage of Streams hinges around making responses available as streams. For example, the response &lt;a href=&quot;body&quot;&gt;&lt;code&gt;Body&lt;/code&gt;&lt;/a&gt; returned by a successful &lt;a href=&quot;windoworworkerglobalscope/fetch&quot;&gt;fetch request&lt;/a&gt; can be exposed as a &lt;a href=&quot;readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt;, and you can then read it using a reader created with &lt;a href=&quot;readablestream/getreader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt;, cancel it with &lt;a href=&quot;readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7a1e79deca9ce13b590c6b3440a4ec69eb8a2d" translate="yes" xml:space="preserve">
          <source>The basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af03ca3848486db3ba57aaad31291cfb65190eb5" translate="yes" xml:space="preserve">
          <source>The basics of making a payment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841f56b0f0a5f87444c06045bf919bc9817cbbbd" translate="yes" xml:space="preserve">
          <source>The before parameter is optional. So the following is accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e48f373aee974078909f6c00e26b4e33cd37c1e" translate="yes" xml:space="preserve">
          <source>The behavior described above is new, and is only available as of the following browser releases: Firefox 50, Google Chrome 31 (approximately).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cb893f89b4b4b3a3517feef50e174ca71f3aa5" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;element.getElementsByTagNameNS&lt;/code&gt; changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for &quot;foo&quot; would match &quot;Foo&quot; or &quot;foo&quot;. In Firefox 3.6 and later this function is now case-sensitive so that a query for &quot;foo&quot; will only match &quot;foo&quot; and not &quot;Foo&quot;. For more background on this, please see the &lt;a href=&quot;https://bugzil.la/542185#c5&quot;&gt;comment from Henri Sivonen about the change&lt;/a&gt;. You can also look at the &lt;a href=&quot;https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names&quot;&gt;relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40550d223449d210ddac72d59d30585b7d6bd211" translate="yes" xml:space="preserve">
          <source>The behavior to adopt when an &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; was connected to multiple &lt;a href=&quot;pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt;s was unclear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1285c3203264b15a727641074e315448f5ae9066" translate="yes" xml:space="preserve">
          <source>The behaviours is that an editing host gains focus if the previous selection was outside of it, but then a Selection API method is called that causes a new selection to be made with a selection range inside the editing host. Focus then moves to the editing host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea917098966d6fbf71ceedc1755f6b108a73cef6" translate="yes" xml:space="preserve">
          <source>The below code demonstrates a simple usage of &lt;code&gt;createDynamicsCompressor()&lt;/code&gt; to add compression to an audio track. For a more complete example, have a look at our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/compressor-example/&quot;&gt;basic Compressor example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/compressor-example&quot;&gt;view the source code&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a7ab4017b855143d58e92642a43ac3602f2276" translate="yes" xml:space="preserve">
          <source>The below graphic shows a summary of the available service worker events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73685dfc1523490d8e8a8b0bd634b61292f86f95" translate="yes" xml:space="preserve">
          <source>The below polyfill will bring support to IE5-IE8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0a53deb9465e65e743e6df6cccdca1388f5420" translate="yes" xml:space="preserve">
          <source>The below polyfill will correct the input of the arguments of &lt;code&gt;insertRule&lt;/code&gt; to standardize them in Internet Explorer 5&amp;ndash;8. It supplements &lt;code&gt;insertRule&lt;/code&gt; with a function that separates the selector from the rules before sending the arguments to the default native &lt;code&gt;insertRule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1da9c625804410660ecc63c560a868921c5d04" translate="yes" xml:space="preserve">
          <source>The below polyfill will only furfill the specs demanded by the W3 (no character encodings other than UTF-8 are supported, unfortunately ☹️). It is designed to work in IE5 &quot;out of the box&quot;. However, in IE5-IE9, it will return a regular Array instead of a TypedArray. In such circumstances as these with such memory inefficient slow browsers, this polyfill (or any polyfill for that matter) would be impractical for large strings in such old browsers. Finally, note that you should run the below code through a minifier (especially closure compiler) to turn sequences like &lt;code&gt;0x1e &amp;lt;&amp;lt; 3&lt;/code&gt; into &lt;code&gt;0xf0&lt;/code&gt;. These sequences are not already precomputed because they serve to aesthetically illustrate how the polyfill works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec26cc677633e4cc61f80a9aa35d11aadfbe6f5c" translate="yes" xml:space="preserve">
          <source>The below snippet wouldn't work as is &amp;mdash; for a complete working example, check out our &lt;a href=&quot;https://mdn.github.io/voice-change-o-matic/&quot;&gt;Voice-change-O-matic&lt;/a&gt; demo (&lt;a href=&quot;https://github.com/mdn/voice-change-o-matic/blob/gh-pages/scripts/app.js&quot;&gt;view source&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16ac50a3983b074da6a218914e823ce77359f3f" translate="yes" xml:space="preserve">
          <source>The best way to send binary content (e.g. in file uploads) is by using an &lt;a href=&quot;../arraybufferview&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; in conjunction with the &lt;code&gt;send()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943d5303ddd6f285b7d53fefc564a99b4495edc4" translate="yes" xml:space="preserve">
          <source>The best way to specify the preferred latency is to use a value form the string enum &lt;a href=&quot;../audiocontextlatencycategory&quot;&gt;&lt;code&gt;AudioContextLatencyCategory&lt;/code&gt;&lt;/a&gt;. In fact, the default value of &lt;code&gt;latencyHint&lt;/code&gt; is &lt;code&gt;&quot;interactive&quot;&lt;/code&gt; (meaning the browser should try to use the lowest possible and reliable latency it can).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3191cb81660ccdae623bd647db282b87530c3e25" translate="yes" xml:space="preserve">
          <source>The binary data type used by the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0092e4c3c929df181d2626c537a0827f591fb288" translate="yes" xml:space="preserve">
          <source>The blend equation determines how a new pixel is combined with a pixel already in the &lt;a href=&quot;../webglframebuffer&quot;&gt;&lt;code&gt;WebGLFramebuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7216d615b8802dae5ee77ac3302c76afc3d5b9dc" translate="yes" xml:space="preserve">
          <source>The blur event is raised when an element loses focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d6824ef8c680452a337da5e8f5196626f2969d" translate="yes" xml:space="preserve">
          <source>The body string of the notification as specified in the constructor's &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac265357cd777592cb76d6785f46d768346d21fd" translate="yes" xml:space="preserve">
          <source>The boombox sits inside a room (defined by the edges of the browser viewport), and in this demo, we can move and rotate it with the provided controls. When we move the boombox, the sound it produces changes accordingly, panning as it moves to the left or right of the room, or becoming quieter as it is moved away from the user or is rotated so the speakers are facing away from them, etc. This is done by setting the different properties of the &lt;code&gt;PannerNode&lt;/code&gt; object instance in relation to that movement, to emulate spacialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe1ba67b9f93089146e4581fe704c799b845658" translate="yes" xml:space="preserve">
          <source>The boost, in dB, to be applied; if negative, it will be an attenuation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075d080abbed4f6b352ad662a7518634f414fabd" translate="yes" xml:space="preserve">
          <source>The bound vertex array object (VAO).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15181c07d55018196e4a0fd045d001e1b8118642" translate="yes" xml:space="preserve">
          <source>The bounds are defined as an axis-aligned rectangle on the floor, for safety purposes. Content should not require the user to move beyond these bounds; however, it is possible for the user to ignore the bounds resulting in position values outside of this rectangle. The center of the rectangle is at (0,0,0) in standing-space coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6a71184220e0e5413e3d06feb0d1ff0280f0ee" translate="yes" xml:space="preserve">
          <source>The browser &lt;em&gt;may map generic pointer input to mouse events for compatibility with mouse-based content&lt;/em&gt;. This mapping of events is called &lt;em&gt;compatibility mouse events&lt;/em&gt;. Authors can prevent the production of certain compatibility mouse events by canceling the pointerdown event but note that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331714656a09751aad1e845f144a85fdbd5e9c88" translate="yes" xml:space="preserve">
          <source>The browser doesn't provide any object implementing this interface. It is the user who is expected to write one, tailoring the &lt;code&gt;acceptNode()&lt;/code&gt; method to its needs, and using it with some &lt;a href=&quot;treewalker&quot;&gt;&lt;code&gt;TreeWalker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;nodeiterator&quot;&gt;&lt;code&gt;NodeIterator&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0643add6da82e60c10b12a5bfcd2b197df9182" translate="yes" xml:space="preserve">
          <source>The browser doesn't provide any object implementing this method. It is the user who is expected to write an object implementing the &lt;a href=&quot;../nodefilter&quot;&gt;&lt;code&gt;NodeFilter&lt;/code&gt;&lt;/a&gt; interface, tailoring the &lt;code&gt;acceptNode()&lt;/code&gt; method to its needs, and using it with some &lt;a href=&quot;../treewalker&quot;&gt;&lt;code&gt;TreeWalker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../nodeiterator&quot;&gt;&lt;code&gt;NodeIterator&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbef98f9bd463881d80736aa435bcd09fccb7fb3" translate="yes" xml:space="preserve">
          <source>The browser invisibly prepares a fallback font. If the font face loads during this time, it's used to display the text and display is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bc4049b5d73789248e649c8287afe8572ecf2a" translate="yes" xml:space="preserve">
          <source>The browser is downloading HTMLMediaElement data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7287d609d256babb1ed4f478b58cadb6e5a9ec9d" translate="yes" xml:space="preserve">
          <source>The browser is in private browsing mode. Some browsers, have &quot;private browsing&quot; (Firefox) or &quot;incognito&quot; (Chrome) modes. At the end of the session, the browser wipes out the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c50087ff50154ece92d56d673e2391850bd305" translate="yes" xml:space="preserve">
          <source>The browser loads each listed script and executes it. Any global objects from each script may then be used by the worker. If the script can't be loaded, &lt;code&gt;NETWORK_ERROR&lt;/code&gt; is thrown, and subsequent code will not be executed. Previously executed code (including code deferred using &lt;a href=&quot;../windoworworkerglobalscope/settimeout&quot;&gt;&lt;code&gt;window.setTimeout()&lt;/code&gt;&lt;/a&gt;) will still be functional though. Function declarations &lt;strong&gt;after&lt;/strong&gt; the &lt;code&gt;importScripts()&lt;/code&gt; method are also kept, since these are always evaluated before the rest of the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492104cfc8617d7d111be81c69c6cf469521c2e8" translate="yes" xml:space="preserve">
          <source>The browser may decide to involve the user in the decision of whether to grant an incoming storage access request. Specifics regarding the lifetime of a storage grant and the circumstances under which the browser may decide to inform the user are currently being worked through and will be announced once ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168bd6ba58414a80dd708252febff188bee4ad2b" translate="yes" xml:space="preserve">
          <source>The browser may, however, choose to report a lower number of logical cores in order to represent more accurately the number of &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;s that can run at once, so don't treat this as an absolute measurement of the number of cores in the user's system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717cbd27ba1e8cef7e6e824b0463af5194285158" translate="yes" xml:space="preserve">
          <source>The browser will choose which of the above settings to apply. This is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669beef0cf0cdb1853d0ead376cc5f0f0943facf" translate="yes" xml:space="preserve">
          <source>The browser will fire &lt;code&gt;dataavailable&lt;/code&gt; events as needed, but you can also include a timeslice when invoking the &lt;code&gt;start()&lt;/code&gt; method &amp;mdash; for example &lt;code&gt;start(10000)&lt;/code&gt; &amp;mdash; to control this interval, or call &lt;a href=&quot;../mediarecorder/requestdata&quot;&gt;&lt;code&gt;MediaRecorder.requestData()&lt;/code&gt;&lt;/a&gt; to trigger an event when you need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7f7a56cccceb6e1d417edd1c45171a445d095e" translate="yes" xml:space="preserve">
          <source>The browser will present page navigation controls and possibly other user interface; the dimensions of the element (and the perceived size of the screen) will be clamped to leave room for this user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8792892e712906cd3d510f188698e65637ebc010" translate="yes" xml:space="preserve">
          <source>The browser will try to honor this, but may return other resolutions if an exact match is not available, or the user overrides it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3692234baa9f80f421e05b2f54228a28d477db39" translate="yes" xml:space="preserve">
          <source>The browser's navigation interface will be hidden and the entire dimensions of the screen will be allocated to the display of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa824add6a64cb294ecd49fd34c4fd8eee387ce" translate="yes" xml:space="preserve">
          <source>The budget regenerates at a rate of 10 ms per second, in both Firefox and Chrome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3763eaa9b7579b60bc99350d9af910ebf92bf0e3" translate="yes" xml:space="preserve">
          <source>The buffer size in units of sample-frames. If specified, the bufferSize must be one of the following values: 256, 512, 1024, 2048, 4096, 8192, 16384. If it's not passed in, or if the value is 0, then the implementation will choose the best buffer size for the given environment, which will be a constant power of 2 throughout the lifetime of the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3c2d1c7b81012e79cfe51da37e243d16035504" translate="yes" xml:space="preserve">
          <source>The buffer size must be in units of sample frames, i.e., one of: 256, 512, 1024, 2048, 4096, 8192, or 16384. It controls the frequency of callbacks asking for a buffer refill. Smaller sizes allow for lower latency and higher for better overall quality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fb96b8ffe8087581a40fafb0e5d57f0be40132" translate="yes" xml:space="preserve">
          <source>The button being pressed when the mouse event was fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5388d5063fd0606137bb7b6698c6803a080e7481" translate="yes" xml:space="preserve">
          <source>The button number that was pressed (if applicable) when the mouse event was fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe10f6da237b8c2b2add01cbf8a38e6f8c9ed18d" translate="yes" xml:space="preserve">
          <source>The buttons being depressed (if any) when the mouse event was fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5ea692d7f23c6dbab00e5e8eba80b41b2d2176" translate="yes" xml:space="preserve">
          <source>The buttons in the example simply run &lt;code&gt;getData()&lt;/code&gt; to load the track and start it playing, and stop it playing, respectively. When the &lt;code&gt;stop()&lt;/code&gt; method is called on the source, the source is cleared out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ad6c3b03d00da5a775089273ecdf7381a493c5" translate="yes" xml:space="preserve">
          <source>The calculation performed is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8708bfa23fa52e22c67b7fb716a9c92a7fff5da" translate="yes" xml:space="preserve">
          <source>The callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cdbc5a8113c53172ea2b43d15f7d90666139d2" translate="yes" xml:space="preserve">
          <source>The callback function itself has the same parameters and return value as the &lt;code&gt;handleEvent()&lt;/code&gt; method; that is, the callback accepts a single parameter: an object based on &lt;a href=&quot;../event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; describing the event which has occurred, and it returns nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d3ca84a9ddad9125659d4cedf9e7846e10e60d" translate="yes" xml:space="preserve">
          <source>The callback method is passed a single argument, a &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt;, which indicates the current time when callbacks queued by &lt;code&gt;requestAnimationFrame()&lt;/code&gt; begin to fire. Multiple callbacks in a single frame, therefore, each receive the same timestamp even though time has passed during the computation of every previous callback's workload. This timestamp is a decimal number, in milliseconds, but with a minimal precision of 1ms (1000 &amp;micro;s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e152d5b61e56c737d2c8f27e9b1fa3280526433" translate="yes" xml:space="preserve">
          <source>The callback parameter is a callback function which accepts one parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9b6c835a10bab43a6b4359e4b9d436ad886bbd" translate="yes" xml:space="preserve">
          <source>The callback return value is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5e50abea073be7ab4b7d468567c56848442b8e" translate="yes" xml:space="preserve">
          <source>The callback version optionally accepts a callback function that is called once the user has responded to the request to display permissions (as seen in the second &lt;code&gt;else ... if&lt;/code&gt; block below.) Commonly, you'll ask for permission to display notifications when your app is first initialized, and before trying to instantiate any. If you wanted to be really thorough, you could use a construct like the following (see &lt;a href=&quot;https://github.com/mdn/to-do-notifications/blob/gh-pages/scripts/todo.js#L305-L344&quot;&gt;To-do List Notifications&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7d88428495f5e1a392c6118a20313282489130" translate="yes" xml:space="preserve">
          <source>The caller calls &lt;a href=&quot;../rtcpeerconnection/createoffer&quot;&gt;&lt;code&gt;RTCPeerConnection.createOffer()&lt;/code&gt;&lt;/a&gt; to create an offer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ba7269e3938d4be9f80a9ace991c01e4124695" translate="yes" xml:space="preserve">
          <source>The caller calls &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt; to set that offer as the &lt;em&gt;local description&lt;/em&gt; (that is, the description of the local end of the connection).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd20f619e40c11c236c8047854285a7e696d5134" translate="yes" xml:space="preserve">
          <source>The caller calls &lt;a href=&quot;../rtcpeerconnection/setremotedescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setRemoteDescription()&lt;/code&gt;&lt;/a&gt; to set the answer as the remote description for its end of the call. It now knows the configuration of both peers. Media begins to flow as configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95bf91c3e82fda72680ac49b0d47f8299aabd68" translate="yes" xml:space="preserve">
          <source>The caller captures local Media via &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;navigator.mediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12bf753517a2baf35baca23aa7f6c1bf694effc" translate="yes" xml:space="preserve">
          <source>The caller creates &lt;code&gt;RTCPeerConnection&lt;/code&gt; and called &lt;a href=&quot;../rtcpeerconnection/addtrack&quot;&gt;&lt;code&gt;RTCPeerConnection.addTrack()&lt;/code&gt;&lt;/a&gt; (Since &lt;code&gt;addStream&lt;/code&gt; is deprecating)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a1f30ebb6dbb61a34c0410b60e5f84a77fd703" translate="yes" xml:space="preserve">
          <source>The caller creates and shares with the receiving peer a unique identifier or token of some kind so that the call between them can be identified by the code on the signaling server. The exact contents and form of this identifier is up to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235fe8c9e64eb8a7a3c3aacd89a932bfe403c01b" translate="yes" xml:space="preserve">
          <source>The caller receives the answer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99aa4081cf3d5e832e47134d04af8b24b87ea684" translate="yes" xml:space="preserve">
          <source>The caller uses the signaling server to transmit the offer to the intended receiver of the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f97ef0da38fb8f4a0b38fb3748a4230b98add8b" translate="yes" xml:space="preserve">
          <source>The caller's username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cc17f6a15f27022b1e0c7291c0a5ccb673715a" translate="yes" xml:space="preserve">
          <source>The camera hasn't done anything yet, and the points need to be moved again. Currently they are in world space, but they need to be moved to view space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9e8b0df33309d78309ed42f0613af3bffe00f9" translate="yes" xml:space="preserve">
          <source>The cancel event is raised when the user wants to cancel the given element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f7a2097755ebe9a4888743f541b89067f580f6" translate="yes" xml:space="preserve">
          <source>The candidate IP addresses are &lt;em&gt;always&lt;/em&gt; exposed to the application through &lt;code&gt;ip&lt;/code&gt;, and unsavory applications can in turn potentially reveal the address to the user. This can occur without the remote peer's consent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded42a3209fce016a21612a779259bec457746aa" translate="yes" xml:space="preserve">
          <source>The candidate is a host candidate, whose IP address as specified in the &lt;a href=&quot;ip&quot;&gt;&lt;code&gt;RTCIceCandidate.ip&lt;/code&gt;&lt;/a&gt; property is in fact the true address of the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cbf4357f12dd5775bd8b644f3984ec1c0704cd" translate="yes" xml:space="preserve">
          <source>The candidate is a host candidate, whose IP address as specified in the &lt;a href=&quot;rtcicecandidate/ip&quot;&gt;&lt;code&gt;RTCIceCandidate.ip&lt;/code&gt;&lt;/a&gt; property is in fact the true address of the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5aee96472261f4894f326d7ca6608ff1c2c09d" translate="yes" xml:space="preserve">
          <source>The candidate is a peer reflexive candidate; the &lt;code&gt;ip&lt;/code&gt; is an intermediary address assigned by the STUN server to represent the candidate's peer anonymously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99584ea4443cf5df2fe8c50899e0368dbd8c0c9" translate="yes" xml:space="preserve">
          <source>The candidate is a relay candidate, obtained from a TURN server. The relay candidate's IP address is an address the TURN server uses to forward the media between the two peers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3a0be37a6e6df8a96f37df353806a97daccb6e" translate="yes" xml:space="preserve">
          <source>The candidate is a server reflexive candidate; the &lt;code&gt;ip&lt;/code&gt; indicates an intermediary address assigned by the STUN server to represent the candidate's peer anonymously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660c5671212fdb2c47360e60435cce6a8fb89537" translate="yes" xml:space="preserve">
          <source>The candidate will use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/UDP&quot;&gt;UDP&lt;/a&gt; transport protocol for its data. This is the preferred protocol for media interactions because of its better performance profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511c69dccaad4dbc3794daccecdce2ce52443e2d" translate="yes" xml:space="preserve">
          <source>The candidate, if selected, would use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/TCP&quot;&gt;TCP&lt;/a&gt; as the transport protocol for its data. The &lt;a href=&quot;rtcicecandidate/tcptype&quot;&gt;&lt;code&gt;tcpType&lt;/code&gt;&lt;/a&gt; property provides additional information about the kind of TCP candidate represented by the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474686266a3df2dedd94a7a7d661fd8bcd0de14c" translate="yes" xml:space="preserve">
          <source>The candidate, if selected, would use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/TCP&quot;&gt;TCP&lt;/a&gt; as the transport protocol for its data. The &lt;a href=&quot;tcptype&quot;&gt;&lt;code&gt;tcpType&lt;/code&gt;&lt;/a&gt; property provides additional information about the kind of TCP candidate represented by the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a15db813d308e6ef8d3b64134fc540ecc3bcac" translate="yes" xml:space="preserve">
          <source>The canvas &lt;a href=&quot;../canvas_api&quot;&gt;overview&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Canvas_tutorial&quot;&gt;tutorial&lt;/a&gt; I found here at MDN are great, but nobody had written about animation yet, so I thought I'd try a port of a basic raycaster I'd worked on a while ago, and see what sort of performance we can expect from a JavaScript-controlled pixel buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec40874d42dba72864dcb6d418227bf3a53a2039" translate="yes" xml:space="preserve">
          <source>The canvas API is able to use any of the following data types as an image source:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519e9f1d68f5621d9bb3d4f3d75c4eaf99ef20eb" translate="yes" xml:space="preserve">
          <source>The canvas contains or may contain pixels which were loaded from an origin other than the one from which the document itself was loaded. To avoid &lt;code&gt;SecurityError&lt;/code&gt; being thrown in this situation, configure CORS to allow the source image to be use in this way. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image&quot;&gt;Allowing cross-origin use of images and canvas&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c84a316a8538540dd1cadf496790b9ef09b6895" translate="yes" xml:space="preserve">
          <source>The canvas in Safari 2.0.1 performed surprisingly well. With the blockiness factor cranked up to render slivers 8 pixels wide, I can run a 320 x 240 window at 24 fps on my Apple mini. Firefox 1.5 Beta 1 is even faster; I can run 320 x 240 at 24 fps with 4 pixel slivers. Not exactly a new member of the ID software family, but pretty decent considering it's a fully interpreted environment, and I didn't have to worry about memory allocation or video modes or coding inner routines in assembler or anything. The code does attempt to be very efficient, using array look-ups of pre-computed values, but I'm no optimization guru, so things could probably be written faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce21d5825e8a2ce53a1e817f69052ead9601db0" translate="yes" xml:space="preserve">
          <source>The canvas is initially blank. To display something, a script first needs to access the rendering context and draw on it. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element has a method called &lt;a href=&quot;../../htmlcanvaselement/getcontext&quot;&gt;&lt;code&gt;getContext()&lt;/code&gt;&lt;/a&gt;, used to obtain the rendering context and its drawing functions. &lt;code&gt;getContext()&lt;/code&gt; takes one parameter, the type of context. For 2D graphics, such as those covered by this tutorial, you specify &lt;code&gt;&quot;2d&quot;&lt;/code&gt; to get a &lt;a href=&quot;../../canvasrenderingcontext2d&quot;&gt;&lt;code&gt;CanvasRenderingContext2D&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b615d1e256bef3d452f1aed7362d7f4cc381fc" translate="yes" xml:space="preserve">
          <source>The canvas rendering context provides two methods to render text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f4aeb290152ac4b06bca1ec3074a9d0eaa11de" translate="yes" xml:space="preserve">
          <source>The canvas state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb0e8129b1508e698afb76db496a148f67ac1f6" translate="yes" xml:space="preserve">
          <source>The canvas's bitmap is not origin clean; at least some of its contents come from secure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e406d77c4964f575cb0f212736b9789d87336442" translate="yes" xml:space="preserve">
          <source>The canvas's bitmap is not origin clean; at least some of its contents have or may have been loaded from a site other than the one from which the document itself was loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12a2fa79a5a907e136587faabde3cd30b7cc5ee" translate="yes" xml:space="preserve">
          <source>The capitalization of &lt;code&gt;&quot;Id&quot;&lt;/code&gt; in the name of this method &lt;em&gt;must&lt;/em&gt; be correct for the code to function; &lt;code&gt;getElementByID()&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; valid and will not work, however natural it may seem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6e11114727b3cdd44c35fe7a0d5f48b982b158" translate="yes" xml:space="preserve">
          <source>The caret location will be within this node. This value can also be set to &lt;code&gt;null&lt;/code&gt; &amp;mdash; if &lt;code&gt;null&lt;/code&gt; is specified, the method will behave like &lt;a href=&quot;removeallranges&quot;&gt;&lt;code&gt;Selection.removeAllRanges()&lt;/code&gt;&lt;/a&gt;, i.e. all ranges will be removed from the selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09792daeb89e0dea60de1ab3e937936fd460008" translate="yes" xml:space="preserve">
          <source>The center of rotation is blue. The non-rotated rectangle is gray, and the rotated rectangle is red.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb1ee466895d5abc3b7909f4dcb64f365e3f050" translate="yes" xml:space="preserve">
          <source>The center of the range of frequencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1e0c7d9a5ffa7b6c531b9ba31f7f9724151f84" translate="yes" xml:space="preserve">
          <source>The central (&lt;code&gt;C&lt;/code&gt;) is mixed with the lateral non-surround channels (&lt;code&gt;L&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt;). As it is mixed down to two channels, it is mixed at a lower power: in each case it is multiplied by &lt;code&gt;&amp;radic;2/2&lt;/code&gt;. The surround channels are passed unchanged. The subwoofer (&lt;code&gt;LFE&lt;/code&gt;) channel is lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f1ebcb6ad7e807b3257edec4544698d6fcca0c" translate="yes" xml:space="preserve">
          <source>The central channel (&lt;code&gt;C&lt;/code&gt;) is summed with each lateral surround channel (&lt;code&gt;SL&lt;/code&gt; or &lt;code&gt;SR&lt;/code&gt;) and mixed to each lateral channel. As it is mixed down to two channels, it is mixed at a lower power: in each case it is multiplied by &lt;code&gt;&amp;radic;2/2&lt;/code&gt;. The subwoofer (&lt;code&gt;LFE&lt;/code&gt;) channel is lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19033caa53fd4bb1b48d2f950b16094b3fafa98" translate="yes" xml:space="preserve">
          <source>The change starts at the time specified in &lt;code&gt;startTime&lt;/code&gt; and exponentially moves towards the value given by the &lt;code&gt;target&lt;/code&gt; parameter. The decay rate as defined by the &lt;code&gt;timeConstant&lt;/code&gt; parameter is exponential; therefore the value will never reach &lt;code&gt;target&lt;/code&gt; completely, but after each timestep of length &lt;code&gt;timeConstant&lt;/code&gt;, the value will have approached &lt;code&gt;target&lt;/code&gt; by another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679a0bd39741c2dff1a12b9bb72397cdf4caa0f3" translate="yes" xml:space="preserve">
          <source>The changes to the &lt;code&gt;drawScene()&lt;/code&gt; function are simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf60a13fed3cece1ba504f80691950c186d316a5" translate="yes" xml:space="preserve">
          <source>The channel count is 1 for monaural sound, 2 for stereo, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525529130c43f13f39dd93ed5d9b84a5cd2e6236" translate="yes" xml:space="preserve">
          <source>The channel number of the current &lt;a href=&quot;../audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt; to copy the channel data to. If &lt;em&gt;channelNumber&lt;/em&gt; is greater than or equal to&lt;a href=&quot;numberofchannels&quot;&gt;&lt;code&gt;AudioBuffer.numberOfChannels&lt;/code&gt;&lt;/a&gt;, an &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5771583b83ab304a52cba81240417755b470d6" translate="yes" xml:space="preserve">
          <source>The channel number of the current &lt;code&gt;AudioBuffer&lt;/code&gt; to copy the channel data from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef140e053b6e080449b32999b8ca41bd38a19d6" translate="yes" xml:space="preserve">
          <source>The channel property is an index representing the particular channel to get data for. An index value of 0 represents the first channel. If the &lt;code&gt;channel&lt;/code&gt; index value is greater than of equal to &lt;a href=&quot;numberofchannels&quot;&gt;&lt;code&gt;AudioBuffer.numberOfChannels&lt;/code&gt;&lt;/a&gt;, an &lt;code&gt;INDEX_SIZE_ERR&lt;/code&gt; exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dbce2a93c45361e3b5d249d4807efa9a18692b" translate="yes" xml:space="preserve">
          <source>The cheapest option is to use a mobile device, supporting browser, and device mount (e.g. Google Cardboard). This won't be quite as good an experience as dedicated hardware, but you won't need to purchase a powerful computer or dedicated VR display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6e14d7b9c459542bd787976b5cf2ced8b6f897" translate="yes" xml:space="preserve">
          <source>The chunk to enqueue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e16ea65e194b46a12adbf83b3d140a4e3a5e744" translate="yes" xml:space="preserve">
          <source>The chunks inside the stream are read by a &lt;strong&gt;reader&lt;/strong&gt; &amp;mdash; this processes the data one chunk at a time, allowing you to do whatever kind of operation you want to do on it. The reader plus the other processing code that goes along with it is called a &lt;strong&gt;consumer&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17567c20a250ee48d2750efcad788937ee6bb0b8" translate="yes" xml:space="preserve">
          <source>The chunks placed in a stream are said to be &lt;strong&gt;enqueued&lt;/strong&gt; &amp;mdash; this means they are waiting in a queue ready to be read. An &lt;strong&gt;internal queue&lt;/strong&gt; keeps track of the chunks that have not yet been read (see the Internal queues and queueing strategies section below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83581c2d60d6329f9275faac9757de1e6fe4989a" translate="yes" xml:space="preserve">
          <source>The cleared area is rectangular in shape, with its top-left corner at (10, 10). The cleared area has a width of 120 and a height of 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e8ada21d0d89e233797491f8be90b8d781c04c" translate="yes" xml:space="preserve">
          <source>The client application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f8d33f29ac4d9618aa2154164d326d9ca665a3" translate="yes" xml:space="preserve">
          <source>The client can solicit extensions and/or subprotocols here; see &lt;a href=&quot;#Miscellaneous&quot;&gt;Miscellaneous&lt;/a&gt; for details. Also, common headers like &lt;code&gt;User-Agent&lt;/code&gt;, &lt;code&gt;Referer&lt;/code&gt;, &lt;code&gt;Cookie&lt;/code&gt;, or authentication headers might be there as well. Do whatever you want with those; they don't directly pertain to the WebSocket. It's also safe to ignore them. In many common setups, a reverse proxy has already dealt with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5043430147f404e4caae0ea9e728af59be974c6f" translate="yes" xml:space="preserve">
          <source>The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46e12b6ae114e158e28be08b9d132df5ae6b130" translate="yes" xml:space="preserve">
          <source>The client may close the connection if it doesn't get the subprotocol it wants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71eaf85a40885d104ebf43af3a30507e2572552" translate="yes" xml:space="preserve">
          <source>The client sends back to the server its cookies previously stored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd71a77e1664599a9fdaa682f81d8e26db85a93" translate="yes" xml:space="preserve">
          <source>The client will send a request to a STUN server on the Internet who will reply with the client&amp;rsquo;s public address and whether or not the client is accessible behind the router&amp;rsquo;s NAT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f65ddd11708b9c34e905663af5883f99a71d46" translate="yes" xml:space="preserve">
          <source>The client's type as a string. It can be &quot;&lt;code&gt;window&quot;&lt;/code&gt;, &quot;&lt;code&gt;worker&quot;&lt;/code&gt;, or &quot;&lt;code&gt;sharedworker&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca01e0a8a45abca0848f4733d630eeef05e858c" translate="yes" xml:space="preserve">
          <source>The clientDataJSON object is an ArrayBuffer containing a JSON String of the various browser data that was used for the WebAuthn create() or get() call. It is included in both an AuthenticatorAttestationResponse and an AuthenticatorAssertionResponse within a PublicKeyCredential. The reason for storing the data as a ArrayBuffer rather than a String or an actual JavaScript object is that the object is effectively signed over by the authenticator, and if the order of the properties of the JavaScript object were not preserved then the signature verification would fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78478f829e7f90cc82e2f6fd155599be493da178" translate="yes" xml:space="preserve">
          <source>The clipping of points and polygons from clip space actually happens after the homogeneous coordinates have been transformed back into Cartesian coordinates (by dividing by w). This final space is known as &quot;normalized device coordinates&quot; or NDC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf5e3d206123a8265141318cc82ad6b26b40558" translate="yes" xml:space="preserve">
          <source>The clipping region is a full circle, with its center at (100, 75), and a radius of 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2ff4d8c64db30b2af1c33c63b11af2fd4a0c07" translate="yes" xml:space="preserve">
          <source>The clockwise rotation of the transducer (e.g. pen stylus) around its major axis in degrees, with a value in the range 0 to 359.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1933ba6686d4ebff1072960c370835e779af438" translate="yes" xml:space="preserve">
          <source>The code I ended up with is a regurgitated amalgam of the raycaster chapters from an old Andr&amp;eacute; LaMothe&lt;em&gt;Tricks of the Game Programming Gurus&lt;/em&gt; book (&lt;small&gt;ISBN: 0672305070&lt;/small&gt;), and a &lt;a href=&quot;http://www.shinelife.co.uk/java-maze/&quot;&gt;java raycaster&lt;/a&gt; I found online, filtered through my compulsion to rename everything so it makes sense to me, and all the tinkering that had to be done to make things work well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d72bc30661df8546ec2471fe4bdda329ceacc7" translate="yes" xml:space="preserve">
          <source>The code above generates an event every second, with the event type &quot;ping&quot;. Each event's data is a JSON object containing the ISO 8601 timestamp corresponding to the time at which the event was generated. At random intervals, a simple message (with no event type) is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4fa12e4f1f0a8fb05d7ae4162deb147bc9e609" translate="yes" xml:space="preserve">
          <source>The code above produces console output something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138b170aa26eabecd54b8a10bf1c3d2be617d2fe" translate="yes" xml:space="preserve">
          <source>The code above works in Firefox up to version 55, but version 55 onwards will output a warning to console, because &lt;code&gt;&quot;codecs&quot;&lt;/code&gt; is not included in the &lt;code&gt;contentType&lt;/code&gt; strings. This could be corrected as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6118440b4339268bc6a245c7f1e8e36d8aa4649d" translate="yes" xml:space="preserve">
          <source>The code also handles exceptions thrown from the &lt;a href=&quot;../windoworworkerglobalscope/fetch&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.fetch&lt;/code&gt;&lt;/a&gt; operation. Note that an HTTP error response (e.g., 404) will not trigger an exception. It will return a normal response object that has the appropriate error code set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fafa17f1831352591b47219c3d3185efa5e6ce5" translate="yes" xml:space="preserve">
          <source>The code also handles exceptions thrown from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt; operation. Note that an HTTP error response (e.g., 404) will not trigger an exception. It will return a normal response object that has the appropriate error code set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2d6aa5eba9344ada41716fc21d4de27de0d614" translate="yes" xml:space="preserve">
          <source>The code begins by creating a new &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; object into which the text will be placed for sending to the clipboard. &lt;a href=&quot;../datatransferitemlist/add&quot;&gt;&lt;code&gt;DataTransferItemList.add()&lt;/code&gt;&lt;/a&gt; is called to add the text to the &lt;code&gt;DataTransfer&lt;/code&gt;, then &lt;code&gt;write()&lt;/code&gt; is called, specifying both a fulfillment function and an error function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646d493ba14861a92ed4d97dc30fd0b1a813a2ee" translate="yes" xml:space="preserve">
          <source>The code below is based on the sample the specification, though it adds a few things that make it function better. It shows a function called &lt;code&gt;viewportHandler()&lt;/code&gt;. When called it queries the offsetLeft and height properties for values it uses in a CSS &lt;code&gt;translate()&lt;/code&gt; method. You invoke this function by passing it to &lt;em&gt;both&lt;/em&gt; event calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cc3224488fd627b85b76d2e5806dbf9c5632b1" translate="yes" xml:space="preserve">
          <source>The code below parses a set of declarations for the &lt;code&gt;transform&lt;/code&gt; property. The second code block shows the structure of the returned object as it would be rendered in a developer tools console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e745f4c8d6f9700759c27d8d4a88538369e3317" translate="yes" xml:space="preserve">
          <source>The code below should be self-explanatory. We loop through the &lt;a href=&quot;../../document/images&quot;&gt;&lt;code&gt;document.images&lt;/code&gt;&lt;/a&gt; container and add new canvas elements accordingly. Probably the only thing to note, for those not so familiar with the DOM, is the use of the &lt;a href=&quot;../../node/insertbefore&quot;&gt;&lt;code&gt;Node.insertBefore&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;insertBefore()&lt;/code&gt; is a method of the parent node (a table cell) of the element (the image) before which we want to insert our new node (the canvas element).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a7a9527e49a88f4508e17db1fa2e7ffff87c93" translate="yes" xml:space="preserve">
          <source>The code creates a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; element by calling &lt;a href=&quot;document/createelement&quot;&gt;&lt;code&gt;Document.createElement()&lt;/code&gt;&lt;/a&gt;, then serializes it into XML using &lt;a href=&quot;xmlserializer/serializetostring&quot;&gt;&lt;code&gt;serializeToString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0e72ba7c5bada5c5551c420df42107070cebbc" translate="yes" xml:space="preserve">
          <source>The code examples in this tutorial can also be found in the &lt;a href=&quot;https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial&quot;&gt;webgl-examples GitHub repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1c4be069f9327ee78118eae0a189ea9a276a15" translate="yes" xml:space="preserve">
          <source>The code handles exceptions thrown from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Globalfetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt; operation. Note that an HTTP error response (e.g., 404) will not trigger an exception. It will return a normal response object that has the appropriate error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c782419d6501b616d2d69345ef769d550e373683" translate="yes" xml:space="preserve">
          <source>The code in lines 12-17 fetches any unprocessed mutation records and invokes the callback with that list of records so that they can be processed. This is done immediately prior to calling &lt;a href=&quot;disconnect&quot;&gt;&lt;code&gt;disconnect()&lt;/code&gt;&lt;/a&gt; to stop observing the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75977770ddfe03ca27cfcce3ebef99c336cf17d6" translate="yes" xml:space="preserve">
          <source>The code in lines 4-12 handle creating the new HTML document and inserting some content into it. Line 4 uses &lt;code&gt;createHTMLDocument()&lt;/code&gt; to construct a new HTML document whose &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title&quot;&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;&lt;/a&gt; is &quot;New Document&quot;. Lines 5 and 6 create a new paragraph element with some simple content, and then lines 8-12 handle inserting the new paragraph into the new document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9cf5170321f4ef0893d1ff943b47b041a081ea" translate="yes" xml:space="preserve">
          <source>The code is derived from the ISO 3166-2 standard, which defines codes for identifying the subdivisions (e.g., states, provinces, autonomous regions, etc.) of all countries in the world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3862a2f37d67d9648f8b7b64e36b6b5ea20ce2" translate="yes" xml:space="preserve">
          <source>The code is fetched from the HTML document by obtaining the value of the text node contained within the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/a&gt; element with the specified ID. Then a new shader of the specified type is created using &lt;a href=&quot;../webglrenderingcontext/createshader&quot;&gt;&lt;code&gt;gl.createShader()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c64bb57ec1727b0813d8ab87f9f3e7a8bd9642" translate="yes" xml:space="preserve">
          <source>The code is taken from the &lt;a href=&quot;../svgaelement#Example&quot;&gt;&quot;SVGAElement example code&quot;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b639cdac7de3bffa3114fc9b110a8285267f91f" translate="yes" xml:space="preserve">
          <source>The code looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86af9ab926cc420d76ad2245cb93b893b337e526" translate="yes" xml:space="preserve">
          <source>The code snippet also shows a best practice for versioning caches used by the service worker. Although this example has only one cache, you can use this approach for multiple caches. The code maps a shorthand identifier for a cache to a specific, versioned cache name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad6cee18503d873fd1e55bad55fa2dddda81963" translate="yes" xml:space="preserve">
          <source>The code snippet also shows a best practice for versioning caches used by the service worker. Though there's only one cache in this example, the same approach can be used for multiple caches. It maps a shorthand identifier for a cache to a specific, versioned cache name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d199749c3c8e3be76353135a44c1d897c2b88b" translate="yes" xml:space="preserve">
          <source>The code snippet also shows a best practice for versioning caches used by the service worker. Though there's only one cache in this example, the same approach can be used for multiple caches. It maps a shorthand identifier for a cache to a specific, versioned cache name. The code also deletes all caches that aren't named in &lt;code&gt;CURRENT_CACHES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1b4ba07efbf935e20599a5e2e4e724e6f92c77" translate="yes" xml:space="preserve">
          <source>The code that handles the &lt;code&gt;click&lt;/code&gt; event can look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ef368505a34c461a721919215b0466dee1f903" translate="yes" xml:space="preserve">
          <source>The code that interprets these incoming messages might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49af84d0bc1c7161d2b11f3ea506b3373fe401e" translate="yes" xml:space="preserve">
          <source>The code that loads the texture looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c6f841fa573aabef26de6abce9be2bc5c0739b" translate="yes" xml:space="preserve">
          <source>The code then uses &lt;a href=&quot;cache/match&quot;&gt;&lt;code&gt;Cache.match()&lt;/code&gt;&lt;/a&gt; to see if there's already a matching font in the cache, and if so, returns it. If there isn't a matching font, the code fetches the font from the network and uses &lt;a href=&quot;cache/put&quot;&gt;&lt;code&gt;Cache.put()&lt;/code&gt;&lt;/a&gt; to cache the fetched resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc59ac89e6c5aa48f687e161f308fd611500446" translate="yes" xml:space="preserve">
          <source>The code which handles the &lt;code&gt;&quot;userlist&quot;&lt;/code&gt; message calls &lt;code&gt;handleUserlistMsg()&lt;/code&gt;. Here we set up the handler for each connected user in the user list displayed to the left of the chat panel. This function receives a message object whose &lt;code&gt;users&lt;/code&gt; property is an array of strings specifying the user names of every connected user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed02bf196ac947243006656c4f8051599bbf1138" translate="yes" xml:space="preserve">
          <source>The codec's MIME media type and subtype specified as a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; of the form &lt;code&gt;&quot;type/subtype&quot;&lt;/code&gt;. IANA maintains a &lt;a href=&quot;https://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-2&quot;&gt;registry of valid MIME types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9247ec044053735afa3710c53d170f75b641d950" translate="yes" xml:space="preserve">
          <source>The coefficients of the Fourier transform should be given in &lt;em&gt;ascending&lt;/em&gt; order (i.e.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5869c433913a5299f773e5b8bca4190b234bba7b" translate="yes" xml:space="preserve">
          <source>The collection returned includes implicit &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody&quot;&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;&lt;/a&gt; elements. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0dee933138484bbf295cd95d4a43275769807e" translate="yes" xml:space="preserve">
          <source>The column number in the document or worker at which the violation occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c448d4698fc6295f788019b4bf18b10e22259016" translate="yes" xml:space="preserve">
          <source>The comma (&quot;,&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f14dac0cc7f9824f7af2230dba65f1b58a3a91" translate="yes" xml:space="preserve">
          <source>The command for which to determine support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c3a5d3e021757d59d461bd69da334d2ae0e594" translate="yes" xml:space="preserve">
          <source>The compatibility table on this page is generated from structured data. If you'd like to contribute to the data, please check out &lt;a href=&quot;https://github.com/mdn/browser-compat-data&quot;&gt;https://github.com/mdn/browser-compat-data&lt;/a&gt; and send us a pull request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0f57e0860e679407cdd21cf6c0b7f806e236ed" translate="yes" xml:space="preserve">
          <source>The complete vector is defined by the position of the audio source, given as (&lt;a href=&quot;positionx&quot;&gt;&lt;code&gt;positionX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;positiony&quot;&gt;&lt;code&gt;positionY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;positionz&quot;&gt;&lt;code&gt;positionZ&lt;/code&gt;&lt;/a&gt;), and the orientation of the audio source (that is, the direction in which it's facing), given as (&lt;a href=&quot;orientationx&quot;&gt;&lt;code&gt;orientationX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;orientationy&quot;&gt;&lt;code&gt;orientationY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;orientationz&quot;&gt;&lt;code&gt;orientationZ&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10245000a66cddebf9d9ef6280323aa69b2ec2c8" translate="yes" xml:space="preserve">
          <source>The compressed texture format is exposed by a constant and can be used with the &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; method (note that ETC1 is &lt;strong&gt;not&lt;/strong&gt; supported with the &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6da7ed37706cbce2a291cf295a11f18074fece2" translate="yes" xml:space="preserve">
          <source>The compressed texture formats are exposed by 10 constants and can be used in two functions: &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828ab09e1630ac5078501428ff4e423b3676bff2" translate="yes" xml:space="preserve">
          <source>The compressed texture formats are exposed by 28 constants and can be used in two functions: &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e54eae87c70107199f6ea4716559cb6aa07332f" translate="yes" xml:space="preserve">
          <source>The compressed texture formats are exposed by 3 constants and can be used in two functions: &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ac96a93963505cedb0cbde474d1b0a0b081f1b" translate="yes" xml:space="preserve">
          <source>The compressed texture formats are exposed by four constants and can be used in two functions: &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; (where the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; parameters must be powers of 2) and &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt; (where the the height and width parameters must equal the current values of the existing texture and the &lt;code&gt;xoffset&lt;/code&gt; and &lt;code&gt;yoffset&lt;/code&gt; parameters must be 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bf20d82098d58a0cc9177d9cc1f3ab4f66e764" translate="yes" xml:space="preserve">
          <source>The compressed texture formats are exposed by four constants and can be used in two functions: &lt;a href=&quot;webglrenderingcontext/compressedteximage2d&quot;&gt;&lt;code&gt;compressedTexImage2D()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;webglrenderingcontext/compressedtexsubimage2d&quot;&gt;&lt;code&gt;compressedTexSubImage2D()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199e097d5dc790ccd963963403068cd511d205c8" translate="yes" xml:space="preserve">
          <source>The computed offset for this keyframe, calculated when the list of computed keyframes was produced according to &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/spacing&quot;&gt;&lt;code&gt;KeyframeEffect.spacing&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Unlike &lt;code&gt;offset&lt;/code&gt; above, the &lt;code&gt;computedOffset&lt;/code&gt; is never &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ce4f374874f21d4b769a0f16533d2535fbf6ab" translate="yes" xml:space="preserve">
          <source>The configuration below establishes two ICE servers. The first one, &lt;code&gt;stun:stun.services.mozilla.com&lt;/code&gt;, requires authentication, so the username and password are provided. The second server has two URLs: &lt;code&gt;stun:stun.example.com&lt;/code&gt; and &lt;code&gt;stun:stun-1.example.com&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66649c8d57d3d0253d6f6251c5aadb75da09b992" translate="yes" xml:space="preserve">
          <source>The configuration of an endpoint on a WebRTC connection is called a &lt;strong&gt;session description&lt;/strong&gt;. The description includes information about the kind of media being sent, its format, the transfer protocol being used, the endpoint's IP address and port, and other information needed to describe a media transfer endpoint. This information is exchanged and stored using &lt;strong&gt;Session Description Protocol&lt;/strong&gt; (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SDP&quot;&gt;SDP&lt;/a&gt;); if you want details on the format of SDP data, you can find it in &lt;a href=&quot;https://tools.ietf.org/html/rfc2327&quot;&gt;RFC 2327&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aacd4a3c8c60c6b1f0e8116ec1503a4801132f" translate="yes" xml:space="preserve">
          <source>The configuration of the selected interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b6567172f0efb25a5b52fed1ba7f1b3170892c" translate="yes" xml:space="preserve">
          <source>The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41944216ae3d7ad0908685be980c996b5abd1615" translate="yes" xml:space="preserve">
          <source>The connection is closed or couldn't be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbeda7d5491c5915bff6a18eb04dc543cfc35b9" translate="yes" xml:space="preserve">
          <source>The connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27694a72e673ee8e198fb39daf07ec922070295" translate="yes" xml:space="preserve">
          <source>The connection is in the process of closing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594b7595f8aa3bc3cfbdec4a700540b2cd44641d" translate="yes" xml:space="preserve">
          <source>The connection is not actually closed until all transactions created using this connection are complete. No new transactions can be created for this connection once this method is called. Methods that create transactions throw an exception if a closing operation is pending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78e4a452107eca30d5a957dcb8e1648f6fd71c5" translate="yes" xml:space="preserve">
          <source>The connection is not currently &lt;code&gt;OPEN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb525b5bd8358e44888aaf5faf15dc9a8a515658" translate="yes" xml:space="preserve">
          <source>The connection is not open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956c41e1746d7111984a3cf55a92c84a4be4e79f" translate="yes" xml:space="preserve">
          <source>The connection is not yet open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a1130a886f1f556a27a7b7fb07efbeeb9fd30a" translate="yes" xml:space="preserve">
          <source>The connection is open and ready to communicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="935c5c659212e7a77a03a70ae058cfcf9b34d591" translate="yes" xml:space="preserve">
          <source>The connection object is useful for deciding whether to preload resources that take large amounts of bandwidth or memory. This example would be called soon after page load to check for a connection type where preloading a video may not be desirable. If a cellular connection is found, then the &lt;code&gt;preloadVideo&lt;/code&gt; flag is set to false. For simplicity and clarity, this example only tests for one connection type. A real-world use case would likely use a switch statement or some other method to check all of the possible values of &lt;a href=&quot;networkinformation/type&quot;&gt;&lt;code&gt;NetworkInformation.type&lt;/code&gt;&lt;/a&gt;. Regardless of the &lt;code&gt;type&lt;/code&gt; value you can get an estimate of connection speed through the &lt;a href=&quot;networkinformation/effectivetype&quot;&gt;&lt;code&gt;NetworkInformation.effectiveType&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3451cf1b9d10f2af0ff3c59eeb43a9cf62c8922" translate="yes" xml:space="preserve">
          <source>The connection's &lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;signalingState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&quot;closed&quot;&lt;/code&gt;, indicating that the connection is not currently open, so negotiation cannot take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6d06b0f380ada34b5a787fead9dc25e1bc7cfb" translate="yes" xml:space="preserve">
          <source>The console object also supports outputting a stack trace; this will show you the call path taken to reach the point at which you call &lt;a href=&quot;console/trace&quot;&gt;&lt;code&gt;console.trace()&lt;/code&gt;&lt;/a&gt;. Given code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883587ea6254ab8473f3a306ebc21d66db927c80" translate="yes" xml:space="preserve">
          <source>The constants and variables we set up here are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f45ea319c7828101775fb2cfa69a58d44f9067a" translate="yes" xml:space="preserve">
          <source>The constraint syntax described here is available as of Firefox 38. Earlier versions (32-37) used an outdated constraint syntax, but the syntax described here is available there through the &lt;a href=&quot;https://github.com/webrtc/adapter&quot;&gt;adapter.js&lt;/a&gt; polyfill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e77d5150d3ce13a598bb2298e6fd60f0a6f4e88" translate="yes" xml:space="preserve">
          <source>The constraints parameter is a &lt;code&gt;MediaStreamConstraints&lt;/code&gt; object with two members: &lt;code&gt;video&lt;/code&gt; and &lt;code&gt;audio&lt;/code&gt;, describing the media types requested. Either or both must be specified. If the browser cannot find all media tracks with the specified types that meet the constraints given, then the returned promise is rejected with &lt;code&gt;NotFoundError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2649890a831e8aea8872d865ddda53ac74b41191" translate="yes" xml:space="preserve">
          <source>The constructor accepts an encoding type label argument, but the value is ignored. Only &lt;code&gt;utf-8&lt;/code&gt; encoding is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49e86a4fd34539bf1c5a39097091245e60ba7b3" translate="yes" xml:space="preserve">
          <source>The constructor call in our example looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7719d5b709dafe33a4ced89d51231b9dc67c0a3b" translate="yes" xml:space="preserve">
          <source>The constructor can throw exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c84e3d9d3fb2c80cda05c64f1bffe489d503d6" translate="yes" xml:space="preserve">
          <source>The constructor for &lt;code&gt;Path2D&lt;/code&gt; objects in Edge does not support being invoked with a string consisting of SVG path data. See &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8438884/&quot;&gt;issue 8438884&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a6904d20227e657e96588c24e6cb989a3ef9be" translate="yes" xml:space="preserve">
          <source>The constructor for the named custom element, or &lt;code&gt;undefined&lt;/code&gt; if there is no custom element definition with that name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2851619df4898e990ad3fd5d5607e362260257" translate="yes" xml:space="preserve">
          <source>The constructor initializes an XMLHttpRequest. It must be called before any other method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4e24dca6ba31091cac6b1ca87bbfe8ef71dec1" translate="yes" xml:space="preserve">
          <source>The constructor looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dd6fbbd40aaab3d21a24b873fdc2fd788df9dc" translate="yes" xml:space="preserve">
          <source>The constructor takes a &lt;code&gt;url&lt;/code&gt; parameter, and an optional &lt;code&gt;base&lt;/code&gt; parameter to use as a base if the &lt;code&gt;url&lt;/code&gt; parameter is a relative URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a3d4af1b5ce12324ce719daa36ebacdcf16a1" translate="yes" xml:space="preserve">
          <source>The constructor takes two objects as parameters. The first object is required, and creates a model in JavaScript of the underlying sink the data is being written to. The second object is optional, and allows you to specify a &lt;a href=&quot;concepts#Internal_queues_and_queuing_strategies&quot;&gt;custom queueing strategy&lt;/a&gt; to use for your stream, which takes the form of an instance of &lt;a href=&quot;../bytelengthqueuingstrategy&quot;&gt;&lt;code&gt;ByteLengthQueuingStrategy&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../countqueuingstrategy&quot;&gt;&lt;code&gt;CountQueuingStrategy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc5bfcbd1ca625afbd5e61274fcd1e4c89fa8b0" translate="yes" xml:space="preserve">
          <source>The constructor takes two objects as parameters. The first object is required, and creates a model in JavaScript of the underlying source the data is being read from. The second object is optional, and allows you to specify a &lt;a href=&quot;concepts#Internal_queues_and_queuing_strategies&quot;&gt;custom queueing strategy&lt;/a&gt; to use for your stream. You&amp;rsquo;ll rarely have to do this, so we&amp;rsquo;ll just concentrate on the first one for now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be1977a965eb43444a2122352c2b99f4f5e6e64" translate="yes" xml:space="preserve">
          <source>The containing &lt;a href=&quot;cssrule&quot;&gt;&lt;code&gt;CSSRule&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4058a039218d72aeae15219dec6e300bb716bd" translate="yes" xml:space="preserve">
          <source>The content body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74ef71c97f893e898fde4e4237240b710712182" translate="yes" xml:space="preserve">
          <source>The content inside the &lt;code&gt;&amp;lt;canvas&amp;gt; ... &amp;lt;/canvas&amp;gt;&lt;/code&gt; tags can be used as a fallback for browsers which don't support canvas rendering. It's also very useful for assistive technology users (like screen readers) which can read and interpret the sub DOM in it. A good example at &lt;a href=&quot;http://www.html5accessibility.com/tests/canvas.html&quot;&gt;html5accessibility.com&lt;/a&gt; demonstrates how this can be done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3b1d2f47d72710aeb4257db6790de7610bb9af" translate="yes" xml:space="preserve">
          <source>The content is handled as raw text data (since nothing here is overriding the default &lt;a href=&quot;responsetype&quot;&gt;&lt;code&gt;responseType&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270bc93515a1193469fdefa3a2c4fd4449fb3d7d" translate="yes" xml:space="preserve">
          <source>The content is handled as raw text data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b82b1b4838933d188dad3266b49ece92406a9df" translate="yes" xml:space="preserve">
          <source>The content is styled using the CSS below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7599ed97b778008ce78d0cf54cbb4570ba638a1" translate="yes" xml:space="preserve">
          <source>The content of the &lt;a href=&quot;../speechsynthesisutterance/rate&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.rate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../speechsynthesisutterance/pitch&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.pitch&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../speechsynthesisutterance/volume&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.volume&lt;/code&gt;&lt;/a&gt; property was not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73a2f2dc1a7fcbbec5c7d953e1f78be103f470c" translate="yes" xml:space="preserve">
          <source>The content type to assign to the new &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;; this will be the value of its &lt;code&gt;type&lt;/code&gt; property. The default value is an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85bb72bd3720eca6f730b90ffcbbaeec2810fc1" translate="yes" xml:space="preserve">
          <source>The contents can be queried and retrieved:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5223188688ce48c99acbabe3c9872af1c41dee57" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;a href=&quot;../speechsynthesisutterance/text&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.text&lt;/code&gt;&lt;/a&gt; attribute was too long to synthesize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f25d43b98ec25689118f52905c636bd9b59b53" translate="yes" xml:space="preserve">
          <source>The contents of the SDP are irrelevant to you in essentially all cases. Avoid the temptation to try to make it more complicated than that until you really know what you're doing. That way lies madness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72e78a048376c8037e7da1da78adff9b15a3628" translate="yes" xml:space="preserve">
          <source>The context attributes can be set when creating the context using the &lt;a href=&quot;../htmlcanvaselement/getcontext&quot;&gt;&lt;code&gt;HTMLCanvasElement.getContext()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a15dc1109f7cb8168949dd635491d7284561ed" translate="yes" xml:space="preserve">
          <source>The controller interface for the recognition service; this also handles the &lt;a href=&quot;speechrecognitionevent&quot;&gt;&lt;code&gt;SpeechRecognitionEvent&lt;/code&gt;&lt;/a&gt; sent from the recognition service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97025fa74a73155adfa3451e70c831efc1c6793b" translate="yes" xml:space="preserve">
          <source>The controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59f8f1cc249f02a85da17f98aca203f6b5a7fcd" translate="yes" xml:space="preserve">
          <source>The controlling agent not only takes responsibility for making the final decision as to which candidate pair to use, but also for signaling that selection to the controlled agent by using STUN and an updated offer, if necessary. The controlled agent just waits to be told which candidate pair to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7f342bc8485141d06479c7ac2e3b70604fc52a" translate="yes" xml:space="preserve">
          <source>The cookie value string can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&quot;&gt;&lt;code&gt;encodeURIComponent()&lt;/code&gt;&lt;/a&gt; to ensure that the string does not contain any commas, semicolons, or whitespace (which are disallowed in cookie values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ebee0337dbc0cebbd4da1feec528b76fbcef37" translate="yes" xml:space="preserve">
          <source>The coordinate system is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d683f457f4bc4392fa5b11a0a4c77f9466aa1b" translate="yes" xml:space="preserve">
          <source>The coordinates specify the offset into the image where the mouse cursor should be. To center the image, for instance, use values that are half the width and height of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603d0ae531283d2b87eaf6cfa6a19b0a0afa9bfa" translate="yes" xml:space="preserve">
          <source>The copied node in the scope of the importing document. The new node's &lt;a href=&quot;../node/parentnode&quot;&gt;&lt;code&gt;Node.parentNode&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;null&lt;/code&gt;, since it has not yet been inserted into the document tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36925f523cf8eb5613e12afc6c56c17bf037b820" translate="yes" xml:space="preserve">
          <source>The core to any signaling process is its message handling. It's not necessary to use WebSockets for signaling, but it is a common solution. You should, of course, select a mechanism for exchanging signaling information that is appropriate for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872d2821356a805fd6baa0344f0883ff07f677e4" translate="yes" xml:space="preserve">
          <source>The corresponding &lt;a href=&quot;pagexoffset&quot;&gt;&lt;code&gt;pageXOffset&lt;/code&gt;&lt;/a&gt; property, which returns the number of pixels scrolled along the horizontal axis (left and right), is an alias for &lt;a href=&quot;scrollx&quot;&gt;&lt;code&gt;scrollX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cce9d2ccfcd325a66e2284e88c04a5f8e287ad" translate="yes" xml:space="preserve">
          <source>The created worker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fa3bf097bb2a63dee5351d1d5b9bb563d25037" translate="yes" xml:space="preserve">
          <source>The creator method: &lt;a href=&quot;document/createnodeiterator&quot;&gt;&lt;code&gt;Document.createNodeIterator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed2f968f2396b72e8f87ae1034bb79f98694113" translate="yes" xml:space="preserve">
          <source>The creator method: &lt;a href=&quot;document/createtreewalker&quot;&gt;&lt;code&gt;Document.createTreeWalker()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4444cfb591c56a03c7f97a446dcb752faeb9abff" translate="yes" xml:space="preserve">
          <source>The credential is a long-term authentication password. See &lt;a href=&quot;https://tools.ietf.org/html/rfc5389#section-10.2&quot;&gt;RFC 5389, section 10.2&lt;/a&gt; for further details on this type of credential.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6334affc6563ff6b33e7e1b6b1c4a11e7d44059d" translate="yes" xml:space="preserve">
          <source>The credential is an access token to be used with a third-party authentication system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3461bbe662ff1232d6f615caa2067a4374b2f89e" translate="yes" xml:space="preserve">
          <source>The credential to use when logging into the server. This is only used if the &lt;code&gt;RTCIceServer&lt;/code&gt; represents a TURN server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da88ce5c89cd38615be3ac586387fb24a9a5f12" translate="yes" xml:space="preserve">
          <source>The cue payload text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718adb7fc9866b4e0900ce5da3aac5cfd42c10a9" translate="yes" xml:space="preserve">
          <source>The cue settings are added to the right of the cue timings. There must be one or more spaces between the cue timing and the first setting and between each setting. A setting's name and value are separated by a colon. The settings are case sensitive so use lower case as shown. There are five cue settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca49b2b06ec0035d91a22ab88a1cafb0b183cd3a" translate="yes" xml:space="preserve">
          <source>The cuechange event fires when a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/TextTrack&quot;&gt;&lt;code&gt;TextTrack&lt;/code&gt;&lt;/a&gt; has changed the currently displaying cues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe7930fb43f93bda79043f926eb1d58bdeeec85" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;compositing#Clipping_paths&quot;&gt;clipping path&lt;/a&gt;, which we'll see in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0525a09aaec6de68af9c7d275bac0687dd5de2" translate="yes" xml:space="preserve">
          <source>The current ICE transport policy; this must be one of the values from the &lt;code&gt;&lt;a href=&quot;#RTCIceTransportPolicy_enum&quot;&gt;RTCIceTransportPolicy&lt;/a&gt;&lt;/code&gt; enum. If this isn't specified, &lt;code&gt;&quot;all&quot;&lt;/code&gt; is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28668c6831eb77061a7c2649847bf9ce9be7ced9" translate="yes" xml:space="preserve">
          <source>The current URL with &quot;?Some%20data&quot; appended is sent to the server (if no action is taken by the server, the current document is reloaded with the modified search string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0e6ac18dce57e1f495fd94120cf2733fc6b495" translate="yes" xml:space="preserve">
          <source>The current active texture unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3c341ce762770aafa0d3dac056251bff96dabe" translate="yes" xml:space="preserve">
          <source>The current clipping region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2df019606ad7d3b4ec5ab8eb894ef97f08b27d" translate="yes" xml:space="preserve">
          <source>The current dash list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fccb11d684a68131fe090186632d0e459b166477" translate="yes" xml:space="preserve">
          <source>The current description of the local end of the connection, if one has been set. If none has been successfully set, this value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d490add412164c964299055bf2508525e1cc0088" translate="yes" xml:space="preserve">
          <source>The current description of the remote end of the connection, if one has been set. If none has been successfully set, this value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bcdfb04e80609780efcae71309bae36becf243c" translate="yes" xml:space="preserve">
          <source>The current device proximity, in centimeters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0feb671f6f6879fb6b458d8aceb93dbf86f4eb0" translate="yes" xml:space="preserve">
          <source>The current element being processed in the NodeList.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d81a6aba37ff18bd5d8c2ff73ec50a431f3bde" translate="yes" xml:space="preserve">
          <source>The current element being processed in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7643d9c5a35cfde28c1a0e086246e4486cd25a" translate="yes" xml:space="preserve">
          <source>The current extensions are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03cb1c254284efd3638eadef68be2f1ee66bab4" translate="yes" xml:space="preserve">
          <source>The current index allows duplicate key values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c93e81f4ac1f540f5b5e105e11774f8179e2e61" translate="yes" xml:space="preserve">
          <source>The current index does not allow duplicate values for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898f01fc0baff424ecd5c91a4582c6e5442640c3" translate="yes" xml:space="preserve">
          <source>The current iteration just completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04c9e2d82fd6d6b7a64682729f6981030c0efe3" translate="yes" xml:space="preserve">
          <source>The current method to request opening a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/IndexedDB#gloss_database_connection&quot;&gt;connection to a database&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825f1b344e59982ebc3e659d2ea7ccb5043765fb" translate="yes" xml:space="preserve">
          <source>The current number of audio tracks remaining in the media element is obtained from &lt;code&gt;AudioTrackList&lt;/code&gt; property &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad96c780110dddbe18819387c49b8d6e97fa203" translate="yes" xml:space="preserve">
          <source>The current number of video tracks remaining in the media element is obtained from &lt;code&gt;VideoTrackList&lt;/code&gt; property &lt;a href=&quot;length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b272d6ff893b68504859a9e433ee0dd4e6bdf2d" translate="yes" xml:space="preserve">
          <source>The current object store is logged to the console: it should be returned something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdf54e367cc7c4cfbe101667477fed41cbfa409" translate="yes" xml:space="preserve">
          <source>The current state of the ICE agent and its connection. The value is one of the strings in the &lt;a href=&quot;#RTCIceConnectionState_enum&quot;&gt;&lt;code&gt;RTCIceConnectionState&lt;/code&gt; enum&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160714d1b99f5bcc74324ddf0ff91a1cb661f754" translate="yes" xml:space="preserve">
          <source>The current state of the connection, as a value from the enum &lt;code&gt;&lt;a href=&quot;#RTCPeerConnectionState_enum&quot;&gt;RTCPeerConnectionState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1095f4b7e1d3f2c430700dfaa07fefbf74f6720f" translate="yes" xml:space="preserve">
          <source>The current state of the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0431377b3ab854f1f45ffa446b2baced03d334" translate="yes" xml:space="preserve">
          <source>The current text style being used when drawing text. This string uses the same syntax as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt; property. The default font is 10px sans-serif.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99458792a8ef6296c36333d0d25629e9d7289001" translate="yes" xml:space="preserve">
          <source>The current time of the animation is unresolved and there are no pending tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbd13af9f7eb3268475c9bb4baaa93c280a766c" translate="yes" xml:space="preserve">
          <source>The current time of the animation that generated the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40fcbb12007934431d125bc2230cb0ffb60125f" translate="yes" xml:space="preserve">
          <source>The current time value of the animation in milliseconds, whether running or paused. If the animation lacks a &lt;a href=&quot;animationtimeline&quot;&gt;&lt;code&gt;timeline&lt;/code&gt;&lt;/a&gt;, is inactive or hasn't been played yet, its value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4995ded951b2fbe16c164c4c7f4d5f2dc2fffe22" translate="yes" xml:space="preserve">
          <source>The current time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebae1c08e8c0fc2e4b63de3a4ba0d427d8ccead" translate="yes" xml:space="preserve">
          <source>The current transaction is not active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc732571ca73f7798b5580231186e70ff2538a52" translate="yes" xml:space="preserve">
          <source>The current transformation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345c3b380ba08d47e709173b1d7a83cc3a7951a1" translate="yes" xml:space="preserve">
          <source>The current values of the following attributes: &lt;a href=&quot;../../canvasrenderingcontext2d/strokestyle&quot;&gt;&lt;code&gt;strokeStyle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/fillstyle&quot;&gt;&lt;code&gt;fillStyle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/globalalpha&quot;&gt;&lt;code&gt;globalAlpha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/linewidth&quot;&gt;&lt;code&gt;lineWidth&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/linecap&quot;&gt;&lt;code&gt;lineCap&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/linejoin&quot;&gt;&lt;code&gt;lineJoin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/miterlimit&quot;&gt;&lt;code&gt;miterLimit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/linedashoffset&quot;&gt;&lt;code&gt;lineDashOffset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/shadowoffsetx&quot;&gt;&lt;code&gt;shadowOffsetX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/shadowoffsety&quot;&gt;&lt;code&gt;shadowOffsetY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/shadowblur&quot;&gt;&lt;code&gt;shadowBlur&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/shadowcolor&quot;&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/globalcompositeoperation&quot;&gt;&lt;code&gt;globalCompositeOperation&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/textalign&quot;&gt;&lt;code&gt;textAlign&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/textbaseline&quot;&gt;&lt;code&gt;textBaseline&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../canvasrenderingcontext2d/imagesmoothingenabled&quot;&gt;&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4880fa8f924eae2b5290b8b535f42a094b726c6" translate="yes" xml:space="preserve">
          <source>The current values of the following attributes: &lt;a href=&quot;strokestyle&quot;&gt;&lt;code&gt;strokeStyle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;fillstyle&quot;&gt;&lt;code&gt;fillStyle&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;globalalpha&quot;&gt;&lt;code&gt;globalAlpha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linewidth&quot;&gt;&lt;code&gt;lineWidth&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linecap&quot;&gt;&lt;code&gt;lineCap&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linejoin&quot;&gt;&lt;code&gt;lineJoin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;miterlimit&quot;&gt;&lt;code&gt;miterLimit&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;linedashoffset&quot;&gt;&lt;code&gt;lineDashOffset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;shadowoffsetx&quot;&gt;&lt;code&gt;shadowOffsetX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;shadowoffsety&quot;&gt;&lt;code&gt;shadowOffsetY&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;shadowblur&quot;&gt;&lt;code&gt;shadowBlur&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;shadowcolor&quot;&gt;&lt;code&gt;shadowColor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;globalcompositeoperation&quot;&gt;&lt;code&gt;globalCompositeOperation&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;textalign&quot;&gt;&lt;code&gt;textAlign&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;textbaseline&quot;&gt;&lt;code&gt;textBaseline&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;imagesmoothingenabled&quot;&gt;&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d712e8c4c40e4d3222c1a9ab502d1b7b4fc75d92" translate="yes" xml:space="preserve">
          <source>The current version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db1656debb183076e783166294319f2dc750403" translate="yes" xml:space="preserve">
          <source>The current view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b75d51b23c2d905cdb42dbed86ccb5396d86d2" translate="yes" xml:space="preserve">
          <source>The currently active query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b3d3005a58e343e69fd4e3bcc61014ef7acf16" translate="yes" xml:space="preserve">
          <source>The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf9d360f3d39520b8c8fc9113967a68626763b0" translate="yes" xml:space="preserve">
          <source>The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using &lt;code&gt;cursor.value.foo&lt;/code&gt;. For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/IDBcursor-example/&quot;&gt;IDBCursor example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/IDBcursor-example/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff27160f05719b175f7061a6775e24ad3c618216" translate="yes" xml:space="preserve">
          <source>The cursor has a source that indicates which index or object store it is iterating over. It has a position within the range, and moves in a direction that is increasing or decreasing in the order of record keys. The cursor enables an application to asynchronously process all the records in the cursor's range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3591e3f2be9fa3e349266e14749fb8e39260bbdb" translate="yes" xml:space="preserve">
          <source>The cursor is currently being iterated or has iterated past its end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a0b06ac8aa0eb2eae5971b9f0253b27553f84c" translate="yes" xml:space="preserve">
          <source>The cursor was created using &lt;a href=&quot;../idbindex/openkeycursor&quot;&gt;&lt;code&gt;IDBIndex.openKeyCursor&lt;/code&gt;&lt;/a&gt;, is currently being iterated, or has iterated past its end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d568ed80dbc81dc4a89ab70c619d79a12b58bf3b" translate="yes" xml:space="preserve">
          <source>The cursor was created using &lt;a href=&quot;../idbindex/openkeycursor&quot;&gt;&lt;code&gt;IDBindex.openKeyCursor&lt;/code&gt;&lt;/a&gt;, is currently being iterated, or has iterated past its end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a0093e0e3541a8c958e8bded85244eec4008f9" translate="yes" xml:space="preserve">
          <source>The cursor's &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants&quot;&gt;direction&lt;/a&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBCursor#Constants&quot;&gt;IDBCursor Constants&lt;/a&gt; for possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a78950b16156523080a8c4e49fe2b96a5b60a3" translate="yes" xml:space="preserve">
          <source>The cursor's direction is not &lt;code&gt;prev&lt;/code&gt; or &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3452fa832273cbf54d700f621c1cca2856b2fd" translate="yes" xml:space="preserve">
          <source>The cursor's required direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e08d006ce10dcc49ca4a7996540719406469f0" translate="yes" xml:space="preserve">
          <source>The curve begins at the point specified by &lt;code&gt;moveTo()&lt;/code&gt;: (20, 110). The control point is placed at (230, 150). The curve ends at (250, 20).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f08201e182d712584bb3be4b80c404ee9a344a" translate="yes" xml:space="preserve">
          <source>The curve begins at the point specified by &lt;code&gt;moveTo()&lt;/code&gt;: (30, 30). The first control point is placed at (120, 160), and the second at (180, 10). The curve ends at (220, 140).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e5fcc1c2033d4a6e7d9a8a6036f37e85b231b3" translate="yes" xml:space="preserve">
          <source>The custom stream constructor has a &lt;code&gt;start()&lt;/code&gt; method that uses a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval&quot;&gt;&lt;code&gt;WindowTimers.setInterval()&lt;/code&gt;&lt;/a&gt; call to generate a random string every second. &lt;a href=&quot;../readablestreamdefaultcontroller/enqueue&quot;&gt;&lt;code&gt;ReadableStreamDefaultController.enqueue()&lt;/code&gt;&lt;/a&gt; is then used to enqueue it into the stream. When the button is pressed, the interval is cancelled, and a function called &lt;code&gt;readStream()&lt;/code&gt; is invoked to read the data back out of the stream again. We also close the stream, as we&amp;rsquo;ve stopped enqueueing chunks to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5f52e4bdb9aa8141b8ea3b8198901a58422eca" translate="yes" xml:space="preserve">
          <source>The cutoff frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a996fb79db080799c4b40270f033cbe160051520" translate="yes" xml:space="preserve">
          <source>The dark side</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505719d2fddc5565421a6b2664f58017d10e0f15" translate="yes" xml:space="preserve">
          <source>The dash is considered part of the prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67f79e822a0a18330307157436fa4044896e828" translate="yes" xml:space="preserve">
          <source>The data being stored could not be cloned by the internal structured cloning algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4641612790010f068d2e3796dbdd6c190e6f79c8" translate="yes" xml:space="preserve">
          <source>The data field for the message. When the &lt;code&gt;EventSource&lt;/code&gt; receives multiple consecutive lines that begin with &lt;code&gt;data:&lt;/code&gt;, &lt;a href=&quot;http://www.w3.org/TR/eventsource/#dispatchMessage&quot;&gt;it will concatenate them&lt;/a&gt;, inserting a newline character between each one. Trailing newlines are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ed1c0879ee2db7a825797627bde1ac27fcb7c1" translate="yes" xml:space="preserve">
          <source>The data is a string that has unpaired surrogates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7930358e54109c55e1b9e0c4c0fda5b2a3f065e" translate="yes" xml:space="preserve">
          <source>The data is corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8955a1f11a60877ac71f551a422e9d08e6d6e12" translate="yes" xml:space="preserve">
          <source>The data is read sequentially in small pieces called &lt;strong&gt;chunks&lt;/strong&gt;. A chunk can be a single byte, or it can be something larger such as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;typed array&lt;/a&gt; of a certain size. A single stream can contain chunks of different sizes and types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a6e42cb27576b9aff00d14c512ad88c9dc4238" translate="yes" xml:space="preserve">
          <source>The data is written to the stream via a &lt;strong&gt;writer&lt;/strong&gt;, one chunk at a time. A chunk can take a multitude of forms, just like the chunks in a reader. You can use whatever code you like to produce the chunks ready for writing; the writer plus the associated code is called a &lt;strong&gt;producer&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3727ef8721639f24f215a4f2256351818ea70d3e" translate="yes" xml:space="preserve">
          <source>The data sent by the message emitter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d48da1d163cda45fe0a8bbffdfc71574af1c7c" translate="yes" xml:space="preserve">
          <source>The data sent by the message emitter; this can be any data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644edddf69de452bc7d84f402ac5bc3bc7b95875" translate="yes" xml:space="preserve">
          <source>The data that is created and / or consumed by a &lt;a href=&quot;../web_authentication_api&quot;&gt;WebAuthn&lt;/a&gt; authenticator device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fb70bc44cccdb60fad9c9663c4df54d31600ee" translate="yes" xml:space="preserve">
          <source>The data that is transferred during a drag and drop interaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bce27bdd3e95cdb3b47d0a31359342f69a9139" translate="yes" xml:space="preserve">
          <source>The data to append to the &lt;a href=&quot;blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; being constructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2301ed742012ae468ef1455861b0dd78980adec2" translate="yes" xml:space="preserve">
          <source>The data to display. This must be either an array or an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f205efdab9d155bee0e92da8ce559c34ee6aaca8" translate="yes" xml:space="preserve">
          <source>The data to send to the presentation context. It will be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d230ecafa9900e018003c2db8da2d204c4e8d569" translate="yes" xml:space="preserve">
          <source>The data to send to the server. It may be one of the following types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336d0e86982dee99aaab06da74a5ca32511456ba" translate="yes" xml:space="preserve">
          <source>The data to transmit across the connection. This may be a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, or an &lt;a href=&quot;../arraybufferview&quot;&gt;&lt;code&gt;ArrayBufferView&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056bead914edb68fee44427c2c2557156c1803ea" translate="yes" xml:space="preserve">
          <source>The data we want to access is of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2e50581af2151036763db6ae17e93855dc8bc1" translate="yes" xml:space="preserve">
          <source>The database connection with which this transaction is associated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8222dd6a9c5b6cd3c0e592d17ce439ea851bd50f" translate="yes" xml:space="preserve">
          <source>The dblclick event is raised when the user double clicks an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8594053e12af290b6fc7007b3b30c27fbd90f7e7" translate="yes" xml:space="preserve">
          <source>The declaration block is that part of the style rule that appears within the braces and that actually provides the style definitions (for the selector, the part that comes before the braces).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72e8ae469a0aff990bbfdc54650cd89cfc03afb" translate="yes" xml:space="preserve">
          <source>The default behavior is to move the focus to the viewport of the notification's related &lt;a href=&quot;https://html.spec.whatwg.org/multipage/browsers.html#browsing-context&quot;&gt;browsing context&lt;/a&gt;. If you don't want that behaviour, call &lt;code&gt;&lt;a href=&quot;../event/preventdefault&quot;&gt;preventDefault()&lt;/a&gt;&lt;/code&gt; on the event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6507679253e1ec891c36a1da077068df701409d9" translate="yes" xml:space="preserve">
          <source>The default for &lt;code&gt;rtcpMuxPolicy&lt;/code&gt; is &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16847283f3123c0b9e5d38f2fbca1ee30b089cfe" translate="yes" xml:space="preserve">
          <source>The default miter limit of 10.0 will strip all miters for sharp angles below about 11 degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933dce785b043ca243c006a08842ae98e2bfc54a" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;interimResults&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b912f301a5bbc2631003011d3cc00780acd67579" translate="yes" xml:space="preserve">
          <source>The default value for gain is 1; this keeps the current volume the same. Gain can be set to a minimum of about -3.4 and a max of about 3.4. Here we'll allow the boombox to move the gain up to 2 (double the original volume) and down to 0 (this will effectively mute our sound).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750c418c522ac704dd457b72492d4e27261a09ed" translate="yes" xml:space="preserve">
          <source>The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6c9ad86a5d8173b84c871422669785d6da13f4" translate="yes" xml:space="preserve">
          <source>The default value is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2268ba18757fce3e451b5925d0b82813fcc9cb6" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;alphabetic&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05d275b2ec59bd93303bcad11d4fb992340f741" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;inherit&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d5b693f8a823ad954238c2462b4a9837edacfc" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;start&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd606e7d9c64db86d0a04af873213380c3442cd" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;null&lt;/code&gt;, indicating that no additional details are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b359dc601c36a18fc6150b92e31fc55190cfceb4" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;vec4(0.0, 0.0, 0.0, 1.0)&lt;/code&gt; by default but we can specify a different default value with &lt;code&gt;&lt;a href=&quot;vertexattrib&quot;&gt;&lt;code&gt;gl.vertexAttrib[1234]f[v]()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee87e5c57c0056880ccf5a54522cd23032b0b77e" translate="yes" xml:space="preserve">
          <source>The default value is the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065cc37cecd779670f71ec3376963bbcfd5df213" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;appendWindowEnd&lt;/code&gt; is positive infinity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6763618c40169add87de556a07797e1f99af7696" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;appendWindowStart&lt;/code&gt; is the presentation start time, which is the beginning time of the playable media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cda586e818d962065324054e646bb23fedabde" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;maxValue&lt;/code&gt; is the maximum positive single-precision floating-point value (+340,282,346,638,528,859,811,704,183,484,516,925,440).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d86eacf5846cfa607c52f5255004d3db8fc1258" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;minValue&lt;/code&gt; is the minimum negative single-precision floating-point value (-340,282,346,638,528,859,811,704,183,484,516,925,440), and the default value of &lt;code&gt;maxValue&lt;/code&gt; is the maximum positive single-precision floating-point value (+340,282,346,638,528,859,811,704,183,484,516,925,440).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bf7c9245fbed8579b5e4f1daffa4c4fe02a167" translate="yes" xml:space="preserve">
          <source>The default value of &lt;code&gt;minValue&lt;/code&gt; is the minimum negative single-precision floating-point value (-340,282,346,638,528,859,811,704,183,484,516,925,440).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08942b051ab57c6e635a0411372620fad2299b6f" translate="yes" xml:space="preserve">
          <source>The default value of the position vector is &lt;code&gt;(0,&lt;/code&gt;&lt;code&gt;0,&lt;/code&gt;&lt;code&gt;0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d209c571b196da83aeafa72352c7b933f0a3b541" translate="yes" xml:space="preserve">
          <source>The default value when the effect has not been set, equivalent to all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5151a2aa41524525b0b025a5761ab4baf2d29c" translate="yes" xml:space="preserve">
          <source>The default values for these properties will differ slightly by VR hardware, although they tend to be around 53&amp;deg; up and down, and 47&amp;deg; left and right, with zNear and zFar coming in at around 0.1m and 10000m respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd923aa6f52c36303f56ec79079058d511f458f" translate="yes" xml:space="preserve">
          <source>The degree of intersection between the target element and its root is the &lt;strong&gt;intersection ratio&lt;/strong&gt;. This is a representation of the percentage of the target element which is visible as a value between 0.0 and 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d8a1aed54585a7063e1958f05b21cb44c116d9" translate="yes" xml:space="preserve">
          <source>The delta values are specified in lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927ddf0d6bcd9d720c1a9b3ea1a53fcb19dc85dd" translate="yes" xml:space="preserve">
          <source>The delta values are specified in pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7930b50f825452a3f26d0dd0bdac0ce651bb539a" translate="yes" xml:space="preserve">
          <source>The delta values are specified in pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d04931eb57e4e9b68345b5df4ff7bd4684326c" translate="yes" xml:space="preserve">
          <source>The dependent feature is currently under revision to be removed (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=214867&quot;&gt;bug 214867&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9acc65fafe02c34a460af6d5498d7aa363e5e5" translate="yes" xml:space="preserve">
          <source>The deprecated (and never part of the official specification) read-only &lt;code&gt;RTCDataChannel&lt;/code&gt; property &lt;code&gt;&lt;strong&gt;stream&lt;/strong&gt;&lt;/code&gt; returns an ID number (between 0 and 65,535) which uniquely identifies the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt;. This ID is set at the time the data channel is created, either by the user agent (if &lt;a href=&quot;negotiated&quot;&gt;&lt;code&gt;RTCDataChannel.negotiated&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt;) or by the site or app script (if &lt;code&gt;negotiated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9855febbb203a8bb04753026f933a2b3e4ffbd" translate="yes" xml:space="preserve">
          <source>The deprecated (and never part of the official specification) read-only &lt;code&gt;RTCDataChannel&lt;/code&gt; property &lt;code&gt;&lt;strong&gt;stream&lt;/strong&gt;&lt;/code&gt; returns an ID number (between 0 and 65,535) which uniquely identifies the &lt;a href=&quot;rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4108f70334f5ce69da8fc05802f66fdafa886c" translate="yes" xml:space="preserve">
          <source>The deprecated &lt;a href=&quot;../blobbuilder&quot;&gt;&lt;code&gt;BlobBuilder&lt;/code&gt;&lt;/a&gt; which this constructor replaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce83baf8edb87e8ec6f56628860b0ea566f03b4" translate="yes" xml:space="preserve">
          <source>The depth testing is disabled by default. To enable or disable depth testing, use the &lt;a href=&quot;enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;disable&quot;&gt;&lt;code&gt;disable()&lt;/code&gt;&lt;/a&gt; methods with the argument &lt;code&gt;gl.DEPTH_TEST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fefc2cd758c1fa84f84e7500d77077dee1fd1e" translate="yes" xml:space="preserve">
          <source>The description for the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96357666ba5d23345884aad9033f4a52b02be802" translate="yes" xml:space="preserve">
          <source>The desired sample rate for the &lt;code&gt;AudioContext&lt;/code&gt;, specified in samples per second. The value must be compatible with &lt;a href=&quot;../audiobuffer/samplerate&quot;&gt;&lt;code&gt;AudioBuffer.sampleRate&lt;/code&gt;&lt;/a&gt;. This value should typically be between 8,000 Hz and 96,000 Hz; the default will vary depending on the output device, but the sample rate 44,100 Hz is the most common.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37c4a2abdadfea85d743b512db3c6d26bcb6169" translate="yes" xml:space="preserve">
          <source>The desired subtree is located by finding an element with the ID &quot;someElement&quot;. A set of options for the observer is also established in the &lt;code&gt;observerOptions&lt;/code&gt; record. In it, we specify values of &lt;code&gt;true&lt;/code&gt; for both &lt;code&gt;childList&lt;/code&gt; and &lt;code&gt;attributes&lt;/code&gt;, so we get the information we want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84db4c70642021b976272b8acd7797028a3001f" translate="yes" xml:space="preserve">
          <source>The destination node is not part of the same audio context as the source node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc54a67155ab62dac9044264330e7b3c27bddcf9" translate="yes" xml:space="preserve">
          <source>The developer-defined identifier for this &lt;code&gt;SyncEvent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eeebf89ba90b43f3839ab3a37b36c359fd0a883" translate="yes" xml:space="preserve">
          <source>The device-specific index of the currently-claimed interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca6fd89e4c223f77cf2a8c91044bd8bf4e7df99" translate="yes" xml:space="preserve">
          <source>The diagram below shows how this works; an input value, &lt;code&gt;N&lt;/code&gt;, is set as the value of the &lt;a href=&quot;../constantsourcenode/offset&quot;&gt;&lt;code&gt;ConstantSourceNode.offset&lt;/code&gt;&lt;/a&gt; property. The &lt;code&gt;ConstantSourceNode&lt;/code&gt; can have as many outputs as necessary; in this case, we've connected it to three nodes: two &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;s and a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;. So &lt;code&gt;N&lt;/code&gt; becomes the value of the specified parameter (&lt;a href=&quot;../gainnode/gain&quot;&gt;&lt;code&gt;gain&lt;/code&gt;&lt;/a&gt; for the &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;s and pan for the &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a48150c1d7914c664a8364a0cde7487e6e02777" translate="yes" xml:space="preserve">
          <source>The difference between &lt;a href=&quot;set&quot;&gt;&lt;code&gt;FormData.set&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;append()&lt;/code&gt; is that if the specified key already exists, &lt;a href=&quot;set&quot;&gt;&lt;code&gt;FormData.set&lt;/code&gt;&lt;/a&gt; will overwrite all existing values with the new one, whereas &lt;code&gt;append()&lt;/code&gt; will append the new value onto the end of the existing set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b47f59354ed1cc1cc4b6c5d0acd76fc23ea29fa" translate="yes" xml:space="preserve">
          <source>The difference between &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Headers.set&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;append()&lt;/code&gt; is that if the specified header already exists and accepts multiple values, &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Headers.set&lt;/code&gt;&lt;/a&gt; will overwrite the existing value with the new one, whereas &lt;code&gt;append()&lt;/code&gt; will append the new value onto the end of the set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72af720be29d1fe39fab72cff2dbe7eabbb192a1" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;set()&lt;/code&gt; and &lt;a href=&quot;append&quot;&gt;&lt;code&gt;FormData.append&lt;/code&gt;&lt;/a&gt; is that if the specified key does already exist, &lt;code&gt;set()&lt;/code&gt; will overwrite all existing values with the new one, whereas &lt;a href=&quot;append&quot;&gt;&lt;code&gt;FormData.append&lt;/code&gt;&lt;/a&gt; will append the new value onto the end of the existing set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4115e568023227c1974dad2ab8b668737a50fdfd" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;set()&lt;/code&gt; and &lt;a href=&quot;append&quot;&gt;&lt;code&gt;Headers.append&lt;/code&gt;&lt;/a&gt; is that if the specified header already exists and accepts multiple values, &lt;code&gt;set()&lt;/code&gt; overwrites the existing value with the new one, whereas &lt;a href=&quot;append&quot;&gt;&lt;code&gt;Headers.append&lt;/code&gt;&lt;/a&gt; appends the new value to the end of the set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369cc70618862397f2c59dfcdfbedd0115c5c9f8" translate="yes" xml:space="preserve">
          <source>The difference between these can best be described using the image on the right. A quadratic B&amp;eacute;zier curve has a start and an end point (blue dots) and just one &lt;strong&gt;control point&lt;/strong&gt; (indicated by the red dot) while a cubic B&amp;eacute;zier curve uses two control points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dabd892711f4a0c0b9a61364b3f35b706c54d31" translate="yes" xml:space="preserve">
          <source>The difference is that when close is called, any previously enqueued chunks are written and finished with before the stream is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf21b6dec33c78a626e94c05893de32d81d91102" translate="yes" xml:space="preserve">
          <source>The digits 0-9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d15e4d4459a52e8eb9c4e961fea8a1356256348" translate="yes" xml:space="preserve">
          <source>The directory and/or its contents may not be safe to access from a Web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03af1990a2cd1675a38597e00bc093d378aa25ae" translate="yes" xml:space="preserve">
          <source>The directory could not be removed for security reasons. Possible reasons include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5b4dd17df3f66abf7cac3e3000cadae315f097" translate="yes" xml:space="preserve">
          <source>The directory is not accessible; perhaps it's in use by another application or is locked at the operating system level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2581231a1f550a1adb94b3530990d20d03277e50" translate="yes" xml:space="preserve">
          <source>The directory represented by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry&quot;&gt;&lt;code&gt;FileSystemDirectoryEntry&lt;/code&gt;&lt;/a&gt; no longer exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9331ca3a8a59cb4899781eca75c7ca1914a1b5c5" translate="yes" xml:space="preserve">
          <source>The disconnected state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2c251d64a14d95703ae11a936de5a7d7dbf217" translate="yes" xml:space="preserve">
          <source>The disk or quota limit has been reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33551bc2201d7496ab062237c73ae61e0d81eddf" translate="yes" xml:space="preserve">
          <source>The dispatched &lt;code&gt;hashchange&lt;/code&gt; event has the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c793bd9015083bd55061a660dc4c6b60a06e30e" translate="yes" xml:space="preserve">
          <source>The dispatched event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fece427eb94d9310d0bbea9b41f7637f2d5332" translate="yes" xml:space="preserve">
          <source>The distance from the eyes of the farthest point of the view. The furthest away things can be and still be in the view. If not specified, the default is used &amp;mdash; &lt;code&gt;10000.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8231a59a601000ceb0e5eaaf80f5090800c8b9" translate="yes" xml:space="preserve">
          <source>The distance from the eyes of the nearest point of the view. The closest things can be and still be in the view. If not specified, the default is used &amp;mdash; &lt;code&gt;0.01&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83aa59484c3af523a7be00d766fb07a503b2eedf" translate="yes" xml:space="preserve">
          <source>The document and all sub-resources have finished loading. The state indicates that the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; event is about to fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034ff8f4b53af08bb2a0e6596c027c8329f51f63" translate="yes" xml:space="preserve">
          <source>The document containing the element isn't fully active; that is, it's not the current active document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c65a03e1d9f8218671d8636bbe4289709f7fc9" translate="yes" xml:space="preserve">
          <source>The document content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f2a78b4555499118caae8742ac93dd934f82fc" translate="yes" xml:space="preserve">
          <source>The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56385fa6dffb5ff4dd8d06888f4412b7bae8ddb1" translate="yes" xml:space="preserve">
          <source>The document in which the payment request is taking place became inactive while the user interface was shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171c6717e8f0310a3fb5cb57857ec159d2d89b0e" translate="yes" xml:space="preserve">
          <source>The document object's &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-active-sandboxing-flag-set&quot;&gt;active sandboxing flag set&lt;/a&gt; has the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#sandboxed-presentation-browsing-context-flag&quot;&gt;sandboxed presentation browsing context flag&lt;/a&gt; set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ed1f6d85ca9d2e6d5aab46590739d48043247c" translate="yes" xml:space="preserve">
          <source>The document text, in the default style, is rendered as the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a10ab96a0a1077cfd7ee9a8723eff3260f87ac0" translate="yes" xml:space="preserve">
          <source>The document's address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798c2b9d9500fee1da194e6939d974012e5ad1b8" translate="yes" xml:space="preserve">
          <source>The domain portion of the current document's origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288f488b5bdf835f17adcd697075c1c9eefd5b4b" translate="yes" xml:space="preserve">
          <source>The drag data item's string data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a013c066ba69320c4e342d8ec6ae150d0f0b6fae" translate="yes" xml:space="preserve">
          <source>The drag data item's type, typically a MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b34b2feb8735721b67afbb41abaabb3b63c4c54" translate="yes" xml:space="preserve">
          <source>The drag data store in which this list is kept is only writable while handling the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt; event. While handling &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt;, the drag data store is in read-only mode, and this method silently does nothing. No exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda22035918e10aad48a3b4e5d97020dffd65cf0" translate="yes" xml:space="preserve">
          <source>The drag data store is not in read/write mode, so the item can't be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69fd93edaf850f7dcf0eb001a2435bce14623a8" translate="yes" xml:space="preserve">
          <source>The drag operations described in this document use the &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; interface. This document does &lt;em&gt;not&lt;/em&gt; use the &lt;a href=&quot;../datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; interface nor the &lt;a href=&quot;../datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e99b41ccb13271a4d79bc649bd34a2ad83b1836" translate="yes" xml:space="preserve">
          <source>The drag processing described in this document use the &lt;a href=&quot;../datatransfer&quot;&gt;&lt;code&gt;DataTransfer&lt;/code&gt;&lt;/a&gt; interface. This processing does &lt;em&gt;not&lt;/em&gt; use the &lt;a href=&quot;../datatransferitem&quot;&gt;&lt;code&gt;DataTransferItem&lt;/code&gt;&lt;/a&gt; interface nor the &lt;a href=&quot;../datatransferitemlist&quot;&gt;&lt;code&gt;DataTransferItemList&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa3e29e6d2814254066e60adeb061224f4ecc51" translate="yes" xml:space="preserve">
          <source>The drawing state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391db4f15b425b6c30383c8bc11d64a129259529" translate="yes" xml:space="preserve">
          <source>The drawing state that gets saved onto a stack consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1debe0692dc840ab083bf2aa1799e34a607d3d53" translate="yes" xml:space="preserve">
          <source>The duplicate node returned by &lt;code&gt;cloneNode()&lt;/code&gt; is not part of the document until it is added to another node that is part of the document using &lt;a href=&quot;appendchild&quot;&gt;&lt;code&gt;Node.appendChild()&lt;/code&gt;&lt;/a&gt; or a similar method. It also has no parent until it is appended to another node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99986d15171171f818ff13b7d0db73d6e060c63e" translate="yes" xml:space="preserve">
          <source>The duration of the sound to be played, specified in seconds. If this parameter isn't specified, the sound plays until it reaches its natural conclusion or is stopped using the &lt;a href=&quot;../audioscheduledsourcenode/stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; method. Using this parameter is functionally identical to calling &lt;code&gt;start(when, offset)&lt;/code&gt; and then calling &lt;code&gt;stop(when+duration)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea6dd3ee8d7d180b98068fd0bb58ece5c447685" translate="yes" xml:space="preserve">
          <source>The easing to apply between keyframes can be specified by providing an &lt;code&gt;easing&lt;/code&gt; value as illustrated below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36c2d561e15721f7199c55cb6d8cd2bd3f88e12" translate="yes" xml:space="preserve">
          <source>The edge case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceca654f8b1fedab74ca304017d68f6bb4cc5957" translate="yes" xml:space="preserve">
          <source>The effect is clearly visible when using &lt;a href=&quot;webglrenderingcontext/scissor&quot;&gt;&lt;code&gt;scissor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;webglrenderingcontext/clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; to draw a square in the center of the canvas, by specifying its position and size in pixels. In the first canvas, we get the desired result. In the second, the square has the wrong shape, size, and position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38c525acf6de8b697009e81e08a36abe2497efc" translate="yes" xml:space="preserve">
          <source>The element &lt;a href=&quot;../htmlelement/style&quot;&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; property (see also the section &quot;DOM Style Object&quot; below) can also be used to get and set the styles on an element. However, this property only returns style attributes that have been set &lt;em&gt;in-line&lt;/em&gt; (e.g, &lt;code&gt;&amp;lt;td style=&quot;background-color: lightblue&quot;&amp;gt;&lt;/code&gt; returns the string &quot;&lt;code&gt;background-color:lightblue&lt;/code&gt;&quot;, or directly for that element using &lt;code&gt;element.style.propertyName&lt;/code&gt;, even though there may be other styles on the element from a stylesheet).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2230adc9eaf1786683397ea1d15fff8eaf5cb88e" translate="yes" xml:space="preserve">
          <source>The element and its document are the same node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a5d8c04b7b85bba7666924c0feadf666f087e1" translate="yes" xml:space="preserve">
          <source>The element goes into value mode when the contents of the &lt;code&gt;value&lt;/code&gt; property are set. The &lt;code&gt;value&lt;/code&gt; property otherwise behaves like the &lt;a href=&quot;node/textcontent&quot;&gt;&lt;code&gt;textContent&lt;/code&gt;&lt;/a&gt; property. When the element is in value mode, the default value is accessible only through the &lt;code&gt;defaultValue&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726cda6fb64b42af7a567b884ae375b70db2fc05" translate="yes" xml:space="preserve">
          <source>The element holding the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6882b0a115c5563d3e1f2aa7cc6b2f7936382c7e" translate="yes" xml:space="preserve">
          <source>The element is not contained by a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3835887cda98666beaa67e762f0e969fb5e4617a" translate="yes" xml:space="preserve">
          <source>The element is not permitted to use the &lt;code&gt;&quot;fullscreen&quot;&lt;/code&gt; feature, either because of Feature Policy configuration or other access control features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bae120200d5252afa6bd036c51e8427626bbb5" translate="yes" xml:space="preserve">
          <source>The element may not be scrolled completely to the top or bottom depending on the layout of other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1925e40fbf4c25a60a28a354cae78328aa4addeb" translate="yes" xml:space="preserve">
          <source>The element may not be scrolled completely to the top or bottom, depending on the layout of other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6e42f89a20033a8fc6464aceefdc254e6f33ba" translate="yes" xml:space="preserve">
          <source>The element that is used as the viewport for checking visiblity of the target. Must be the ancestor of the target. Defaults to the browser viewport if not specified or if &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01187a52f74b1a64fc391a719d1c12e8a912013" translate="yes" xml:space="preserve">
          <source>The element that was inserted, or &lt;code&gt;null&lt;/code&gt;, if the insertion failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5dadbcc1e5deed214947b0e1b0b9a15b36d9ff" translate="yes" xml:space="preserve">
          <source>The element that's currently in full screen mode for this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cf7a294542e36d54f76e3efa9a64ef66926e29" translate="yes" xml:space="preserve">
          <source>The element to be inserted into the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57266882c56c41949202acacd4c30dd306a64bad" translate="yes" xml:space="preserve">
          <source>The element to check whether it is focused or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d3ce6143c18f6318f72b79d2a50a5d3c2ab10e" translate="yes" xml:space="preserve">
          <source>The element you are trying to attach to is already a shadow host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a63d1d381c73831674e7632fa276542156e2195" translate="yes" xml:space="preserve">
          <source>The element's audio tracks are then scanned through using the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt; method (although the &lt;a href=&quot;../htmlmediaelement/audiotracks&quot;&gt;&lt;code&gt;audioTracks&lt;/code&gt;&lt;/a&gt; property of a media element isn't actually a JavaScript array, it can be accessed like one for the most part).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73fe352de67b1a5c61ffc87a5b95f726a109dea2" translate="yes" xml:space="preserve">
          <source>The elements belonging to this field set. The type of this property depends on the version of the spec that is implemented by the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c343e7815e70e2fa24f02342559d976ed9ee1e98" translate="yes" xml:space="preserve">
          <source>The elements properties returns an &lt;a href=&quot;htmlformcontrolscollection&quot;&gt;&lt;code&gt;HTMLFormControlsCollection&lt;/code&gt;&lt;/a&gt; instead of a raw &lt;a href=&quot;htmlcollection&quot;&gt;&lt;code&gt;HTMLCollection&lt;/code&gt;&lt;/a&gt;. This is mainly a technical change. The following method has been added: &lt;code&gt;checkValidity()&lt;/code&gt;. The following properties have been added: &lt;code&gt;autocomplete&lt;/code&gt;, &lt;code&gt;noValidate&lt;/code&gt;, and &lt;code&gt;encoding&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9576849387116d13de73da6773fdebec761e418" translate="yes" xml:space="preserve">
          <source>The elements which are included by &lt;code&gt;HTMLFormElement.elements&lt;/code&gt; and &lt;code&gt;HTMLFormElement.length&lt;/code&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038fbcc6991055e044b56d6700ed68b6a9094c75" translate="yes" xml:space="preserve">
          <source>The ellipse's major-axis radius. Must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e09f5508b6496b219b63b56715ad07daee738eb" translate="yes" xml:space="preserve">
          <source>The ellipse's minor-axis radius. Must be non-negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07352dfb71000fc17f79e87f630e37284604468" translate="yes" xml:space="preserve">
          <source>The embedded worker is now nested into a new custom &lt;code&gt;document.worker&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1506c3ba865f18a6e5396d480f379988aa6f89c" translate="yes" xml:space="preserve">
          <source>The empty string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf6d22713bb3baf8e65535dac9f19818721a3ea" translate="yes" xml:space="preserve">
          <source>The empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8f5760a22e16c2120219c908bdd89b47276c3a" translate="yes" xml:space="preserve">
          <source>The empty string is the default value of &lt;code&gt;destination&lt;/code&gt;. &lt;em&gt;What does it mean?&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2b2a843584cebc2c2e4fe1c9dcf3817abc6f72" translate="yes" xml:space="preserve">
          <source>The encoding or decoding operation failed (No legacy code value and constant name).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66368cab63ce34c6d2a7a4c550b6575908a2df90" translate="yes" xml:space="preserve">
          <source>The end of the seekable range to set in seconds measured from the beginning of the source. If the duration of the media source is positive infinity, then the &lt;a href=&quot;../timeranges&quot;&gt;&lt;code&gt;TimeRanges&lt;/code&gt;&lt;/a&gt; object returned by the &lt;a href=&quot;../htmlmediaelement/seekable&quot;&gt;&lt;code&gt;HTMLMediaElement.seekable&lt;/code&gt;&lt;/a&gt; property will have an end timestamp no less than this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd54f6dfa62e6e0d8c83111f94e9b1315644a45" translate="yes" xml:space="preserve">
          <source>The end time of the animation in milliseconds from the animation's start (if the &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt; is associated with an &lt;a href=&quot;../animation&quot;&gt;&lt;code&gt;Animation&lt;/code&gt;&lt;/a&gt;). (Also includes &lt;a href=&quot;../effecttiming/enddelay&quot;&gt;&lt;code&gt;EffectTiming.endDelay&lt;/code&gt;&lt;/a&gt; in that calculation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce9080bbd0720388d04e77db7152bf46eb1c951" translate="yes" xml:space="preserve">
          <source>The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2e21c2768140f2a342a01112545534c98f1f74" translate="yes" xml:space="preserve">
          <source>The endpoint is terminating the connection because a data frame was received that is too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe74cf3e4f563a749d1e026968f215bb333aac32" translate="yes" xml:space="preserve">
          <source>The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3391f58bb9350e1c72b28d0eaea0d9a9a5a1b9f" translate="yes" xml:space="preserve">
          <source>The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48bdca4725363ecaffe97c6b9ecd829c2cd6152" translate="yes" xml:space="preserve">
          <source>The endpoint is terminating the connection due to a protocol error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f88e52a39b1d9214e289ffbb171fa3eb1ea67a" translate="yes" xml:space="preserve">
          <source>The endpoint takes the form of a custom URL pointing to a push server, which can be used to send a push message to the particular service worker instance that subscribed to the push service. For this reason, it is a good idea to keep your endpoint a secret, so others do not hijack it and abuse the push functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9cc7a728887de3805969d4bb1f5ea61fe97b278" translate="yes" xml:space="preserve">
          <source>The ends of lines are rounded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c40a63d672bcbba6fc6355e64ab3e78cabd9188" translate="yes" xml:space="preserve">
          <source>The ends of lines are squared off at the endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b7f60971f0018ed0fee963d8387db77b0b3f91" translate="yes" xml:space="preserve">
          <source>The ends of lines are squared off at the endpoints. Default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba9d5d957f02159335dfd6c10e75abeed4a5e9d" translate="yes" xml:space="preserve">
          <source>The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bdf555a4f809d03783980554d6281fca259079" translate="yes" xml:space="preserve">
          <source>The entire exchange in a complicated diagram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0021ea0dd58048d4d550b7190ae06c4102765fa3" translate="yes" xml:space="preserve">
          <source>The entire hierarchy counts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14fbf4224667fbf0d50127b001983bd53365336" translate="yes" xml:space="preserve">
          <source>The entire read request has been completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7bbacb774adc666fb7e34454855f4d1e85e6ba" translate="yes" xml:space="preserve">
          <source>The entity name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeafbe5b3438638f1ab5218a5ba8f2878d6898f2" translate="yes" xml:space="preserve">
          <source>The entry couldn't be removed due to permissions or other access constraints, or because there are too many calls being made on file resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590d9e7505115b2fb6755515859cece7fbc90572" translate="yes" xml:space="preserve">
          <source>The enumeration was set to a value that is not one of predefined types. It is invalid to attempt to define a new value of this type or to attempt to switch an existing value to this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66bd7791e62ded18713ccbd80305f061d4c4491" translate="yes" xml:space="preserve">
          <source>The equivalent of this element outside of frames: &lt;a href=&quot;htmlbodyelement&quot;&gt;&lt;code&gt;HTMLBodyElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85520e614e55e6129ff91f12f8f68ea58c42a73" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area&quot;&gt;&lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlanchorelement/rel&quot;&gt;&lt;code&gt;HTMLAnchorElement.rel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmlareaelement/rel&quot;&gt;&lt;code&gt;HTMLAreaElement.rel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa093e10939d0ff93517eccd7872cd95bb69b27d" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area&quot;&gt;&lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlanchorelement/rellist&quot;&gt;&lt;code&gt;HTMLAnchorElement.relList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmlareaelement/rellist&quot;&gt;&lt;code&gt;HTMLAreaElement.relList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a08ce1d5b5708eb4a1087d0f3fca0b85369c0b1" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlanchorelement/rel&quot;&gt;&lt;code&gt;HTMLAnchorElement.rel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmllinkelement/rel&quot;&gt;&lt;code&gt;HTMLLinkElement.rel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1856e12c8b0d00f618cf0ba72fa9efcaddc3ab" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlanchorelement/rellist&quot;&gt;&lt;code&gt;HTMLAnchorElement.relList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmllinkelement/rellist&quot;&gt;&lt;code&gt;HTMLLinkElement.relList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d2c23f9cda1bc3e034b14c5fade6bf650d77ba" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area&quot;&gt;&lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlareaelement/rel&quot;&gt;&lt;code&gt;HTMLAreaElement.rel&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmllinkelement/rel&quot;&gt;&lt;code&gt;HTMLLinkElement.rel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3fb443273be4c837972aa6ac77d91b176606b6" translate="yes" xml:space="preserve">
          <source>The equivalent property on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area&quot;&gt;&lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../htmlareaelement/rellist&quot;&gt;&lt;code&gt;HTMLAreaElement.relList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmllinkelement/rellist&quot;&gt;&lt;code&gt;HTMLLinkElement.relList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddeb03a2c0d9c5955fd031d2ef37c54485b14098" translate="yes" xml:space="preserve">
          <source>The error callback function, if provided when calling &lt;code&gt;getCurrentPosition()&lt;/code&gt; or &lt;code&gt;watchPosition()&lt;/code&gt;, expects a &lt;a href=&quot;positionerror&quot;&gt;PositionError&lt;/a&gt; object as its first parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bc55168632e2a1af048cb9e89962831a825ef9" translate="yes" xml:space="preserve">
          <source>The error callback is called if opening the stream doesn't work. This will happen for example if there's no compatible camera connected, or the user denied access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a356feae412db87505a1d3d41d10749c3ba6732" translate="yes" xml:space="preserve">
          <source>The error event has the following three fields that are of interest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2722be94ff4dc72dfe669bdaac42ebbf621af3" translate="yes" xml:space="preserve">
          <source>The error handler looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386509f8e36bcf1e978d02141cff25a5f1a1fef3" translate="yes" xml:space="preserve">
          <source>The error you want future interactions to fail with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce093e886808d68fc1ea2b94d4c872b60c0efd6" translate="yes" xml:space="preserve">
          <source>The event ID to set the &lt;a href=&quot;https://developer.mozilla.org/en/Server-sent_events/EventSource&quot;&gt;&lt;code&gt;EventSource&lt;/code&gt;&lt;/a&gt; object's last event ID value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e8aa95e63a395f8bae26bc3a10a8292c799404" translate="yes" xml:space="preserve">
          <source>The event behavior depends on the specific platform. It will either behave like Windows or Mac depending on what the native event model does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d511d2ed879c97fdea062859c370d1074b482c0d" translate="yes" xml:space="preserve">
          <source>The event did not come directly from the user agent, but was instead dispatched by other code. another payment request is currently being processed, the current payment request is not currently being displayed to the user, or payment information is currently being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93da8e098cb7af74118eb7922f56d76f01af2ac4" translate="yes" xml:space="preserve">
          <source>The event doesn't bubble and is cancelable; to prevent the default action from taking place, the worker can call the error event's &lt;a href=&quot;../event/preventdefault&quot;&gt; &lt;code&gt;preventDefault()&lt;/code&gt; &lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9f07d789dcf15c7fe78a00198b18abdc57b9ff" translate="yes" xml:space="preserve">
          <source>The event handler can determine the current state by calling the transport's &lt;a href=&quot;getselectedcandidatepair&quot;&gt;&lt;code&gt;getSelectedCandidatePair()&lt;/code&gt;&lt;/a&gt; method, which returns a &lt;a href=&quot;../rtcicecandidatepair&quot;&gt;&lt;code&gt;RTCIceCandidatePair&lt;/code&gt;&lt;/a&gt; whose &lt;a href=&quot;../rtcicecandidatepair/local&quot;&gt;&lt;code&gt;RTCIceCandidatePair.local&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair/global&quot;&gt;&lt;code&gt;RTCIceCandidatePair.global&lt;/code&gt;&lt;/a&gt; properties specify &lt;a href=&quot;../rtcicecandidate&quot;&gt;&lt;code&gt;RTCIceCandidate&lt;/code&gt;&lt;/a&gt; objects describing the local and remote candidates that are currently being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b16e9b37207b3e7272a3b9c02d2eae488fcaa1" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beginEvent&quot;&gt;beginEvent&lt;/a&gt;&lt;/code&gt; event .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4f73e3aebf9b6cfccb7a1872de96d6e8eb8d41" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/devicechange&quot;&gt;devicechange&lt;/a&gt;&lt;/code&gt; event. This event is delivered to the &lt;code&gt;MediaDevices&lt;/code&gt; object when a media input or output device is attached to or removed from the user's computer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5040277582e03a1a8912d99a4f5a0ce7686bd381" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/endEvent&quot;&gt;endEvent&lt;/a&gt;&lt;/code&gt; event .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166d09687fae3fb88b037364e25d12d4f374ae4b" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/enter&quot;&gt;enter&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c083181e62a34007cc8c571ce82514923013269a" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653b25354b112c64b13f157fc3f9d365bfadf319" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/repeatEvent&quot;&gt;repeatEvent&lt;/a&gt;&lt;/code&gt; event .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91af9ea00dfe842e277105a44157f86a9b7557dd" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;abort&lt;/code&gt; event, fired when the transaction is aborted. This can happen due to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9a07e6763ad20126aada1df275adf99c7f8ae1" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;addsourcebuffer&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c995ef1762f6358e2c03aff83ffe7a713f877b51" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;complete&lt;/code&gt; event, thrown when the transaction completes successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea0375fcc0739ced27a1401ded0ac46d8da7937" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;error&lt;/code&gt; event, thrown when the transaction fails to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1adb42de0f4f7d68ca6998dd57b38f126ed038c5" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;removesourcebuffer&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d7fbc64f56b35632f931f620eba25e334aa737" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;sourceclose&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291058b107f22bd642f3123be1e7a51592f99ff7" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;sourceended&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1dd1867f2830b0150299e9b4155f7c88a1220e4" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;sourceopen&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b4c7bffaf3400a2dca09527b34005155c96f67" translate="yes" xml:space="preserve">
          <source>The event handler for the &lt;code&gt;upgradeneeded&lt;/code&gt; event, fired when a database of a bigger version number than the existing stored database is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8039aced11b6fbc220df0b4d616ae7ee101eaf" translate="yes" xml:space="preserve">
          <source>The event handler for the blocked event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bff23c40b91e482f539c73950cafa28924eb130" translate="yes" xml:space="preserve">
          <source>The event handler for the blocked event. This event is triggered when the &lt;code&gt;upgradeneeded&lt;/code&gt; event should be triggered because of a version change but the database is still in use (i.e. not closed) somewhere, even after the &lt;code&gt;versionchange&lt;/code&gt; event was sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474e24637f0c7b170f692bdc37c79b796c698481" translate="yes" xml:space="preserve">
          <source>The event handler for the error event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12a9fcb953adc1ff46f112649eb68141ced8848" translate="yes" xml:space="preserve">
          <source>The event handler for the success event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2e0c7d1c9168adbb72be87969cd134fa1bfc7d" translate="yes" xml:space="preserve">
          <source>The event handler function is a &lt;a href=&quot;../mouseevent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; object. Apart from the button(s) the event is fired on, the behaviour is exactly the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377eba29fd6e2052b4c68c25f373ba946440db72" translate="yes" xml:space="preserve">
          <source>The event handler function to be registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbdf60f3b9f1b22426face46c9a8058b6c48994" translate="yes" xml:space="preserve">
          <source>The event handler receives as its sole input an &lt;a href=&quot;../event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; object describing the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/statechange&quot;&gt;statechange&lt;/a&gt;&lt;/code&gt; event which occurred. To determine the new state, examine the value of &lt;a href=&quot;state&quot;&gt;&lt;code&gt;state&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d37ce8b3eabb565d31f262fde4f3d4563ec1847" translate="yes" xml:space="preserve">
          <source>The event handler takes one parameter, a success &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/success&quot;&gt;Event&lt;/a&gt; with type=&quot;success&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff7ee9251fcb0776d3e082247c74390f58de49b" translate="yes" xml:space="preserve">
          <source>The event handler takes one parameter, an error &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/error&quot;&gt;Event&lt;/a&gt; with type=&quot;error&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6923d47466cfda77238b4f540c7754d04cbf4118" translate="yes" xml:space="preserve">
          <source>The event handler that kicks everything off, of course, is the handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49263a8901aa9cc0657885f3d9b5313cd1a359bd" translate="yes" xml:space="preserve">
          <source>The event handler uses the JavaScript &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof&quot;&gt;instanceof&lt;/a&gt;&lt;/code&gt; operator to determine which type of track the event occurred on, then outputs to console a message indicating what kind of track it is and whether it's being added to or removed from the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012b99608104dc79662718480695b8f1a115baca" translate="yes" xml:space="preserve">
          <source>The event has arrived at &lt;a href=&quot;../eventtarget&quot;&gt;the event's target&lt;/a&gt;. Event listeners registered for this phase are called at this time. If &lt;a href=&quot;bubbles&quot;&gt;&lt;code&gt;Event.bubbles&lt;/code&gt;&lt;/a&gt; is false, processing the event is finished after this phase is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c6bbfdafa209797c365228853c93ace461e64c" translate="yes" xml:space="preserve">
          <source>The event is being propagated through the target's ancestor objects. This process starts with the &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;, then &lt;a href=&quot;../document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;, then the &lt;a href=&quot;../htmlhtmlelement&quot;&gt;&lt;code&gt;HTMLHtmlElement&lt;/code&gt;&lt;/a&gt;, and so on through the elements until the target's parent is reached. &lt;a href=&quot;../eventlistener&quot;&gt;Event listeners&lt;/a&gt; registered for capture mode when &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener()&lt;/code&gt;&lt;/a&gt; was called are triggered during this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c28efe4407d8855023c0e7a9b138a6ce9a5841" translate="yes" xml:space="preserve">
          <source>The event is fired for all connections that are created when &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-monitoring-incoming-presentation-connections&quot;&gt;monitoring incoming presentation connections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6252a6f225cd48d15a933ca3c6b4199c527b71" translate="yes" xml:space="preserve">
          <source>The event is fired when a pointer becomes &lt;em&gt;active&lt;/em&gt;. For mouse, it is fired when the device transitions from no buttons depressed to at least one button depressed. For touch, it is fired when physical contact is made with the digitizer. For pen, it is fired when the stylus makes physical contact with the digitizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881127378492a3f198f3475b266aae8f0fd4e738" translate="yes" xml:space="preserve">
          <source>The event is passed into the event handler in the form of a &lt;a href=&quot;../trackevent&quot;&gt;&lt;code&gt;TrackEvent&lt;/code&gt;&lt;/a&gt; object, whose &lt;a href=&quot;../trackevent/track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; property identifies the newly-added track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d38a1f734b273d911dd6b95b97575a4a2dd558" translate="yes" xml:space="preserve">
          <source>The event is passed into the event handler in the form of a &lt;a href=&quot;../trackevent&quot;&gt;&lt;code&gt;TrackEvent&lt;/code&gt;&lt;/a&gt; object, whose &lt;a href=&quot;../trackevent/track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; property identifies the track that was removed from the media element's &lt;code&gt;AudioTrackList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b50e5922990d87af15b8d254304a5ff249039f" translate="yes" xml:space="preserve">
          <source>The event is passed into the event handler in the form of a &lt;a href=&quot;../trackevent&quot;&gt;&lt;code&gt;TrackEvent&lt;/code&gt;&lt;/a&gt; object, whose &lt;a href=&quot;../trackevent/track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; property identifies the track that was removed from the media element's &lt;code&gt;VideoTrackList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057b513221ba1dcbb98c9809cb7839bad4a45801" translate="yes" xml:space="preserve">
          <source>The event is passed into the event handler in the form of an &lt;a href=&quot;../event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; object; the event doesn't provide any additional information. To determine the new state of media's tracks, you'll have to look at their &lt;a href=&quot;../audiotrack/enabled&quot;&gt;&lt;code&gt;AudioTrack.enabled&lt;/code&gt;&lt;/a&gt; flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77dc84785a0e9abfced7e32039b1f770a0277d0" translate="yes" xml:space="preserve">
          <source>The event is passed into the event handler in the form of an &lt;a href=&quot;../event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; object; the event doesn't provide any additional information. To determine the new state of media's tracks, you'll have to look at their &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/enabled&quot;&gt;&lt;code&gt;VideoTrack.enabled&lt;/code&gt;&lt;/a&gt; flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c53a5e97d21d19d2014633532b40d8c666883a1" translate="yes" xml:space="preserve">
          <source>The event is propagating back up through the target's ancestors in reverse order, starting with the parent, and eventually reaching the containing &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;. This is known as bubbling, and occurs only if &lt;a href=&quot;bubbles&quot;&gt;&lt;code&gt;Event.bubbles&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. &lt;a href=&quot;../eventlistener&quot;&gt;Event listeners&lt;/a&gt; registered for this phase are triggered during this process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fbc8e51e55dc3704022dc555d714563ec4dc63" translate="yes" xml:space="preserve">
          <source>The event listener callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d814057a46ababa2b6e015aa98e8575d368186" translate="yes" xml:space="preserve">
          <source>The event listener can be specified as either a callback function or as an object that implements &lt;a href=&quot;../eventlistener&quot;&gt;&lt;code&gt;EventListener&lt;/code&gt;&lt;/a&gt;, whose &lt;a href=&quot;../eventlistener/handleevent&quot;&gt;&lt;code&gt;handleEvent()&lt;/code&gt;&lt;/a&gt; method serves as the callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518c33077d13e9ef921a9b77ebc4dcef34089213" translate="yes" xml:space="preserve">
          <source>The event object for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/result&quot;&gt;result&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/nomatch&quot;&gt;nomatch&lt;/a&gt;&lt;/code&gt; events, and contains all the data associated with an interim or final speech recognition result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325ca99660c33ab5c94119e7fc5d52067210150d" translate="yes" xml:space="preserve">
          <source>The event object is of type &lt;a href=&quot;../vrdisplayevent&quot;&gt;&lt;code&gt;VRDisplayEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416d4e70774d4d55c60ef485c4afb9ba9b75d97e" translate="yes" xml:space="preserve">
          <source>The event object of a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/message_(ServiceWorker)&quot;&gt;message&lt;/a&gt;&lt;/code&gt; event fired on a service worker (when a channel message is received on the &lt;a href=&quot;serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt; from another context) &amp;mdash; extends the lifetime of such events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364f00a2efc461792f1179ba522dc36c9096616f" translate="yes" xml:space="preserve">
          <source>The event passed to the listener is an &lt;a href=&quot;../idbversionchangeevent&quot;&gt;&lt;code&gt;IDBVersionChangeEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbb8501fd6c0787be9bab55b8d07f56e8960947" translate="yes" xml:space="preserve">
          <source>The event sent by the WebSocket object when a message is received from the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6187d9ea4d8efc63efccc30d2399951d3c9a97" translate="yes" xml:space="preserve">
          <source>The event sent by the WebSocket object when the connection closes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60d777a8bf84d534f926f3f0fe9703ae10c735f" translate="yes" xml:space="preserve">
          <source>The event stream is a simple stream of text data which must be encoded using UTF-8. Messages in the event stream are separated by a pair of newline characters. A colon as the first character of a line is in essence a comment, and is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333d73023a0e51754b80482740b531e64f5db3dc" translate="yes" xml:space="preserve">
          <source>The event that's fired when connection information changes and the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/change&quot;&gt;change&lt;/a&gt;&lt;/code&gt; is fired on this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3538beecc929a15322b6255e86de2e9981be621b" translate="yes" xml:space="preserve">
          <source>The event was generated by a mouse device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aeb012a6255ae5c4a103bdb359c0a10353e8ef6" translate="yes" xml:space="preserve">
          <source>The event was generated by a pen or stylus device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f041a8c8ef812afdbb618d861e9cad28c58344" translate="yes" xml:space="preserve">
          <source>The event was generated by a touch such as a finger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78c36b36227256daba1f3887f119503f68d93ff" translate="yes" xml:space="preserve">
          <source>The event was originally introduced by Microsoft in Internet Explorer 4 and standardized in the HTML5 specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cfe53f5a42517e01b6d9fc5947ae982a0ba31f" translate="yes" xml:space="preserve">
          <source>The event's pointer type, either the string &lt;code&gt;mouse&lt;/code&gt;, &lt;code&gt;pen&lt;/code&gt; or &lt;code&gt;touch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70b6a9277f70335ccccd9a0ca900283992482e5" translate="yes" xml:space="preserve">
          <source>The event's target is the same &lt;a href=&quot;element&quot;&gt;&lt;code&gt;element&lt;/code&gt;&lt;/a&gt; that received the &lt;code&gt;touchstart&lt;/code&gt; event corresponding to the touch point, even if the touch point has moved outside that element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd69348450342abf63c2725f24c4d0a8dbf8caf" translate="yes" xml:space="preserve">
          <source>The events based on this interface are &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addtrack&quot;&gt;addtrack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633a40125277bf4a9e9f79e143163e547924a45a" translate="yes" xml:space="preserve">
          <source>The events needed to handle generic pointer input are analogous to &lt;a href=&quot;mouseevent&quot;&gt;&lt;code&gt;mouse events&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;mousedown/pointerdown&lt;/code&gt;, &lt;code&gt;mousemove/pointermove&lt;/code&gt;, etc.). Consequently, pointer event types are intentionally similar to mouse event types. Additionally, a pointer event contains the usual properties present in mouse events (client coordinates, target element, button states, etc.) in addition to new properties for other forms of input: pressure, contact geometry, tilt, etc. In fact, the &lt;a href=&quot;pointerevent&quot;&gt;&lt;code&gt;PointerEvent&lt;/code&gt;&lt;/a&gt; interface inherits all of the &lt;a href=&quot;mouseevent&quot;&gt;&lt;code&gt;MouseEvent's&lt;/code&gt;&lt;/a&gt; properties thus facilitating migrating content from mouse events to pointer events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a814c43f5d425132a48ad8d280abb840a4ff06" translate="yes" xml:space="preserve">
          <source>The exact behavior of modal windows depends on the platform and on the Mozilla release version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c097a16215f9c09d84b569daaa304a9bd1fa8efa" translate="yes" xml:space="preserve">
          <source>The exact circumstances and browser capabilities change over time, but the general philosophy of the browser vendors is to make the best effort to keep the data when possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c236bb6935d17e0c6b1e874d88f1024505ba1a" translate="yes" xml:space="preserve">
          <source>The exact effect of this coordinate depends on each element. If the attribute is not specified, the effect is as if a value of &lt;code&gt;0&lt;/code&gt; were specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddfa1ab95605cf5b0611ce70f6e07c892959def" translate="yes" xml:space="preserve">
          <source>The exact effect of this coordinate depends on each element.If the attribute is not specified, the effect is as if a value of &lt;code&gt;0&lt;/code&gt; were specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db719df093965c969583d143320db6c5bc499bb" translate="yes" xml:space="preserve">
          <source>The exact validation technology depends on the payment handler, and merchant validation is entirely optional. In the end, the only thing that the web site or app is responsible for is fetching the merchant's validation key and passing it into the event's &lt;a href=&quot;../merchantvalidationevent/complete&quot;&gt;&lt;code&gt;complete()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ae65f7095de79e42d15340e08038c55e3639da" translate="yes" xml:space="preserve">
          <source>The example below draws three different paths, demonstrating each of the three &lt;code&gt;lineJoin&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f94208043ca899cfd1fd698c8c72e08ecdf07f" translate="yes" xml:space="preserve">
          <source>The example below draws three different paths, demonstrating each of these three &lt;code&gt;lineJoin&lt;/code&gt; property settings; the output is shown above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6d432a11f87417869101e32920bc4f7afa19f9" translate="yes" xml:space="preserve">
          <source>The example below draws two triangles, one filled and one outlined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f64de305c881b56a5819537356ae3477fe2032" translate="yes" xml:space="preserve">
          <source>The example below first checks to see if the browser supports service workers. If supported, the code registers the service worker and determines if the page is actively controlled by the service worker. If it isn't, it prompts the user to reload the page so the service worker can take control. The code also reports any registration failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21f51f86078e61a8538a5dff376f87463b710d0" translate="yes" xml:space="preserve">
          <source>The example below uses a simple fetch call to grab an image and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; tag. You'll notice that since we are requesting an image, we need to run &lt;a href=&quot;body/blob&quot;&gt;&lt;code&gt;Body.blob()&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; implements body) to give the response its correct MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf91867dda3f6738ef23772cc44b82b623fbd36c" translate="yes" xml:space="preserve">
          <source>The example below watches the state of the ICE agent for a failure or unexpected closure and takes appropriate action, such as presenting an error message or attempting to restart the ICE agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a485db6c54ac571dff7d2837860ae39779944a" translate="yes" xml:space="preserve">
          <source>The example below, which is based on the code from the article &lt;a href=&quot;../webrtc_api/signaling_and_video_calling&quot;&gt;Signaling and video calling&lt;/a&gt;, sets up a handler for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; events to send the candidates to the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff076e63d624494090166976810a11e9eca0e5e" translate="yes" xml:space="preserve">
          <source>The example creates an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element and lets the user assign either a valid music file to it, or a link to a file which doesn't exist. This lets us see the behavior of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; event handler, which is received by an event handler we add to the &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873416eb8e9852f6e180efb00e04799b2f7c485a" translate="yes" xml:space="preserve">
          <source>The example describes repeated pieces of code that will be hidden from now on, as well as defining a JavaScript utility function to make WebGL initialization easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9d358dac650cf6f5b343235672740978098030" translate="yes" xml:space="preserve">
          <source>The example explores the effect of setting (or not setting) the canvas size to its element size in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS&quot;&gt;CSS&lt;/a&gt; pixels, as it appears in the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775aa21bd51bf14efcbac6acf17dbd377e335d04" translate="yes" xml:space="preserve">
          <source>The example image above shows a scrollbar and an &lt;code&gt;offsetHeight&lt;/code&gt; which fits on the window. However, non-scrollable elements may have large &lt;code&gt;offsetHeight&lt;/code&gt; values, much larger than the visible content. These elements are typically contained within scrollable elements; consequently, these non-scrollable elements may be completely or partly invisible, depending on the &lt;code&gt;scrollTop&lt;/code&gt; setting of the scrollable container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6a0689a103b5968aa68ef14ffcf9549801c3c7" translate="yes" xml:space="preserve">
          <source>The example snippets in this article are taken from our WebSocket chat client/server sample. &lt;a href=&quot;https://github.com/mdn/samples-server/tree/master/s/websocket-chat&quot;&gt;See the code&lt;/a&gt;, then &lt;a href=&quot;https://mdn-samples.mozilla.org/s/websocket-chat&quot;&gt;try out the example for yourself&lt;/a&gt;. &lt;strong&gt;The example currently has a bug in it; it is trying to use insecure WebSockets but needs to be updated to use a secure one. We will fix this soon!&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25e736c8722982227eeb25d9a03b5ed63f1b9f1" translate="yes" xml:space="preserve">
          <source>The example, which pauses the video when you switch to another tab and plays again when you return to its tab, was created with the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02cd3f7e15fbbd4b51df1f2efaccfb38ef549b5" translate="yes" xml:space="preserve">
          <source>The examples are sorted in order of increasing difficulty. But rather than just presenting them in a single long list, they are additionally divided into topics. Sometimes we revisit a topic several times, such as when needing to discuss it initially at a basic level, and later at intermediate and advanced levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fac92da9399efbc7aceb186d7276c6b2bd9333" translate="yes" xml:space="preserve">
          <source>The examples described here should be taken together to get a better understanding of how service workers scope applies to a page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f35e827cf90f5fa408491f19ef282af9f91bf3" translate="yes" xml:space="preserve">
          <source>The exception is if another element was already in full-screen mode when the current element was placed into full-screen mode using &lt;code&gt;requestFullscreen()&lt;/code&gt;. In that case, the previous full-screen element is restored to full-screen status instead. In essence, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_(abstract_data_type)&quot;&gt;stack&lt;/a&gt; of full-screen elements is maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22226988c671f551ab2bc4ebd3599926f96a5964" translate="yes" xml:space="preserve">
          <source>The exception to this is Chrome, starting with version 56 (desktop, Chrome for android, and android webview), where the default value for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchmove&quot;&gt;touchmove&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and calls to &lt;a href=&quot;event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; are not needed. To override this behavior, you simply set the &lt;code&gt;passive&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; as shown in the example below. This change prevents the listener from blocking page rendering while a user is scrolling. A demo is available on the &lt;a href=&quot;https://developers.google.com/web/updates/2016/06/passive-event-listeners&quot;&gt;Google Developer&lt;/a&gt; site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b0f285c8e2ca73b2fdc67c22882ba9aa5d84cc" translate="yes" xml:space="preserve">
          <source>The exception to this is if the worker script's origin is a globally unique identifier (for example, if its URL has a scheme of data or blob). In this case, the worker does inherit the CSP of the document or worker that created it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8519e2c3bfeefcc7dd7c21b04d3c9bc548ff322" translate="yes" xml:space="preserve">
          <source>The existing file or directory is removed and replaced with a new one, then the &lt;code&gt;successCallback&lt;/code&gt; is called with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry&quot;&gt;&lt;code&gt;FileSystemFileEntry&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry&quot;&gt;&lt;code&gt;FileSystemDirectoryEntry&lt;/code&gt;&lt;/a&gt;, as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff272e359e600a067730f5aba42a8ffbc75bf0f" translate="yes" xml:space="preserve">
          <source>The explanation of these two lines above can be found at &quot;Example of pushState() method&quot; section. Then suppose http://mozilla.org/bar.html executes the following JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1277ac3fa87993a0996df3f4be0accd9524bd2b0" translate="yes" xml:space="preserve">
          <source>The explicit original target of the event (Mozilla-specific).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910929879bb764792e06c30a4e30029bf5ccaa8" translate="yes" xml:space="preserve">
          <source>The extension is activated by default to privileged contexts (chrome context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13a854923903e14f4079b976cdc6ca6c31b7642" translate="yes" xml:space="preserve">
          <source>The extensions selected by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e309dfba5028c5803c72dbe68930bc337160cf10" translate="yes" xml:space="preserve">
          <source>The external &lt;code&gt;Node&lt;/code&gt; or &lt;code&gt;DocumentFragment&lt;/code&gt; to import into the current document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac91a64226017517f660dfede885dfecdd15c3a0" translate="yes" xml:space="preserve">
          <source>The fallback content is displayed in browsers which do not support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt;. Scripts can also check for support programmatically by simply testing for the presence of the &lt;code&gt;getContext()&lt;/code&gt; method. Our code snippet from above becomes something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b91aad8b5c89d86e1af945284e7f658835e0f0a" translate="yes" xml:space="preserve">
          <source>The fastest, most widely useable, most standard, and most future-ready way to solve the unicode problem is by transforming the UTF16 into UTF8-in-16 then use &lt;code&gt;btoa&lt;/code&gt; on the UTF8-in-16 string. To understand this deeper, UTF16 uses 16 bits as the smallest unit of measure whereas UTF8 uses 8 bits as the smallest unit of measure. This means that the smallest a UTF16 character can be is 16 bits (2 bytes) meanwhile the smallest a UTF8 character can be is 8 bits (1 byte). Then, UTF8-in-16 is making the string encoded as UTF-8, but storing it as a UTF-16 string by only using 8 (from UTF8) of the 16 bits in each unit of measure of a UTF-16 string. This method is incredibly efficient because all it takes is a single simple super fast &lt;code&gt;String.prototype.replace&lt;/code&gt; to convert between UTF-16 and UTF8-in-16. There is no need to encode the string as an array buffer then reencode it as a string. Rather, the below code simply and straightforwardly converts it in a single &lt;code&gt;String.prototype.replace&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb0439c89ec942edaf35bee7f451751e60e6db8" translate="yes" xml:space="preserve">
          <source>The feature flags are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78931753a768075720670b6d0c635cb4bd6383e" translate="yes" xml:space="preserve">
          <source>The fetch operation is complete. This could mean that either the data transfer has been completed successfully or failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dbdd3e402541ac1d372f18c7d8b43d4a602ed5" translate="yes" xml:space="preserve">
          <source>The fetching of the associated resource was aborted by the user's request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fda7923e670cbb03dc610fc589565c64ea62572" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;&quot;4234997325&quot;&lt;/code&gt; is the foundation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6e03b19e42e2b21d5f72e46496dad12d3fe18b" translate="yes" xml:space="preserve">
          <source>The field of view (FOV) is the area that each of the user's eyes can reasonably be expected to see. It roughly takes the form of a pyramid shape, laid down on one side, with the apex inside the user's head, and the rest of the pyramid eminating from the user's eye. Each eye has it's own FOV, one slightly overlapping the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d14155e011fc16ca9a27e8dac5391b405cc649" translate="yes" xml:space="preserve">
          <source>The field's value. In the two parameter version this is a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt;, or if it is not, it is converted to a string. In the three parameter version this can be a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt;. If none of these are specified the value is converted to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3354d8eb8f5abb92146eb5f3ad94f0724bc1bc2e" translate="yes" xml:space="preserve">
          <source>The field's value. This can be a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; (including subclasses such as &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3188488e0ada5fc9580eac41e3ef8e893115f68" translate="yes" xml:space="preserve">
          <source>The fifth field, &lt;code&gt;&quot;192.168.0.56&quot;&lt;/code&gt; is the IP address in this candidate's a-line string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8e058e84bf3bc453cf035cfc7f2bf238000df0" translate="yes" xml:space="preserve">
          <source>The file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632ce2d43319e70accda4feb98f4a2f96d7c3c21" translate="yes" xml:space="preserve">
          <source>The file or directory cannot be read, typically due to permission problems that occur after a reference to a file has been acquired (for example, the file or directory is concurrently locked by another application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf3af37a20cc4629e47a06fdf7218ad1df6dab6" translate="yes" xml:space="preserve">
          <source>The file or directory doesn't exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fd751b10f330d57bc6830fca01b200cc5979a1" translate="yes" xml:space="preserve">
          <source>The file or directory is created, then a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry&quot;&gt;&lt;code&gt;FileSystemFileEntry&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemDirectoryEntry&quot;&gt;&lt;code&gt;FileSystemDirectoryEntry&lt;/code&gt;&lt;/a&gt; is passed to the &lt;code&gt;successCallback&lt;/code&gt;, as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80613ac1ccc857f1d9d499b91e6976c56d48ef78" translate="yes" xml:space="preserve">
          <source>The file or directory with the same path already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43a0beac9c2bfb7e5594bc005c840834e39c8cb" translate="yes" xml:space="preserve">
          <source>The file system's cached state is inconsistent with its state on disk, so the file could not be deleted for safety reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b524be960a9c15e5e7e9a3446f024149a488e3" translate="yes" xml:space="preserve">
          <source>The file system's state doesn't permit modification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d67f76631b2236dfe7e9bf0a70d93eddfe5873a" translate="yes" xml:space="preserve">
          <source>The file system's state doesn't permit removing the file or directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edbbc83f9720b889ab40000dfb7bed45bd9e759" translate="yes" xml:space="preserve">
          <source>The file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c380dfd7ffe5491af5513fac453ccd93bbe3d11b" translate="yes" xml:space="preserve">
          <source>The file's name as a read-only string. This is just the file name, and does not include any path information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81070cd9d4541cf3bd6dbf57258163bcd7f563a9" translate="yes" xml:space="preserve">
          <source>The filename of the plugin file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6536d8ffb16ab72dddc638d7282bff672a92d6" translate="yes" xml:space="preserve">
          <source>The filename reported to the server (a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt;), when a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; is passed as the second parameter. The default filename for &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; objects is &quot;blob&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de5eecaa230a26b7b686e9c16cefc8ea6fe277a" translate="yes" xml:space="preserve">
          <source>The filename reported to the server (a &lt;a href=&quot;../usvstring&quot;&gt;&lt;code&gt;USVString&lt;/code&gt;&lt;/a&gt;), when a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; is passed as the second parameter. The default filename for &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; objects is &quot;blob&quot;. The default filename for &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects is the file's filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fa17885b340cacbae18cc7fef431b7aca99911" translate="yes" xml:space="preserve">
          <source>The files might be unsafe for access within a Web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ddc8290ee0db3747d1076d5ea8c8def7bc09bb" translate="yes" xml:space="preserve">
          <source>The fill rule to use (defaults to &lt;code&gt;&quot;nonzero&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b46470f274d1f6dd46add5efe0bcc4cd3f42ee0" translate="yes" xml:space="preserve">
          <source>The filter button's &lt;code&gt;click&lt;/code&gt; handler then connects the &lt;code&gt;IIRFilter&lt;/code&gt; up to the graph, between the source and the detination:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f5498ede33ad9e1fce6a7fd3c59c1878954622" translate="yes" xml:space="preserve">
          <source>The filter parameters of biquad filters can be automated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdb96218b2326296b6923a3a2b9d2c01e79ec29" translate="yes" xml:space="preserve">
          <source>The final benefit of using homogeneous coordinates is that they fit very nicely for multiplying against 4x4 matrices. A vertex must match at least one of the dimensions of a matrix in order to be multiplied against it. The 4x4 matrix can be used to encode a variety of useful transformations. In fact, the typical perspective matrix uses the division by the w component to achieve its transformation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00605c111560c463640d3249808cfe2f47a9cd34" translate="yes" xml:space="preserve">
          <source>The final matrix is the view matrix that represents the camera's location in space. Imagine shooting a movie with a physical camera. This matrix represents the position and rotation of that physical camera.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad69495174843fb647a705e9427581feb52a59c5" translate="yes" xml:space="preserve">
          <source>The final playNoise() function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324e91e258c535001184a64afe2522cde7ee2fe2" translate="yes" xml:space="preserve">
          <source>The final playPulse() function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b56a1bc1c34c4fae5e8638bab089638125649bc" translate="yes" xml:space="preserve">
          <source>The final playSample() function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaf2e530b4d5182665fdfc720b487947fa49a4d" translate="yes" xml:space="preserve">
          <source>The final playSweep() function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8198bc1580cf36e261386c7aeb9306468e4f12" translate="yes" xml:space="preserve">
          <source>The final product is below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867be82d5ed9befcbda74db6c5fa227407af3135" translate="yes" xml:space="preserve">
          <source>The final state for the modified object tree looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d46e8cc4b5751bf83bfe5cd15af4c0ad3a07b92" translate="yes" xml:space="preserve">
          <source>The final step in all of this is to create the view matrix. Right now we can move the cube around world space. We can project everything to have perspective, but we still can't move the camera.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4584fb645860860a6b0db032e6df9eb79970b7" translate="yes" xml:space="preserve">
          <source>The final step is to begin sending the local video across the peer connection to the caller. This is done by adding each track in the stream by iterating over the list returned by &lt;a href=&quot;../mediastream/gettracks&quot;&gt;&lt;code&gt;MediaStream.getTracks()&lt;/code&gt;&lt;/a&gt; and passing them to &lt;code&gt;addTrack()&lt;/code&gt; along with the &lt;code&gt;stream&lt;/code&gt; which they're a component of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570539a8aa79f8bc40bc1f75446088e7f020130c" translate="yes" xml:space="preserve">
          <source>The final step is to call the event's &lt;a href=&quot;paymentrequestupdateevent/updatewith&quot;&gt;&lt;code&gt;updateWith()&lt;/code&gt;&lt;/a&gt; method, passing along the &lt;code&gt;updateDetails&lt;/code&gt; object. This lets the Payment Request API know to present the specified error or errors but to allow the user to keep trying to edit the address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd241113c1e5c0f46cced24fc28f6d78629fc37a" translate="yes" xml:space="preserve">
          <source>The first &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; that matches at least one of the specified selectors or &lt;code&gt;null&lt;/code&gt; if no such element is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b993b4eee70e24296cc068e08abb4f45676f1d" translate="yes" xml:space="preserve">
          <source>The first VR gaming attempts were big and expensive &amp;mdash; in 1991 Virtuality Group created a VR-ready arcade machine with goggles and ported popular titles like Pac-Man to virtual reality. Sega introduced their VR glasses at the Consumer Electronics Show in 1993. Companies were experimenting, but the market and consumers weren't convinced &amp;mdash; we had to wait until 2012 to see a real example of a successful VR project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d98db23377209c1bc30f4f2722526baf0d3ab7" translate="yes" xml:space="preserve">
          <source>The first WebVR-related code you'll meet is this following block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3591de3d1ee4b24c8f6bd5bd5becf7eae3ad1d0a" translate="yes" xml:space="preserve">
          <source>The first and most common way to use constraints is to specify them when you call &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;getUserMedia()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331c1b6d80b6c3fc30bec4a4193823b222b3b294" translate="yes" xml:space="preserve">
          <source>The first and most important step is to ensure that your files are comprised of a container and codec that users' browsers support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8950b87744377556f8d6d7edb3e9c54abf49f635" translate="yes" xml:space="preserve">
          <source>The first argument must be an Element (passing a non-Element Node, like a #text Node, will throw an error). Starting in Gecko 1.9.2 (Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0), returned URL values now have quotes around the URL, like this: &lt;code&gt;url(&quot;http://foo.com/bar.jpg&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfbc28c7d5f2806b45230c62b15184378f52a30" translate="yes" xml:space="preserve">
          <source>The first block of code in our app&amp;rsquo;s JavaScript file &amp;mdash; &lt;code&gt;app.js&lt;/code&gt; &amp;mdash; is as follows. This is our entry point into using service workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f959c2327f01dee2fb370c127fa4bbfbfef53bc" translate="yes" xml:space="preserve">
          <source>The first box has a threshold for each percentage point of visibility; that is, the &lt;a href=&quot;intersectionobserver/thresholds&quot;&gt;&lt;code&gt;IntersectionObserver.thresholds&lt;/code&gt;&lt;/a&gt; array is &lt;code&gt;[0.00, 0.01, 0.02, ..., 0.99, 1.00]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55ed6b72e6c7ff3b9e01a406f479b6de87a1388" translate="yes" xml:space="preserve">
          <source>The first byte, which currently has a value of 129, is a bitfield that breaks down as such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca43fffdc4d1e175514fde1142052460fae3a8ef" translate="yes" xml:space="preserve">
          <source>The first call fails because the value of &lt;code&gt;useCapture&lt;/code&gt; doesn't match. The second succeeds, since &lt;code&gt;useCapture&lt;/code&gt; matches up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be59595a03723d63c603d9799011c1806e6b5160" translate="yes" xml:space="preserve">
          <source>The first call to &lt;code&gt;setAttribute()&lt;/code&gt; above shows changing the &lt;code&gt;name&lt;/code&gt; attribute's value to &quot;helloButton&quot;. You can see this using your browser's page inspector (&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/inspect-styles&quot;&gt;Chrome&lt;/a&gt;, &lt;a href=&quot;https://docs.microsoft.com/en-us/microsoft-edge/f12-devtools-guide/dom-explorer&quot;&gt;Edge&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector&quot;&gt;Firefox&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/library/content/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/Introduction/Introduction.html&quot;&gt;Safari&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eaf7c8b732a2b8e8f019d46c798c4a6827d7af" translate="yes" xml:space="preserve">
          <source>The first column in the table will be labeled &lt;code&gt;(index)&lt;/code&gt;. If &lt;code&gt;data&lt;/code&gt; is an array, then its values will be the array indices. If &lt;code&gt;data&lt;/code&gt; is an object, then its values will be the property names. Note that (in Firefox) &lt;code&gt;console.table&lt;/code&gt; is limited to displaying 1000 rows (first row is the labeled index).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b8543c58d7845244cffa26d39a0f08f5c6dd53" translate="yes" xml:space="preserve">
          <source>The first definition looks like this, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788d6784a71d91536479eaf783074ddf5fc19c03" translate="yes" xml:space="preserve">
          <source>The first descendant element of &lt;code&gt;baseElement&lt;/code&gt; which matches the specified group of &lt;code&gt;selectors&lt;/code&gt;. The entire hierarchy of elements is considered when matching, including those outside the set of elements including &lt;code&gt;baseElement&lt;/code&gt; and its descendants; in other words, &lt;code&gt;selectors&lt;/code&gt; is first applied to the whole document, not the &lt;code&gt;baseElement&lt;/code&gt;, to generate an initial list of potential elements. The resulting elements are then examined to see if they are descendants of &lt;code&gt;baseElement&lt;/code&gt;. The first match of those remaining elements is returned by the &lt;code&gt;querySelector()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e568e5722c78c70ce3da97d306917cda9f5ff6f" translate="yes" xml:space="preserve">
          <source>The first example logs text to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48414741b9083c04a7db4bfa41118f573396eda8" translate="yes" xml:space="preserve">
          <source>The first is a background gradient. As you can see, we assigned two colors at the same position. You do this to make very sharp color transitions&amp;mdash;in this case from white to green. Normally, it doesn't matter in what order you define the color stops, but in this special case, it does significantly. If you keep the assignments in the order you want them to appear, this won't be a problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df03a278897710c82f9b8a5aabc081e57111fba3" translate="yes" xml:space="preserve">
          <source>The first key to compare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c5ac737365711611e9afb70c4b2ab071d9d493" translate="yes" xml:space="preserve">
          <source>The first keyframe says that when the animation begins, the element should be rotated 90&amp;deg; to the left. That means that unless we specify otherwise using the &lt;code&gt;fill&lt;/code&gt; property, the instant the animation is started the element will be rotated to the left 90&amp;deg;, and then it will animate smoothly from there. Since by default the box isn't rotated,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e1545247441aee9395b9fe18c70dea3c04cc7a" translate="yes" xml:space="preserve">
          <source>The first line &amp;mdash; &lt;code&gt;#JSGF V1.0;&lt;/code&gt; &amp;mdash; states the format and version used. This always needs to be included first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0032b15fcff8370e6da1d2ee862f6b4019957aa1" translate="yes" xml:space="preserve">
          <source>The first line begins at (50, 50) and ends at (200, 50). The second line begins at (50, 90) and ends at (280, 120).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f310f19db24cbc0f13fa489c2f82f957f6e78400" translate="yes" xml:space="preserve">
          <source>The first line demonstrates no settings. The second line might be used to overlay text on a sign or label. The third line might be used for a title. The last line might be used for an Asian language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8720f6c1fb151d8970e3680f1b8357a23b00d6ef" translate="yes" xml:space="preserve">
          <source>The first line in the script retrieves the node in the DOM representing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element by calling the &lt;a href=&quot;../../document/getelementbyid&quot;&gt;&lt;code&gt;document.getElementById()&lt;/code&gt;&lt;/a&gt; method. Once you have the element node, you can access the drawing context using its &lt;code&gt;getContext()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7c7c03c7360630f867284fc7182182ad3395ec" translate="yes" xml:space="preserve">
          <source>The first line is started with a time, which is the starting time for showing the text that appears underneath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c762a7e9fc09434c8ef1809437846680dafd5952" translate="yes" xml:space="preserve">
          <source>The first line of WebVTT is standardized similar in the way some other languages require you to put headers as the file starts to indicate the file type. One the very first line you have to write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85eb65ea5aca3a19a2efd2f1831b0b0802e8a5d9" translate="yes" xml:space="preserve">
          <source>The first line of code in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/datachannel&quot;&gt;datachannel&lt;/a&gt;&lt;/code&gt; event handler shown below takes the channel from the event object and saves it locally for use by the code handling data traffic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814bacfed31bb1772ed089a172a9fc56132d192c" translate="yes" xml:space="preserve">
          <source>The first line of our &lt;code&gt;ontrack&lt;/code&gt; event handler takes the first stream in the incoming track and sets the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-srcobject&quot;&gt;srcobject&lt;/a&gt;&lt;/code&gt; attribute to that. This connects that stream of video to the element so that it begins to be presented to the user. The second line of code simply enables a &quot;hang up&quot; button, which the user can use to disconnect from the call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eccd03321a1a3ca70c68f6dcf86895e6f82b2d1" translate="yes" xml:space="preserve">
          <source>The first matrix discussed below is the model matrix, which defines how you take your original model data and move it around in 3d world space. In order to take world space coordinates and move them into the clip space cube, a projection matrix is needed. A common matrix used for projection is the perspective matrix, which mimics the effects of a typical camera. Finally if you want to move the camera around, a view matrix is needed to define the location of the camera in the scene.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c46dc496bf04ad9c6faaadb9ecd69a6d6f71470" translate="yes" xml:space="preserve">
          <source>The first notable code is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88b7739664f5b7b87ce008264e7879d9a49a5cb" translate="yes" xml:space="preserve">
          <source>The first object can contain up to five members, only the first of which is required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba52a20378945a7c52cad1f3de86e43f721726f" translate="yes" xml:space="preserve">
          <source>The first object can contain up to four members, all of which are optional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c6f93028565865ddb86377d4c5e7363ac609e7" translate="yes" xml:space="preserve">
          <source>The first of the transformation methods we'll look at is &lt;code&gt;translate()&lt;/code&gt;. This method is used to move the canvas and its origin to a different point in the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0663eafe01d74cd0ec5c9a55b98a40413018a3ef" translate="yes" xml:space="preserve">
          <source>The first of these three (&lt;code&gt;supportedInstruments&lt;/code&gt; in the example below) contains a &lt;code&gt;data&lt;/code&gt; property that has to conform to the structure defined by the &lt;a href=&quot;basiccardrequest&quot;&gt;&lt;code&gt;BasicCardRequest&lt;/code&gt;&lt;/a&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff69f57fd921105cbdd3324668330cb01e2c34b" translate="yes" xml:space="preserve">
          <source>The first of these three (&lt;code&gt;supportedInstruments&lt;/code&gt; in the example below) contains a &lt;code&gt;data&lt;/code&gt; property that has to conform to the structure defined by the &lt;code&gt;BasicCardRequest&lt;/code&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324e8636181eff63275fedac32484dc4bb32178d" translate="yes" xml:space="preserve">
          <source>The first of three properties that declare the USB protocol version supported by the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcc9c9f16fe7cfff6c58038c277f32e05b28e9f" translate="yes" xml:space="preserve">
          <source>The first panel on the left contains two components: a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element, which will receive the stream from WebRTC, and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt; the user clicks to capture a video frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb12318e19ba283ab4a766a97df70ee2463af95d" translate="yes" xml:space="preserve">
          <source>The first row will be used specially for the site header. The rows are sized the same way as the columns: the first one is automatically sized and the one uses the remaining space, but at least enough space to provide room for all elements within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a998a25838e2f1a0b424915fd35a349e54c8cfe5" translate="yes" xml:space="preserve">
          <source>The first section of the JavaScript code establishes some variables we'll be using. &lt;code&gt;shipSize&lt;/code&gt; contains the size of the ship the player is moving around, for convenience. &lt;code&gt;position&lt;/code&gt; is used to track the position of the ship within the play field. &lt;code&gt;moveRate&lt;/code&gt; and &lt;code&gt;turnRate&lt;/code&gt; are the number of pixels forward and backward each keystroke moves the ship and how many degrees of rotation the left and right steering controls apply per keystroke. angle is the current amount of rotation applied to the ship, in degrees; it starts at 0&amp;deg; (pointing straight up). Finally, &lt;code&gt;spaceship&lt;/code&gt; is set to refer to the element with the ID &lt;code&gt;&quot;spaceship&quot;&lt;/code&gt;, which is the SVG polygon representing the ship the player controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4f6aad281236508bdc5dd1e595f70c65b32150" translate="yes" xml:space="preserve">
          <source>The first simple example returns a reference to the HTML/document node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade840b580aecdd53b7e0528de1f70732e92c821" translate="yes" xml:space="preserve">
          <source>The first step is to clear the canvas to our background color; then we establish the camera's perspective. We set a field of view of 45&amp;deg;, with a width to height ratio that match the display dimensions of our canvas. We also specify that we only want objects between 0.1 and 100 units from the camera to be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f304eae576b4ee0032e287dae3d42260f7c1bc" translate="yes" xml:space="preserve">
          <source>The first step is to create the &quot;local&quot; end of the connection. This is the peer that will send out the connection request. The next step is to create the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; by calling &lt;a href=&quot;../rtcpeerconnection/createdatachannel&quot;&gt;&lt;code&gt;RTCPeerConnection.createDataChannel()&lt;/code&gt;&lt;/a&gt; and set up event listeners to monitor the channel so that we know when it's opened and closed (that is, when the channel is connected or disconnected within that peer connection).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0062939136a14fb605806e1485b434b162f86150" translate="yes" xml:space="preserve">
          <source>The first step is to create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element that we'll use to retrieve the video frames:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e407d9cacc94b5b5551fdec66bd790651bdb8d8" translate="yes" xml:space="preserve">
          <source>The first step is to draw a large rectangle with the default settings. Next we save this state and make changes to the fill color. We then draw the second and smaller blue rectangle and save the state. Again we change some drawing settings and draw the third semi-transparent white rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207764676e9c61ea662fca3178dfee2bab5d6ed7" translate="yes" xml:space="preserve">
          <source>The first step is to establish a drop zone. Exactly what part of your content will accept drops may vary depending on the design of your application, but making an element receive drop events is easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6684de2548095891a9f0ad19ae35c2cb392ae9" translate="yes" xml:space="preserve">
          <source>The first step to create a path is to call the &lt;code&gt;beginPath()&lt;/code&gt;. Internally, paths are stored as a list of sub-paths (lines, arcs, etc) which together form a shape. Every time this method is called, the list is reset and we can start drawing new shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063a9c8226e5d39039546cedc5b82e4e70c60028" translate="yes" xml:space="preserve">
          <source>The first thing that needs to be done in order to draw a frame of the animation is to clear the background to the desired color. In this case, we set the viewport based on the size of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt;, call &lt;a href=&quot;../webglrenderingcontext/clearcolor&quot;&gt;&lt;code&gt;clearColor()&lt;/code&gt;&lt;/a&gt; to set the color to use when clearing content, then we clear the buffer with &lt;a href=&quot;../webglrenderingcontext/clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cb0ebc88a5c4036599a647e321be8f9d4a7830" translate="yes" xml:space="preserve">
          <source>The first thing the callback does is check to see if the video is even playing; if it's not, the callback returns immediately without doing anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8693740eea5f6abbaf373c983e5de198aafbe2f9" translate="yes" xml:space="preserve">
          <source>The first thing to do is add code to load the textures. In our case, we'll be using a single texture, mapped onto all six sides of our rotating cube, but the same technique can be used for any number of textures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7f9205cd8c72fdf57651e4619e5c2502b4e02c" translate="yes" xml:space="preserve">
          <source>The first thing to do is update the vertex shader so it generates a shading value for each vertex based on the ambient lighting as well as the directional lighting. Let's take a look at the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ce80f3b2f2f8ebbfc8f86367fabf0eef60182b" translate="yes" xml:space="preserve">
          <source>The first thing we do here is obtain a reference to the canvas, assigning it to a variable named &lt;code&gt;canvas&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bea653c8205f818f029e7042b96bfc967e8d1d" translate="yes" xml:space="preserve">
          <source>The first thing we do is transform the normal based on the current orientation of the cube, by multiplying the vertex's normal by the normal matrix. We can then compute the amount of directional lighting that needs to be applied to the vertex by calculating the dot product of the transformed normal and the directional vector (that is, the direction from which the light is coming). If this value is less than zero, then we pin the value to zero, since you can't have less than zero light.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77852bdf723ba997cd81a7d39a590572ce9a606c" translate="yes" xml:space="preserve">
          <source>The first thing we need is to create a &lt;a href=&quot;keyframe_formats&quot;&gt;Keyframe Object&lt;/a&gt; corresponding to our CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;@keyframes&lt;/a&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d1fc5114cdf309756a426f29260d53da95c62e" translate="yes" xml:space="preserve">
          <source>The first thing we need to do is generate the array of normals for all the vertices that comprise our cube. Since a cube is a very simple object, this is easy to do; obviously for more complex objects, calculating the normals will be more involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d175edecccbfd3a880db1fc61649487256a546" translate="yes" xml:space="preserve">
          <source>The first thing you need in order to use WebGL for rendering is a canvas. The HTML fragment below declares a canvas that our sample will draw into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a3d52a59d032cdbf11ded6025dc61908af8c3c" translate="yes" xml:space="preserve">
          <source>The first thing you'll want to do with almost all of the requests you generate is to add success and error handlers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee14c558540f5f107e55b1cedcd9cd0b3768376" translate="yes" xml:space="preserve">
          <source>The first three of these event handlers are required; you have to handle them to do anything involving streamed media with WebRTC. The rest aren't strictly required but can be useful, and we'll explore them. There are a few other events available that we're not using in this example, as well. Here's a summary of each of the event handlers we will be implementing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2098a43f643599fe2d4fbd1f0fd80cf441d747c" translate="yes" xml:space="preserve">
          <source>The first two arcs create the face's eyes. The last arc creates the mouth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60718c67064461436d741d3fd820665d6d80ee99" translate="yes" xml:space="preserve">
          <source>The first type of constructor (see above) creates a completely new &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt; object instance. Its parameters are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa546f8f27bb41b5a3c8960b9a781c92776c998b" translate="yes" xml:space="preserve">
          <source>The first, basic, example just serializes an entire document into a string containing XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b1a43231322655a850d2ff2cfe117cd856cae2" translate="yes" xml:space="preserve">
          <source>The focus event is raised when the user sets focus on the given element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a05c0489240d6580075e9fbbd2b8853a2e6e73" translate="yes" xml:space="preserve">
          <source>The focus of a selection is the end point of the selection. When making a selection with a mouse, the focus is where in the document the mouse button is released. As the user changes the selection using the mouse or the keyboard, the focus is the end of the selection that moves.&lt;strong&gt; Note:&lt;/strong&gt; This is not the same as the focused &lt;em&gt;element&lt;/em&gt; of the document, as returned by &lt;a href=&quot;documentorshadowroot/activeelement&quot;&gt;&lt;code&gt;document.activeElement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f56d6b8d689bd2fcf50d0223d3e45857570e470" translate="yes" xml:space="preserve">
          <source>The follow-up panel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430a2cd34bce7e790b11b7ba7c9852617c29977c" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt; event handler calls &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; to turn off the browser's default drag and drop handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df8775ab4000277f7c015378ca4cc89f1b0442b" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;AudioNode&lt;/code&gt; children default to this value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b150fd49b07c76c7ae14da01f587ecaa7728e16f" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;computeViewMatrix()&lt;/code&gt; method animates the view matrix by moving it in and out, and left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039e8f3c9160d04661fa2124421015225f8a61f6" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;get()&lt;/code&gt; function will only return the first &lt;code&gt;username&lt;/code&gt; value appended:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e156f2a1f42585e7d2f4f5e3aaec4ea9ca939da0" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;getAll()&lt;/code&gt; function will return both &lt;code&gt;username&lt;/code&gt; values in an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faecd11c0a75eaef9b48a40c5d251627dd4aea4f" translate="yes" xml:space="preserve">
          <source>The following CSS styles our example content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc34dcabc4882dc34ab3bb284e340584bd82662" translate="yes" xml:space="preserve">
          <source>The following JavaScript code checks whether &lt;code&gt;margin&lt;/code&gt; is marked as important in a CSS selector rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38406b5e895456e23f4860dfaf2a5e4d18dad538" translate="yes" xml:space="preserve">
          <source>The following JavaScript code gets an object containing the computed RGB values of the &lt;code&gt;color&lt;/code&gt; CSS property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cfa8ee8aaf69a0d411882feaa074cc8b566ac9" translate="yes" xml:space="preserve">
          <source>The following JavaScript code gets the parent CSS style rule from a &lt;a href=&quot;../cssstyledeclaration&quot;&gt;&lt;code&gt;CSSStyleDeclaration&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4d3fce0f346bd0ad1bae4e1de92e03adcad50c" translate="yes" xml:space="preserve">
          <source>The following JavaScript code is stored in the &quot;fibonacci.js&quot; file referenced by the HTML in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50412f81043c8d74ca0cefee68b215adab69e01b" translate="yes" xml:space="preserve">
          <source>The following JavaScript code queries the value of the &lt;code&gt;margin&lt;/code&gt; property in a CSS selector rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45913e0025c23b35f14bbe901be2f58b23f757f2" translate="yes" xml:space="preserve">
          <source>The following JavaScript code removes the &lt;code&gt;background-color&lt;/code&gt; CSS property from a selector rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d91e24500469ecb9c82d52fc101ca3a14d4166d" translate="yes" xml:space="preserve">
          <source>The following JavaScript code sets a new value for the &lt;code&gt;border-width&lt;/code&gt; CSS property on a selector rule:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd6542222dede66d988926a0fe318bf49dd8290" translate="yes" xml:space="preserve">
          <source>The following additions to the &lt;a href=&quot;service_worker_api&quot;&gt;Service Worker API&lt;/a&gt; have been specified in the Push API spec to provide an entry point for using Push messages. They also monitor and respond to push and subscription change events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a466234281074801c2e2787cfc06cc0acabb36" translate="yes" xml:space="preserve">
          <source>The following are event handlers (and their corresponding event handler event types) which must be supported, as event handler IDL attributes, by objects implementing the &lt;a href=&quot;https://www.w3.org/TR/2016/CR-presentation-api-20160714/#idl-def-presentationrequest&quot;&gt;&lt;code&gt;PresentationRequest&lt;/code&gt;&lt;/a&gt; interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3425b1c140e84b56345fa4c0569cf1eb9a345d" translate="yes" xml:space="preserve">
          <source>The following attribute has been added: &lt;code&gt;menu&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196d63ae2327a694814be8b448c0c0471587918f" translate="yes" xml:space="preserve">
          <source>The following attributes have been added: &lt;code&gt;autofocus&lt;/code&gt;, &lt;code&gt;formAction&lt;/code&gt;, &lt;code&gt;formEnctype&lt;/code&gt;, &lt;code&gt;formMethod&lt;/code&gt;, &lt;code&gt;formNoValidate&lt;/code&gt;, &lt;code&gt;formTarget&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;validity&lt;/code&gt;, &lt;code&gt;validationMessage&lt;/code&gt;, and &lt;code&gt;willValidate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20dd8841b7bbde5acaa3d0e6ed13e0069b6c8c7f" translate="yes" xml:space="preserve">
          <source>The following attributes have been added: &lt;code&gt;autofocus&lt;/code&gt;, &lt;code&gt;placeholder&lt;/code&gt;, &lt;code&gt;dirName&lt;/code&gt;, &lt;code&gt;wrap&lt;/code&gt;, &lt;code&gt;maxLength&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;textLength&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;selectionStart&lt;/code&gt;, &lt;code&gt;selectionEnd&lt;/code&gt;, &lt;code&gt;selectionDirection&lt;/code&gt;, &lt;code&gt;validity&lt;/code&gt;, &lt;code&gt;validationMessage&lt;/code&gt;, and &lt;code&gt;willValidate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5958886151679d2e4a96d3d5c1cbefc33fbb905d" translate="yes" xml:space="preserve">
          <source>The following call selects &lt;code&gt;gl.TEXTURE1&lt;/code&gt; as the current texture. Subsequent calls that modify the texture state will affect this texture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692e1c402ec7cc757de9b225f15dbc6efeb957e3" translate="yes" xml:space="preserve">
          <source>The following code attaches pre-existing shaders to a &lt;a href=&quot;../webglprogram&quot;&gt;&lt;code&gt;WebGLProgram&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c0a514c23ea5ef3234d15be0ddca240274f592" translate="yes" xml:space="preserve">
          <source>The following code creates a request for a database to be opened asychronously, after which the database is opened when the request's &lt;code&gt;onsuccess&lt;/code&gt; handler is fired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb19c9a1efe8804fdb091b2bfc18c69d641e3b1" translate="yes" xml:space="preserve">
          <source>The following code demonstrates creating both 2D and 3D points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b6be469c1e8e4be8af64b3c6609931fea39eb7" translate="yes" xml:space="preserve">
          <source>The following code demonstrates the use of the functions above. It iterates over the children of an element (whose children are all elements) to find the one whose text is &lt;code&gt;&quot;This is the third paragraph&quot;&lt;/code&gt;, and then changes the class attribute and the contents of that paragraph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6092562c92a609118336f93b9f0d46545a71db18" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates the use of a JavaScript object following the assertion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7add4cb234313d7a64f6b6d8334c989eb68f3f57" translate="yes" xml:space="preserve">
          <source>The following code example shows the use of &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../performance/now&quot;&gt;&lt;code&gt;Performance.now()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;../performance/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; method returns a &lt;em&gt;timestamp&lt;/em&gt; (of type &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt;) that is a discrete point in time. By calling this method before and after a task, the time it takes to do the task can be measured.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
